diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle
index f9a2b41aa..898087a9b 100644
--- a/buildSrc/build.gradle
+++ b/buildSrc/build.gradle
@@ -14,6 +14,7 @@
 
 plugins {
     id 'java-gradle-plugin'
+    id 'groovy'
 }
 
 repositories {
@@ -37,8 +38,13 @@ dependencies {
     implementation "com.jaredsburrows:gradle-license-plugin:0.8.1"
     implementation 'digital.wup:android-maven-publish:3.6.2'
 
+    implementation 'io.opencensus:opencensus-api:0.18.0'
+    implementation 'io.opencensus:opencensus-exporter-stats-stackdriver:0.18.0'
+    runtime 'io.opencensus:opencensus-impl:0.18.0'
+
     implementation 'com.android.tools.build:gradle:3.2.1'
     testImplementation 'junit:junit:4.12'
+    testImplementation 'org.json:json:20180813'
     testImplementation('org.spockframework:spock-core:1.1-groovy-2.4') {
         exclude group: 'org.codehaus.groovy'
     }
@@ -65,4 +71,4 @@ test {
         showStandardStreams = true
     }
     enabled = rootProject.properties.get('enablePluginTests', false).toBoolean()
-}
\ No newline at end of file
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/GenerateMeasurementsTask.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/GenerateMeasurementsTask.groovy
deleted file mode 100644
index 93fa0cf00..000000000
--- a/buildSrc/src/main/groovy/com/google/firebase/gradle/GenerateMeasurementsTask.groovy
+++ /dev/null
@@ -1,226 +0,0 @@
-// Copyright 2018 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-
-package com.google.firebase.gradle
-
-import org.gradle.api.DefaultTask
-import org.gradle.api.Task
-import org.gradle.api.tasks.InputFile
-import org.gradle.api.tasks.OutputFile
-import org.gradle.api.tasks.TaskAction
-
-/**
- * Generates size measurements after building the test apps and outputs them as a text-format
- * protocol buffer report.
- *
- * <p>This task requires two properties, an SDK map, as input, and the report, as output. The map is
- * used to convert project names and build variants into the SDK identifiers used by the database.
- * The report path is where the output should be stored. Additionally, a project property, {@code
- * pull_request} is used in the report. Excluding this value will send a human-readable version
- * to standard out.
- */
-public class GenerateMeasurementsTask extends DefaultTask {
-
-    /**
-     * The file storing the SDK map.
-     *
-     * <p>This may be any type recognized by Gradle as a file. The format of the file's contents is
-     * headerless CSV with a colon as a delimiter: projectName-buildVariant:sdkId. The first column
-     * contains both the project name and build variant separated by an hyphen. The SDK ID is the
-     * integer identifier used by the SQL database to represent this SDK and build variant pair.
-     *
-     * <p>A complete example follows:
-     * <pre>{@code
-     * database-debug:1
-     * database-release:2
-     * firestore-release:7
-     * firestore-debug:4
-     *}</pre>
-     */
-    @InputFile
-    File sdkMapFile
-
-    /**
-     * The file for storing the report.
-     *
-     * <p>This may be any type recognized by Gradle as a file. The contents, if any, will be
-     * overwritten by the new report.
-     */
-    @OutputFile
-    File reportFile
-
-    @Override
-    Task configure(Closure closure) {
-        project.android.variantFilter {
-            if (it.buildType.name != "aggressive") {
-                it.ignore = true;
-            }
-        }
-
-        outputs.upToDateWhen { false }
-        dependsOn "assemble"
-        return super.configure(closure)
-    }
-
-    @TaskAction
-    def generate() {
-        // Check if we need to run human-readable or upload mode.
-        if (project.hasProperty("pull_request")) {
-            def pullRequestNumber = project.properties["pull_request"]
-            def sdkMap = createSdkMap()
-            def sizes = calculateSizesForUpload(sdkMap, project.android.applicationVariants)
-            def report = createReportForUpload(pullRequestNumber, sizes)
-
-            reportFile.withWriter {
-                it.write(report)
-            }
-        } else {
-            def sizes = calculateHumanReadableSizes(project.android.applicationVariants)
-            printHumanReadableReport(sizes)
-        }
-    }
-
-    private def calculateHumanReadableSizes(variants) {
-        def sizes = [:]
-        def processor = {flavor, build, size ->
-            sizes[new Tuple2(flavor, build)] = size
-        }
-
-        calculateSizesFor(variants, processor)
-        return sizes
-    }
-
-    private def calculateSizesForUpload(sdkMap, variants) {
-        def sizes = [:]
-        def processor = { flavor, build, size ->
-            def name = "${flavor}-${build}"
-            def sdk = sdkMap[name];
-
-            if (sdk == null) {
-                throw new IllegalStateException("$name not included in SDK map")
-            }
-            sizes[sdk] = size
-        }
-
-        calculateSizesFor(variants, processor)
-        return sizes
-    }
-
-    private def calculateSizesFor(variants, processor) {
-        // Each variant should have exactly one APK. If there are multiple APKs, then this file is
-	// out of sync with our Gradle configuration, and this task fails. If an APK is missing, it
-	// is silently ignored, and the APKs from the other variants will be used to build the
-	// report.
-        variants.each { variant ->
-            def flavorName = variant.flavorName
-            def buildType = variant.buildType.name
-            def apks = variant.outputs.findAll { it.outputFile.name.endsWith(".apk") }
-            if (apks.size() > 1) {
-	        def msg = "${flavorName}-${buildType} produced more than one APK"
-                throw new IllegalStateException(msg)
-            }
-
-            // This runs at most once, as each variant at this point has zero or one APK.
-            apks.each {
-                def size = it.outputFile.size()
-                processor.call(flavorName, buildType, size)
-            }
-        }
-    }
-
-    private def printHumanReadableReport(sizes) {
-        project.logger.quiet("|------------------        APK Sizes        ------------------|")
-        project.logger.quiet("|--    project    --|--  build type   --|--  size in bytes  --|")
-
-        sizes.each { key, value ->
-            def line = sprintf("|%-19s|%-19s|%-21s|", key.first, key.second, value)
-            project.logger.quiet(line)
-        }
-    }
-
-    // TODO(allisonbm): Remove hard-coding protocol buffers. This code manually generates the
-    // text-format protocol buffer report. This eliminates requiring buildSrc to depend on the
-    // uploader (or simply, the protocol buffer library), but this isn't the most scalable option.
-    private def createReportForUpload(pullRequestNumber, sizes) {
-        def sdkId = 0
-        def apkSize = 0
-
-        def pullRequestGroup = """
-            groups {
-                table_name: "PullRequests"
-                column_names: "pull_request_id"
-                measurements {
-                    values {
-                        int_value: ${pullRequestNumber}
-                    }
-                }
-            }
-        """
-
-        def sizeGroupHeader = """
-            groups {
-                table_name: "ApkSizes"
-                column_names: "sdk_id"
-                column_names: "pull_request_id"
-                column_names: "apk_size"
-        """
-
-        def sizeGroupEntry = """
-                measurements {
-                    values {
-                        int_value: ${->sdkId}
-                    }
-                    values {
-                        int_value: ${pullRequestNumber}
-                    }
-                    values {
-                        int_value: ${->apkSize}
-                    }
-                }
-        """
-
-        def sizeGroupFooter = """
-            }
-        """
-
-
-        def builder = new StringBuilder()
-        builder.append(pullRequestGroup)
-        builder.append(sizeGroupHeader)
-
-        sizes.each { key, value ->
-            // sdkId and apkSize are lazily interpolated into sizeGroupEntry.
-            sdkId = key
-            apkSize = value
-            builder.append(sizeGroupEntry)
-        }
-
-        builder.append(sizeGroupFooter)
-        return builder.toString()
-    }
-
-    private def createSdkMap() {
-        def map = [:]
-
-        sdkMapFile.eachLine {
-            def delimiter = it.indexOf(":")
-            def key = it.substring(0, delimiter).trim()
-            def value = it.substring(delimiter + 1).trim()
-            map[key] = Integer.parseInt(value)
-        }
-
-        return map
-    }
-}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/AffectedProjectFinder.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/AffectedProjectFinder.groovy
new file mode 100644
index 000000000..d04607189
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/AffectedProjectFinder.groovy
@@ -0,0 +1,80 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.ci
+
+import groovy.transform.builder.Builder
+
+import java.util.regex.Pattern
+import org.gradle.api.Project
+
+/** Determines a set of subprojects that own the 'changedPaths'. */
+class AffectedProjectFinder {
+    Project project;
+    Set<String> changedPaths;
+
+    @Builder
+    AffectedProjectFinder(Project project,
+                          Set<String> changedPaths,
+                          List<Pattern> ignorePaths) {
+        this.project = project
+        this.changedPaths = changedPaths.findAll {
+            for(def path : ignorePaths) {
+                if(it ==~ path) {
+                    return false
+                }
+            }
+            return true
+        }
+    }
+
+    Set<Project> find() {
+        Set<String> paths = changedPaths.collect()
+        def projects = changedSubProjects(project, paths)
+
+        if(!containsRootProject(projects)) {
+            return projects
+        }
+        return project.subprojects
+    }
+
+    /**
+     * Performs a post-order project tree traversal and returns a set of projects that own the
+     * 'changedPaths'.
+     */
+    private static Set<Project> changedSubProjects(Project project, Set<String> changedPaths) {
+        // project.subprojects include all descendents of a given project, we only want immediate
+        // children.
+        Set<Project> immediateChildProjects = project.subprojects.findAll { it.parent == project }
+
+        Set<Project> projects = immediateChildProjects.collectMany {
+            changedSubProjects(it, changedPaths)
+        }
+        def relativePath = project.rootDir.toURI().relativize(project.projectDir.toURI()).toString()
+
+        Iterator itr = changedPaths.iterator()
+        while (itr.hasNext()) {
+            def file = itr.next()
+            if (file.startsWith(relativePath)) {
+                itr.remove()
+                projects.add(project)
+            }
+        }
+        return projects
+    }
+
+    private static boolean containsRootProject(Set<Project> projects) {
+        return projects.any { it.rootProject == it };
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/ContinuousIntegrationExtension.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/ContinuousIntegrationExtension.groovy
new file mode 100644
index 000000000..8539fcf16
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/ContinuousIntegrationExtension.groovy
@@ -0,0 +1,23 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.ci
+
+import java.util.regex.Pattern
+
+/** Contains plugin configuration properties. */
+class ContinuousIntegrationExtension {
+    /** List of paths that the plugin should ignore when querying the Git commit. */
+    List<Pattern> ignorePaths = []
+}
\ No newline at end of file
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/ContinuousIntegrationPlugin.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/ContinuousIntegrationPlugin.groovy
new file mode 100644
index 000000000..06c27f96d
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/ContinuousIntegrationPlugin.groovy
@@ -0,0 +1,141 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.ci
+
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+import org.gradle.api.Task
+
+
+/**
+ * Provides 'checkChanged' and 'connectedCheckChanged' tasks to the root project.
+ *
+ * <p>The task definition is dynamic and depends on the latest git changes in the project. Namely
+ * it gets a list of changed files from the latest Git pull/merge and determines which subprojects
+ * the files belong to. Then, for each affected project, it declares a dependency on the
+ * 'checkDependents' or 'connectedCheckChanged' task respectively in that project.
+ *
+ * <p>Note: If the commits contain a file that does not belong to any subproject, *all* subprojects
+ * will be built.
+ */
+class ContinuousIntegrationPlugin implements Plugin<Project> {
+
+    @Override
+    void apply(Project project) {
+
+        def extension = project.extensions.create(
+                "firebaseContinuousIntegration",
+                ContinuousIntegrationExtension)
+
+        project.configure(project.subprojects) {
+            def checkDependents = it.task('checkDependents') {}
+            def connectedCheckDependents = it.task('connectedCheckDependents')
+
+            configurations.all {
+                if (it.name == 'debugUnitTestRuntimeClasspath') {
+                    checkDependents.dependsOn(configurations
+                            .debugUnitTestRuntimeClasspath.getTaskDependencyFromProjectDependency(
+                            false, "checkDependents"))
+                    checkDependents.dependsOn 'check'
+                }
+
+                if (it.name == 'debugAndroidTestRuntimeClasspath') {
+                    connectedCheckDependents.dependsOn(configurations
+                            .debugAndroidTestRuntimeClasspath.getTaskDependencyFromProjectDependency(
+                            false, "connectedCheckDependents"))
+                    connectedCheckDependents.dependsOn 'connectedCheck'
+                }
+
+                if (it.name == 'annotationProcessor') {
+                    connectedCheckDependents.dependsOn(configurations
+                            .annotationProcessor.getTaskDependencyFromProjectDependency(
+                            false, "connectedCheckDependents"))
+                    checkDependents.dependsOn(configurations
+                            .annotationProcessor.getTaskDependencyFromProjectDependency(
+                            false, "checkDependents"))
+                }
+            }
+
+            afterEvaluate {
+                // non-android projects need to define the custom configurations due to the way
+                // getTaskDependencyFromProjectDependency works.
+                if (!isAndroidProject(it)) {
+                    configurations {
+                        debugUnitTestRuntimeClasspath
+                        debugAndroidTestRuntimeClasspath
+                        annotationProcessor
+                    }
+                    // noop task to avoid having to handle the edge-case of tasks not being
+                    // defined.
+                    tasks.maybeCreate('connectedCheck')
+                    tasks.maybeCreate('check')
+                }
+            }
+        }
+
+        def affectedProjects = AffectedProjectFinder.builder()
+                .project(project)
+                .changedPaths(changedPaths(project.rootDir))
+                .ignorePaths(extension.ignorePaths)
+                .build()
+                .find()
+
+        project.task('checkChanged') { task ->
+            task.group = 'verification'
+            task.description = 'Runs the check task in all changed projects.'
+            affectedProjects.each {
+                task.dependsOn("$it.path:checkDependents")
+            }
+        }
+        project.task('connectedCheckChanged') { task ->
+            task.group = 'verification'
+            task.description = 'Runs the connectedCheck task in all changed projects.'
+            affectedProjects.each {
+                task.dependsOn("$it.path:connectedCheckDependents")
+            }
+        }
+
+        project.task('ciTasksSanityCheck') {
+            doLast {
+                [':firebase-common', ':tools:errorprone'].each { projectName ->
+                    def task = project.project(projectName).tasks.findByName('checkDependents')
+                    def dependents = task.taskDependencies.getDependencies(task).collect { it.path}
+
+                    def expectedDependents = [
+                            'database',
+                            'firestore',
+                            'functions',
+                            'storage'].collect { ":firebase-$it:checkDependents"}
+                    assert expectedDependents.intersect(dependents) == expectedDependents :
+                            "$projectName:checkDependents does not depend on expected projects"
+                }
+            }
+        }
+    }
+
+    private static Set<String> changedPaths(File workDir) {
+        return 'git diff --name-only --submodule=diff HEAD@{0} HEAD@{1}'
+                .execute([], workDir)
+                .text
+                .readLines()
+    }
+
+    private static final ANDROID_PLUGINS = ["com.android.application", "com.android.library",
+                                           "com.android.test"]
+
+    private static boolean isAndroidProject(Project project) {
+        ANDROID_PLUGINS.find { plugin -> project.plugins.hasPlugin(plugin) }
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/DrainingBuildListener.java b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/DrainingBuildListener.java
new file mode 100644
index 000000000..66ef19ce2
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/DrainingBuildListener.java
@@ -0,0 +1,53 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.ci.metrics;
+
+import org.gradle.BuildAdapter;
+import org.gradle.BuildResult;
+import org.gradle.api.logging.Logger;
+
+/**
+ * Build listener that waits for Stackdriver to export metrics before exiting.
+ *
+ * <p>Stackdriver exporter is implemented in such a way that it exports metrics on a periodic basis,
+ * with period being configurable. This means that, when the build finishes and exits, it is highly
+ * likely that there are unexported metrics in memory. For this reason we have this build listener
+ * that makes the gradle process sleep for the duration of the configured export period to make sure
+ * metrics get exported.
+ *
+ * @see <a
+ *     href="https://opencensus.io/exporters/supported-exporters/java/stackdriver-stats/">Opencensus
+ *     docs</a>
+ */
+class DrainingBuildListener extends BuildAdapter {
+  private final long sleepDuration;
+  private final Logger logger;
+
+  DrainingBuildListener(long sleepDuration, Logger logger) {
+    this.sleepDuration = sleepDuration;
+    this.logger = logger;
+  }
+
+  @Override
+  public void buildFinished(BuildResult result) {
+    try {
+      logger.lifecycle("Draining metrics to Stackdriver.");
+      Thread.sleep(sleepDuration);
+    } catch (InterruptedException e) {
+      // Restore the interrupted status
+      Thread.currentThread().interrupt();
+    }
+  }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/MeasuringTaskExecutionListener.java b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/MeasuringTaskExecutionListener.java
new file mode 100644
index 000000000..1ca34d694
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/MeasuringTaskExecutionListener.java
@@ -0,0 +1,92 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.ci.metrics;
+
+import java.util.ArrayDeque;
+import java.util.HashSet;
+import java.util.Queue;
+import java.util.Set;
+import org.gradle.api.Task;
+import org.gradle.api.execution.TaskExecutionGraph;
+import org.gradle.api.execution.TaskExecutionListener;
+import org.gradle.api.tasks.TaskState;
+
+class MeasuringTaskExecutionListener implements TaskExecutionListener {
+  private static final String METRICS_START_TIME = "metricsStartTime";
+  private static final String METRICS_ELAPSED_TIME = "metricsElapsedTime";
+
+  private final Metrics metrics;
+  private final TaskExecutionGraph taskGraph;
+
+  MeasuringTaskExecutionListener(Metrics metrics, TaskExecutionGraph taskGraph) {
+    this.metrics = metrics;
+    this.taskGraph = taskGraph;
+  }
+
+  @Override
+  public void beforeExecute(Task task) {
+    recordStart(task);
+  }
+
+  @Override
+  public void afterExecute(Task task, TaskState taskState) {
+    recordElapsed(task);
+    long elapsedTime = getTotalElapsed(task);
+
+    if (taskState.getFailure() != null) {
+      metrics.measureFailure(task);
+      return;
+    }
+    metrics.measureSuccess(task, elapsedTime);
+  }
+
+  private static void recordStart(Task task) {
+    task.getExtensions().add(METRICS_START_TIME, System.currentTimeMillis());
+  }
+
+  private static void recordElapsed(Task task) {
+    long startTime = (long) task.getExtensions().getByName(METRICS_START_TIME);
+    task.getExtensions().add(METRICS_ELAPSED_TIME, System.currentTimeMillis() - startTime);
+  }
+
+  private static long getElapsed(Task task) {
+    return (long) task.getExtensions().getByName(METRICS_ELAPSED_TIME);
+  }
+
+  // a tasks elapsed time does not include how long it took for its dependencies took to execute,
+  // so we walk the dependency graph to get the total elapsed time.
+  private long getTotalElapsed(Task task) {
+    Queue<Task> queue = new ArrayDeque<>();
+    queue.add(task);
+    Set<Task> visited = new HashSet<>();
+
+    long totalElapsed = 0;
+    while (!queue.isEmpty()) {
+      Task currentTask = queue.remove();
+      if (!visited.add(currentTask)) {
+        continue;
+      }
+
+      totalElapsed += getElapsed(currentTask);
+
+      for (Task dep : taskGraph.getDependencies(currentTask)) {
+        if (!visited.contains(dep)) {
+          queue.add(dep);
+        }
+      }
+    }
+    return totalElapsed;
+  }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/Metrics.java b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/Metrics.java
new file mode 100644
index 000000000..f96e7ee90
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/Metrics.java
@@ -0,0 +1,26 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.ci.metrics;
+
+import org.gradle.api.Task;
+
+/** Provides methods for measuring various parts of the build. */
+interface Metrics {
+  /** Measure successful execution of a task. */
+  void measureSuccess(Task task, long elapsedTime);
+
+  /** Measure task execution failure. */
+  void measureFailure(Task task);
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/MetricsPlugin.java b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/MetricsPlugin.java
new file mode 100644
index 000000000..910c4fe59
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/MetricsPlugin.java
@@ -0,0 +1,41 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.ci.metrics;
+
+import org.gradle.api.Plugin;
+import org.gradle.api.Project;
+import org.gradle.api.execution.TaskExecutionGraph;
+
+/** Instruments Gradle to measure latency and success rate of all executed tasks. */
+public class MetricsPlugin implements Plugin<Project> {
+  @Override
+  public void apply(Project project) {
+    if (!isCollectionEnabled()) {
+      project.getLogger().lifecycle("Metrics collection is disabled.");
+      return;
+    }
+    project.getLogger().lifecycle("Metrics collection is enabled.");
+
+    Metrics metrics = new StackdriverMetrics(project.getGradle(), project.getLogger());
+
+    TaskExecutionGraph taskGraph = project.getGradle().getTaskGraph();
+    taskGraph.addTaskExecutionListener(new MeasuringTaskExecutionListener(metrics, taskGraph));
+  }
+
+  private static boolean isCollectionEnabled() {
+    String enabled = System.getenv("FIREBASE_ENABLE_METRICS");
+    return enabled != null && enabled.equals("1");
+  }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/StackdriverMetrics.java b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/StackdriverMetrics.java
new file mode 100644
index 000000000..4ef071699
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/ci/metrics/StackdriverMetrics.java
@@ -0,0 +1,159 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.ci.metrics;
+
+import io.opencensus.common.Duration;
+import io.opencensus.exporter.stats.stackdriver.StackdriverStatsConfiguration;
+import io.opencensus.exporter.stats.stackdriver.StackdriverStatsExporter;
+import io.opencensus.stats.Aggregation;
+import io.opencensus.stats.Measure;
+import io.opencensus.stats.Stats;
+import io.opencensus.stats.View;
+import io.opencensus.tags.TagContext;
+import io.opencensus.tags.TagKey;
+import io.opencensus.tags.TagValue;
+import io.opencensus.tags.Tags;
+import io.opencensus.tags.propagation.TagContextBinarySerializer;
+import io.opencensus.tags.propagation.TagContextDeserializationException;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
+import org.gradle.api.GradleException;
+import org.gradle.api.Task;
+import org.gradle.api.invocation.Gradle;
+import org.gradle.api.logging.Logger;
+
+/**
+ * Object used to record measurements via {@link #measureSuccess(Task, long)} and {@link
+ * #measureFailure(Task)}.
+ */
+class StackdriverMetrics implements Metrics {
+  private static final AtomicBoolean STACKDRIVER_INITIALIZED = new AtomicBoolean();
+  private static final long STACKDRIVER_UPLOAD_PERIOD_MS = 5000;
+
+  private final TagContext globalContext;
+  private final Logger logger;
+
+  private static Measure.MeasureDouble M_LATENCY =
+      Measure.MeasureDouble.create("latency", "", "ms");
+  private static Measure.MeasureLong M_SUCCESS = Measure.MeasureLong.create("success", "", "1");
+
+  private static final TagKey STAGE = TagKey.create("stage");
+  private static final TagKey GRADLE_PROJECT = TagKey.create("gradle_project");
+
+  private static final List<TagKey> TAG_KEYS =
+      Arrays.asList(
+          STAGE,
+          GRADLE_PROJECT,
+          TagKey.create("repo_owner"),
+          TagKey.create("repo_name"),
+          TagKey.create("pull_number"),
+          TagKey.create("job_name"),
+          TagKey.create("build_id"),
+          TagKey.create("job_type"));
+
+  StackdriverMetrics(Gradle gradle, Logger logger) {
+    this.logger = logger;
+    globalContext = deserializeContext();
+
+    ensureStackdriver(gradle);
+
+    Stats.getViewManager()
+        .registerView(
+            View.create(
+                View.Name.create("fireci/tasklatency"),
+                "The latency in milliseconds",
+                M_LATENCY,
+                Aggregation.LastValue.create(),
+                TAG_KEYS));
+
+    Stats.getViewManager()
+        .registerView(
+            View.create(
+                View.Name.create("fireci/tasksuccess"),
+                "Indicated success or failure.",
+                M_SUCCESS,
+                Aggregation.LastValue.create(),
+                TAG_KEYS));
+  }
+
+  /** Records failure of the execution stage named {@code name}. */
+  public void measureFailure(Task task) {
+
+    TagContext ctx =
+        Tags.getTagger()
+            .toBuilder(globalContext)
+            .put(STAGE, TagValue.create(task.getName()))
+            .put(GRADLE_PROJECT, TagValue.create(task.getProject().getPath()))
+            .build();
+    Stats.getStatsRecorder().newMeasureMap().put(M_SUCCESS, 0).record(ctx);
+  }
+
+  /** Records success and latency of the execution stage named {@code name}. */
+  public void measureSuccess(Task task, long elapsedTime) {
+
+    TagContext ctx =
+        Tags.getTagger()
+            .toBuilder(globalContext)
+            .put(STAGE, TagValue.create(task.getName()))
+            .put(GRADLE_PROJECT, TagValue.create(task.getProject().getPath()))
+            .build();
+    Stats.getStatsRecorder()
+        .newMeasureMap()
+        .put(M_SUCCESS, 1)
+        .put(M_LATENCY, elapsedTime)
+        .record(ctx);
+  }
+
+  private void ensureStackdriver(Gradle gradle) {
+    // make sure we only initialize stackdriver once as gradle daemon is not guaranteed to restart
+    // across gradle invocations.
+    if (!STACKDRIVER_INITIALIZED.compareAndSet(false, true)) {
+      logger.lifecycle("Stackdriver exporter already initialized.");
+      return;
+    }
+    logger.lifecycle("Initializing Stackdriver exporter.");
+
+    try {
+      StackdriverStatsExporter.createAndRegister(
+          StackdriverStatsConfiguration.builder()
+              .setExportInterval(Duration.fromMillis(STACKDRIVER_UPLOAD_PERIOD_MS))
+              .build());
+
+      // make sure gradle does not exit before metrics get uploaded to stackdriver.
+      gradle.addBuildListener(new DrainingBuildListener(STACKDRIVER_UPLOAD_PERIOD_MS, logger));
+    } catch (IOException e) {
+      throw new GradleException("Could not configure metrics exporter", e);
+    }
+  }
+
+  /** Extract opencensus context(if any) from environment. */
+  private static TagContext deserializeContext() {
+    String serializedContext = System.getenv("OPENCENSUS_STATS_CONTEXT");
+    if (serializedContext == null) {
+      return Tags.getTagger().empty();
+    }
+
+    TagContextBinarySerializer serializer = Tags.getTagPropagationComponent().getBinarySerializer();
+
+    try {
+      return serializer.fromByteArray(Base64.getDecoder().decode(serializedContext));
+    } catch (TagContextDeserializationException e) {
+      return Tags.getTagger().empty();
+    }
+  }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeJsonBuilder.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeJsonBuilder.groovy
new file mode 100644
index 000000000..2fe734644
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeJsonBuilder.groovy
@@ -0,0 +1,68 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle.plugins.measurement
+
+/** A helper class that generates the APK size measurement JSON report. */
+class ApkSizeJsonBuilder {
+
+    private static final String PULL_REQUEST_TABLE = "PullRequests"
+    private static final String PULL_REQUEST_COLUMN = "pull_request_id"
+    private static final String APK_SIZE_TABLE = "ApkSizes"
+    private static final String SDK_COLUMN = "sdk_id"
+    private static final String APK_SIZE_COLUMN = "apk_size"
+
+    // This comes in as a String and goes out as a String, so we might as well keep it a String
+    private final String pullRequestNumber
+    private final List<Tuple2<Integer, Integer>> sdkSizes
+
+    ApkSizeJsonBuilder(pullRequestNumber) {
+        this.pullRequestNumber = pullRequestNumber
+        this.sdkSizes = []
+    }
+
+    def addApkSize(sdkId, size) {
+        sdkSizes.add(new Tuple2(sdkId, size))
+    }
+
+    def toJsonString() {
+        if (sdkSizes.isEmpty()) {
+            throw new IllegalStateException("No sizes were added")
+        }
+
+        def sizes = sdkSizes.collect {
+            "[$pullRequestNumber, $it.first, $it.second]"
+        }.join(", ")
+
+        def json = """
+            {
+                tables: [
+                    {
+                        table_name: "$PULL_REQUEST_TABLE",
+                        column_names: ["$PULL_REQUEST_COLUMN"],
+                        replace_measurements: [[$pullRequestNumber]],
+                    },
+                    {
+                        table_name: "$APK_SIZE_TABLE",
+                        column_names: ["$PULL_REQUEST_COLUMN", "$SDK_COLUMN", "$APK_SIZE_COLUMN"],
+                        replace_measurements: [$sizes],
+                    },
+                ],
+            }
+        """
+
+        return json
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTableBuilder.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTableBuilder.groovy
new file mode 100644
index 000000000..0cd2635df
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTableBuilder.groovy
@@ -0,0 +1,41 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle.plugins.measurement
+
+/** A helper class that generates the human-readable, APK size measurement table. */
+class ApkSizeTableBuilder {
+
+    private final List<Tuple> sdkSizes = []
+
+    def addApkSize(projectName, buildType, size) {
+        sdkSizes.add(new Tuple(projectName, buildType, size))
+    }
+
+    def toTableString() {
+        if (sdkSizes.isEmpty()) {
+          throw new IllegalStateException("No sizes added")
+        }
+
+        def table = "|------------------        APK Sizes        ------------------|\n"
+        table +=    "|--    project    --|--  build type   --|--  size in bytes  --|\n"
+
+        table += sdkSizes.collect {
+            sprintf("|%-19s|%-19s|%-21s|", it.get(0), it.get(1), it.get(2))
+        }.join("\n")
+
+        return table
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/GenerateMeasurementsTask.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/GenerateMeasurementsTask.groovy
new file mode 100644
index 000000000..74329b265
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/GenerateMeasurementsTask.groovy
@@ -0,0 +1,158 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle.plugins.measurement
+
+import org.gradle.api.DefaultTask
+import org.gradle.api.Task
+import org.gradle.api.tasks.InputFile
+import org.gradle.api.tasks.OutputFile
+import org.gradle.api.tasks.TaskAction
+
+/**
+ * Generates size measurements after building the test apps.
+ *
+ * <p>This task can run in two modes. The first mode, is a dependency for {@link
+ * UploadMeasurementsTask} and generates a JSON file with measurement information. This file
+ * references database IDs, and is not considered to be human-friendly. The second mode outputs a
+ * table to standard out with more useful information. These modes can be toggled by adding the
+ * {@code pull_request} flag to the task. See the README for more details.
+ *
+ * <p>This task requires two properties, an SDK map, as input, and the report, as output. The map is
+ * used to convert project names and build variants into the SDK identifiers used by the database.
+ * The report path is where the output should be stored. These properties are not used when the task
+ * is run in the second, humna-friendly mode. However, they are still required to be specified.
+ */
+public class GenerateMeasurementsTask extends DefaultTask {
+
+    /**
+     * The file storing the SDK map.
+     *
+     * <p>This may be any type recognized by Gradle as a file. The format of the file's contents is
+     * headerless CSV with a colon as a delimiter: projectName-buildVariant:sdkId. The first column
+     * contains both the project name and build variant separated by an hyphen. The SDK ID is the
+     * integer identifier used by the SQL database to represent this SDK and build variant pair.
+     *
+     * <p>A complete example follows:
+     * <pre>{@code
+     * database-debug:1
+     * database-release:2
+     * firestore-release:7
+     * firestore-debug:4
+     *}</pre>
+     */
+    @InputFile
+    File sdkMapFile
+
+    /**
+     * The file for storing the report.
+     *
+     * <p>This may be any type recognized by Gradle as a file. The contents, if any, will be
+     * overwritten by the new report.
+     */
+    @OutputFile
+    File reportFile
+
+    @Override
+    Task configure(Closure closure) {
+        project.android.variantFilter {
+            if (it.buildType.name != "aggressive") {
+                it.ignore = true;
+            }
+        }
+
+        outputs.upToDateWhen { false }
+        dependsOn "assemble"
+        return super.configure(closure)
+    }
+
+    @TaskAction
+    def generate() {
+        def variants = project.android.applicationVariants
+
+        // Check if we need to run human-readable table or JSON upload mode.
+        if (project.hasProperty("pull_request")) {
+            def pullRequestNumber = project.properties["pull_request"]
+            generateJson(pullRequestNumber, variants)
+        } else {
+            generateTable(variants)
+        }
+    }
+
+    private def generateJson(pullRequestNumber, variants) {
+        def sdkMap = createSdkMap()
+        def builder = new ApkSizeJsonBuilder(pullRequestNumber)
+        def variantProcessor = {projectName, buildType, apkSize ->
+            def name = "$projectName-$buildType"
+            def sdkId = sdkMap[name]
+
+            if (sdkId == null) {
+                throw new IllegalStateException("$name not included in SDK map")
+            }
+
+            builder.addApkSize(sdkId, apkSize)
+        }
+
+        calculateSizes(variants, variantProcessor)
+        reportFile.withWriter {
+            it.write(builder.toJsonString())
+        }
+    }
+
+    private def generateTable(variants) {
+        def builder = new ApkSizeTableBuilder()
+        def variantProcessor = {projectName, buildType, apkSize ->
+            builder.addApkSize(projectName, buildType, apkSize)
+        }
+
+        calculateSizes(variants, variantProcessor)
+        project.logger.quiet(builder.toTableString())
+    }
+
+    private def calculateSizes(variants, processor) {
+        // Each variant should have exactly one APK. If there are multiple APKs, then this file is
+        // out of sync with our Gradle configuration, and this task fails. If an APK is missing, it
+        // is silently ignored, and the APKs from the other variants will be used to build the
+        // report.
+        variants.each { variant ->
+            def flavorName = variant.flavorName
+            def buildType = variant.buildType.name
+            def apks = variant.outputs.findAll { it.outputFile.name.endsWith(".apk") }
+            if (apks.size() > 1) {
+                def msg = "${flavorName}-${buildType} produced more than one APK"
+                throw new IllegalStateException(msg)
+            }
+
+            // This runs at most once, as each variant at this point has zero or one APK.
+            apks.each {
+                def size = it.outputFile.size()
+                processor.call(flavorName, buildType, size)
+            }
+        }
+    }
+
+    private def createSdkMap() {
+        def map = [:]
+
+        sdkMapFile.eachLine {
+            def delimiter = it.indexOf(":")
+            def key = it.substring(0, delimiter).trim()
+            def value = it.substring(delimiter + 1).trim()
+            map[key] = Integer.parseInt(value)
+        }
+
+        return map
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/UploadMeasurementsTask.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/UploadMeasurementsTask.groovy
similarity index 96%
rename from buildSrc/src/main/groovy/com/google/firebase/gradle/UploadMeasurementsTask.groovy
rename to buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/UploadMeasurementsTask.groovy
index 21af89d39..5311a3a54 100644
--- a/buildSrc/src/main/groovy/com/google/firebase/gradle/UploadMeasurementsTask.groovy
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/UploadMeasurementsTask.groovy
@@ -13,7 +13,7 @@
 // limitations under the License.
 
 
-package com.google.firebase.gradle
+package com.google.firebase.gradle.plugins.measurement
 
 import java.net.URL
 import java.nio.file.Files
@@ -72,7 +72,7 @@ public class UploadMeasurementsTask extends DefaultTask {
                     "-jar",
                     jar,
                     "--config_path=${configuration}",
-                    "--proto_path=${reportFile}",
+                    "--json_path=${reportFile}",
                 )
             }.rethrowFailure()
         }
diff --git a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/license/LicenseResolverPluginSpec.groovy b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/license/LicenseResolverPluginSpec.groovy
index 440a2cfe2..96911854c 100644
--- a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/license/LicenseResolverPluginSpec.groovy
+++ b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/license/LicenseResolverPluginSpec.groovy
@@ -50,7 +50,7 @@ class LicenseResolverPluginSpec extends Specification {
         }
         dependencies {
             implementation 'com.squareup.picasso:picasso:2.71828'
-            implementation 'com.squareup.okhttp:okhttp:2.7.2'
+            implementation 'com.squareup.okhttp:okhttp:2.7.5'
         }
 
         thirdPartyLicenses {
diff --git a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeJsonBuilderTest.groovy b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeJsonBuilderTest.groovy
new file mode 100644
index 000000000..c1437a761
--- /dev/null
+++ b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeJsonBuilderTest.groovy
@@ -0,0 +1,113 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle.plugins.measurement
+
+import static org.junit.Assert.assertEquals
+
+import org.json.JSONObject
+import org.junit.Assert
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.JUnit4
+
+@RunWith(JUnit4.class)
+public class ApkSizeJsonBuilderTest {
+
+  @Test(expected = IllegalStateException.class)
+  public void toJsonString_ThrowsWhenZeroAdded() {
+    def builder = new ApkSizeJsonBuilder(13)
+    builder.toJsonString()
+  }
+
+  @Test
+  public void toJsonString_hasPullRequestTable() {
+    def builder = new ApkSizeJsonBuilder(117)
+    builder.addApkSize(5, 145000)
+    def json = new JSONObject(builder.toJsonString())
+
+    def prTable = json.getJSONArray("tables").getJSONObject(0)
+    def prColumns = prTable.getJSONArray("column_names")
+    def prMeasurements = prTable.getJSONArray("replace_measurements")
+
+    assertEquals("Bad table name", "PullRequests", prTable.getString("table_name"))
+    assertEquals("Bad column name", "pull_request_id", prColumns.getString(0))
+    assertEquals("Bad pull request number", 117, prMeasurements.getJSONArray(0).getInt(0))
+    assertEquals("Too many columns", 1, prColumns.length())
+    assertEquals("Too many pull requests", 1, prMeasurements.length())
+    assertEquals("Too many pull request numbers", 1, prMeasurements.getJSONArray(0).length())
+  }
+
+  @Test
+  public void toJsonString_hasApkSizeTableWithOneMeasurement() {
+    def builder = new ApkSizeJsonBuilder(2115)
+    builder.addApkSize(37, 577000)
+    def json = new JSONObject(builder.toJsonString())
+
+    def asTable = json.getJSONArray("tables").getJSONObject(1)
+    def asColumns = asTable.getJSONArray("column_names")
+    def asMeasurements = asTable.getJSONArray("replace_measurements")
+
+    assertEquals("Bad table name", "ApkSizes", asTable.getString("table_name"))
+    assertEquals("Bad column name", "pull_request_id", asColumns.getString(0))
+    assertEquals("Bad column name", "sdk_id", asColumns.getString(1))
+    assertEquals("Bad column name", "apk_size", asColumns.getString(2))
+    assertEquals("Bad pull request number", 2115, asMeasurements.getJSONArray(0).getInt(0))
+    assertEquals("Bad SDK ID", 37, asMeasurements.getJSONArray(0).getInt(1))
+    assertEquals("Bad APK size", 577000, asMeasurements.getJSONArray(0).getInt(2))
+    assertEquals("Too many columns", 3, asColumns.length())
+    assertEquals("Too many measurements", 1, asMeasurements.length())
+    assertEquals("Too many values", 3, asMeasurements.getJSONArray(0).length())
+  }
+
+  @Test
+  public void toJsonString_hasApkSizeTableWithThreeMeasurements() {
+    def builder = new ApkSizeJsonBuilder(5)
+    builder.addApkSize(37, 577000)
+    builder.addApkSize(14, 819000)
+    builder.addApkSize(92, 133000)
+    def json = new JSONObject(builder.toJsonString())
+
+    def asTable = json.getJSONArray("tables").getJSONObject(1)
+    def asColumns = asTable.getJSONArray("column_names")
+    def asMeasurements = asTable.getJSONArray("replace_measurements")
+
+    // The table itself.
+    assertEquals("Bad table name", "ApkSizes", asTable.getString("table_name"))
+    assertEquals("Bad column name", "pull_request_id", asColumns.getString(0))
+    assertEquals("Bad column name", "sdk_id", asColumns.getString(1))
+    assertEquals("Bad column name", "apk_size", asColumns.getString(2))
+    assertEquals("Too many columns", 3, asColumns.length())
+    assertEquals("Too many measurements", 3, asMeasurements.length())
+
+    // First measurement.
+    assertEquals("Bad pull request number", 5, asMeasurements.getJSONArray(0).getInt(0))
+    assertEquals("Bad SDK ID", 37, asMeasurements.getJSONArray(0).getInt(1))
+    assertEquals("Bad APK size", 577000, asMeasurements.getJSONArray(0).getInt(2))
+    assertEquals("Too many values", 3, asMeasurements.getJSONArray(0).length())
+
+    // Second measurement.
+    assertEquals("Bad pull request number", 5, asMeasurements.getJSONArray(1).getInt(0))
+    assertEquals("Bad SDK ID", 14, asMeasurements.getJSONArray(1).getInt(1))
+    assertEquals("Bad APK size", 819000, asMeasurements.getJSONArray(1).getInt(2))
+    assertEquals("Too many values", 3, asMeasurements.getJSONArray(1).length())
+
+    // Third measurement.
+    assertEquals("Bad pull request number", 5, asMeasurements.getJSONArray(2).getInt(0))
+    assertEquals("Bad SDK ID", 92, asMeasurements.getJSONArray(2).getInt(1))
+    assertEquals("Bad APK size", 133000, asMeasurements.getJSONArray(2).getInt(2))
+    assertEquals("Too many values", 3, asMeasurements.getJSONArray(2).length())
+  }
+}
diff --git a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTableBuilderTest.groovy b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTableBuilderTest.groovy
new file mode 100644
index 000000000..948e85ad1
--- /dev/null
+++ b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTableBuilderTest.groovy
@@ -0,0 +1,63 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle.plugins.measurement
+
+import static org.junit.Assert.assertEquals
+
+import org.junit.Assert
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.JUnit4
+
+@RunWith(JUnit4.class)
+public class ApkSizeTableBuilderTest {
+
+  private static final String HEADER =
+      "|------------------        APK Sizes        ------------------|\n" +
+      "|--    project    --|--  build type   --|--  size in bytes  --|\n"
+
+  @Test(expected = IllegalStateException.class)
+  public void toTableString_throwsWhenZeroAdded() {
+    def builder = new ApkSizeTableBuilder()
+    builder.toTableString()
+  }
+
+  @Test
+  public void toTableString_withOneMeasurement() {
+    def expected = HEADER +
+        "|firebase foo       |debug              |255000               |"
+
+    def builder = new ApkSizeTableBuilder()
+    builder.addApkSize("firebase foo", "debug", 255000)
+
+    assertEquals(expected, builder.toTableString())
+  }
+
+  @Test
+  public void toTableString_withThreeMeasurements() {
+    def expected = HEADER +
+        "|firebase foo       |debug              |255000               |\n" +
+        "|google loo         |release            |4000                 |\n" +
+        "|Appy Snap App      |Snappy             |781000               |"
+
+    def builder = new ApkSizeTableBuilder()
+    builder.addApkSize("firebase foo", "debug", 255000)
+    builder.addApkSize("google loo", "release", 4000)
+    builder.addApkSize("Appy Snap App", "Snappy", 781000)
+
+    assertEquals(expected, builder.toTableString())
+  }
+}
diff --git a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTestProject.groovy b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTestProject.groovy
new file mode 100644
index 000000000..ae66ca797
--- /dev/null
+++ b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/ApkSizeTestProject.groovy
@@ -0,0 +1,186 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//            http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.measurement
+
+import java.nio.file.Files
+import java.nio.file.Path
+import java.nio.file.Paths
+import org.gradle.testkit.runner.BuildResult
+import org.gradle.testkit.runner.GradleRunner
+import org.junit.rules.ExternalResource
+import org.junit.rules.TemporaryFolder
+
+/** Test rule for creating test Gradle projects for the APK size tooling. */
+class ApkSizeTestProject extends ExternalResource {
+
+    private static final String BUILD_GRADLE = """
+        import com.google.firebase.gradle.plugins.measurement.GenerateMeasurementsTask
+        import com.google.firebase.gradle.plugins.measurement.UploadMeasurementsTask
+
+        buildscript {
+            repositories {
+                google()
+        jcenter()
+            }
+
+            dependencies {
+                classpath "com.android.tools.build:gradle:3.2.1"
+            }
+        }
+
+        repositories {
+            google()
+            jcenter()
+        }
+
+        apply plugin: "com.android.application"
+
+        android {
+            compileSdkVersion 26
+            defaultConfig {
+                minSdkVersion 26
+        targetSdkVersion 26
+            }
+
+            flavorDimensions "apkSize"
+
+            buildTypes {
+                aggressive {
+            debuggable false
+        }
+            }
+
+            productFlavors {
+                horseshoe {
+            dimension "apkSize"
+            applicationId "com.google.testapk.horseshoe"
+        }
+
+                vanilla {
+            dimension "apkSize"
+            applicationId "com.google.testapk.vanilla"
+        }
+
+                furball {
+            dimension "apkSize"
+            applicationId "com.google.testapk.furball"
+        }
+            }
+
+            sourceSets {
+                horseshoe {
+            java.srcDirs = ["src/horseshoe/java"]
+        }
+
+                vanilla {
+            java.srcDirs = ["src/vanilla/java"]
+        }
+
+                furball {
+            java.srcDirs = ["src/furball/java"]
+        }
+            }
+        }
+
+        task generate(type: GenerateMeasurementsTask) {
+            sdkMapFile = file("test-sdk-map.csv")
+            reportFile = file("test-report-file.json")
+        }
+
+        task upload(type: UploadMeasurementsTask) {
+            dependsOn generate
+
+            reportFile = file("test-report-file.json")
+            uploader = "https://storage.googleapis.com/firebase-engprod-metrics/upload_tool.jar"
+        }
+    """
+
+    private static final String ANDROID_XML = """<?xml version="1.0" encoding="utf-8"?>
+        <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example">
+            <uses-sdk android:minSdkVersion="14"/>
+        </manifest>
+    """
+
+    private static final String JAVA_FILE = """
+        package com.example;
+
+        public class A {}
+    """
+
+    private static final String SDK_MAP = """horseshoe-aggressive:2
+        vanilla-aggressive:1
+        furball-aggressive:3"""
+
+    private final TemporaryFolder projectDirectory = new TemporaryFolder()
+
+    public Path getApkSizeReportPath() {
+        return projectDirectory.getRoot().toPath().resolve("test-report-file.json")
+    }
+
+    @Override
+    protected void before() {
+        projectDirectory.create()
+        createProjectFiles()
+        copyBuildSrcFiles()
+    }
+
+    /** Builds the test project in the temporary directory. */
+    BuildResult build(String... args) {
+        def projectDir = projectDirectory.getRoot()
+        return GradleRunner.create().withProjectDir(projectDir).withArguments(args).build()
+    }
+
+    @Override
+    protected void after() {
+        projectDirectory.delete()
+    }
+
+    /** Copies the buildSrc files for the APK size tooling into the temporary project. */
+    private void copyBuildSrcFiles() {
+        def src = Paths.get("src/main/groovy/com/google/firebase/gradle/plugins/measurement")
+        def buildSrc = projectDirectory.getRoot().toPath().resolve("buildSrc")
+        def dest = buildSrc.resolve(src)
+
+        Files.createDirectories(dest)
+        Files.list(src)
+            .map { path -> path.getFileName().toString() }
+            .filter { name -> name.endsWith(".groovy") }
+            .forEach { name -> Files.copy(src.resolve(name), dest.resolve(name)) }
+    }
+
+    /** Creates the fake project files for the temporary project. */
+    private void createProjectFiles() {
+        def root = projectDirectory.getRoot().toPath()
+
+        root.resolve("build.gradle") << BUILD_GRADLE
+        root.resolve("test-sdk-map.csv") << SDK_MAP
+        def horseshoe = root.resolve("src/horseshoe/java/com/example")
+        def vanilla = root.resolve("src/vanilla/java/com/example")
+        def furball = root.resolve("src/furball/java/com/example")
+        def main = root.resolve("src/main")
+
+        Files.createDirectories(main)
+        main.resolve("AndroidManifest.xml") << ANDROID_XML
+
+        Files.createDirectories(horseshoe)
+        horseshoe.resolve("A.java") << JAVA_FILE
+
+        Files.createDirectories(vanilla)
+        vanilla.resolve("A.java") << JAVA_FILE
+
+        Files.createDirectories(furball)
+        furball.resolve("A.java") << JAVA_FILE
+    }
+}
diff --git a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/GenerateMeasurementsTaskTest.groovy b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/GenerateMeasurementsTaskTest.groovy
new file mode 100644
index 000000000..0bbef26b2
--- /dev/null
+++ b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/GenerateMeasurementsTaskTest.groovy
@@ -0,0 +1,56 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//            http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.measurement
+
+import static org.junit.Assert.assertFalse
+import static org.junit.Assert.assertTrue
+
+import java.nio.file.Files
+import org.gradle.testkit.runner.BuildResult
+import org.gradle.testkit.runner.TaskOutcome
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.JUnit4
+
+/** Smoke tests for the generate measurements task. */
+@RunWith(JUnit4.class)
+public class GenerateMeasurementsTaskTest {
+
+    @Rule public final ApkSizeTestProject testProject = new ApkSizeTestProject()
+
+    @Test
+    public void generate_withJson() {
+        BuildResult result = testProject.build("generate", "-Ppull_request=977")
+
+        if (!result.tasks(TaskOutcome.FAILED).isEmpty()) {
+            throw new AssertionError("Smoke test for generate failed", result.getFailure())
+        }
+
+	assertTrue(Files.exists(testProject.getApkSizeReportPath()))
+    }
+
+    @Test
+    public void generate_withTable() {
+        BuildResult result = testProject.build("generate")
+
+        if (!result.tasks(TaskOutcome.FAILED).isEmpty()) {
+            throw new AssertionError("Smoke test for generate failed", result.getFailure())
+        }
+
+	assertFalse(Files.exists(testProject.getApkSizeReportPath()))
+        assertTrue("Output missing `APK Sizes`", result.getOutput().contains("APK Sizes"))
+    }
+}
diff --git a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/publish/PublishingPluginSpec.groovy b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/publish/PublishingPluginSpec.groovy
index d75357e73..8ae88650e 100644
--- a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/publish/PublishingPluginSpec.groovy
+++ b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/publish/PublishingPluginSpec.groovy
@@ -33,7 +33,10 @@ class PublishingPluginSpec extends Specification {
         group = '${group}'
         version = '${version}'
         <% if (latestReleasedVersion) println "ext.latestReleasedVersion = $latestReleasedVersion" %>
-        
+        repositories {
+            google()
+            jcenter()
+	}
         dependencies {
             <%dependencies.each { println "implementation project(':$it.name')" } %>
         }
diff --git a/ci/fireci/fireci/commands.py b/ci/fireci/fireci/commands.py
index d32d4a5e7..db5bc4e12 100644
--- a/ci/fireci/fireci/commands.py
+++ b/ci/fireci/fireci/commands.py
@@ -17,6 +17,7 @@
 
 from . import gradle
 from . import ci_command
+from . import stats
 
 
 @click.argument('task', required=True, nargs=-1)
@@ -37,16 +38,26 @@ def gradle_command(task, gradle_opts):
     help=
     'App build variant to use while running the smoke Tests. One of release|debug'
 )
+@click.option(
+    '--test-apps-dir',
+    '-d',
+    multiple=True,
+    type=click.Path(exists=True, file_okay=False, resolve_path=True),
+    default=['test-apps'],
+    help=
+    'Directory that contains gradle build with apps to test against. Multiple values are allowed.'
+)
 @ci_command()
-def smoke_tests(app_build_variant):
+def smoke_tests(app_build_variant, test_apps_dir):
   """Builds all SDKs in release mode and then tests test-apps against them."""
   gradle.run('publishAllToBuildDir')
 
   cwd = os.getcwd()
-  gradle.run(
-      'connectedCheck',
-      '-PtestBuildType=%s' % (app_build_variant),
-      gradle_opts='-Dmaven.repo.local={}'.format(
-          os.path.join(cwd, 'build', 'm2repository')),
-      workdir=os.path.join(cwd, 'test-apps'),
-  )
+  for location in test_apps_dir:
+    gradle.run(
+        'connectedCheck',
+        '-PtestBuildType=%s' % (app_build_variant),
+        gradle_opts='-Dmaven.repo.local={}'.format(
+            os.path.join(cwd, 'build', 'm2repository')),
+        workdir=location,
+    )
diff --git a/ci/fireci/fireci/emulator.py b/ci/fireci/fireci/emulator.py
index 89edc4d65..51d058c0a 100644
--- a/ci/fireci/fireci/emulator.py
+++ b/ci/fireci/fireci/emulator.py
@@ -19,6 +19,8 @@
 import subprocess
 import time
 
+from . import stats
+
 _logger = logging.getLogger('fireci.emulator')
 
 EMULATOR_BINARY = 'emulator'
@@ -65,6 +67,7 @@ def __init__(
     self._wait_for_device_stdin = wait_for_device_stdin
     self._logcat_stdin = logcat_stdin
 
+  @stats.measure_call("emulator_startup")
   def __enter__(self):
     _logger.info('Starting avd "{}..."'.format(self._name))
     self._process = subprocess.Popen(
@@ -74,7 +77,7 @@ def __enter__(self):
         stdout=self._stdout,
         stderr=self._stderr)
     try:
-      self._wait_for_boot(datetime.timedelta(minutes=5))
+      self._wait_for_boot(datetime.timedelta(minutes=10))
     except:
       self._kill(self._process)
       self._close_files()
@@ -86,6 +89,7 @@ def __enter__(self):
         stdout=self._adb_log,
     )
 
+  @stats.measure_call("emulator_shutdown")
   def __exit__(self, exception_type, exception_value, traceback):
     _logger.info('Shutting down avd "{}"...'.format(self._name))
     self._kill(self._process)
diff --git a/ci/fireci/fireci/gradle.py b/ci/fireci/fireci/gradle.py
index dcb7e1c67..f715d9f86 100644
--- a/ci/fireci/fireci/gradle.py
+++ b/ci/fireci/fireci/gradle.py
@@ -17,6 +17,8 @@
 import subprocess
 import sys
 
+from . import stats
+
 _logger = logging.getLogger('fireci.gradle')
 
 ADB_INSTALL_TIMEOUT = '5'
@@ -27,6 +29,7 @@ def P(name, value):
   return '-P{}={}'.format(name, value)
 
 
+@stats.measure_call('gradle')
 def run(*args, gradle_opts='', workdir=None):
   """Invokes gradle with specified args and gradle_opts."""
   new_env = dict(os.environ)
@@ -34,6 +37,7 @@ def run(*args, gradle_opts='', workdir=None):
     new_env['GRADLE_OPTS'] = gradle_opts
   new_env[
       'ADB_INSTALL_TIMEOUT'] = ADB_INSTALL_TIMEOUT  # 5 minutes, rather than 2 minutes
+  stats.propagate_context_into(new_env)
 
   command = ['./gradlew'] + list(args)
   _logger.info('Executing gradle command: "%s" in directory: "%s"',
diff --git a/ci/fireci/fireci/internal.py b/ci/fireci/fireci/internal.py
index 84e88d9fe..b96a35ef6 100644
--- a/ci/fireci/fireci/internal.py
+++ b/ci/fireci/fireci/internal.py
@@ -22,6 +22,7 @@
 import shutil
 
 from . import emulator
+from . import stats
 
 _logger = logging.getLogger('fireci')
 
@@ -104,6 +105,11 @@ class _CommonOptions:
     default='adb',
     help='Specifies the name/full path to the adb binary.',
 )
+@click.option(
+    '--enable-metrics',
+    is_flag=True,
+    envvar='FIREBASE_ENABLE_METRICS',
+    help='Enables metrics collection for various build stages.')
 @_pass_options
 def main(options, **kwargs):
   """Main command group.
@@ -112,6 +118,8 @@ def main(options, **kwargs):
     """
   for k, v in kwargs.items():
     setattr(options, k, v)
+  if options.enable_metrics:
+    stats.configure()
 
 
 def ci_command(name=None):
@@ -127,18 +135,20 @@ def ci_command(name=None):
     """
 
   def ci_command(f):
+    actual_name = f.__name__ if name is None else name
 
-    @main.command(name=f.__name__ if name is None else name, help=f.__doc__)
+    @main.command(name=actual_name, help=f.__doc__)
     @_pass_options
     @click.pass_context
     def new_func(ctx, options, *args, **kwargs):
-      with _artifact_handler(options.artifact_target_dir,
-                             options.artifact_patterns), _emulator_handler(
-                                 options.with_emulator,
-                                 options.artifact_target_dir,
-                                 name=options.emulator_name,
-                                 emulator_binary=options.emulator_binary,
-                                 adb_binary=options.adb_binary):
+      with stats.measure("cicmd:" + actual_name), _artifact_handler(
+          options.artifact_target_dir,
+          options.artifact_patterns), _emulator_handler(
+              options.with_emulator,
+              options.artifact_target_dir,
+              name=options.emulator_name,
+              emulator_binary=options.emulator_binary,
+              adb_binary=options.adb_binary):
         return ctx.invoke(f, *args, **kwargs)
 
     return functools.update_wrapper(new_func, f)
diff --git a/ci/fireci/fireci/stats.py b/ci/fireci/fireci/stats.py
new file mode 100644
index 000000000..3893819c8
--- /dev/null
+++ b/ci/fireci/fireci/stats.py
@@ -0,0 +1,170 @@
+# Copyright 2018 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import base64
+import contextlib
+import copy
+import functools
+import google.auth
+import google.auth.exceptions
+import logging
+import os
+import time
+
+from opencensus import tags
+from opencensus.stats import aggregation
+from opencensus.stats import measure
+from opencensus.stats import stats
+from opencensus.stats import view
+from opencensus.stats.exporters import stackdriver_exporter
+from opencensus.stats.exporters.base import StatsExporter
+from opencensus.tags import execution_context
+from opencensus.tags.propagation import binary_serializer
+
+_logger = logging.getLogger('fireci.stats')
+STATS = stats.Stats()
+
+_m_latency = measure.MeasureFloat("latency", "The latency in milliseconds",
+                                  "ms")
+_m_success = measure.MeasureInt("success", "Indicated success or failure.", "1")
+
+_key_stage = tags.TagKey("stage")
+
+_TAGS = [
+    _key_stage,
+    tags.TagKey("repo_owner"),
+    tags.TagKey("repo_name"),
+    tags.TagKey("pull_number"),
+    tags.TagKey("job_name"),
+    tags.TagKey("build_id"),
+    tags.TagKey("job_type"),
+]
+
+_METRICS_ENABLED = False
+
+
+class StdoutExporter(StatsExporter):
+  """Fallback exporter in case stackdriver cannot be configured."""
+
+  def on_register_view(self, view):
+    pass
+
+  def emit(self, view_datas):
+    _logger.info("emit %s", self.repr_data(view_datas))
+
+  def export(self, view_data):
+    _logger.info("export %s", self._repr_data(view_data))
+
+  @staticmethod
+  def _repr_data(view_data):
+    return [
+        "ViewData<view={}, start={}, end={}>".format(d.view, d.start_time,
+                                                     d.end_time)
+        for d in view_data
+    ]
+
+
+def _new_exporter():
+  """
+     Initializes a metrics exporter.
+
+     Tries to initialize a Stackdriver exporter, falls back to StdoutExporter.
+  """
+  try:
+    _, project_id = google.auth.default()
+    return stackdriver_exporter.new_stats_exporter(
+        stackdriver_exporter.Options(project_id=project_id, resource='global'))
+  except google.auth.exceptions.DefaultCredentialsError:
+    _logger.exception("Using stdout exporter")
+    return StdoutExporter()
+
+
+def configure():
+  """Globally enables metrics collection."""
+  global _METRICS_ENABLED
+  if _METRICS_ENABLED:
+    return
+  _METRICS_ENABLED = True
+
+  STATS.view_manager.register_exporter(_new_exporter())
+  latency_view = view.View(
+      "fireci/latency", "Latency of fireci execution stages", _TAGS, _m_latency,
+      aggregation.LastValueAggregation())
+  success_view = view.View(
+      "fireci/success", "Success indication of fireci execution stages", _TAGS,
+      _m_success, aggregation.LastValueAggregation())
+  STATS.view_manager.register_view(latency_view)
+  STATS.view_manager.register_view(success_view)
+
+  context = tags.TagMap()
+  for tag in _TAGS:
+    if tag.upper() in os.environ:
+      context.insert(tag, tags.TagValue(os.environ[tag.upper()]))
+
+  execution_context.set_current_tag_map(context)
+
+
+@contextlib.contextmanager
+def _measure(name):
+  tmap = copy.deepcopy(execution_context.get_current_tag_map())
+  tmap.insert(_key_stage, name)
+  start = time.time()
+  try:
+    yield
+  except:
+    mmap = STATS.stats_recorder.new_measurement_map()
+    mmap.measure_int_put(_m_success, 0)
+    mmap.record(tmap)
+    raise
+
+  elapsed = (time.time() - start) * 1000
+  mmap = STATS.stats_recorder.new_measurement_map()
+  mmap.measure_float_put(_m_latency, elapsed)
+  mmap.measure_int_put(_m_success, 1)
+  mmap.record(tmap)
+  _logger.info("%s took %sms", name, elapsed)
+
+
+@contextlib.contextmanager
+def measure(name):
+  """Context manager that measures the time it took for a block of code to execute."""
+  if not _METRICS_ENABLED:
+    yield
+    return
+  with _measure(name):
+    yield
+
+
+def measure_call(name):
+  """Function decorator that measures the time it took to execute the target function."""
+
+  def decorator(f):
+
+    def decorated(*args, **kwargs):
+      with measure(name):
+        return f(*args, **kwargs)
+
+    functools.update_wrapper(decorated, f)
+    return decorated
+
+  return decorator
+
+
+def propagate_context_into(data_dict):
+  """Propagates Tag context into a dictionary."""
+  if not _METRICS_ENABLED:
+    return
+  value = binary_serializer.BinarySerializer().to_byte_array(
+      execution_context.get_current_tag_map())
+  data_dict['OPENCENSUS_STATS_CONTEXT'] = base64.b64encode(value)
diff --git a/ci/fireci/fireciplugins/copyright.py b/ci/fireci/fireciplugins/copyright.py
new file mode 100644
index 000000000..473c1f731
--- /dev/null
+++ b/ci/fireci/fireciplugins/copyright.py
@@ -0,0 +1,107 @@
+# Copyright 2018 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import fnmatch
+import click
+import contextlib
+import os
+import re
+
+from fireci import ci_command
+
+
+@click.option(
+    '--ignore-path',
+    '-i',
+    default=(),
+    multiple=True,
+    type=str,
+    help='Unix path pattern to ignore when searching for matching files. '
+    'Multiple values allowed.',
+)
+@click.option(
+    '--include-extension',
+    '-e',
+    default=(),
+    multiple=True,
+    type=str,
+    help='File extensions to scan for copyright violation. '
+    'Multiple values allowed.',
+    required=True,
+)
+@click.option(
+    '--expected-regex',
+    '-r',
+    default='.*Copyright [0-9]{4} Google LLC',
+    type=str,
+    help='Regex expected to be present in the file.',
+)
+@click.argument(
+    'dir_to_scan',
+    type=click.Path(exists=True, file_okay=False),
+    default='.',
+    nargs=1,
+)
+@ci_command()
+def copyright_check(dir_to_scan, ignore_path, include_extension,
+                    expected_regex):
+  """Checks matching files' content for copyright information."""
+  expression = re.compile(expected_regex)
+  failed_files = []
+  with chdir(dir_to_scan):
+    for x in walk('.', ignore_path, include_extension):
+      with open(x) as f:
+        if not match_any(f, lambda line: expression.match(line)):
+          failed_files.append(x)
+
+  if failed_files:
+    raise click.ClickException(
+        "The following files do not have valid copyright information:\n{}"
+        .format('\n'.join(failed_files)))
+
+
+@contextlib.contextmanager
+def chdir(directory):
+  original_dir = os.getcwd()
+  os.chdir(directory)
+  try:
+    yield
+  finally:
+    os.chdir(original_dir)
+
+
+def match_any(iterable, predicate):
+  """Returns True if at least one item in the iterable matches the predicate."""
+  for x in iterable:
+    if predicate(x):
+      return True
+  return False
+
+
+def walk(dir_to_scan, ignore_paths, extensions_to_include):
+  """Recursively walk the provided directory and yield matching paths."""
+  for root, dirs, filenames in os.walk(dir_to_scan):
+    dirs[:] = (
+        x for x in dirs if not matches(os.path.join(root, x), ignore_paths))
+
+    for f in filenames:
+      filename = os.path.join(root, f)
+      if os.path.splitext(f)[1][1:] in extensions_to_include and not matches(
+          filename, ignore_paths):
+        yield os.path.normpath(filename)
+
+
+def matches(path, paths):
+  path = os.path.normpath(path)
+  return match_any(paths, lambda p: fnmatch.fnmatch(path, p))
diff --git a/ci/fireci/setup.py b/ci/fireci/setup.py
index 16fa88f0d..20c266f8d 100755
--- a/ci/fireci/setup.py
+++ b/ci/fireci/setup.py
@@ -24,8 +24,14 @@
 setup(
     name='fireci',
     version='0.1',
+    # this is a temporary measure until opencensus 0.2 release is out.
+    dependency_links=[
+        'https://github.com/census-instrumentation/opencensus-python/tarball/master#egg=opencensus'
+    ],
     install_requires=[
-        'click==6.7',
+        'click==7.0',
+        'opencensus',
+        'google-cloud-monitoring==0.31.1',
     ],
     packages=find_packages(exclude=['tests']),
     entry_points={
diff --git a/ci/fireci/tests/copyright_test.py b/ci/fireci/tests/copyright_test.py
new file mode 100644
index 000000000..d2fe4df71
--- /dev/null
+++ b/ci/fireci/tests/copyright_test.py
@@ -0,0 +1,70 @@
+# Copyright 2018 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import unittest
+
+from fireciplugins.copyright import (
+    match_any,
+    matches,
+    walk,
+)
+from .fileutil import (
+    Artifact,
+    create_artifacts,
+    in_tempdir,
+)
+
+
+class CopyrightCheckTest(unittest.TestCase):
+
+  def test_match_any(self):
+    test_data = (
+        ((1, 2, 3), lambda x: x == 2, True),
+        ((1, 2, 3), lambda x: x == 5, False),
+        ((), lambda x: x == 1, False),
+    )
+    for iterable, predicate, expected_result in test_data:
+      with self.subTest():
+        self.assertEqual(match_any(iterable, predicate), expected_result)
+
+  def test_matches(self):
+    test_data = (
+        ('file.py', '*.py', True),
+        ('file.xml', '*.py', False),
+        ('hello/file.py', '*.py', True),
+        ('hello/file.xml', 'hello/**', True),
+        ('some/file.xml', 'hello/**', False),
+    )
+
+    for path, path_to_match, expected_result in test_data:
+      pass
+      with self.subTest("'{}' matches '{}' must be {}".format(
+          path, path_to_match, expected_result)):
+        self.assertEqual(matches(path, [path_to_match]), expected_result)
+
+  @in_tempdir
+  def test_walk_in_empty_dir(self):
+    paths = walk('.', [], ['py', 'xml'])
+    self.assertTrue(len(list(paths)) == 0)
+
+  @in_tempdir
+  def test_walk_should_filter_out_non_matching_files(self):
+    create_artifacts(
+        Artifact('hello/world/foo.py'), Artifact('dir1/subdir2/file.py'),
+        Artifact('hello/world.py'), Artifact('dir1/subdir2/file.py'),
+        Artifact('dir1/subdir2/file.gradle'), Artifact('dir1/subdir2/file.xml'))
+    paths = walk('.', ['hello/**'], ['py', 'xml'])
+
+    self.assertEqual(
+        set(paths), {'dir1/subdir2/file.py', 'dir1/subdir2/file.xml'})
diff --git a/ci/fireci/tests/fileutil.py b/ci/fireci/tests/fileutil.py
index 30becae00..c9537e852 100644
--- a/ci/fireci/tests/fileutil.py
+++ b/ci/fireci/tests/fileutil.py
@@ -38,7 +38,7 @@ def create_artifacts(*artifacts):
     else:
       dirname = os.path.dirname(artifact.path)
       if dirname:
-        os.makedirs(os.path.dirname(artifact.path))
+        os.makedirs(os.path.dirname(artifact.path), exist_ok=True)
       with open(artifact.path, 'w') as opened_file:
         opened_file.write(artifact.content)
     os.chmod(artifact.path, artifact.mode)
diff --git a/ci/fireci/tests/integ_tests.py b/ci/fireci/tests/integ_tests.py
index 9af3ee335..114748fce 100644
--- a/ci/fireci/tests/integ_tests.py
+++ b/ci/fireci/tests/integ_tests.py
@@ -132,3 +132,65 @@ def test_smoke_test_with_buildType_should_invoke_gradle_with_release_build_type(
     result = self.runner.invoke(cli,
                                 ['smoke_tests', '--app-build-variant', 'debug'])
     self.assertEqual(result.exit_code, 0)
+
+  @in_tempdir
+  def test_copyright_check_when_no_violating_files_should_succeed(self):
+    create_artifacts(
+        Artifact('dir/file.py', content='# Copyright 2018 Google LLC'))
+
+    result = self.runner.invoke(cli, ['copyright_check', '-e', 'py'])
+    self.assertEqual(result.exit_code, 0)
+
+  @in_tempdir
+  def test_copyright_check_when_violating_files_exist_should_fail(self):
+    create_artifacts(
+        Artifact('dir/file.py', content='# Copyright 2018 Google LLC'),
+        Artifact('dir/file2.py', content='# hello'),
+        Artifact('dir2/file3.xml', content='# hello'),
+    )
+
+    result = self.runner.invoke(cli,
+                                ['copyright_check', '-e', 'py', '-e'
+                                 'xml'])
+    self.assertEqual(result.exit_code, 1)
+    self.assertFalse('dir/file.py' in result.output)
+    self.assertTrue('dir/file2.py' in result.output)
+    self.assertTrue('dir2/file3.xml' in result.output)
+
+  @in_tempdir
+  def test_copyright_check_when_violating_files_exist_should_fail2(self):
+    create_artifacts(
+        Artifact('dir/file.py', content='# Copyright 2018 Google LLC'),
+        Artifact('dir/file2.py', content='# hello'),
+        Artifact('dir2/file3.xml', content='# hello'),
+        Artifact('dir2/subdir/file4.xml', content='# hello'),
+    )
+
+    result = self.runner.invoke(
+        cli, ['copyright_check', '-e', 'py', '-e'
+              'xml', '-i', 'dir2/**'])
+
+    self.assertEqual(result.exit_code, 1)
+    self.assertFalse('dir/file.py' in result.output)
+    self.assertTrue('dir/file2.py' in result.output)
+    self.assertFalse('dir2/file3.xml' in result.output)
+    self.assertFalse('dir2/subdir/file4.xml' in result.output)
+
+  @in_tempdir
+  def test_copyright_check_when_violating_files_exist_should_fail3(self):
+    create_artifacts(
+        Artifact('dir/subdir/file.py', content='# Copyright 2018 Google LLC'),
+        Artifact('dir/subdir/file2.py', content='# hello'),
+        Artifact('dir/subdir2/file3.xml', content='# hello'),
+        Artifact('dir/subdir4/file4.xml', content='# hello'),
+    )
+
+    result = self.runner.invoke(
+        cli,
+        ['copyright_check', '-e', 'py', '-e'
+         'xml', '-i', 'subdir2/**', 'dir'])
+
+    self.assertEqual(result.exit_code, 1)
+    self.assertFalse('subdir/file.py' in result.output)
+    self.assertTrue('subdir/file2.py' in result.output)
+    self.assertTrue('subdir4/file4.xml' in result.output)
diff --git a/fiamui-app/fiamui-app.gradle b/fiamui-app/fiamui-app.gradle
index 9cd540e2b..2d00192c0 100644
--- a/fiamui-app/fiamui-app.gradle
+++ b/fiamui-app/fiamui-app.gradle
@@ -15,12 +15,12 @@
 apply plugin: "com.android.application"
 
 android {
-  compileSdkVersion 27
+  compileSdkVersion project.targetSdkVersion
 
   defaultConfig {
     applicationId "com.example.firebase.fiamui"
     minSdkVersion 16
-    targetSdkVersion 27
+    targetSdkVersion project.targetSdkVersion
     versionCode 1
     versionName "1.0"
     testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
diff --git a/firebase-common-ktx/firebase-common-ktx.gradle b/firebase-common-ktx/firebase-common-ktx.gradle
new file mode 100644
index 000000000..5b5051b1f
--- /dev/null
+++ b/firebase-common-ktx/firebase-common-ktx.gradle
@@ -0,0 +1,43 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+apply plugin: 'com.android.library'
+apply plugin: 'kotlin-android'
+
+android {
+    compileSdkVersion project.targetSdkVersion
+    defaultConfig {
+        minSdkVersion project.minSdkVersion
+        targetSdkVersion project.targetSdkVersion
+        versionName version
+        buildConfigField('String', 'LIBRARY_NAME', "\"$project.name\"")
+        buildConfigField('String', 'KOTLIN_VERSION', "\"$kotlinVersion\"")
+    }
+    sourceSets {
+        main.java.srcDirs += 'src/main/kotlin'
+        test.java.srcDirs += 'src/test/kotlin'
+    }
+    testOptions.unitTests.includeAndroidResources = true
+}
+
+dependencies {
+    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
+
+    implementation project(':firebase-common')
+    implementation 'com.android.support:support-annotations:28.0.0'
+
+    testImplementation "org.robolectric:robolectric:$robolectricVersion"
+    testImplementation 'junit:junit:4.12'
+    testImplementation "com.google.truth:truth:$googleTruthVersion"
+}
diff --git a/firebase-common-ktx/gradle.properties b/firebase-common-ktx/gradle.properties
new file mode 100644
index 000000000..e70417a1b
--- /dev/null
+++ b/firebase-common-ktx/gradle.properties
@@ -0,0 +1,2 @@
+version=17.0.0-alpha01
+android.enableUnitTestBinaryResources=true
diff --git a/firebase-common-ktx/src/main/AndroidManifest.xml b/firebase-common-ktx/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..2e644dc65
--- /dev/null
+++ b/firebase-common-ktx/src/main/AndroidManifest.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.google.firebase.ktx">
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+    <!--<uses-sdk android:minSdkVersion="14"/>-->
+    <application>
+        <service android:name="com.google.firebase.components.ComponentDiscoveryService">
+            <meta-data android:name="com.google.firebase.components:com.google.firebase.ktx.FirebaseCommonKtxRegistrar"
+                android:value="com.google.firebase.components.ComponentRegistrar" />
+        </service>
+    </application>
+</manifest>
diff --git a/firebase-common-ktx/src/main/kotlin/com/google/firebase/ktx/Firebase.kt b/firebase-common-ktx/src/main/kotlin/com/google/firebase/ktx/Firebase.kt
new file mode 100644
index 000000000..845dfa507
--- /dev/null
+++ b/firebase-common-ktx/src/main/kotlin/com/google/firebase/ktx/Firebase.kt
@@ -0,0 +1,61 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package com.google.firebase.ktx
+
+import android.content.Context
+import android.support.annotation.Keep
+import com.google.firebase.FirebaseApp
+import com.google.firebase.FirebaseOptions
+import com.google.firebase.components.Component
+import com.google.firebase.components.ComponentRegistrar
+import com.google.firebase.platforminfo.LibraryVersionComponent
+
+/**
+ * Single access point to all firebase sdks from Kotlin.
+ *
+ * <p>Acts as a target for extension methods provided by sdks.
+ */
+object Firebase
+
+/** Returns the default firebase app instance. */
+val Firebase.app: FirebaseApp
+    get() = FirebaseApp.getInstance()
+
+/** Returns a named firebase app instance. */
+fun Firebase.app(name: String): FirebaseApp = FirebaseApp.getInstance(name)
+
+/** Initializes and returns a FirebaseApp. */
+fun Firebase.initialize(context: Context) = FirebaseApp.initializeApp(context)
+
+/** Initializes and returns a FirebaseApp. */
+fun Firebase.initialize(context: Context, options: FirebaseOptions) =
+        FirebaseApp.initializeApp(context, options)
+
+/** Initializes and returns a FirebaseApp. */
+fun Firebase.initialize(context: Context, options: FirebaseOptions, name: String) =
+        FirebaseApp.initializeApp(context, options, name)
+
+/** Returns options of default FirebaseApp */
+val Firebase.options: FirebaseOptions
+    get() = Firebase.app.options
+
+/** @hide */
+@Keep
+class FirebaseCommonKtxRegistrar : ComponentRegistrar {
+    override fun getComponents(): List<Component<*>> {
+        return listOf(
+                LibraryVersionComponent.create(BuildConfig.LIBRARY_NAME, BuildConfig.VERSION_NAME),
+                LibraryVersionComponent.create("kotlin", BuildConfig.KOTLIN_VERSION))
+    }
+}
diff --git a/firebase-common-ktx/src/test/kotlin/com/google/firebase/ktx/Tests.kt b/firebase-common-ktx/src/test/kotlin/com/google/firebase/ktx/Tests.kt
new file mode 100644
index 000000000..0bfda2e8a
--- /dev/null
+++ b/firebase-common-ktx/src/test/kotlin/com/google/firebase/ktx/Tests.kt
@@ -0,0 +1,103 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.ktx;
+
+import com.google.common.truth.Truth.assertThat
+import com.google.firebase.FirebaseApp
+import com.google.firebase.FirebaseOptions
+import com.google.firebase.platforminfo.UserAgentPublisher
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.robolectric.RobolectricTestRunner
+import org.robolectric.RuntimeEnvironment
+
+fun withApp(name: String, block: FirebaseApp.() -> Unit) {
+    val app = Firebase.initialize(RuntimeEnvironment.application,
+            FirebaseOptions.Builder()
+                    .setApplicationId("appId")
+                    .build(),
+            name)
+    try {
+        block(app)
+    } finally {
+        app.delete()
+    }
+}
+
+@RunWith(RobolectricTestRunner::class)
+class VersionTests {
+    @Test
+    fun libraryVersions_shouldBeRegisteredWithRuntime() {
+        withApp("ktxTestApp") {
+            val uaPublisher = get(UserAgentPublisher::class.java)
+            assertThat(uaPublisher.userAgent).contains("kotlin")
+            assertThat(uaPublisher.userAgent).contains(BuildConfig.LIBRARY_NAME)
+        }
+    }
+}
+
+@RunWith(RobolectricTestRunner::class)
+class KtxTests {
+    @Test
+    fun `Firebase#app should delegate to FirebaseApp#getInstance()`() {
+        withApp(FirebaseApp.DEFAULT_APP_NAME) {
+            assertThat(Firebase.app).isSameAs(FirebaseApp.getInstance())
+        }
+    }
+
+    @Test
+    fun `Firebase#app(String) should delegate to FirebaseApp#getInstance(String)`() {
+        val appName = "testApp"
+        withApp(appName) {
+            assertThat(Firebase.app(appName)).isSameAs(FirebaseApp.getInstance(appName))
+        }
+    }
+
+    @Test
+    fun `Firebase#options should delegate to FirebaseApp#getInstance()#options`() {
+        withApp(FirebaseApp.DEFAULT_APP_NAME) {
+            assertThat(Firebase.options).isSameAs(FirebaseApp.getInstance().options)
+        }
+    }
+
+    @Test
+    fun `Firebase#initialize(Context, FirebaseOptions) should initialize the app correctly`() {
+        val options = FirebaseOptions.Builder().setApplicationId("appId").build()
+        val app = Firebase.initialize(RuntimeEnvironment.application, options)
+        try {
+            assertThat(app).isNotNull()
+            assertThat(app.name).isEqualTo(FirebaseApp.DEFAULT_APP_NAME)
+            assertThat(app.options).isSameAs(options)
+            assertThat(app.applicationContext).isSameAs(RuntimeEnvironment.application)
+        } finally {
+            app.delete()
+        }
+    }
+
+    @Test
+    fun `Firebase#initialize(Context, FirebaseOptions, String) should initialize the app correctly`() {
+        val options = FirebaseOptions.Builder().setApplicationId("appId").build()
+        val name = "appName"
+        val app = Firebase.initialize(RuntimeEnvironment.application, options, name)
+        try {
+            assertThat(app).isNotNull()
+            assertThat(app.name).isEqualTo(name)
+            assertThat(app.options).isSameAs(options)
+            assertThat(app.applicationContext).isSameAs(RuntimeEnvironment.application)
+        } finally {
+            app.delete()
+        }
+    }
+}
diff --git a/firebase-common/firebase-common.gradle b/firebase-common/firebase-common.gradle
index fb5e174e2..ff22e2286 100644
--- a/firebase-common/firebase-common.gradle
+++ b/firebase-common/firebase-common.gradle
@@ -14,18 +14,16 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 28
-
 android {
     adbOptions {
         timeOutInMs 60 * 1000
     }
 
-    compileSdkVersion androidVersion
+    compileSdkVersion project.targetSdkVersion
     defaultConfig {
-      minSdkVersion 14
-      targetSdkVersion androidVersion
-
+      minSdkVersion project.minSdkVersion
+      targetSdkVersion project.targetSdkVersion
+      versionName version
       multiDexEnabled true
       testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
@@ -56,17 +54,20 @@ dependencies {
     implementation "com.google.android.gms:play-services-basement:$playServicesVersion"
     implementation "com.google.android.gms:play-services-tasks:$playServicesVersion"
 
+    api 'com.google.auto.value:auto-value-annotations:1.6'
     compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
 
     testImplementation 'com.android.support.test:runner:1.0.2'
-    testImplementation 'org.robolectric:robolectric:4.0-alpha-3'
+    testImplementation "org.robolectric:robolectric:$robolectricVersion"
     testImplementation 'junit:junit:4.12'
-    testImplementation 'com.google.truth:truth:0.42'
+    testImplementation "com.google.truth:truth:$googleTruthVersion"
     testImplementation 'org.mockito:mockito-core:2.21.0'
 
+    annotationProcessor 'com.google.auto.value:auto-value:1.6'
+
     androidTestImplementation 'junit:junit:4.12'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
-    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation "com.google.truth:truth:$googleTruthVersion"
     androidTestImplementation 'org.mockito:mockito-core:2.21.0'
     androidTestImplementation 'com.linkedin.dexmaker:dexmaker:2.16.0'
     androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.16.0'
diff --git a/firebase-common/gradle.properties b/firebase-common/gradle.properties
index a7e7b041b..b06f769c0 100644
--- a/firebase-common/gradle.properties
+++ b/firebase-common/gradle.properties
@@ -1,2 +1,2 @@
-version=16.0.4
-latestReleasedVersion=16.0.3
+version=16.1.0
+latestReleasedVersion=16.0.4
diff --git a/firebase-common/proguard.txt b/firebase-common/proguard.txt
index 63c0883bd..305dc2de3 100644
--- a/firebase-common/proguard.txt
+++ b/firebase-common/proguard.txt
@@ -1 +1,2 @@
--dontwarn com.google.firebase.components.Component$Instantiation
\ No newline at end of file
+-dontwarn com.google.firebase.components.Component$Instantiation
+-dontwarn com.google.firebase.components.Component$ComponentType
\ No newline at end of file
diff --git a/firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java b/firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java
index c5a08878d..26376ed90 100644
--- a/firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java
+++ b/firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java
@@ -43,7 +43,9 @@
 import com.google.firebase.components.InitTracker;
 import com.google.firebase.components.TestComponentOne;
 import com.google.firebase.components.TestComponentTwo;
+import com.google.firebase.components.TestUserAgentDependentComponent;
 import com.google.firebase.internal.InternalTokenResult;
+import com.google.firebase.platforminfo.UserAgentPublisher;
 import com.google.firebase.testing.FirebaseAppRule;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -65,10 +67,8 @@
 // TODO(arondeak): uncomment lines when Firebase API targets are in integ.
 @RunWith(AndroidJUnit4.class)
 public class FirebaseAppTest {
-
   protected static final String GOOGLE_APP_ID = "1:855246033427:android:6e48bff8253f3f6e6e";
   protected static final String GOOGLE_API_KEY = "AIzaSyD3asb-2pEZVqMkmL6M9N6nHZRR_znhrh0";
-  private static final String APP_NAME = "myApp";
 
   protected static final FirebaseOptions OPTIONS =
       new FirebaseOptions.Builder()
@@ -118,6 +118,37 @@ public void testBackgroundStateChangeCallbacks() {
     assertThat(backgroundState.get()).isFalse();
   }
 
+  @Test
+  public void testInitializeApp_shouldPublishUserAgentPublisherThatReturnsPublishedVersions() {
+    Context mockContext = createForwardingMockContext();
+    FirebaseApp firebaseApp = FirebaseApp.initializeApp(mockContext);
+
+    TestUserAgentDependentComponent userAgentDependant =
+        firebaseApp.get(TestUserAgentDependentComponent.class);
+    UserAgentPublisher userAgentPublisher = userAgentDependant.getUserAgentPublisher();
+    String[] actualUserAgent = userAgentPublisher.getUserAgent().split(" ");
+    Arrays.sort(actualUserAgent);
+
+    assertThat(actualUserAgent).asList().contains("test-component/1.2.3");
+  }
+
+  @Test
+  public void testInitializeApp_shouldPublishVersionForFirebaseCommon() {
+    Context mockContext = createForwardingMockContext();
+    FirebaseApp firebaseApp = FirebaseApp.initializeApp(mockContext);
+
+    TestUserAgentDependentComponent userAgentDependant =
+        firebaseApp.get(TestUserAgentDependentComponent.class);
+    UserAgentPublisher userAgentPublisher = userAgentDependant.getUserAgentPublisher();
+    String[] actualUserAgent = userAgentPublisher.getUserAgent().split(" ");
+    Arrays.sort(actualUserAgent);
+
+    // After sorting the user agents are expected to be {"fire-android/", "fire-core/x.y.z",
+    // "test-component/1.2.3"}
+    assertThat(actualUserAgent[0]).contains("fire-android");
+    assertThat(actualUserAgent[1]).contains("fire-core");
+  }
+
   @Test
   public void testRemovedBackgroundStateChangeCallbacksDontFire() {
     FirebaseApp firebaseApp = FirebaseApp.initializeApp(targetContext, OPTIONS, "myApp");
diff --git a/firebase-common/src/main/AndroidManifest.xml b/firebase-common/src/main/AndroidManifest.xml
index c0c662065..e003b1415 100644
--- a/firebase-common/src/main/AndroidManifest.xml
+++ b/firebase-common/src/main/AndroidManifest.xml
@@ -1,12 +1,15 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.google.firebase">
-    <application>
+<manifest
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.google.firebase">
+  <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+  <!--<uses-sdk android:minSdkVersion="14"/>-->
+  <application>
 
-        <provider
-            android:authorities="${applicationId}.firebaseinitprovider"
-            android:name="com.google.firebase.provider.FirebaseInitProvider"
-            android:exported="false"
-            android:initOrder="100" />
-    </application>
+    <provider
+        android:name="com.google.firebase.provider.FirebaseInitProvider"
+        android:authorities="${applicationId}.firebaseinitprovider"
+        android:exported="false"
+        android:initOrder="100"/>
+  </application>
 </manifest>
diff --git a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java
index 1fcbcb639..66a673510 100644
--- a/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java
+++ b/firebase-common/src/main/java/com/google/firebase/FirebaseApp.java
@@ -55,6 +55,8 @@
 import com.google.firebase.internal.DefaultIdTokenListenersCountChangedListener;
 import com.google.firebase.internal.InternalTokenProvider;
 import com.google.firebase.internal.InternalTokenResult;
+import com.google.firebase.platforminfo.DefaultUserAgentPublisher;
+import com.google.firebase.platforminfo.LibraryVersionComponent;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -104,7 +106,7 @@
 
   public static final String DEFAULT_APP_NAME = "[DEFAULT]";
 
-  @VisibleForTesting static final String FIREBASE_APP_PREFS = "com.google.firebase.common.prefs";
+  private static final String FIREBASE_APP_PREFS = "com.google.firebase.common.prefs:";
 
   @VisibleForTesting
   static final String DATA_COLLECTION_DEFAULT_ENABLED = "firebase_data_collection_default_enabled";
@@ -151,6 +153,9 @@
   @GuardedBy("LOCK")
   static final Map<String, FirebaseApp> INSTANCES = new ArrayMap<>();
 
+  private static final String FIREBASE_ANDROID = "fire-android";
+  private static final String FIREBASE_COMMON = "fire-core";
+
   private final Context applicationContext;
   private final String name;
   private final FirebaseOptions options;
@@ -228,7 +233,7 @@ public String toString() {
    *
    * @throws IllegalStateException if the default app was not initialized.
    */
-  @Nullable
+  @NonNull
   @PublicApi
   public static FirebaseApp getInstance() {
     synchronized (LOCK) {
@@ -252,6 +257,7 @@ public static FirebaseApp getInstance() {
    * @throws IllegalStateException if the {@link FirebaseApp} was not initialized, either via {@link
    *     #initializeApp(Context, FirebaseOptions, String)}.
    */
+  @NonNull
   @PublicApi
   public static FirebaseApp getInstance(@NonNull String name) {
     synchronized (LOCK) {
@@ -293,7 +299,7 @@ public static FirebaseApp getInstance(@NonNull String name) {
    */
   @Nullable
   @PublicApi
-  public static FirebaseApp initializeApp(Context context) {
+  public static FirebaseApp initializeApp(@NonNull Context context) {
     synchronized (LOCK) {
       if (INSTANCES.containsKey(DEFAULT_APP_NAME)) {
         return getInstance();
@@ -319,8 +325,10 @@ public static FirebaseApp initializeApp(Context context) {
    * to do so automatically in {@link com.google.firebase.provider.FirebaseInitProvider}. Automatic
    * initialization that way is the expected situation.
    */
+  @NonNull
   @PublicApi
-  public static FirebaseApp initializeApp(Context context, FirebaseOptions options) {
+  public static FirebaseApp initializeApp(
+      @NonNull Context context, @NonNull FirebaseOptions options) {
     return initializeApp(context, options, DEFAULT_APP_NAME);
   }
 
@@ -334,8 +342,10 @@ public static FirebaseApp initializeApp(Context context, FirebaseOptions options
    * @throws IllegalStateException if an app with the same name has already been initialized.
    * @return an instance of {@link FirebaseApp}
    */
+  @NonNull
   @PublicApi
-  public static FirebaseApp initializeApp(Context context, FirebaseOptions options, String name) {
+  public static FirebaseApp initializeApp(
+      @NonNull Context context, @NonNull FirebaseOptions options, @NonNull String name) {
     GlobalBackgroundStateListener.ensureBackgroundStateListenerRegistered(context);
     String normalizedName = normalize(name);
     final FirebaseApp firebaseApp;
@@ -378,6 +388,25 @@ public void setIdTokenListenersCountChangedListener(
     idTokenListenersCountChangedListener.onListenerCountChanged(idTokenListeners.size());
   }
 
+  /**
+   * Fetch the UID of the currently logged-in user.
+   *
+   * @deprecated use {@link com.google.firebase.auth.internal.InternalAuthProvider#getUid()} from
+   *     firebase-auth-interop instead.
+   * @hide
+   */
+  @Deprecated
+  @Nullable
+  @KeepForSdk
+  public String getUid() throws FirebaseApiNotAvailableException {
+    checkNotDeleted();
+    if (tokenProvider == null) {
+      throw new FirebaseApiNotAvailableException(
+          "firebase-auth is not " + "linked, please fall back to unauthenticated mode.");
+    }
+    return tokenProvider.getUid();
+  }
+
   /**
    * Fetch a valid STS Token.
    *
@@ -390,6 +419,7 @@ public void setIdTokenListenersCountChangedListener(
    * @hide
    */
   @Deprecated
+  @NonNull
   @KeepForSdk
   public Task<GetTokenResult> getToken(boolean forceRefresh) {
     checkNotDeleted();
@@ -403,25 +433,6 @@ public void setIdTokenListenersCountChangedListener(
     }
   }
 
-  /**
-   * Fetch the UID of the currently logged-in user.
-   *
-   * @deprecated use {@link com.google.firebase.auth.internal.InternalAuthProvider#getUid()} from
-   *     firebase-auth-interop instead.
-   * @hide
-   */
-  @Deprecated
-  @Nullable
-  @KeepForSdk
-  public String getUid() throws FirebaseApiNotAvailableException {
-    checkNotDeleted();
-    if (tokenProvider == null) {
-      throw new FirebaseApiNotAvailableException(
-          "firebase-auth is not " + "linked, please fall back to unauthenticated mode.");
-    }
-    return tokenProvider.getUid();
-  }
-
   /**
    * Deletes the {@link FirebaseApp} and all its data. All calls to this {@link FirebaseApp}
    * instance will throw once it has been called.
@@ -525,7 +536,7 @@ protected FirebaseApp(Context applicationContext, String name, FirebaseOptions o
     idTokenListenersCountChangedListener = new DefaultIdTokenListenersCountChangedListener();
 
     sharedPreferences =
-        applicationContext.getSharedPreferences(FIREBASE_APP_PREFS, Context.MODE_PRIVATE);
+        applicationContext.getSharedPreferences(getSharedPrefsName(name), Context.MODE_PRIVATE);
     dataCollectionDefaultEnabled = new AtomicBoolean(readAutoDataCollectionEnabled());
 
     List<ComponentRegistrar> registrars =
@@ -536,10 +547,17 @@ protected FirebaseApp(Context applicationContext, String name, FirebaseOptions o
             registrars,
             Component.of(applicationContext, Context.class),
             Component.of(this, FirebaseApp.class),
-            Component.of(options, FirebaseOptions.class));
+            Component.of(options, FirebaseOptions.class),
+            LibraryVersionComponent.create(FIREBASE_ANDROID, ""),
+            LibraryVersionComponent.create(FIREBASE_COMMON, BuildConfig.VERSION_NAME),
+            DefaultUserAgentPublisher.component());
     publisher = componentRuntime.get(Publisher.class);
   }
 
+  private static String getSharedPrefsName(String appName) {
+    return FIREBASE_APP_PREFS + appName;
+  }
+
   private boolean readAutoDataCollectionEnabled() {
     if (sharedPreferences.contains(DATA_COLLECTION_DEFAULT_ENABLED)) {
       return sharedPreferences.getBoolean(DATA_COLLECTION_DEFAULT_ENABLED, true);
diff --git a/firebase-common/src/main/java/com/google/firebase/annotations/package-info.java b/firebase-common/src/main/java/com/google/firebase/annotations/package-info.java
new file mode 100644
index 000000000..fda9481b9
--- /dev/null
+++ b/firebase-common/src/main/java/com/google/firebase/annotations/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.annotations;
\ No newline at end of file
diff --git a/firebase-common/src/main/java/com/google/firebase/components/AbstractComponentContainer.java b/firebase-common/src/main/java/com/google/firebase/components/AbstractComponentContainer.java
index ca38f534b..143adf0ac 100644
--- a/firebase-common/src/main/java/com/google/firebase/components/AbstractComponentContainer.java
+++ b/firebase-common/src/main/java/com/google/firebase/components/AbstractComponentContainer.java
@@ -15,6 +15,7 @@
 package com.google.firebase.components;
 
 import com.google.firebase.inject.Provider;
+import java.util.Set;
 
 abstract class AbstractComponentContainer implements ComponentContainer {
   @Override
@@ -25,4 +26,9 @@
     }
     return provider.get();
   }
+
+  @Override
+  public <T> Set<T> setOf(Class<T> anInterface) {
+    return setOfProvider(anInterface).get();
+  }
 }
diff --git a/firebase-common/src/main/java/com/google/firebase/components/Component.java b/firebase-common/src/main/java/com/google/firebase/components/Component.java
index 98581417b..234455a41 100644
--- a/firebase-common/src/main/java/com/google/firebase/components/Component.java
+++ b/firebase-common/src/main/java/com/google/firebase/components/Component.java
@@ -36,17 +36,53 @@
 @KeepForSdk
 public final class Component<T> {
 
+  /** Specifies instantiation behavior of a {@link Component}. */
   @IntDef({Instantiation.LAZY, Instantiation.ALWAYS_EAGER, Instantiation.EAGER_IN_DEFAULT_APP})
   @Retention(RetentionPolicy.SOURCE)
   private @interface Instantiation {
+    /** Component is not instantiated until requested by developer or a dependent component. */
     int LAZY = 0;
+
+    /**
+     * Component is unconditionally instantiated upon startup of the {@link ComponentRuntime}.
+     *
+     * <p>Namely when {@link ComponentRuntime#initializeEagerComponents(boolean)} is called.
+     */
     int ALWAYS_EAGER = 1;
+
+    /**
+     * Component is instantiated upon startup of the {@link ComponentRuntime} if the runtime is
+     * initialized for the default app.
+     */
     int EAGER_IN_DEFAULT_APP = 2;
   }
 
+  /** Specifies the type of a {@link Component}. */
+  @IntDef({ComponentType.VALUE, ComponentType.SET})
+  @Retention(RetentionPolicy.SOURCE)
+  private @interface ComponentType {
+    /**
+     * Value components provide scalar values to the {@link ComponentRuntime}.
+     *
+     * <p>Such components can be requested by dependents via {@link ComponentContainer#get(Class)}
+     * or {@link ComponentContainer#getProvider(Class)}. e.g. {@code FirebaseInstanceId}.
+     */
+    int VALUE = 0;
+
+    /**
+     * Set components collectively contribute values of type {@code T} to a {@link Set
+     * Set&lt;T&gt;}.
+     *
+     * <p>Such components can be requested by dependents via {@link ComponentContainer#setOf(Class)}
+     * or {@link ComponentContainer#setOfProvider(Class)}.
+     */
+    int SET = 1;
+  }
+
   private final Set<Class<? super T>> providedInterfaces;
   private final Set<Dependency> dependencies;
   private final @Instantiation int instantiation;
+  private final @ComponentType int type;
   private final ComponentFactory<T> factory;
   private final Set<Class<?>> publishedEvents;
 
@@ -54,11 +90,13 @@ private Component(
       Set<Class<? super T>> providedInterfaces,
       Set<Dependency> dependencies,
       @Instantiation int instantiation,
+      @ComponentType int type,
       ComponentFactory<T> factory,
       Set<Class<?>> publishedEvents) {
     this.providedInterfaces = Collections.unmodifiableSet(providedInterfaces);
     this.dependencies = Collections.unmodifiableSet(dependencies);
     this.instantiation = instantiation;
+    this.type = type;
     this.factory = factory;
     this.publishedEvents = Collections.unmodifiableSet(publishedEvents);
   }
@@ -113,6 +151,11 @@ public boolean isEagerInDefaultApp() {
     return instantiation == Instantiation.EAGER_IN_DEFAULT_APP;
   }
 
+  /** Returns whether a component is a Value Component or a Set Component. */
+  public boolean isValue() {
+    return type == ComponentType.VALUE;
+  }
+
   @Override
   public String toString() {
     StringBuilder sb =
@@ -120,23 +163,26 @@ public String toString() {
             .append(Arrays.toString(providedInterfaces.toArray()))
             .append(">{")
             .append(instantiation)
+            .append(", type=")
+            .append(type)
             .append(", deps=")
             .append(Arrays.toString(dependencies.toArray()))
             .append("}");
     return sb.toString();
   }
 
-  @KeepForSdk
   /** Returns a Component<T> builder. */
+  @KeepForSdk
   public static <T> Component.Builder<T> builder(Class<T> anInterface) {
-    return new Builder<T>(anInterface);
+    return new Builder<>(anInterface);
   }
 
-  @KeepForSdk
   /** Returns a Component<T> builder. */
+  @KeepForSdk
+  @SafeVarargs
   public static <T> Component.Builder<T> builder(
       Class<T> anInterface, Class<? super T>... additionalInterfaces) {
-    return new Builder<T>(anInterface, additionalInterfaces);
+    return new Builder<>(anInterface, additionalInterfaces);
   }
 
   /**
@@ -151,22 +197,46 @@ public String toString() {
   }
 
   /** Wraps a value in a {@link Component} with no dependencies. */
-  @SafeVarargs
   @KeepForSdk
+  @SafeVarargs
   public static <T> Component<T> of(
       T value, Class<T> anInterface, Class<? super T>... additionalInterfaces) {
     return builder(anInterface, additionalInterfaces).factory((args) -> value).build();
   }
 
+  /**
+   * Provides a builder for a {@link Set}-multibinding {@link Component}.
+   *
+   * <p>Such components can be requested by dependents via {@link ComponentContainer#setOf(Class)} *
+   * or {@link ComponentContainer#setOfProvider(Class)}.
+   */
+  @KeepForSdk
+  public static <T> Component.Builder<T> intoSetBuilder(Class<T> anInterface) {
+    return builder(anInterface).intoSet();
+  }
+
+  /**
+   * Wraps a value in a {@link Set}-multibinding {@link Component} with no dependencies. *
+   *
+   * <p>Such components can be requested by dependents via {@link ComponentContainer#setOf(Class)} *
+   * or {@link ComponentContainer#setOfProvider(Class)}.
+   */
+  @KeepForSdk
+  public static <T> Component<T> intoSet(T value, Class<T> anInterface) {
+    return intoSetBuilder(anInterface).factory(c -> value).build();
+  }
+
   /** FirebaseComponent builder. */
   @KeepForSdk
   public static class Builder<T> {
     private final Set<Class<? super T>> providedInterfaces = new HashSet<>();
     private final Set<Dependency> dependencies = new HashSet<>();
     private @Instantiation int instantiation = Instantiation.LAZY;
+    private @ComponentType int type = ComponentType.VALUE;
     private ComponentFactory<T> factory;
     private Set<Class<?>> publishedEvents = new HashSet<>();
 
+    @SafeVarargs
     private Builder(Class<T> anInterface, Class<? super T>... additionalInterfaces) {
       Preconditions.checkNotNull(anInterface, "Null interface");
       providedInterfaces.add(anInterface);
@@ -176,6 +246,7 @@ private Builder(Class<T> anInterface, Class<? super T>... additionalInterfaces)
       Collections.addAll(providedInterfaces, additionalInterfaces);
     }
 
+    /** Add a {@link Dependency} to the {@link Component} being built. */
     @KeepForSdk
     public Builder<T> add(Dependency dependency) {
       Preconditions.checkNotNull(dependency, "Null dependency");
@@ -184,16 +255,19 @@ private Builder(Class<T> anInterface, Class<? super T>... additionalInterfaces)
       return this;
     }
 
+    /** Make the {@link Component} initialize upon startup. */
     @KeepForSdk
     public Builder<T> alwaysEager() {
       return setInstantiation(Instantiation.ALWAYS_EAGER);
     }
 
+    /** Make the component initialize upon startup in default app. */
     @KeepForSdk
     public Builder<T> eagerInDefaultApp() {
       return setInstantiation(Instantiation.EAGER_IN_DEFAULT_APP);
     }
 
+    /** Make the {@link Component} eligible to publish events of provided eventType. */
     @KeepForSdk
     public Builder<T> publishes(Class<?> eventType) {
       publishedEvents.add(eventType);
@@ -213,12 +287,19 @@ private void validateInterface(Class<?> anInterface) {
           "Components are not allowed to depend on interfaces they themselves provide.");
     }
 
+    /** Set the factory that will be used to initialize the {@link Component}. */
     @KeepForSdk
     public Builder<T> factory(ComponentFactory<T> value) {
       factory = Preconditions.checkNotNull(value, "Null factory");
       return this;
     }
 
+    private Builder<T> intoSet() {
+      type = ComponentType.SET;
+      return this;
+    }
+
+    /** Return the built {@link Component} definition. */
     @KeepForSdk
     public Component<T> build() {
       Preconditions.checkState(factory != null, "Missing required property: factory.");
@@ -226,6 +307,7 @@ private void validateInterface(Class<?> anInterface) {
           new HashSet<>(providedInterfaces),
           new HashSet<>(dependencies),
           instantiation,
+          type,
           factory,
           publishedEvents);
     }
diff --git a/firebase-common/src/main/java/com/google/firebase/components/ComponentContainer.java b/firebase-common/src/main/java/com/google/firebase/components/ComponentContainer.java
index 85e0d14ba..492c29864 100644
--- a/firebase-common/src/main/java/com/google/firebase/components/ComponentContainer.java
+++ b/firebase-common/src/main/java/com/google/firebase/components/ComponentContainer.java
@@ -16,6 +16,7 @@
 
 import com.google.android.gms.common.annotation.KeepForSdk;
 import com.google.firebase.inject.Provider;
+import java.util.Set;
 
 /** Provides a means to retrieve instances of requested classes/interfaces. */
 @KeepForSdk
@@ -25,4 +26,10 @@
 
   @KeepForSdk
   <T> Provider<T> getProvider(Class<T> anInterface);
+
+  @KeepForSdk
+  <T> Set<T> setOf(Class<T> anInterface);
+
+  @KeepForSdk
+  <T> Provider<Set<T>> setOfProvider(Class<T> anInterface);
 }
diff --git a/firebase-common/src/main/java/com/google/firebase/components/ComponentRuntime.java b/firebase-common/src/main/java/com/google/firebase/components/ComponentRuntime.java
index 279e798cd..41b5b9bd4 100644
--- a/firebase-common/src/main/java/com/google/firebase/components/ComponentRuntime.java
+++ b/firebase-common/src/main/java/com/google/firebase/components/ComponentRuntime.java
@@ -21,8 +21,10 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.Executor;
 
 /**
@@ -32,8 +34,10 @@
  * Component}s via {@link #get(Class)} method.
  */
 public class ComponentRuntime extends AbstractComponentContainer {
-  private final List<Component<?>> components;
+  private static final Provider<Set<Object>> EMPTY_PROVIDER = Collections::emptySet;
+  private final Map<Component<?>, Lazy<?>> components = new HashMap<>();
   private final Map<Class<?>, Lazy<?>> lazyInstanceMap = new HashMap<>();
+  private final Map<Class<?>, Lazy<Set<?>>> lazySetMap = new HashMap<>();
   private final EventBus eventBus;
 
   /**
@@ -53,14 +57,71 @@ public ComponentRuntime(
     }
     Collections.addAll(componentsToAdd, additionalComponents);
 
-    components = Collections.unmodifiableList(ComponentSorter.sorted(componentsToAdd));
+    CycleDetector.detect(componentsToAdd);
 
-    for (Component<?> component : components) {
-      register(component);
+    for (Component<?> component : componentsToAdd) {
+      Lazy<?> lazy =
+          new Lazy<>(
+              () ->
+                  component.getFactory().create(new RestrictedComponentContainer(component, this)));
+
+      components.put(component, lazy);
+    }
+    processInstanceComponents();
+    processSetComponents();
+  }
+
+  private void processInstanceComponents() {
+    for (Map.Entry<Component<?>, Lazy<?>> entry : components.entrySet()) {
+      Component<?> component = entry.getKey();
+      if (!component.isValue()) {
+        continue;
+      }
+
+      Lazy<?> lazy = entry.getValue();
+      for (Class<?> anInterface : component.getProvidedInterfaces()) {
+        lazyInstanceMap.put(anInterface, lazy);
+      }
     }
     validateDependencies();
   }
 
+  /** Populates lazySetMap to make set components available for consumption via set dependencies. */
+  private void processSetComponents() {
+    Map<Class<?>, Set<Lazy<?>>> setIndex = new HashMap<>();
+    for (Map.Entry<Component<?>, Lazy<?>> entry : components.entrySet()) {
+      Component<?> component = entry.getKey();
+
+      // only process set components.
+      if (component.isValue()) {
+        continue;
+      }
+
+      Lazy<?> lazy = entry.getValue();
+
+      for (Class<?> anInterface : component.getProvidedInterfaces()) {
+        if (!setIndex.containsKey(anInterface)) {
+          setIndex.put(anInterface, new HashSet<>());
+        }
+        setIndex.get(anInterface).add(lazy);
+      }
+    }
+
+    for (Map.Entry<Class<?>, Set<Lazy<?>>> entry : setIndex.entrySet()) {
+      Set<Lazy<?>> lazies = entry.getValue();
+      lazySetMap.put(
+          entry.getKey(),
+          new Lazy<>(
+              () -> {
+                Set<Object> set = new HashSet<>();
+                for (Lazy<?> lazy : lazies) {
+                  set.add(lazy.get());
+                }
+                return Collections.unmodifiableSet(set);
+              }));
+    }
+  }
+
   @Override
   @SuppressWarnings("unchecked")
   public <T> Provider<T> getProvider(Class<T> anInterface) {
@@ -68,6 +129,16 @@ public ComponentRuntime(
     return (Provider<T>) lazyInstanceMap.get(anInterface);
   }
 
+  @Override
+  @SuppressWarnings("unchecked")
+  public <T> Provider<Set<T>> setOfProvider(Class<T> anInterface) {
+    Lazy<Set<?>> lazy = lazySetMap.get(anInterface);
+    if (lazy != null) {
+      return (Provider<Set<T>>) (Provider<?>) lazy;
+    }
+    return (Provider<Set<T>>) (Provider<?>) EMPTY_PROVIDER;
+  }
+
   /**
    * Initializes all eager components.
    *
@@ -76,27 +147,20 @@ public ComponentRuntime(
    * <p>Note: the method is idempotent.
    */
   public void initializeEagerComponents(boolean isDefaultApp) {
-    for (Component<?> component : components) {
+    for (Map.Entry<Component<?>, Lazy<?>> entry : components.entrySet()) {
+      Component<?> component = entry.getKey();
+      Lazy<?> lazy = entry.getValue();
+
       if (component.isAlwaysEager() || (component.isEagerInDefaultApp() && isDefaultApp)) {
-        // at least one interface is guarenteed to be provided by a component.
-        get(component.getProvidedInterfaces().iterator().next());
+        lazy.get();
       }
     }
 
     eventBus.enablePublishingAndFlushPending();
   }
 
-  private <T> void register(Component<T> component) {
-    Lazy<T> lazy =
-        new Lazy<>(component.getFactory(), new RestrictedComponentContainer(component, this));
-
-    for (Class<? super T> anInterface : component.getProvidedInterfaces()) {
-      lazyInstanceMap.put(anInterface, lazy);
-    }
-  }
-
   private void validateDependencies() {
-    for (Component<?> component : components) {
+    for (Component<?> component : components.keySet()) {
       for (Dependency dependency : component.getDependencies()) {
         if (dependency.isRequired() && !lazyInstanceMap.containsKey(dependency.getInterface())) {
           throw new MissingDependencyException(
diff --git a/firebase-common/src/main/java/com/google/firebase/components/ComponentSorter.java b/firebase-common/src/main/java/com/google/firebase/components/CycleDetector.java
similarity index 58%
rename from firebase-common/src/main/java/com/google/firebase/components/ComponentSorter.java
rename to firebase-common/src/main/java/com/google/firebase/components/CycleDetector.java
index 2f884acc8..a435d6f3a 100644
--- a/firebase-common/src/main/java/com/google/firebase/components/ComponentSorter.java
+++ b/firebase-common/src/main/java/com/google/firebase/components/CycleDetector.java
@@ -15,15 +15,42 @@
 package com.google.firebase.components;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-/** Implementation of topological sort. */
-class ComponentSorter {
+/** Cycle detector for the {@link Component} dependency graph. */
+class CycleDetector {
+  private static class Dep {
+    private final Class<?> anInterface;
+    private final boolean set;
+
+    private Dep(Class<?> anInterface, boolean set) {
+      this.anInterface = anInterface;
+      this.set = set;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (obj instanceof Dep) {
+        Dep dep = (Dep) obj;
+        return dep.anInterface.equals(anInterface) && dep.set == set;
+      }
+      return false;
+    }
+
+    @Override
+    public int hashCode() {
+      int h = 1000003;
+      h ^= anInterface.hashCode();
+      h *= 1000003;
+      h ^= Boolean.valueOf(set).hashCode();
+      return h;
+    }
+  }
+
   private static class ComponentNode {
     private final Component<?> component;
     private final Set<ComponentNode> dependencies = new HashSet<>();
@@ -63,22 +90,21 @@ boolean isLeaf() {
   }
 
   /**
-   * Given a list of components, returns a sorted permutation of it.
+   * Detect a dependency cycle among provided {@link Component}s.
    *
-   * @param components Components to sort.
-   * @return Sorted list of components.
+   * @param components Components to detect cycle between.
    * @throws IllegalArgumentException thrown if multiple components implement the same interface.
    * @throws DependencyCycleException thrown if a dependency cycle between components is detected.
    */
-  static List<Component<?>> sorted(List<Component<?>> components) {
+  static void detect(List<Component<?>> components) {
     Set<ComponentNode> graph = toGraph(components);
     Set<ComponentNode> roots = getRoots(graph);
 
-    List<Component<?>> result = new ArrayList<>();
+    int numVisited = 0;
     while (!roots.isEmpty()) {
       ComponentNode node = roots.iterator().next();
       roots.remove(node);
-      result.add(node.getComponent());
+      numVisited++;
 
       for (ComponentNode dependent : node.getDependencies()) {
         dependent.removeDependent(node);
@@ -88,11 +114,10 @@ boolean isLeaf() {
       }
     }
 
-    // If there is no dependency cycle in the graph, the size of the resulting component list will
-    // be equal to the original list, meaning that we were able to sort all components.
-    if (result.size() == components.size()) {
-      Collections.reverse(result);
-      return result;
+    // If there is no dependency cycle in the graph, the number of visited nodes will be equal to
+    // the original list.
+    if (numVisited == components.size()) {
+      return;
     }
 
     // Otherwise there is a cycle.
@@ -107,34 +132,49 @@ boolean isLeaf() {
   }
 
   private static Set<ComponentNode> toGraph(List<Component<?>> components) {
-    Map<Class<?>, ComponentNode> componentIndex = new HashMap<>(components.size());
+    Map<Dep, Set<ComponentNode>> componentIndex = new HashMap<>(components.size());
     for (Component<?> component : components) {
       ComponentNode node = new ComponentNode(component);
       for (Class<?> anInterface : component.getProvidedInterfaces()) {
-        if (componentIndex.put(anInterface, node) != null) {
+        Dep cmp = new Dep(anInterface, !component.isValue());
+        if (!componentIndex.containsKey(cmp)) {
+          componentIndex.put(cmp, new HashSet<>());
+        }
+        Set<ComponentNode> nodes = componentIndex.get(cmp);
+        if (!nodes.isEmpty() && !cmp.set) {
           throw new IllegalArgumentException(
               String.format("Multiple components provide %s.", anInterface));
         }
+        nodes.add(node);
       }
     }
 
-    for (ComponentNode component : componentIndex.values()) {
-      for (Dependency dependency : component.getComponent().getDependencies()) {
-        if (!dependency.isDirectInjection()) {
-          continue;
-        }
-
-        ComponentNode depComponent = componentIndex.get(dependency.getInterface());
-        // Missing dependencies are skipped for the purposes of the sort as there is no component to
-        // sort.
-        if (depComponent != null) {
-          component.addDependency(depComponent);
-          depComponent.addDependent(component);
+    for (Set<ComponentNode> componentNodes : componentIndex.values()) {
+      for (ComponentNode node : componentNodes) {
+        for (Dependency dependency : node.getComponent().getDependencies()) {
+          if (!dependency.isDirectInjection()) {
+            continue;
+          }
+
+          Set<ComponentNode> depComponents =
+              componentIndex.get(new Dep(dependency.getInterface(), dependency.isSet()));
+          if (depComponents == null) {
+            continue;
+          }
+          for (ComponentNode depComponent : depComponents) {
+            node.addDependency(depComponent);
+            depComponent.addDependent(node);
+          }
         }
       }
     }
 
-    return new HashSet<>(componentIndex.values());
+    HashSet<ComponentNode> result = new HashSet<>();
+    for (Set<ComponentNode> componentNodes : componentIndex.values()) {
+      result.addAll(componentNodes);
+    }
+
+    return result;
   }
 
   private static Set<ComponentNode> getRoots(Set<ComponentNode> components) {
diff --git a/firebase-common/src/main/java/com/google/firebase/components/Dependency.java b/firebase-common/src/main/java/com/google/firebase/components/Dependency.java
index faa0e0e36..14f03a372 100644
--- a/firebase-common/src/main/java/com/google/firebase/components/Dependency.java
+++ b/firebase-common/src/main/java/com/google/firebase/components/Dependency.java
@@ -24,11 +24,12 @@
 @KeepForSdk
 public final class Dependency {
   /** Enumerates dependency types. */
-  @IntDef({Type.OPTIONAL, Type.REQUIRED})
+  @IntDef({Type.OPTIONAL, Type.REQUIRED, Type.SET})
   @Retention(RetentionPolicy.SOURCE)
   private @interface Type {
     int OPTIONAL = 0;
     int REQUIRED = 1;
+    int SET = 2;
   }
 
   @IntDef({Injection.DIRECT, Injection.PROVIDER})
@@ -58,6 +59,11 @@ public static Dependency required(Class<?> anInterface) {
     return new Dependency(anInterface, Type.REQUIRED, Injection.DIRECT);
   }
 
+  @KeepForSdk
+  public static Dependency setOf(Class<?> anInterface) {
+    return new Dependency(anInterface, Type.SET, Injection.DIRECT);
+  }
+
   @KeepForSdk
   public static Dependency optionalProvider(Class<?> anInterface) {
     return new Dependency(anInterface, Type.OPTIONAL, Injection.PROVIDER);
@@ -68,6 +74,11 @@ public static Dependency requiredProvider(Class<?> anInterface) {
     return new Dependency(anInterface, Type.REQUIRED, Injection.PROVIDER);
   }
 
+  @KeepForSdk
+  public static Dependency setOfProvider(Class<?> anInterface) {
+    return new Dependency(anInterface, Type.SET, Injection.PROVIDER);
+  }
+
   public Class<?> getInterface() {
     return anInterface;
   }
@@ -76,6 +87,10 @@ public boolean isRequired() {
     return type == Type.REQUIRED;
   }
 
+  public boolean isSet() {
+    return type == Type.SET;
+  }
+
   public boolean isDirectInjection() {
     return injection == Injection.DIRECT;
   }
@@ -105,8 +120,8 @@ public String toString() {
     StringBuilder sb =
         new StringBuilder("Dependency{anInterface=")
             .append(anInterface)
-            .append(", required=")
-            .append(type == Type.REQUIRED)
+            .append(", type=")
+            .append(type == Type.REQUIRED ? "required" : type == Type.OPTIONAL ? "optional" : "set")
             .append(", direct=")
             .append(injection == Injection.DIRECT)
             .append("}");
diff --git a/firebase-common/src/main/java/com/google/firebase/components/Lazy.java b/firebase-common/src/main/java/com/google/firebase/components/Lazy.java
index 1ff985a48..20c72aa91 100644
--- a/firebase-common/src/main/java/com/google/firebase/components/Lazy.java
+++ b/firebase-common/src/main/java/com/google/firebase/components/Lazy.java
@@ -38,9 +38,8 @@
     this.instance = instance;
   }
 
-  /** Creates a lazy backed by a {@link ComponentFactory} and {@link ComponentContainer}. */
-  Lazy(ComponentFactory<T> factory, ComponentContainer container) {
-    provider = () -> factory.create(container);
+  Lazy(Provider<T> provider) {
+    this.provider = provider;
   }
 
   /** Returns the initialized value. */
@@ -59,7 +58,10 @@ public T get() {
         }
       }
     }
-    return (T) result;
+
+    @SuppressWarnings("unchecked")
+    T tResult = (T) result;
+    return tResult;
   }
 
   @VisibleForTesting
diff --git a/firebase-common/src/main/java/com/google/firebase/components/RestrictedComponentContainer.java b/firebase-common/src/main/java/com/google/firebase/components/RestrictedComponentContainer.java
index 2365a79af..4fabbd4a9 100644
--- a/firebase-common/src/main/java/com/google/firebase/components/RestrictedComponentContainer.java
+++ b/firebase-common/src/main/java/com/google/firebase/components/RestrictedComponentContainer.java
@@ -28,17 +28,29 @@
 final class RestrictedComponentContainer extends AbstractComponentContainer {
   private final Set<Class<?>> allowedDirectInterfaces;
   private final Set<Class<?>> allowedProviderInterfaces;
+  private final Set<Class<?>> allowedSetDirectInterfaces;
+  private final Set<Class<?>> allowedSetProviderInterfaces;
   private final Set<Class<?>> allowedPublishedEvents;
   private final ComponentContainer delegateContainer;
 
   RestrictedComponentContainer(Component<?> component, ComponentContainer container) {
     Set<Class<?>> directInterfaces = new HashSet<>();
     Set<Class<?>> providerInterfaces = new HashSet<>();
+    Set<Class<?>> setDirectInterfaces = new HashSet<>();
+    Set<Class<?>> setProviderInterfaces = new HashSet<>();
     for (Dependency dependency : component.getDependencies()) {
       if (dependency.isDirectInjection()) {
-        directInterfaces.add(dependency.getInterface());
+        if (dependency.isSet()) {
+          setDirectInterfaces.add(dependency.getInterface());
+        } else {
+          directInterfaces.add(dependency.getInterface());
+        }
       } else {
-        providerInterfaces.add(dependency.getInterface());
+        if (dependency.isSet()) {
+          setProviderInterfaces.add(dependency.getInterface());
+        } else {
+          providerInterfaces.add(dependency.getInterface());
+        }
       }
     }
     if (!component.getPublishedEvents().isEmpty()) {
@@ -46,15 +58,22 @@
     }
     allowedDirectInterfaces = Collections.unmodifiableSet(directInterfaces);
     allowedProviderInterfaces = Collections.unmodifiableSet(providerInterfaces);
+    allowedSetDirectInterfaces = Collections.unmodifiableSet(setDirectInterfaces);
+    allowedSetProviderInterfaces = Collections.unmodifiableSet(setProviderInterfaces);
     allowedPublishedEvents = component.getPublishedEvents();
     delegateContainer = container;
   }
 
+  /**
+   * Returns an instance of the requested class if it is allowed.
+   *
+   * @throws IllegalArgumentException otherwise.
+   */
   @Override
   public <T> T get(Class<T> anInterface) {
     if (!allowedDirectInterfaces.contains(anInterface)) {
       throw new IllegalArgumentException(
-          String.format("Requesting %s is not allowed.", anInterface));
+          String.format("Attempting to request an undeclared dependency %s.", anInterface));
     }
 
     // The container is guaranteed to contain a class keyed with Publisher.class. This is what we
@@ -71,15 +90,50 @@
     return publisher;
   }
 
+  /**
+   * Returns an instance of the provider for the requested class if it is allowed.
+   *
+   * @throws IllegalArgumentException otherwise.
+   */
   @Override
   public <T> Provider<T> getProvider(Class<T> anInterface) {
     if (!allowedProviderInterfaces.contains(anInterface)) {
       throw new IllegalArgumentException(
-          String.format("Requesting Provider<%s> is not allowed.", anInterface));
+          String.format(
+              "Attempting to request an undeclared dependency Provider<%s>.", anInterface));
     }
     return delegateContainer.getProvider(anInterface);
   }
 
+  /**
+   * Returns an instance of the provider for the set of requested classes if it is allowed.
+   *
+   * @throws IllegalArgumentException otherwise.
+   */
+  @Override
+  public <T> Provider<Set<T>> setOfProvider(Class<T> anInterface) {
+    if (!allowedSetProviderInterfaces.contains(anInterface)) {
+      throw new IllegalArgumentException(
+          String.format(
+              "Attempting to request an undeclared dependency Provider<Set<%s>>.", anInterface));
+    }
+    return delegateContainer.setOfProvider(anInterface);
+  }
+
+  /**
+   * Returns a set of requested classes if it is allowed.
+   *
+   * @throws IllegalArgumentException otherwise.
+   */
+  @Override
+  public <T> Set<T> setOf(Class<T> anInterface) {
+    if (!allowedSetDirectInterfaces.contains(anInterface)) {
+      throw new IllegalArgumentException(
+          String.format("Attempting to request an undeclared dependency Set<%s>.", anInterface));
+    }
+    return delegateContainer.setOf(anInterface);
+  }
+
   /**
    * An implementation of {@link Publisher} that is backed by another delegate {@link Publisher} and
    * restricts publishing to only a set of allowed event types.
diff --git a/firebase-common/src/main/java/com/google/firebase/platforminfo/DefaultUserAgentPublisher.java b/firebase-common/src/main/java/com/google/firebase/platforminfo/DefaultUserAgentPublisher.java
new file mode 100644
index 000000000..6a9121414
--- /dev/null
+++ b/firebase-common/src/main/java/com/google/firebase/platforminfo/DefaultUserAgentPublisher.java
@@ -0,0 +1,76 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.platforminfo;
+
+import com.google.firebase.components.Component;
+import com.google.firebase.components.Dependency;
+import java.util.Iterator;
+import java.util.Set;
+
+/**
+ * Provides a user agent string that captures the SDKs and their corresponding versions.
+ *
+ * <p>Example user agent string: "firebase-common/16.1.1 firebase-firestore/16.1.2
+ * firebase-database/16.1.2"
+ */
+public class DefaultUserAgentPublisher implements UserAgentPublisher {
+  private final String javaSDKVersionUserAgent;
+  private final GlobalLibraryVersionRegistrar gamesSDKRegistrar;
+
+  DefaultUserAgentPublisher(
+      Set<LibraryVersion> libraryVersions, GlobalLibraryVersionRegistrar gamesSDKRegistrar) {
+    this.javaSDKVersionUserAgent = toUserAgent(libraryVersions);
+    this.gamesSDKRegistrar = gamesSDKRegistrar;
+  }
+
+  /**
+   * Returns the user agent string that is computed as follows 1. For our JavaSDKs, the string is
+   * computed in advance since the components framework guarantees that we receive all published
+   * versions. 2. For our GamesSDKs, the strings are recomputed each time since the registration of
+   * the versions happens out of band and we take the optimistic approach of recomputing each time.
+   */
+  @Override
+  public String getUserAgent() {
+    if (gamesSDKRegistrar.getRegisteredVersions().isEmpty()) {
+      return javaSDKVersionUserAgent;
+    }
+
+    return javaSDKVersionUserAgent + ' ' + toUserAgent(gamesSDKRegistrar.getRegisteredVersions());
+  }
+
+  private static String toUserAgent(Set<LibraryVersion> tokens) {
+    StringBuilder sb = new StringBuilder();
+    Iterator<LibraryVersion> iterator = tokens.iterator();
+    while (iterator.hasNext()) {
+      LibraryVersion token = iterator.next();
+      sb.append(token.getLibraryName()).append('/').append(token.getVersion());
+      if (iterator.hasNext()) {
+        sb.append(' ');
+      }
+    }
+    return sb.toString();
+  }
+
+  /** Creates a component to codify a user agent string that captures SDK versions. */
+  public static Component<UserAgentPublisher> component() {
+    return Component.builder(UserAgentPublisher.class)
+        .add(Dependency.setOf(LibraryVersion.class))
+        .factory(
+            c ->
+                new DefaultUserAgentPublisher(
+                    c.setOf(LibraryVersion.class), GlobalLibraryVersionRegistrar.getInstance()))
+        .build();
+  }
+}
diff --git a/firebase-common/src/main/java/com/google/firebase/platforminfo/GlobalLibraryVersionRegistrar.java b/firebase-common/src/main/java/com/google/firebase/platforminfo/GlobalLibraryVersionRegistrar.java
new file mode 100644
index 000000000..ecaadfa08
--- /dev/null
+++ b/firebase-common/src/main/java/com/google/firebase/platforminfo/GlobalLibraryVersionRegistrar.java
@@ -0,0 +1,65 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.platforminfo;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * In order to allow the C++ and Unity SDKs to publish their versions without the use of the
+ * components framework, we have a mechanism where the versions can be wired as out of band as side
+ * effects. See {@link GlobalLibraryVersionRegistrar#registerVersion(String, String)}
+ *
+ * <p>Java libraries should use {@link LibraryVersionComponent#create(String, String)} instead.
+ */
+public class GlobalLibraryVersionRegistrar {
+  private final Set<LibraryVersion> infos = new HashSet<>();
+  private static volatile GlobalLibraryVersionRegistrar INSTANCE;
+
+  GlobalLibraryVersionRegistrar() {}
+
+  /**
+   * Thread safe method to publish versions outside of the components mechanics.
+   *
+   * <p>It is the responsibility of the caller to register the version at app launch.
+   */
+  public void registerVersion(String sdkName, String version) {
+    synchronized (infos) {
+      infos.add(LibraryVersion.create(sdkName, version));
+    }
+  }
+
+  /** Returns registered versions */
+  Set<LibraryVersion> getRegisteredVersions() {
+    synchronized (infos) {
+      return Collections.unmodifiableSet(infos);
+    }
+  }
+
+  /** Returns an instance of {@link GlobalLibraryVersionRegistrar} */
+  public static GlobalLibraryVersionRegistrar getInstance() {
+    GlobalLibraryVersionRegistrar localRef = INSTANCE;
+    if (localRef == null) {
+      synchronized (GlobalLibraryVersionRegistrar.class) {
+        localRef = INSTANCE;
+        if (localRef == null) {
+          INSTANCE = localRef = new GlobalLibraryVersionRegistrar();
+        }
+      }
+    }
+    return localRef;
+  }
+}
diff --git a/firebase-common/src/main/java/com/google/firebase/platforminfo/LibraryVersion.java b/firebase-common/src/main/java/com/google/firebase/platforminfo/LibraryVersion.java
new file mode 100644
index 000000000..b2de424cc
--- /dev/null
+++ b/firebase-common/src/main/java/com/google/firebase/platforminfo/LibraryVersion.java
@@ -0,0 +1,32 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.platforminfo;
+
+import com.google.auto.value.AutoValue;
+import javax.annotation.Nonnull;
+
+/** The class is not public to ensure other components cannot depend on it. */
+@AutoValue
+abstract class LibraryVersion {
+  static LibraryVersion create(String name, String version) {
+    return new AutoValue_LibraryVersion(name, version);
+  }
+
+  @Nonnull
+  public abstract String getLibraryName();
+
+  @Nonnull
+  public abstract String getVersion();
+}
diff --git a/firebase-common/src/main/java/com/google/firebase/platforminfo/LibraryVersionComponent.java b/firebase-common/src/main/java/com/google/firebase/platforminfo/LibraryVersionComponent.java
new file mode 100644
index 000000000..e9b022be2
--- /dev/null
+++ b/firebase-common/src/main/java/com/google/firebase/platforminfo/LibraryVersionComponent.java
@@ -0,0 +1,27 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.platforminfo;
+
+import com.google.firebase.components.Component;
+
+/** Factory to create a component that publishes the version of an SDK */
+public class LibraryVersionComponent {
+  private LibraryVersionComponent() {}
+
+  /** Creates a component that publishes SDK versions */
+  public static Component<?> create(String sdkName, String version) {
+    return Component.intoSet(LibraryVersion.create(sdkName, version), LibraryVersion.class);
+  }
+}
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/Version.java b/firebase-common/src/main/java/com/google/firebase/platforminfo/UserAgentPublisher.java
similarity index 67%
rename from firebase-firestore/src/main/java/com/google/firebase/firestore/core/Version.java
rename to firebase-common/src/main/java/com/google/firebase/platforminfo/UserAgentPublisher.java
index e14560a93..077ea7e97 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/Version.java
+++ b/firebase-common/src/main/java/com/google/firebase/platforminfo/UserAgentPublisher.java
@@ -12,11 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package com.google.firebase.firestore.core;
+package com.google.firebase.platforminfo;
 
-/** Holds static version string of the SDK. */
-public class Version {
-  // TODO: Replace this version with the general Firestore version once we stop doing
-  // out-of-band releases.
-  public static final String SDK_VERSION = "0.6.6-dev";
+/** Component that publishes a user agent string */
+public interface UserAgentPublisher {
+  String getUserAgent();
 }
diff --git a/firebase-common/src/main/java/com/google/firebase/platforminfo/package-info.java b/firebase-common/src/main/java/com/google/firebase/platforminfo/package-info.java
new file mode 100644
index 000000000..9d3282e95
--- /dev/null
+++ b/firebase-common/src/main/java/com/google/firebase/platforminfo/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.platforminfo;
diff --git a/firebase-common/src/test/java/com/google/firebase/DataCollectionDefaultDisabledTest.java b/firebase-common/src/test/java/com/google/firebase/DataCollectionDefaultDisabledTest.java
index e518c1d53..26cf2c233 100644
--- a/firebase-common/src/test/java/com/google/firebase/DataCollectionDefaultDisabledTest.java
+++ b/firebase-common/src/test/java/com/google/firebase/DataCollectionDefaultDisabledTest.java
@@ -15,14 +15,14 @@
 package com.google.firebase;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.firebase.DataCollectionTestUtil.getSharedPreferences;
+import static com.google.firebase.DataCollectionTestUtil.setSharedPreferencesTo;
+import static com.google.firebase.DataCollectionTestUtil.withApp;
 
-import android.content.Context;
 import android.content.SharedPreferences;
-import java.util.function.Consumer;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
@@ -76,29 +76,4 @@ public void setDataCollectionDefaultEnabledTrue_shouldEmitEvents() {
           assertThat(changeListener.changes).containsExactly(true, false).inOrder();
         });
   }
-
-  private static void withApp(Consumer<FirebaseApp> callable) {
-    FirebaseApp app =
-        FirebaseApp.initializeApp(
-            RuntimeEnvironment.application.getApplicationContext(),
-            new FirebaseOptions.Builder().setApplicationId("appId").build(),
-            "someApp");
-    try {
-      callable.accept(app);
-    } finally {
-      app.delete();
-    }
-  }
-
-  private static SharedPreferences getSharedPreferences() {
-    return RuntimeEnvironment.application.getSharedPreferences(
-        FirebaseApp.FIREBASE_APP_PREFS, Context.MODE_PRIVATE);
-  }
-
-  private static void setSharedPreferencesTo(boolean enabled) {
-    getSharedPreferences()
-        .edit()
-        .putBoolean(FirebaseApp.DATA_COLLECTION_DEFAULT_ENABLED, enabled)
-        .commit();
-  }
 }
diff --git a/firebase-common/src/test/java/com/google/firebase/DataCollectionDefaultEnabledTest.java b/firebase-common/src/test/java/com/google/firebase/DataCollectionDefaultEnabledTest.java
index 997f3a4ab..1de320143 100644
--- a/firebase-common/src/test/java/com/google/firebase/DataCollectionDefaultEnabledTest.java
+++ b/firebase-common/src/test/java/com/google/firebase/DataCollectionDefaultEnabledTest.java
@@ -15,21 +15,18 @@
 package com.google.firebase;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.firebase.DataCollectionTestUtil.getSharedPreferences;
+import static com.google.firebase.DataCollectionTestUtil.setSharedPreferencesTo;
+import static com.google.firebase.DataCollectionTestUtil.withApp;
 
-import android.content.Context;
 import android.content.SharedPreferences;
-import java.util.function.Consumer;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 
 @RunWith(RobolectricTestRunner.class)
 public class DataCollectionDefaultEnabledTest {
 
-  private static final String NO_AUTO_DATA_COLLECTION_MANIFEST =
-      "NoAutoDataCollectionAndroidManifest.xml";
-
   @Test
   public void isDataCollectionDefaultEnabled_shouldDefaultToTrue() {
     withApp(app -> assertThat(app.isDataCollectionDefaultEnabled()).isTrue());
@@ -61,28 +58,25 @@ public void setDataCollectionDefaultEnabledFalse_shouldUpdateSharedPrefs() {
         });
   }
 
-  private static void withApp(Consumer<FirebaseApp> callable) {
-    FirebaseApp app =
-        FirebaseApp.initializeApp(
-            RuntimeEnvironment.application.getApplicationContext(),
-            new FirebaseOptions.Builder().setApplicationId("appId").build(),
-            "someApp");
-    try {
-      callable.accept(app);
-    } finally {
-      app.delete();
-    }
-  }
-
-  private static SharedPreferences getSharedPreferences() {
-    return RuntimeEnvironment.application.getSharedPreferences(
-        FirebaseApp.FIREBASE_APP_PREFS, Context.MODE_PRIVATE);
-  }
+  @Test
+  public void setDataCollectionDefaultEnabled_shouldNotAffectOtherFirebaseAppInstances() {
+    withApp(
+        "app1",
+        app1 -> {
+          withApp(
+              "app2",
+              app2 -> {
+                assertThat(app1.isDataCollectionDefaultEnabled()).isTrue();
+                assertThat(app2.isDataCollectionDefaultEnabled()).isTrue();
+              });
 
-  private static void setSharedPreferencesTo(boolean enabled) {
-    getSharedPreferences()
-        .edit()
-        .putBoolean(FirebaseApp.DATA_COLLECTION_DEFAULT_ENABLED, enabled)
-        .commit();
+          app1.setDataCollectionDefaultEnabled(false);
+          withApp(
+              "app2",
+              app2 -> {
+                assertThat(app1.isDataCollectionDefaultEnabled()).isFalse();
+                assertThat(app2.isDataCollectionDefaultEnabled()).isTrue();
+              });
+        });
   }
 }
diff --git a/firebase-common/src/test/java/com/google/firebase/DataCollectionTestUtil.java b/firebase-common/src/test/java/com/google/firebase/DataCollectionTestUtil.java
new file mode 100644
index 000000000..a3739d069
--- /dev/null
+++ b/firebase-common/src/test/java/com/google/firebase/DataCollectionTestUtil.java
@@ -0,0 +1,57 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import java.util.function.Consumer;
+import org.robolectric.RuntimeEnvironment;
+
+public final class DataCollectionTestUtil {
+  static final String APP_NAME = "someApp";
+
+  static final String FIREBASE_APP_PREFS = "com.google.firebase.common.prefs:";
+
+  private DataCollectionTestUtil() {}
+
+  static void withApp(Consumer<FirebaseApp> callable) {
+    withApp(APP_NAME, callable);
+  }
+
+  static void withApp(String name, Consumer<FirebaseApp> callable) {
+    FirebaseApp app =
+        FirebaseApp.initializeApp(
+            RuntimeEnvironment.application.getApplicationContext(),
+            new FirebaseOptions.Builder().setApplicationId("appId").build(),
+            name);
+    try {
+      callable.accept(app);
+    } finally {
+      app.delete();
+    }
+  }
+
+  static SharedPreferences getSharedPreferences() {
+    return RuntimeEnvironment.application.getSharedPreferences(
+        FIREBASE_APP_PREFS + APP_NAME, Context.MODE_PRIVATE);
+  }
+
+  static void setSharedPreferencesTo(boolean enabled) {
+    getSharedPreferences()
+        .edit()
+        .putBoolean(FirebaseApp.DATA_COLLECTION_DEFAULT_ENABLED, enabled)
+        .commit();
+  }
+}
diff --git a/firebase-common/src/test/java/com/google/firebase/VersionGenerationTest.java b/firebase-common/src/test/java/com/google/firebase/VersionGenerationTest.java
new file mode 100644
index 000000000..437c57adb
--- /dev/null
+++ b/firebase-common/src/test/java/com/google/firebase/VersionGenerationTest.java
@@ -0,0 +1,30 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class VersionGenerationTest {
+
+  @Test
+  public void isVersionGenerated_shouldNotBeEmpty() {
+    assertThat(BuildConfig.VERSION_NAME).isNotEmpty();
+  }
+}
diff --git a/firebase-common/src/test/java/com/google/firebase/components/ComponentRuntimeTest.java b/firebase-common/src/test/java/com/google/firebase/components/ComponentRuntimeTest.java
index 2d33e3f85..ba081e8ab 100644
--- a/firebase-common/src/test/java/com/google/firebase/components/ComponentRuntimeTest.java
+++ b/firebase-common/src/test/java/com/google/firebase/components/ComponentRuntimeTest.java
@@ -233,4 +233,55 @@ public void container_shouldExposeAllProvidedInterfacesOfAComponent() {
     assertThat(child).isSameAs(parent);
     assertThat(child.get()).isSameAs(parent.get());
   }
+
+  @Test
+  public void container_shouldExposeAllRegisteredSetValues() {
+    ComponentRuntime runtime =
+        new ComponentRuntime(
+            EXECUTOR,
+            Collections.emptyList(),
+            Component.intoSet(1, Integer.class),
+            Component.intoSet(2, Integer.class));
+
+    assertThat(runtime.setOf(Integer.class)).containsExactly(1, 2);
+  }
+
+  @Test
+  public void setComponents_shouldParticipateInCycleDetection() {
+    try {
+      new ComponentRuntime(
+          EXECUTOR,
+          Collections.emptyList(),
+          Component.builder(ComponentOne.class)
+              .add(Dependency.setOf(Integer.class))
+              .factory(c -> null)
+              .build(),
+          Component.intoSet(1, Integer.class),
+          Component.intoSetBuilder(Integer.class)
+              .add(Dependency.required(ComponentOne.class))
+              .factory(c -> 2)
+              .build());
+      fail("Expected exception not thrown.");
+    } catch (DependencyCycleException ex) {
+      // success.
+    }
+  }
+
+  @Test
+  public void setComponents_shouldNotPreventValueComponentsFromBeingRegistered() {
+    ComponentRuntime runtime =
+        new ComponentRuntime(
+            EXECUTOR,
+            Collections.emptySet(),
+            Component.intoSet(1, Integer.class),
+            Component.intoSet(2, Integer.class),
+            Component.of(2f, Float.class),
+            Component.intoSet(3, Integer.class),
+            Component.intoSet(4, Integer.class),
+            Component.of(4d, Double.class));
+
+    assertThat(runtime.setOf(Integer.class)).containsExactly(1, 2, 3, 4);
+    assertThat(runtime.get(Float.class)).isEqualTo(2f);
+    assertThat(runtime.get(Double.class)).isEqualTo(4d);
+  }
 }
diff --git a/firebase-common/src/test/java/com/google/firebase/components/ComponentTest.java b/firebase-common/src/test/java/com/google/firebase/components/ComponentTest.java
index e0005c83b..33cb06b8d 100644
--- a/firebase-common/src/test/java/com/google/firebase/components/ComponentTest.java
+++ b/firebase-common/src/test/java/com/google/firebase/components/ComponentTest.java
@@ -17,6 +17,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
+import java.math.BigDecimal;
 import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -26,16 +27,55 @@
 public class ComponentTest {
   interface TestInterface {}
 
-  static class TestClass implements TestInterface {}
+  private static class TestClass implements TestInterface {}
 
   private final ComponentFactory<TestClass> nullFactory = container -> null;
 
+  @Test
+  public void of_withMultipleInterfaces_shouldSetCorrectDefaults() {
+    TestClass testClass = new TestClass();
+    Component<TestClass> component = Component.of(testClass, TestClass.class, TestInterface.class);
+    assertThat(component.getProvidedInterfaces())
+        .containsExactly(TestClass.class, TestInterface.class);
+    assertThat(component.isLazy()).isTrue();
+    assertThat(component.isValue()).isTrue();
+    assertThat(component.isAlwaysEager()).isFalse();
+    assertThat(component.isEagerInDefaultApp()).isFalse();
+    assertThat(component.getDependencies()).isEmpty();
+    assertThat(component.getFactory().create(null)).isSameAs(testClass);
+  }
+
   @Test
   public void builder_shouldSetCorrectDefaults() {
     Component<TestClass> component =
         Component.builder(TestClass.class).factory(nullFactory).build();
     assertThat(component.getProvidedInterfaces()).containsExactly(TestClass.class);
     assertThat(component.isLazy()).isTrue();
+    assertThat(component.isValue()).isTrue();
+    assertThat(component.isAlwaysEager()).isFalse();
+    assertThat(component.isEagerInDefaultApp()).isFalse();
+    assertThat(component.getDependencies()).isEmpty();
+  }
+
+  @Test
+  public void intoSetBuilder_shouldSetCorrectDefaults() {
+    Component<TestClass> component =
+        Component.intoSetBuilder(TestClass.class).factory(nullFactory).build();
+    assertThat(component.getProvidedInterfaces()).containsExactly(TestClass.class);
+    assertThat(component.isLazy()).isTrue();
+    assertThat(component.isValue()).isFalse();
+    assertThat(component.isAlwaysEager()).isFalse();
+    assertThat(component.isEagerInDefaultApp()).isFalse();
+    assertThat(component.getDependencies()).isEmpty();
+  }
+
+  @Test
+  public void intoSet_shouldSetCorrectDefaults() {
+    TestClass testClass = new TestClass();
+    Component<TestClass> component = Component.intoSet(testClass, TestClass.class);
+    assertThat(component.getProvidedInterfaces()).containsExactly(TestClass.class);
+    assertThat(component.isLazy()).isTrue();
+    assertThat(component.isValue()).isFalse();
     assertThat(component.isAlwaysEager()).isFalse();
     assertThat(component.isEagerInDefaultApp()).isFalse();
     assertThat(component.getDependencies()).isEmpty();
@@ -62,7 +102,7 @@ public void eagerInDefaultApp_shouldProperlySetComponentInitialization() {
   }
 
   @Test
-  public void uptatingInstantiationMultipleTimes_shouldThrow() {
+  public void updatingInstantiationMultipleTimes_shouldThrow() {
     Component.Builder<TestClass> builder = Component.builder(TestClass.class).eagerInDefaultApp();
 
     try {
@@ -79,18 +119,22 @@ public void add_shouldProperlyAddDependencies() {
         Component.builder(TestClass.class)
             .add(Dependency.required(List.class))
             .add(Dependency.optional(Integer.class))
+            .add(Dependency.setOf(Long.class))
             .add(Dependency.requiredProvider(Float.class))
             .add(Dependency.optionalProvider(Double.class))
+            .add(Dependency.setOfProvider(BigDecimal.class))
             .factory(nullFactory)
             .build();
 
-    assertThat(component.getDependencies()).hasSize(4);
+    assertThat(component.getDependencies()).hasSize(6);
     assertThat(component.getDependencies())
         .containsExactly(
             Dependency.required(List.class),
             Dependency.optional(Integer.class),
+            Dependency.setOf(Long.class),
             Dependency.requiredProvider(Float.class),
-            Dependency.optionalProvider(Double.class));
+            Dependency.optionalProvider(Double.class),
+            Dependency.setOfProvider(BigDecimal.class));
   }
 
   @Test
@@ -113,6 +157,18 @@ public void addOptionalDependency_onSelf_shouldThrow() {
     }
   }
 
+  @Test
+  public void publishes_shouldProperlyAddToPublishedEvents() {
+    Component<TestClass> component =
+        Component.builder(TestClass.class)
+            .factory(nullFactory)
+            .publishes(Integer.class)
+            .publishes(Float.class)
+            .build();
+
+    assertThat(component.getPublishedEvents()).containsExactly(Integer.class, Float.class);
+  }
+
   @Test
   public void builder_withMultipleInterfaces_shouldProperlySetInterfaces() {
     Component<TestClass> component =
diff --git a/firebase-common/src/test/java/com/google/firebase/components/ComponentSorterTest.java b/firebase-common/src/test/java/com/google/firebase/components/CycleDetectorTest.java
similarity index 80%
rename from firebase-common/src/test/java/com/google/firebase/components/ComponentSorterTest.java
rename to firebase-common/src/test/java/com/google/firebase/components/CycleDetectorTest.java
index b485e206e..091b7be8b 100644
--- a/firebase-common/src/test/java/com/google/firebase/components/ComponentSorterTest.java
+++ b/firebase-common/src/test/java/com/google/firebase/components/CycleDetectorTest.java
@@ -19,15 +19,13 @@
 
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 @RunWith(JUnit4.class)
-public class ComponentSorterTest {
+public class CycleDetectorTest {
   private static final ComponentFactory<Object> NULL_FACTORY = container -> null;
 
   @SuppressWarnings("unchecked")
@@ -58,7 +56,7 @@
    *    ----> 2 <----
    */
   @Test
-  public void sort_shouldTopologicallySortComponents1() {
+  public void detect_shouldNotDetectACycle1() {
     List<Component<?>> components =
         Arrays.asList(
             Component.builder(TestInterface4.class)
@@ -75,7 +73,7 @@ public void sort_shouldTopologicallySortComponents1() {
                 .factory(nullFactory())
                 .build());
 
-    twice(() -> testSort(components));
+    twice(() -> detect(components));
   }
 
   /*
@@ -86,7 +84,7 @@ public void sort_shouldTopologicallySortComponents1() {
    * 6 -> 7
    */
   @Test
-  public void sort_shouldTopologicallySortComponents2() {
+  public void detect_shouldNotDetectACycle2() {
     List<Component<?>> components =
         Arrays.asList(
             Component.builder(TestInterface1.class)
@@ -112,7 +110,7 @@ public void sort_shouldTopologicallySortComponents2() {
                 .build(),
             Component.builder(TestInterface7.class).factory(nullFactory()).build());
 
-    twice(() -> testSort(components));
+    twice(() -> detect(components));
   }
 
   /*
@@ -127,7 +125,7 @@ public void sort_shouldTopologicallySortComponents2() {
    *   5   6   7
    */
   @Test
-  public void sort_shouldTopologicallySortComponents3() {
+  public void detect_shouldNotDetectACycle3() {
     List<Component<?>> components =
         Arrays.asList(
             Component.builder(TestInterface1.class)
@@ -152,7 +150,7 @@ public void sort_shouldTopologicallySortComponents3() {
             Component.builder(TestInterface6.class).factory(nullFactory()).build(),
             Component.builder(TestInterface7.class).factory(nullFactory()).build());
 
-    twice(() -> testSort(components));
+    twice(() -> detect(components));
   }
 
   /*
@@ -164,7 +162,7 @@ public void sort_shouldTopologicallySortComponents3() {
    *   3   4   5   6
    */
   @Test
-  public void sort_shouldTopologicallySortComponents4() {
+  public void detect_shouldNotDetectACycle4() {
     List<Component<?>> components =
         Arrays.asList(
             Component.builder(TestInterface1.class)
@@ -183,7 +181,7 @@ public void sort_shouldTopologicallySortComponents4() {
             Component.builder(TestInterface6.class).factory(nullFactory()).build(),
             Component.builder(TestInterface7.class).factory(nullFactory()).build());
 
-    twice(() -> testSort(components));
+    twice(() -> detect(components));
   }
 
   /*
@@ -194,7 +192,7 @@ public void sort_shouldTopologicallySortComponents4() {
    *     |_________|
    */
   @Test
-  public void sort_withDependencyCycle_shouldThrow() {
+  public void detect_withDependencyCycle_shouldThrow() {
     List<Component<?>> components =
         Arrays.asList(
             Component.builder(TestInterface1.class)
@@ -211,7 +209,7 @@ public void sort_withDependencyCycle_shouldThrow() {
                 .build());
 
     try {
-      ComponentSorter.sorted(components);
+      CycleDetector.detect(components);
       fail("Not thrown");
     } catch (DependencyCycleException ex) {
       assertThat(ex.getComponentsInCycle()).containsExactlyElementsIn(components);
@@ -227,7 +225,7 @@ public void sort_withDependencyCycle_shouldThrow() {
         |_Provider_|
   */
   @Test
-  public void sort_withProviderDependencyCycle_shouldSortCorrectly() {
+  public void detect_withProviderDependencyCycle_shouldNotThrow() {
     List<Component<?>> components =
         Arrays.asList(
             Component.builder(TestInterface1.class)
@@ -243,31 +241,32 @@ public void sort_withProviderDependencyCycle_shouldSortCorrectly() {
                 .factory(nullFactory())
                 .build());
 
-    ComponentSorter.sorted(components);
-    twice(() -> testSort(components));
+    CycleDetector.detect(components);
+    twice(() -> detect(components));
   }
 
   @Test
-  public void sort_withMultipleComponentsImplementingSameIface_shouldThrow() {
+  public void detect_withMultipleComponentsImplementingSameIface_shouldThrow() {
     List<Component<?>> components =
         Arrays.asList(
             Component.builder(TestInterface1.class).factory(nullFactory()).build(),
             Component.builder(TestInterface1.class).factory(nullFactory()).build());
 
     try {
-      ComponentSorter.sorted(components);
+      CycleDetector.detect(components);
       fail();
     } catch (IllegalArgumentException ex) {
       // success.
     }
   }
 
-  private static void testSort(List<Component<?>> components) {
+  private static void detect(List<Component<?>> components) {
     Collections.shuffle(components);
-    List<Component<?>> sorted = ComponentSorter.sorted(components);
-
-    assertThat(sorted).hasSize(components.size());
-    assertAscendingOrder(sorted);
+    try {
+      CycleDetector.detect(components);
+    } catch (DependencyException ex) {
+      fail(String.format("Unexpected exception thrown: %s", ex));
+    }
   }
 
   private static void twice(Runnable runnable) {
@@ -275,28 +274,4 @@ private static void twice(Runnable runnable) {
       runnable.run();
     }
   }
-
-  private static void assertAscendingOrder(List<Component<?>> components) {
-    Set<Class<?>> seenInterfaces = new HashSet<>();
-    Set<Class<?>> allInterfaces = new HashSet<>();
-    for (Component<?> component : components) {
-      allInterfaces.addAll(component.getProvidedInterfaces());
-    }
-
-    for (Component<?> component : components) {
-      for (Dependency dependency : component.getDependencies()) {
-        if (!dependency.isDirectInjection()) {
-          continue;
-        }
-        Class<?> iface = dependency.getInterface();
-        if (allInterfaces.contains(iface) && !seenInterfaces.contains(iface)) {
-          fail(
-              String.format(
-                  "Encountered component before its dependency. Component: %s, Dependency: %s",
-                  component, iface));
-        }
-      }
-      seenInterfaces.addAll(component.getProvidedInterfaces());
-    }
-  }
 }
diff --git a/firebase-common/src/test/java/com/google/firebase/components/DependencyTest.java b/firebase-common/src/test/java/com/google/firebase/components/DependencyTest.java
new file mode 100644
index 000000000..0c3fdaca9
--- /dev/null
+++ b/firebase-common/src/test/java/com/google/firebase/components/DependencyTest.java
@@ -0,0 +1,84 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.components;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class DependencyTest {
+  @Test
+  public void optional_shouldHaveExpectedInvariants() {
+    Dependency dependency = Dependency.optional(String.class);
+
+    assertThat(dependency.isRequired()).isFalse();
+    assertThat(dependency.isSet()).isFalse();
+    assertThat(dependency.isDirectInjection()).isTrue();
+    assertThat(dependency.getInterface()).isEqualTo(String.class);
+  }
+
+  @Test
+  public void required_shouldHaveExpectedInvariants() {
+    Dependency dependency = Dependency.required(String.class);
+
+    assertThat(dependency.isRequired()).isTrue();
+    assertThat(dependency.isSet()).isFalse();
+    assertThat(dependency.isDirectInjection()).isTrue();
+    assertThat(dependency.getInterface()).isEqualTo(String.class);
+  }
+
+  @Test
+  public void setOf_shouldHaveExpectedInvariants() {
+    Dependency dependency = Dependency.setOf(String.class);
+
+    assertThat(dependency.isRequired()).isFalse();
+    assertThat(dependency.isSet()).isTrue();
+    assertThat(dependency.isDirectInjection()).isTrue();
+    assertThat(dependency.getInterface()).isEqualTo(String.class);
+  }
+
+  @Test
+  public void optionalProvider_shouldHaveExpectedInvariants() {
+    Dependency dependency = Dependency.optionalProvider(String.class);
+
+    assertThat(dependency.isRequired()).isFalse();
+    assertThat(dependency.isSet()).isFalse();
+    assertThat(dependency.isDirectInjection()).isFalse();
+    assertThat(dependency.getInterface()).isEqualTo(String.class);
+  }
+
+  @Test
+  public void requiredProvider_shouldHaveExpectedInvariants() {
+    Dependency dependency = Dependency.requiredProvider(String.class);
+
+    assertThat(dependency.isRequired()).isTrue();
+    assertThat(dependency.isSet()).isFalse();
+    assertThat(dependency.isDirectInjection()).isFalse();
+    assertThat(dependency.getInterface()).isEqualTo(String.class);
+  }
+
+  @Test
+  public void setOfProvider_shouldHaveExpectedInvariants() {
+    Dependency dependency = Dependency.setOfProvider(String.class);
+
+    assertThat(dependency.isRequired()).isFalse();
+    assertThat(dependency.isSet()).isTrue();
+    assertThat(dependency.isDirectInjection()).isFalse();
+    assertThat(dependency.getInterface()).isEqualTo(String.class);
+  }
+}
diff --git a/firebase-common/src/test/java/com/google/firebase/components/LazyTest.java b/firebase-common/src/test/java/com/google/firebase/components/LazyTest.java
index 307712967..6b5ef83d6 100644
--- a/firebase-common/src/test/java/com/google/firebase/components/LazyTest.java
+++ b/firebase-common/src/test/java/com/google/firebase/components/LazyTest.java
@@ -15,7 +15,6 @@
 package com.google.firebase.components;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -38,10 +37,9 @@
 
 @RunWith(JUnit4.class)
 public final class LazyTest {
-  private static final ComponentContainer CONTAINER = new EmptyContainer();
 
   @SuppressWarnings("unchecked")
-  private final ComponentFactory<Object> mockFactory = mock(ComponentFactory.class);
+  private final Provider<Object> mockProvider = mock(Provider.class);
 
   @Test
   public void get_whenLazyIsInitializedWithValue_shouldReturnTheValue() {
@@ -54,13 +52,13 @@ public void get_whenLazyIsInitializedWithValue_shouldReturnTheValue() {
   @Test
   public void get_shouldDelegateToFactory() {
     Object instance = new Object();
-    Lazy<Object> lazy = new Lazy<>(mockFactory, CONTAINER);
+    Lazy<Object> lazy = new Lazy<>(mockProvider);
 
-    when(mockFactory.create(any())).thenReturn(instance);
+    when(mockProvider.get()).thenReturn(instance);
 
     assertThat(lazy.get()).isSameAs(instance);
 
-    verify(mockFactory, times(1)).create(CONTAINER);
+    verify(mockProvider, times(1)).get();
   }
 
   @Test
@@ -70,8 +68,8 @@ public void get_shouldBeThreadSafe() throws Exception {
 
     ExecutorService executor = Executors.newFixedThreadPool(numThreads);
 
-    LatchedFactory factory = new LatchedFactory(latch);
-    Lazy<Object> lazy = new Lazy<>(factory, CONTAINER);
+    LatchedProvider provider = new LatchedProvider(latch);
+    Lazy<Object> lazy = new Lazy<>(provider);
 
     List<Callable<Object>> tasks = new ArrayList<>(numThreads);
     for (int i = 0; i < numThreads; i++) {
@@ -83,7 +81,7 @@ public void get_shouldBeThreadSafe() throws Exception {
     }
     List<Future<Object>> futures = executor.invokeAll(tasks);
 
-    assertThat(factory.instantiationCount.get()).isEqualTo(1);
+    assertThat(provider.instantiationCount.get()).isEqualTo(1);
 
     Set<Object> createdInstances = new HashSet<>();
     for (Future<Object> future : futures) {
@@ -92,23 +90,16 @@ public void get_shouldBeThreadSafe() throws Exception {
     assertThat(createdInstances).hasSize(1);
   }
 
-  private static class EmptyContainer extends AbstractComponentContainer {
-    @Override
-    public <T> Provider<T> getProvider(Class<T> anInterface) {
-      return null;
-    }
-  }
-
-  private static class LatchedFactory implements ComponentFactory<Object> {
+  private static class LatchedProvider implements Provider<Object> {
     private final CountDownLatch latch;
     final AtomicInteger instantiationCount = new AtomicInteger();
 
-    LatchedFactory(CountDownLatch latch) {
+    LatchedProvider(CountDownLatch latch) {
       this.latch = latch;
     }
 
     @Override
-    public Object create(ComponentContainer container) {
+    public Object get() {
       // wait for all threads to start and get as close to calling Lazy#get() as possible.
       uninterruptablyAwait(latch);
       instantiationCount.incrementAndGet();
diff --git a/firebase-common/src/test/java/com/google/firebase/components/RestrictedComponentContainerTest.java b/firebase-common/src/test/java/com/google/firebase/components/RestrictedComponentContainerTest.java
index 9ef02b0e9..6989e440a 100644
--- a/firebase-common/src/test/java/com/google/firebase/components/RestrictedComponentContainerTest.java
+++ b/firebase-common/src/test/java/com/google/firebase/components/RestrictedComponentContainerTest.java
@@ -23,7 +23,9 @@
 
 import com.google.firebase.events.Event;
 import com.google.firebase.events.Publisher;
+import java.util.Collections;
 import java.util.List;
+import java.util.Set;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -35,26 +37,28 @@
   private final ComponentContainer container =
       new RestrictedComponentContainer(
           Component.builder(String.class)
-              .add(Dependency.required(StringBuilder.class))
-              .add(Dependency.requiredProvider(StringBuffer.class))
+              .add(Dependency.required(Float.class))
+              .add(Dependency.requiredProvider(Double.class))
+              .add(Dependency.setOf(Long.class))
+              .add(Dependency.setOfProvider(Boolean.class))
               .factory(c -> null)
               .build(),
           delegate);
 
   private final ComponentContainer publishingContainer =
       new RestrictedComponentContainer(
-          Component.builder(String.class).publishes(StringBuilder.class).factory(c -> null).build(),
+          Component.builder(String.class).publishes(Float.class).factory(c -> null).build(),
           delegate);
 
   private final Publisher mockPublisher = mock(Publisher.class);
 
   @Test
   public void get_withAllowedClass_shouldReturnAnInstanceOfThatClass() {
-    StringBuilder sb = new StringBuilder();
-    when(delegate.get(StringBuilder.class)).thenReturn(sb);
+    Float value = 1.0f;
+    when(delegate.get(Float.class)).thenReturn(value);
 
-    assertThat(container.get(StringBuilder.class)).isSameAs(sb);
-    verify(delegate).get(StringBuilder.class);
+    assertThat(container.get(Float.class)).isSameAs(value);
+    verify(delegate).get(Float.class);
   }
 
   @Test
@@ -70,10 +74,10 @@ public void get_withNotAllowedClass_shouldThrow() {
   @Test
   public void get_withProviderClass_shouldThrow() {
     try {
-      container.get(StringBuffer.class);
+      container.get(Double.class);
       fail("Expected exception not thrown.");
     } catch (IllegalArgumentException ex) {
-      assertThat(ex.getMessage()).contains("java.lang.StringBuffer");
+      assertThat(ex.getMessage()).contains("java.lang.Double");
     }
   }
 
@@ -89,11 +93,11 @@ public void get_withPublisher_shouldThrow() {
 
   @Test
   public void getProvider_withAllowedClass_shouldReturnAnInstanceOfThatClass() {
-    StringBuffer sb = new StringBuffer();
-    when(delegate.getProvider(StringBuffer.class)).thenReturn(new Lazy<>(sb));
+    Double value = 3.0d;
+    when(delegate.getProvider(Double.class)).thenReturn(new Lazy<>(value));
 
-    assertThat(container.getProvider(StringBuffer.class).get()).isSameAs(sb);
-    verify(delegate).getProvider(StringBuffer.class);
+    assertThat(container.getProvider(Double.class).get()).isSameAs(value);
+    verify(delegate).getProvider(Double.class);
   }
 
   @Test
@@ -109,10 +113,48 @@ public void getProvider_withNotAllowedClass_shouldThrow() {
   @Test
   public void getProvider_withDirectClass_shouldThrow() {
     try {
-      container.getProvider(StringBuilder.class);
+      container.getProvider(Float.class);
       fail("Expected exception not thrown.");
     } catch (IllegalArgumentException ex) {
-      assertThat(ex.getMessage()).contains("java.lang.StringBuilder");
+      assertThat(ex.getMessage()).contains("java.lang.Float");
+    }
+  }
+
+  @Test
+  public void setOf_withAllowedClass_shouldReturnExpectedSet() {
+    Set<Long> set = Collections.emptySet();
+    when(delegate.setOf(Long.class)).thenReturn(set);
+
+    assertThat(container.setOf(Long.class)).isSameAs(set);
+    verify(delegate).setOf(Long.class);
+  }
+
+  @Test
+  public void setOf_withNotAllowedClass_shouldThrow() {
+    try {
+      container.setOf(List.class);
+      fail("Expected exception not thrown.");
+    } catch (IllegalArgumentException ex) {
+      assertThat(ex.getMessage()).contains("java.util.List");
+    }
+  }
+
+  @Test
+  public void setOfProvider_withAllowedClass_shouldReturnExpectedSet() {
+    Set<Boolean> set = Collections.emptySet();
+    when(delegate.setOfProvider(Boolean.class)).thenReturn(new Lazy<>(set));
+
+    assertThat(container.setOfProvider(Boolean.class).get()).isSameAs(set);
+    verify(delegate).setOfProvider(Boolean.class);
+  }
+
+  @Test
+  public void setOfProvider_withNotAllowedClass_shouldThrow() {
+    try {
+      container.setOf(List.class);
+      fail("Expected exception not thrown.");
+    } catch (IllegalArgumentException ex) {
+      assertThat(ex.getMessage()).contains("java.util.List");
     }
   }
 
@@ -121,7 +163,7 @@ public void publish_withDeclaredEvent_shouldSucceed() {
     when(delegate.get(Publisher.class)).thenReturn(mockPublisher);
     Publisher publisher = publishingContainer.get(Publisher.class);
 
-    Event<StringBuilder> event = new Event<>(StringBuilder.class, new StringBuilder());
+    Event<Float> event = new Event<>(Float.class, 1f);
     publisher.publish(event);
 
     verify(mockPublisher).publish(event);
@@ -132,13 +174,13 @@ public void publish_withUndeclaredEvent_shouldThrow() {
     when(delegate.get(Publisher.class)).thenReturn(mockPublisher);
     Publisher publisher = publishingContainer.get(Publisher.class);
 
-    Event<StringBuffer> event = new Event<>(StringBuffer.class, new StringBuffer());
+    Event<Double> event = new Event<>(Double.class, 1d);
 
     try {
       publisher.publish(event);
       fail("Expected exception not thrown.");
     } catch (IllegalArgumentException ex) {
-      assertThat(ex.getMessage()).contains("java.lang.StringBuffer");
+      assertThat(ex.getMessage()).contains("java.lang.Double");
     }
 
     verify(mockPublisher, never()).publish(event);
diff --git a/firebase-common/src/test/java/com/google/firebase/platforminfo/DefaultUserAgentPublisherTest.java b/firebase-common/src/test/java/com/google/firebase/platforminfo/DefaultUserAgentPublisherTest.java
new file mode 100644
index 000000000..9fbfde92e
--- /dev/null
+++ b/firebase-common/src/test/java/com/google/firebase/platforminfo/DefaultUserAgentPublisherTest.java
@@ -0,0 +1,83 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.platforminfo;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class DefaultUserAgentPublisherTest {
+  private Set<LibraryVersion> libraryVersions;
+  private DefaultUserAgentPublisher userAgentPublisher;
+  private GlobalLibraryVersionRegistrar globalLibraryVersionRegistrar;
+
+  @Before
+  public void before() {
+    libraryVersions = new HashSet<>();
+    libraryVersions.add(LibraryVersion.create("foo", "1"));
+    libraryVersions.add(LibraryVersion.create("bar", "2"));
+
+    globalLibraryVersionRegistrar = mock(GlobalLibraryVersionRegistrar.class);
+
+    when(globalLibraryVersionRegistrar.getRegisteredVersions()).thenReturn(new HashSet<>());
+
+    userAgentPublisher =
+        new DefaultUserAgentPublisher(libraryVersions, globalLibraryVersionRegistrar);
+  }
+
+  @Test
+  public void getUserAgent_createsConcatenatedStringOfSdkVersions() {
+    String[] expectedUserAgent = {"bar/2", "foo/1"};
+
+    String[] actualUserAgent = userAgentPublisher.getUserAgent().split(" ");
+    Arrays.sort(actualUserAgent);
+
+    assertThat(actualUserAgent).isEqualTo(expectedUserAgent);
+  }
+
+  @Test
+  public void getUserAgent_returnsEmptyString_whenVersionSetIsEmpty() {
+    userAgentPublisher =
+        new DefaultUserAgentPublisher(new HashSet<>(), globalLibraryVersionRegistrar);
+
+    assertThat(userAgentPublisher.getUserAgent()).isEqualTo("");
+  }
+
+  @Test
+  public void
+      getUserAgent_returnsStringIncludingGamesSDKVersions_whenGamesSDKVersionRegistrarReturnsVersions() {
+    String[] expectedUserAgent = {"bar/2", "buzz/2", "fizz/1", "foo/1"};
+    HashSet<LibraryVersion> gamesLibraryVersions = new HashSet<>();
+    gamesLibraryVersions.add(LibraryVersion.create("fizz", "1"));
+    gamesLibraryVersions.add(LibraryVersion.create("buzz", "2"));
+    when(globalLibraryVersionRegistrar.getRegisteredVersions()).thenReturn(gamesLibraryVersions);
+    userAgentPublisher =
+        new DefaultUserAgentPublisher(libraryVersions, globalLibraryVersionRegistrar);
+
+    String[] actualUserAgent = userAgentPublisher.getUserAgent().split(" ");
+    Arrays.sort(actualUserAgent);
+
+    assertThat(actualUserAgent).isEqualTo(expectedUserAgent);
+  }
+}
diff --git a/firebase-common/src/test/java/com/google/firebase/platforminfo/GlobalLibraryVersionRegistrarTest.java b/firebase-common/src/test/java/com/google/firebase/platforminfo/GlobalLibraryVersionRegistrarTest.java
new file mode 100644
index 000000000..9e3b178e1
--- /dev/null
+++ b/firebase-common/src/test/java/com/google/firebase/platforminfo/GlobalLibraryVersionRegistrarTest.java
@@ -0,0 +1,42 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.platforminfo;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class GlobalLibraryVersionRegistrarTest {
+  @Test
+  public void registerVersion_persistsVersion() {
+    GlobalLibraryVersionRegistrar globalLibraryVersionRegistrar =
+        new GlobalLibraryVersionRegistrar();
+    globalLibraryVersionRegistrar.registerVersion("foo", "1.1.1");
+
+    assertThat(globalLibraryVersionRegistrar.getRegisteredVersions())
+        .contains(LibraryVersion.create("foo", "1.1.1"));
+  }
+
+  @Test
+  public void getRegisteredVersions_returnsEmptySet_whenNoVersionsAreRegistered() {
+    GlobalLibraryVersionRegistrar globalLibraryVersionRegistrar =
+        new GlobalLibraryVersionRegistrar();
+
+    assertThat(globalLibraryVersionRegistrar.getRegisteredVersions()).isEmpty();
+  }
+}
diff --git a/firebase-common/src/testUtil/com/google/firebase/components/TestComponentRegistrar.java b/firebase-common/src/testUtil/com/google/firebase/components/TestComponentRegistrar.java
index ad135d7fc..5ebddedac 100644
--- a/firebase-common/src/testUtil/com/google/firebase/components/TestComponentRegistrar.java
+++ b/firebase-common/src/testUtil/com/google/firebase/components/TestComponentRegistrar.java
@@ -17,10 +17,15 @@
 import android.content.Context;
 import com.google.firebase.FirebaseApp;
 import com.google.firebase.FirebaseOptions;
+import com.google.firebase.platforminfo.LibraryVersionComponent;
+import com.google.firebase.platforminfo.UserAgentPublisher;
 import java.util.Arrays;
 import java.util.List;
 
 class TestComponentRegistrar implements ComponentRegistrar {
+  private static final String TEST_COMPONENT_NAME = "test-component";
+  private static String TEST_VERSION = "1.2.3";
+
   @Override
   public List<Component<?>> getComponents() {
     return Arrays.asList(
@@ -38,6 +43,13 @@
                         container.get(FirebaseApp.class),
                         container.get(FirebaseOptions.class),
                         container.get(TestComponentOne.class)))
-            .build());
+            .build(),
+        Component.builder(TestUserAgentDependentComponent.class)
+            .add(Dependency.required(UserAgentPublisher.class))
+            .factory(
+                container ->
+                    new TestUserAgentDependentComponent(container.get(UserAgentPublisher.class)))
+            .build(),
+        LibraryVersionComponent.create(TEST_COMPONENT_NAME, TEST_VERSION));
   }
 }
diff --git a/firebase-common/src/testUtil/com/google/firebase/components/TestUserAgentDependentComponent.java b/firebase-common/src/testUtil/com/google/firebase/components/TestUserAgentDependentComponent.java
new file mode 100644
index 000000000..d1071c640
--- /dev/null
+++ b/firebase-common/src/testUtil/com/google/firebase/components/TestUserAgentDependentComponent.java
@@ -0,0 +1,29 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.components;
+
+import com.google.firebase.platforminfo.UserAgentPublisher;
+
+public class TestUserAgentDependentComponent {
+  private final UserAgentPublisher userAgentPublisher;
+
+  public TestUserAgentDependentComponent(UserAgentPublisher userAgentPublisher) {
+    this.userAgentPublisher = userAgentPublisher;
+  }
+
+  public UserAgentPublisher getUserAgentPublisher() {
+    return userAgentPublisher;
+  }
+}
diff --git a/firebase-database-collection/firebase-database-collection.gradle b/firebase-database-collection/firebase-database-collection.gradle
index 7da2c76aa..e87098fb9 100644
--- a/firebase-database-collection/firebase-database-collection.gradle
+++ b/firebase-database-collection/firebase-database-collection.gradle
@@ -14,10 +14,8 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 28
-
 android {
-    compileSdkVersion androidVersion
+    compileSdkVersion project.targetSdkVersion
     defaultConfig {
         minSdkVersion 9
     }
diff --git a/firebase-database-collection/gradle.properties b/firebase-database-collection/gradle.properties
index 844d1ae93..c763f6446 100644
--- a/firebase-database-collection/gradle.properties
+++ b/firebase-database-collection/gradle.properties
@@ -1,2 +1,2 @@
-version=16.0.1
-latestReleasedVersion=16.0.0
+version=16.0.2
+latestReleasedVersion=16.0.1
diff --git a/firebase-database-collection/src/main/AndroidManifest.xml b/firebase-database-collection/src/main/AndroidManifest.xml
index 59833a0d9..7ab0714c4 100644
--- a/firebase-database-collection/src/main/AndroidManifest.xml
+++ b/firebase-database-collection/src/main/AndroidManifest.xml
@@ -1,4 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.google.firebase.database.collection">
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for bazel builds-->
+    <!--<uses-sdk android:minSdkVersion="9" />-->
 </manifest>
diff --git a/firebase-database-collection/src/main/java/com/google/firebase/database/collection/LLRBValueNode.java b/firebase-database-collection/src/main/java/com/google/firebase/database/collection/LLRBValueNode.java
index 88ff6d55a..92b27944d 100644
--- a/firebase-database-collection/src/main/java/com/google/firebase/database/collection/LLRBValueNode.java
+++ b/firebase-database-collection/src/main/java/com/google/firebase/database/collection/LLRBValueNode.java
@@ -67,9 +67,9 @@ public V getValue() {
     LLRBNode<K, V> newLeft = left == null ? this.left : left;
     LLRBNode<K, V> newRight = right == null ? this.right : right;
     if (color == Color.RED) {
-      return new LLRBRedValueNode<K, V>(newKey, newValue, newLeft, newRight);
+      return new LLRBRedValueNode<>(newKey, newValue, newLeft, newRight);
     } else {
-      return new LLRBBlackValueNode<K, V>(newKey, newValue, newLeft, newRight);
+      return new LLRBBlackValueNode<>(newKey, newValue, newLeft, newRight);
     }
   }
 
@@ -221,7 +221,7 @@ void setLeft(LLRBNode<K, V> left) {
     if (n.right.isRed() && !n.left.isRed()) {
       n = n.rotateLeft();
     }
-    if (n.left.isRed() && ((LLRBValueNode<K, V>) (n.left)).left.isRed()) {
+    if (n.left.isRed() && ((LLRBValueNode<K, V>) n.left).left.isRed()) {
       n = n.rotateRight();
     }
     if (n.left.isRed() && n.right.isRed()) {
@@ -232,13 +232,13 @@ void setLeft(LLRBNode<K, V> left) {
 
   private LLRBValueNode<K, V> rotateLeft() {
     LLRBValueNode<K, V> newLeft =
-        this.copy(null, null, Color.RED, null, ((LLRBValueNode<K, V>) (this.right)).left);
+        this.copy(null, null, Color.RED, null, ((LLRBValueNode<K, V>) this.right).left);
     return (LLRBValueNode<K, V>) this.right.copy(null, null, this.getColor(), newLeft, null);
   }
 
   private LLRBValueNode<K, V> rotateRight() {
     LLRBValueNode<K, V> newRight =
-        this.copy(null, null, Color.RED, ((LLRBValueNode<K, V>) (this.left)).right, null);
+        this.copy(null, null, Color.RED, ((LLRBValueNode<K, V>) this.left).right, null);
     return (LLRBValueNode<K, V>) this.left.copy(null, null, this.getColor(), null, newRight);
   }
 
diff --git a/firebase-database-collection/src/main/java/com/google/firebase/database/collection/RBTreeSortedMap.java b/firebase-database-collection/src/main/java/com/google/firebase/database/collection/RBTreeSortedMap.java
index 74c841ee7..061ddc323 100644
--- a/firebase-database-collection/src/main/java/com/google/firebase/database/collection/RBTreeSortedMap.java
+++ b/firebase-database-collection/src/main/java/com/google/firebase/database/collection/RBTreeSortedMap.java
@@ -243,7 +243,7 @@ public int indexOf(K key) {
       public Base1_2(int size) {
         int toCalc = size + 1;
         length = (int) Math.floor(Math.log(toCalc) / Math.log(2));
-        long mask = (long) (Math.pow(2, length)) - 1;
+        long mask = ((long) Math.pow(2, length)) - 1;
         value = toCalc & mask;
       }
 
@@ -340,7 +340,7 @@ private void buildPennant(LLRBNode.Color color, int chunkSize, int start) {
         Comparator<A> comparator) {
       Builder<A, B, C> builder = new Builder<>(keys, values, translator);
       Collections.sort(keys, comparator);
-      Iterator<BooleanChunk> iter = (new Base1_2(keys.size())).iterator();
+      Iterator<BooleanChunk> iter = new Base1_2(keys.size()).iterator();
       int index = keys.size();
       while (iter.hasNext()) {
         BooleanChunk next = iter.next();
diff --git a/firebase-database/firebase-database.gradle b/firebase-database/firebase-database.gradle
index 1f4ee4ba9..cf7520088 100644
--- a/firebase-database/firebase-database.gradle
+++ b/firebase-database/firebase-database.gradle
@@ -14,28 +14,16 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 28
-
-
-tasks.withType(org.gradle.api.tasks.testing.Test) {
-    testLogging {
-        exceptionFormat = 'full'
-        showStandardStreams = true
-        showCauses = true
-        showExceptions =true
-        showStackTraces = true
-    }
-}
-
 android {
     adbOptions {
         timeOutInMs 60 * 1000
     }
 
-    compileSdkVersion androidVersion
+    compileSdkVersion project.targetSdkVersion
     defaultConfig {
-        targetSdkVersion androidVersion
-        minSdkVersion 14
+        targetSdkVersion project.targetSdkVersion
+        minSdkVersion project.minSdkVersion
+        versionName version
         multiDexEnabled true
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
@@ -70,6 +58,8 @@ android {
     packagingOptions {
         exclude 'META-INF/DEPENDENCIES'
     }
+
+    testOptions.unitTests.includeAndroidResources = true
 }
 
 dependencies {
@@ -83,7 +73,7 @@ dependencies {
     androidTestImplementation "com.android.support:support-annotations:$supportAnnotationsVersion"
     androidTestImplementation 'com.android.support.test:rules:1.0.2'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
-    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation "com.google.truth:truth:$googleTruthVersion"
     androidTestImplementation 'com.fasterxml.jackson.core:jackson-core:2.9.6'
     androidTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
     androidTestImplementation 'junit:junit:4.12'
@@ -94,12 +84,12 @@ dependencies {
 
     testImplementation 'junit:junit:4.12'
     testImplementation 'org.mockito:mockito-core:2.21.0'
-    testImplementation 'org.robolectric:robolectric:3.8'
+    testImplementation "org.robolectric:robolectric:$robolectricVersion"
     testImplementation 'com.firebase:firebase-token-generator:2.0.0'
     testImplementation 'com.fasterxml.jackson.core:jackson-core:2.9.6'
     testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
     testImplementation 'net.java.quickcheck:quickcheck:0.6'
-    testImplementation 'com.google.truth:truth:0.42'
+    testImplementation "com.google.truth:truth:$googleTruthVersion"
     testImplementation 'com.android.support.test:rules:1.0.2'
 
 }
diff --git a/firebase-database/gradle.properties b/firebase-database/gradle.properties
index 57bed5614..227ea992d 100644
--- a/firebase-database/gradle.properties
+++ b/firebase-database/gradle.properties
@@ -12,5 +12,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-version=16.0.4
-latestReleasedVersion=16.0.3
+version=16.1.0
+latestReleasedVersion=16.0.6
+android.enableUnitTestBinaryResources=true
diff --git a/firebase-database/src/androidTest/AndroidManifest.xml b/firebase-database/src/androidTest/AndroidManifest.xml
index bd4a6dd5b..78a493dfb 100644
--- a/firebase-database/src/androidTest/AndroidManifest.xml
+++ b/firebase-database/src/androidTest/AndroidManifest.xml
@@ -16,7 +16,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           xmlns:tools="http://schemas.android.com/tools"
           package="com.google.firebase.database.android">
-
+    <!--<uses-sdk android:minSdkVersion="14" android:targetSdkVersion="23"/>-->
     <uses-permission android:name="android.permission.INTERNET"/>
     <application android:label="FirebaseDatabaseTests" android:largeHeap="true">
         <uses-library android:name="android.test.runner"/>
diff --git a/firebase-database/src/main/AndroidManifest.xml b/firebase-database/src/main/AndroidManifest.xml
index 1b8c92982..476fdd993 100644
--- a/firebase-database/src/main/AndroidManifest.xml
+++ b/firebase-database/src/main/AndroidManifest.xml
@@ -15,7 +15,16 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.firebase.database">
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+    <!--<uses-sdk android:minSdkVersion="14"/>-->
 
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.INTERNET" />
+
+    <application>
+        <service android:name="com.google.firebase.components.ComponentDiscoveryService">
+            <meta-data android:name="com.google.firebase.components:com.google.firebase.database.DatabaseRegistrar"
+                android:value="com.google.firebase.components.ComponentRegistrar" />
+        </service>
+    </application>
 </manifest>
diff --git a/firebase-database/src/main/java/com/google/firebase/database/DatabaseRegistrar.java b/firebase-database/src/main/java/com/google/firebase/database/DatabaseRegistrar.java
new file mode 100644
index 000000000..530a66fb7
--- /dev/null
+++ b/firebase-database/src/main/java/com/google/firebase/database/DatabaseRegistrar.java
@@ -0,0 +1,32 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.database;
+
+import android.support.annotation.Keep;
+import com.google.firebase.components.Component;
+import com.google.firebase.components.ComponentRegistrar;
+import com.google.firebase.platforminfo.LibraryVersionComponent;
+import java.util.Collections;
+import java.util.List;
+
+/** @hide */
+@Keep
+public class DatabaseRegistrar implements ComponentRegistrar {
+  @Override
+  public List<Component<?>> getComponents() {
+    return Collections.singletonList(
+        LibraryVersionComponent.create("fire-rtdb", BuildConfig.VERSION_NAME));
+  }
+}
diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/operation/package-info.java b/firebase-database/src/main/java/com/google/firebase/database/core/operation/package-info.java
new file mode 100644
index 000000000..92b0a54f6
--- /dev/null
+++ b/firebase-database/src/main/java/com/google/firebase/database/core/operation/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.database.core.operation;
\ No newline at end of file
diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/persistence/package-info.java b/firebase-database/src/main/java/com/google/firebase/database/core/persistence/package-info.java
new file mode 100644
index 000000000..a2e358837
--- /dev/null
+++ b/firebase-database/src/main/java/com/google/firebase/database/core/persistence/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.database.core.persistence;
\ No newline at end of file
diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/encoding/package-info.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/encoding/package-info.java
new file mode 100644
index 000000000..9da8a1615
--- /dev/null
+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/encoding/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.database.core.utilities.encoding;
\ No newline at end of file
diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/package-info.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/package-info.java
new file mode 100644
index 000000000..53be2dc4b
--- /dev/null
+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.database.core.utilities;
\ No newline at end of file
diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/tuple/package-info.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/tuple/package-info.java
new file mode 100644
index 000000000..cb3c71c7c
--- /dev/null
+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/tuple/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.database.core.utilities.tuple;
\ No newline at end of file
diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/view/package-info.java b/firebase-database/src/main/java/com/google/firebase/database/core/view/package-info.java
new file mode 100644
index 000000000..354ed2b11
--- /dev/null
+++ b/firebase-database/src/main/java/com/google/firebase/database/core/view/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.database.core.view;
\ No newline at end of file
diff --git a/firebase-database/src/main/java/com/google/firebase/database/tubesock/WebSocket.java b/firebase-database/src/main/java/com/google/firebase/database/tubesock/WebSocket.java
index 7f4948160..d4a391268 100644
--- a/firebase-database/src/main/java/com/google/firebase/database/tubesock/WebSocket.java
+++ b/firebase-database/src/main/java/com/google/firebase/database/tubesock/WebSocket.java
@@ -29,6 +29,7 @@
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
@@ -410,12 +411,13 @@ private void runReader() {
       handshake.verifyServerStatusLine(handshakeLines.get(0));
       handshakeLines.remove(0);
 
-      HashMap<String, String> headers = new HashMap<String, String>();
+      HashMap<String, String> lowercaseHeaders = new HashMap<String, String>();
       for (String line : handshakeLines) {
         String[] keyValue = line.split(": ", 2);
-        headers.put(keyValue[0], keyValue[1]);
+        lowercaseHeaders.put(
+            keyValue[0].toLowerCase(Locale.US), keyValue[1].toLowerCase(Locale.US));
       }
-      handshake.verifyServerHandshakeHeaders(headers);
+      handshake.verifyServerHandshakeHeaders(lowercaseHeaders);
 
       writer.setOutput(output);
       receiver.setInput(input);
diff --git a/firebase-database/src/main/java/com/google/firebase/database/tubesock/WebSocketHandshake.java b/firebase-database/src/main/java/com/google/firebase/database/tubesock/WebSocketHandshake.java
index 2840403a3..444a0f43e 100644
--- a/firebase-database/src/main/java/com/google/firebase/database/tubesock/WebSocketHandshake.java
+++ b/firebase-database/src/main/java/com/google/firebase/database/tubesock/WebSocketHandshake.java
@@ -19,7 +19,6 @@
 import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
-import java.util.Locale;
 import java.util.Map;
 
 class WebSocketHandshake {
@@ -107,11 +106,11 @@ public void verifyServerStatusLine(String statusLine) {
     }
   }
 
-  public void verifyServerHandshakeHeaders(HashMap<String, String> headers) {
-    if (!headers.get("Upgrade").toLowerCase(Locale.US).equals("websocket")) {
+  public void verifyServerHandshakeHeaders(HashMap<String, String> lowercaseHeaders) {
+    if (!"websocket".equals(lowercaseHeaders.get("upgrade"))) {
       throw new WebSocketException(
           "connection failed: missing header field in server handshake: Upgrade");
-    } else if (!headers.get("Connection").toLowerCase(Locale.US).equals("upgrade")) {
+    } else if (!"upgrade".equals(lowercaseHeaders.get("connection"))) {
       throw new WebSocketException(
           "connection failed: missing header field in server handshake: Connection");
     }
diff --git a/firebase-database/src/test/java/com/google/firebase/database/DatabaseRegistrarTest.java b/firebase-database/src/test/java/com/google/firebase/database/DatabaseRegistrarTest.java
new file mode 100644
index 000000000..91e908840
--- /dev/null
+++ b/firebase-database/src/test/java/com/google/firebase/database/DatabaseRegistrarTest.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright 2018 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.firebase.database;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.FirebaseOptions;
+import com.google.firebase.platforminfo.UserAgentPublisher;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+@RunWith(RobolectricTestRunner.class)
+public class DatabaseRegistrarTest {
+  private static final String TEST_NAMESPACE = "http://tests.firebaselocal.com:9000";
+
+  @Test
+  public void getComponents_publishesLibVersionComponent() {
+    FirebaseApp app = appForDatabaseUrl(TEST_NAMESPACE, "test");
+    UserAgentPublisher userAgentPublisher = app.get(UserAgentPublisher.class);
+
+    String actualUserAgent = userAgentPublisher.getUserAgent();
+    assertThat(actualUserAgent).contains("fire-rtdb");
+  }
+
+  private static FirebaseApp appForDatabaseUrl(String url, String name) {
+    return FirebaseApp.initializeApp(
+        RuntimeEnvironment.application.getApplicationContext(),
+        new FirebaseOptions.Builder().setApplicationId("appid").setDatabaseUrl(url).build(),
+        name);
+  }
+}
diff --git a/firebase-firestore/CHANGELOG.md b/firebase-firestore/CHANGELOG.md
index c7c551669..97e4545cf 100644
--- a/firebase-firestore/CHANGELOG.md
+++ b/firebase-firestore/CHANGELOG.md
@@ -1,10 +1,45 @@
 # Unreleased
-- [feature] Custom objects (POJOs) can now be passed as a field value in
-  update(), within `Map<>` objects passed to set(), in array transform
-  operations, and in query filters.
-- [feature] DocumentSnapshot.get() now supports retrieving fields as
-  custom objects (POJOs) by passing a Class<T> instance, e.g.
+- [fixed] Fixed calculation of SQLite database size on Android 9 Pie devices.
+  Previous method could be off by a few MBs on these devices, potentially
+  delaying garbage collection.
+
+# 18.0.1
+- [fixed] Fixed an issue where Firestore would crash if handling write batches
+  larger than 2 MB in size (#208).
+- [changed] Firestore now recovers more quickly from long periods without
+  network access (#217).
+
+# 18.0.0
+- [changed] The `timestampsInSnapshotsEnabled` setting is now enabled by
+  default. Timestamp fields that read from a `DocumentSnapshot` are now
+  returned as `Timestamp` objects instead of `Date` objects. This is a breaking
+  change; developers must update any code that expects to receive a `Date`
+  object. See https://firebase.google.com/docs/reference/android/com/google/firebase/firestore/FirebaseFirestoreSettings.Builder.html#setTimestampsInSnapshotsEnabled(boolean) for more details.
+- [feature] Custom objects (POJOs) can now be passed in several ways: as a
+  field value in `update()`, within `Map<>` objects passed to `set()`, in array
+  transform operations, and in query filters.
+- [feature] `DocumentSnapshot.get()` now supports retrieving fields as
+  custom objects (POJOs) by passing a `Class<T>` instance, e.g.,
   `snapshot.get("field", CustomType.class)`.
+- [fixed] Fixed an issue where if an app sent a write to the server, but the
+  app was shut down before a listener received the write, the app could crash.
+
+# 17.1.5
+- [changed] Firestore now recovers more quickly from bad network states.
+- [changed] Improved performance for reading large collections.
+- [fixed] Offline persistence now properly records schema downgrades. This is a
+  forward-looking change that allows you to safely downgrade from future SDK
+  versions to this version (v17.1.5). You can already safely downgrade versions
+  now depending on the source version. For example, you can safely downgrade
+  from v17.1.4 to v17.1.2 because there are no schema changes between those
+  versions. (#134)
+
+# 17.1.4
+- [fixed] Fixed a SQLite transaction handling issue that occasionally masked
+  exceptions when Firestore closed a transaction that was never started. For
+  more information, see the issue report in GitHub (https://github.com/firebase/firebase-android-sdk/issues/115).
+- [fixed] Fixed a race condition that caused a `SQLiteDatabaseLockedException`
+  when an app attempted to access the SQLite database from multiple threads.
 
 # 17.1.2
 - [changed] Changed how the SDK handles locally-updated documents while syncing
diff --git a/firebase-firestore/firebase-firestore.gradle b/firebase-firestore/firebase-firestore.gradle
index 26422831a..720ccce7a 100644
--- a/firebase-firestore/firebase-firestore.gradle
+++ b/firebase-firestore/firebase-firestore.gradle
@@ -15,8 +15,6 @@
 apply plugin: 'com.android.library'
 apply plugin: 'com.google.protobuf'
 
-def androidVersion = 28
-
 protobuf {
     // Configure the protoc executable
     protoc {
@@ -25,7 +23,7 @@ protobuf {
     }
     plugins {
         grpc {
-            artifact = 'io.grpc:protoc-gen-grpc-java:1.12.0'
+            artifact = 'io.grpc:protoc-gen-grpc-java:1.16.1'
         }
         javalite {
             // The codegen for lite comes as a separate artifact
@@ -53,10 +51,11 @@ android {
         timeOutInMs 60 * 1000
     }
 
-    compileSdkVersion androidVersion
+    compileSdkVersion project.targetSdkVersion
     defaultConfig {
-        targetSdkVersion androidVersion
-        minSdkVersion 14
+        targetSdkVersion project.targetSdkVersion
+        minSdkVersion project.minSdkVersion
+        versionName version
         multiDexEnabled true
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
@@ -84,6 +83,7 @@ android {
         sourceCompatibility JavaVersion.VERSION_1_8
         targetCompatibility JavaVersion.VERSION_1_8
     }
+    testOptions.unitTests.includeAndroidResources = true
 }
 
 dependencies {
@@ -94,35 +94,44 @@ dependencies {
     //To provide @Generated annotations
     compileOnly 'javax.annotation:jsr250-api:1.0'
 
-    implementation 'io.grpc:grpc-stub:1.12.0'
-    implementation 'io.grpc:grpc-protobuf-lite:1.12.0'
-    implementation 'io.grpc:grpc-okhttp:1.12.0'
+    implementation 'io.grpc:grpc-stub:1.16.1'
+    implementation 'io.grpc:grpc-protobuf-lite:1.16.1'
+    implementation 'io.grpc:grpc-okhttp:1.16.1'
+    implementation 'io.grpc:grpc-android:1.16.1'
     implementation "com.google.android.gms:play-services-basement:$playServicesVersion"
     implementation "com.google.android.gms:play-services-tasks:$playServicesVersion"
     implementation "com.google.android.gms:play-services-base:$playServicesVersion"
 
     implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
 
-    implementation 'com.squareup.okhttp:okhttp:2.7.2'
+    implementation 'com.squareup.okhttp:okhttp:2.7.5'
     implementation ('com.google.firebase:firebase-auth-interop:16.0.1') {
         exclude group: "com.google.firebase", module: "firebase-common"
     }
 
     testImplementation 'junit:junit:4.12'
     testImplementation 'org.mockito:mockito-core:2.21.0'
-    testImplementation 'org.robolectric:robolectric:4.0-alpha-3'
-    testImplementation 'com.google.truth:truth:0.42'
+    testImplementation "org.robolectric:robolectric:$robolectricVersion"
+    testImplementation "com.google.truth:truth:$googleTruthVersion"
     testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
     testImplementation 'com.google.guava:guava-testlib:12.0-rc2'
 
     androidTestImplementation 'junit:junit:4.12'
-    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation "com.google.truth:truth:$googleTruthVersion"
     androidTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
     androidTestImplementation "com.android.support:support-annotations:$supportAnnotationsVersion"
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
     androidTestImplementation 'com.android.support.test:rules:1.0.2'
 }
 
+gradle.projectsEvaluated {
+    tasks.withType(JavaCompile) {
+        // TODO(rsgowman): Also add "-Xlint:unchecked". But currently that
+        // enables 100+ warnings due to our generated source code.
+        options.compilerArgs << "-Xlint:deprecation"
+    }
+}
+
 // ==========================================================================
 // Copy from here down if you want to use the google-services plugin in your
 // androidTest integration tests.
diff --git a/firebase-firestore/gradle.properties b/firebase-firestore/gradle.properties
index bbb4ed8f5..d8acaf637 100644
--- a/firebase-firestore/gradle.properties
+++ b/firebase-firestore/gradle.properties
@@ -1,2 +1,2 @@
-version=17.1.2
-latestReleasedVersion=17.1.1
+version=18.1.0
+latestReleasedVersion=18.0.1
diff --git a/firebase-firestore/src/androidTest/AndroidManifest.xml b/firebase-firestore/src/androidTest/AndroidManifest.xml
index 4cea76cbf..bdc98ea2e 100644
--- a/firebase-firestore/src/androidTest/AndroidManifest.xml
+++ b/firebase-firestore/src/androidTest/AndroidManifest.xml
@@ -1,10 +1,12 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
   package="com.google.firebase.firestore">
-  <uses-sdk android:minSdkVersion="15"
-    android:targetSdkVersion="23" />
+  <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+  <!--<uses-sdk android:minSdkVersion="15" android:targetSdkVersion="23" />-->
   <uses-permission android:name="android.permission.INTERNET"/>
   <application>
     <uses-library android:name="android.test.runner" />
+    <activity android:name="com.google.firebase.firestore.ListenerRegistrationTest$TestActivity"/>
+    <activity android:name="com.google.firebase.firestore.ListenerRegistrationTest$TestFragmentActivity"/>
   </application>
 
   <instrumentation
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ArrayTransformsTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ArrayTransformsTest.java
index 172dc1cdf..46de87b87 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ArrayTransformsTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ArrayTransformsTest.java
@@ -114,7 +114,7 @@ public void removeFromArrayViaUpdate() {
   @Test
   public void removeFromArrayViaSetMerge() {
     writeInitialData(map("array", asList(1L, 3L, 1L, 3L)));
-    waitFor(docRef.update(map("array", FieldValue.arrayRemove(1L, 4L))));
+    waitFor(docRef.set(map("array", FieldValue.arrayRemove(1L, 4L)), SetOptions.merge()));
     expectLocalAndRemoteEvent(map("array", asList(3L, 3L)));
   }
 
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/FieldsTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/FieldsTest.java
index 4c7c394f0..42cc33f08 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/FieldsTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/FieldsTest.java
@@ -217,8 +217,6 @@ public void testFieldsWithSpecialCharsCanBeUsedInOrderBy() {
     return map("timestamp", timestamp, "nested", map("timestamp2", timestamp));
   }
 
-  // Note: because timestampsInSnapshotsEnabled is set to true in default test settings, this test
-  // is unaffected by the current default value in FirebaseFirestoreSettings.
   @Test
   public void testTimestampsInSnapshots() {
     Timestamp originalTimestamp = new Timestamp(100, 123456789);
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ListenerRegistrationTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ListenerRegistrationTest.java
index b7de4f7d7..d6018365b 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ListenerRegistrationTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ListenerRegistrationTest.java
@@ -20,10 +20,14 @@
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNull;
 
+import android.app.Activity;
+import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
+import android.support.v4.app.FragmentActivity;
 import com.google.firebase.firestore.testutil.IntegrationTestUtil;
 import java.util.concurrent.Semaphore;
 import org.junit.After;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -127,4 +131,96 @@ public void canBeRemovedIndependently() {
     // No more events should occur
     two.remove();
   }
+
+  public static class TestActivity extends Activity {
+    private Semaphore stopped = new Semaphore(0);
+
+    @Override
+    protected void onStop() {
+      super.onStop();
+      stopped.release();
+    }
+
+    public void waitForStop() {
+      waitFor(stopped, 1);
+    }
+  }
+
+  public static class TestFragmentActivity extends FragmentActivity {
+    private Semaphore stopped = new Semaphore(0);
+
+    @Override
+    protected void onStop() {
+      super.onStop();
+      stopped.release();
+    }
+
+    public void waitForStop() {
+      waitFor(stopped, 1);
+    }
+  }
+
+  private void activityScopedListenerStopsListeningWhenActivityStops(Activity activity) {
+    CollectionReference collectionReference = testCollection();
+    DocumentReference documentReference = collectionReference.document();
+
+    Semaphore events = new Semaphore(0);
+    collectionReference.addSnapshotListener(
+        activity,
+        (value, error) -> {
+          assertNull(error);
+          events.release();
+        });
+
+    // Initial events
+    waitFor(events, 1);
+
+    // We have a listener, so this should generate events.
+    waitFor(documentReference.set(map("foo", "bar")));
+    assertEquals(1, events.availablePermits());
+    waitFor(events, 1);
+
+    // Since we created an activity-scoped listener, finishing the activity should cause the
+    // listener to be automatically unregistered.
+    activity.finish();
+    waitForActivityToStop(activity);
+
+    // No listeners, therefore, there should be no events.
+    waitFor(documentReference.set(map("foo", "new-bar")));
+    assertEquals(0, events.availablePermits());
+  }
+
+  /** @param activity Must be a TestActivity or a TestFragmentActivity */
+  private void waitForActivityToStop(Activity activity) {
+    if (activity instanceof TestActivity) {
+      ((TestActivity) activity).waitForStop();
+    } else if (activity instanceof TestFragmentActivity) {
+      ((TestFragmentActivity) activity).waitForStop();
+    } else {
+      throw new IllegalArgumentException(
+          "activity must be a TestActivity or a TestFragmentActivity");
+    }
+  }
+
+  @Rule
+  public ActivityTestRule<TestActivity> activityTestRule =
+      new ActivityTestRule<>(
+          TestActivity.class, /*initialTouchMode=*/ false, /*launchActivity=*/ false);
+
+  @Test
+  public void activityScopedListenerStopsListeningWhenRawActivityStops() {
+    TestActivity activity = activityTestRule.launchActivity(/*intent=*/ null);
+    activityScopedListenerStopsListeningWhenActivityStops(activity);
+  }
+
+  @Rule
+  public ActivityTestRule<TestFragmentActivity> activityTestFragmentRule =
+      new ActivityTestRule<>(
+          TestFragmentActivity.class, /*initialTouchMode=*/ false, /*launchActivity=*/ false);
+
+  @Test
+  public void activityScopedListenerStopsListeningWhenFragmentActivityStops() {
+    TestFragmentActivity activity = activityTestFragmentRule.launchActivity(/*intent=*/ null);
+    activityScopedListenerStopsListeningWhenActivityStops(activity);
+  }
 }
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ServerTimestampTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ServerTimestampTest.java
index 0f9e06529..3fb396565 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ServerTimestampTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ServerTimestampTest.java
@@ -215,7 +215,8 @@ public void testServerTimestampsCanRetainPreviousValueThroughConsecutiveUpdates(
     DocumentSnapshot localSnapshot = accumulator.awaitLocalEvent();
     assertEquals(42L, localSnapshot.get("a", ServerTimestampBehavior.PREVIOUS));
 
-    docRef.update("a", FieldValue.serverTimestamp());
+    // include b=1 to ensure there's a change resulting in a new snapshot.
+    docRef.update("a", FieldValue.serverTimestamp(), "b", 1);
     localSnapshot = accumulator.awaitLocalEvent();
     assertEquals(42L, localSnapshot.get("a", ServerTimestampBehavior.PREVIOUS));
 
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/TransactionTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/TransactionTest.java
index 580f864c8..e7a0615ce 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/TransactionTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/TransactionTest.java
@@ -22,6 +22,7 @@
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertNotNull;
 import static junit.framework.Assert.assertTrue;
+import static junit.framework.Assert.fail;
 
 import android.support.test.runner.AndroidJUnit4;
 import com.google.android.gms.tasks.Task;
@@ -456,10 +457,9 @@ public void testReadingADocTwiceWithDifferentVersions() {
               waitFor(doc.set(map("count", 1234.0)));
               // Get the doc again in the transaction with the new version.
               DocumentSnapshot snapshot2 = transaction.get(doc);
-              assertEquals(1234, snapshot2.getDouble("count").intValue());
-              // Now try to update the doc from within the transaction.
-              // This should fail, because we read 15 earlier.
-              transaction.set(doc, map("count", 16.0));
+              // The get itself will fail, because we already read an earlier version of this
+              // document.
+              fail("Should have thrown exception");
               return null;
             }));
     DocumentSnapshot snapshot = waitFor(doc.get());
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java
index dd9ae258d..1c526440a 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java
@@ -14,6 +14,8 @@
 
 package com.google.firebase.firestore;
 
+import static com.google.common.truth.Truth.assertThat;
+import static com.google.firebase.firestore.testutil.Assert.assertThrows;
 import static com.google.firebase.firestore.testutil.IntegrationTestUtil.testAlternateFirestore;
 import static com.google.firebase.firestore.testutil.IntegrationTestUtil.testCollection;
 import static com.google.firebase.firestore.testutil.IntegrationTestUtil.testCollectionWithDocs;
@@ -30,6 +32,7 @@
 
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
+import com.google.android.gms.tasks.TaskCompletionSource;
 import com.google.firebase.FirebaseApp;
 import com.google.firebase.FirebaseOptions;
 import com.google.firebase.firestore.Transaction.Function;
@@ -432,6 +435,56 @@ public void queriesCannotBeCreatedFromDocumentsMissingSortValues() {
     expectError(() -> query.endAt(snapshot), reason);
   }
 
+  @Test
+  public void queriesCannotBeSortedByAnUncommittedServerTimestamp() {
+    CollectionReference collection = testCollection();
+
+    // Ensure the server timestamp stays uncommitted for the first half of the test
+    waitFor(collection.firestore.getClient().disableNetwork());
+
+    TaskCompletionSource<Void> offlineCallbackDone = new TaskCompletionSource<>();
+    TaskCompletionSource<Void> onlineCallbackDone = new TaskCompletionSource<>();
+
+    collection.addSnapshotListener(
+        (snapshot, error) -> {
+          assertNotNull(snapshot);
+
+          // Skip the initial empty snapshot.
+          if (snapshot.isEmpty()) return;
+
+          assertThat(snapshot.getDocuments()).hasSize(1);
+          DocumentSnapshot docSnap = snapshot.getDocuments().get(0);
+
+          if (snapshot.getMetadata().hasPendingWrites()) {
+            // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able to
+            // query by it.
+            assertThrows(
+                IllegalArgumentException.class,
+                () ->
+                    collection
+                        .orderBy("timestamp")
+                        .endAt(docSnap)
+                        .addSnapshotListener((snapshot2, error2) -> {}));
+            offlineCallbackDone.setResult(null);
+          } else {
+            // Online snapshot. Since the server timestamp is committed, we should be able to query
+            // by it.
+            collection
+                .orderBy("timestamp")
+                .endAt(docSnap)
+                .addSnapshotListener((snapshot2, error2) -> {});
+            onlineCallbackDone.setResult(null);
+          }
+        });
+
+    DocumentReference document = collection.document();
+    document.set(map("timestamp", FieldValue.serverTimestamp()));
+    waitFor(offlineCallbackDone.getTask());
+
+    waitFor(collection.firestore.getClient().enableNetwork());
+    waitFor(onlineCallbackDone.getTask());
+  }
+
   @Test
   public void queriesMustNotHaveMoreComponentsThanOrderBy() {
     CollectionReference collection = testCollection();
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/WriteBatchTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/WriteBatchTest.java
index 6dc62a3b8..10544e735 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/WriteBatchTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/WriteBatchTest.java
@@ -32,7 +32,10 @@
 import com.google.firebase.firestore.FirebaseFirestoreException.Code;
 import com.google.firebase.firestore.testutil.EventAccumulator;
 import com.google.firebase.firestore.testutil.IntegrationTestUtil;
+import com.google.firebase.firestore.util.Util;
 import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -253,4 +256,39 @@ public void testCanWriteTheSameDocumentMultipleTimes() {
     assertNotNull(when);
     assertEquals(map("a", 1L, "b", 2L, "when", when), serverSnap.getData());
   }
+
+  @Test
+  public void testCanWriteVeryLargeBatches() {
+    // On Android, SQLite Cursors are limited reading no more than 2 MB per row (despite being able
+    // to write very large values). This test verifies that the SQLiteMutationQueue properly works
+    // around this limitation.
+
+    // Create a map containing nearly 1 MB of data. Note that if you use 1024 below this will create
+    // a document larger than 1 MB, which will be rejected by the backend as too large.
+    String a = Character.toString('a');
+    StringBuilder buf = new StringBuilder(1000);
+    for (int i = 0; i < 1000; i++) {
+      buf.append(a);
+    }
+    String kb = buf.toString();
+    Map<String, Object> values = new HashMap<>();
+    for (int j = 0; j < 1000; j++) {
+      values.put(Util.autoId(), kb);
+    }
+
+    DocumentReference doc = testDocument();
+    WriteBatch batch = doc.getFirestore().batch();
+
+    // Write a batch containing 3 copies of the data, creating a ~3 MB batch. Writing to the same
+    // document in a batch is allowed and so long as the net size of the document is under 1 MB the
+    // batch is allowed.
+    batch.set(doc, values);
+    for (int i = 0; i < 2; i++) {
+      batch.update(doc, values);
+    }
+
+    waitFor(batch.commit());
+    DocumentSnapshot snap = waitFor(doc.get());
+    assertEquals(values, snap.getData());
+  }
 }
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/RemoteStoreTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/RemoteStoreTest.java
new file mode 100644
index 000000000..6cad0e582
--- /dev/null
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/RemoteStoreTest.java
@@ -0,0 +1,116 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.remote;
+
+import static com.google.firebase.firestore.testutil.IntegrationTestUtil.waitFor;
+
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import com.google.firebase.database.collection.ImmutableSortedSet;
+import com.google.firebase.firestore.auth.User;
+import com.google.firebase.firestore.core.OnlineState;
+import com.google.firebase.firestore.local.LocalStore;
+import com.google.firebase.firestore.local.MemoryPersistence;
+import com.google.firebase.firestore.local.Persistence;
+import com.google.firebase.firestore.model.DocumentKey;
+import com.google.firebase.firestore.model.mutation.MutationBatchResult;
+import com.google.firebase.firestore.testutil.IntegrationTestUtil;
+import com.google.firebase.firestore.util.AsyncQueue;
+import com.google.firebase.firestore.util.Consumer;
+import io.grpc.Status;
+import java.util.concurrent.Semaphore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+@RunWith(AndroidJUnit4.class)
+public class RemoteStoreTest {
+  @Test
+  public void testRemoteStoreStreamStopsWhenNetworkUnreachable() {
+    AsyncQueue testQueue = new AsyncQueue();
+    Datastore datastore =
+        new Datastore(
+            IntegrationTestUtil.testEnvDatabaseInfo(),
+            testQueue,
+            null,
+            InstrumentationRegistry.getContext());
+    Semaphore networkChangeSemaphore = new Semaphore(0);
+    RemoteStore.RemoteStoreCallback callback =
+        new RemoteStore.RemoteStoreCallback() {
+          public void handleRemoteEvent(RemoteEvent remoteEvent) {}
+
+          public void handleRejectedListen(int targetId, Status error) {}
+
+          public void handleSuccessfulWrite(MutationBatchResult successfulWrite) {}
+
+          public void handleRejectedWrite(int batchId, Status error) {}
+
+          public void handleOnlineStateChange(OnlineState onlineState) {
+            networkChangeSemaphore.release();
+          }
+
+          public ImmutableSortedSet<DocumentKey> getRemoteKeysForTarget(int targetId) {
+            return null;
+          }
+        };
+
+    FakeConnectivityMonitor connectivityMonitor = new FakeConnectivityMonitor();
+    Persistence persistence = MemoryPersistence.createEagerGcMemoryPersistence();
+    persistence.start();
+    LocalStore localStore = new LocalStore(persistence, User.UNAUTHENTICATED);
+    RemoteStore remoteStore =
+        new RemoteStore(callback, localStore, datastore, testQueue, connectivityMonitor);
+
+    waitFor(testQueue.enqueue(() -> remoteStore.forceEnableNetwork()));
+    drain(testQueue);
+    networkChangeSemaphore.drainPermits();
+
+    connectivityMonitor.goOffline();
+    waitFor(networkChangeSemaphore);
+    drain(testQueue);
+
+    waitFor(testQueue.enqueue(() -> remoteStore.forceEnableNetwork()));
+    networkChangeSemaphore.drainPermits();
+    connectivityMonitor.goOnline();
+    waitFor(networkChangeSemaphore);
+  }
+
+  private void drain(AsyncQueue testQueue) {
+    waitFor(testQueue.enqueue(() -> {}));
+  }
+
+  class FakeConnectivityMonitor implements ConnectivityMonitor {
+    private Consumer<NetworkStatus> callback = null;
+
+    @Override
+    public void addCallback(Consumer<NetworkStatus> callback) {
+      this.callback = callback;
+    }
+
+    @Override
+    public void shutdown() {}
+
+    public void goOffline() {
+      if (callback != null) {
+        callback.accept(ConnectivityMonitor.NetworkStatus.UNREACHABLE);
+      }
+    }
+
+    public void goOnline() {
+      if (callback != null) {
+        callback.accept(ConnectivityMonitor.NetworkStatus.REACHABLE);
+      }
+    }
+  }
+}
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/StreamTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/StreamTest.java
index 6eef00b87..f7dd90476 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/StreamTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/StreamTest.java
@@ -22,6 +22,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import com.google.android.gms.tasks.Task;
 import com.google.firebase.firestore.auth.EmptyCredentialsProvider;
@@ -105,7 +106,10 @@ private WriteStream createAndOpenWriteStream(
       AsyncQueue testQueue, StreamStatusCallback callback) {
     Datastore datastore =
         new Datastore(
-            IntegrationTestUtil.testEnvDatabaseInfo(), testQueue, new EmptyCredentialsProvider());
+            IntegrationTestUtil.testEnvDatabaseInfo(),
+            testQueue,
+            new EmptyCredentialsProvider(),
+            InstrumentationRegistry.getContext());
     final WriteStream writeStream = datastore.createWriteStream(callback);
     waitForWriteStreamOpen(testQueue, writeStream, callback);
     return writeStream;
@@ -125,7 +129,10 @@ public void testWatchStreamStopBeforeHandshake() throws Exception {
     AsyncQueue testQueue = new AsyncQueue();
     Datastore datastore =
         new Datastore(
-            IntegrationTestUtil.testEnvDatabaseInfo(), testQueue, new EmptyCredentialsProvider());
+            IntegrationTestUtil.testEnvDatabaseInfo(),
+            testQueue,
+            new EmptyCredentialsProvider(),
+            InstrumentationRegistry.getContext());
     StreamStatusCallback streamCallback = new StreamStatusCallback() {};
     final WatchStream watchStream = datastore.createWatchStream(streamCallback);
 
@@ -142,7 +149,10 @@ public void testWriteStreamStopAfterHandshake() throws Exception {
     AsyncQueue testQueue = new AsyncQueue();
     Datastore datastore =
         new Datastore(
-            IntegrationTestUtil.testEnvDatabaseInfo(), testQueue, new EmptyCredentialsProvider());
+            IntegrationTestUtil.testEnvDatabaseInfo(),
+            testQueue,
+            new EmptyCredentialsProvider(),
+            InstrumentationRegistry.getContext());
     final WriteStream[] writeStreamWrapper = new WriteStream[1];
     StreamStatusCallback streamCallback =
         new StreamStatusCallback() {
@@ -185,7 +195,10 @@ public void testWriteStreamStopPartial() throws Exception {
     AsyncQueue testQueue = new AsyncQueue();
     Datastore datastore =
         new Datastore(
-            IntegrationTestUtil.testEnvDatabaseInfo(), testQueue, new EmptyCredentialsProvider());
+            IntegrationTestUtil.testEnvDatabaseInfo(),
+            testQueue,
+            new EmptyCredentialsProvider(),
+            InstrumentationRegistry.getContext());
     StreamStatusCallback streamCallback = new StreamStatusCallback() {};
     final WriteStream writeStream = datastore.createWriteStream(streamCallback);
 
@@ -261,7 +274,10 @@ public void testStreamRefreshesTokenUponExpiration() throws Exception {
     MockCredentialsProvider mockCredentialsProvider = new MockCredentialsProvider();
     Datastore datastore =
         new Datastore(
-            IntegrationTestUtil.testEnvDatabaseInfo(), testQueue, mockCredentialsProvider);
+            IntegrationTestUtil.testEnvDatabaseInfo(),
+            testQueue,
+            mockCredentialsProvider,
+            InstrumentationRegistry.getContext());
     StreamStatusCallback callback = new StreamStatusCallback();
     WriteStream writeStream = datastore.createWriteStream(callback);
     waitForWriteStreamOpen(testQueue, writeStream, callback);
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/testutil/IntegrationTestUtil.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/testutil/IntegrationTestUtil.java
index c629b676b..8bc407a78 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/testutil/IntegrationTestUtil.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/testutil/IntegrationTestUtil.java
@@ -91,6 +91,7 @@ public static FirebaseFirestoreSettings newTestSettings() {
     return newTestSettingsWithSnapshotTimestampsEnabled(true);
   }
 
+  @SuppressWarnings("deprecation") // for setTimestampsInSnapshotsEnabled()
   public static FirebaseFirestoreSettings newTestSettingsWithSnapshotTimestampsEnabled(
       boolean enabled) {
     return new FirebaseFirestoreSettings.Builder()
diff --git a/firebase-firestore/src/main/AndroidManifest.xml b/firebase-firestore/src/main/AndroidManifest.xml
index e3ad26000..c2ae61f64 100644
--- a/firebase-firestore/src/main/AndroidManifest.xml
+++ b/firebase-firestore/src/main/AndroidManifest.xml
@@ -2,6 +2,9 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:tools="http://schemas.android.com/tools"
         package="com.google.firebase.firestore">
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+    <!--<uses-sdk android:minSdkVersion="14" />-->
+
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.INTERNET" />
     <application>
diff --git a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/package-info.java b/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/package-info.java
new file mode 100644
index 000000000..1720283dc
--- /dev/null
+++ b/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.cloud.datastore.core.number;
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentReference.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentReference.java
index cde2b8a3e..44c29e88e 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentReference.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentReference.java
@@ -529,7 +529,7 @@ public boolean equals(Object o) {
     if (this == o) {
       return true;
     }
-    if (o == null || getClass() != o.getClass()) {
+    if (!(o instanceof DocumentReference)) {
       return false;
     }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
index 49be0d618..20ace7fbc 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
@@ -52,6 +52,8 @@
 public class FirebaseFirestore {
   private static final String TAG = "FirebaseFirestore";
   private final Context context;
+  // This is also used as private lock object for this instance. There is nothing inherent about
+  // databaseId itself that needs locking; it just saves us creating a separate lock object.
   private final DatabaseId databaseId;
   private final String persistenceKey;
   private final CredentialsProvider credentialsProvider;
@@ -59,7 +61,7 @@
   private final FirebaseApp firebaseApp;
 
   private FirebaseFirestoreSettings settings;
-  private FirestoreClient client;
+  private volatile FirestoreClient client;
   private final UserDataConverter dataConverter;
 
   @NonNull
@@ -161,60 +163,34 @@ public FirebaseFirestoreSettings getFirestoreSettings() {
    */
   @PublicApi
   public void setFirestoreSettings(@NonNull FirebaseFirestoreSettings settings) {
-    checkNotNull(settings, "Provided settings must not be null.");
-    // As a special exception, don't throw if the same settings are passed repeatedly. This
-    // should make it simpler to get a Firestore instance in an activity.
-    if (client != null && !this.settings.equals(settings)) {
-      throw new IllegalStateException(
-          "FirebaseFirestore has already been started and its settings can no longer be changed. "
-              + "You can only call setFirestoreSettings() before calling any other methods on a "
-              + "FirebaseFirestore object.");
+    synchronized (databaseId) {
+      checkNotNull(settings, "Provided settings must not be null.");
+      // As a special exception, don't throw if the same settings are passed repeatedly. This
+      // should make it simpler to get a Firestore instance in an activity.
+      if (client != null && !this.settings.equals(settings)) {
+        throw new IllegalStateException(
+            "FirebaseFirestore has already been started and its settings can no longer be changed. "
+                + "You can only call setFirestoreSettings() before calling any other methods on a "
+                + "FirebaseFirestore object.");
+      }
+      this.settings = settings;
     }
-    this.settings = settings;
   }
 
   private void ensureClientConfigured() {
-    if (client == null) {
-      if (!settings.areTimestampsInSnapshotsEnabled()) {
-        Logger.warn(
-            "Firestore",
-            "The behavior for java.util.Date objects stored in Firestore is going to change "
-                + "AND YOUR APP MAY BREAK.\n"
-                + "To hide this warning and ensure your app does not break, you need to add "
-                + "the following code to your app before calling any other Cloud Firestore "
-                + "methods:\n"
-                + "\n"
-                + "FirebaseFirestore firestore = FirebaseFirestore.getInstance();\n"
-                + "FirebaseFirestoreSettings settings = new FirebaseFirestoreSettings.Builder()\n"
-                + "    .setTimestampsInSnapshotsEnabled(true)\n"
-                + "    .build();\n"
-                + "firestore.setFirestoreSettings(settings);\n"
-                + "\n"
-                + "With this change, timestamps stored in Cloud Firestore will be read back as "
-                + "com.google.firebase.Timestamp objects instead of as system java.util.Date "
-                + "objects. So you will also need to update code expecting a java.util.Date to "
-                + "instead expect a Timestamp. For example:\n"
-                + "\n"
-                + "// Old:\n"
-                + "java.util.Date date = snapshot.getDate(\"created_at\");\n"
-                + "// New:\n"
-                + "Timestamp timestamp = snapshot.getTimestamp(\"created_at\");\n"
-                + "java.util.Date date = timestamp.toDate();\n"
-                + "\n"
-                + "Please audit all existing usages of java.util.Date when you enable the new "
-                + "behavior. In a future release, the behavior will be changed to the new "
-                + "behavior, so if you do not follow these steps, YOUR APP MAY BREAK.");
+    if (client != null) {
+      return;
+    }
+
+    synchronized (databaseId) {
+      if (client != null) {
+        return;
       }
       DatabaseInfo databaseInfo =
           new DatabaseInfo(databaseId, persistenceKey, settings.getHost(), settings.isSslEnabled());
 
       client =
-          new FirestoreClient(
-              context,
-              databaseInfo,
-              settings.isPersistenceEnabled(),
-              credentialsProvider,
-              asyncQueue);
+          new FirestoreClient(context, databaseInfo, settings, credentialsProvider, asyncQueue);
     }
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java
index f0598e0b7..b29e820ba 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java
@@ -24,8 +24,20 @@
 /** Settings used to configure a FirebaseFirestore instance. */
 @PublicApi
 public final class FirebaseFirestoreSettings {
+  /**
+   * Constant to use with {@link FirebaseFirestoreSettings.Builder#setCacheSizeBytes(long)} to
+   * disable garbage collection.
+   */
+  @PublicApi public static final long CACHE_SIZE_UNLIMITED = -1;
+
+  private static final long MINIMUM_CACHE_BYTES = 1 * 1024 * 1024; // 1 MB
+  // TODO(b/121269744): Set this to be the default value after SDK is past version 1.0
+  // private static final long DEFAULT_CACHE_SIZE_BYTES = 100 * 1024 * 1024; // 100 MB
+  // For now, we are rolling this out with collection disabled. Once the SDK has hit version 1.0,
+  // we will switch the default to the above value, 100 MB.
+  private static final long DEFAULT_CACHE_SIZE_BYTES = CACHE_SIZE_UNLIMITED;
   private static final String DEFAULT_HOST = "firestore.googleapis.com";
-  private static final boolean DEFAULT_TIMESTAMPS_IN_SNAPSHOTS_ENABLED = false;
+  private static final boolean DEFAULT_TIMESTAMPS_IN_SNAPSHOTS_ENABLED = true;
 
   /** A Builder for creating {@link FirebaseFirestoreSettings}. */
   @PublicApi
@@ -34,6 +46,7 @@
     private boolean sslEnabled;
     private boolean persistenceEnabled;
     private boolean timestampsInSnapshotsEnabled;
+    private long cacheSizeBytes;
 
     /** Constructs a new FirebaseFirestoreSettings Builder object. */
     @PublicApi
@@ -42,6 +55,7 @@ public Builder() {
       sslEnabled = true;
       persistenceEnabled = true;
       timestampsInSnapshotsEnabled = DEFAULT_TIMESTAMPS_IN_SNAPSHOTS_ENABLED;
+      cacheSizeBytes = DEFAULT_CACHE_SIZE_BYTES;
     }
 
     /**
@@ -96,34 +110,57 @@ public Builder setPersistenceEnabled(boolean value) {
     }
 
     /**
-     * Enables the use of {@link com.google.firebase.Timestamp Timestamps} for timestamp fields in
-     * {@link DocumentSnapshot DocumentSnapshots}.
+     * Specifies whether to use {@link com.google.firebase.Timestamp Timestamps} for timestamp
+     * fields in {@link DocumentSnapshot DocumentSnapshots}. This is now enabled by default and
+     * should not be disabled.
      *
-     * <p>Currently, Firestore returns timestamp fields as {@link java.util.Date} but {@link
-     * java.util.Date Date} only supports millisecond precision, which leads to truncation and
-     * causes unexpected behavior when using a timestamp from a snapshot as a part of a subsequent
-     * query.
+     * <p>Previously, Firestore returned timestamp fields as {@link java.util.Date} but {@link
+     * java.util.Date} only supports millisecond precision, which leads to truncation and causes
+     * unexpected behavior when using a timestamp from a snapshot as a part of a subsequent query.
      *
-     * <p>Setting {@code setTimestampsInSnapshotsEnabled(true)} will cause Firestore to return
-     * {@link com.google.firebase.Timestamp Timestamp} values instead of {@link java.util.Date
-     * Date}, avoiding this kind of problem. To make this work you must also change any code that
-     * uses {@link java.util.Date Date} to use {@link com.google.firebase.Timestamp Timestamp}
-     * instead.
+     * <p>So now Firestore returns {@link com.google.firebase.Timestamp Timestamp} values instead of
+     * {@link java.util.Date}, avoiding this kind of problem.
      *
-     * <p>NOTE: in the future {@link FirebaseFirestoreSettings#areTimestampsInSnapshotsEnabled} will
-     * default to true and this option will be removed so you should change your code to use
-     * Timestamp now and opt-in to this new behavior as soon as you can.
+     * <p>To opt into the old behavior of returning {@link java.util.Date Dates}, you can
+     * temporarily set {@link FirebaseFirestoreSettings#areTimestampsInSnapshotsEnabled} to false.
      *
-     * @return A settings object on which the return type for timestamp fields is configured as
-     *     specified by the given {@code value}.
+     * @deprecated This setting now defaults to true and will be removed in a future release. If you
+     *     are already setting it to true, just remove the setting. If you are setting it to false,
+     *     you should update your code to expect {@link com.google.firebase.Timestamp Timestamps}
+     *     instead of {@link java.util.Date Dates} and then remove the setting.
      */
     @NonNull
+    @Deprecated
     @PublicApi
     public Builder setTimestampsInSnapshotsEnabled(boolean value) {
       this.timestampsInSnapshotsEnabled = value;
       return this;
     }
 
+    /**
+     * Sets an approximate cache size threshold for the on-disk data. If the cache grows beyond this
+     * size, Firestore will start removing data that hasn't been recently used. The size is not a
+     * guarantee that the cache will stay below that size, only that if the cache exceeds the given
+     * size, cleanup will be attempted.
+     *
+     * <p>By default, collection is disabled (the value is set to {@link
+     * FirebaseFirestoreSettings#CACHE_SIZE_UNLIMITED}). In a future release, collection will be
+     * enabled by default, with a default cache size of 100 MB. The minimum value is 1 MB.
+     *
+     * @return A settings object on which the cache size is configured as specified by the given
+     *     {@code value}.
+     */
+    @NonNull
+    @PublicApi
+    public Builder setCacheSizeBytes(long value) {
+      if (value != CACHE_SIZE_UNLIMITED && value < MINIMUM_CACHE_BYTES) {
+        throw new IllegalArgumentException(
+            "Cache size must be set to at least " + MINIMUM_CACHE_BYTES + " bytes");
+      }
+      this.cacheSizeBytes = value;
+      return this;
+    }
+
     @NonNull
     @PublicApi
     public FirebaseFirestoreSettings build() {
@@ -139,6 +176,7 @@ public FirebaseFirestoreSettings build() {
   private final boolean sslEnabled;
   private final boolean persistenceEnabled;
   private final boolean timestampsInSnapshotsEnabled;
+  private final long cacheSizeBytes;
 
   /** Constructs a FirebaseFirestoreSettings object based on the values in the Builder. */
   private FirebaseFirestoreSettings(Builder builder) {
@@ -146,6 +184,7 @@ private FirebaseFirestoreSettings(Builder builder) {
     sslEnabled = builder.sslEnabled;
     persistenceEnabled = builder.persistenceEnabled;
     timestampsInSnapshotsEnabled = builder.timestampsInSnapshotsEnabled;
+    cacheSizeBytes = builder.cacheSizeBytes;
   }
 
   @Override
@@ -161,7 +200,8 @@ public boolean equals(@Nullable Object o) {
     return host.equals(that.host)
         && sslEnabled == that.sslEnabled
         && persistenceEnabled == that.persistenceEnabled
-        && timestampsInSnapshotsEnabled == that.timestampsInSnapshotsEnabled;
+        && timestampsInSnapshotsEnabled == that.timestampsInSnapshotsEnabled
+        && cacheSizeBytes == that.cacheSizeBytes;
   }
 
   @Override
@@ -170,6 +210,7 @@ public int hashCode() {
     result = 31 * result + (sslEnabled ? 1 : 0);
     result = 31 * result + (persistenceEnabled ? 1 : 0);
     result = 31 * result + (timestampsInSnapshotsEnabled ? 1 : 0);
+    result = 31 * result + (int) cacheSizeBytes;
     return result;
   }
 
@@ -211,4 +252,13 @@ public boolean isPersistenceEnabled() {
   public boolean areTimestampsInSnapshotsEnabled() {
     return timestampsInSnapshotsEnabled;
   }
+
+  /**
+   * Returns the threshold for the cache size above which the SDK will attempt to collect the least
+   * recently used documents.
+   */
+  @PublicApi
+  public long getCacheSizeBytes() {
+    return cacheSizeBytes;
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreRegistrar.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreRegistrar.java
index 6b994b696..47f064eda 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreRegistrar.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreRegistrar.java
@@ -21,7 +21,8 @@
 import com.google.firebase.components.Component;
 import com.google.firebase.components.ComponentRegistrar;
 import com.google.firebase.components.Dependency;
-import java.util.Collections;
+import com.google.firebase.platforminfo.LibraryVersionComponent;
+import java.util.Arrays;
 import java.util.List;
 
 /**
@@ -34,7 +35,7 @@
   @Override
   @Keep
   public List<Component<?>> getComponents() {
-    return Collections.singletonList(
+    return Arrays.asList(
         Component.builder(FirestoreMultiDbComponent.class)
             .add(Dependency.required(FirebaseApp.class))
             .add(Dependency.required(Context.class))
@@ -45,6 +46,7 @@
                         c.get(Context.class),
                         c.get(FirebaseApp.class),
                         c.get(InternalAuthProvider.class)))
-            .build());
+            .build(),
+        LibraryVersionComponent.create("fire-fst", BuildConfig.VERSION_NAME));
   }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/Query.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/Query.java
index bb6143edc..16957d93c 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/Query.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/Query.java
@@ -39,6 +39,7 @@
 import com.google.firebase.firestore.model.ResourcePath;
 import com.google.firebase.firestore.model.value.FieldValue;
 import com.google.firebase.firestore.model.value.ReferenceValue;
+import com.google.firebase.firestore.model.value.ServerTimestampValue;
 import com.google.firebase.firestore.util.ExecutorEventListener;
 import com.google.firebase.firestore.util.Executors;
 import com.google.firebase.firestore.util.ListenerRegistrationImpl;
@@ -582,7 +583,8 @@ public Query endAt(Object... fieldValues) {
    * <p>Note that the Bound will always include the key of the document and so only the provided
    * document will compare equal to the returned position.
    *
-   * <p>Will throw if the document does not contain all fields of the order by of the query.
+   * <p>Will throw if the document does not contain all fields of the order by of the query or if
+   * any of the fields in the order by are an uncommitted server timestamp.
    */
   private Bound boundFromDocumentSnapshot(
       String methodName, DocumentSnapshot snapshot, boolean before) {
@@ -606,7 +608,14 @@ private Bound boundFromDocumentSnapshot(
         components.add(ReferenceValue.valueOf(firestore.getDatabaseId(), document.getKey()));
       } else {
         FieldValue value = document.getField(orderBy.getField());
-        if (value != null) {
+        if (value instanceof ServerTimestampValue) {
+          throw new IllegalArgumentException(
+              "Invalid query. You are trying to start or end a query using a document for which "
+                  + "the field '"
+                  + orderBy.getField()
+                  + "' is an uncommitted server timestamp. (Since the value of this field is "
+                  + "unknown, you cannot start/end a query with it.)");
+        } else if (value != null) {
           components.add(value);
         } else {
           throw new IllegalArgumentException(
@@ -896,7 +905,7 @@ public boolean equals(Object o) {
     if (this == o) {
       return true;
     }
-    if (o == null || getClass() != o.getClass()) {
+    if (!(o instanceof Query)) {
       return false;
     }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/SetOptions.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/SetOptions.java
index 4c3027389..adde45259 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/SetOptions.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/SetOptions.java
@@ -20,8 +20,9 @@
 import android.support.annotation.Nullable;
 import com.google.firebase.annotations.PublicApi;
 import com.google.firebase.firestore.model.mutation.FieldMask;
-import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 /**
  * An options object that configures the behavior of set() calls. By providing one of the SetOptions
@@ -78,13 +79,13 @@ public static SetOptions merge() {
   @NonNull
   @PublicApi
   public static SetOptions mergeFields(List<String> fields) {
-    List<com.google.firebase.firestore.model.FieldPath> fieldPaths = new ArrayList<>();
+    Set<com.google.firebase.firestore.model.FieldPath> fieldPaths = new HashSet<>();
 
     for (String field : fields) {
       fieldPaths.add(FieldPath.fromDotSeparatedPath(field).getInternalPath());
     }
 
-    return new SetOptions(true, FieldMask.fromCollection(fieldPaths));
+    return new SetOptions(true, FieldMask.fromSet(fieldPaths));
   }
 
   /**
@@ -100,13 +101,13 @@ public static SetOptions mergeFields(List<String> fields) {
   @NonNull
   @PublicApi
   public static SetOptions mergeFields(String... fields) {
-    List<com.google.firebase.firestore.model.FieldPath> fieldPaths = new ArrayList<>();
+    Set<com.google.firebase.firestore.model.FieldPath> fieldPaths = new HashSet<>();
 
     for (String field : fields) {
       fieldPaths.add(FieldPath.fromDotSeparatedPath(field).getInternalPath());
     }
 
-    return new SetOptions(true, FieldMask.fromCollection(fieldPaths));
+    return new SetOptions(true, FieldMask.fromSet(fieldPaths));
   }
 
   /**
@@ -121,13 +122,13 @@ public static SetOptions mergeFields(String... fields) {
   @NonNull
   @PublicApi
   public static SetOptions mergeFieldPaths(List<FieldPath> fields) {
-    List<com.google.firebase.firestore.model.FieldPath> fieldPaths = new ArrayList<>();
+    Set<com.google.firebase.firestore.model.FieldPath> fieldPaths = new HashSet<>();
 
     for (FieldPath field : fields) {
       fieldPaths.add(field.getInternalPath());
     }
 
-    return new SetOptions(true, FieldMask.fromCollection(fieldPaths));
+    return new SetOptions(true, FieldMask.fromSet(fieldPaths));
   }
 
   @Override
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/EventManager.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/EventManager.java
index e74f837e4..38665628a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/EventManager.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/EventManager.java
@@ -137,6 +137,7 @@ public void onError(Query query, Status error) {
     queries.remove(query);
   }
 
+  @Override
   public void handleOnlineStateChange(OnlineState onlineState) {
     this.onlineState = onlineState;
     for (QueryListenersInfo info : queries.values()) {
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
index 93b13bd86..5edf6df87 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
@@ -28,11 +28,14 @@
 import com.google.firebase.firestore.EventListener;
 import com.google.firebase.firestore.FirebaseFirestoreException;
 import com.google.firebase.firestore.FirebaseFirestoreException.Code;
+import com.google.firebase.firestore.FirebaseFirestoreSettings;
 import com.google.firebase.firestore.auth.CredentialsProvider;
 import com.google.firebase.firestore.auth.User;
 import com.google.firebase.firestore.core.EventManager.ListenOptions;
 import com.google.firebase.firestore.local.LocalSerializer;
 import com.google.firebase.firestore.local.LocalStore;
+import com.google.firebase.firestore.local.LruDelegate;
+import com.google.firebase.firestore.local.LruGarbageCollector;
 import com.google.firebase.firestore.local.MemoryPersistence;
 import com.google.firebase.firestore.local.Persistence;
 import com.google.firebase.firestore.local.SQLitePersistence;
@@ -42,6 +45,8 @@
 import com.google.firebase.firestore.model.NoDocument;
 import com.google.firebase.firestore.model.mutation.Mutation;
 import com.google.firebase.firestore.model.mutation.MutationBatchResult;
+import com.google.firebase.firestore.remote.AndroidConnectivityMonitor;
+import com.google.firebase.firestore.remote.ConnectivityMonitor;
 import com.google.firebase.firestore.remote.Datastore;
 import com.google.firebase.firestore.remote.RemoteEvent;
 import com.google.firebase.firestore.remote.RemoteSerializer;
@@ -62,119 +67,40 @@
  */
 public final class FirestoreClient implements RemoteStore.RemoteStoreCallback {
 
-    private static final String LOG_TAG = "FirestoreClient";
-
-    private final DatabaseInfo databaseInfo;
-    private final CredentialsProvider credentialsProvider;
-    private final AsyncQueue asyncQueue;
-
-    private Persistence persistence;
-    private LocalStore localStore;
-    private RemoteStore remoteStore;
-    private SyncEngine syncEngine;
-    private EventManager eventManager;
-
-    public FirestoreClient(
-            final Context context,
-            DatabaseInfo databaseInfo,
-            final boolean usePersistence,
-            CredentialsProvider credentialsProvider,
-            final AsyncQueue asyncQueue) {
-        this.databaseInfo = databaseInfo;
-        this.credentialsProvider = credentialsProvider;
-        this.asyncQueue = asyncQueue;
-
-        TaskCompletionSource<User> firstUser = new TaskCompletionSource<>();
-        final AtomicBoolean initialized = new AtomicBoolean(false);
-        credentialsProvider.setChangeListener(
-                (User user) -> {
-                    if (initialized.compareAndSet(false, true)) {
-                        hardAssert(!firstUser.getTask().isComplete(), "Already fulfilled first user task");
-                        firstUser.setResult(user);
-                    } else {
-                        asyncQueue.enqueueAndForget(
-                                () -> {
-                                    Logger.debug(LOG_TAG, "Credential changed. Current user: %s", user.getUid());
-                                    syncEngine.handleCredentialChange(user);
-                                });
-                    }
-                });
-
-        // Defer initialization until we get the current user from the changeListener. This is
-        // guaranteed to be synchronously dispatched onto our worker queue, so we will be initialized
-        // before any subsequently queued work runs.
-        asyncQueue.enqueueAndForget(
-                () -> {
-                    try {
-                        // Block on initial user being available
-                        User initialUser = Tasks.await(firstUser.getTask());
-                        initialize(context, initialUser, usePersistence);
-                    } catch (InterruptedException | ExecutionException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-    }
-
-    public Task<Void> disableNetwork() {
-        return asyncQueue.enqueue(() -> remoteStore.disableNetwork());
-    }
-
-    public Task<Void> enableNetwork() {
-        return asyncQueue.enqueue(() -> remoteStore.enableNetwork());
-    }
-
-    /**
-     * Shuts down this client, cancels all writes / listeners, and releases all resources.
-     */
-    public Task<Void> shutdown() {
-        credentialsProvider.removeChangeListener();
-        return asyncQueue.enqueue(
-                () -> {
-                    remoteStore.shutdown();
-                    persistence.shutdown();
-                });
-    }
-
-    /**
-     * Starts listening to a query.
-     */
-    public QueryListener listen(
-            Query query, ListenOptions options, EventListener<ViewSnapshot> listener) {
-        QueryListener queryListener = new QueryListener(query, options, listener);
-        asyncQueue.enqueueAndForget(() -> eventManager.addQueryListener(queryListener));
-        return queryListener;
-    }
-
-    /**
-     * Stops listening to a query previously listened to.
-     */
-    public void stopListening(QueryListener listener) {
-        asyncQueue.enqueueAndForget(() -> eventManager.removeQueryListener(listener));
-    }
-
-    public Task<Document> getDocumentFromLocalCache(DocumentKey docKey) {
-        return asyncQueue
-                .enqueue(() -> localStore.readDocument(docKey))
-                .continueWith(
-                        (result) -> {
-                            @Nullable MaybeDocument maybeDoc = result.getResult();
-
-                            if (maybeDoc instanceof Document) {
-                                return (Document) maybeDoc;
-                            } else if (maybeDoc instanceof NoDocument) {
-                                return null;
-                            } else {
-                                throw new FirebaseFirestoreException(
-                                        "Failed to get document from cache. (However, this document may exist on the "
-                                                + "server. Run again without setting source to CACHE to attempt "
-                                                + "to retrieve the document from the server.)",
-                                        Code.UNAVAILABLE);
-                            }
-                        });
-    }
-
-    public Task<ViewSnapshot> getDocumentsFromLocalCache(Query query) {
-        return asyncQueue.enqueue(
+  private static final String LOG_TAG = "FirestoreClient";
+
+  private final DatabaseInfo databaseInfo;
+  private final CredentialsProvider credentialsProvider;
+  private final AsyncQueue asyncQueue;
+
+  private Persistence persistence;
+  private LocalStore localStore;
+  private RemoteStore remoteStore;
+  private SyncEngine syncEngine;
+  private EventManager eventManager;
+
+  // LRU-related
+  @Nullable private LruGarbageCollector.Scheduler lruScheduler;
+
+  public FirestoreClient(
+      final Context context,
+      DatabaseInfo databaseInfo,
+      FirebaseFirestoreSettings settings,
+      CredentialsProvider credentialsProvider,
+      final AsyncQueue asyncQueue) {
+    this.databaseInfo = databaseInfo;
+    this.credentialsProvider = credentialsProvider;
+    this.asyncQueue = asyncQueue;
+
+    TaskCompletionSource<User> firstUser = new TaskCompletionSource<>();
+    final AtomicBoolean initialized = new AtomicBoolean(false);
+    credentialsProvider.setChangeListener(
+        (User user) -> {
+          if (initialized.compareAndSet(false, true)) {
+            hardAssert(!firstUser.getTask().isComplete(), "Already fulfilled first user task");
+            firstUser.setResult(user);
+          } else {
+            asyncQueue.enqueueAndForget(
                 () -> {
                     ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
 
@@ -186,85 +112,186 @@ public void stopListening(QueryListener listener) {
                     View.DocumentChanges viewDocChanges = view.computeDocChanges(docs);
                     return view.applyChanges(viewDocChanges).getSnapshot();
                 });
+          }
+        });
+
+    // Defer initialization until we get the current user from the changeListener. This is
+    // guaranteed to be synchronously dispatched onto our worker queue, so we will be initialized
+    // before any subsequently queued work runs.
+    asyncQueue.enqueueAndForget(
+        () -> {
+          try {
+            // Block on initial user being available
+            User initialUser = Tasks.await(firstUser.getTask());
+            initialize(
+                context,
+                initialUser,
+                settings.isPersistenceEnabled(),
+                settings.getCacheSizeBytes());
+          } catch (InterruptedException | ExecutionException e) {
+            throw new RuntimeException(e);
+          }
+        });
+  }
+
+  public Task<Void> disableNetwork() {
+    return asyncQueue.enqueue(() -> remoteStore.disableNetwork());
+  }
+
+  public Task<Void> enableNetwork() {
+    return asyncQueue.enqueue(() -> remoteStore.enableNetwork());
+  }
+
+  /** Shuts down this client, cancels all writes / listeners, and releases all resources. */
+  public Task<Void> shutdown() {
+    credentialsProvider.removeChangeListener();
+    return asyncQueue.enqueue(
+        () -> {
+          remoteStore.shutdown();
+          persistence.shutdown();
+          if (lruScheduler != null) {
+            lruScheduler.stop();
+          }
+        });
+  }
+
+  /** Starts listening to a query. */
+  public QueryListener listen(
+      Query query, ListenOptions options, EventListener<ViewSnapshot> listener) {
+    QueryListener queryListener = new QueryListener(query, options, listener);
+    asyncQueue.enqueueAndForget(() -> eventManager.addQueryListener(queryListener));
+    return queryListener;
+  }
+
+  /** Stops listening to a query previously listened to. */
+  public void stopListening(QueryListener listener) {
+    asyncQueue.enqueueAndForget(() -> eventManager.removeQueryListener(listener));
+  }
+
+  public Task<Document> getDocumentFromLocalCache(DocumentKey docKey) {
+    return asyncQueue
+        .enqueue(() -> localStore.readDocument(docKey))
+        .continueWith(
+            (result) -> {
+              @Nullable MaybeDocument maybeDoc = result.getResult();
+
+              if (maybeDoc instanceof Document) {
+                return (Document) maybeDoc;
+              } else if (maybeDoc instanceof NoDocument) {
+                return null;
+              } else {
+                throw new FirebaseFirestoreException(
+                    "Failed to get document from cache. (However, this document may exist on the "
+                        + "server. Run again without setting source to CACHE to attempt "
+                        + "to retrieve the document from the server.)",
+                    Code.UNAVAILABLE);
+              }
+            });
+  }
+
+  public Task<ViewSnapshot> getDocumentsFromLocalCache(Query query) {
+    return asyncQueue.enqueue(
+        () -> {
+          ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
+
+          View view =
+              new View(
+                  query,
+                  new ImmutableSortedSet<DocumentKey>(
+                      Collections.emptyList(), DocumentKey::compareTo));
+          View.DocumentChanges viewDocChanges = view.computeDocChanges(docs);
+          return view.applyChanges(viewDocChanges).getSnapshot();
+        });
+  }
+
+  /** Writes mutations. The returned task will be notified when it's written to the backend. */
+  public Task<Void> write(final List<Mutation> mutations) {
+    final TaskCompletionSource<Void> source = new TaskCompletionSource<>();
+    asyncQueue.enqueueAndForget(() -> syncEngine.writeMutations(mutations, source));
+    return source.getTask();
+  }
+
+  /** Tries to execute the transaction in updateFunction up to retries times. */
+  public <TResult> Task<TResult> transaction(
+      Function<Transaction, Task<TResult>> updateFunction, int retries) {
+    return AsyncQueue.callTask(
+        asyncQueue.getExecutor(),
+        () -> syncEngine.transaction(asyncQueue, updateFunction, retries));
+  }
+
+  private void initialize(Context context, User user, boolean usePersistence, long cacheSizeBytes) {
+    // Note: The initialization work must all be synchronous (we can't dispatch more work) since
+    // external write/listen operations could get queued to run before that subsequent work
+    // completes.
+    Logger.debug(LOG_TAG, "Initializing. user=%s", user.getUid());
+
+    LruGarbageCollector gc = null;
+    if (usePersistence) {
+      LocalSerializer serializer =
+          new LocalSerializer(new RemoteSerializer(databaseInfo.getDatabaseId()));
+      LruGarbageCollector.Params params =
+          LruGarbageCollector.Params.WithCacheSizeBytes(cacheSizeBytes);
+      SQLitePersistence sqlitePersistence =
+          new SQLitePersistence(
+              context,
+              databaseInfo.getPersistenceKey(),
+              databaseInfo.getDatabaseId(),
+              serializer,
+              params);
+      LruDelegate lruDelegate = sqlitePersistence.getReferenceDelegate();
+      gc = lruDelegate.getGarbageCollector();
+      persistence = sqlitePersistence;
+    } else {
+      persistence = MemoryPersistence.createEagerGcMemoryPersistence();
     }
 
-    /**
-     * Writes mutations. The returned task will be notified when it's written to the backend.
-     */
-    public Task<Void> write(final List<Mutation> mutations) {
-        final TaskCompletionSource<Void> source = new TaskCompletionSource<>();
-        asyncQueue.enqueueAndForget(() -> syncEngine.writeMutations(mutations, source));
-        return source.getTask();
+    persistence.start();
+    localStore = new LocalStore(persistence, user);
+    if (gc != null) {
+      lruScheduler = gc.newScheduler(asyncQueue, localStore);
+      lruScheduler.start();
     }
 
-    /**
-     * Tries to execute the transaction in updateFunction up to retries times.
-     */
-    public <TResult> Task<TResult> transaction(
-            Function<Transaction, Task<TResult>> updateFunction, int retries) {
-        return AsyncQueue.callTask(
-                asyncQueue.getExecutor(),
-                () -> syncEngine.transaction(asyncQueue, updateFunction, retries));
-    }
-
-    private void initialize(Context context, User user, boolean usePersistence) {
-        // Note: The initialization work must all be synchronous (we can't dispatch more work) since
-        // external write/listen operations could get queued to run before that subsequent work
-        // completes.
-        Logger.debug(LOG_TAG, "Initializing. user=%s", user.getUid());
-
-        if (usePersistence) {
-            LocalSerializer serializer =
-                    new LocalSerializer(new RemoteSerializer(databaseInfo.getDatabaseId()));
-            persistence =
-                    new SQLitePersistence(
-                            context, databaseInfo.getPersistenceKey(), databaseInfo.getDatabaseId(), serializer);
-        } else {
-            persistence = MemoryPersistence.createEagerGcMemoryPersistence();
-        }
-
-        persistence.start();
-        localStore = new LocalStore(persistence, user);
-
-        Datastore datastore = new Datastore(databaseInfo, asyncQueue, credentialsProvider);
-        remoteStore = new RemoteStore(this, localStore, datastore, asyncQueue);
-
-        syncEngine = new SyncEngine(localStore, remoteStore, user);
-        eventManager = new EventManager(syncEngine);
-
-        // NOTE: RemoteStore depends on LocalStore (for persisting stream tokens, refilling mutation
-        // queue, etc.) so must be started after LocalStore.
-        localStore.start();
-        remoteStore.start();
-    }
-
-    @Override
-    public void handleRemoteEvent(RemoteEvent remoteEvent) {
-        syncEngine.handleRemoteEvent(remoteEvent);
-    }
-
-    @Override
-    public void handleRejectedListen(int targetId, Status error) {
-        syncEngine.handleRejectedListen(targetId, error);
-    }
-
-    @Override
-    public void handleSuccessfulWrite(MutationBatchResult mutationBatchResult) {
-        syncEngine.handleSuccessfulWrite(mutationBatchResult);
-    }
-
-    @Override
-    public void handleRejectedWrite(int batchId, Status error) {
-        syncEngine.handleRejectedWrite(batchId, error);
-    }
-
-    @Override
-    public void handleOnlineStateChange(OnlineState onlineState) {
-        syncEngine.handleOnlineStateChange(onlineState);
-    }
-
-    @Override
-    public ImmutableSortedSet<DocumentKey> getRemoteKeysForTarget(int targetId) {
-        return syncEngine.getRemoteKeysForTarget(targetId);
-    }
+    Datastore datastore = new Datastore(databaseInfo, asyncQueue, credentialsProvider, context);
+    ConnectivityMonitor connectivityMonitor = new AndroidConnectivityMonitor(context);
+    remoteStore = new RemoteStore(this, localStore, datastore, asyncQueue, connectivityMonitor);
+
+    syncEngine = new SyncEngine(localStore, remoteStore, user);
+    eventManager = new EventManager(syncEngine);
+
+    // NOTE: RemoteStore depends on LocalStore (for persisting stream tokens, refilling mutation
+    // queue, etc.) so must be started after LocalStore.
+    localStore.start();
+    remoteStore.start();
+  }
+
+  @Override
+  public void handleRemoteEvent(RemoteEvent remoteEvent) {
+    syncEngine.handleRemoteEvent(remoteEvent);
+  }
+
+  @Override
+  public void handleRejectedListen(int targetId, Status error) {
+    syncEngine.handleRejectedListen(targetId, error);
+  }
+
+  @Override
+  public void handleSuccessfulWrite(MutationBatchResult mutationBatchResult) {
+    syncEngine.handleSuccessfulWrite(mutationBatchResult);
+  }
+
+  @Override
+  public void handleRejectedWrite(int batchId, Status error) {
+    syncEngine.handleRejectedWrite(batchId, error);
+  }
+
+  @Override
+  public void handleOnlineStateChange(OnlineState onlineState) {
+    syncEngine.handleOnlineStateChange(onlineState);
+  }
+
+  @Override
+  public ImmutableSortedSet<DocumentKey> getRemoteKeysForTarget(int targetId) {
+    return syncEngine.getRemoteKeysForTarget(targetId);
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/UserData.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/UserData.java
index 00cc39697..0cb0f6149 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/UserData.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/UserData.java
@@ -29,9 +29,9 @@
 import com.google.firebase.firestore.model.value.ObjectValue;
 import com.google.firebase.firestore.util.Assert;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
-import java.util.SortedSet;
-import java.util.TreeSet;
+import java.util.Set;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 
@@ -72,8 +72,8 @@ private UserData() {} // Do not instantiate
      */
     private final Source dataSource;
 
-    /** Accumulates a list of the field paths found while parsing the data. */
-    private final SortedSet<FieldPath> fieldMask;
+    /** Accumulates a set of the field paths found while parsing the data. */
+    private final Set<FieldPath> fieldMask;
 
     /** Accumulates a list of field transforms found while parsing the data. */
     private final ArrayList<FieldTransform> fieldTransforms;
@@ -81,7 +81,7 @@ private UserData() {} // Do not instantiate
     /** @param dataSource Indicates what kind of API method this data came from. */
     public ParseAccumulator(Source dataSource) {
       this.dataSource = dataSource;
-      this.fieldMask = new TreeSet<>();
+      this.fieldMask = new HashSet<>();
       this.fieldTransforms = new ArrayList<>();
     }
 
@@ -135,7 +135,7 @@ void addToFieldTransforms(FieldPath fieldPath, TransformOperation transformOpera
      */
     public ParsedSetData toMergeData(ObjectValue data) {
       return new ParsedSetData(
-          data, FieldMask.fromCollection(fieldMask), unmodifiableList(fieldTransforms));
+          data, FieldMask.fromSet(fieldMask), unmodifiableList(fieldTransforms));
     }
 
     /**
@@ -181,7 +181,7 @@ public ParsedSetData toSetData(ObjectValue data) {
      */
     public ParsedUpdateData toUpdateData(ObjectValue data) {
       return new ParsedUpdateData(
-          data, FieldMask.fromCollection(fieldMask), unmodifiableList(fieldTransforms));
+          data, FieldMask.fromSet(fieldMask), unmodifiableList(fieldTransforms));
     }
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/ViewSnapshot.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/ViewSnapshot.java
index a05cffea9..1e05a3d8e 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/ViewSnapshot.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/ViewSnapshot.java
@@ -118,11 +118,11 @@ public boolean excludesMetadataChanges() {
   }
 
   @Override
-  public boolean equals(Object o) {
+  public final boolean equals(Object o) {
     if (this == o) {
       return true;
     }
-    if (o == null || getClass() != o.getClass()) {
+    if (!(o instanceof ViewSnapshot)) {
       return false;
     }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java
index 1dab574af..ab734d95e 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java
@@ -22,7 +22,6 @@
 import com.google.firebase.firestore.core.Filter;
 import com.google.firebase.firestore.core.Filter.Operator;
 import com.google.firebase.firestore.core.IndexRange;
-import com.google.firebase.firestore.core.IndexRange.Builder;
 import com.google.firebase.firestore.core.NaNFilter;
 import com.google.firebase.firestore.core.NullFilter;
 import com.google.firebase.firestore.core.Query;
@@ -216,7 +215,7 @@ static IndexRange extractBestIndexRange(Query query) {
    * filter. The determined {@code IndexRange} is likely overselective and requires post-filtering.
    */
   private static IndexRange convertFilterToIndexRange(Filter filter) {
-    Builder indexRange = IndexRange.builder().setFieldPath(filter.getField());
+    IndexRange.Builder indexRange = IndexRange.builder().setFieldPath(filter.getField());
     if (filter instanceof RelationFilter) {
       RelationFilter relationFilter = (RelationFilter) filter;
       FieldValue filterValue = relationFilter.getValue();
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalDocumentsView.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalDocumentsView.java
index 6f82a815d..8db4d4b1a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalDocumentsView.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalDocumentsView.java
@@ -69,6 +69,21 @@ private MaybeDocument getDocument(DocumentKey key, List<MutationBatch> inBatches
     return document;
   }
 
+  // Returns the view of the given {@code docs} as they would appear after applying all mutations in
+  // the given {@code batches}.
+  private Map<DocumentKey, MaybeDocument> applyLocalMutationsToDocuments(
+      Map<DocumentKey, MaybeDocument> docs, List<MutationBatch> batches) {
+    for (Map.Entry<DocumentKey, MaybeDocument> base : docs.entrySet()) {
+      MaybeDocument localView = base.getValue();
+      for (MutationBatch batch : batches) {
+        localView = batch.applyToLocalView(base.getKey(), localView);
+      }
+      base.setValue(localView);
+    }
+
+    return docs;
+  }
+
   /**
    * Gets the local view of the documents identified by {@code keys}.
    *
@@ -76,13 +91,24 @@ private MaybeDocument getDocument(DocumentKey key, List<MutationBatch> inBatches
    * for that key in the resulting set.
    */
   ImmutableSortedMap<DocumentKey, MaybeDocument> getDocuments(Iterable<DocumentKey> keys) {
+    Map<DocumentKey, MaybeDocument> docs = remoteDocumentCache.getAll(keys);
+    return getLocalViewOfDocuments(docs);
+  }
+
+  /**
+   * Similar to {@code #getDocuments}, but creates the local view from the given {@code baseDocs}
+   * without retrieving documents from the local store.
+   */
+  ImmutableSortedMap<DocumentKey, MaybeDocument> getLocalViewOfDocuments(
+      Map<DocumentKey, MaybeDocument> baseDocs) {
     ImmutableSortedMap<DocumentKey, MaybeDocument> results = emptyMaybeDocumentMap();
 
-    List<MutationBatch> batches = mutationQueue.getAllMutationBatchesAffectingDocumentKeys(keys);
-    for (DocumentKey key : keys) {
-      // TODO: PERF: Consider fetching all remote documents at once rather than
-      // one-by-one.
-      MaybeDocument maybeDoc = getDocument(key, batches);
+    List<MutationBatch> batches =
+        mutationQueue.getAllMutationBatchesAffectingDocumentKeys(baseDocs.keySet());
+    Map<DocumentKey, MaybeDocument> docs = applyLocalMutationsToDocuments(baseDocs, batches);
+    for (Map.Entry<DocumentKey, MaybeDocument> entry : docs.entrySet()) {
+      DocumentKey key = entry.getKey();
+      MaybeDocument maybeDoc = entry.getValue();
       // TODO: Don't conflate missing / deleted.
       if (maybeDoc == null) {
         maybeDoc = new NoDocument(key, SnapshotVersion.NONE, /*hasCommittedMutations=*/ false);
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java
index 55c8bd146..77880f007 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java
@@ -48,13 +48,19 @@ public LocalSerializer(RemoteSerializer rpcSerializer) {
   com.google.firebase.firestore.proto.MaybeDocument encodeMaybeDocument(MaybeDocument document) {
     com.google.firebase.firestore.proto.MaybeDocument.Builder builder =
         com.google.firebase.firestore.proto.MaybeDocument.newBuilder();
+
     if (document instanceof NoDocument) {
       NoDocument noDocument = (NoDocument) document;
       builder.setNoDocument(encodeNoDocument(noDocument));
       builder.setHasCommittedMutations(noDocument.hasCommittedMutations());
     } else if (document instanceof Document) {
       Document existingDocument = (Document) document;
-      builder.setDocument(encodeDocument(existingDocument));
+      // Use the memoized encoded form if it exists.
+      if (existingDocument.getProto() != null) {
+        builder.setDocument(existingDocument.getProto());
+      } else {
+        builder.setDocument(encodeDocument(existingDocument));
+      }
       builder.setHasCommittedMutations(existingDocument.hasCommittedMutations());
     } else if (document instanceof UnknownDocument) {
       builder.setUnknownDocument(encodeUnknownDocument((UnknownDocument) document));
@@ -84,13 +90,12 @@ MaybeDocument decodeMaybeDocument(com.google.firebase.firestore.proto.MaybeDocum
   }
 
   /**
-   * Encodes a Document for local storage. This differs from the v1beta1 RPC serializer for
-   * Documents in that it preserves the updateTime, which is considered an output only value by the
-   * server.
+   * Encodes a Document for local storage. This differs from the v1 RPC serializer for Documents in
+   * that it preserves the updateTime, which is considered an output only value by the server.
    */
-  private com.google.firestore.v1beta1.Document encodeDocument(Document document) {
-    com.google.firestore.v1beta1.Document.Builder builder =
-        com.google.firestore.v1beta1.Document.newBuilder();
+  private com.google.firestore.v1.Document encodeDocument(Document document) {
+    com.google.firestore.v1.Document.Builder builder =
+        com.google.firestore.v1.Document.newBuilder();
     builder.setName(rpcSerializer.encodeKey(document.getKey()));
 
     ObjectValue value = document.getData();
@@ -105,7 +110,7 @@ MaybeDocument decodeMaybeDocument(com.google.firebase.firestore.proto.MaybeDocum
 
   /** Decodes a Document proto to the equivalent model. */
   private Document decodeDocument(
-      com.google.firestore.v1beta1.Document document, boolean hasCommittedMutations) {
+      com.google.firestore.v1.Document document, boolean hasCommittedMutations) {
     DocumentKey key = rpcSerializer.decodeKey(document.getName());
     ObjectValue value = rpcSerializer.decodeFields(document.getFieldsMap());
     SnapshotVersion version = rpcSerializer.decodeVersion(document.getUpdateTime());
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
index 6c203edd3..dae56aafe 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
@@ -35,6 +35,7 @@
 import com.google.firebase.firestore.remote.TargetChange;
 import com.google.firebase.firestore.util.Logger;
 import com.google.protobuf.ByteString;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -329,14 +330,19 @@ public SnapshotVersion getLastRemoteSnapshotVersion() {
             }
           }
 
-          Set<DocumentKey> changedDocKeys = new HashSet<>();
+          Map<DocumentKey, MaybeDocument> changedDocs = new HashMap<>();
           Map<DocumentKey, MaybeDocument> documentUpdates = remoteEvent.getDocumentUpdates();
           Set<DocumentKey> limboDocuments = remoteEvent.getResolvedLimboDocuments();
+          // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
+          // documents in advance in a single call.
+          Map<DocumentKey, MaybeDocument> existingDocs =
+              remoteDocuments.getAll(documentUpdates.keySet());
+
           for (Entry<DocumentKey, MaybeDocument> entry : documentUpdates.entrySet()) {
             DocumentKey key = entry.getKey();
             MaybeDocument doc = entry.getValue();
-            changedDocKeys.add(key);
-            MaybeDocument existingDoc = remoteDocuments.get(key);
+            MaybeDocument existingDoc = existingDocs.get(key);
+
             // If a document update isn't authoritative, make sure we don't
             // apply an old document version to the remote cache. We make an
             // exception for SnapshotVersion.MIN which can happen for
@@ -347,6 +353,7 @@ public SnapshotVersion getLastRemoteSnapshotVersion() {
                 || (authoritativeUpdates.contains(doc.getKey()) && !existingDoc.hasPendingWrites())
                 || doc.getVersion().compareTo(existingDoc.getVersion()) >= 0) {
               remoteDocuments.add(doc);
+              changedDocs.put(key, doc);
             } else {
               Logger.debug(
                   "LocalStore",
@@ -376,7 +383,7 @@ public SnapshotVersion getLastRemoteSnapshotVersion() {
             queryCache.setLastRemoteSnapshotVersion(remoteVersion);
           }
 
-          return localDocuments.getDocuments(changedDocKeys);
+          return localDocuments.getLocalViewOfDocuments(changedDocs);
         });
   }
 
@@ -563,4 +570,8 @@ private void applyWriteToRemoteDocuments(MutationBatchResult batchResult) {
 
     mutationQueue.removeMutationBatch(batch);
   }
+
+  public LruGarbageCollector.Results collectGarbage(LruGarbageCollector garbageCollector) {
+    return persistence.runTransaction("Collect garbage", () -> garbageCollector.collect(targetIds));
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LruDelegate.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LruDelegate.java
index 569ef9415..2dd128c28 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LruDelegate.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LruDelegate.java
@@ -21,12 +21,12 @@
  * Persistence layers intending to use LRU Garbage collection should implement this interface. This
  * interface defines the operations that the LRU garbage collector needs from the persistence layer.
  */
-interface LruDelegate {
+public interface LruDelegate {
 
   /** Enumerates all the targets in the QueryCache. */
   void forEachTarget(Consumer<QueryData> consumer);
 
-  long getTargetCount();
+  long getSequenceNumberCount();
 
   /** Enumerates sequence numbers for documents not associated with a target. */
   void forEachOrphanedDocumentSequenceNumber(Consumer<Long> consumer);
@@ -49,4 +49,7 @@
 
   /** Access to the underlying LRU Garbage collector instance. */
   LruGarbageCollector getGarbageCollector();
+
+  /** Return the size of the cache in bytes. */
+  long getByteSize();
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LruGarbageCollector.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LruGarbageCollector.java
index 91a617313..d423ca602 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LruGarbageCollector.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LruGarbageCollector.java
@@ -14,22 +14,156 @@
 
 package com.google.firebase.firestore.local;
 
+import android.support.annotation.Nullable;
 import android.util.SparseArray;
+import com.google.firebase.firestore.FirebaseFirestoreSettings;
 import com.google.firebase.firestore.core.ListenSequence;
+import com.google.firebase.firestore.util.AsyncQueue;
+import com.google.firebase.firestore.util.Logger;
 import java.util.Comparator;
+import java.util.Locale;
 import java.util.PriorityQueue;
+import java.util.concurrent.TimeUnit;
 
 /** Implements the steps for LRU garbage collection. */
-class LruGarbageCollector {
+public class LruGarbageCollector {
+  /** How long we wait to try running LRU GC after SDK initialization. */
+  private static final long INITIAL_GC_DELAY_MS = TimeUnit.MINUTES.toMillis(1);
+  /** Minimum amount of time between GC checks, after the first one. */
+  private static final long REGULAR_GC_DELAY_MS = TimeUnit.MINUTES.toMillis(5);
+
+  public static class Params {
+    private static final long COLLECTION_DISABLED = FirebaseFirestoreSettings.CACHE_SIZE_UNLIMITED;
+    private static final long DEFAULT_CACHE_SIZE_BYTES = 100 * 1024 * 1024; // 100mb
+    /**
+     * The following two constants are estimates for how we want to tune the garbage collector. If
+     * we encounter a large cache, we don't want to spend a large chunk of time GCing all of it, we
+     * would rather make some progress and then try again later. We also don't want to collect
+     * everything that we possibly could, as our thesis is that recently used items are more likely
+     * to be used again.
+     */
+    private static final int DEFAULT_COLLECTION_PERCENTILE = 10;
+
+    private static final int DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;
+
+    public static Params Default() {
+      return new Params(
+          DEFAULT_CACHE_SIZE_BYTES,
+          DEFAULT_COLLECTION_PERCENTILE,
+          DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
+    }
+
+    public static Params Disabled() {
+      return new Params(COLLECTION_DISABLED, 0, 0);
+    }
+
+    public static Params WithCacheSizeBytes(long cacheSizeBytes) {
+      return new Params(cacheSizeBytes, 10, 1000);
+    }
+
+    final long minBytesThreshold;
+    final int percentileToCollect;
+    final int maximumSequenceNumbersToCollect;
+
+    Params(long minBytesThreshold, int percentileToCollect, int maximumSequenceNumbersToCollect) {
+      this.minBytesThreshold = minBytesThreshold;
+      this.percentileToCollect = percentileToCollect;
+      this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;
+    }
+  }
+
+  public static class Results {
+    private final boolean hasRun;
+    private final int sequenceNumbersCollected;
+    private final int targetsRemoved;
+    private final int documentsRemoved;
+
+    static Results DidNotRun() {
+      return new Results(/* hasRun= */ false, 0, 0, 0);
+    }
+
+    Results(
+        boolean hasRun, int sequenceNumbersCollected, int targetsRemoved, int documentsRemoved) {
+      this.hasRun = hasRun;
+      this.sequenceNumbersCollected = sequenceNumbersCollected;
+      this.targetsRemoved = targetsRemoved;
+      this.documentsRemoved = documentsRemoved;
+    }
+
+    public boolean hasRun() {
+      return hasRun;
+    }
+
+    public int getSequenceNumbersCollected() {
+      return sequenceNumbersCollected;
+    }
+
+    public int getTargetsRemoved() {
+      return targetsRemoved;
+    }
+
+    public int getDocumentsRemoved() {
+      return documentsRemoved;
+    }
+  }
+
+  /**
+   * This class is responsible for the scheduling of LRU garbage collection. It handles checking
+   * whether or not GC is enabled, as well as which delay to use before the next run.
+   */
+  public class Scheduler {
+    private final AsyncQueue asyncQueue;
+    private final LocalStore localStore;
+    private boolean hasRun = false;
+    @Nullable private AsyncQueue.DelayedTask gcTask;
+
+    public Scheduler(AsyncQueue asyncQueue, LocalStore localStore) {
+      this.asyncQueue = asyncQueue;
+      this.localStore = localStore;
+    }
+
+    public void start() {
+      if (params.minBytesThreshold != Params.COLLECTION_DISABLED) {
+        scheduleGC();
+      }
+    }
+
+    public void stop() {
+      if (gcTask != null) {
+        gcTask.cancel();
+      }
+    }
+
+    private void scheduleGC() {
+      long delay = hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;
+      gcTask =
+          asyncQueue.enqueueAfterDelay(
+              AsyncQueue.TimerId.GARBAGE_COLLECTION,
+              delay,
+              () -> {
+                localStore.collectGarbage(LruGarbageCollector.this);
+                hasRun = true;
+                scheduleGC();
+              });
+    }
+  }
+
   private final LruDelegate delegate;
+  private final Params params;
 
-  LruGarbageCollector(LruDelegate delegate) {
+  LruGarbageCollector(LruDelegate delegate, Params params) {
     this.delegate = delegate;
+    this.params = params;
+  }
+
+  /** A helper method to create a new scheduler. */
+  public Scheduler newScheduler(AsyncQueue asyncQueue, LocalStore localStore) {
+    return new Scheduler(asyncQueue, localStore);
   }
 
   /** Given a percentile of target to collect, returns the number of targets to collect. */
   int calculateQueryCount(int percentile) {
-    long targetCount = delegate.getTargetCount();
+    long targetCount = delegate.getSequenceNumberCount();
     return (int) ((percentile / 100.0f) * targetCount);
   }
 
@@ -66,7 +200,7 @@ long getMaxValue() {
   }
 
   /** Returns the nth sequence number, counting in order from the smallest. */
-  long nthSequenceNumber(int count) {
+  long getNthSequenceNumber(int count) {
     if (count == 0) {
       return ListenSequence.INVALID;
     }
@@ -91,4 +225,79 @@ int removeTargets(long upperBound, SparseArray<?> activeTargetIds) {
   int removeOrphanedDocuments(long upperBound) {
     return delegate.removeOrphanedDocuments(upperBound);
   }
+
+  Results collect(SparseArray<?> activeTargetIds) {
+    if (params.minBytesThreshold == Params.COLLECTION_DISABLED) {
+      Logger.debug("LruGarbageCollector", "Garbage collection skipped; disabled");
+      return Results.DidNotRun();
+    }
+
+    long cacheSize = getByteSize();
+    if (cacheSize < params.minBytesThreshold) {
+      Logger.debug(
+          "LruGarbageCollector",
+          "Garbage collection skipped; Cache size "
+              + cacheSize
+              + " is lower than threshold "
+              + params.minBytesThreshold);
+      return Results.DidNotRun();
+    } else {
+      return runGarbageCollection(activeTargetIds);
+    }
+  }
+
+  private Results runGarbageCollection(SparseArray<?> liveTargetIds) {
+    long startTs = System.currentTimeMillis();
+    int sequenceNumbers = calculateQueryCount(params.percentileToCollect);
+    // Cap at the configured max
+    if (sequenceNumbers > params.maximumSequenceNumbersToCollect) {
+      Logger.debug(
+          "LruGarbageCollector",
+          "Capping sequence numbers to collect down to the maximum of "
+              + params.maximumSequenceNumbersToCollect
+              + " from "
+              + sequenceNumbers);
+      sequenceNumbers = params.maximumSequenceNumbersToCollect;
+    }
+    long countedTargetsTs = System.currentTimeMillis();
+
+    long upperBound = getNthSequenceNumber(sequenceNumbers);
+    long foundUpperBoundTs = System.currentTimeMillis();
+
+    int numTargetsRemoved = removeTargets(upperBound, liveTargetIds);
+    long removedTargetsTs = System.currentTimeMillis();
+
+    int numDocumentsRemoved = removeOrphanedDocuments(upperBound);
+    long removedDocumentsTs = System.currentTimeMillis();
+
+    if (Logger.isDebugEnabled()) {
+      String desc = "LRU Garbage Collection:\n";
+      desc += "\tCounted targets in " + (countedTargetsTs - startTs) + "ms\n";
+      desc +=
+          String.format(
+              Locale.ROOT,
+              "\tDetermined least recently used %d sequence numbers in %dms\n",
+              sequenceNumbers,
+              (foundUpperBoundTs - countedTargetsTs));
+      desc +=
+          String.format(
+              Locale.ROOT,
+              "\tRemoved %d targets in %dms\n",
+              numTargetsRemoved,
+              (removedTargetsTs - foundUpperBoundTs));
+      desc +=
+          String.format(
+              Locale.ROOT,
+              "\tRemoved %d documents in %dms\n",
+              numDocumentsRemoved,
+              (removedDocumentsTs - removedTargetsTs));
+      desc += String.format(Locale.ROOT, "Total Duration: %dms", (removedDocumentsTs - startTs));
+      Logger.debug("LruGarbageCollector", desc);
+    }
+    return new Results(/* hasRun= */ true, sequenceNumbers, numTargetsRemoved, numDocumentsRemoved);
+  }
+
+  long getByteSize() {
+    return delegate.getByteSize();
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryLruReferenceDelegate.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryLruReferenceDelegate.java
index 5376b5f93..6ff4cb74d 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryLruReferenceDelegate.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryLruReferenceDelegate.java
@@ -27,19 +27,24 @@
 /** Provides LRU garbage collection functionality for MemoryPersistence. */
 class MemoryLruReferenceDelegate implements ReferenceDelegate, LruDelegate {
   private final MemoryPersistence persistence;
+  private final LocalSerializer serializer;
   private final Map<DocumentKey, Long> orphanedSequenceNumbers;
   private ReferenceSet inMemoryPins;
   private final LruGarbageCollector garbageCollector;
   private final ListenSequence listenSequence;
   private long currentSequenceNumber;
 
-  MemoryLruReferenceDelegate(MemoryPersistence persistence) {
+  MemoryLruReferenceDelegate(
+      MemoryPersistence persistence,
+      LruGarbageCollector.Params params,
+      LocalSerializer serializer) {
     this.persistence = persistence;
+    this.serializer = serializer;
     this.orphanedSequenceNumbers = new HashMap<>();
     this.listenSequence =
         new ListenSequence(persistence.getQueryCache().getHighestListenSequenceNumber());
     this.currentSequenceNumber = ListenSequence.INVALID;
-    this.garbageCollector = new LruGarbageCollector(this);
+    this.garbageCollector = new LruGarbageCollector(this, params);
   }
 
   @Override
@@ -77,14 +82,24 @@ public void forEachTarget(Consumer<QueryData> consumer) {
   }
 
   @Override
-  public long getTargetCount() {
-    return persistence.getQueryCache().getTargetCount();
+  public long getSequenceNumberCount() {
+    long targetCount = persistence.getQueryCache().getTargetCount();
+    long orphanedCount[] = new long[1];
+    forEachOrphanedDocumentSequenceNumber(
+        sequenceNumber -> {
+          orphanedCount[0]++;
+        });
+    return targetCount + orphanedCount[0];
   }
 
   @Override
   public void forEachOrphanedDocumentSequenceNumber(Consumer<Long> consumer) {
-    for (Long sequenceNumber : orphanedSequenceNumbers.values()) {
-      consumer.accept(sequenceNumber);
+    for (Map.Entry<DocumentKey, Long> entry : orphanedSequenceNumbers.entrySet()) {
+      // Pass in the exact sequence number as the upper bound so we know it won't be pinned by being
+      // too recent.
+      if (!isPinned(entry.getKey(), entry.getValue())) {
+        consumer.accept(entry.getValue());
+      }
     }
   }
 
@@ -170,4 +185,18 @@ private boolean isPinned(DocumentKey key, long upperBound) {
     Long sequenceNumber = orphanedSequenceNumbers.get(key);
     return sequenceNumber != null && sequenceNumber > upperBound;
   }
+
+  @Override
+  public long getByteSize() {
+    // Note that this method is only used for testing because this delegate is only
+    // used for testing. The algorithm here (loop through everything, serialize it
+    // and count bytes) is inefficient and inexact, but won't run in production.
+    long count = 0;
+    count += persistence.getQueryCache().getByteSize(serializer);
+    count += persistence.getRemoteDocumentCache().getByteSize(serializer);
+    for (MemoryMutationQueue queue : persistence.getMutationQueues()) {
+      count += queue.getByteSize(serializer);
+    }
+    return count;
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
index 9af1b1faa..f4b549a08 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
@@ -29,6 +29,7 @@
 import com.google.firebase.firestore.util.Util;
 import com.google.protobuf.ByteString;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
@@ -60,9 +61,6 @@
   /** The next value to use when assigning sequential IDs to each mutation batch. */
   private int nextBatchId;
 
-  /** The highest acknowledged mutation in the queue. */
-  private int highestAcknowledgedBatchId;
-
   /**
    * The last received stream token from the server, used to acknowledge which responses the client
    * has processed. Stream tokens are opaque checkpoint markers whose only real value is their
@@ -78,7 +76,6 @@
 
     batchesByDocumentKey = new ImmutableSortedSet<>(emptyList(), DocumentReference.BY_KEY);
     nextBatchId = 1;
-    highestAcknowledgedBatchId = MutationBatch.UNKNOWN;
     lastStreamToken = WriteStream.EMPTY_STREAM_TOKEN;
   }
 
@@ -89,14 +86,10 @@ public void start() {
     // Note: The queue may be shutdown / started multiple times, since we maintain the queue for the
     // duration of the app session in case a user logs out / back in. To behave like the
     // SQLite-backed MutationQueue (and accommodate tests that expect as much), we reset nextBatchId
-    // and highestAcknowledgedBatchId if the queue is empty.
+    // if the queue is empty.
     if (isEmpty()) {
       nextBatchId = 1;
-      highestAcknowledgedBatchId = MutationBatch.UNKNOWN;
     }
-    hardAssert(
-        highestAcknowledgedBatchId < nextBatchId,
-        "highestAcknowledgedBatchId must be less than the nextBatchId");
   }
 
   @Override
@@ -109,10 +102,8 @@ public boolean isEmpty() {
   @Override
   public void acknowledgeBatch(MutationBatch batch, ByteString streamToken) {
     int batchId = batch.getBatchId();
-    hardAssert(
-        batchId > highestAcknowledgedBatchId, "Mutation batchIds must be acknowledged in order");
-
     int batchIndex = indexOfExistingBatchId(batchId, "acknowledged");
+    hardAssert(batchIndex == 0, "Can only acknowledge the first batch in the mutation queue");
 
     // Verify that the batch in the queue is the one to be acknowledged.
     MutationBatch check = queue.get(batchIndex);
@@ -121,9 +112,7 @@ public void acknowledgeBatch(MutationBatch batch, ByteString streamToken) {
         "Queue ordering failure: expected batch %d, got batch %d",
         batchId,
         check.getBatchId());
-    hardAssert(!check.isTombstone(), "Can't acknowledge a previously removed batch");
 
-    highestAcknowledgedBatchId = batchId;
     lastStreamToken = checkNotNull(streamToken);
   }
 
@@ -173,37 +162,23 @@ public MutationBatch lookupMutationBatch(int batchId) {
 
     MutationBatch batch = queue.get(index);
     hardAssert(batch.getBatchId() == batchId, "If found batch must match");
-    return batch.isTombstone() ? null : batch;
+    return batch;
   }
 
   @Nullable
   @Override
   public MutationBatch getNextMutationBatchAfterBatchId(int batchId) {
-    int size = queue.size();
-
-    // All batches with batchId <= highestAcknowledgedBatchId have been acknowledged so the
-    // first unacknowledged batch after batchId will have a batchId larger than both of these
-    // values.
-    int nextBatchId = Math.max(batchId, highestAcknowledgedBatchId) + 1;
+    int nextBatchId = batchId + 1;
 
     // The requested batchId may still be out of range so normalize it to the start of the queue.
     int rawIndex = indexOfBatchId(nextBatchId);
     int index = rawIndex < 0 ? 0 : rawIndex;
-
-    // Finally return the first non-tombstone batch.
-    for (; index < size; index++) {
-      MutationBatch batch = queue.get(index);
-      if (!batch.isTombstone()) {
-        return batch;
-      }
-    }
-
-    return null;
+    return queue.size() > index ? queue.get(index) : null;
   }
 
   @Override
   public List<MutationBatch> getAllMutationBatches() {
-    return getAllLiveMutationBatchesBeforeIndex(queue.size());
+    return Collections.unmodifiableList(queue);
   }
 
   @Override
@@ -305,27 +280,9 @@ public void removeMutationBatch(MutationBatch batch) {
     // Find the position of the first batch for removal. This need not be the first entry in the
     // queue.
     int batchIndex = indexOfExistingBatchId(batch.getBatchId(), "removed");
-    hardAssert(
-        queue.get(batchIndex).getBatchId() == batch.getBatchId(),
-        "Removed batches must exist in the queue");
-
-    // Only actually remove batches if removing at the front of the queue. Previously rejected
-    // batches may have left tombstones in the queue, so expand the removal range to include any
-    // tombstones.
-    if (batchIndex == 0) {
-      int endIndex = 1;
-      for (; endIndex < queue.size(); endIndex++) {
-        MutationBatch currentBatch = queue.get(endIndex);
-        if (!currentBatch.isTombstone()) {
-          break;
-        }
-      }
+    hardAssert(batchIndex == 0, "Can only remove the first entry of the mutation queue");
 
-      queue.subList(batchIndex, endIndex).clear();
-
-    } else {
-      queue.set(batchIndex, queue.get(batchIndex).toTombstone());
-    }
+    queue.remove(0);
 
     // Remove entries from the index too.
     ImmutableSortedSet<DocumentReference> references = batchesByDocumentKey;
@@ -364,24 +321,6 @@ boolean containsKey(DocumentKey key) {
 
   // Helpers
 
-  /**
-   * A private helper that collects all the mutation batches in the queue up to but not including
-   * the given endIndex. All tombstones in the queue are excluded.
-   */
-  private List<MutationBatch> getAllLiveMutationBatchesBeforeIndex(int endIndex) {
-    List<MutationBatch> result = new ArrayList<>(endIndex);
-
-    for (int i = 0; i < endIndex; i++) {
-      MutationBatch batch = queue.get(i);
-
-      if (!batch.isTombstone()) {
-        result.add(batch);
-      }
-    }
-
-    return result;
-  }
-
   /**
    * Finds the index of the given batchId in the mutation queue. This operation is O(1).
    *
@@ -417,4 +356,12 @@ private int indexOfExistingBatchId(int batchId, String action) {
     hardAssert(index >= 0 && index < queue.size(), "Batches must exist to be %s", action);
     return index;
   }
+
+  long getByteSize(LocalSerializer serializer) {
+    long count = 0;
+    for (MutationBatch batch : queue) {
+      count += serializer.encodeMutationBatch(batch).getSerializedSize();
+    }
+    return count;
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryPersistence.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryPersistence.java
index 5b31f95a2..0f7698c4f 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryPersistence.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryPersistence.java
@@ -44,9 +44,11 @@ public static MemoryPersistence createEagerGcMemoryPersistence() {
     return persistence;
   }
 
-  public static MemoryPersistence createLruGcMemoryPersistence() {
+  public static MemoryPersistence createLruGcMemoryPersistence(
+      LruGarbageCollector.Params params, LocalSerializer serializer) {
     MemoryPersistence persistence = new MemoryPersistence();
-    persistence.setReferenceDelegate(new MemoryLruReferenceDelegate(persistence));
+    persistence.setReferenceDelegate(
+        new MemoryLruReferenceDelegate(persistence, params, serializer));
     return persistence;
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryQueryCache.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryQueryCache.java
index e37a45181..7c0315dc3 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryQueryCache.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryQueryCache.java
@@ -169,4 +169,12 @@ private void removeMatchingKeysForTargetId(int targetId) {
   public boolean containsKey(DocumentKey key) {
     return references.containsKey(key);
   }
+
+  long getByteSize(LocalSerializer serializer) {
+    long count = 0;
+    for (Map.Entry<Query, QueryData> entry : queries.entrySet()) {
+      count += serializer.encodeQueryData(entry.getValue()).getSerializedSize();
+    }
+    return count;
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryRemoteDocumentCache.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryRemoteDocumentCache.java
index f4209da21..9bed5c2dd 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryRemoteDocumentCache.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryRemoteDocumentCache.java
@@ -23,6 +23,7 @@
 import com.google.firebase.firestore.model.DocumentKey;
 import com.google.firebase.firestore.model.MaybeDocument;
 import com.google.firebase.firestore.model.ResourcePath;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 import javax.annotation.Nullable;
@@ -53,6 +54,19 @@ public MaybeDocument get(DocumentKey key) {
     return docs.get(key);
   }
 
+  @Override
+  public Map<DocumentKey, MaybeDocument> getAll(Iterable<DocumentKey> keys) {
+    Map<DocumentKey, MaybeDocument> result = new HashMap<>();
+
+    for (DocumentKey key : keys) {
+      // Make sure each key has a corresponding entry, which is null in case the document is not
+      // found.
+      result.put(key, get(key));
+    }
+
+    return result;
+  }
+
   @Override
   public ImmutableSortedMap<DocumentKey, Document> getAllDocumentsMatchingQuery(Query query) {
     ImmutableSortedMap<DocumentKey, Document> result = emptyDocumentMap();
@@ -86,4 +100,28 @@ public MaybeDocument get(DocumentKey key) {
   ImmutableSortedMap<DocumentKey, MaybeDocument> getDocuments() {
     return docs;
   }
+
+  /**
+   * Returns an estimate of the number of bytes used to store the given document key in memory. This
+   * is only an estimate and includes the size of the segments of the path, but not any object
+   * overhead or path separators.
+   */
+  private static long getKeySize(DocumentKey key) {
+    ResourcePath path = key.getPath();
+    long count = 0;
+    for (int i = 0; i < path.length(); i++) {
+      // Strings in java are utf-16, each character is two bytes in memory
+      count += path.getSegment(i).length() * 2;
+    }
+    return count;
+  }
+
+  long getByteSize(LocalSerializer serializer) {
+    long count = 0;
+    for (Map.Entry<DocumentKey, MaybeDocument> entry : docs) {
+      count += getKeySize(entry.getKey());
+      count += serializer.encodeMaybeDocument(entry.getValue()).getSerializedSize();
+    }
+    return count;
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
index da67269cb..c9fbbcdeb 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
@@ -28,10 +28,6 @@
   /**
    * Starts the mutation queue, performing any initial reads that might be required to establish
    * invariants, etc.
-   *
-   * <p>After starting, the mutation queue must guarantee that the highestAcknowledgedBatchID is
-   * less than nextBatchID. This prevents the local store from creating new batches that the
-   * mutation queue would consider erroneously acknowledged.
    */
   void start();
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/RemoteDocumentCache.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/RemoteDocumentCache.java
index f3e689f22..1acd0de8d 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/RemoteDocumentCache.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/RemoteDocumentCache.java
@@ -19,6 +19,7 @@
 import com.google.firebase.firestore.model.Document;
 import com.google.firebase.firestore.model.DocumentKey;
 import com.google.firebase.firestore.model.MaybeDocument;
+import java.util.Map;
 import javax.annotation.Nullable;
 
 /**
@@ -51,6 +52,15 @@
   @Nullable
   MaybeDocument get(DocumentKey documentKey);
 
+  /**
+   * Looks up a set of entries in the cache.
+   *
+   * @param documentKeys The keys of the entries to look up.
+   * @return The cached Document or NoDocument entries indexed by key. If an entry is not cached,
+   *     the corresponding key will be mapped to a null value.
+   */
+  Map<DocumentKey, MaybeDocument> getAll(Iterable<DocumentKey> documentKeys);
+
   /**
    * Executes a query against the cached Document entries
    *
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteLruReferenceDelegate.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteLruReferenceDelegate.java
index cee90c741..d2823ac39 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteLruReferenceDelegate.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteLruReferenceDelegate.java
@@ -30,10 +30,10 @@
   private final LruGarbageCollector garbageCollector;
   private ReferenceSet inMemoryPins;
 
-  SQLiteLruReferenceDelegate(SQLitePersistence persistence) {
+  SQLiteLruReferenceDelegate(SQLitePersistence persistence, LruGarbageCollector.Params params) {
     this.currentSequenceNumber = ListenSequence.INVALID;
     this.persistence = persistence;
-    this.garbageCollector = new LruGarbageCollector(this);
+    this.garbageCollector = new LruGarbageCollector(this, params);
   }
 
   void start(long highestSequenceNumber) {
@@ -70,8 +70,14 @@ public LruGarbageCollector getGarbageCollector() {
   }
 
   @Override
-  public long getTargetCount() {
-    return persistence.getQueryCache().getTargetCount();
+  public long getSequenceNumberCount() {
+    long targetCount = persistence.getQueryCache().getTargetCount();
+    long orphanedDocumentCount =
+        persistence
+            .query(
+                "SELECT COUNT(*) FROM (SELECT sequence_number FROM target_documents GROUP BY path HAVING COUNT(*) = 1 AND target_id = 0)")
+            .firstValue(row -> row.getLong(0));
+    return targetCount + orphanedDocumentCount;
   }
 
   @Override
@@ -179,4 +185,9 @@ private void writeSentinel(DocumentKey key) {
         path,
         getCurrentSequenceNumber());
   }
+
+  @Override
+  public long getByteSize() {
+    return persistence.getByteSize();
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
index ccf5bb704..9c41c101a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
@@ -18,6 +18,7 @@
 import static com.google.firebase.firestore.util.Assert.fail;
 import static com.google.firebase.firestore.util.Assert.hardAssert;
 
+import android.database.Cursor;
 import android.database.sqlite.SQLiteStatement;
 import com.google.firebase.Timestamp;
 import com.google.firebase.firestore.auth.User;
@@ -27,14 +28,15 @@
 import com.google.firebase.firestore.model.mutation.Mutation;
 import com.google.firebase.firestore.model.mutation.MutationBatch;
 import com.google.firebase.firestore.remote.WriteStream;
+import com.google.firebase.firestore.util.Consumer;
 import com.google.firebase.firestore.util.Util;
 import com.google.protobuf.ByteString;
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.google.protobuf.MessageLite;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import javax.annotation.Nullable;
@@ -42,6 +44,18 @@
 /** A mutation queue for a specific user, backed by SQLite. */
 final class SQLiteMutationQueue implements MutationQueue {
 
+  /**
+   * On Android, SQLite Cursors are limited reading no more than 2 MB per row (despite being able to
+   * write very large values). All reads of the mutations column in the mutations table need to read
+   * in chunks with SUBSTR to avoid going over this limit.
+   *
+   * <p>The value here has to be 2 MB or smaller, while allowing for all possible other values that
+   * might be selected out along with the mutations column in any given result set. Nearly 1 MB is
+   * conservative, but allows all combinations of document paths and batch ids without needing to
+   * figure out if the row has gotten too large.
+   */
+  private static final int BLOB_MAX_INLINE_LENGTH = 1000000;
+
   private final SQLitePersistence db;
   private final LocalSerializer serializer;
 
@@ -57,13 +71,6 @@
    */
   private int nextBatchId;
 
-  /**
-   * An identifier for the highest numbered batch that has been acknowledged by the server. All
-   * MutationBatches in this queue with batch_ids less than or equal to this value are considered to
-   * have been acknowledged by the server.
-   */
-  private int lastAcknowledgedBatchId;
-
   /**
    * A stream token that was previously sent by the server.
    *
@@ -94,30 +101,15 @@
   public void start() {
     loadNextBatchIdAcrossAllUsers();
 
-    // On restart, nextBatchId may end up lower than lastAcknowledgedBatchId since it's computed
-    // from the queue contents, and there may be no mutations in the queue. In this case, we need
-    // to reset lastAcknowledgedBatchId (which is safe since the queue must be empty).
-    lastAcknowledgedBatchId = MutationBatch.UNKNOWN;
     int rows =
-        db.query(
-                "SELECT last_acknowledged_batch_id, last_stream_token "
-                    + "FROM mutation_queues WHERE uid = ?")
+        db.query("SELECT last_stream_token FROM mutation_queues WHERE uid = ?")
             .binding(uid)
-            .first(
-                row -> {
-                  lastAcknowledgedBatchId = row.getInt(0);
-                  lastStreamToken = ByteString.copyFrom(row.getBlob(1));
-                });
+            .first(row -> lastStreamToken = ByteString.copyFrom(row.getBlob(0)));
 
     if (rows == 0) {
       // Ensure we write a default entry in mutation_queues since loadNextBatchIdAcrossAllUsers()
       // depends upon every queue having an entry.
       writeMutationQueueMetadata();
-
-    } else if (lastAcknowledgedBatchId >= nextBatchId) {
-      hardAssert(isEmpty(), "Reset nextBatchId is only possible when the queue is empty");
-      lastAcknowledgedBatchId = MutationBatch.UNKNOWN;
-      writeMutationQueueMetadata();
     }
   }
 
@@ -161,11 +153,6 @@ public boolean isEmpty() {
 
   @Override
   public void acknowledgeBatch(MutationBatch batch, ByteString streamToken) {
-    int batchId = batch.getBatchId();
-    hardAssert(
-        batchId > lastAcknowledgedBatchId, "Mutation batchIds must be acknowledged in order");
-
-    lastAcknowledgedBatchId = batchId;
     lastStreamToken = checkNotNull(streamToken);
     writeMutationQueueMetadata();
   }
@@ -187,7 +174,7 @@ private void writeMutationQueueMetadata() {
             + "(uid, last_acknowledged_batch_id, last_stream_token) "
             + "VALUES (?, ?, ?)",
         uid,
-        lastAcknowledgedBatchId,
+        -1,
         lastStreamToken.toByteArray());
   }
 
@@ -228,32 +215,33 @@ public MutationBatch addMutationBatch(Timestamp localWriteTime, List<Mutation> m
   @Nullable
   @Override
   public MutationBatch lookupMutationBatch(int batchId) {
-    return db.query("SELECT mutations FROM mutations WHERE uid = ? AND batch_id = ?")
-        .binding(uid, batchId)
-        .firstValue(row -> decodeMutationBatch(row.getBlob(0)));
+    return db.query("SELECT SUBSTR(mutations, 1, ?) FROM mutations WHERE uid = ? AND batch_id = ?")
+        .binding(BLOB_MAX_INLINE_LENGTH, uid, batchId)
+        .firstValue(row -> decodeInlineMutationBatch(batchId, row.getBlob(0)));
   }
 
   @Nullable
   @Override
   public MutationBatch getNextMutationBatchAfterBatchId(int batchId) {
-    // All batches with batchId <= lastAcknowledgedBatchId have been acknowledged so the first
-    // unacknowledged batch after batchID will have a batchID larger than both of these values.
-    int nextBatchId = Math.max(batchId, lastAcknowledgedBatchId) + 1;
+    int nextBatchId = batchId + 1;
 
     return db.query(
-            "SELECT mutations FROM mutations "
+            "SELECT batch_id, SUBSTR(mutations, 1, ?) FROM mutations "
                 + "WHERE uid = ? AND batch_id >= ? "
                 + "ORDER BY batch_id ASC LIMIT 1")
-        .binding(uid, nextBatchId)
-        .firstValue(row -> decodeMutationBatch(row.getBlob(0)));
+        .binding(BLOB_MAX_INLINE_LENGTH, uid, nextBatchId)
+        .firstValue(row -> decodeInlineMutationBatch(row.getInt(0), row.getBlob(1)));
   }
 
   @Override
   public List<MutationBatch> getAllMutationBatches() {
     List<MutationBatch> result = new ArrayList<>();
-    db.query("SELECT mutations FROM mutations WHERE uid = ? ORDER BY batch_id ASC")
-        .binding(uid)
-        .forEach(row -> result.add(decodeMutationBatch(row.getBlob(0))));
+    db.query(
+            "SELECT batch_id, SUBSTR(mutations, 1, ?) "
+                + "FROM mutations "
+                + "WHERE uid = ? ORDER BY batch_id ASC")
+        .binding(BLOB_MAX_INLINE_LENGTH, uid)
+        .forEach(row -> result.add(decodeInlineMutationBatch(row.getInt(0), row.getBlob(1))));
     return result;
   }
 
@@ -263,66 +251,51 @@ public MutationBatch getNextMutationBatchAfterBatchId(int batchId) {
 
     List<MutationBatch> result = new ArrayList<>();
     db.query(
-            "SELECT m.mutations FROM document_mutations dm, mutations m "
+            "SELECT m.batch_id, SUBSTR(m.mutations, 1, ?) "
+                + "FROM document_mutations dm, mutations m "
                 + "WHERE dm.uid = ? "
                 + "AND dm.path = ? "
                 + "AND dm.uid = m.uid "
                 + "AND dm.batch_id = m.batch_id "
                 + "ORDER BY dm.batch_id")
-        .binding(uid, path)
-        .forEach(row -> result.add(decodeMutationBatch(row.getBlob(0))));
+        .binding(BLOB_MAX_INLINE_LENGTH, uid, path)
+        .forEach(row -> result.add(decodeInlineMutationBatch(row.getInt(0), row.getBlob(1))));
     return result;
   }
 
   @Override
   public List<MutationBatch> getAllMutationBatchesAffectingDocumentKeys(
       Iterable<DocumentKey> documentKeys) {
-    List<MutationBatch> result = new ArrayList<>();
-    if (!documentKeys.iterator().hasNext()) {
-      return result;
+    List<Object> args = new ArrayList<>();
+    for (DocumentKey key : documentKeys) {
+      args.add(EncodedPath.encode(key.getPath()));
     }
 
-    // SQLite limits maximum number of host parameters to 999 (see
-    // https://www.sqlite.org/limits.html). To work around this, split the given keys into several
-    // smaller sets and issue a separate query for each.
-    int limit = 900;
-    Iterator<DocumentKey> keyIter = documentKeys.iterator();
+    SQLitePersistence.LongQuery longQuery =
+        new SQLitePersistence.LongQuery(
+            db,
+            "SELECT DISTINCT dm.batch_id, SUBSTR(m.mutations, 1, ?) "
+                + "FROM document_mutations dm, mutations m "
+                + "WHERE dm.uid = ? "
+                + "AND dm.path IN (",
+            Arrays.asList(BLOB_MAX_INLINE_LENGTH, uid),
+            args,
+            ") "
+                + "AND dm.uid = m.uid "
+                + "AND dm.batch_id = m.batch_id "
+                + "ORDER BY dm.batch_id");
+
+    List<MutationBatch> result = new ArrayList<>();
     Set<Integer> uniqueBatchIds = new HashSet<>();
-    int queriesPerformed = 0;
-    while (keyIter.hasNext()) {
-      ++queriesPerformed;
-      StringBuilder placeholdersBuilder = new StringBuilder();
-      List<String> args = new ArrayList<>();
-      args.add(uid);
-
-      for (int i = 0; keyIter.hasNext() && i < limit; i++) {
-        DocumentKey key = keyIter.next();
-
-        if (i > 0) {
-          placeholdersBuilder.append(", ");
-        }
-        placeholdersBuilder.append("?");
-
-        args.add(EncodedPath.encode(key.getPath()));
-      }
-      String placeholders = placeholdersBuilder.toString();
-
-      db.query(
-              "SELECT DISTINCT dm.batch_id, m.mutations FROM document_mutations dm, mutations m "
-                  + "WHERE dm.uid = ? "
-                  + "AND dm.path IN ("
-                  + placeholders
-                  + ") "
-                  + "AND dm.uid = m.uid "
-                  + "AND dm.batch_id = m.batch_id "
-                  + "ORDER BY dm.batch_id")
-          .binding(args.toArray())
+    while (longQuery.hasMoreSubqueries()) {
+      longQuery
+          .performNextSubquery()
           .forEach(
               row -> {
                 int batchId = row.getInt(0);
                 if (!uniqueBatchIds.contains(batchId)) {
                   uniqueBatchIds.add(batchId);
-                  result.add(decodeMutationBatch(row.getBlob(1)));
+                  result.add(decodeInlineMutationBatch(batchId, row.getBlob(1)));
                 }
               });
     }
@@ -330,7 +303,7 @@ public MutationBatch getNextMutationBatchAfterBatchId(int batchId) {
     // If more than one query was issued, batches might be in an unsorted order (batches are ordered
     // within one query's results, but not across queries). It's likely to be rare, so don't impose
     // performance penalty on the normal case.
-    if (queriesPerformed > 1) {
+    if (longQuery.getSubqueriesPerformed() > 1) {
       Collections.sort(
           result,
           (MutationBatch lhs, MutationBatch rhs) ->
@@ -364,14 +337,15 @@ public MutationBatch getNextMutationBatchAfterBatchId(int batchId) {
 
     List<MutationBatch> result = new ArrayList<>();
     db.query(
-            "SELECT dm.batch_id, dm.path, m.mutations FROM document_mutations dm, mutations m "
+            "SELECT dm.batch_id, dm.path, SUBSTR(m.mutations, 1, ?) "
+                + "FROM document_mutations dm, mutations m "
                 + "WHERE dm.uid = ? "
                 + "AND dm.path >= ? "
                 + "AND dm.path < ? "
                 + "AND dm.uid = m.uid "
                 + "AND dm.batch_id = m.batch_id "
                 + "ORDER BY dm.batch_id")
-        .binding(uid, prefixPath, prefixSuccessorPath)
+        .binding(BLOB_MAX_INLINE_LENGTH, uid, prefixPath, prefixSuccessorPath)
         .forEach(
             row -> {
               // Ensure unique batches only. This works because the batches come out in order so we
@@ -393,7 +367,7 @@ public MutationBatch getNextMutationBatchAfterBatchId(int batchId) {
                 return;
               }
 
-              result.add(decodeMutationBatch(row.getBlob(2)));
+              result.add(decodeInlineMutationBatch(batchId, row.getBlob(2)));
             });
 
     return result;
@@ -442,12 +416,79 @@ public void performConsistencyCheck() {
         danglingMutationReferences);
   }
 
-  private MutationBatch decodeMutationBatch(byte[] bytes) {
+  /**
+   * Decodes mutation batch bytes obtained via substring. If the blob is smaller than
+   * BLOB_MAX_INLINE_LENGTH, executes additional queries to load the rest of the blob.
+   *
+   * @param batchId The batch ID of the row containing the bytes, for fallback lookup if the value
+   *     is too large.
+   * @param bytes The bytes of the first chunk of the mutation batch. Should be obtained via
+   *     SUBSTR(mutations, 1, BLOB_MAX_INLINE_LENGTH).
+   */
+  private MutationBatch decodeInlineMutationBatch(int batchId, byte[] bytes) {
     try {
+      if (bytes.length < BLOB_MAX_INLINE_LENGTH) {
+        return serializer.decodeMutationBatch(
+            com.google.firebase.firestore.proto.WriteBatch.parseFrom(bytes));
+      }
+
+      BlobAccumulator accumulator = new BlobAccumulator(bytes);
+      while (accumulator.more) {
+        // As we read in chunks the start of the next chunk should be the total accumulated length
+        // plus 1 (since SUBSTR() counts from 1). The second argument is not adjusted because it's
+        // the length of the chunk, not the end index.
+        int start = accumulator.numChunks() * BLOB_MAX_INLINE_LENGTH + 1;
+
+        db.query("SELECT SUBSTR(mutations, ?, ?) FROM mutations WHERE uid = ? AND batch_id = ?")
+            .binding(start, BLOB_MAX_INLINE_LENGTH, uid, batchId)
+            .first(accumulator);
+      }
+
+      ByteString blob = accumulator.result();
       return serializer.decodeMutationBatch(
-          com.google.firebase.firestore.proto.WriteBatch.parseFrom(bytes));
+          com.google.firebase.firestore.proto.WriteBatch.parseFrom(blob));
     } catch (InvalidProtocolBufferException e) {
       throw fail("MutationBatch failed to parse: %s", e);
     }
   }
+
+  /**
+   * Explicit consumer of blob chunks, accumulating the chunks and wrapping them in a single
+   * ByteString. Accepts a Cursor whose results include the blob in column 0.
+   *
+   * <p>(This is a named class here to allow decodeInlineMutationBlock to access the result of the
+   * accumulation.)
+   */
+  private static class BlobAccumulator implements Consumer<Cursor> {
+    private final ArrayList<ByteString> chunks = new ArrayList<>();
+    private boolean more = true;
+
+    BlobAccumulator(byte[] firstChunk) {
+      addChunk(firstChunk);
+    }
+
+    int numChunks() {
+      return chunks.size();
+    }
+
+    ByteString result() {
+      // Not actually a copy; this creates a balanced rope-like structure that reuses the given
+      // ByteStrings as a part of its representation.
+      return ByteString.copyFrom(chunks);
+    }
+
+    @Override
+    public void accept(Cursor row) {
+      byte[] bytes = row.getBlob(0);
+      addChunk(bytes);
+      if (bytes.length < BLOB_MAX_INLINE_LENGTH) {
+        more = false;
+      }
+    }
+
+    private void addChunk(byte[] bytes) {
+      ByteString wrapped = ByteString.copyFrom(bytes);
+      chunks.add(wrapped);
+    }
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLitePersistence.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLitePersistence.java
index 891aa0917..d143e5cfb 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLitePersistence.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLitePersistence.java
@@ -26,6 +26,7 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.database.sqlite.SQLiteProgram;
 import android.database.sqlite.SQLiteStatement;
+import android.database.sqlite.SQLiteTransactionListener;
 import android.support.annotation.VisibleForTesting;
 import com.google.common.base.Function;
 import com.google.firebase.firestore.auth.User;
@@ -35,6 +36,10 @@
 import com.google.firebase.firestore.util.Supplier;
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
 import javax.annotation.Nullable;
 
 /**
@@ -75,15 +80,34 @@ public static String databaseName(String persistenceKey, DatabaseId databaseId)
   private final SQLiteQueryCache queryCache;
   private final SQLiteRemoteDocumentCache remoteDocumentCache;
   private final SQLiteLruReferenceDelegate referenceDelegate;
+  private final SQLiteTransactionListener transactionListener =
+      new SQLiteTransactionListener() {
+        @Override
+        public void onBegin() {
+          referenceDelegate.onTransactionStarted();
+        }
+
+        @Override
+        public void onCommit() {
+          referenceDelegate.onTransactionCommitted();
+        }
+
+        @Override
+        public void onRollback() {}
+      };
 
   public SQLitePersistence(
-      Context context, String persistenceKey, DatabaseId databaseId, LocalSerializer serializer) {
+      Context context,
+      String persistenceKey,
+      DatabaseId databaseId,
+      LocalSerializer serializer,
+      LruGarbageCollector.Params params) {
     String databaseName = databaseName(persistenceKey, databaseId);
     this.opener = new OpenHelper(context, databaseName);
     this.serializer = serializer;
     this.queryCache = new SQLiteQueryCache(this, this.serializer);
     this.remoteDocumentCache = new SQLiteRemoteDocumentCache(this, this.serializer);
-    this.referenceDelegate = new SQLiteLruReferenceDelegate(this);
+    this.referenceDelegate = new SQLiteLruReferenceDelegate(this, params);
   }
 
   @Override
@@ -122,7 +146,7 @@ public boolean isStarted() {
   }
 
   @Override
-  public ReferenceDelegate getReferenceDelegate() {
+  public SQLiteLruReferenceDelegate getReferenceDelegate() {
     return referenceDelegate;
   }
 
@@ -143,35 +167,55 @@ RemoteDocumentCache getRemoteDocumentCache() {
 
   @Override
   void runTransaction(String action, Runnable operation) {
+    Logger.debug(TAG, "Starting transaction: %s", action);
+    db.beginTransactionWithListener(transactionListener);
     try {
-      Logger.debug(TAG, "Starting transaction: %s", action);
-      referenceDelegate.onTransactionStarted();
-      db.beginTransaction();
       operation.run();
 
       // Note that an exception in operation.run() will prevent this code from running.
       db.setTransactionSuccessful();
     } finally {
       db.endTransaction();
-      referenceDelegate.onTransactionCommitted();
     }
   }
 
   @Override
   <T> T runTransaction(String action, Supplier<T> operation) {
+    Logger.debug(TAG, "Starting transaction: %s", action);
+    T value = null;
+    db.beginTransactionWithListener(transactionListener);
     try {
-      Logger.debug(TAG, "Starting transaction: %s", action);
-      referenceDelegate.onTransactionStarted();
-      db.beginTransaction();
-      T value = operation.get();
+      value = operation.get();
 
       // Note that an exception in operation.run() will prevent this code from running.
       db.setTransactionSuccessful();
-      return value;
     } finally {
       db.endTransaction();
-      referenceDelegate.onTransactionCommitted();
     }
+    return value;
+  }
+
+  long getByteSize() {
+    return getPageCount() * getPageSize();
+  }
+
+  /**
+   * Gets the page size of the database. Typically 4096.
+   *
+   * @see https://www.sqlite.org/pragma.html#pragma_page_size
+   */
+  private long getPageSize() {
+    return query("PRAGMA page_size").firstValue(row -> row.getLong(/*column=*/ 0));
+  }
+
+  /**
+   * Gets the number of pages in the database file. Multiplying this with the page size yields the
+   * approximate size of the database on disk (including the WAL, if relevant).
+   *
+   * @see https://www.sqlite.org/pragma.html#pragma_page_count.
+   */
+  private long getPageCount() {
+    return query("PRAGMA page_count").firstValue(row -> row.getLong(/*column=*/ 0));
   }
 
   /**
@@ -455,6 +499,140 @@ private Cursor startQuery() {
     }
   }
 
+  /**
+   * Encapsulates a query whose parameter list is so long that it might exceed SQLite limit.
+   *
+   * <p>SQLite limits maximum number of host parameters to 999 (see
+   * https://www.sqlite.org/limits.html). This class wraps most of the messy details of splitting a
+   * large query into several smaller ones.
+   *
+   * <p>The class is configured to contain a "template" for each subquery:
+   *
+   * <ol>
+   *   <li>head -- the beginning of the query, will be the same for each subquery
+   *   <li>tail -- the end of the query, also the same for each subquery
+   * </ol>
+   *
+   * <p>Then the host parameters will be inserted in-between head and tail; if there are too many
+   * arguments for a single query, several subqueries will be issued. Each subquery which will have
+   * the following form:
+   *
+   * <p>[head][an auto-generated comma-separated list of '?' placeholders][tail]
+   *
+   * <p>To use this class, keep calling {@link #performNextSubquery}, which will issue the next
+   * subquery, as long as {@link #hasMoreSubqueries} returns true. Note that if the parameter list
+   * is empty, not even a single query will be issued.
+   *
+   * <p>For example, imagine for demonstration purposes that the limit were 2, and the {@code
+   * LongQuery} was created like this:
+   *
+   * <pre class="code">
+   *     String[] args = {"foo", "bar", "baz", "spam", "eggs"};
+   *     LongQuery longQuery = new LongQuery(
+   *         db,
+   *         "SELECT name WHERE id in (",
+   *         Arrays.asList(args),
+   *         ")"
+   *     );
+   * </pre>
+   *
+   * <p>Assuming limit of 2, this query will issue three subqueries:
+   *
+   * <pre class="code">
+   *     query.performNextSubquery(); // "SELECT name WHERE id in (?, ?)", binding "foo" and "bar"
+   *     query.performNextSubquery(); // "SELECT name WHERE id in (?, ?)", binding "baz" and "spam"
+   *     query.performNextSubquery(); // "SELECT name WHERE id in (?)", binding "eggs"
+   * </pre>
+   */
+  static class LongQuery {
+    private final SQLitePersistence db;
+    // The non-changing beginning of each subquery.
+    private final String head;
+    // The non-changing end of each subquery.
+    private final String tail;
+    // Arguments that will be prepended in each subquery before the main argument list.
+    private final List<Object> argsHead;
+
+    private int subqueriesPerformed = 0;
+    private final Iterator<Object> argsIter;
+
+    // Limit for the number of host parameters beyond which a query will be split into several
+    // subqueries. Deliberately set way below 999 as a safety measure because this class doesn't
+    // attempt to check for placeholders in the query {@link head}; if it only relied on the number
+    // of placeholders it itself generates, in that situation it would still exceed the SQLite
+    // limit.
+    private static final int LIMIT = 900;
+
+    /**
+     * Creates a new {@code LongQuery} with parameters that describe a template for creating each
+     * subquery.
+     *
+     * @param db The database on which to execute the query.
+     * @param head The non-changing beginning of the query; each subquery will begin with this.
+     * @param allArgs The list of host parameters to bind. If the list size exceeds the limit,
+     *     several subqueries will be issued, and the correct number of placeholders will be
+     *     generated for each subquery.
+     * @param tail The non-changing end of the query; each subquery will end with this.
+     */
+    LongQuery(SQLitePersistence db, String head, List<Object> allArgs, String tail) {
+      this.db = db;
+      this.head = head;
+      this.argsHead = Collections.emptyList();
+      this.tail = tail;
+
+      argsIter = allArgs.iterator();
+    }
+
+    /**
+     * The longer version of the constructor additionally takes {@code argsHead} parameter that
+     * contains parameters that will be reissued in each subquery, i.e. subqueries take the form:
+     *
+     * <p>[head][argsHead][an auto-generated comma-separated list of '?' placeholders][tail]
+     */
+    LongQuery(
+        SQLitePersistence db,
+        String head,
+        List<Object> argsHead,
+        List<Object> allArgs,
+        String tail) {
+      this.db = db;
+      this.head = head;
+      this.argsHead = argsHead;
+      this.tail = tail;
+
+      argsIter = allArgs.iterator();
+    }
+
+    /** Whether {@link #performNextSubquery} can be called. */
+    boolean hasMoreSubqueries() {
+      return argsIter.hasNext();
+    }
+
+    /** Performs the next subquery and returns a {@link Query} object for method chaining. */
+    Query performNextSubquery() {
+      ++subqueriesPerformed;
+
+      List<Object> subqueryArgs = new ArrayList<>(argsHead);
+      StringBuilder placeholdersBuilder = new StringBuilder();
+      for (int i = 0; argsIter.hasNext() && i < LIMIT - argsHead.size(); i++) {
+        if (i > 0) {
+          placeholdersBuilder.append(", ");
+        }
+        placeholdersBuilder.append("?");
+
+        subqueryArgs.add(argsIter.next());
+      }
+      String placeholders = placeholdersBuilder.toString();
+
+      return db.query(head + placeholders + tail).binding(subqueryArgs.toArray());
+    }
+
+    /** How many subqueries were performed. */
+    int getSubqueriesPerformed() {
+      return subqueriesPerformed;
+    }
+  }
+
   /**
    * Binds the given arguments to the given SQLite statement or query.
    *
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteRemoteDocumentCache.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteRemoteDocumentCache.java
index 491714287..67f1524cb 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteRemoteDocumentCache.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteRemoteDocumentCache.java
@@ -24,7 +24,9 @@
 import com.google.firebase.firestore.model.ResourcePath;
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.google.protobuf.MessageLite;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
 
@@ -66,6 +68,40 @@ public MaybeDocument get(DocumentKey documentKey) {
         .firstValue(row -> decodeMaybeDocument(row.getBlob(0)));
   }
 
+  @Override
+  public Map<DocumentKey, MaybeDocument> getAll(Iterable<DocumentKey> documentKeys) {
+    List<Object> args = new ArrayList<>();
+    for (DocumentKey key : documentKeys) {
+      args.add(EncodedPath.encode(key.getPath()));
+    }
+
+    Map<DocumentKey, MaybeDocument> results = new HashMap<>();
+    for (DocumentKey key : documentKeys) {
+      // Make sure each key has a corresponding entry, which is null in case the document is not
+      // found.
+      results.put(key, null);
+    }
+
+    SQLitePersistence.LongQuery longQuery =
+        new SQLitePersistence.LongQuery(
+            db,
+            "SELECT contents FROM remote_documents " + "WHERE path IN (",
+            args,
+            ") ORDER BY path");
+
+    while (longQuery.hasMoreSubqueries()) {
+      longQuery
+          .performNextSubquery()
+          .forEach(
+              row -> {
+                MaybeDocument decoded = decodeMaybeDocument(row.getBlob(0));
+                results.put(decoded.getKey(), decoded);
+              });
+    }
+
+    return results;
+  }
+
   @Override
   public ImmutableSortedMap<DocumentKey, Document> getAllDocumentsMatchingQuery(Query query) {
     // Use the query path as a prefix for testing if a document matches the query.
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteSchema.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteSchema.java
index b2270ce81..109ab3645 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteSchema.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteSchema.java
@@ -17,10 +17,16 @@
 import static com.google.firebase.firestore.util.Assert.hardAssert;
 
 import android.content.ContentValues;
+import android.database.Cursor;
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
+import android.support.annotation.VisibleForTesting;
+import android.text.TextUtils;
+import android.util.Log;
 import com.google.common.base.Preconditions;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Migrates schemas from version 0 (empty) to whatever the current version is.
@@ -65,14 +71,16 @@ void runMigrations(int fromVersion) {
    *     otherwise for testing.
    */
   void runMigrations(int fromVersion, int toVersion) {
-    // Each case in this switch statement intentionally falls through to the one below it, making
-    // it possible to start at the version that's installed and then run through any that haven't
-    // been applied yet.
+    /*
+     * New migrations should be added at the end of the series of `if` statements and should follow
+     * the pattern. Make sure to increment `VERSION` and to read the comment below about
+     * requirements for new migrations.
+     */
 
     if (fromVersion < 1 && toVersion >= 1) {
-      createMutationQueue();
-      createQueryCache();
-      createRemoteDocumentCache();
+      createV1MutationQueue();
+      createV1QueryCache();
+      createV1RemoteDocumentCache();
     }
 
     // Migration 2 to populate the target_globals table no longer needed since migration 3
@@ -82,8 +90,8 @@ void runMigrations(int fromVersion, int toVersion) {
       // Brand new clients don't need to drop and recreate--only clients that have potentially
       // corrupt data.
       if (fromVersion != 0) {
-        dropQueryCache();
-        createQueryCache();
+        dropV1QueryCache();
+        createV1QueryCache();
       }
     }
 
@@ -104,38 +112,88 @@ void runMigrations(int fromVersion, int toVersion) {
       ensureSequenceNumbers();
     }
 
+    /*
+     * Adding a new migration? READ THIS FIRST!
+     *
+     * Be aware that the SDK version may be downgraded then re-upgraded. This means that running
+     * your new migration must not prevent older versions of the SDK from functioning. Additionally,
+     * your migration must be able to run multiple times. In practice, this means a few things:
+     *  * Do not delete tables or columns. Older versions may be reading and writing them.
+     *  * Guard schema additions. Check if tables or columns exist before adding them.
+     *  * Data migrations should *probably* always run. Older versions of the SDK will not have
+     *    maintained invariants from later versions, so migrations that update values cannot assume
+     *    that existing values have been properly maintained. Calculate them again, if applicable.
+     */
+
     if (fromVersion < INDEXING_SUPPORT_VERSION && toVersion >= INDEXING_SUPPORT_VERSION) {
       Preconditions.checkState(Persistence.INDEXING_SUPPORT_ENABLED);
       createLocalDocumentsCollectionIndex();
     }
   }
 
-  private void createMutationQueue() {
-    // A table naming all the mutation queues in the system.
-    db.execSQL(
-        "CREATE TABLE mutation_queues ("
-            + "uid TEXT PRIMARY KEY, "
-            + "last_acknowledged_batch_id INTEGER, "
-            + "last_stream_token BLOB)");
+  /**
+   * Used to assert that a set of tables either all exist or not. The supplied function is run if
+   * none of the tables exist. Use this method to create a set of tables at once.
+   *
+   * <p>If some but not all of the tables exist, an exception will be thrown.
+   */
+  private void ifTablesDontExist(String[] tables, Runnable fn) {
+    boolean tablesFound = false;
+    String allTables = "[" + TextUtils.join(", ", tables) + "]";
+    for (int i = 0; i < tables.length; i++) {
+      String table = tables[i];
+      boolean tableFound = tableExists(table);
+      if (i == 0) {
+        tablesFound = tableFound;
+      } else if (tableFound != tablesFound) {
+        String msg = "Expected all of " + allTables + " to either exist or not, but ";
+        if (tablesFound) {
+          msg += tables[0] + " exists and " + table + " does not";
+        } else {
+          msg += tables[0] + " does not exist and " + table + " does";
+        }
+        throw new IllegalStateException(msg);
+      }
+    }
+    if (!tablesFound) {
+      fn.run();
+    } else {
+      Log.d("SQLiteSchema", "Skipping migration because all of " + allTables + " already exist");
+    }
+  }
 
-    // All the mutation batches in the system, partitioned by user.
-    db.execSQL(
-        "CREATE TABLE mutations ("
-            + "uid TEXT, "
-            + "batch_id INTEGER, "
-            + "mutations BLOB, "
-            + "PRIMARY KEY (uid, batch_id))");
-
-    // A manually maintained index of all the mutation batches that affect a given document key.
-    // the rows in this table are references based on the contents of mutations.mutations.
-    db.execSQL(
-        "CREATE TABLE document_mutations ("
-            + "uid TEXT, "
-            + "path TEXT, "
-            + "batch_id INTEGER, "
-            + "PRIMARY KEY (uid, path, batch_id))");
+  private void createV1MutationQueue() {
+    ifTablesDontExist(
+        new String[] {"mutation_queues", "mutations", "document_mutations"},
+        () -> {
+          // A table naming all the mutation queues in the system.
+          db.execSQL(
+              "CREATE TABLE mutation_queues ("
+                  + "uid TEXT PRIMARY KEY, "
+                  + "last_acknowledged_batch_id INTEGER, "
+                  + "last_stream_token BLOB)");
+
+          // All the mutation batches in the system, partitioned by user.
+          db.execSQL(
+              "CREATE TABLE mutations ("
+                  + "uid TEXT, "
+                  + "batch_id INTEGER, "
+                  + "mutations BLOB, "
+                  + "PRIMARY KEY (uid, batch_id))");
+
+          // A manually maintained index of all the mutation batches that affect a given document
+          // key.
+          // the rows in this table are references based on the contents of mutations.mutations.
+          db.execSQL(
+              "CREATE TABLE document_mutations ("
+                  + "uid TEXT, "
+                  + "path TEXT, "
+                  + "batch_id INTEGER, "
+                  + "PRIMARY KEY (uid, path, batch_id))");
+        });
   }
 
+  /** Note: as of this migration, `last_acknowledged_batch_id` is no longer used by the code. */
   private void removeAcknowledgedMutations() {
     SQLitePersistence.Query mutationQueuesQuery =
         new SQLitePersistence.Query(
@@ -168,64 +226,85 @@ private void removeMutationBatch(String uid, int batchId) {
         new Object[] {uid, batchId});
   }
 
-  private void createQueryCache() {
-    // A cache of targets and associated metadata
-    db.execSQL(
-        "CREATE TABLE targets ("
-            + "target_id INTEGER PRIMARY KEY, "
-            + "canonical_id TEXT, "
-            + "snapshot_version_seconds INTEGER, "
-            + "snapshot_version_nanos INTEGER, "
-            + "resume_token BLOB, "
-            + "last_listen_sequence_number INTEGER,"
-            + "target_proto BLOB)");
-
-    db.execSQL("CREATE INDEX query_targets ON targets (canonical_id, target_id)");
-
-    // Global state tracked across all queries, tracked separately
-    db.execSQL(
-        "CREATE TABLE target_globals ("
-            + "highest_target_id INTEGER, "
-            + "highest_listen_sequence_number INTEGER, "
-            + "last_remote_snapshot_version_seconds INTEGER, "
-            + "last_remote_snapshot_version_nanos INTEGER)");
-
-    // A Mapping table between targets and document paths
-    db.execSQL(
-        "CREATE TABLE target_documents ("
-            + "target_id INTEGER, "
-            + "path TEXT, "
-            + "PRIMARY KEY (target_id, path))");
-
-    // The document_targets reverse mapping table is just an index on target_documents.
-    db.execSQL("CREATE INDEX document_targets ON target_documents (path, target_id)");
+  private void createV1QueryCache() {
+    ifTablesDontExist(
+        new String[] {"targets", "target_globals", "target_documents"},
+        () -> {
+          // A cache of targets and associated metadata
+          db.execSQL(
+              "CREATE TABLE targets ("
+                  + "target_id INTEGER PRIMARY KEY, "
+                  + "canonical_id TEXT, "
+                  + "snapshot_version_seconds INTEGER, "
+                  + "snapshot_version_nanos INTEGER, "
+                  + "resume_token BLOB, "
+                  + "last_listen_sequence_number INTEGER,"
+                  + "target_proto BLOB)");
+
+          db.execSQL("CREATE INDEX query_targets ON targets (canonical_id, target_id)");
+
+          // Global state tracked across all queries, tracked separately
+          db.execSQL(
+              "CREATE TABLE target_globals ("
+                  + "highest_target_id INTEGER, "
+                  + "highest_listen_sequence_number INTEGER, "
+                  + "last_remote_snapshot_version_seconds INTEGER, "
+                  + "last_remote_snapshot_version_nanos INTEGER)");
+
+          // A Mapping table between targets and document paths
+          db.execSQL(
+              "CREATE TABLE target_documents ("
+                  + "target_id INTEGER, "
+                  + "path TEXT, "
+                  + "PRIMARY KEY (target_id, path))");
+
+          // The document_targets reverse mapping table is just an index on target_documents.
+          db.execSQL("CREATE INDEX document_targets ON target_documents (path, target_id)");
+        });
   }
 
-  private void dropQueryCache() {
-    db.execSQL("DROP TABLE targets");
-    db.execSQL("DROP TABLE target_globals");
-    db.execSQL("DROP TABLE target_documents");
+  private void dropV1QueryCache() {
+    // This might be overkill, but if any future migration drops these, it's possible we could try
+    // dropping tables that don't exist.
+    if (tableExists("targets")) {
+      db.execSQL("DROP TABLE targets");
+    }
+    if (tableExists("target_globals")) {
+      db.execSQL("DROP TABLE target_globals");
+    }
+    if (tableExists("target_documents")) {
+      db.execSQL("DROP TABLE target_documents");
+    }
   }
 
-  private void createRemoteDocumentCache() {
-    // A cache of documents obtained from the server.
-    db.execSQL("CREATE TABLE remote_documents (path TEXT PRIMARY KEY, contents BLOB)");
+  private void createV1RemoteDocumentCache() {
+    ifTablesDontExist(
+        new String[] {"remote_documents"},
+        () -> {
+          // A cache of documents obtained from the server.
+          db.execSQL("CREATE TABLE remote_documents (path TEXT PRIMARY KEY, contents BLOB)");
+        });
   }
 
+  // TODO(indexing): Put the schema version in this method name.
   private void createLocalDocumentsCollectionIndex() {
-    // A per-user, per-collection index for cached documents indexed by a single field's name and
-    // value.
-    db.execSQL(
-        "CREATE TABLE collection_index ("
-            + "uid TEXT, "
-            + "collection_path TEXT, "
-            + "field_path TEXT, "
-            + "field_value_type INTEGER, " // determines type of field_value fields.
-            + "field_value_1, " // first component
-            + "field_value_2, " // second component; required for timestamps, GeoPoints
-            + "document_id TEXT, "
-            + "PRIMARY KEY (uid, collection_path, field_path, field_value_type, field_value_1, "
-            + "field_value_2, document_id))");
+    ifTablesDontExist(
+        new String[] {"collection_index"},
+        () -> {
+          // A per-user, per-collection index for cached documents indexed by a single field's name
+          // and value.
+          db.execSQL(
+              "CREATE TABLE collection_index ("
+                  + "uid TEXT, "
+                  + "collection_path TEXT, "
+                  + "field_path TEXT, "
+                  + "field_value_type INTEGER, " // determines type of field_value fields.
+                  + "field_value_1, " // first component
+                  + "field_value_2, " // second component; required for timestamps, GeoPoints
+                  + "document_id TEXT, "
+                  + "PRIMARY KEY (uid, collection_path, field_path, field_value_type, field_value_1, "
+                  + "field_value_2, document_id))");
+        });
   }
 
   // Note that this runs before we add the target count column, so we don't populate it yet.
@@ -241,15 +320,20 @@ private void ensureTargetGlobal() {
   }
 
   private void addTargetCount() {
+    if (!tableContainsColumn("target_globals", "target_count")) {
+      db.execSQL("ALTER TABLE target_globals ADD COLUMN target_count INTEGER");
+    }
+    // Even if the column already existed, rerun the data migration to make sure it's correct.
     long count = DatabaseUtils.queryNumEntries(db, "targets");
-    db.execSQL("ALTER TABLE target_globals ADD COLUMN target_count INTEGER");
     ContentValues cv = new ContentValues();
     cv.put("target_count", count);
     db.update("target_globals", cv, null, null);
   }
 
   private void addSequenceNumber() {
-    db.execSQL("ALTER TABLE target_documents ADD COLUMN sequence_number INTEGER");
+    if (!tableContainsColumn("target_documents", "sequence_number")) {
+      db.execSQL("ALTER TABLE target_documents ADD COLUMN sequence_number INTEGER");
+    }
   }
 
   /**
@@ -281,4 +365,35 @@ private void ensureSequenceNumbers() {
           hardAssert(tagDocument.executeInsert() != -1, "Failed to insert a sentinel row");
         });
   }
+
+  private boolean tableContainsColumn(String table, String column) {
+    List<String> columns = getTableColumns(table);
+    return columns.indexOf(column) != -1;
+  }
+
+  @VisibleForTesting
+  List<String> getTableColumns(String table) {
+    // NOTE: SQLitePersistence.Query helper binding doesn't work with PRAGMA queries. So, just use
+    // `rawQuery`.
+    Cursor c = null;
+    List<String> columns = new ArrayList<>();
+    try {
+      c = db.rawQuery("PRAGMA table_info(" + table + ")", null);
+      int nameIndex = c.getColumnIndex("name");
+      while (c.moveToNext()) {
+        columns.add(c.getString(nameIndex));
+      }
+    } finally {
+      if (c != null) {
+        c.close();
+      }
+    }
+    return columns;
+  }
+
+  private boolean tableExists(String table) {
+    return !new SQLitePersistence.Query(db, "SELECT 1=1 FROM sqlite_master WHERE tbl_name = ?")
+        .binding(table)
+        .isEmpty();
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/BasePath.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/BasePath.java
index 2edc7875e..4da80b39d 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/BasePath.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/BasePath.java
@@ -161,13 +161,11 @@ public int length() {
   }
 
   @Override
-  @SuppressWarnings("unchecked")
-  public boolean equals(Object o) {
-    if (o == null) {
-      return false;
+  public final boolean equals(Object o) {
+    if (this == o) {
+      return true;
     }
-    // The cast is not unchecked because of the class equality check.
-    return getClass() == o.getClass() && compareTo((B) o) == 0;
+    return (o instanceof BasePath) && compareTo((B) o) == 0;
   }
 
   @Override
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java
index 83eeaa284..4485c5df1 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java
@@ -23,7 +23,7 @@
  * Represents a document in Firestore with a key, version, data and whether the data has local
  * mutations applied to it.
  */
-public class Document extends MaybeDocument {
+public final class Document extends MaybeDocument {
 
   /** Describes the `hasPendingWrites` state of a document. */
   public enum DocumentState {
@@ -52,11 +52,34 @@ public int compare(Document left, Document right) {
 
   private final DocumentState documentState;
 
+  /**
+   * Memoized serialized form of the document for optimization purposes (avoids repeated
+   * serialization). Might be null.
+   */
+  private final com.google.firestore.v1.Document proto;
+
+  public @Nullable com.google.firestore.v1.Document getProto() {
+    return proto;
+  }
+
   public Document(
       DocumentKey key, SnapshotVersion version, ObjectValue data, DocumentState documentState) {
     super(key, version);
     this.data = data;
     this.documentState = documentState;
+    this.proto = null;
+  }
+
+  public Document(
+      DocumentKey key,
+      SnapshotVersion version,
+      ObjectValue data,
+      DocumentState documentState,
+      com.google.firestore.v1.Document proto) {
+    super(key, version);
+    this.data = data;
+    this.documentState = documentState;
+    this.proto = proto;
   }
 
   public ObjectValue getData() {
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/DocumentKey.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/DocumentKey.java
index f4e3b7b5e..173edfaf9 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/DocumentKey.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/DocumentKey.java
@@ -23,7 +23,7 @@
 import java.util.List;
 
 /** DocumentKey represents the location of a document in the Firestore database. */
-public class DocumentKey implements Comparable<DocumentKey> {
+public final class DocumentKey implements Comparable<DocumentKey> {
 
   public static final String KEY_FIELD_NAME = "__name__";
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/DocumentSet.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/DocumentSet.java
index 66dd581cf..47a10987b 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/DocumentSet.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/DocumentSet.java
@@ -30,7 +30,7 @@
  * An immutable set of documents (unique by key) ordered by the given comparator or ordered by key
  * by default if no document is present.
  */
-public class DocumentSet implements Iterable<Document> {
+public final class DocumentSet implements Iterable<Document> {
 
   /** Returns an empty DocumentSet sorted by the given comparator, then by keys. */
   public static DocumentSet emptySet(final Comparator<Document> comparator) {
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/NoDocument.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/NoDocument.java
index 74b6d6cad..df83be54a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/NoDocument.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/NoDocument.java
@@ -15,7 +15,7 @@
 package com.google.firebase.firestore.model;
 
 /** Represents that no documents exists for the key at the given version. */
-public class NoDocument extends MaybeDocument {
+public final class NoDocument extends MaybeDocument {
 
   private boolean hasCommittedMutations;
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/UnknownDocument.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/UnknownDocument.java
index dc8cf0d91..892ffb2d7 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/UnknownDocument.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/UnknownDocument.java
@@ -18,7 +18,7 @@
  * A class representing an existing document whose data is unknown (e.g. a document that was updated
  * without a known base document).
  */
-public class UnknownDocument extends MaybeDocument {
+public final class UnknownDocument extends MaybeDocument {
   public UnknownDocument(DocumentKey key, SnapshotVersion version) {
     super(key, version);
   }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/ArrayTransformOperation.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/ArrayTransformOperation.java
index 89e10ec33..f8f1c7abd 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/ArrayTransformOperation.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/ArrayTransformOperation.java
@@ -51,6 +51,7 @@ public FieldValue applyToRemoteDocument(FieldValue previousValue, FieldValue tra
   }
 
   @Override
+  @SuppressWarnings("EqualsGetClass") // subtype-sensitive equality is intended.
   public boolean equals(Object o) {
     if (this == o) {
       return true;
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/FieldMask.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/FieldMask.java
index 0cbef886c..7b0f8ee9f 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/FieldMask.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/FieldMask.java
@@ -15,7 +15,7 @@
 package com.google.firebase.firestore.model.mutation;
 
 import com.google.firebase.firestore.model.FieldPath;
-import java.util.Collection;
+import java.util.Set;
 
 /**
  * Provides a set of fields that can be used to partially patch a document. The FieldMask is used in
@@ -25,14 +25,14 @@
  * companion ObjectValue, the field is deleted. foo.bar - Overwrites only the field bar of the
  * object foo. If foo is not an object, foo is replaced with an object containing foo.
  */
-public class FieldMask {
-  public static FieldMask fromCollection(Collection<FieldPath> mask) {
+public final class FieldMask {
+  public static FieldMask fromSet(Set<FieldPath> mask) {
     return new FieldMask(mask);
   }
 
-  private final Collection<FieldPath> mask;
+  private final Set<FieldPath> mask;
 
-  private FieldMask(Collection<FieldPath> mask) {
+  private FieldMask(Set<FieldPath> mask) {
     this.mask = mask;
   }
 
@@ -49,6 +49,11 @@ public boolean equals(Object o) {
     return mask.equals(fieldMask.mask);
   }
 
+  @Override
+  public String toString() {
+    return "FieldMask{mask=" + mask.toString() + "}";
+  }
+
   /**
    * Verifies that 'fieldPath' is included by at least one field in this field mask.
    *
@@ -69,7 +74,7 @@ public int hashCode() {
     return mask.hashCode();
   }
 
-  public Collection<FieldPath> getMask() {
+  public Set<FieldPath> getMask() {
     return mask;
   }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/MutationBatch.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/MutationBatch.java
index bc3ab7ec1..a2b7d3567 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/MutationBatch.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/MutationBatch.java
@@ -19,7 +19,6 @@
 import com.google.firebase.Timestamp;
 import com.google.firebase.firestore.model.DocumentKey;
 import com.google.firebase.firestore.model.MaybeDocument;
-import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -45,6 +44,7 @@
   private final List<Mutation> mutations;
 
   public MutationBatch(int batchId, Timestamp localWriteTime, List<Mutation> mutations) {
+    hardAssert(!mutations.isEmpty(), "Cannot create an empty mutation batch");
     this.batchId = batchId;
     this.localWriteTime = localWriteTime;
     this.mutations = mutations;
@@ -164,22 +164,6 @@ public Timestamp getLocalWriteTime() {
     return localWriteTime;
   }
 
-  /**
-   * Returns true if this mutation batch has already been removed from the mutation queue.
-   *
-   * <p>Note that not all implementations of the MutationQueue necessarily use tombstones as a part
-   * of their implementation and generally speaking no code outside the mutation queues should
-   * really care about this.
-   */
-  public boolean isTombstone() {
-    return mutations.isEmpty();
-  }
-
-  /** Converts this batch to a tombstone. */
-  public MutationBatch toTombstone() {
-    return new MutationBatch(batchId, localWriteTime, Collections.emptyList());
-  }
-
   public List<Mutation> getMutations() {
     return mutations;
   }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/AbstractStream.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/AbstractStream.java
index 1cd3d7d1c..4eede2ee9 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/AbstractStream.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/AbstractStream.java
@@ -109,11 +109,13 @@ public void onHeaders(Metadata headers) {
     public void onNext(RespT response) {
       dispatcher.run(
           () -> {
-            Logger.debug(
-                AbstractStream.this.getClass().getSimpleName(),
-                "(%x) Stream received: %s",
-                System.identityHashCode(AbstractStream.this),
-                response);
+            if (Logger.isDebugEnabled()) {
+              Logger.debug(
+                  AbstractStream.this.getClass().getSimpleName(),
+                  "(%x) Stream received: %s",
+                  System.identityHashCode(AbstractStream.this),
+                  response);
+            }
             AbstractStream.this.onNext(response);
           });
     }
@@ -203,6 +205,7 @@ public void run() {
     this.idleTimerId = idleTimerId;
     this.listener = listener;
     this.idleTimeoutRunnable = new IdleTimeoutRunnable();
+
     backoff =
         new ExponentialBackoff(
             workerQueue,
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/AndroidConnectivityMonitor.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/AndroidConnectivityMonitor.java
new file mode 100644
index 000000000..b52b1b2ba
--- /dev/null
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/AndroidConnectivityMonitor.java
@@ -0,0 +1,137 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.remote;
+
+import static com.google.firebase.firestore.util.Assert.hardAssert;
+
+import android.annotation.TargetApi;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.ConnectivityManager;
+import android.net.Network;
+import android.net.NetworkInfo;
+import android.os.Build;
+import com.google.firebase.firestore.util.Consumer;
+import java.util.ArrayList;
+import java.util.List;
+import javax.annotation.Nullable;
+
+/**
+ * Android implementation of ConnectivityMonitor. Parallel implementations exist for N+ and pre-N.
+ *
+ * <p>Implementation note: Most of the code here was shamelessly stolen from
+ * https://github.com/grpc/grpc-java/blob/master/android/src/main/java/io/grpc/android/AndroidChannelBuilder.java
+ */
+public final class AndroidConnectivityMonitor implements ConnectivityMonitor {
+
+  private final Context context;
+  @Nullable private final ConnectivityManager connectivityManager;
+  @Nullable private Runnable unregisterRunnable;
+  private final List<Consumer<NetworkStatus>> callbacks = new ArrayList<>();
+
+  public AndroidConnectivityMonitor(Context context) {
+    // This notnull restriction could be eliminated... the pre-N method doesn't
+    // require a Context, and we could use that even on N+ if necessary.
+    hardAssert(context != null, "Context must be non-null");
+    this.context = context;
+
+    connectivityManager =
+        (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+    configureNetworkMonitoring();
+  }
+
+  @Override
+  public void addCallback(Consumer<NetworkStatus> callback) {
+    callbacks.add(callback);
+  }
+
+  @Override
+  public void shutdown() {
+    if (unregisterRunnable != null) {
+      unregisterRunnable.run();
+      unregisterRunnable = null;
+    }
+  }
+
+  private void configureNetworkMonitoring() {
+    // Android N added the registerDefaultNetworkCallback API to listen to changes in the device's
+    // default network. For earlier Android API levels, use the BroadcastReceiver API.
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && connectivityManager != null) {
+      final DefaultNetworkCallback defaultNetworkCallback = new DefaultNetworkCallback();
+      connectivityManager.registerDefaultNetworkCallback(defaultNetworkCallback);
+      unregisterRunnable =
+          new Runnable() {
+            @Override
+            public void run() {
+              connectivityManager.unregisterNetworkCallback(defaultNetworkCallback);
+            }
+          };
+    } else {
+      NetworkReceiver networkReceiver = new NetworkReceiver();
+      IntentFilter networkIntentFilter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
+      context.registerReceiver(networkReceiver, networkIntentFilter);
+      unregisterRunnable =
+          new Runnable() {
+            @Override
+            public void run() {
+              context.unregisterReceiver(networkReceiver);
+            }
+          };
+    }
+  }
+
+  /** Respond to changes in the default network. Only used on API levels 24+. */
+  @TargetApi(Build.VERSION_CODES.N)
+  private class DefaultNetworkCallback extends ConnectivityManager.NetworkCallback {
+    @Override
+    public void onAvailable(Network network) {
+      for (Consumer<NetworkStatus> callback : callbacks) {
+        callback.accept(NetworkStatus.REACHABLE);
+      }
+    }
+
+    @Override
+    public void onLost(Network network) {
+      for (Consumer<NetworkStatus> callback : callbacks) {
+        callback.accept(NetworkStatus.UNREACHABLE);
+      }
+    }
+  }
+
+  /** Respond to network changes. Only used on API levels < 24. */
+  private class NetworkReceiver extends BroadcastReceiver {
+    private boolean isConnected = false;
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+      ConnectivityManager conn =
+          (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+      NetworkInfo networkInfo = conn.getActiveNetworkInfo();
+      boolean wasConnected = isConnected;
+      isConnected = networkInfo != null && networkInfo.isConnected();
+      if (isConnected && !wasConnected) {
+        for (Consumer<NetworkStatus> callback : callbacks) {
+          callback.accept(NetworkStatus.REACHABLE);
+        }
+      } else if (!isConnected && wasConnected) {
+        for (Consumer<NetworkStatus> callback : callbacks) {
+          callback.accept(NetworkStatus.UNREACHABLE);
+        }
+      }
+    }
+  }
+}
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/ConnectivityMonitor.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/ConnectivityMonitor.java
new file mode 100644
index 000000000..57d555145
--- /dev/null
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/ConnectivityMonitor.java
@@ -0,0 +1,39 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.remote;
+
+import com.google.firebase.firestore.util.Consumer;
+
+/** Interface for monitoring changes in network connectivity/reachability. */
+public interface ConnectivityMonitor {
+  enum NetworkStatus {
+    UNREACHABLE,
+    REACHABLE,
+    // TODO(rsgowman): REACHABLE_VIA_CELLULAR.
+    // Leaving this off for now, since (a) we don't need it, and (b) it's somewhat messy to
+    // determine, and (c) we need two parallel implementations (for N+ and pre-N).
+  };
+
+  // TODO(rsgowman): Skipping isNetworkReachable() until we need it.
+  // boolean isNetworkReachable();
+
+  void addCallback(Consumer<NetworkStatus> callback);
+
+  /**
+   * Stops monitoring connectivity. After this call completes, no further callbacks will be
+   * triggered. After shutdown() is called, no further calls are allowed on this instance.
+   */
+  void shutdown();
+}
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/Datastore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/Datastore.java
index 9072ff17f..cee87627a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/Datastore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/Datastore.java
@@ -14,6 +14,7 @@
 
 package com.google.firebase.firestore.remote;
 
+import android.content.Context;
 import android.support.annotation.VisibleForTesting;
 import com.google.android.gms.tasks.Task;
 import com.google.firebase.firestore.FirebaseFirestoreException;
@@ -27,13 +28,14 @@
 import com.google.firebase.firestore.util.AsyncQueue;
 import com.google.firebase.firestore.util.FirestoreChannel;
 import com.google.firebase.firestore.util.Supplier;
-import com.google.firestore.v1beta1.BatchGetDocumentsRequest;
-import com.google.firestore.v1beta1.BatchGetDocumentsResponse;
-import com.google.firestore.v1beta1.CommitRequest;
-import com.google.firestore.v1beta1.CommitResponse;
-import com.google.firestore.v1beta1.FirestoreGrpc;
+import com.google.firestore.v1.BatchGetDocumentsRequest;
+import com.google.firestore.v1.BatchGetDocumentsResponse;
+import com.google.firestore.v1.CommitRequest;
+import com.google.firestore.v1.CommitResponse;
+import com.google.firestore.v1.FirestoreGrpc;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.Status;
+import io.grpc.android.AndroidChannelBuilder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -41,6 +43,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.TimeUnit;
 
 /**
  * Datastore represents a proxy for the remote server, hiding details of the RPC layer. It:
@@ -89,7 +92,10 @@ public static void overrideChannelBuilder(
   }
 
   public Datastore(
-      DatabaseInfo databaseInfo, AsyncQueue workerQueue, CredentialsProvider credentialsProvider) {
+      DatabaseInfo databaseInfo,
+      AsyncQueue workerQueue,
+      CredentialsProvider credentialsProvider,
+      Context context) {
     this.databaseInfo = databaseInfo;
     this.workerQueue = workerQueue;
     this.serializer = new RemoteSerializer(databaseInfo.getDatabaseId());
@@ -105,13 +111,29 @@ public Datastore(
       }
     }
 
+    // Ensure gRPC recovers from a dead connection. (Not typically necessary, as the OS will usually
+    // notify gRPC when a connection dies. But not always. This acts as a failsafe.)
+    channelBuilder.keepAliveTime(30, TimeUnit.SECONDS);
+
     // This ensures all callbacks are issued on the worker queue. If this call is removed,
     // all calls need to be audited to make sure they are executed on the right thread.
     channelBuilder.executor(workerQueue.getExecutor());
 
+    // Wrap the ManagedChannelBuilder in an AndroidChannelBuilder. This allows the channel to
+    // respond more gracefully to network change events (such as switching from cell to wifi).
+    AndroidChannelBuilder androidChannelBuilder =
+        AndroidChannelBuilder.fromBuilder(channelBuilder).context(context);
+
     channel =
         new FirestoreChannel(
-            workerQueue, credentialsProvider, channelBuilder.build(), databaseInfo.getDatabaseId());
+            workerQueue,
+            credentialsProvider,
+            androidChannelBuilder.build(),
+            databaseInfo.getDatabaseId());
+  }
+
+  void shutdown() {
+    channel.shutdown();
   }
 
   AsyncQueue getWorkerQueue() {
@@ -157,7 +179,7 @@ WriteStream createWriteStream(WriteStream.Callback listener) {
               int count = response.getWriteResultsCount();
               ArrayList<MutationResult> results = new ArrayList<>(count);
               for (int i = 0; i < count; i++) {
-                com.google.firestore.v1beta1.WriteResult result = response.getWriteResults(i);
+                com.google.firestore.v1.WriteResult result = response.getWriteResults(i);
                 results.add(serializer.decodeMutationResult(result, commitVersion));
               }
               return results;
@@ -197,7 +219,13 @@ WriteStream createWriteStream(WriteStream.Callback listener) {
             });
   }
 
-  public static boolean isPermanentWriteError(Status status) {
+  /**
+   * Determines whether the given status has an error code that represents a permanent error when
+   * received in response to a non-write operation.
+   *
+   * @see #isPermanentWriteError for classifying write errors.
+   */
+  public static boolean isPermanentError(Status status) {
     // See go/firestore-client-errors
     switch (status.getCode()) {
       case OK:
@@ -229,4 +257,19 @@ public static boolean isPermanentWriteError(Status status) {
         throw new IllegalArgumentException("Unknown gRPC status code: " + status.getCode());
     }
   }
+
+  /**
+   * Determines whether the given status has an error code that represents a permanent error when
+   * received in response to a write operation.
+   *
+   * <p>Write operations must be handled specially because as of b/119437764, ABORTED errors on the
+   * write stream should be retried too (even though ABORTED errors are not generally retryable).
+   *
+   * <p>Note that during the initial handshake on the write stream an ABORTED error signals that we
+   * should discard our stream token (i.e. it is permanent). This means a handshake error should be
+   * classified with isPermanentError, above.
+   */
+  public static boolean isPermanentWriteError(Status status) {
+    return isPermanentError(status) && !status.getCode().equals(Status.Code.ABORTED);
+  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreCallCredentials.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreCallCredentials.java
index 8aa3849e5..1b9f91350 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreCallCredentials.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreCallCredentials.java
@@ -18,15 +18,13 @@
 import com.google.firebase.firestore.auth.CredentialsProvider;
 import com.google.firebase.firestore.util.Logger;
 import com.google.firebase.internal.api.FirebaseNoSignedInUserException;
-import io.grpc.Attributes;
-import io.grpc.CallCredentials;
+import io.grpc.CallCredentials2;
 import io.grpc.Metadata;
-import io.grpc.MethodDescriptor;
 import io.grpc.Status;
 import java.util.concurrent.Executor;
 
 /** CallCredentials that applies any authorization headers. */
-public final class FirestoreCallCredentials implements CallCredentials {
+public final class FirestoreCallCredentials extends CallCredentials2 {
 
   private static final String LOG_TAG = "FirestoreCallCredentials";
 
@@ -45,10 +43,7 @@ public void thisUsesUnstableApi() {}
 
   @Override
   public void applyRequestMetadata(
-      MethodDescriptor<?, ?> methodDescriptor,
-      Attributes attributes,
-      Executor executor,
-      final MetadataApplier metadataApplier) {
+      RequestInfo requestInfo, Executor executor, final MetadataApplier metadataApplier) {
     credentialsProvider
         .getToken()
         .addOnSuccessListener(
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java
index fc4eb36bd..11b550066 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java
@@ -67,29 +67,29 @@
 import com.google.firebase.firestore.remote.WatchChange.WatchTargetChange;
 import com.google.firebase.firestore.remote.WatchChange.WatchTargetChangeType;
 import com.google.firebase.firestore.util.Assert;
-import com.google.firestore.v1beta1.BatchGetDocumentsResponse;
-import com.google.firestore.v1beta1.BatchGetDocumentsResponse.ResultCase;
-import com.google.firestore.v1beta1.Cursor;
-import com.google.firestore.v1beta1.DocumentChange;
-import com.google.firestore.v1beta1.DocumentDelete;
-import com.google.firestore.v1beta1.DocumentMask;
-import com.google.firestore.v1beta1.DocumentRemove;
-import com.google.firestore.v1beta1.DocumentTransform;
-import com.google.firestore.v1beta1.ListenResponse;
-import com.google.firestore.v1beta1.ListenResponse.ResponseTypeCase;
-import com.google.firestore.v1beta1.MapValue;
-import com.google.firestore.v1beta1.StructuredQuery;
-import com.google.firestore.v1beta1.StructuredQuery.CollectionSelector;
-import com.google.firestore.v1beta1.StructuredQuery.CompositeFilter;
-import com.google.firestore.v1beta1.StructuredQuery.FieldFilter;
-import com.google.firestore.v1beta1.StructuredQuery.FieldReference;
-import com.google.firestore.v1beta1.StructuredQuery.Filter.FilterTypeCase;
-import com.google.firestore.v1beta1.StructuredQuery.Order;
-import com.google.firestore.v1beta1.StructuredQuery.UnaryFilter;
-import com.google.firestore.v1beta1.Target;
-import com.google.firestore.v1beta1.Target.DocumentsTarget;
-import com.google.firestore.v1beta1.Target.QueryTarget;
-import com.google.firestore.v1beta1.Value;
+import com.google.firestore.v1.BatchGetDocumentsResponse;
+import com.google.firestore.v1.BatchGetDocumentsResponse.ResultCase;
+import com.google.firestore.v1.Cursor;
+import com.google.firestore.v1.DocumentChange;
+import com.google.firestore.v1.DocumentDelete;
+import com.google.firestore.v1.DocumentMask;
+import com.google.firestore.v1.DocumentRemove;
+import com.google.firestore.v1.DocumentTransform;
+import com.google.firestore.v1.ListenResponse;
+import com.google.firestore.v1.ListenResponse.ResponseTypeCase;
+import com.google.firestore.v1.MapValue;
+import com.google.firestore.v1.StructuredQuery;
+import com.google.firestore.v1.StructuredQuery.CollectionSelector;
+import com.google.firestore.v1.StructuredQuery.CompositeFilter;
+import com.google.firestore.v1.StructuredQuery.FieldFilter;
+import com.google.firestore.v1.StructuredQuery.FieldReference;
+import com.google.firestore.v1.StructuredQuery.Filter.FilterTypeCase;
+import com.google.firestore.v1.StructuredQuery.Order;
+import com.google.firestore.v1.StructuredQuery.UnaryFilter;
+import com.google.firestore.v1.Target;
+import com.google.firestore.v1.Target.DocumentsTarget;
+import com.google.firestore.v1.Target.QueryTarget;
+import com.google.firestore.v1.Value;
 import com.google.protobuf.ByteString;
 import com.google.protobuf.Int32Value;
 import com.google.type.LatLng;
@@ -98,8 +98,10 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 /** Serializer that converts to and from Firestore API protos. */
 public final class RemoteSerializer {
@@ -172,17 +174,15 @@ public DocumentKey decodeKey(String name) {
   }
 
   private String encodeQueryPath(ResourcePath path) {
-    if (path.length() == 0) {
-      // If the path is empty, the backend requires we leave off the /documents at the end.
-      return databaseName;
-    }
     return encodeResourceName(databaseId, path);
   }
 
   private ResourcePath decodeQueryPath(String name) {
     ResourcePath resource = decodeResourceName(name);
     if (resource.length() == 4) {
-      // Path missing the trailing documents path segment, indicating an empty path.
+      // In v1beta1 queries for collections at the root did not have a trailing "/documents". In v1
+      // all resource paths contain "/documents". Preserve the ability to read the v1 form for
+      // compatibility with queries persisted in the local query cache.
       return ResourcePath.EMPTY;
     } else {
       return extractLocalPathFromResourceName(resource);
@@ -249,9 +249,8 @@ public String databaseName() {
    * @param value the model to convert
    * @return The proto representation of the model
    */
-  public com.google.firestore.v1beta1.Value encodeValue(FieldValue value) {
-    com.google.firestore.v1beta1.Value.Builder builder =
-        com.google.firestore.v1beta1.Value.newBuilder();
+  public com.google.firestore.v1.Value encodeValue(FieldValue value) {
+    com.google.firestore.v1.Value.Builder builder = com.google.firestore.v1.Value.newBuilder();
 
     if (value instanceof NullValue) {
       builder.setNullValueValue(0);
@@ -298,7 +297,7 @@ public String databaseName() {
    *
    * @return The model equivalent of the proto data.
    */
-  public FieldValue decodeValue(com.google.firestore.v1beta1.Value proto) {
+  public FieldValue decodeValue(com.google.firestore.v1.Value proto) {
     switch (proto.getValueTypeCase()) {
       case NULL_VALUE:
         return NullValue.nullValue();
@@ -334,17 +333,17 @@ public FieldValue decodeValue(com.google.firestore.v1beta1.Value proto) {
     }
   }
 
-  private com.google.firestore.v1beta1.ArrayValue encodeArrayValue(ArrayValue value) {
+  private com.google.firestore.v1.ArrayValue encodeArrayValue(ArrayValue value) {
     List<FieldValue> internalValue = value.getInternalValue();
-    com.google.firestore.v1beta1.ArrayValue.Builder arrayBuilder =
-        com.google.firestore.v1beta1.ArrayValue.newBuilder();
+    com.google.firestore.v1.ArrayValue.Builder arrayBuilder =
+        com.google.firestore.v1.ArrayValue.newBuilder();
     for (FieldValue subValue : internalValue) {
       arrayBuilder.addValues(encodeValue(subValue));
     }
     return arrayBuilder.build();
   }
 
-  private ArrayValue decodeArrayValue(com.google.firestore.v1beta1.ArrayValue protoArray) {
+  private ArrayValue decodeArrayValue(com.google.firestore.v1.ArrayValue protoArray) {
     int count = protoArray.getValuesCount();
     List<FieldValue> wrappedList = new ArrayList<>(count);
     for (int i = 0; i < count; i++) {
@@ -368,9 +367,9 @@ private ObjectValue decodeMapValue(MapValue value) {
   // PORTING NOTE: There's no encodeFields here because there's no way to write it that doesn't
   // involve creating a temporary map.
 
-  public ObjectValue decodeFields(Map<String, com.google.firestore.v1beta1.Value> fields) {
+  public ObjectValue decodeFields(Map<String, com.google.firestore.v1.Value> fields) {
     ObjectValue result = ObjectValue.emptyObject();
-    for (Map.Entry<String, com.google.firestore.v1beta1.Value> entry : fields.entrySet()) {
+    for (Map.Entry<String, com.google.firestore.v1.Value> entry : fields.entrySet()) {
       FieldPath path = FieldPath.fromSingleSegment(entry.getKey());
       FieldValue value = decodeValue(entry.getValue());
       result = result.set(path, value);
@@ -380,9 +379,9 @@ public ObjectValue decodeFields(Map<String, com.google.firestore.v1beta1.Value>
 
   // Documents
 
-  public com.google.firestore.v1beta1.Document encodeDocument(DocumentKey key, ObjectValue value) {
-    com.google.firestore.v1beta1.Document.Builder builder =
-        com.google.firestore.v1beta1.Document.newBuilder();
+  public com.google.firestore.v1.Document encodeDocument(DocumentKey key, ObjectValue value) {
+    com.google.firestore.v1.Document.Builder builder =
+        com.google.firestore.v1.Document.newBuilder();
     builder.setName(encodeKey(key));
     for (Map.Entry<String, FieldValue> entry : value.getInternalValue()) {
       builder.putFields(entry.getKey(), encodeValue(entry.getValue()));
@@ -409,7 +408,7 @@ private Document decodeFoundDocument(BatchGetDocumentsResponse response) {
     SnapshotVersion version = decodeVersion(response.getFound().getUpdateTime());
     hardAssert(
         !version.equals(SnapshotVersion.NONE), "Got a document response with no snapshot version");
-    return new Document(key, version, value, Document.DocumentState.SYNCED);
+    return new Document(key, version, value, Document.DocumentState.SYNCED, response.getFound());
   }
 
   private NoDocument decodeMissingDocument(BatchGetDocumentsResponse response) {
@@ -427,9 +426,8 @@ private NoDocument decodeMissingDocument(BatchGetDocumentsResponse response) {
   // Mutations
 
   /** Converts a Mutation model to a Write proto */
-  public com.google.firestore.v1beta1.Write encodeMutation(Mutation mutation) {
-    com.google.firestore.v1beta1.Write.Builder builder =
-        com.google.firestore.v1beta1.Write.newBuilder();
+  public com.google.firestore.v1.Write encodeMutation(Mutation mutation) {
+    com.google.firestore.v1.Write.Builder builder = com.google.firestore.v1.Write.newBuilder();
     if (mutation instanceof SetMutation) {
       builder.setUpdate(encodeDocument(mutation.getKey(), ((SetMutation) mutation).getValue()));
     } else if (mutation instanceof PatchMutation) {
@@ -455,7 +453,7 @@ private NoDocument decodeMissingDocument(BatchGetDocumentsResponse response) {
     return builder.build();
   }
 
-  public Mutation decodeMutation(com.google.firestore.v1beta1.Write mutation) {
+  public Mutation decodeMutation(com.google.firestore.v1.Write mutation) {
     Precondition precondition =
         mutation.hasCurrentDocument()
             ? decodePrecondition(mutation.getCurrentDocument())
@@ -496,10 +494,10 @@ public Mutation decodeMutation(com.google.firestore.v1beta1.Write mutation) {
     }
   }
 
-  private com.google.firestore.v1beta1.Precondition encodePrecondition(Precondition precondition) {
+  private com.google.firestore.v1.Precondition encodePrecondition(Precondition precondition) {
     hardAssert(!precondition.isNone(), "Can't serialize an empty precondition");
-    com.google.firestore.v1beta1.Precondition.Builder builder =
-        com.google.firestore.v1beta1.Precondition.newBuilder();
+    com.google.firestore.v1.Precondition.Builder builder =
+        com.google.firestore.v1.Precondition.newBuilder();
     if (precondition.getUpdateTime() != null) {
       return builder.setUpdateTime(encodeVersion(precondition.getUpdateTime())).build();
     } else if (precondition.getExists() != null) {
@@ -509,7 +507,7 @@ public Mutation decodeMutation(com.google.firestore.v1beta1.Write mutation) {
     }
   }
 
-  private Precondition decodePrecondition(com.google.firestore.v1beta1.Precondition precondition) {
+  private Precondition decodePrecondition(com.google.firestore.v1.Precondition precondition) {
     switch (precondition.getConditionTypeCase()) {
       case UPDATE_TIME:
         return Precondition.updateTime(decodeVersion(precondition.getUpdateTime()));
@@ -532,11 +530,11 @@ private DocumentMask encodeDocumentMask(FieldMask mask) {
 
   private FieldMask decodeDocumentMask(DocumentMask mask) {
     int count = mask.getFieldPathsCount();
-    List<FieldPath> paths = new ArrayList<>(count);
+    Set<FieldPath> paths = new HashSet<>(count);
     for (int i = 0; i < count; i++) {
       paths.add(FieldPath.fromServerFormat(mask.getFieldPaths(i)));
     }
-    return FieldMask.fromCollection(paths);
+    return FieldMask.fromSet(paths);
   }
 
   private DocumentTransform.FieldTransform encodeFieldTransform(FieldTransform fieldTransform) {
@@ -563,10 +561,10 @@ private FieldMask decodeDocumentMask(DocumentMask mask) {
     }
   }
 
-  private com.google.firestore.v1beta1.ArrayValue encodeArrayTransformElements(
+  private com.google.firestore.v1.ArrayValue encodeArrayTransformElements(
       List<FieldValue> elements) {
-    com.google.firestore.v1beta1.ArrayValue.Builder arrayBuilder =
-        com.google.firestore.v1beta1.ArrayValue.newBuilder();
+    com.google.firestore.v1.ArrayValue.Builder arrayBuilder =
+        com.google.firestore.v1.ArrayValue.newBuilder();
     for (FieldValue subValue : elements) {
       arrayBuilder.addValues(encodeValue(subValue));
     }
@@ -600,7 +598,7 @@ private FieldTransform decodeFieldTransform(DocumentTransform.FieldTransform fie
   }
 
   private List<FieldValue> decodeArrayTransformElements(
-      com.google.firestore.v1beta1.ArrayValue elementsProto) {
+      com.google.firestore.v1.ArrayValue elementsProto) {
     int count = elementsProto.getValuesCount();
     List<FieldValue> result = new ArrayList<>(count);
     for (int i = 0; i < count; i++) {
@@ -610,7 +608,7 @@ private FieldTransform decodeFieldTransform(DocumentTransform.FieldTransform fie
   }
 
   public MutationResult decodeMutationResult(
-      com.google.firestore.v1beta1.WriteResult proto, SnapshotVersion commitVersion) {
+      com.google.firestore.v1.WriteResult proto, SnapshotVersion commitVersion) {
     // NOTE: Deletes don't have an updateTime but the commit timestamp from the containing
     // CommitResponse or WriteResponse indicates essentially that the delete happened no later than
     // that. For our purposes we don't care exactly when the delete happened so long as we can tell
@@ -977,7 +975,7 @@ public WatchChange decodeWatchChange(ListenResponse protoChange) {
 
     switch (protoChange.getResponseTypeCase()) {
       case TARGET_CHANGE:
-        com.google.firestore.v1beta1.TargetChange targetChange = protoChange.getTargetChange();
+        com.google.firestore.v1.TargetChange targetChange = protoChange.getTargetChange();
         WatchTargetChangeType changeType;
         Status cause = null;
         switch (targetChange.getTargetChangeType()) {
@@ -1014,7 +1012,11 @@ public WatchChange decodeWatchChange(ListenResponse protoChange) {
         hardAssert(
             !version.equals(SnapshotVersion.NONE), "Got a document change without an update time");
         ObjectValue data = decodeFields(docChange.getDocument().getFieldsMap());
-        Document document = new Document(key, version, data, Document.DocumentState.SYNCED);
+        // The document may soon be re-serialized back to protos in order to store it in local
+        // persistence. Memoize the encoded form to avoid encoding it again.
+        Document document =
+            new Document(
+                key, version, data, Document.DocumentState.SYNCED, docChange.getDocument());
         watchChange = new WatchChange.DocumentChange(added, removed, document.getKey(), document);
         break;
       case DOCUMENT_DELETE:
@@ -1034,7 +1036,7 @@ public WatchChange decodeWatchChange(ListenResponse protoChange) {
         watchChange = new WatchChange.DocumentChange(Collections.emptyList(), removed, key, null);
         break;
       case FILTER:
-        com.google.firestore.v1beta1.ExistenceFilter protoFilter = protoChange.getFilter();
+        com.google.firestore.v1.ExistenceFilter protoFilter = protoChange.getFilter();
         // TODO: implement existence filter parsing (see b/33076578)
         ExistenceFilter filter = new ExistenceFilter(protoFilter.getCount());
         int targetId = protoFilter.getTargetId();
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteStore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteStore.java
index e1fd8a560..050901ace 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteStore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteStore.java
@@ -17,6 +17,7 @@
 import static com.google.firebase.firestore.util.Assert.hardAssert;
 
 import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import com.google.firebase.database.collection.ImmutableSortedSet;
 import com.google.firebase.firestore.core.OnlineState;
 import com.google.firebase.firestore.core.Transaction;
@@ -28,6 +29,7 @@
 import com.google.firebase.firestore.model.mutation.MutationBatch;
 import com.google.firebase.firestore.model.mutation.MutationBatchResult;
 import com.google.firebase.firestore.model.mutation.MutationResult;
+import com.google.firebase.firestore.remote.ConnectivityMonitor.NetworkStatus;
 import com.google.firebase.firestore.remote.WatchChange.DocumentChange;
 import com.google.firebase.firestore.remote.WatchChange.ExistenceFilterWatchChange;
 import com.google.firebase.firestore.remote.WatchChange.WatchTargetChange;
@@ -37,7 +39,6 @@
 import com.google.firebase.firestore.util.Util;
 import com.google.protobuf.ByteString;
 import io.grpc.Status;
-import io.grpc.Status.Code;
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.HashMap;
@@ -108,6 +109,7 @@
   private final RemoteStoreCallback remoteStoreCallback;
   private final LocalStore localStore;
   private final Datastore datastore;
+  private final ConnectivityMonitor connectivityMonitor;
 
   /**
    * A mapping of watched targets that the client cares about tracking and the user has explicitly
@@ -147,10 +149,12 @@ public RemoteStore(
       RemoteStoreCallback remoteStoreCallback,
       LocalStore localStore,
       Datastore datastore,
-      AsyncQueue workerQueue) {
+      AsyncQueue workerQueue,
+      ConnectivityMonitor connectivityMonitor) {
     this.remoteStoreCallback = remoteStoreCallback;
     this.localStore = localStore;
     this.datastore = datastore;
+    this.connectivityMonitor = connectivityMonitor;
 
     listenTargets = new HashMap<>();
     writePipeline = new ArrayDeque<>();
@@ -202,6 +206,21 @@ public void onClose(Status status) {
                 handleWriteStreamClose(status);
               }
             });
+
+    connectivityMonitor.addCallback(
+        (NetworkStatus networkStatus) -> {
+          workerQueue.enqueueAndForget(
+              () -> {
+                // If the network has been explicitly disabled, make sure we don't accidentally
+                // re-enable it.
+                if (canUseNetwork()) {
+                  // Tear down and re-create our network streams. This will ensure the backoffs are
+                  // reset.
+                  Logger.debug(LOG_TAG, "Restarting streams for network reachability change.");
+                  restartNetwork();
+                }
+              });
+        });
   }
 
   /** Re-enables the network. Only to be called as the counterpart to disableNetwork(). */
@@ -222,6 +241,17 @@ public void enableNetwork() {
     }
   }
 
+  /**
+   * Re-enables the network, and forces the state to ONLINE. Without this, the state will be
+   * UNKNOWN. If the OnlineStateTracker updates the state from UNKNOWN to UNKNOWN, then it doesn't
+   * trigger the callback.
+   */
+  @VisibleForTesting
+  void forceEnableNetwork() {
+    enableNetwork();
+    onlineStateTracker.updateState(OnlineState.ONLINE);
+  }
+
   /** Temporarily disables the network. The network can be re-enabled using enableNetwork(). */
   public void disableNetwork() {
     networkEnabled = false;
@@ -243,6 +273,13 @@ private void disableNetworkInternal() {
     cleanUpWatchStreamState();
   }
 
+  private void restartNetwork() {
+    networkEnabled = false;
+    disableNetworkInternal();
+    onlineStateTracker.updateState(OnlineState.UNKNOWN);
+    enableNetwork();
+  }
+
   /**
    * Starts up the remote store, creating streams, restoring state from LocalStore, etc. This should
    * called before using any other API endpoints in this class.
@@ -258,10 +295,10 @@ public void start() {
    */
   public void shutdown() {
     Logger.debug(LOG_TAG, "Shutting down");
-    // For now, all shutdown logic is handled by disableNetworkInternal(). We might expand on this
-    // in the future.
+    connectivityMonitor.shutdown();
     networkEnabled = false;
     this.disableNetworkInternal();
+    datastore.shutdown();
     // Set the OnlineState to UNKNOWN (rather than OFFLINE) to avoid potentially triggering
     // spurious listener events with cached data, etc.
     onlineStateTracker.updateState(OnlineState.UNKNOWN);
@@ -280,10 +317,7 @@ public void handleCredentialChange() {
       // for the new user and re-fill the write pipeline with new mutations from the LocalStore
       // (since mutations are per-user).
       Logger.debug(LOG_TAG, "Restarting streams for new credential.");
-      networkEnabled = false;
-      disableNetworkInternal();
-      onlineStateTracker.updateState(OnlineState.UNKNOWN);
-      enableNetwork();
+      restartNetwork();
     }
   }
 
@@ -643,9 +677,10 @@ private void handleWriteStreamClose(Status status) {
 
   private void handleWriteHandshakeError(Status status) {
     hardAssert(!status.isOk(), "Handling write error with status OK.");
-    // Reset the token if it's a permanent error or the error code is ABORTED, signaling the write
-    // stream is no longer valid.
-    if (Datastore.isPermanentWriteError(status) || status.getCode().equals(Code.ABORTED)) {
+    // Reset the token if it's a permanent error, signaling the write stream is no longer valid.
+    // Note that the handshake does not count as a write: see comments on isPermanentWriteError for
+    // details.
+    if (Datastore.isPermanentError(status)) {
       String token = Util.toDebugString(writeStream.getLastStreamToken());
       Logger.debug(
           LOG_TAG,
@@ -659,7 +694,7 @@ private void handleWriteHandshakeError(Status status) {
 
   private void handleWriteError(Status status) {
     hardAssert(!status.isOk(), "Handling write error with status OK.");
-    // Only handle permanent error, if it's transient just let the retry logic kick in.
+    // Only handle permanent errors here. If it's transient, just let the retry logic kick in.
     if (Datastore.isPermanentWriteError(status)) {
       // If this was a permanent error, the request itself was the problem so it's not going
       // to succeed if we resend it.
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WatchChange.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WatchChange.java
index e2a882cc7..565c85afa 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WatchChange.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WatchChange.java
@@ -38,7 +38,7 @@ private WatchChange() {
    * A document change represents a change document and a list of target ids to which this change
    * applies. If the document has been deleted, the deleted document will be provided.
    */
-  public static class DocumentChange extends WatchChange {
+  public static final class DocumentChange extends WatchChange {
     // TODO: figure out if we can actually use arrays here for efficiency
     /** The new document applies to all of these targets. */
     private final List<Integer> updatedTargetIds;
@@ -137,7 +137,7 @@ public int hashCode() {
    * An ExistenceFilterWatchChange applies to the targets and is required to verify the current
    * client state against expected state sent from the server.
    */
-  public static class ExistenceFilterWatchChange extends WatchChange {
+  public static final class ExistenceFilterWatchChange extends WatchChange {
     private final int targetId;
 
     private final ExistenceFilter existenceFilter;
@@ -177,7 +177,7 @@ public String toString() {
   }
 
   /** The state of a target has changed. This can mean removal, addition, current or reset. */
-  public static class WatchTargetChange extends WatchChange {
+  public static final class WatchTargetChange extends WatchChange {
     private final WatchTargetChangeType changeType;
     private final List<Integer> targetIds;
     private final ByteString resumeToken;
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WatchStream.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WatchStream.java
index deccd828b..79f6c16fc 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WatchStream.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WatchStream.java
@@ -21,9 +21,9 @@
 import com.google.firebase.firestore.util.AsyncQueue;
 import com.google.firebase.firestore.util.AsyncQueue.TimerId;
 import com.google.firebase.firestore.util.FirestoreChannel;
-import com.google.firestore.v1beta1.FirestoreGrpc;
-import com.google.firestore.v1beta1.ListenRequest;
-import com.google.firestore.v1beta1.ListenResponse;
+import com.google.firestore.v1.FirestoreGrpc;
+import com.google.firestore.v1.ListenRequest;
+import com.google.firestore.v1.ListenResponse;
 import com.google.protobuf.ByteString;
 import java.util.Map;
 
@@ -34,7 +34,7 @@
  * sent to control what changes will be sent from the server for WatchChanges.
  *
  * @see <a
- *     href="https://github.com/googleapis/googleapis/blob/master/google/firestore/v1beta1/firestore.proto#L147">firestore.proto</a>
+ *     href="https://github.com/googleapis/googleapis/blob/master/google/firestore/v1/firestore.proto#L147">firestore.proto</a>
  */
 public class WatchStream
     extends AbstractStream<ListenRequest, ListenResponse, WatchStream.Callback> {
@@ -100,7 +100,7 @@ public void unwatchTarget(int targetId) {
   }
 
   @Override
-  public void onNext(com.google.firestore.v1beta1.ListenResponse listenResponse) {
+  public void onNext(com.google.firestore.v1.ListenResponse listenResponse) {
     // A successful response means the stream is healthy
     backoff.reset();
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WriteStream.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WriteStream.java
index dbbd7cf90..c4e8f2cf4 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WriteStream.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/WriteStream.java
@@ -23,9 +23,9 @@
 import com.google.firebase.firestore.util.AsyncQueue;
 import com.google.firebase.firestore.util.AsyncQueue.TimerId;
 import com.google.firebase.firestore.util.FirestoreChannel;
-import com.google.firestore.v1beta1.FirestoreGrpc;
-import com.google.firestore.v1beta1.WriteRequest;
-import com.google.firestore.v1beta1.WriteResponse;
+import com.google.firestore.v1.FirestoreGrpc;
+import com.google.firestore.v1.WriteRequest;
+import com.google.firestore.v1.WriteResponse;
 import com.google.protobuf.ByteString;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -45,7 +45,7 @@
  * okay to use the same streamToken for the calls to {@code writeMutations}.
  *
  * @see <a
- *     href="https://github.com/googleapis/googleapis/blob/master/google/firestore/v1beta1/firestore.proto#L139">firestore.proto</a>
+ *     href="https://github.com/googleapis/googleapis/blob/master/google/firestore/v1/firestore.proto#L139">firestore.proto</a>
  */
 public class WriteStream extends AbstractStream<WriteRequest, WriteResponse, WriteStream.Callback> {
 
@@ -179,7 +179,7 @@ public void onNext(WriteResponse response) {
       int count = response.getWriteResultsCount();
       List<MutationResult> results = new ArrayList<>(count);
       for (int i = 0; i < count; i++) {
-        com.google.firestore.v1beta1.WriteResult result = response.getWriteResults(i);
+        com.google.firestore.v1.WriteResult result = response.getWriteResults(i);
         results.add(serializer.decodeMutationResult(result, commitVersion));
       }
       listener.onWriteResponse(commitVersion, results);
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/AsyncQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/AsyncQueue.java
index bef4ee4b1..3ab4c5be9 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/AsyncQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/AsyncQueue.java
@@ -24,7 +24,7 @@
 import com.google.android.gms.tasks.Continuation;
 import com.google.android.gms.tasks.Task;
 import com.google.android.gms.tasks.TaskCompletionSource;
-import com.google.firebase.firestore.core.Version;
+import com.google.firebase.firestore.BuildConfig;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.concurrent.Callable;
@@ -68,6 +68,8 @@
      * set timeout, rather than waiting indefinitely for success or failure.
      */
     ONLINE_STATE_TIMEOUT,
+    /** A timer used to periodically attempt LRU Garbage collection */
+    GARBAGE_COLLECTION
   }
 
   /**
@@ -367,7 +369,7 @@ public void panic(Throwable t) {
             OutOfMemoryError error =
                 new OutOfMemoryError(
                     "Firestore ("
-                        + Version.SDK_VERSION
+                        + BuildConfig.VERSION_NAME
                         + ") ran out of memory. "
                         + "Check your queries to make sure they are not loading an excessive "
                         + "amount of data.");
@@ -375,7 +377,7 @@ public void panic(Throwable t) {
             throw error;
           } else {
             throw new RuntimeException(
-                "Internal error in Firestore (" + Version.SDK_VERSION + ").", t);
+                "Internal error in Firestore (" + BuildConfig.VERSION_NAME + ").", t);
           }
         });
   }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/FirestoreChannel.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/FirestoreChannel.java
index 2bd3a42e4..2015e1900 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/FirestoreChannel.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/FirestoreChannel.java
@@ -16,16 +16,15 @@
 
 import com.google.android.gms.tasks.Task;
 import com.google.android.gms.tasks.TaskCompletionSource;
+import com.google.firebase.firestore.BuildConfig;
 import com.google.firebase.firestore.FirebaseFirestoreException;
 import com.google.firebase.firestore.FirebaseFirestoreException.Code;
 import com.google.firebase.firestore.auth.CredentialsProvider;
-import com.google.firebase.firestore.core.Version;
 import com.google.firebase.firestore.model.DatabaseId;
 import com.google.firebase.firestore.remote.FirestoreCallCredentials;
-import com.google.firestore.v1beta1.FirestoreGrpc;
-import com.google.firestore.v1beta1.FirestoreGrpc.FirestoreStub;
+import com.google.firestore.v1.FirestoreGrpc;
+import com.google.firestore.v1.FirestoreGrpc.FirestoreStub;
 import io.grpc.CallOptions;
-import io.grpc.Channel;
 import io.grpc.ClientCall;
 import io.grpc.ManagedChannel;
 import io.grpc.Metadata;
@@ -33,6 +32,7 @@
 import io.grpc.Status;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 /**
  * Wrapper class around io.grpc.Channel that adds headers, exception handling and simplifies
@@ -50,7 +50,7 @@
   // to us at build time or runtime (it's empty when building in google3). So for now we omit the
   // version of grpc.
   private static final String X_GOOG_API_CLIENT_VALUE =
-      "gl-java/ fire/" + Version.SDK_VERSION + " grpc/";
+      "gl-java/ fire/" + BuildConfig.VERSION_NAME + " grpc/";
 
   /** The async worker queue that is used to dispatch events. */
   private final AsyncQueue asyncQueue;
@@ -58,7 +58,7 @@
   private final CredentialsProvider credentialsProvider;
 
   /** The underlying gRPC channel. */
-  private final Channel channel;
+  private final ManagedChannel channel;
 
   /** Call options to be used when invoking RPCs. */
   private final CallOptions callOptions;
@@ -77,7 +77,7 @@ public FirestoreChannel(
     FirestoreCallCredentials firestoreHeaders = new FirestoreCallCredentials(credentialsProvider);
     FirestoreStub firestoreStub =
         FirestoreGrpc.newStub(grpcChannel).withCallCredentials(firestoreHeaders);
-    this.channel = firestoreStub.getChannel();
+    this.channel = grpcChannel;
     this.callOptions = firestoreStub.getCallOptions();
 
     this.resourcePrefixValue =
@@ -85,6 +85,49 @@ public FirestoreChannel(
             "projects/%s/databases/%s", databaseId.getProjectId(), databaseId.getDatabaseId());
   }
 
+  /**
+   * Shuts down the grpc channel. This is not reversible and renders the FirestoreChannel unusable.
+   */
+  public void shutdown() {
+    channel.shutdown();
+    try {
+      // TODO(rsgowman): Investigate occasional hangs in channel.shutdown().
+      //
+      // While running the integration tests, channel.shutdown() will occasionally timeout.
+      // (Typically on ~4-5 different tests, differing from one run to the next.) We should figure
+      // this out. But in the meantime, just use an exceptionally short timeout here and skip
+      // straight to shutdownNow() which works every time. (We don't support shutting down
+      // firestore, so this should only be triggered from the test suite.)
+      if (!channel.awaitTermination(1, TimeUnit.SECONDS)) {
+        Logger.debug(
+            FirestoreChannel.class.getSimpleName(),
+            "Unable to gracefully shutdown the gRPC ManagedChannel. Will attempt an immediate shutdown.");
+        channel.shutdownNow();
+
+        // gRPC docs claim "Although forceful, the shutdown process is still not
+        // instantaneous; isTerminated() will likely return false immediately after this method
+        // returns." Therefore, we still need to awaitTermination() again.
+        if (!channel.awaitTermination(60, TimeUnit.SECONDS)) {
+          // Something bad has happened. We could assert, but this is just resource cleanup for a
+          // resource that is likely only released at the end of the execution. So instead, we'll
+          // just log the error.
+          Logger.warn(
+              FirestoreChannel.class.getSimpleName(),
+              "Unable to forcefully shutdown the gRPC ManagedChannel.");
+        }
+      }
+    } catch (InterruptedException e) {
+      // (Re-)Cancel if current thread also interrupted
+      channel.shutdownNow();
+      // Similar to above, something bad happened, but it's not worth asserting. Just log it.
+      Logger.warn(
+          FirestoreChannel.class.getSimpleName(),
+          "Interrupted while shutting down the gRPC Managed Channel");
+      // Preserve interrupt status
+      Thread.currentThread().interrupt();
+    }
+  }
+
   /** Creates and starts a new bi-directional streaming RPC. */
   public <ReqT, RespT> ClientCall<ReqT, RespT> runBidiStreamingRpc(
       MethodDescriptor<ReqT, RespT> method, IncomingStreamObserver<RespT> observer) {
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/ListenerRegistrationImpl.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/ListenerRegistrationImpl.java
index 4b97a6585..d42e41a29 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/ListenerRegistrationImpl.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/ListenerRegistrationImpl.java
@@ -14,15 +14,40 @@
 
 package com.google.firebase.firestore.util;
 
+import static com.google.firebase.firestore.util.Assert.hardAssert;
+
 import android.app.Activity;
-import com.google.android.gms.common.api.internal.ActivityLifecycleObserver;
+import android.support.v4.app.FragmentActivity;
 import com.google.firebase.firestore.ListenerRegistration;
 import com.google.firebase.firestore.core.FirestoreClient;
 import com.google.firebase.firestore.core.QueryListener;
 import com.google.firebase.firestore.core.ViewSnapshot;
+import java.util.ArrayList;
+import java.util.List;
 import javax.annotation.Nullable;
 
-/** Implements the ListenerRegistration interface by removing a query from the listener. */
+/**
+ * Implements the ListenerRegistration interface by removing a query from the listener.
+ *
+ * <p>Regarding activity-scoped listeners, Android provides lifecycle callbacks (eg onStop()) that
+ * custom `Activity`s can implement via subclassing. But we can't take advantage of that, since we
+ * need to be usable with a generic Activity. So instead, we create a custom Fragment, and add that
+ * Fragment to the given Activity. When the Activity stops, it will automatically stop the attached
+ * Fragments too.
+ *
+ * <p>One difficulty with this approach is that how you get a Fragment and attach it to an Activity
+ * differs based on the type of Activity. If the Activity is actually a FragmentActivity, then you
+ * must use the android.support.v4.app.FragmentManager to do so. Otherwise, you need to use the
+ * deprecated android.app.FragmentManager.
+ *
+ * <p>Possible improvements:
+ *
+ * <ol>
+ *   <li>Allow other lifecycle callbacks other than just 'onStop'.
+ *   <li>Use LifecycleOwner (which FragmentActivity implements, but Activity does not) to register
+ *       for lifecycle callbacks instead of creating/attaching a Fragment.
+ * </ol>
+ */
 public class ListenerRegistrationImpl implements ListenerRegistration {
 
   private final FirestoreClient client;
@@ -33,6 +58,142 @@
   /** The event listener for the query that raises events asynchronously. */
   private final ExecutorEventListener<ViewSnapshot> asyncEventListener;
 
+  static class CallbackList {
+    void run() {
+      for (Runnable callback : callbacks) {
+        if (callback != null) {
+          callback.run();
+        }
+      }
+    }
+
+    synchronized void add(Runnable callback) {
+      callbacks.add(callback);
+    }
+
+    private final List<Runnable> callbacks = new ArrayList<>();
+  }
+
+  public static class StopListenerSupportFragment extends android.support.v4.app.Fragment {
+    CallbackList callbacks = new CallbackList();
+
+    @Override
+    @SuppressWarnings("SynchronizeOnNonFinalField")
+    public void onStop() {
+      super.onStop();
+
+      CallbackList callbacksCopy;
+      // Synchronize to ensure we don't drop callbacks if the user registers another onStop callback
+      // at the same time as the callbacks are executing. (See the synchronized
+      // CallbackList#add(Runnable) method.) Once the callbacks instance has been reassigned, we can
+      // allow the user to add more callbacks again (which would only be invoked if the Fragment was
+      // restarted and stopped).
+      synchronized (callbacks) {
+        callbacksCopy = callbacks;
+        callbacks = new CallbackList();
+      }
+      callbacksCopy.run();
+    }
+  }
+
+  @SuppressWarnings("deprecation")
+  public static class StopListenerFragment extends android.app.Fragment {
+    CallbackList callbacks = new CallbackList();
+
+    @Override
+    @SuppressWarnings("SynchronizeOnNonFinalField")
+    public void onStop() {
+      super.onStop();
+
+      CallbackList callbacksCopy;
+      // See sync comments in the StopListenerSupportFragment implementation.
+      synchronized (callbacks) {
+        callbacksCopy = callbacks;
+        callbacks = new CallbackList();
+      }
+      callbacksCopy.run();
+    }
+  }
+
+  @Nullable
+  private static <T> T castFragment(Class<T> fragmentClass, @Nullable Object fragment, String tag) {
+    try {
+      if (fragment == null) {
+        return null;
+      }
+      return fragmentClass.cast(fragment);
+    } catch (ClassCastException e) {
+      throw new IllegalStateException(
+          "Fragment with tag '"
+              + tag
+              + "' is a "
+              + fragment.getClass().getName()
+              + " but should be a "
+              + fragmentClass.getName());
+    }
+  }
+
+  private static final String SUPPORT_FRAGMENT_TAG = "FirestoreOnStopObserverSupportFragment";
+  private static final String FRAGMENT_TAG = "FirestoreOnStopObserverFragment";
+
+  /**
+   * Implementation for non-FragmentActivity Activities. Unfortunately, all Fragment related
+   * classes/methods with nonFragmentActivityActivities are deprecated, implying that almost
+   * everything in this function is deprecated.
+   */
+  @SuppressWarnings("deprecation")
+  private void onActivityStopCallOnce(Activity activity, Runnable callback) {
+    hardAssert(
+        !(activity instanceof FragmentActivity),
+        "onActivityStopCallOnce must be called with a *non*-FragmentActivity Activity.");
+
+    activity.runOnUiThread(
+        () -> {
+          StopListenerFragment fragment =
+              castFragment(
+                  StopListenerFragment.class,
+                  activity.getFragmentManager().findFragmentByTag(FRAGMENT_TAG),
+                  FRAGMENT_TAG);
+
+          if (fragment == null || fragment.isRemoving()) {
+            fragment = new StopListenerFragment();
+            activity
+                .getFragmentManager()
+                .beginTransaction()
+                .add(fragment, FRAGMENT_TAG)
+                .commitAllowingStateLoss();
+
+            activity.getFragmentManager().executePendingTransactions();
+          }
+
+          fragment.callbacks.add(callback);
+        });
+  }
+
+  private void onFragmentActivityStopCallOnce(FragmentActivity activity, Runnable callback) {
+    activity.runOnUiThread(
+        () -> {
+          StopListenerSupportFragment fragment =
+              castFragment(
+                  StopListenerSupportFragment.class,
+                  activity.getSupportFragmentManager().findFragmentByTag(SUPPORT_FRAGMENT_TAG),
+                  SUPPORT_FRAGMENT_TAG);
+
+          if (fragment == null || fragment.isRemoving()) {
+            fragment = new StopListenerSupportFragment();
+            activity
+                .getSupportFragmentManager()
+                .beginTransaction()
+                .add(fragment, SUPPORT_FRAGMENT_TAG)
+                .commitAllowingStateLoss();
+
+            activity.getSupportFragmentManager().executePendingTransactions();
+          }
+
+          fragment.callbacks.add(callback);
+        });
+  }
+
   /** Creates a new ListenerRegistration. Is activity-scoped if and only if activity is non-null. */
   public ListenerRegistrationImpl(
       FirestoreClient client,
@@ -44,7 +205,11 @@ public ListenerRegistrationImpl(
     this.asyncEventListener = asyncEventListener;
 
     if (activity != null) {
-      ActivityLifecycleObserver.of(activity).onStopCallOnce(this::remove);
+      if (activity instanceof FragmentActivity) {
+        onFragmentActivityStopCallOnce((FragmentActivity) activity, this::remove);
+      } else {
+        onActivityStopCallOnce(activity, this::remove);
+      }
     }
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Logger.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Logger.java
index 681c8373b..0279cd5f0 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Logger.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Logger.java
@@ -15,7 +15,7 @@
 package com.google.firebase.firestore.util;
 
 import android.util.Log;
-import com.google.firebase.firestore.core.Version;
+import com.google.firebase.firestore.BuildConfig;
 
 /** Helper class to log messages for Firestore */
 public class Logger {
@@ -40,7 +40,8 @@ public static boolean isDebugEnabled() {
   private static void doLog(Level level, String tag, String toLog, Object... values) {
     if (level.ordinal() >= Logger.logLevel.ordinal()) {
       String value =
-          String.format("(%s) [%s]: ", Version.SDK_VERSION, tag) + String.format(toLog, values);
+          String.format("(%s) [%s]: ", BuildConfig.VERSION_NAME, tag)
+              + String.format(toLog, values);
       switch (level) {
         case DEBUG:
           Log.i("Firestore", value);
diff --git a/firebase-firestore/src/proto/google/firebase/firestore/proto/maybe_document.proto b/firebase-firestore/src/proto/google/firebase/firestore/proto/maybe_document.proto
index e76d5e7d9..43f577c2d 100644
--- a/firebase-firestore/src/proto/google/firebase/firestore/proto/maybe_document.proto
+++ b/firebase-firestore/src/proto/google/firebase/firestore/proto/maybe_document.proto
@@ -21,7 +21,7 @@ option java_package = "com.google.firebase.firestore.proto";
 
 option objc_class_prefix = "FSTPB";
 
-import "google/firestore/v1beta1/document.proto";
+import "google/firestore/v1/document.proto";
 import "google/protobuf/timestamp.proto";
 
 // A message indicating that the document is known to not exist.
@@ -54,7 +54,7 @@ message MaybeDocument {
     NoDocument no_document = 1;
 
     // The document (if it exists).
-    google.firestore.v1beta1.Document document = 2;
+    google.firestore.v1.Document document = 2;
 
     // Used if the document is known to exist but its data is unknown.
     UnknownDocument unknown_document = 3;
diff --git a/firebase-firestore/src/proto/google/firebase/firestore/proto/mutation.proto b/firebase-firestore/src/proto/google/firebase/firestore/proto/mutation.proto
index ea448c89a..8f3d6e7ef 100644
--- a/firebase-firestore/src/proto/google/firebase/firestore/proto/mutation.proto
+++ b/firebase-firestore/src/proto/google/firebase/firestore/proto/mutation.proto
@@ -14,7 +14,7 @@
 
 syntax = "proto3";
 
-import "google/firestore/v1beta1/write.proto";
+import "google/firestore/v1/write.proto";
 import "google/protobuf/timestamp.proto";
 
 package firestore.client;
@@ -51,7 +51,7 @@ message WriteBatch {
   int32 batch_id = 1;
 
   // A list of writes to apply. All writes will be applied atomically.
-  repeated google.firestore.v1beta1.Write writes = 2;
+  repeated google.firestore.v1.Write writes = 2;
 
   // The local time at which the write batch was initiated.
   google.protobuf.Timestamp local_write_time = 3;
diff --git a/firebase-firestore/src/proto/google/firebase/firestore/proto/target.proto b/firebase-firestore/src/proto/google/firebase/firestore/proto/target.proto
index a0cd25b8a..eb8453f46 100644
--- a/firebase-firestore/src/proto/google/firebase/firestore/proto/target.proto
+++ b/firebase-firestore/src/proto/google/firebase/firestore/proto/target.proto
@@ -21,7 +21,7 @@ option java_package = "com.google.firebase.firestore.proto";
 
 option objc_class_prefix = "FSTPB";
 
-import "google/firestore/v1beta1/firestore.proto";
+import "google/firestore/v1/firestore.proto";
 import "google/protobuf/timestamp.proto";
 
 // A Target is a long-lived data structure representing a resumable listen on a
@@ -36,7 +36,7 @@ message Target {
   // The last snapshot version received from the Watch Service for this target.
   //
   // This is the same value as TargetChange.read_time
-  // https://github.com/googleapis/googleapis/blob/master/google/firestore/v1beta1/firestore.proto#L734
+  // https://github.com/googleapis/googleapis/blob/master/google/firestore/v1/firestore.proto#L735
   google.protobuf.Timestamp snapshot_version = 2;
 
   // An opaque, server-assigned token that allows watching a query to be
@@ -53,7 +53,7 @@ message Target {
   // the client should use the snapshot_version for its own purposes.
   //
   // This is the same value as TargetChange.resume_token
-  // https://github.com/googleapis/googleapis/blob/master/google/firestore/v1beta1/firestore.proto#L722
+  // https://github.com/googleapis/googleapis/blob/master/google/firestore/v1/firestore.proto#L723
   bytes resume_token = 3;
 
   // A sequence number representing the last time this query was listened to,
@@ -73,10 +73,10 @@ message Target {
   // The server-side type of target to listen to.
   oneof target_type {
     // A target specified by a query.
-    google.firestore.v1beta1.Target.QueryTarget query = 5;
+    google.firestore.v1.Target.QueryTarget query = 5;
 
     // A target specified by a set of document names.
-    google.firestore.v1beta1.Target.DocumentsTarget documents = 6;
+    google.firestore.v1.Target.DocumentsTarget documents = 6;
   }
 }
 
diff --git a/firebase-firestore/src/proto/google/firestore/admin/v1beta1/firestore_admin.proto b/firebase-firestore/src/proto/google/firestore/admin/v1beta1/firestore_admin.proto
deleted file mode 100644
index 75579c3ac..000000000
--- a/firebase-firestore/src/proto/google/firestore/admin/v1beta1/firestore_admin.proto
+++ /dev/null
@@ -1,217 +0,0 @@
-// Copyright 2018 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Copyright 2017 Google Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-syntax = "proto3";
-
-package google.firestore.admin.v1beta1;
-
-import "google/api/annotations.proto";
-import "google/firestore/admin/v1beta1/index.proto";
-import "google/longrunning/operations.proto";
-import "google/protobuf/empty.proto";
-import "google/protobuf/timestamp.proto";
-
-option csharp_namespace = "Google.Cloud.Firestore.Admin.V1Beta1";
-option go_package = "google.golang.org/genproto/googleapis/firestore/admin/v1beta1;admin";
-option java_multiple_files = true;
-option java_outer_classname = "FirestoreAdminProto";
-option java_package = "com.google.firestore.admin.v1beta1";
-option objc_class_prefix = "GCFS";
-
-
-// The Cloud Firestore Admin API.
-//
-// This API provides several administrative services for Cloud Firestore.
-//
-// # Concepts
-//
-// Project, Database, Namespace, Collection, and Document are used as defined in
-// the Google Cloud Firestore API.
-//
-// Operation: An Operation represents work being performed in the background.
-//
-//
-// # Services
-//
-// ## Index
-//
-// The index service manages Cloud Firestore indexes.
-//
-// Index creation is performed asynchronously.
-// An Operation resource is created for each such asynchronous operation.
-// The state of the operation (including any errors encountered)
-// may be queried via the Operation resource.
-//
-// ## Metadata
-//
-// Provides metadata and statistical information about data in Cloud Firestore.
-// The data provided as part of this API may be stale.
-//
-// ## Operation
-//
-// The Operations collection provides a record of actions performed for the
-// specified Project (including any Operations in progress). Operations are not
-// created directly but through calls on other collections or resources.
-//
-// An Operation that is not yet done may be cancelled. The request to cancel is
-// asynchronous and the Operation may continue to run for some time after the
-// request to cancel is made.
-//
-// An Operation that is done may be deleted so that it is no longer listed as
-// part of the Operation collection.
-//
-// Operations are created by service `FirestoreAdmin`, but are accessed via
-// service `google.longrunning.Operations`.
-service FirestoreAdmin {
-  // Creates the specified index.
-  // A newly created index's initial state is `CREATING`. On completion of the
-  // returned [google.longrunning.Operation][google.longrunning.Operation], the state will be `READY`.
-  // If the index already exists, the call will return an `ALREADY_EXISTS`
-  // status.
-  //
-  // During creation, the process could result in an error, in which case the
-  // index will move to the `ERROR` state. The process can be recovered by
-  // fixing the data that caused the error, removing the index with
-  // [delete][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex], then re-creating the index with
-  // [create][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
-  //
-  // Indexes with a single field cannot be created.
-  rpc CreateIndex(CreateIndexRequest) returns (google.longrunning.Operation) {
-    option (google.api.http) = { post: "/v1beta1/{parent=projects/*/databases/*}/indexes" body: "index" };
-  }
-
-  // Lists the indexes that match the specified filters.
-  rpc ListIndexes(ListIndexesRequest) returns (ListIndexesResponse) {
-    option (google.api.http) = { get: "/v1beta1/{parent=projects/*/databases/*}/indexes" };
-  }
-
-  // Gets an index.
-  rpc GetIndex(GetIndexRequest) returns (Index) {
-    option (google.api.http) = { get: "/v1beta1/{name=projects/*/databases/*/indexes/*}" };
-  }
-
-  // Deletes an index.
-  rpc DeleteIndex(DeleteIndexRequest) returns (google.protobuf.Empty) {
-    option (google.api.http) = { delete: "/v1beta1/{name=projects/*/databases/*/indexes/*}" };
-  }
-}
-
-// Metadata for index operations. This metadata populates
-// the metadata field of [google.longrunning.Operation][google.longrunning.Operation].
-message IndexOperationMetadata {
-  // The type of index operation.
-  enum OperationType {
-    // Unspecified. Never set by server.
-    OPERATION_TYPE_UNSPECIFIED = 0;
-
-    // The operation is creating the index. Initiated by a `CreateIndex` call.
-    CREATING_INDEX = 1;
-  }
-
-  // The time that work began on the operation.
-  google.protobuf.Timestamp start_time = 1;
-
-  // The time the operation ended, either successfully or otherwise. Unset if
-  // the operation is still active.
-  google.protobuf.Timestamp end_time = 2;
-
-  // The index resource that this operation is acting on. For example:
-  // `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
-  string index = 3;
-
-  // The type of index operation.
-  OperationType operation_type = 4;
-
-  // True if the [google.longrunning.Operation] was cancelled. If the
-  // cancellation is in progress, cancelled will be true but
-  // [google.longrunning.Operation.done][google.longrunning.Operation.done] will be false.
-  bool cancelled = 5;
-
-  // Progress of the existing operation, measured in number of documents.
-  Progress document_progress = 6;
-}
-
-// Measures the progress of a particular metric.
-message Progress {
-  // An estimate of how much work has been completed. Note that this may be
-  // greater than `work_estimated`.
-  int64 work_completed = 1;
-
-  // An estimate of how much work needs to be performed. Zero if the
-  // work estimate is unavailable. May change as work progresses.
-  int64 work_estimated = 2;
-}
-
-// The request for [FirestoreAdmin.CreateIndex][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
-message CreateIndexRequest {
-  // The name of the database this index will apply to. For example:
-  // `projects/{project_id}/databases/{database_id}`
-  string parent = 1;
-
-  // The index to create. The name and state should not be specified.
-  // Certain single field indexes cannot be created or deleted.
-  Index index = 2;
-}
-
-// The request for [FirestoreAdmin.GetIndex][google.firestore.admin.v1beta1.FirestoreAdmin.GetIndex].
-message GetIndexRequest {
-  // The name of the index. For example:
-  // `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
-  string name = 1;
-}
-
-// The request for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes].
-message ListIndexesRequest {
-  // The database name. For example:
-  // `projects/{project_id}/databases/{database_id}`
-  string parent = 1;
-
-  string filter = 2;
-
-  // The standard List page size.
-  int32 page_size = 3;
-
-  // The standard List page token.
-  string page_token = 4;
-}
-
-// The request for [FirestoreAdmin.DeleteIndex][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex].
-message DeleteIndexRequest {
-  // The index name. For example:
-  // `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
-  string name = 1;
-}
-
-// The response for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes].
-message ListIndexesResponse {
-  // The indexes.
-  repeated Index indexes = 1;
-
-  // The standard List next-page token.
-  string next_page_token = 2;
-}
diff --git a/firebase-firestore/src/proto/google/firestore/admin/v1beta1/index.proto b/firebase-firestore/src/proto/google/firestore/admin/v1beta1/index.proto
deleted file mode 100644
index 16ac1dc50..000000000
--- a/firebase-firestore/src/proto/google/firestore/admin/v1beta1/index.proto
+++ /dev/null
@@ -1,111 +0,0 @@
-// Copyright 2018 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Copyright 2017 Google Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-syntax = "proto3";
-
-package google.firestore.admin.v1beta1;
-
-import "google/api/annotations.proto";
-
-option csharp_namespace = "Google.Cloud.Firestore.Admin.V1Beta1";
-option go_package = "google.golang.org/genproto/googleapis/firestore/admin/v1beta1;admin";
-option java_multiple_files = true;
-option java_outer_classname = "IndexProto";
-option java_package = "com.google.firestore.admin.v1beta1";
-option objc_class_prefix = "GCFS";
-
-
-// A field of an index.
-message IndexField {
-  // The mode determines how a field is indexed.
-  enum Mode {
-    // The mode is unspecified.
-    MODE_UNSPECIFIED = 0;
-
-    // The field's values are indexed so as to support sequencing in
-    // ascending order and also query by <, >, <=, >=, and =.
-    ASCENDING = 2;
-
-    // The field's values are indexed so as to support sequencing in
-    // descending order and also query by <, >, <=, >=, and =.
-    DESCENDING = 3;
-  }
-
-  // The path of the field. Must match the field path specification described
-  // by [google.firestore.v1beta1.Document.fields][fields].
-  // Special field path `__name__` may be used by itself or at the end of a
-  // path. `__type__` may be used only at the end of path.
-  string field_path = 1;
-
-  // The field's mode.
-  Mode mode = 2;
-}
-
-// An index definition.
-message Index {
-  // The state of an index. During index creation, an index will be in the
-  // `CREATING` state. If the index is created successfully, it will transition
-  // to the `READY` state. If the index is not able to be created, it will
-  // transition to the `ERROR` state.
-  enum State {
-    // The state is unspecified.
-    STATE_UNSPECIFIED = 0;
-
-    // The index is being created.
-    // There is an active long-running operation for the index.
-    // The index is updated when writing a document.
-    // Some index data may exist.
-    CREATING = 3;
-
-    // The index is ready to be used.
-    // The index is updated when writing a document.
-    // The index is fully populated from all stored documents it applies to.
-    READY = 2;
-
-    // The index was being created, but something went wrong.
-    // There is no active long-running operation for the index,
-    // and the most recently finished long-running operation failed.
-    // The index is not updated when writing a document.
-    // Some index data may exist.
-    ERROR = 5;
-  }
-
-  // The resource name of the index.
-  string name = 1;
-
-  // The collection ID to which this index applies. Required.
-  string collection_id = 2;
-
-  // The fields to index.
-  repeated IndexField fields = 3;
-
-  // The state of the index.
-  // The state is read-only.
-  // @OutputOnly
-  State state = 6;
-}
diff --git a/firebase-firestore/src/proto/google/firestore/v1beta1/common.proto b/firebase-firestore/src/proto/google/firestore/v1/common.proto
similarity index 70%
rename from firebase-firestore/src/proto/google/firestore/v1beta1/common.proto
rename to firebase-firestore/src/proto/google/firestore/v1/common.proto
index 777c51c04..670cb4173 100644
--- a/firebase-firestore/src/proto/google/firestore/v1beta1/common.proto
+++ b/firebase-firestore/src/proto/google/firestore/v1/common.proto
@@ -1,18 +1,4 @@
-// Copyright 2018 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Copyright 2018 Google Inc.
+// Copyright 2018 Google LLC.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -25,30 +11,31 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
+//
 
 syntax = "proto3";
 
-package google.firestore.v1beta1;
+package google.firestore.v1;
 
 import "google/api/annotations.proto";
 import "google/protobuf/timestamp.proto";
 
-option csharp_namespace = "Google.Cloud.Firestore.V1Beta1";
-option go_package = "google.golang.org/genproto/googleapis/firestore/v1beta1;firestore";
+option csharp_namespace = "Google.Cloud.Firestore.V1";
+option go_package = "google.golang.org/genproto/googleapis/firestore/v1;firestore";
 option java_multiple_files = true;
 option java_outer_classname = "CommonProto";
-option java_package = "com.google.firestore.v1beta1";
+option java_package = "com.google.firestore.v1";
 option objc_class_prefix = "GCFS";
-option php_namespace = "Google\\Cloud\\Firestore\\V1beta1";
+option php_namespace = "Google\\Cloud\\Firestore\\V1";
 
 
 // A set of field paths on a document.
 // Used to restrict a get or update operation on a document to a subset of its
 // fields.
 // This is different from standard field masks, as this is always scoped to a
-// [Document][google.firestore.v1beta1.Document], and takes in account the dynamic nature of [Value][google.firestore.v1beta1.Value].
+// [Document][google.firestore.v1.Document], and takes in account the dynamic nature of [Value][google.firestore.v1.Value].
 message DocumentMask {
-  // The list of field paths in the mask. See [Document.fields][google.firestore.v1beta1.Document.fields] for a field
+  // The list of field paths in the mask. See [Document.fields][google.firestore.v1.Document.fields] for a field
   // path syntax reference.
   repeated string field_paths = 1;
 }
diff --git a/firebase-firestore/src/proto/google/firestore/v1beta1/document.proto b/firebase-firestore/src/proto/google/firestore/v1/document.proto
similarity index 84%
rename from firebase-firestore/src/proto/google/firestore/v1beta1/document.proto
rename to firebase-firestore/src/proto/google/firestore/v1/document.proto
index 77a4bbb3b..268947856 100644
--- a/firebase-firestore/src/proto/google/firestore/v1beta1/document.proto
+++ b/firebase-firestore/src/proto/google/firestore/v1/document.proto
@@ -1,18 +1,4 @@
-// Copyright 2018 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Copyright 2018 Google Inc.
+// Copyright 2018 Google LLC.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -25,23 +11,24 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
+//
 
 syntax = "proto3";
 
-package google.firestore.v1beta1;
+package google.firestore.v1;
 
 import "google/api/annotations.proto";
 import "google/protobuf/struct.proto";
 import "google/protobuf/timestamp.proto";
 import "google/type/latlng.proto";
 
-option csharp_namespace = "Google.Cloud.Firestore.V1Beta1";
-option go_package = "google.golang.org/genproto/googleapis/firestore/v1beta1;firestore";
+option csharp_namespace = "Google.Cloud.Firestore.V1";
+option go_package = "google.golang.org/genproto/googleapis/firestore/v1;firestore";
 option java_multiple_files = true;
 option java_outer_classname = "DocumentProto";
-option java_package = "com.google.firestore.v1beta1";
+option java_package = "com.google.firestore.v1";
 option objc_class_prefix = "GCFS";
-option php_namespace = "Google\\Cloud\\Firestore\\V1beta1";
+option php_namespace = "Google\\Cloud\\Firestore\\V1";
 
 
 // A Firestore document.
@@ -137,7 +124,8 @@ message Value {
 
     // An array value.
     //
-    // Cannot contain another array value.
+    // Cannot directly contain another array value, though can contain an
+    // map which contains another array.
     ArrayValue array_value = 9;
 
     // A map value.
diff --git a/firebase-firestore/src/proto/google/firestore/v1beta1/firestore.proto b/firebase-firestore/src/proto/google/firestore/v1/firestore.proto
similarity index 84%
rename from firebase-firestore/src/proto/google/firestore/v1beta1/firestore.proto
rename to firebase-firestore/src/proto/google/firestore/v1/firestore.proto
index 3514f0caf..d425edf9e 100644
--- a/firebase-firestore/src/proto/google/firestore/v1beta1/firestore.proto
+++ b/firebase-firestore/src/proto/google/firestore/v1/firestore.proto
@@ -1,18 +1,4 @@
-// Copyright 2018 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Copyright 2018 Google Inc.
+// Copyright 2018 Google LLC.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -25,32 +11,30 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
+//
 
 syntax = "proto3";
 
-package google.firestore.v1beta1;
+package google.firestore.v1;
 
 import "google/api/annotations.proto";
-import "google/firestore/v1beta1/common.proto";
-import "google/firestore/v1beta1/document.proto";
-import "google/firestore/v1beta1/query.proto";
-import "google/firestore/v1beta1/write.proto";
+import "google/firestore/v1/common.proto";
+import "google/firestore/v1/document.proto";
+import "google/firestore/v1/query.proto";
+import "google/firestore/v1/write.proto";
 import "google/protobuf/empty.proto";
 import "google/protobuf/timestamp.proto";
 import "google/rpc/status.proto";
 
-option csharp_namespace = "Google.Cloud.Firestore.V1Beta1";
-option go_package = "google.golang.org/genproto/googleapis/firestore/v1beta1;firestore";
+option csharp_namespace = "Google.Cloud.Firestore.V1";
+option go_package = "google.golang.org/genproto/googleapis/firestore/v1;firestore";
 option java_multiple_files = true;
 option java_outer_classname = "FirestoreProto";
-option java_package = "com.google.firestore.v1beta1";
+option java_package = "com.google.firestore.v1";
 option objc_class_prefix = "GCFS";
-option php_namespace = "Google\\Cloud\\Firestore\\V1beta1";
-
+option php_namespace = "Google\\Cloud\\Firestore\\V1";
 // Specification of the Firestore API.
 
-
-
 // The Cloud Firestore service.
 //
 // This service exposes several types of comparable timestamps:
@@ -71,21 +55,21 @@ service Firestore {
   // Gets a single document.
   rpc GetDocument(GetDocumentRequest) returns (Document) {
     option (google.api.http) = {
-      get: "/v1beta1/{name=projects/*/databases/*/documents/*/**}"
+      get: "/v1/{name=projects/*/databases/*/documents/*/**}"
     };
   }
 
   // Lists documents.
   rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse) {
     option (google.api.http) = {
-      get: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}"
+      get: "/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}"
     };
   }
 
   // Creates a new document.
   rpc CreateDocument(CreateDocumentRequest) returns (Document) {
     option (google.api.http) = {
-      post: "/v1beta1/{parent=projects/*/databases/*/documents/**}/{collection_id}"
+      post: "/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}"
       body: "document"
     };
   }
@@ -93,7 +77,7 @@ service Firestore {
   // Updates or inserts a document.
   rpc UpdateDocument(UpdateDocumentRequest) returns (Document) {
     option (google.api.http) = {
-      patch: "/v1beta1/{document.name=projects/*/databases/*/documents/*/**}"
+      patch: "/v1/{document.name=projects/*/databases/*/documents/*/**}"
       body: "document"
     };
   }
@@ -101,7 +85,7 @@ service Firestore {
   // Deletes a document.
   rpc DeleteDocument(DeleteDocumentRequest) returns (google.protobuf.Empty) {
     option (google.api.http) = {
-      delete: "/v1beta1/{name=projects/*/databases/*/documents/*/**}"
+      delete: "/v1/{name=projects/*/databases/*/documents/*/**}"
     };
   }
 
@@ -111,7 +95,7 @@ service Firestore {
   // same order that they were requested.
   rpc BatchGetDocuments(BatchGetDocumentsRequest) returns (stream BatchGetDocumentsResponse) {
     option (google.api.http) = {
-      post: "/v1beta1/{database=projects/*/databases/*}/documents:batchGet"
+      post: "/v1/{database=projects/*/databases/*}/documents:batchGet"
       body: "*"
     };
   }
@@ -119,7 +103,7 @@ service Firestore {
   // Starts a new transaction.
   rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse) {
     option (google.api.http) = {
-      post: "/v1beta1/{database=projects/*/databases/*}/documents:beginTransaction"
+      post: "/v1/{database=projects/*/databases/*}/documents:beginTransaction"
       body: "*"
     };
   }
@@ -127,7 +111,7 @@ service Firestore {
   // Commits a transaction, while optionally updating documents.
   rpc Commit(CommitRequest) returns (CommitResponse) {
     option (google.api.http) = {
-      post: "/v1beta1/{database=projects/*/databases/*}/documents:commit"
+      post: "/v1/{database=projects/*/databases/*}/documents:commit"
       body: "*"
     };
   }
@@ -135,7 +119,7 @@ service Firestore {
   // Rolls back a transaction.
   rpc Rollback(RollbackRequest) returns (google.protobuf.Empty) {
     option (google.api.http) = {
-      post: "/v1beta1/{database=projects/*/databases/*}/documents:rollback"
+      post: "/v1/{database=projects/*/databases/*}/documents:rollback"
       body: "*"
     };
   }
@@ -143,10 +127,10 @@ service Firestore {
   // Runs a query.
   rpc RunQuery(RunQueryRequest) returns (stream RunQueryResponse) {
     option (google.api.http) = {
-      post: "/v1beta1/{parent=projects/*/databases/*/documents}:runQuery"
+      post: "/v1/{parent=projects/*/databases/*/documents}:runQuery"
       body: "*"
       additional_bindings {
-        post: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:runQuery"
+        post: "/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery"
         body: "*"
       }
     };
@@ -155,7 +139,7 @@ service Firestore {
   // Streams batches of document updates and deletes, in order.
   rpc Write(stream WriteRequest) returns (stream WriteResponse) {
     option (google.api.http) = {
-      post: "/v1beta1/{database=projects/*/databases/*}/documents:write"
+      post: "/v1/{database=projects/*/databases/*}/documents:write"
       body: "*"
     };
   }
@@ -163,7 +147,7 @@ service Firestore {
   // Listens to changes.
   rpc Listen(stream ListenRequest) returns (stream ListenResponse) {
     option (google.api.http) = {
-      post: "/v1beta1/{database=projects/*/databases/*}/documents:listen"
+      post: "/v1/{database=projects/*/databases/*}/documents:listen"
       body: "*"
     };
   }
@@ -171,17 +155,17 @@ service Firestore {
   // Lists all the collection IDs underneath a document.
   rpc ListCollectionIds(ListCollectionIdsRequest) returns (ListCollectionIdsResponse) {
     option (google.api.http) = {
-      post: "/v1beta1/{parent=projects/*/databases/*/documents}:listCollectionIds"
+      post: "/v1/{parent=projects/*/databases/*/documents}:listCollectionIds"
       body: "*"
       additional_bindings {
-        post: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds"
+        post: "/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds"
         body: "*"
       }
     };
   }
 }
 
-// The request for [Firestore.GetDocument][google.firestore.v1beta1.Firestore.GetDocument].
+// The request for [Firestore.GetDocument][google.firestore.v1.Firestore.GetDocument].
 message GetDocumentRequest {
   // The resource name of the Document to get. In the format:
   // `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
@@ -205,7 +189,7 @@ message GetDocumentRequest {
   }
 }
 
-// The request for [Firestore.ListDocuments][google.firestore.v1beta1.Firestore.ListDocuments].
+// The request for [Firestore.ListDocuments][google.firestore.v1.Firestore.ListDocuments].
 message ListDocumentsRequest {
   // The parent resource name. In the format:
   // `projects/{project_id}/databases/{database_id}/documents` or
@@ -247,15 +231,15 @@ message ListDocumentsRequest {
 
   // If the list should show missing documents. A missing document is a
   // document that does not exist but has sub-documents. These documents will
-  // be returned with a key but will not have fields, [Document.create_time][google.firestore.v1beta1.Document.create_time],
-  // or [Document.update_time][google.firestore.v1beta1.Document.update_time] set.
+  // be returned with a key but will not have fields, [Document.create_time][google.firestore.v1.Document.create_time],
+  // or [Document.update_time][google.firestore.v1.Document.update_time] set.
   //
   // Requests with `show_missing` may not specify `where` or
   // `order_by`.
   bool show_missing = 12;
 }
 
-// The response for [Firestore.ListDocuments][google.firestore.v1beta1.Firestore.ListDocuments].
+// The response for [Firestore.ListDocuments][google.firestore.v1.Firestore.ListDocuments].
 message ListDocumentsResponse {
   // The Documents found.
   repeated Document documents = 1;
@@ -264,7 +248,7 @@ message ListDocumentsResponse {
   string next_page_token = 2;
 }
 
-// The request for [Firestore.CreateDocument][google.firestore.v1beta1.Firestore.CreateDocument].
+// The request for [Firestore.CreateDocument][google.firestore.v1.Firestore.CreateDocument].
 message CreateDocumentRequest {
   // The parent resource. For example:
   // `projects/{project_id}/databases/{database_id}/documents` or
@@ -289,7 +273,7 @@ message CreateDocumentRequest {
   DocumentMask mask = 5;
 }
 
-// The request for [Firestore.UpdateDocument][google.firestore.v1beta1.Firestore.UpdateDocument].
+// The request for [Firestore.UpdateDocument][google.firestore.v1.Firestore.UpdateDocument].
 message UpdateDocumentRequest {
   // The updated document.
   // Creates the document if it does not already exist.
@@ -315,7 +299,7 @@ message UpdateDocumentRequest {
   Precondition current_document = 4;
 }
 
-// The request for [Firestore.DeleteDocument][google.firestore.v1beta1.Firestore.DeleteDocument].
+// The request for [Firestore.DeleteDocument][google.firestore.v1.Firestore.DeleteDocument].
 message DeleteDocumentRequest {
   // The resource name of the Document to delete. In the format:
   // `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
@@ -326,7 +310,7 @@ message DeleteDocumentRequest {
   Precondition current_document = 2;
 }
 
-// The request for [Firestore.BatchGetDocuments][google.firestore.v1beta1.Firestore.BatchGetDocuments].
+// The request for [Firestore.BatchGetDocuments][google.firestore.v1.Firestore.BatchGetDocuments].
 message BatchGetDocumentsRequest {
   // The database name. In the format:
   // `projects/{project_id}/databases/{database_id}`.
@@ -362,7 +346,7 @@ message BatchGetDocumentsRequest {
   }
 }
 
-// The streamed response for [Firestore.BatchGetDocuments][google.firestore.v1beta1.Firestore.BatchGetDocuments].
+// The streamed response for [Firestore.BatchGetDocuments][google.firestore.v1.Firestore.BatchGetDocuments].
 message BatchGetDocumentsResponse {
   // A single result.
   // This can be empty if the server is just returning a transaction.
@@ -377,7 +361,7 @@ message BatchGetDocumentsResponse {
 
   // The transaction that was started as part of this request.
   // Will only be set in the first response, and only if
-  // [BatchGetDocumentsRequest.new_transaction][google.firestore.v1beta1.BatchGetDocumentsRequest.new_transaction] was set in the request.
+  // [BatchGetDocumentsRequest.new_transaction][google.firestore.v1.BatchGetDocumentsRequest.new_transaction] was set in the request.
   bytes transaction = 3;
 
   // The time at which the document was read.
@@ -387,7 +371,7 @@ message BatchGetDocumentsResponse {
   google.protobuf.Timestamp read_time = 4;
 }
 
-// The request for [Firestore.BeginTransaction][google.firestore.v1beta1.Firestore.BeginTransaction].
+// The request for [Firestore.BeginTransaction][google.firestore.v1.Firestore.BeginTransaction].
 message BeginTransactionRequest {
   // The database name. In the format:
   // `projects/{project_id}/databases/{database_id}`.
@@ -398,13 +382,13 @@ message BeginTransactionRequest {
   TransactionOptions options = 2;
 }
 
-// The response for [Firestore.BeginTransaction][google.firestore.v1beta1.Firestore.BeginTransaction].
+// The response for [Firestore.BeginTransaction][google.firestore.v1.Firestore.BeginTransaction].
 message BeginTransactionResponse {
   // The transaction that was started.
   bytes transaction = 1;
 }
 
-// The request for [Firestore.Commit][google.firestore.v1beta1.Firestore.Commit].
+// The request for [Firestore.Commit][google.firestore.v1.Firestore.Commit].
 message CommitRequest {
   // The database name. In the format:
   // `projects/{project_id}/databases/{database_id}`.
@@ -419,7 +403,7 @@ message CommitRequest {
   bytes transaction = 3;
 }
 
-// The response for [Firestore.Commit][google.firestore.v1beta1.Firestore.Commit].
+// The response for [Firestore.Commit][google.firestore.v1.Firestore.Commit].
 message CommitResponse {
   // The result of applying the writes.
   //
@@ -431,7 +415,7 @@ message CommitResponse {
   google.protobuf.Timestamp commit_time = 2;
 }
 
-// The request for [Firestore.Rollback][google.firestore.v1beta1.Firestore.Rollback].
+// The request for [Firestore.Rollback][google.firestore.v1.Firestore.Rollback].
 message RollbackRequest {
   // The database name. In the format:
   // `projects/{project_id}/databases/{database_id}`.
@@ -441,7 +425,7 @@ message RollbackRequest {
   bytes transaction = 2;
 }
 
-// The request for [Firestore.RunQuery][google.firestore.v1beta1.Firestore.RunQuery].
+// The request for [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery].
 message RunQueryRequest {
   // The parent resource name. In the format:
   // `projects/{project_id}/databases/{database_id}/documents` or
@@ -475,11 +459,11 @@ message RunQueryRequest {
   }
 }
 
-// The response for [Firestore.RunQuery][google.firestore.v1beta1.Firestore.RunQuery].
+// The response for [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery].
 message RunQueryResponse {
   // The transaction that was started as part of this request.
   // Can only be set in the first response, and only if
-  // [RunQueryRequest.new_transaction][google.firestore.v1beta1.RunQueryRequest.new_transaction] was set in the request.
+  // [RunQueryRequest.new_transaction][google.firestore.v1.RunQueryRequest.new_transaction] was set in the request.
   // If set, no other fields will be set in this response.
   bytes transaction = 2;
 
@@ -501,7 +485,7 @@ message RunQueryResponse {
   int32 skipped_results = 4;
 }
 
-// The request for [Firestore.Write][google.firestore.v1beta1.Firestore.Write].
+// The request for [Firestore.Write][google.firestore.v1.Firestore.Write].
 //
 // The first request creates a stream, or resumes an existing one from a token.
 //
@@ -533,7 +517,7 @@ message WriteRequest {
   // A stream token that was previously sent by the server.
   //
   // The client should set this field to the token from the most recent
-  // [WriteResponse][google.firestore.v1beta1.WriteResponse] it has received. This acknowledges that the client has
+  // [WriteResponse][google.firestore.v1.WriteResponse] it has received. This acknowledges that the client has
   // received responses up to this token. After sending this token, earlier
   // tokens may not be used anymore.
   //
@@ -550,7 +534,7 @@ message WriteRequest {
   map<string, string> labels = 5;
 }
 
-// The response for [Firestore.Write][google.firestore.v1beta1.Firestore.Write].
+// The response for [Firestore.Write][google.firestore.v1.Firestore.Write].
 message WriteResponse {
   // The ID of the stream.
   // Only set on the first message, when a new stream was created.
@@ -572,7 +556,7 @@ message WriteResponse {
   google.protobuf.Timestamp commit_time = 4;
 }
 
-// A request for [Firestore.Listen][google.firestore.v1beta1.Firestore.Listen]
+// A request for [Firestore.Listen][google.firestore.v1.Firestore.Listen]
 message ListenRequest {
   // The database name. In the format:
   // `projects/{project_id}/databases/{database_id}`.
@@ -591,20 +575,20 @@ message ListenRequest {
   map<string, string> labels = 4;
 }
 
-// The response for [Firestore.Listen][google.firestore.v1beta1.Firestore.Listen].
+// The response for [Firestore.Listen][google.firestore.v1.Firestore.Listen].
 message ListenResponse {
   // The supported responses.
   oneof response_type {
     // Targets have changed.
     TargetChange target_change = 2;
 
-    // A [Document][google.firestore.v1beta1.Document] has changed.
+    // A [Document][google.firestore.v1.Document] has changed.
     DocumentChange document_change = 3;
 
-    // A [Document][google.firestore.v1beta1.Document] has been deleted.
+    // A [Document][google.firestore.v1.Document] has been deleted.
     DocumentDelete document_delete = 4;
 
-    // A [Document][google.firestore.v1beta1.Document] has been removed from a target (because it is no longer
+    // A [Document][google.firestore.v1.Document] has been removed from a target (because it is no longer
     // relevant to that target).
     DocumentRemove document_remove = 6;
 
@@ -659,7 +643,7 @@ message Target {
   // If not specified, all matching Documents are returned before any
   // subsequent changes.
   oneof resume_type {
-    // A resume token from a prior [TargetChange][google.firestore.v1beta1.TargetChange] for an identical target.
+    // A resume token from a prior [TargetChange][google.firestore.v1.TargetChange] for an identical target.
     //
     // Using a resume token with a different target is unsupported and may fail.
     bytes resume_token = 4;
@@ -751,7 +735,7 @@ message TargetChange {
   google.protobuf.Timestamp read_time = 6;
 }
 
-// The request for [Firestore.ListCollectionIds][google.firestore.v1beta1.Firestore.ListCollectionIds].
+// The request for [Firestore.ListCollectionIds][google.firestore.v1.Firestore.ListCollectionIds].
 message ListCollectionIdsRequest {
   // The parent document. In the format:
   // `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
@@ -763,11 +747,11 @@ message ListCollectionIdsRequest {
   int32 page_size = 2;
 
   // A page token. Must be a value from
-  // [ListCollectionIdsResponse][google.firestore.v1beta1.ListCollectionIdsResponse].
+  // [ListCollectionIdsResponse][google.firestore.v1.ListCollectionIdsResponse].
   string page_token = 3;
 }
 
-// The response from [Firestore.ListCollectionIds][google.firestore.v1beta1.Firestore.ListCollectionIds].
+// The response from [Firestore.ListCollectionIds][google.firestore.v1.Firestore.ListCollectionIds].
 message ListCollectionIdsResponse {
   // The collection ids.
   repeated string collection_ids = 1;
diff --git a/firebase-firestore/src/proto/google/firestore/v1beta1/query.proto b/firebase-firestore/src/proto/google/firestore/v1/query.proto
similarity index 87%
rename from firebase-firestore/src/proto/google/firestore/v1beta1/query.proto
rename to firebase-firestore/src/proto/google/firestore/v1/query.proto
index 925154337..dd89ef513 100644
--- a/firebase-firestore/src/proto/google/firestore/v1beta1/query.proto
+++ b/firebase-firestore/src/proto/google/firestore/v1/query.proto
@@ -1,18 +1,4 @@
-// Copyright 2018 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Copyright 2018 Google Inc.
+// Copyright 2018 Google LLC.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -25,22 +11,23 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
+//
 
 syntax = "proto3";
 
-package google.firestore.v1beta1;
+package google.firestore.v1;
 
 import "google/api/annotations.proto";
-import "google/firestore/v1beta1/document.proto";
+import "google/firestore/v1/document.proto";
 import "google/protobuf/wrappers.proto";
 
-option csharp_namespace = "Google.Cloud.Firestore.V1Beta1";
-option go_package = "google.golang.org/genproto/googleapis/firestore/v1beta1;firestore";
+option csharp_namespace = "Google.Cloud.Firestore.V1";
+option go_package = "google.golang.org/genproto/googleapis/firestore/v1;firestore";
 option java_multiple_files = true;
 option java_outer_classname = "QueryProto";
-option java_package = "com.google.firestore.v1beta1";
+option java_package = "com.google.firestore.v1";
 option objc_class_prefix = "GCFS";
-option php_namespace = "Google\\Cloud\\Firestore\\V1beta1";
+option php_namespace = "Google\\Cloud\\Firestore\\V1";
 
 
 // A Firestore query.
diff --git a/firebase-firestore/src/proto/google/firestore/v1beta1/write.proto b/firebase-firestore/src/proto/google/firestore/v1/write.proto
similarity index 63%
rename from firebase-firestore/src/proto/google/firestore/v1beta1/write.proto
rename to firebase-firestore/src/proto/google/firestore/v1/write.proto
index 4f86df37e..bffd07909 100644
--- a/firebase-firestore/src/proto/google/firestore/v1beta1/write.proto
+++ b/firebase-firestore/src/proto/google/firestore/v1/write.proto
@@ -1,18 +1,4 @@
-// Copyright 2018 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Copyright 2018 Google Inc.
+// Copyright 2018 Google LLC.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -25,23 +11,24 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
+//
 
 syntax = "proto3";
 
-package google.firestore.v1beta1;
+package google.firestore.v1;
 
 import "google/api/annotations.proto";
-import "google/firestore/v1beta1/common.proto";
-import "google/firestore/v1beta1/document.proto";
+import "google/firestore/v1/common.proto";
+import "google/firestore/v1/document.proto";
 import "google/protobuf/timestamp.proto";
 
-option csharp_namespace = "Google.Cloud.Firestore.V1Beta1";
-option go_package = "google.golang.org/genproto/googleapis/firestore/v1beta1;firestore";
+option csharp_namespace = "Google.Cloud.Firestore.V1";
+option go_package = "google.golang.org/genproto/googleapis/firestore/v1;firestore";
 option java_multiple_files = true;
 option java_outer_classname = "WriteProto";
-option java_package = "com.google.firestore.v1beta1";
+option java_package = "com.google.firestore.v1";
 option objc_class_prefix = "GCFS";
-option php_namespace = "Google\\Cloud\\Firestore\\V1beta1";
+option php_namespace = "Google\\Cloud\\Firestore\\V1";
 
 
 // A write on a document.
@@ -94,7 +81,7 @@ message DocumentTransform {
       REQUEST_TIME = 1;
     }
 
-    // The path of the field. See [Document.fields][google.firestore.v1beta1.Document.fields] for the field path syntax
+    // The path of the field. See [Document.fields][google.firestore.v1.Document.fields] for the field path syntax
     // reference.
     string field_path = 1;
 
@@ -103,6 +90,46 @@ message DocumentTransform {
       // Sets the field to the given server value.
       ServerValue set_to_server_value = 2;
 
+      // Adds the given value to the field's current value.
+      //
+      // This must be an integer or a double value.
+      // If the field is not an integer or double, or if the field does not yet
+      // exist, the transformation will set the field to the given value.
+      // If either of the given value or the current field value are doubles,
+      // both values will be interpreted as doubles. Double arithmetic and
+      // representation of double values follow IEEE 754 semantics.
+      // If there is positive/negative integer overflow, the field is resolved
+      // to the largest magnitude positive/negative integer.
+      Value increment = 3;
+
+      // Sets the field to the maximum of its current value and the given value.
+      //
+      // This must be an integer or a double value.
+      // If the field is not an integer or double, or if the field does not yet
+      // exist, the transformation will set the field to the given value.
+      // If a maximum operation is applied where the field and the input value
+      // are of mixed types (that is - one is an integer and one is a double)
+      // the field takes on the type of the larger operand. If the operands are
+      // equivalent (e.g. 3 and 3.0), the field does not change.
+      // 0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and
+      // zero input value is always the stored value.
+      // The maximum of any numeric value x and NaN is NaN.
+      Value maximum = 4;
+
+      // Sets the field to the minimum of its current value and the given value.
+      //
+      // This must be an integer or a double value.
+      // If the field is not an integer or double, or if the field does not yet
+      // exist, the transformation will set the field to the input value.
+      // If a minimum operation is applied where the field and the input value
+      // are of mixed types (that is - one is an integer and one is a double)
+      // the field takes on the type of the smaller operand. If the operands are
+      // equivalent (e.g. 3 and 3.0), the field does not change.
+      // 0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and
+      // zero input value is always the stored value.
+      // The minimum of any numeric value x and NaN is NaN.
+      Value minimum = 5;
+
       // Append the given elements in order if they are not already present in
       // the current field value.
       // If the field is not an array, or if the field does not yet exist, it is
@@ -149,20 +176,20 @@ message WriteResult {
   // previous update_time.
   google.protobuf.Timestamp update_time = 1;
 
-  // The results of applying each [DocumentTransform.FieldTransform][google.firestore.v1beta1.DocumentTransform.FieldTransform], in the
+  // The results of applying each [DocumentTransform.FieldTransform][google.firestore.v1.DocumentTransform.FieldTransform], in the
   // same order.
   repeated Value transform_results = 2;
 }
 
-// A [Document][google.firestore.v1beta1.Document] has changed.
+// A [Document][google.firestore.v1.Document] has changed.
 //
-// May be the result of multiple [writes][google.firestore.v1beta1.Write], including deletes, that
-// ultimately resulted in a new value for the [Document][google.firestore.v1beta1.Document].
+// May be the result of multiple [writes][google.firestore.v1.Write], including deletes, that
+// ultimately resulted in a new value for the [Document][google.firestore.v1.Document].
 //
-// Multiple [DocumentChange][google.firestore.v1beta1.DocumentChange] messages may be returned for the same logical
+// Multiple [DocumentChange][google.firestore.v1.DocumentChange] messages may be returned for the same logical
 // change, if multiple targets are affected.
 message DocumentChange {
-  // The new state of the [Document][google.firestore.v1beta1.Document].
+  // The new state of the [Document][google.firestore.v1.Document].
   //
   // If `mask` is set, contains only fields that were updated or added.
   Document document = 1;
@@ -174,15 +201,15 @@ message DocumentChange {
   repeated int32 removed_target_ids = 6;
 }
 
-// A [Document][google.firestore.v1beta1.Document] has been deleted.
+// A [Document][google.firestore.v1.Document] has been deleted.
 //
-// May be the result of multiple [writes][google.firestore.v1beta1.Write], including updates, the
-// last of which deleted the [Document][google.firestore.v1beta1.Document].
+// May be the result of multiple [writes][google.firestore.v1.Write], including updates, the
+// last of which deleted the [Document][google.firestore.v1.Document].
 //
-// Multiple [DocumentDelete][google.firestore.v1beta1.DocumentDelete] messages may be returned for the same logical
+// Multiple [DocumentDelete][google.firestore.v1.DocumentDelete] messages may be returned for the same logical
 // delete, if multiple targets are affected.
 message DocumentDelete {
-  // The resource name of the [Document][google.firestore.v1beta1.Document] that was deleted.
+  // The resource name of the [Document][google.firestore.v1.Document] that was deleted.
   string document = 1;
 
   // A set of target IDs for targets that previously matched this entity.
@@ -194,16 +221,16 @@ message DocumentDelete {
   google.protobuf.Timestamp read_time = 4;
 }
 
-// A [Document][google.firestore.v1beta1.Document] has been removed from the view of the targets.
+// A [Document][google.firestore.v1.Document] has been removed from the view of the targets.
 //
 // Sent if the document is no longer relevant to a target and is out of view.
 // Can be sent instead of a DocumentDelete or a DocumentChange if the server
 // can not send the new value of the document.
 //
-// Multiple [DocumentRemove][google.firestore.v1beta1.DocumentRemove] messages may be returned for the same logical
+// Multiple [DocumentRemove][google.firestore.v1.DocumentRemove] messages may be returned for the same logical
 // write or delete, if multiple targets are affected.
 message DocumentRemove {
-  // The resource name of the [Document][google.firestore.v1beta1.Document] that has gone out of view.
+  // The resource name of the [Document][google.firestore.v1.Document] that has gone out of view.
   string document = 1;
 
   // A set of target IDs for targets that previously matched this document.
@@ -220,7 +247,7 @@ message ExistenceFilter {
   // The target ID to which this filter applies.
   int32 target_id = 1;
 
-  // The total count of documents that match [target_id][google.firestore.v1beta1.ExistenceFilter.target_id].
+  // The total count of documents that match [target_id][google.firestore.v1.ExistenceFilter.target_id].
   //
   // If different from the count of documents in the client that match, the
   // client must manually determine which documents no longer match the target.
diff --git a/firebase-firestore/src/test/AndroidManifest.xml b/firebase-firestore/src/test/AndroidManifest.xml
index 7bbee804d..4132e11c3 100644
--- a/firebase-firestore/src/test/AndroidManifest.xml
+++ b/firebase-firestore/src/test/AndroidManifest.xml
@@ -2,7 +2,8 @@
 <manifest
     xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.firebase.firestore.model">
-    <uses-sdk android:minSdkVersion="14"/>
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+    <!--<uses-sdk android:minSdkVersion="14"/>-->
     <application
         android:label="FirebaseCommonTests" >
         <uses-library android:name="android.test.runner" />
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/DocumentChangeTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/DocumentChangeTest.java
index 9fc3a315d..56ca369cf 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/DocumentChangeTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/DocumentChangeTest.java
@@ -24,7 +24,7 @@
 import static com.google.firebase.firestore.testutil.TestUtil.path;
 import static com.google.firebase.firestore.testutil.TestUtil.targetChange;
 import static java.util.Arrays.asList;
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
 import com.google.firebase.database.collection.ImmutableSortedMap;
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/FirestoreRegistrarTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/FirestoreRegistrarTest.java
new file mode 100644
index 000000000..5e6764ac0
--- /dev/null
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/FirestoreRegistrarTest.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright 2018 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.firebase.firestore;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.FirebaseOptions;
+import com.google.firebase.platforminfo.UserAgentPublisher;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+@RunWith(RobolectricTestRunner.class)
+public class FirestoreRegistrarTest {
+  // TODO(rgowman:b/123870630): Enable test.
+  @Ignore
+  @Test
+  public void storageRegistrar_getComponents_publishesLibVersionComponent() {
+    FirebaseApp app =
+        FirebaseApp.initializeApp(
+            RuntimeEnvironment.application.getApplicationContext(),
+            new FirebaseOptions.Builder()
+                .setProjectId("projectId")
+                .setApplicationId("1:196403931065:android:60949756fbe381ea")
+                .build());
+    UserAgentPublisher userAgentPublisher = app.get(UserAgentPublisher.class);
+    String actualUserAgent = userAgentPublisher.getUserAgent();
+
+    assertThat(actualUserAgent).contains("fire-fst");
+  }
+}
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/TestUtil.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/TestUtil.java
index 930906414..58d78838e 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/TestUtil.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/TestUtil.java
@@ -36,7 +36,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.robolectric.Robolectric;
 
 public class TestUtil {
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/EventManagerTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/EventManagerTest.java
index 2cf65c590..02644d365 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/EventManagerTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/EventManagerTest.java
@@ -15,8 +15,8 @@
 package com.google.firebase.firestore.core;
 
 import static com.google.firebase.firestore.testutil.TestUtil.path;
-import static junit.framework.Assert.assertEquals;
-import static org.mockito.Matchers.any;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java
index db743396b..41d5f745e 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java
@@ -17,7 +17,7 @@
 import static com.google.firebase.firestore.testutil.TestUtil.deleteMutation;
 import static com.google.firebase.firestore.testutil.TestUtil.deletedDoc;
 import static com.google.firebase.firestore.testutil.TestUtil.doc;
-import static com.google.firebase.firestore.testutil.TestUtil.field;
+import static com.google.firebase.firestore.testutil.TestUtil.fieldMask;
 import static com.google.firebase.firestore.testutil.TestUtil.key;
 import static com.google.firebase.firestore.testutil.TestUtil.map;
 import static com.google.firebase.firestore.testutil.TestUtil.setMutation;
@@ -33,16 +33,15 @@
 import com.google.firebase.firestore.model.NoDocument;
 import com.google.firebase.firestore.model.SnapshotVersion;
 import com.google.firebase.firestore.model.UnknownDocument;
-import com.google.firebase.firestore.model.mutation.FieldMask;
 import com.google.firebase.firestore.model.mutation.Mutation;
 import com.google.firebase.firestore.model.mutation.MutationBatch;
 import com.google.firebase.firestore.model.mutation.PatchMutation;
 import com.google.firebase.firestore.remote.RemoteSerializer;
 import com.google.firebase.firestore.testutil.TestUtil;
-import com.google.firestore.v1beta1.DocumentMask;
-import com.google.firestore.v1beta1.Precondition;
-import com.google.firestore.v1beta1.Value;
-import com.google.firestore.v1beta1.Write;
+import com.google.firestore.v1.DocumentMask;
+import com.google.firestore.v1.Precondition;
+import com.google.firestore.v1.Value;
+import com.google.firestore.v1.Write;
 import com.google.protobuf.ByteString;
 import org.junit.Before;
 import org.junit.Test;
@@ -71,7 +70,7 @@ public void testEncodesMutationBatch() {
         new PatchMutation(
             key("bar/baz"),
             TestUtil.wrapObject(map("a", "b", "num", 1)),
-            FieldMask.fromCollection(asList(field("a"))),
+            fieldMask("a"),
             com.google.firebase.firestore.model.mutation.Precondition.exists(true));
     Mutation del = deleteMutation("baz/quux");
     Timestamp writeTime = Timestamp.now();
@@ -80,7 +79,7 @@ public void testEncodesMutationBatch() {
     Write setProto =
         Write.newBuilder()
             .setUpdate(
-                com.google.firestore.v1beta1.Document.newBuilder()
+                com.google.firestore.v1.Document.newBuilder()
                     .setName("projects/p/databases/d/documents/foo/bar")
                     .putFields("a", Value.newBuilder().setStringValue("b").build())
                     .putFields("num", Value.newBuilder().setIntegerValue(1).build()))
@@ -89,7 +88,7 @@ public void testEncodesMutationBatch() {
     Write patchProto =
         Write.newBuilder()
             .setUpdate(
-                com.google.firestore.v1beta1.Document.newBuilder()
+                com.google.firestore.v1.Document.newBuilder()
                     .setName("projects/p/databases/d/documents/bar/baz")
                     .putFields("a", Value.newBuilder().setStringValue("b").build())
                     .putFields("num", Value.newBuilder().setIntegerValue(1).build()))
@@ -128,7 +127,7 @@ public void testEncodesDocumentAsMaybeDocument() {
     com.google.firebase.firestore.proto.MaybeDocument maybeDocProto =
         com.google.firebase.firestore.proto.MaybeDocument.newBuilder()
             .setDocument(
-                com.google.firestore.v1beta1.Document.newBuilder()
+                com.google.firestore.v1.Document.newBuilder()
                     .setName("projects/p/databases/d/documents/some/path")
                     .putFields("foo", Value.newBuilder().setStringValue("bar").build())
                     .setUpdateTime(
@@ -189,7 +188,7 @@ public void testEncodesQueryData() {
         new QueryData(query, targetId, sequenceNumber, QueryPurpose.LISTEN, version, resumeToken);
 
     // Let the RPC serializer test various permutations of query serialization.
-    com.google.firestore.v1beta1.Target.QueryTarget queryTarget =
+    com.google.firestore.v1.Target.QueryTarget queryTarget =
         remoteSerializer.encodeQueryTarget(query);
 
     com.google.firebase.firestore.proto.Target expected =
@@ -199,7 +198,7 @@ public void testEncodesQueryData() {
             .setSnapshotVersion(com.google.protobuf.Timestamp.newBuilder().setNanos(1039000))
             .setResumeToken(ByteString.copyFrom(resumeToken.toByteArray()))
             .setQuery(
-                com.google.firestore.v1beta1.Target.QueryTarget.newBuilder()
+                com.google.firestore.v1.Target.QueryTarget.newBuilder()
                     .setParent(queryTarget.getParent())
                     .setStructuredQuery(queryTarget.getStructuredQuery()))
             .build();
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java
index 11cbc6a34..e53a1389f 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java
@@ -55,12 +55,13 @@
   private MutationQueue mutationQueue;
   private RemoteDocumentCache documentCache;
   private LruGarbageCollector garbageCollector;
+  private LruGarbageCollector.Params lruParams;
   private int previousTargetId;
   private int previousDocNum;
   private long initialSequenceNumber;
   private ObjectValue testValue;
 
-  abstract Persistence createPersistence();
+  abstract Persistence createPersistence(LruGarbageCollector.Params params);
 
   @Before
   public void setUp() {
@@ -81,7 +82,11 @@ public void tearDown() {
   }
 
   private void newTestResources() {
-    persistence = createPersistence();
+    newTestResources(LruGarbageCollector.Params.Default());
+  }
+
+  private void newTestResources(LruGarbageCollector.Params params) {
+    persistence = createPersistence(params);
     persistence.getReferenceDelegate().setInMemoryPins(new ReferenceSet());
     queryCache = persistence.getQueryCache();
     documentCache = persistence.getRemoteDocumentCache();
@@ -89,6 +94,7 @@ private void newTestResources() {
     mutationQueue = persistence.getMutationQueue(user);
     initialSequenceNumber = queryCache.getHighestListenSequenceNumber();
     garbageCollector = ((LruDelegate) persistence.getReferenceDelegate()).getGarbageCollector();
+    lruParams = params;
   }
 
   private QueryData nextQueryData() {
@@ -118,7 +124,7 @@ private QueryData addNextQuery() {
   }
 
   private DocumentKey nextTestDocumentKey() {
-    return DocumentKey.fromPathString("docs/doc_" + (++previousDocNum));
+    return DocumentKey.fromPathString("docs/doc_" + ++previousDocNum);
   }
 
   private Document nextTestDocument() {
@@ -193,7 +199,7 @@ public void testPickSequenceNumberPercentile() {
 
   @Test
   public void testSequenceNumberNoQueries() {
-    assertEquals(ListenSequence.INVALID, garbageCollector.nthSequenceNumber(0));
+    assertEquals(ListenSequence.INVALID, garbageCollector.getNthSequenceNumber(0));
   }
 
   @Test
@@ -203,7 +209,7 @@ public void testSequenceNumberForFiftyQueries() {
     for (int i = 0; i < 50; i++) {
       addNextQuery();
     }
-    assertEquals(initialSequenceNumber + 10, garbageCollector.nthSequenceNumber(10));
+    assertEquals(initialSequenceNumber + 10, garbageCollector.getNthSequenceNumber(10));
   }
 
   @Test
@@ -220,7 +226,7 @@ public void testSequenceNumberForMultipleQueriesInATransaction() {
     for (int i = 9; i < 50; i++) {
       addNextQuery();
     }
-    assertEquals(2 + initialSequenceNumber, garbageCollector.nthSequenceNumber(10));
+    assertEquals(2 + initialSequenceNumber, garbageCollector.getNthSequenceNumber(10));
   }
 
   @Test
@@ -240,7 +246,7 @@ public void testAllCollectedQueriesInSingleTransaction() {
     for (int i = 11; i < 50; i++) {
       addNextQuery();
     }
-    assertEquals(1 + initialSequenceNumber, garbageCollector.nthSequenceNumber(10));
+    assertEquals(1 + initialSequenceNumber, garbageCollector.getNthSequenceNumber(10));
   }
 
   @Test
@@ -251,7 +257,7 @@ public void testSequenceNumbersWithMutationAndSequentialQueries() {
     for (int i = 0; i < 50; i++) {
       addNextQuery();
     }
-    assertEquals(10 + initialSequenceNumber, garbageCollector.nthSequenceNumber(10));
+    assertEquals(10 + initialSequenceNumber, garbageCollector.getNthSequenceNumber(10));
   }
 
   @Test
@@ -279,7 +285,7 @@ public void testSequenceNumbersWithMutationsInQueries() {
           addDocumentToTarget(docInQuery, queryData.getTargetId());
         });
     // This should catch the remaining 8 documents, plus the first two queries we added.
-    assertEquals(3 + initialSequenceNumber, garbageCollector.nthSequenceNumber(10));
+    assertEquals(3 + initialSequenceNumber, garbageCollector.getNthSequenceNumber(10));
   }
 
   @Test
@@ -587,4 +593,105 @@ public void testRemoveTargetsThenGC() {
           }
         });
   }
+
+  @Test
+  public void testGetsSize() {
+    long initialSize = garbageCollector.getByteSize();
+
+    persistence.runTransaction(
+        "fill cache",
+        () -> {
+          // Simulate a bunch of ack'd mutations
+          for (int i = 0; i < 50; i++) {
+            Document doc = cacheADocumentInTransaction();
+            markDocumentEligibleForGcInTransaction(doc.getKey());
+          }
+        });
+
+    long finalSize = garbageCollector.getByteSize();
+    assertTrue(finalSize > initialSize);
+  }
+
+  @Test
+  public void testDisabled() {
+    LruGarbageCollector.Params params = LruGarbageCollector.Params.Disabled();
+
+    // Switch out the test resources for ones with a disabled GC.
+    persistence.shutdown();
+    newTestResources(params);
+
+    persistence.runTransaction(
+        "Fill cache",
+        () -> {
+          // Simulate a bunch of ack'd mutations
+          for (int i = 0; i < 500; i++) {
+            Document doc = cacheADocumentInTransaction();
+            markDocumentEligibleForGcInTransaction(doc.getKey());
+          }
+        });
+
+    LruGarbageCollector.Results results =
+        persistence.runTransaction("GC", () -> garbageCollector.collect(new SparseArray<>()));
+
+    assertFalse(results.hasRun());
+  }
+
+  @Test
+  public void testCacheTooSmall() {
+    // Default LRU Params are ok for this test.
+
+    persistence.runTransaction(
+        "Fill cache",
+        () -> {
+          // Simulate a bunch of ack'd mutations
+          for (int i = 0; i < 50; i++) {
+            Document doc = cacheADocumentInTransaction();
+            markDocumentEligibleForGcInTransaction(doc.getKey());
+          }
+        });
+
+    // Make sure we're under the target size
+    long cacheSize = garbageCollector.getByteSize();
+    assertTrue(cacheSize < lruParams.minBytesThreshold);
+
+    LruGarbageCollector.Results results =
+        persistence.runTransaction("GC", () -> garbageCollector.collect(new SparseArray<>()));
+
+    assertFalse(results.hasRun());
+  }
+
+  @Test
+  public void testGCRan() {
+    // Set a low byte threshold so we can guarantee that GC will run.
+    LruGarbageCollector.Params params = LruGarbageCollector.Params.WithCacheSizeBytes(100);
+
+    // Switch to persistence using our new params.
+    persistence.shutdown();
+    newTestResources(params);
+
+    // Add 100 targets and 10 documents to each
+    for (int i = 0; i < 100; i++) {
+      // Use separate transactions so that each target and associated documents get their own
+      // sequence number.
+      persistence.runTransaction(
+          "Add a target and some documents",
+          () -> {
+            QueryData queryData = addNextQueryInTransaction();
+            for (int j = 0; j < 10; j++) {
+              Document doc = cacheADocumentInTransaction();
+              addDocumentToTarget(doc.getKey(), queryData.getTargetId());
+            }
+          });
+    }
+
+    // Mark nothing as live, so everything is eligible.
+    LruGarbageCollector.Results results =
+        persistence.runTransaction("GC", () -> garbageCollector.collect(new SparseArray<>()));
+
+    // By default, we collect 10% of the sequence numbers. Since we added 100 targets,
+    // that should be 10 targets with 10 documents each, for a total of 100 documents.
+    assertTrue(results.hasRun());
+    assertEquals(10, results.getTargetsRemoved());
+    assertEquals(100, results.getDocumentsRemoved());
+  }
 }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MemoryLruGarbageCollectorTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MemoryLruGarbageCollectorTest.java
index 980742868..52ed3f456 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MemoryLruGarbageCollectorTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MemoryLruGarbageCollectorTest.java
@@ -22,7 +22,7 @@
 @Config(manifest = Config.NONE)
 public class MemoryLruGarbageCollectorTest extends LruGarbageCollectorTestCase {
   @Override
-  Persistence createPersistence() {
-    return PersistenceTestHelpers.createLRUMemoryPersistence();
+  Persistence createPersistence(LruGarbageCollector.Params params) {
+    return PersistenceTestHelpers.createLRUMemoryPersistence(params);
   }
 }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MutationQueueTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MutationQueueTestCase.java
index c0f2d45b7..ccbbc7f0e 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MutationQueueTestCase.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MutationQueueTestCase.java
@@ -27,7 +27,6 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
 import com.google.firebase.Timestamp;
@@ -94,10 +93,10 @@ public void testCountBatches() {
     assertEquals(2, batchCount());
     assertFalse(mutationQueue.isEmpty());
 
-    removeMutationBatches(batch2);
+    removeMutationBatches(batch1);
     assertEquals(1, batchCount());
 
-    removeMutationBatches(batch1);
+    removeMutationBatches(batch2);
     assertEquals(0, batchCount());
     assertTrue(mutationQueue.isEmpty());
   }
@@ -123,7 +122,7 @@ public void testLookupMutationBatch() {
     assertNull(notFound);
 
     List<MutationBatch> batches = createBatches(10);
-    List<MutationBatch> removed = makeHoles(asList(2, 6, 7), batches);
+    List<MutationBatch> removed = removeFirstBatches(3, batches);
 
     // After removing, a batch should not be found
     for (MutationBatch batch : removed) {
@@ -146,10 +145,7 @@ public void testLookupMutationBatch() {
   @Test
   public void testNextMutationBatchAfterBatchId() {
     List<MutationBatch> batches = createBatches(10);
-
-    // This is an array of successors assuming the removals below will happen:
-    List<MutationBatch> afters = asList(batches.get(3), batches.get(8), batches.get(8));
-    List<MutationBatch> removed = makeHoles(asList(2, 6, 7), batches);
+    List<MutationBatch> removed = removeFirstBatches(3, batches);
 
     for (int i = 0; i < batches.size() - 1; i++) {
       MutationBatch current = batches.get(i);
@@ -161,7 +157,7 @@ public void testNextMutationBatchAfterBatchId() {
 
     for (int i = 0; i < removed.size(); i++) {
       MutationBatch current = removed.get(i);
-      MutationBatch next = afters.get(i);
+      MutationBatch next = batches.get(0);
       MutationBatch found = mutationQueue.getNextMutationBatchAfterBatchId(current.getBatchId());
       assertNotNull(found);
       assertEquals(next.getBatchId(), found.getBatchId());
@@ -177,23 +173,6 @@ public void testNextMutationBatchAfterBatchId() {
     assertNull(notFound);
   }
 
-  @Test
-  public void testNextMutationBatchAfterBatchIdSkipsAcknowledgedBatches() {
-    List<MutationBatch> batches = createBatches(3);
-    assertEquals(
-        batches.get(0), mutationQueue.getNextMutationBatchAfterBatchId(MutationBatch.UNKNOWN));
-
-    acknowledgeBatch(batches.get(0));
-    assertEquals(
-        batches.get(1), mutationQueue.getNextMutationBatchAfterBatchId(MutationBatch.UNKNOWN));
-    assertEquals(
-        batches.get(1),
-        mutationQueue.getNextMutationBatchAfterBatchId(batches.get(0).getBatchId()));
-    assertEquals(
-        batches.get(2),
-        mutationQueue.getNextMutationBatchAfterBatchId(batches.get(1).getBatchId()));
-  }
-
   @Test
   public void testAllMutationBatchesAffectingDocumentKey() {
     List<Mutation> mutations =
@@ -346,7 +325,6 @@ public void testAllMutationBatchesAffectingQuery_withCompoundBatches() {
   @Test
   public void testRemoveMutationBatches() {
     List<MutationBatch> batches = createBatches(10);
-    MutationBatch last = batches.get(batches.size() - 1);
 
     removeMutationBatches(batches.remove(0));
     assertEquals(9, batchCount());
@@ -367,17 +345,17 @@ public void testRemoveMutationBatches() {
     assertEquals(batches, found);
     assertEquals(6, found.size());
 
-    removeMutationBatches(batches.remove(batches.size() - 1));
+    removeMutationBatches(batches.remove(0));
     assertEquals(5, batchCount());
 
     found = mutationQueue.getAllMutationBatches();
     assertEquals(batches, found);
     assertEquals(5, found.size());
 
-    removeMutationBatches(batches.remove(3));
+    removeMutationBatches(batches.remove(0));
     assertEquals(4, batchCount());
 
-    removeMutationBatches(batches.remove(1));
+    removeMutationBatches(batches.remove(0));
     assertEquals(3, batchCount());
 
     found = mutationQueue.getAllMutationBatches();
@@ -460,21 +438,18 @@ private int batchCount() {
   }
 
   /**
-   * Removes entries from from the given <tt>batches</tt> and returns them.
+   * Removes the first n entries from the given <tt>batches</tt> and returns them.
    *
-   * @param holes An list of indexes in the batches list; in increasing order. Indexes are relative
-   *     to the original state of the batches list, not any intermediate state that might occur.
+   * @param n The number of batches to remove..
    * @param batches The list to mutate, removing entries from it.
    * @return A new list containing all the entries that were removed from @a batches.
    */
-  private List<MutationBatch> makeHoles(List<Integer> holes, List<MutationBatch> batches) {
+  private List<MutationBatch> removeFirstBatches(int n, List<MutationBatch> batches) {
     List<MutationBatch> removed = new ArrayList<>();
-    for (int i = 0; i < holes.size(); i++) {
-      int index = holes.get(i) - i;
-      MutationBatch batch = batches.get(index);
+    for (int i = 0; i < n; i++) {
+      MutationBatch batch = batches.get(0);
       removeMutationBatches(batch);
-
-      batches.remove(index);
+      batches.remove(0);
       removed.add(batch);
     }
     return removed;
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/PersistenceTestHelpers.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/PersistenceTestHelpers.java
index e3dfb2669..f81693766 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/PersistenceTestHelpers.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/PersistenceTestHelpers.java
@@ -25,10 +25,16 @@
   private static int databaseNameCounter = 0;
 
   public static SQLitePersistence openSQLitePersistence(String name) {
+    return openSQLitePersistence(name, LruGarbageCollector.Params.Default());
+  }
+
+  public static SQLitePersistence openSQLitePersistence(
+      String name, LruGarbageCollector.Params params) {
     DatabaseId databaseId = DatabaseId.forProject("projectId");
     LocalSerializer serializer = new LocalSerializer(new RemoteSerializer(databaseId));
     Context context = RuntimeEnvironment.application;
-    SQLitePersistence persistence = new SQLitePersistence(context, name, databaseId, serializer);
+    SQLitePersistence persistence =
+        new SQLitePersistence(context, name, databaseId, serializer, params);
     persistence.start();
     return persistence;
   }
@@ -43,10 +49,14 @@ public static String nextSQLiteDatabaseName() {
    * @return a new SQLitePersistence with an empty database and an up-to-date schema.
    */
   public static SQLitePersistence createSQLitePersistence() {
+    return createSQLitePersistence(LruGarbageCollector.Params.Default());
+  }
+
+  public static SQLitePersistence createSQLitePersistence(LruGarbageCollector.Params params) {
     // Robolectric's test runner will clear out the application database directory in between test
     // cases, but sometimes (particularly the spec tests) we create multiple databases per test
     // case and each should be fresh. A unique name is sufficient to keep these separate.
-    return openSQLitePersistence(nextSQLiteDatabaseName());
+    return openSQLitePersistence(nextSQLiteDatabaseName(), params);
   }
 
   /** Creates and starts a new MemoryPersistence instance for testing. */
@@ -57,7 +67,14 @@ public static MemoryPersistence createEagerGCMemoryPersistence() {
   }
 
   public static MemoryPersistence createLRUMemoryPersistence() {
-    MemoryPersistence persistence = MemoryPersistence.createLruGcMemoryPersistence();
+    return createLRUMemoryPersistence(LruGarbageCollector.Params.Default());
+  }
+
+  public static MemoryPersistence createLRUMemoryPersistence(LruGarbageCollector.Params params) {
+    DatabaseId databaseId = DatabaseId.forProject("projectId");
+    LocalSerializer serializer = new LocalSerializer(new RemoteSerializer(databaseId));
+    MemoryPersistence persistence =
+        MemoryPersistence.createLruGcMemoryPersistence(params, serializer);
     persistence.start();
     return persistence;
   }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/RemoteDocumentCacheTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/RemoteDocumentCacheTestCase.java
index 4340b5f51..5b575dfaa 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/RemoteDocumentCacheTestCase.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/RemoteDocumentCacheTestCase.java
@@ -32,6 +32,9 @@
 import com.google.firebase.firestore.model.DocumentKey;
 import com.google.firebase.firestore.model.MaybeDocument;
 import com.google.firebase.firestore.model.NoDocument;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
@@ -82,6 +85,51 @@ public void testSetAndReadDocument() {
     }
   }
 
+  @Test
+  public void testSetAndReadSeveralDocuments() {
+    String[] paths = {"a/b", "a/b/c/d/e/f"};
+    Map<DocumentKey, MaybeDocument> written = new HashMap<>();
+    for (String path : paths) {
+      written.put(DocumentKey.fromPathString(path), addTestDocumentAtPath(path));
+    }
+
+    Map<DocumentKey, MaybeDocument> read = getAll(Arrays.asList(paths));
+    assertEquals(written, read);
+  }
+
+  @Test
+  public void testReadSeveralDocumentsIncludingMissingDocument() {
+    String[] paths = {"foo/1", "foo/2"};
+    Map<DocumentKey, MaybeDocument> written = new HashMap<>();
+    for (String path : paths) {
+      written.put(DocumentKey.fromPathString(path), addTestDocumentAtPath(path));
+    }
+    written.put(DocumentKey.fromPathString("foo/nonexistent"), null);
+
+    List<String> keys = new ArrayList<>(Arrays.asList(paths));
+    keys.add("foo/nonexistent");
+    Map<DocumentKey, MaybeDocument> read = getAll(keys);
+    assertEquals(written, read);
+  }
+
+  // PORTING NOTE: this test only applies to Android, because it's the only platform where the
+  // implementation of getAll might split the input into several queries.
+  @Test
+  public void testSetAndReadLotsOfDocuments() {
+    // Make sure to force SQLite implementation to split the large query into several smaller ones.
+    int lotsOfDocuments = 2000;
+    List<String> paths = new ArrayList<>();
+    Map<DocumentKey, MaybeDocument> expected = new HashMap<>();
+    for (int i = 0; i < lotsOfDocuments; i++) {
+      String path = "foo/" + String.valueOf(i);
+      paths.add(path);
+      expected.put(DocumentKey.fromPathString(path), addTestDocumentAtPath(path));
+    }
+
+    Map<DocumentKey, MaybeDocument> read = getAll(paths);
+    assertEquals(expected, read);
+  }
+
   @Test
   public void testSetAndReadDeletedDocument() {
     String path = "a/b";
@@ -147,6 +195,16 @@ private MaybeDocument get(String path) {
     return remoteDocumentCache.get(key(path));
   }
 
+  private Map<DocumentKey, MaybeDocument> getAll(Iterable<String> paths) {
+    List<DocumentKey> keys = new ArrayList<>();
+
+    for (String path : paths) {
+      keys.add(key(path));
+    }
+
+    return remoteDocumentCache.getAll(keys);
+  }
+
   private void remove(String path) {
     persistence.runTransaction("remove entry", () -> remoteDocumentCache.remove(key(path)));
   }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteLruGarbageCollectorTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteLruGarbageCollectorTest.java
index 792cce7c0..e3e2838ee 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteLruGarbageCollectorTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteLruGarbageCollectorTest.java
@@ -22,7 +22,7 @@
 @Config(manifest = Config.NONE)
 public class SQLiteLruGarbageCollectorTest extends LruGarbageCollectorTestCase {
   @Override
-  Persistence createPersistence() {
-    return PersistenceTestHelpers.createSQLitePersistence();
+  Persistence createPersistence(LruGarbageCollector.Params params) {
+    return PersistenceTestHelpers.createSQLitePersistence(params);
   }
 }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteSchemaTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteSchemaTest.java
index ec03c6160..17060be2e 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteSchemaTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteSchemaTest.java
@@ -16,6 +16,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
 import android.database.Cursor;
@@ -24,8 +25,12 @@
 import com.google.firebase.firestore.model.DatabaseId;
 import com.google.firebase.firestore.model.ResourcePath;
 import com.google.firebase.firestore.proto.WriteBatch;
-import com.google.firestore.v1beta1.Document;
-import com.google.firestore.v1beta1.Write;
+import com.google.firestore.v1.Document;
+import com.google.firestore.v1.Write;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -65,6 +70,69 @@ public void tearDown() {
     }
   }
 
+  @Test
+  public void canRerunMigrations() {
+    schema.runMigrations();
+    // Run the whole thing again
+    schema.runMigrations();
+    // Run just a piece. Adds a column, make sure it doesn't throw
+    schema.runMigrations(4, 6);
+  }
+
+  private Map<String, Set<String>> getCurrentSchema() {
+    Map<String, Set<String>> tables = new HashMap<>();
+    new SQLitePersistence.Query(db, "SELECT tbl_name FROM sqlite_master WHERE type = \"table\"")
+        .forEach(
+            c -> {
+              String table = c.getString(0);
+              Set<String> columns = new HashSet<>(schema.getTableColumns(table));
+              tables.put(table, columns);
+            });
+    return tables;
+  }
+
+  private void assertNoRemovals(
+      Map<String, Set<String>> oldSchema, Map<String, Set<String>> newSchema, int newVersion) {
+    for (Map.Entry<String, Set<String>> entry : oldSchema.entrySet()) {
+      String table = entry.getKey();
+      Set<String> newColumns = newSchema.get(table);
+      assertNotNull("Table " + table + " was deleted at version " + newVersion, newColumns);
+      Set<String> oldColumns = entry.getValue();
+      // We could use `Set.containsAll()`, but if we iterate we can point out the column that was
+      // deleted.
+      for (String column : oldColumns) {
+        assertTrue(
+            "Column " + column + " was deleted from table " + table + " at version " + newVersion,
+            newColumns.contains(column));
+      }
+    }
+  }
+
+  @Test
+  public void migrationsDontDeleteTablesOrColumns() {
+    // In order to support users downgrading the SDK we need to make sure that every prior-released
+    // version of the SDK can gracefully handle running against an upgraded schema. We can't
+    // guarantee this in the general case, but this test at least ensures that no schema upgrade
+    // deletes an existing table or column, which would be very likely to break old versions of the
+    // SDK relying on that table or column.
+    Map<String, Set<String>> tables = new HashMap<>();
+    for (int toVersion = 1; toVersion <= SQLiteSchema.VERSION; toVersion++) {
+      schema.runMigrations(toVersion - 1, toVersion);
+      Map<String, Set<String>> newTables = getCurrentSchema();
+      assertNoRemovals(tables, newTables, toVersion);
+      tables = newTables;
+    }
+  }
+
+  @Test
+  public void canRecoverFromDowngrades() {
+    for (int downgradeVersion = 0; downgradeVersion < SQLiteSchema.VERSION; downgradeVersion++) {
+      // Upgrade schema to current, then upgrade from `downgradeVersion` to current
+      schema.runMigrations();
+      schema.runMigrations(downgradeVersion, SQLiteSchema.VERSION);
+    }
+  }
+
   @Test
   public void createsMutationsTable() {
     schema.runMigrations();
@@ -223,7 +291,7 @@ public void addsSentinelRows() {
               String path = row.getString(0);
               long sequenceNumber = row.getLong(1);
 
-              int docNum = Integer.parseInt(path.split("_")[1]);
+              int docNum = Integer.parseInt(path.split("_", -1)[1]);
               // The even documents were missing sequence numbers, they should now be filled in
               // to have the new sequence number. The odd documents should have their
               // sequence number unchanged, and so be the old value.
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/model/DocumentSetTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/model/DocumentSetTest.java
index 77e2b8904..0c1645eea 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/model/DocumentSetTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/model/DocumentSetTest.java
@@ -18,10 +18,10 @@
 import static com.google.firebase.firestore.testutil.TestUtil.docSet;
 import static com.google.firebase.firestore.testutil.TestUtil.field;
 import static com.google.firebase.firestore.testutil.TestUtil.map;
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertNull;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 import com.google.firebase.firestore.model.value.FieldValue;
@@ -38,13 +38,10 @@
 public class DocumentSetTest {
 
   private static final Comparator<Document> TEST_COMPARATOR =
-      new Comparator<Document>() {
-        @Override
-        public int compare(Document left, Document right) {
-          FieldValue leftValue = left.getField(field("sort"));
-          FieldValue rightValue = right.getField(field("sort"));
-          return leftValue.compareTo(rightValue);
-        }
+      (left, right) -> {
+        FieldValue leftValue = left.getField(field("sort"));
+        FieldValue rightValue = right.getField(field("sort"));
+        return leftValue.compareTo(rightValue);
       };
 
   private static final Document DOC1 = doc("docs/1", 0, map("sort", 2));
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java
index 7855d4bea..6215f3b6c 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java
@@ -275,7 +275,7 @@ public void testExtractsFields() {
     FieldValue val = wrapObject("foo", map("a", 1, "b", true, "c", "string"));
     assertTrue(val instanceof ObjectValue);
     ObjectValue obj = (ObjectValue) val;
-    assertTrue((obj.get(field("foo"))) instanceof ObjectValue);
+    assertTrue(obj.get(field("foo")) instanceof ObjectValue);
     assertEquals(wrap(1), obj.get(field("foo.a")));
     assertEquals(wrap(true), obj.get(field("foo.b")));
     assertEquals(wrap("string"), obj.get(field("foo.c")));
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/model/MutationTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/model/MutationTest.java
index d686c4829..67c1fba0a 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/model/MutationTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/model/MutationTest.java
@@ -18,6 +18,7 @@
 import static com.google.firebase.firestore.testutil.TestUtil.deletedDoc;
 import static com.google.firebase.firestore.testutil.TestUtil.doc;
 import static com.google.firebase.firestore.testutil.TestUtil.field;
+import static com.google.firebase.firestore.testutil.TestUtil.fieldMask;
 import static com.google.firebase.firestore.testutil.TestUtil.key;
 import static com.google.firebase.firestore.testutil.TestUtil.map;
 import static com.google.firebase.firestore.testutil.TestUtil.mutationResult;
@@ -110,7 +111,7 @@ public void testDeletesValuesFromTheFieldMask() {
     Document baseDoc = doc("collection/key", 0, data);
 
     DocumentKey key = key("collection/key");
-    FieldMask mask = FieldMask.fromCollection(Arrays.asList(field("foo.bar")));
+    FieldMask mask = fieldMask("foo.bar");
     Mutation patch = new PatchMutation(key, ObjectValue.emptyObject(), mask, Precondition.NONE);
 
     MaybeDocument patchDoc = patch.applyToLocalView(baseDoc, baseDoc, Timestamp.now());
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/MockDatastore.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/MockDatastore.java
index 84c831395..84911d286 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/MockDatastore.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/MockDatastore.java
@@ -16,6 +16,7 @@
 
 import static com.google.firebase.firestore.util.Assert.hardAssert;
 
+import android.content.Context;
 import com.google.firebase.firestore.auth.EmptyCredentialsProvider;
 import com.google.firebase.firestore.core.DatabaseInfo;
 import com.google.firebase.firestore.local.QueryData;
@@ -214,12 +215,13 @@ int getWritesSent() {
   private int writeStreamRequestCount;
   private int watchStreamRequestCount;
 
-  public MockDatastore(AsyncQueue workerQueue) {
+  public MockDatastore(AsyncQueue workerQueue, Context context) {
     super(
         new DatabaseInfo(
             DatabaseId.forDatabase("project", "database"), "persistenceKey", "host", false),
         workerQueue,
-        new EmptyCredentialsProvider());
+        new EmptyCredentialsProvider(),
+        context);
     this.serializer = new RemoteSerializer(getDatabaseInfo().getDatabaseId());
   }
 
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteEventTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteEventTest.java
index aabf04506..7611a252b 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteEventTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteEventTest.java
@@ -25,11 +25,11 @@
 import static com.google.firebase.firestore.testutil.TestUtil.version;
 import static java.util.Arrays.asList;
 import static java.util.Collections.emptyList;
-import static junit.framework.Assert.fail;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 import com.google.firebase.database.collection.ImmutableSortedSet;
 import com.google.firebase.firestore.TestUtil.TestTargetMetadataProvider;
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java
index 6d42152d5..e2c1b1b7d 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java
@@ -49,35 +49,35 @@
 import com.google.firebase.firestore.remote.WatchChange.WatchTargetChange;
 import com.google.firebase.firestore.remote.WatchChange.WatchTargetChangeType;
 import com.google.firebase.firestore.testutil.TestUtil;
-import com.google.firestore.v1beta1.ArrayValue;
-import com.google.firestore.v1beta1.Cursor;
-import com.google.firestore.v1beta1.Document;
-import com.google.firestore.v1beta1.DocumentChange;
-import com.google.firestore.v1beta1.DocumentDelete;
-import com.google.firestore.v1beta1.DocumentMask;
-import com.google.firestore.v1beta1.DocumentRemove;
-import com.google.firestore.v1beta1.DocumentTransform;
-import com.google.firestore.v1beta1.ListenResponse;
-import com.google.firestore.v1beta1.MapValue;
-import com.google.firestore.v1beta1.Precondition;
-import com.google.firestore.v1beta1.StructuredQuery;
-import com.google.firestore.v1beta1.StructuredQuery.CollectionSelector;
-import com.google.firestore.v1beta1.StructuredQuery.CompositeFilter;
-import com.google.firestore.v1beta1.StructuredQuery.Direction;
-import com.google.firestore.v1beta1.StructuredQuery.FieldFilter;
-import com.google.firestore.v1beta1.StructuredQuery.FieldFilter.Operator;
-import com.google.firestore.v1beta1.StructuredQuery.FieldReference;
-import com.google.firestore.v1beta1.StructuredQuery.Filter;
-import com.google.firestore.v1beta1.StructuredQuery.Order;
-import com.google.firestore.v1beta1.StructuredQuery.UnaryFilter;
-import com.google.firestore.v1beta1.Target;
-import com.google.firestore.v1beta1.Target.DocumentsTarget;
-import com.google.firestore.v1beta1.Target.QueryTarget;
-import com.google.firestore.v1beta1.TargetChange;
-import com.google.firestore.v1beta1.TargetChange.TargetChangeType;
-import com.google.firestore.v1beta1.Value;
-import com.google.firestore.v1beta1.Value.ValueTypeCase;
-import com.google.firestore.v1beta1.Write;
+import com.google.firestore.v1.ArrayValue;
+import com.google.firestore.v1.Cursor;
+import com.google.firestore.v1.Document;
+import com.google.firestore.v1.DocumentChange;
+import com.google.firestore.v1.DocumentDelete;
+import com.google.firestore.v1.DocumentMask;
+import com.google.firestore.v1.DocumentRemove;
+import com.google.firestore.v1.DocumentTransform;
+import com.google.firestore.v1.ListenResponse;
+import com.google.firestore.v1.MapValue;
+import com.google.firestore.v1.Precondition;
+import com.google.firestore.v1.StructuredQuery;
+import com.google.firestore.v1.StructuredQuery.CollectionSelector;
+import com.google.firestore.v1.StructuredQuery.CompositeFilter;
+import com.google.firestore.v1.StructuredQuery.Direction;
+import com.google.firestore.v1.StructuredQuery.FieldFilter;
+import com.google.firestore.v1.StructuredQuery.FieldFilter.Operator;
+import com.google.firestore.v1.StructuredQuery.FieldReference;
+import com.google.firestore.v1.StructuredQuery.Filter;
+import com.google.firestore.v1.StructuredQuery.Order;
+import com.google.firestore.v1.StructuredQuery.UnaryFilter;
+import com.google.firestore.v1.Target;
+import com.google.firestore.v1.Target.DocumentsTarget;
+import com.google.firestore.v1.Target.QueryTarget;
+import com.google.firestore.v1.TargetChange;
+import com.google.firestore.v1.TargetChange.TargetChangeType;
+import com.google.firestore.v1.Value;
+import com.google.firestore.v1.Value.ValueTypeCase;
+import com.google.firestore.v1.Write;
 import com.google.protobuf.ByteString;
 import com.google.protobuf.Int32Value;
 import com.google.protobuf.Timestamp;
@@ -107,13 +107,13 @@ public void setUp() {
     serializer = new RemoteSerializer(databaseId);
   }
 
-  public static com.google.firestore.v1beta1.Value.Builder valueBuilder() {
-    return com.google.firestore.v1beta1.Value.newBuilder();
+  public static com.google.firestore.v1.Value.Builder valueBuilder() {
+    return com.google.firestore.v1.Value.newBuilder();
   }
 
   private void assertRoundTrip(
-      FieldValue value, com.google.firestore.v1beta1.Value proto, ValueTypeCase typeCase) {
-    com.google.firestore.v1beta1.Value actual = serializer.encodeValue(value);
+      FieldValue value, com.google.firestore.v1.Value proto, ValueTypeCase typeCase) {
+    com.google.firestore.v1.Value actual = serializer.encodeValue(value);
     assertEquals(typeCase, actual.getValueTypeCase());
     assertEquals(proto, actual);
     assertEquals(value, serializer.decodeValue(proto));
@@ -122,7 +122,7 @@ private void assertRoundTrip(
   @Test
   public void testEncodesNull() {
     FieldValue value = NullValue.nullValue();
-    com.google.firestore.v1beta1.Value proto = valueBuilder().setNullValueValue(0).build();
+    com.google.firestore.v1.Value proto = valueBuilder().setNullValueValue(0).build();
     assertRoundTrip(value, proto, ValueTypeCase.NULL_VALUE);
   }
 
@@ -131,7 +131,7 @@ public void testEncodesBoolean() {
     List<Boolean> tests = asList(true, false);
     for (Boolean test : tests) {
       FieldValue value = wrap(test);
-      com.google.firestore.v1beta1.Value proto = valueBuilder().setBooleanValue(test).build();
+      com.google.firestore.v1.Value proto = valueBuilder().setBooleanValue(test).build();
       assertRoundTrip(value, proto, ValueTypeCase.BOOLEAN_VALUE);
     }
   }
@@ -141,7 +141,7 @@ public void testEncodesIntegers() {
     List<Long> tests = asList(Long.MIN_VALUE, -100L, -1L, 0L, 1L, 100L, Long.MAX_VALUE);
     for (Long test : tests) {
       FieldValue value = wrap(test);
-      com.google.firestore.v1beta1.Value proto = valueBuilder().setIntegerValue(test).build();
+      com.google.firestore.v1.Value proto = valueBuilder().setIntegerValue(test).build();
       assertRoundTrip(value, proto, ValueTypeCase.INTEGER_VALUE);
     }
   }
@@ -169,7 +169,7 @@ public void testEncodesDoubles() {
             Double.POSITIVE_INFINITY);
     for (Double test : tests) {
       FieldValue value = wrap(test);
-      com.google.firestore.v1beta1.Value proto = valueBuilder().setDoubleValue(test).build();
+      com.google.firestore.v1.Value proto = valueBuilder().setDoubleValue(test).build();
       assertRoundTrip(value, proto, ValueTypeCase.DOUBLE_VALUE);
     }
   }
@@ -179,7 +179,7 @@ public void testEncodesStrings() {
     List<String> tests = asList("", "a", "abc def", "æ", "\0\ud7ff\ue000\uffff", "(╯°□°）╯︵ ┻━┻");
     for (String test : tests) {
       FieldValue value = wrap(test);
-      com.google.firestore.v1beta1.Value proto = valueBuilder().setStringValue(test).build();
+      com.google.firestore.v1.Value proto = valueBuilder().setStringValue(test).build();
       assertRoundTrip(value, proto, ValueTypeCase.STRING_VALUE);
     }
   }
@@ -199,7 +199,7 @@ public void testEncodesDates() {
     Timestamp ts1 = Timestamp.newBuilder().setNanos(500000000).setSeconds(1451730050).build();
 
     Timestamp ts2 = Timestamp.newBuilder().setNanos(0).setSeconds(1466160615).build();
-    List<com.google.firestore.v1beta1.Value> expected =
+    List<com.google.firestore.v1.Value> expected =
         asList(
             valueBuilder().setTimestampValue(ts1).build(),
             valueBuilder().setTimestampValue(ts2).build());
@@ -213,7 +213,7 @@ public void testEncodesDates() {
   @Test
   public void testEncodesGeoPoints() {
     FieldValue geoPoint = wrap(new GeoPoint(1.23, 4.56));
-    com.google.firestore.v1beta1.Value.Builder proto = valueBuilder();
+    com.google.firestore.v1.Value.Builder proto = valueBuilder();
     proto.setGeoPointValue(LatLng.newBuilder().setLatitude(1.23).setLongitude(4.56));
 
     assertRoundTrip(geoPoint, proto.build(), ValueTypeCase.GEO_POINT_VALUE);
@@ -222,7 +222,7 @@ public void testEncodesGeoPoints() {
   @Test
   public void testEncodesBlobs() {
     FieldValue blob = wrap(TestUtil.blob(0, 1, 2, 3));
-    com.google.firestore.v1beta1.Value.Builder proto = valueBuilder();
+    com.google.firestore.v1.Value.Builder proto = valueBuilder();
     proto.setBytesValue(TestUtil.byteString(0, 1, 2, 3));
 
     assertRoundTrip(blob, proto.build(), ValueTypeCase.BYTES_VALUE);
@@ -232,7 +232,7 @@ public void testEncodesBlobs() {
   public void testEncodesReferences() {
     DocumentReference value = ref("foo/bar");
     FieldValue ref = wrap(value);
-    com.google.firestore.v1beta1.Value.Builder proto = valueBuilder();
+    com.google.firestore.v1.Value.Builder proto = valueBuilder();
     proto.setReferenceValue("projects/project/databases/(default)/documents/foo/bar");
 
     assertRoundTrip(ref, proto.build(), ValueTypeCase.REFERENCE_VALUE);
@@ -246,7 +246,7 @@ public void testEncodeArrays() {
         .addValues(valueBuilder().setBooleanValue(true))
         .addValues(valueBuilder().setStringValue("foo"));
 
-    com.google.firestore.v1beta1.Value.Builder proto = valueBuilder();
+    com.google.firestore.v1.Value.Builder proto = valueBuilder();
     proto.setArrayValue(builder);
     assertRoundTrip(model, proto.build(), ValueTypeCase.ARRAY_VALUE);
   }
@@ -298,7 +298,7 @@ public void testEncodesNestedObjects() {
             .putFields("a", valueBuilder().setArrayValue(array).build())
             .putFields("o", valueBuilder().setMapValue(middle).build());
 
-    com.google.firestore.v1beta1.Value proto = valueBuilder().setMapValue(obj).build();
+    com.google.firestore.v1.Value proto = valueBuilder().setMapValue(obj).build();
     assertRoundTrip(model, proto, ValueTypeCase.MAP_VALUE);
   }
 
@@ -306,8 +306,8 @@ public void testEncodesNestedObjects() {
   public void testEncodeDeleteMutation() {
     Mutation mutation = deleteMutation("docs/1");
 
-    com.google.firestore.v1beta1.Write expected =
-        com.google.firestore.v1beta1.Write.newBuilder()
+    com.google.firestore.v1.Write expected =
+        com.google.firestore.v1.Write.newBuilder()
             .setDelete("projects/p/databases/d/documents/docs/1")
             .build();
     assertRoundTripForMutation(mutation, expected);
@@ -317,8 +317,8 @@ public void testEncodeDeleteMutation() {
   public void testEncodeSetMutation() {
     Mutation mutation = setMutation("docs/1", map("key", "value"));
 
-    com.google.firestore.v1beta1.Write expected =
-        com.google.firestore.v1beta1.Write.newBuilder()
+    com.google.firestore.v1.Write expected =
+        com.google.firestore.v1.Write.newBuilder()
             .setUpdate(
                 Document.newBuilder()
                     .setName("projects/p/databases/d/documents/docs/1")
@@ -332,8 +332,8 @@ public void testEncodeSetMutation() {
   public void testEncodesPatchMutation() {
     Mutation mutation = patchMutation("docs/1", map("key", "value", "key2", true));
 
-    com.google.firestore.v1beta1.Write expected =
-        com.google.firestore.v1beta1.Write.newBuilder()
+    com.google.firestore.v1.Write expected =
+        com.google.firestore.v1.Write.newBuilder()
             .setUpdate(
                 Document.newBuilder()
                     .setName("projects/p/databases/d/documents/docs/1")
@@ -351,8 +351,8 @@ public void testEncodesPatchMutationWithFieldMask() {
     Mutation mutation =
         patchMutation("docs/1", map("key", "value", "key2", true), asList(field("key")));
 
-    com.google.firestore.v1beta1.Write expected =
-        com.google.firestore.v1beta1.Write.newBuilder()
+    com.google.firestore.v1.Write expected =
+        com.google.firestore.v1.Write.newBuilder()
             .setUpdate(
                 Document.newBuilder()
                     .setName("projects/p/databases/d/documents/docs/1")
@@ -375,8 +375,8 @@ public void testEncodesServerTimestampTransformMutation() {
                 "bar.baz",
                 com.google.firebase.firestore.FieldValue.serverTimestamp()));
 
-    com.google.firestore.v1beta1.Write expected =
-        com.google.firestore.v1beta1.Write.newBuilder()
+    com.google.firestore.v1.Write expected =
+        com.google.firestore.v1.Write.newBuilder()
             .setTransform(
                 DocumentTransform.newBuilder()
                     .setDocument("projects/p/databases/d/documents/docs/1")
@@ -405,8 +405,8 @@ public void testEncodesArrayTransformMutations() {
                 "a", com.google.firebase.firestore.FieldValue.arrayUnion("a", 2),
                 "bar.baz", com.google.firebase.firestore.FieldValue.arrayRemove(map("x", 1))));
 
-    com.google.firestore.v1beta1.Write expected =
-        com.google.firestore.v1beta1.Write.newBuilder()
+    com.google.firestore.v1.Write expected =
+        com.google.firestore.v1.Write.newBuilder()
             .setTransform(
                 DocumentTransform.newBuilder()
                     .setDocument("projects/p/databases/d/documents/docs/1")
@@ -498,7 +498,7 @@ public void testEncodesFirstLevelAncestorQueries() {
             .addOrderBy(defaultKeyOrder());
     QueryTarget.Builder queryBuilder =
         QueryTarget.newBuilder()
-            .setParent("projects/p/databases/d")
+            .setParent("projects/p/databases/d/documents")
             .setStructuredQuery(structuredQueryBuilder);
     Target expected =
         Target.newBuilder()
@@ -558,7 +558,7 @@ public void testEncodesSingleFilterAtFirstLevelCollections() {
             .addOrderBy(defaultKeyOrder());
     QueryTarget.Builder queryBuilder =
         QueryTarget.newBuilder()
-            .setParent("projects/p/databases/d")
+            .setParent("projects/p/databases/d/documents")
             .setStructuredQuery(structuredQueryBuilder);
     Target expected =
         Target.newBuilder()
@@ -664,7 +664,7 @@ private void unaryFilterTest(Object equalityValue, UnaryFilter.Operator unaryOpe
             .addOrderBy(defaultKeyOrder());
     QueryTarget.Builder queryBuilder =
         QueryTarget.newBuilder()
-            .setParent("projects/p/databases/d")
+            .setParent("projects/p/databases/d/documents")
             .setStructuredQuery(structuredQueryBuilder);
     Target expected =
         Target.newBuilder()
@@ -692,7 +692,7 @@ public void testEncodesSortOrders() {
             .addOrderBy(defaultKeyOrder());
     QueryTarget.Builder queryBuilder =
         QueryTarget.newBuilder()
-            .setParent("projects/p/databases/d")
+            .setParent("projects/p/databases/d/documents")
             .setStructuredQuery(structuredQueryBuilder);
     Target expected =
         Target.newBuilder()
@@ -751,7 +751,7 @@ public void testEncodesLimits() {
             .setLimit(Int32Value.newBuilder().setValue(26));
     QueryTarget.Builder queryBuilder =
         QueryTarget.newBuilder()
-            .setParent("projects/p/databases/d")
+            .setParent("projects/p/databases/d/documents")
             .setStructuredQuery(structuredQueryBuilder);
     Target expected =
         Target.newBuilder()
@@ -791,7 +791,7 @@ public void testEncodesBounds() {
 
     QueryTarget.Builder queryBuilder =
         QueryTarget.newBuilder()
-            .setParent("projects/p/databases/d")
+            .setParent("projects/p/databases/d/documents")
             .setStructuredQuery(structuredQueryBuilder);
     Target expected =
         Target.newBuilder()
@@ -819,7 +819,7 @@ public void testEncodesResumeTokens() {
 
     QueryTarget.Builder queryBuilder =
         QueryTarget.newBuilder()
-            .setParent("projects/p/databases/d")
+            .setParent("projects/p/databases/d/documents")
             .setStructuredQuery(structuredQueryBuilder);
     Target expected =
         Target.newBuilder()
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SQLiteSpecTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SQLiteSpecTest.java
index 011215b74..c8940dbc1 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SQLiteSpecTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SQLiteSpecTest.java
@@ -14,6 +14,7 @@
 
 package com.google.firebase.firestore.spec;
 
+import com.google.firebase.firestore.local.LruGarbageCollector;
 import com.google.firebase.firestore.local.Persistence;
 import com.google.firebase.firestore.local.PersistenceTestHelpers;
 import java.util.Set;
@@ -43,7 +44,8 @@ protected void specTearDown() throws Exception {
 
   @Override
   Persistence getPersistence(boolean garbageCollectionEnabled) {
-    return PersistenceTestHelpers.openSQLitePersistence(databaseName);
+    return PersistenceTestHelpers.openSQLitePersistence(
+        databaseName, LruGarbageCollector.Params.Default());
   }
 
   @Override
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
index 7751f009a..24a9ec75d 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
@@ -56,6 +56,8 @@
 import com.google.firebase.firestore.model.mutation.Mutation;
 import com.google.firebase.firestore.model.mutation.MutationBatchResult;
 import com.google.firebase.firestore.model.mutation.MutationResult;
+import com.google.firebase.firestore.remote.AndroidConnectivityMonitor;
+import com.google.firebase.firestore.remote.ConnectivityMonitor;
 import com.google.firebase.firestore.remote.ExistenceFilter;
 import com.google.firebase.firestore.remote.MockDatastore;
 import com.google.firebase.firestore.remote.RemoteEvent;
@@ -92,6 +94,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Test;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.android.util.concurrent.RoboExecutorService;
 
 /**
@@ -263,9 +266,11 @@ private void initClient() {
     queue = new AsyncQueue();
 
     // Set up the sync engine and various stores.
-    datastore = new MockDatastore(queue);
+    datastore = new MockDatastore(queue, RuntimeEnvironment.application);
 
-    remoteStore = new RemoteStore(this, localStore, datastore, queue);
+    ConnectivityMonitor connectivityMonitor =
+        new AndroidConnectivityMonitor(RuntimeEnvironment.application);
+    remoteStore = new RemoteStore(this, localStore, datastore, queue, connectivityMonitor);
     syncEngine = new SyncEngine(localStore, remoteStore, currentUser);
     eventManager = new EventManager(syncEngine);
     localStore.start();
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
index 13b3baa93..956b140ab 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
@@ -41,7 +41,7 @@
 @Config(manifest = Config.NONE)
 @SuppressWarnings({"unused", "WeakerAccess", "SpellCheckingInspection"})
 public class MapperTest {
-  private static final double EPSILON = 0.00001f;
+  private static final double EPSILON = 0.0003;
 
   private static class StringBean {
     private String value;
diff --git a/firebase-firestore/src/test/resources/json/listen_spec_test.json b/firebase-firestore/src/test/resources/json/listen_spec_test.json
index 6a3481ff1..ff17545ce 100644
--- a/firebase-firestore/src/test/resources/json/listen_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/listen_spec_test.json
@@ -10053,5 +10053,211 @@
         "clientIndex": 1
       }
     ]
+  },
+  "Previous primary immediately regains primary lease": {
+    "describeName": "Listens:",
+    "itName": "Previous primary immediately regains primary lease",
+    "tags": [
+      "multi-client"
+    ],
+    "config": {
+      "useGarbageCollection": false,
+      "numClients": 2
+    },
+    "steps": [
+      {
+        "drainQueue": true,
+        "clientIndex": 0
+      },
+      {
+        "userListen": [
+          2,
+          {
+            "path": "collection",
+            "filters": [],
+            "orderBys": []
+          }
+        ],
+        "stateExpect": {
+          "activeTargets": {
+            "2": {
+              "query": {
+                "path": "collection",
+                "filters": [],
+                "orderBys": []
+              },
+              "resumeToken": ""
+            }
+          }
+        },
+        "clientIndex": 0
+      },
+      {
+        "watchAck": [
+          2
+        ],
+        "clientIndex": 0
+      },
+      {
+        "watchEntity": {
+          "docs": [],
+          "targets": [
+            2
+          ]
+        },
+        "clientIndex": 0
+      },
+      {
+        "watchCurrent": [
+          [
+            2
+          ],
+          "resume-token-1000"
+        ],
+        "clientIndex": 0
+      },
+      {
+        "watchSnapshot": {
+          "version": 1000,
+          "targetIds": []
+        },
+        "expect": [
+          {
+            "query": {
+              "path": "collection",
+              "filters": [],
+              "orderBys": []
+            },
+            "errorCode": 0,
+            "fromCache": false,
+            "hasPendingWrites": false
+          }
+        ],
+        "clientIndex": 0
+      },
+      {
+        "drainQueue": true,
+        "clientIndex": 1
+      },
+      {
+        "applyClientState": {
+          "primary": true
+        },
+        "stateExpect": {
+          "isPrimary": true,
+          "activeTargets": {
+            "2": {
+              "query": {
+                "path": "collection",
+                "filters": [],
+                "orderBys": []
+              },
+              "resumeToken": "resume-token-1000"
+            }
+          }
+        },
+        "clientIndex": 1
+      },
+      {
+        "watchAck": [
+          2
+        ],
+        "clientIndex": 1
+      },
+      {
+        "watchEntity": {
+          "docs": [
+            {
+              "key": "collection/a",
+              "version": 2000,
+              "value": {
+                "key": "a"
+              },
+              "options": {
+                "hasLocalMutations": false,
+                "hasCommittedMutations": false
+              }
+            }
+          ],
+          "targets": [
+            2
+          ]
+        },
+        "clientIndex": 1
+      },
+      {
+        "watchCurrent": [
+          [
+            2
+          ],
+          "resume-token-2000"
+        ],
+        "clientIndex": 1
+      },
+      {
+        "watchSnapshot": {
+          "version": 2000,
+          "targetIds": []
+        },
+        "clientIndex": 1
+      },
+      {
+        "shutdown": true,
+        "stateExpect": {
+          "activeTargets": {},
+          "limboDocs": []
+        },
+        "clientIndex": 1
+      },
+      {
+        "drainQueue": true,
+        "stateExpect": {
+          "isPrimary": true
+        },
+        "clientIndex": 0
+      },
+      {
+        "runTimer": "client_metadata_refresh",
+        "stateExpect": {
+          "isPrimary": true,
+          "activeTargets": {
+            "2": {
+              "query": {
+                "path": "collection",
+                "filters": [],
+                "orderBys": []
+              },
+              "resumeToken": "resume-token-2000"
+            }
+          }
+        },
+        "expect": [
+          {
+            "query": {
+              "path": "collection",
+              "filters": [],
+              "orderBys": []
+            },
+            "added": [
+              {
+                "key": "collection/a",
+                "version": 2000,
+                "value": {
+                  "key": "a"
+                },
+                "options": {
+                  "hasLocalMutations": false,
+                  "hasCommittedMutations": false
+                }
+              }
+            ],
+            "errorCode": 0,
+            "fromCache": false,
+            "hasPendingWrites": false
+          }
+        ],
+        "clientIndex": 0
+      }
+    ]
   }
 }
diff --git a/firebase-firestore/src/test/resources/json/write_spec_test.json b/firebase-firestore/src/test/resources/json/write_spec_test.json
index 2438f21e6..1f8a024b5 100644
--- a/firebase-firestore/src/test/resources/json/write_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/write_spec_test.json
@@ -5797,9 +5797,9 @@
       }
     ]
   },
-  "Writes that fail with code aborted are rejected": {
+  "Writes that fail with code out-of-range are rejected": {
     "describeName": "Writes:",
-    "itName": "Writes that fail with code aborted are rejected",
+    "itName": "Writes that fail with code out-of-range are rejected",
     "tags": [],
     "config": {
       "useGarbageCollection": true,
@@ -5864,7 +5864,7 @@
       {
         "failWrite": {
           "error": {
-            "code": 10
+            "code": 11
           }
         },
         "stateExpect": {
@@ -5903,9 +5903,9 @@
       }
     ]
   },
-  "Writes that fail with code out-of-range are rejected": {
+  "Writes that fail with code unimplemented are rejected": {
     "describeName": "Writes:",
-    "itName": "Writes that fail with code out-of-range are rejected",
+    "itName": "Writes that fail with code unimplemented are rejected",
     "tags": [],
     "config": {
       "useGarbageCollection": true,
@@ -5970,7 +5970,7 @@
       {
         "failWrite": {
           "error": {
-            "code": 11
+            "code": 12
           }
         },
         "stateExpect": {
@@ -6009,9 +6009,9 @@
       }
     ]
   },
-  "Writes that fail with code unimplemented are rejected": {
+  "Writes that fail with code data-loss are rejected": {
     "describeName": "Writes:",
-    "itName": "Writes that fail with code unimplemented are rejected",
+    "itName": "Writes that fail with code data-loss are rejected",
     "tags": [],
     "config": {
       "useGarbageCollection": true,
@@ -6076,7 +6076,7 @@
       {
         "failWrite": {
           "error": {
-            "code": 12
+            "code": 15
           }
         },
         "stateExpect": {
@@ -6115,9 +6115,9 @@
       }
     ]
   },
-  "Writes that fail with code data-loss are rejected": {
+  "Writes that fail with code resource_exhausted are not rejected": {
     "describeName": "Writes:",
-    "itName": "Writes that fail with code data-loss are rejected",
+    "itName": "Writes that fail with code resource_exhausted are not rejected",
     "tags": [],
     "config": {
       "useGarbageCollection": true,
@@ -6182,48 +6182,16 @@
       {
         "failWrite": {
           "error": {
-            "code": 15
-          }
-        },
-        "stateExpect": {
-          "userCallbacks": {
-            "acknowledgedDocs": [],
-            "rejectedDocs": [
-              "collection/key"
-            ]
-          }
-        },
-        "expect": [
-          {
-            "query": {
-              "path": "collection/key",
-              "filters": [],
-              "orderBys": []
-            },
-            "removed": [
-              {
-                "key": "collection/key",
-                "version": 0,
-                "value": {
-                  "foo": "bar"
-                },
-                "options": {
-                  "hasLocalMutations": true,
-                  "hasCommittedMutations": false
-                }
-              }
-            ],
-            "errorCode": 0,
-            "fromCache": true,
-            "hasPendingWrites": false
-          }
-        ]
+            "code": 8
+          },
+          "keepInQueue": true
+        }
       }
     ]
   },
-  "Writes that fail with code resource_exhausted are not rejected": {
+  "Writes that fail with code aborted are retried": {
     "describeName": "Writes:",
-    "itName": "Writes that fail with code resource_exhausted are not rejected",
+    "itName": "Writes that fail with code aborted are retried",
     "tags": [],
     "config": {
       "useGarbageCollection": true,
@@ -6288,10 +6256,87 @@
       {
         "failWrite": {
           "error": {
-            "code": 8
+            "code": 10
           },
           "keepInQueue": true
         }
+      },
+      {
+        "writeAck": {
+          "version": 1000
+        },
+        "stateExpect": {
+          "userCallbacks": {
+            "acknowledgedDocs": [
+              "collection/key"
+            ],
+            "rejectedDocs": []
+          }
+        }
+      },
+      {
+        "watchAck": [
+          2
+        ]
+      },
+      {
+        "watchEntity": {
+          "docs": [
+            {
+              "key": "collection/key",
+              "version": 1000,
+              "value": {
+                "foo": "bar"
+              },
+              "options": {
+                "hasLocalMutations": false,
+                "hasCommittedMutations": false
+              }
+            }
+          ],
+          "targets": [
+            2
+          ]
+        }
+      },
+      {
+        "watchCurrent": [
+          [
+            2
+          ],
+          "resume-token-1000"
+        ]
+      },
+      {
+        "watchSnapshot": {
+          "version": 1000,
+          "targetIds": []
+        },
+        "expect": [
+          {
+            "query": {
+              "path": "collection/key",
+              "filters": [],
+              "orderBys": []
+            },
+            "metadata": [
+              {
+                "key": "collection/key",
+                "version": 1000,
+                "value": {
+                  "foo": "bar"
+                },
+                "options": {
+                  "hasLocalMutations": false,
+                  "hasCommittedMutations": false
+                }
+              }
+            ],
+            "errorCode": 0,
+            "fromCache": false,
+            "hasPendingWrites": false
+          }
+        ]
       }
     ]
   },
@@ -10118,6 +10163,26 @@
         ],
         "clientIndex": 1
       },
+      {
+        "drainQueue": true,
+        "stateExpect": {
+          "activeTargets": {
+            "2": {
+              "query": {
+                "path": "collection",
+                "filters": [],
+                "orderBys": []
+              },
+              "resumeToken": ""
+            }
+          }
+        },
+        "clientIndex": 0
+      },
+      {
+        "drainQueue": true,
+        "clientIndex": 1
+      },
       {
         "applyClientState": {
           "primary": true
diff --git a/firebase-firestore/src/testUtil/java/com/google/firebase/firestore/testutil/TestUtil.java b/firebase-firestore/src/testUtil/java/com/google/firebase/firestore/testutil/TestUtil.java
index d6d5384fd..27caae9bb 100644
--- a/firebase-firestore/src/testUtil/java/com/google/firebase/firestore/testutil/TestUtil.java
+++ b/firebase-firestore/src/testUtil/java/com/google/firebase/firestore/testutil/TestUtil.java
@@ -74,10 +74,13 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
 import javax.annotation.Nullable;
 
 /** A set of utilities for tests */
@@ -109,6 +112,14 @@ public static ByteString byteString(int... bytes) {
     return ByteString.copyFrom(primitive);
   }
 
+  public static FieldMask fieldMask(String... fields) {
+    FieldPath[] mask = new FieldPath[fields.length];
+    for (int i = 0; i < fields.length; i++) {
+      mask[i] = field(fields[i]);
+    }
+    return FieldMask.fromSet(new HashSet<>(Arrays.asList(mask)));
+  }
+
   public static final Map<String, Object> EMPTY_MAP = new HashMap<>();
 
   public static FieldValue wrap(Object value) {
@@ -430,13 +441,15 @@ public static PatchMutation patchMutation(
 
     boolean merge = updateMask != null;
 
-    // We sort the fieldMaskPaths to make the order deterministic in tests.
-    Collections.sort(objectMask);
+    // We sort the fieldMaskPaths to make the order deterministic in tests. (Otherwise, when we
+    // flatten a Set to a proto repeated field, we'll end up comparing in iterator order and
+    // possibly consider {foo,bar} != {bar,foo}.)
+    SortedSet<FieldPath> fieldMaskPaths = new TreeSet<>(merge ? updateMask : objectMask);
 
     return new PatchMutation(
         key(path),
         objectValue,
-        FieldMask.fromCollection(merge ? updateMask : objectMask),
+        FieldMask.fromSet(fieldMaskPaths),
         merge ? Precondition.NONE : Precondition.exists(true));
   }
 
diff --git a/firebase-functions/firebase-functions.gradle b/firebase-functions/firebase-functions.gradle
index d33008db6..b98802a5a 100644
--- a/firebase-functions/firebase-functions.gradle
+++ b/firebase-functions/firebase-functions.gradle
@@ -14,18 +14,16 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 28
-
 android {
     adbOptions {
         timeOutInMs 60 * 1000
     }
 
-    compileSdkVersion androidVersion
+    compileSdkVersion project.targetSdkVersion
     defaultConfig {
-        targetSdkVersion androidVersion
-        minSdkVersion 14
-
+        targetSdkVersion project.targetSdkVersion
+        minSdkVersion project.minSdkVersion
+        versionName version
         multiDexEnabled true
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
@@ -40,6 +38,7 @@ android {
         sourceCompatibility JavaVersion.VERSION_1_8
         targetCompatibility JavaVersion.VERSION_1_8
     }
+    testOptions.unitTests.includeAndroidResources = true
 }
 
 dependencies {
@@ -55,19 +54,22 @@ dependencies {
     }
     implementation 'com.google.firebase:firebase-iid-interop:16.0.1'
 
-    implementation 'com.squareup.okhttp:okhttp:2.7.2'
+    implementation 'com.squareup.okhttp:okhttp:2.7.5'
 
     annotationProcessor 'com.google.auto.value:auto-value:1.6'
 
     androidTestImplementation 'junit:junit:4.12'
-    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation "com.google.truth:truth:$googleTruthVersion"
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
     androidTestImplementation 'org.mockito:mockito-core:2.21.0'
-    androidTestImplementation 'com.google.truth:truth:0.42'
     androidTestImplementation 'com.linkedin.dexmaker:dexmaker:2.16.0'
     androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.16.0'
 
-
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.mockito:mockito-core:2.21.0'
+    testImplementation "org.robolectric:robolectric:$robolectricVersion"
+    testImplementation "com.google.truth:truth:$googleTruthVersion"
+    testImplementation 'com.android.support.test:rules:1.0.2'
 }
 
 task startFunctionsEmulator(type: Exec) {
diff --git a/firebase-functions/gradle.properties b/firebase-functions/gradle.properties
index c0e1e5a2f..3c59e428c 100644
--- a/firebase-functions/gradle.properties
+++ b/firebase-functions/gradle.properties
@@ -1,2 +1,3 @@
-version=16.1.2
-latestReleasedVersion=16.1.1
+version=16.2.0
+latestReleasedVersion=16.1.3
+android.enableUnitTestBinaryResources=true
diff --git a/firebase-functions/src/androidTest/AndroidManifest.xml b/firebase-functions/src/androidTest/AndroidManifest.xml
index 1da6c39bd..b66045d0b 100644
--- a/firebase-functions/src/androidTest/AndroidManifest.xml
+++ b/firebase-functions/src/androidTest/AndroidManifest.xml
@@ -1,5 +1,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
   package="com.google.firebase.functions">
+  <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+  <!--<uses-sdk android:minSdkVersion="15" android:targetSdkVersion="23" />-->
   <uses-permission android:name="android.permission.INTERNET"/>
   <application>
     <uses-library android:name="android.test.runner" />
diff --git a/firebase-functions/src/main/AndroidManifest.xml b/firebase-functions/src/main/AndroidManifest.xml
index b27668ca4..8a320c3aa 100644
--- a/firebase-functions/src/main/AndroidManifest.xml
+++ b/firebase-functions/src/main/AndroidManifest.xml
@@ -2,6 +2,8 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:tools="http://schemas.android.com/tools"
         package="com.google.firebase.functions">
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+    <!--<uses-sdk android:minSdkVersion="14" />-->
     <uses-permission android:name="android.permission.INTERNET" />
     <application>
         <service android:name="com.google.firebase.components.ComponentDiscoveryService">
diff --git a/firebase-functions/src/main/java/com/google/firebase/functions/FunctionsRegistrar.java b/firebase-functions/src/main/java/com/google/firebase/functions/FunctionsRegistrar.java
index f22f6f130..d1ba251be 100644
--- a/firebase-functions/src/main/java/com/google/firebase/functions/FunctionsRegistrar.java
+++ b/firebase-functions/src/main/java/com/google/firebase/functions/FunctionsRegistrar.java
@@ -22,6 +22,7 @@
 import com.google.firebase.components.ComponentRegistrar;
 import com.google.firebase.components.Dependency;
 import com.google.firebase.iid.internal.FirebaseInstanceIdInternal;
+import com.google.firebase.platforminfo.LibraryVersionComponent;
 import java.util.Arrays;
 import java.util.List;
 
@@ -54,6 +55,7 @@
                         c.get(Context.class),
                         c.get(ContextProvider.class),
                         c.get(FirebaseOptions.class).getProjectId()))
-            .build());
+            .build(),
+        LibraryVersionComponent.create("fire-fn", BuildConfig.VERSION_NAME));
   }
 }
diff --git a/firebase-functions/src/test/java/com/google/firebase/functions/FunctionsRegistrarTest.java b/firebase-functions/src/test/java/com/google/firebase/functions/FunctionsRegistrarTest.java
new file mode 100644
index 000000000..12d46aaec
--- /dev/null
+++ b/firebase-functions/src/test/java/com/google/firebase/functions/FunctionsRegistrarTest.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2018 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.firebase.functions;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.FirebaseOptions;
+import com.google.firebase.platforminfo.UserAgentPublisher;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+@RunWith(RobolectricTestRunner.class)
+public class FunctionsRegistrarTest {
+  @Test
+  public void getComponents_publishesLibVersionComponent() {
+    FirebaseApp app =
+        FirebaseApp.initializeApp(
+            RuntimeEnvironment.application.getApplicationContext(),
+            new FirebaseOptions.Builder()
+                .setApplicationId("1:196403931065:android:60949756fbe381ea")
+                .build());
+
+    UserAgentPublisher userAgentPublisher = app.get(UserAgentPublisher.class);
+    String actualUserAgent = userAgentPublisher.getUserAgent();
+
+    assertThat(actualUserAgent).contains("fire-fn");
+  }
+}
diff --git a/firebase-inappmessaging-display/firebase-inappmessaging-display.gradle b/firebase-inappmessaging-display/firebase-inappmessaging-display.gradle
index c441c4912..d17875974 100644
--- a/firebase-inappmessaging-display/firebase-inappmessaging-display.gradle
+++ b/firebase-inappmessaging-display/firebase-inappmessaging-display.gradle
@@ -15,11 +15,10 @@
 apply plugin: "com.android.library"
 
 android {
-    compileSdkVersion 27
-
+    compileSdkVersion project.targetSdkVersion
     defaultConfig {
         minSdkVersion 16
-        targetSdkVersion 27
+        targetSdkVersion project.targetSdkVersion
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
@@ -72,10 +71,10 @@ dependencies {
     annotationProcessor 'com.google.auto.value:auto-value:1.6'
     annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.6'
 
-    testImplementation "org.robolectric:robolectric:3.8"
+    testImplementation "org.robolectric:robolectric:$robolectricVersion"
     testImplementation "junit:junit:4.12"
     testImplementation "org.mockito:mockito-core:2.18.3"
-    testImplementation "com.google.truth:truth:0.39"
+    testImplementation "com.google.truth:truth:$googleTruthVersion"
 
     androidTestImplementation "org.mockito:mockito-core:2.18.3"
     androidTestImplementation "com.google.dexmaker:dexmaker:1.2"
@@ -83,4 +82,4 @@ dependencies {
     androidTestImplementation "com.android.support:support-annotations:27.1.1"
     androidTestImplementation "com.android.support.test:runner:1.0.2"
     androidTestImplementation "com.android.support.test:rules:1.0.2"
-}
\ No newline at end of file
+}
diff --git a/firebase-inappmessaging-display/gradle.properties b/firebase-inappmessaging-display/gradle.properties
index eb7a9437b..90ec8c308 100644
--- a/firebase-inappmessaging-display/gradle.properties
+++ b/firebase-inappmessaging-display/gradle.properties
@@ -1 +1 @@
-version=17.0.3
+version=17.0.5
diff --git a/firebase-inappmessaging-display/src/main/AndroidManifest.xml b/firebase-inappmessaging-display/src/main/AndroidManifest.xml
index 7bcd07889..9b3ec936e 100644
--- a/firebase-inappmessaging-display/src/main/AndroidManifest.xml
+++ b/firebase-inappmessaging-display/src/main/AndroidManifest.xml
@@ -1,6 +1,8 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.firebase.inappmessaging.display">
 
+  <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+  <!--<uses-sdk android:minSdkVersion="16" />-->
   <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
   <uses-permission android:name="android.permission.INTERNET" />
   <application>
diff --git a/firebase-storage/firebase-storage.gradle b/firebase-storage/firebase-storage.gradle
index 1829942e9..a1b5f9391 100644
--- a/firebase-storage/firebase-storage.gradle
+++ b/firebase-storage/firebase-storage.gradle
@@ -14,29 +14,17 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 28
-
-
-tasks.withType(org.gradle.api.tasks.testing.Test) {
-    testLogging {
-        exceptionFormat = 'full'
-        showStandardStreams = true
-        showCauses = true
-        showExceptions =true
-        showStackTraces = true
-    }
-}
-
 android {
     adbOptions {
         timeOutInMs 60 * 1000
     }
 
-    compileSdkVersion androidVersion
+    compileSdkVersion project.targetSdkVersion
     defaultConfig {
-        targetSdkVersion androidVersion
-        minSdkVersion 14
+        targetSdkVersion project.targetSdkVersion
+        minSdkVersion project.minSdkVersion
         multiDexEnabled true
+        versionName version
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
 
@@ -67,6 +55,8 @@ android {
                 srcDirs "src/test/resources"
             }
         }
+
+        testOptions.unitTests.includeAndroidResources = true
     }
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_8
@@ -83,10 +73,12 @@ dependencies {
     androidTestImplementation "com.android.support:support-annotations:$supportAnnotationsVersion"
     androidTestImplementation 'com.android.support.test:rules:1.0.2'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
-    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation "com.google.truth:truth:$googleTruthVersion"
     androidTestImplementation 'junit:junit:4.12'
 
     testImplementation 'junit:junit:4.12'
     testImplementation 'org.mockito:mockito-core:2.21.0'
-    testImplementation 'org.robolectric:robolectric:4.0-alpha-3-SNAPSHOT'
+    testImplementation "org.robolectric:robolectric:$robolectricVersion"
+    testImplementation "com.google.truth:truth:$googleTruthVersion"
+    testImplementation 'com.android.support.test:rules:1.0.2'
 }
diff --git a/firebase-storage/gradle.properties b/firebase-storage/gradle.properties
index 57bed5614..2f4cf8cf1 100644
--- a/firebase-storage/gradle.properties
+++ b/firebase-storage/gradle.properties
@@ -12,5 +12,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-version=16.0.4
-latestReleasedVersion=16.0.3
+version=16.1.0
+latestReleasedVersion=16.0.5
+android.enableUnitTestBinaryResources=true
diff --git a/firebase-storage/src/androidTest/AndroidManifest.xml b/firebase-storage/src/androidTest/AndroidManifest.xml
index 9c9ff5d2d..d379dbb27 100644
--- a/firebase-storage/src/androidTest/AndroidManifest.xml
+++ b/firebase-storage/src/androidTest/AndroidManifest.xml
@@ -14,6 +14,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.firebase.storage.integration">
+  <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+  <!--<uses-sdk android:minSdkVersion="15" android:targetSdkVersion="23" />-->
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
diff --git a/firebase-storage/src/main/AndroidManifest.xml b/firebase-storage/src/main/AndroidManifest.xml
index 69b9ce794..4645874b8 100644
--- a/firebase-storage/src/main/AndroidManifest.xml
+++ b/firebase-storage/src/main/AndroidManifest.xml
@@ -16,7 +16,16 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           xmlns:tools="http://schemas.android.com/tools"
           package="com.google.firebase.storage">
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+    <!--<uses-sdk android:minSdkVersion="14"/>-->
 
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.INTERNET" />
+
+    <application>
+        <service android:name="com.google.firebase.components.ComponentDiscoveryService">
+            <meta-data android:name="com.google.firebase.components:com.google.firebase.storage.StorageRegistrar"
+                android:value="com.google.firebase.components.ComponentRegistrar" />
+        </service>
+    </application>
 </manifest>
diff --git a/firebase-storage/src/main/java/com/google/firebase/storage/StorageRegistrar.java b/firebase-storage/src/main/java/com/google/firebase/storage/StorageRegistrar.java
new file mode 100644
index 000000000..03e811670
--- /dev/null
+++ b/firebase-storage/src/main/java/com/google/firebase/storage/StorageRegistrar.java
@@ -0,0 +1,32 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.storage;
+
+import android.support.annotation.Keep;
+import com.google.firebase.components.Component;
+import com.google.firebase.components.ComponentRegistrar;
+import com.google.firebase.platforminfo.LibraryVersionComponent;
+import java.util.Collections;
+import java.util.List;
+
+/** @hide */
+@Keep
+public class StorageRegistrar implements ComponentRegistrar {
+  @Override
+  public List<Component<?>> getComponents() {
+    return Collections.singletonList(
+        LibraryVersionComponent.create("fire-gcs", BuildConfig.VERSION_NAME));
+  }
+}
diff --git a/firebase-storage/src/main/java/com/google/firebase/storage/network/connection/package-info.java b/firebase-storage/src/main/java/com/google/firebase/storage/network/connection/package-info.java
new file mode 100644
index 000000000..87400aa82
--- /dev/null
+++ b/firebase-storage/src/main/java/com/google/firebase/storage/network/connection/package-info.java
@@ -0,0 +1,16 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/** @hide */
+package com.google.firebase.storage.network.connection;
\ No newline at end of file
diff --git a/firebase-storage/src/test/AndroidManifest.xml b/firebase-storage/src/test/AndroidManifest.xml
index 4d2ea6007..f3f3f3ba7 100644
--- a/firebase-storage/src/test/AndroidManifest.xml
+++ b/firebase-storage/src/test/AndroidManifest.xml
@@ -16,9 +16,8 @@
 <manifest package="com.firebase.storage.example"
     xmlns:android="http://schemas.android.com/apk/res/android">
 
-    <uses-sdk
-        android:minSdkVersion="14"
-        android:targetSdkVersion="21"/>
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for bazel builds-->
+    <!--<uses-sdk android:minSdkVersion="14" android:targetSdkVersion="21"/>-->
 
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
     <uses-permission android:name="android.permission.INTERNET"/>
diff --git a/firebase-storage/src/test/java/com/google/firebase/storage/DownloadTest.java b/firebase-storage/src/test/java/com/google/firebase/storage/DownloadTest.java
index c25f447bb..5343d4a1a 100644
--- a/firebase-storage/src/test/java/com/google/firebase/storage/DownloadTest.java
+++ b/firebase-storage/src/test/java/com/google/firebase/storage/DownloadTest.java
@@ -76,8 +76,8 @@ public void streamDownload() throws Exception {
         TestDownloadHelper.streamDownload(
             bitmap -> {
               assertNotNull(bitmap);
-              assertEquals(100, bitmap.getWidth());
-              assertEquals(100, bitmap.getHeight());
+              assertEquals(2560, bitmap.getWidth());
+              assertEquals(1710, bitmap.getHeight());
               completeHandlerInvoked[0] = true;
             },
             null,
@@ -162,8 +162,8 @@ public void streamDownloadWithResume() throws Exception {
         TestDownloadHelper.streamDownload(
             bitmap -> {
               assertNotNull(bitmap);
-              assertEquals(100, bitmap.getWidth());
-              assertEquals(100, bitmap.getHeight());
+              assertEquals(2560, bitmap.getWidth());
+              assertEquals(1710, bitmap.getHeight());
               completeHandlerInvoked[0] = true;
             },
             null,
diff --git a/firebase-storage/src/test/java/com/google/firebase/storage/StorageRegistrarTest.java b/firebase-storage/src/test/java/com/google/firebase/storage/StorageRegistrarTest.java
new file mode 100644
index 000000000..61afa6e59
--- /dev/null
+++ b/firebase-storage/src/test/java/com/google/firebase/storage/StorageRegistrarTest.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2018 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.firebase.storage;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.FirebaseOptions;
+import com.google.firebase.platforminfo.UserAgentPublisher;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+@RunWith(RobolectricTestRunner.class)
+public class StorageRegistrarTest {
+  @Test
+  public void getComponents_publishesLibVersionComponent() {
+    FirebaseApp app =
+        FirebaseApp.initializeApp(
+            RuntimeEnvironment.application.getApplicationContext(),
+            new FirebaseOptions.Builder()
+                .setApplicationId("1:196403931065:android:60949756fbe381ea")
+                .build());
+    UserAgentPublisher userAgentPublisher = app.get(UserAgentPublisher.class);
+    String actualUserAgent = userAgentPublisher.getUserAgent();
+
+    assertThat(actualUserAgent).contains("fire-gcs");
+  }
+}
diff --git a/gradle/googleServices.gradle b/gradle/googleServices.gradle
index 52eb58989..84b5cdb7a 100644
--- a/gradle/googleServices.gradle
+++ b/gradle/googleServices.gradle
@@ -45,7 +45,7 @@ afterEvaluate {
 // ./gradlew test at the root project).
 def isTesting = getGradle().getStartParameter().getTaskNames().any({ String taskName ->
     def hasProjectTestTask = taskName.contains("$name") &&  ['AndroidTest', 'connectedCheck'].any({ taskName.contains(it)})
-    return hasProjectTestTask || taskName == 'connectedCheck'
+    return hasProjectTestTask || taskName.contains('connectedCheck')
 })
 
 if (isTesting) {
diff --git a/protolite-well-known-types/gradle.properties b/protolite-well-known-types/gradle.properties
index fc10b3a86..c763f6446 100644
--- a/protolite-well-known-types/gradle.properties
+++ b/protolite-well-known-types/gradle.properties
@@ -1,2 +1,2 @@
-version=16.1.0
-latestReleasedVersion=16.0.0
+version=16.0.2
+latestReleasedVersion=16.0.1
diff --git a/protolite-well-known-types/protolite-well-known-types.gradle b/protolite-well-known-types/protolite-well-known-types.gradle
index f7962ff7c..fd54bd8bf 100644
--- a/protolite-well-known-types/protolite-well-known-types.gradle
+++ b/protolite-well-known-types/protolite-well-known-types.gradle
@@ -40,11 +40,10 @@ protobuf {
     }
 }
 android {
-    compileSdkVersion 28
-
+    compileSdkVersion project.targetSdkVersion
     defaultConfig {
-        minSdkVersion 14
-        targetSdkVersion 28
+        targetSdkVersion project.targetSdkVersion
+        minSdkVersion project.minSdkVersion
         versionCode 1
         versionName '1.0'
     }
diff --git a/root-project.gradle b/root-project.gradle
index 45b552d74..7114ae673 100644
--- a/root-project.gradle
+++ b/root-project.gradle
@@ -13,10 +13,9 @@
 // limitations under the License.
 
 import com.google.firebase.gradle.plugins.license.LicenseResolverPlugin
-import groovy.io.FileType
 
 buildscript {
-
+    ext.kotlinVersion = '1.3.20'
     repositories {
         mavenLocal()
         google()
@@ -36,17 +35,31 @@ buildscript {
         classpath 'com.google.gms:google-services:4.1.0'
         classpath 'me.tatarka:gradle-retrolambda:3.7.0'
         classpath 'digital.wup:android-maven-publish:3.6.2'
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
     }
 }
 
+apply from: 'sdkProperties.gradle'
+
 ext {
     playServicesVersion = '16.0.1'
     supportAnnotationsVersion = '28.0.0'
     errorproneVersion = '2.3.2'
     errorproneJavacVersion = '9+181-r4173-1'
+    googleTruthVersion = '0.40'
+    robolectricVersion = '4.1'
 }
 
 apply plugin: com.google.firebase.gradle.plugins.publish.PublishingPlugin
+apply plugin: com.google.firebase.gradle.plugins.ci.ContinuousIntegrationPlugin
+apply plugin: com.google.firebase.gradle.plugins.ci.metrics.MetricsPlugin
+
+firebaseContinuousIntegration {
+    ignorePaths = [
+            /.*\.gitignore$/,
+            /.*.md$/,
+    ]
+}
 
 configure(subprojects) {
     repositories {
@@ -147,23 +160,7 @@ configure(subprojects) {
             sub.android { buildTypes { release { consumerProguardFiles 'proguard.txt' } } }
         }
 
-//        sub.apply plugin: LicenseResolverPlugin
-//        sub.thirdPartyLicenses {
-//            def root = "file://$rootDir/third_party/licenses"
-//
-//            add 'CCTZ', "$root/apache-2.0.txt"
-//            add 'ICU4C', "$root/icu.txt"
-//            add 'JSR 305', "$root/jsr305.txt"
-//            add 'PCRE', "$root/pcre.txt"
-//            add 'Protobuf Nano', "$root/nanoproto.txt"
-//            add 'RE2', "$root/re2.txt"
-//            add 'STL', "$root/sgi-stl.txt"
-//            add 'UTF', "$root/utf.txt"
-//            add 'darts_clone', "$root/darts_clone.txt"
-//            add 'flatbuffers', "$root/apache-2.0.txt"
-//            add 'safeparcel', "$root/apache-2.0.txt"
-//            add 'zlib', "$root/zlib.txt"
-//        }
+        sub.apply plugin: LicenseResolverPlugin
     }
 }
 
@@ -171,23 +168,3 @@ configure(subprojects) {
 task clean(type: Delete) {
     delete rootProject.buildDir
 }
-
-task copyrightCheck {
-    doLast {
-        def nonConformingFiles = []
-        projectDir.traverse(type: FileType.FILES,
-                nameFilter: ~/.+\.(java|groovy|sh|proto|gradle|py)$/,
-                excludeFilter: ~/(^\.git|.*\/build\/.*)/) { File currentFile ->
-
-            if (!currentFile.any { it.matches(/.*Copyright [0-9]{4} Google LLC/) }) {
-                nonConformingFiles.add(currentFile.path - projectDir.path - '/')
-            }
-
-        }
-
-        if (nonConformingFiles) {
-            throw new GradleException(
-                    "Add copyright and license header to the following files:\n${nonConformingFiles.join('\n')}.")
-        }
-    }
-}
diff --git a/sdkProperties.gradle b/sdkProperties.gradle
new file mode 100644
index 000000000..4b9b817ac
--- /dev/null
+++ b/sdkProperties.gradle
@@ -0,0 +1,18 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+ext {
+    targetSdkVersion = 28
+    minSdkVersion = 14
+}
\ No newline at end of file
diff --git a/subprojects.cfg b/subprojects.cfg
index 84e2c4cd5..17c46bd55 100644
--- a/subprojects.cfg
+++ b/subprojects.cfg
@@ -1,4 +1,5 @@
 firebase-common
+firebase-common-ktx
 firebase-database
 firebase-database-collection
 firebase-firestore
diff --git a/test-apps/build.gradle b/test-apps/build.gradle
index bf5926566..27f976615 100644
--- a/test-apps/build.gradle
+++ b/test-apps/build.gradle
@@ -31,6 +31,8 @@ plugins {
     id 'com.github.ben-manes.versions' version '0.20.0'
 }
 
+apply from: '../sdkProperties.gradle'
+
 allprojects {
     ext.testBuildType = project.getProperties().get("testBuildType", "debug")
 
diff --git a/test-apps/database-test-app/build.gradle b/test-apps/database-test-app/build.gradle
index 37864e4b1..a877ec813 100644
--- a/test-apps/database-test-app/build.gradle
+++ b/test-apps/database-test-app/build.gradle
@@ -18,12 +18,12 @@ apply plugin: 'com.android.application'
 
 android {
     testBuildType = project.testBuildType
-    compileSdkVersion 28
+    compileSdkVersion project.targetSdkVersion
 
     defaultConfig {
         applicationId "com.google.firebase.testapps.database"
         minSdkVersion 16
-        targetSdkVersion 28
+        targetSdkVersion project.targetSdkVersion
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
diff --git a/test-apps/firestore-test-app/build.gradle b/test-apps/firestore-test-app/build.gradle
index 83b3185af..8d59aa034 100644
--- a/test-apps/firestore-test-app/build.gradle
+++ b/test-apps/firestore-test-app/build.gradle
@@ -17,13 +17,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    testBuildType = project.getProperties().get("testBuildType", "debug")
-    compileSdkVersion 28
+    testBuildType = project.testBuildType
+    compileSdkVersion project.targetSdkVersion
 
     defaultConfig {
         applicationId "com.google.firebase.testapps.firestore"
         minSdkVersion 16
-        targetSdkVersion 28
+        targetSdkVersion project.targetSdkVersion
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
diff --git a/test-apps/functions-test-app/build.gradle b/test-apps/functions-test-app/build.gradle
index 23d0ef60a..d213d280b 100644
--- a/test-apps/functions-test-app/build.gradle
+++ b/test-apps/functions-test-app/build.gradle
@@ -18,12 +18,12 @@ apply plugin: 'com.android.application'
 
 android {
     testBuildType = project.testBuildType
-    compileSdkVersion 28
+    compileSdkVersion project.targetSdkVersion
 
     defaultConfig {
         applicationId "com.google.firebase.testapps.functions"
         minSdkVersion 16
-        targetSdkVersion 28
+        targetSdkVersion project.targetSdkVersion
         versionCode 1
         versionName "1.0"
         testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
diff --git a/test-apps/functions-test-app/functions/package-lock.json b/test-apps/functions-test-app/functions/package-lock.json
index b4190f180..6093b8515 100644
--- a/test-apps/functions-test-app/functions/package-lock.json
+++ b/test-apps/functions-test-app/functions/package-lock.json
@@ -5,17 +5,17 @@
   "dependencies": {
     "@firebase/app": {
       "version": "0.1.10",
-      "resolved": "http://registry.npmjs.org/@firebase/app/-/app-0.1.10.tgz",
+      "resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.1.10.tgz",
       "integrity": "sha512-2GTXt3b2QZXkmx6/5nNJq+pEN/VTjAG55MFJS1WMoLVZkwKuNpWNk65QVyPaoL88x1iHtuLqAMFgJUOnhOg+Pw==",
       "requires": {
         "@firebase/app-types": "0.1.2",
         "@firebase/util": "0.1.10",
-        "tslib": "^1.9.0"
+        "tslib": "1.9.3"
       }
     },
     "@firebase/app-types": {
       "version": "0.1.2",
-      "resolved": "http://registry.npmjs.org/@firebase/app-types/-/app-types-0.1.2.tgz",
+      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.1.2.tgz",
       "integrity": "sha512-bCIZGeMtP0ibrXNNaU214/1tRNw0jHnir/cfiAao1gjUyIS7RzOTQoH+zbwPJNEwUqJ0T3ykw/Tv4/khGqbVBg=="
     },
     "@firebase/database": {
@@ -43,7 +43,7 @@
           "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.1.tgz",
           "integrity": "sha1-8O/hjE9W5PQK/H4Gxxn9XuYYjzg=",
           "requires": {
-            "websocket-driver": ">=0.5.1"
+            "websocket-driver": "0.7.0"
           }
         },
         "tslib": {
@@ -65,68 +65,68 @@
     },
     "@firebase/util": {
       "version": "0.1.10",
-      "resolved": "http://registry.npmjs.org/@firebase/util/-/util-0.1.10.tgz",
+      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-0.1.10.tgz",
       "integrity": "sha512-XEogRfUQBZ4T37TMq/3ZbuiTdRAKX8hF3TgJglUZNCJf/6QnQ+jlupCuMAXBqCGfw2Mw0m2matoCUBWpsyevOA==",
       "requires": {
-        "tslib": "^1.9.0"
+        "tslib": "1.9.3"
       }
     },
     "@google-cloud/common": {
       "version": "0.17.0",
-      "resolved": "http://registry.npmjs.org/@google-cloud/common/-/common-0.17.0.tgz",
+      "resolved": "https://registry.npmjs.org/@google-cloud/common/-/common-0.17.0.tgz",
       "integrity": "sha512-HRZLSU762E6HaKoGfJGa8W95yRjb9rY7LePhjaHK9ILAnFacMuUGVamDbTHu1csZomm1g3tZTtXfX/aAhtie/Q==",
       "requires": {
-        "array-uniq": "^1.0.3",
-        "arrify": "^1.0.1",
-        "concat-stream": "^1.6.0",
-        "create-error-class": "^3.0.2",
-        "duplexify": "^3.5.0",
-        "ent": "^2.2.0",
-        "extend": "^3.0.1",
-        "google-auto-auth": "^0.10.0",
-        "is": "^3.2.0",
+        "array-uniq": "1.0.3",
+        "arrify": "1.0.1",
+        "concat-stream": "1.6.2",
+        "create-error-class": "3.0.2",
+        "duplexify": "3.7.1",
+        "ent": "2.2.0",
+        "extend": "3.0.2",
+        "google-auto-auth": "0.10.1",
+        "is": "3.3.0",
         "log-driver": "1.2.7",
-        "methmeth": "^1.1.0",
-        "modelo": "^4.2.0",
-        "request": "^2.79.0",
-        "retry-request": "^3.0.0",
-        "split-array-stream": "^1.0.0",
-        "stream-events": "^1.0.1",
-        "string-format-obj": "^1.1.0",
-        "through2": "^2.0.3"
+        "methmeth": "1.1.0",
+        "modelo": "4.2.3",
+        "request": "2.88.0",
+        "retry-request": "3.3.2",
+        "split-array-stream": "1.0.3",
+        "stream-events": "1.0.5",
+        "string-format-obj": "1.1.1",
+        "through2": "2.0.5"
       }
     },
     "@google-cloud/common-grpc": {
       "version": "0.6.1",
-      "resolved": "http://registry.npmjs.org/@google-cloud/common-grpc/-/common-grpc-0.6.1.tgz",
+      "resolved": "https://registry.npmjs.org/@google-cloud/common-grpc/-/common-grpc-0.6.1.tgz",
       "integrity": "sha512-pspOZVfmrCTP0svTNwFE8nYJsQp5rTUaeUpJwpgslDk5tDWFbYT3dZkANbiURcTSq0mo6hZmd+M5rPIzWMVUmA==",
       "requires": {
-        "@google-cloud/common": "^0.17.0",
-        "dot-prop": "^4.2.0",
-        "duplexify": "^3.5.1",
-        "extend": "^3.0.1",
-        "grpc": "^1.10.0",
-        "is": "^3.2.0",
-        "modelo": "^4.2.0",
-        "retry-request": "^3.3.1",
-        "through2": "^2.0.3"
+        "@google-cloud/common": "0.17.0",
+        "dot-prop": "4.2.0",
+        "duplexify": "3.7.1",
+        "extend": "3.0.2",
+        "grpc": "1.18.0",
+        "is": "3.3.0",
+        "modelo": "4.2.3",
+        "retry-request": "3.3.2",
+        "through2": "2.0.5"
       }
     },
     "@google-cloud/firestore": {
       "version": "0.13.1",
-      "resolved": "http://registry.npmjs.org/@google-cloud/firestore/-/firestore-0.13.1.tgz",
+      "resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-0.13.1.tgz",
       "integrity": "sha512-70PPCDg++AGx4OGW/FhDoDtIh4Z2WuwPMkHkvFWNvEDGghCxGrYgRvpCsfcZBU0TLYpcbsndrweLp972cwItrQ==",
       "requires": {
-        "@google-cloud/common": "^0.17.0",
-        "@google-cloud/common-grpc": "^0.6.0",
-        "bun": "^0.0.12",
-        "deep-equal": "^1.0.1",
-        "extend": "^3.0.1",
-        "functional-red-black-tree": "^1.0.1",
-        "google-gax": "^0.16.0",
-        "is": "^3.2.1",
-        "safe-buffer": "^5.1.1",
-        "through2": "^2.0.3"
+        "@google-cloud/common": "0.17.0",
+        "@google-cloud/common-grpc": "0.6.1",
+        "bun": "0.0.12",
+        "deep-equal": "1.0.1",
+        "extend": "3.0.2",
+        "functional-red-black-tree": "1.0.1",
+        "google-gax": "0.16.1",
+        "is": "3.3.0",
+        "safe-buffer": "5.1.2",
+        "through2": "2.0.5"
       }
     },
     "@google-cloud/storage": {
@@ -134,27 +134,27 @@
       "resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-1.7.0.tgz",
       "integrity": "sha512-QaAxzCkbhspwajoaEnT0GcnQcpjPRcBrHYuQsXtD05BtOJgVnHCLXSsfUiRdU0nVpK+Thp7+sTkQ0fvk5PanKg==",
       "requires": {
-        "@google-cloud/common": "^0.17.0",
-        "arrify": "^1.0.0",
-        "async": "^2.0.1",
-        "compressible": "^2.0.12",
-        "concat-stream": "^1.5.0",
-        "create-error-class": "^3.0.2",
-        "duplexify": "^3.5.0",
-        "extend": "^3.0.0",
-        "gcs-resumable-upload": "^0.10.2",
-        "hash-stream-validation": "^0.2.1",
-        "is": "^3.0.1",
-        "mime": "^2.2.0",
-        "mime-types": "^2.0.8",
-        "once": "^1.3.1",
-        "pumpify": "^1.5.1",
-        "request": "^2.85.0",
-        "safe-buffer": "^5.1.1",
-        "snakeize": "^0.1.0",
-        "stream-events": "^1.0.1",
-        "through2": "^2.0.0",
-        "xdg-basedir": "^3.0.0"
+        "@google-cloud/common": "0.17.0",
+        "arrify": "1.0.1",
+        "async": "2.6.2",
+        "compressible": "2.0.15",
+        "concat-stream": "1.6.2",
+        "create-error-class": "3.0.2",
+        "duplexify": "3.7.1",
+        "extend": "3.0.2",
+        "gcs-resumable-upload": "0.10.2",
+        "hash-stream-validation": "0.2.1",
+        "is": "3.3.0",
+        "mime": "2.4.0",
+        "mime-types": "2.1.22",
+        "once": "1.4.0",
+        "pumpify": "1.5.1",
+        "request": "2.88.0",
+        "safe-buffer": "5.1.2",
+        "snakeize": "0.1.0",
+        "stream-events": "1.0.5",
+        "through2": "2.0.5",
+        "xdg-basedir": "3.0.0"
       }
     },
     "@mrmlnc/readdir-enhanced": {
@@ -162,14 +162,14 @@
       "resolved": "https://registry.npmjs.org/@mrmlnc/readdir-enhanced/-/readdir-enhanced-2.2.1.tgz",
       "integrity": "sha512-bPHp6Ji8b41szTOcaP63VlnbbO5Ny6dwAATtY6JTjh5N2OLrb5Qk/Th5cRkRQhkWCt+EJsYrNB0MiL+Gpn6e3g==",
       "requires": {
-        "call-me-maybe": "^1.0.1",
-        "glob-to-regexp": "^0.3.0"
+        "call-me-maybe": "1.0.1",
+        "glob-to-regexp": "0.3.0"
       }
     },
     "@nodelib/fs.stat": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-1.1.2.tgz",
-      "integrity": "sha512-yprFYuno9FtNsSHVlSWd+nRlmGoAbqbeCwOryP6sC/zoCjhpArcRMYp19EvpSUSizJAlsXEwJv+wcWS9XaXdMw=="
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-1.1.3.tgz",
+      "integrity": "sha512-shAmDyaQC4H92APFoIaVDHCx5bStIocgvbwQyxPRrbUY20V1EYTbSDchWbuwlMG3V17cprZhA6+78JfB+3DTPw=="
     },
     "@protobufjs/aspromise": {
       "version": "1.1.2",
@@ -196,8 +196,8 @@
       "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
       "integrity": "sha1-upn7WYYUr2VwDBYZ/wbUVLDYTEU=",
       "requires": {
-        "@protobufjs/aspromise": "^1.1.1",
-        "@protobufjs/inquire": "^1.1.0"
+        "@protobufjs/aspromise": "1.1.2",
+        "@protobufjs/inquire": "1.1.0"
       }
     },
     "@protobufjs/float": {
@@ -230,8 +230,8 @@
       "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.17.0.tgz",
       "integrity": "sha512-a2+YeUjPkztKJu5aIF2yArYFQQp8d51wZ7DavSHjFuY1mqVgidGyzEQ41JIVNy82fXj8yPgy2vJmfIywgESW6w==",
       "requires": {
-        "@types/connect": "*",
-        "@types/node": "*"
+        "@types/connect": "3.4.32",
+        "@types/node": "8.10.40"
       }
     },
     "@types/caseless": {
@@ -244,7 +244,7 @@
       "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.32.tgz",
       "integrity": "sha512-4r8qa0quOvh7lGD0pre62CAb1oni1OO6ecJLGCezTmhQ8Fz50Arx9RUszryR8KlgK6avuSXvviL6yWyViQABOg==",
       "requires": {
-        "@types/node": "*"
+        "@types/node": "8.10.40"
       }
     },
     "@types/cors": {
@@ -252,32 +252,26 @@
       "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.4.tgz",
       "integrity": "sha512-ipZjBVsm2tF/n8qFGOuGBkUij9X9ZswVi9G3bx/6dz7POpVa6gVHcj1wsX/LVEn9MMF41fxK/PnZPPoTD1UFPw==",
       "requires": {
-        "@types/express": "*"
+        "@types/express": "4.16.1"
       }
     },
-    "@types/events": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/@types/events/-/events-1.2.0.tgz",
-      "integrity": "sha512-KEIlhXnIutzKwRbQkGWb/I4HFqBuUykAdHgDED6xqwXJfONCjF5VoE0cXEiurh3XauygxzeDzgtXUqvLkxFzzA=="
-    },
     "@types/express": {
-      "version": "4.16.0",
-      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.16.0.tgz",
-      "integrity": "sha512-TtPEYumsmSTtTetAPXlJVf3kEqb6wZK0bZojpJQrnD/djV4q1oB6QQ8aKvKqwNPACoe02GNiy5zDzcYivR5Z2w==",
+      "version": "4.16.1",
+      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.16.1.tgz",
+      "integrity": "sha512-V0clmJow23WeyblmACoxbHBu2JKlE5TiIme6Lem14FnPW9gsttyHtk6wq7njcdIWH1njAaFgR8gW09lgY98gQg==",
       "requires": {
-        "@types/body-parser": "*",
-        "@types/express-serve-static-core": "*",
-        "@types/serve-static": "*"
+        "@types/body-parser": "1.17.0",
+        "@types/express-serve-static-core": "4.16.1",
+        "@types/serve-static": "1.13.2"
       }
     },
     "@types/express-serve-static-core": {
-      "version": "4.16.0",
-      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.16.0.tgz",
-      "integrity": "sha512-lTeoCu5NxJU4OD9moCgm0ESZzweAx0YqsAcab6OB0EB3+As1OaHtKnaGJvcngQxYsi9UNv0abn4/DRavrRxt4w==",
+      "version": "4.16.1",
+      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.16.1.tgz",
+      "integrity": "sha512-QgbIMRU1EVRry5cIu1ORCQP4flSYqLM1lS5LYyGWfKnFT3E58f0gKto7BR13clBFVrVZ0G0rbLZ1hUpSkgQQOA==",
       "requires": {
-        "@types/events": "*",
-        "@types/node": "*",
-        "@types/range-parser": "*"
+        "@types/node": "8.10.40",
+        "@types/range-parser": "1.2.3"
       }
     },
     "@types/form-data": {
@@ -285,7 +279,7 @@
       "resolved": "https://registry.npmjs.org/@types/form-data/-/form-data-2.2.1.tgz",
       "integrity": "sha512-JAMFhOaHIciYVh8fb5/83nmuO/AHwmto+Hq7a9y8FzLDcC1KCU344XDOMEmahnrTFlHjgh4L0WJFczNIX2GxnQ==",
       "requires": {
-        "@types/node": "*"
+        "@types/node": "8.10.40"
       }
     },
     "@types/google-cloud__storage": {
@@ -293,8 +287,8 @@
       "resolved": "https://registry.npmjs.org/@types/google-cloud__storage/-/google-cloud__storage-1.7.2.tgz",
       "integrity": "sha512-RaQJ7+Ht20MRYJu7mgKBpbVNZIPneztKIl/DUKacRC6A8mXRsJfgDdPA7indHmJGIgm+hzUTj44+A3RyuuYZhg==",
       "requires": {
-        "@types/node": "*",
-        "@types/request": "*"
+        "@types/node": "8.10.40",
+        "@types/request": "2.48.1"
       }
     },
     "@types/jsonwebtoken": {
@@ -302,13 +296,13 @@
       "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-7.2.8.tgz",
       "integrity": "sha512-XENN3YzEB8D6TiUww0O8SRznzy1v+77lH7UmuN54xq/IHIsyWjWOzZuFFTtoiRuaE782uAoRwBe/wwow+vQXZw==",
       "requires": {
-        "@types/node": "*"
+        "@types/node": "8.10.40"
       }
     },
     "@types/lodash": {
-      "version": "4.14.116",
-      "resolved": "https://registry.npmjs.org/@types/lodash/-/lodash-4.14.116.tgz",
-      "integrity": "sha512-lRnAtKnxMXcYYXqOiotTmJd74uawNWuPnsnPrrO7HiFuE3npE2iQhfABatbYDyxTNqZNuXzcKGhw37R7RjBFLg=="
+      "version": "4.14.121",
+      "resolved": "https://registry.npmjs.org/@types/lodash/-/lodash-4.14.121.tgz",
+      "integrity": "sha512-ORj7IBWj13iYufXt/VXrCNMbUuCTJfhzme5kx9U/UtcIPdJYuvPDUAlHlbNhz/8lKCLy9XGIZnGrqXOtQbPGoQ=="
     },
     "@types/long": {
       "version": "4.0.0",
@@ -316,29 +310,29 @@
       "integrity": "sha512-1w52Nyx4Gq47uuu0EVcsHBxZFJgurQ+rTKS3qMHxR1GY2T8c2AJYd6vZoZ9q1rupaDjU0yT+Jc2XTyXkjeMA+Q=="
     },
     "@types/mime": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-2.0.0.tgz",
-      "integrity": "sha512-A2TAGbTFdBw9azHbpVd+/FkdW2T6msN1uct1O9bH3vTerEHKZhTXJUQXy+hNq1B0RagfU8U+KBdqiZpxjhOUQA=="
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-2.0.1.tgz",
+      "integrity": "sha512-FwI9gX75FgVBJ7ywgnq/P7tw+/o1GUbtP0KzbtusLigAOgIgNISRK0ZPl4qertvXSIE8YbsVJueQ90cDt9YYyw=="
     },
     "@types/node": {
-      "version": "8.10.29",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-8.10.29.tgz",
-      "integrity": "sha512-zbteaWZ2mdduacm0byELwtRyhYE40aK+pAanQk415gr1eRuu67x7QGOLmn8jz5zI8LDK7d0WI/oT6r5Trz4rzQ=="
+      "version": "8.10.40",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-8.10.40.tgz",
+      "integrity": "sha512-RRSjdwz63kS4u7edIwJUn8NqKLLQ6LyqF/X4+4jp38MBT3Vwetewi2N4dgJEshLbDwNgOJXNYoOwzVZUSSLhkQ=="
     },
     "@types/range-parser": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.2.tgz",
-      "integrity": "sha512-HtKGu+qG1NPvYe1z7ezLsyIaXYyi8SoAVqWDZgDQ8dLrsZvSzUNCwZyfX33uhWxL/SU0ZDQZ3nwZ0nimt507Kw=="
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.3.tgz",
+      "integrity": "sha512-ewFXqrQHlFsgc09MK5jP5iR7vumV/BYayNC6PgJO2LPe8vrnNFyjQjSppfEngITi0qvfKtzFvgKymGheFM9UOA=="
     },
     "@types/request": {
-      "version": "2.47.1",
-      "resolved": "https://registry.npmjs.org/@types/request/-/request-2.47.1.tgz",
-      "integrity": "sha512-TV3XLvDjQbIeVxJ1Z3oCTDk/KuYwwcNKVwz2YaT0F5u86Prgc4syDAp6P96rkTQQ4bIdh+VswQIC9zS6NjY7/g==",
+      "version": "2.48.1",
+      "resolved": "https://registry.npmjs.org/@types/request/-/request-2.48.1.tgz",
+      "integrity": "sha512-ZgEZ1TiD+KGA9LiAAPPJL68Id2UWfeSO62ijSXZjFJArVV+2pKcsVHmrcu+1oiE3q6eDGiFiSolRc4JHoerBBg==",
       "requires": {
-        "@types/caseless": "*",
-        "@types/form-data": "*",
-        "@types/node": "*",
-        "@types/tough-cookie": "*"
+        "@types/caseless": "0.12.1",
+        "@types/form-data": "2.2.1",
+        "@types/node": "8.10.40",
+        "@types/tough-cookie": "2.3.5"
       }
     },
     "@types/serve-static": {
@@ -346,21 +340,29 @@
       "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.13.2.tgz",
       "integrity": "sha512-/BZ4QRLpH/bNYgZgwhKEh+5AsboDBcUdlBYgzoLX0fpj3Y2gp6EApyOlM3bK53wQS/OE1SrdSYBAbux2D1528Q==",
       "requires": {
-        "@types/express-serve-static-core": "*",
-        "@types/mime": "*"
+        "@types/express-serve-static-core": "4.16.1",
+        "@types/mime": "2.0.1"
       }
     },
     "@types/tough-cookie": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-2.3.3.tgz",
-      "integrity": "sha512-MDQLxNFRLasqS4UlkWMSACMKeSm1x4Q3TxzUC7KQUsh6RK1ZrQ0VEyE3yzXcBu+K8ejVj4wuX32eUG02yNp+YQ=="
+      "version": "2.3.5",
+      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-2.3.5.tgz",
+      "integrity": "sha512-SCcK7mvGi3+ZNz833RRjFIxrn4gI1PPR3NtuIS+6vMkvmsGjosqTJwRt5bAEFLRz+wtJMWv8+uOnZf2hi2QXTg=="
+    },
+    "abort-controller": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-2.0.2.tgz",
+      "integrity": "sha512-JXEYGxxMwiNl9EUdLysK0K0DwB7ENw6KeeaLHgofijTfJYPB/vOer3Mb+IcP913dCfWiQsd05MmVNl0H5PanrQ==",
+      "requires": {
+        "event-target-shim": "5.0.0"
+      }
     },
     "accepts": {
       "version": "1.3.5",
       "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.5.tgz",
       "integrity": "sha1-63d99gEXI6OxTopywIBcjoZ0a9I=",
       "requires": {
-        "mime-types": "~2.1.18",
+        "mime-types": "2.1.22",
         "negotiator": "0.6.1"
       }
     },
@@ -374,15 +376,23 @@
       "resolved": "https://registry.npmjs.org/acorn-es7-plugin/-/acorn-es7-plugin-1.1.7.tgz",
       "integrity": "sha1-8u4fMiipDurRJF+asZIusucdM2s="
     },
+    "agent-base": {
+      "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-4.2.1.tgz",
+      "integrity": "sha512-JVwXMr9nHYTUXsBFKUqhJwvlcYU/blreOEUkhNR2eXZIvwd+c+o5V4MgDPKWnMS/56awN3TRzIP+KoPn+roQtg==",
+      "requires": {
+        "es6-promisify": "5.0.0"
+      }
+    },
     "ajv": {
-      "version": "5.5.2",
-      "resolved": "https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz",
-      "integrity": "sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU=",
+      "version": "6.9.1",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.9.1.tgz",
+      "integrity": "sha512-XDN92U311aINL77ieWHmqCcNlwjoP5cHXDxIxbf2MaPYuCXOHS7gHH8jktxeK5omgd52XbSTX6a4Piwd1pQmzA==",
       "requires": {
-        "co": "^4.6.0",
-        "fast-deep-equal": "^1.0.0",
-        "fast-json-stable-stringify": "^2.0.0",
-        "json-schema-traverse": "^0.3.0"
+        "fast-deep-equal": "2.0.1",
+        "fast-json-stable-stringify": "2.0.0",
+        "json-schema-traverse": "0.4.1",
+        "uri-js": "4.2.2"
       }
     },
     "ansi-regex": {
@@ -420,7 +430,7 @@
       "resolved": "https://registry.npmjs.org/array-union/-/array-union-1.0.2.tgz",
       "integrity": "sha1-mjRBDk9OPaI96jdb5b5w8kd47Dk=",
       "requires": {
-        "array-uniq": "^1.0.1"
+        "array-uniq": "1.0.3"
       }
     },
     "array-uniq": {
@@ -443,8 +453,8 @@
       "resolved": "https://registry.npmjs.org/ascli/-/ascli-1.0.1.tgz",
       "integrity": "sha1-vPpZdKYvGOgcq660lzKrSoj5Brw=",
       "requires": {
-        "colour": "~0.7.1",
-        "optjs": "~3.2.2"
+        "colour": "0.7.1",
+        "optjs": "3.2.2"
       }
     },
     "asn1": {
@@ -452,7 +462,7 @@
       "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.4.tgz",
       "integrity": "sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==",
       "requires": {
-        "safer-buffer": "~2.1.0"
+        "safer-buffer": "2.1.2"
       }
     },
     "assert-plus": {
@@ -466,11 +476,11 @@
       "integrity": "sha1-WWZ/QfrdTyDMvCu5a41Pf3jsA2c="
     },
     "async": {
-      "version": "2.6.1",
-      "resolved": "https://registry.npmjs.org/async/-/async-2.6.1.tgz",
-      "integrity": "sha512-fNEiL2+AZt6AlAw/29Cr0UDe4sRAHCpEHh54WMz+Bb7QfNcFw4h3loofyJpLeQs4Yx7yuqu/2dLgM5hKOs6HlQ==",
+      "version": "2.6.2",
+      "resolved": "https://registry.npmjs.org/async/-/async-2.6.2.tgz",
+      "integrity": "sha512-H1qVYh1MYhEEFLsP97cVKqCGo7KfCyTt6uEWqsTBr9SO84oK9Uwbyd/yCW+6rKJLHksBNUVWZDAjfS+Ccx0Bbg==",
       "requires": {
-        "lodash": "^4.17.10"
+        "lodash": "4.17.11"
       }
     },
     "asynckit": {
@@ -495,19 +505,19 @@
     },
     "axios": {
       "version": "0.18.0",
-      "resolved": "http://registry.npmjs.org/axios/-/axios-0.18.0.tgz",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-0.18.0.tgz",
       "integrity": "sha1-MtU+SFHv3AoRmTts0AB4nXDAUQI=",
       "requires": {
-        "follow-redirects": "^1.3.0",
-        "is-buffer": "^1.1.5"
+        "follow-redirects": "1.7.0",
+        "is-buffer": "1.1.6"
       }
     },
     "bad-words": {
-      "version": "1.6.4",
-      "resolved": "https://registry.npmjs.org/bad-words/-/bad-words-1.6.4.tgz",
-      "integrity": "sha512-L/ya7OHAMS/v7Ci3Nu5BVpHvJmMA7nytjloMbse0VkTvJ+kvQaSwaRMEethPQmKd3UALfS1MJF49YA1+X49KBw==",
+      "version": "1.6.5",
+      "resolved": "https://registry.npmjs.org/bad-words/-/bad-words-1.6.5.tgz",
+      "integrity": "sha512-KzDrzFtzS8Z+v4I+KuanePuaj7g6aRms2WYQOt7n+UugfqMPheYS7zcyTypokxMno2Ss6xfo062ya1aVrviB2g==",
       "requires": {
-        "badwords-list": "^1.0.0"
+        "badwords-list": "1.0.0"
       }
     },
     "badwords-list": {
@@ -525,13 +535,13 @@
       "resolved": "https://registry.npmjs.org/base/-/base-0.11.2.tgz",
       "integrity": "sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==",
       "requires": {
-        "cache-base": "^1.0.1",
-        "class-utils": "^0.3.5",
-        "component-emitter": "^1.2.1",
-        "define-property": "^1.0.0",
-        "isobject": "^3.0.1",
-        "mixin-deep": "^1.2.0",
-        "pascalcase": "^0.1.1"
+        "cache-base": "1.0.1",
+        "class-utils": "0.3.6",
+        "component-emitter": "1.2.1",
+        "define-property": "1.0.0",
+        "isobject": "3.0.1",
+        "mixin-deep": "1.3.1",
+        "pascalcase": "0.1.1"
       },
       "dependencies": {
         "define-property": {
@@ -539,7 +549,7 @@
           "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
           "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
           "requires": {
-            "is-descriptor": "^1.0.0"
+            "is-descriptor": "1.0.2"
           }
         },
         "is-accessor-descriptor": {
@@ -547,7 +557,7 @@
           "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
           "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
           "requires": {
-            "kind-of": "^6.0.0"
+            "kind-of": "6.0.2"
           }
         },
         "is-data-descriptor": {
@@ -555,7 +565,7 @@
           "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
           "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
           "requires": {
-            "kind-of": "^6.0.0"
+            "kind-of": "6.0.2"
           }
         },
         "is-descriptor": {
@@ -563,9 +573,9 @@
           "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
           "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
           "requires": {
-            "is-accessor-descriptor": "^1.0.0",
-            "is-data-descriptor": "^1.0.0",
-            "kind-of": "^6.0.2"
+            "is-accessor-descriptor": "1.0.0",
+            "is-data-descriptor": "1.0.0",
+            "kind-of": "6.0.2"
           }
         }
       }
@@ -574,26 +584,25 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
       "integrity": "sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
-      "optional": true,
       "requires": {
-        "tweetnacl": "^0.14.3"
+        "tweetnacl": "0.14.5"
       }
     },
     "body-parser": {
-      "version": "1.18.2",
-      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.2.tgz",
-      "integrity": "sha1-h2eKGdhLR9hZuDGZvVm84iKxBFQ=",
+      "version": "1.18.3",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz",
+      "integrity": "sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ=",
       "requires": {
         "bytes": "3.0.0",
-        "content-type": "~1.0.4",
+        "content-type": "1.0.4",
         "debug": "2.6.9",
-        "depd": "~1.1.1",
-        "http-errors": "~1.6.2",
-        "iconv-lite": "0.4.19",
-        "on-finished": "~2.3.0",
-        "qs": "6.5.1",
-        "raw-body": "2.3.2",
-        "type-is": "~1.6.15"
+        "depd": "1.1.2",
+        "http-errors": "1.6.3",
+        "iconv-lite": "0.4.23",
+        "on-finished": "2.3.0",
+        "qs": "6.5.2",
+        "raw-body": "2.3.3",
+        "type-is": "1.6.16"
       },
       "dependencies": {
         "debug": {
@@ -604,10 +613,10 @@
             "ms": "2.0.0"
           }
         },
-        "qs": {
-          "version": "6.5.1",
-          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.1.tgz",
-          "integrity": "sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="
+        "ms": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
         }
       }
     },
@@ -616,7 +625,7 @@
       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
       "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
       "requires": {
-        "balanced-match": "^1.0.0",
+        "balanced-match": "1.0.0",
         "concat-map": "0.0.1"
       }
     },
@@ -625,16 +634,16 @@
       "resolved": "https://registry.npmjs.org/braces/-/braces-2.3.2.tgz",
       "integrity": "sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==",
       "requires": {
-        "arr-flatten": "^1.1.0",
-        "array-unique": "^0.3.2",
-        "extend-shallow": "^2.0.1",
-        "fill-range": "^4.0.0",
-        "isobject": "^3.0.1",
-        "repeat-element": "^1.1.2",
-        "snapdragon": "^0.8.1",
-        "snapdragon-node": "^2.0.1",
-        "split-string": "^3.0.2",
-        "to-regex": "^3.0.1"
+        "arr-flatten": "1.1.0",
+        "array-unique": "0.3.2",
+        "extend-shallow": "2.0.1",
+        "fill-range": "4.0.0",
+        "isobject": "3.0.1",
+        "repeat-element": "1.1.3",
+        "snapdragon": "0.8.2",
+        "snapdragon-node": "2.1.1",
+        "split-string": "3.1.0",
+        "to-regex": "3.0.2"
       },
       "dependencies": {
         "extend-shallow": {
@@ -642,7 +651,7 @@
           "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
           "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
           "requires": {
-            "is-extendable": "^0.1.0"
+            "is-extendable": "0.1.1"
           }
         }
       }
@@ -662,7 +671,7 @@
       "resolved": "https://registry.npmjs.org/bun/-/bun-0.0.12.tgz",
       "integrity": "sha512-Toms18J9DqnT+IfWkwxVTB2EaBprHvjlMWrTIsfX4xbu3ZBqVBwrERU0em1IgtRe04wT+wJxMlKHZok24hrcSQ==",
       "requires": {
-        "readable-stream": "~1.0.32"
+        "readable-stream": "1.0.34"
       },
       "dependencies": {
         "isarray": {
@@ -672,13 +681,13 @@
         },
         "readable-stream": {
           "version": "1.0.34",
-          "resolved": "http://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz",
           "integrity": "sha1-Elgg40vIQtLyqq+v5MKRbuMsFXw=",
           "requires": {
-            "core-util-is": "~1.0.0",
-            "inherits": "~2.0.1",
+            "core-util-is": "1.0.2",
+            "inherits": "2.0.3",
             "isarray": "0.0.1",
-            "string_decoder": "~0.10.x"
+            "string_decoder": "0.10.31"
           }
         },
         "string_decoder": {
@@ -693,7 +702,7 @@
       "resolved": "https://registry.npmjs.org/bytebuffer/-/bytebuffer-5.0.1.tgz",
       "integrity": "sha1-WC7qSxqHO20CCkjVjfhfC7ps/d0=",
       "requires": {
-        "long": "~3"
+        "long": "3.2.0"
       }
     },
     "bytes": {
@@ -706,15 +715,15 @@
       "resolved": "https://registry.npmjs.org/cache-base/-/cache-base-1.0.1.tgz",
       "integrity": "sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==",
       "requires": {
-        "collection-visit": "^1.0.0",
-        "component-emitter": "^1.2.1",
-        "get-value": "^2.0.6",
-        "has-value": "^1.0.0",
-        "isobject": "^3.0.1",
-        "set-value": "^2.0.0",
-        "to-object-path": "^0.3.0",
-        "union-value": "^1.0.0",
-        "unset-value": "^1.0.0"
+        "collection-visit": "1.0.0",
+        "component-emitter": "1.2.1",
+        "get-value": "2.0.6",
+        "has-value": "1.0.0",
+        "isobject": "3.0.1",
+        "set-value": "2.0.0",
+        "to-object-path": "0.3.0",
+        "union-value": "1.0.0",
+        "unset-value": "1.0.0"
       }
     },
     "call-me-maybe": {
@@ -752,10 +761,10 @@
       "resolved": "https://registry.npmjs.org/class-utils/-/class-utils-0.3.6.tgz",
       "integrity": "sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==",
       "requires": {
-        "arr-union": "^3.1.0",
-        "define-property": "^0.2.5",
-        "isobject": "^3.0.0",
-        "static-extend": "^0.1.1"
+        "arr-union": "3.1.0",
+        "define-property": "0.2.5",
+        "isobject": "3.0.1",
+        "static-extend": "0.1.2"
       },
       "dependencies": {
         "define-property": {
@@ -763,7 +772,7 @@
           "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
           "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
           "requires": {
-            "is-descriptor": "^0.1.0"
+            "is-descriptor": "0.1.6"
           }
         }
       }
@@ -773,16 +782,11 @@
       "resolved": "https://registry.npmjs.org/cliui/-/cliui-3.2.0.tgz",
       "integrity": "sha1-EgYBU3qRbSmUD5NNo7SNWFo5IT0=",
       "requires": {
-        "string-width": "^1.0.1",
-        "strip-ansi": "^3.0.1",
-        "wrap-ansi": "^2.0.0"
+        "string-width": "1.0.2",
+        "strip-ansi": "3.0.1",
+        "wrap-ansi": "2.1.0"
       }
     },
-    "co": {
-      "version": "4.6.0",
-      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
-      "integrity": "sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="
-    },
     "code-point-at": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz",
@@ -793,8 +797,8 @@
       "resolved": "https://registry.npmjs.org/collection-visit/-/collection-visit-1.0.0.tgz",
       "integrity": "sha1-S8A3PBZLwykbTTaMgpzxqApZ3KA=",
       "requires": {
-        "map-visit": "^1.0.0",
-        "object-visit": "^1.0.0"
+        "map-visit": "1.0.0",
+        "object-visit": "1.0.1"
       }
     },
     "colour": {
@@ -807,7 +811,7 @@
       "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.7.tgz",
       "integrity": "sha512-brWl9y6vOB1xYPZcpZde3N9zDByXTosAeMDo4p1wzo6UMOX4vumB+TP1RZ76sfE6Md68Q0NJSrE/gbezd4Ul+w==",
       "requires": {
-        "delayed-stream": "~1.0.0"
+        "delayed-stream": "1.0.0"
       }
     },
     "component-emitter": {
@@ -820,7 +824,7 @@
       "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.15.tgz",
       "integrity": "sha512-4aE67DL33dSW9gw4CI2H/yTxqHLNcxp0yS6jB+4h+wr3e43+1z7vm0HU9qXOH8j+qjKuL8+UtkOxYQSMq60Ylw==",
       "requires": {
-        "mime-db": ">= 1.36.0 < 2"
+        "mime-db": "1.38.0"
       }
     },
     "concat-map": {
@@ -833,10 +837,10 @@
       "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
       "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
       "requires": {
-        "buffer-from": "^1.0.0",
-        "inherits": "^2.0.3",
-        "readable-stream": "^2.2.2",
-        "typedarray": "^0.0.6"
+        "buffer-from": "1.1.1",
+        "inherits": "2.0.3",
+        "readable-stream": "2.3.6",
+        "typedarray": "0.0.6"
       }
     },
     "configstore": {
@@ -844,12 +848,12 @@
       "resolved": "https://registry.npmjs.org/configstore/-/configstore-3.1.2.tgz",
       "integrity": "sha512-vtv5HtGjcYUgFrXc6Kx747B83MRRVS5R1VTEQoXvuP+kMI+if6uywV0nDGoiydJRy4yk7h9od5Og0kxx4zUXmw==",
       "requires": {
-        "dot-prop": "^4.1.0",
-        "graceful-fs": "^4.1.2",
-        "make-dir": "^1.0.0",
-        "unique-string": "^1.0.0",
-        "write-file-atomic": "^2.0.0",
-        "xdg-basedir": "^3.0.0"
+        "dot-prop": "4.2.0",
+        "graceful-fs": "4.1.15",
+        "make-dir": "1.3.0",
+        "unique-string": "1.0.0",
+        "write-file-atomic": "2.4.2",
+        "xdg-basedir": "3.0.0"
       }
     },
     "content-disposition": {
@@ -878,9 +882,9 @@
       "integrity": "sha1-Z29us8OZl8LuGsOpJP1hJHSPV40="
     },
     "core-js": {
-      "version": "2.5.7",
-      "resolved": "https://registry.npmjs.org/core-js/-/core-js-2.5.7.tgz",
-      "integrity": "sha512-RszJCAxg/PP6uzXVXL6BsxSXx/B05oJAQ2vkJRjyjrEcNVycaqOmNb5OTxZPE3xa5gwZduqza6L9JOCenh/Ecw=="
+      "version": "2.6.5",
+      "resolved": "https://registry.npmjs.org/core-js/-/core-js-2.6.5.tgz",
+      "integrity": "sha512-klh/kDpwX8hryYL14M9w/xei6vrv6sE8gTHDG7/T/+SEovB/G4ejwcfE/CBzO6Edsu+OETZMZ3wcX/EjUkrl5A=="
     },
     "core-util-is": {
       "version": "1.0.2",
@@ -888,12 +892,12 @@
       "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
     },
     "cors": {
-      "version": "2.8.4",
-      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.4.tgz",
-      "integrity": "sha1-K9OB8usgECAQXNUOpZ2mMJBpRoY=",
+      "version": "2.8.5",
+      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
+      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
       "requires": {
-        "object-assign": "^4",
-        "vary": "^1"
+        "object-assign": "4.1.1",
+        "vary": "1.1.2"
       }
     },
     "create-error-class": {
@@ -901,7 +905,7 @@
       "resolved": "https://registry.npmjs.org/create-error-class/-/create-error-class-3.0.2.tgz",
       "integrity": "sha1-Br56vvlHo/FKMP1hBnHUAbyot7Y=",
       "requires": {
-        "capture-stack-trace": "^1.0.0"
+        "capture-stack-trace": "1.0.1"
       }
     },
     "crypto-random-string": {
@@ -914,15 +918,15 @@
       "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
       "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
       "requires": {
-        "assert-plus": "^1.0.0"
+        "assert-plus": "1.0.0"
       }
     },
     "debug": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
-      "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+      "version": "3.2.6",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.6.tgz",
+      "integrity": "sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==",
       "requires": {
-        "ms": "2.0.0"
+        "ms": "2.1.1"
       }
     },
     "decamelize": {
@@ -945,7 +949,7 @@
       "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.1.3.tgz",
       "integrity": "sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==",
       "requires": {
-        "object-keys": "^1.0.12"
+        "object-keys": "1.1.0"
       }
     },
     "define-property": {
@@ -953,8 +957,8 @@
       "resolved": "https://registry.npmjs.org/define-property/-/define-property-2.0.2.tgz",
       "integrity": "sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==",
       "requires": {
-        "is-descriptor": "^1.0.2",
-        "isobject": "^3.0.1"
+        "is-descriptor": "1.0.2",
+        "isobject": "3.0.1"
       },
       "dependencies": {
         "is-accessor-descriptor": {
@@ -962,7 +966,7 @@
           "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
           "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
           "requires": {
-            "kind-of": "^6.0.0"
+            "kind-of": "6.0.2"
           }
         },
         "is-data-descriptor": {
@@ -970,7 +974,7 @@
           "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
           "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
           "requires": {
-            "kind-of": "^6.0.0"
+            "kind-of": "6.0.2"
           }
         },
         "is-descriptor": {
@@ -978,9 +982,9 @@
           "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
           "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
           "requires": {
-            "is-accessor-descriptor": "^1.0.0",
-            "is-data-descriptor": "^1.0.0",
-            "kind-of": "^6.0.2"
+            "is-accessor-descriptor": "1.0.0",
+            "is-data-descriptor": "1.0.0",
+            "kind-of": "6.0.2"
           }
         }
       }
@@ -1010,8 +1014,8 @@
       "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-2.0.0.tgz",
       "integrity": "sha512-37qirFDz8cA5fimp9feo43fSuRo2gHwaIn6dXL8Ber1dGwUosDrGZeCCXq57WnIqE4aQ+u3eQZzsk1yOzhdwag==",
       "requires": {
-        "arrify": "^1.0.1",
-        "path-type": "^3.0.0"
+        "arrify": "1.0.1",
+        "path-type": "3.0.0"
       }
     },
     "dot-prop": {
@@ -1019,18 +1023,18 @@
       "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-4.2.0.tgz",
       "integrity": "sha512-tUMXrxlExSW6U2EXiiKGSBVdYgtV8qlHL+C10TsW4PURY/ic+eaysnSkwB4kA/mBlCyy/IKDJ+Lc3wbWeaXtuQ==",
       "requires": {
-        "is-obj": "^1.0.0"
+        "is-obj": "1.0.1"
       }
     },
     "duplexify": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-3.6.0.tgz",
-      "integrity": "sha512-fO3Di4tBKJpYTFHAxTU00BcfWMY9w24r/x21a6rZRbsD/ToUgGxsMbiGRmB7uVAXeGKXD9MwiLZa5E97EVgIRQ==",
+      "version": "3.7.1",
+      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-3.7.1.tgz",
+      "integrity": "sha512-07z8uv2wMyS51kKhD1KsdXJg5WQ6t93RneqRxUHnskXVtlYYkLqM0gqStQZ3pj073g687jPCHrqNfCzawLYh5g==",
       "requires": {
-        "end-of-stream": "^1.0.0",
-        "inherits": "^2.0.1",
-        "readable-stream": "^2.0.0",
-        "stream-shift": "^1.0.0"
+        "end-of-stream": "1.4.1",
+        "inherits": "2.0.3",
+        "readable-stream": "2.3.6",
+        "stream-shift": "1.0.0"
       }
     },
     "eastasianwidth": {
@@ -1042,10 +1046,9 @@
       "version": "0.1.2",
       "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
       "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
-      "optional": true,
       "requires": {
-        "jsbn": "~0.1.0",
-        "safer-buffer": "^2.1.0"
+        "jsbn": "0.1.1",
+        "safer-buffer": "2.1.2"
       }
     },
     "ecdsa-sig-formatter": {
@@ -1053,7 +1056,7 @@
       "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.10.tgz",
       "integrity": "sha1-HFlQAPBKiJffuFAAiSoPTDOvhsM=",
       "requires": {
-        "safe-buffer": "^5.0.1"
+        "safe-buffer": "5.1.2"
       }
     },
     "ee-first": {
@@ -1066,8 +1069,8 @@
       "resolved": "https://registry.npmjs.org/empower/-/empower-1.3.1.tgz",
       "integrity": "sha512-uB6/ViBaawOO/uujFADTK3SqdYlxYNn+N4usK9MRKZ4Hbn/1QSy8k2PezxCA2/+JGbF8vd/eOfghZ90oOSDZCA==",
       "requires": {
-        "core-js": "^2.0.0",
-        "empower-core": "^1.2.0"
+        "core-js": "2.6.5",
+        "empower-core": "1.2.0"
       }
     },
     "empower-core": {
@@ -1076,7 +1079,7 @@
       "integrity": "sha512-g6+K6Geyc1o6FdXs9HwrXleCFan7d66G5xSCfSF7x1mJDCes6t0om9lFQG3zOrzh3Bkb/45N0cZ5Gqsf7YrzGQ==",
       "requires": {
         "call-signature": "0.0.2",
-        "core-js": "^2.0.0"
+        "core-js": "2.6.5"
       }
     },
     "encodeurl": {
@@ -1089,7 +1092,7 @@
       "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.1.tgz",
       "integrity": "sha512-1MkrZNvWTKCaigbn+W15elq2BB/L22nqrSY5DKlo3X6+vclJm8Bb5djXJBmEX6fS3+zCh/F4VBK5Z2KxJt4s2Q==",
       "requires": {
-        "once": "^1.4.0"
+        "once": "1.4.0"
       }
     },
     "ent": {
@@ -1097,6 +1100,19 @@
       "resolved": "https://registry.npmjs.org/ent/-/ent-2.2.0.tgz",
       "integrity": "sha1-6WQhkyWiHQX0RGai9obtbOX13R0="
     },
+    "es6-promise": {
+      "version": "4.2.5",
+      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.5.tgz",
+      "integrity": "sha512-n6wvpdE43VFtJq+lUDYDBFUwV8TZbuGXLV4D6wKafg13ldznKsyEvatubnmUe31zcvelSzOHF+XbaT+Bl9ObDg=="
+    },
+    "es6-promisify": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/es6-promisify/-/es6-promisify-5.0.0.tgz",
+      "integrity": "sha1-UQnWLz5W6pZ8S2NQWu8IKRyKUgM=",
+      "requires": {
+        "es6-promise": "4.2.5"
+      }
+    },
     "escape-html": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
@@ -1107,7 +1123,7 @@
       "resolved": "https://registry.npmjs.org/espurify/-/espurify-1.8.1.tgz",
       "integrity": "sha512-ZDko6eY/o+D/gHCWyHTU85mKDgYcS4FJj7S+YD6WIInm7GQ6AnOjmcL4+buFV/JOztVLELi/7MmuGU5NHta0Mg==",
       "requires": {
-        "core-js": "^2.0.0"
+        "core-js": "2.6.5"
       }
     },
     "estraverse": {
@@ -1120,18 +1136,23 @@
       "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
       "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc="
     },
+    "event-target-shim": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.0.tgz",
+      "integrity": "sha512-vu4tlY5xqMEGj/rzuDHxfvm9Kk2562O5h58i8xwnkMkv/yqmBqBcDJt/vGBrOBbCKuVc5eV3ghYxAX9YUhyi0w=="
+    },
     "expand-brackets": {
       "version": "2.1.4",
       "resolved": "https://registry.npmjs.org/expand-brackets/-/expand-brackets-2.1.4.tgz",
       "integrity": "sha1-t3c14xXOMPa27/D4OwQVGiJEliI=",
       "requires": {
-        "debug": "^2.3.3",
-        "define-property": "^0.2.5",
-        "extend-shallow": "^2.0.1",
-        "posix-character-classes": "^0.1.0",
-        "regex-not": "^1.0.0",
-        "snapdragon": "^0.8.1",
-        "to-regex": "^3.0.1"
+        "debug": "2.6.9",
+        "define-property": "0.2.5",
+        "extend-shallow": "2.0.1",
+        "posix-character-classes": "0.1.1",
+        "regex-not": "1.0.2",
+        "snapdragon": "0.8.2",
+        "to-regex": "3.0.2"
       },
       "dependencies": {
         "debug": {
@@ -1147,7 +1168,7 @@
           "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
           "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
           "requires": {
-            "is-descriptor": "^0.1.0"
+            "is-descriptor": "0.1.6"
           }
         },
         "extend-shallow": {
@@ -1155,46 +1176,51 @@
           "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
           "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
           "requires": {
-            "is-extendable": "^0.1.0"
+            "is-extendable": "0.1.1"
           }
+        },
+        "ms": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
         }
       }
     },
     "express": {
-      "version": "4.16.3",
-      "resolved": "http://registry.npmjs.org/express/-/express-4.16.3.tgz",
-      "integrity": "sha1-avilAjUNsyRuzEvs9rWjTSL37VM=",
+      "version": "4.16.4",
+      "resolved": "https://registry.npmjs.org/express/-/express-4.16.4.tgz",
+      "integrity": "sha512-j12Uuyb4FMrd/qQAm6uCHAkPtO8FDTRJZBDd5D2KOL2eLaz1yUNdUB/NOIyq0iU4q4cFarsUCrnFDPBcnksuOg==",
       "requires": {
-        "accepts": "~1.3.5",
+        "accepts": "1.3.5",
         "array-flatten": "1.1.1",
-        "body-parser": "1.18.2",
+        "body-parser": "1.18.3",
         "content-disposition": "0.5.2",
-        "content-type": "~1.0.4",
+        "content-type": "1.0.4",
         "cookie": "0.3.1",
         "cookie-signature": "1.0.6",
         "debug": "2.6.9",
-        "depd": "~1.1.2",
-        "encodeurl": "~1.0.2",
-        "escape-html": "~1.0.3",
-        "etag": "~1.8.1",
+        "depd": "1.1.2",
+        "encodeurl": "1.0.2",
+        "escape-html": "1.0.3",
+        "etag": "1.8.1",
         "finalhandler": "1.1.1",
         "fresh": "0.5.2",
         "merge-descriptors": "1.0.1",
-        "methods": "~1.1.2",
-        "on-finished": "~2.3.0",
-        "parseurl": "~1.3.2",
+        "methods": "1.1.2",
+        "on-finished": "2.3.0",
+        "parseurl": "1.3.2",
         "path-to-regexp": "0.1.7",
-        "proxy-addr": "~2.0.3",
-        "qs": "6.5.1",
-        "range-parser": "~1.2.0",
-        "safe-buffer": "5.1.1",
+        "proxy-addr": "2.0.4",
+        "qs": "6.5.2",
+        "range-parser": "1.2.0",
+        "safe-buffer": "5.1.2",
         "send": "0.16.2",
         "serve-static": "1.13.2",
         "setprototypeof": "1.1.0",
-        "statuses": "~1.4.0",
-        "type-is": "~1.6.16",
+        "statuses": "1.4.0",
+        "type-is": "1.6.16",
         "utils-merge": "1.0.1",
-        "vary": "~1.1.2"
+        "vary": "1.1.2"
       },
       "dependencies": {
         "debug": {
@@ -1205,15 +1231,10 @@
             "ms": "2.0.0"
           }
         },
-        "qs": {
-          "version": "6.5.1",
-          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.1.tgz",
-          "integrity": "sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="
-        },
-        "safe-buffer": {
-          "version": "5.1.1",
-          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz",
-          "integrity": "sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="
+        "ms": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
         }
       }
     },
@@ -1227,8 +1248,8 @@
       "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-3.0.2.tgz",
       "integrity": "sha1-Jqcarwc7OfshJxcnRhMcJwQCjbg=",
       "requires": {
-        "assign-symbols": "^1.0.0",
-        "is-extendable": "^1.0.1"
+        "assign-symbols": "1.0.0",
+        "is-extendable": "1.0.1"
       },
       "dependencies": {
         "is-extendable": {
@@ -1236,7 +1257,7 @@
           "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-1.0.1.tgz",
           "integrity": "sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==",
           "requires": {
-            "is-plain-object": "^2.0.4"
+            "is-plain-object": "2.0.4"
           }
         }
       }
@@ -1246,14 +1267,14 @@
       "resolved": "https://registry.npmjs.org/extglob/-/extglob-2.0.4.tgz",
       "integrity": "sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==",
       "requires": {
-        "array-unique": "^0.3.2",
-        "define-property": "^1.0.0",
-        "expand-brackets": "^2.1.4",
-        "extend-shallow": "^2.0.1",
-        "fragment-cache": "^0.2.1",
-        "regex-not": "^1.0.0",
-        "snapdragon": "^0.8.1",
-        "to-regex": "^3.0.1"
+        "array-unique": "0.3.2",
+        "define-property": "1.0.0",
+        "expand-brackets": "2.1.4",
+        "extend-shallow": "2.0.1",
+        "fragment-cache": "0.2.1",
+        "regex-not": "1.0.2",
+        "snapdragon": "0.8.2",
+        "to-regex": "3.0.2"
       },
       "dependencies": {
         "define-property": {
@@ -1261,7 +1282,7 @@
           "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
           "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
           "requires": {
-            "is-descriptor": "^1.0.0"
+            "is-descriptor": "1.0.2"
           }
         },
         "extend-shallow": {
@@ -1269,7 +1290,7 @@
           "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
           "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
           "requires": {
-            "is-extendable": "^0.1.0"
+            "is-extendable": "0.1.1"
           }
         },
         "is-accessor-descriptor": {
@@ -1277,7 +1298,7 @@
           "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
           "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
           "requires": {
-            "kind-of": "^6.0.0"
+            "kind-of": "6.0.2"
           }
         },
         "is-data-descriptor": {
@@ -1285,7 +1306,7 @@
           "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
           "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
           "requires": {
-            "kind-of": "^6.0.0"
+            "kind-of": "6.0.2"
           }
         },
         "is-descriptor": {
@@ -1293,9 +1314,9 @@
           "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
           "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
           "requires": {
-            "is-accessor-descriptor": "^1.0.0",
-            "is-data-descriptor": "^1.0.0",
-            "kind-of": "^6.0.2"
+            "is-accessor-descriptor": "1.0.0",
+            "is-data-descriptor": "1.0.0",
+            "kind-of": "6.0.2"
           }
         }
       }
@@ -1306,21 +1327,21 @@
       "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU="
     },
     "fast-deep-equal": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz",
-      "integrity": "sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ="
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-2.0.1.tgz",
+      "integrity": "sha1-ewUhjd+WZ79/Nwv3/bLLFf3Qqkk="
     },
     "fast-glob": {
-      "version": "2.2.2",
-      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-2.2.2.tgz",
-      "integrity": "sha512-TR6zxCKftDQnUAPvkrCWdBgDq/gbqx8A3ApnBrR5rMvpp6+KMJI0Igw7fkWPgeVK0uhRXTXdvO3O+YP0CaUX2g==",
+      "version": "2.2.6",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-2.2.6.tgz",
+      "integrity": "sha512-0BvMaZc1k9F+MeWWMe8pL6YltFzZYcJsYU7D4JyDA6PAczaXvxqQQ/z+mDF7/4Mw01DeUc+i3CTKajnkANkV4w==",
       "requires": {
-        "@mrmlnc/readdir-enhanced": "^2.2.1",
-        "@nodelib/fs.stat": "^1.0.1",
-        "glob-parent": "^3.1.0",
-        "is-glob": "^4.0.0",
-        "merge2": "^1.2.1",
-        "micromatch": "^3.1.10"
+        "@mrmlnc/readdir-enhanced": "2.2.1",
+        "@nodelib/fs.stat": "1.1.3",
+        "glob-parent": "3.1.0",
+        "is-glob": "4.0.0",
+        "merge2": "1.2.3",
+        "micromatch": "3.1.10"
       }
     },
     "fast-json-stable-stringify": {
@@ -1333,7 +1354,7 @@
       "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.9.3.tgz",
       "integrity": "sha1-SCpQWw3wrmJrlphm0710DNuWLoM=",
       "requires": {
-        "websocket-driver": ">=0.5.1"
+        "websocket-driver": "0.7.0"
       }
     },
     "fill-range": {
@@ -1341,10 +1362,10 @@
       "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-4.0.0.tgz",
       "integrity": "sha1-1USBHUKPmOsGpj3EAtJAPDKMOPc=",
       "requires": {
-        "extend-shallow": "^2.0.1",
-        "is-number": "^3.0.0",
-        "repeat-string": "^1.6.1",
-        "to-regex-range": "^2.1.0"
+        "extend-shallow": "2.0.1",
+        "is-number": "3.0.0",
+        "repeat-string": "1.6.1",
+        "to-regex-range": "2.1.1"
       },
       "dependencies": {
         "extend-shallow": {
@@ -1352,7 +1373,7 @@
           "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
           "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
           "requires": {
-            "is-extendable": "^0.1.0"
+            "is-extendable": "0.1.1"
           }
         }
       }
@@ -1363,12 +1384,12 @@
       "integrity": "sha512-Y1GUDo39ez4aHAw7MysnUD5JzYX+WaIj8I57kO3aEPT1fFRL4sr7mjei97FgnwhAyyzRYmQZaTHb2+9uZ1dPtg==",
       "requires": {
         "debug": "2.6.9",
-        "encodeurl": "~1.0.2",
-        "escape-html": "~1.0.3",
-        "on-finished": "~2.3.0",
-        "parseurl": "~1.3.2",
-        "statuses": "~1.4.0",
-        "unpipe": "~1.0.0"
+        "encodeurl": "1.0.2",
+        "escape-html": "1.0.3",
+        "on-finished": "2.3.0",
+        "parseurl": "1.3.2",
+        "statuses": "1.4.0",
+        "unpipe": "1.0.0"
       },
       "dependencies": {
         "debug": {
@@ -1378,6 +1399,11 @@
           "requires": {
             "ms": "2.0.0"
           }
+        },
+        "ms": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
         }
       }
     },
@@ -1386,61 +1412,56 @@
       "resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-5.10.0.tgz",
       "integrity": "sha1-dtj85rsdvSwF7HbL+1ncGtOXflY=",
       "requires": {
-        "@firebase/app": "^0.1.10",
-        "@firebase/database": "^0.2.0",
-        "@google-cloud/firestore": "^0.13.0",
-        "@google-cloud/storage": "^1.6.0",
-        "@types/google-cloud__storage": "^1.1.7",
-        "@types/node": "^8.0.53",
+        "@firebase/app": "0.1.10",
+        "@firebase/database": "0.2.2",
+        "@google-cloud/firestore": "0.13.1",
+        "@google-cloud/storage": "1.7.0",
+        "@types/google-cloud__storage": "1.7.2",
+        "@types/node": "8.10.40",
         "faye-websocket": "0.9.3",
         "jsonwebtoken": "8.1.0",
         "node-forge": "0.7.1"
       }
     },
     "firebase-functions": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/firebase-functions/-/firebase-functions-2.0.5.tgz",
-      "integrity": "sha512-XedOTdaej68I/AmJyeDIKL2Cw6MwI7Ugov5QoEsOU9bh25iAseZmFKFQeqimW5Wb9wKLAli2Wq8ld+FtdOwdvQ==",
-      "requires": {
-        "@types/cors": "^2.8.1",
-        "@types/express": "^4.11.1",
-        "@types/jsonwebtoken": "^7.2.6",
-        "@types/lodash": "^4.14.34",
-        "cors": "^2.8.4",
-        "express": "^4.16.2",
-        "jsonwebtoken": "^8.2.1",
-        "lodash": "^4.6.1"
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/firebase-functions/-/firebase-functions-2.2.0.tgz",
+      "integrity": "sha512-83rJvXreTH98q1XEEUZ4G9nFZ0sUVaqkxPC+v25L9FuXsWgAFpW7G28K0MJ9DBPNo/RaeNNw0zvZVtDw11CEbQ==",
+      "requires": {
+        "@types/cors": "2.8.4",
+        "@types/express": "4.16.1",
+        "@types/jsonwebtoken": "7.2.8",
+        "@types/lodash": "4.14.121",
+        "cors": "2.8.5",
+        "express": "4.16.4",
+        "jsonwebtoken": "8.4.0",
+        "lodash": "4.17.11"
       },
       "dependencies": {
         "jsonwebtoken": {
-          "version": "8.3.0",
-          "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.3.0.tgz",
-          "integrity": "sha512-oge/hvlmeJCH+iIz1DwcO7vKPkNGJHhgkspk8OH3VKlw+mbi42WtD4ig1+VXRln765vxptAv+xT26Fd3cteqag==",
-          "requires": {
-            "jws": "^3.1.5",
-            "lodash.includes": "^4.3.0",
-            "lodash.isboolean": "^3.0.3",
-            "lodash.isinteger": "^4.0.4",
-            "lodash.isnumber": "^3.0.3",
-            "lodash.isplainobject": "^4.0.6",
-            "lodash.isstring": "^4.0.1",
-            "lodash.once": "^4.0.0",
-            "ms": "^2.1.1"
+          "version": "8.4.0",
+          "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.4.0.tgz",
+          "integrity": "sha512-coyXjRTCy0pw5WYBpMvWOMN+Kjaik2MwTUIq9cna/W7NpO9E+iYbumZONAz3hcr+tXFJECoQVrtmIoC3Oz0gvg==",
+          "requires": {
+            "jws": "3.2.1",
+            "lodash.includes": "4.3.0",
+            "lodash.isboolean": "3.0.3",
+            "lodash.isinteger": "4.0.4",
+            "lodash.isnumber": "3.0.3",
+            "lodash.isplainobject": "4.0.6",
+            "lodash.isstring": "4.0.1",
+            "lodash.once": "4.1.1",
+            "ms": "2.1.1"
           }
-        },
-        "ms": {
-          "version": "2.1.1",
-          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.1.tgz",
-          "integrity": "sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg=="
         }
       }
     },
     "follow-redirects": {
-      "version": "1.5.8",
-      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.5.8.tgz",
-      "integrity": "sha512-sy1mXPmv7kLAMKW/8XofG7o9T+6gAjzdZK4AJF6ryqQYUa/hnzgiypoeUecZ53x7XiqKNEpNqLtS97MshW2nxg==",
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.7.0.tgz",
+      "integrity": "sha512-m/pZQy4Gj287eNy94nivy5wchN3Kp+Q5WgUPNy5lJSZ3sgkVKSYV/ZChMAQVIgx1SqfZ2zBZtPA2YlXIWxxJOQ==",
       "requires": {
-        "debug": "=3.1.0"
+        "debug": "3.2.6"
       }
     },
     "for-in": {
@@ -1454,23 +1475,13 @@
       "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="
     },
     "form-data": {
-      "version": "2.3.2",
-      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz",
-      "integrity": "sha1-SXBJi+YEwgwAXU9cI67NIda0kJk=",
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
+      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
       "requires": {
-        "asynckit": "^0.4.0",
-        "combined-stream": "1.0.6",
-        "mime-types": "^2.1.12"
-      },
-      "dependencies": {
-        "combined-stream": {
-          "version": "1.0.6",
-          "resolved": "http://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz",
-          "integrity": "sha1-cj599ugBrFYTETp+RFqbactjKBg=",
-          "requires": {
-            "delayed-stream": "~1.0.0"
-          }
-        }
+        "asynckit": "0.4.0",
+        "combined-stream": "1.0.7",
+        "mime-types": "2.1.22"
       }
     },
     "forwarded": {
@@ -1483,7 +1494,7 @@
       "resolved": "https://registry.npmjs.org/fragment-cache/-/fragment-cache-0.2.1.tgz",
       "integrity": "sha1-QpD60n8T6Jvn8zeZxrxaCr//DRk=",
       "requires": {
-        "map-cache": "^0.2.2"
+        "map-cache": "0.2.2"
       }
     },
     "fresh": {
@@ -1501,13 +1512,24 @@
       "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
       "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc="
     },
+    "gaxios": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-1.7.0.tgz",
+      "integrity": "sha512-2SaZTtaEgnSMgRrBVnPA5O9Tc8xWfnL48fuxFL7zOHZwnam3HiNOkoosnRgnkNBZoEZrH1Aja3wMCrrDtOEqUw==",
+      "requires": {
+        "abort-controller": "2.0.2",
+        "extend": "3.0.2",
+        "https-proxy-agent": "2.2.1",
+        "node-fetch": "2.3.0"
+      }
+    },
     "gcp-metadata": {
       "version": "0.6.3",
-      "resolved": "http://registry.npmjs.org/gcp-metadata/-/gcp-metadata-0.6.3.tgz",
+      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-0.6.3.tgz",
       "integrity": "sha512-MSmczZctbz91AxCvqp9GHBoZOSbJKAICV7Ow/AIWSJZRrRchUd5NL1b2P4OfP+4m490BEUPhhARfpHdqCxuCvg==",
       "requires": {
-        "axios": "^0.18.0",
-        "extend": "^3.0.1",
+        "axios": "0.18.0",
+        "extend": "3.0.2",
         "retry-axios": "0.3.2"
       }
     },
@@ -1516,11 +1538,11 @@
       "resolved": "https://registry.npmjs.org/gcs-resumable-upload/-/gcs-resumable-upload-0.10.2.tgz",
       "integrity": "sha1-fymz7iPc7EFwNnwHEUGCScZgVF8=",
       "requires": {
-        "configstore": "^3.1.2",
-        "google-auto-auth": "^0.10.0",
-        "pumpify": "^1.4.0",
-        "request": "^2.85.0",
-        "stream-events": "^1.0.3"
+        "configstore": "3.1.2",
+        "google-auto-auth": "0.10.1",
+        "pumpify": "1.5.1",
+        "request": "2.88.0",
+        "stream-events": "1.0.5"
       }
     },
     "get-value": {
@@ -1533,7 +1555,7 @@
       "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
       "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
       "requires": {
-        "assert-plus": "^1.0.0"
+        "assert-plus": "1.0.0"
       }
     },
     "glob": {
@@ -1541,12 +1563,12 @@
       "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.3.tgz",
       "integrity": "sha512-vcfuiIxogLV4DlGBHIUOwI0IbrJ8HWPc4MU7HzviGeNho/UJDfi6B5p3sHeWIQ0KGIU0Jpxi5ZHxemQfLkkAwQ==",
       "requires": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.0.4",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
+        "fs.realpath": "1.0.0",
+        "inflight": "1.0.6",
+        "inherits": "2.0.3",
+        "minimatch": "3.0.4",
+        "once": "1.4.0",
+        "path-is-absolute": "1.0.1"
       }
     },
     "glob-parent": {
@@ -1554,8 +1576,8 @@
       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-3.1.0.tgz",
       "integrity": "sha1-nmr2KZ2NO9K9QEMIMr0RPfkGxa4=",
       "requires": {
-        "is-glob": "^3.1.0",
-        "path-dirname": "^1.0.0"
+        "is-glob": "3.1.0",
+        "path-dirname": "1.0.2"
       },
       "dependencies": {
         "is-glob": {
@@ -1563,7 +1585,7 @@
           "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-3.1.0.tgz",
           "integrity": "sha1-e6WuJCF4BKxwcHuWkiVnSGzD6Eo=",
           "requires": {
-            "is-extglob": "^2.1.0"
+            "is-extglob": "2.1.1"
           }
         }
       }
@@ -1574,17 +1596,24 @@
       "integrity": "sha1-jFoUlNIGbFcMw7/kSWF1rMTVAqs="
     },
     "globby": {
-      "version": "8.0.1",
-      "resolved": "https://registry.npmjs.org/globby/-/globby-8.0.1.tgz",
-      "integrity": "sha512-oMrYrJERnKBLXNLVTqhm3vPEdJ/b2ZE28xN4YARiix1NOIOBPEpOUnm844K1iu/BkphCaf2WNFwMszv8Soi1pw==",
-      "requires": {
-        "array-union": "^1.0.1",
-        "dir-glob": "^2.0.0",
-        "fast-glob": "^2.0.2",
-        "glob": "^7.1.2",
-        "ignore": "^3.3.5",
-        "pify": "^3.0.0",
-        "slash": "^1.0.0"
+      "version": "8.0.2",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-8.0.2.tgz",
+      "integrity": "sha512-yTzMmKygLp8RUpG1Ymu2VXPSJQZjNAZPD4ywgYEaG7e4tBJeUQBO8OpXrf1RCNcEs5alsoJYPAMiIHP0cmeC7w==",
+      "requires": {
+        "array-union": "1.0.2",
+        "dir-glob": "2.0.0",
+        "fast-glob": "2.2.6",
+        "glob": "7.1.3",
+        "ignore": "3.3.10",
+        "pify": "3.0.0",
+        "slash": "1.0.0"
+      },
+      "dependencies": {
+        "pify": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
+          "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY="
+        }
       }
     },
     "google-auth-library": {
@@ -1592,13 +1621,13 @@
       "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-1.6.1.tgz",
       "integrity": "sha512-jYiWC8NA9n9OtQM7ANn0Tk464do9yhKEtaJ72pKcaBiEwn4LwcGYIYOfwtfsSm3aur/ed3tlSxbmg24IAT6gAg==",
       "requires": {
-        "axios": "^0.18.0",
-        "gcp-metadata": "^0.6.3",
-        "gtoken": "^2.3.0",
-        "jws": "^3.1.5",
-        "lodash.isstring": "^4.0.1",
-        "lru-cache": "^4.1.3",
-        "retry-axios": "^0.3.2"
+        "axios": "0.18.0",
+        "gcp-metadata": "0.6.3",
+        "gtoken": "2.3.2",
+        "jws": "3.2.1",
+        "lodash.isstring": "4.0.1",
+        "lru-cache": "4.1.5",
+        "retry-axios": "0.3.2"
       }
     },
     "google-auto-auth": {
@@ -1606,33 +1635,33 @@
       "resolved": "https://registry.npmjs.org/google-auto-auth/-/google-auto-auth-0.10.1.tgz",
       "integrity": "sha512-iIqSbY7Ypd32mnHGbYctp80vZzXoDlvI9gEfvtl3kmyy5HzOcrZCIGCBdSlIzRsg7nHpQiHE3Zl6Ycur6TSodQ==",
       "requires": {
-        "async": "^2.3.0",
-        "gcp-metadata": "^0.6.1",
-        "google-auth-library": "^1.3.1",
-        "request": "^2.79.0"
+        "async": "2.6.2",
+        "gcp-metadata": "0.6.3",
+        "google-auth-library": "1.6.1",
+        "request": "2.88.0"
       }
     },
     "google-gax": {
       "version": "0.16.1",
-      "resolved": "http://registry.npmjs.org/google-gax/-/google-gax-0.16.1.tgz",
+      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-0.16.1.tgz",
       "integrity": "sha512-eP7UUkKvaHmmvCrr+rxzkIOeEKOnXmoib7/AkENDAuqlC9T2+lWlzwpthDRnitQcV8SblDMzsk73YPMPCDwPyQ==",
       "requires": {
-        "duplexify": "^3.5.4",
-        "extend": "^3.0.0",
-        "globby": "^8.0.0",
-        "google-auto-auth": "^0.10.0",
-        "google-proto-files": "^0.15.0",
-        "grpc": "^1.10.0",
-        "is-stream-ended": "^0.1.0",
-        "lodash": "^4.17.2",
-        "protobufjs": "^6.8.0",
-        "through2": "^2.0.3"
+        "duplexify": "3.7.1",
+        "extend": "3.0.2",
+        "globby": "8.0.2",
+        "google-auto-auth": "0.10.1",
+        "google-proto-files": "0.15.1",
+        "grpc": "1.18.0",
+        "is-stream-ended": "0.1.4",
+        "lodash": "4.17.11",
+        "protobufjs": "6.8.8",
+        "through2": "2.0.5"
       },
       "dependencies": {
         "@types/node": {
-          "version": "10.10.1",
-          "resolved": "https://registry.npmjs.org/@types/node/-/node-10.10.1.tgz",
-          "integrity": "sha512-nzsx28VwfaIykfzMAG9TB3jxF5Nn+1/WMKnmVZc8TsB+LMIVvwUscVn7PAq+LFaY5ng5u4jp5mRROSswo76PPA=="
+          "version": "10.12.26",
+          "resolved": "https://registry.npmjs.org/@types/node/-/node-10.12.26.tgz",
+          "integrity": "sha512-nMRqS+mL1TOnIJrL6LKJcNZPB8V3eTfRo9FQA2b5gDvrHurC8XbSA86KNe0dShlEL7ReWJv/OU9NL7Z0dnqWTg=="
         },
         "long": {
           "version": "4.0.0",
@@ -1644,30 +1673,30 @@
           "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-6.8.8.tgz",
           "integrity": "sha512-AAmHtD5pXgZfi7GMpllpO3q1Xw1OYldr+dMUlAnffGTAhqkg72WdmSY71uKBF/JuyiKs8psYbtKrhi0ASCD8qw==",
           "requires": {
-            "@protobufjs/aspromise": "^1.1.2",
-            "@protobufjs/base64": "^1.1.2",
-            "@protobufjs/codegen": "^2.0.4",
-            "@protobufjs/eventemitter": "^1.1.0",
-            "@protobufjs/fetch": "^1.1.0",
-            "@protobufjs/float": "^1.0.2",
-            "@protobufjs/inquire": "^1.1.0",
-            "@protobufjs/path": "^1.1.2",
-            "@protobufjs/pool": "^1.1.0",
-            "@protobufjs/utf8": "^1.1.0",
-            "@types/long": "^4.0.0",
-            "@types/node": "^10.1.0",
-            "long": "^4.0.0"
+            "@protobufjs/aspromise": "1.1.2",
+            "@protobufjs/base64": "1.1.2",
+            "@protobufjs/codegen": "2.0.4",
+            "@protobufjs/eventemitter": "1.1.0",
+            "@protobufjs/fetch": "1.1.0",
+            "@protobufjs/float": "1.0.2",
+            "@protobufjs/inquire": "1.1.0",
+            "@protobufjs/path": "1.1.2",
+            "@protobufjs/pool": "1.1.0",
+            "@protobufjs/utf8": "1.1.0",
+            "@types/long": "4.0.0",
+            "@types/node": "10.12.26",
+            "long": "4.0.0"
           }
         }
       }
     },
     "google-p12-pem": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-1.0.2.tgz",
-      "integrity": "sha512-+EuKr4CLlGsnXx4XIJIVkcKYrsa2xkAmCvxRhX2HsazJzUBAJ35wARGeApHUn4nNfPD03Vl057FskNr20VaCyg==",
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-1.0.3.tgz",
+      "integrity": "sha512-KGnAiMMWaJp4j4tYVvAjfP3wCKZRLv9M1Nir2wRRNWUYO7j1aX8O9Qgz+a8/EQ5rAvuo4SIu79n6SIdkNl7Msg==",
       "requires": {
-        "node-forge": "^0.7.4",
-        "pify": "^3.0.0"
+        "node-forge": "0.7.6",
+        "pify": "4.0.1"
       },
       "dependencies": {
         "node-forge": {
@@ -1682,27 +1711,27 @@
       "resolved": "https://registry.npmjs.org/google-proto-files/-/google-proto-files-0.15.1.tgz",
       "integrity": "sha512-ebtmWgi/ooR5Nl63qRVZZ6VLM6JOb5zTNxTT/ZAU8yfMOdcauoOZNNMOVg0pCmTjqWXeuuVbgPP0CwO5UHHzBQ==",
       "requires": {
-        "globby": "^7.1.1",
-        "power-assert": "^1.4.4",
-        "protobufjs": "^6.8.0"
+        "globby": "7.1.1",
+        "power-assert": "1.6.1",
+        "protobufjs": "6.8.8"
       },
       "dependencies": {
         "@types/node": {
-          "version": "10.10.1",
-          "resolved": "https://registry.npmjs.org/@types/node/-/node-10.10.1.tgz",
-          "integrity": "sha512-nzsx28VwfaIykfzMAG9TB3jxF5Nn+1/WMKnmVZc8TsB+LMIVvwUscVn7PAq+LFaY5ng5u4jp5mRROSswo76PPA=="
+          "version": "10.12.26",
+          "resolved": "https://registry.npmjs.org/@types/node/-/node-10.12.26.tgz",
+          "integrity": "sha512-nMRqS+mL1TOnIJrL6LKJcNZPB8V3eTfRo9FQA2b5gDvrHurC8XbSA86KNe0dShlEL7ReWJv/OU9NL7Z0dnqWTg=="
         },
         "globby": {
           "version": "7.1.1",
           "resolved": "https://registry.npmjs.org/globby/-/globby-7.1.1.tgz",
           "integrity": "sha1-+yzP+UAfhgCUXfral0QMypcrhoA=",
           "requires": {
-            "array-union": "^1.0.1",
-            "dir-glob": "^2.0.0",
-            "glob": "^7.1.2",
-            "ignore": "^3.3.5",
-            "pify": "^3.0.0",
-            "slash": "^1.0.0"
+            "array-union": "1.0.2",
+            "dir-glob": "2.0.0",
+            "glob": "7.1.3",
+            "ignore": "3.3.10",
+            "pify": "3.0.0",
+            "slash": "1.0.0"
           }
         },
         "long": {
@@ -1710,42 +1739,48 @@
           "resolved": "https://registry.npmjs.org/long/-/long-4.0.0.tgz",
           "integrity": "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA=="
         },
+        "pify": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
+          "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY="
+        },
         "protobufjs": {
           "version": "6.8.8",
           "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-6.8.8.tgz",
           "integrity": "sha512-AAmHtD5pXgZfi7GMpllpO3q1Xw1OYldr+dMUlAnffGTAhqkg72WdmSY71uKBF/JuyiKs8psYbtKrhi0ASCD8qw==",
           "requires": {
-            "@protobufjs/aspromise": "^1.1.2",
-            "@protobufjs/base64": "^1.1.2",
-            "@protobufjs/codegen": "^2.0.4",
-            "@protobufjs/eventemitter": "^1.1.0",
-            "@protobufjs/fetch": "^1.1.0",
-            "@protobufjs/float": "^1.0.2",
-            "@protobufjs/inquire": "^1.1.0",
-            "@protobufjs/path": "^1.1.2",
-            "@protobufjs/pool": "^1.1.0",
-            "@protobufjs/utf8": "^1.1.0",
-            "@types/long": "^4.0.0",
-            "@types/node": "^10.1.0",
-            "long": "^4.0.0"
+            "@protobufjs/aspromise": "1.1.2",
+            "@protobufjs/base64": "1.1.2",
+            "@protobufjs/codegen": "2.0.4",
+            "@protobufjs/eventemitter": "1.1.0",
+            "@protobufjs/fetch": "1.1.0",
+            "@protobufjs/float": "1.0.2",
+            "@protobufjs/inquire": "1.1.0",
+            "@protobufjs/path": "1.1.2",
+            "@protobufjs/pool": "1.1.0",
+            "@protobufjs/utf8": "1.1.0",
+            "@types/long": "4.0.0",
+            "@types/node": "10.12.26",
+            "long": "4.0.0"
           }
         }
       }
     },
     "graceful-fs": {
-      "version": "4.1.11",
-      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.11.tgz",
-      "integrity": "sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="
+      "version": "4.1.15",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.15.tgz",
+      "integrity": "sha512-6uHUhOPEBgQ24HM+r6b/QwWfZq+yiFcipKFrOFiBEnWdy5sdzYoi+pJeQaPI5qOLRFqWmAXUPQNsielzdLoecA=="
     },
     "grpc": {
-      "version": "1.15.1",
-      "resolved": "https://registry.npmjs.org/grpc/-/grpc-1.15.1.tgz",
-      "integrity": "sha512-BfJ6BpFE93xQW69oYfgVQDxSb7LqdQbnddvhFq4tUsj7s0NAIRrrN3fmN2Bi3qpGFRemsKsWPIchw3YNNq2Xjg==",
-      "requires": {
-        "lodash": "^4.17.5",
-        "nan": "^2.0.0",
-        "node-pre-gyp": "^0.10.0",
-        "protobufjs": "^5.0.3"
+      "version": "1.18.0",
+      "resolved": "https://registry.npmjs.org/grpc/-/grpc-1.18.0.tgz",
+      "integrity": "sha512-M0K67Zhv2ZzCjrTbQvjWgYFPB929L+qAVnbNgXepbfO5kJxUYc30dP8m8vb+o8QdahLHAeYfIqRoIzZRcCB98Q==",
+      "requires": {
+        "lodash.camelcase": "4.3.0",
+        "lodash.clone": "4.5.0",
+        "nan": "2.12.1",
+        "node-pre-gyp": "0.12.0",
+        "protobufjs": "5.0.3"
       },
       "dependencies": {
         "abbrev": {
@@ -1764,8 +1799,8 @@
           "version": "1.1.5",
           "bundled": true,
           "requires": {
-            "delegates": "^1.0.0",
-            "readable-stream": "^2.0.6"
+            "delegates": "1.0.0",
+            "readable-stream": "2.3.6"
           }
         },
         "balanced-match": {
@@ -1776,12 +1811,12 @@
           "version": "1.1.11",
           "bundled": true,
           "requires": {
-            "balanced-match": "^1.0.0",
+            "balanced-match": "1.0.0",
             "concat-map": "0.0.1"
           }
         },
         "chownr": {
-          "version": "1.0.1",
+          "version": "1.1.1",
           "bundled": true
         },
         "code-point-at": {
@@ -1823,7 +1858,7 @@
           "version": "1.2.5",
           "bundled": true,
           "requires": {
-            "minipass": "^2.2.1"
+            "minipass": "2.3.5"
           }
         },
         "fs.realpath": {
@@ -1834,26 +1869,26 @@
           "version": "2.7.4",
           "bundled": true,
           "requires": {
-            "aproba": "^1.0.3",
-            "console-control-strings": "^1.0.0",
-            "has-unicode": "^2.0.0",
-            "object-assign": "^4.1.0",
-            "signal-exit": "^3.0.0",
-            "string-width": "^1.0.1",
-            "strip-ansi": "^3.0.1",
-            "wide-align": "^1.1.0"
+            "aproba": "1.2.0",
+            "console-control-strings": "1.1.0",
+            "has-unicode": "2.0.1",
+            "object-assign": "4.1.1",
+            "signal-exit": "3.0.2",
+            "string-width": "1.0.2",
+            "strip-ansi": "3.0.1",
+            "wide-align": "1.1.3"
           }
         },
         "glob": {
           "version": "7.1.2",
           "bundled": true,
           "requires": {
-            "fs.realpath": "^1.0.0",
-            "inflight": "^1.0.4",
-            "inherits": "2",
-            "minimatch": "^3.0.4",
-            "once": "^1.3.0",
-            "path-is-absolute": "^1.0.0"
+            "fs.realpath": "1.0.0",
+            "inflight": "1.0.6",
+            "inherits": "2.0.3",
+            "minimatch": "3.0.4",
+            "once": "1.4.0",
+            "path-is-absolute": "1.0.1"
           }
         },
         "has-unicode": {
@@ -1864,22 +1899,22 @@
           "version": "0.4.23",
           "bundled": true,
           "requires": {
-            "safer-buffer": ">= 2.1.2 < 3"
+            "safer-buffer": "2.1.2"
           }
         },
         "ignore-walk": {
           "version": "3.0.1",
           "bundled": true,
           "requires": {
-            "minimatch": "^3.0.4"
+            "minimatch": "3.0.4"
           }
         },
         "inflight": {
           "version": "1.0.6",
           "bundled": true,
           "requires": {
-            "once": "^1.3.0",
-            "wrappy": "1"
+            "once": "1.4.0",
+            "wrappy": "1.0.2"
           }
         },
         "inherits": {
@@ -1894,7 +1929,7 @@
           "version": "1.0.0",
           "bundled": true,
           "requires": {
-            "number-is-nan": "^1.0.0"
+            "number-is-nan": "1.0.1"
           }
         },
         "isarray": {
@@ -1905,7 +1940,7 @@
           "version": "3.0.4",
           "bundled": true,
           "requires": {
-            "brace-expansion": "^1.1.7"
+            "brace-expansion": "1.1.11"
           }
         },
         "minimist": {
@@ -1913,18 +1948,18 @@
           "bundled": true
         },
         "minipass": {
-          "version": "2.3.3",
+          "version": "2.3.5",
           "bundled": true,
           "requires": {
-            "safe-buffer": "^5.1.2",
-            "yallist": "^3.0.0"
+            "safe-buffer": "5.1.2",
+            "yallist": "3.0.3"
           }
         },
         "minizlib": {
-          "version": "1.1.0",
+          "version": "1.1.1",
           "bundled": true,
           "requires": {
-            "minipass": "^2.2.1"
+            "minipass": "2.3.5"
           }
         },
         "mkdirp": {
@@ -1945,58 +1980,58 @@
           "bundled": true
         },
         "needle": {
-          "version": "2.2.2",
+          "version": "2.2.4",
           "bundled": true,
           "requires": {
-            "debug": "^2.1.2",
-            "iconv-lite": "^0.4.4",
-            "sax": "^1.2.4"
+            "debug": "2.6.9",
+            "iconv-lite": "0.4.23",
+            "sax": "1.2.4"
           }
         },
         "node-pre-gyp": {
-          "version": "0.10.3",
+          "version": "0.12.0",
           "bundled": true,
           "requires": {
-            "detect-libc": "^1.0.2",
-            "mkdirp": "^0.5.1",
-            "needle": "^2.2.1",
-            "nopt": "^4.0.1",
-            "npm-packlist": "^1.1.6",
-            "npmlog": "^4.0.2",
-            "rc": "^1.2.7",
-            "rimraf": "^2.6.1",
-            "semver": "^5.3.0",
-            "tar": "^4"
+            "detect-libc": "1.0.3",
+            "mkdirp": "0.5.1",
+            "needle": "2.2.4",
+            "nopt": "4.0.1",
+            "npm-packlist": "1.1.12",
+            "npmlog": "4.1.2",
+            "rc": "1.2.8",
+            "rimraf": "2.6.2",
+            "semver": "5.6.0",
+            "tar": "4.4.8"
           }
         },
         "nopt": {
           "version": "4.0.1",
           "bundled": true,
           "requires": {
-            "abbrev": "1",
-            "osenv": "^0.1.4"
+            "abbrev": "1.1.1",
+            "osenv": "0.1.5"
           }
         },
         "npm-bundled": {
-          "version": "1.0.3",
+          "version": "1.0.5",
           "bundled": true
         },
         "npm-packlist": {
-          "version": "1.1.11",
+          "version": "1.1.12",
           "bundled": true,
           "requires": {
-            "ignore-walk": "^3.0.1",
-            "npm-bundled": "^1.0.1"
+            "ignore-walk": "3.0.1",
+            "npm-bundled": "1.0.5"
           }
         },
         "npmlog": {
           "version": "4.1.2",
           "bundled": true,
           "requires": {
-            "are-we-there-yet": "~1.1.2",
-            "console-control-strings": "~1.1.0",
-            "gauge": "~2.7.3",
-            "set-blocking": "~2.0.0"
+            "are-we-there-yet": "1.1.5",
+            "console-control-strings": "1.1.0",
+            "gauge": "2.7.4",
+            "set-blocking": "2.0.0"
           }
         },
         "number-is-nan": {
@@ -2011,7 +2046,7 @@
           "version": "1.4.0",
           "bundled": true,
           "requires": {
-            "wrappy": "1"
+            "wrappy": "1.0.2"
           }
         },
         "os-homedir": {
@@ -2026,8 +2061,8 @@
           "version": "0.1.5",
           "bundled": true,
           "requires": {
-            "os-homedir": "^1.0.0",
-            "os-tmpdir": "^1.0.0"
+            "os-homedir": "1.0.2",
+            "os-tmpdir": "1.0.2"
           }
         },
         "path-is-absolute": {
@@ -2042,30 +2077,30 @@
           "version": "1.2.8",
           "bundled": true,
           "requires": {
-            "deep-extend": "^0.6.0",
-            "ini": "~1.3.0",
-            "minimist": "^1.2.0",
-            "strip-json-comments": "~2.0.1"
+            "deep-extend": "0.6.0",
+            "ini": "1.3.5",
+            "minimist": "1.2.0",
+            "strip-json-comments": "2.0.1"
           }
         },
         "readable-stream": {
           "version": "2.3.6",
           "bundled": true,
           "requires": {
-            "core-util-is": "~1.0.0",
-            "inherits": "~2.0.3",
-            "isarray": "~1.0.0",
-            "process-nextick-args": "~2.0.0",
-            "safe-buffer": "~5.1.1",
-            "string_decoder": "~1.1.1",
-            "util-deprecate": "~1.0.1"
+            "core-util-is": "1.0.2",
+            "inherits": "2.0.3",
+            "isarray": "1.0.0",
+            "process-nextick-args": "2.0.0",
+            "safe-buffer": "5.1.2",
+            "string_decoder": "1.1.1",
+            "util-deprecate": "1.0.2"
           }
         },
         "rimraf": {
           "version": "2.6.2",
           "bundled": true,
           "requires": {
-            "glob": "^7.0.5"
+            "glob": "7.1.2"
           }
         },
         "safe-buffer": {
@@ -2081,7 +2116,7 @@
           "bundled": true
         },
         "semver": {
-          "version": "5.5.0",
+          "version": "5.6.0",
           "bundled": true
         },
         "set-blocking": {
@@ -2092,27 +2127,27 @@
           "version": "3.0.2",
           "bundled": true
         },
-        "string-width": {
-          "version": "1.0.2",
+        "string_decoder": {
+          "version": "1.1.1",
           "bundled": true,
           "requires": {
-            "code-point-at": "^1.0.0",
-            "is-fullwidth-code-point": "^1.0.0",
-            "strip-ansi": "^3.0.0"
+            "safe-buffer": "5.1.2"
           }
         },
-        "string_decoder": {
-          "version": "1.1.1",
+        "string-width": {
+          "version": "1.0.2",
           "bundled": true,
           "requires": {
-            "safe-buffer": "~5.1.0"
+            "code-point-at": "1.1.0",
+            "is-fullwidth-code-point": "1.0.0",
+            "strip-ansi": "3.0.1"
           }
         },
         "strip-ansi": {
           "version": "3.0.1",
           "bundled": true,
           "requires": {
-            "ansi-regex": "^2.0.0"
+            "ansi-regex": "2.1.1"
           }
         },
         "strip-json-comments": {
@@ -2120,16 +2155,16 @@
           "bundled": true
         },
         "tar": {
-          "version": "4.4.6",
+          "version": "4.4.8",
           "bundled": true,
           "requires": {
-            "chownr": "^1.0.1",
-            "fs-minipass": "^1.2.5",
-            "minipass": "^2.3.3",
-            "minizlib": "^1.1.0",
-            "mkdirp": "^0.5.0",
-            "safe-buffer": "^5.1.2",
-            "yallist": "^3.0.2"
+            "chownr": "1.1.1",
+            "fs-minipass": "1.2.5",
+            "minipass": "2.3.5",
+            "minizlib": "1.1.1",
+            "mkdirp": "0.5.1",
+            "safe-buffer": "5.1.2",
+            "yallist": "3.0.3"
           }
         },
         "util-deprecate": {
@@ -2140,7 +2175,7 @@
           "version": "1.1.3",
           "bundled": true,
           "requires": {
-            "string-width": "^1.0.2 || 2"
+            "string-width": "1.0.2"
           }
         },
         "wrappy": {
@@ -2148,21 +2183,21 @@
           "bundled": true
         },
         "yallist": {
-          "version": "3.0.2",
+          "version": "3.0.3",
           "bundled": true
         }
       }
     },
     "gtoken": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-2.3.0.tgz",
-      "integrity": "sha512-Jc9/8mV630cZE9FC5tIlJCZNdUjwunvlwOtCz6IDlaiB4Sz68ki29a1+q97sWTnTYroiuF9B135rod9zrQdHLw==",
+      "version": "2.3.2",
+      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-2.3.2.tgz",
+      "integrity": "sha512-F8EObUGyC8Qd3WXTloNULZBwfUsOABoHElihB1F6zGhT/cy38iPL09wGLRY712I+hQnOyA+sYlgPFX2cOKz0qg==",
       "requires": {
-        "axios": "^0.18.0",
-        "google-p12-pem": "^1.0.0",
-        "jws": "^3.1.4",
-        "mime": "^2.2.0",
-        "pify": "^3.0.0"
+        "gaxios": "1.7.0",
+        "google-p12-pem": "1.0.3",
+        "jws": "3.2.1",
+        "mime": "2.4.0",
+        "pify": "4.0.1"
       }
     },
     "har-schema": {
@@ -2171,12 +2206,12 @@
       "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="
     },
     "har-validator": {
-      "version": "5.1.0",
-      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.0.tgz",
-      "integrity": "sha512-+qnmNjI4OfH2ipQ9VQOw23bBd/ibtfbVdK2fYbY4acTDqKTW/YDp9McimZdDbG8iV9fZizUqQMD5xvriB146TA==",
+      "version": "5.1.3",
+      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.3.tgz",
+      "integrity": "sha512-sNvOCzEQNr/qrvJgc3UG/kD4QtlHycrzwS+6mfTrrSq97BvaYcPZZI1ZSqGSPR73Cxn4LKTD4PttRwfU7jWq5g==",
       "requires": {
-        "ajv": "^5.3.0",
-        "har-schema": "^2.0.0"
+        "ajv": "6.9.1",
+        "har-schema": "2.0.0"
       }
     },
     "has-value": {
@@ -2184,9 +2219,9 @@
       "resolved": "https://registry.npmjs.org/has-value/-/has-value-1.0.0.tgz",
       "integrity": "sha1-GLKB2lhbHFxR3vJMkw7SmgvmsXc=",
       "requires": {
-        "get-value": "^2.0.6",
-        "has-values": "^1.0.0",
-        "isobject": "^3.0.0"
+        "get-value": "2.0.6",
+        "has-values": "1.0.0",
+        "isobject": "3.0.1"
       }
     },
     "has-values": {
@@ -2194,8 +2229,8 @@
       "resolved": "https://registry.npmjs.org/has-values/-/has-values-1.0.0.tgz",
       "integrity": "sha1-lbC2P+whRmGab+V/51Yo1aOe/k8=",
       "requires": {
-        "is-number": "^3.0.0",
-        "kind-of": "^4.0.0"
+        "is-number": "3.0.0",
+        "kind-of": "4.0.0"
       },
       "dependencies": {
         "kind-of": {
@@ -2203,7 +2238,7 @@
           "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-4.0.0.tgz",
           "integrity": "sha1-IIE989cSkosgc3hpGkUGb65y3Vc=",
           "requires": {
-            "is-buffer": "^1.1.5"
+            "is-buffer": "1.1.6"
           }
         }
       }
@@ -2213,39 +2248,51 @@
       "resolved": "https://registry.npmjs.org/hash-stream-validation/-/hash-stream-validation-0.2.1.tgz",
       "integrity": "sha1-7Mm5l7IYvluzEphii7gHhptz3NE=",
       "requires": {
-        "through2": "^2.0.0"
+        "through2": "2.0.5"
       }
     },
     "http-errors": {
       "version": "1.6.3",
-      "resolved": "http://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
       "integrity": "sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0=",
       "requires": {
-        "depd": "~1.1.2",
+        "depd": "1.1.2",
         "inherits": "2.0.3",
         "setprototypeof": "1.1.0",
-        "statuses": ">= 1.4.0 < 2"
+        "statuses": "1.4.0"
       }
     },
     "http-parser-js": {
-      "version": "0.4.13",
-      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.4.13.tgz",
-      "integrity": "sha1-O9bW/ebjFyyTNMOzO2wZPYD+ETc="
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.0.tgz",
+      "integrity": "sha512-cZdEF7r4gfRIq7ezX9J0T+kQmJNOub71dWbgAXVHDct80TKP4MCETtZQ31xyv38UwgzkWPYF/Xc0ge55dW9Z9w=="
     },
     "http-signature": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
       "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
       "requires": {
-        "assert-plus": "^1.0.0",
-        "jsprim": "^1.2.2",
-        "sshpk": "^1.7.0"
+        "assert-plus": "1.0.0",
+        "jsprim": "1.4.1",
+        "sshpk": "1.16.1"
+      }
+    },
+    "https-proxy-agent": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-2.2.1.tgz",
+      "integrity": "sha512-HPCTS1LW51bcyMYbxUIOO4HEOlQ1/1qRaFWcyxvwaqUS9TY88aoEuHUY33kuAh1YhVVaDQhLZsnPd+XNARWZlQ==",
+      "requires": {
+        "agent-base": "4.2.1",
+        "debug": "3.2.6"
       }
     },
     "iconv-lite": {
-      "version": "0.4.19",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.19.tgz",
-      "integrity": "sha512-oTZqweIP51xaGPI4uPa56/Pri/480R+mo7SeU+YETByQNhDG55ycFyNLIgta9vXhILrxXDmF7ZGhqZIcuN0gJQ=="
+      "version": "0.4.23",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz",
+      "integrity": "sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA==",
+      "requires": {
+        "safer-buffer": "2.1.2"
+      }
     },
     "ignore": {
       "version": "3.3.10",
@@ -2267,8 +2314,8 @@
       "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
       "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
       "requires": {
-        "once": "^1.3.0",
-        "wrappy": "1"
+        "once": "1.4.0",
+        "wrappy": "1.0.2"
       }
     },
     "inherits": {
@@ -2287,16 +2334,16 @@
       "integrity": "sha1-6qM9bd16zo9/b+DJygRA5wZzix4="
     },
     "is": {
-      "version": "3.2.1",
-      "resolved": "https://registry.npmjs.org/is/-/is-3.2.1.tgz",
-      "integrity": "sha1-0Kwq1V63sL7JJqUmb2xmKqqD3KU="
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/is/-/is-3.3.0.tgz",
+      "integrity": "sha512-nW24QBoPcFGGHJGUwnfpI7Yc5CdqWNdsyHQszVE/z2pKHXzh7FZ5GWhJqSyaQ9wMkQnsTx+kAI8bHlCX4tKdbg=="
     },
     "is-accessor-descriptor": {
       "version": "0.1.6",
       "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz",
       "integrity": "sha1-qeEss66Nh2cn7u84Q/igiXtcmNY=",
       "requires": {
-        "kind-of": "^3.0.2"
+        "kind-of": "3.2.2"
       },
       "dependencies": {
         "kind-of": {
@@ -2304,7 +2351,7 @@
           "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
           "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
           "requires": {
-            "is-buffer": "^1.1.5"
+            "is-buffer": "1.1.6"
           }
         }
       }
@@ -2319,7 +2366,7 @@
       "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz",
       "integrity": "sha1-C17mSDiOLIYCgueT8YVv7D8wG1Y=",
       "requires": {
-        "kind-of": "^3.0.2"
+        "kind-of": "3.2.2"
       },
       "dependencies": {
         "kind-of": {
@@ -2327,7 +2374,7 @@
           "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
           "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
           "requires": {
-            "is-buffer": "^1.1.5"
+            "is-buffer": "1.1.6"
           }
         }
       }
@@ -2337,9 +2384,9 @@
       "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-0.1.6.tgz",
       "integrity": "sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==",
       "requires": {
-        "is-accessor-descriptor": "^0.1.6",
-        "is-data-descriptor": "^0.1.4",
-        "kind-of": "^5.0.0"
+        "is-accessor-descriptor": "0.1.6",
+        "is-data-descriptor": "0.1.4",
+        "kind-of": "5.1.0"
       },
       "dependencies": {
         "kind-of": {
@@ -2364,7 +2411,7 @@
       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz",
       "integrity": "sha1-754xOG8DGn8NZDr4L95QxFfvAMs=",
       "requires": {
-        "number-is-nan": "^1.0.0"
+        "number-is-nan": "1.0.1"
       }
     },
     "is-glob": {
@@ -2372,7 +2419,7 @@
       "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.0.tgz",
       "integrity": "sha1-lSHHaEXMJhCoUgPd8ICpWML/q8A=",
       "requires": {
-        "is-extglob": "^2.1.1"
+        "is-extglob": "2.1.1"
       }
     },
     "is-number": {
@@ -2380,7 +2427,7 @@
       "resolved": "https://registry.npmjs.org/is-number/-/is-number-3.0.0.tgz",
       "integrity": "sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=",
       "requires": {
-        "kind-of": "^3.0.2"
+        "kind-of": "3.2.2"
       },
       "dependencies": {
         "kind-of": {
@@ -2388,14 +2435,14 @@
           "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
           "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
           "requires": {
-            "is-buffer": "^1.1.5"
+            "is-buffer": "1.1.6"
           }
         }
       }
     },
     "is-obj": {
       "version": "1.0.1",
-      "resolved": "http://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
+      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
       "integrity": "sha1-PkcprB9f3gJc19g6iW2rn09n2w8="
     },
     "is-plain-object": {
@@ -2403,7 +2450,7 @@
       "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz",
       "integrity": "sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==",
       "requires": {
-        "isobject": "^3.0.1"
+        "isobject": "3.0.1"
       }
     },
     "is-stream-ended": {
@@ -2439,8 +2486,7 @@
     "jsbn": {
       "version": "0.1.1",
       "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
-      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
-      "optional": true
+      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM="
     },
     "json-schema": {
       "version": "0.2.3",
@@ -2448,9 +2494,9 @@
       "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="
     },
     "json-schema-traverse": {
-      "version": "0.3.1",
-      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz",
-      "integrity": "sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A="
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
     },
     "json-stringify-safe": {
       "version": "5.0.1",
@@ -2462,16 +2508,16 @@
       "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.1.0.tgz",
       "integrity": "sha1-xjl80uX9WD1lwAeoPce7eOaYK4M=",
       "requires": {
-        "jws": "^3.1.4",
-        "lodash.includes": "^4.3.0",
-        "lodash.isboolean": "^3.0.3",
-        "lodash.isinteger": "^4.0.4",
-        "lodash.isnumber": "^3.0.3",
-        "lodash.isplainobject": "^4.0.6",
-        "lodash.isstring": "^4.0.1",
-        "lodash.once": "^4.0.0",
-        "ms": "^2.0.0",
-        "xtend": "^4.0.1"
+        "jws": "3.2.1",
+        "lodash.includes": "4.3.0",
+        "lodash.isboolean": "3.0.3",
+        "lodash.isinteger": "4.0.4",
+        "lodash.isnumber": "3.0.3",
+        "lodash.isplainobject": "4.0.6",
+        "lodash.isstring": "4.0.1",
+        "lodash.once": "4.1.1",
+        "ms": "2.1.1",
+        "xtend": "4.0.1"
       }
     },
     "jsprim": {
@@ -2486,22 +2532,22 @@
       }
     },
     "jwa": {
-      "version": "1.1.6",
-      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.1.6.tgz",
-      "integrity": "sha512-tBO/cf++BUsJkYql/kBbJroKOgHWEigTKBAjjBEmrMGYd1QMBC74Hr4Wo2zCZw6ZrVhlJPvoMrkcOnlWR/DJfw==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.2.0.tgz",
+      "integrity": "sha512-Grku9ZST5NNQ3hqNUodSkDfEBqAmGA1R8yiyPHOnLzEKI0GaCQC/XhFmsheXYuXzFQJdILbh+lYBiliqG5R/Vg==",
       "requires": {
         "buffer-equal-constant-time": "1.0.1",
         "ecdsa-sig-formatter": "1.0.10",
-        "safe-buffer": "^5.0.1"
+        "safe-buffer": "5.1.2"
       }
     },
     "jws": {
-      "version": "3.1.5",
-      "resolved": "https://registry.npmjs.org/jws/-/jws-3.1.5.tgz",
-      "integrity": "sha512-GsCSexFADNQUr8T5HPJvayTjvPIfoyJPtLQBwn5a4WZQchcrPMPMAWcC1AzJVRDKyD6ZPROPAxgv6rfHViO4uQ==",
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.1.tgz",
+      "integrity": "sha512-bGA2omSrFUkd72dhh05bIAN832znP4wOU3lfuXtRBuGTbsmNmDXMQg28f0Vsxaxgk4myF5YkKQpz6qeRpMgX9g==",
       "requires": {
-        "jwa": "^1.1.5",
-        "safe-buffer": "^5.0.1"
+        "jwa": "1.2.0",
+        "safe-buffer": "5.1.2"
       }
     },
     "kind-of": {
@@ -2514,7 +2560,7 @@
       "resolved": "https://registry.npmjs.org/lcid/-/lcid-1.0.0.tgz",
       "integrity": "sha1-MIrMr6C8SDo4Z7S28rlQYlHRuDU=",
       "requires": {
-        "invert-kv": "^1.0.0"
+        "invert-kv": "1.0.0"
       }
     },
     "lodash": {
@@ -2522,6 +2568,16 @@
       "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.11.tgz",
       "integrity": "sha512-cQKh8igo5QUhZ7lg38DYWAxMvjSAKG0A8wGSVimP07SIUEK2UO+arSRKbRZWtelMtN5V0Hkwh5ryOto/SshYIg=="
     },
+    "lodash.camelcase": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
+      "integrity": "sha1-soqmKIorn8ZRA1x3EfZathkDMaY="
+    },
+    "lodash.clone": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.clone/-/lodash.clone-4.5.0.tgz",
+      "integrity": "sha1-GVhwRQ9aExkkeN9Lw9I9LeoZB7Y="
+    },
     "lodash.includes": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
@@ -2568,12 +2624,12 @@
       "integrity": "sha1-2CG3E4yhy1gcFymQ7xTbIAtcR0s="
     },
     "lru-cache": {
-      "version": "4.1.3",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.3.tgz",
-      "integrity": "sha512-fFEhvcgzuIoJVUF8fYr5KR0YqxD238zgObTps31YdADwPPAp82a4M8TrckkWyx7ekNlf9aBcVn81cFwwXngrJA==",
+      "version": "4.1.5",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
+      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
       "requires": {
-        "pseudomap": "^1.0.2",
-        "yallist": "^2.1.2"
+        "pseudomap": "1.0.2",
+        "yallist": "2.1.2"
       }
     },
     "make-dir": {
@@ -2581,7 +2637,14 @@
       "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-1.3.0.tgz",
       "integrity": "sha512-2w31R7SJtieJJnQtGc7RVL2StM2vGYVfqUOvUDxH6bC6aJTxPxTF0GnIgCyu7tjockiUWAYQRbxa7vKn34s5sQ==",
       "requires": {
-        "pify": "^3.0.0"
+        "pify": "3.0.0"
+      },
+      "dependencies": {
+        "pify": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
+          "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY="
+        }
       }
     },
     "map-cache": {
@@ -2594,7 +2657,7 @@
       "resolved": "https://registry.npmjs.org/map-visit/-/map-visit-1.0.0.tgz",
       "integrity": "sha1-7Nyo8TFE5mDxtb1B8S80edmN+48=",
       "requires": {
-        "object-visit": "^1.0.0"
+        "object-visit": "1.0.1"
       }
     },
     "media-typer": {
@@ -2608,9 +2671,9 @@
       "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E="
     },
     "merge2": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.2.2.tgz",
-      "integrity": "sha512-bgM8twH86rWni21thii6WCMQMRMmwqqdW3sGWi9IipnVAszdLXRjwDwAnyrVXo6DuP3AjRMMttZKUB48QWIFGg=="
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.2.3.tgz",
+      "integrity": "sha512-gdUU1Fwj5ep4kplwcmftruWofEFt6lfpkkr3h860CXbAB9c3hGb55EOL2ali0Td5oebvW0E1+3Sr+Ur7XfKpRA=="
     },
     "methmeth": {
       "version": "1.1.0",
@@ -2627,37 +2690,37 @@
       "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-3.1.10.tgz",
       "integrity": "sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==",
       "requires": {
-        "arr-diff": "^4.0.0",
-        "array-unique": "^0.3.2",
-        "braces": "^2.3.1",
-        "define-property": "^2.0.2",
-        "extend-shallow": "^3.0.2",
-        "extglob": "^2.0.4",
-        "fragment-cache": "^0.2.1",
-        "kind-of": "^6.0.2",
-        "nanomatch": "^1.2.9",
-        "object.pick": "^1.3.0",
-        "regex-not": "^1.0.0",
-        "snapdragon": "^0.8.1",
-        "to-regex": "^3.0.2"
+        "arr-diff": "4.0.0",
+        "array-unique": "0.3.2",
+        "braces": "2.3.2",
+        "define-property": "2.0.2",
+        "extend-shallow": "3.0.2",
+        "extglob": "2.0.4",
+        "fragment-cache": "0.2.1",
+        "kind-of": "6.0.2",
+        "nanomatch": "1.2.13",
+        "object.pick": "1.3.0",
+        "regex-not": "1.0.2",
+        "snapdragon": "0.8.2",
+        "to-regex": "3.0.2"
       }
     },
     "mime": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/mime/-/mime-2.3.1.tgz",
-      "integrity": "sha512-OEUllcVoydBHGN1z84yfQDimn58pZNNNXgZlHXSboxMlFvgI6MXSWpWKpFRra7H1HxpVhHTkrghfRW49k6yjeg=="
+      "version": "2.4.0",
+      "resolved": "https://registry.npmjs.org/mime/-/mime-2.4.0.tgz",
+      "integrity": "sha512-ikBcWwyqXQSHKtciCcctu9YfPbFYZ4+gbHEmE0Q8jzcTYQg5dHCr3g2wwAZjPoJfQVXZq6KXAjpXOTf5/cjT7w=="
     },
     "mime-db": {
-      "version": "1.36.0",
-      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.36.0.tgz",
-      "integrity": "sha512-L+xvyD9MkoYMXb1jAmzI/lWYAxAMCPvIBSWur0PZ5nOf5euahRLVqH//FKW9mWp2lkqUgYiXPgkzfMUFi4zVDw=="
+      "version": "1.38.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.38.0.tgz",
+      "integrity": "sha512-bqVioMFFzc2awcdJZIzR3HjZFX20QhilVS7hytkKrv7xFAn8bM1gzc/FOX2awLISvWe0PV8ptFKcon+wZ5qYkg=="
     },
     "mime-types": {
-      "version": "2.1.20",
-      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.20.tgz",
-      "integrity": "sha512-HrkrPaP9vGuWbLK1B1FfgAkbqNjIuy4eHlIYnFi7kamZyLLrGlo2mpcx0bBmNpKqBtYtAfGbodDddIgddSJC2A==",
+      "version": "2.1.22",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.22.tgz",
+      "integrity": "sha512-aGl6TZGnhm/li6F7yx82bJiBZwgiEa4Hf6CNr8YO+r5UHr53tSTYZb102zyU50DOWWKeOv0uQLRL0/9EiKWCog==",
       "requires": {
-        "mime-db": "~1.36.0"
+        "mime-db": "1.38.0"
       }
     },
     "minimatch": {
@@ -2665,7 +2728,7 @@
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
       "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
       "requires": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "1.1.11"
       }
     },
     "mixin-deep": {
@@ -2673,8 +2736,8 @@
       "resolved": "https://registry.npmjs.org/mixin-deep/-/mixin-deep-1.3.1.tgz",
       "integrity": "sha512-8ZItLHeEgaqEvd5lYBXfm4EZSFCX29Jb9K+lAHhDKzReKBQKj3R+7NOF6tjqYi9t4oI8VUfaWITJQm86wnXGNQ==",
       "requires": {
-        "for-in": "^1.0.2",
-        "is-extendable": "^1.0.1"
+        "for-in": "1.0.2",
+        "is-extendable": "1.0.1"
       },
       "dependencies": {
         "is-extendable": {
@@ -2682,7 +2745,7 @@
           "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-1.0.1.tgz",
           "integrity": "sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==",
           "requires": {
-            "is-plain-object": "^2.0.4"
+            "is-plain-object": "2.0.4"
           }
         }
       }
@@ -2693,31 +2756,31 @@
       "integrity": "sha512-9DITV2YEMcw7XojdfvGl3gDD8J9QjZTJ7ZOUuSAkP+F3T6rDbzMJuPktxptsdHYEvZcmXrCD3LMOhdSAEq6zKA=="
     },
     "ms": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
-      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.1.tgz",
+      "integrity": "sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg=="
     },
     "nan": {
-      "version": "2.11.0",
-      "resolved": "https://registry.npmjs.org/nan/-/nan-2.11.0.tgz",
-      "integrity": "sha512-F4miItu2rGnV2ySkXOQoA8FKz/SR2Q2sWP0sbTxNxz/tuokeC8WxOhPMcwi0qIyGtVn/rrSeLbvVkznqCdwYnw=="
+      "version": "2.12.1",
+      "resolved": "https://registry.npmjs.org/nan/-/nan-2.12.1.tgz",
+      "integrity": "sha512-JY7V6lRkStKcKTvHO5NVSQRv+RV+FIL5pvDoLiAtSL9pKlC5x9PKQcZDsq7m4FO4d57mkhC6Z+QhAh3Jdk5JFw=="
     },
     "nanomatch": {
       "version": "1.2.13",
       "resolved": "https://registry.npmjs.org/nanomatch/-/nanomatch-1.2.13.tgz",
       "integrity": "sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==",
       "requires": {
-        "arr-diff": "^4.0.0",
-        "array-unique": "^0.3.2",
-        "define-property": "^2.0.2",
-        "extend-shallow": "^3.0.2",
-        "fragment-cache": "^0.2.1",
-        "is-windows": "^1.0.2",
-        "kind-of": "^6.0.2",
-        "object.pick": "^1.3.0",
-        "regex-not": "^1.0.0",
-        "snapdragon": "^0.8.1",
-        "to-regex": "^3.0.1"
+        "arr-diff": "4.0.0",
+        "array-unique": "0.3.2",
+        "define-property": "2.0.2",
+        "extend-shallow": "3.0.2",
+        "fragment-cache": "0.2.1",
+        "is-windows": "1.0.2",
+        "kind-of": "6.0.2",
+        "object.pick": "1.3.0",
+        "regex-not": "1.0.2",
+        "snapdragon": "0.8.2",
+        "to-regex": "3.0.2"
       }
     },
     "negotiator": {
@@ -2725,6 +2788,11 @@
       "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz",
       "integrity": "sha1-KzJxhOiZIQEXeyhWP7XnECrNDKk="
     },
+    "node-fetch": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.3.0.tgz",
+      "integrity": "sha512-MOd8pV3fxENbryESLgVIeaGKrdl+uaYhCSSVkjeOb/31/njTpcis5aWfdqgNlHIrKOLRbMnfPINPOML2CIFeXA=="
+    },
     "node-forge": {
       "version": "0.7.1",
       "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-0.7.1.tgz",
@@ -2750,9 +2818,9 @@
       "resolved": "https://registry.npmjs.org/object-copy/-/object-copy-0.1.0.tgz",
       "integrity": "sha1-fn2Fi3gb18mRpBupde04EnVOmYw=",
       "requires": {
-        "copy-descriptor": "^0.1.0",
-        "define-property": "^0.2.5",
-        "kind-of": "^3.0.3"
+        "copy-descriptor": "0.1.1",
+        "define-property": "0.2.5",
+        "kind-of": "3.2.2"
       },
       "dependencies": {
         "define-property": {
@@ -2760,7 +2828,7 @@
           "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
           "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
           "requires": {
-            "is-descriptor": "^0.1.0"
+            "is-descriptor": "0.1.6"
           }
         },
         "kind-of": {
@@ -2768,22 +2836,22 @@
           "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
           "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
           "requires": {
-            "is-buffer": "^1.1.5"
+            "is-buffer": "1.1.6"
           }
         }
       }
     },
     "object-keys": {
-      "version": "1.0.12",
-      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.0.12.tgz",
-      "integrity": "sha512-FTMyFUm2wBcGHnH2eXmz7tC6IwlqQZ6mVZ+6dm6vZ4IQIHjs6FdNsQBuKGPuUUUY6NfJw2PshC08Tn6LzLDOag=="
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.0.tgz",
+      "integrity": "sha512-6OO5X1+2tYkNyNEx6TsCxEqFfRWaqx6EtMiSbGrw8Ob8v9Ne+Hl8rBAgLBZn5wjEz3s/s6U1WXFUFOcxxAwUpg=="
     },
     "object-visit": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/object-visit/-/object-visit-1.0.1.tgz",
       "integrity": "sha1-95xEk68MU3e1n+OdOV5BBC3QRbs=",
       "requires": {
-        "isobject": "^3.0.0"
+        "isobject": "3.0.1"
       }
     },
     "object.pick": {
@@ -2791,7 +2859,7 @@
       "resolved": "https://registry.npmjs.org/object.pick/-/object.pick-1.3.0.tgz",
       "integrity": "sha1-h6EKxMFpS9Lhy/U1kaZhQftd10c=",
       "requires": {
-        "isobject": "^3.0.1"
+        "isobject": "3.0.1"
       }
     },
     "on-finished": {
@@ -2807,7 +2875,7 @@
       "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
       "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
       "requires": {
-        "wrappy": "1"
+        "wrappy": "1.0.2"
       }
     },
     "optjs": {
@@ -2817,10 +2885,10 @@
     },
     "os-locale": {
       "version": "1.4.0",
-      "resolved": "http://registry.npmjs.org/os-locale/-/os-locale-1.4.0.tgz",
+      "resolved": "https://registry.npmjs.org/os-locale/-/os-locale-1.4.0.tgz",
       "integrity": "sha1-IPnxeuKe00XoveWDsT0gCYA8FNk=",
       "requires": {
-        "lcid": "^1.0.0"
+        "lcid": "1.0.0"
       }
     },
     "parseurl": {
@@ -2853,7 +2921,14 @@
       "resolved": "https://registry.npmjs.org/path-type/-/path-type-3.0.0.tgz",
       "integrity": "sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==",
       "requires": {
-        "pify": "^3.0.0"
+        "pify": "3.0.0"
+      },
+      "dependencies": {
+        "pify": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
+          "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY="
+        }
       }
     },
     "performance-now": {
@@ -2862,9 +2937,9 @@
       "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="
     },
     "pify": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
-      "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY="
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-4.0.1.tgz",
+      "integrity": "sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g=="
     },
     "posix-character-classes": {
       "version": "0.1.1",
@@ -2876,11 +2951,11 @@
       "resolved": "https://registry.npmjs.org/power-assert/-/power-assert-1.6.1.tgz",
       "integrity": "sha512-VWkkZV6Y+W8qLX/PtJu2Ur2jDPIs0a5vbP0TpKeybNcIXmT4vcKoVkyTp5lnQvTpY/DxacAZ4RZisHRHLJcAZQ==",
       "requires": {
-        "define-properties": "^1.1.2",
-        "empower": "^1.3.1",
-        "power-assert-formatter": "^1.4.1",
-        "universal-deep-strict-equal": "^1.2.1",
-        "xtend": "^4.0.0"
+        "define-properties": "1.1.3",
+        "empower": "1.3.1",
+        "power-assert-formatter": "1.4.1",
+        "universal-deep-strict-equal": "1.2.2",
+        "xtend": "4.0.1"
       }
     },
     "power-assert-context-formatter": {
@@ -2888,8 +2963,8 @@
       "resolved": "https://registry.npmjs.org/power-assert-context-formatter/-/power-assert-context-formatter-1.2.0.tgz",
       "integrity": "sha512-HLNEW8Bin+BFCpk/zbyKwkEu9W8/zThIStxGo7weYcFkKgMuGCHUJhvJeBGXDZf0Qm2xis4pbnnciGZiX0EpSg==",
       "requires": {
-        "core-js": "^2.0.0",
-        "power-assert-context-traversal": "^1.2.0"
+        "core-js": "2.6.5",
+        "power-assert-context-traversal": "1.2.0"
       }
     },
     "power-assert-context-reducer-ast": {
@@ -2897,11 +2972,11 @@
       "resolved": "https://registry.npmjs.org/power-assert-context-reducer-ast/-/power-assert-context-reducer-ast-1.2.0.tgz",
       "integrity": "sha512-EgOxmZ/Lb7tw4EwSKX7ZnfC0P/qRZFEG28dx/690qvhmOJ6hgThYFm5TUWANDLK5NiNKlPBi5WekVGd2+5wPrw==",
       "requires": {
-        "acorn": "^5.0.0",
-        "acorn-es7-plugin": "^1.0.12",
-        "core-js": "^2.0.0",
-        "espurify": "^1.6.0",
-        "estraverse": "^4.2.0"
+        "acorn": "5.7.3",
+        "acorn-es7-plugin": "1.1.7",
+        "core-js": "2.6.5",
+        "espurify": "1.8.1",
+        "estraverse": "4.2.0"
       }
     },
     "power-assert-context-traversal": {
@@ -2909,8 +2984,8 @@
       "resolved": "https://registry.npmjs.org/power-assert-context-traversal/-/power-assert-context-traversal-1.2.0.tgz",
       "integrity": "sha512-NFoHU6g2umNajiP2l4qb0BRWD773Aw9uWdWYH9EQsVwIZnog5bd2YYLFCVvaxWpwNzWeEfZIon2xtyc63026pQ==",
       "requires": {
-        "core-js": "^2.0.0",
-        "estraverse": "^4.1.0"
+        "core-js": "2.6.5",
+        "estraverse": "4.2.0"
       }
     },
     "power-assert-formatter": {
@@ -2918,13 +2993,13 @@
       "resolved": "https://registry.npmjs.org/power-assert-formatter/-/power-assert-formatter-1.4.1.tgz",
       "integrity": "sha1-XcEl7VCj37HdomwZNH879Y7CiEo=",
       "requires": {
-        "core-js": "^2.0.0",
-        "power-assert-context-formatter": "^1.0.7",
-        "power-assert-context-reducer-ast": "^1.0.7",
-        "power-assert-renderer-assertion": "^1.0.7",
-        "power-assert-renderer-comparison": "^1.0.7",
-        "power-assert-renderer-diagram": "^1.0.7",
-        "power-assert-renderer-file": "^1.0.7"
+        "core-js": "2.6.5",
+        "power-assert-context-formatter": "1.2.0",
+        "power-assert-context-reducer-ast": "1.2.0",
+        "power-assert-renderer-assertion": "1.2.0",
+        "power-assert-renderer-comparison": "1.2.0",
+        "power-assert-renderer-diagram": "1.2.0",
+        "power-assert-renderer-file": "1.2.0"
       }
     },
     "power-assert-renderer-assertion": {
@@ -2932,8 +3007,8 @@
       "resolved": "https://registry.npmjs.org/power-assert-renderer-assertion/-/power-assert-renderer-assertion-1.2.0.tgz",
       "integrity": "sha512-3F7Q1ZLmV2ZCQv7aV7NJLNK9G7QsostrhOU7U0RhEQS/0vhEqrRg2jEJl1jtUL4ZyL2dXUlaaqrmPv5r9kRvIg==",
       "requires": {
-        "power-assert-renderer-base": "^1.1.1",
-        "power-assert-util-string-width": "^1.2.0"
+        "power-assert-renderer-base": "1.1.1",
+        "power-assert-util-string-width": "1.2.0"
       }
     },
     "power-assert-renderer-base": {
@@ -2946,11 +3021,11 @@
       "resolved": "https://registry.npmjs.org/power-assert-renderer-comparison/-/power-assert-renderer-comparison-1.2.0.tgz",
       "integrity": "sha512-7c3RKPDBKK4E3JqdPtYRE9cM8AyX4LC4yfTvvTYyx8zSqmT5kJnXwzR0yWQLOavACllZfwrAGQzFiXPc5sWa+g==",
       "requires": {
-        "core-js": "^2.0.0",
-        "diff-match-patch": "^1.0.0",
-        "power-assert-renderer-base": "^1.1.1",
-        "stringifier": "^1.3.0",
-        "type-name": "^2.0.1"
+        "core-js": "2.6.5",
+        "diff-match-patch": "1.0.4",
+        "power-assert-renderer-base": "1.1.1",
+        "stringifier": "1.4.0",
+        "type-name": "2.0.2"
       }
     },
     "power-assert-renderer-diagram": {
@@ -2958,10 +3033,10 @@
       "resolved": "https://registry.npmjs.org/power-assert-renderer-diagram/-/power-assert-renderer-diagram-1.2.0.tgz",
       "integrity": "sha512-JZ6PC+DJPQqfU6dwSmpcoD7gNnb/5U77bU5KgNwPPa+i1Pxiz6UuDeM3EUBlhZ1HvH9tMjI60anqVyi5l2oNdg==",
       "requires": {
-        "core-js": "^2.0.0",
-        "power-assert-renderer-base": "^1.1.1",
-        "power-assert-util-string-width": "^1.2.0",
-        "stringifier": "^1.3.0"
+        "core-js": "2.6.5",
+        "power-assert-renderer-base": "1.1.1",
+        "power-assert-util-string-width": "1.2.0",
+        "stringifier": "1.4.0"
       }
     },
     "power-assert-renderer-file": {
@@ -2969,7 +3044,7 @@
       "resolved": "https://registry.npmjs.org/power-assert-renderer-file/-/power-assert-renderer-file-1.2.0.tgz",
       "integrity": "sha512-/oaVrRbeOtGoyyd7e4IdLP/jIIUFJdqJtsYzP9/88R39CMnfF/S/rUc8ZQalENfUfQ/wQHu+XZYRMaCEZmEesg==",
       "requires": {
-        "power-assert-renderer-base": "^1.1.1"
+        "power-assert-renderer-base": "1.1.1"
       }
     },
     "power-assert-util-string-width": {
@@ -2977,7 +3052,7 @@
       "resolved": "https://registry.npmjs.org/power-assert-util-string-width/-/power-assert-util-string-width-1.2.0.tgz",
       "integrity": "sha512-lX90G0igAW0iyORTILZ/QjZWsa1MZ6VVY3L0K86e2eKun3S4LKPH4xZIl8fdeMYLfOjkaszbNSzf1uugLeAm2A==",
       "requires": {
-        "eastasianwidth": "^0.2.0"
+        "eastasianwidth": "0.2.0"
       }
     },
     "process-nextick-args": {
@@ -2990,10 +3065,10 @@
       "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-5.0.3.tgz",
       "integrity": "sha512-55Kcx1MhPZX0zTbVosMQEO5R6/rikNXd9b6RQK4KSPcrSIIwoXTtebIczUrXlwaSrbz4x8XUVThGPob1n8I4QA==",
       "requires": {
-        "ascli": "~1",
-        "bytebuffer": "~5",
-        "glob": "^7.0.5",
-        "yargs": "^3.10.0"
+        "ascli": "1.0.1",
+        "bytebuffer": "5.0.1",
+        "glob": "7.1.3",
+        "yargs": "3.32.0"
       }
     },
     "proxy-addr": {
@@ -3001,7 +3076,7 @@
       "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.4.tgz",
       "integrity": "sha512-5erio2h9jp5CHGwcybmxmVqHmnCBZeewlfJ0pex+UW7Qny7OOZXTtH56TGNyBizkgiOwhJtMKrVzDTeKcySZwA==",
       "requires": {
-        "forwarded": "~0.1.2",
+        "forwarded": "0.1.2",
         "ipaddr.js": "1.8.0"
       }
     },
@@ -3011,17 +3086,17 @@
       "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
     },
     "psl": {
-      "version": "1.1.29",
-      "resolved": "https://registry.npmjs.org/psl/-/psl-1.1.29.tgz",
-      "integrity": "sha512-AeUmQ0oLN02flVHXWh9sSJF7mcdFq0ppid/JkErufc3hGIV/AMa8Fo9VgDo/cT2jFdOWoFvHp90qqBH54W+gjQ=="
+      "version": "1.1.31",
+      "resolved": "https://registry.npmjs.org/psl/-/psl-1.1.31.tgz",
+      "integrity": "sha512-/6pt4+C+T+wZUieKR620OpzN/LlnNKuWjy1iFLQ/UG35JqHlR/89MP1d96dUfkf6Dne3TuLQzOYEYshJ+Hx8mw=="
     },
     "pump": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/pump/-/pump-2.0.1.tgz",
       "integrity": "sha512-ruPMNRkN3MHP1cWJc9OWr+T/xDP0jhXYCLfJcBuX54hhfIBnaQmAUMfDcG4DM5UMWByBbJY69QSphm3jtDKIkA==",
       "requires": {
-        "end-of-stream": "^1.1.0",
-        "once": "^1.3.1"
+        "end-of-stream": "1.4.1",
+        "once": "1.4.0"
       }
     },
     "pumpify": {
@@ -3029,15 +3104,15 @@
       "resolved": "https://registry.npmjs.org/pumpify/-/pumpify-1.5.1.tgz",
       "integrity": "sha512-oClZI37HvuUJJxSKKrC17bZ9Cu0ZYhEAGPsPUy9KlMUmv9dKX2o77RUmq7f3XjIxbwyGwYzbzQ1L2Ks8sIradQ==",
       "requires": {
-        "duplexify": "^3.6.0",
-        "inherits": "^2.0.3",
-        "pump": "^2.0.0"
+        "duplexify": "3.7.1",
+        "inherits": "2.0.3",
+        "pump": "2.0.1"
       }
     },
     "punycode": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
-      "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4="
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
+      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A=="
     },
     "qs": {
       "version": "6.5.2",
@@ -3050,51 +3125,28 @@
       "integrity": "sha1-9JvmtIeJTdxA3MlKMi9hEJLgDV4="
     },
     "raw-body": {
-      "version": "2.3.2",
-      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.2.tgz",
-      "integrity": "sha1-vNYMd9Prk83gBQKVw/N5OJvIj4k=",
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz",
+      "integrity": "sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw==",
       "requires": {
         "bytes": "3.0.0",
-        "http-errors": "1.6.2",
-        "iconv-lite": "0.4.19",
+        "http-errors": "1.6.3",
+        "iconv-lite": "0.4.23",
         "unpipe": "1.0.0"
-      },
-      "dependencies": {
-        "depd": {
-          "version": "1.1.1",
-          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.1.tgz",
-          "integrity": "sha1-V4O04cRZ8G+lyif5kfPQbnoxA1k="
-        },
-        "http-errors": {
-          "version": "1.6.2",
-          "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.2.tgz",
-          "integrity": "sha1-CgAsyFcHGSp+eUbO7cERVfYOxzY=",
-          "requires": {
-            "depd": "1.1.1",
-            "inherits": "2.0.3",
-            "setprototypeof": "1.0.3",
-            "statuses": ">= 1.3.1 < 2"
-          }
-        },
-        "setprototypeof": {
-          "version": "1.0.3",
-          "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.0.3.tgz",
-          "integrity": "sha1-ZlZ+NwQ+608E2RvWWMDL77VbjgQ="
-        }
       }
     },
     "readable-stream": {
       "version": "2.3.6",
-      "resolved": "http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz",
       "integrity": "sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==",
       "requires": {
-        "core-util-is": "~1.0.0",
-        "inherits": "~2.0.3",
-        "isarray": "~1.0.0",
-        "process-nextick-args": "~2.0.0",
-        "safe-buffer": "~5.1.1",
-        "string_decoder": "~1.1.1",
-        "util-deprecate": "~1.0.1"
+        "core-util-is": "1.0.2",
+        "inherits": "2.0.3",
+        "isarray": "1.0.0",
+        "process-nextick-args": "2.0.0",
+        "safe-buffer": "5.1.2",
+        "string_decoder": "1.1.1",
+        "util-deprecate": "1.0.2"
       }
     },
     "regex-not": {
@@ -3102,8 +3154,8 @@
       "resolved": "https://registry.npmjs.org/regex-not/-/regex-not-1.0.2.tgz",
       "integrity": "sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==",
       "requires": {
-        "extend-shallow": "^3.0.2",
-        "safe-regex": "^1.1.0"
+        "extend-shallow": "3.0.2",
+        "safe-regex": "1.1.0"
       }
     },
     "repeat-element": {
@@ -3121,26 +3173,26 @@
       "resolved": "https://registry.npmjs.org/request/-/request-2.88.0.tgz",
       "integrity": "sha512-NAqBSrijGLZdM0WZNsInLJpkJokL72XYjUpnB0iwsRgxh7dB6COrHnTBNwN0E+lHDAJzu7kLAkDeY08z2/A0hg==",
       "requires": {
-        "aws-sign2": "~0.7.0",
-        "aws4": "^1.8.0",
-        "caseless": "~0.12.0",
-        "combined-stream": "~1.0.6",
-        "extend": "~3.0.2",
-        "forever-agent": "~0.6.1",
-        "form-data": "~2.3.2",
-        "har-validator": "~5.1.0",
-        "http-signature": "~1.2.0",
-        "is-typedarray": "~1.0.0",
-        "isstream": "~0.1.2",
-        "json-stringify-safe": "~5.0.1",
-        "mime-types": "~2.1.19",
-        "oauth-sign": "~0.9.0",
-        "performance-now": "^2.1.0",
-        "qs": "~6.5.2",
-        "safe-buffer": "^5.1.2",
-        "tough-cookie": "~2.4.3",
-        "tunnel-agent": "^0.6.0",
-        "uuid": "^3.3.2"
+        "aws-sign2": "0.7.0",
+        "aws4": "1.8.0",
+        "caseless": "0.12.0",
+        "combined-stream": "1.0.7",
+        "extend": "3.0.2",
+        "forever-agent": "0.6.1",
+        "form-data": "2.3.3",
+        "har-validator": "5.1.3",
+        "http-signature": "1.2.0",
+        "is-typedarray": "1.0.0",
+        "isstream": "0.1.2",
+        "json-stringify-safe": "5.0.1",
+        "mime-types": "2.1.22",
+        "oauth-sign": "0.9.0",
+        "performance-now": "2.1.0",
+        "qs": "6.5.2",
+        "safe-buffer": "5.1.2",
+        "tough-cookie": "2.4.3",
+        "tunnel-agent": "0.6.0",
+        "uuid": "3.3.2"
       }
     },
     "resolve-url": {
@@ -3163,8 +3215,8 @@
       "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-3.3.2.tgz",
       "integrity": "sha512-WIiGp37XXDC6e7ku3LFoi7LCL/Gs9luGeeqvbPRb+Zl6OQMw4RCRfSaW+aLfE6lhz1R941UavE6Svl3Dm5xGIQ==",
       "requires": {
-        "request": "^2.81.0",
-        "through2": "^2.0.0"
+        "request": "2.88.0",
+        "through2": "2.0.5"
       }
     },
     "safe-buffer": {
@@ -3177,7 +3229,7 @@
       "resolved": "https://registry.npmjs.org/safe-regex/-/safe-regex-1.1.0.tgz",
       "integrity": "sha1-QKNmnzsHfR6UPURinhV91IAjvy4=",
       "requires": {
-        "ret": "~0.1.10"
+        "ret": "0.1.15"
       }
     },
     "safer-buffer": {
@@ -3191,18 +3243,18 @@
       "integrity": "sha512-E64YFPUssFHEFBvpbbjr44NCLtI1AohxQ8ZSiJjQLskAdKuriYEP6VyGEsRDH8ScozGpkaX1BGvhanqCwkcEZw==",
       "requires": {
         "debug": "2.6.9",
-        "depd": "~1.1.2",
-        "destroy": "~1.0.4",
-        "encodeurl": "~1.0.2",
-        "escape-html": "~1.0.3",
-        "etag": "~1.8.1",
+        "depd": "1.1.2",
+        "destroy": "1.0.4",
+        "encodeurl": "1.0.2",
+        "escape-html": "1.0.3",
+        "etag": "1.8.1",
         "fresh": "0.5.2",
-        "http-errors": "~1.6.2",
+        "http-errors": "1.6.3",
         "mime": "1.4.1",
         "ms": "2.0.0",
-        "on-finished": "~2.3.0",
-        "range-parser": "~1.2.0",
-        "statuses": "~1.4.0"
+        "on-finished": "2.3.0",
+        "range-parser": "1.2.0",
+        "statuses": "1.4.0"
       },
       "dependencies": {
         "debug": {
@@ -3217,6 +3269,11 @@
           "version": "1.4.1",
           "resolved": "https://registry.npmjs.org/mime/-/mime-1.4.1.tgz",
           "integrity": "sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ=="
+        },
+        "ms": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
         }
       }
     },
@@ -3225,9 +3282,9 @@
       "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.13.2.tgz",
       "integrity": "sha512-p/tdJrO4U387R9oMjb1oj7qSMaMfmOyd4j9hOFoxZe2baQszgHcSWjuya/CiT5kgZZKRudHNOA0pYXOl8rQ5nw==",
       "requires": {
-        "encodeurl": "~1.0.2",
-        "escape-html": "~1.0.3",
-        "parseurl": "~1.3.2",
+        "encodeurl": "1.0.2",
+        "escape-html": "1.0.3",
+        "parseurl": "1.3.2",
         "send": "0.16.2"
       }
     },
@@ -3236,10 +3293,10 @@
       "resolved": "https://registry.npmjs.org/set-value/-/set-value-2.0.0.tgz",
       "integrity": "sha512-hw0yxk9GT/Hr5yJEYnHNKYXkIA8mVJgd9ditYZCe16ZczcaELYYcfvaXesNACk2O8O0nTiPQcQhGUQj8JLzeeg==",
       "requires": {
-        "extend-shallow": "^2.0.1",
-        "is-extendable": "^0.1.1",
-        "is-plain-object": "^2.0.3",
-        "split-string": "^3.0.1"
+        "extend-shallow": "2.0.1",
+        "is-extendable": "0.1.1",
+        "is-plain-object": "2.0.4",
+        "split-string": "3.1.0"
       },
       "dependencies": {
         "extend-shallow": {
@@ -3247,7 +3304,7 @@
           "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
           "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
           "requires": {
-            "is-extendable": "^0.1.0"
+            "is-extendable": "0.1.1"
           }
         }
       }
@@ -3277,14 +3334,14 @@
       "resolved": "https://registry.npmjs.org/snapdragon/-/snapdragon-0.8.2.tgz",
       "integrity": "sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==",
       "requires": {
-        "base": "^0.11.1",
-        "debug": "^2.2.0",
-        "define-property": "^0.2.5",
-        "extend-shallow": "^2.0.1",
-        "map-cache": "^0.2.2",
-        "source-map": "^0.5.6",
-        "source-map-resolve": "^0.5.0",
-        "use": "^3.1.0"
+        "base": "0.11.2",
+        "debug": "2.6.9",
+        "define-property": "0.2.5",
+        "extend-shallow": "2.0.1",
+        "map-cache": "0.2.2",
+        "source-map": "0.5.7",
+        "source-map-resolve": "0.5.2",
+        "use": "3.1.1"
       },
       "dependencies": {
         "debug": {
@@ -3300,7 +3357,7 @@
           "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
           "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
           "requires": {
-            "is-descriptor": "^0.1.0"
+            "is-descriptor": "0.1.6"
           }
         },
         "extend-shallow": {
@@ -3308,8 +3365,13 @@
           "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
           "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
           "requires": {
-            "is-extendable": "^0.1.0"
+            "is-extendable": "0.1.1"
           }
+        },
+        "ms": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
         }
       }
     },
@@ -3318,9 +3380,9 @@
       "resolved": "https://registry.npmjs.org/snapdragon-node/-/snapdragon-node-2.1.1.tgz",
       "integrity": "sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==",
       "requires": {
-        "define-property": "^1.0.0",
-        "isobject": "^3.0.0",
-        "snapdragon-util": "^3.0.1"
+        "define-property": "1.0.0",
+        "isobject": "3.0.1",
+        "snapdragon-util": "3.0.1"
       },
       "dependencies": {
         "define-property": {
@@ -3328,7 +3390,7 @@
           "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
           "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
           "requires": {
-            "is-descriptor": "^1.0.0"
+            "is-descriptor": "1.0.2"
           }
         },
         "is-accessor-descriptor": {
@@ -3336,7 +3398,7 @@
           "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
           "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
           "requires": {
-            "kind-of": "^6.0.0"
+            "kind-of": "6.0.2"
           }
         },
         "is-data-descriptor": {
@@ -3344,7 +3406,7 @@
           "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
           "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
           "requires": {
-            "kind-of": "^6.0.0"
+            "kind-of": "6.0.2"
           }
         },
         "is-descriptor": {
@@ -3352,9 +3414,9 @@
           "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
           "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
           "requires": {
-            "is-accessor-descriptor": "^1.0.0",
-            "is-data-descriptor": "^1.0.0",
-            "kind-of": "^6.0.2"
+            "is-accessor-descriptor": "1.0.0",
+            "is-data-descriptor": "1.0.0",
+            "kind-of": "6.0.2"
           }
         }
       }
@@ -3364,7 +3426,7 @@
       "resolved": "https://registry.npmjs.org/snapdragon-util/-/snapdragon-util-3.0.1.tgz",
       "integrity": "sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==",
       "requires": {
-        "kind-of": "^3.2.0"
+        "kind-of": "3.2.2"
       },
       "dependencies": {
         "kind-of": {
@@ -3372,7 +3434,7 @@
           "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
           "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
           "requires": {
-            "is-buffer": "^1.1.5"
+            "is-buffer": "1.1.6"
           }
         }
       }
@@ -3387,11 +3449,11 @@
       "resolved": "https://registry.npmjs.org/source-map-resolve/-/source-map-resolve-0.5.2.tgz",
       "integrity": "sha512-MjqsvNwyz1s0k81Goz/9vRBe9SZdB09Bdw+/zYyO+3CuPk6fouTaxscHkgtE8jKvf01kVfl8riHzERQ/kefaSA==",
       "requires": {
-        "atob": "^2.1.1",
-        "decode-uri-component": "^0.2.0",
-        "resolve-url": "^0.2.1",
-        "source-map-url": "^0.4.0",
-        "urix": "^0.1.0"
+        "atob": "2.1.2",
+        "decode-uri-component": "0.2.0",
+        "resolve-url": "0.2.1",
+        "source-map-url": "0.4.0",
+        "urix": "0.1.0"
       }
     },
     "source-map-url": {
@@ -3404,8 +3466,8 @@
       "resolved": "https://registry.npmjs.org/split-array-stream/-/split-array-stream-1.0.3.tgz",
       "integrity": "sha1-0rdajl4Ngk1S/eyLgiWDncLjXfo=",
       "requires": {
-        "async": "^2.4.0",
-        "is-stream-ended": "^0.1.0"
+        "async": "2.6.2",
+        "is-stream-ended": "0.1.4"
       }
     },
     "split-string": {
@@ -3413,23 +3475,23 @@
       "resolved": "https://registry.npmjs.org/split-string/-/split-string-3.1.0.tgz",
       "integrity": "sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==",
       "requires": {
-        "extend-shallow": "^3.0.0"
+        "extend-shallow": "3.0.2"
       }
     },
     "sshpk": {
-      "version": "1.14.2",
-      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.14.2.tgz",
-      "integrity": "sha1-xvxhZIo9nE52T9P8306hBeSSupg=",
+      "version": "1.16.1",
+      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.16.1.tgz",
+      "integrity": "sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==",
       "requires": {
-        "asn1": "~0.2.3",
-        "assert-plus": "^1.0.0",
-        "bcrypt-pbkdf": "^1.0.0",
-        "dashdash": "^1.12.0",
-        "ecc-jsbn": "~0.1.1",
-        "getpass": "^0.1.1",
-        "jsbn": "~0.1.0",
-        "safer-buffer": "^2.0.2",
-        "tweetnacl": "~0.14.0"
+        "asn1": "0.2.4",
+        "assert-plus": "1.0.0",
+        "bcrypt-pbkdf": "1.0.2",
+        "dashdash": "1.14.1",
+        "ecc-jsbn": "0.1.2",
+        "getpass": "0.1.7",
+        "jsbn": "0.1.1",
+        "safer-buffer": "2.1.2",
+        "tweetnacl": "0.14.5"
       }
     },
     "static-extend": {
@@ -3437,8 +3499,8 @@
       "resolved": "https://registry.npmjs.org/static-extend/-/static-extend-0.1.2.tgz",
       "integrity": "sha1-YICcOcv/VTNyJv1eC1IPNB8ftcY=",
       "requires": {
-        "define-property": "^0.2.5",
-        "object-copy": "^0.1.0"
+        "define-property": "0.2.5",
+        "object-copy": "0.1.0"
       },
       "dependencies": {
         "define-property": {
@@ -3446,7 +3508,7 @@
           "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
           "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
           "requires": {
-            "is-descriptor": "^0.1.0"
+            "is-descriptor": "0.1.6"
           }
         }
       }
@@ -3457,11 +3519,11 @@
       "integrity": "sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew=="
     },
     "stream-events": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.4.tgz",
-      "integrity": "sha512-D243NJaYs/xBN2QnoiMDY7IesJFIK7gEhnvAYqJa5JvDdnh2dC4qDBwlCf0ohPpX2QRlA/4gnbnPd3rs3KxVcA==",
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
+      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
       "requires": {
-        "stubs": "^3.0.0"
+        "stubs": "3.0.0"
       }
     },
     "stream-shift": {
@@ -3469,6 +3531,14 @@
       "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.0.tgz",
       "integrity": "sha1-1cdSgl5TZ+eG944Y5EXqIjoVWVI="
     },
+    "string_decoder": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
+      "requires": {
+        "safe-buffer": "5.1.2"
+      }
+    },
     "string-format-obj": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/string-format-obj/-/string-format-obj-1.1.1.tgz",
@@ -3479,17 +3549,9 @@
       "resolved": "https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
       "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
       "requires": {
-        "code-point-at": "^1.0.0",
-        "is-fullwidth-code-point": "^1.0.0",
-        "strip-ansi": "^3.0.0"
-      }
-    },
-    "string_decoder": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
-      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
-      "requires": {
-        "safe-buffer": "~5.1.0"
+        "code-point-at": "1.1.0",
+        "is-fullwidth-code-point": "1.0.0",
+        "strip-ansi": "3.0.1"
       }
     },
     "stringifier": {
@@ -3497,9 +3559,9 @@
       "resolved": "https://registry.npmjs.org/stringifier/-/stringifier-1.4.0.tgz",
       "integrity": "sha512-cNsMOqqrcbLcHTXEVmkw9y0fwDwkdgtZwlfyolzpQDoAE1xdNGhQhxBUfiDvvZIKl1hnUEgMv66nHwtMz3OjPw==",
       "requires": {
-        "core-js": "^2.0.0",
-        "traverse": "^0.6.6",
-        "type-name": "^2.0.1"
+        "core-js": "2.6.5",
+        "traverse": "0.6.6",
+        "type-name": "2.0.2"
       }
     },
     "strip-ansi": {
@@ -3507,7 +3569,7 @@
       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
       "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
       "requires": {
-        "ansi-regex": "^2.0.0"
+        "ansi-regex": "2.1.1"
       }
     },
     "stubs": {
@@ -3516,12 +3578,12 @@
       "integrity": "sha1-6NK6H6nJBXAwPAMLaQD31fiavls="
     },
     "through2": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/through2/-/through2-2.0.3.tgz",
-      "integrity": "sha1-AARWmzfHx0ujnEPzzteNGtlBQL4=",
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/through2/-/through2-2.0.5.tgz",
+      "integrity": "sha512-/mrRod8xqpA+IHSLyGCQ2s8SPHiCDEeQJSep1jqLYeEUClOFG2Qsh+4FU6G9VeqpZnGW/Su8LQGc4YKni5rYSQ==",
       "requires": {
-        "readable-stream": "^2.1.5",
-        "xtend": "~4.0.1"
+        "readable-stream": "2.3.6",
+        "xtend": "4.0.1"
       }
     },
     "to-object-path": {
@@ -3529,7 +3591,7 @@
       "resolved": "https://registry.npmjs.org/to-object-path/-/to-object-path-0.3.0.tgz",
       "integrity": "sha1-KXWIt7Dn4KwI4E5nL4XB9JmeF68=",
       "requires": {
-        "kind-of": "^3.0.2"
+        "kind-of": "3.2.2"
       },
       "dependencies": {
         "kind-of": {
@@ -3537,7 +3599,7 @@
           "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
           "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
           "requires": {
-            "is-buffer": "^1.1.5"
+            "is-buffer": "1.1.6"
           }
         }
       }
@@ -3547,10 +3609,10 @@
       "resolved": "https://registry.npmjs.org/to-regex/-/to-regex-3.0.2.tgz",
       "integrity": "sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==",
       "requires": {
-        "define-property": "^2.0.2",
-        "extend-shallow": "^3.0.2",
-        "regex-not": "^1.0.2",
-        "safe-regex": "^1.1.0"
+        "define-property": "2.0.2",
+        "extend-shallow": "3.0.2",
+        "regex-not": "1.0.2",
+        "safe-regex": "1.1.0"
       }
     },
     "to-regex-range": {
@@ -3558,8 +3620,8 @@
       "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-2.1.1.tgz",
       "integrity": "sha1-fIDBe53+vlmeJzZ+DU3VWQFB2zg=",
       "requires": {
-        "is-number": "^3.0.0",
-        "repeat-string": "^1.6.1"
+        "is-number": "3.0.0",
+        "repeat-string": "1.6.1"
       }
     },
     "tough-cookie": {
@@ -3567,8 +3629,15 @@
       "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.4.3.tgz",
       "integrity": "sha512-Q5srk/4vDM54WJsJio3XNn6K2sCG+CQ8G5Wz6bZhRZoAe/+TxjWB/GlFAnYEbkYVlON9FMk/fE3h2RLpPXo4lQ==",
       "requires": {
-        "psl": "^1.1.24",
-        "punycode": "^1.4.1"
+        "psl": "1.1.31",
+        "punycode": "1.4.1"
+      },
+      "dependencies": {
+        "punycode": {
+          "version": "1.4.1",
+          "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
+          "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4="
+        }
       }
     },
     "traverse": {
@@ -3586,14 +3655,13 @@
       "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
       "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
       "requires": {
-        "safe-buffer": "^5.0.1"
+        "safe-buffer": "5.1.2"
       }
     },
     "tweetnacl": {
       "version": "0.14.5",
       "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
-      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
-      "optional": true
+      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="
     },
     "type-is": {
       "version": "1.6.16",
@@ -3601,7 +3669,7 @@
       "integrity": "sha512-HRkVv/5qY2G6I8iab9cI7v1bOIdhm94dVjQCPFElW9W+3GeDOSHmy2EBYe4VTApuzolPcmgFTN3ftVJRKR2J9Q==",
       "requires": {
         "media-typer": "0.3.0",
-        "mime-types": "~2.1.18"
+        "mime-types": "2.1.22"
       }
     },
     "type-name": {
@@ -3619,10 +3687,10 @@
       "resolved": "https://registry.npmjs.org/union-value/-/union-value-1.0.0.tgz",
       "integrity": "sha1-XHHDTLW61dzr4+oM0IIHulqhrqQ=",
       "requires": {
-        "arr-union": "^3.1.0",
-        "get-value": "^2.0.6",
-        "is-extendable": "^0.1.1",
-        "set-value": "^0.4.3"
+        "arr-union": "3.1.0",
+        "get-value": "2.0.6",
+        "is-extendable": "0.1.1",
+        "set-value": "0.4.3"
       },
       "dependencies": {
         "extend-shallow": {
@@ -3630,7 +3698,7 @@
           "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
           "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
           "requires": {
-            "is-extendable": "^0.1.0"
+            "is-extendable": "0.1.1"
           }
         },
         "set-value": {
@@ -3638,10 +3706,10 @@
           "resolved": "https://registry.npmjs.org/set-value/-/set-value-0.4.3.tgz",
           "integrity": "sha1-fbCPnT0i3H945Trzw79GZuzfzPE=",
           "requires": {
-            "extend-shallow": "^2.0.1",
-            "is-extendable": "^0.1.1",
-            "is-plain-object": "^2.0.1",
-            "to-object-path": "^0.3.0"
+            "extend-shallow": "2.0.1",
+            "is-extendable": "0.1.1",
+            "is-plain-object": "2.0.4",
+            "to-object-path": "0.3.0"
           }
         }
       }
@@ -3651,7 +3719,7 @@
       "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-1.0.0.tgz",
       "integrity": "sha1-nhBXzKhRq7kzmPizOuGHuZyuwRo=",
       "requires": {
-        "crypto-random-string": "^1.0.0"
+        "crypto-random-string": "1.0.0"
       }
     },
     "universal-deep-strict-equal": {
@@ -3659,9 +3727,9 @@
       "resolved": "https://registry.npmjs.org/universal-deep-strict-equal/-/universal-deep-strict-equal-1.2.2.tgz",
       "integrity": "sha1-DaSsL3PP95JMgfpN4BjKViyisKc=",
       "requires": {
-        "array-filter": "^1.0.0",
+        "array-filter": "1.0.0",
         "indexof": "0.0.1",
-        "object-keys": "^1.0.0"
+        "object-keys": "1.1.0"
       }
     },
     "unpipe": {
@@ -3674,8 +3742,8 @@
       "resolved": "https://registry.npmjs.org/unset-value/-/unset-value-1.0.0.tgz",
       "integrity": "sha1-g3aHP30jNRef+x5vw6jtDfyKtVk=",
       "requires": {
-        "has-value": "^0.3.1",
-        "isobject": "^3.0.0"
+        "has-value": "0.3.1",
+        "isobject": "3.0.1"
       },
       "dependencies": {
         "has-value": {
@@ -3683,9 +3751,9 @@
           "resolved": "https://registry.npmjs.org/has-value/-/has-value-0.3.1.tgz",
           "integrity": "sha1-ex9YutpiyoJ+wKIHgCVlSEWZXh8=",
           "requires": {
-            "get-value": "^2.0.3",
-            "has-values": "^0.1.4",
-            "isobject": "^2.0.0"
+            "get-value": "2.0.6",
+            "has-values": "0.1.4",
+            "isobject": "2.1.0"
           },
           "dependencies": {
             "isobject": {
@@ -3705,6 +3773,14 @@
         }
       }
     },
+    "uri-js": {
+      "version": "4.2.2",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.2.2.tgz",
+      "integrity": "sha512-KY9Frmirql91X2Qgjry0Wd4Y+YTdrdZheS8TFwvkbLWf/G5KNJDCh6pKL5OZctEW4+0Baa5idK2ZQuELRwPznQ==",
+      "requires": {
+        "punycode": "2.1.1"
+      }
+    },
     "urix": {
       "version": "0.1.0",
       "resolved": "https://registry.npmjs.org/urix/-/urix-0.1.0.tgz",
@@ -3740,9 +3816,9 @@
       "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
       "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
       "requires": {
-        "assert-plus": "^1.0.0",
+        "assert-plus": "1.0.0",
         "core-util-is": "1.0.2",
-        "extsprintf": "^1.2.0"
+        "extsprintf": "1.3.0"
       }
     },
     "websocket-driver": {
@@ -3750,8 +3826,8 @@
       "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.0.tgz",
       "integrity": "sha1-DK+dLXVdk67gSdS90NP+LMoqJOs=",
       "requires": {
-        "http-parser-js": ">=0.4.0",
-        "websocket-extensions": ">=0.1.1"
+        "http-parser-js": "0.5.0",
+        "websocket-extensions": "0.1.3"
       }
     },
     "websocket-extensions": {
@@ -3766,11 +3842,11 @@
     },
     "wrap-ansi": {
       "version": "2.1.0",
-      "resolved": "http://registry.npmjs.org/wrap-ansi/-/wrap-ansi-2.1.0.tgz",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-2.1.0.tgz",
       "integrity": "sha1-2Pw9KE3QV5T+hJc8rs3Rz4JP3YU=",
       "requires": {
-        "string-width": "^1.0.1",
-        "strip-ansi": "^3.0.1"
+        "string-width": "1.0.2",
+        "strip-ansi": "3.0.1"
       }
     },
     "wrappy": {
@@ -3779,13 +3855,13 @@
       "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
     },
     "write-file-atomic": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-2.3.0.tgz",
-      "integrity": "sha512-xuPeK4OdjWqtfi59ylvVL0Yn35SF3zgcAcv7rBPFHVaEapaDr4GdGgm3j7ckTwH9wHL7fGmgfAnb0+THrHb8tA==",
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-2.4.2.tgz",
+      "integrity": "sha512-s0b6vB3xIVRLWywa6X9TOMA7k9zio0TMOsl9ZnDkliA/cfJlpHXAscj0gbHVJiTdIuAYpIyqS5GW91fqm6gG5g==",
       "requires": {
-        "graceful-fs": "^4.1.11",
-        "imurmurhash": "^0.1.4",
-        "signal-exit": "^3.0.2"
+        "graceful-fs": "4.1.15",
+        "imurmurhash": "0.1.4",
+        "signal-exit": "3.0.2"
       }
     },
     "xdg-basedir": {
@@ -3810,16 +3886,16 @@
     },
     "yargs": {
       "version": "3.32.0",
-      "resolved": "http://registry.npmjs.org/yargs/-/yargs-3.32.0.tgz",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-3.32.0.tgz",
       "integrity": "sha1-AwiOnr+edWtpdRYR0qXvWRSCyZU=",
       "requires": {
-        "camelcase": "^2.0.1",
-        "cliui": "^3.0.3",
-        "decamelize": "^1.1.1",
-        "os-locale": "^1.4.0",
-        "string-width": "^1.0.1",
-        "window-size": "^0.1.4",
-        "y18n": "^3.2.0"
+        "camelcase": "2.1.1",
+        "cliui": "3.2.0",
+        "decamelize": "1.2.0",
+        "os-locale": "1.4.0",
+        "string-width": "1.0.2",
+        "window-size": "0.1.4",
+        "y18n": "3.2.1"
       }
     }
   }
diff --git a/test-apps/gradle/projectSettings.gradle b/test-apps/gradle/projectSettings.gradle
deleted file mode 100644
index ad2bf56e5..000000000
--- a/test-apps/gradle/projectSettings.gradle
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright 2018 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-ext {
-  /**
-   * Parses the input file and returns a list of subprojects.
-   *
-   * <p>Expected file format:
-   * <ul>
-   *   <li>Empty lines are ignored.
-   *   <li>Lines that start with # are ignored(considered comments).
-   *   <li>Other lines are considered project paths with initial ":" removed.
-   * </ul>
-   */
-  discoverSubprojects = {File subprojectsFile ->
-    return subprojectsFile.readLines().collect {it.trim()}.findAll { !it.empty && !it.startsWith('#')}
-  }
-
-  /** Recursively renames build scripts to ${project.name}.gradle. */
-  renameBuildScripts = {ProjectDescriptor project ->
-    project.buildFileName = project.parent ? "${project.name}.gradle" : 'root-project.gradle'
-
-    project.children.each {
-      renameBuildScripts(it)
-    }
-
-  }
-}
diff --git a/test-apps/gradle/wrapper/gradle-wrapper.jar b/test-apps/gradle/wrapper/gradle-wrapper.jar
deleted file mode 100644
index 27768f1bb..000000000
Binary files a/test-apps/gradle/wrapper/gradle-wrapper.jar and /dev/null differ
diff --git a/test-apps/gradle/wrapper/gradle-wrapper.properties b/test-apps/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
index f9fe699b1..000000000
--- a/test-apps/gradle/wrapper/gradle-wrapper.properties
+++ /dev/null
@@ -1,22 +0,0 @@
-#
-# Copyright 2018 Google LLC
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-#Mon May 21 15:18:27 PDT 2018
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.2-all.zip
diff --git a/test-apps/gradlew b/test-apps/gradlew
index cccdd3d51..502f5a2d3 100755
--- a/test-apps/gradlew
+++ b/test-apps/gradlew
@@ -1,172 +1 @@
-#!/usr/bin/env sh
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn () {
-    echo "$*"
-}
-
-die () {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-nonstop=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-  NONSTOP* )
-    nonstop=true
-    ;;
-esac
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-    JAVACMD=`cygpath --unix "$JAVACMD"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=$((i+1))
-    done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Escape application args
-save () {
-    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
-    echo " "
-}
-APP_ARGS=$(save "$@")
-
-# Collect all arguments for the java command, following the shell quoting and substitution rules
-eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
-
-# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
-if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
-  cd "$(dirname "$0")"
-fi
-
-exec "$JAVACMD" "$@"
+../gradlew
\ No newline at end of file
diff --git a/test-apps/gradlew.bat b/test-apps/gradlew.bat
deleted file mode 100644
index e95643d6a..000000000
--- a/test-apps/gradlew.bat
+++ /dev/null
@@ -1,84 +0,0 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windows variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
diff --git a/test-apps/storage-test-app/build.gradle b/test-apps/storage-test-app/build.gradle
index 3412c1c9f..452af173a 100644
--- a/test-apps/storage-test-app/build.gradle
+++ b/test-apps/storage-test-app/build.gradle
@@ -18,12 +18,12 @@ apply plugin: 'com.android.application'
 
 android {
     testBuildType = project.testBuildType
-    compileSdkVersion 28
+    compileSdkVersion project.targetSdkVersion
 
     defaultConfig {
         applicationId "com.google.firebase.testapps.storage"
         minSdkVersion 16
-        targetSdkVersion 28
+        targetSdkVersion project.targetSdkVersion
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
diff --git a/third_party/licenses/apache-2.0.txt b/third_party/licenses/apache-2.0.txt
deleted file mode 100644
index 7a4a3ea24..000000000
--- a/third_party/licenses/apache-2.0.txt
+++ /dev/null
@@ -1,202 +0,0 @@
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright [yyyy] [name of copyright owner]
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
\ No newline at end of file
diff --git a/third_party/licenses/darts_clone.txt b/third_party/licenses/darts_clone.txt
deleted file mode 100644
index 4fdaa9cd8..000000000
--- a/third_party/licenses/darts_clone.txt
+++ /dev/null
@@ -1,10 +0,0 @@
-Copyright (c) 2008-2011, Susumu Yata
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
-
-- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
-- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
-- Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff --git a/third_party/licenses/icu.txt b/third_party/licenses/icu.txt
deleted file mode 100644
index fd63d7fd7..000000000
--- a/third_party/licenses/icu.txt
+++ /dev/null
@@ -1,385 +0,0 @@
-COPYRIGHT AND PERMISSION NOTICE (ICU 58 and later)
-
-Copyright © 1991-2017 Unicode, Inc. All rights reserved.
-Distributed under the Terms of Use in http://www.unicode.org/copyright.html
-
-Permission is hereby granted, free of charge, to any person obtaining
-a copy of the Unicode data files and any associated documentation
-(the "Data Files") or Unicode software and any associated documentation
-(the "Software") to deal in the Data Files or Software
-without restriction, including without limitation the rights to use,
-copy, modify, merge, publish, distribute, and/or sell copies of
-the Data Files or Software, and to permit persons to whom the Data Files
-or Software are furnished to do so, provided that either
-(a) this copyright and permission notice appear with all copies
-of the Data Files or Software, or
-(b) this copyright and permission notice appear in associated
-Documentation.
-
-THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF
-ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
-WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-NONINFRINGEMENT OF THIRD PARTY RIGHTS.
-IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
-NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
-DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
-DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
-TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-PERFORMANCE OF THE DATA FILES OR SOFTWARE.
-
-Except as contained in this notice, the name of a copyright holder
-shall not be used in advertising or otherwise to promote the sale,
-use or other dealings in these Data Files or Software without prior
-written authorization of the copyright holder.
-
----------------------
-
-Third-Party Software Licenses
-
-This section contains third-party software notices and/or additional
-terms for licensed third-party software components included within ICU
-libraries.
-
-1. ICU License - ICU 1.8.1 to ICU 57.1
-
-COPYRIGHT AND PERMISSION NOTICE
-
-Copyright (c) 1995-2016 International Business Machines Corporation and others
-All rights reserved.
-
-Permission is hereby granted, free of charge, to any person obtaining
-a copy of this software and associated documentation files (the
-"Software"), to deal in the Software without restriction, including
-without limitation the rights to use, copy, modify, merge, publish,
-distribute, and/or sell copies of the Software, and to permit persons
-to whom the Software is furnished to do so, provided that the above
-copyright notice(s) and this permission notice appear in all copies of
-the Software and that both the above copyright notice(s) and this
-permission notice appear in supporting documentation.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
-OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY
-SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER
-RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
-CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
-CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-
-Except as contained in this notice, the name of a copyright holder
-shall not be used in advertising or otherwise to promote the sale, use
-or other dealings in this Software without prior written authorization
-of the copyright holder.
-
-All trademarks and registered trademarks mentioned herein are the
-property of their respective owners.
-
-2. Chinese/Japanese Word Break Dictionary Data (cjdict.txt)
-
- #     The Google Chrome software developed by Google is licensed under
- # the BSD license. Other software included in this distribution is
- # provided under other licenses, as set forth below.
- #
- #  The BSD License
- #  http://opensource.org/licenses/bsd-license.php
- #  Copyright (C) 2006-2008, Google Inc.
- #
- #  All rights reserved.
- #
- #  Redistribution and use in source and binary forms, with or without
- # modification, are permitted provided that the following conditions are met:
- #
- #  Redistributions of source code must retain the above copyright notice,
- # this list of conditions and the following disclaimer.
- #  Redistributions in binary form must reproduce the above
- # copyright notice, this list of conditions and the following
- # disclaimer in the documentation and/or other materials provided with
- # the distribution.
- #  Neither the name of  Google Inc. nor the names of its
- # contributors may be used to endorse or promote products derived from
- # this software without specific prior written permission.
- #
- #
- #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
- # CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
- # INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- # MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- # DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
- # LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- # CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- # SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
- # BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- # LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- # NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- #
- #
- #  The word list in cjdict.txt are generated by combining three word lists
- # listed below with further processing for compound word breaking. The
- # frequency is generated with an iterative training against Google web
- # corpora.
- #
- #  * Libtabe (Chinese)
- #    - https://sourceforge.net/project/?group_id=1519
- #    - Its license terms and conditions are shown below.
- #
- #  * IPADIC (Japanese)
- #    - http://chasen.aist-nara.ac.jp/chasen/distribution.html
- #    - Its license terms and conditions are shown below.
- #
- #  ---------COPYING.libtabe ---- BEGIN--------------------
- #
- #  /*
- #   * Copyright (c) 1999 TaBE Project.
- #   * Copyright (c) 1999 Pai-Hsiang Hsiao.
- #   * All rights reserved.
- #   *
- #   * Redistribution and use in source and binary forms, with or without
- #   * modification, are permitted provided that the following conditions
- #   * are met:
- #   *
- #   * . Redistributions of source code must retain the above copyright
- #   *   notice, this list of conditions and the following disclaimer.
- #   * . Redistributions in binary form must reproduce the above copyright
- #   *   notice, this list of conditions and the following disclaimer in
- #   *   the documentation and/or other materials provided with the
- #   *   distribution.
- #   * . Neither the name of the TaBE Project nor the names of its
- #   *   contributors may be used to endorse or promote products derived
- #   *   from this software without specific prior written permission.
- #   *
- #   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #   * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #   * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- #   * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- #   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- #   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- #   * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- #   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- #   * OF THE POSSIBILITY OF SUCH DAMAGE.
- #   */
- #
- #  /*
- #   * Copyright (c) 1999 Computer Systems and Communication Lab,
- #   *                    Institute of Information Science, Academia
- #       *                    Sinica. All rights reserved.
- #   *
- #   * Redistribution and use in source and binary forms, with or without
- #   * modification, are permitted provided that the following conditions
- #   * are met:
- #   *
- #   * . Redistributions of source code must retain the above copyright
- #   *   notice, this list of conditions and the following disclaimer.
- #   * . Redistributions in binary form must reproduce the above copyright
- #   *   notice, this list of conditions and the following disclaimer in
- #   *   the documentation and/or other materials provided with the
- #   *   distribution.
- #   * . Neither the name of the Computer Systems and Communication Lab
- #   *   nor the names of its contributors may be used to endorse or
- #   *   promote products derived from this software without specific
- #   *   prior written permission.
- #   *
- #   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- #   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- #   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- #   * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- #   * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
- #   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- #   * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- #   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- #   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- #   * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- #   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- #   * OF THE POSSIBILITY OF SUCH DAMAGE.
- #   */
- #
- #  Copyright 1996 Chih-Hao Tsai @ Beckman Institute,
- #      University of Illinois
- #  c-tsai4@uiuc.edu  http://casper.beckman.uiuc.edu/~c-tsai4
- #
- #  ---------------COPYING.libtabe-----END--------------------------------
- #
- #
- #  ---------------COPYING.ipadic-----BEGIN-------------------------------
- #
- #  Copyright 2000, 2001, 2002, 2003 Nara Institute of Science
- #  and Technology.  All Rights Reserved.
- #
- #  Use, reproduction, and distribution of this software is permitted.
- #  Any copy of this software, whether in its original form or modified,
- #  must include both the above copyright notice and the following
- #  paragraphs.
- #
- #  Nara Institute of Science and Technology (NAIST),
- #  the copyright holders, disclaims all warranties with regard to this
- #  software, including all implied warranties of merchantability and
- #  fitness, in no event shall NAIST be liable for
- #  any special, indirect or consequential damages or any damages
- #  whatsoever resulting from loss of use, data or profits, whether in an
- #  action of contract, negligence or other tortuous action, arising out
- #  of or in connection with the use or performance of this software.
- #
- #  A large portion of the dictionary entries
- #  originate from ICOT Free Software.  The following conditions for ICOT
- #  Free Software applies to the current dictionary as well.
- #
- #  Each User may also freely distribute the Program, whether in its
- #  original form or modified, to any third party or parties, PROVIDED
- #  that the provisions of Section 3 ("NO WARRANTY") will ALWAYS appear
- #  on, or be attached to, the Program, which is distributed substantially
- #  in the same form as set out herein and that such intended
- #  distribution, if actually made, will neither violate or otherwise
- #  contravene any of the laws and regulations of the countries having
- #  jurisdiction over the User or the intended distribution itself.
- #
- #  NO WARRANTY
- #
- #  The program was produced on an experimental basis in the course of the
- #  research and development conducted during the project and is provided
- #  to users as so produced on an experimental basis.  Accordingly, the
- #  program is provided without any warranty whatsoever, whether express,
- #  implied, statutory or otherwise.  The term "warranty" used herein
- #  includes, but is not limited to, any warranty of the quality,
- #  performance, merchantability and fitness for a particular purpose of
- #  the program and the nonexistence of any infringement or violation of
- #  any right of any third party.
- #
- #  Each user of the program will agree and understand, and be deemed to
- #  have agreed and understood, that there is no warranty whatsoever for
- #  the program and, accordingly, the entire risk arising from or
- #  otherwise connected with the program is assumed by the user.
- #
- #  Therefore, neither ICOT, the copyright holder, or any other
- #  organization that participated in or was otherwise related to the
- #  development of the program and their respective officials, directors,
- #  officers and other employees shall be held liable for any and all
- #  damages, including, without limitation, general, special, incidental
- #  and consequential damages, arising out of or otherwise in connection
- #  with the use or inability to use the program or any product, material
- #  or result produced or otherwise obtained by using the program,
- #  regardless of whether they have been advised of, or otherwise had
- #  knowledge of, the possibility of such damages at any time during the
- #  project or thereafter.  Each user will be deemed to have agreed to the
- #  foregoing by his or her commencement of use of the program.  The term
- #  "use" as used herein includes, but is not limited to, the use,
- #  modification, copying and distribution of the program and the
- #  production of secondary products from the program.
- #
- #  In the case where the program, whether in its original form or
- #  modified, was distributed or delivered to or received by a user from
- #  any person, organization or entity other than ICOT, unless it makes or
- #  grants independently of ICOT any specific warranty to the user in
- #  writing, such person, organization or entity, will also be exempted
- #  from and not be held liable to the user for any such damages as noted
- #  above as far as the program is concerned.
- #
- #  ---------------COPYING.ipadic-----END----------------------------------
-
-3. Lao Word Break Dictionary Data (laodict.txt)
-
- #  Copyright (c) 2013 International Business Machines Corporation
- #  and others. All Rights Reserved.
- #
- # Project: http://code.google.com/p/lao-dictionary/
- # Dictionary: http://lao-dictionary.googlecode.com/git/Lao-Dictionary.txt
- # License: http://lao-dictionary.googlecode.com/git/Lao-Dictionary-LICENSE.txt
- #              (copied below)
- #
- #  This file is derived from the above dictionary, with slight
- #  modifications.
- #  ----------------------------------------------------------------------
- #  Copyright (C) 2013 Brian Eugene Wilson, Robert Martin Campbell.
- #  All rights reserved.
- #
- #  Redistribution and use in source and binary forms, with or without
- #  modification,
- #  are permitted provided that the following conditions are met:
- #
- #
- # Redistributions of source code must retain the above copyright notice, this
- #  list of conditions and the following disclaimer. Redistributions in
- #  binary form must reproduce the above copyright notice, this list of
- #  conditions and the following disclaimer in the documentation and/or
- #  other materials provided with the distribution.
- #
- #
- # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
- # FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
- # COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- # INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- # (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- # SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- # STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- # OF THE POSSIBILITY OF SUCH DAMAGE.
- #  --------------------------------------------------------------------------
-
-4. Burmese Word Break Dictionary Data (burmesedict.txt)
-
- #  Copyright (c) 2014 International Business Machines Corporation
- #  and others. All Rights Reserved.
- #
- #  This list is part of a project hosted at:
- #    github.com/kanyawtech/myanmar-karen-word-lists
- #
- #  --------------------------------------------------------------------------
- #  Copyright (c) 2013, LeRoy Benjamin Sharon
- #  All rights reserved.
- #
- #  Redistribution and use in source and binary forms, with or without
- #  modification, are permitted provided that the following conditions
- #  are met: Redistributions of source code must retain the above
- #  copyright notice, this list of conditions and the following
- #  disclaimer.  Redistributions in binary form must reproduce the
- #  above copyright notice, this list of conditions and the following
- #  disclaimer in the documentation and/or other materials provided
- #  with the distribution.
- #
- #    Neither the name Myanmar Karen Word Lists, nor the names of its
- #    contributors may be used to endorse or promote products derived
- #    from this software without specific prior written permission.
- #
- #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
- #  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
- #  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- #  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- #  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
- #  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- #  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
- #  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- #  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
- #  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
- #  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
- #  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- #  SUCH DAMAGE.
- #  --------------------------------------------------------------------------
-
-5. Time Zone Database
-
-  ICU uses the public domain data and code derived from Time Zone
-Database for its time zone support. The ownership of the TZ database
-is explained in BCP 175: Procedure for Maintaining the Time Zone
-Database section 7.
-
- # 7.  Database Ownership
- #
- #    The TZ database itself is not an IETF Contribution or an IETF
- #    document.  Rather it is a pre-existing and regularly updated work
- #    that is in the public domain, and is intended to remain in the
- #    public domain.  Therefore, BCPs 78 [RFC5378] and 79 [RFC3979] do
- #    not apply to the TZ Database or contributions that individuals make
- #    to it.  Should any claims be made and substantiated against the TZ
- #    Database, the organization that is providing the IANA
- #    Considerations defined in this RFC, under the memorandum of
- #    understanding with the IETF, currently ICANN, may act in accordance
- #    with all competent court orders.  No ownership claims will be made
- #    by ICANN or the IETF Trust on the database or the code.  Any person
- #    making a contribution to the database or code waives all rights to
- #    future claims in that contribution or in the TZ Database.
\ No newline at end of file
diff --git a/third_party/licenses/jsr305.txt b/third_party/licenses/jsr305.txt
deleted file mode 100644
index 51eacf545..000000000
--- a/third_party/licenses/jsr305.txt
+++ /dev/null
@@ -1,28 +0,0 @@
-Copyright (c) 2007-2009, JSR305 expert group
-All rights reserved.
-
-http://www.opensource.org/licenses/bsd-license.php
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
-
-    * Redistributions of source code must retain the above copyright notice,
-      this list of conditions and the following disclaimer.
-    * Redistributions in binary form must reproduce the above copyright notice,
-      this list of conditions and the following disclaimer in the documentation
-      and/or other materials provided with the distribution.
-    * Neither the name of the JSR305 expert group nor the names of its
-      contributors may be used to endorse or promote products derived from
-      this software without specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
-THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
-LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff --git a/third_party/licenses/nanoproto.txt b/third_party/licenses/nanoproto.txt
deleted file mode 100644
index fb690074c..000000000
--- a/third_party/licenses/nanoproto.txt
+++ /dev/null
@@ -1,33 +0,0 @@
-Copyright 2008, Google Inc.
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are
-met:
-
-    * Redistributions of source code must retain the above copyright
-notice, this list of conditions and the following disclaimer.
-    * Redistributions in binary form must reproduce the above
-copyright notice, this list of conditions and the following disclaimer
-in the documentation and/or other materials provided with the
-distribution.
-    * Neither the name of Google Inc. nor the names of its
-contributors may be used to endorse or promote products derived from
-this software without specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-Code generated by the Protocol Buffer compiler is owned by the owner
-of the input file used when generating it.  This code is not
-standalone and requires a support library to be linked with it.  This
-support library is itself covered by the above license.
\ No newline at end of file
diff --git a/third_party/licenses/pcre.txt b/third_party/licenses/pcre.txt
deleted file mode 100644
index 8b76acd92..000000000
--- a/third_party/licenses/pcre.txt
+++ /dev/null
@@ -1,93 +0,0 @@
-PCRE LICENCE
-------------
-
-PCRE is a library of functions to support regular expressions whose syntax
-and semantics are as close as possible to those of the Perl 5 language.
-
-Release 8 of PCRE is distributed under the terms of the "BSD" licence, as
-specified below. The documentation for PCRE, supplied in the "doc"
-directory, is distributed under the same terms as the software itself. The data
-in the testdata directory is not copyrighted and is in the public domain.
-
-The basic library functions are written in C and are freestanding. Also
-included in the distribution is a set of C++ wrapper functions, and a
-just-in-time compiler that can be used to optimize pattern matching. These
-are both optional features that can be omitted when the library is built.
-
-
-THE BASIC LIBRARY FUNCTIONS
----------------------------
-
-Written by:       Philip Hazel
-Email local part: ph10
-Email domain:     cam.ac.uk
-
-University of Cambridge Computing Service,
-Cambridge, England.
-
-Copyright (c) 1997-2017 University of Cambridge
-All rights reserved.
-
-
-PCRE JUST-IN-TIME COMPILATION SUPPORT
--------------------------------------
-
-Written by:       Zoltan Herczeg
-Email local part: hzmester
-Emain domain:     freemail.hu
-
-Copyright(c) 2010-2017 Zoltan Herczeg
-All rights reserved.
-
-
-STACK-LESS JUST-IN-TIME COMPILER
---------------------------------
-
-Written by:       Zoltan Herczeg
-Email local part: hzmester
-Emain domain:     freemail.hu
-
-Copyright(c) 2009-2017 Zoltan Herczeg
-All rights reserved.
-
-
-THE C++ WRAPPER FUNCTIONS
--------------------------
-
-Contributed by:   Google Inc.
-
-Copyright (c) 2007-2012, Google Inc.
-All rights reserved.
-
-
-THE "BSD" LICENCE
------------------
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
-
-    * Redistributions of source code must retain the above copyright notice,
-      this list of conditions and the following disclaimer.
-
-    * Redistributions in binary form must reproduce the above copyright
-      notice, this list of conditions and the following disclaimer in the
-      documentation and/or other materials provided with the distribution.
-
-    * Neither the name of the University of Cambridge nor the name of Google
-      Inc. nor the names of their contributors may be used to endorse or
-      promote products derived from this software without specific prior
-      written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
-LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-POSSIBILITY OF SUCH DAMAGE.
-
-End
\ No newline at end of file
diff --git a/third_party/licenses/re2.txt b/third_party/licenses/re2.txt
deleted file mode 100644
index d7f5ff1f1..000000000
--- a/third_party/licenses/re2.txt
+++ /dev/null
@@ -1,27 +0,0 @@
-// Copyright (c) 2009 The RE2 Authors. All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are
-// met:
-//
-//    * Redistributions of source code must retain the above copyright
-// notice, this list of conditions and the following disclaimer.
-//    * Redistributions in binary form must reproduce the above
-// copyright notice, this list of conditions and the following disclaimer
-// in the documentation and/or other materials provided with the
-// distribution.
-//    * Neither the name of Google Inc. nor the names of its
-// contributors may be used to endorse or promote products derived from
-// this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff --git a/third_party/licenses/sgi-stl.txt b/third_party/licenses/sgi-stl.txt
deleted file mode 100644
index f348849de..000000000
--- a/third_party/licenses/sgi-stl.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-SGI STL
-
-The STL portion of GNU libstdc++ that is used with gcc3 and gcc4 is licensed
-under the GPL, with the following exception:
-
-# As a special exception, you may use this file as part of a free software
-# library without restriction.  Specifically, if other files instantiate
-# templates or use macros or inline functions from this file, or you compile
-# this file and link it with other files to produce an executable, this
-# file does not by itself cause the resulting executable to be covered by
-# the GNU General Public License.  This exception does not however
-# invalidate any other reasons why the executable file might be covered by
-# the GNU General Public License.
diff --git a/third_party/licenses/utf.txt b/third_party/licenses/utf.txt
deleted file mode 100644
index 3aac547da..000000000
--- a/third_party/licenses/utf.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-UTF-8 Library
-
-The authors of this software are Rob Pike and Ken Thompson.
-             Copyright (c) 1998-2002 by Lucent Technologies.
-Permission to use, copy, modify, and distribute this software for any
-purpose without fee is hereby granted, provided that this entire notice
-is included in all copies of any software which is or includes a copy
-or modification of this software and in all copies of the supporting
-documentation for such software.
-THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
-WARRANTY.  IN PARTICULAR, NEITHER THE AUTHORS NOR LUCENT TECHNOLOGIES MAKE ANY
-REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
-OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
\ No newline at end of file
diff --git a/third_party/licenses/zlib.txt b/third_party/licenses/zlib.txt
deleted file mode 100644
index fac30b072..000000000
--- a/third_party/licenses/zlib.txt
+++ /dev/null
@@ -1,53 +0,0 @@
-(extracted from README, except for match.S)
-
-Copyright notice:
-
- (C) 1995-2013 Jean-loup Gailly and Mark Adler
-
-  This software is provided 'as-is', without any express or implied
-  warranty.  In no event will the authors be held liable for any damages
-  arising from the use of this software.
-
-  Permission is granted to anyone to use this software for any purpose,
-  including commercial applications, and to alter it and redistribute it
-  freely, subject to the following restrictions:
-
-  1. The origin of this software must not be misrepresented; you must not
-     claim that you wrote the original software. If you use this software
-     in a product, an acknowledgment in the product documentation would be
-     appreciated but is not required.
-  2. Altered source versions must be plainly marked as such, and must not be
-     misrepresented as being the original software.
-  3. This notice may not be removed or altered from any source distribution.
-
-  Jean-loup Gailly        Mark Adler
-  jloup@gzip.org          madler@alumni.caltech.edu
-
-If you use the zlib library in a product, we would appreciate *not* receiving
-lengthy legal documents to sign.  The sources are provided for free but without
-warranty of any kind.  The library has been entirely written by Jean-loup
-Gailly and Mark Adler; it does not include third-party code.
-
-If you redistribute modified sources, we would appreciate that you include in
-the file ChangeLog history information documenting your changes.  Please read
-the FAQ for more information on the distribution of modified source versions.
-
-(extracted from match.S, for match.S only)
-
-Copyright (C) 1998, 2007 Brian Raiter <breadbox@muppetlabs.com>
-
-This software is provided 'as-is', without any express or implied
-warranty.  In no event will the author be held liable for any damages
-arising from the use of this software.
-
-Permission is granted to anyone to use this software for any purpose,
-including commercial applications, and to alter it and redistribute it
-freely, subject to the following restrictions:
-
-1. The origin of this software must not be misrepresented; you must not
-  claim that you wrote the original software. If you use this software
-  in a product, an acknowledgment in the product documentation would be
-  appreciated but is not required.
-2. Altered source versions must be plainly marked as such, and must not be
-  misrepresented as being the original software.
-3. This notice may not be removed or altered from any source distribution.
\ No newline at end of file
diff --git a/tools/apksize/apksize.gradle b/tools/apksize/apksize.gradle
index 8ee091aa0..26183e072 100644
--- a/tools/apksize/apksize.gradle
+++ b/tools/apksize/apksize.gradle
@@ -12,17 +12,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-
-import com.google.firebase.gradle.GenerateMeasurementsTask
-import com.google.firebase.gradle.UploadMeasurementsTask
-
-// Linting needs to be disabled as none of these apps are real or intended to conform to
-// linting standards.
-tasks.whenTaskAdded { task ->
-    if (task.name.equals("lint")) {
-        //task.enabled = false
-    }
-}
+import com.google.firebase.gradle.plugins.measurement.GenerateMeasurementsTask
+import com.google.firebase.gradle.plugins.measurement.UploadMeasurementsTask
 
 apply plugin: "com.android.application"
 apply from: "default.gradle"
@@ -43,7 +34,7 @@ apply from: "src/functions/functions.gradle"
  */
 task generateMeasurements(type: GenerateMeasurementsTask) {
     sdkMapFile = file("sdks.csv")
-    reportFile = file("$buildDir/size-report.textpb")
+    reportFile = file("$buildDir/size-report.json")
 }
 
 /**
@@ -55,7 +46,7 @@ task generateMeasurements(type: GenerateMeasurementsTask) {
 task uploadMeasurements(type: UploadMeasurementsTask) {
     dependsOn generateMeasurements
 
-    reportFile = file("$buildDir/size-report.textpb")
+    reportFile = file("$buildDir/size-report.json")
     uploader = "https://storage.googleapis.com/firebase-engprod-metrics/upload_tool.jar"
 }
 
diff --git a/tools/apksize/default.gradle b/tools/apksize/default.gradle
index 2ba697725..5f416c301 100644
--- a/tools/apksize/default.gradle
+++ b/tools/apksize/default.gradle
@@ -25,13 +25,13 @@ android {
         abortOnError false
         checkReleaseBuilds false
     }
-    compileSdkVersion 26
+    compileSdkVersion project.targetSdkVersion
 
     defaultConfig {
         applicationId 'com.google.apksize'
-        minSdkVersion 26
-	multiDexEnabled true
-        targetSdkVersion 26
+        minSdkVersion project.targetSdkVersion
+	    multiDexEnabled true
+        targetSdkVersion project.targetSdkVersion
         versionCode 1
         versionName '1.0'
     }
diff --git a/tools/errorprone/errorprone.gradle b/tools/errorprone/errorprone.gradle
index e7a329ccf..14706959d 100644
--- a/tools/errorprone/errorprone.gradle
+++ b/tools/errorprone/errorprone.gradle
@@ -18,6 +18,7 @@ apply plugin: 'java-library'
 dependencies {
     implementation 'com.google.errorprone:error_prone_check_api:2.3.2'
     implementation 'com.google.auto.service:auto-service:1.0-rc4'
+    annotationProcessor 'com.google.auto.service:auto-service:1.0-rc4'
 
     testImplementation 'junit:junit:4.12'
     testImplementation 'com.google.errorprone:error_prone_test_helpers:2.3.1'
