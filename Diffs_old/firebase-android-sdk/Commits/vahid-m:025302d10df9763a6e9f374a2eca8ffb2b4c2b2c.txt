diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
index 785a0e133..ed079b3da 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
@@ -33,6 +33,8 @@
 import com.google.firebase.remoteconfig.internal.ConfigGetParameterHandler;
 import com.google.firebase.remoteconfig.internal.ConfigMetadataClient;
 import com.google.firebase.remoteconfig.internal.DefaultsXmlParser;
+
+import java.net.Proxy;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -58,6 +60,25 @@
   // -------------------------------------------------------------------------------
   // Firebase Android Components logic.
 
+  /**
+   * Returns a singleton instance of Firebase Remote Config.
+   *
+   * <p>{@link FirebaseRemoteConfig} uses the default {@link FirebaseApp}, so if no {@link
+   * FirebaseApp} has been initialized yet, this method throws an {@link IllegalStateException}.
+   *
+   * <p>To identify the current app instance, the fetch request creates a Firebase Instance ID
+   * token, which periodically sends data to the Firebase backend. To stop the periodic sync, call
+   * {@link com.google.firebase.iid.FirebaseInstanceId#deleteInstanceId}. To create a new token and
+   * resume the periodic sync, call {@code fetchConfig} again.
+   *
+   * @return A singleton instance of {@link FirebaseRemoteConfig} for the default {@link
+   *     FirebaseApp}.
+   */
+  @NonNull
+  public static FirebaseRemoteConfig getInstance(@Nullable Proxy proxy) {
+    return getInstance(FirebaseApp.getInstance(), proxy);
+  }
+
   /**
    * Returns a singleton instance of Firebase Remote Config.
    *
@@ -74,13 +95,13 @@
    */
   @NonNull
   public static FirebaseRemoteConfig getInstance() {
-    return getInstance(FirebaseApp.getInstance());
+    return getInstance(FirebaseApp.getInstance(), null);
   }
 
   /** Returns an instance of Firebase Remote Config for the given {@link FirebaseApp}. */
   @NonNull
-  public static FirebaseRemoteConfig getInstance(@NonNull FirebaseApp app) {
-    return app.get(RemoteConfigComponent.class).getDefault();
+  public static FirebaseRemoteConfig getInstance(@NonNull FirebaseApp app, @Nullable Proxy proxy) {
+    return app.get(RemoteConfigComponent.class).getDefault(proxy);
   }
 
   // -------------------------------------------------------------------------------
diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java
index 178e9a3bf..20e5c0d52 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java
@@ -34,6 +34,8 @@
 import com.google.firebase.remoteconfig.internal.ConfigMetadataClient;
 import com.google.firebase.remoteconfig.internal.ConfigStorageClient;
 import com.google.firebase.remoteconfig.internal.LegacyConfigsHandler;
+
+import java.net.Proxy;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Random;
@@ -91,7 +93,8 @@
       FirebaseApp firebaseApp,
       FirebaseInstanceId firebaseInstanceId,
       FirebaseABTesting firebaseAbt,
-      @Nullable AnalyticsConnector analyticsConnector) {
+      @Nullable AnalyticsConnector analyticsConnector,
+      @Nullable Proxy proxy) {
     this(
         context,
         Executors.newCachedThreadPool(),
@@ -100,7 +103,8 @@
         firebaseAbt,
         analyticsConnector,
         new LegacyConfigsHandler(context, firebaseApp.getOptions().getApplicationId()),
-        /* loadGetDefault= */ true);
+        /* loadGetDefault= */ true,
+        proxy);
   }
 
   /** Firebase Remote Config Component constructor for testing component logic. */
@@ -113,7 +117,8 @@ protected RemoteConfigComponent(
       FirebaseABTesting firebaseAbt,
       @Nullable AnalyticsConnector analyticsConnector,
       LegacyConfigsHandler legacyConfigsHandler,
-      boolean loadGetDefault) {
+      boolean loadGetDefault,
+      @Nullable Proxy proxy) {
     this.context = context;
     this.executorService = executorService;
     this.firebaseApp = firebaseApp;
@@ -128,7 +133,7 @@ protected RemoteConfigComponent(
     // while another test has already cleared the component but hasn't gotten a new one yet.
     if (loadGetDefault) {
       // Loads the default namespace's configs from disk on App startup.
-      Tasks.call(executorService, this::getDefault);
+      Tasks.call(executorService, () -> getDefault(proxy));
       Tasks.call(executorService, legacyConfigsHandler::saveLegacyConfigsIfNecessary);
     }
   }
@@ -136,8 +141,8 @@ protected RemoteConfigComponent(
   /**
    * Returns the default Firebase Remote Config instance for this component's {@link FirebaseApp}.
    */
-  FirebaseRemoteConfig getDefault() {
-    return get(DEFAULT_NAMESPACE);
+  FirebaseRemoteConfig getDefault(@Nullable Proxy proxy) {
+    return get(DEFAULT_NAMESPACE, proxy);
   }
 
   /**
@@ -148,7 +153,7 @@ FirebaseRemoteConfig getDefault() {
    */
   @VisibleForTesting
   @KeepForSdk
-  public synchronized FirebaseRemoteConfig get(String namespace) {
+  public synchronized FirebaseRemoteConfig get(String namespace, @Nullable Proxy proxy) {
     ConfigCacheClient fetchedCacheClient = getCacheClient(namespace, FETCH_FILE_NAME);
     ConfigCacheClient activatedCacheClient = getCacheClient(namespace, ACTIVATE_FILE_NAME);
     ConfigCacheClient defaultsCacheClient = getCacheClient(namespace, DEFAULTS_FILE_NAME);
@@ -161,7 +166,7 @@ public synchronized FirebaseRemoteConfig get(String namespace) {
         fetchedCacheClient,
         activatedCacheClient,
         defaultsCacheClient,
-        getFetchHandler(namespace, fetchedCacheClient, metadataClient),
+        getFetchHandler(namespace, fetchedCacheClient, metadataClient, proxy),
         getGetHandler(activatedCacheClient, defaultsCacheClient),
         metadataClient);
   }
@@ -222,7 +227,7 @@ public static ConfigCacheClient getCacheClient(
 
   @VisibleForTesting
   ConfigFetchHttpClient getFrcBackendApiClient(
-      String apiKey, String namespace, ConfigMetadataClient metadataClient) {
+          String apiKey, String namespace, ConfigMetadataClient metadataClient, Proxy proxy) {
     String appId = firebaseApp.getOptions().getApplicationId();
     return new ConfigFetchHttpClient(
         context,
@@ -230,12 +235,13 @@ ConfigFetchHttpClient getFrcBackendApiClient(
         apiKey,
         namespace,
         metadataClient.getFetchTimeoutInSeconds(),
-        NETWORK_CONNECTION_TIMEOUT_IN_SECONDS);
+        NETWORK_CONNECTION_TIMEOUT_IN_SECONDS,
+        proxy);
   }
 
   @VisibleForTesting
   synchronized ConfigFetchHandler getFetchHandler(
-      String namespace, ConfigCacheClient fetchedCacheClient, ConfigMetadataClient metadataClient) {
+      String namespace, ConfigCacheClient fetchedCacheClient, ConfigMetadataClient metadataClient, Proxy proxy) {
     return new ConfigFetchHandler(
         firebaseInstanceId,
         isPrimaryApp(firebaseApp) ? analyticsConnector : null,
@@ -243,7 +249,7 @@ synchronized ConfigFetchHandler getFetchHandler(
         DEFAULT_CLOCK,
         DEFAULT_RANDOM,
         fetchedCacheClient,
-        getFrcBackendApiClient(firebaseApp.getOptions().getApiKey(), namespace, metadataClient),
+        getFrcBackendApiClient(firebaseApp.getOptions().getApiKey(), namespace, metadataClient, proxy),
         metadataClient,
         this.customHeaders);
   }
diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java
index 62bf8087f..1979d166e 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java
@@ -25,6 +25,8 @@
 import com.google.firebase.components.Dependency;
 import com.google.firebase.iid.FirebaseInstanceId;
 import com.google.firebase.platforminfo.LibraryVersionComponent;
+
+import java.net.Proxy;
 import java.util.Arrays;
 import java.util.List;
 
@@ -46,6 +48,7 @@
             .add(Dependency.required(FirebaseInstanceId.class))
             .add(Dependency.required(AbtComponent.class))
             .add(Dependency.optional(AnalyticsConnector.class))
+            .add(Dependency.optional(Proxy.class))
             .factory(
                 container ->
                     new RemoteConfigComponent(
@@ -53,7 +56,8 @@
                         container.get(FirebaseApp.class),
                         container.get(FirebaseInstanceId.class),
                         container.get(AbtComponent.class).get(OriginService.REMOTE_CONFIG),
-                        container.get(AnalyticsConnector.class)))
+                        container.get(AnalyticsConnector.class),
+                        container.get(Proxy.class)))
             .alwaysEager()
             .build(),
         LibraryVersionComponent.create("fire-rc", BuildConfig.VERSION_NAME));
diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java
index c9124b512..02eb36544 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java
@@ -38,6 +38,7 @@
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.util.Log;
 import androidx.annotation.Keep;
+import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 import com.google.android.gms.common.util.AndroidUtilsLight;
 import com.google.android.gms.common.util.Hex;
@@ -52,6 +53,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.HttpURLConnection;
+import java.net.Proxy;
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.Date;
@@ -85,15 +87,17 @@
   private final String namespace;
   private final long connectTimeoutInSeconds;
   private final long readTimeoutInSeconds;
+  private final Proxy proxy;
 
   /** Creates a client for {@link #fetch}ing data from the Firebase Remote Config server. */
   public ConfigFetchHttpClient(
-      Context context,
-      String appId,
-      String apiKey,
-      String namespace,
-      long connectTimeoutInSeconds,
-      long readTimeoutInSeconds) {
+        Context context,
+        String appId,
+        String apiKey,
+        String namespace,
+        long connectTimeoutInSeconds,
+        long readTimeoutInSeconds,
+        @Nullable Proxy proxy) {
     this.context = context;
     this.appId = appId;
     this.apiKey = apiKey;
@@ -101,6 +105,7 @@ public ConfigFetchHttpClient(
     this.namespace = namespace;
     this.connectTimeoutInSeconds = connectTimeoutInSeconds;
     this.readTimeoutInSeconds = readTimeoutInSeconds;
+    this.proxy = proxy;
   }
 
   /** Used to verify that the timeout is being set correctly. */
@@ -134,7 +139,7 @@ private static String extractProjectNumberFromAppId(String gmpAppId) {
   HttpURLConnection createHttpURLConnection() throws FirebaseRemoteConfigException {
     try {
       URL url = new URL(getFetchUrl(projectNumber, namespace));
-      return (HttpURLConnection) url.openConnection();
+      return (HttpURLConnection) (proxy == null ? url.openConnection() : url.openConnection(proxy));
     } catch (IOException e) {
       throw new FirebaseRemoteConfigException(e.getMessage());
     }
