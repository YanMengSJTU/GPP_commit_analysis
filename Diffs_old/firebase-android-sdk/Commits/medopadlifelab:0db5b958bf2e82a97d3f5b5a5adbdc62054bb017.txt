diff --git a/README.md b/README.md
index cdb952fae..c86cb03e1 100644
--- a/README.md
+++ b/README.md
@@ -9,6 +9,8 @@ dependencies:
   * `firebase-functions`
   * `firebase-firestore`
   * `firebase-storage`
+  * `firebase-inappmessaging-display`
+  
 
 Firebase is an app development platform with tools to help you build, grow and
 monetize your app. More information about Firebase can be found at
diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle
index c4f1777ba..f9a2b41aa 100644
--- a/buildSrc/build.gradle
+++ b/buildSrc/build.gradle
@@ -37,7 +37,7 @@ dependencies {
     implementation "com.jaredsburrows:gradle-license-plugin:0.8.1"
     implementation 'digital.wup:android-maven-publish:3.6.2'
 
-    implementation 'com.android.tools.build:gradle:3.0.1'
+    implementation 'com.android.tools.build:gradle:3.2.1'
     testImplementation 'junit:junit:4.12'
     testImplementation('org.spockframework:spock-core:1.1-groovy-2.4') {
         exclude group: 'org.codehaus.groovy'
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/GenerateMeasurementsTask.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/GenerateMeasurementsTask.groovy
new file mode 100644
index 000000000..93fa0cf00
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/GenerateMeasurementsTask.groovy
@@ -0,0 +1,226 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle
+
+import org.gradle.api.DefaultTask
+import org.gradle.api.Task
+import org.gradle.api.tasks.InputFile
+import org.gradle.api.tasks.OutputFile
+import org.gradle.api.tasks.TaskAction
+
+/**
+ * Generates size measurements after building the test apps and outputs them as a text-format
+ * protocol buffer report.
+ *
+ * <p>This task requires two properties, an SDK map, as input, and the report, as output. The map is
+ * used to convert project names and build variants into the SDK identifiers used by the database.
+ * The report path is where the output should be stored. Additionally, a project property, {@code
+ * pull_request} is used in the report. Excluding this value will send a human-readable version
+ * to standard out.
+ */
+public class GenerateMeasurementsTask extends DefaultTask {
+
+    /**
+     * The file storing the SDK map.
+     *
+     * <p>This may be any type recognized by Gradle as a file. The format of the file's contents is
+     * headerless CSV with a colon as a delimiter: projectName-buildVariant:sdkId. The first column
+     * contains both the project name and build variant separated by an hyphen. The SDK ID is the
+     * integer identifier used by the SQL database to represent this SDK and build variant pair.
+     *
+     * <p>A complete example follows:
+     * <pre>{@code
+     * database-debug:1
+     * database-release:2
+     * firestore-release:7
+     * firestore-debug:4
+     *}</pre>
+     */
+    @InputFile
+    File sdkMapFile
+
+    /**
+     * The file for storing the report.
+     *
+     * <p>This may be any type recognized by Gradle as a file. The contents, if any, will be
+     * overwritten by the new report.
+     */
+    @OutputFile
+    File reportFile
+
+    @Override
+    Task configure(Closure closure) {
+        project.android.variantFilter {
+            if (it.buildType.name != "aggressive") {
+                it.ignore = true;
+            }
+        }
+
+        outputs.upToDateWhen { false }
+        dependsOn "assemble"
+        return super.configure(closure)
+    }
+
+    @TaskAction
+    def generate() {
+        // Check if we need to run human-readable or upload mode.
+        if (project.hasProperty("pull_request")) {
+            def pullRequestNumber = project.properties["pull_request"]
+            def sdkMap = createSdkMap()
+            def sizes = calculateSizesForUpload(sdkMap, project.android.applicationVariants)
+            def report = createReportForUpload(pullRequestNumber, sizes)
+
+            reportFile.withWriter {
+                it.write(report)
+            }
+        } else {
+            def sizes = calculateHumanReadableSizes(project.android.applicationVariants)
+            printHumanReadableReport(sizes)
+        }
+    }
+
+    private def calculateHumanReadableSizes(variants) {
+        def sizes = [:]
+        def processor = {flavor, build, size ->
+            sizes[new Tuple2(flavor, build)] = size
+        }
+
+        calculateSizesFor(variants, processor)
+        return sizes
+    }
+
+    private def calculateSizesForUpload(sdkMap, variants) {
+        def sizes = [:]
+        def processor = { flavor, build, size ->
+            def name = "${flavor}-${build}"
+            def sdk = sdkMap[name];
+
+            if (sdk == null) {
+                throw new IllegalStateException("$name not included in SDK map")
+            }
+            sizes[sdk] = size
+        }
+
+        calculateSizesFor(variants, processor)
+        return sizes
+    }
+
+    private def calculateSizesFor(variants, processor) {
+        // Each variant should have exactly one APK. If there are multiple APKs, then this file is
+	// out of sync with our Gradle configuration, and this task fails. If an APK is missing, it
+	// is silently ignored, and the APKs from the other variants will be used to build the
+	// report.
+        variants.each { variant ->
+            def flavorName = variant.flavorName
+            def buildType = variant.buildType.name
+            def apks = variant.outputs.findAll { it.outputFile.name.endsWith(".apk") }
+            if (apks.size() > 1) {
+	        def msg = "${flavorName}-${buildType} produced more than one APK"
+                throw new IllegalStateException(msg)
+            }
+
+            // This runs at most once, as each variant at this point has zero or one APK.
+            apks.each {
+                def size = it.outputFile.size()
+                processor.call(flavorName, buildType, size)
+            }
+        }
+    }
+
+    private def printHumanReadableReport(sizes) {
+        project.logger.quiet("|------------------        APK Sizes        ------------------|")
+        project.logger.quiet("|--    project    --|--  build type   --|--  size in bytes  --|")
+
+        sizes.each { key, value ->
+            def line = sprintf("|%-19s|%-19s|%-21s|", key.first, key.second, value)
+            project.logger.quiet(line)
+        }
+    }
+
+    // TODO(allisonbm): Remove hard-coding protocol buffers. This code manually generates the
+    // text-format protocol buffer report. This eliminates requiring buildSrc to depend on the
+    // uploader (or simply, the protocol buffer library), but this isn't the most scalable option.
+    private def createReportForUpload(pullRequestNumber, sizes) {
+        def sdkId = 0
+        def apkSize = 0
+
+        def pullRequestGroup = """
+            groups {
+                table_name: "PullRequests"
+                column_names: "pull_request_id"
+                measurements {
+                    values {
+                        int_value: ${pullRequestNumber}
+                    }
+                }
+            }
+        """
+
+        def sizeGroupHeader = """
+            groups {
+                table_name: "ApkSizes"
+                column_names: "sdk_id"
+                column_names: "pull_request_id"
+                column_names: "apk_size"
+        """
+
+        def sizeGroupEntry = """
+                measurements {
+                    values {
+                        int_value: ${->sdkId}
+                    }
+                    values {
+                        int_value: ${pullRequestNumber}
+                    }
+                    values {
+                        int_value: ${->apkSize}
+                    }
+                }
+        """
+
+        def sizeGroupFooter = """
+            }
+        """
+
+
+        def builder = new StringBuilder()
+        builder.append(pullRequestGroup)
+        builder.append(sizeGroupHeader)
+
+        sizes.each { key, value ->
+            // sdkId and apkSize are lazily interpolated into sizeGroupEntry.
+            sdkId = key
+            apkSize = value
+            builder.append(sizeGroupEntry)
+        }
+
+        builder.append(sizeGroupFooter)
+        return builder.toString()
+    }
+
+    private def createSdkMap() {
+        def map = [:]
+
+        sdkMapFile.eachLine {
+            def delimiter = it.indexOf(":")
+            def key = it.substring(0, delimiter).trim()
+            def value = it.substring(delimiter + 1).trim()
+            map[key] = Integer.parseInt(value)
+        }
+
+        return map
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/UploadMeasurementsTask.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/UploadMeasurementsTask.groovy
new file mode 100644
index 000000000..21af89d39
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/UploadMeasurementsTask.groovy
@@ -0,0 +1,93 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle
+
+import java.net.URL
+import java.nio.file.Files
+import java.nio.file.StandardCopyOption
+import org.gradle.api.DefaultTask
+import org.gradle.api.Task
+import org.gradle.api.tasks.Input
+import org.gradle.api.tasks.InputFile
+import org.gradle.api.tasks.TaskAction
+
+/**
+ * Takes the size information created by {@link GenerateMeasurementTask} and uploads it to the
+ * database using the uploader tool.
+ *
+ * <p>The uploader tool is fetched from the Internet using a URL. This URL, and the path to the
+ * report to upload, must be given as properties to this task. This task also requires a project
+ * property, {@code database_config} for connecting to the database. The format of this file is
+ * dictated by the uploader tool.
+ */
+public class UploadMeasurementsTask extends DefaultTask {
+
+    /**
+     * The URL of the uploader tool.
+     *
+     * <p>This must be a valid URL as a {@link String}.
+     */
+    @Input
+    String uploader
+
+    /**
+     * The file to upload.
+     *
+     * <p>This file must exist prior to executing this task, but it may be created by other tasks
+     * provided they run first.
+     */
+    @InputFile
+    File reportFile
+
+    @TaskAction
+    def upload() {
+        if (!project.hasProperty("database_config")) {
+          throw new IllegalStateException("Cannot upload measurements without database config")
+        }
+
+        def configuration = project.file(project.properties["database_config"])
+
+        withTempJar { jar ->
+            getUploaderUrl().withInputStream {
+                Files.copy(it, jar, StandardCopyOption.REPLACE_EXISTING)
+            }
+
+            project.exec {
+                executable("java")
+
+                args(
+                    "-jar",
+                    jar,
+                    "--config_path=${configuration}",
+                    "--proto_path=${reportFile}",
+                )
+            }.rethrowFailure()
+        }
+    }
+
+    def getUploaderUrl() {
+        return new URL(uploader)
+    }
+
+    private def withTempJar(Closure action) {
+        def path = Files.createTempFile("uploader", ".jar")
+        try {
+            action.call(path)
+        } finally {
+            Files.delete(path);
+        }
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/license/LicenseResolverPlugin.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/license/LicenseResolverPlugin.groovy
index 6a185c568..03a966fbf 100644
--- a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/license/LicenseResolverPlugin.groovy
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/license/LicenseResolverPlugin.groovy
@@ -98,7 +98,7 @@ class LicenseResolverPlugin implements Plugin<Project> {
 
                 // must run before preBuild, otherwise it produces an empty license report.
                 project.tasks.getByName('preBuild').mustRunAfter licensesTask
-                project.tasks.getByName("bundle${variantName}") {
+                project.tasks.getByName("bundle${variantName}Aar") {
                     dependsOn licensesTask
                     from licensesTask.outputDir
                 }
diff --git a/fiamui-app/README.md b/fiamui-app/README.md
new file mode 100644
index 000000000..9f911ad06
--- /dev/null
+++ b/fiamui-app/README.md
@@ -0,0 +1,21 @@
+# FIAMUI-App SDK
+This module contains a test-app for Firebase In-App Messaging's Display SDK 
+(see the firebase-inappmessaging-display module).
+
+[Firebase In-App Messaging](https://firebase.google.com/docs/in-app-messaging/) helps you engage 
+users who are actively using your app by sending them targeted and contextual messages that nudge 
+them to complete key in-app actions - like beating a game level, buying an item, or subscribing to 
+content.
+
+The FIAM Display SDK gives you more control over your in-app messages you send, allowing you to 
+customize typeface, colors, transitions, corner radii, and more.
+
+## Running Tests
+Unit tests:
+`../gradlew :fiamui-app:test`
+
+Integration tests, requiring a running and connected device (emulator or real):
+`../gradlew :fiamui-app:connectedAndroidTest`
+
+The best way to test is via the fiamui-app in this repo - you can run the test, or use 
+Firebase Test Lab to run a series of UI tests. See fiamui-app/scripts for more details
\ No newline at end of file
diff --git a/fiamui-app/fiamui-app.gradle b/fiamui-app/fiamui-app.gradle
new file mode 100644
index 000000000..9cd540e2b
--- /dev/null
+++ b/fiamui-app/fiamui-app.gradle
@@ -0,0 +1,77 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+apply plugin: "com.android.application"
+
+android {
+  compileSdkVersion 27
+
+  defaultConfig {
+    applicationId "com.example.firebase.fiamui"
+    minSdkVersion 16
+    targetSdkVersion 27
+    versionCode 1
+    versionName "1.0"
+    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    multiDexEnabled true
+  }
+
+  buildTypes {
+    release {
+      minifyEnabled false
+      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
+    }
+  }
+
+  testOptions {
+    animationsDisabled = true
+  }
+
+  lintOptions {
+    warning 'InvalidPackage'
+    warning 'GradleCompatible'
+  }
+
+  // TODO: Would be nice if we could test on 1_7
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+}
+
+dependencies {
+  implementation project(path: ":firebase-inappmessaging-display")
+  implementation "com.google.firebase:firebase-measurement-connector:17.0.1"
+  implementation('com.google.firebase:firebase-inappmessaging:17.0.3') {
+    exclude group: 'com.google.firebase', module: 'firebase-common'
+  }
+  implementation('com.google.firebase:firebase-analytics:16.0.4') {
+    exclude group: 'com.google.firebase', module: 'firebase-common'
+  }
+
+  implementation "com.android.installreferrer:installreferrer:1.0"
+  implementation "com.android.support:design:27.1.1"
+  implementation "com.android.support:appcompat-v7:27.1.1"
+
+  // The following dependencies are not required to use the FIAM UI library.
+  // They are used to make some aspects of the demo app implementation simpler for
+  // demonstrative purposes, and you may find them useful in your own apps; YMMV.
+  implementation 'me.priyesh:chroma:1.0.2'
+  implementation "com.jakewharton:butterknife:8.8.1"
+  implementation "com.jakewharton:butterknife-compiler:8.8.1"
+  annotationProcessor "com.jakewharton:butterknife-compiler:8.8.1"
+
+  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+  androidTestImplementation 'com.android.support.test:rules:1.0.2'
+}
\ No newline at end of file
diff --git a/fiamui-app/proguard-rules.pro b/fiamui-app/proguard-rules.pro
new file mode 100644
index 000000000..34421dce4
--- /dev/null
+++ b/fiamui-app/proguard-rules.pro
@@ -0,0 +1,28 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /usr/local/google/home/ashwinraghav/Android/Sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
+
+-keep class **$$ViewInjector { *; }
+-keep class **$$ViewBinder { *; }
\ No newline at end of file
diff --git a/fiamui-app/scripts/run-test-lab.sh b/fiamui-app/scripts/run-test-lab.sh
new file mode 100755
index 000000000..86a0c616d
--- /dev/null
+++ b/fiamui-app/scripts/run-test-lab.sh
@@ -0,0 +1,59 @@
+#!/bin/bash
+#
+# Copyright 2018 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# First, you need to create a project, and bucket to use for the FTL runs.
+
+#############################################################################################
+## Note, running this will incur any FTL-related charges.                                  ##
+## We do require manual setting of the script arguments to ensure you've read this notice. ##
+#############################################################################################
+
+PROJECT_ID={{add your project id here}}
+BUCKET_NAME={{add your bucket name here}}
+
+# Assemble the app
+./gradlew :fiamui-app:assembleDebug :fiamui-app:assembleDebugAndroidTest
+
+# Choose the project
+gcloud config set project $PROJECT_ID
+
+# Show the storage bucket
+echo "Tests launching!"
+
+# Run the tests on the following devices
+#   * Pixel 2, API 27 - good for testing the ideal case
+#   * OnePlus, API 22 - popular problematic phone model
+#   * Nexus 7, API 19 - small tablet screen, outdated API
+#   * Galaxy S7E, API 23 - popular high-end phone model, samsung exposure
+#   * Low Res Phone, API 23 - capture very low-res cases
+#   * Moto X, API 19 - popular old phone model, low API
+gcloud firebase test android run \
+  --type instrumentation \
+  --results-bucket=$BUCKET_NAME \
+  --app fiamui-app/build/outputs/apk/debug/fiamui-app-debug.apk  \
+  --test fiamui-app/build/outputs/apk/androidTest/debug/fiamui-app-debug-androidTest.apk \
+  --device model=Pixel2,version=27,locale=en,orientation=portrait  \
+  --device model=Pixel2,version=27,locale=en,orientation=landscape \
+  --device model=A0001,version=22,locale=en,orientation=portrait \
+  --device model=A0001,version=22,locale=en,orientation=landscape \
+  --device model=Nexus7,version=19,locale=en,orientation=portrait \
+  --device model=Nexus7,version=19,locale=en,orientation=landscape \
+  --device model=hero2lte,version=23,locale=en,orientation=portrait \
+  --device model=hero2lte,version=23,locale=en,orientation=landscape \
+  --device model=NexusLowRes,version=23,locale=en,orientation=portrait \
+  --device model=NexusLowRes,version=23,locale=en,orientation=landscape \
+  --device model=victara,version=19,locale=en,orientation=portrait \
+  --device model=victara,version=19,locale=en,orientation=landscape
diff --git a/fiamui-app/src/androidTest/AndroidManifest.xml b/fiamui-app/src/androidTest/AndroidManifest.xml
new file mode 100644
index 000000000..e023e74a9
--- /dev/null
+++ b/fiamui-app/src/androidTest/AndroidManifest.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.firebase.fiamui">
+
+  <application>
+    <uses-library android:name="android.test.runner"/>
+  </application>
+  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+  <uses-permission android:name="android.permission.INTERNET"/>
+</manifest>
\ No newline at end of file
diff --git a/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/BannerTest.java b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/BannerTest.java
new file mode 100644
index 000000000..6a99ed8eb
--- /dev/null
+++ b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/BannerTest.java
@@ -0,0 +1,97 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.scrollTo;
+import static android.support.test.espresso.action.ViewActions.swipeLeft;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static com.example.firebase.fiamui.TestConstants.*;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.not;
+
+import android.support.annotation.IdRes;
+import android.support.annotation.NonNull;
+import android.support.test.espresso.Root;
+import android.support.test.espresso.ViewInteraction;
+import android.support.test.filters.MediumTest;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+import org.hamcrest.Matcher;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestName;
+import org.junit.runner.RunWith;
+
+@MediumTest
+@RunWith(AndroidJUnit4.class)
+public class BannerTest {
+
+  @Rule
+  public ActivityTestRule<MainActivity> mActivityRule = new ActivityTestRule<>(MainActivity.class);
+
+  @Rule public TestName name = new TestName();
+
+  private Matcher<Root> rootMatcher;
+
+  @Before
+  public void setUp() {
+    rootMatcher = withDecorView(not(is(mActivityRule.getActivity().getWindow().getDecorView())));
+  }
+
+  @After
+  public void tearDown() {
+    ScreenShotter.takeScreenshot(name.getMethodName());
+    close();
+  }
+
+  @Test
+  public void testBanner() {
+    open();
+
+    getView(R.id.banner_root).check(matches(isDisplayed()));
+    getView(R.id.banner_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.banner_body).check(matches(withText(BODY_TEXT_NORMAL)));
+  }
+
+  private void open() {
+    onView(withId(R.id.banner_fiam)).perform(scrollTo()).perform(click());
+    onView(withId(R.id.start)).perform(scrollTo()).perform(click());
+  }
+
+  private void close() {
+    getView(R.id.banner_content_root).perform(swipeLeft());
+
+    // Need to sleep for a second to give the swipe animation time to finish so
+    // the banner does not interfere with the next test.
+    try {
+      Thread.sleep(1000);
+    } catch (InterruptedException e) {
+      e.printStackTrace();
+    }
+  }
+
+  @NonNull
+  private ViewInteraction getView(@IdRes int id) {
+    return onView(withId(id)).inRoot(rootMatcher);
+  }
+}
diff --git a/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ImageTest.java b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ImageTest.java
new file mode 100644
index 000000000..dd75f8882
--- /dev/null
+++ b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ImageTest.java
@@ -0,0 +1,84 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.scrollTo;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.not;
+
+import android.support.annotation.IdRes;
+import android.support.annotation.NonNull;
+import android.support.test.espresso.Root;
+import android.support.test.espresso.ViewInteraction;
+import android.support.test.filters.MediumTest;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+import org.hamcrest.Matcher;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestName;
+import org.junit.runner.RunWith;
+
+@MediumTest
+@RunWith(AndroidJUnit4.class)
+public class ImageTest {
+
+  @Rule
+  public ActivityTestRule<MainActivity> mActivityRule = new ActivityTestRule<>(MainActivity.class);
+
+  @Rule public TestName name = new TestName();
+
+  private Matcher<Root> rootMatcher;
+
+  @Before
+  public void setUp() {
+    rootMatcher = withDecorView(not(is(mActivityRule.getActivity().getWindow().getDecorView())));
+  }
+
+  @After
+  public void tearDown() {
+    ScreenShotter.takeScreenshot(name.getMethodName());
+    close();
+  }
+
+  @Test
+  public void testImage() {
+    open();
+
+    getView(R.id.image_root).check(matches(isDisplayed()));
+  }
+
+  @NonNull
+  private ViewInteraction getView(@IdRes int id) {
+    return onView(withId(id)).inRoot(rootMatcher);
+  }
+
+  private void open() {
+    onView(withId(R.id.image_fiam)).perform(scrollTo()).perform(click());
+    onView(withId(R.id.start)).perform(scrollTo()).perform(click());
+  }
+
+  private void close() {
+    getView(R.id.collapse_button).perform(click());
+  }
+}
diff --git a/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ModalTest.java b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ModalTest.java
new file mode 100644
index 000000000..e8ff611e6
--- /dev/null
+++ b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ModalTest.java
@@ -0,0 +1,281 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.clearText;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.replaceText;
+import static android.support.test.espresso.action.ViewActions.scrollTo;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.RootMatchers.withDecorView;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static com.example.firebase.fiamui.TestConstants.BODY_OPT_LONG;
+import static com.example.firebase.fiamui.TestConstants.BODY_OPT_NONE;
+import static com.example.firebase.fiamui.TestConstants.BODY_OPT_NORMAL;
+import static com.example.firebase.fiamui.TestConstants.BODY_TEXT_LONG;
+import static com.example.firebase.fiamui.TestConstants.BODY_TEXT_NORMAL;
+import static com.example.firebase.fiamui.TestConstants.BUTTON_TEXT_NONE;
+import static com.example.firebase.fiamui.TestConstants.BUTTON_TEXT_NORMAL;
+import static com.example.firebase.fiamui.TestConstants.TITLE_TEXT_NONE;
+import static com.example.firebase.fiamui.TestConstants.TITLE_TEXT_NORMAL;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.not;
+
+import android.support.annotation.IdRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.StringRes;
+import android.support.test.espresso.Root;
+import android.support.test.espresso.ViewInteraction;
+import android.support.test.filters.MediumTest;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+import org.hamcrest.Matcher;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestName;
+import org.junit.runner.RunWith;
+
+@MediumTest
+@RunWith(AndroidJUnit4.class)
+public class ModalTest {
+
+  @Rule
+  public ActivityTestRule<MainActivity> mActivityRule = new ActivityTestRule<>(MainActivity.class);
+
+  @Rule public TestName name = new TestName();
+
+  private Matcher<Root> rootMatcher;
+
+  @Before
+  public void setUp() {
+    rootMatcher = withDecorView(not(is(mActivityRule.getActivity().getWindow().getDecorView())));
+
+    // Set defaults
+    setTitle(TITLE_TEXT_NORMAL);
+    selectBody(BODY_OPT_NORMAL);
+    setImageSize(800, 800);
+  }
+
+  @After
+  public void tearDown() {
+    ScreenShotter.takeScreenshot(name.getMethodName());
+
+    // If we are NOT in test lab, add a 2s delay after each test. This
+    // makes bench testing easier since you can eyeball the results as they run.
+    if (!TestUtils.isInTestLab(mActivityRule.getActivity())) {
+      try {
+        Thread.sleep(2000);
+      } catch (InterruptedException e) {
+        e.printStackTrace();
+      }
+    }
+
+    close();
+  }
+
+  @Test
+  public void testModal() {
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_NORMAL)));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_LongBody() {
+    selectBody(BODY_OPT_LONG);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_LONG)));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_NoBody() {
+    selectBody(BODY_OPT_NONE);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(not(isDisplayed())));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_NoTitle() {
+    setTitle(TITLE_TEXT_NONE);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(not(isDisplayed())));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_NORMAL)));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_NoImage() {
+    setImageSize(0, 0);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(isDisplayed()));
+    getView(R.id.image_view).check(matches(not(isDisplayed())));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_NORMAL)));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_NoImage_NoButton() {
+    setImageSize(0, 0);
+    setButton(BUTTON_TEXT_NONE);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(isDisplayed()));
+    getView(R.id.image_view).check(matches(not(isDisplayed())));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_NORMAL)));
+    getView(R.id.button).check(matches(not(isDisplayed())));
+  }
+
+  @Test
+  public void testModal_NoButton() {
+    setButton(BUTTON_TEXT_NONE);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_NORMAL)));
+    getView(R.id.button).check(matches(not(isDisplayed())));
+  }
+
+  @Test
+  public void testModal_NoTitleNoBody() {
+    setTitle(TITLE_TEXT_NONE);
+    selectBody(BODY_OPT_NONE);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(not(isDisplayed())));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(not(isDisplayed())));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_TinyImage() {
+    setImageSize(50, 50);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_NORMAL)));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_TallImage_LongBody() {
+    setImageSize(100, 1200);
+    selectBody(BODY_OPT_LONG);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_LONG)));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_WideImage() {
+    setImageSize(1500, 500);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_NORMAL)));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @Test
+  public void testModal_TallImage() {
+    setImageSize(500, 1500);
+    open();
+
+    getView(R.id.modal_root).check(matches(isDisplayed()));
+    getView(R.id.message_title).check(matches(withText(TITLE_TEXT_NORMAL)));
+    getView(R.id.image_view).check(matches(isDisplayed()));
+    getView(R.id.message_body).check(matches(withText(BODY_TEXT_NORMAL)));
+    getView(R.id.button).check(matches(withText(BUTTON_TEXT_NORMAL)));
+  }
+
+  @NonNull
+  private ViewInteraction getView(@IdRes int id) {
+    return onView(withId(id)).inRoot(rootMatcher);
+  }
+
+  private void selectBody(@IdRes int radioButtonId) {
+    onView(withId(radioButtonId)).perform(scrollTo()).perform(click());
+  }
+
+  private void setTitle(@StringRes int titleRes) {
+    if (titleRes >= 0) {
+      String title = mActivityRule.getActivity().getString(titleRes);
+      onView(withId(R.id.message_title)).perform(scrollTo()).perform(replaceText(title));
+    } else {
+      onView(withId(R.id.message_title)).perform(scrollTo()).perform(clearText());
+    }
+  }
+
+  private void setButton(@StringRes int buttonRes) {
+    if (buttonRes >= 0) {
+      String buttonString = mActivityRule.getActivity().getString(buttonRes);
+      onView(withId(R.id.action_button_text))
+          .perform(scrollTo())
+          .perform(replaceText(buttonString));
+    } else {
+      onView(withId(R.id.action_button_text)).perform(scrollTo()).perform(clearText());
+    }
+  }
+
+  private void setImageSize(int w, int h) {
+    onView(withId(R.id.image_width)).perform(scrollTo()).perform(replaceText(Integer.toString(w)));
+    onView(withId(R.id.image_height)).perform(scrollTo()).perform(replaceText(Integer.toString(h)));
+  }
+
+  private void open() {
+    onView(withId(R.id.modal_fiam)).perform(scrollTo()).perform(click());
+    onView(withId(R.id.start)).perform(scrollTo()).perform(click());
+  }
+
+  private void close() {
+    getView(R.id.collapse_button).perform(click());
+  }
+}
diff --git a/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ScreenShotter.java b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ScreenShotter.java
new file mode 100644
index 000000000..88d3248fe
--- /dev/null
+++ b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/ScreenShotter.java
@@ -0,0 +1,147 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import android.graphics.Bitmap;
+import android.support.test.runner.screenshot.ScreenCapture;
+import android.support.test.runner.screenshot.Screenshot;
+import android.util.Log;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.lang.reflect.Method;
+import java.util.concurrent.atomic.AtomicInteger;
+import org.junit.Test;
+
+/** A set of utility methods used to take screenshots from tests on an android virtual device. */
+public class ScreenShotter {
+  private static final String FILE_NAME_DELIMITER = "-";
+  private static final String IMAGE_TYPE = "jpg";
+  private static final String LOG_TAG = "cloud_screenshotter";
+  private static final String SCREENSHOT_PATH = "/sdcard/screenshots/";
+  private static String lastClassName = "";
+  private static String lastMethodName = "";
+  private static AtomicInteger counter = new AtomicInteger(0);
+
+  /**
+   * Immediately take a screenshot with the given name.
+   *
+   * @param name The name of the screenshot
+   */
+  public static void takeScreenshot(String name) {
+    String fileName = getScreenshotFileName(name);
+    try {
+      takeScreenshotInternal(fileName);
+    } catch (Exception e) {
+      Log.e(LOG_TAG, "Exception taking screenshot: " + e.toString());
+    }
+  }
+
+  /**
+   * Take a screenshot on a device and save it as the specified file name.
+   *
+   * @param fileName name of file in which to save the screenshot.
+   */
+  private static void takeScreenshotInternal(final String fileName) {
+
+    ScreenCapture capture = Screenshot.capture();
+    Bitmap bitmap = capture.getBitmap();
+    File imageFolder = new File(SCREENSHOT_PATH);
+    imageFolder.mkdirs();
+
+    File imageFile = new File(imageFolder, fileName + "." + IMAGE_TYPE);
+    OutputStream out = null;
+
+    try {
+      out = new FileOutputStream(imageFile);
+      bitmap.compress(Bitmap.CompressFormat.JPEG, 90, out);
+      out.flush();
+    } catch (IOException e) {
+      Log.e(LOG_TAG, "Exception taking screenshot: " + e.toString());
+    } finally {
+      try {
+        if (out != null) {
+          out.close();
+        }
+      } catch (IOException e) {
+        Log.e(LOG_TAG, "There was an error closing the FileOutputStream " + e.toString());
+      }
+    }
+  }
+
+  /**
+   * Construct a screenshot file name from the specified screenshot name
+   *
+   * @param screenshotName name for this screenshot
+   * @return screenshot file name with the following format <fully qualified class name>-<test
+   *     method name>-<screenshot name>-<step number>
+   */
+  private static String getScreenshotFileName(String screenshotName) {
+    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
+      String elementClassName = element.getClassName();
+      String elementMethodName = element.getMethodName();
+      if (elementMethodName.startsWith("test")
+          || isJUnit4Test(elementClassName, elementMethodName)) {
+        if (!elementClassName.equals(lastClassName) || !elementMethodName.equals(lastMethodName)) {
+          counter = new AtomicInteger(0);
+        }
+        lastClassName = elementClassName;
+        lastMethodName = elementMethodName;
+        String filename =
+            elementClassName
+                + FILE_NAME_DELIMITER
+                + elementMethodName
+                + FILE_NAME_DELIMITER
+                + screenshotName
+                + FILE_NAME_DELIMITER
+                + counter.incrementAndGet();
+
+        return filename;
+      }
+    }
+
+    lastClassName = "";
+    lastMethodName = "";
+    return "UnknownTestClass"
+        + FILE_NAME_DELIMITER
+        + "unknownTestMethod"
+        + FILE_NAME_DELIMITER
+        + screenshotName
+        + FILE_NAME_DELIMITER
+        + counter.incrementAndGet();
+  }
+
+  private static boolean isJUnit4Test(String elementClassName, String elementMethodName) {
+    try {
+      Class<?> clazz = Class.forName(elementClassName);
+      for (Method method : clazz.getMethods()) {
+        if (method.getName().equals(elementMethodName)
+            && method.getAnnotation(Test.class) != null) {
+          return true;
+        }
+      }
+      for (Method method : clazz.getDeclaredMethods()) {
+        if (method.getName().equals(elementMethodName)
+            && method.getAnnotation(Test.class) != null) {
+          return true;
+        }
+      }
+    } catch (ClassNotFoundException e) {
+      return false;
+    }
+    return false;
+  }
+}
diff --git a/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/TestConstants.java b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/TestConstants.java
new file mode 100644
index 000000000..dc191e37b
--- /dev/null
+++ b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/TestConstants.java
@@ -0,0 +1,38 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import android.support.annotation.IdRes;
+import android.support.annotation.StringRes;
+
+public class TestConstants {
+
+  // Title text IDs
+  @StringRes public static final int TITLE_TEXT_NONE = -1;
+  @StringRes public static final int TITLE_TEXT_NORMAL = R.string.default_message_title;
+
+  // Body text IDs
+  @StringRes public static final int BODY_TEXT_NORMAL = R.string.body_text_normal;
+  @StringRes public static final int BODY_TEXT_LONG = R.string.body_text_long;
+
+  // Button text IDs
+  @StringRes public static final int BUTTON_TEXT_NORMAL = R.string.view_wishlist;
+  @StringRes public static final int BUTTON_TEXT_NONE = -1;
+
+  // Body radio button IDs
+  @IdRes public static final int BODY_OPT_NORMAL = R.id.normal_body_text;
+  @IdRes public static final int BODY_OPT_LONG = R.id.long_body_text;
+  @IdRes public static final int BODY_OPT_NONE = R.id.no_body_text;
+}
diff --git a/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/TestUtils.java b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/TestUtils.java
new file mode 100644
index 000000000..97884e193
--- /dev/null
+++ b/fiamui-app/src/androidTest/java/com/example/firebase/fiamui/TestUtils.java
@@ -0,0 +1,27 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import android.content.Context;
+import android.provider.Settings;
+
+public class TestUtils {
+
+  public static boolean isInTestLab(Context context) {
+    String testLabSetting =
+        Settings.System.getString(context.getContentResolver(), "firebase.test.lab");
+    return ("true".equals(testLabSetting));
+  }
+}
diff --git a/fiamui-app/src/main/AndroidManifest.xml b/fiamui-app/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..bfecaa82e
--- /dev/null
+++ b/fiamui-app/src/main/AndroidManifest.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.firebase.fiamui">
+
+  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+  <uses-permission android:name="android.permission.INTERNET"/>
+
+  <application
+      android:name=".SampleApplication"
+      android:allowBackup="true"
+      android:icon="@mipmap/ic_launcher"
+      android:label="@string/app_name"
+      android:roundIcon="@mipmap/ic_launcher_round"
+      android:supportsRtl="true"
+      android:theme="@style/AppTheme">
+
+    <activity
+        android:name=".MainActivity"
+        android:windowSoftInputMode="stateHidden">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+        <category android:name="android.intent.category.DEFAULT" />
+        <category android:name="android.intent.category.LAUNCHER"/>
+      </intent-filter>
+    </activity>
+
+    <activity android:name=".TestActivity">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+        <category android:name="android.intent.category.LAUNCHER"/>
+      </intent-filter>
+    </activity>
+  </application>
+</manifest>
diff --git a/fiamui-app/src/main/java/com/example/firebase/fiamui/MainActivity.java b/fiamui-app/src/main/java/com/example/firebase/fiamui/MainActivity.java
new file mode 100644
index 000000000..f0e3631f5
--- /dev/null
+++ b/fiamui-app/src/main/java/com/example/firebase/fiamui/MainActivity.java
@@ -0,0 +1,238 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+import android.support.annotation.StringRes;
+import android.support.design.widget.TextInputEditText;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.RadioButton;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+import butterknife.OnClick;
+import com.google.firebase.analytics.FirebaseAnalytics;
+import com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.google.firebase.inappmessaging.model.MessageType;
+import me.priyesh.chroma.ChromaDialog;
+import me.priyesh.chroma.ColorMode;
+import me.priyesh.chroma.ColorSelectListener;
+
+public class MainActivity extends AppCompatActivity {
+  @BindView(R.id.start)
+  Button mStart;
+
+  @BindView(R.id.modal_fiam)
+  RadioButton useModalFiam;
+
+  @BindView(R.id.banner_fiam)
+  RadioButton useBannerFiam;
+
+  @BindView(R.id.image_fiam)
+  RadioButton useImageFiam;
+
+  @BindView(R.id.long_body_text)
+  RadioButton useLongBodyText;
+
+  @BindView(R.id.normal_body_text)
+  RadioButton useNormalBodyText;
+
+  @BindView(R.id.no_body_text)
+  RadioButton useNoBodyText;
+
+  @BindView(R.id.message_title)
+  TextInputEditText messageTitle;
+
+  @BindView(R.id.image_width)
+  TextInputEditText imageWidth;
+
+  @BindView(R.id.image_height)
+  TextInputEditText imageHeight;
+
+  @BindView(R.id.action_button_text)
+  TextInputEditText actionButtonText;
+
+  @BindView(R.id.action_button_url)
+  TextInputEditText actionButtonUrl;
+
+  @BindView(R.id.fiam_ttl)
+  TextInputEditText fiamTTL;
+
+  @BindView(R.id.color_body_bg_container)
+  View colorBodyBgContainer;
+
+  @BindView(R.id.color_body_bg_preview)
+  View colorBodyBgPreview;
+
+  @BindView(R.id.color_body_text_container)
+  View colorBodyTextContainer;
+
+  @BindView(R.id.color_body_text_preview)
+  View colorBodyTextPreview;
+
+  @BindView(R.id.color_button_bg_container)
+  View colorButtonBgContainer;
+
+  @BindView(R.id.color_button_bg_preview)
+  View colorButtonBgPreview;
+
+  @BindView(R.id.color_button_text_container)
+  View colorButtonTextContainer;
+
+  @BindView(R.id.color_button_text_preview)
+  View colorButtonTextPreview;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.activity_main);
+
+    ButterKnife.bind(this);
+
+    FirebaseAnalytics analytics = FirebaseAnalytics.getInstance(this);
+    Bundle bundle = new Bundle();
+    bundle.putString(FirebaseAnalytics.Param.ITEM_ID, "id");
+    bundle.putString(FirebaseAnalytics.Param.ITEM_NAME, "name");
+    bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "image");
+    analytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle);
+
+    bindColorPicker(colorBodyBgContainer, colorBodyBgPreview);
+    bindColorPicker(colorBodyTextContainer, colorBodyTextPreview);
+    bindColorPicker(colorButtonBgContainer, colorButtonBgPreview);
+    bindColorPicker(colorButtonTextContainer, colorButtonTextPreview);
+  }
+
+  @OnClick(R.id.start)
+  public void onStartClick(View v) {
+    String buttonBackgroundColorString = getBackgroundColorString(colorButtonBgPreview);
+    String buttonTextColorString = getBackgroundColorString(colorButtonTextPreview);
+    String bodyTextColorString = getBackgroundColorString(colorBodyTextPreview);
+    String bodyBackgroundColorString = getBackgroundColorString(colorBodyBgPreview);
+
+    String bodyText = getString(getSelectedBodyText());
+
+    String w = imageWidth.getText().toString();
+    String h = imageHeight.getText().toString();
+
+    String imageUrlString;
+    if ("0".equals(w) && "0".equals(h)) {
+      imageUrlString = null;
+    } else {
+      imageUrlString = "https://unsplash.it/" + w + "/" + h;
+    }
+
+    String actionButtonTextString = actionButtonText.getText().toString();
+    String actionButtonUrlString = actionButtonUrl.getText().toString();
+
+    InAppMessage.Builder builder = InAppMessage.builder();
+
+    if (!bodyText.equals("")) {
+      InAppMessage.Text body =
+          InAppMessage.Text.builder().setText(bodyText).setHexColor(bodyTextColorString).build();
+      builder = builder.setBody(body);
+    }
+
+    if (!actionButtonTextString.equals("")) {
+      InAppMessage.Text buttonText =
+          InAppMessage.Text.builder()
+              .setHexColor(buttonTextColorString)
+              .setText(actionButtonTextString)
+              .build();
+      InAppMessage.Action action =
+          InAppMessage.Action.builder().setActionUrl(actionButtonUrlString).build();
+      com.google.firebase.inappmessaging.model.InAppMessage.Button actionButton =
+          com.google.firebase.inappmessaging.model.InAppMessage.Button.builder()
+              .setText(buttonText)
+              .setButtonHexColor(buttonBackgroundColorString)
+              .build();
+      builder = builder.setAction(action).setActionButton(actionButton);
+    }
+
+    InAppMessage.Text title =
+        InAppMessage.Text.builder()
+            .setHexColor(bodyTextColorString)
+            .setText(messageTitle.getText().toString())
+            .build();
+
+    builder =
+        builder
+            .setCampaignId("test_campaign")
+            .setBackgroundHexColor(bodyBackgroundColorString)
+            .setCampaignName("name")
+            .setIsTestMessage(true)
+            .setTitle(title);
+
+    if (imageUrlString != null) {
+      builder = builder.setImageUrl(imageUrlString);
+    }
+
+    if (useImageFiam.isChecked()) {
+      builder.setMessageType(MessageType.IMAGE_ONLY);
+    } else if (useBannerFiam.isChecked()) {
+      builder.setMessageType(MessageType.BANNER);
+    } else {
+      builder.setMessageType(MessageType.MODAL);
+    }
+
+    FirebaseInAppMessagingDisplay.getInstance()
+        .testMessage(this, builder.build(), new NoOpDisplayCallbacks());
+  }
+
+  @StringRes
+  private int getSelectedBodyText() {
+    if (useLongBodyText.isChecked()) {
+      return R.string.body_text_long;
+    }
+
+    if (useNoBodyText.isChecked()) {
+      return R.string.no_body_text;
+    }
+
+    return R.string.body_text_normal;
+  }
+
+  private int getBackgroundColor(View view) {
+    ColorDrawable drawable = (ColorDrawable) view.getBackground();
+    return drawable.getColor();
+  }
+
+  private String getBackgroundColorString(View view) {
+    return String.format("#%06X", (0xFFFFFF & getBackgroundColor(view)));
+  }
+
+  private void bindColorPicker(View container, final View preview) {
+    container.setOnClickListener(
+        new View.OnClickListener() {
+          @Override
+          public void onClick(View view) {
+            new ChromaDialog.Builder()
+                .initialColor(getBackgroundColor(preview))
+                .colorMode(ColorMode.RGB)
+                .onColorSelected(
+                    new ColorSelectListener() {
+                      @Override
+                      public void onColorSelected(int i) {
+                        preview.setBackgroundColor(i);
+                      }
+                    })
+                .create()
+                .show(getSupportFragmentManager(), "ChromaDialog");
+          }
+        });
+  }
+}
diff --git a/fiamui-app/src/main/java/com/example/firebase/fiamui/NoOpDisplayCallbacks.java b/fiamui-app/src/main/java/com/example/firebase/fiamui/NoOpDisplayCallbacks.java
new file mode 100644
index 000000000..f8aae610f
--- /dev/null
+++ b/fiamui-app/src/main/java/com/example/firebase/fiamui/NoOpDisplayCallbacks.java
@@ -0,0 +1,41 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import com.google.android.gms.tasks.Task;
+import com.google.android.gms.tasks.TaskCompletionSource;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplayCallbacks;
+
+public class NoOpDisplayCallbacks implements FirebaseInAppMessagingDisplayCallbacks {
+  @Override
+  public Task<Void> impressionDetected() {
+    return new TaskCompletionSource<Void>().getTask();
+  }
+
+  @Override
+  public Task<Void> messageDismissed(InAppMessagingDismissType dismissType) {
+    return new TaskCompletionSource<Void>().getTask();
+  }
+
+  @Override
+  public Task<Void> messageClicked() {
+    return new TaskCompletionSource<Void>().getTask();
+  }
+
+  @Override
+  public Task<Void> displayErrorEncountered(InAppMessagingErrorReason InAppMessagingErrorReason) {
+    return new TaskCompletionSource<Void>().getTask();
+  }
+}
diff --git a/fiamui-app/src/main/java/com/example/firebase/fiamui/SampleApplication.java b/fiamui-app/src/main/java/com/example/firebase/fiamui/SampleApplication.java
new file mode 100644
index 000000000..b20fdbc27
--- /dev/null
+++ b/fiamui-app/src/main/java/com/example/firebase/fiamui/SampleApplication.java
@@ -0,0 +1,24 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import android.support.multidex.MultiDexApplication;
+
+public class SampleApplication extends MultiDexApplication {
+  @Override
+  public void onCreate() {
+    super.onCreate();
+  }
+}
diff --git a/fiamui-app/src/main/java/com/example/firebase/fiamui/TestActivity.java b/fiamui-app/src/main/java/com/example/firebase/fiamui/TestActivity.java
new file mode 100644
index 000000000..9d514e692
--- /dev/null
+++ b/fiamui-app/src/main/java/com/example/firebase/fiamui/TestActivity.java
@@ -0,0 +1,25 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.example.firebase.fiamui;
+
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+
+public class TestActivity extends AppCompatActivity {
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+  }
+}
diff --git a/fiamui-app/src/main/res/layout/activity_main.xml b/fiamui-app/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..a36f82bc5
--- /dev/null
+++ b/fiamui-app/src/main/res/layout/activity_main.xml
@@ -0,0 +1,300 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.design.widget.CoordinatorLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/root"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.example.firebase.fiamui.MainActivity"
+    >
+
+  <ScrollView
+      android:layout_width="match_parent"
+      android:layout_height="match_parent"
+      >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="16dp"
+        android:layout_marginLeft="24dp"
+        android:layout_marginRight="24dp"
+        android:layout_marginTop="16dp"
+        android:orientation="vertical"
+        android:paddingBottom="32dp"
+        >
+
+      <TextView
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:layout_gravity="center_horizontal"
+          android:text="@string/fiam_ui_demo"
+          style="@style/Base.TextAppearance.AppCompat.Headline"
+          />
+
+      <Button
+          android:id="@+id/start"
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:layout_gravity="center"
+          android:layout_margin="16dp"
+          android:text="@string/start"
+          style="@style/Widget.AppCompat.Button.Colored"
+          />
+
+      <TextView
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:layout_marginBottom="8dp"
+          android:text="@string/fiam_type"
+          style="@style/Base.TextAppearance.AppCompat.Subhead"
+          />
+
+      <RadioGroup
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:orientation="vertical"
+          >
+
+        <RadioButton
+            android:id="@+id/modal_fiam"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:checked="true"
+            android:text="@string/modal"
+            />
+
+        <RadioButton
+            android:id="@+id/banner_fiam"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/banner"
+            />
+
+        <RadioButton
+            android:id="@+id/image_fiam"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/image"
+            />
+      </RadioGroup>
+
+      <android.support.design.widget.TextInputLayout
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content"
+          android:layout_marginTop="16dp"
+          >
+
+        <android.support.design.widget.TextInputEditText
+            android:id="@+id/message_title"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="@string/message_title"
+            android:text="@string/default_message_title"
+            />
+
+      </android.support.design.widget.TextInputLayout>
+
+      <TextView
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:layout_marginBottom="8dp"
+          android:layout_marginTop="16dp"
+          android:text="Use body text"
+          style="@style/Base.TextAppearance.AppCompat.Subhead"
+          />
+
+      <RadioGroup
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:orientation="vertical"
+          >
+
+        <RadioButton
+            android:id="@+id/normal_body_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:checked="true"
+            android:text="@string/regular_length"
+            />
+
+        <RadioButton
+            android:id="@+id/long_body_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/long_length"
+            />
+
+        <RadioButton
+            android:id="@+id/no_body_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/no_length"
+            />
+      </RadioGroup>
+
+      <LinearLayout
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content"
+          android:orientation="horizontal"
+          android:layout_marginTop="16dp"
+          android:weightSum="2.0">
+
+        <android.support.design.widget.TextInputLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1.0">
+
+          <android.support.design.widget.TextInputEditText
+              android:id="@+id/image_width"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:inputType="number"
+              android:hint="Image Width"
+              android:text="800" />
+
+        </android.support.design.widget.TextInputLayout>
+
+        <android.support.design.widget.TextInputLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1.0">
+
+          <android.support.design.widget.TextInputEditText
+              android:id="@+id/image_height"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:inputType="number"
+              android:hint="Image Height"
+              android:text="800" />
+
+        </android.support.design.widget.TextInputLayout>
+
+      </LinearLayout>
+
+      <android.support.design.widget.TextInputLayout
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content"
+          android:layout_marginTop="16dp"
+          >
+
+        <android.support.design.widget.TextInputEditText
+            android:id="@+id/action_button_text"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="@string/action_button_text"
+            android:text="@string/view_wishlist"
+            />
+
+      </android.support.design.widget.TextInputLayout>
+
+      <android.support.design.widget.TextInputLayout
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content"
+          android:layout_marginTop="16dp"
+          >
+
+        <android.support.design.widget.TextInputEditText
+            android:id="@+id/action_button_url"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="@string/action_button_url"
+            android:text="https://www.google.com"
+            />
+      </android.support.design.widget.TextInputLayout>
+
+      <android.support.design.widget.TextInputLayout
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content"
+          android:layout_marginTop="16dp"
+          >
+
+        <android.support.design.widget.TextInputEditText
+            android:id="@+id/fiam_ttl"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="Time in seconds to show fiam"
+            android:inputType="number"
+            android:text="30"
+            />
+
+      </android.support.design.widget.TextInputLayout>
+
+      <TextView
+          android:layout_width="match_parent"
+          android:layout_height="wrap_content"
+          android:text="Colors"
+          android:textSize="16sp"
+          android:textStyle="bold"
+          android:layout_marginBottom="16dp"
+          android:layout_marginTop="16dp" />
+
+      <FrameLayout
+          android:id="@+id/color_body_bg_container"
+          style="@style/AppTheme.ColorContainer">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Body Background" />
+
+        <View
+            android:id="@+id/color_body_bg_preview"
+            android:background="#FAFAFA"
+            style="@style/AppTheme.ColorPreview" />
+
+      </FrameLayout>
+
+      <FrameLayout
+          android:id="@+id/color_body_text_container"
+          style="@style/AppTheme.ColorContainer">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Body Text" />
+
+        <View
+            android:id="@+id/color_body_text_preview"
+            android:background="#000000"
+            style="@style/AppTheme.ColorPreview" />
+
+      </FrameLayout>
+
+      <FrameLayout
+          android:id="@+id/color_button_bg_container"
+          style="@style/AppTheme.ColorContainer">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Button Background" />
+
+        <View
+            android:id="@+id/color_button_bg_preview"
+            android:background="@color/colorAccent"
+            style="@style/AppTheme.ColorPreview" />
+
+      </FrameLayout>
+
+      <FrameLayout
+          android:id="@+id/color_button_text_container"
+          style="@style/AppTheme.ColorContainer">
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Button Text" />
+
+        <View
+            android:id="@+id/color_button_text_preview"
+            android:background="#FFFFFF"
+            style="@style/AppTheme.ColorPreview" />
+
+      </FrameLayout>
+
+    </LinearLayout>
+
+  </ScrollView>
+
+</android.support.design.widget.CoordinatorLayout>
diff --git a/fiamui-app/src/main/res/mipmap-hdpi/ic_launcher.png b/fiamui-app/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..cde69bccc
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/fiamui-app/src/main/res/mipmap-hdpi/ic_launcher_round.png b/fiamui-app/src/main/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 000000000..9a078e3e1
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/fiamui-app/src/main/res/mipmap-mdpi/ic_launcher.png b/fiamui-app/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..c133a0cbd
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/fiamui-app/src/main/res/mipmap-mdpi/ic_launcher_round.png b/fiamui-app/src/main/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 000000000..efc028a63
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/fiamui-app/src/main/res/mipmap-xhdpi/ic_launcher.png b/fiamui-app/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..bfa42f0e7
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/fiamui-app/src/main/res/mipmap-xhdpi/ic_launcher_round.png b/fiamui-app/src/main/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..3af2608a4
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/fiamui-app/src/main/res/mipmap-xxhdpi/ic_launcher.png b/fiamui-app/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..324e72cdd
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/fiamui-app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png b/fiamui-app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..9bec2e623
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/fiamui-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/fiamui-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..aee44e138
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/fiamui-app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png b/fiamui-app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..34947cd6b
Binary files /dev/null and b/fiamui-app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/fiamui-app/src/main/res/values/colors.xml b/fiamui-app/src/main/res/values/colors.xml
new file mode 100644
index 000000000..5a077b3a7
--- /dev/null
+++ b/fiamui-app/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <color name="colorPrimary">#3F51B5</color>
+  <color name="colorPrimaryDark">#303F9F</color>
+  <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/fiamui-app/src/main/res/values/google-services.xml b/fiamui-app/src/main/res/values/google-services.xml
new file mode 100644
index 000000000..07c6ccab6
--- /dev/null
+++ b/fiamui-app/src/main/res/values/google-services.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="google_api_key" translatable="false">ABCDIAMAKEY</string>
+    <string name="google_app_id" translatable="false">1:123456:android:abcd123</string>
+    <string name="project_id" translatable="false">fiamui-demo</string>
+</resources>
diff --git a/fiamui-app/src/main/res/values/strings.xml b/fiamui-app/src/main/res/values/strings.xml
new file mode 100644
index 000000000..85eec4a68
--- /dev/null
+++ b/fiamui-app/src/main/res/values/strings.xml
@@ -0,0 +1,36 @@
+<resources>
+  <string name="app_name">FIAM UI</string>
+  <string name="message_title">Message title</string>
+  <string name="regular_length">Regular</string>
+  <string name="long_length">Long</string>
+  <string name="no_length">No Body</string>
+  <string name="image_url">Image url</string>
+  <string name="action_button_text">Action button text</string>
+  <string name="action_button_url">Action button url</string>
+  <string name="fiam_ui_demo">FIAM UI Demo</string>
+  <string name="fiam_type">Fiam type</string>
+  <string name="start">Start</string>
+  <string name="modal">Modal</string>
+  <string name="banner">Banner</string>
+  <string name="image">Image</string>
+  <string name="default_image_url">https://unsplash.it/800/800</string>
+  <string name="body_text_long">Lorem ipsum dolor sit amet, consectetur adipiscing elit.
+    Aliquam at ipsum augue. In et dui at justo scelerisque porta quis id arcu. Nam aliquam dolor
+    ante, id vestibulum augue dapibus non. Proin aliquet tortor nec neque pulvinar pretium sed id
+    sem. Vivamus sit amet metus nec arcu hendrerit blandit id at sapien. Donec luctus feugiat massa
+    rutrum ultricies. Duis bibendum interdum placerat. Maecenas sed molestie ex. Duis mattis luctus
+    lacus eget auctor. Aliquam ultricies, leo in bibendum interdum, ipsum est pharetra odio,
+    fermentum semper lorem ipsum nec ex. Class aptent taciti sociosqu ad litora torquent per
+    conubia nostra, per inceptos himenaeos.
+    Nam fermentum augue nec velit mollis, eu hendrerit libero luctus. Aliquam erat volutpat.
+    Donec quis nulla et turpis mattis posuere</string>
+  <string name="body_text_normal">We noticed that some of your wishlist items went on sale recently. Take a look!</string>
+  <string name="no_body_text"></string>
+  <string name="default_message_title">Your wishlist items are on sale!</string>
+  <string name="view_wishlist">Lorem Ipsum</string>
+  <string name="test_activity_from_where_fiam_launches">Test activity from where fiam launches</string>
+  <string name="color1">#00FF00</string>
+  <string name="colo2">#000000</string>
+  <string name="color3">#AA5B81</string>
+  <string name="color4">#000000</string>
+</resources>
\ No newline at end of file
diff --git a/fiamui-app/src/main/res/values/styles.xml b/fiamui-app/src/main/res/values/styles.xml
new file mode 100644
index 000000000..ce035d7f2
--- /dev/null
+++ b/fiamui-app/src/main/res/values/styles.xml
@@ -0,0 +1,23 @@
+<resources>
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+    <style name="AppTheme.ColorContainer">
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:paddingTop">8dp</item>
+        <item name="android:paddingBottom">8dp</item>
+        <item name="android:background">?attr/selectableItemBackground</item>
+    </style>
+
+    <style name="AppTheme.ColorPreview">
+        <item name="android:layout_width">20dp</item>
+        <item name="android:layout_height">20dp</item>
+        <item name="android:layout_gravity">right|center_vertical</item>
+    </style>
+
+</resources>
diff --git a/firebase-common/firebase-common.gradle b/firebase-common/firebase-common.gradle
index 1d74315f8..fb5e174e2 100644
--- a/firebase-common/firebase-common.gradle
+++ b/firebase-common/firebase-common.gradle
@@ -14,7 +14,7 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 26
+def androidVersion = 28
 
 android {
     adbOptions {
@@ -23,16 +23,13 @@ android {
 
     compileSdkVersion androidVersion
     defaultConfig {
+      minSdkVersion 14
       targetSdkVersion androidVersion
 
       multiDexEnabled true
       testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
     sourceSets {
-        main {
-            java {
-            }
-        }
         androidTest {
             java {
                 srcDir 'src/testUtil'
@@ -58,18 +55,19 @@ android {
 dependencies {
     implementation "com.google.android.gms:play-services-basement:$playServicesVersion"
     implementation "com.google.android.gms:play-services-tasks:$playServicesVersion"
-    compileOnly 'com.google.code.findbugs:jsr305:1.3.9'
+
+    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
 
     testImplementation 'com.android.support.test:runner:1.0.2'
     testImplementation 'org.robolectric:robolectric:4.0-alpha-3'
-    testImplementation 'junit:junit:4.11'
-    testImplementation 'com.google.truth:truth:0.36'
-    testImplementation 'org.mockito:mockito-core:1.10.19'
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'com.google.truth:truth:0.42'
+    testImplementation 'org.mockito:mockito-core:2.21.0'
 
-    androidTestImplementation 'junit:junit:4.11'
+    androidTestImplementation 'junit:junit:4.12'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
-    androidTestImplementation 'com.google.truth:truth:0.36'
-    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
+    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation 'org.mockito:mockito-core:2.21.0'
     androidTestImplementation 'com.linkedin.dexmaker:dexmaker:2.16.0'
     androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.16.0'
     androidTestImplementation ('com.google.firebase:firebase-auth:16.0.2') {
diff --git a/firebase-common/src/main/AndroidManifest.xml b/firebase-common/src/main/AndroidManifest.xml
index 98082f2bb..c0c662065 100644
--- a/firebase-common/src/main/AndroidManifest.xml
+++ b/firebase-common/src/main/AndroidManifest.xml
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.google.firebase">
-    <uses-sdk android:minSdkVersion="14"/>
     <application>
 
         <provider
diff --git a/firebase-database-collection/firebase-database-collection.gradle b/firebase-database-collection/firebase-database-collection.gradle
index 97d9a636e..7da2c76aa 100644
--- a/firebase-database-collection/firebase-database-collection.gradle
+++ b/firebase-database-collection/firebase-database-collection.gradle
@@ -14,13 +14,18 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 26
+def androidVersion = 28
 
 android {
     compileSdkVersion androidVersion
+    defaultConfig {
+        minSdkVersion 9
+    }
 }
 
 dependencies {
-    testCompile 'junit:junit:4.11'
-    testCompile 'net.java:quickcheck:0.6'
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'net.java:quickcheck:0.6'
+    testAnnotationProcessor 'net.java:quickcheck-src-generator:0.6'
+    testAnnotationProcessor 'net.java.quickcheck:quickcheck-src-generator:0.6'
 }
diff --git a/firebase-database-collection/src/main/AndroidManifest.xml b/firebase-database-collection/src/main/AndroidManifest.xml
index f304b3aee..59833a0d9 100644
--- a/firebase-database-collection/src/main/AndroidManifest.xml
+++ b/firebase-database-collection/src/main/AndroidManifest.xml
@@ -1,5 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+<manifest
           package="com.google.firebase.database.collection">
-    <uses-sdk android:minSdkVersion="9" />
 </manifest>
diff --git a/firebase-database/firebase-database.gradle b/firebase-database/firebase-database.gradle
index d3d65abf6..1f4ee4ba9 100644
--- a/firebase-database/firebase-database.gradle
+++ b/firebase-database/firebase-database.gradle
@@ -14,7 +14,7 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 26
+def androidVersion = 28
 
 
 tasks.withType(org.gradle.api.tasks.testing.Test) {
@@ -35,6 +35,7 @@ android {
     compileSdkVersion androidVersion
     defaultConfig {
         targetSdkVersion androidVersion
+        minSdkVersion 14
         multiDexEnabled true
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
@@ -42,26 +43,22 @@ android {
     buildTypes {
         release {
             minifyEnabled false
-            useProguard true
-            consumerProguardFiles 'proguard.txt'
         }
         debug {
         }
     }
     sourceSets {
-        sourceSets {
-            androidTest {
-                java {
-                    srcDir 'src/testUtil/java'
-                }
+        androidTest {
+            java {
+                srcDir 'src/testUtil/java'
             }
-            test {
-                java {
-                    srcDir 'src/testUtil/java'
-                }
-                resources {
-                    srcDirs "src/test/resources"
-                }
+        }
+        test {
+            java {
+                srcDir 'src/testUtil/java'
+            }
+            resources {
+                srcDirs "src/test/resources"
             }
         }
     }
@@ -86,20 +83,23 @@ dependencies {
     androidTestImplementation "com.android.support:support-annotations:$supportAnnotationsVersion"
     androidTestImplementation 'com.android.support.test:rules:1.0.2'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
-    androidTestImplementation 'com.google.truth:truth:0.39'
+    androidTestImplementation 'com.google.truth:truth:0.42'
     androidTestImplementation 'com.fasterxml.jackson.core:jackson-core:2.9.6'
     androidTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
     androidTestImplementation 'junit:junit:4.12'
-    androidTestImplementation 'net.java.quickcheck:quickcheck:0.6'
+    androidTestImplementation 'net.java:quickcheck:0.6'
+    androidTestAnnotationProcessor 'net.java:quickcheck-src-generator:0.6'
+    androidTestAnnotationProcessor 'net.java.quickcheck:quickcheck-src-generator:0.6'
+
 
     testImplementation 'junit:junit:4.12'
-    testImplementation 'org.mockito:mockito-core:2.18.3'
+    testImplementation 'org.mockito:mockito-core:2.21.0'
     testImplementation 'org.robolectric:robolectric:3.8'
     testImplementation 'com.firebase:firebase-token-generator:2.0.0'
     testImplementation 'com.fasterxml.jackson.core:jackson-core:2.9.6'
     testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
     testImplementation 'net.java.quickcheck:quickcheck:0.6'
-    testImplementation 'com.google.truth:truth:0.39'
+    testImplementation 'com.google.truth:truth:0.42'
     testImplementation 'com.android.support.test:rules:1.0.2'
 
 }
diff --git a/firebase-database/src/androidTest/AndroidManifest.xml b/firebase-database/src/androidTest/AndroidManifest.xml
index d43c61d2d..bd4a6dd5b 100644
--- a/firebase-database/src/androidTest/AndroidManifest.xml
+++ b/firebase-database/src/androidTest/AndroidManifest.xml
@@ -16,8 +16,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           xmlns:tools="http://schemas.android.com/tools"
           package="com.google.firebase.database.android">
-    <uses-sdk android:minSdkVersion="14"
-        android:targetSdkVersion="23"/>
+
     <uses-permission android:name="android.permission.INTERNET"/>
     <application android:label="FirebaseDatabaseTests" android:largeHeap="true">
         <uses-library android:name="android.test.runner"/>
diff --git a/firebase-database/src/main/AndroidManifest.xml b/firebase-database/src/main/AndroidManifest.xml
index c05ee64a7..1b8c92982 100644
--- a/firebase-database/src/main/AndroidManifest.xml
+++ b/firebase-database/src/main/AndroidManifest.xml
@@ -15,7 +15,6 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.firebase.database">
-    <uses-sdk android:minSdkVersion="14"/>
 
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.INTERNET" />
diff --git a/firebase-firestore/CHANGELOG.md b/firebase-firestore/CHANGELOG.md
index 3b5bb4adf..c7c551669 100644
--- a/firebase-firestore/CHANGELOG.md
+++ b/firebase-firestore/CHANGELOG.md
@@ -1,13 +1,19 @@
 # Unreleased
+- [feature] Custom objects (POJOs) can now be passed as a field value in
+  update(), within `Map<>` objects passed to set(), in array transform
+  operations, and in query filters.
+- [feature] DocumentSnapshot.get() now supports retrieving fields as
+  custom objects (POJOs) by passing a Class<T> instance, e.g.
+  `snapshot.get("field", CustomType.class)`.
 
 # 17.1.2
-- [changed] Changed the internal handling for locally updated documents that
-  haven't yet been read back from Cloud Firestore. This can lead to slight
-  behavior changes and may affect the `SnapshotMetadata.hasPendingWrites()`
-  metadata flag.
+- [changed] Changed how the SDK handles locally-updated documents while syncing
+  those updates with Cloud Firestore servers. This can lead to slight behavior
+  changes and may affect the `SnapshotMetadata.hasPendingWrites()` metadata
+  flag.
 - [changed] Eliminated superfluous update events for locally cached documents
-  that are known to lag behind the server version. Instead, we buffer these
-  events until the client has caught up with the server.
+  that are known to lag behind the server version. Instead, the SDK buffers
+  these events until the client has caught up with the server.
 
 # 17.1.1
 - [fixed] Fixed an issue where the first `get()` call made after being offline
diff --git a/firebase-firestore/firebase-firestore.gradle b/firebase-firestore/firebase-firestore.gradle
index 39a65b5ac..26422831a 100644
--- a/firebase-firestore/firebase-firestore.gradle
+++ b/firebase-firestore/firebase-firestore.gradle
@@ -15,7 +15,7 @@
 apply plugin: 'com.android.library'
 apply plugin: 'com.google.protobuf'
 
-def androidVersion = 26
+def androidVersion = 28
 
 protobuf {
     // Configure the protoc executable
@@ -56,6 +56,7 @@ android {
     compileSdkVersion androidVersion
     defaultConfig {
         targetSdkVersion androidVersion
+        minSdkVersion 14
         multiDexEnabled true
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
@@ -90,6 +91,9 @@ dependencies {
     implementation project(':protolite-well-known-types')
     implementation project(':firebase-database-collection')
 
+    //To provide @Generated annotations
+    compileOnly 'javax.annotation:jsr250-api:1.0'
+
     implementation 'io.grpc:grpc-stub:1.12.0'
     implementation 'io.grpc:grpc-protobuf-lite:1.12.0'
     implementation 'io.grpc:grpc-okhttp:1.12.0'
@@ -104,19 +108,19 @@ dependencies {
         exclude group: "com.google.firebase", module: "firebase-common"
     }
 
-    testCompile 'junit:junit:4.11'
-    testCompile 'org.mockito:mockito-core:1.10.19'
-    testCompile 'org.robolectric:robolectric:4.0-alpha-3'
-    testCompile 'com.google.truth:truth:0.36'
-    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
-    testCompile 'com.google.guava:guava-testlib:12.0-rc2'
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.mockito:mockito-core:2.21.0'
+    testImplementation 'org.robolectric:robolectric:4.0-alpha-3'
+    testImplementation 'com.google.truth:truth:0.42'
+    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
+    testImplementation 'com.google.guava:guava-testlib:12.0-rc2'
 
-    androidTestCompile 'junit:junit:4.11'
-    androidTestCompile 'com.google.truth:truth:0.36'
-    androidTestCompile 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
-    androidTestCompile "com.android.support:support-annotations:$supportAnnotationsVersion"
-    androidTestCompile 'com.android.support.test:runner:1.0.2'
-    androidTestCompile 'com.android.support.test:rules:1.0.2'
+    androidTestImplementation 'junit:junit:4.12'
+    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
+    androidTestImplementation "com.android.support:support-annotations:$supportAnnotationsVersion"
+    androidTestImplementation 'com.android.support.test:runner:1.0.2'
+    androidTestImplementation 'com.android.support.test:rules:1.0.2'
 }
 
 // ==========================================================================
diff --git a/firebase-firestore/lint.xml b/firebase-firestore/lint.xml
index 6fb92c287..5cdbff248 100644
--- a/firebase-firestore/lint.xml
+++ b/firebase-firestore/lint.xml
@@ -2,7 +2,7 @@
 <lint>
     <!--A linter bug prevents us from being able to analyze this file.-->
     <!--See: https://storage.googleapis.com/android-ci/pr-logs/pull/firebase_firebase-android-sdk/63/check/1049425133258674177/artifacts/firebase-firestore_build_reports/lint-results.html -->
-    <issue id="all">
+    <issue id="LintError">
         <ignore path="src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java"/>
     </issue>
 
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/POJOTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/POJOTest.java
index 5e8c941f8..bb60af5f7 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/POJOTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/POJOTest.java
@@ -15,13 +15,18 @@
 package com.google.firebase.firestore;
 
 import static com.google.firebase.firestore.testutil.IntegrationTestUtil.testCollection;
+import static com.google.firebase.firestore.testutil.IntegrationTestUtil.testDocument;
 import static com.google.firebase.firestore.testutil.IntegrationTestUtil.waitFor;
 import static com.google.firebase.firestore.testutil.TestUtil.expectError;
+import static com.google.firebase.firestore.testutil.TestUtil.map;
 import static junit.framework.Assert.assertEquals;
 
 import android.support.test.runner.AndroidJUnit4;
+import com.google.android.gms.tasks.Task;
+import com.google.android.gms.tasks.Tasks;
 import com.google.firebase.Timestamp;
 import com.google.firebase.firestore.testutil.IntegrationTestUtil;
+import java.util.ArrayList;
 import java.util.Date;
 import org.junit.After;
 import org.junit.Test;
@@ -175,7 +180,7 @@ public void testWriteAndRead() {
   }
 
   @Test
-  public void testUpdate() {
+  public void testSetMerge() {
     CollectionReference collection = testCollection();
     POJO data = new POJO(1.0, "a", collection.document());
     DocumentReference reference = waitFor(collection.add(data));
@@ -190,6 +195,55 @@ public void testUpdate() {
     assertEquals(expected, doc.toObject(POJO.class));
   }
 
+  // General smoke test that makes sure APIs accept POJOs.
+  @Test
+  public void testAPIsAcceptPOJOsForFields() {
+    DocumentReference ref = testDocument();
+    ArrayList<Task<?>> tasks = new ArrayList<>();
+
+    // as Map<> entries in a set() call.
+    POJO data = new POJO(1.0, "a", ref);
+    tasks.add(ref.set(map("a", data, "b", map("c", data))));
+
+    // as Map<> entries in an update() call.
+    tasks.add(ref.update(map("a", data)));
+
+    // as field values in an update() call.
+    tasks.add(ref.update("c", data));
+
+    // as values in arrayUnion() / arrayRemove().
+    tasks.add(ref.update("c", FieldValue.arrayUnion(data)));
+    tasks.add(ref.update("c", FieldValue.arrayRemove(data)));
+
+    // as Query parameters.
+    data.setBlob(null); // blobs are broken, see b/117680212
+    tasks.add(testCollection().whereEqualTo("field", data).get());
+
+    waitFor(Tasks.whenAll(tasks));
+  }
+
+  @Test
+  public void testDocumentSnapshotGetWithPOJOs() {
+    DocumentReference ref = testDocument();
+
+    // Go offline so that we can verify server timestamp behavior overload.
+    ref.getFirestore().disableNetwork();
+
+    POJO pojo = new POJO(1.0, "a", ref);
+    ref.set(map("field", pojo));
+
+    DocumentSnapshot snap = waitFor(ref.get());
+
+    assertEquals(pojo, snap.get("field", POJO.class));
+    assertEquals(pojo, snap.get(FieldPath.of("field"), POJO.class));
+    assertEquals(
+        pojo, snap.get("field", POJO.class, DocumentSnapshot.ServerTimestampBehavior.DEFAULT));
+    assertEquals(
+        pojo,
+        snap.get(
+            FieldPath.of("field"), POJO.class, DocumentSnapshot.ServerTimestampBehavior.DEFAULT));
+  }
+
   @Test
   public void setFieldMaskMustHaveCorrespondingValue() {
     CollectionReference collection = testCollection();
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ServerTimestampTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ServerTimestampTest.java
index 9b71486e3..0f9e06529 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ServerTimestampTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ServerTimestampTest.java
@@ -248,6 +248,28 @@ public void testServerTimestampsUsesPreviousValueFromLocalMutation() {
     assertThat(remoteSnapshot.get("a")).isInstanceOf(Timestamp.class);
   }
 
+  @Test
+  public void testServerTimestampBehaviorOverloadsOfDocumentSnapshotGet() {
+    writeInitialData();
+    waitFor(docRef.update(updateData));
+    DocumentSnapshot snap = accumulator.awaitLocalEvent();
+
+    // Default behavior should return null timestamp (via any overload).
+    assertNull(snap.get("when"));
+    assertNull(snap.get(FieldPath.of("when")));
+    assertNull(snap.get("when", Timestamp.class));
+    assertNull(snap.get(FieldPath.of("when"), Timestamp.class));
+
+    // Estimate should return a Timestamp object (via any overload).
+    assertThat(snap.get("when", ServerTimestampBehavior.ESTIMATE)).isInstanceOf(Timestamp.class);
+    assertThat(snap.get(FieldPath.of("when"), ServerTimestampBehavior.ESTIMATE))
+        .isInstanceOf(Timestamp.class);
+    assertThat(snap.get("when", Timestamp.class, ServerTimestampBehavior.ESTIMATE))
+        .isInstanceOf(Timestamp.class);
+    assertThat(snap.get(FieldPath.of("when"), Timestamp.class, ServerTimestampBehavior.ESTIMATE))
+        .isInstanceOf(Timestamp.class);
+  }
+
   @Test
   public void testServerTimestampsWorkViaTransactionSet() {
     waitFor(
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java
index 7bdc168da..dd9ae258d 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java
@@ -257,22 +257,16 @@ public void writesMustNotContainReservedFieldNames() {
 
   @Test
   public void setsMustNotContainFieldValueDelete() {
-    // PORTING NOTE: We avoid using expectSetError(), since it hits the POJO overload which
-    // can't handle FieldValue.delete().
-    DocumentReference ref = testDocument();
-    expectError(
-        () -> ref.set(map("foo", FieldValue.delete())),
+    expectSetError(
+        map("foo", FieldValue.delete()),
         "Invalid data. FieldValue.delete() can only be used with update() and set() with "
             + "SetOptions.merge() (found in field foo)");
   }
 
   @Test
   public void updatesMustNotContainNestedFieldValueDeletes() {
-    // PORTING NOTE: We avoid using expectSetError(), since it hits the POJO overload which
-    // can't handle FieldValue.delete().
-    DocumentReference ref = testDocument();
-    expectError(
-        () -> ref.update(map("foo", map("bar", FieldValue.delete()))),
+    expectUpdateError(
+        map("foo", map("bar", FieldValue.delete())),
         "Invalid data. FieldValue.delete() can only appear at the top level of your update data "
             + "(found in field foo.bar)");
   }
@@ -376,8 +370,8 @@ public void arrayTransformsFailInQueries() {
   @Test
   public void arrayTransformsRejectInvalidElements() {
     DocumentReference doc = testDocument();
-    String reason = "Invalid data. Unsupported type: com.google.firebase.firestore.ValidationTest";
-    // TODO: If we get more permissive with POJOs, perhaps we should make this work.
+    String reason =
+        "No properties to serialize found on class com.google.firebase.firestore.ValidationTest";
     expectError(() -> doc.set(map("x", FieldValue.arrayUnion(1, this))), reason);
     expectError(() -> doc.set(map("x", FieldValue.arrayRemove(1, this))), reason);
   }
@@ -558,15 +552,8 @@ private static void expectWriteError(
     DocumentReference ref = testDocument();
 
     if (includeSets) {
-      if (data instanceof Map) {
-        @SuppressWarnings("unchecked")
-        Map<String, Object> setMap = (Map<String, Object>) data;
-        expectError(() -> ref.set(setMap), reason);
-        expectError(() -> ref.getFirestore().batch().set(ref, setMap), reason);
-      } else {
-        expectError(() -> ref.set(data), reason);
-        expectError(() -> ref.getFirestore().batch().set(ref, data), reason);
-      }
+      expectError(() -> ref.set(data), reason);
+      expectError(() -> ref.getFirestore().batch().set(ref, data), reason);
     }
 
     if (includeUpdates) {
@@ -593,13 +580,7 @@ private static void expectWriteError(
                 (Function<Void>)
                     transaction -> {
                       if (includeSets) {
-                        if (data instanceof Map) {
-                          @SuppressWarnings("unchecked")
-                          Map<String, Object> setMap = (Map<String, Object>) data;
-                          expectError(() -> transaction.set(ref, setMap), reason);
-                        } else {
-                          expectError(() -> transaction.set(ref, data), reason);
-                        }
+                        expectError(() -> transaction.set(ref, data), reason);
                       }
                       if (includeUpdates) {
                         assertTrue("update() only support Maps.", data instanceof Map);
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/testutil/IntegrationTestUtil.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/testutil/IntegrationTestUtil.java
index 59b6eb01b..c629b676b 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/testutil/IntegrationTestUtil.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/testutil/IntegrationTestUtil.java
@@ -124,6 +124,7 @@ private static void primeBackend() {
       ListenerRegistration listenerRegistration =
           docRef.addSnapshotListener(
               (snapshot, error) -> {
+                assertNull(error);
                 if ("done".equals(snapshot.get("value"))) {
                   watchUpdateReceived.setResult(null);
                 } else {
diff --git a/firebase-firestore/src/main/AndroidManifest.xml b/firebase-firestore/src/main/AndroidManifest.xml
index 7f4f807ed..e3ad26000 100644
--- a/firebase-firestore/src/main/AndroidManifest.xml
+++ b/firebase-firestore/src/main/AndroidManifest.xml
@@ -2,8 +2,6 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:tools="http://schemas.android.com/tools"
         package="com.google.firebase.firestore">
-    <uses-sdk android:minSdkVersion="14" />
-
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.INTERNET" />
     <application>
diff --git a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberComparisonHelper.java b/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberComparisonHelper.java
index 0d47360d3..b8527594d 100644
--- a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberComparisonHelper.java
+++ b/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberComparisonHelper.java
@@ -14,11 +14,7 @@
 
 package com.google.cloud.datastore.core.number;
 
-/**
- * A utility class for comparing numbers.
- *
- * @hide
- */
+/** A utility class for comparing numbers. */
 public final class NumberComparisonHelper {
 
   // Long.MIN_VALUE has an exact representation as double, so the long lower bound is inclusive.
@@ -33,10 +29,10 @@
   public static final long MIN_SAFE_LONG = -MAX_SAFE_LONG;
 
   /**
-   * Compares a double and a long. Firestore ordering: NaN precedes all other numbers and equals
-   * itself, all zeroes are equal.
+   * Compares a double and a with Firestore query semantics: NaN precedes all other numbers and
+   * equals itself, all zeroes are equal.
    */
-  public static int compareDoubleWithLong(double doubleValue, long longValue) {
+  public static int firestoreCompareDoubleWithLong(double doubleValue, long longValue) {
     // In Firestore NaN is defined to compare before all other numbers.
     if (Double.isNaN(doubleValue)) {
       return -1;
@@ -60,7 +56,7 @@ public static int compareDoubleWithLong(double doubleValue, long longValue) {
 
     // At this point the long representations are equal but this could be due to rounding.
     double longAsDouble = (double) longValue;
-    return compareDoubles(doubleValue, longAsDouble);
+    return firestoreCompareDoubles(doubleValue, longAsDouble);
   }
 
   /**
@@ -77,25 +73,14 @@ public static int compareLongs(long leftLong, long rightLong) {
     }
   }
 
-  /** Compares ints. See the comment to {@link #compareLongs} for rationale. */
-  public static int compareInts(int leftInt, int rightInt) {
-    if (leftInt < rightInt) {
-      return -1;
-    } else if (leftInt > rightInt) {
-      return 1;
-    } else {
-      return 0;
-    }
-  }
-
   /**
-   * Compares doubles. Firestore ordering: NaN precedes all other numbers and equals itself, all
-   * zeroes are equal.
+   * Compares doubles with Firestore query semantics: NaN precedes all other numbers and equals
+   * itself, all zeroes are equal.
    *
    * @return a negative integer, zero, or a positive integer as the first argument is less than,
    *     equal to, or greater than the second.
    */
-  public static int compareDoubles(double leftDouble, double rightDouble) {
+  public static int firestoreCompareDoubles(double leftDouble, double rightDouble) {
     // NaN sorts equal to itself and before any other number.
     if (leftDouble < rightDouble) {
       return -1;
diff --git a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberIndexEncoder.java b/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberIndexEncoder.java
index 5df4dd001..0071ad312 100644
--- a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberIndexEncoder.java
+++ b/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberIndexEncoder.java
@@ -24,7 +24,6 @@
  * <p>Implementation conforms to the UTF Style Encoding section of "Number Index Entry Encoding".
  *
  * @see "https://docs.google.com/document/d/1QX32BCTFWFS_4BneQHFRDnPb2ts04fYrm4Vgy0HLSBg/edit#"
- * @hide
  */
 public class NumberIndexEncoder {
 
diff --git a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberParts.java b/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberParts.java
index 876f83543..e4dfe3c13 100644
--- a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberParts.java
+++ b/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/NumberParts.java
@@ -17,8 +17,6 @@
 /**
  * The representation of a number that can accommodate the range of doubles and longs without loss
  * of precision.
- *
- * @hide
  */
 public final class NumberParts {
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/CollectionReference.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/CollectionReference.java
index db3cf10a1..c8364f7a7 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/CollectionReference.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/CollectionReference.java
@@ -23,7 +23,6 @@
 import com.google.firebase.firestore.model.ResourcePath;
 import com.google.firebase.firestore.util.Executors;
 import com.google.firebase.firestore.util.Util;
-import java.util.Map;
 import javax.annotation.Nullable;
 
 /**
@@ -117,12 +116,13 @@ public DocumentReference document(@NonNull String documentPath) {
    * Adds a new document to this collection with the specified data, assigning it a document ID
    * automatically.
    *
-   * @param data A Map containing the data for the new document.
+   * @param data The data to write to the document (e.g. a Map or a POJO containing the desired
+   *     document contents).
    * @return A Task that will be resolved with the DocumentReference of the newly created document.
    */
   @NonNull
   @PublicApi
-  public Task<DocumentReference> add(@NonNull Map<String, Object> data) {
+  public Task<DocumentReference> add(@NonNull Object data) {
     checkNotNull(data, "Provided data must not be null.");
     final DocumentReference ref = document();
     return ref.set(data)
@@ -134,17 +134,4 @@ public DocumentReference document(@NonNull String documentPath) {
               return ref;
             });
   }
-
-  /**
-   * Adds a new document to this collection with the specified POJO as contents, assigning it a
-   * document ID automatically.
-   *
-   * @param pojo The POJO that will be used to populate the contents of the document
-   * @return A Task that will be resolved with the DocumentReference of the newly created document.
-   */
-  @NonNull
-  @PublicApi
-  public Task<DocumentReference> add(@NonNull Object pojo) {
-    return add(firestore.getDataConverter().convertPOJO(pojo));
-  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentReference.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentReference.java
index 4fe7323b6..cde2b8a3e 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentReference.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentReference.java
@@ -143,12 +143,13 @@ public CollectionReference collection(@NonNull String collectionPath) {
    * Overwrites the document referred to by this DocumentReference. If the document does not yet
    * exist, it will be created. If a document already exists, it will be overwritten.
    *
-   * @param data A map of the fields and values for the document.
+   * @param data The data to write to the document (e.g. a Map or a POJO containing the desired
+   *     document contents).
    * @return A Task that will be resolved when the write finishes.
    */
   @NonNull
   @PublicApi
-  public Task<Void> set(@NonNull Map<String, Object> data) {
+  public Task<Void> set(@NonNull Object data) {
     return set(data, SetOptions.OVERWRITE);
   }
 
@@ -157,13 +158,14 @@ public CollectionReference collection(@NonNull String collectionPath) {
    * exist, it will be created. If you pass {@link SetOptions}, the provided data can be merged into
    * an existing document.
    *
-   * @param data A map of the fields and values for the document.
+   * @param data The data to write to the document (e.g. a Map or a POJO containing the desired
+   *     document contents).
    * @param options An object to configure the set behavior.
    * @return A Task that will be resolved when the write finishes.
    */
   @NonNull
   @PublicApi
-  public Task<Void> set(@NonNull Map<String, Object> data, @NonNull SetOptions options) {
+  public Task<Void> set(@NonNull Object data, @NonNull SetOptions options) {
     checkNotNull(data, "Provided data must not be null.");
     checkNotNull(options, "Provided options must not be null.");
     ParsedSetData parsed =
@@ -176,34 +178,6 @@ public CollectionReference collection(@NonNull String collectionPath) {
         .continueWith(Executors.DIRECT_EXECUTOR, voidErrorTransformer());
   }
 
-  /**
-   * Overwrites the document referred to by this DocumentReference. If the document does not yet
-   * exist, it will be created. If a document already exists, it will be overwritten.
-   *
-   * @param pojo The POJO that will be used to populate the document contents
-   * @return A Task that will be resolved when the write finishes.
-   */
-  @NonNull
-  @PublicApi
-  public Task<Void> set(@NonNull Object pojo) {
-    return set(firestore.getDataConverter().convertPOJO(pojo), SetOptions.OVERWRITE);
-  }
-
-  /**
-   * Writes to the document referred to by this DocumentReference. If the document does not yet
-   * exist, it will be created. If you pass {@link SetOptions}, the provided data can be merged into
-   * an existing document.
-   *
-   * @param pojo The POJO that will be used to populate the document contents
-   * @param options An object to configure the set behavior.
-   * @return A Task that will be resolved when the write finishes.
-   */
-  @NonNull
-  @PublicApi
-  public Task<Void> set(@NonNull Object pojo, @NonNull SetOptions options) {
-    return set(firestore.getDataConverter().convertPOJO(pojo), options);
-  }
-
   /**
    * Updates fields in the document referred to by this DocumentReference. If no document exists
    * yet, the update will fail.
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java
index e3444ab2e..4a13eefd9 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java
@@ -289,6 +289,69 @@ public Object get(
             firestore.getFirestoreSettings().areTimestampsInSnapshotsEnabled()));
   }
 
+  /**
+   * Returns the value at the field, converted to a POJO, or null if the field or document doesn't
+   * exist.
+   *
+   * @param field The path to the field
+   * @param valueType The Java class to convert the field value to.
+   * @return The value at the given field or null.
+   */
+  @Nullable
+  public <T> T get(@NonNull String field, @NonNull Class<T> valueType) {
+    return get(FieldPath.fromDotSeparatedPath(field), valueType, ServerTimestampBehavior.DEFAULT);
+  }
+
+  /**
+   * Returns the value at the field, converted to a POJO, or null if the field or document doesn't
+   * exist.
+   *
+   * @param field The path to the field
+   * @param valueType The Java class to convert the field value to.
+   * @param serverTimestampBehavior Configures the behavior for server timestamps that have not yet
+   *     been set to their final value.
+   * @return The value at the given field or null.
+   */
+  @Nullable
+  public <T> T get(
+      @NonNull String field,
+      @NonNull Class<T> valueType,
+      @NonNull ServerTimestampBehavior serverTimestampBehavior) {
+    return get(FieldPath.fromDotSeparatedPath(field), valueType, serverTimestampBehavior);
+  }
+
+  /**
+   * Returns the value at the field, converted to a POJO, or null if the field or document doesn't
+   * exist.
+   *
+   * @param fieldPath The path to the field
+   * @param valueType The Java class to convert the field value to.
+   * @return The value at the given field or null.
+   */
+  @Nullable
+  public <T> T get(@NonNull FieldPath fieldPath, @NonNull Class<T> valueType) {
+    return get(fieldPath, valueType, ServerTimestampBehavior.DEFAULT);
+  }
+
+  /**
+   * Returns the value at the field, converted to a POJO, or null if the field or document doesn't
+   * exist.
+   *
+   * @param fieldPath The path to the field
+   * @param valueType The Java class to convert the field value to.
+   * @param serverTimestampBehavior Configures the behavior for server timestamps that have not yet
+   *     been set to their final value.
+   * @return The value at the given field or null.
+   */
+  @Nullable
+  public <T> T get(
+      @NonNull FieldPath fieldPath,
+      @NonNull Class<T> valueType,
+      @NonNull ServerTimestampBehavior serverTimestampBehavior) {
+    Object data = get(fieldPath, serverTimestampBehavior);
+    return data == null ? null : CustomClassMapper.convertToCustomClass(data, valueType);
+  }
+
   /**
    * Returns the value of the field as a boolean. If the value is not a boolean this will throw a
    * runtime exception.
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/QuerySnapshot.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/QuerySnapshot.java
index 929cd46f3..2b65f613d 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/QuerySnapshot.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/QuerySnapshot.java
@@ -117,6 +117,11 @@ public SnapshotMetadata getMetadata() {
   @NonNull
   @PublicApi
   public List<DocumentChange> getDocumentChanges(MetadataChanges metadataChanges) {
+    if (MetadataChanges.INCLUDE.equals(metadataChanges) && snapshot.excludesMetadataChanges()) {
+      throw new IllegalArgumentException(
+          "To include metadata changes with your document changes, you must also pass MetadataChanges.INCLUDE to addSnapshotListener().");
+    }
+
     if (cachedChanges == null || cachedChangesMetadataState != metadataChanges) {
       cachedChanges =
           Collections.unmodifiableList(
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/Transaction.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/Transaction.java
index 11f7601d4..8951d3c4b 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/Transaction.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/Transaction.java
@@ -60,13 +60,13 @@
    * yet exist, it will be created. If a document already exists, it will be overwritten.
    *
    * @param documentRef The DocumentReference to overwrite.
-   * @param data A map of the fields and values for the document.
+   * @param data The data to write to the document (e.g. a Map or a POJO containing the desired
+   *     document contents).
    * @return This Transaction instance. Used for chaining method calls.
    */
   @NonNull
   @PublicApi
-  public Transaction set(
-      @NonNull DocumentReference documentRef, @NonNull Map<String, Object> data) {
+  public Transaction set(@NonNull DocumentReference documentRef, @NonNull Object data) {
     return set(documentRef, data, SetOptions.OVERWRITE);
   }
 
@@ -76,16 +76,15 @@ public Transaction set(
    * into an existing document.
    *
    * @param documentRef The DocumentReference to overwrite.
-   * @param data A map of the fields and values for the document.
+   * @param data The data to write to the document (e.g. a Map or a POJO containing the desired
+   *     document contents).
    * @param options An object to configure the set behavior.
    * @return This Transaction instance. Used for chaining method calls.
    */
   @NonNull
   @PublicApi
   public Transaction set(
-      @NonNull DocumentReference documentRef,
-      @NonNull Map<String, Object> data,
-      @NonNull SetOptions options) {
+      @NonNull DocumentReference documentRef, @NonNull Object data, @NonNull SetOptions options) {
     firestore.validateReference(documentRef);
     checkNotNull(data, "Provided data must not be null.");
     checkNotNull(options, "Provided options must not be null.");
@@ -97,37 +96,6 @@ public Transaction set(
     return this;
   }
 
-  /**
-   * Overwrites the document referred to by the provided DocumentReference. If the document does not
-   * yet exist, it will be created. If a document already exists, it will be overwritten.
-   *
-   * @param documentRef The DocumentReference to overwrite.
-   * @param pojo The POJO that will be used to populate the document contents
-   * @return This Transaction instance. Used for chaining method calls.
-   */
-  @NonNull
-  @PublicApi
-  public Transaction set(@NonNull DocumentReference documentRef, @NonNull Object pojo) {
-    return set(documentRef, firestore.getDataConverter().convertPOJO(pojo), SetOptions.OVERWRITE);
-  }
-
-  /**
-   * Writes to the document referred to by the provided DocumentReference. If the document does not
-   * yet exist, it will be created. If you pass {@link SetOptions}, the provided data can be merged
-   * into an existing document.
-   *
-   * @param documentRef The DocumentReference to overwrite.
-   * @param pojo The POJO that will be used to populate the document contents
-   * @param options An object to configure the set behavior.
-   * @return This Transaction instance. Used for chaining method calls.
-   */
-  @NonNull
-  @PublicApi
-  public Transaction set(
-      @NonNull DocumentReference documentRef, @NonNull Object pojo, @NonNull SetOptions options) {
-    return set(documentRef, firestore.getDataConverter().convertPOJO(pojo), options);
-  }
-
   /**
    * Updates fields in the document referred to by the provided DocumentReference. If no document
    * exists yet, the update will fail.
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataConverter.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataConverter.java
index d02ae4eaa..898a189fa 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataConverter.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataConverter.java
@@ -70,17 +70,16 @@ public UserDataConverter(DatabaseId databaseId) {
   }
 
   /** Parse document data from a non-merge set() call. */
-  public ParsedSetData parseSetData(Map<String, Object> input) {
+  public ParsedSetData parseSetData(Object input) {
     ParseAccumulator accumulator = new ParseAccumulator(UserData.Source.Set);
-    FieldValue updateData = parseData(input, accumulator.rootContext());
-
-    return accumulator.toSetData((ObjectValue) updateData);
+    ObjectValue updateData = convertAndParseDocumentData(input, accumulator.rootContext());
+    return accumulator.toSetData(updateData);
   }
 
   /** Parse document data from a set() call with SetOptions.merge() set. */
-  public ParsedSetData parseMergeData(Map<String, Object> input, @Nullable FieldMask fieldMask) {
+  public ParsedSetData parseMergeData(Object input, @Nullable FieldMask fieldMask) {
     ParseAccumulator accumulator = new ParseAccumulator(UserData.Source.MergeSet);
-    ObjectValue updateData = (ObjectValue) parseData(input, accumulator.rootContext());
+    ObjectValue updateData = convertAndParseDocumentData(input, accumulator.rootContext());
 
     if (fieldMask != null) {
       // Verify that all elements specified in the field mask are part of the parsed context.
@@ -94,7 +93,6 @@ public ParsedSetData parseMergeData(Map<String, Object> input, @Nullable FieldMa
       }
 
       return accumulator.toMergeData(updateData, fieldMask);
-
     } else {
       return accumulator.toMergeData(updateData);
     }
@@ -118,7 +116,9 @@ public ParsedUpdateData parseUpdateData(Map<String, Object> data) {
         // Add it to the field mask, but don't add anything to updateData.
         context.addToFieldMask(fieldPath);
       } else {
-        @Nullable FieldValue parsedValue = parseData(fieldValue, context.childContext(fieldPath));
+        @Nullable
+        FieldValue parsedValue =
+            convertAndParseFieldData(fieldValue, context.childContext(fieldPath));
         if (parsedValue != null) {
           context.addToFieldMask(fieldPath);
           updateData = updateData.set(fieldPath, parsedValue);
@@ -168,7 +168,8 @@ public ParsedUpdateData parseUpdateData(List<Object> fieldsAndValues) {
         // Add it to the field mask, but don't add anything to updateData.
         context.addToFieldMask(parsedField);
       } else {
-        FieldValue parsedValue = parseData(fieldValue, context.childContext(parsedField));
+        FieldValue parsedValue =
+            convertAndParseFieldData(fieldValue, context.childContext(parsedField));
         if (parsedValue != null) {
           context.addToFieldMask(parsedField);
           updateData = updateData.set(parsedField, parsedValue);
@@ -183,7 +184,7 @@ public ParsedUpdateData parseUpdateData(List<Object> fieldsAndValues) {
   public FieldValue parseQueryValue(Object input) {
     ParseAccumulator accumulator = new ParseAccumulator(UserData.Source.Argument);
 
-    @Nullable FieldValue parsed = parseData(input, accumulator.rootContext());
+    @Nullable FieldValue parsed = convertAndParseFieldData(input, accumulator.rootContext());
     hardAssert(parsed != null, "Parsed data should not be null.");
     hardAssert(
         accumulator.getFieldTransforms().isEmpty(),
@@ -191,32 +192,38 @@ public FieldValue parseQueryValue(Object input) {
     return parsed;
   }
 
+  /** Converts a POJO to native types and then parses it into model types. */
+  private FieldValue convertAndParseFieldData(Object input, ParseContext context) {
+    Object converted = CustomClassMapper.convertToPlainJavaTypes(input);
+    return parseData(converted, context);
+  }
+
   /**
-   * Converts a POJO into a Map, throwing appropriate errors if it wasn't actually a proper POJO.
+   * Converts a POJO to native types and then parses it into model types. It expects the input to
+   * conform to document data (i.e. it must parse into an ObjectValue model type) and will throw an
+   * appropriate error otherwise.
    */
-  public Map<String, Object> convertPOJO(Object pojo) {
-    checkNotNull(pojo, "Provided data must not be null.");
-    String reason =
+  private ObjectValue convertAndParseDocumentData(Object input, ParseContext context) {
+    String badDocReason =
         "Invalid data. Data must be a Map<String, Object> or a suitable POJO object, but it was ";
 
     // Check Array before calling CustomClassMapper since it'll give you a confusing message
-    // to use List instead, which also won't work.
-    if (pojo.getClass().isArray()) {
-      throw new IllegalArgumentException(reason + "an array");
+    // to use List instead, which also won't work in a set().
+    if (input.getClass().isArray()) {
+      throw new IllegalArgumentException(badDocReason + "an array");
     }
 
-    Object converted = CustomClassMapper.convertToPlainJavaTypes(pojo);
-    if (!(converted instanceof Map)) {
-      throw new IllegalArgumentException(reason + "of type: " + Util.typeName(pojo));
-    }
+    Object converted = CustomClassMapper.convertToPlainJavaTypes(input);
+    FieldValue value = parseData(converted, context);
 
-    @SuppressWarnings("unchecked") // CustomClassMapper promises to map keys to Strings.
-    Map<String, Object> map = (Map<String, Object>) converted;
-    return map;
+    if (!(value instanceof ObjectValue)) {
+      throw new IllegalArgumentException(badDocReason + "of type: " + Util.typeName(input));
+    }
+    return (ObjectValue) value;
   }
 
   /**
-   * Internal helper for parsing user data.
+   * Recursive helper for parsing user data.
    *
    * @param input Data to be parsed.
    * @param context A context object representing the current path being parsed, the source of the
@@ -416,7 +423,7 @@ private FieldValue parseScalarValue(Object input, ParseContext context) {
       // being unioned or removed are not considered writes since they cannot
       // contain any FieldValue sentinels, etc.
       ParseContext context = accumulator.rootContext();
-      result.add(parseData(element, context.childContext(i)));
+      result.add(convertAndParseFieldData(element, context.childContext(i)));
     }
     return result;
   }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/WriteBatch.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/WriteBatch.java
index 6590b9254..ec0fdd23c 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/WriteBatch.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/WriteBatch.java
@@ -59,12 +59,13 @@
    * yet exist, it will be created. If a document already exists, it will be overwritten.
    *
    * @param documentRef The DocumentReference to overwrite.
-   * @param data A map of the fields and values for the document.
+   * @param data The data to write to the document (e.g. a Map or a POJO containing the desired
+   *     document contents).
    * @return This WriteBatch instance. Used for chaining method calls.
    */
   @NonNull
   @PublicApi
-  public WriteBatch set(@NonNull DocumentReference documentRef, @NonNull Map<String, Object> data) {
+  public WriteBatch set(@NonNull DocumentReference documentRef, @NonNull Object data) {
     return set(documentRef, data, SetOptions.OVERWRITE);
   }
 
@@ -74,18 +75,18 @@ public WriteBatch set(@NonNull DocumentReference documentRef, @NonNull Map<Strin
    * into an existing document.
    *
    * @param documentRef The DocumentReference to overwrite.
-   * @param data A map of the fields and values for the document.
+   * @param data The data to write to the document (e.g. a Map or a POJO containing the desired
+   *     document contents).
    * @param options An object to configure the set behavior.
    * @return This WriteBatch instance. Used for chaining method calls.
    */
   @NonNull
   @PublicApi
   public WriteBatch set(
-      @NonNull DocumentReference documentRef,
-      @NonNull Map<String, Object> data,
-      @NonNull SetOptions options) {
+      @NonNull DocumentReference documentRef, @NonNull Object data, @NonNull SetOptions options) {
     firestore.validateReference(documentRef);
     checkNotNull(data, "Provided data must not be null.");
+    checkNotNull(options, "Provided options must not be null.");
     verifyNotCommitted();
     ParsedSetData parsed =
         options.isMerge()
@@ -95,37 +96,6 @@ public WriteBatch set(
     return this;
   }
 
-  /**
-   * Overwrites the document referred to by the provided DocumentReference. If the document does not
-   * yet exist, it will be created. If a document already exists, it will be overwritten.
-   *
-   * @param documentRef The DocumentReference to overwrite.
-   * @param pojo The POJO that will be used to populate the document contents.
-   * @return This WriteBatch instance. Used for chaining method calls.
-   */
-  @NonNull
-  @PublicApi
-  public WriteBatch set(@NonNull DocumentReference documentRef, @NonNull Object pojo) {
-    return set(documentRef, firestore.getDataConverter().convertPOJO(pojo), SetOptions.OVERWRITE);
-  }
-
-  /**
-   * Writes to the document referred to by the provided DocumentReference. If the document does not
-   * yet exist, it will be created. If you pass {@link SetOptions}, the provided data can be merged
-   * into an existing document.
-   *
-   * @param documentRef The DocumentReference to overwrite.
-   * @param pojo The POJO that will be used to populate the document contents.
-   * @param options An object to configure the set behavior.
-   * @return This WriteBatch instance. Used for chaining method calls.
-   */
-  @NonNull
-  @PublicApi
-  public WriteBatch set(
-      @NonNull DocumentReference documentRef, @NonNull Object pojo, @NonNull SetOptions options) {
-    return set(documentRef, firestore.getDataConverter().convertPOJO(pojo), options);
-  }
-
   /**
    * Updates fields in the document referred to by the provided DocumentReference. If no document
    * exists yet, the update will fail.
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
index 0a4cf8fdc..0f68cebde 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
@@ -248,7 +248,6 @@ public void handleRejectedWrite(int batchId, Status error) {
   @Override
   public void handleOnlineStateChange(OnlineState onlineState) {
     syncEngine.handleOnlineStateChange(onlineState);
-    eventManager.handleOnlineStateChange(onlineState);
   }
 
   @Override
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/QueryListener.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/QueryListener.java
index a00748744..4c5944293 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/QueryListener.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/QueryListener.java
@@ -19,8 +19,6 @@
 import com.google.firebase.firestore.EventListener;
 import com.google.firebase.firestore.FirebaseFirestoreException;
 import com.google.firebase.firestore.core.DocumentViewChange.Type;
-import com.google.firebase.firestore.model.Document;
-import com.google.firebase.firestore.model.DocumentSet;
 import java.util.ArrayList;
 import java.util.List;
 import javax.annotation.Nullable;
@@ -82,7 +80,8 @@ public void onViewSnapshot(ViewSnapshot newSnapshot) {
               documentChanges,
               newSnapshot.isFromCache(),
               newSnapshot.getMutatedKeys(),
-              newSnapshot.didSyncStateChange());
+              newSnapshot.didSyncStateChange(),
+              /* excludesMetadataChanges= */ true);
     }
 
     if (!raisedInitialEvent) {
@@ -154,23 +153,13 @@ private boolean shouldRaiseEvent(ViewSnapshot snapshot) {
   private void raiseInitialEvent(ViewSnapshot snapshot) {
     hardAssert(!raisedInitialEvent, "Trying to raise initial event for second time");
     snapshot =
-        new ViewSnapshot(
+        ViewSnapshot.fromInitialDocuments(
             snapshot.getQuery(),
             snapshot.getDocuments(),
-            DocumentSet.emptySet(snapshot.getQuery().comparator()),
-            QueryListener.getInitialViewChanges(snapshot),
-            snapshot.isFromCache(),
             snapshot.getMutatedKeys(),
-            /*didSyncStateChange=*/ true);
+            snapshot.isFromCache(),
+            snapshot.excludesMetadataChanges());
     raisedInitialEvent = true;
     listener.onEvent(snapshot, null);
   }
-
-  private static List<DocumentViewChange> getInitialViewChanges(ViewSnapshot snapshot) {
-    List<DocumentViewChange> res = new ArrayList<>();
-    for (Document doc : snapshot.getDocuments()) {
-      res.add(DocumentViewChange.create(Type.ADDED, doc));
-    }
-    return res;
-  }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java
index f512e8911..026ca5a2d 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java
@@ -91,11 +91,16 @@
 
   private static final String TAG = SyncEngine.class.getSimpleName();
 
-  /** A callback used to handle events from the SyncEngine */
+  /** Interface implemented by EventManager to handle notifications from SyncEngine. */
   interface SyncEngineCallback {
+    /** Handles new view snapshots. */
     void onViewSnapshots(List<ViewSnapshot> snapshotList);
 
+    /** Handles the failure of a query. */
     void onError(Query query, Status error);
+
+    /** Handles a change in online state. */
+    void handleOnlineStateChange(OnlineState onlineState);
   }
 
   /** The local store, used to persist mutations and cached documents. */
@@ -133,7 +138,7 @@
 
   private User currentUser;
 
-  private SyncEngineCallback callback;
+  private SyncEngineCallback syncEngineListener;
 
   public SyncEngine(LocalStore localStore, RemoteStore remoteStore, User initialUser) {
     this.localStore = localStore;
@@ -147,16 +152,16 @@ public SyncEngine(LocalStore localStore, RemoteStore remoteStore, User initialUs
     limboDocumentRefs = new ReferenceSet();
 
     mutationUserCallbacks = new HashMap<>();
-    targetIdGenerator = TargetIdGenerator.getSyncEngineGenerator(0);
+    targetIdGenerator = TargetIdGenerator.forSyncEngine();
     currentUser = initialUser;
   }
 
   public void setCallback(SyncEngineCallback callback) {
-    this.callback = callback;
+    this.syncEngineListener = callback;
   }
 
   private void assertCallback(String method) {
-    hardAssert(callback != null, "Trying to call %s before setting callback", method);
+    hardAssert(syncEngineListener != null, "Trying to call %s before setting callback", method);
   }
 
   /**
@@ -171,6 +176,16 @@ public int listen(Query query) {
     hardAssert(!queryViewsByQuery.containsKey(query), "We already listen to query: %s", query);
 
     QueryData queryData = localStore.allocateQuery(query);
+    ViewSnapshot viewSnapshot = initializeViewAndComputeSnapshot(queryData);
+    syncEngineListener.onViewSnapshots(Collections.singletonList(viewSnapshot));
+
+    remoteStore.listen(queryData);
+    return queryData.getTargetId();
+  }
+
+  private ViewSnapshot initializeViewAndComputeSnapshot(QueryData queryData) {
+    Query query = queryData.getQuery();
+
     ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
     ImmutableSortedSet<DocumentKey> remoteKeys =
         localStore.getRemoteDocumentKeys(queryData.getTargetId());
@@ -185,10 +200,7 @@ public int listen(Query query) {
     QueryView queryView = new QueryView(query, queryData.getTargetId(), view);
     queryViewsByQuery.put(query, queryView);
     queryViewsByTarget.put(queryData.getTargetId(), queryView);
-    callback.onViewSnapshots(Collections.singletonList(viewChange.getSnapshot()));
-
-    remoteStore.listen(queryData);
-    return queryData.getTargetId();
+    return viewChange.getSnapshot();
   }
 
   /** Stops listening to a query previously listened to via listen. */
@@ -200,7 +212,7 @@ void stopListening(Query query) {
 
     localStore.releaseQuery(query);
     remoteStore.stopListening(queryView.getTargetId());
-    removeAndCleanup(queryView);
+    removeAndCleanupQuery(queryView);
   }
 
   /**
@@ -215,7 +227,7 @@ public void writeMutations(List<Mutation> mutations, TaskCompletionSource<Void>
     LocalWriteResult result = localStore.writeLocally(mutations);
     addUserCallback(result.getBatchId(), userTask);
 
-    emitNewSnapshot(result.getChanges(), /*remoteEvent=*/ null);
+    emitNewSnapsAndNotifyLocalStore(result.getChanges(), /*remoteEvent=*/ null);
     remoteStore.fillWritePipeline();
   }
 
@@ -313,7 +325,7 @@ public void handleRemoteEvent(RemoteEvent event) {
     }
 
     ImmutableSortedMap<DocumentKey, MaybeDocument> changes = localStore.applyRemoteEvent(event);
-    emitNewSnapshot(changes, event);
+    emitNewSnapsAndNotifyLocalStore(changes, event);
   }
 
   /** Applies an OnlineState change to the sync engine and notifies any views of the change. */
@@ -329,7 +341,8 @@ public void handleOnlineStateChange(OnlineState onlineState) {
         newViewSnapshots.add(viewChange.getSnapshot());
       }
     }
-    callback.onViewSnapshots(newViewSnapshots);
+    syncEngineListener.onViewSnapshots(newViewSnapshots);
+    syncEngineListener.handleOnlineStateChange(onlineState);
   }
 
   @Override
@@ -381,9 +394,9 @@ public void handleRejectedListen(int targetId, Status error) {
       hardAssert(queryView != null, "Unknown target: %s", targetId);
       Query query = queryView.getQuery();
       localStore.releaseQuery(query);
-      removeAndCleanup(queryView);
+      removeAndCleanupQuery(queryView);
       logErrorIfInteresting(error, "Listen for %s failed", query);
-      callback.onError(query, error);
+      syncEngineListener.onError(query, error);
     }
   }
 
@@ -399,7 +412,7 @@ public void handleSuccessfulWrite(MutationBatchResult mutationBatchResult) {
     ImmutableSortedMap<DocumentKey, MaybeDocument> changes =
         localStore.acknowledgeBatch(mutationBatchResult);
 
-    emitNewSnapshot(changes, /*remoteEvent=*/ null);
+    emitNewSnapsAndNotifyLocalStore(changes, /*remoteEvent=*/ null);
   }
 
   @Override
@@ -416,7 +429,7 @@ public void handleRejectedWrite(int batchId, Status status) {
     // they consistently happen before listen events.
     notifyUser(batchId, status);
 
-    emitNewSnapshot(changes, /*remoteEvent=*/ null);
+    emitNewSnapsAndNotifyLocalStore(changes, /*remoteEvent=*/ null);
   }
 
   /** Resolves the task corresponding to this write result. */
@@ -439,7 +452,7 @@ private void notifyUser(int batchId, @Nullable Status status) {
     }
   }
 
-  private void removeAndCleanup(QueryView view) {
+  private void removeAndCleanupQuery(QueryView view) {
     queryViewsByQuery.remove(view.getQuery());
     queryViewsByTarget.remove(view.getTargetId());
 
@@ -469,7 +482,7 @@ private void removeLimboTarget(DocumentKey key) {
    * Computes a new snapshot from the changes and calls the registered callback with the new
    * snapshot.
    */
-  private void emitNewSnapshot(
+  private void emitNewSnapsAndNotifyLocalStore(
       ImmutableSortedMap<DocumentKey, MaybeDocument> changes, @Nullable RemoteEvent remoteEvent) {
     List<ViewSnapshot> newSnapshots = new ArrayList<>();
     List<LocalViewChanges> documentChangesInAllViews = new ArrayList<>();
@@ -498,7 +511,7 @@ private void emitNewSnapshot(
         documentChangesInAllViews.add(docChanges);
       }
     }
-    callback.onViewSnapshots(newSnapshots);
+    syncEngineListener.onViewSnapshots(newSnapshots);
     localStore.notifyLocalViewChanges(documentChangesInAllViews);
   }
 
@@ -553,7 +566,7 @@ public void handleCredentialChange(User user) {
     if (userChanged) {
       // Notify local store and emit any resulting events from swapping out the mutation queue.
       ImmutableSortedMap<DocumentKey, MaybeDocument> changes = localStore.handleUserChange(user);
-      emitNewSnapshot(changes, /*remoteEvent=*/ null);
+      emitNewSnapsAndNotifyLocalStore(changes, /*remoteEvent=*/ null);
     }
 
     // Notify remote store so it can restart its streams.
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/TargetIdGenerator.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/TargetIdGenerator.java
index 3e32a6e06..8d77e09dc 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/TargetIdGenerator.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/TargetIdGenerator.java
@@ -14,68 +14,75 @@
 
 package com.google.firebase.firestore.core;
 
+import static com.google.firebase.firestore.util.Assert.hardAssert;
+
 /**
- * Generates monotonically increasing integer IDs. There are separate generators for different
- * scopes. While these generators will operate independently of each other, they are scoped, such
- * that no two generators will ever produce the same ID. This is useful, because sometimes the
- * backend may group IDs from separate parts of the client into the same ID space.
+ * Generates monotonically increasing target IDs for sending targets to the watch stream.
+ *
+ * <p>The client constructs two generators, one for the query cache (via forQueryCache()), and one
+ * for limbo documents (via forSyncEngine()). These two generators produce non-overlapping IDs (by
+ * using even and odd IDs respectively).
+ *
+ * <p>By separating the target ID space, the query cache can generate target IDs that persist across
+ * client restarts, while sync engine can independently generate in-memory target IDs that are
+ * transient and can be reused after a restart.
  */
+// TODO(mrschmidt): Explore removing this class in favor of generating these IDs directly in
+// SyncEngine and LocalStore.
 public class TargetIdGenerator {
 
   /**
    * Creates and returns the TargetIdGenerator for the local store.
    *
-   * @param after An ID to start at. Every call to nextID will return an id > after.
    * @return A shared instance of TargetIdGenerator.
    */
-  public static TargetIdGenerator getLocalStoreIdGenerator(int after) {
-    return new TargetIdGenerator(LOCAL_STATE_ID, after);
+  public static TargetIdGenerator forQueryCache(int after) {
+    TargetIdGenerator generator = new TargetIdGenerator(QUERY_CACHE_ID, after);
+    // Make sure that the next call to `nextId()` returns the first value after 'after'.
+    generator.nextId();
+    return generator;
   }
 
   /**
    * Creates and returns the TargetIdGenerator for the sync engine.
    *
-   * @param after An ID to start at. Every call to nextID will return an id > after.
    * @return A shared instance of TargetIdGenerator.
    */
-  public static TargetIdGenerator getSyncEngineGenerator(int after) {
-    return new TargetIdGenerator(SYNC_ENGINE_ID, after);
+  public static TargetIdGenerator forSyncEngine() {
+    // Sync engine assigns target IDs for limbo document detection.
+    return new TargetIdGenerator(SYNC_ENGINE_ID, 1);
   }
 
-  private static final int LOCAL_STATE_ID = 0;
+  private static final int QUERY_CACHE_ID = 0;
   private static final int SYNC_ENGINE_ID = 1;
 
   private static final int RESERVED_BITS = 1;
 
-  private int previousId;
+  private int nextId;
+  private int generatorId;
+
+  /** Instantiates a new TargetIdGenerator, using the seed as the first target ID to return. */
+  TargetIdGenerator(int generatorId, int seed) {
+    hardAssert(
+        (generatorId & RESERVED_BITS) == generatorId,
+        "Generator ID %d contains more than %d reserved bits",
+        generatorId,
+        RESERVED_BITS);
+    this.generatorId = generatorId;
+    seek(seed);
+  }
 
-  TargetIdGenerator(int generatorId, int after) {
-    int afterWithoutGenerator = (after >>> RESERVED_BITS) << RESERVED_BITS;
-    int afterGenerator = after - afterWithoutGenerator;
-    if (afterGenerator >= generatorId) {
-      // For example, if:
-      //   self.generatorID = 0b0000
-      //   after = 0b1011
-      //   afterGenerator = 0b0001
-      // Then:
-      //   previous = 0b1010
-      //   next = 0b1100
-      previousId = afterWithoutGenerator | generatorId;
-    } else {
-      // For example, if:
-      //   self.generatorID = 0b0001
-      //   after = 0b1010
-      //   afterGenerator = 0b0000
-      // Then:
-      //   previous = 0b1001
-      //   next = 0b1011
-      previousId = (afterWithoutGenerator | generatorId) - (1 << RESERVED_BITS);
-    }
+  private void seek(int targetId) {
+    hardAssert(
+        (targetId & RESERVED_BITS) == this.generatorId,
+        "Cannot supply target ID from different generator ID");
+    this.nextId = targetId;
   }
 
   /** @return the next id in the sequence */
   public int nextId() {
-    previousId += 1 << RESERVED_BITS;
-    return previousId;
+    int nextId = this.nextId;
+    this.nextId += 1 << RESERVED_BITS;
+    return nextId;
   }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/View.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/View.java
index 1d4bb4567..db8c0194b 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/View.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/View.java
@@ -189,11 +189,12 @@ public View(Query query, ImmutableSortedSet<DocumentKey> remoteDocuments) {
           if (!shouldWaitForSyncedDocument(oldDoc, newDoc)) {
             changeSet.addChange(DocumentViewChange.create(Type.MODIFIED, newDoc));
             changeApplied = true;
-          }
-          if (lastDocInLimit != null && query.comparator().compare(newDoc, lastDocInLimit) > 0) {
-            // This doc moved from inside the limit to after the limit. That means there may be some
-            // doc in the local cache that's actually less than this one.
-            needsRefill = true;
+
+            if (lastDocInLimit != null && query.comparator().compare(newDoc, lastDocInLimit) > 0) {
+              // This doc moved from inside the limit to after the limit. That means there may be
+              // some doc in the local cache that's actually less than this one.
+              needsRefill = true;
+            }
           }
         } else if (oldDocHadPendingMutations != newDocHasPendingMutations) {
           changeSet.addChange(DocumentViewChange.create(Type.METADATA, newDoc));
@@ -310,7 +311,8 @@ public ViewChange applyChanges(DocumentChanges docChanges, TargetChange targetCh
               viewChanges,
               fromCache,
               docChanges.mutatedKeys,
-              syncStatedChanged);
+              syncStatedChanged,
+              /* excludesMetadataChanges= */ false);
     }
     return new ViewChange(snapshot, limboDocumentChanges);
   }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/ViewSnapshot.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/ViewSnapshot.java
index ad54a67a1..a05cffea9 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/ViewSnapshot.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/ViewSnapshot.java
@@ -15,12 +15,15 @@
 package com.google.firebase.firestore.core;
 
 import com.google.firebase.database.collection.ImmutableSortedSet;
+import com.google.firebase.firestore.model.Document;
 import com.google.firebase.firestore.model.DocumentKey;
 import com.google.firebase.firestore.model.DocumentSet;
+import java.util.ArrayList;
 import java.util.List;
 
 /** A view snapshot is an immutable capture of the results of a query and the changes to them. */
 public class ViewSnapshot {
+
   /** The possibly states a document can be in w.r.t syncing from local storage to the backend. */
   public enum SyncState {
     NONE,
@@ -35,6 +38,7 @@
   private final boolean isFromCache;
   private final ImmutableSortedSet<DocumentKey> mutatedKeys;
   private final boolean didSyncStateChange;
+  private boolean excludesMetadataChanges;
 
   public ViewSnapshot(
       Query query,
@@ -43,7 +47,8 @@ public ViewSnapshot(
       List<DocumentViewChange> changes,
       boolean isFromCache,
       ImmutableSortedSet<DocumentKey> mutatedKeys,
-      boolean didSyncStateChange) {
+      boolean didSyncStateChange,
+      boolean excludesMetadataChanges) {
     this.query = query;
     this.documents = documents;
     this.oldDocuments = oldDocuments;
@@ -51,6 +56,29 @@ public ViewSnapshot(
     this.isFromCache = isFromCache;
     this.mutatedKeys = mutatedKeys;
     this.didSyncStateChange = didSyncStateChange;
+    this.excludesMetadataChanges = excludesMetadataChanges;
+  }
+
+  /** Returns a view snapshot as if all documents in the snapshot were added. */
+  public static ViewSnapshot fromInitialDocuments(
+      Query query,
+      DocumentSet documents,
+      ImmutableSortedSet<DocumentKey> mutatedKeys,
+      boolean fromCache,
+      boolean excludesMetadataChanges) {
+    List<DocumentViewChange> viewChanges = new ArrayList<>();
+    for (Document doc : documents) {
+      viewChanges.add(DocumentViewChange.create(DocumentViewChange.Type.ADDED, doc));
+    }
+    return new ViewSnapshot(
+        query,
+        documents,
+        DocumentSet.emptySet(query.comparator()),
+        viewChanges,
+        fromCache,
+        mutatedKeys,
+        /* didSyncStateChange= */ true,
+        excludesMetadataChanges);
   }
 
   public Query getQuery() {
@@ -85,6 +113,10 @@ public boolean didSyncStateChange() {
     return didSyncStateChange;
   }
 
+  public boolean excludesMetadataChanges() {
+    return excludesMetadataChanges;
+  }
+
   @Override
   public boolean equals(Object o) {
     if (this == o) {
@@ -102,6 +134,9 @@ public boolean equals(Object o) {
     if (didSyncStateChange != that.didSyncStateChange) {
       return false;
     }
+    if (excludesMetadataChanges != that.excludesMetadataChanges) {
+      return false;
+    }
     if (!query.equals(that.query)) {
       return false;
     }
@@ -126,6 +161,7 @@ public int hashCode() {
     result = 31 * result + mutatedKeys.hashCode();
     result = 31 * result + (isFromCache ? 1 : 0);
     result = 31 * result + (didSyncStateChange ? 1 : 0);
+    result = 31 * result + (excludesMetadataChanges ? 1 : 0);
     return result;
   }
 
@@ -145,6 +181,8 @@ public String toString() {
         + mutatedKeys.size()
         + ", didSyncStateChange="
         + didSyncStateChange
+        + ", excludesMetadataChanges="
+        + excludesMetadataChanges
         + ")";
   }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
index 64ccbb066..6c203edd3 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
@@ -124,7 +124,7 @@ public LocalStore(Persistence persistence, User initialUser) {
         persistence.isStarted(), "LocalStore was passed an unstarted persistence implementation");
     this.persistence = persistence;
     queryCache = persistence.getQueryCache();
-    targetIdGenerator = TargetIdGenerator.getLocalStoreIdGenerator(queryCache.getHighestTargetId());
+    targetIdGenerator = TargetIdGenerator.forQueryCache(queryCache.getHighestTargetId());
     mutationQueue = persistence.getMutationQueue(initialUser);
     remoteDocuments = persistence.getRemoteDocumentCache();
     localDocuments = new LocalDocumentsView(remoteDocuments, mutationQueue);
@@ -138,7 +138,15 @@ public LocalStore(Persistence persistence, User initialUser) {
   }
 
   public void start() {
-    mutationQueue.start();
+    startMutationQueue();
+  }
+
+  private void startMutationQueue() {
+    persistence.runTransaction(
+        "Start MutationQueue",
+        () -> {
+          mutationQueue.start();
+        });
   }
 
   // PORTING NOTE: no shutdown for LocalStore or persistence components on Android.
@@ -148,7 +156,7 @@ public void start() {
     List<MutationBatch> oldBatches = mutationQueue.getAllMutationBatches();
 
     mutationQueue = persistence.getMutationQueue(user);
-    mutationQueue.start();
+    startMutationQueue();
 
     List<MutationBatch> newBatches = mutationQueue.getAllMutationBatches();
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
index 5ff240de1..9af1b1faa 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
@@ -106,11 +106,6 @@ public boolean isEmpty() {
     return queue.isEmpty();
   }
 
-  @Override
-  public int getNextBatchId() {
-    return nextBatchId;
-  }
-
   @Override
   public void acknowledgeBatch(MutationBatch batch, ByteString streamToken) {
     int batchId = batch.getBatchId();
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
index bb8061e1d..da67269cb 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
@@ -38,15 +38,6 @@
   /** Returns true if this queue contains no mutation batches. */
   boolean isEmpty();
 
-  /**
-   * Returns the next batch ID that will be assigned to a new mutation batch.
-   *
-   * <p>Callers generally don't care about this value except to test that the mutation queue is
-   * properly maintaining the invariant that getHighestAcknowledgedBatchId is less than
-   * getNextBatchId.
-   */
-  int getNextBatchId();
-
   /** Acknowledges the given batch. */
   void acknowledgeBatch(MutationBatch batch, ByteString streamToken);
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
index b3bf28ce5..ccf5bb704 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
@@ -159,11 +159,6 @@ public boolean isEmpty() {
     return db.query("SELECT batch_id FROM mutations WHERE uid = ? LIMIT 1").binding(uid).isEmpty();
   }
 
-  @Override
-  public int getNextBatchId() {
-    return nextBatchId;
-  }
-
   @Override
   public void acknowledgeBatch(MutationBatch batch, ByteString streamToken) {
     int batchId = batch.getBatchId();
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteStore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteStore.java
index 848280c9b..e1fd8a560 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteStore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteStore.java
@@ -617,7 +617,7 @@ private void handleWriteStreamClose(Status status) {
     if (Status.OK.equals(status)) {
       // Graceful stop (due to stop() or idle timeout). Make sure that's desirable.
       hardAssert(
-          !shouldStartWatchStream(), "Write stream was stopped gracefully while still needed.");
+          !shouldStartWriteStream(), "Write stream was stopped gracefully while still needed.");
     }
 
     // If the write stream closed due to an error, invoke the error callbacks if there are pending
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
index 2fc95af3d..a82b1c834 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
@@ -161,7 +161,8 @@ public static Object convertToPlainJavaTypes(Object object) {
         || o instanceof Timestamp
         || o instanceof GeoPoint
         || o instanceof Blob
-        || o instanceof DocumentReference) {
+        || o instanceof DocumentReference
+        || o instanceof FieldValue) {
       return o;
     } else {
       Class<T> clazz = (Class<T>) o.getClass();
@@ -508,12 +509,12 @@ private static DocumentReference convertDocumentReference(Object o, ErrorPath pa
     }
   }
 
-  private static RuntimeException serializeError(ErrorPath path, String reason) {
+  private static IllegalArgumentException serializeError(ErrorPath path, String reason) {
     reason = "Could not serialize object. " + reason;
     if (path.getLength() > 0) {
       reason = reason + " (found in field '" + path.toString() + "')";
     }
-    return new RuntimeException(reason);
+    return new IllegalArgumentException(reason);
   }
 
   private static RuntimeException deserializeError(ErrorPath path, String reason) {
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Util.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Util.java
index 18462cca3..2739bf1b7 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Util.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/Util.java
@@ -86,17 +86,17 @@ public static int compareLongs(long i1, long i2) {
 
   /** Utility function to compare ints. See {@link #compareLongs} for rationale. */
   public static int compareInts(int i1, int i2) {
-    return NumberComparisonHelper.compareInts(i1, i2);
+    return NumberComparisonHelper.compareLongs(i1, i2);
   }
 
   /** Utility function to compare doubles (using Firestore semantics for NaN). */
   public static int compareDoubles(double i1, double i2) {
-    return NumberComparisonHelper.compareDoubles(i1, i2);
+    return NumberComparisonHelper.firestoreCompareDoubles(i1, i2);
   }
 
   /** Compares a double and a long (using Firestore semantics for NaN). */
   public static int compareMixed(double doubleValue, long longValue) {
-    return NumberComparisonHelper.compareDoubleWithLong(doubleValue, longValue);
+    return NumberComparisonHelper.firestoreCompareDoubleWithLong(doubleValue, longValue);
   }
 
   @SuppressWarnings("unchecked")
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/QuerySnapshotTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/QuerySnapshotTest.java
index 73621e834..688956608 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/QuerySnapshotTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/QuerySnapshotTest.java
@@ -124,7 +124,8 @@ public void testIncludeMetadataChanges() {
             documentChanges,
             /*isFromCache=*/ false,
             /*mutatedKeys=*/ keySet(),
-            /*didSyncStateChange=*/ true);
+            /*didSyncStateChange=*/ true,
+            /* excludesMetadataChanges= */ false);
 
     QuerySnapshot snapshot =
         new QuerySnapshot(new Query(fooQuery, firestore), viewSnapshot, firestore);
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/TestUtil.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/TestUtil.java
index 527245673..930906414 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/TestUtil.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/TestUtil.java
@@ -133,7 +133,8 @@ public static QuerySnapshot querySnapshot(
             documentChanges,
             isFromCache,
             mutatedKeys,
-            true);
+            true,
+            /* excludesMetadataChanges= */ false);
     return new QuerySnapshot(query(path), viewSnapshot, FIRESTORE);
   }
 
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryListenerTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryListenerTest.java
index 982711b94..d3e0a4b9d 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryListenerTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/QueryListenerTest.java
@@ -26,6 +26,7 @@
 import static org.junit.Assert.assertTrue;
 
 import com.google.firebase.firestore.FirebaseFirestoreException;
+import com.google.firebase.firestore.MetadataChanges;
 import com.google.firebase.firestore.core.DocumentViewChange.Type;
 import com.google.firebase.firestore.core.EventManager.ListenOptions;
 import com.google.firebase.firestore.core.View.DocumentChanges;
@@ -107,7 +108,8 @@ public void testRaisesCollectionEvents() {
             asList(change1, change4),
             snap2.isFromCache(),
             snap2.getMutatedKeys(),
-            /* didSyncStateChange= */ true);
+            /* didSyncStateChange= */ true,
+            /* excludesMetadataChanges= */ false);
     assertEquals(asList(snap2Prime), otherAccum);
   }
 
@@ -161,6 +163,7 @@ public void testDoesNotRaiseEventsForMetadataChangesUnlessSpecified() {
     ListenOptions options1 = new ListenOptions();
     ListenOptions options2 = new ListenOptions();
     options2.includeQueryMetadataChanges = true;
+    options2.includeDocumentMetadataChanges = true;
     QueryListener filteredListener = queryListener(query, options1, filteredAccum);
     QueryListener fullListener = queryListener(query, options2, fullAccum);
 
@@ -180,7 +183,11 @@ public void testDoesNotRaiseEventsForMetadataChangesUnlessSpecified() {
     fullListener.onViewSnapshot(snap2); // no event
     fullListener.onViewSnapshot(snap3); // doc2 update
 
-    assertEquals(asList(snap1, snap3), filteredAccum);
+    assertEquals(
+        asList(
+            applyExpectedMetadata(snap1, MetadataChanges.EXCLUDE),
+            applyExpectedMetadata(snap3, MetadataChanges.EXCLUDE)),
+        filteredAccum);
     assertEquals(asList(snap1, snap2, snap3), fullAccum);
   }
 
@@ -214,7 +221,11 @@ public void testRaisesDocumentMetadataEventsOnlyWhenSpecified() {
     fullListener.onViewSnapshot(snap2);
     fullListener.onViewSnapshot(snap3);
 
-    assertEquals(asList(snap1, snap3), filteredAccum);
+    assertEquals(
+        asList(
+            applyExpectedMetadata(snap1, MetadataChanges.EXCLUDE),
+            applyExpectedMetadata(snap3, MetadataChanges.EXCLUDE)),
+        filteredAccum);
     // Second listener should receive doc1prime as added document not modified
     assertEquals(asList(snap1, snap2, snap3), fullAccum);
   }
@@ -254,8 +265,15 @@ public void testRaisesQueryMetadataEventsOnlyWhenHasPendingWritesOnTheQueryChang
             asList(),
             snap4.isFromCache(),
             snap4.getMutatedKeys(),
-            snap4.didSyncStateChange());
-    assertEquals(asList(snap1, snap3, expectedSnapshot4), fullAccum);
+            snap4.didSyncStateChange(),
+            /* excludeMetadataChanges= */ true); // This test excludes document metadata changes
+
+    assertEquals(
+        asList(
+            applyExpectedMetadata(snap1, MetadataChanges.EXCLUDE),
+            applyExpectedMetadata(snap3, MetadataChanges.EXCLUDE),
+            expectedSnapshot4),
+        fullAccum);
   }
 
   @Test
@@ -288,8 +306,11 @@ public void testMetadataOnlyDocumentChangesAreFilteredOut() {
             asList(change3),
             snap2.isFromCache(),
             snap2.getMutatedKeys(),
-            snap2.didSyncStateChange());
-    assertEquals(asList(snap1, expectedSnapshot2), filteredAccum);
+            snap2.didSyncStateChange(),
+            /* excludesMetadataChanges= */ true);
+    assertEquals(
+        asList(applyExpectedMetadata(snap1, MetadataChanges.EXCLUDE), expectedSnapshot2),
+        filteredAccum);
   }
 
   @Test
@@ -327,7 +348,8 @@ public void testWillWaitForSyncIfOnline() {
             asList(change1, change2),
             /* isFromCache= */ false,
             snap3.getMutatedKeys(),
-            /* didSyncStateChange= */ true);
+            /* didSyncStateChange= */ true,
+            /* excludesMetadataChanges= */ true);
     assertEquals(asList(expectedSnapshot), events);
   }
 
@@ -364,7 +386,8 @@ public void testWillRaiseInitialEventWhenGoingOffline() {
             asList(change1),
             /* isFromCache= */ true,
             snap1.getMutatedKeys(),
-            /* didSyncStateChange= */ true);
+            /* didSyncStateChange= */ true,
+            /* excludesMetadataChanges= */ true);
     ViewSnapshot expectedSnapshot2 =
         new ViewSnapshot(
             snap2.getQuery(),
@@ -373,7 +396,8 @@ public void testWillRaiseInitialEventWhenGoingOffline() {
             asList(change2),
             /* isFromCache= */ true,
             snap2.getMutatedKeys(),
-            /* didSyncStateChange= */ false);
+            /* didSyncStateChange= */ false,
+            /* excludesMetadataChanges= */ true);
     assertEquals(asList(expectedSnapshot1, expectedSnapshot2), events);
   }
 
@@ -399,7 +423,8 @@ public void testWillRaiseInitialEventWhenGoingOfflineAndThereAreNoDocs() {
             asList(),
             /* isFromCache= */ true,
             snap1.getMutatedKeys(),
-            /* didSyncStateChange= */ true);
+            /* didSyncStateChange= */ true,
+            /* excludesMetadataChanges= */ true);
     assertEquals(asList(expectedSnapshot), events);
   }
 
@@ -424,7 +449,20 @@ public void testWillRaiseInitialEventWhenStartingOfflineAndThereAreNoDocs() {
             asList(),
             /* isFromCache= */ true,
             snap1.getMutatedKeys(),
-            /* didSyncStateChange= */ true);
+            /* didSyncStateChange= */ true,
+            /* excludesMetadataChanges= */ true);
     assertEquals(asList(expectedSnapshot), events);
   }
+
+  private ViewSnapshot applyExpectedMetadata(ViewSnapshot snap, MetadataChanges metadata) {
+    return new ViewSnapshot(
+        snap.getQuery(),
+        snap.getDocuments(),
+        snap.getOldDocuments(),
+        snap.getChanges(),
+        snap.isFromCache(),
+        snap.getMutatedKeys(),
+        snap.didSyncStateChange(),
+        MetadataChanges.EXCLUDE.equals(metadata));
+  }
 }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/TargetIdGeneratorTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/TargetIdGeneratorTest.java
index 0ff6a4f35..14dd8d1cb 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/TargetIdGeneratorTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/TargetIdGeneratorTest.java
@@ -28,54 +28,32 @@
 
   @Test
   public void testConstructor() {
-    assertEquals(2, TargetIdGenerator.getLocalStoreIdGenerator(0).nextId());
-    assertEquals(1, TargetIdGenerator.getSyncEngineGenerator(0).nextId());
-  }
-
-  @Test
-  public void testSkipPast() {
-    TargetIdGenerator gen = new TargetIdGenerator(1, -1);
-    assertEquals(1, gen.nextId());
-
-    gen = new TargetIdGenerator(1, 2);
-    assertEquals(3, gen.nextId());
-
-    gen = new TargetIdGenerator(1, 4);
-    assertEquals(5, gen.nextId());
-
-    for (int i = 4; i < 12; i++) {
-      TargetIdGenerator gen0 = new TargetIdGenerator(0, i);
-      TargetIdGenerator gen1 = new TargetIdGenerator(1, i);
-      assertEquals(i + 2 & ~1, gen0.nextId());
-      assertEquals(i + 1 | 1, gen1.nextId());
-    }
-
-    gen = new TargetIdGenerator(1, 12);
-    assertEquals(13, gen.nextId());
-
-    gen = new TargetIdGenerator(0, 22);
-    assertEquals(24, gen.nextId());
+    assertEquals(2, TargetIdGenerator.forQueryCache(0).nextId());
+    assertEquals(1, TargetIdGenerator.forSyncEngine().nextId());
   }
 
   @Test
   public void testIncrement() {
     TargetIdGenerator gen = new TargetIdGenerator(0, 0);
+    assertEquals(0, gen.nextId());
     assertEquals(2, gen.nextId());
     assertEquals(4, gen.nextId());
     assertEquals(6, gen.nextId());
 
     gen = new TargetIdGenerator(0, 46);
+    assertEquals(46, gen.nextId());
     assertEquals(48, gen.nextId());
     assertEquals(50, gen.nextId());
     assertEquals(52, gen.nextId());
     assertEquals(54, gen.nextId());
 
-    gen = new TargetIdGenerator(1, 0);
+    gen = new TargetIdGenerator(1, 1);
     assertEquals(1, gen.nextId());
     assertEquals(3, gen.nextId());
     assertEquals(5, gen.nextId());
 
-    gen = new TargetIdGenerator(1, 46);
+    gen = new TargetIdGenerator(1, 45);
+    assertEquals(45, gen.nextId());
     assertEquals(47, gen.nextId());
     assertEquals(49, gen.nextId());
     assertEquals(51, gen.nextId());
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/ViewSnapshotTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/ViewSnapshotTest.java
index 859a0dbf9..554f81e5b 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/core/ViewSnapshotTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/core/ViewSnapshotTest.java
@@ -48,9 +48,18 @@ public void testConstructor() {
     boolean fromCache = true;
     boolean hasPendingWrites = true;
     boolean syncStateChanges = true;
+    boolean excludesMetadataChanges = true;
 
     ViewSnapshot snapshot =
-        new ViewSnapshot(query, docs, oldDocs, changes, fromCache, mutatedKeys, syncStateChanges);
+        new ViewSnapshot(
+            query,
+            docs,
+            oldDocs,
+            changes,
+            fromCache,
+            mutatedKeys,
+            syncStateChanges,
+            excludesMetadataChanges);
 
     assertEquals(query, snapshot.getQuery());
     assertEquals(docs, snapshot.getDocuments());
@@ -60,5 +69,6 @@ public void testConstructor() {
     assertEquals(mutatedKeys, snapshot.getMutatedKeys());
     assertEquals(hasPendingWrites, snapshot.hasPendingWrites());
     assertEquals(syncStateChanges, snapshot.didSyncStateChange());
+    assertEquals(excludesMetadataChanges, snapshot.excludesMetadataChanges());
   }
 }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java
index 1e1cafe69..7855d4bea 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java
@@ -411,7 +411,7 @@ public void testArraysFail() {
       wrap(array);
       fail("wrap should have failed");
     } catch (IllegalArgumentException e) {
-      assertNotEquals(-1, e.getMessage().indexOf("use a List instead"));
+      assertNotEquals(-1, e.getMessage().indexOf("use Lists instead"));
     }
   }
 
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
index 034b3016b..7751f009a 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
@@ -275,7 +275,6 @@ private void initClient() {
   @Override
   public void handleOnlineStateChange(OnlineState onlineState) {
     syncEngine.handleOnlineStateChange(onlineState);
-    eventManager.handleOnlineStateChange(onlineState);
   }
 
   private List<Pair<Mutation, Task<Void>>> getCurrentOutstandingWrites() {
diff --git a/firebase-functions/README.md b/firebase-functions/README.md
index 1ed08494e..88440485e 100644
--- a/firebase-functions/README.md
+++ b/firebase-functions/README.md
@@ -1,4 +1,4 @@
-# Cloud Functions for Firebase iOS SDK
+# Cloud Functions for Firebase Android SDK
 
 ## Running Tests
 
diff --git a/firebase-functions/firebase-functions.gradle b/firebase-functions/firebase-functions.gradle
index 66d755f92..d33008db6 100644
--- a/firebase-functions/firebase-functions.gradle
+++ b/firebase-functions/firebase-functions.gradle
@@ -14,7 +14,7 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 26
+def androidVersion = 28
 
 android {
     adbOptions {
@@ -24,15 +24,12 @@ android {
     compileSdkVersion androidVersion
     defaultConfig {
         targetSdkVersion androidVersion
+        minSdkVersion 14
 
         multiDexEnabled true
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
     sourceSets {
-        main {
-            java {
-            }
-        }
         androidTest {
             java {
                 srcDir 'src/testUtil'
@@ -62,13 +59,13 @@ dependencies {
 
     annotationProcessor 'com.google.auto.value:auto-value:1.6'
 
-    androidTestCompile 'junit:junit:4.11'
-    androidTestCompile 'com.google.truth:truth:0.36'
-    androidTestCompile 'com.android.support.test:runner:1.0.2'
-    androidTestCompile 'org.mockito:mockito-core:1.10.19'
-    androidTestCompile 'com.google.truth:truth:0.36'
-    androidTestCompile 'com.linkedin.dexmaker:dexmaker:2.16.0'
-    androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.16.0'
+    androidTestImplementation 'junit:junit:4.12'
+    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation 'com.android.support.test:runner:1.0.2'
+    androidTestImplementation 'org.mockito:mockito-core:2.21.0'
+    androidTestImplementation 'com.google.truth:truth:0.42'
+    androidTestImplementation 'com.linkedin.dexmaker:dexmaker:2.16.0'
+    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.16.0'
 
 
 }
diff --git a/firebase-functions/src/androidTest/AndroidManifest.xml b/firebase-functions/src/androidTest/AndroidManifest.xml
index 3d7fb8198..1da6c39bd 100644
--- a/firebase-functions/src/androidTest/AndroidManifest.xml
+++ b/firebase-functions/src/androidTest/AndroidManifest.xml
@@ -1,7 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
   package="com.google.firebase.functions">
-  <uses-sdk android:minSdkVersion="15"
-    android:targetSdkVersion="23" />
   <uses-permission android:name="android.permission.INTERNET"/>
   <application>
     <uses-library android:name="android.test.runner" />
diff --git a/firebase-functions/src/main/AndroidManifest.xml b/firebase-functions/src/main/AndroidManifest.xml
index 4073a046c..b27668ca4 100644
--- a/firebase-functions/src/main/AndroidManifest.xml
+++ b/firebase-functions/src/main/AndroidManifest.xml
@@ -2,7 +2,6 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:tools="http://schemas.android.com/tools"
         package="com.google.firebase.functions">
-    <uses-sdk android:minSdkVersion="14" />
     <uses-permission android:name="android.permission.INTERNET" />
     <application>
         <service android:name="com.google.firebase.components.ComponentDiscoveryService">
diff --git a/firebase-inappmessaging-display/README.md b/firebase-inappmessaging-display/README.md
new file mode 100644
index 000000000..01688490e
--- /dev/null
+++ b/firebase-inappmessaging-display/README.md
@@ -0,0 +1,18 @@
+# Firebase In-App Messaging Display SDK
+[Firebase In-App Messaging](https://firebase.google.com/docs/in-app-messaging/) helps you engage 
+users who are actively using your app by sending them targeted and contextual messages that nudge 
+them to complete key in-app actions - like beating a game level, buying an item, or subscribing to 
+content.
+
+The FIAM Display SDK gives you more control over your in-app messages you send, allowing you to 
+customize typeface, colors, transitions, corner radii, and more.
+
+## Running Tests
+Unit tests:
+`../gradlew :firebase-inappmessaging-display:test`
+
+Integration tests, requiring a running and connected device (emulator or real):
+`../gradlew :firebase-inappmessaging-display:connectedAndroidTest`
+
+The best way to test is via the fiamui-app in this repo - you can run the test, or use 
+Firebase Test Lab to run a series of UI tests. See fiamui-app/scripts for more details
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/firebase-inappmessaging-display.gradle b/firebase-inappmessaging-display/firebase-inappmessaging-display.gradle
new file mode 100644
index 000000000..c441c4912
--- /dev/null
+++ b/firebase-inappmessaging-display/firebase-inappmessaging-display.gradle
@@ -0,0 +1,86 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+apply plugin: "com.android.library"
+
+android {
+    compileSdkVersion 27
+
+    defaultConfig {
+        minSdkVersion 16
+        targetSdkVersion 27
+        versionCode 1
+        versionName "1.0"
+        multiDexEnabled true
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    }
+
+    // TODO: b/111563140
+    lintOptions {
+        abortOnError false
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+        // Neccesary for Dagger
+        incremental = false
+    }
+
+    testOptions {
+        unitTests {
+            includeAndroidResources true
+        }
+    }
+}
+
+dependencies {
+    implementation project(':firebase-common')
+    implementation ("com.google.firebase:firebase-inappmessaging:17.0.3") {
+        exclude group: "com.google.firebase", module: "firebase-common"
+    }
+
+
+    implementation "com.android.support:appcompat-v7:27.1.1"
+    implementation "com.android.support:customtabs:27.1.1"
+    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
+    implementation 'com.google.auto.value:auto-value-annotations:1.6'
+
+    implementation "com.squareup.picasso:picasso:2.5.2"
+    implementation "com.squareup.okhttp:okhttp:2.7.5"
+
+    implementation "com.google.dagger:dagger:2.13"
+    implementation "com.google.dagger:dagger-android-support:2.13"
+    implementation ("com.google.firebase:firebase-core:16.0.4") {
+        exclude group: "com.google.firebase", module: "firebase-common"
+    }
+
+
+    annotationProcessor "com.google.dagger:dagger-compiler:2.13"
+    annotationProcessor 'com.google.auto.value:auto-value:1.6'
+    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.6'
+
+    testImplementation "org.robolectric:robolectric:3.8"
+    testImplementation "junit:junit:4.12"
+    testImplementation "org.mockito:mockito-core:2.18.3"
+    testImplementation "com.google.truth:truth:0.39"
+
+    androidTestImplementation "org.mockito:mockito-core:2.18.3"
+    androidTestImplementation "com.google.dexmaker:dexmaker:1.2"
+    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:2.16.0"
+    androidTestImplementation "com.android.support:support-annotations:27.1.1"
+    androidTestImplementation "com.android.support.test:runner:1.0.2"
+    androidTestImplementation "com.android.support.test:rules:1.0.2"
+}
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/gradle.properties b/firebase-inappmessaging-display/gradle.properties
new file mode 100644
index 000000000..eb7a9437b
--- /dev/null
+++ b/firebase-inappmessaging-display/gradle.properties
@@ -0,0 +1 @@
+version=17.0.3
diff --git a/firebase-inappmessaging-display/lint.xml b/firebase-inappmessaging-display/lint.xml
new file mode 100644
index 000000000..186d01eeb
--- /dev/null
+++ b/firebase-inappmessaging-display/lint.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+
+    <!-- Ignore the InconsistentLayout issue in the given files, this is because
+    we have the 'modal-inner' in the main layout that handles the ids for the modal -->
+    <issue id="InconsistentLayout">
+        <ignore path="src/main/res/layout-land/modal.xml" />
+        <ignore path="src/main/res/layout/modal.xml" />
+        <ignore path="src/main/res/layout-sw600dp/modal.xml" />
+    </issue>
+
+    <issue id="UnknownIdInLayout">
+        <ignore path="src/main/res/layout-sw600dp/modal.xml"/>
+        <ignore path="src/main/res/layout/modal.xml"/>
+    </issue>
+
+    <issue id="InflateParams">
+        <ignore path="src/main/java/com/google/firebase/display/internal/bindingwrappers/*"/>
+    </issue>
+
+    <issue id="IconMissingDensityFolder">
+        <ignore path="src/debug/**"/>
+    </issue>
+
+
+</lint>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/preguard.txt b/firebase-inappmessaging-display/preguard.txt
new file mode 100644
index 000000000..3b4f7ffa4
--- /dev/null
+++ b/firebase-inappmessaging-display/preguard.txt
@@ -0,0 +1,18 @@
+-repackageclasses 'com.google.firebase.inappmessaging.display.obfuscated'
+-dontwarn okio.**
+-dontwarn com.google.j2objc.annotations.**
+-dontwarn java.lang.invoke.LambdaMetafactory
+-keepparameternames
+-renamesourcefileattribute SourceFile
+-keepattributes Exceptions,InnerClasses,Signature,Deprecated,
+                SourceFile,LineNumberTable,*Annotation*,EnclosingMethod
+
+# Generated classes are explicitly kept
+-keep public class com.google.firebase.inappmessaging.display.R** {
+      public protected *;
+}
+
+
+# Using names starting with "zz"
+-classobfuscationdictionary ../obfuscate_dict.txt
+-obfuscationdictionary ../obfuscate_dict.txt
diff --git a/firebase-inappmessaging-display/proguard.txt b/firebase-inappmessaging-display/proguard.txt
new file mode 100644
index 000000000..e69de29bb
diff --git a/firebase-inappmessaging-display/src/androidTest/AndroidManifest.xml b/firebase-inappmessaging-display/src/androidTest/AndroidManifest.xml
new file mode 100644
index 000000000..0474d730b
--- /dev/null
+++ b/firebase-inappmessaging-display/src/androidTest/AndroidManifest.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.google.firebase.inappmessaging.display.internal.bindingwrappers">
+
+  <application>
+    <uses-library android:name="android.test.runner"/>
+    <activity android:name=".TestActivity">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+        <category android:name="android.intent.category.LAUNCHER"/>
+      </intent-filter>
+    </activity>
+  </application>
+
+  <instrumentation
+      android:name="android.support.test.runner.AndroidJUnitRunner"
+      android:targetPackage="com.google.firebase.inappmessaging.display.internal.bindingwrappers">
+  </instrumentation>
+</manifest>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BannerBindingWrapperTest.java b/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BannerBindingWrapperTest.java
new file mode 100644
index 000000000..a1836b6f9
--- /dev/null
+++ b/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BannerBindingWrapperTest.java
@@ -0,0 +1,109 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.bindingwrappers;
+
+import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+
+import android.content.Context;
+import android.support.test.filters.MediumTest;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.google.firebase.inappmessaging.model.MessageType;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+@MediumTest
+@RunWith(AndroidJUnit4.class)
+public class BannerBindingWrapperTest {
+  private static final String IMAGE_URL = "https://www.imgur.com";
+  private static final String CAMPAIGN_ID = "campaign_id";
+  private static final String ACTION_URL = "https://www.google.com";
+  private static final String CAMPAIGN_NAME = "campaign_name";
+  private static final InAppMessage.Action ACTION =
+      InAppMessage.Action.builder().setActionUrl(ACTION_URL).build();
+  private static final InAppMessageLayoutConfig inappMessageLayoutConfig =
+      InAppMessageLayoutConfig.builder()
+          .setMaxDialogHeightPx((int) (0.8 * 1000))
+          .setMaxDialogWidthPx((int) (0.7f * 1000))
+          .setMaxImageHeightWeight(0.6f)
+          .setMaxBodyHeightWeight(0.1f)
+          .setMaxImageWidthWeight(0.9f) // entire dialog width
+          .setMaxBodyWidthWeight(0.9f) // entire dialog width
+          .setViewWindowGravity(Gravity.CENTER)
+          .setWindowFlag(0)
+          .setWindowWidth(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setBackgroundEnabled(false)
+          .setAnimate(false)
+          .setAutoDismiss(false)
+          .build();
+  private static final InAppMessage BANNER_MESSAGE =
+      InAppMessage.builder()
+          .setCampaignId(CAMPAIGN_ID)
+          .setIsTestMessage(false)
+          .setCampaignName(CAMPAIGN_NAME)
+          .setAction(ACTION)
+          .setMessageType(MessageType.BANNER)
+          .setImageUrl(IMAGE_URL)
+          .build();
+  @Rule public ActivityTestRule<TestActivity> rule = new ActivityTestRule<>(TestActivity.class);
+  @Mock private View.OnClickListener onDismissListener;
+  @Mock private View.OnClickListener actionListener;
+
+  private BannerBindingWrapper bannerBindingWrapper;
+
+  @Before
+  public void setup() {
+    MockitoAnnotations.initMocks(this);
+    TestActivity testActivity = rule.getActivity();
+    LayoutInflater layoutInflater =
+        (LayoutInflater) testActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+    bannerBindingWrapper =
+        new BannerBindingWrapper(BANNER_MESSAGE, layoutInflater, inappMessageLayoutConfig);
+  }
+
+  @Test
+  public void inflate_setsMessage() throws Exception {
+    bannerBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertEquals(bannerBindingWrapper.message, BANNER_MESSAGE);
+  }
+
+  @Test
+  public void inflate_setsLayoutConfig() throws Exception {
+    bannerBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertEquals(bannerBindingWrapper.config, inappMessageLayoutConfig);
+  }
+
+  @Test
+  public void inflate_setsActionListener() throws Exception {
+    bannerBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertTrue(bannerBindingWrapper.getDialogView().hasOnClickListeners());
+  }
+}
diff --git a/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ImageBindingWrapperTest.java b/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ImageBindingWrapperTest.java
new file mode 100644
index 000000000..eab5b9ab9
--- /dev/null
+++ b/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ImageBindingWrapperTest.java
@@ -0,0 +1,116 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.bindingwrappers;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import android.content.Context;
+import android.support.test.filters.MediumTest;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.google.firebase.inappmessaging.model.MessageType;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+@MediumTest
+@RunWith(AndroidJUnit4.class)
+public class ImageBindingWrapperTest {
+  private static final String IMAGE_URL = "https://www.imgur.com";
+  private static final String CAMPAIGN_ID = "campaign_id";
+  private static final String ACTION_URL = "https://www.google.com";
+  private static final String CAMPAIGN_NAME = "campaign_name";
+  private static final InAppMessage.Action ACTION =
+      InAppMessage.Action.builder().setActionUrl(ACTION_URL).build();
+  private static final InAppMessageLayoutConfig inappMessageLayoutConfig =
+      InAppMessageLayoutConfig.builder()
+          .setMaxDialogHeightPx((int) (0.8 * 1000))
+          .setMaxDialogWidthPx((int) (0.7f * 1000))
+          .setMaxImageHeightWeight(0.6f)
+          .setMaxBodyHeightWeight(0.1f)
+          .setMaxImageWidthWeight(0.9f) // entire dialog width
+          .setMaxBodyWidthWeight(0.9f) // entire dialog width
+          .setViewWindowGravity(Gravity.CENTER)
+          .setWindowFlag(0)
+          .setWindowWidth(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setBackgroundEnabled(false)
+          .setAnimate(false)
+          .setAutoDismiss(false)
+          .build();
+  private static final InAppMessage IMAGE_ONLY_MESSAGE =
+      InAppMessage.builder()
+          .setCampaignId(CAMPAIGN_ID)
+          .setIsTestMessage(false)
+          .setCampaignName(CAMPAIGN_NAME)
+          .setAction(ACTION)
+          .setMessageType(MessageType.IMAGE_ONLY)
+          .setImageUrl(IMAGE_URL)
+          .build();
+  @Rule public ActivityTestRule<TestActivity> rule = new ActivityTestRule<>(TestActivity.class);
+  @Mock private View.OnClickListener onDismissListener;
+  @Mock private View.OnClickListener actionListener;
+
+  private ImageBindingWrapper imageBindingWrapper;
+
+  @Before
+  public void setup() {
+    MockitoAnnotations.initMocks(this);
+    TestActivity testActivity = rule.getActivity();
+    LayoutInflater layoutInflater =
+        (LayoutInflater) testActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+    imageBindingWrapper =
+        new ImageBindingWrapper(inappMessageLayoutConfig, layoutInflater, IMAGE_ONLY_MESSAGE);
+  }
+
+  @Test
+  public void inflate_setsMessage() throws Exception {
+    imageBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertEquals(imageBindingWrapper.message, IMAGE_ONLY_MESSAGE);
+  }
+
+  @Test
+  public void inflate_setsLayoutConfig() throws Exception {
+    imageBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertEquals(imageBindingWrapper.config, inappMessageLayoutConfig);
+  }
+
+  @Test
+  public void inflate_setsDismissListener() throws Exception {
+    imageBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertTrue(imageBindingWrapper.getCollapseButton().hasOnClickListeners());
+  }
+
+  @Test
+  public void inflate_setsActionListener() throws Exception {
+    imageBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertTrue(imageBindingWrapper.getImageView().hasOnClickListeners());
+  }
+}
diff --git a/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ModalBindingWrapperTest.java b/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ModalBindingWrapperTest.java
new file mode 100644
index 000000000..6e9c1fb42
--- /dev/null
+++ b/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ModalBindingWrapperTest.java
@@ -0,0 +1,164 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.bindingwrappers;
+
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertTrue;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.support.test.filters.MediumTest;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.google.firebase.inappmessaging.model.MessageType;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+@MediumTest
+@RunWith(AndroidJUnit4.class)
+public class ModalBindingWrapperTest {
+  private static final String IMAGE_URL = "https://www.imgur.com";
+  private static final String CAMPAIGN_ID = "campaign_id";
+  private static final String ACTION_URL = "https://www.google.com";
+  private static final String CAMPAIGN_NAME = "campaign_name";
+  private static final InAppMessage.Action ACTION =
+      InAppMessage.Action.builder().setActionUrl(ACTION_URL).build();
+  private static final InAppMessageLayoutConfig inappMessageLayoutConfig =
+      InAppMessageLayoutConfig.builder()
+          .setMaxDialogHeightPx((int) (0.8 * 1000))
+          .setMaxDialogWidthPx((int) (0.7f * 1000))
+          .setMaxImageHeightWeight(0.6f)
+          .setMaxBodyHeightWeight(0.1f)
+          .setMaxImageWidthWeight(0.9f) // entire dialog width
+          .setMaxBodyWidthWeight(0.9f) // entire dialog width
+          .setViewWindowGravity(Gravity.CENTER)
+          .setWindowFlag(0)
+          .setWindowWidth(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setBackgroundEnabled(false)
+          .setAnimate(false)
+          .setAutoDismiss(false)
+          .build();
+  private static final String NON_STANDARD_TEXT_HEX = "#FFB7F4";
+  private static final String NON_STANDARD_BACKGROUND_HEX = "#37FF3C";
+  private static final InAppMessage MODAL_MESSAGE =
+      InAppMessage.builder()
+          .setCampaignId(CAMPAIGN_ID)
+          .setIsTestMessage(false)
+          .setCampaignName(CAMPAIGN_NAME)
+          .setActionButton(
+              InAppMessage.Button.builder()
+                  .setText(
+                      InAppMessage.Text.builder()
+                          .setText("button")
+                          .setHexColor(NON_STANDARD_TEXT_HEX)
+                          .build())
+                  .setButtonHexColor(NON_STANDARD_BACKGROUND_HEX)
+                  .build())
+          .setAction(ACTION)
+          .setMessageType(MessageType.MODAL)
+          .setImageUrl(IMAGE_URL)
+          .build();
+  @Rule public ActivityTestRule<TestActivity> rule = new ActivityTestRule<>(TestActivity.class);
+  @Mock private View.OnClickListener onDismissListener;
+  @Mock private View.OnClickListener actionListener;
+
+  private ModalBindingWrapper modalBindingWrapper;
+
+  @Before
+  public void setup() {
+    MockitoAnnotations.initMocks(this);
+    TestActivity testActivity = rule.getActivity();
+    LayoutInflater layoutInflater =
+        (LayoutInflater) testActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+    modalBindingWrapper =
+        new ModalBindingWrapper(inappMessageLayoutConfig, layoutInflater, MODAL_MESSAGE);
+  }
+
+  @Test
+  public void inflate_setsMessage() throws Exception {
+    modalBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertEquals(modalBindingWrapper.message, MODAL_MESSAGE);
+  }
+
+  @Test
+  public void inflate_setsLayoutConfig() throws Exception {
+    modalBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertEquals(modalBindingWrapper.config, inappMessageLayoutConfig);
+  }
+
+  @Test
+  public void inflate_setsDismissListener() throws Exception {
+    modalBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertTrue(modalBindingWrapper.getCollapseButton().hasOnClickListeners());
+  }
+
+  @Test
+  public void inflate_setsActionListener() throws Exception {
+    modalBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertTrue(modalBindingWrapper.getActionButton().hasOnClickListeners());
+  }
+
+  @Test
+  public void inflate_setsButtonTextColor() throws Exception {
+    modalBindingWrapper.inflate(actionListener, onDismissListener);
+
+    int textColor = modalBindingWrapper.getActionButton().getTextColors().getDefaultColor();
+    int expectedTextColor =
+        Color.parseColor(MODAL_MESSAGE.getActionButton().getText().getHexColor());
+
+    assertEquals(textColor, expectedTextColor);
+    assertEquals(modalBindingWrapper.getActionButton().getVisibility(), View.VISIBLE);
+  }
+
+  @Test
+  public void inflate_setsButtonInvisibleWithNoButton() throws Exception {
+    TestActivity testActivity = rule.getActivity();
+    LayoutInflater layoutInflater =
+        (LayoutInflater) testActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+    // This message has no button, so it should be gone in the layout
+    InAppMessage message =
+        InAppMessage.builder()
+            .setCampaignId(CAMPAIGN_ID)
+            .setIsTestMessage(false)
+            .setCampaignName(CAMPAIGN_NAME)
+            .setAction(ACTION)
+            .setMessageType(MessageType.MODAL)
+            .setImageUrl(IMAGE_URL)
+            .build();
+
+    modalBindingWrapper =
+        new ModalBindingWrapper(inappMessageLayoutConfig, layoutInflater, message);
+    modalBindingWrapper.inflate(actionListener, onDismissListener);
+
+    assertEquals(modalBindingWrapper.getActionButton().getVisibility(), View.GONE);
+  }
+}
diff --git a/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/TestActivity.java b/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/TestActivity.java
new file mode 100644
index 000000000..93b5c129a
--- /dev/null
+++ b/firebase-inappmessaging-display/src/androidTest/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/TestActivity.java
@@ -0,0 +1,19 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.bindingwrappers;
+
+import android.app.Activity;
+
+public class TestActivity extends Activity {}
diff --git a/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_50_50.png b/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_50_50.png
new file mode 100644
index 000000000..3069fadae
Binary files /dev/null and b/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_50_50.png differ
diff --git a/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_550_350.png b/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_550_350.png
new file mode 100644
index 000000000..a42b5031d
Binary files /dev/null and b/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_550_350.png differ
diff --git a/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_850_850.png b/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_850_850.png
new file mode 100644
index 000000000..fae9a9882
Binary files /dev/null and b/firebase-inappmessaging-display/src/debug/res/drawable-mdpi/placeholder_850_850.png differ
diff --git a/firebase-inappmessaging-display/src/debug/res/values/placeholders.xml b/firebase-inappmessaging-display/src/debug/res/values/placeholders.xml
new file mode 100644
index 000000000..5da3d6b13
--- /dev/null
+++ b/firebase-inappmessaging-display/src/debug/res/values/placeholders.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  NOTE: strings in this file will not be included in release builds. They should only be used
+        as tools:getText attributes for layout previews
+-->
+<resources>
+    <string name="placeholder_very_short">
+        Hello, world!
+    </string>
+    <string name="placeholder_lorem_ipsum_short">
+        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas pellentesque.
+    </string>
+</resources>
diff --git a/firebase-inappmessaging-display/src/main/AndroidManifest.xml b/firebase-inappmessaging-display/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..7bcd07889
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/AndroidManifest.xml
@@ -0,0 +1,13 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.google.firebase.inappmessaging.display">
+
+  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+  <uses-permission android:name="android.permission.INTERNET" />
+  <application>
+    <service android:name="com.google.firebase.components.ComponentDiscoveryService">
+      <meta-data android:name="com.google.firebase.components:com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplayRegistrar"
+          android:value="com.google.firebase.components.ComponentRegistrar" />
+    </service>
+  </application>
+
+</manifest>
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FiamListener.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FiamListener.java
new file mode 100644
index 000000000..b5ede688c
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FiamListener.java
@@ -0,0 +1,44 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display;
+
+import android.support.annotation.Keep;
+
+/**
+ * Listener interface to be notified of in app messaging events. Use to register your listener.
+ *
+ * <p>This works as follows
+ *
+ * <ul>
+ *   <li>{@link FiamListener#onFiamTrigger()} is called before the message is rendered. The method
+ *       is called repeatedly for a message if it needs to be re-rendered during activity
+ *       transitions
+ *   <li>{@link FiamListener#onFiamClick()} is called when a message with a configured action is
+ *       clicked. If the clicked message does not have a configured action, it is dismissed and
+ *       {@link FiamListener#onFiamClick()} is invoked
+ *   <li>Called when the message is dismissed either automatically after a timeout or by the user or
+ *       when a clicked message has no associated action
+ * </ul>
+ *
+ * @hide
+ */
+@Keep
+public interface FiamListener {
+  void onFiamTrigger();
+
+  void onFiamClick();
+
+  void onFiamDismiss();
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplay.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplay.java
new file mode 100644
index 000000000..51111d296
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplay.java
@@ -0,0 +1,461 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display;
+
+import static com.google.firebase.inappmessaging.display.internal.FiamAnimator.Position.TOP;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.app.Application;
+import android.net.Uri;
+import android.support.annotation.Keep;
+import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
+import android.support.customtabs.CustomTabsIntent;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewTreeObserver.OnGlobalLayoutListener;
+import com.google.android.gms.common.annotation.KeepForSdk;
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.inappmessaging.FirebaseInAppMessaging;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplayCallbacks;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplayCallbacks.InAppMessagingDismissType;
+import com.google.firebase.inappmessaging.display.internal.BindingWrapperFactory;
+import com.google.firebase.inappmessaging.display.internal.FiamAnimator;
+import com.google.firebase.inappmessaging.display.internal.FiamImageLoader;
+import com.google.firebase.inappmessaging.display.internal.FiamWindowManager;
+import com.google.firebase.inappmessaging.display.internal.FirebaseInAppMessagingDisplayImpl;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.Logging;
+import com.google.firebase.inappmessaging.display.internal.RenewableTimer;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.BindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.InflaterConfigModule;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.FirebaseAppScope;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.google.firebase.inappmessaging.model.MessageType;
+import com.squareup.picasso.Callback;
+import java.util.Map;
+import javax.inject.Inject;
+import javax.inject.Provider;
+
+/**
+ * The entry point of the Firebase In App Messaging display SDK.
+ *
+ * <p>Firebase In-App Messaging Display will automatically initialize, start listening for events,
+ * and display eligible in-app messages.
+ *
+ * <p>This feature uses a Firebase Instance ID token to:
+ *
+ * <ul>
+ *   <li>identify the app instance
+ *   <li>fetch messages from the Firebase backend
+ *   <li>send usage metrics to the Firebase backend.
+ * </ul>
+ *
+ * To delete the Instance ID and the data associated with it, see {@link
+ * com.google.firebase.iid.FirebaseInstanceId#deleteInstanceId}.
+ */
+@Keep
+@FirebaseAppScope
+public class FirebaseInAppMessagingDisplay extends FirebaseInAppMessagingDisplayImpl {
+  static final long IMPRESSION_THRESHOLD_MILLIS = 5 * 1000; // 5 seconds is a valid impression
+  static final long DISMISS_THRESHOLD_MILLIS =
+      20 * 1000; // auto dismiss after 20 seconds for banner
+  static final long INTERVAL_MILLIS = 1000;
+
+  private final FirebaseInAppMessaging headlessInAppMessaging;
+
+  private final Map<String, Provider<InAppMessageLayoutConfig>> layoutConfigs;
+  private final FiamImageLoader imageLoader;
+  private final RenewableTimer impressionTimer;
+  private final RenewableTimer autoDismissTimer;
+  private final FiamWindowManager windowManager;
+  private final BindingWrapperFactory bindingWrapperFactory;
+  private final Application application;
+  private final FiamAnimator animator;
+
+  private FiamListener fiamListener;
+  private InAppMessage inAppMessage;
+  private FirebaseInAppMessagingDisplayCallbacks callbacks;
+  private com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplay
+      firebaseInAppMessagingDisplay;
+
+  @Inject
+  FirebaseInAppMessagingDisplay(
+      FirebaseInAppMessaging headlessInAppMessaging,
+      Map<String, Provider<InAppMessageLayoutConfig>> layoutConfigs,
+      FiamImageLoader imageLoader,
+      RenewableTimer impressionTimer,
+      RenewableTimer autoDismissTimer,
+      FiamWindowManager windowManager,
+      Application application,
+      BindingWrapperFactory bindingWrapperFactory,
+      FiamAnimator animator) {
+    super();
+    this.headlessInAppMessaging = headlessInAppMessaging;
+    this.layoutConfigs = layoutConfigs;
+    this.imageLoader = imageLoader;
+    this.impressionTimer = impressionTimer;
+    this.autoDismissTimer = autoDismissTimer;
+    this.windowManager = windowManager;
+    this.application = application;
+    this.bindingWrapperFactory = bindingWrapperFactory;
+    this.animator = animator;
+  }
+
+  /**
+   * Get FirebaseInAppMessagingDisplay instance using the default firebase app, returned by {@link
+   * FirebaseApp#getInstance()}
+   */
+  @Keep
+  public static FirebaseInAppMessagingDisplay getInstance() {
+    return FirebaseApp.getInstance().get(FirebaseInAppMessagingDisplay.class);
+  }
+
+  private static int getScreenOrientation(Application app) {
+    return app.getResources().getConfiguration().orientation;
+  }
+
+  /**
+   * Method that can be used to test the appearance of an in app message
+   *
+   * @hide
+   */
+  @Keep
+  @KeepForSdk
+  public void testMessage(
+      Activity activity,
+      InAppMessage inAppMessage,
+      FirebaseInAppMessagingDisplayCallbacks callbacks) {
+    this.inAppMessage = inAppMessage;
+    this.callbacks = callbacks;
+    showActiveFiam(activity);
+  }
+
+  /**
+   * Sets fiam listener to receive in app message callbacks
+   *
+   * @hide
+   */
+  @Keep
+  @KeepForSdk
+  public void setFiamListener(FiamListener listener) {
+    this.fiamListener = listener;
+  }
+
+  /**
+   * Clears fiam listener
+   *
+   * @hide
+   */
+  @Keep
+  @KeepForSdk
+  public void clearFiamListener() {
+    this.fiamListener = null;
+  }
+
+  /**
+   * Clears fiam listener
+   *
+   * @hide
+   */
+  @Keep
+  @KeepForSdk
+  @Override
+  public void onActivityStarted(final Activity activity) {
+    // Register FIAM listener with the headless sdk.
+    firebaseInAppMessagingDisplay =
+        new com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplay() {
+          @Override
+          public void displayMessage(InAppMessage iam, FirebaseInAppMessagingDisplayCallbacks cb) {
+            // When we are in the middle of showing a message, we ignore other notifications these
+            // messages will be fired when the corresponding events happen the next time.
+            if (inAppMessage != null || headlessInAppMessaging.areMessagesSuppressed()) {
+              Logging.logd("Active FIAM exists. Skipping trigger");
+              return;
+            }
+            inAppMessage = iam;
+            callbacks = cb;
+            showActiveFiam(activity);
+          }
+        };
+
+    headlessInAppMessaging.setMessageDisplayComponent(firebaseInAppMessagingDisplay);
+  }
+
+  /**
+   * Clear fiam listener on activity paused
+   *
+   * @hide
+   */
+  @Keep
+  @KeepForSdk
+  @Override
+  public void onActivityPaused(Activity activity) {
+    super.onActivityPaused(activity);
+    // clear all state scoped to activity and dismiss fiam
+    headlessInAppMessaging.clearDisplayListener();
+    imageLoader.cancelTag(activity.getClass());
+    removeDisplayedFiam(activity);
+  }
+  /**
+   * Clear fiam listener on activity resumed
+   *
+   * @hide
+   */
+  @Keep
+  @KeepForSdk
+  @Override
+  public void onActivityResumed(Activity activity) {
+    super.onActivityResumed(activity);
+    if (inAppMessage != null) {
+      showActiveFiam(activity);
+    }
+  }
+
+  // The current FIAM might be null
+  @VisibleForTesting
+  InAppMessage getCurrentInAppMessage() {
+    return inAppMessage;
+  }
+
+  private void showActiveFiam(@NonNull final Activity activity) {
+    if (inAppMessage == null || headlessInAppMessaging.areMessagesSuppressed()) {
+      Logging.loge("No active message found to render");
+      return;
+    }
+    notifyFiamTrigger();
+
+    InAppMessageLayoutConfig config =
+        layoutConfigs
+            .get(
+                InflaterConfigModule.configFor(
+                    inAppMessage.getMessageType(), getScreenOrientation(application)))
+            .get();
+
+    final BindingWrapper bindingWrapper;
+
+    if (inAppMessage.getMessageType() == MessageType.MODAL) {
+      bindingWrapper = bindingWrapperFactory.createModalBindingWrapper(config, inAppMessage);
+    } else if (inAppMessage.getMessageType() == MessageType.BANNER) {
+      bindingWrapper = bindingWrapperFactory.createBannerBindingWrapper(config, inAppMessage);
+    } else {
+      bindingWrapper = bindingWrapperFactory.createImageBindingWrapper(config, inAppMessage);
+    }
+
+    // The WindowManager LayoutParams.TYPE_APPLICATION_PANEL requires tokens from the activity
+    // which does not become available until after all lifecycle methods are complete.
+    activity
+        .findViewById(android.R.id.content)
+        .post(
+            new Runnable() {
+              @Override
+              public void run() {
+                inflateBinding(activity, bindingWrapper);
+              }
+            });
+  }
+
+  // Since we handle only touch outside events and let the underlying views handle all other events,
+  // it is safe to ignore this warning
+  @SuppressLint("ClickableViewAccessibility")
+  private void inflateBinding(final Activity activity, final BindingWrapper bindingWrapper) {
+    // On click listener when X button or collapse button is clicked
+    final View.OnClickListener dismissListener =
+        new View.OnClickListener() {
+          @Override
+          public void onClick(View v) {
+            if (callbacks != null) {
+              callbacks.messageDismissed(InAppMessagingDismissType.CLICK);
+            }
+            dismissFiam(activity);
+          }
+        };
+
+    // If the message has an action, but not an action url, we dismiss when the action
+    // button is
+    // clicked;
+    final View.OnClickListener actionListener;
+    if (inAppMessage.getAction() != null
+        && !TextUtils.isEmpty(inAppMessage.getAction().getActionUrl())) {
+      actionListener =
+          new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+              if (callbacks != null) {
+                callbacks.messageClicked();
+              }
+              final CustomTabsIntent i = new CustomTabsIntent.Builder().setShowTitle(true).build();
+
+              i.launchUrl(activity, Uri.parse(inAppMessage.getAction().getActionUrl()));
+              notifyFiamClick();
+              // Ensure that we remove the displayed FIAM, and ensure that on re-load, the message
+              // isn't re-displayed
+              removeDisplayedFiam(activity);
+              inAppMessage = null;
+              callbacks = null;
+            }
+          };
+    } else {
+      Logging.loge("No action url found for action.");
+      actionListener = dismissListener;
+    }
+
+    final OnGlobalLayoutListener layoutListener =
+        bindingWrapper.inflate(actionListener, dismissListener);
+    if (layoutListener != null) {
+      bindingWrapper.getImageView().getViewTreeObserver().addOnGlobalLayoutListener(layoutListener);
+    }
+
+    // Show fiam after image successfully loads
+    loadNullableImage(
+        activity,
+        bindingWrapper,
+        inAppMessage.getImageUrl(),
+        new Callback() {
+          @Override
+          public void onSuccess() {
+            // Setup dismiss on touch outside
+            if (!bindingWrapper.getConfig().backgroundEnabled()) {
+              bindingWrapper
+                  .getRootView()
+                  .setOnTouchListener(
+                      new View.OnTouchListener() {
+                        @Override
+                        public boolean onTouch(View v, MotionEvent event) {
+                          if (event.getAction() == MotionEvent.ACTION_OUTSIDE) {
+                            if (callbacks != null) {
+                              callbacks.messageDismissed(
+                                  InAppMessagingDismissType.UNKNOWN_DISMISS_TYPE);
+                            }
+                            dismissFiam(activity);
+                            return true;
+                          }
+                          return false;
+                        }
+                      });
+            }
+
+            // Setup impression timer
+            impressionTimer.start(
+                new RenewableTimer.Callback() {
+                  @Override
+                  public void onFinish() {
+                    if (inAppMessage != null && callbacks != null) {
+                      Logging.logi(
+                          "Impression timer onFinish for: " + inAppMessage.getCampaignId());
+
+                      callbacks.impressionDetected();
+                    }
+                  }
+                },
+                IMPRESSION_THRESHOLD_MILLIS,
+                INTERVAL_MILLIS);
+
+            // Setup auto dismiss timer
+            if (bindingWrapper.getConfig().autoDismiss()) {
+              autoDismissTimer.start(
+                  new RenewableTimer.Callback() {
+                    @Override
+                    public void onFinish() {
+                      if (inAppMessage != null && callbacks != null) {
+                        callbacks.messageDismissed(InAppMessagingDismissType.AUTO);
+                      }
+
+                      dismissFiam(activity);
+                    }
+                  },
+                  DISMISS_THRESHOLD_MILLIS,
+                  INTERVAL_MILLIS);
+            }
+
+            windowManager.show(bindingWrapper, activity);
+
+            if (bindingWrapper.getConfig().animate()) {
+              // Animate entry
+              animator.slideIntoView(application, bindingWrapper.getRootView(), TOP);
+            }
+          }
+
+          @Override
+          public void onError() {
+            Logging.loge("Image download failure ");
+            if (layoutListener != null) {
+              bindingWrapper
+                  .getImageView()
+                  .getViewTreeObserver()
+                  .removeGlobalOnLayoutListener(layoutListener);
+            }
+            cancelTimers(); // Not strictly necessary.
+            inAppMessage = null;
+            callbacks = null;
+          }
+        });
+  }
+
+  private void loadNullableImage(
+      Activity activity, BindingWrapper fiam, String imageUrl, Callback callback) {
+    if (!TextUtils.isEmpty(imageUrl)) {
+      imageLoader
+          .load(imageUrl)
+          .tag(activity.getClass())
+          .placeholder(R.drawable.image_placeholder)
+          .into(fiam.getImageView(), callback);
+    } else {
+      callback.onSuccess();
+    }
+  }
+
+  // This action needs to be idempotent since multiple callbacks compete to dismiss.
+  // For example, a swipe and a click on the banner compete.
+  private void dismissFiam(Activity activity) {
+    Logging.logd("Dismissing fiam");
+    notifyFiamDismiss();
+    removeDisplayedFiam(activity);
+    inAppMessage = null;
+    callbacks = null;
+  }
+
+  private void removeDisplayedFiam(Activity activity) {
+    if (windowManager.isFiamDisplayed()) {
+      windowManager.destroy(activity);
+      cancelTimers();
+    }
+  }
+
+  private void cancelTimers() {
+    impressionTimer.cancel();
+    autoDismissTimer.cancel();
+  }
+
+  private void notifyFiamTrigger() {
+    if (fiamListener != null) {
+      fiamListener.onFiamTrigger();
+    }
+  }
+
+  private void notifyFiamClick() {
+    if (fiamListener != null) {
+      fiamListener.onFiamClick();
+    }
+  }
+
+  private void notifyFiamDismiss() {
+    if (fiamListener != null) {
+      fiamListener.onFiamDismiss();
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplayRegistrar.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplayRegistrar.java
new file mode 100644
index 000000000..b11e5fc74
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplayRegistrar.java
@@ -0,0 +1,76 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display;
+
+import android.app.Application;
+import android.support.annotation.Keep;
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.analytics.connector.AnalyticsConnector;
+import com.google.firebase.components.Component;
+import com.google.firebase.components.ComponentContainer;
+import com.google.firebase.components.ComponentRegistrar;
+import com.google.firebase.components.Dependency;
+import com.google.firebase.inappmessaging.FirebaseInAppMessaging;
+import com.google.firebase.inappmessaging.display.internal.injection.components.AppComponent;
+import com.google.firebase.inappmessaging.display.internal.injection.components.DaggerAppComponent;
+import com.google.firebase.inappmessaging.display.internal.injection.components.DaggerUniversalComponent;
+import com.google.firebase.inappmessaging.display.internal.injection.components.UniversalComponent;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.ApplicationModule;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.HeadlessInAppMessagingModule;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * Registers {@link FirebaseInAppMessagingDisplay}.
+ *
+ * @hide
+ */
+@Keep
+public class FirebaseInAppMessagingDisplayRegistrar implements ComponentRegistrar {
+  @Override
+  @Keep
+  public List<Component<?>> getComponents() {
+    return Collections.singletonList(
+        Component.builder(FirebaseInAppMessagingDisplay.class)
+            .add(Dependency.required(FirebaseApp.class))
+            .add(Dependency.required(AnalyticsConnector.class))
+            .add(Dependency.required(FirebaseInAppMessaging.class))
+            .factory(c -> buildFirebaseInAppMessagingUI(c))
+            .eagerInDefaultApp()
+            .build());
+  }
+
+  private FirebaseInAppMessagingDisplay buildFirebaseInAppMessagingUI(
+      ComponentContainer container) {
+    FirebaseApp firebaseApp = FirebaseApp.getInstance();
+    FirebaseInAppMessaging headless = container.get(FirebaseInAppMessaging.class);
+    Application firebaseApplication = (Application) firebaseApp.getApplicationContext();
+
+    UniversalComponent universalComponent =
+        DaggerUniversalComponent.builder()
+            .applicationModule(new ApplicationModule(firebaseApplication))
+            .build();
+    AppComponent instance =
+        DaggerAppComponent.builder()
+            .universalComponent(universalComponent)
+            .headlessInAppMessagingModule(new HeadlessInAppMessagingModule(headless))
+            .build();
+
+    FirebaseInAppMessagingDisplay firebaseInAppMessagingDisplay =
+        instance.providesFirebaseInAppMessagingUI();
+    firebaseApplication.registerActivityLifecycleCallbacks(firebaseInAppMessagingDisplay);
+    return firebaseInAppMessagingDisplay;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/BindingWrapperFactory.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/BindingWrapperFactory.java
new file mode 100644
index 000000000..1bb9af6a4
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/BindingWrapperFactory.java
@@ -0,0 +1,63 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.app.Application;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.BindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.injection.components.DaggerInAppMessageComponent;
+import com.google.firebase.inappmessaging.display.internal.injection.components.InAppMessageComponent;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.InflaterModule;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
+/** @hide */
+@Singleton
+public class BindingWrapperFactory {
+
+  private final Application application;
+
+  @Inject
+  BindingWrapperFactory(Application application) {
+    this.application = application;
+  }
+
+  public BindingWrapper createImageBindingWrapper(
+      InAppMessageLayoutConfig config, InAppMessage inAppMessage) {
+    InAppMessageComponent inAppMessageComponent =
+        DaggerInAppMessageComponent.builder()
+            .inflaterModule(new InflaterModule(inAppMessage, config, application))
+            .build();
+    return inAppMessageComponent.imageBindingWrapper();
+  }
+
+  public BindingWrapper createModalBindingWrapper(
+      InAppMessageLayoutConfig config, InAppMessage inAppMessage) {
+    InAppMessageComponent inAppMessageComponent =
+        DaggerInAppMessageComponent.builder()
+            .inflaterModule(new InflaterModule(inAppMessage, config, application))
+            .build();
+    return inAppMessageComponent.modalBindingWrapper();
+  }
+
+  public BindingWrapper createBannerBindingWrapper(
+      InAppMessageLayoutConfig config, InAppMessage inAppMessage) {
+    InAppMessageComponent inAppMessageComponent =
+        DaggerInAppMessageComponent.builder()
+            .inflaterModule(new InflaterModule(inAppMessage, config, application))
+            .build();
+    return inAppMessageComponent.bannerBindingWrapper();
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamAnimator.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamAnimator.java
new file mode 100644
index 000000000..fc33d011d
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamAnimator.java
@@ -0,0 +1,112 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.app.Application;
+import android.graphics.Point;
+import android.view.View;
+import android.view.ViewGroup;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.FirebaseAppScope;
+import javax.inject.Inject;
+
+/** @hide */
+@FirebaseAppScope
+public class FiamAnimator {
+  @Inject
+  FiamAnimator() {}
+
+  /**
+   * This method currently assumes that the passed in view has {@link ViewGroup.LayoutParams} set to
+   * WRAP_CONTENT
+   */
+  public void slideIntoView(final Application app, final View view, Position startPosition) {
+    view.setAlpha(0.0f);
+    Point start = Position.getPoint(startPosition, view);
+
+    view.animate()
+        .translationX(start.x)
+        .translationY(start.y)
+        .setDuration(1)
+        .setListener(
+            new AnimatorListenerAdapter() {
+              @Override
+              public void onAnimationEnd(Animator animation) {
+                super.onAnimationEnd(animation);
+
+                view.animate()
+                    .translationX(0)
+                    .translationY(0)
+                    .alpha(1.0f)
+                    .setDuration(
+                        app.getResources().getInteger(android.R.integer.config_longAnimTime))
+                    .setListener(null);
+              }
+            });
+  }
+
+  public void slideOutOfView(
+      final Application app,
+      final View view,
+      Position end,
+      final AnimationCompleteListener completeListener) {
+    Point start = Position.getPoint(end, view);
+
+    AnimatorListenerAdapter animatorListenerAdapter =
+        new AnimatorListenerAdapter() {
+          @Override
+          public void onAnimationEnd(Animator animation) {
+            super.onAnimationEnd(animation);
+            // Remove fiam from window only after the animation is complete
+            completeListener.onComplete();
+          }
+        };
+
+    view.animate()
+        .translationX(start.x)
+        .translationY(start.y)
+        .setDuration(app.getResources().getInteger(android.R.integer.config_longAnimTime))
+        .setListener(animatorListenerAdapter);
+  }
+
+  public enum Position {
+    LEFT,
+    RIGHT,
+    TOP,
+    BOTTOM;
+
+    private static Point getPoint(Position d, View view) {
+      view.measure(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+
+      switch (d) {
+        case LEFT:
+          return new Point(-1 * view.getMeasuredWidth(), 0);
+        case RIGHT:
+          return new Point(1 * view.getMeasuredWidth(), 0);
+        case TOP:
+          return new Point(0, -1 * view.getMeasuredHeight());
+        case BOTTOM:
+          return new Point(0, 1 * view.getMeasuredHeight());
+        default:
+          return new Point(0, -1 * view.getMeasuredHeight());
+      }
+    }
+  }
+
+  public interface AnimationCompleteListener {
+    void onComplete();
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoader.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoader.java
new file mode 100644
index 000000000..70fe795b2
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoader.java
@@ -0,0 +1,68 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.support.annotation.Nullable;
+import android.widget.ImageView;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.FirebaseAppScope;
+import com.squareup.picasso.Callback;
+import com.squareup.picasso.Picasso;
+import com.squareup.picasso.RequestCreator;
+import javax.inject.Inject;
+
+/**
+ * Image loader abstraction around the Picasso singleton to facilitate testing and injection
+ *
+ * @hide
+ */
+@FirebaseAppScope
+public class FiamImageLoader {
+  private final Picasso picasso;
+
+  @Inject
+  FiamImageLoader(Picasso picasso) {
+    this.picasso = picasso;
+  }
+
+  public FiamImageRequestCreator load(@Nullable String imageUrl) {
+    return new FiamImageRequestCreator(picasso.load(imageUrl));
+  }
+
+  public void cancelTag(Class c) {
+    picasso.cancelTag(c);
+  }
+
+  public static class FiamImageRequestCreator {
+    private final RequestCreator mRequestCreator;
+
+    public FiamImageRequestCreator(RequestCreator requestCreator) {
+      mRequestCreator = requestCreator;
+    }
+
+    public FiamImageRequestCreator placeholder(int placeholderResId) {
+      mRequestCreator.placeholder(placeholderResId);
+      return this;
+    }
+
+    public FiamImageRequestCreator tag(Class c) {
+      mRequestCreator.tag(c);
+      return this;
+    }
+
+    public void into(ImageView imageView, Callback callback) {
+      mRequestCreator.into(imageView, callback);
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamWindowManager.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamWindowManager.java
new file mode 100644
index 000000000..96362266f
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FiamWindowManager.java
@@ -0,0 +1,213 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.PixelFormat;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.view.Display;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.BindingWrapper;
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
+/**
+ * Class encapsulating the popup window into which we inflate the in app message. The window manager
+ * keeps state of the binding that is currently in view
+ *
+ * @hide
+ */
+@Singleton
+public class FiamWindowManager {
+
+  static final int DEFAULT_TYPE = WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
+
+  private BindingWrapper bindingWrapper;
+
+  @Inject
+  FiamWindowManager() {}
+
+  /** Inflate the container into a new popup window */
+  public void show(@NonNull final BindingWrapper bindingWrapper, @NonNull Activity activity) {
+    if (isFiamDisplayed()) {
+      Logging.loge("Fiam already active. Cannot show new Fiam.");
+      return;
+    }
+
+    InAppMessageLayoutConfig config = bindingWrapper.getConfig();
+    final WindowManager.LayoutParams layoutParams = getLayoutParams(config, activity);
+
+    final WindowManager windowManager = getWindowManager(activity);
+    final View rootView = bindingWrapper.getRootView();
+    windowManager.addView(rootView, layoutParams);
+
+    // Set 'window' left and right padding from the inset, this prevents
+    // anything from touching the navigation bar when in landscape.
+    Rect insetDimensions = getInsetDimensions(activity);
+    Logging.logdPair("Inset (top, bottom)", insetDimensions.top, insetDimensions.bottom);
+    Logging.logdPair("Inset (left, right)", insetDimensions.left, insetDimensions.right);
+
+    // TODO: Should use WindowInsetCompat to make sure we don't overlap with the status bar
+    //       action bar or anything else. This will become more pressing as notches
+    //       become more common on Android phones.
+
+    if (bindingWrapper.canSwipeToDismiss()) {
+      SwipeDismissTouchListener listener =
+          getSwipeListener(config, bindingWrapper, windowManager, layoutParams);
+      bindingWrapper.getDialogView().setOnTouchListener(listener);
+    }
+
+    this.bindingWrapper = bindingWrapper;
+  }
+
+  public boolean isFiamDisplayed() {
+    return bindingWrapper != null;
+  }
+
+  /** Removes the in app message from the surrounding window */
+  public void destroy(@NonNull Activity activity) {
+    if (isFiamDisplayed()) {
+      getWindowManager(activity).removeViewImmediate(bindingWrapper.getRootView());
+      bindingWrapper = null;
+    }
+  }
+
+  private WindowManager.LayoutParams getLayoutParams(
+      @NonNull InAppMessageLayoutConfig layoutConfig, @NonNull Activity activity) {
+    final WindowManager.LayoutParams layoutParams =
+        new WindowManager.LayoutParams(
+            layoutConfig.windowWidth(),
+            layoutConfig.windowHeight(),
+            DEFAULT_TYPE,
+            layoutConfig.windowFlag(),
+            PixelFormat.TRANSLUCENT);
+
+    // If the window gravity is TOP, we move down to avoid hitting the status bar (if shown).
+    Rect insetDimensions = getInsetDimensions(activity);
+    if ((layoutConfig.viewWindowGravity() & Gravity.TOP) == Gravity.TOP) {
+      layoutParams.y = insetDimensions.top;
+    }
+
+    layoutParams.dimAmount = 0.3f;
+    layoutParams.gravity = layoutConfig.viewWindowGravity();
+    layoutParams.windowAnimations = 0;
+
+    return layoutParams;
+  }
+
+  private WindowManager getWindowManager(@NonNull Activity activity) {
+    return (WindowManager) activity.getSystemService(Context.WINDOW_SERVICE);
+  }
+
+  /**
+   * Get the total size of the display in pixels, with no exclusions. For example on a Pixel this
+   * would return 1920x1080 rather than the content frame which gives up 63 pixels to the status bar
+   * and 126 pixels to the navigation bar.
+   */
+  private Point getDisplaySize(@NonNull Activity activity) {
+    Point size = new Point();
+
+    Display display = getWindowManager(activity).getDefaultDisplay();
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+      display.getRealSize(size);
+    } else {
+      display.getSize(size);
+    }
+
+    return size;
+  }
+
+  /**
+   * Determine how much content should be inset on all sides in order to not overlap with system UI.
+   *
+   * <p>Ex: Pixel in portrait top = 63 bottom = 126 left = 0 right = 0
+   *
+   * <p>Ex: Pixel in landscape, nav bar on right top = 63 bottom = 0 left = 0 right = 126
+   */
+  private Rect getInsetDimensions(@NonNull Activity activity) {
+    Rect padding = new Rect();
+
+    Rect visibleFrame = getVisibleFrame(activity);
+    Point size = getDisplaySize(activity);
+
+    padding.top = visibleFrame.top;
+    padding.left = visibleFrame.left;
+    padding.right = size.x - visibleFrame.right;
+    padding.bottom = size.y - visibleFrame.bottom;
+
+    return padding;
+  }
+
+  private Rect getVisibleFrame(@NonNull Activity activity) {
+    Rect visibleFrame = new Rect();
+
+    Window window = activity.getWindow();
+    window.getDecorView().getWindowVisibleDisplayFrame(visibleFrame);
+
+    return visibleFrame;
+  }
+
+  /** Get a swipe listener, using knowledge of the LayoutConfig to dictate the behavior. */
+  private SwipeDismissTouchListener getSwipeListener(
+      InAppMessageLayoutConfig layoutConfig,
+      final BindingWrapper bindingWrapper,
+      final WindowManager windowManager,
+      final WindowManager.LayoutParams layoutParams) {
+
+    // The dismiss callbacks are the same in any case.
+    SwipeDismissTouchListener.DismissCallbacks callbacks =
+        new SwipeDismissTouchListener.DismissCallbacks() {
+
+          @Override
+          public boolean canDismiss(Object token) {
+            return true;
+          }
+
+          @Override
+          public void onDismiss(View view, Object token) {
+            if (bindingWrapper.getDismissListener() != null) {
+              bindingWrapper.getDismissListener().onClick(view);
+            }
+          }
+        };
+
+    if (layoutConfig.windowWidth() == ViewGroup.LayoutParams.MATCH_PARENT) {
+      // When we are using the entire view width we can use the default behavior
+      return new SwipeDismissTouchListener(bindingWrapper.getDialogView(), null, callbacks);
+    } else {
+      // When we are not using the entire view width we need to use the WindowManager to animate.
+      return new SwipeDismissTouchListener(bindingWrapper.getDialogView(), null, callbacks) {
+        @Override
+        protected float getTranslationX() {
+          return layoutParams.x;
+        }
+
+        @Override
+        protected void setTranslationX(float translationX) {
+          layoutParams.x = (int) translationX;
+          windowManager.updateViewLayout(bindingWrapper.getRootView(), layoutParams);
+        }
+      };
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FirebaseInAppMessagingDisplayImpl.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FirebaseInAppMessagingDisplayImpl.java
new file mode 100644
index 000000000..c5f5a4241
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/FirebaseInAppMessagingDisplayImpl.java
@@ -0,0 +1,75 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.app.Activity;
+import android.app.Application;
+import android.os.Bundle;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplay;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplayCallbacks;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+
+/** @hide */
+public class FirebaseInAppMessagingDisplayImpl
+    implements FirebaseInAppMessagingDisplay, Application.ActivityLifecycleCallbacks {
+
+  public FirebaseInAppMessagingDisplayImpl() {}
+
+  @Override
+  public void displayMessage(
+      InAppMessage inAppMessage, FirebaseInAppMessagingDisplayCallbacks callbacks) {}
+
+  /** @hide */
+  @Override
+  public void onActivityCreated(final Activity activity, Bundle bundle) {
+    Logging.logd("Created activity: " + activity.getClass().getName());
+  }
+
+  /** @hide */
+  @Override
+  public void onActivityPaused(Activity activity) {
+    Logging.logd("Pausing activity: " + activity.getClass().getName());
+  }
+
+  /** @hide */
+  @Override
+  public void onActivityStopped(Activity activity) {
+    Logging.logd("Stopped activity: " + activity.getClass().getName());
+  }
+
+  /** @hide */
+  @Override
+  public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {
+    Logging.logd("SavedInstance activity: " + activity.getClass().getName());
+  }
+
+  /** @hide */
+  @Override
+  public void onActivityDestroyed(Activity activity) {
+    Logging.logd("Destroyed activity: " + activity.getClass().getName());
+  }
+
+  /** @hide */
+  @Override
+  public void onActivityStarted(Activity activity) {
+    Logging.logd("Started activity: " + activity.getClass().getName());
+  }
+
+  /** @hide */
+  @Override
+  public void onActivityResumed(Activity activity) {
+    Logging.logd("Resumed activity: " + activity.getClass().getName());
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/InAppMessageLayoutConfig.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/InAppMessageLayoutConfig.java
new file mode 100644
index 000000000..d10dd4439
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/InAppMessageLayoutConfig.java
@@ -0,0 +1,193 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+/**
+ * Configurations for in app message layouts
+ *
+ * @hide
+ */
+public class InAppMessageLayoutConfig {
+
+  private Float maxImageHeightWeight;
+  private Float maxImageWidthWeight;
+  private Float maxBodyHeightWeight;
+  private Float maxBodyWidthWeight;
+  private Integer maxDialogHeightPx;
+  private Integer maxDialogWidthPx;
+  private Integer windowFlag;
+  private Integer viewWindowGravity;
+  private Integer windowWidth;
+  private Integer windowHeight;
+  private Boolean backgroundEnabled;
+  private Boolean animate;
+  private Boolean autoDismiss;;
+
+  @NonNull
+  public static Builder builder() {
+    return new Builder();
+  }
+
+  public Float maxImageHeightWeight() {
+    return maxImageHeightWeight;
+  }
+
+  public Float maxImageWidthWeight() {
+    return maxImageWidthWeight;
+  }
+
+  @Nullable
+  public Float maxBodyHeightWeight() {
+    return maxBodyHeightWeight;
+  }
+
+  @Nullable
+  public Float maxBodyWidthWeight() {
+    return maxBodyWidthWeight;
+  }
+
+  public Integer maxDialogHeightPx() {
+    return maxDialogHeightPx;
+  }
+
+  public Integer maxDialogWidthPx() {
+    return maxDialogWidthPx;
+  }
+
+  public Integer windowFlag() {
+    return windowFlag;
+  }
+
+  public Integer viewWindowGravity() {
+    return viewWindowGravity;
+  }
+
+  public Integer windowWidth() {
+    return windowWidth;
+  }
+
+  public Integer windowHeight() {
+    return windowHeight;
+  }
+
+  public Boolean backgroundEnabled() {
+    return backgroundEnabled;
+  }
+
+  public Boolean animate() {
+    return animate;
+  }
+
+  public Boolean autoDismiss() {
+    return autoDismiss;
+  }
+
+  public int getMaxImageHeight() {
+    return (int) (maxImageHeightWeight() * maxDialogHeightPx());
+  }
+
+  public int getMaxImageWidth() {
+    return (int) (maxImageWidthWeight() * maxDialogWidthPx());
+  }
+
+  public int getMaxBodyHeight() {
+    return (int) (maxBodyHeightWeight() * maxDialogHeightPx());
+  }
+
+  public int getMaxBodyWidth() {
+    return (int) (maxBodyWidthWeight() * maxDialogWidthPx());
+  }
+
+  public static class Builder {
+
+    private final InAppMessageLayoutConfig config;
+
+    public Builder() {
+      config = new InAppMessageLayoutConfig();
+    }
+
+    public Builder setMaxImageHeightWeight(Float maxImageHeightWeight) {
+      config.maxImageHeightWeight = maxImageHeightWeight;
+      return this;
+    }
+
+    public Builder setMaxImageWidthWeight(Float maxImageWidthWeight) {
+      config.maxImageWidthWeight = maxImageWidthWeight;
+      return this;
+    }
+
+    public Builder setMaxBodyHeightWeight(Float maxBodyHeightWeight) {
+      config.maxBodyHeightWeight = maxBodyHeightWeight;
+      return this;
+    }
+
+    public Builder setMaxBodyWidthWeight(Float maxBodyWidthWeight) {
+      config.maxBodyWidthWeight = maxBodyWidthWeight;
+      return this;
+    }
+
+    public Builder setMaxDialogHeightPx(Integer maxDialogHeightPx) {
+      config.maxDialogHeightPx = maxDialogHeightPx;
+      return this;
+    }
+
+    public Builder setMaxDialogWidthPx(Integer maxDialogWidthPx) {
+      config.maxDialogWidthPx = maxDialogWidthPx;
+      return this;
+    }
+
+    public Builder setViewWindowGravity(Integer viewWindowGravity) {
+      config.viewWindowGravity = viewWindowGravity;
+      return this;
+    }
+
+    public Builder setWindowFlag(Integer windowFlag) {
+      config.windowFlag = windowFlag;
+      return this;
+    }
+
+    public Builder setWindowWidth(Integer windowWidth) {
+      config.windowWidth = windowWidth;
+      return this;
+    }
+
+    public Builder setWindowHeight(Integer windowHeight) {
+      config.windowHeight = windowHeight;
+      return this;
+    }
+
+    public Builder setBackgroundEnabled(Boolean backgroundEnabled) {
+      config.backgroundEnabled = backgroundEnabled;
+      return this;
+    }
+
+    public Builder setAnimate(Boolean animate) {
+      config.animate = animate;
+      return this;
+    }
+
+    public Builder setAutoDismiss(Boolean autoDismiss) {
+      config.autoDismiss = autoDismiss;
+      return this;
+    }
+
+    public InAppMessageLayoutConfig build() {
+      return config;
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/Logging.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/Logging.java
new file mode 100644
index 000000000..a2c4f594c
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/Logging.java
@@ -0,0 +1,58 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.util.Log;
+import com.google.firebase.inappmessaging.display.BuildConfig;
+
+/** @hide */
+public class Logging {
+
+  private static final String TAG = "FIAM.Display";
+
+  /** Log a number with a label. */
+  public static void logdNumber(String label, float num) {
+    logd(label + ": " + num);
+  }
+
+  /** Log two numbers as a coordinate pair, with a label. */
+  public static void logdPair(String label, float fst, float snd) {
+    logd(label + ": (" + fst + ", " + snd + ")");
+  }
+
+  /** Log a big header, */
+  public static void logdHeader(String label) {
+    logd("============ " + label + " ============");
+  }
+
+  /** Log a message if in debug mode. */
+  public static void logd(String message) {
+    if (BuildConfig.DEBUG || Log.isLoggable(TAG, Log.DEBUG)) {
+      Log.d(TAG, message);
+    }
+  }
+
+  /** Log error messages normally but add a consistent TAG */
+  public static void loge(String message) {
+    Log.e(TAG, message);
+  }
+
+  /** Log info messages normally but add a consistent TAG */
+  public static void logi(String message) {
+    if (Log.isLoggable(TAG, Log.INFO)) {
+      Log.i(TAG, message);
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/OnSwipeUpListener.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/OnSwipeUpListener.java
new file mode 100644
index 000000000..2cdfb002b
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/OnSwipeUpListener.java
@@ -0,0 +1,43 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+
+/** @hide */
+public class OnSwipeUpListener extends GestureDetector.SimpleOnGestureListener {
+  private static final int SWIPE_MIN_DISTANCE = 120;
+  private static final int SWIPE_MAX_OFF_PATH = 250;
+  private static final int SWIPE_THRESHOLD_VELOCITY = 200;
+
+  @Override
+  public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+    if (Math.abs(e1.getX() - e2.getX()) > SWIPE_MAX_OFF_PATH) {
+      return false;
+    }
+
+    if (e1.getY() - e2.getY() > SWIPE_MIN_DISTANCE
+        && Math.abs(velocityY) > SWIPE_THRESHOLD_VELOCITY) {
+      return onSwipeUp();
+    }
+
+    return false;
+  }
+
+  public boolean onSwipeUp() {
+    return false;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/PicassoErrorListener.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/PicassoErrorListener.java
new file mode 100644
index 000000000..da70e6cdf
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/PicassoErrorListener.java
@@ -0,0 +1,63 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+// Picasso 's api forces us to listen to errors only using a global listener set on the picasso
+// singleton. Since we initialize picasso from a static context and the in app message param to the
+// logError method is not available statically, we are forced to introduce a error listener with
+// mutable state so that the error from picasso can be translated to a logError on
+// fiam headless, with the in app message as a parameter
+
+import android.net.Uri;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplayCallbacks;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplayCallbacks.InAppMessagingErrorReason;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.FirebaseAppScope;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.squareup.picasso.Downloader;
+import com.squareup.picasso.Picasso;
+import java.io.IOException;
+import javax.inject.Inject;
+
+/** @hide */
+@FirebaseAppScope
+public class PicassoErrorListener implements Picasso.Listener {
+  private InAppMessage inAppMessage;
+  private FirebaseInAppMessagingDisplayCallbacks displayCallbacks;
+
+  @Inject
+  PicassoErrorListener() {}
+
+  public void setInAppMessage(
+      InAppMessage inAppMessage, FirebaseInAppMessagingDisplayCallbacks displayCallbacks) {
+    this.inAppMessage = inAppMessage;
+    this.displayCallbacks = displayCallbacks;
+  }
+
+  @Override
+  public void onImageLoadFailed(Picasso picasso, Uri uri, Exception exception) {
+    if (inAppMessage != null && displayCallbacks != null) {
+      if (exception instanceof Downloader.ResponseException) {
+        displayCallbacks.displayErrorEncountered(InAppMessagingErrorReason.IMAGE_FETCH_ERROR);
+      } else if (exception instanceof IOException
+          && exception.getLocalizedMessage().contains("Failed to decode")) {
+        displayCallbacks.displayErrorEncountered(
+            InAppMessagingErrorReason.IMAGE_UNSUPPORTED_FORMAT);
+      } else {
+        displayCallbacks.displayErrorEncountered(
+            InAppMessagingErrorReason.UNSPECIFIED_RENDER_ERROR);
+      }
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/RenewableTimer.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/RenewableTimer.java
new file mode 100644
index 000000000..d1a20865d
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/RenewableTimer.java
@@ -0,0 +1,58 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.os.CountDownTimer;
+import javax.inject.Inject;
+
+/**
+ * Countdown timers cannot be renewed and need to be repeated created for each usage making it hard
+ * to test without a factory. This timer encapsulates what could have been a factory
+ *
+ * <p>Callers are expected to cancel timers before starting new ones, failing which the strong
+ * callback references could lead to memory leaks
+ *
+ * @hide
+ */
+public class RenewableTimer {
+  private CountDownTimer mCountDownTimer;
+
+  @Inject
+  RenewableTimer() {}
+
+  public void start(final Callback c, long duration, long interval) {
+    mCountDownTimer =
+        new CountDownTimer(duration, interval) {
+          @Override
+          public void onTick(long l) {}
+
+          @Override
+          public void onFinish() {
+            c.onFinish();
+          }
+        }.start();
+  }
+
+  public void cancel() {
+    if (mCountDownTimer != null) {
+      mCountDownTimer.cancel();
+      mCountDownTimer = null;
+    }
+  }
+
+  public interface Callback {
+    void onFinish();
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/ResizableImageView.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/ResizableImageView.java
new file mode 100644
index 000000000..185f0a1ad
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/ResizableImageView.java
@@ -0,0 +1,157 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.util.AttributeSet;
+import android.util.DisplayMetrics;
+
+/**
+ * The purpose of this Image view is best explained in the SO post:
+ * https://stackoverflow.com/questions/8232608/fit-image-into-imageview-keep-aspect-ratio-and-then-resize-imageview-to-image-d
+ * Problem: Given an image of any size, how do we fit it into an image view of some other size such
+ * that its larger dimension is scaled to fit inside the image view and the smaller dimension is
+ * shrunk to preserve its aspect ratio. While this can be achieved without the help of this custom
+ * view, the problematic behavior is that the image view does not shrink to the lower dimension
+ * resulting in an empty space surrounding the image view.
+ *
+ * @hide
+ */
+// TODO (ashwinraghav) tests pending
+public class ResizableImageView extends android.support.v7.widget.AppCompatImageView {
+  private int mDensityDpi;
+
+  public ResizableImageView(Context context) {
+    super(context);
+    init(context);
+  }
+
+  public ResizableImageView(Context context, AttributeSet attrs) {
+    super(context, attrs);
+    init(context);
+  }
+
+  public ResizableImageView(Context context, AttributeSet attrs, int defStyleAttr) {
+    super(context, attrs, defStyleAttr);
+    init(context);
+  }
+
+  private void init(@NonNull Context context) {
+    DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
+    mDensityDpi = (int) (displayMetrics.density * 160f);
+  }
+
+  @Override
+  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN) {
+      Drawable d = getDrawable();
+      boolean adjustViewBounds = getAdjustViewBounds();
+
+      if (d != null && adjustViewBounds) {
+        scalePxToDp(d);
+        checkMinDim();
+      }
+    }
+  }
+
+  private void checkMinDim() {
+    int minWidth = Math.max(getMinimumWidth(), getSuggestedMinimumWidth());
+    int minHeight = Math.max(getMinimumHeight(), getSuggestedMinimumHeight());
+    int widthSpec = getMeasuredWidth();
+    int heightSpec = getMeasuredHeight();
+
+    Logging.logdPair("Image: min width, height", minWidth, minHeight);
+    Logging.logdPair("Image: actual width, height", widthSpec, heightSpec);
+
+    // Scale TOP if the size is too small
+    float scaleW = 1.0f;
+    float scaleH = 1.0f;
+
+    if (widthSpec < minWidth) {
+      scaleW = (float) minWidth / (float) widthSpec;
+    }
+    if (heightSpec < minHeight) {
+      scaleH = (float) minHeight / (float) heightSpec;
+    }
+
+    float scale = (scaleW > scaleH) ? scaleW : scaleH;
+
+    if (scale > 1.0) {
+      int targetW = (int) Math.ceil(widthSpec * scale);
+      int targetH = (int) Math.ceil(heightSpec * scale);
+      Logging.logd(
+          "Measured dimension ("
+              + widthSpec
+              + "x"
+              + heightSpec
+              + ") too small.  Resizing to "
+              + targetW
+              + "x"
+              + targetH);
+      Dimensions t = bound(targetW, targetH);
+      setMeasuredDimension(t.w, t.h);
+    }
+  }
+
+  private void scalePxToDp(Drawable d) {
+    int widthSpec = d.getIntrinsicWidth();
+    int heightSpec = d.getIntrinsicHeight();
+
+    Logging.logdPair("Image: intrinsic width, height", widthSpec, heightSpec);
+
+    // Convert 1px to 1dp while keeping bounds
+    int targetW = (int) Math.ceil(widthSpec * mDensityDpi / 160);
+    int targetH = (int) Math.ceil(heightSpec * mDensityDpi / 160);
+
+    Dimensions t = bound(targetW, targetH);
+
+    Logging.logdPair("Image: new target dimensions", t.w, t.h);
+    setMeasuredDimension(t.w, t.h);
+  }
+
+  private Dimensions bound(int targetW, int targetH) {
+    int maxWidth = getMaxWidth();
+    int maxHeight = getMaxHeight();
+
+    if (targetW > maxWidth) {
+      Logging.logdNumber("Image: capping width", maxWidth);
+      targetH = targetH * maxWidth / targetW;
+      targetW = maxWidth;
+    }
+
+    if (targetH > maxHeight) {
+      Logging.logdNumber("Image: capping height", maxHeight);
+      targetW = targetW * maxHeight / targetH;
+      targetH = maxHeight;
+    }
+
+    return new Dimensions(targetW, targetH);
+  }
+
+  /** Basically a Pair of integers */
+  private static class Dimensions {
+    final int w;
+    final int h;
+
+    private Dimensions(int w, int h) {
+      this.w = w;
+      this.h = h;
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/SwipeDismissTouchListener.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/SwipeDismissTouchListener.java
new file mode 100644
index 000000000..81fd02fa0
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/SwipeDismissTouchListener.java
@@ -0,0 +1,341 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/*
+ * Copyright 2013 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.ValueAnimator;
+import android.annotation.SuppressLint;
+import android.support.annotation.Nullable;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.ViewGroup;
+
+/**
+ * A {@link View.OnTouchListener} that makes any {@link View} dismissable when the user swipes
+ * (drags her finger) horizontally across the view.
+ *
+ * <p>Example usage:
+ *
+ * <pre>
+ * view.setOnTouchListener(new SwipeDismissTouchListener(
+ *         view,
+ *         null, // Optional token/cookie object
+ *         new SwipeDismissTouchListener.OnDismissCallback() {
+ *             public void onDismiss(View view, Object token) {
+ *                 parent.removeView(view);
+ *             }
+ *         }));
+ * </pre>
+ *
+ * <p>This class Requires API level 12 or later due to use of {@link
+ * android.view.ViewPropertyAnimator}.
+ *
+ * @hide
+ */
+public class SwipeDismissTouchListener implements View.OnTouchListener {
+  // Cached ViewConfiguration and system-wide constant values
+  private int mSlop;
+  private int mMinFlingVelocity;
+  private int mMaxFlingVelocity;
+  private long mAnimationTime;
+
+  // Fixed properties
+  private View mView;
+  private DismissCallbacks mDismissCallbacks;
+  private int mViewWidth = 1; // 1 and not 0 to prevent dividing by zero
+
+  // Transient properties
+  private float mDownX;
+  private float mDownY;
+  private boolean mSwiping;
+  private int mSwipingSlop;
+  private Object mToken;
+  private VelocityTracker mVelocityTracker;
+  private float mTranslationX;
+
+  /**
+   * The callback interface used by {@link SwipeDismissTouchListener} to inform its client about a
+   * successful dismissal of the view for which it was created.
+   */
+  public interface DismissCallbacks {
+    /** Called to determine whether the view can be dismissed. */
+    boolean canDismiss(Object token);
+
+    /**
+     * Called when the user has indicated they she would like to dismiss the view.
+     *
+     * @param view The originating {@link View} to be dismissed.
+     * @param token The optional token passed to this object's constructor.
+     */
+    void onDismiss(View view, Object token);
+  }
+
+  /**
+   * Constructs a new swipe-to-dismiss touch listener for the given view.
+   *
+   * @param view The view to make dismissable.
+   * @param token An optional token/cookie object to be passed through to the callback.
+   * @param callbacks The callback to trigger when the user has indicated that she would like to
+   *     dismiss this view.
+   */
+  public SwipeDismissTouchListener(View view, Object token, DismissCallbacks callbacks) {
+    ViewConfiguration vc = ViewConfiguration.get(view.getContext());
+    mSlop = vc.getScaledTouchSlop();
+    mMinFlingVelocity = vc.getScaledMinimumFlingVelocity() * 16;
+    mMaxFlingVelocity = vc.getScaledMaximumFlingVelocity();
+    mAnimationTime =
+        view.getContext().getResources().getInteger(android.R.integer.config_shortAnimTime);
+    mView = view;
+    mToken = token;
+    mDismissCallbacks = callbacks;
+  }
+
+  @Override
+  @SuppressLint("ClickableViewAccessibility")
+  public boolean onTouch(View view, MotionEvent motionEvent) {
+    // offset because the view is translated during swipe
+    motionEvent.offsetLocation(mTranslationX, 0);
+
+    if (mViewWidth < 2) {
+      mViewWidth = mView.getWidth();
+    }
+
+    switch (motionEvent.getActionMasked()) {
+      case MotionEvent.ACTION_DOWN:
+        {
+          // TODO: ensure this is a finger, and set a flag
+          mDownX = motionEvent.getRawX();
+          mDownY = motionEvent.getRawY();
+          if (mDismissCallbacks.canDismiss(mToken)) {
+            mVelocityTracker = VelocityTracker.obtain();
+            mVelocityTracker.addMovement(motionEvent);
+          }
+          return false;
+        }
+
+      case MotionEvent.ACTION_UP:
+        {
+          if (mVelocityTracker == null) {
+            break;
+          }
+
+          float deltaX = motionEvent.getRawX() - mDownX;
+          mVelocityTracker.addMovement(motionEvent);
+          mVelocityTracker.computeCurrentVelocity(1000);
+          float velocityX = mVelocityTracker.getXVelocity();
+          float absVelocityX = Math.abs(velocityX);
+          float absVelocityY = Math.abs(mVelocityTracker.getYVelocity());
+          boolean dismiss = false;
+          boolean dismissRight = false;
+          if (Math.abs(deltaX) > mViewWidth / 2 && mSwiping) {
+            dismiss = true;
+            dismissRight = deltaX > 0;
+          } else if (mMinFlingVelocity <= absVelocityX
+              && absVelocityX <= mMaxFlingVelocity
+              && absVelocityY < absVelocityX
+              && absVelocityY < absVelocityX
+              && mSwiping) {
+            // dismiss only if flinging in the same direction as dragging
+            dismiss = (velocityX < 0) == (deltaX < 0);
+            dismissRight = mVelocityTracker.getXVelocity() > 0;
+          }
+          if (dismiss) {
+            // dismiss
+            startDismissAnimation(dismissRight);
+          } else if (mSwiping) {
+            // cancel
+            startCancelAnimation();
+          }
+
+          if (mVelocityTracker != null) {
+            mVelocityTracker.recycle();
+          }
+          mVelocityTracker = null;
+          mTranslationX = 0;
+          mDownX = 0;
+          mDownY = 0;
+          mSwiping = false;
+          break;
+        }
+
+      case MotionEvent.ACTION_CANCEL:
+        {
+          if (mVelocityTracker == null) {
+            break;
+          }
+          startCancelAnimation();
+          mVelocityTracker.recycle();
+          mVelocityTracker = null;
+          mTranslationX = 0;
+          mDownX = 0;
+          mDownY = 0;
+          mSwiping = false;
+          break;
+        }
+
+      case MotionEvent.ACTION_MOVE:
+        {
+          if (mVelocityTracker == null) {
+            break;
+          }
+
+          mVelocityTracker.addMovement(motionEvent);
+          float deltaX = motionEvent.getRawX() - mDownX;
+          float deltaY = motionEvent.getRawY() - mDownY;
+          if (Math.abs(deltaX) > mSlop && Math.abs(deltaY) < Math.abs(deltaX) / 2) {
+            mSwiping = true;
+            mSwipingSlop = (deltaX > 0 ? mSlop : -mSlop);
+            mView.getParent().requestDisallowInterceptTouchEvent(true);
+
+            // Cancel listview's touch
+            MotionEvent cancelEvent = MotionEvent.obtain(motionEvent);
+            cancelEvent.setAction(
+                MotionEvent.ACTION_CANCEL
+                    | (motionEvent.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
+            mView.onTouchEvent(cancelEvent);
+            cancelEvent.recycle();
+          }
+
+          if (mSwiping) {
+            mTranslationX = deltaX;
+            setTranslationX(deltaX - mSwipingSlop);
+            // TODO: use an ease-out interpolator or such
+            setAlpha(Math.max(0f, Math.min(1f, 1f - 2f * Math.abs(deltaX) / mViewWidth)));
+            return true;
+          }
+          break;
+        }
+    }
+    return false;
+  }
+
+  protected void setTranslationX(float translationX) {
+    mView.setTranslationX(translationX);
+  }
+
+  protected float getTranslationX() {
+    return mView.getTranslationX();
+  }
+
+  protected void setAlpha(float alpha) {
+    mView.setAlpha(alpha);
+  }
+
+  protected void startDismissAnimation(boolean dismissRight) {
+    // Animate the view from the current X position to the edge, while also fading to 0 opacity.
+    final float endTranslation = dismissRight ? mViewWidth : -mViewWidth;
+    final float endAlpha = 0;
+
+    animateTo(
+        endTranslation,
+        endAlpha,
+        new AnimatorListenerAdapter() {
+          @Override
+          public void onAnimationEnd(Animator animation) {
+            performDismiss();
+          }
+        });
+  }
+
+  protected void startCancelAnimation() {
+    // Animate the view from current X position to x=0, also raise the opacity back to 1.
+    animateTo(0, 1, null);
+  }
+
+  private void animateTo(
+      float translationX, float alpha, @Nullable AnimatorListenerAdapter listener) {
+    // Animate the view from the current X position to the edge, while also fading to 0 opacity.
+    final float beginTranslation = getTranslationX();
+    final float translationDiff = (translationX - beginTranslation);
+
+    final float beginAlpha = mView.getAlpha();
+    final float alphaDiff = (alpha - beginAlpha);
+
+    ValueAnimator animator = ValueAnimator.ofFloat(0, 1);
+    animator.setDuration(mAnimationTime);
+
+    animator.addUpdateListener(
+        new ValueAnimator.AnimatorUpdateListener() {
+          @Override
+          public void onAnimationUpdate(ValueAnimator valueAnimator) {
+            float translationX =
+                beginTranslation + (valueAnimator.getAnimatedFraction() * translationDiff);
+            float alpha = beginAlpha + (valueAnimator.getAnimatedFraction() * alphaDiff);
+            setTranslationX(translationX);
+            setAlpha(alpha);
+          }
+        });
+
+    if (listener != null) {
+      animator.addListener(listener);
+    }
+
+    animator.start();
+  }
+
+  private void performDismiss() {
+    // Animate the dismissed view to zero-height and then fire the dismiss callback.
+    // This triggers layout on each animation frame; in the future we may want to do something
+    // smarter and more performant.
+
+    final ViewGroup.LayoutParams lp = mView.getLayoutParams();
+    final int originalHeight = mView.getHeight();
+
+    ValueAnimator animator = ValueAnimator.ofInt(originalHeight, 1).setDuration(mAnimationTime);
+
+    animator.addListener(
+        new AnimatorListenerAdapter() {
+          @Override
+          public void onAnimationEnd(Animator animation) {
+            mDismissCallbacks.onDismiss(mView, mToken);
+            // Reset view presentation
+            mView.setAlpha(1f);
+            mView.setTranslationX(0);
+            lp.height = originalHeight;
+            mView.setLayoutParams(lp);
+          }
+        });
+
+    animator.addUpdateListener(
+        new ValueAnimator.AnimatorUpdateListener() {
+          @Override
+          public void onAnimationUpdate(ValueAnimator valueAnimator) {
+            lp.height = (Integer) valueAnimator.getAnimatedValue();
+            mView.setLayoutParams(lp);
+          }
+        });
+
+    animator.start();
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BannerBindingWrapper.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BannerBindingWrapper.java
new file mode 100644
index 000000000..64544a59a
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BannerBindingWrapper.java
@@ -0,0 +1,167 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.bindingwrappers;
+
+import android.graphics.Color;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RestrictTo;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.google.firebase.inappmessaging.display.R;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.ResizableImageView;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.InAppMessageScope;
+import com.google.firebase.inappmessaging.display.internal.layout.FiamFrameLayout;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import javax.inject.Inject;
+
+/** @hide */
+@InAppMessageScope
+@SuppressWarnings("Convert2Lambda")
+public class BannerBindingWrapper extends BindingWrapper {
+
+  private FiamFrameLayout bannerRoot;
+  private ViewGroup bannerContentRoot;
+
+  private TextView bannerBody;
+  private ResizableImageView bannerImage;
+  private TextView bannerTitle;
+
+  private View.OnClickListener mDismissListener;
+
+  @Inject
+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
+  // TODO: Re-order this constructor
+  public BannerBindingWrapper(
+      InAppMessage message, LayoutInflater inflater, InAppMessageLayoutConfig config) {
+    super(config, inflater, message);
+  }
+
+  @Nullable
+  @Override
+  public ViewTreeObserver.OnGlobalLayoutListener inflate(
+      View.OnClickListener actionListener, View.OnClickListener dismissOnClickListener) {
+
+    View root = inflater.inflate(R.layout.banner, null);
+    bannerRoot = root.findViewById(R.id.banner_root);
+    bannerContentRoot = root.findViewById(R.id.banner_content_root);
+    bannerBody = root.findViewById(R.id.banner_body);
+    bannerImage = root.findViewById(R.id.banner_image);
+    bannerTitle = root.findViewById(R.id.banner_title);
+
+    setMessage(message);
+    setLayoutConfig(config);
+    setSwipeDismissListener(dismissOnClickListener);
+    setActionListener(actionListener);
+
+    return null;
+  }
+
+  private void setMessage(@NonNull InAppMessage message) {
+    if (!TextUtils.isEmpty(message.getBackgroundHexColor())) {
+      setGradientDrawableBgColor(bannerContentRoot, message.getBackgroundHexColor());
+    }
+
+    bannerImage.setVisibility(TextUtils.isEmpty(message.getImageUrl()) ? View.GONE : View.VISIBLE);
+
+    if (message.getTitle() != null) {
+      if (!TextUtils.isEmpty(message.getTitle().getText())) {
+        bannerTitle.setText(message.getTitle().getText());
+      }
+
+      if (!TextUtils.isEmpty(message.getTitle().getHexColor())) {
+        bannerTitle.setTextColor(Color.parseColor(message.getTitle().getHexColor()));
+      }
+    }
+
+    if (message.getBody() != null) {
+      if (!TextUtils.isEmpty(message.getBody().getText())) {
+        bannerBody.setText(message.getBody().getText());
+      }
+
+      if (!TextUtils.isEmpty(message.getBody().getHexColor())) {
+        bannerBody.setTextColor(Color.parseColor(message.getBody().getHexColor()));
+      }
+    }
+  }
+
+  private void setLayoutConfig(InAppMessageLayoutConfig layoutConfig) {
+    // TODO: Document why the width is the min of the max width and height
+    int bannerWidth = Math.min(layoutConfig.maxDialogWidthPx(), layoutConfig.maxDialogHeightPx());
+
+    ViewGroup.LayoutParams params = bannerRoot.getLayoutParams();
+    if (params == null) {
+      params =
+          new ViewGroup.LayoutParams(
+              ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+    }
+    params.width = bannerWidth;
+
+    bannerRoot.setLayoutParams(params);
+
+    bannerImage.setMaxHeight(layoutConfig.getMaxImageHeight());
+    bannerImage.setMaxWidth(layoutConfig.getMaxImageWidth());
+  }
+
+  private void setSwipeDismissListener(final View.OnClickListener dismissListener) {
+    mDismissListener = dismissListener;
+    bannerRoot.setDismissListener(mDismissListener);
+  }
+
+  private void setActionListener(View.OnClickListener actionListener) {
+    bannerContentRoot.setOnClickListener(actionListener);
+  }
+
+  @NonNull
+  @Override
+  public InAppMessageLayoutConfig getConfig() {
+    return config;
+  }
+
+  @NonNull
+  @Override
+  public ImageView getImageView() {
+    return bannerImage;
+  }
+
+  @NonNull
+  @Override
+  public ViewGroup getRootView() {
+    return bannerRoot;
+  }
+
+  @NonNull
+  @Override
+  public View getDialogView() {
+    return bannerContentRoot;
+  }
+
+  @Nullable
+  @Override
+  public View.OnClickListener getDismissListener() {
+    return mDismissListener;
+  }
+
+  @Override
+  public boolean canSwipeToDismiss() {
+    return true;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BindingWrapper.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BindingWrapper.java
new file mode 100644
index 000000000..1c09fc426
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/BindingWrapper.java
@@ -0,0 +1,87 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.bindingwrappers;
+
+import android.graphics.Color;
+import android.graphics.drawable.GradientDrawable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver.OnGlobalLayoutListener;
+import android.widget.ImageView;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.Logging;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+
+/**
+ * View container for all in app message layouts This container serves as an abstraction around
+ * bindings created by individual views.
+ *
+ * @hide
+ */
+public abstract class BindingWrapper {
+  protected final InAppMessage message;
+  final InAppMessageLayoutConfig config;
+  final LayoutInflater inflater;
+
+  protected BindingWrapper(
+      InAppMessageLayoutConfig config, LayoutInflater inflater, InAppMessage message) {
+    this.config = config;
+    this.inflater = inflater;
+    this.message = message;
+  }
+
+  @NonNull
+  public abstract ImageView getImageView();
+
+  @NonNull
+  public abstract ViewGroup getRootView();
+
+  @NonNull
+  public abstract View getDialogView();
+
+  @Nullable
+  public abstract OnGlobalLayoutListener inflate(
+      OnClickListener actionListener, OnClickListener dismissOnClickListener);
+
+  public boolean canSwipeToDismiss() {
+    return false;
+  }
+
+  @Nullable
+  public OnClickListener getDismissListener() {
+    return null;
+  };
+
+  @NonNull
+  public InAppMessageLayoutConfig getConfig() {
+    return config;
+  }
+
+  protected void setGradientDrawableBgColor(View view, String hexColor) {
+    if (view != null && hexColor != null) {
+      GradientDrawable layoutBg = (GradientDrawable) view.getBackground();
+      try {
+        layoutBg.setColor(Color.parseColor(hexColor));
+      } catch (IllegalArgumentException e) {
+        // If the color didnt parse correctly, fail 'open', with default background color
+        Logging.loge("Error parsing background color: " + e.toString());
+      }
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ImageBindingWrapper.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ImageBindingWrapper.java
new file mode 100644
index 000000000..19bc4d8dd
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ImageBindingWrapper.java
@@ -0,0 +1,100 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.bindingwrappers;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RestrictTo;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.Button;
+import android.widget.ImageView;
+import com.google.firebase.inappmessaging.display.R;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.InAppMessageScope;
+import com.google.firebase.inappmessaging.display.internal.layout.FiamFrameLayout;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import javax.inject.Inject;
+
+/**
+ * Wrapper for bindings for Image only modal. This class currently is not unit tested since it is
+ * purely declarative.
+ *
+ * @hide
+ */
+@InAppMessageScope
+public class ImageBindingWrapper extends BindingWrapper {
+
+  private FiamFrameLayout imageRoot;
+  private ViewGroup imageContentRoot;
+
+  private ImageView imageView;
+  private Button collapseButton;
+
+  @Inject
+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
+  public ImageBindingWrapper(
+      InAppMessageLayoutConfig config, LayoutInflater inflater, InAppMessage message) {
+    super(config, inflater, message);
+  }
+
+  @Nullable
+  @Override
+  public ViewTreeObserver.OnGlobalLayoutListener inflate(
+      View.OnClickListener actionListener, View.OnClickListener dismissOnClickListener) {
+    View v = inflater.inflate(R.layout.image, null);
+    imageRoot = v.findViewById(R.id.image_root);
+    imageContentRoot = v.findViewById(R.id.image_content_root);
+    imageView = v.findViewById(R.id.image_view);
+    collapseButton = v.findViewById(R.id.collapse_button);
+
+    // Setup ImageView.
+    imageView.setMaxHeight(config.getMaxImageHeight());
+    imageView.setMaxWidth(config.getMaxImageWidth());
+    imageView.setVisibility(TextUtils.isEmpty(message.getImageUrl()) ? View.GONE : View.VISIBLE);
+    imageView.setOnClickListener(actionListener);
+
+    // Setup dismiss button.
+    imageRoot.setDismissListener(dismissOnClickListener);
+    collapseButton.setOnClickListener(dismissOnClickListener);
+    return null;
+  }
+
+  @NonNull
+  @Override
+  public ImageView getImageView() {
+    return imageView;
+  }
+
+  @NonNull
+  @Override
+  public ViewGroup getRootView() {
+    return imageRoot;
+  }
+
+  @NonNull
+  @Override
+  public View getDialogView() {
+    return imageContentRoot;
+  }
+
+  @NonNull
+  public View getCollapseButton() {
+    return collapseButton;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ModalBindingWrapper.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ModalBindingWrapper.java
new file mode 100644
index 000000000..fd98d83f4
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/bindingwrappers/ModalBindingWrapper.java
@@ -0,0 +1,233 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.bindingwrappers;
+
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.support.annotation.RestrictTo;
+import android.support.annotation.VisibleForTesting;
+import android.support.v4.graphics.drawable.DrawableCompat;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.ScrollView;
+import android.widget.TextView;
+import com.google.firebase.inappmessaging.display.R;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.InAppMessageScope;
+import com.google.firebase.inappmessaging.display.internal.layout.FiamRelativeLayout;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import javax.inject.Inject;
+
+/** @hide */
+@InAppMessageScope
+public class ModalBindingWrapper extends BindingWrapper {
+
+  private FiamRelativeLayout modalRoot;
+  private ViewGroup modalContentRoot;
+
+  private ScrollView bodyScroll;
+  private Button button;
+  private View collapseImage;
+  private ImageView imageView;
+  private TextView messageBody;
+  private TextView messageTitle;
+
+  private ViewTreeObserver.OnGlobalLayoutListener layoutListener =
+      new ScrollViewAdjustableListener();
+
+  @Inject
+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
+  public ModalBindingWrapper(
+      InAppMessageLayoutConfig config, LayoutInflater inflater, InAppMessage message) {
+    super(config, inflater, message);
+  }
+
+  @NonNull
+  @Override
+  public ViewTreeObserver.OnGlobalLayoutListener inflate(
+      View.OnClickListener actionListener, View.OnClickListener dismissOnClickListener) {
+
+    View root = inflater.inflate(R.layout.modal, null);
+    bodyScroll = root.findViewById(R.id.body_scroll);
+    button = root.findViewById(R.id.button);
+    collapseImage = root.findViewById(R.id.collapse_button);
+    imageView = root.findViewById(R.id.image_view);
+    messageBody = root.findViewById(R.id.message_body);
+    messageTitle = root.findViewById(R.id.message_title);
+    modalRoot = root.findViewById(R.id.modal_root);
+
+    modalContentRoot = root.findViewById(R.id.modal_content_root);
+
+    setMessage(message);
+    setLayoutConfig(config);
+    setDismissListener(dismissOnClickListener);
+    setActionListener(actionListener);
+
+    setModalColorOverrides();
+    setButtonColorOverrides();
+
+    return layoutListener;
+  }
+
+  @NonNull
+  @Override
+  public ImageView getImageView() {
+    return imageView;
+  }
+
+  @NonNull
+  @Override
+  public ViewGroup getRootView() {
+    return modalRoot;
+  }
+
+  @NonNull
+  @Override
+  public View getDialogView() {
+    return modalContentRoot;
+  }
+
+  @NonNull
+  @Override
+  public InAppMessageLayoutConfig getConfig() {
+    return config;
+  }
+
+  @NonNull
+  public Button getActionButton() {
+    return button;
+  }
+
+  @NonNull
+  public View getCollapseButton() {
+    return collapseImage;
+  }
+
+  private void setMessage(InAppMessage message) {
+    if (TextUtils.isEmpty(message.getImageUrl())) {
+      imageView.setVisibility(View.GONE);
+    } else {
+      imageView.setVisibility(View.VISIBLE);
+    }
+
+    if (message.getTitle() != null) {
+      if (!TextUtils.isEmpty(message.getTitle().getText())) {
+        messageTitle.setVisibility(View.VISIBLE);
+        messageTitle.setText(message.getTitle().getText());
+      } else {
+        messageTitle.setVisibility(View.GONE);
+      }
+
+      if (!TextUtils.isEmpty(message.getTitle().getHexColor())) {
+        messageTitle.setTextColor(Color.parseColor(message.getTitle().getHexColor()));
+      }
+    }
+
+    if (message.getBody() != null && !TextUtils.isEmpty(message.getBody().getText())) {
+      bodyScroll.setVisibility(View.VISIBLE);
+    } else {
+      bodyScroll.setVisibility(View.GONE);
+    }
+
+    if (message.getBody() != null) {
+      if (!TextUtils.isEmpty(message.getBody().getText())) {
+        messageBody.setVisibility(View.VISIBLE);
+        messageBody.setText(message.getBody().getText());
+      } else {
+        messageBody.setVisibility(View.GONE);
+      }
+
+      if (!TextUtils.isEmpty(message.getBody().getHexColor())) {
+        messageBody.setTextColor(Color.parseColor(message.getBody().getHexColor()));
+      }
+    }
+  }
+
+  private void setLayoutConfig(InAppMessageLayoutConfig config) {
+    imageView.setMaxHeight(config.getMaxImageHeight());
+    imageView.setMaxWidth(config.getMaxImageWidth());
+  }
+
+  private void setDismissListener(View.OnClickListener dismissListener) {
+    collapseImage.setOnClickListener(dismissListener);
+    modalRoot.setDismissListener(dismissListener);
+  }
+
+  private void setActionListener(View.OnClickListener actionListener) {
+    button.setOnClickListener(actionListener);
+  }
+
+  private void setButtonColorOverrides() {
+    // Set the background color of the getAction button to be the FIAM color. We do this explicitly
+    // to
+    // allow for a rounded modal (b/c overloaded background for shape and color)
+
+    if (button != null
+        && message.getActionButton() != null
+        && message.getActionButton().getButtonHexColor() != null) {
+      int buttonColor = Color.parseColor(message.getActionButton().getButtonHexColor());
+
+      // Tint the button based on the background color
+      Drawable drawable = button.getBackground();
+      Drawable compatDrawable = DrawableCompat.wrap(drawable);
+      DrawableCompat.setTint(compatDrawable, buttonColor);
+      button.setBackground(compatDrawable);
+
+      if (message.getActionButton() != null && message.getActionButton().getText() != null) {
+        if (!TextUtils.isEmpty(message.getActionButton().getText().getText())) {
+          button.setVisibility(View.VISIBLE);
+          button.setText(message.getActionButton().getText().getText());
+        } else {
+          button.setVisibility(View.GONE);
+        }
+        String buttonTextColorStr = message.getActionButton().getText().getHexColor();
+
+        if (!TextUtils.isEmpty(buttonTextColorStr)) {
+          button.setTextColor(Color.parseColor(buttonTextColorStr));
+        }
+      }
+    } else {
+      button.setVisibility(View.GONE);
+    }
+  }
+
+  private void setModalColorOverrides() {
+    // Set the background color of the Modal to be the FIAM color. We do this explicitly to
+    // allow for a rounded modal (b/c overloaded background for shape and color)
+
+    if (modalContentRoot != null) {
+      setGradientDrawableBgColor(modalContentRoot, message.getBackgroundHexColor());
+    }
+  }
+
+  @VisibleForTesting
+  public void setLayoutListener(ViewTreeObserver.OnGlobalLayoutListener listener) {
+    layoutListener = listener;
+  }
+
+  // TODO: Kill this.
+  public class ScrollViewAdjustableListener implements ViewTreeObserver.OnGlobalLayoutListener {
+    @Override
+    public void onGlobalLayout() {
+      imageView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/AppComponent.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/AppComponent.java
new file mode 100644
index 000000000..e3b04c8fb
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/AppComponent.java
@@ -0,0 +1,37 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.components;
+
+import com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay;
+import com.google.firebase.inappmessaging.display.internal.FiamImageLoader;
+import com.google.firebase.inappmessaging.display.internal.PicassoErrorListener;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.HeadlessInAppMessagingModule;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.PicassoModule;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.FirebaseAppScope;
+import dagger.Component;
+
+/** @hide */
+@FirebaseAppScope
+@Component(
+    dependencies = {UniversalComponent.class},
+    modules = {HeadlessInAppMessagingModule.class, PicassoModule.class})
+public interface AppComponent {
+  @FirebaseAppScope
+  FirebaseInAppMessagingDisplay providesFirebaseInAppMessagingUI();
+
+  PicassoErrorListener picassoErrorListener();
+
+  FiamImageLoader fiamImageLoader();
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/InAppMessageComponent.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/InAppMessageComponent.java
new file mode 100644
index 000000000..18a570065
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/InAppMessageComponent.java
@@ -0,0 +1,36 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.components;
+
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.BannerBindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.ImageBindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.ModalBindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.InflaterModule;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.InAppMessageScope;
+import dagger.Component;
+
+/** @hide */
+@InAppMessageScope
+@Component(modules = {InflaterModule.class})
+public interface InAppMessageComponent {
+  @InAppMessageScope
+  ImageBindingWrapper imageBindingWrapper();
+
+  @InAppMessageScope
+  ModalBindingWrapper modalBindingWrapper();
+
+  @InAppMessageScope
+  BannerBindingWrapper bannerBindingWrapper();
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/UniversalComponent.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/UniversalComponent.java
new file mode 100644
index 000000000..467d378ba
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/components/UniversalComponent.java
@@ -0,0 +1,42 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.components;
+
+import android.app.Application;
+import android.util.DisplayMetrics;
+import com.google.firebase.inappmessaging.display.internal.BindingWrapperFactory;
+import com.google.firebase.inappmessaging.display.internal.FiamWindowManager;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.ApplicationModule;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.InflaterConfigModule;
+import dagger.Component;
+import java.util.Map;
+import javax.inject.Provider;
+import javax.inject.Singleton;
+
+/** @hide */
+@Singleton
+@Component(modules = {ApplicationModule.class, InflaterConfigModule.class})
+public interface UniversalComponent {
+  Application providesApplication();
+
+  DisplayMetrics displayMetrics();
+
+  FiamWindowManager fiamWindowManager();
+
+  BindingWrapperFactory inflaterClient();
+
+  Map<String, Provider<InAppMessageLayoutConfig>> myKeyStringMap();
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/keys/LayoutConfigKey.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/keys/LayoutConfigKey.java
new file mode 100644
index 000000000..c91fc2184
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/keys/LayoutConfigKey.java
@@ -0,0 +1,31 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.keys;
+
+/**
+ * Strings for each combination of InAppMessage and orientation.
+ *
+ * @hide
+ */
+public class LayoutConfigKey {
+
+  public static final String MODAL_PORTRAIT = "MODAL_PORTRAIT";
+  public static final String MODAL_LANDSCAPE = "MODAL_LANDSCAPE";
+  public static final String IMAGE_ONLY_PORTRAIT = "IMAGE_ONLY_PORTRAIT";
+  public static final String IMAGE_ONLY_LANDSCAPE = "IMAGE_ONLY_LANDSCAPE";
+  public static final String BANNER_PORTRAIT = "BANNER_PORTRAIT";
+  public static final String BANNER_LANDSCAPE = "BANNER_LANDSCAPE";
+  public static final String UNSUPPORTED = "UNSUPPORTED";
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/ApplicationModule.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/ApplicationModule.java
new file mode 100644
index 000000000..478043cea
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/ApplicationModule.java
@@ -0,0 +1,40 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.modules;
+
+import android.app.Application;
+import dagger.Module;
+import dagger.Provides;
+import javax.inject.Singleton;
+
+/**
+ * Bindings for {@link Application}
+ *
+ * @hide
+ */
+@Module
+public class ApplicationModule {
+  private final Application application;
+
+  public ApplicationModule(Application application) {
+    this.application = application;
+  }
+
+  @Provides
+  @Singleton
+  public Application providesApplication() {
+    return application;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/HeadlessInAppMessagingModule.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/HeadlessInAppMessagingModule.java
new file mode 100644
index 000000000..6039bc491
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/HeadlessInAppMessagingModule.java
@@ -0,0 +1,36 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.modules;
+
+import com.google.firebase.inappmessaging.FirebaseInAppMessaging;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.FirebaseAppScope;
+import dagger.Module;
+import dagger.Provides;
+
+/** @hide */
+@Module
+public class HeadlessInAppMessagingModule {
+  private final FirebaseInAppMessaging headless;
+
+  public HeadlessInAppMessagingModule(FirebaseInAppMessaging headless) {
+    this.headless = headless;
+  }
+
+  @Provides
+  @FirebaseAppScope
+  FirebaseInAppMessaging providesHeadlesssSingleton() {
+    return headless;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/InflaterConfigModule.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/InflaterConfigModule.java
new file mode 100644
index 000000000..3b928a221
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/InflaterConfigModule.java
@@ -0,0 +1,200 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.modules;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.util.DisplayMetrics;
+import android.view.Gravity;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.injection.keys.LayoutConfigKey;
+import com.google.firebase.inappmessaging.model.MessageType;
+import dagger.Module;
+import dagger.Provides;
+import dagger.multibindings.IntoMap;
+import dagger.multibindings.StringKey;
+
+/** @hide */
+@Module
+public class InflaterConfigModule {
+
+  private int DISABLED_BG_FLAG =
+      WindowManager.LayoutParams.FLAG_DIM_BEHIND
+          | WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH
+          | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
+          | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR;
+
+  private int ENABLED_BG_FLAG =
+      WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
+          | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR
+          | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
+
+  public static String configFor(MessageType type, int orientation) {
+    if (orientation == Configuration.ORIENTATION_PORTRAIT) {
+      switch (type) {
+        case MODAL:
+          return LayoutConfigKey.MODAL_PORTRAIT;
+        case IMAGE_ONLY:
+          return LayoutConfigKey.IMAGE_ONLY_PORTRAIT;
+        case BANNER:
+          return LayoutConfigKey.BANNER_PORTRAIT;
+        default:
+          return null;
+      }
+    } else {
+      switch (type) {
+        case MODAL:
+          return LayoutConfigKey.MODAL_LANDSCAPE;
+        case IMAGE_ONLY:
+          return LayoutConfigKey.IMAGE_ONLY_LANDSCAPE;
+        case BANNER:
+          return LayoutConfigKey.BANNER_LANDSCAPE;
+        default:
+          return null;
+      }
+    }
+  }
+
+  @Provides
+  DisplayMetrics providesDisplayMetrics(Application application) {
+    DisplayMetrics displayMetrics = new DisplayMetrics();
+    WindowManager windowManager =
+        (WindowManager) application.getSystemService(Context.WINDOW_SERVICE);
+    windowManager.getDefaultDisplay().getMetrics(displayMetrics);
+
+    return displayMetrics;
+  }
+
+  @Provides
+  @IntoMap
+  @StringKey(LayoutConfigKey.IMAGE_ONLY_PORTRAIT)
+  InAppMessageLayoutConfig providesPortraitImageLayoutConfig(DisplayMetrics displayMetrics) {
+    return InAppMessageLayoutConfig.builder()
+        .setMaxDialogHeightPx((int) (0.9f * displayMetrics.heightPixels))
+        .setMaxDialogWidthPx((int) (0.9f * displayMetrics.widthPixels))
+        .setMaxImageWidthWeight(0.8f)
+        .setMaxImageHeightWeight(0.8f)
+        .setViewWindowGravity(Gravity.CENTER)
+        .setWindowFlag(DISABLED_BG_FLAG)
+        .setWindowWidth(ViewGroup.LayoutParams.WRAP_CONTENT)
+        .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+        .setBackgroundEnabled(false)
+        .setAnimate(false)
+        .setAutoDismiss(false)
+        .build();
+  }
+
+  @Provides
+  @IntoMap
+  @StringKey(LayoutConfigKey.IMAGE_ONLY_LANDSCAPE)
+  InAppMessageLayoutConfig providesLandscapeImageLayoutConfig(DisplayMetrics displayMetrics) {
+    return InAppMessageLayoutConfig.builder()
+        .setMaxDialogHeightPx((int) (0.9f * displayMetrics.heightPixels))
+        .setMaxDialogWidthPx((int) (0.9f * displayMetrics.widthPixels))
+        .setMaxImageWidthWeight(0.8f)
+        .setMaxImageHeightWeight(0.8f)
+        .setViewWindowGravity(Gravity.CENTER)
+        .setWindowFlag(DISABLED_BG_FLAG)
+        .setWindowWidth(ViewGroup.LayoutParams.WRAP_CONTENT)
+        .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+        .setBackgroundEnabled(false)
+        .setAnimate(false)
+        .setAutoDismiss(false)
+        .build();
+  }
+
+  @Provides
+  @IntoMap
+  @StringKey(LayoutConfigKey.MODAL_LANDSCAPE)
+  InAppMessageLayoutConfig providesModalLandscapeConfig(DisplayMetrics displayMetrics) {
+    return InAppMessageLayoutConfig.builder()
+        .setMaxDialogHeightPx((int) (0.8 * displayMetrics.heightPixels))
+        .setMaxDialogWidthPx(displayMetrics.widthPixels)
+        .setMaxImageHeightWeight(1f) // entire dialog height
+        .setMaxImageWidthWeight(0.4f)
+        .setMaxBodyHeightWeight(0.6f)
+        .setMaxBodyWidthWeight(0.4f)
+        .setViewWindowGravity(Gravity.CENTER)
+        .setWindowFlag(DISABLED_BG_FLAG)
+        .setWindowWidth(ViewGroup.LayoutParams.MATCH_PARENT)
+        .setWindowHeight(ViewGroup.LayoutParams.MATCH_PARENT)
+        .setBackgroundEnabled(false)
+        .setAnimate(false)
+        .setAutoDismiss(false)
+        .build();
+  }
+
+  @Provides
+  @IntoMap
+  @StringKey(LayoutConfigKey.MODAL_PORTRAIT)
+  InAppMessageLayoutConfig providesModalPortraitConfig(DisplayMetrics displayMetrics) {
+    return InAppMessageLayoutConfig.builder()
+        .setMaxDialogHeightPx((int) (0.8 * displayMetrics.heightPixels))
+        .setMaxDialogWidthPx((int) (0.7f * displayMetrics.widthPixels))
+        .setMaxImageHeightWeight(0.6f)
+        .setMaxBodyHeightWeight(0.1f)
+        .setMaxImageWidthWeight(0.9f) // entire dialog width
+        .setMaxBodyWidthWeight(0.9f) // entire dialog width
+        .setViewWindowGravity(Gravity.CENTER)
+        .setWindowFlag(DISABLED_BG_FLAG)
+        .setWindowWidth(ViewGroup.LayoutParams.MATCH_PARENT)
+        .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+        .setBackgroundEnabled(false)
+        .setAnimate(false)
+        .setAutoDismiss(false)
+        .build();
+  }
+
+  @Provides
+  @IntoMap
+  @StringKey(LayoutConfigKey.BANNER_PORTRAIT)
+  InAppMessageLayoutConfig providesBannerPortraitLayoutConfig(DisplayMetrics displayMetrics) {
+    return InAppMessageLayoutConfig.builder()
+        .setMaxImageHeightWeight(0.3f)
+        .setMaxImageWidthWeight(0.3f)
+        .setMaxDialogHeightPx((int) (0.5f * displayMetrics.heightPixels))
+        .setMaxDialogWidthPx((int) (0.9f * displayMetrics.widthPixels))
+        .setViewWindowGravity(Gravity.TOP)
+        .setWindowFlag(ENABLED_BG_FLAG)
+        .setWindowWidth(ViewGroup.LayoutParams.MATCH_PARENT)
+        .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+        .setBackgroundEnabled(true)
+        .setAnimate(true)
+        .setAutoDismiss(true)
+        .build();
+  }
+
+  @Provides
+  @IntoMap
+  @StringKey(LayoutConfigKey.BANNER_LANDSCAPE)
+  InAppMessageLayoutConfig providesBannerLandscapeLayoutConfig(DisplayMetrics displayMetrics) {
+    return InAppMessageLayoutConfig.builder()
+        .setMaxImageHeightWeight(0.3f)
+        .setMaxImageWidthWeight(0.3f)
+        .setMaxDialogHeightPx((int) (0.5f * displayMetrics.heightPixels))
+        .setMaxDialogWidthPx((int) (0.9f * displayMetrics.widthPixels))
+        .setViewWindowGravity(Gravity.TOP)
+        .setWindowFlag(ENABLED_BG_FLAG)
+        .setWindowWidth(ViewGroup.LayoutParams.MATCH_PARENT)
+        .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+        .setBackgroundEnabled(true)
+        .setAnimate(true)
+        .setAutoDismiss(true)
+        .build();
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/InflaterModule.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/InflaterModule.java
new file mode 100644
index 000000000..08b3d02bd
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/InflaterModule.java
@@ -0,0 +1,58 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.modules;
+
+import android.app.Application;
+import android.content.Context;
+import android.view.LayoutInflater;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.InAppMessageScope;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import dagger.Module;
+import dagger.Provides;
+
+/** @hide */
+@Module
+public class InflaterModule {
+  private final InAppMessage inAppMessage;
+  private final InAppMessageLayoutConfig inAppMessageLayoutConfig;
+  private final Application application;
+
+  public InflaterModule(
+      InAppMessage inAppMessage,
+      InAppMessageLayoutConfig inAppMessageLayoutConfig,
+      Application application) {
+    this.inAppMessage = inAppMessage;
+    this.inAppMessageLayoutConfig = inAppMessageLayoutConfig;
+    this.application = application;
+  }
+
+  @Provides
+  @InAppMessageScope
+  public LayoutInflater providesInflaterservice() {
+    return (LayoutInflater) application.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+  }
+
+  @Provides
+  InAppMessage providesBannerMessage() {
+    return inAppMessage;
+  }
+
+  @Provides
+  @InAppMessageScope
+  InAppMessageLayoutConfig inAppMessageLayoutConfig() {
+    return inAppMessageLayoutConfig;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/PicassoModule.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/PicassoModule.java
new file mode 100644
index 000000000..20a0182ef
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/modules/PicassoModule.java
@@ -0,0 +1,55 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.modules;
+
+import android.app.Application;
+import com.google.firebase.inappmessaging.display.internal.PicassoErrorListener;
+import com.google.firebase.inappmessaging.display.internal.injection.scopes.FirebaseAppScope;
+import com.squareup.okhttp.Interceptor;
+import com.squareup.okhttp.OkHttpClient;
+import com.squareup.okhttp.Response;
+import com.squareup.picasso.OkHttpDownloader;
+import com.squareup.picasso.Picasso;
+import dagger.Module;
+import dagger.Provides;
+import java.io.IOException;
+
+/** @hide */
+@Module
+public class PicassoModule {
+  @Provides
+  @FirebaseAppScope
+  Picasso providesFiamController(
+      Application application, PicassoErrorListener picassoErrorListener) {
+    OkHttpClient client = new OkHttpClient();
+    // This seems necessary for some websites to treat this as an Android client
+    // Example: https://pics.clipartpng.com
+    // In the long term decide whether we are going to honor such edge cases
+    client
+        .interceptors()
+        .add(
+            new Interceptor() {
+              @Override
+              public Response intercept(Chain chain) throws IOException {
+                return chain.proceed(
+                    chain.request().newBuilder().addHeader("Accept", "image/*").build());
+              }
+            });
+
+    Picasso.Builder builder = new Picasso.Builder(application);
+    builder.listener(picassoErrorListener).downloader(new OkHttpDownloader(client));
+    return builder.build();
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/scopes/FirebaseAppScope.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/scopes/FirebaseAppScope.java
new file mode 100644
index 000000000..a98596853
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/scopes/FirebaseAppScope.java
@@ -0,0 +1,21 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.scopes;
+
+import javax.inject.Scope;
+
+/** @hide */
+@Scope
+public @interface FirebaseAppScope {}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/scopes/InAppMessageScope.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/scopes/InAppMessageScope.java
new file mode 100644
index 000000000..a44f24c3b
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/injection/scopes/InAppMessageScope.java
@@ -0,0 +1,21 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.injection.scopes;
+
+import javax.inject.Scope;
+
+/** @hide */
+@Scope
+public @interface InAppMessageScope {}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/BackButtonLayout.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/BackButtonLayout.java
new file mode 100644
index 000000000..a9e005525
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/BackButtonLayout.java
@@ -0,0 +1,23 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout;
+
+import android.view.View;
+
+/** @hide */
+public interface BackButtonLayout {
+
+  void setDismissListener(View.OnClickListener listener);
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/BaseModalLayout.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/BaseModalLayout.java
new file mode 100644
index 000000000..83daa9bff
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/BaseModalLayout.java
@@ -0,0 +1,239 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.support.annotation.IdRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+import android.util.DisplayMetrics;
+import android.util.TypedValue;
+import android.view.View;
+import android.widget.FrameLayout;
+import com.google.firebase.inappmessaging.display.R;
+import com.google.firebase.inappmessaging.display.internal.Logging;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Base custom layout class for the Modal type
+ *
+ * @hide
+ */
+public abstract class BaseModalLayout extends FrameLayout {
+
+  private static final float DEFAULT_MAX_WIDTH_PCT = -1f;
+  private static final float DEFAULT_MAX_HEIGHT_PCT = -1f;
+
+  private float mMaxWidthPct;
+  private float mMaxHeightPct;
+  private DisplayMetrics mDisplay;
+
+  private List<View> mVisibleChildren = new ArrayList<View>();
+
+  public BaseModalLayout(Context context, @Nullable AttributeSet attrs) {
+    super(context, attrs);
+
+    TypedArray a = context.getTheme().obtainStyledAttributes(attrs, R.styleable.ModalLayout, 0, 0);
+    try {
+      mMaxWidthPct = a.getFloat(R.styleable.ModalLayout_maxWidthPct, DEFAULT_MAX_WIDTH_PCT);
+      mMaxHeightPct = a.getFloat(R.styleable.ModalLayout_maxHeightPct, DEFAULT_MAX_HEIGHT_PCT);
+    } finally {
+      a.recycle();
+    }
+
+    mDisplay = context.getResources().getDisplayMetrics();
+  }
+
+  @Override
+  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+    Logging.logdHeader("BEGIN LAYOUT");
+    Logging.logd("onLayout: l: " + left + ", t: " + top + ", r: " + right + ", b: " + bottom);
+  }
+
+  @Override
+  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+    Logging.logdHeader("BEGIN MEASURE");
+    Logging.logdPair("Display", getDisplayMetrics().widthPixels, getDisplayMetrics().heightPixels);
+
+    // Get a list of all visible children
+    mVisibleChildren.clear();
+    for (int i = 0; i < getChildCount(); i++) {
+      View child = getChildAt(i);
+      if (child.getVisibility() != GONE) {
+        mVisibleChildren.add(child);
+      } else {
+        Logging.logdNumber("Skipping GONE child", i);
+      }
+    }
+  }
+
+  protected float getMaxWidthPct() {
+    return mMaxWidthPct;
+  }
+
+  protected float getMaxHeightPct() {
+    return mMaxHeightPct;
+  }
+
+  protected DisplayMetrics getDisplayMetrics() {
+    return mDisplay;
+  }
+
+  protected List<View> getVisibleChildren() {
+    return mVisibleChildren;
+  }
+
+  protected int calculateBaseWidth(int widthMeasureSpec) {
+    int baseLayoutWidth;
+    if (getMaxWidthPct() > 0) {
+      // Some percentage of screen, rounded to the nearest 4px
+      Logging.logd("Width: restrict by pct");
+      baseLayoutWidth =
+          roundToNearest((int) (getDisplayMetrics().widthPixels * getMaxWidthPct()), 4);
+    } else {
+      // Width as specified by the layout
+      Logging.logd("Width: restrict by spec");
+      baseLayoutWidth = MeasureSpec.getSize(widthMeasureSpec);
+    }
+
+    return baseLayoutWidth;
+  }
+
+  protected int calculateBaseHeight(int heightMeasureSpec) {
+    int baseLayoutHeight;
+    if (getMaxHeightPct() > 0) {
+      // Some percentage of screen, rounded to the nearest 4px
+      Logging.logd("Height: restrict by pct");
+      baseLayoutHeight =
+          roundToNearest((int) (getDisplayMetrics().heightPixels * getMaxHeightPct()), 4);
+    } else {
+      // Height as specified by the layout
+      Logging.logd("Height: restrict by spec");
+      baseLayoutHeight = MeasureSpec.getSize(heightMeasureSpec);
+    }
+
+    return baseLayoutHeight;
+  }
+
+  /** Override to add logging. */
+  @Override
+  protected void measureChildWithMargins(
+      View child,
+      int parentWidthMeasureSpec,
+      int widthUsed,
+      int parentHeightMeasureSpec,
+      int heightUsed) {
+    Logging.logdPair("\tdesired (w,h)", child.getMeasuredWidth(), child.getMeasuredHeight());
+    super.measureChildWithMargins(
+        child, parentWidthMeasureSpec, widthUsed, parentHeightMeasureSpec, heightUsed);
+    Logging.logdPair("\tactual  (w,h)", child.getMeasuredWidth(), child.getMeasuredHeight());
+  }
+
+  /** Layout a child specifying only the (top,left) */
+  protected void layoutChild(View view, int left, int top) {
+    layoutChild(view, left, top, left + getDesiredWidth(view), top + getDesiredHeight(view));
+  }
+
+  /** Layout wrapper method that logs. */
+  protected void layoutChild(View view, int left, int top, int right, int bottom) {
+    Logging.logdPair("\tleft, right", left, right);
+    Logging.logdPair("\ttop, bottom", top, bottom);
+    view.layout(left, top, right, bottom);
+  }
+
+  @NonNull
+  protected View findChildById(@IdRes int id) {
+    View v = findViewById(id);
+    if (v == null) {
+      throw new IllegalStateException("No such child: " + id);
+    }
+
+    return v;
+  }
+
+  /** Get the total height a child needs. */
+  protected int getHeightWithMargins(View child) {
+    if (child.getVisibility() == View.GONE) {
+      return 0;
+    }
+
+    FrameLayout.LayoutParams params = getLayoutParams(child);
+    return getDesiredHeight(child) + params.topMargin + params.bottomMargin;
+  }
+
+  /** Visibility-sensitive bottom margin. */
+  protected int getMarginBottom(View child) {
+    if (child.getVisibility() == View.GONE) {
+      return 0;
+    }
+
+    return getLayoutParams(child).bottomMargin;
+  }
+
+  /** Visibility-sensitive top margin. */
+  protected int getMarginTop(View child) {
+    if (child.getVisibility() == View.GONE) {
+      return 0;
+    }
+
+    return getLayoutParams(child).topMargin;
+  }
+
+  /** Get the total height a child needs. */
+  protected int getWidthWithMargins(View child) {
+    if (child.getVisibility() == View.GONE) {
+      return 0;
+    }
+
+    FrameLayout.LayoutParams params = getLayoutParams(child);
+    return getDesiredWidth(child) + params.leftMargin + params.rightMargin;
+  }
+
+  /** Get the total width a child needs. */
+  protected int getDesiredWidth(View child) {
+    if (child.getVisibility() == View.GONE) {
+      return 0;
+    }
+
+    return child.getMeasuredWidth();
+  }
+
+  /** Find out how big a child wants to be. */
+  protected int getDesiredHeight(View child) {
+    if (child.getVisibility() == View.GONE) {
+      return 0;
+    }
+
+    return child.getMeasuredHeight();
+  }
+
+  /** Convenience method to save us repeated casting. */
+  protected FrameLayout.LayoutParams getLayoutParams(View child) {
+    return (LayoutParams) child.getLayoutParams();
+  }
+
+  /** Round "num" to the nearest multiple of "unit". */
+  protected int roundToNearest(int num, int unit) {
+    return unit * Math.round(num / (float) unit);
+  }
+
+  /** Convert a value in "dp" to a "px" value for the current display. */
+  protected int dpToPixels(int dp) {
+    return (int) Math.floor(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, mDisplay));
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/FiamFrameLayout.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/FiamFrameLayout.java
new file mode 100644
index 000000000..7509e2201
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/FiamFrameLayout.java
@@ -0,0 +1,61 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout;
+
+import android.content.Context;
+import android.support.annotation.RequiresApi;
+import android.util.AttributeSet;
+import android.view.KeyEvent;
+import android.view.View;
+import android.widget.FrameLayout;
+import com.google.firebase.inappmessaging.display.internal.layout.util.BackButtonHandler;
+
+/** @hide */
+public class FiamFrameLayout extends FrameLayout implements BackButtonLayout {
+
+  private BackButtonHandler mBackHandler;
+
+  public FiamFrameLayout(Context context) {
+    super(context);
+  }
+
+  public FiamFrameLayout(Context context, AttributeSet attrs) {
+    super(context, attrs);
+  }
+
+  public FiamFrameLayout(Context context, AttributeSet attrs, int defStyleAttr) {
+    super(context, attrs, defStyleAttr);
+  }
+
+  @RequiresApi(21)
+  public FiamFrameLayout(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+    super(context, attrs, defStyleAttr, defStyleRes);
+  }
+
+  @Override
+  public void setDismissListener(View.OnClickListener listener) {
+    mBackHandler = new BackButtonHandler(this, listener);
+  }
+
+  @Override
+  public boolean dispatchKeyEvent(KeyEvent event) {
+    Boolean handled = mBackHandler.dispatchKeyEvent(event);
+    if (handled != null) {
+      return handled;
+    } else {
+      return super.dispatchKeyEvent(event);
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/FiamRelativeLayout.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/FiamRelativeLayout.java
new file mode 100644
index 000000000..3a5200f35
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/FiamRelativeLayout.java
@@ -0,0 +1,62 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout;
+
+import android.content.Context;
+import android.support.annotation.RequiresApi;
+import android.util.AttributeSet;
+import android.view.KeyEvent;
+import android.view.View;
+import android.widget.RelativeLayout;
+import com.google.firebase.inappmessaging.display.internal.layout.util.BackButtonHandler;
+
+/** @hide */
+public class FiamRelativeLayout extends RelativeLayout implements BackButtonLayout {
+
+  private BackButtonHandler mBackHandler;
+
+  public FiamRelativeLayout(Context context) {
+    super(context);
+  }
+
+  public FiamRelativeLayout(Context context, AttributeSet attrs) {
+    super(context, attrs);
+  }
+
+  public FiamRelativeLayout(Context context, AttributeSet attrs, int defStyleAttr) {
+    super(context, attrs, defStyleAttr);
+  }
+
+  @RequiresApi(21)
+  public FiamRelativeLayout(
+      Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+    super(context, attrs, defStyleAttr, defStyleRes);
+  }
+
+  @Override
+  public void setDismissListener(View.OnClickListener listener) {
+    mBackHandler = new BackButtonHandler(this, listener);
+  }
+
+  @Override
+  public boolean dispatchKeyEvent(KeyEvent event) {
+    Boolean handled = mBackHandler.dispatchKeyEvent(event);
+    if (handled != null) {
+      return handled;
+    } else {
+      return super.dispatchKeyEvent(event);
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/ModalLayoutLandscape.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/ModalLayoutLandscape.java
new file mode 100644
index 000000000..030846729
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/ModalLayoutLandscape.java
@@ -0,0 +1,196 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout;
+
+import android.content.Context;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+import android.view.View;
+import com.google.firebase.inappmessaging.display.R;
+import com.google.firebase.inappmessaging.display.internal.Logging;
+import com.google.firebase.inappmessaging.display.internal.layout.util.MeasureUtils;
+import java.util.Arrays;
+import java.util.List;
+
+/** @hide */
+public class ModalLayoutLandscape extends BaseModalLayout {
+
+  private static final int ITEM_SPACING_DP = 24;
+  private static final float MAX_IMG_WIDTH_PCT = 0.40f;
+
+  private View imageChild;
+  private View titleChild;
+  private View scrollChild;
+  private View buttonChild;
+
+  private int barrierWidth;
+  private int vertItemSpacing;
+
+  private int leftContentHeight;
+  private int rightContentHeight;
+
+  public ModalLayoutLandscape(Context context, @Nullable AttributeSet attrs) {
+    super(context, attrs);
+  }
+
+  @Override
+  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+    imageChild = findChildById(R.id.image_view);
+
+    titleChild = findChildById(R.id.message_title);
+    scrollChild = findChildById(R.id.body_scroll);
+    buttonChild = findChildById(R.id.button);
+
+    barrierWidth = imageChild.getVisibility() == View.GONE ? 0 : dpToPixels(ITEM_SPACING_DP);
+    vertItemSpacing = dpToPixels(ITEM_SPACING_DP);
+
+    List<View> rightCol = Arrays.asList(titleChild, scrollChild, buttonChild);
+
+    int horizPadding = getPaddingLeft() + getPaddingRight();
+    int vertPadding = getPaddingBottom() + getPaddingTop();
+
+    int baseLayoutWidth = calculateBaseWidth(widthMeasureSpec);
+    int baseLayoutHeight = calculateBaseHeight(heightMeasureSpec);
+
+    int innerHeight = baseLayoutHeight - vertPadding;
+    int innerWidth = baseLayoutWidth - horizPadding;
+
+    // Measure the image to be max of all the height and x% of the width
+    Logging.logd("Measuring image");
+    MeasureUtils.measureAtMost(imageChild, (int) (innerWidth * MAX_IMG_WIDTH_PCT), innerHeight);
+
+    // The maximum right column width is the max dialog width minus the size of the image and
+    // any necessary padding, including the "barrier" between the image and the right col.
+    int leftColumnWidth = getDesiredWidth(imageChild);
+    int rightColumnMaxWidth = innerWidth - (leftColumnWidth + barrierWidth);
+    Logging.logdPair("Max col widths (l, r)", leftColumnWidth, rightColumnMaxWidth);
+
+    // Determine how many things in right col are visible. If there are "n" items we need "n-1"
+    // reserved vertical spaces between them. The available height for all of the actual content
+    // in the right column is the inner dialog height minus this spacing.
+    int rightVisible = 0;
+    for (View view : rightCol) {
+      if (view.getVisibility() != View.GONE) {
+        rightVisible++;
+      }
+    }
+
+    int rightSpacingTotal = Math.max(0, (rightVisible - 1) * vertItemSpacing);
+    int rightHeightAvail = innerHeight - rightSpacingTotal;
+
+    // The title and the button should be given as much vertical space as they need to draw. The
+    // scroll view is given any remaining content space.
+    Logging.logd("Measuring getTitle");
+    MeasureUtils.measureAtMost(titleChild, rightColumnMaxWidth, rightHeightAvail);
+
+    Logging.logd("Measuring button");
+    MeasureUtils.measureAtMost(buttonChild, rightColumnMaxWidth, rightHeightAvail);
+
+    Logging.logd("Measuring scroll view");
+    int scrollHeight =
+        rightHeightAvail - getDesiredHeight(titleChild) - getDesiredHeight(buttonChild);
+    MeasureUtils.measureAtMost(scrollChild, rightColumnMaxWidth, scrollHeight);
+
+    // Need to track the total height of each column. This information is used in the layout
+    // step, since the "shorter" column needs to be centered vertically with respect to the
+    // "taller" column, which sets the height of the whole modal.
+    leftContentHeight = getDesiredHeight(imageChild);
+    rightContentHeight = rightSpacingTotal;
+    for (View view : rightCol) {
+      rightContentHeight += getDesiredHeight(view);
+    }
+
+    int leftHeight = leftContentHeight + vertPadding;
+    int rightHeight = rightContentHeight + vertPadding;
+
+    int totalHeight = Math.max(leftHeight, rightHeight);
+
+    // The right column shrinks horizontally based on the size of the widest member.
+    int rightColumnWidth = 0;
+    for (View view : rightCol) {
+      rightColumnWidth = Math.max(getDesiredWidth(view), rightColumnWidth);
+    }
+
+    Logging.logdPair("Measured columns (l, r)", leftColumnWidth, rightColumnWidth);
+    int totalWidth = leftColumnWidth + rightColumnWidth + barrierWidth + horizPadding;
+
+    // Measure this view
+    Logging.logdPair("Measured dims", totalWidth, totalHeight);
+    setMeasuredDimension(totalWidth, totalHeight);
+  }
+
+  @Override
+  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+    super.onLayout(changed, left, top, right, bottom);
+
+    // Define a "frame" inside the layout to account for padding
+    int childrenLeft = getPaddingLeft();
+    int childrenTop = getPaddingTop();
+    int childrenRight = getMeasuredWidth() - getPaddingRight();
+
+    // One column is taller than the other, so the shorter one needs to be offset
+    // vertically to create vertical centering.
+    int leftTopOffset = 0;
+    int rightTopOffset = 0;
+
+    if (leftContentHeight < rightContentHeight) {
+      leftTopOffset = (rightContentHeight - leftContentHeight) / 2;
+    } else {
+      rightTopOffset = (leftContentHeight - rightContentHeight) / 2;
+    }
+
+    Logging.logd("Layout image");
+    int imageLeft = childrenLeft;
+    int imageTop = childrenTop + leftTopOffset;
+    int imageRight = imageLeft + getDesiredWidth(imageChild);
+    int imageBottom = imageTop + getDesiredHeight(imageChild);
+    layoutChild(imageChild, imageLeft, imageTop, imageRight, imageBottom);
+
+    int rightColLeft = imageRight + barrierWidth;
+
+    Logging.logd("Layout getTitle");
+    int titleLeft = rightColLeft;
+    int titleTop = childrenTop + rightTopOffset;
+    int titleRight = childrenRight;
+    int titleBottom = titleTop + getDesiredHeight(titleChild);
+    layoutChild(titleChild, titleLeft, titleTop, titleRight, titleBottom);
+
+    Logging.logd("Layout getBody");
+    int scrollMarginTop = titleChild.getVisibility() == View.GONE ? 0 : vertItemSpacing;
+    int scrollLeft = rightColLeft;
+    int scrollTop = titleBottom + scrollMarginTop;
+    int scrollBottom = scrollTop + getDesiredHeight(scrollChild);
+    int scrollRight = childrenRight;
+    layoutChild(scrollChild, scrollLeft, scrollTop, scrollRight, scrollBottom);
+
+    Logging.logd("Layout button");
+    int buttonMarginTop = scrollChild.getVisibility() == View.GONE ? 0 : vertItemSpacing;
+    int buttonLeft = rightColLeft;
+    int buttonTop = scrollBottom + buttonMarginTop;
+    layoutChild(buttonChild, buttonLeft, buttonTop);
+  }
+
+  protected void layoutCenterHorizontal(View child, int left, int top, int right, int bottom) {
+    int centerOffset = (right - left) / 2;
+    int halfWidth = child.getMeasuredWidth() / 2;
+
+    int childLeft = left + centerOffset - halfWidth;
+    int childRight = left + centerOffset + halfWidth;
+
+    layoutChild(child, childLeft, top, childRight, bottom);
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/ModalLayoutPortrait.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/ModalLayoutPortrait.java
new file mode 100644
index 000000000..030357e72
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/ModalLayoutPortrait.java
@@ -0,0 +1,160 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout;
+
+import android.content.Context;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import com.google.firebase.inappmessaging.display.R;
+import com.google.firebase.inappmessaging.display.internal.Logging;
+import com.google.firebase.inappmessaging.display.internal.layout.util.MeasureUtils;
+import com.google.firebase.inappmessaging.display.internal.layout.util.VerticalViewGroupMeasure;
+import com.google.firebase.inappmessaging.display.internal.layout.util.ViewMeasure;
+
+/**
+ * Layout used for portrait modal view.
+ *
+ * @hide
+ */
+public class ModalLayoutPortrait extends BaseModalLayout {
+
+  private static final int ITEM_SPACING_DP = 24;
+
+  private VerticalViewGroupMeasure vgm;
+
+  private int vertItemSpacing;
+
+  public ModalLayoutPortrait(Context context, @Nullable AttributeSet attrs) {
+    super(context, attrs);
+    vgm = new VerticalViewGroupMeasure();
+  }
+
+  @Override
+  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+    vertItemSpacing = dpToPixels(ITEM_SPACING_DP);
+
+    int horizPadding = getPaddingRight() + getPaddingLeft();
+    int vertPadding = getPaddingBottom() + getPaddingTop();
+
+    int baseLayoutWidth = calculateBaseWidth(widthMeasureSpec);
+    int baseLayoutHeight = calculateBaseHeight(heightMeasureSpec);
+
+    int totalVerticalSpacing = (getVisibleChildren().size() - 1) * vertItemSpacing;
+    int reservedHeight = vertPadding + totalVerticalSpacing;
+
+    vgm.reset(baseLayoutWidth, baseLayoutHeight);
+    for (int i = 0; i < getChildCount(); i++) {
+      View child = getChildAt(i);
+      vgm.add(child, isFlex(child));
+    }
+
+    Logging.logd("Screen dimens: " + getDisplayMetrics());
+    Logging.logdPair("Max pct", getMaxWidthPct(), getMaxHeightPct());
+    Logging.logdPair("Base dimens", baseLayoutWidth, baseLayoutHeight);
+
+    // Do an initial pass and see if we will fit vertically, by measuring each child to
+    // find out how big it would be if it took up all space.
+    int totalDesiredHeight = reservedHeight;
+    for (ViewMeasure vm : vgm.getViews()) {
+      Logging.logd("Pre-measure child");
+      vm.preMeasure(baseLayoutWidth, baseLayoutHeight);
+    }
+    totalDesiredHeight += vgm.getTotalHeight();
+
+    Logging.logdNumber("Total reserved height", reservedHeight);
+    Logging.logdNumber("Total desired height", totalDesiredHeight);
+
+    // If the height is vertically constrained, re-flow flexible items
+    // to fit proportionally within the space available.
+    boolean isHeightConstrained = (totalDesiredHeight > baseLayoutHeight);
+    Logging.logd("Total height constrained: " + isHeightConstrained);
+
+    if (isHeightConstrained) {
+      int vertSpaceAvail = baseLayoutHeight - reservedHeight;
+      int flexAvail = vertSpaceAvail - vgm.getTotalFixedHeight();
+      vgm.allocateSpace(flexAvail);
+    }
+
+    // Lay out each child, keeping track of height used as we go.
+    int heightUsed = reservedHeight;
+    int maxChildWidth = baseLayoutWidth - horizPadding;
+    for (ViewMeasure vm : vgm.getViews()) {
+      Logging.logd("Measuring child");
+      MeasureUtils.measureAtMost(vm.getView(), maxChildWidth, vm.getMaxHeight());
+      heightUsed += getDesiredHeight(vm.getView());
+    }
+
+    Logging.logdPair("Measured dims", baseLayoutWidth, heightUsed);
+    setMeasuredDimension(baseLayoutWidth, heightUsed);
+  }
+
+  @Override
+  protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+    super.onLayout(changed, left, top, right, bottom);
+
+    int y = getPaddingTop();
+    int x = getPaddingLeft();
+
+    int numVisible = getVisibleChildren().size();
+    for (int i = 0; i < numVisible; i++) {
+      View child = getVisibleChildren().get(i);
+      FrameLayout.LayoutParams layoutParams = getLayoutParams(child);
+
+      int childHeight = child.getMeasuredHeight();
+      int childWidth = child.getMeasuredWidth();
+
+      int childTop = y;
+      int childBottom = y + childHeight;
+
+      // We only allow center_horizontal custom gravity, otherwise
+      // we use top|left gravity by default.
+      int childLeft;
+      int childRight;
+      if ((layoutParams.gravity & Gravity.CENTER_HORIZONTAL) == 1) {
+        int centerOffset = (right - left) / 2;
+        int halfWidth = childWidth / 2;
+
+        childLeft = centerOffset - halfWidth;
+        childRight = centerOffset + halfWidth;
+      } else {
+        childLeft = x;
+        childRight = x + childWidth;
+      }
+
+      Logging.logd("Layout child " + i);
+      Logging.logdPair("\t(top, bottom)", childTop, childBottom);
+      Logging.logdPair("\t(left, right)", childLeft, childRight);
+      child.layout(childLeft, childTop, childRight, childBottom);
+
+      // Move down by the height the child used
+      y += child.getMeasuredHeight();
+
+      // Add the same spacing after each item (besides the last)
+      if (i < (numVisible - 1)) {
+        y += vertItemSpacing;
+      }
+    }
+  }
+
+  // TODO: Mark flexible items with an attribute and then don't care about IDs at all in this class
+  private boolean isFlex(View child) {
+    return (child.getId() == R.id.body_scroll || child.getId() == R.id.image_view);
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/BackButtonHandler.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/BackButtonHandler.java
new file mode 100644
index 000000000..0e090b110
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/BackButtonHandler.java
@@ -0,0 +1,50 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout.util;
+
+import android.support.annotation.Nullable;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewGroup;
+
+/** @hide */
+public class BackButtonHandler {
+
+  private ViewGroup viewGroup;
+  private View.OnClickListener listener;
+
+  public BackButtonHandler(ViewGroup viewGroup, View.OnClickListener listener) {
+    this.viewGroup = viewGroup;
+    this.listener = listener;
+  }
+
+  /** Returning "true" or "false" if the event was handled, "null" otherwise. */
+  @Nullable
+  public Boolean dispatchKeyEvent(KeyEvent event) {
+    if (event != null
+        && event.getKeyCode() == KeyEvent.KEYCODE_BACK
+        && event.getAction() == KeyEvent.ACTION_UP) {
+
+      if (listener != null) {
+        listener.onClick(viewGroup);
+        return true;
+      }
+
+      return false;
+    }
+
+    return null;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/MeasureUtils.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/MeasureUtils.java
new file mode 100644
index 000000000..d73918450
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/MeasureUtils.java
@@ -0,0 +1,36 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout.util;
+
+import android.view.View;
+import com.google.firebase.inappmessaging.display.internal.Logging;
+
+/** @hide */
+public class MeasureUtils {
+
+  /** Call "measure" on a view with the AT_MOST measurespec for the given height/width. */
+  public static void measureAtMost(View child, int width, int height) {
+    Logging.logdPair("\tdesired (w,h)", child.getMeasuredWidth(), child.getMeasuredHeight());
+    if (child.getVisibility() == View.GONE) {
+      width = 0;
+      height = 0;
+    }
+
+    child.measure(
+        View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.AT_MOST),
+        View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.AT_MOST));
+    Logging.logdPair("\tactual (w,h)", child.getMeasuredWidth(), child.getMeasuredHeight());
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/VerticalViewGroupMeasure.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/VerticalViewGroupMeasure.java
new file mode 100644
index 000000000..094be905a
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/VerticalViewGroupMeasure.java
@@ -0,0 +1,165 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout.util;
+
+import android.view.View;
+import com.google.firebase.inappmessaging.display.internal.Logging;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+/**
+ * Helper class when laying out a vertical group of {@link ViewMeasure}.
+ *
+ * @hide
+ */
+public class VerticalViewGroupMeasure {
+
+  private List<ViewMeasure> vms = new ArrayList<>();
+  private int w;
+  private int h;
+
+  /**
+   * Instantiate a VerticalViewGroupMeasure
+   *
+   * @param w the max width of the group.
+   * @param h the max height of the group.
+   */
+  public VerticalViewGroupMeasure(int w, int h) {
+    this.w = w;
+    this.h = h;
+  }
+
+  /** Instantiate an empty VerticalViewGroupMeasure */
+  public VerticalViewGroupMeasure() {
+    this.w = 0;
+    this.h = 0;
+  }
+
+  public void reset(int w, int h) {
+    this.w = w;
+    this.h = h;
+    vms = new ArrayList<>();
+  }
+
+  public void add(View view, boolean flex) {
+    ViewMeasure vm = new ViewMeasure(view, flex);
+    vm.setMaxDimens(w, h);
+    vms.add(vm);
+  }
+
+  public List<ViewMeasure> getViews() {
+    return vms;
+  }
+
+  public int getTotalHeight() {
+    int sum = 0;
+    for (ViewMeasure vm : vms) {
+      sum += vm.getDesiredHeight();
+    }
+
+    return sum;
+  }
+
+  /** Get the total height of all fixed children. */
+  public int getTotalFixedHeight() {
+    int sum = 0;
+    for (ViewMeasure vm : vms) {
+      if (!vm.isFlex()) {
+        sum += vm.getDesiredHeight();
+      }
+    }
+
+    return sum;
+  }
+
+  /**
+   * Given a certain amount of space left, allocate the space proportionally among all flexible
+   * children.
+   */
+  public void allocateSpace(int flexAvail) {
+    List<ViewMeasure> flexVms = new ArrayList<>();
+    for (ViewMeasure vm : vms) {
+      if (vm.isFlex()) {
+        flexVms.add(vm);
+      }
+    }
+
+    // Sort the ViewMeasures biggest to smallest (hence the reverse comparator).
+    Collections.sort(
+        flexVms,
+        new Comparator<ViewMeasure>() {
+          @Override
+          public int compare(ViewMeasure o1, ViewMeasure o2) {
+            if (o1.getDesiredHeight() > o2.getDesiredHeight()) {
+              return -1;
+            } else if (o1.getDesiredHeight() < o2.getDesiredHeight()) {
+              return 1;
+            }
+
+            return 0;
+          }
+        });
+
+    // First pass, add up requested space by flexible items
+    int flexSum = 0;
+    for (ViewMeasure vm : flexVms) {
+      flexSum += vm.getDesiredHeight();
+    }
+
+    // 2items --> 80/20 max
+    // 3items --> 60/20/20 max
+    // 4items --> 40/20/20/20 max
+    // 5items --> 20/20/20/20/20 max
+    // 6items --> this layout will break!
+    int flexCount = flexVms.size();
+    if (flexCount >= 6) {
+      throw new IllegalStateException("VerticalViewGroupMeasure only supports up to 5 children");
+    }
+    float minFrac = 0.20f;
+    float maxFrac = 1.0f - ((flexCount - 1) * minFrac);
+
+    Logging.logdPair("VVGM (minFrac, maxFrac)", minFrac, maxFrac);
+
+    // Second pass, allocate proportionally
+    float extraFracPool = 0f;
+    for (ViewMeasure vm : flexVms) {
+      float desiredFrac = (float) vm.getDesiredHeight() / flexSum;
+      float grantedFrac = desiredFrac;
+
+      // If the view is greater than the max we want it to be, it should "return" the
+      // extra pixels to a pool we can use to expand the smaller views.
+      if (desiredFrac > maxFrac) {
+        extraFracPool += (grantedFrac - maxFrac);
+        grantedFrac = maxFrac;
+      }
+
+      // If the view is smaller than the min we want, add as much as was given back to the pool,
+      // up to the amount that brings the view into line with the minimum.
+      if (desiredFrac < minFrac) {
+        float remainder = minFrac - desiredFrac;
+        float addOn = Math.min(remainder, extraFracPool);
+
+        grantedFrac = desiredFrac + addOn;
+        extraFracPool -= addOn;
+      }
+
+      Logging.logdPair("\t(desired, granted)", desiredFrac, grantedFrac);
+      int maxHeight = (int) (grantedFrac * flexAvail);
+      vm.setMaxDimens(w, maxHeight);
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/ViewMeasure.java b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/ViewMeasure.java
new file mode 100644
index 000000000..82aa8cb70
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/java/com/google/firebase/inappmessaging/display/internal/layout/util/ViewMeasure.java
@@ -0,0 +1,90 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal.layout.util;
+
+import android.view.View;
+import android.widget.ScrollView;
+
+/**
+ * Metadata class used to hold some attributes of a view during measurement.
+ *
+ * @hide
+ */
+public class ViewMeasure {
+
+  private View view;
+  private boolean flex;
+
+  private int maxWidth;
+  private int maxHeight;
+
+  /**
+   * Instantiate a ViewMeasure
+   *
+   * @param view the child view.
+   * @param flex true if the child is flexible, false if its size demands should always be
+   *     considered "fixed".
+   */
+  public ViewMeasure(View view, boolean flex) {
+    this.view = view;
+    this.flex = flex;
+  }
+
+  public void preMeasure(int w, int h) {
+    MeasureUtils.measureAtMost(view, w, h);
+  }
+
+  public View getView() {
+    return view;
+  }
+
+  public boolean isFlex() {
+    return flex;
+  }
+
+  public int getDesiredHeight() {
+    if (view.getVisibility() == View.GONE) {
+      return 0;
+    }
+
+    if (view instanceof ScrollView) {
+      ScrollView sv = (ScrollView) view;
+      return sv.getPaddingBottom() + sv.getPaddingTop() + sv.getChildAt(0).getMeasuredHeight();
+    }
+
+    return view.getMeasuredHeight();
+  }
+
+  public int getDesiredWidth() {
+    if (view.getVisibility() == View.GONE) {
+      return 0;
+    }
+
+    return view.getMeasuredHeight();
+  }
+
+  public int getMaxHeight() {
+    return maxHeight;
+  }
+
+  public int getMaxWidth() {
+    return maxWidth;
+  }
+
+  public void setMaxDimens(int w, int h) {
+    this.maxWidth = w;
+    this.maxHeight = h;
+  }
+}
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-anydpi-v21/btn_clear.xml b/firebase-inappmessaging-display/src/main/res/drawable-anydpi-v21/btn_clear.xml
new file mode 100644
index 000000000..38a9a1afa
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/drawable-anydpi-v21/btn_clear.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:viewportHeight="24"
+    android:viewportWidth="24"
+    android:width="24dp">
+
+  <path
+      android:fillColor="#ffffffff"
+      android:pathData="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59
+19 19 17.59 13.41 12z"/>
+  <path
+      android:pathData="M0 0h24v24H0z"/>
+</vector>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-anydpi-v21/image_placeholder.xml b/firebase-inappmessaging-display/src/main/res/drawable-anydpi-v21/image_placeholder.xml
new file mode 100644
index 000000000..a9049c8e5
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/drawable-anydpi-v21/image_placeholder.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:viewportHeight="24"
+    android:viewportWidth="24"
+    android:width="24dp">
+
+  <path
+      android:pathData="M0 0h24v24H0z"/>
+  <path
+      android:fillColor="#AAAAAA"
+      android:pathData="M21 19V5c0-1.1-0.9-2-2-2H5c-1.1 0-2 0.9-2 2v14c0 1.1 0.9 2 2 2h14c1.1 0 2-0.9
+2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
+</vector>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-hdpi-v4/btn_clear.png b/firebase-inappmessaging-display/src/main/res/drawable-hdpi-v4/btn_clear.png
new file mode 100644
index 000000000..5814904b7
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-hdpi-v4/btn_clear.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-hdpi-v4/image_placeholder.png b/firebase-inappmessaging-display/src/main/res/drawable-hdpi-v4/image_placeholder.png
new file mode 100644
index 000000000..abb744ac9
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-hdpi-v4/image_placeholder.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-ldpi-v4/btn_clear.png b/firebase-inappmessaging-display/src/main/res/drawable-ldpi-v4/btn_clear.png
new file mode 100644
index 000000000..50b63ebc2
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-ldpi-v4/btn_clear.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-ldpi-v4/image_placeholder.png b/firebase-inappmessaging-display/src/main/res/drawable-ldpi-v4/image_placeholder.png
new file mode 100644
index 000000000..8aee34fc4
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-ldpi-v4/image_placeholder.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-mdpi-v4/btn_clear.png b/firebase-inappmessaging-display/src/main/res/drawable-mdpi-v4/btn_clear.png
new file mode 100644
index 000000000..7c37d7286
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-mdpi-v4/btn_clear.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-mdpi-v4/image_placeholder.png b/firebase-inappmessaging-display/src/main/res/drawable-mdpi-v4/image_placeholder.png
new file mode 100644
index 000000000..6a65be3b4
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-mdpi-v4/image_placeholder.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-xhdpi-v4/btn_clear.png b/firebase-inappmessaging-display/src/main/res/drawable-xhdpi-v4/btn_clear.png
new file mode 100644
index 000000000..153ac011f
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-xhdpi-v4/btn_clear.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-xhdpi-v4/image_placeholder.png b/firebase-inappmessaging-display/src/main/res/drawable-xhdpi-v4/image_placeholder.png
new file mode 100644
index 000000000..c6e0e68e4
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-xhdpi-v4/image_placeholder.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-xxhdpi-v4/btn_clear.png b/firebase-inappmessaging-display/src/main/res/drawable-xxhdpi-v4/btn_clear.png
new file mode 100644
index 000000000..2071c0b8a
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-xxhdpi-v4/btn_clear.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-xxhdpi-v4/image_placeholder.png b/firebase-inappmessaging-display/src/main/res/drawable-xxhdpi-v4/image_placeholder.png
new file mode 100644
index 000000000..83d13b33d
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-xxhdpi-v4/image_placeholder.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-xxxhdpi-v4/btn_clear.png b/firebase-inappmessaging-display/src/main/res/drawable-xxxhdpi-v4/btn_clear.png
new file mode 100644
index 000000000..9b0b5a282
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-xxxhdpi-v4/btn_clear.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable-xxxhdpi-v4/image_placeholder.png b/firebase-inappmessaging-display/src/main/res/drawable-xxxhdpi-v4/image_placeholder.png
new file mode 100644
index 000000000..a045db6b3
Binary files /dev/null and b/firebase-inappmessaging-display/src/main/res/drawable-xxxhdpi-v4/image_placeholder.png differ
diff --git a/firebase-inappmessaging-display/src/main/res/drawable/btn_clear.xml b/firebase-inappmessaging-display/src/main/res/drawable/btn_clear.xml
new file mode 100644
index 000000000..38a9a1afa
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/drawable/btn_clear.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:viewportHeight="24"
+    android:viewportWidth="24"
+    android:width="24dp">
+
+  <path
+      android:fillColor="#ffffffff"
+      android:pathData="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59
+19 19 17.59 13.41 12z"/>
+  <path
+      android:pathData="M0 0h24v24H0z"/>
+</vector>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/drawable/collapse.xml b/firebase-inappmessaging-display/src/main/res/drawable/collapse.xml
new file mode 100644
index 000000000..efa8ca526
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/drawable/collapse.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+  <item>
+    <shape android:shape="oval">
+      <solid android:color="@android:color/black"/>
+    </shape>
+  </item>
+  <item
+      android:drawable="@drawable/btn_clear"/>
+</layer-list>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/drawable/image_placeholder.xml b/firebase-inappmessaging-display/src/main/res/drawable/image_placeholder.xml
new file mode 100644
index 000000000..a9049c8e5
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/drawable/image_placeholder.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:viewportHeight="24"
+    android:viewportWidth="24"
+    android:width="24dp">
+
+  <path
+      android:pathData="M0 0h24v24H0z"/>
+  <path
+      android:fillColor="#AAAAAA"
+      android:pathData="M21 19V5c0-1.1-0.9-2-2-2H5c-1.1 0-2 0.9-2 2v14c0 1.1 0.9 2 2 2h14c1.1 0 2-0.9
+2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
+</vector>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/drawable/rounded_layout.xml b/firebase-inappmessaging-display/src/main/res/drawable/rounded_layout.xml
new file mode 100644
index 000000000..d62179ffd
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/drawable/rounded_layout.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+  <solid android:color="#F5F5F5"/>
+  <corners android:radius="4dp"/>
+  <padding android:left="0dp" android:top="0dp" android:right="0dp" android:bottom="0dp" />
+</shape>
diff --git a/firebase-inappmessaging-display/src/main/res/layout-land/modal.xml b/firebase-inappmessaging-display/src/main/res/layout-land/modal.xml
new file mode 100644
index 000000000..156b1ffbe
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/layout-land/modal.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.google.firebase.inappmessaging.display.internal.layout.FiamRelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:fiam="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/modal_root"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:clipToPadding="false"
+    android:padding="24dp">
+
+    <com.google.firebase.inappmessaging.display.internal.layout.ModalLayoutLandscape
+        android:id="@+id/modal_content_root"
+        style="@style/FiamUI.Modal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@drawable/rounded_layout"
+        android:padding="24dp"
+        android:layout_centerInParent="true"
+        fiam:maxWidthPct="0.85"
+        fiam:maxHeightPct="0.80">
+
+        <ImageView
+            android:contentDescription="@string/modal_content_descriptor"
+            android:id="@+id/image_view"
+            style="@style/FiamUI.ResizableImageView"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            android:adjustViewBounds="true"
+            tools:src="@drawable/placeholder_850_850" />
+
+        <TextView
+            android:id="@+id/message_title"
+            style="@style/FiamUI.Text.Title"
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            tools:text="Your wishlist items are on sale!" />
+
+        <ScrollView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/body_scroll"
+            android:padding="0dp">
+
+            <TextView
+                android:id="@+id/message_body"
+                style="@style/FiamUI.ModalBody"
+                android:layout_width="match_parent"
+                android:layout_margin="0dp"
+                tools:text="@string/placeholder_lorem_ipsum_short" />
+
+        </ScrollView>
+
+        <Button
+            android:id="@+id/button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            tools:text="Wishlist"
+            tools:textColor="#000000" />
+
+    </com.google.firebase.inappmessaging.display.internal.layout.ModalLayoutLandscape>
+
+    <Button
+        android:id="@+id/collapse_button"
+        style="@style/FiamUI.CollapseButton"
+        android:layout_alignEnd="@+id/modal_content_root"
+        android:layout_alignRight="@+id/modal_content_root"
+        android:layout_alignTop="@+id/modal_content_root" />
+
+</com.google.firebase.inappmessaging.display.internal.layout.FiamRelativeLayout>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/layout-sw600dp/modal.xml b/firebase-inappmessaging-display/src/main/res/layout-sw600dp/modal.xml
new file mode 100644
index 000000000..753066aa3
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/layout-sw600dp/modal.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- This file should be text identical to layout/modal.xml.  The only reason it exists
+     is to make sure that tablets always use the portrait modal layout, even when they are
+     in landscape.  This works because "sw600dp" is more specific than "land" so it gets
+     chosen by the Android resource system -->
+<com.google.firebase.inappmessaging.display.internal.layout.FiamRelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/modal_root"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:clipToPadding="false"
+    android:padding="24dp">
+
+    <include layout="@layout/modal_portrait_inner" />
+
+    <Button
+        android:id="@+id/collapse_button"
+        style="@style/FiamUI.CollapseButton"
+        android:layout_alignEnd="@+id/modal_content_root"
+        android:layout_alignRight="@+id/modal_content_root"
+        android:layout_alignTop="@+id/modal_content_root" />
+</com.google.firebase.inappmessaging.display.internal.layout.FiamRelativeLayout>
diff --git a/firebase-inappmessaging-display/src/main/res/layout/banner.xml b/firebase-inappmessaging-display/src/main/res/layout/banner.xml
new file mode 100644
index 000000000..706f51b76
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/layout/banner.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.google.firebase.inappmessaging.display.internal.layout.FiamFrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/banner_root"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:clipChildren="false"
+    android:clipToPadding="false">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center_horizontal"
+        android:weightSum="@dimen/bannerWeightSum">
+
+        <android.support.constraint.ConstraintLayout
+            android:id="@+id/banner_content_root"
+            style="@style/FiamUI.Banner"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_margin="8dp"
+            android:layout_weight="@dimen/bannerContentWeight"
+            android:background="@drawable/rounded_layout"
+            android:clickable="true"
+            android:focusable="true"
+            android:orientation="vertical"
+            android:padding="8dp">
+
+            <com.google.firebase.inappmessaging.display.internal.ResizableImageView
+                android:id="@+id/banner_image"
+                style="@style/FiamUI.ResizableImageView"
+                android:adjustViewBounds="true"
+                android:minHeight="64dp"
+                android:minWidth="64dp"
+                android:src="@drawable/image_placeholder"
+                android:visibility="invisible"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent"
+                app:layout_constraintVertical_bias="0.0"
+                tools:background="#ffbaba"
+                tools:src="null"
+                tools:visibility="visible" />
+
+            <TextView
+                android:id="@+id/banner_title"
+                style="@style/FiamUI.Text.BannerTitle"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginLeft="8dp"
+                android:layout_marginStart="8dp"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintHorizontal_bias="0"
+                app:layout_constraintStart_toEndOf="@+id/banner_image"
+                app:layout_constraintTop_toTopOf="parent"
+                tools:text="Banner Title" />
+
+            <TextView
+                android:id="@+id/banner_body"
+                style="@style/Base.TextAppearance.AppCompat.Small"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="8dp"
+                android:layout_marginEnd="8dp"
+                android:layout_marginRight="8dp"
+                android:ellipsize="end"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="@+id/banner_title"
+                app:layout_constraintTop_toBottomOf="@+id/banner_title"
+                app:layout_constraintVertical_bias="0.0"
+                tools:text="@string/placeholder_lorem_ipsum_short" />
+
+        </android.support.constraint.ConstraintLayout>
+
+    </LinearLayout>
+
+</com.google.firebase.inappmessaging.display.internal.layout.FiamFrameLayout>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/layout/image.xml b/firebase-inappmessaging-display/src/main/res/layout/image.xml
new file mode 100644
index 000000000..77a4a108b
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/layout/image.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.google.firebase.inappmessaging.display.internal.layout.FiamFrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/image_root"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:clickable="true"
+    android:clipToPadding="false"
+    android:focusable="true"
+    android:padding="24dp">
+
+    <FrameLayout
+        android:id="@+id/image_content_root"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal">
+
+        <com.google.firebase.inappmessaging.display.internal.ResizableImageView
+            android:id="@+id/image_view"
+            style="@style/FiamUI.ResizableImageView"
+            android:clickable="true"
+            android:focusable="true"
+            android:adjustViewBounds="true"
+            tools:src="@drawable/placeholder_850_850"
+            tools:visibility="visible" />
+    </FrameLayout>
+
+    <Button
+        android:id="@+id/collapse_button"
+        style="@style/FiamUI.CollapseButton"
+        android:layout_gravity="top|end" />
+
+</com.google.firebase.inappmessaging.display.internal.layout.FiamFrameLayout>
diff --git a/firebase-inappmessaging-display/src/main/res/layout/modal.xml b/firebase-inappmessaging-display/src/main/res/layout/modal.xml
new file mode 100644
index 000000000..f29183300
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/layout/modal.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- This file should be text identical to layout-sw600dp/modal.xml.
+     See comment there for reasoning. -->
+
+<com.google.firebase.inappmessaging.display.internal.layout.FiamRelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/modal_root"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:clipToPadding="false"
+    android:padding="24dp">
+
+    <include layout="@layout/modal_portrait_inner" />
+
+    <Button
+        android:id="@+id/collapse_button"
+        style="@style/FiamUI.CollapseButton"
+        android:layout_alignEnd="@+id/modal_content_root"
+        android:layout_alignRight="@+id/modal_content_root"
+        android:layout_alignTop="@+id/modal_content_root" />
+
+</com.google.firebase.inappmessaging.display.internal.layout.FiamRelativeLayout>
diff --git a/firebase-inappmessaging-display/src/main/res/layout/modal_portrait_inner.xml b/firebase-inappmessaging-display/src/main/res/layout/modal_portrait_inner.xml
new file mode 100644
index 000000000..2e692e6cb
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/layout/modal_portrait_inner.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.google.firebase.inappmessaging.display.internal.layout.ModalLayoutPortrait
+    android:id="@+id/modal_content_root"
+    style="@style/FiamUI.Modal"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_centerInParent="true"
+    android:background="@drawable/rounded_layout"
+    android:padding="24dp"
+    android:theme="@style/FiamUI"
+    fiam:maxHeightPct="@dimen/modalPortraitHeightPct"
+    fiam:maxWidthPct="@dimen/modalPortraitWidthPct"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:fiam="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <TextView
+        android:id="@+id/message_title"
+        style="@style/FiamUI.Text.Title"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:gravity="center"
+        tools:text="Your wishlist items are on sale!!" />
+
+    <ImageView
+        android:contentDescription="@string/modal_inner_content_descriptor"
+        android:id="@+id/image_view"
+        style="@style/FiamUI.ModalImageView"
+        android:layout_gravity="center_horizontal"
+        android:scaleType="centerInside"
+        tools:src="@drawable/placeholder_550_350" />
+
+    <ScrollView
+        android:id="@+id/body_scroll"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+            android:id="@+id/message_body"
+            style="@style/FiamUI.ModalBody"
+            android:gravity="center_horizontal"
+            tools:text="@string/placeholder_very_short" />
+
+    </ScrollView>
+
+    <Button
+        android:id="@+id/button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        tools:text="Button"
+        tools:textColor="#000000" />
+
+</com.google.firebase.inappmessaging.display.internal.layout.ModalLayoutPortrait>
diff --git a/firebase-inappmessaging-display/src/main/res/values-land/dimen.xml b/firebase-inappmessaging-display/src/main/res/values-land/dimen.xml
new file mode 100644
index 000000000..0679262ad
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/values-land/dimen.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- In landscape, banner only fills a fraction (bannerContentWeight/bannerWeightSum) -->
+    <item name="bannerWeightSum" format="integer" type="dimen">5</item>
+    <item name="bannerContentWeight" format="integer" type="dimen">3</item>
+</resources>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/values-sw600dp/dimen.xml b/firebase-inappmessaging-display/src/main/res/values-sw600dp/dimen.xml
new file mode 100644
index 000000000..6ab975174
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/values-sw600dp/dimen.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item name="modalPortraitHeightPct" format="float" type="dimen">0.60</item>
+    <item name="modalPortraitWidthPct" format="float" type="dimen">0.50</item>
+</resources>
diff --git a/firebase-inappmessaging-display/src/main/res/values-v21/styles.xml b/firebase-inappmessaging-display/src/main/res/values-v21/styles.xml
new file mode 100644
index 000000000..c679d2c9a
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/values-v21/styles.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <!--
+      The default state list animator for the button overrides the elevation which means
+      that this would be displayed under the modal / image. Changing it to null fixes this
+    -->
+    <style name="FiamUI.CollapseButton" parent="FiamUI.CollapseButtonBase">
+        <item name="android:foreground">?android:attr/selectableItemBackgroundBorderless</item>
+        <item name="android:stateListAnimator">@null</item>
+        <item name="android:elevation">8dp</item>
+    </style>
+
+    <style name="FiamUI.Banner" parent="@style/FiamUI">
+        <item name="android:elevation">4dp</item>
+    </style>
+
+    <style name="FiamUI.Modal" parent="@style/FiamUI">
+        <item name="android:elevation">4dp</item>
+    </style>
+
+</resources>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/values/attrs.xml b/firebase-inappmessaging-display/src/main/res/values/attrs.xml
new file mode 100644
index 000000000..74f0fc79e
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/values/attrs.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <declare-styleable name="ModalLayout">
+    <attr name="maxWidthPct" format="float" type="dimen" />
+    <attr name="maxHeightPct" format="float" type="dimen" />
+  </declare-styleable>
+</resources>
diff --git a/firebase-inappmessaging-display/src/main/res/values/colors.xml b/firebase-inappmessaging-display/src/main/res/values/colors.xml
new file mode 100644
index 000000000..55344e519
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/values/colors.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+</resources>
\ No newline at end of file
diff --git a/firebase-inappmessaging-display/src/main/res/values/dimen.xml b/firebase-inappmessaging-display/src/main/res/values/dimen.xml
new file mode 100644
index 000000000..04706d081
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/values/dimen.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <dimen name="minImageHeight">50dp</dimen>
+  <dimen name="minImageWidth">50dp</dimen>
+
+  <dimen name="paddingSmall">16dp</dimen>
+
+  <item name="modalPortraitHeightPct" format="float" type="dimen">0.80</item>
+  <item name="modalPortraitWidthPct" format="float" type="dimen">0.85</item>
+
+  <!-- In portrait, banner fills available. -->
+  <item name="bannerWeightSum" format="float" type="dimen">1.0</item>
+  <item name="bannerContentWeight" format="float" type="dimen">1.0</item>
+</resources>
diff --git a/firebase-inappmessaging-display/src/main/res/values/strings.xml b/firebase-inappmessaging-display/src/main/res/values/strings.xml
new file mode 100644
index 000000000..e8f4f1da5
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/values/strings.xml
@@ -0,0 +1,5 @@
+<resources>
+  <!-- String resources go here -->
+  <string name="modal_content_descriptor">modal</string>
+  <string name="modal_inner_content_descriptor">modal inner</string>
+</resources>
diff --git a/firebase-inappmessaging-display/src/main/res/values/styles.xml b/firebase-inappmessaging-display/src/main/res/values/styles.xml
new file mode 100644
index 000000000..e2288b698
--- /dev/null
+++ b/firebase-inappmessaging-display/src/main/res/values/styles.xml
@@ -0,0 +1,66 @@
+<resources>
+
+    <style name="FiamUI" parent="Theme.AppCompat.Light"></style>
+
+    <style name="FiamUI.ModalBody" parent="@style/Base.TextAppearance.AppCompat.Body1">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:textSize">20sp</item>
+    </style>
+
+    <style name="FiamUI.CollapseButtonBase" parent="@style/Base.Widget.AppCompat.Button">
+        <item name="android:layout_width">24dp</item>
+        <item name="android:layout_height">24dp</item>
+        <item name="android:clickable">true</item>
+        <item name="android:background">@drawable/collapse</item>
+
+        <item name="android:layout_marginRight">-12dp</item>
+        <item name="android:layout_marginTop">-12dp</item>
+    </style>
+
+    <style name="FiamUI.CollapseButton" parent="FiamUI.CollapseButtonBase">
+        <!-- nothing here, see values-v21 -->
+    </style>
+
+    <style name="FiamUI.ResizableImageView">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_gravity">center</item>
+        <item name="android:gravity">center</item>
+        <item name="android:adjustViewBounds">true</item>
+        <item name="android:minHeight">@dimen/minImageHeight</item>
+        <item name="android:minWidth">@dimen/minImageWidth</item>
+        <item name="android:src">@drawable/image_placeholder</item>
+    </style>
+
+    <style name="FiamUI.ModalImageView">
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_gravity">center</item>
+        <item name="android:gravity">center</item>
+        <item name="android:adjustViewBounds">true</item>
+        <item name="android:minHeight">@dimen/minImageHeight</item>
+        <item name="android:minWidth">@dimen/minImageWidth</item>
+        <item name="android:src">@drawable/image_placeholder</item>
+    </style>
+
+    <style name="FiamUI.Banner" parent="@style/FiamUI">
+        <!-- nothing here, see values-v21 -->
+    </style>
+
+    <style name="FiamUI.Modal" parent="@style/FiamUI">
+        <!-- nothing here, see values-v21 -->
+    </style>
+
+    <style name="FiamUI.Text.BannerTitle" parent="@style/Base.TextAppearance.AppCompat.Body1">
+        <item name="android:textSize">16sp</item>
+        <item name="android:textStyle">bold</item>
+    </style>
+
+    <style name="FiamUI.Text.Title" parent="@style/Base.TextAppearance.AppCompat.Headline">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:textStyle">bold</item>
+        <item name="android:textSize">24sp</item>
+    </style>
+</resources>
diff --git a/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplayTest.java b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplayTest.java
new file mode 100644
index 000000000..d68bbb8e9
--- /dev/null
+++ b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/FirebaseInAppMessagingDisplayTest.java
@@ -0,0 +1,656 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display;
+
+import static com.google.common.truth.Truth.assertThat;
+import static com.google.firebase.inappmessaging.display.internal.FiamImageLoader.FiamImageRequestCreator;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+import static org.robolectric.RuntimeEnvironment.application;
+import static org.robolectric.Shadows.shadowOf;
+
+import android.app.Activity;
+import android.content.res.Configuration;
+import android.net.Uri;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.Button;
+import android.widget.ImageView;
+import com.google.firebase.inappmessaging.FirebaseInAppMessaging;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplay;
+import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplayCallbacks;
+import com.google.firebase.inappmessaging.display.internal.BindingWrapperFactory;
+import com.google.firebase.inappmessaging.display.internal.FiamAnimator;
+import com.google.firebase.inappmessaging.display.internal.FiamImageLoader;
+import com.google.firebase.inappmessaging.display.internal.FiamWindowManager;
+import com.google.firebase.inappmessaging.display.internal.InAppMessageLayoutConfig;
+import com.google.firebase.inappmessaging.display.internal.RenewableTimer;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.BannerBindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.ImageBindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.ModalBindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.injection.modules.InflaterConfigModule;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.google.firebase.inappmessaging.model.MessageType;
+import com.squareup.picasso.Callback;
+import com.squareup.picasso.RequestCreator;
+import java.util.HashMap;
+import java.util.Map;
+import javax.inject.Provider;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.ArgumentMatchers;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowActivity;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(sdk = 21, qualifiers = "port")
+public class FirebaseInAppMessagingDisplayTest {
+
+  private com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay fiamUI;
+  private Map<String, Provider<InAppMessageLayoutConfig>> layoutConfigs;
+
+  @Mock private FirebaseInAppMessaging headless;
+  @Mock private FiamImageLoader imageLoader;
+  @Mock private RenewableTimer impressionTimer;
+  @Mock private RenewableTimer autoDismissTimer;
+  @Mock private FiamWindowManager windowManager;
+  @Captor private ArgumentCaptor<FirebaseInAppMessagingDisplay> inAppMessageTriggerListenerCaptor;
+  @Captor private ArgumentCaptor<OnClickListener> onClickListenerArgCaptor;
+  @Captor private ArgumentCaptor<View.OnTouchListener> onTouchListenerArgumentCaptor;
+  @Captor private ArgumentCaptor<Callback> callbackArgCaptor;
+  @Captor private ArgumentCaptor<RenewableTimer.Callback> timerArgCaptor;
+
+  @Captor
+  private ArgumentCaptor<FiamAnimator.AnimationCompleteListener>
+      animationCompleteListenerArgumentCaptor;
+
+  private static final String IMAGE_URL = "https://www.imgur.com";
+  private static final String CAMPAIGN_ID = "campaign_id";
+  private static final String CAMPAIGN_NAME = "campaign_name";
+  private static final String ACTION_URL = "https://www.google.com";
+  private static final InAppMessage.Action ACTION =
+      InAppMessage.Action.builder().setActionUrl(ACTION_URL).build();
+  private static final InAppMessage IMAGE_ONLY_MESSAGE =
+      InAppMessage.builder()
+          .setCampaignId(CAMPAIGN_ID)
+          .setIsTestMessage(false)
+          .setCampaignName(CAMPAIGN_NAME)
+          .setAction(ACTION)
+          .setMessageType(MessageType.IMAGE_ONLY)
+          .setImageUrl(IMAGE_URL)
+          .build();
+  private static final InAppMessage MODAL_MESSAGE =
+      InAppMessage.builder()
+          .setCampaignId(CAMPAIGN_ID)
+          .setIsTestMessage(false)
+          .setCampaignName(CAMPAIGN_NAME)
+          .setAction(ACTION)
+          .setMessageType(MessageType.MODAL)
+          .setImageUrl(IMAGE_URL)
+          .build();
+  private static final InAppMessage BANNER_MESSAGE =
+      InAppMessage.builder()
+          .setCampaignId(CAMPAIGN_ID)
+          .setIsTestMessage(false)
+          .setCampaignName(CAMPAIGN_NAME)
+          .setAction(ACTION)
+          .setMessageType(MessageType.BANNER)
+          .setImageUrl(IMAGE_URL)
+          .build();
+  private static final InAppMessageLayoutConfig inappMessageLayoutConfig =
+      InAppMessageLayoutConfig.builder()
+          .setMaxDialogHeightPx((int) (0.9f * 1000))
+          .setMaxDialogWidthPx((int) (0.9f * 1000))
+          .setMaxImageWidthWeight(0.8f)
+          .setMaxImageHeightWeight(0.8f)
+          .setViewWindowGravity(Gravity.CENTER)
+          .setWindowFlag(1)
+          .setWindowWidth(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setBackgroundEnabled(false)
+          .setAnimate(false)
+          .setAutoDismiss(false)
+          .build();
+  private static final InAppMessageLayoutConfig bannerConfig =
+      InAppMessageLayoutConfig.builder()
+          .setMaxDialogHeightPx((int) (0.9f * 1000))
+          .setMaxDialogWidthPx((int) (0.9f * 1000))
+          .setMaxImageWidthWeight(0.8f)
+          .setMaxImageHeightWeight(0.8f)
+          .setViewWindowGravity(Gravity.CENTER)
+          .setWindowFlag(1)
+          .setWindowWidth(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setBackgroundEnabled(true)
+          .setAnimate(true)
+          .setAutoDismiss(true)
+          .build();
+
+  @Mock private BindingWrapperFactory bindingClient;
+  @Mock private FiamListener fiamUIListener;
+  @Mock private ViewTreeObserver.OnGlobalLayoutListener globalLayoutListener;
+  @Mock private FiamAnimator animator;
+  @Mock private FirebaseInAppMessagingDisplayCallbacks callbacks;
+
+  private ImageBindingWrapper imageBindingWrapper;
+  private ModalBindingWrapper modalBindingWrapper;
+  private BannerBindingWrapper bannerBindingWrapper;
+
+  private TestActivity activity;
+  private ShadowActivity shadowActivity;
+  private FirebaseInAppMessagingDisplay listener;
+  private FiamImageRequestCreator fakeRequestCreator = spy(new FakeRequestCreater(null));
+
+  @Before
+  public void setup() {
+    MockitoAnnotations.initMocks(this);
+    layoutConfigs = new HashMap<>();
+    layoutConfigs.put(
+        InflaterConfigModule.configFor(
+            IMAGE_ONLY_MESSAGE.getMessageType(), Configuration.ORIENTATION_PORTRAIT),
+        new Provider<InAppMessageLayoutConfig>() {
+          @Override
+          public InAppMessageLayoutConfig get() {
+            return inappMessageLayoutConfig;
+          }
+        });
+    layoutConfigs.put(
+        InflaterConfigModule.configFor(
+            MODAL_MESSAGE.getMessageType(), Configuration.ORIENTATION_PORTRAIT),
+        new Provider<InAppMessageLayoutConfig>() {
+          @Override
+          public InAppMessageLayoutConfig get() {
+            return inappMessageLayoutConfig;
+          }
+        });
+    layoutConfigs.put(
+        InflaterConfigModule.configFor(
+            BANNER_MESSAGE.getMessageType(), Configuration.ORIENTATION_PORTRAIT),
+        new Provider<InAppMessageLayoutConfig>() {
+          @Override
+          public InAppMessageLayoutConfig get() {
+            return bannerConfig;
+          }
+        });
+
+    activity = Robolectric.buildActivity(TestActivity.class).create().get();
+    shadowActivity = shadowOf(activity);
+
+    LayoutInflater inflater = LayoutInflater.from(application);
+    imageBindingWrapper =
+        spy(new ImageBindingWrapper(inappMessageLayoutConfig, inflater, IMAGE_ONLY_MESSAGE));
+    modalBindingWrapper =
+        spy(new ModalBindingWrapper(inappMessageLayoutConfig, inflater, MODAL_MESSAGE));
+    bannerBindingWrapper = spy(new BannerBindingWrapper(BANNER_MESSAGE, inflater, bannerConfig));
+
+    when(bindingClient.createImageBindingWrapper(
+            eq(inappMessageLayoutConfig), any(InAppMessage.class)))
+        .thenReturn(imageBindingWrapper);
+    when(bindingClient.createModalBindingWrapper(
+            eq(inappMessageLayoutConfig), any(InAppMessage.class)))
+        .thenReturn(modalBindingWrapper);
+    when(bindingClient.createBannerBindingWrapper(eq(bannerConfig), any(InAppMessage.class)))
+        .thenReturn(bannerBindingWrapper);
+
+    when(imageLoader.load(IMAGE_URL)).thenReturn(fakeRequestCreator);
+    fiamUI =
+        new com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay(
+            headless,
+            layoutConfigs,
+            imageLoader,
+            impressionTimer,
+            autoDismissTimer,
+            windowManager,
+            application,
+            bindingClient,
+            animator);
+  }
+
+  @Test
+  public void onActivityStarted_listensToFiamStream() {
+    fiamUI.onActivityStarted(activity);
+
+    verify(headless).setMessageDisplayComponent(any(FirebaseInAppMessagingDisplay.class));
+  }
+
+  @Test
+  public void onActivityPaused_clearsDisplayListener() {
+    fiamUI.onActivityPaused(activity);
+
+    verify(headless).clearDisplayListener();
+  }
+
+  @Test
+  public void onActivityPaused_clearsImageDownload() {
+    fiamUI.onActivityPaused(activity);
+
+    verify(imageLoader).cancelTag(activity.getClass());
+  }
+
+  @Test
+  public void onActivityPaused_destroysInAppMessage() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    fiamUI.onActivityPaused(activity);
+
+    verify(windowManager).destroy(activity);
+  }
+
+  @Test
+  public void onActivityPaused_cancelsImpressionTimer() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    fiamUI.onActivityPaused(activity);
+
+    verify(impressionTimer).cancel();
+  }
+
+  @Test
+  public void onActivityPaused_cancelsAutoDismissTImer() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    fiamUI.onActivityPaused(activity);
+
+    verify(autoDismissTimer).cancel();
+  }
+
+  @Test
+  public void onActivityResumed_whenFiamActive_showsFiam() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+
+    fiamUI.onActivityResumed(activity);
+    verify(fakeRequestCreator, times(2)).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+
+    // assert that fiam was shown once originally and once after resuming
+    verify(windowManager, times(2)).show(imageBindingWrapper, activity);
+  }
+
+  @Test
+  public void streamListener_onNotifiedImage_showsImageMessage() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+
+    verify(windowManager).show(imageBindingWrapper, activity);
+  }
+
+  @Test
+  public void streamListener_onNotifiedModal_showsModalMessage() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(MODAL_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+
+    verify(windowManager).show(modalBindingWrapper, activity);
+  }
+
+  @Test
+  public void streamListener_onNotified_InflatesBinding() {
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+
+    verify(imageBindingWrapper).inflate(any(OnClickListener.class), any(OnClickListener.class));
+  }
+
+  @Test
+  public void streamListener_onNotifiedModalMessage_setsLayoutListener() {
+    startActivity();
+
+    ViewTreeObserver.OnGlobalLayoutListener mockListener =
+        mock(ViewTreeObserver.OnGlobalLayoutListener.class);
+    modalBindingWrapper.setLayoutListener(mockListener);
+
+    listener.displayMessage(MODAL_MESSAGE, callbacks);
+
+    modalBindingWrapper.getImageView().getViewTreeObserver().dispatchOnGlobalLayout();
+    verify(mockListener).onGlobalLayout();
+  }
+
+  @Test
+  public void streamListener_whenNoActionUrlIsSet_dismissesFiam() {
+    InAppMessage inAppMessage =
+        InAppMessage.builder()
+            .setCampaignId(CAMPAIGN_ID)
+            .setIsTestMessage(false)
+            .setCampaignName(CAMPAIGN_NAME)
+            .setAction(InAppMessage.Action.builder().setActionUrl("").build())
+            .setMessageType(MessageType.IMAGE_ONLY)
+            .setImageUrl(IMAGE_URL)
+            .build();
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(inAppMessage, callbacks);
+    verify(imageBindingWrapper)
+        .inflate(onClickListenerArgCaptor.capture(), any(OnClickListener.class));
+    onClickListenerArgCaptor.getValue().onClick(null);
+
+    verify(windowManager).destroy(activity);
+  }
+
+  @Test
+  public void streamListener_whenImageUrlExists_loadsImage() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+
+    verify(fakeRequestCreator).tag(TestActivity.class);
+    verify(fakeRequestCreator).placeholder(R.drawable.image_placeholder);
+    verify(fakeRequestCreator).into(any(ImageView.class), any(Callback.class));
+  }
+
+  @Test
+  public void streamListener_whenNoImageUrlExists_doesNotLoadImage() {
+    InAppMessage inAppMessage =
+        InAppMessage.builder()
+            .setCampaignId(CAMPAIGN_ID)
+            .setIsTestMessage(false)
+            .setCampaignName(CAMPAIGN_NAME)
+            .setAction(InAppMessage.Action.builder().setActionUrl("").build())
+            .setMessageType(MessageType.IMAGE_ONLY)
+            .build();
+    startActivity();
+    listener.displayMessage(inAppMessage, callbacks);
+
+    verify(fakeRequestCreator, times(0)).tag(TestActivity.class);
+    verify(fakeRequestCreator, times(0)).placeholder(R.drawable.image_placeholder);
+    verify(fakeRequestCreator, times(0)).into(any(ImageView.class), any(Callback.class));
+  }
+
+  @Test
+  public void streamListener_whenImageLoadSucceeds_showsWindow() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(fakeRequestCreator)
+        .into(eq(imageBindingWrapper.getImageView()), callbackArgCaptor.capture());
+
+    callbackArgCaptor.getValue().onSuccess();
+
+    verify(windowManager).show(imageBindingWrapper, activity);
+  }
+
+  @Test
+  public void streamListener_whenImageLoadSucceeds_startsImpressionTimer() {
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+
+    callbackArgCaptor.getValue().onSuccess();
+
+    verify(impressionTimer)
+        .start(
+            any(RenewableTimer.Callback.class),
+            ArgumentMatchers.eq(
+                com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay
+                    .IMPRESSION_THRESHOLD_MILLIS),
+            ArgumentMatchers.eq(
+                com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay
+                    .INTERVAL_MILLIS));
+  }
+
+  @Test
+  public void streamListener_whenImageLoadSucceedsForAutoDismissFiam_startsDismissTimer() {
+    startActivity();
+    listener.displayMessage(BANNER_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+
+    callbackArgCaptor.getValue().onSuccess();
+
+    verify(autoDismissTimer)
+        .start(
+            any(RenewableTimer.Callback.class),
+            ArgumentMatchers.eq(
+                com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay
+                    .DISMISS_THRESHOLD_MILLIS),
+            ArgumentMatchers.eq(
+                com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay
+                    .INTERVAL_MILLIS));
+  }
+
+  // Not strictly necessary since in practice, the timer should not have been started
+  @Test
+  public void streamListener_whenImageLoadFails_stopsImpressionTimer() {
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+
+    callbackArgCaptor.getValue().onError();
+
+    verify(impressionTimer).cancel();
+  }
+
+  // Not strictly necessary since in practice, the timer should not have been started
+  @Test
+  public void streamListener_whenImageLoadFails_stopsDismissTimer() {
+    startActivity();
+    listener.displayMessage(BANNER_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+
+    callbackArgCaptor.getValue().onError();
+
+    verify(autoDismissTimer).cancel();
+  }
+
+  @Test
+  public void streamListener_whenImageLoadFailsForModal_removesLayoutListener() {
+    startActivity();
+    listener.displayMessage(MODAL_MESSAGE, callbacks);
+    verify(fakeRequestCreator)
+        .into(eq(modalBindingWrapper.getImageView()), callbackArgCaptor.capture());
+
+    ViewTreeObserver.OnGlobalLayoutListener mockListener =
+        mock(ViewTreeObserver.OnGlobalLayoutListener.class);
+
+    modalBindingWrapper.setLayoutListener(mockListener);
+    callbackArgCaptor.getValue().onError();
+
+    // Verify that the listener is no longer called
+    modalBindingWrapper.getImageView().getViewTreeObserver().dispatchOnGlobalLayout();
+    verify(mockListener, never()).onGlobalLayout();
+  }
+
+  @Test
+  public void streamListener_forBackgroundDisabledFiams_dismissesFiamOnClickOutside() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+
+    imageBindingWrapper
+        .getRootView()
+        .dispatchTouchEvent(MotionEvent.obtain(1, 2, MotionEvent.ACTION_OUTSIDE, 1, 2, 1));
+
+    verify(windowManager).destroy(activity);
+  }
+
+  @Test
+  public void streamListener_forBackgroundDisabledFiams_returnsTrueOnTouchEvents() {
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+
+    boolean ret =
+        imageBindingWrapper
+            .getRootView()
+            .dispatchTouchEvent(MotionEvent.obtain(1, 2, MotionEvent.ACTION_OUTSIDE, 1, 2, 1));
+
+    assertThat(ret).isTrue();
+  }
+
+  @Test
+  public void streamListener_onNotifiedAnimatableMessage_animatesEntry() {
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(BANNER_MESSAGE, callbacks);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+
+    verify(animator).slideIntoView(eq(application), any(View.class), eq(FiamAnimator.Position.TOP));
+  }
+
+  @Test
+  public void impressionTimer_onComplete_firesImpressionLogAction() {
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+    verify(impressionTimer).start(timerArgCaptor.capture(), anyLong(), anyLong());
+
+    timerArgCaptor.getValue().onFinish();
+
+    verify(callbacks, times(1)).impressionDetected();
+  }
+
+  @Test
+  public void dismissTimer_onComplete_dismissesFiam() {
+    startActivity();
+    listener.displayMessage(BANNER_MESSAGE, callbacks);
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    verify(fakeRequestCreator).into(any(ImageView.class), callbackArgCaptor.capture());
+    callbackArgCaptor.getValue().onSuccess();
+    verify(autoDismissTimer).start(timerArgCaptor.capture(), anyLong(), anyLong());
+
+    timerArgCaptor.getValue().onFinish();
+
+    verify(windowManager).destroy(activity);
+  }
+
+  @Test
+  public void fiamClickListener_whenActionUrlProvided_opensCustomTab() {
+    startActivity();
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(imageBindingWrapper)
+        .inflate(onClickListenerArgCaptor.capture(), any(OnClickListener.class));
+    onClickListenerArgCaptor.getValue().onClick(null);
+
+    assertThat(shadowActivity.getNextStartedActivity().getData()).isEqualTo(Uri.parse(ACTION_URL));
+  }
+
+  @Test
+  public void dismissClickListener_dismissesFiam() {
+    InAppMessage inAppMessage =
+        InAppMessage.builder()
+            .setCampaignId(CAMPAIGN_ID)
+            .setIsTestMessage(false)
+            .setCampaignName(CAMPAIGN_NAME)
+            .setAction(InAppMessage.Action.builder().setActionUrl("").build())
+            .setMessageType(MessageType.IMAGE_ONLY)
+            .setImageUrl(IMAGE_URL)
+            .build();
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    startActivity();
+    listener.displayMessage(inAppMessage, callbacks);
+    verify(imageBindingWrapper)
+        .inflate(any(OnClickListener.class), onClickListenerArgCaptor.capture());
+    onClickListenerArgCaptor.getValue().onClick(null);
+
+    verify(windowManager).destroy(activity);
+  }
+
+  @Test
+  public void firebaseInAppMessagingUIListener_whenFiamRendered_receivesOnFiamTrigger() {
+    startActivity();
+    fiamUI.setFiamListener(fiamUIListener);
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+
+    verify(fiamUIListener).onFiamTrigger();
+  }
+
+  @Test
+  public void fiamUIListener_whenFiamClicked_receivesOnFiamClick() {
+    startActivity();
+    fiamUI.setFiamListener(fiamUIListener);
+    listener.displayMessage(IMAGE_ONLY_MESSAGE, callbacks);
+    verify(imageBindingWrapper)
+        .inflate(onClickListenerArgCaptor.capture(), any(OnClickListener.class));
+    onClickListenerArgCaptor.getValue().onClick(null);
+
+    verify(fiamUIListener).onFiamTrigger();
+  }
+
+  @Test
+  public void inflate_setsActionListenerToDismissFiamOnClick() throws Exception {
+    startActivity();
+    fiamUI.setFiamListener(fiamUIListener);
+    listener.displayMessage(MODAL_MESSAGE, callbacks);
+    verify(modalBindingWrapper)
+        .inflate(onClickListenerArgCaptor.capture(), any(OnClickListener.class));
+    Button button = modalBindingWrapper.getActionButton();
+
+    assertThat(fiamUI.getCurrentInAppMessage()).isNotNull();
+    assertThat(fiamUI.getCurrentInAppMessage()).isEqualTo(MODAL_MESSAGE);
+    when(windowManager.isFiamDisplayed()).thenReturn(true);
+    button.performClick();
+    // Assert that after the messageClick, we now have a null FIAM
+    assertThat(fiamUI.getCurrentInAppMessage()).isNull();
+    verify(windowManager, times(1)).destroy(any(Activity.class));
+  }
+
+  private void startActivity() {
+    fiamUI.onActivityStarted(activity);
+    verify(headless).setMessageDisplayComponent(inAppMessageTriggerListenerCaptor.capture());
+    listener = inAppMessageTriggerListenerCaptor.getValue();
+  }
+
+  static class TestActivity extends Activity {}
+
+  static class FakeRequestCreater extends FiamImageRequestCreator {
+    public FakeRequestCreater(RequestCreator requestCreator) {
+      super(requestCreator);
+    }
+
+    @Override
+    public FiamImageRequestCreator placeholder(int placeholderResId) {
+      return this;
+    }
+
+    @Override
+    public FiamImageRequestCreator tag(Class c) {
+      return this;
+    }
+
+    @Override
+    public void into(ImageView imageView, Callback callback) {
+      // do nothing
+    }
+  }
+}
diff --git a/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/OnSwipeListenerTest.java b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/OnSwipeListenerTest.java
new file mode 100644
index 000000000..33d683462
--- /dev/null
+++ b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/OnSwipeListenerTest.java
@@ -0,0 +1,78 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import android.view.MotionEvent;
+import com.google.firebase.inappmessaging.display.internal.OnSwipeUpListener;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(sdk = 21)
+public class OnSwipeListenerTest {
+  private OnSwipeUpListener onSwipeListener;
+  private boolean sweptUp;
+  private static final MotionEvent TOP_LEFT = MotionEvent.obtain(0, 0, 0, 0, 0, 0);
+  private static final MotionEvent BOTTOM_LEFT = MotionEvent.obtain(0, 0, 0, 0, 300, 0);
+
+  @Before
+  public void setup() {
+    sweptUp = false;
+
+    onSwipeListener =
+        new OnSwipeUpListener() {
+          @Override
+          public boolean onSwipeUp() {
+            sweptUp = true;
+            return true;
+          }
+        };
+  }
+
+  @Test
+  public void onFling_detectsSwipeUp() {
+    onSwipeListener.onFling(BOTTOM_LEFT, TOP_LEFT, 20, 250);
+
+    assertThat(sweptUp).isTrue();
+  }
+
+  @Test
+  public void onFling_whenTooSlow_doesNotdetectsSwipeUp() {
+    onSwipeListener.onFling(BOTTOM_LEFT, TOP_LEFT, 20, 20);
+
+    assertThat(sweptUp).isFalse();
+  }
+
+  @Test
+  public void onFling_whenTooShort_doesNotdetectsSwipeUp() {
+    onSwipeListener.onFling(
+        MotionEvent.obtain(0, 0, 0, 0, 300, 0), MotionEvent.obtain(0, 0, 0, 0, 290, 0), 20, 250);
+
+    assertThat(sweptUp).isFalse();
+  }
+
+  @Test
+  public void onFling_whenTooDiagonal_doesNotdetectsSwipeUp() {
+    onSwipeListener.onFling(
+        MotionEvent.obtain(0, 0, 0, 0, 300, 0), MotionEvent.obtain(0, 0, 0, 300, 0, 0), 20, 250);
+
+    assertThat(sweptUp).isFalse();
+  }
+}
diff --git a/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoaderTest.java b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoaderTest.java
new file mode 100644
index 000000000..2cae1ae3f
--- /dev/null
+++ b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/FiamImageLoaderTest.java
@@ -0,0 +1,85 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+import android.widget.ImageView;
+import com.squareup.picasso.Callback;
+import com.squareup.picasso.Picasso;
+import com.squareup.picasso.RequestCreator;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(sdk = 21, qualifiers = "por")
+public class FiamImageLoaderTest {
+  private static final String IMAGE_URL = "https://www.imgur.com";
+  @Mock private Picasso picasso;
+  private FiamImageLoader imageLoader;
+  @Mock private RequestCreator requestCreator;
+
+  @Before
+  public void setup() {
+    MockitoAnnotations.initMocks(this);
+    imageLoader = new FiamImageLoader(picasso);
+  }
+
+  @Test
+  public void load_createdFiamImageRequestCreator() {
+    when(picasso.load(IMAGE_URL)).thenReturn(requestCreator);
+
+    assertThat(imageLoader.load(IMAGE_URL).getClass())
+        .isEqualTo(FiamImageLoader.FiamImageRequestCreator.class);
+  }
+
+  @Test
+  public void placeholder_setsPlaceholderOnUnderlyingRequestCreator() {
+    when(picasso.load(IMAGE_URL)).thenReturn(requestCreator);
+    FiamImageLoader.FiamImageRequestCreator fiamImageRequestCreator = imageLoader.load(IMAGE_URL);
+    fiamImageRequestCreator.placeholder(1);
+
+    verify(requestCreator).placeholder(1);
+  }
+
+  @Test
+  public void tag_tagsUnderlyingRequestCreator() {
+    when(picasso.load(IMAGE_URL)).thenReturn(requestCreator);
+    FiamImageLoader.FiamImageRequestCreator fiamImageRequestCreator = imageLoader.load(IMAGE_URL);
+    fiamImageRequestCreator.tag(String.class);
+
+    verify(requestCreator).tag(String.class);
+  }
+
+  @Test
+  public void into_invokesUnderlyingRequestCreator() {
+    ImageView imageView = mock(ImageView.class);
+    Callback callback = mock(Callback.class);
+
+    when(picasso.load(IMAGE_URL)).thenReturn(requestCreator);
+    FiamImageLoader.FiamImageRequestCreator fiamImageRequestCreator = imageLoader.load(IMAGE_URL);
+    fiamImageRequestCreator.into(imageView, callback);
+
+    verify(requestCreator).into(imageView, callback);
+  }
+}
diff --git a/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/FiamWindowManagerTest.java b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/FiamWindowManagerTest.java
new file mode 100644
index 000000000..71521489d
--- /dev/null
+++ b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/FiamWindowManagerTest.java
@@ -0,0 +1,147 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+import android.content.Context;
+import android.graphics.PixelFormat;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.BindingWrapper;
+import com.google.firebase.inappmessaging.display.internal.bindingwrappers.ImageBindingWrapper;
+import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.google.firebase.inappmessaging.model.MessageType;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(sdk = 21, qualifiers = "port")
+public class FiamWindowManagerTest {
+  private static final String IMAGE_URL = "https://www.imgur.com";
+  private static final String CAMPAIGN_ID = "campaign_id";
+  private static final String CAMPAIGN_NAME = "campaign_name";
+  private static final String ACTION_URL = "https://www.google.com";
+  private static final InAppMessage.Action ACTION =
+      InAppMessage.Action.builder().setActionUrl(ACTION_URL).build();
+  private static final Context appContext = RuntimeEnvironment.application.getApplicationContext();
+  private static final int WINDOW_GRAVITY = Gravity.CENTER;
+  private static final InAppMessageLayoutConfig inappMessageLayoutConfig =
+      InAppMessageLayoutConfig.builder()
+          .setMaxDialogHeightPx((int) (0.9f * 1000))
+          .setMaxDialogWidthPx((int) (0.9f * 1000))
+          .setMaxImageWidthWeight(0.8f)
+          .setMaxImageHeightWeight(0.8f)
+          .setViewWindowGravity(WINDOW_GRAVITY)
+          .setWindowFlag(1)
+          .setWindowWidth(ViewGroup.LayoutParams.FILL_PARENT)
+          .setWindowHeight(ViewGroup.LayoutParams.WRAP_CONTENT)
+          .setBackgroundEnabled(false)
+          .setAnimate(false)
+          .setAutoDismiss(false)
+          .build();
+
+  private static final InAppMessage IN_APP_MESSAGE =
+      InAppMessage.builder()
+          .setCampaignId(CAMPAIGN_ID)
+          .setIsTestMessage(false)
+          .setCampaignName(CAMPAIGN_NAME)
+          .setAction(ACTION)
+          .setMessageType(MessageType.IMAGE_ONLY)
+          .setImageUrl(IMAGE_URL)
+          .build();
+
+  private FiamWindowManager fiamWindowManager;
+  private TestActivity activity;
+  private BindingWrapper bindingWrapper;
+  private WindowManager windowManager;
+
+  @Captor ArgumentCaptor<WindowManager.LayoutParams> layoutArgCaptor;
+
+  @Before
+  public void setup() {
+    MockitoAnnotations.initMocks(this);
+    activity = Robolectric.buildActivity(TestActivity.class).create().get();
+    fiamWindowManager = new FiamWindowManager();
+
+    LayoutInflater inflater = LayoutInflater.from(appContext);
+    bindingWrapper =
+        spy(new ImageBindingWrapper(inappMessageLayoutConfig, inflater, IN_APP_MESSAGE));
+    bindingWrapper.inflate(null, null);
+
+    windowManager = spy((WindowManager) activity.getSystemService(Context.WINDOW_SERVICE));
+    activity.setWindowManager(windowManager);
+  }
+
+  @Test
+  public void show_addsViewOnlyOnce() {
+    final WindowManager.LayoutParams expectedLayoutParams =
+        new WindowManager.LayoutParams(
+            inappMessageLayoutConfig.windowWidth(),
+            inappMessageLayoutConfig.windowHeight(),
+            FiamWindowManager.DEFAULT_TYPE,
+            inappMessageLayoutConfig.windowFlag(),
+            PixelFormat.TRANSLUCENT);
+    expectedLayoutParams.dimAmount = 0.3f;
+    expectedLayoutParams.gravity = WINDOW_GRAVITY;
+    expectedLayoutParams.windowAnimations = 0;
+
+    fiamWindowManager.show(bindingWrapper, activity);
+    fiamWindowManager.show(bindingWrapper, activity);
+    fiamWindowManager.show(bindingWrapper, activity);
+
+    verify(windowManager, times(1))
+        .addView(eq(bindingWrapper.getRootView()), layoutArgCaptor.capture());
+
+    // We test their toString representations since these are not implemented as value objects
+    assertThat(layoutArgCaptor.getValue().toString()).isEqualTo(expectedLayoutParams.toString());
+  }
+
+  @Test
+  public void destroy_whenActiveFiamIsPresent_removesViewOnlyOnce() {
+    final WindowManager.LayoutParams expectedLayoutParams =
+        new WindowManager.LayoutParams(
+            inappMessageLayoutConfig.windowWidth(),
+            inappMessageLayoutConfig.windowHeight(),
+            WindowManager.LayoutParams.TYPE_APPLICATION_PANEL,
+            inappMessageLayoutConfig.windowFlag(),
+            PixelFormat.TRANSLUCENT);
+    expectedLayoutParams.dimAmount = 0.3f;
+    expectedLayoutParams.gravity = WINDOW_GRAVITY;
+    expectedLayoutParams.windowAnimations = 0;
+    fiamWindowManager.show(bindingWrapper, activity);
+
+    fiamWindowManager.destroy(activity);
+    fiamWindowManager.destroy(activity);
+    fiamWindowManager.destroy(activity);
+
+    verify(windowManager, times(1)).removeViewImmediate(bindingWrapper.getRootView());
+    // We test their toString representations since these are not implemented as value objects
+  }
+}
diff --git a/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/TestActivity.java b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/TestActivity.java
new file mode 100644
index 000000000..b58bd54ab
--- /dev/null
+++ b/firebase-inappmessaging-display/src/test/java/com/google/firebase/inappmessaging/display/internal/TestActivity.java
@@ -0,0 +1,48 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.inappmessaging.display.internal;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.view.WindowManager;
+import java.util.Objects;
+
+class TestActivity extends Activity {
+
+  private WindowManager windowManager;
+
+  @Override
+  public WindowManager getWindowManager() {
+    if (windowManager != null) {
+      return windowManager;
+    }
+
+    return super.getWindowManager();
+  }
+
+  public void setWindowManager(WindowManager windowManager) {
+    this.windowManager = windowManager;
+  }
+
+  @Override
+  public Object getSystemService(@NonNull String name) {
+    if (Objects.equals(name, Context.WINDOW_SERVICE) && windowManager != null) {
+      return windowManager;
+    } else {
+      return super.getSystemService(name);
+    }
+  }
+}
diff --git a/firebase-storage/firebase-storage.gradle b/firebase-storage/firebase-storage.gradle
index bb9446f27..1829942e9 100644
--- a/firebase-storage/firebase-storage.gradle
+++ b/firebase-storage/firebase-storage.gradle
@@ -14,7 +14,7 @@
 
 apply plugin: 'com.android.library'
 
-def androidVersion = 26
+def androidVersion = 28
 
 
 tasks.withType(org.gradle.api.tasks.testing.Test) {
@@ -35,6 +35,7 @@ android {
     compileSdkVersion androidVersion
     defaultConfig {
         targetSdkVersion androidVersion
+        minSdkVersion 14
         multiDexEnabled true
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
@@ -82,10 +83,10 @@ dependencies {
     androidTestImplementation "com.android.support:support-annotations:$supportAnnotationsVersion"
     androidTestImplementation 'com.android.support.test:rules:1.0.2'
     androidTestImplementation 'com.android.support.test:runner:1.0.2'
-    androidTestImplementation 'com.google.truth:truth:0.39'
+    androidTestImplementation 'com.google.truth:truth:0.42'
     androidTestImplementation 'junit:junit:4.12'
 
     testImplementation 'junit:junit:4.12'
-    testImplementation 'org.mockito:mockito-core:2.18.3'
+    testImplementation 'org.mockito:mockito-core:2.21.0'
     testImplementation 'org.robolectric:robolectric:4.0-alpha-3-SNAPSHOT'
 }
diff --git a/firebase-storage/src/androidTest/AndroidManifest.xml b/firebase-storage/src/androidTest/AndroidManifest.xml
index d7c8addc8..9c9ff5d2d 100644
--- a/firebase-storage/src/androidTest/AndroidManifest.xml
+++ b/firebase-storage/src/androidTest/AndroidManifest.xml
@@ -14,8 +14,6 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.firebase.storage.integration">
-  <uses-sdk android:minSdkVersion="15"
-      android:targetSdkVersion="23" />
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
diff --git a/firebase-storage/src/main/AndroidManifest.xml b/firebase-storage/src/main/AndroidManifest.xml
index cf5c10984..69b9ce794 100644
--- a/firebase-storage/src/main/AndroidManifest.xml
+++ b/firebase-storage/src/main/AndroidManifest.xml
@@ -16,7 +16,6 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           xmlns:tools="http://schemas.android.com/tools"
           package="com.google.firebase.storage">
-    <uses-sdk android:minSdkVersion="14"/>
 
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.INTERNET" />
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 7e9b2d307..842b452bd 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.8-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.2-all.zip
diff --git a/protolite-well-known-types/protolite-well-known-types.gradle b/protolite-well-known-types/protolite-well-known-types.gradle
index 4d4241853..f7962ff7c 100644
--- a/protolite-well-known-types/protolite-well-known-types.gradle
+++ b/protolite-well-known-types/protolite-well-known-types.gradle
@@ -16,52 +16,52 @@ apply plugin: 'com.android.library'
 apply plugin: 'com.google.protobuf'
 
 ext {
-  firebaseSkipPreguard = true
+    firebaseSkipPreguard = true
 }
 
 protobuf {
-  protoc {
-    artifact = 'com.google.protobuf:protoc:3.4.0'
-  }
-  plugins {
-    javalite {
-      artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
+    protoc {
+        artifact = 'com.google.protobuf:protoc:3.4.0'
     }
-  }
-  generateProtoTasks {
-    all().each { task ->
-      task.builtins {
-        remove java
-      }
-      task.plugins {
-        javalite {}
-      }
+    plugins {
+        javalite {
+            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
+        }
+    }
+    generateProtoTasks {
+        all().each { task ->
+            task.builtins {
+                remove java
+            }
+            task.plugins {
+                javalite {}
+            }
+        }
     }
-  }
 }
 android {
-  compileSdkVersion 26
+    compileSdkVersion 28
 
-  defaultConfig {
-    minSdkVersion 14
-    targetSdkVersion 26
-    versionCode 1
-    versionName '1.0'
-  }
+    defaultConfig {
+        minSdkVersion 14
+        targetSdkVersion 28
+        versionCode 1
+        versionName '1.0'
+    }
 
-  buildTypes {
-    release {
-      minifyEnabled false
-      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
     }
-  }
 
-  sourceSets.main.resources.srcDirs = [ 'build/extracted-protos/main/']
-  sourceSets.main.resources.includes = [ '**/*.proto' ]
+    sourceSets.main.resources.srcDirs = ['build/extracted-protos/main/']
+    sourceSets.main.resources.includes = ['**/*.proto']
 }
 
 dependencies {
-  implementation 'com.google.protobuf:protobuf-lite:3.0.1'
-  protobuf 'com.google.protobuf:protobuf-java:3.1.0'
-  protobuf 'com.google.api.grpc:proto-google-common-protos:1.11.0'
+    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
+    protobuf 'com.google.protobuf:protobuf-java:3.5.1'
+    protobuf 'com.google.api.grpc:proto-google-common-protos:1.11.0'
 }
diff --git a/root-project.gradle b/root-project.gradle
index d8b4f146f..602812066 100644
--- a/root-project.gradle
+++ b/root-project.gradle
@@ -27,8 +27,8 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.1'
-        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
+        classpath 'com.android.tools.build:gradle:3.2.1'
+        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
         classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.6'
         classpath 'org.jsoup:jsoup:1.11.2'
         classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6'
@@ -40,7 +40,7 @@ buildscript {
 
 ext {
     playServicesVersion = '16.0.1'
-    supportAnnotationsVersion = '26.1.0'
+    supportAnnotationsVersion = '28.0.0'
     errorproneVersion = '2.3.2'
     errorproneJavacVersion = '9+181-r4173-1'
 }
diff --git a/subprojects.cfg b/subprojects.cfg
index fcfe44f20..84e2c4cd5 100644
--- a/subprojects.cfg
+++ b/subprojects.cfg
@@ -1,9 +1,12 @@
 firebase-common
 firebase-database
+firebase-database-collection
 firebase-firestore
 firebase-functions
-firebase-database-collection
+firebase-inappmessaging-display
+fiamui-app
 firebase-storage
 protolite-well-known-types
 
+tools:apksize
 tools:errorprone
diff --git a/test-apps/build.gradle b/test-apps/build.gradle
index 167f9dcd6..1b098c619 100644
--- a/test-apps/build.gradle
+++ b/test-apps/build.gradle
@@ -46,8 +46,8 @@ allprojects {
     repositories {
         //mavenLocal() can be overridden via GRADLE_OPTS="-Dmaven.repo.local=<path>"
         mavenLocal()
-        jcenter()
         google()
+        jcenter()
         maven { url 'https://maven.fabric.io/public' }
     }
 
@@ -122,4 +122,4 @@ allprojects {
 
 task clean(type: Delete) {
     delete rootProject.buildDir
-}
\ No newline at end of file
+}
diff --git a/test-apps/database-test-app/build.gradle b/test-apps/database-test-app/build.gradle
index 0de0533d4..b2a06dbcc 100644
--- a/test-apps/database-test-app/build.gradle
+++ b/test-apps/database-test-app/build.gradle
@@ -18,12 +18,12 @@ apply plugin: 'com.android.application'
 
 android {
     testBuildType = project.testBuildType
-    compileSdkVersion 27
+    compileSdkVersion 28
 
     defaultConfig {
         applicationId "com.google.firebase.testapps.database"
         minSdkVersion 16
-        targetSdkVersion 27
+        targetSdkVersion 28
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
diff --git a/test-apps/database-test-app/src/androidTest/java/com/google/firebase/testapps/database/TestActivityTest.java b/test-apps/database-test-app/src/androidTest/java/com/google/firebase/testapps/database/TestActivityTest.java
index e46e93289..1100133ee 100644
--- a/test-apps/database-test-app/src/androidTest/java/com/google/firebase/testapps/database/TestActivityTest.java
+++ b/test-apps/database-test-app/src/androidTest/java/com/google/firebase/testapps/database/TestActivityTest.java
@@ -14,11 +14,12 @@
 
 package com.google.firebase.testapps.database;
 
-import android.support.test.espresso.Espresso;
+import android.support.test.espresso.IdlingRegistry;
 import android.support.test.espresso.IdlingResource;
+import android.support.test.filters.LargeTest;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
-import android.test.suitebuilder.annotation.LargeTest;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -26,9 +27,9 @@
 import org.junit.runner.RunWith;
 
 import static android.support.test.espresso.Espresso.onView;
-import static android.support.test.espresso.action.ViewActions.*;
-import static android.support.test.espresso.assertion.ViewAssertions.*;
-import static android.support.test.espresso.matcher.ViewMatchers.*;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 
 @LargeTest
 @RunWith(AndroidJUnit4.class)
@@ -43,13 +44,13 @@
   @Before
   public void before() {
     mIdlingResource = mActivityTestRule.getActivity().getIdlingResource();
-    Espresso.registerIdlingResources(mIdlingResource);
+    IdlingRegistry.getInstance().register(mIdlingResource);
   }
 
   @After
   public void unregisterIdlingResource() {
     if (mIdlingResource != null) {
-      Espresso.unregisterIdlingResources(mIdlingResource);
+      IdlingRegistry.getInstance().unregister(mIdlingResource);
     }
   }
 
diff --git a/test-apps/database-test-app/src/main/java/com/google/firebase/testapps/database/TestActivity.java b/test-apps/database-test-app/src/main/java/com/google/firebase/testapps/database/TestActivity.java
index b994ff3e5..c941e394d 100644
--- a/test-apps/database-test-app/src/main/java/com/google/firebase/testapps/database/TestActivity.java
+++ b/test-apps/database-test-app/src/main/java/com/google/firebase/testapps/database/TestActivity.java
@@ -24,6 +24,7 @@
 import android.support.test.espresso.idling.CountingIdlingResource;
 import android.widget.TextView;
 import android.widget.Toast;
+
 import com.google.android.gms.tasks.OnSuccessListener;
 import com.google.firebase.auth.AuthResult;
 import com.google.firebase.auth.FirebaseAuth;
@@ -31,12 +32,14 @@
 import com.google.firebase.database.DatabaseError;
 import com.google.firebase.database.FirebaseDatabase;
 import com.google.firebase.database.ValueEventListener;
+
 import java.util.Map;
 
 public class TestActivity extends Activity {
+  private final CountingIdlingResource idlingResource =
+      new CountingIdlingResource("Firebase database listener");
   private FirebaseDatabase db;
   private FirebaseAuth auth;
-  private final CountingIdlingResource idlingResource = new CountingIdlingResource("Firebase database listener");
   private TextView restaurantTextView;
 
   @Override
@@ -80,16 +83,15 @@ public void onCancelled(DatabaseError error) {
     //// Signout of any existing sessions and sign in with email and password
     auth.signOut();
     auth.signInWithEmailAndPassword("test@mailinator.com", "password")
-        .addOnSuccessListener(
-            new OnSuccessListener<AuthResult>() {
-              @Override
-              public void onSuccess(AuthResult authResult) {
-                db.getReference("restaurants")
+        .addOnSuccessListener(new OnSuccessListener<AuthResult>() {
+          @Override
+          public void onSuccess(AuthResult authResult) {
+            db.getReference("restaurants")
                     .child("Baadal")
                     .child("location")
                     .setValue("Google MTV");
-              }
-            });
+          }
+        });
   }
 
   @VisibleForTesting
diff --git a/test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest.java b/test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest.java
index f6025b886..60590606d 100644
--- a/test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest.java
+++ b/test-apps/firestore-test-app/src/androidTest/java/com/google/firebase/testapps/firestore/TestActivityTest.java
@@ -14,11 +14,12 @@
 
 package com.google.firebase.testapps.firestore;
 
-import android.support.test.espresso.Espresso;
+import android.support.test.espresso.IdlingRegistry;
 import android.support.test.espresso.IdlingResource;
+import android.support.test.filters.LargeTest;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
-import android.test.suitebuilder.annotation.LargeTest;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -26,9 +27,9 @@
 import org.junit.runner.RunWith;
 
 import static android.support.test.espresso.Espresso.onView;
-import static android.support.test.espresso.action.ViewActions.*;
-import static android.support.test.espresso.assertion.ViewAssertions.*;
-import static android.support.test.espresso.matcher.ViewMatchers.*;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 
 @LargeTest
 @RunWith(AndroidJUnit4.class)
@@ -42,13 +43,13 @@
   @Before
   public void before() {
     mIdlingResource = mActivityTestRule.getActivity().getIdlingResource();
-    Espresso.registerIdlingResources(mIdlingResource);
+    IdlingRegistry.getInstance().register(mIdlingResource);
   }
 
   @After
   public void unregisterIdlingResource() {
     if (mIdlingResource != null) {
-      Espresso.unregisterIdlingResources(mIdlingResource);
+      IdlingRegistry.getInstance().unregister(mIdlingResource);
     }
   }
 
diff --git a/test-apps/functions-test-app/build.gradle b/test-apps/functions-test-app/build.gradle
index fd6ea2601..23d0ef60a 100644
--- a/test-apps/functions-test-app/build.gradle
+++ b/test-apps/functions-test-app/build.gradle
@@ -18,12 +18,12 @@ apply plugin: 'com.android.application'
 
 android {
     testBuildType = project.testBuildType
-    compileSdkVersion 27
+    compileSdkVersion 28
 
     defaultConfig {
         applicationId "com.google.firebase.testapps.functions"
         minSdkVersion 16
-        targetSdkVersion 27
+        targetSdkVersion 28
         versionCode 1
         versionName "1.0"
         testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
diff --git a/test-apps/functions-test-app/src/androidTest/java/com/google/firebase/testapps/functions/TestActivityTest.java b/test-apps/functions-test-app/src/androidTest/java/com/google/firebase/testapps/functions/TestActivityTest.java
index 7804c21f1..4b9684299 100644
--- a/test-apps/functions-test-app/src/androidTest/java/com/google/firebase/testapps/functions/TestActivityTest.java
+++ b/test-apps/functions-test-app/src/androidTest/java/com/google/firebase/testapps/functions/TestActivityTest.java
@@ -14,11 +14,12 @@
 
 package com.google.firebase.testapps.functions;
 
-import android.support.test.espresso.Espresso;
+import android.support.test.espresso.IdlingRegistry;
 import android.support.test.espresso.IdlingResource;
+import android.support.test.filters.LargeTest;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
-import android.test.suitebuilder.annotation.LargeTest;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -26,9 +27,9 @@
 import org.junit.runner.RunWith;
 
 import static android.support.test.espresso.Espresso.onView;
-import static android.support.test.espresso.action.ViewActions.*;
-import static android.support.test.espresso.assertion.ViewAssertions.*;
-import static android.support.test.espresso.matcher.ViewMatchers.*;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 
 @LargeTest
 @RunWith(AndroidJUnit4.class)
@@ -43,13 +44,13 @@
   @Before
   public void before() {
     mIdlingResource = mActivityTestRule.getActivity().getIdlingResource();
-    Espresso.registerIdlingResources(mIdlingResource);
+    IdlingRegistry.getInstance().register(mIdlingResource);
   }
 
   @After
   public void unregisterIdlingResource() {
     if (mIdlingResource != null) {
-      Espresso.unregisterIdlingResources(mIdlingResource);
+      IdlingRegistry.getInstance().unregister(mIdlingResource);
     }
   }
 
diff --git a/test-apps/gradle/wrapper/gradle-wrapper.properties b/test-apps/gradle/wrapper/gradle-wrapper.properties
index 3fa24777a..f9fe699b1 100644
--- a/test-apps/gradle/wrapper/gradle-wrapper.properties
+++ b/test-apps/gradle/wrapper/gradle-wrapper.properties
@@ -19,4 +19,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.8-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.2-all.zip
diff --git a/test-apps/storage-test-app/build.gradle b/test-apps/storage-test-app/build.gradle
index 2e8167a10..3412c1c9f 100644
--- a/test-apps/storage-test-app/build.gradle
+++ b/test-apps/storage-test-app/build.gradle
@@ -18,12 +18,12 @@ apply plugin: 'com.android.application'
 
 android {
     testBuildType = project.testBuildType
-    compileSdkVersion 27
+    compileSdkVersion 28
 
     defaultConfig {
         applicationId "com.google.firebase.testapps.storage"
         minSdkVersion 16
-        targetSdkVersion 27
+        targetSdkVersion 28
         versionCode 1
         versionName "1.0"
         multiDexEnabled true
diff --git a/test-apps/storage-test-app/src/androidTest/java/com/google/firebase/testapps/storage/TestActivityTest.java b/test-apps/storage-test-app/src/androidTest/java/com/google/firebase/testapps/storage/TestActivityTest.java
index dc525921a..daa719d3e 100644
--- a/test-apps/storage-test-app/src/androidTest/java/com/google/firebase/testapps/storage/TestActivityTest.java
+++ b/test-apps/storage-test-app/src/androidTest/java/com/google/firebase/testapps/storage/TestActivityTest.java
@@ -20,10 +20,11 @@
 import static android.support.test.espresso.matcher.ViewMatchers.*;
 
 import android.support.test.espresso.Espresso;
+import android.support.test.espresso.IdlingRegistry;
 import android.support.test.espresso.IdlingResource;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
-import android.test.suitebuilder.annotation.LargeTest;
+import android.support.test.filters.LargeTest;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -43,13 +44,13 @@
   public void before() {
     mIdlingResource = mActivityTestRule.getActivity().getIdlingResource();
     // To prove that the test fails, omit this call:
-    Espresso.registerIdlingResources(mIdlingResource);
+    IdlingRegistry.getInstance().register(mIdlingResource);
   }
 
   @After
   public void unregisterIdlingResource() {
     if (mIdlingResource != null) {
-      Espresso.unregisterIdlingResources(mIdlingResource);
+      IdlingRegistry.getInstance().unregister(mIdlingResource);
     }
   }
 
diff --git a/tools/apksize/README.md b/tools/apksize/README.md
new file mode 100644
index 000000000..a310e5e23
--- /dev/null
+++ b/tools/apksize/README.md
@@ -0,0 +1,37 @@
+# APK Size Tooling
+
+## Purpose
+
+This tooling measures the size of APKs using Firebase. The APKs are simple apps
+that exercise only a small faction of the API surface. These numbers help to
+show how an app's size might grow if Firebase is included.
+
+## How to Use
+
+There are two tasks defined in this subproject: generateMeasurements and
+uploadMeasurements. The former gathers the measurements and writes them to a
+file in the build directory. The latter is invoked by CI and uploads the report
+to an SQL database.
+
+The generateMeasurements task may be manually run with `./gradlew -q
+generateMeasurements`. This will output a human readable report to standard out.
+Appending `-Ppull_request=999` will instead generate the report to upload, where
+`999` is the pull request number to place in the report.
+
+The uploadMeasurements task is not intended to be invoked manually. However, it
+may be invoked with the above pull request flag and `-Pdatabase_config=path`
+where `path` is the path to the config file. The config file must have the
+following structure where the values in all-caps are placeholders for the
+relevant pieces of configuration:
+
+```
+host:HOST
+database:DATABASE
+user:USER
+password:PASSWORD
+```
+
+## Current Support
+
+All projects in this repository are supported with an aggressive ProGuard
+profile. Less aggressive ProGuard profiles will be added at a future date.
diff --git a/tools/apksize/apksize.gradle b/tools/apksize/apksize.gradle
new file mode 100644
index 000000000..8ee091aa0
--- /dev/null
+++ b/tools/apksize/apksize.gradle
@@ -0,0 +1,67 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+import com.google.firebase.gradle.GenerateMeasurementsTask
+import com.google.firebase.gradle.UploadMeasurementsTask
+
+// Linting needs to be disabled as none of these apps are real or intended to conform to
+// linting standards.
+tasks.whenTaskAdded { task ->
+    if (task.name.equals("lint")) {
+        //task.enabled = false
+    }
+}
+
+apply plugin: "com.android.application"
+apply from: "default.gradle"
+android {
+    flavorDimensions "apkSize"
+}
+
+apply from: "src/database/database.gradle"
+apply from: "src/storage/storage.gradle"
+apply from: "src/firestore/firestore.gradle"
+apply from: "src/functions/functions.gradle"
+
+/**
+ * This task builds all supported variants (only aggressive as of writing) and writes the
+ * APK sizes to a text-format protocol buffer file.
+ *
+ * @param -Ppull_request the pull request number to be included in the report
+ */
+task generateMeasurements(type: GenerateMeasurementsTask) {
+    sdkMapFile = file("sdks.csv")
+    reportFile = file("$buildDir/size-report.textpb")
+}
+
+/**
+ * This task uploads the report produced by the generate measurements task to a SQL database.
+ *
+ * @param -Pdatabase_config the file with the database configuration
+ * @param -Ppull_request the pull request number to be included in the report
+ */
+task uploadMeasurements(type: UploadMeasurementsTask) {
+    dependsOn generateMeasurements
+
+    reportFile = file("$buildDir/size-report.textpb")
+    uploader = "https://storage.googleapis.com/firebase-engprod-metrics/upload_tool.jar"
+}
+
+// ==========================================================================
+// Copy from here down if you want to use the google-services plugin in your
+// androidTest integration tests.
+// ==========================================================================
+ext.packageName = "com.google.apksize"
+apply from: '../../gradle/googleServices.gradle'
diff --git a/tools/apksize/debug.keystore b/tools/apksize/debug.keystore
new file mode 100644
index 000000000..c948a6e64
Binary files /dev/null and b/tools/apksize/debug.keystore differ
diff --git a/tools/apksize/default.gradle b/tools/apksize/default.gradle
new file mode 100644
index 000000000..2ba697725
--- /dev/null
+++ b/tools/apksize/default.gradle
@@ -0,0 +1,59 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+/**
+ * Default build settings
+ */
+android {
+    adbOptions {
+        timeOutInMs 60 * 1000
+    }
+
+    lintOptions {
+        abortOnError false
+        checkReleaseBuilds false
+    }
+    compileSdkVersion 26
+
+    defaultConfig {
+        applicationId 'com.google.apksize'
+        minSdkVersion 26
+	multiDexEnabled true
+        targetSdkVersion 26
+        versionCode 1
+        versionName '1.0'
+    }
+
+    packagingOptions {
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/LICENSE-FIREBASE.txt'
+        exclude 'META-INF/NOTICE'
+    }
+
+    buildTypes {
+        aggressive {
+            debuggable false
+            minifyEnabled true
+            shrinkResources true
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-aggressive.pro'
+            signingConfig signingConfigs.debug
+            matchingFallbacks = ['release']
+        }
+    }
+}
+
+dependencies {
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
+}
diff --git a/tools/apksize/proguard-rules-aggressive.pro b/tools/apksize/proguard-rules-aggressive.pro
new file mode 100644
index 000000000..8962eae7d
--- /dev/null
+++ b/tools/apksize/proguard-rules-aggressive.pro
@@ -0,0 +1 @@
+-dontwarn **
diff --git a/tools/apksize/sdks.csv b/tools/apksize/sdks.csv
new file mode 100644
index 000000000..238005026
--- /dev/null
+++ b/tools/apksize/sdks.csv
@@ -0,0 +1,4 @@
+database-aggressive:4
+firestore-aggressive:1
+functions-aggressive:2
+storage-aggressive:3
diff --git a/tools/apksize/src/database/database.gradle b/tools/apksize/src/database/database.gradle
new file mode 100644
index 000000000..f79341626
--- /dev/null
+++ b/tools/apksize/src/database/database.gradle
@@ -0,0 +1,34 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+android {
+    productFlavors {
+        database {
+            dimension "apkSize"
+            applicationId "com.google.apksize.database"
+        }
+    }
+    sourceSets {
+        database {
+            java.srcDirs = [
+                "src/database/java",
+            ]
+        }
+    }
+}
+dependencies {
+    databaseImplementation project(":firebase-database")
+    databaseImplementation project(":firebase-common")
+}
diff --git a/tools/apksize/src/database/java/com.google.apksize/RealtimeDatabase.java b/tools/apksize/src/database/java/com.google.apksize/RealtimeDatabase.java
new file mode 100644
index 000000000..8a171b6f2
--- /dev/null
+++ b/tools/apksize/src/database/java/com.google.apksize/RealtimeDatabase.java
@@ -0,0 +1,50 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+import android.content.Context;
+import android.util.Log;
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.FirebaseOptions;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.ValueEventListener;
+
+public class RealtimeDatabase implements SampleCode {
+
+  @Override
+  public void runSample(Context context) {
+
+    FirebaseApp.initializeApp(context, new FirebaseOptions.Builder().build());
+
+    DatabaseReference db =
+        FirebaseDatabase.getInstance().getReference("android/saving-data/fireblog/posts");
+
+    db.addListenerForSingleValueEvent(
+        new ValueEventListener() {
+          @Override
+          public void onDataChange(DataSnapshot dataSnapshot) {
+            Log.d("test", "onDataChange");
+          }
+
+          @Override
+          public void onCancelled(DatabaseError databaseError) {
+            Log.d("test", "onDataChange");
+          }
+        });
+  }
+}
diff --git a/tools/apksize/src/database/java/com.google.apksize/SampleCodeLoader.java b/tools/apksize/src/database/java/com.google.apksize/SampleCodeLoader.java
new file mode 100644
index 000000000..863a17c73
--- /dev/null
+++ b/tools/apksize/src/database/java/com.google.apksize/SampleCodeLoader.java
@@ -0,0 +1,24 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+import android.content.Context;
+
+public class SampleCodeLoader {
+
+  public void runSamples(Context context) {
+    new RealtimeDatabase().runSample(context);
+  }
+}
diff --git a/tools/apksize/src/empty/empty.gradle b/tools/apksize/src/empty/empty.gradle
new file mode 100644
index 000000000..bcd80ddcf
--- /dev/null
+++ b/tools/apksize/src/empty/empty.gradle
@@ -0,0 +1,23 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+android {
+    productFlavors {
+        empty {
+            dimension "apkSize"
+            applicationId "com.google.apksize.empty"
+        }
+    }
+}
diff --git a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/package-info.java b/tools/apksize/src/empty/java/com.google.apksize/SampleCodeLoader.java
similarity index 80%
rename from firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/package-info.java
rename to tools/apksize/src/empty/java/com.google.apksize/SampleCodeLoader.java
index 80ec5b294..531038ac3 100644
--- a/firebase-firestore/src/main/java/com/google/cloud/datastore/core/number/package-info.java
+++ b/tools/apksize/src/empty/java/com.google.apksize/SampleCodeLoader.java
@@ -12,5 +12,11 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-/** @hide */
-package com.google.cloud.datastore.storage.number;
\ No newline at end of file
+package com.google.apksize;
+
+import android.content.Context;
+
+public class SampleCodeLoader {
+
+  public void runSamples(Context context) {}
+}
diff --git a/tools/apksize/src/firestore/firestore.gradle b/tools/apksize/src/firestore/firestore.gradle
new file mode 100644
index 000000000..16ced1f72
--- /dev/null
+++ b/tools/apksize/src/firestore/firestore.gradle
@@ -0,0 +1,35 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+android {
+    productFlavors {
+        firestore {
+            dimension "apkSize"
+            applicationId "com.google.apksize.firestore"
+        }
+    }
+    sourceSets {
+        firestore {
+            java.srcDirs = [
+                "src/firestore/java",
+            ]
+        }
+    }
+}
+dependencies {
+    firestoreImplementation project(":firebase-firestore")
+    firestoreImplementation "com.google.android.gms:play-services-auth:16.0.1"
+    firestoreImplementation "com.android.support:support-v4:27.1.0"
+}
diff --git a/tools/apksize/src/firestore/java/com.google.apksize/Firestore.java b/tools/apksize/src/firestore/java/com.google.apksize/Firestore.java
new file mode 100644
index 000000000..9b90237c1
--- /dev/null
+++ b/tools/apksize/src/firestore/java/com.google.apksize/Firestore.java
@@ -0,0 +1,99 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.util.Log;
+import com.google.android.gms.tasks.OnCompleteListener;
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.firestore.DocumentReference;
+import com.google.firebase.firestore.FirebaseFirestore;
+import com.google.firebase.firestore.QueryDocumentSnapshot;
+import com.google.firebase.firestore.QuerySnapshot;
+import java.util.HashMap;
+import java.util.Map;
+
+public class Firestore implements SampleCode {
+  private static final String TAG = "sizetest";
+
+  @Override
+  public void runSample(Context context) {
+    FirebaseFirestore db = FirebaseFirestore.getInstance();
+
+    Map<String, Object> user = new HashMap<>();
+    user.put("first", "Ada");
+    user.put("last", "Lovelace");
+    user.put("born", 1815);
+
+    db.collection("users")
+        .add(user)
+        .addOnSuccessListener(
+            new OnSuccessListener<DocumentReference>() {
+              @Override
+              public void onSuccess(DocumentReference documentReference) {
+                Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
+              }
+            })
+        .addOnFailureListener(
+            new OnFailureListener() {
+              @Override
+              public void onFailure(@NonNull Exception e) {
+                Log.w(TAG, "Error adding document", e);
+              }
+            });
+    // Create a new user with a first, middle, and last name
+    user = new HashMap<>();
+    user.put("first", "Alan");
+    user.put("middle", "Mathison");
+    user.put("last", "Turing");
+    user.put("born", 1912);
+
+    // Add a new document with a generated ID
+    db.collection("users")
+        .add(user)
+        .addOnSuccessListener(
+            new OnSuccessListener<DocumentReference>() {
+              @Override
+              public void onSuccess(DocumentReference documentReference) {
+                Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
+              }
+            })
+        .addOnFailureListener(
+            new OnFailureListener() {
+              @Override
+              public void onFailure(@NonNull Exception e) {
+                Log.w(TAG, "Error adding document", e);
+              }
+            });
+    db.collection("users")
+        .get()
+        .addOnCompleteListener(
+            new OnCompleteListener<QuerySnapshot>() {
+              @Override
+              public void onComplete(@NonNull Task<QuerySnapshot> task) {
+                if (task.isSuccessful()) {
+                  for (QueryDocumentSnapshot document : task.getResult()) {
+                    Log.d(TAG, document.getId() + " => " + document.getData());
+                  }
+                } else {
+                  Log.w(TAG, "Error getting documents.", task.getException());
+                }
+              }
+            });
+  }
+}
diff --git a/tools/apksize/src/firestore/java/com.google.apksize/SampleCodeLoader.java b/tools/apksize/src/firestore/java/com.google.apksize/SampleCodeLoader.java
new file mode 100644
index 000000000..32506d841
--- /dev/null
+++ b/tools/apksize/src/firestore/java/com.google.apksize/SampleCodeLoader.java
@@ -0,0 +1,24 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+import android.content.Context;
+
+public class SampleCodeLoader {
+
+  public void runSamples(Context context) {
+    new Firestore().runSample(context);
+  }
+}
diff --git a/tools/apksize/src/functions/functions.gradle b/tools/apksize/src/functions/functions.gradle
new file mode 100644
index 000000000..f6ff68942
--- /dev/null
+++ b/tools/apksize/src/functions/functions.gradle
@@ -0,0 +1,35 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+android {
+    productFlavors {
+        functions {
+            dimension "apkSize"
+            applicationId "com.google.apksize.functions"
+        }
+    }
+    sourceSets {
+        functions {
+            java.srcDirs = [
+                "src/functions/java",
+            ]
+        }
+    }
+}
+dependencies {
+    functionsImplementation project(":firebase-functions")
+    functionsImplementation "com.google.android.gms:play-services-auth:16.0.1"
+    functionsImplementation "com.android.support:support-v4:27.1.0"
+}
diff --git a/tools/apksize/src/functions/java/com.google.apksize/Functions.java b/tools/apksize/src/functions/java/com.google.apksize/Functions.java
new file mode 100644
index 000000000..07c29fa81
--- /dev/null
+++ b/tools/apksize/src/functions/java/com.google.apksize/Functions.java
@@ -0,0 +1,51 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import com.google.android.gms.tasks.Continuation;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.functions.FirebaseFunctions;
+import com.google.firebase.functions.HttpsCallableResult;
+import java.util.HashMap;
+import java.util.Map;
+
+public class Functions implements SampleCode {
+  private static final String TAG = "sizetest";
+
+  @Override
+  public void runSample(Context context) {
+    FirebaseFunctions mFunctions = FirebaseFunctions.getInstance();
+    Map<String, Object> data = new HashMap<>();
+    data.put("firstNumber", 5);
+    data.put("secondNumber", 6);
+    // Call the function and extract the operation from the result
+    mFunctions
+        .getHttpsCallable("addNumbers")
+        .call(data)
+        .continueWith(
+            new Continuation<HttpsCallableResult, Integer>() {
+              @Override
+              public Integer then(@NonNull Task<HttpsCallableResult> task) throws Exception {
+                // This continuation runs on either success or failure, but if the task
+                // has failed then getResult() will throw an Exception which will be
+                // propagated down.
+                Map<String, Object> result = (Map<String, Object>) task.getResult().getData();
+                return (Integer) result.get("operationResult");
+              }
+            });
+  }
+}
diff --git a/tools/apksize/src/functions/java/com.google.apksize/SampleCodeLoader.java b/tools/apksize/src/functions/java/com.google.apksize/SampleCodeLoader.java
new file mode 100644
index 000000000..d02b7f649
--- /dev/null
+++ b/tools/apksize/src/functions/java/com.google.apksize/SampleCodeLoader.java
@@ -0,0 +1,24 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+import android.content.Context;
+
+public class SampleCodeLoader {
+
+  public void runSamples(Context context) {
+    new Functions().runSample(context);
+  }
+}
diff --git a/tools/apksize/src/main/AndroidManifest.xml b/tools/apksize/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..6c4dd85b6
--- /dev/null
+++ b/tools/apksize/src/main/AndroidManifest.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.google.apksize">
+
+    <application
+        android:allowBackup="true"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/tools/apksize/src/main/java/com.google.apksize/MainActivity.java b/tools/apksize/src/main/java/com.google.apksize/MainActivity.java
new file mode 100644
index 000000000..89dad108b
--- /dev/null
+++ b/tools/apksize/src/main/java/com.google.apksize/MainActivity.java
@@ -0,0 +1,36 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+/**
+ * Every flavor contains SampleCodeLoader class that executes corresponding SampleCode instances
+ *
+ * <p>MainActivity will take SampleCodeLoader from every flavor and run the samples
+ *
+ * <p>We need to do this in order to prevent cutting out packages during pro-guarding
+ */
+import android.app.Activity;
+import android.os.Bundle;
+
+public class MainActivity extends Activity {
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.activity_main);
+
+    new SampleCodeLoader().runSamples(this);
+  }
+}
diff --git a/tools/apksize/src/main/java/com.google.apksize/SampleCode.java b/tools/apksize/src/main/java/com.google.apksize/SampleCode.java
new file mode 100644
index 000000000..4c6bc01ff
--- /dev/null
+++ b/tools/apksize/src/main/java/com.google.apksize/SampleCode.java
@@ -0,0 +1,22 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+/** SampleCode interface allows to load sample code for the selected build variant */
+import android.content.Context;
+
+public interface SampleCode {
+  void runSample(Context context);
+}
diff --git a/tools/apksize/src/main/res/layout/activity_main.xml b/tools/apksize/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..b3a97b305
--- /dev/null
+++ b/tools/apksize/src/main/res/layout/activity_main.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context="com.google.apksize.MainActivity">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Hello World!" />
+</RelativeLayout>
diff --git a/tools/apksize/src/main/res/mipmap-hdpi/ic_launcher.png b/tools/apksize/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..cde69bccc
Binary files /dev/null and b/tools/apksize/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/tools/apksize/src/main/res/values/colors.xml b/tools/apksize/src/main/res/values/colors.xml
new file mode 100644
index 000000000..3ab3e9cbc
--- /dev/null
+++ b/tools/apksize/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/tools/apksize/src/main/res/values/dimens.xml b/tools/apksize/src/main/res/values/dimens.xml
new file mode 100644
index 000000000..812cb7be0
--- /dev/null
+++ b/tools/apksize/src/main/res/values/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+    <dimen name="fab_margin">16dp</dimen>
+</resources>
diff --git a/tools/apksize/src/main/res/values/strings.xml b/tools/apksize/src/main/res/values/strings.xml
new file mode 100644
index 000000000..2ff58d59c
--- /dev/null
+++ b/tools/apksize/src/main/res/values/strings.xml
@@ -0,0 +1,4 @@
+<resources>
+    <string name="app_name">APKSize</string>
+    <string name="test_event">Test event</string>
+</resources>
diff --git a/tools/apksize/src/main/res/values/styles.xml b/tools/apksize/src/main/res/values/styles.xml
new file mode 100644
index 000000000..20ef219a2
--- /dev/null
+++ b/tools/apksize/src/main/res/values/styles.xml
@@ -0,0 +1,16 @@
+<resources>
+
+    <!-- Base application theme. 
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+-->
+
+<!-- Base application theme. -->
+    <style name="AppTheme">
+
+    </style>
+
+</resources>
diff --git a/tools/apksize/src/storage/java/com.google.apksize/SampleCodeLoader.java b/tools/apksize/src/storage/java/com.google.apksize/SampleCodeLoader.java
new file mode 100644
index 000000000..c2c985d1d
--- /dev/null
+++ b/tools/apksize/src/storage/java/com.google.apksize/SampleCodeLoader.java
@@ -0,0 +1,24 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+import android.content.Context;
+
+public class SampleCodeLoader {
+
+  public void runSamples(Context context) {
+    new Storage().runSample(context);
+  }
+}
diff --git a/tools/apksize/src/storage/java/com.google.apksize/Storage.java b/tools/apksize/src/storage/java/com.google.apksize/Storage.java
new file mode 100644
index 000000000..5ba43e5e2
--- /dev/null
+++ b/tools/apksize/src/storage/java/com.google.apksize/Storage.java
@@ -0,0 +1,32 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.apksize;
+
+import android.content.Context;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
+import java.io.File;
+
+public class Storage implements SampleCode {
+
+  @Override
+  public void runSample(Context context) {
+
+    String mBucketName =
+        "gs://" + context.getString(R.string.google_project_id) + ".storage.firebase.com";
+    StorageReference mStorageRef = FirebaseStorage.getInstance().getReference(mBucketName);
+    mStorageRef.getFile(new File(""));
+  }
+}
diff --git a/tools/apksize/src/storage/res/values/strings.xml b/tools/apksize/src/storage/res/values/strings.xml
new file mode 100644
index 000000000..bee72ee17
--- /dev/null
+++ b/tools/apksize/src/storage/res/values/strings.xml
@@ -0,0 +1,4 @@
+<resources>
+    <string name="app_name">APKSize</string>
+    <string name="google_project_id">apk-size-37f26</string>
+</resources>
diff --git a/tools/apksize/src/storage/storage.gradle b/tools/apksize/src/storage/storage.gradle
new file mode 100644
index 000000000..5d07491c1
--- /dev/null
+++ b/tools/apksize/src/storage/storage.gradle
@@ -0,0 +1,35 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+android {
+    productFlavors {
+        storage {
+            dimension "apkSize"
+            applicationId "com.google.apksize.storage"
+        }
+    }
+    sourceSets {
+        storage {
+            java.srcDirs = [
+                "src/storage/java",
+            ]
+        }
+    }
+}
+
+dependencies {
+    storageImplementation project(":firebase-storage")
+    storageImplementation "com.google.android.gms:play-services-tasks:16.0.1"
+}
diff --git a/tools/errorprone/errorprone.gradle b/tools/errorprone/errorprone.gradle
index c5285cd96..e7a329ccf 100644
--- a/tools/errorprone/errorprone.gradle
+++ b/tools/errorprone/errorprone.gradle
@@ -16,10 +16,10 @@ apply plugin: 'java-library'
 
 
 dependencies {
-    implementation 'com.google.errorprone:error_prone_check_api:2.3.1'
+    implementation 'com.google.errorprone:error_prone_check_api:2.3.2'
     implementation 'com.google.auto.service:auto-service:1.0-rc4'
 
-    testImplementation 'junit:junit:4.11'
+    testImplementation 'junit:junit:4.12'
     testImplementation 'com.google.errorprone:error_prone_test_helpers:2.3.1'
     testCompile 'com.google.errorprone:javac:9+181-r4173-1'
 }
