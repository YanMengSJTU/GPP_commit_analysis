diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
index 01bebbf3e..ff86a3cd8 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/util/CustomClassMapper.java
@@ -17,7 +17,6 @@
 import static com.google.firebase.firestore.util.ApiUtil.invoke;
 import static com.google.firebase.firestore.util.ApiUtil.newInstance;
 
-import com.google.api.Property;
 import com.google.firebase.Timestamp;
 import com.google.firebase.firestore.Blob;
 import com.google.firebase.firestore.DocumentReference;
@@ -157,10 +156,11 @@ public static Object convertToPlainJavaTypes(Object object) {
     } else if (o.getClass().isArray()) {
       throw serializeError(path, "Serializing Arrays is not supported, please use Lists instead");
     } else if (o instanceof Enum) {
-      String enumField = ((Enum<?>)o).name();
+      String enumField = ((Enum<?>) o).name();
       try {
         if (o.getClass().getField(enumField).isAnnotationPresent(PropertyName.class)) {
-          PropertyName annotation = o.getClass().getField(enumField).getAnnotation(PropertyName.class);
+          PropertyName annotation =
+              o.getClass().getField(enumField).getAnnotation(PropertyName.class);
           return annotation.value();
         }
       } catch (Exception ex) {
@@ -337,7 +337,7 @@ public static Object convertToPlainJavaTypes(Object object) {
 
       // try to use PropertyName if exist
       Field[] enumFields = clazz.getFields();
-      for (Field field : enumFields){
+      for (Field field : enumFields) {
         if (field.isAnnotationPresent(PropertyName.class)) {
           PropertyName propertyName = field.getAnnotation(PropertyName.class);
           if (value.equals(propertyName.value())) {
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
index d9f170df8..b098d4be0 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/util/MapperTest.java
@@ -21,7 +21,6 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 
-import com.google.api.Property;
 import com.google.firebase.firestore.Exclude;
 import com.google.firebase.firestore.PropertyName;
 import com.google.firebase.firestore.ThrowOnExtraProperties;
@@ -1982,12 +1981,15 @@ public void enumsAreSerialized() {
     bean.complexEnum = ComplexEnum.One;
     bean.enumUsingPropertyName = ComplexEnum.THREE;
     bean.setEnumValue(SimpleEnum.Foo);
-    assertJson("{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'three'}", serialize(bean));
+    assertJson(
+        "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'three'}",
+        serialize(bean));
   }
 
   @Test
   public void enumsAreParsed() {
-    String json = "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'three'}";
+    String json =
+        "{'enumField': 'Bar', 'enumValue': 'Foo', 'complexEnum': 'One', 'enumUsingPropertyName': 'three'}";
     EnumBean bean = deserialize(json, EnumBean.class);
     assertEquals(bean.enumField, SimpleEnum.Bar);
     assertEquals(bean.enumValue, SimpleEnum.Foo);
