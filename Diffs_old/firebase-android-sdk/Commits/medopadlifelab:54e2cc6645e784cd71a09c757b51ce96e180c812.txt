diff --git a/firebase-common/src/main/java/com/google/firebase/auth/GetAccessTokenResult.java b/firebase-common/src/main/java/com/google/firebase/auth/GetAccessTokenResult.java
new file mode 100644
index 000000000..d184b7d11
--- /dev/null
+++ b/firebase-common/src/main/java/com/google/firebase/auth/GetAccessTokenResult.java
@@ -0,0 +1,136 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.auth;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.support.annotation.Nullable;
+
+import com.google.android.gms.common.annotation.KeepForSdk;
+import com.google.firebase.annotations.PublicApi;
+
+import java.util.Map;
+
+/** Result object that contains a Firebase Auth ID Token. */
+@PublicApi
+public class GetAccessTokenResult {
+
+  private static final String EXPIRATION_TIMESTAMP = "exp";
+  private static final String AUTH_TIMESTAMP = "auth_time";
+  private static final String ISSUED_AT_TIMESTAMP = "iat";
+  private static final String FIREBASE_KEY = "firebase";
+  private static final String SIGN_IN_PROVIDER = "sign_in_provider";
+
+  private static final String APP_PREF_KEY = "app_pref_key";
+  private static final String JWT_TOKEN_KEY = "jwt_token_key";
+
+  private Context context;
+
+  private String token;
+  private Map<String, Object> claims;
+
+  /**
+   * @hide
+   * @param token represents the {@link String} access token.
+   */
+  @KeepForSdk
+  public GetAccessTokenResult(Context context,String token, Map<String, Object> claims) {
+    this.context = context;
+    this.token = token;
+    this.claims = claims;
+  }
+
+  public void storeAccessToken(String token){
+    SharedPreferences sharedPref = context.getSharedPreferences(APP_PREF_KEY, Context.MODE_PRIVATE);
+    SharedPreferences.Editor editor = sharedPref.edit();
+    editor.putString(JWT_TOKEN_KEY, token);
+    editor.commit();
+  }
+
+  public String getAccessToken(){
+      SharedPreferences sharedPref = context.getSharedPreferences(APP_PREF_KEY, Context.MODE_PRIVATE);
+      String token = sharedPref.getString(JWT_TOKEN_KEY, null);
+
+      return token;
+  }
+
+  /**
+   * Firebase Auth ID Token. Useful for authenticating calls against your own backend. Verify the
+   * integrity and validity of the token in your server either by using our server SDKs or following
+   * the documentation.
+   */
+  @Nullable
+  @PublicApi
+  public String getToken() {
+    return token;
+  }
+
+  /** Returns the time in milliseconds since epoch at which this ID token will expire */
+  @PublicApi
+  public long getExpirationTimestamp() {
+    return getLongFromClaimsSafely(EXPIRATION_TIMESTAMP);
+  }
+
+  /**
+   * Returns the authentication timestamp in milliseconds since epoch. This is the time the user
+   * authenticated (signed in) and not the time the token was refreshed.
+   */
+  @PublicApi
+  public long getAuthTimestamp() {
+    return getLongFromClaimsSafely(AUTH_TIMESTAMP);
+  }
+
+  /**
+   * Returns the issued at timestamp in milliseconds since epoch. This is the time the ID token was
+   * last refreshed and not the authentication timestamp.
+   */
+  @PublicApi
+  public long getIssuedAtTimestamp() {
+    return getLongFromClaimsSafely(ISSUED_AT_TIMESTAMP);
+  }
+
+  /**
+   * Returns the sign-in provider through which the ID token was obtained (anonymous, custom, phone,
+   * password, etc). Note, this does not map to provider IDs. For example, anonymous and custom
+   * authentications are not considered providers. We chose the name here to map the name used in
+   * the ID token.
+   */
+  @Nullable
+  @PublicApi
+  public String getSignInProvider() {
+    // Sign in provider lives inside the 'firebase' element of the JSON
+    Map<String, Object> firebaseElem = (Map<String, Object>) claims.get(FIREBASE_KEY);
+    if (firebaseElem != null) {
+      return (String) firebaseElem.get(SIGN_IN_PROVIDER);
+    }
+    return null;
+  }
+
+  /**
+   * Returns the entire payload claims of the ID token including the standard reserved claims as
+   * well as the custom claims (set by developer via Admin SDK). Developers should verify the ID
+   * token and parse claims from its payload on the backend and never trust this value on the
+   * client. Returns an empty map if no claims are present.
+   */
+  @PublicApi
+  public Map<String, Object> getClaims() {
+    return claims;
+  }
+
+  private long getLongFromClaimsSafely(String key) {
+    Integer result = ((Integer) claims.get(key));
+    return result == null ? 0L : result.longValue();
+  }
+}
diff --git a/firebase-common/src/main/java/com/google/firebase/auth/GetTokenResult.java b/firebase-common/src/main/java/com/google/firebase/auth/GetTokenResult.java
index eedf33f8c..41772292e 100644
--- a/firebase-common/src/main/java/com/google/firebase/auth/GetTokenResult.java
+++ b/firebase-common/src/main/java/com/google/firebase/auth/GetTokenResult.java
@@ -50,6 +50,7 @@ public GetTokenResult(String token, Map<String, Object> claims) {
   @Nullable
   @PublicApi
   public String getToken() {
+    System.out.println("hi");
     return token;
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
index 20ace7fbc..7f20a23ea 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
@@ -30,6 +30,7 @@
 import com.google.firebase.annotations.PublicApi;
 import com.google.firebase.auth.internal.InternalAuthProvider;
 import com.google.firebase.firestore.auth.CredentialsProvider;
+import com.google.firebase.firestore.auth.CustomCredentialsProvider;
 import com.google.firebase.firestore.auth.EmptyCredentialsProvider;
 import com.google.firebase.firestore.auth.FirebaseAuthCredentialsProvider;
 import com.google.firebase.firestore.core.DatabaseInfo;
@@ -95,6 +96,7 @@ static FirebaseFirestore newInstance(
       @NonNull FirebaseApp app,
       @Nullable InternalAuthProvider authProvider,
       @NonNull String database) {
+
     String projectId = app.getOptions().getProjectId();
     if (projectId == null) {
       throw new IllegalArgumentException("FirebaseOptions.getProjectId() cannot be null");
@@ -108,7 +110,10 @@ static FirebaseFirestore newInstance(
       Logger.debug(TAG, "Firebase Auth not available, falling back to unauthenticated usage.");
       provider = new EmptyCredentialsProvider();
     } else {
-      provider = new FirebaseAuthCredentialsProvider(authProvider);
+//      provider = new FirebaseAuthCredentialsProvider(authProvider);
+
+      //TODO need more work
+      provider = new CustomCredentialsProvider();
     }
 
     queue.enqueueAndForget(
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/CustomCredentialsProvider.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/CustomCredentialsProvider.java
new file mode 100644
index 000000000..a14c662db
--- /dev/null
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/CustomCredentialsProvider.java
@@ -0,0 +1,56 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.auth;
+
+import com.google.android.gms.tasks.Task;
+import com.google.android.gms.tasks.TaskCompletionSource;
+import com.google.firebase.FirebaseApp;
+import com.google.firebase.auth.GetAccessTokenResult;
+import com.google.firebase.firestore.util.Listener;
+
+
+/**
+ * A Credentials Provider that always returns an empty token
+ */
+public class CustomCredentialsProvider extends CredentialsProvider {
+
+    @Override
+    public Task<String> getToken() {
+        System.out.println("getToken: CustomCredentialsProvider");
+
+        GetAccessTokenResult getAccessTokenResult = new GetAccessTokenResult(FirebaseApp.getInstance().getApplicationContext(), null, null);
+        String token = getAccessTokenResult.getAccessToken();
+
+        TaskCompletionSource<String> source = new TaskCompletionSource<>();
+        source.setResult(token);
+
+        System.out.println("AccessToken: " + token);
+
+        return source.getTask();
+    }
+
+    @Override
+    public void invalidateToken() {
+    }
+
+    @Override
+    public void setChangeListener(Listener<User> changeListener) {
+        changeListener.onValue(User.UNAUTHENTICATED);
+    }
+
+    @Override
+    public void removeChangeListener() {
+    }
+}
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/EmptyCredentialsProvider.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/EmptyCredentialsProvider.java
index 0043c07ff..cca7f7484 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/EmptyCredentialsProvider.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/EmptyCredentialsProvider.java
@@ -23,9 +23,8 @@
 
   @Override
   public Task<String> getToken() {
-      System.out.println("getToken: EmptyCredentialsProvider");
-
-      TaskCompletionSource<String> source = new TaskCompletionSource<>();
+    System.out.println("getToken: EmptyCredentialsProvider");
+    TaskCompletionSource<String> source = new TaskCompletionSource<>();
     source.setResult(null);
 
     System.out.println("AccessToken: "+ null);
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/FirebaseAuthCredentialsProvider.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/FirebaseAuthCredentialsProvider.java
index 10b92461d..84de6f97b 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/FirebaseAuthCredentialsProvider.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/auth/FirebaseAuthCredentialsProvider.java
@@ -15,6 +15,8 @@
 package com.google.firebase.firestore.auth;
 
 import android.support.annotation.NonNull;
+
+import com.google.android.gms.tasks.Continuation;
 import com.google.android.gms.tasks.Task;
 import com.google.firebase.FirebaseApp;
 import com.google.firebase.auth.GetTokenResult;
@@ -88,24 +90,27 @@ public FirebaseAuthCredentialsProvider(InternalAuthProvider authProvider) {
     // FirebaseFirestoreException) if there is a token change while the request is outstanding.
     final int savedCounter = tokenCounter;
     return res.continueWith(
-        task -> {
-          synchronized (this) {
-            // Cancel the request since the token changed while the request was outstanding so the
-            // response is potentially for a previous user (which user, we can't be sure).
-            if (savedCounter != tokenCounter) {
-              throw new FirebaseFirestoreException(
-                  "getToken aborted due to token change", Code.ABORTED);
-            }
-            if (!task.isSuccessful()) {
-              throw task.getException();
-            } else {
-
-              String token = task.getResult().getToken();
-              System.out.println("AccessToken: "+ token);
-              return token;
-            }
-          }
-        });
+            new Continuation<GetTokenResult, String>() {
+              @Override
+              public String then(@NonNull Task<GetTokenResult> task) throws Exception {
+                synchronized (FirebaseAuthCredentialsProvider.this) {
+                  // Cancel the request since the token changed while the request was outstanding so the
+                  // response is potentially for a previous user (which user, we can't be sure).
+                  if (savedCounter != tokenCounter) {
+                    throw new FirebaseFirestoreException(
+                            "getToken aborted due to token change", Code.ABORTED);
+                  }
+                  if (!task.isSuccessful()) {
+                    throw task.getException();
+                  } else {
+
+                    String token = task.getResult().getToken();
+                    System.out.println("AccessToken: " + token);
+                    return token;
+                  }
+                }
+              }
+            });
   }
 
   @Override
diff --git a/test-apps/firestore-test-app/build.gradle b/test-apps/firestore-test-app/build.gradle
index 9390d6111..37d2b2d24 100644
--- a/test-apps/firestore-test-app/build.gradle
+++ b/test-apps/firestore-test-app/build.gradle
@@ -53,6 +53,8 @@ dependencies {
     // versions published to the root project' s build/ directory.
 
     implementation 'com.google.firebase:firebase-firestore:18.1.0-SNAPSHOT'
+    implementation 'com.google.firebase:firebase-common:16.1.0-SNAPSHOT'
+
 //    implementation project(':firebase-firestore')
 
     implementation 'com.google.firebase:firebase-core:16+'
diff --git a/test-apps/firestore-test-app/src/main/AndroidManifest.xml b/test-apps/firestore-test-app/src/main/AndroidManifest.xml
index 4df8d818b..c6b6ee06f 100644
--- a/test-apps/firestore-test-app/src/main/AndroidManifest.xml
+++ b/test-apps/firestore-test-app/src/main/AndroidManifest.xml
@@ -29,19 +29,19 @@
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
         <activity android:name=".TestActivity">
-            <intent-filter>
-            <action android:name="android.intent.action.MAIN" />
-            <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
-        <activity android:name=".CustomAuthActivity">
             <!--<intent-filter>-->
             <!--<action android:name="android.intent.action.MAIN" />-->
             <!--<category android:name="android.intent.category.LAUNCHER" />-->
             <!--</intent-filter>-->
         </activity>
 
+        <activity android:name=".CustomAuthActivity">
+            <intent-filter>
+            <action android:name="android.intent.action.MAIN" />
+            <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
         <activity android:name=".FacebookLoginActivity">
             <!--<intent-filter>-->
                 <!--<action android:name="android.intent.action.MAIN" />-->
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java
index 4d2db7800..7790cc836 100644
--- a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/CustomAuthActivity.java
@@ -35,6 +35,13 @@
 import com.google.firebase.auth.AuthResult;
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.auth.FirebaseUser;
+import com.google.firebase.auth.GetAccessTokenResult;
+import com.google.firebase.auth.GetTokenResult;
+import com.google.firebase.firestore.FirebaseFirestore;
+import com.google.firebase.firestore.FirebaseFirestoreSettings;
+
+import java.util.HashMap;
+import java.util.Map;
 
 public class CustomAuthActivity extends BaseActivity implements
         View.OnClickListener {
@@ -48,11 +55,25 @@
 
     private FirebaseAuth mAuth;
 
+    private FirebaseFirestore db;
+
+    private static final Map<String, Object> restaurant = new HashMap<>();
+    static {
+        restaurant.put("location", "Google MTV");
+    }
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_emailpassword);
 
+        db = FirebaseFirestore.getInstance();
+        // Since offline persistence is enabled by default, the event listener is invoked even without
+        db.setFirestoreSettings(
+                new FirebaseFirestoreSettings.Builder().setTimestampsInSnapshotsEnabled(true).setPersistenceEnabled(false).build());
+        db.setLoggingEnabled(true);
+
+
         // Views
         mStatusTextView = findViewById(R.id.status);
         mDetailTextView = findViewById(R.id.detail);
@@ -137,47 +158,69 @@ private void signIn(String username, String password) {
 
         Task<AuthResult> combinedTask =
                 // STEP 1: User logins with life os username and password
-                Util.getCustomTokenWithUsernameAndPassword(username, password)
+                Util.getTokenWithUsernameAndPassword(username, password)
                         .continueWithTask(new Continuation<String, Task<AuthResult>>() {
                             @Override
                             public Task<AuthResult> then(@NonNull Task<String> task) throws Exception {
                                 // STEP 2: Use Firebase Custom Auth token to login Firebase
-                                String customToken = task.getResult();
-                                System.out.println("token: " + customToken);
-
-                                if (task.isSuccessful() && customToken != null) {
-                                    return mAuth.signInWithCustomToken(customToken)
-                                            .addOnSuccessListener(
-                                                    new OnSuccessListener<AuthResult>() {
-                                                        @Override
-                                                        public void onSuccess(AuthResult authResult) {
-                                                            Toast.makeText(CustomAuthActivity.this, "Signed in", Toast.LENGTH_LONG).show();
-
-                                                            // Sign in success, update UI with the signed-in user's information
-                                                            Log.d(TAG, "signInWithToken:success");
-                                                            FirebaseUser user = mAuth.getCurrentUser();
-                                                            updateUI(user);
-
-                                                            hideProgressDialog();
-                                                        }
-                                                    })
-                                            .addOnFailureListener(
-                                                    new OnFailureListener() {
-                                                        @Override
-                                                        public void onFailure(@NonNull Exception e) {
-                                                            Toast.makeText(CustomAuthActivity.this, e.toString(), Toast.LENGTH_LONG).show();
-
-                                                            // If sign in fails, display a message to the user.
-                                                            Log.w(TAG, "signInWithEmail:failure", e);
-                                                            Toast.makeText(CustomAuthActivity.this, "Authentication failed.",
-                                                                    Toast.LENGTH_SHORT).show();
-                                                            updateUI(null);
-                                                            mStatusTextView.setText(R.string.auth_failed);
-
-                                                            hideProgressDialog();
-                                                        }
-                                                    });
-                                } else if (task.isSuccessful() && customToken == null) {
+                                String accessToken = task.getResult();
+                                System.out.println("token: " + accessToken);
+
+                                GetAccessTokenResult getAccessTokenResult = new GetAccessTokenResult(getBaseContext(), null, null);
+                                getAccessTokenResult.storeAccessToken(accessToken);
+
+                                if (task.isSuccessful() && accessToken != null) {
+
+                                    //TODO
+                                    //save token somewhere prefarably accessible through all firebase modules, show sign in successful message or error , implement firestore auth interfaces to send this token instead of the firebase id token
+                                    GetTokenResult getTokenResult;
+
+                                    Toast.makeText(CustomAuthActivity.this, "Signed in", Toast.LENGTH_LONG).show();
+
+                                    // Sign in success, update UI with the signed-in user's information
+                                    Log.d(TAG, "signInWithUsernamePassword:success");
+
+                                    FirebaseUser user = mAuth.getCurrentUser();
+                                    updateUI(user);
+
+                                    hideProgressDialog();
+
+                                    Toast.makeText(CustomAuthActivity.this, "Signed in", Toast.LENGTH_LONG).show();
+                                    db.collection("restaurants").document("Baadal").set(restaurant);
+
+//
+//                                    return mAuth.signInWithCustomToken(accessToken)
+//                                            .addOnSuccessListener(
+//                                                    new OnSuccessListener<AuthResult>() {-
+//                                                        @Override
+//                                                        public void onSuccess(AuthResult authResult) {
+//                                                            Toast.makeText(CustomAuthActivity.this, "Signed in", Toast.LENGTH_LONG).show();
+//
+//                                                            // Sign in success, update UI with the signed-in user's information
+//                                                            Log.d(TAG, "signInWithToken:success");
+//                                                            FirebaseUser user = mAuth.getCurrentUser();
+//                                                            updateUI(user);
+//
+//                                                            hideProgressDialog();
+//                                                        }
+//                                                    })
+//                                            .addOnFailureListener(
+//                                                    new OnFailureListener() {
+//                                                        @Override
+//                                                        public void onFailure(@NonNull Exception e) {
+//                                                            Toast.makeText(CustomAuthActivity.this, e.toString(), Toast.LENGTH_LONG).show();
+//
+//                                                            // If sign in fails, display a message to the user.
+//                                                            Log.w(TAG, "signInWithEmail:failure", e);
+//                                                            Toast.makeText(CustomAuthActivity.this, "Authentication failed.",
+//                                                                    Toast.LENGTH_SHORT).show();
+//                                                            updateUI(null);
+//                                                            mStatusTextView.setText(R.string.auth_failed);
+//
+//                                                            hideProgressDialog();
+//                                                        }
+//                                                    });
+                                } else if (task.isSuccessful() && accessToken == null) {
                                     hideProgressDialog();
                                 }
 
diff --git a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java
index b6f5ec0bd..23fb79b08 100644
--- a/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java
+++ b/test-apps/firestore-test-app/src/main/java/com/google/firebase/testapps/firestore/Util.java
@@ -10,6 +10,7 @@
 
 import okhttp3.Call;
 import okhttp3.Callback;
+import okhttp3.FormBody;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
@@ -17,10 +18,13 @@
 import okhttp3.Response;
 
 public class Util {
-    private final static String customAuthAddress = "http://192.168.1.116:3000/auth/login";
-    private final static String registerAddress = "http://192.168.1.116:3000/auth/register";
+//    private final static String customAuthAddress = "http://35.246.33.237:8080/auth/login";
 
-    public final static String facebookUrl = "https://192.168.1.116:3000/auth/oauth2/facebook";
+    //new custom login server address
+    private final static String customAuthAddress = "http://35.242.161.36/login";
+    private final static String registerAddress = "http://35.242.161.36:8080/auth/register";
+
+    public final static String facebookUrl = "http://35.242.161.36:8080/auth/oauth2/facebook";
 
 
     public static final MediaType JSON
@@ -78,6 +82,42 @@ public void onResponse(Call call, Response response) throws IOException {
         return source.getTask();
     }
 
+    public static Task<String> getTokenWithUsernameAndPassword(String username, String password) {
+        final TaskCompletionSource<String> source = new TaskCompletionSource<>();
+
+        RequestBody body = new FormBody.Builder()
+                .add("username", username)
+                .add("password", password)
+                .build();
+        Request request = new Request.Builder()
+                .url(customAuthAddress)
+                .post(body)
+                .build();
+
+
+        client.newCall(request).enqueue(new Callback() {
+            @Override
+            public void onFailure(Call call, IOException e) {
+                source.setException(e);
+                e.printStackTrace();
+            }
+
+            @Override
+            public void onResponse(Call call, Response response) throws IOException {
+                String data = response.body().string();
+
+                System.out.println("response: " + data);
+
+                if (response.code() == 200) {
+                    //make sure it is a token , it could be other things even with http 200
+                    source.setResult(data);
+                }
+            }
+        });
+
+        return source.getTask();
+    }
+
     public static Task<String> createUser(String username, String password) {
         final TaskCompletionSource<String> source = new TaskCompletionSource<>();
 
@@ -103,6 +143,8 @@ public void onFailure(Call call, IOException e) {
             public void onResponse(Call call, Response response) throws IOException {
                 String jsonData = response.body().string();
 
+                System.out.println("2data: " + jsonData);
+
                 try {
                     JSONObject obj = new JSONObject(jsonData);
                     boolean hasError = obj.has("errors");
