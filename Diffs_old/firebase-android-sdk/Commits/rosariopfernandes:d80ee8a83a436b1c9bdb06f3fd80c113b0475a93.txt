diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/FirebaseLibraryPlugin.java b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/FirebaseLibraryPlugin.java
index df8a66fc2..f204bc366 100644
--- a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/FirebaseLibraryPlugin.java
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/FirebaseLibraryPlugin.java
@@ -21,6 +21,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.firebase.gradle.plugins.apiinfo.GenerateApiTxtFileTask;
 import com.google.firebase.gradle.plugins.apiinfo.ApiInformationTask;
+import com.google.firebase.gradle.plugins.apiinfo.GenerateStubsTask;
 import com.google.firebase.gradle.plugins.apiinfo.GetMetalavaJarTask;
 import com.google.firebase.gradle.plugins.ci.device.FirebaseTestServer;
 
@@ -126,6 +127,14 @@ private static void setupApiInformationAnalysis(Project project, LibraryExtensio
       }
       task.dependsOn("getMetalavaJar");
     });
+
+    project.getTasks().register("docStubs", GenerateStubsTask.class, task -> {
+      task.setMetalavaJarPath(metalavaOutputJarFile.getAbsolutePath());
+      task.setOutputDir(new File(project.getBuildDir(), "doc-stubs"));
+      task.dependsOn("getMetalavaJar");
+
+      task.setSourceDirs(android.getSourceSets().getByName("main").getJava().getSrcDirs());
+    });
   }
 
   private static void setupStaticAnalysis(
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/apiinfo/GenerateStubsTask.java b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/apiinfo/GenerateStubsTask.java
new file mode 100644
index 000000000..ad07ed425
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/apiinfo/GenerateStubsTask.java
@@ -0,0 +1,63 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.gradle.plugins.apiinfo;
+
+import java.io.File;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.stream.Collectors;
+import org.gradle.api.DefaultTask;
+import org.gradle.api.tasks.Input;
+import org.gradle.api.tasks.InputFiles;
+import org.gradle.api.tasks.OutputDirectory;
+import org.gradle.api.tasks.TaskAction;
+
+public abstract class GenerateStubsTask extends DefaultTask {
+  @Input
+  public abstract String getMetalavaJarPath();
+
+  public abstract void setMetalavaJarPath(String path);
+
+  @InputFiles
+  public abstract Collection<File> getSourceDirs();
+
+  public abstract void setSourceDirs(Collection<File> dirs);
+
+  @OutputDirectory
+  public abstract File getOutputDir();
+
+  public abstract void setOutputDir(File dir);
+
+  @TaskAction
+  public void run() {
+    String sourcePath =
+        getSourceDirs().stream().map(File::getAbsolutePath).collect(Collectors.joining(":"));
+
+    getProject()
+        .javaexec(
+            spec -> {
+              spec.setMain("-jar");
+              spec.setArgs(
+                  Arrays.asList(
+                      getMetalavaJarPath(),
+                      "--quiet",
+                      "--source-path",
+                      sourcePath,
+                      "--include-annotations",
+                      "--doc-stubs",
+                      getOutputDir().getAbsolutePath()));
+            });
+  }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/AarSizeJsonBuilder.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/AarSizeJsonBuilder.groovy
new file mode 100644
index 000000000..1e00d4887
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/AarSizeJsonBuilder.groovy
@@ -0,0 +1,68 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle.plugins.measurement.aarsize
+
+/** A helper class that generates the AAR size measurement JSON report. */
+class AarSizeJsonBuilder {
+
+    private static final String PULL_REQUEST_TABLE = "AndroidPullRequests"
+    private static final String PULL_REQUEST_COLUMN = "pull_request_id"
+    private static final String AAR_SIZE_TABLE = "AndroidAarSizes"
+    private static final String SDK_COLUMN = "sdk_id"
+    private static final String AAR_SIZE_COLUMN = "aar_size"
+
+    // This comes in as a String and goes out as a String, so we might as well keep it a String
+    private final String pullRequestNumber
+    private final List<Tuple2<Integer, Integer>> sdkAarSizes
+
+    AarSizeJsonBuilder(pullRequestNumber) {
+        this.pullRequestNumber = pullRequestNumber
+        this.sdkAarSizes = []
+    }
+
+    def addAarSize(sdkId, size) {
+        sdkAarSizes.add(new Tuple2(sdkId, size))
+    }
+
+    def toJsonString() {
+        if (sdkAarSizes.isEmpty()) {
+            throw new IllegalStateException("Empty - No sizes were added")
+        }
+
+        def sizes = sdkAarSizes.collect {
+            "[$pullRequestNumber, $it.first, $it.second]"
+        }.join(", ")
+
+        def json = """
+            {
+                tables: [
+                    {
+                        table_name: "$PULL_REQUEST_TABLE",
+                        column_names: ["$PULL_REQUEST_COLUMN"],
+                        replace_measurements: [[$pullRequestNumber]],
+                    },
+                    {
+                        table_name: "$AAR_SIZE_TABLE",
+                        column_names: ["$PULL_REQUEST_COLUMN", "$SDK_COLUMN", "$AAR_SIZE_COLUMN"],
+                        replace_measurements: [$sizes],
+                    },
+                ],
+            }
+        """
+
+        return json
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/AarSizeTableBuilder.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/AarSizeTableBuilder.groovy
new file mode 100644
index 000000000..5bf512231
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/AarSizeTableBuilder.groovy
@@ -0,0 +1,41 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle.plugins.measurement.aarsize
+
+/** A helper class that generates the human-readable, AAR size measurement table. */
+class AarSizeTableBuilder {
+
+    private final List<Tuple> sdkAarSizes = []
+
+    def addAarSize(projectName, size) {
+        sdkAarSizes.add(new Tuple(projectName, size))
+    }
+
+    def toTableString() {
+        if (sdkAarSizes.isEmpty()) {
+          throw new IllegalStateException("Rempty - No sizes added")
+        }
+
+        def table = "|----------------        AAR Sizes        --------------|\n"
+        table +=    "|---------    project    ---------|--  size in bytes  --|\n"
+
+        table += sdkAarSizes.collect {
+            sprintf("|%-33s|%,21d|", it.get(0), it.get(1))
+        }.join("\n")
+
+        return table
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/GenerateMeasurementsTask.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/GenerateMeasurementsTask.groovy
new file mode 100644
index 000000000..c75defff0
--- /dev/null
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/aarsize/GenerateMeasurementsTask.groovy
@@ -0,0 +1,105 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
+package com.google.firebase.gradle.plugins.measurement.aarsize
+
+import org.gradle.api.DefaultTask
+import org.gradle.api.Project
+import org.gradle.api.Task
+import org.gradle.api.tasks.InputFile
+import org.gradle.api.tasks.Optional
+import org.gradle.api.tasks.OutputFile
+import org.gradle.api.tasks.TaskAction
+
+/**
+ * Generates size measurements after building the release aar's.
+ *
+ * <p>This task can run in two modes. The first mode, enabled when running the task with the
+ * {@code pull_request} flag set, is a dependency of {@link UploadMeasurementsTask} and generates
+ * a JSON file with measurement information. The second mode, enabled when running the task without
+ * flags, outputs a table to standard out with more human-readable information. See the README for
+ * more details.
+ *
+ * <p>This task has two properties, a required ignore SDK map file, as input, and the optional
+ * report file, as output. The map is used to ignore SDKs that shouldn't be included in the report.
+ * The report path is where the output should be stored. These properties are not used when the task
+ * is run in the second, human-friendly mode. However, they are still required to be specified.
+ */
+public class GenerateMeasurementsTask extends DefaultTask {
+
+    /**
+     * The file for storing the report.
+     *
+     * <p>This may be any type recognized by Gradle as a file. The contents, if any, will be
+     * overwritten by the new report.
+     */
+    @OutputFile
+    @Optional
+    File reportFile
+
+    @Override
+    Task configure(Closure closure) {
+        outputs.upToDateWhen { false }
+        dependsOn "assemble"
+        return super.configure(closure)
+    }
+
+    @TaskAction
+    def generate() {
+        def subprojects = [:]
+         project.rootProject.subprojects.collect { Project it ->
+            def aars = it.fileTree('build') {
+                include '**/*release.aar'
+            }
+            if (aars.size() > 1) {
+                def msg = "${it.name} produced more than one AAR"
+                throw new IllegalStateException(msg)
+            }
+            def name = it.name
+            if (it.parent != project.rootProject) {
+                name = "${it.parent.name}:${it.name}"
+            }
+            aars.each { File f ->
+                subprojects[name] = f.length()
+            }
+        }
+        if (project.hasProperty("pull_request")) {
+            def pullRequestNumber = project.properties["pull_request"]
+            generateJson(pullRequestNumber, subprojects)
+        } else {
+            generateTable(subprojects)
+        }
+    }
+
+    private def generateJson(pullRequestNumber, subprojects) {
+        def builder = new AarSizeJsonBuilder(pullRequestNumber)
+        subprojects.each { name, aarSize ->
+            builder.addAarSize(name, aarSize)
+        }
+
+        reportFile.withWriter {
+            it.write(builder.toJsonString())
+        }
+    }
+
+    private def generateTable(subprojects) {
+        def builder = new AarSizeTableBuilder()
+        subprojects.each { name, aarSize ->
+            builder.addAarSize(name, aarSize)
+        }
+
+        project.logger.quiet(builder.toTableString())
+    }
+}
diff --git a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/apksize/ApkSizeTableBuilder.groovy b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/apksize/ApkSizeTableBuilder.groovy
index c18e9a5de..31eb53792 100644
--- a/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/apksize/ApkSizeTableBuilder.groovy
+++ b/buildSrc/src/main/groovy/com/google/firebase/gradle/plugins/measurement/apksize/ApkSizeTableBuilder.groovy
@@ -33,7 +33,7 @@ class ApkSizeTableBuilder {
         table +=    "|---    project    ---|--  build type   --|--  size in bytes  --|\n"
 
         table += sdkSizes.collect {
-            sprintf("|%-21s|%-19s|%-21s|", it.get(0), it.get(1), it.get(2))
+            sprintf("|%-21s|%-19s|%,21d|", it.get(0), it.get(1), it.get(2))
         }.join("\n")
 
         return table
diff --git a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/apksize/ApkSizeTableBuilderTest.groovy b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/apksize/ApkSizeTableBuilderTest.groovy
index 3b1cf3f25..591f442bb 100644
--- a/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/apksize/ApkSizeTableBuilderTest.groovy
+++ b/buildSrc/src/test/groovy/com/google/firebase/gradle/plugins/measurement/apksize/ApkSizeTableBuilderTest.groovy
@@ -37,7 +37,7 @@ public class ApkSizeTableBuilderTest {
   @Test
   public void toTableString_withOneMeasurement() {
     def expected = HEADER +
-        "|firebase foo         |debug              |255000               |"
+        "|firebase foo         |debug              |              255,000|"
 
     def builder = new ApkSizeTableBuilder()
     builder.addApkSize("firebase foo", "debug", 255000)
@@ -48,9 +48,9 @@ public class ApkSizeTableBuilderTest {
   @Test
   public void toTableString_withThreeMeasurements() {
     def expected = HEADER +
-        "|firebase foo         |debug              |255000               |\n" +
-        "|google loo           |release            |4000                 |\n" +
-        "|Appy Snap App        |Snappy             |781000               |"
+        "|firebase foo         |debug              |              255,000|\n" +
+        "|google loo           |release            |                4,000|\n" +
+        "|Appy Snap App        |Snappy             |              781,000|"
 
     def builder = new ApkSizeTableBuilder()
     builder.addApkSize("firebase foo", "debug", 255000)
diff --git a/firebase-config/gradle.properties b/firebase-config/gradle.properties
index d5684d1b9..6c3915781 100644
--- a/firebase-config/gradle.properties
+++ b/firebase-config/gradle.properties
@@ -14,7 +14,7 @@
 # limitations under the License.
 #
 
-version=19.0.1
-latestReleasedVersion=19.0.0
+version=19.0.2
+latestReleasedVersion=19.0.1
 android.enableUnitTestBinaryResources=true
 
diff --git a/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java b/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
index 572015180..84a951975 100644
--- a/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
+++ b/firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java
@@ -544,7 +544,12 @@ public void setDefaults(@NonNull Map<String, Object> defaults) {
     // Fetch values from the server are in the Map<String, String> format, so match that here.
     Map<String, String> defaultsStringMap = new HashMap<>();
     for (Map.Entry<String, Object> defaultsEntry : defaults.entrySet()) {
-      defaultsStringMap.put(defaultsEntry.getKey(), defaultsEntry.getValue().toString());
+      Object value = defaultsEntry.getValue();
+      if (value instanceof byte[]) {
+        defaultsStringMap.put(defaultsEntry.getKey(), new String((byte[]) value));
+      } else {
+        defaultsStringMap.put(defaultsEntry.getKey(), value.toString());
+      }
     }
 
     setDefaultsWithStringsMap(defaultsStringMap);
@@ -571,7 +576,12 @@ public void setDefaults(@NonNull Map<String, Object> defaults) {
     // Fetch values from the server are in the Map<String, String> format, so match that here.
     Map<String, String> defaultsStringMap = new HashMap<>();
     for (Map.Entry<String, Object> defaultsEntry : defaults.entrySet()) {
-      defaultsStringMap.put(defaultsEntry.getKey(), defaultsEntry.getValue().toString());
+      Object value = defaultsEntry.getValue();
+      if (value instanceof byte[]) {
+        defaultsStringMap.put(defaultsEntry.getKey(), new String((byte[]) value));
+      } else {
+        defaultsStringMap.put(defaultsEntry.getKey(), value.toString());
+      }
     }
 
     return setDefaultsWithStringsMapAsync(defaultsStringMap);
diff --git a/firebase-config/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java b/firebase-config/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java
index 714b8b4b8..9f9702502 100644
--- a/firebase-config/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java
+++ b/firebase-config/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java
@@ -95,7 +95,8 @@
   private static final String ETAG = "ETag";
 
   // We use a HashMap so that Mocking is easier.
-  private static final HashMap<String, String> DEFAULTS_MAP = new HashMap<>();
+  private static final HashMap<String, Object> DEFAULTS_MAP = new HashMap<>();
+  private static final HashMap<String, String> DEFAULTS_STRING_MAP = new HashMap<>();
 
   @Mock private ConfigCacheClient mockFetchedCache;
   @Mock private ConfigCacheClient mockActivatedCache;
@@ -126,6 +127,12 @@ public void setUp() throws Exception {
     DEFAULTS_MAP.put("first_default_key", "first_default_value");
     DEFAULTS_MAP.put("second_default_key", "second_default_value");
     DEFAULTS_MAP.put("third_default_key", "third_default_value");
+    DEFAULTS_MAP.put("byte_array_default_key", "fourth_default_value".getBytes());
+
+    DEFAULTS_STRING_MAP.put("first_default_key", "first_default_value");
+    DEFAULTS_STRING_MAP.put("second_default_key", "second_default_value");
+    DEFAULTS_STRING_MAP.put("third_default_key", "third_default_value");
+    DEFAULTS_STRING_MAP.put("byte_array_default_key", "fourth_default_value");
 
     MockitoAnnotations.initMocks(this);
 
@@ -1063,7 +1070,7 @@ public void getInfo_returnsInfo() {
   public void setDefaults_withMap_setsDefaults() throws Exception {
     frc.setDefaults(ImmutableMap.copyOf(DEFAULTS_MAP));
 
-    ConfigContainer defaultsContainer = newDefaultsContainer(DEFAULTS_MAP);
+    ConfigContainer defaultsContainer = newDefaultsContainer(DEFAULTS_STRING_MAP);
     ArgumentCaptor<ConfigContainer> captor = ArgumentCaptor.forClass(ConfigContainer.class);
 
     verify(mockDefaultsCache).putWithoutWaitingForDiskWrite(captor.capture());
@@ -1072,7 +1079,7 @@ public void setDefaults_withMap_setsDefaults() throws Exception {
 
   @Test
   public void setDefaultsAsync_withMap_setsDefaults() throws Exception {
-    ConfigContainer defaultsContainer = newDefaultsContainer(DEFAULTS_MAP);
+    ConfigContainer defaultsContainer = newDefaultsContainer(DEFAULTS_STRING_MAP);
     ArgumentCaptor<ConfigContainer> captor = ArgumentCaptor.forClass(ConfigContainer.class);
     cachePutReturnsConfig(mockDefaultsCache, defaultsContainer);
 
diff --git a/firebase-database/CHANGELOG.md b/firebase-database/CHANGELOG.md
index 92d4113f8..d692876c4 100644
--- a/firebase-database/CHANGELOG.md
+++ b/firebase-database/CHANGELOG.md
@@ -1,3 +1,8 @@
+# 19.2.0
+- [changed] Added support for type wildcards in GenericTypeIndicator, expanding
+  our custom class serialization to include classes with wildcard generics
+  (#792).
+
 # 19.1.1
 - [fixed] Fixed a crash that occurred when we attempted to start a network
   connection during app shutdown (#672).
@@ -26,6 +31,6 @@
 - [internal] Removed ``@PublicApi` annotations as they are no longer enforced
   and have no semantic meaning.
 
-# 16.0.6  
+# 16.0.6
 - [fixed] Fixed an issue that could cause a NullPointerException during the
   initial handshake with the Firebase backend (#119).
diff --git a/firebase-database/gradle.properties b/firebase-database/gradle.properties
index 96e814439..4db301127 100644
--- a/firebase-database/gradle.properties
+++ b/firebase-database/gradle.properties
@@ -12,6 +12,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-version=19.1.0
-latestReleasedVersion=19.0.0
+version=19.2.0
+latestReleasedVersion=19.1.0
 android.enableUnitTestBinaryResources=true
diff --git a/firebase-database/ktx/gradle.properties b/firebase-database/ktx/gradle.properties
new file mode 100644
index 000000000..9eff84e6c
--- /dev/null
+++ b/firebase-database/ktx/gradle.properties
@@ -0,0 +1 @@
+android.enableUnitTestBinaryResources=true
diff --git a/firebase-database/ktx/ktx.gradle b/firebase-database/ktx/ktx.gradle
new file mode 100644
index 000000000..3454a029b
--- /dev/null
+++ b/firebase-database/ktx/ktx.gradle
@@ -0,0 +1,60 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+plugins {
+    id 'firebase-library'
+    id 'kotlin-android'
+}
+
+firebaseLibrary {
+    releaseWith project(':firebase-database')
+    publishJavadoc = false
+    publishSources = true
+}
+
+android {
+    compileSdkVersion project.targetSdkVersion
+    defaultConfig {
+        minSdkVersion 16
+        multiDexEnabled true
+        targetSdkVersion project.targetSdkVersion
+        versionName version
+        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+    }
+    sourceSets {
+        main.java.srcDirs += 'src/main/kotlin'
+        test.java {
+            srcDir 'src/test/kotlin'
+        }
+    }
+    testOptions.unitTests.includeAndroidResources = true
+}
+
+dependencies {
+    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
+
+    implementation project(':firebase-common')
+    implementation project(':firebase-common:ktx')
+    implementation project(':firebase-database')
+    implementation 'androidx.annotation:annotation:1.1.0'
+    implementation 'com.google.android.gms:play-services-tasks:17.0.0'
+
+    androidTestImplementation 'junit:junit:4.12'
+    androidTestImplementation "com.google.truth:truth:$googleTruthVersion"
+    androidTestImplementation 'androidx.test:runner:1.2.0'
+
+    testImplementation "org.robolectric:robolectric:$robolectricVersion"
+    testImplementation 'junit:junit:4.12'
+    testImplementation "com.google.truth:truth:$googleTruthVersion"
+}
diff --git a/firebase-database/ktx/src/main/AndroidManifest.xml b/firebase-database/ktx/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..6c97f4b3b
--- /dev/null
+++ b/firebase-database/ktx/src/main/AndroidManifest.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.google.firebase.database.ktx">
+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->
+    <!--<uses-sdk android:minSdkVersion="16"/>-->
+    <application>
+        <service android:name="com.google.firebase.components.ComponentDiscoveryService" android:exported="false">
+            <meta-data android:name="com.google.firebase.components:com.google.firebase.database.ktx.FirebaseDatabaseKtxRegistrar"
+                android:value="com.google.firebase.components.ComponentRegistrar" />
+        </service>
+    </application>
+</manifest>
diff --git a/firebase-database/ktx/src/main/kotlin/com/google/firebase/database/ktx/Database.kt b/firebase-database/ktx/src/main/kotlin/com/google/firebase/database/ktx/Database.kt
new file mode 100644
index 000000000..13fb986de
--- /dev/null
+++ b/firebase-database/ktx/src/main/kotlin/com/google/firebase/database/ktx/Database.kt
@@ -0,0 +1,59 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.database.ktx
+
+import androidx.annotation.Keep
+import com.google.firebase.FirebaseApp
+import com.google.firebase.database.DataSnapshot
+import com.google.firebase.database.GenericTypeIndicator
+import com.google.firebase.database.FirebaseDatabase
+import com.google.firebase.components.Component
+import com.google.firebase.components.ComponentRegistrar
+
+import com.google.firebase.ktx.Firebase
+import com.google.firebase.platforminfo.LibraryVersionComponent
+
+/** Returns the [FirebaseDatabase] instance of the default [FirebaseApp]. */
+val Firebase.database: FirebaseDatabase
+    get() = FirebaseDatabase.getInstance()
+
+/** Returns the [FirebaseDatabase] instance for the specified [url]. */
+fun Firebase.database(url: String): FirebaseDatabase = FirebaseDatabase.getInstance(url)
+
+/** Returns the [FirebaseDatabase] instance of the given [FirebaseApp]. */
+fun Firebase.database(app: FirebaseApp): FirebaseDatabase = FirebaseDatabase.getInstance(app)
+
+/** Returns the [FirebaseDatabase] instance of the given [FirebaseApp] and [url]. */
+fun Firebase.database(app: FirebaseApp, url: String): FirebaseDatabase =
+FirebaseDatabase.getInstance(app, url)
+
+/**
+ * Returns the content of the DataSnapshot converted to a POJO.
+ *
+ * Supports generics like List<> or Map<>. Use @JvmSuppressWildcards to force the compiler to
+ * use the type `T`, and not `? extends T`.
+ */
+inline fun <reified T> DataSnapshot.getValue(): T? {
+    return getValue(object : GenericTypeIndicator<T>() {})
+}
+
+internal const val LIBRARY_NAME: String = "fire-db-ktx"
+
+/** @suppress */
+@Keep
+class FirebaseDatabaseKtxRegistrar : ComponentRegistrar {
+    override fun getComponents(): List<Component<*>> =
+            listOf(LibraryVersionComponent.create(LIBRARY_NAME, BuildConfig.VERSION_NAME))
+}
diff --git a/firebase-database/ktx/src/test/kotlin/com/google/firebase/database/DataSnapshotUtil.kt b/firebase-database/ktx/src/test/kotlin/com/google/firebase/database/DataSnapshotUtil.kt
new file mode 100644
index 000000000..f17a9488b
--- /dev/null
+++ b/firebase-database/ktx/src/test/kotlin/com/google/firebase/database/DataSnapshotUtil.kt
@@ -0,0 +1,30 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.database
+
+import com.google.firebase.database.snapshot.IndexedNode
+import com.google.firebase.database.snapshot.NodeUtilities
+
+/**
+ * Creates a custom DataSnapshot.
+ *
+ * This method is a workaround that enables the creation of a custom
+ * DataSnapshot using package-private methods.
+ */
+fun createDataSnapshot(data: Any?, db: FirebaseDatabase): DataSnapshot {
+    var ref = DatabaseReference("https://test.firebaseio.com", db.config)
+    val node = NodeUtilities.NodeFromJSON(data)
+    return DataSnapshot(ref, IndexedNode.from(node))
+}
diff --git a/firebase-database/ktx/src/test/kotlin/com/google/firebase/database/ktx/DatabaseTests.kt b/firebase-database/ktx/src/test/kotlin/com/google/firebase/database/ktx/DatabaseTests.kt
new file mode 100644
index 000000000..0d3812c11
--- /dev/null
+++ b/firebase-database/ktx/src/test/kotlin/com/google/firebase/database/ktx/DatabaseTests.kt
@@ -0,0 +1,177 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.database.ktx
+
+import com.google.common.truth.Truth.assertThat
+import com.google.firebase.FirebaseApp
+import com.google.firebase.FirebaseOptions
+import com.google.firebase.database.FirebaseDatabase
+import com.google.firebase.database.createDataSnapshot
+import com.google.firebase.database.IgnoreExtraProperties
+import com.google.firebase.database.Exclude
+import com.google.firebase.ktx.Firebase
+import com.google.firebase.ktx.app
+import com.google.firebase.ktx.initialize
+import com.google.firebase.platforminfo.UserAgentPublisher
+import org.junit.After
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.robolectric.RobolectricTestRunner
+import org.robolectric.RuntimeEnvironment
+
+const val APP_ID = "APP_ID"
+const val API_KEY = "API_KEY"
+
+const val EXISTING_APP = "existing"
+
+@IgnoreExtraProperties
+data class Player(
+    var name: String? = "",
+    var jersey: Int? = -1,
+    var goalkeeper: Boolean? = false,
+    var avg_goals_per_game: Double? = 0.0
+) {
+    @Exclude
+    fun toMap(): Map<String, Any?> {
+        return mapOf(
+            "name" to name,
+            "jersey" to jersey,
+            "goalkeeper" to goalkeeper,
+            "avg_goals_per_game" to avg_goals_per_game
+        )
+    }
+}
+
+abstract class BaseTestCase {
+    @Before
+    fun setUp() {
+        Firebase.initialize(
+                RuntimeEnvironment.application,
+                FirebaseOptions.Builder()
+                        .setApplicationId(APP_ID)
+                        .setApiKey(API_KEY)
+                        .setProjectId("123")
+                        .setDatabaseUrl("http://tests.fblocal.com:9000")
+                        .build()
+        )
+
+        Firebase.initialize(
+                RuntimeEnvironment.application,
+                FirebaseOptions.Builder()
+                        .setApplicationId(APP_ID)
+                        .setApiKey(API_KEY)
+                        .setProjectId("123")
+                        .setDatabaseUrl("http://tests.fblocal.com:9000")
+                        .build(),
+                EXISTING_APP
+        )
+    }
+
+    @After
+    fun cleanUp() {
+        FirebaseApp.clearInstancesForTest()
+    }
+}
+
+@RunWith(RobolectricTestRunner::class)
+class DatabaseTests : BaseTestCase() {
+    @Test
+    fun `database should delegate to FirebaseDatabase#getInstance()`() {
+        assertThat(Firebase.database).isSameInstanceAs(FirebaseDatabase.getInstance())
+    }
+
+    @Test
+    fun `FirebaseApp#database should delegate to FirebaseDatabase#getInstance(FirebaseApp)`() {
+        val app = Firebase.app(EXISTING_APP)
+        assertThat(Firebase.database(app)).isSameInstanceAs(FirebaseDatabase.getInstance(app))
+    }
+
+    @Test
+    fun `Firebase#database should delegate to FirebaseDatabase#getInstance(url)`() {
+        val url = "http://tests.fblocal.com:9000"
+        assertThat(Firebase.database(url)).isSameInstanceAs(FirebaseDatabase.getInstance(url))
+    }
+
+    @Test
+    fun `Firebase#database should delegate to FirebaseDatabase#getInstance(FirebaseApp, url)`() {
+        val app = Firebase.app(EXISTING_APP)
+        val url = "http://tests.fblocal.com:9000"
+        assertThat(Firebase.database(app, url)).isSameInstanceAs(FirebaseDatabase.getInstance(app, url))
+    }
+}
+
+@RunWith(RobolectricTestRunner::class)
+class DataSnapshotTests : BaseTestCase() {
+    @Test
+    fun `reified getValue works with basic types`() {
+        val data = mapOf(
+            "name" to "John Doe",
+            "jersey" to 35L,
+            "goalkeeper" to false,
+            "avg_goals_per_game" to 0.35
+        )
+        val dataSnapshot = createDataSnapshot(data, Firebase.database)
+        assertThat(dataSnapshot.child("name").getValue<String>()).isEqualTo("John Doe")
+        assertThat(dataSnapshot.child("jersey").getValue<Long>()).isEqualTo(35L)
+        assertThat(dataSnapshot.child("goalkeeper").getValue<Boolean>()).isEqualTo(false)
+        assertThat(dataSnapshot.child("avg_goals_per_game").getValue<Double>()).isEqualTo(0.35)
+    }
+
+    @Test
+    fun `reified getValue works with maps`() {
+        val data = mapOf(
+            "name" to "John Doe",
+            "jersey" to 35L,
+            "goalkeeper" to false,
+            "avg_goals_per_game" to 0.35
+        )
+        val dataSnapshot = createDataSnapshot(data, Firebase.database)
+        assertThat(dataSnapshot.getValue<Map<String, Any>>()).isEqualTo(data)
+    }
+
+    @Test
+    fun `reified getValue works with lists types`() {
+        val data = listOf(
+            "George",
+            "John",
+            "Paul",
+            "Ringo"
+        )
+        val dataSnapshot = createDataSnapshot(data, Firebase.database)
+        assertThat(dataSnapshot.getValue<List<String>>()).isEqualTo(data)
+    }
+
+    @Test
+    fun `reified getValue works with custom types`() {
+        val data = Player(
+            name = "John Doe",
+            jersey = 35,
+            goalkeeper = false,
+            avg_goals_per_game = 0.35
+        )
+        val dataSnapshot = createDataSnapshot(data.toMap(), Firebase.database)
+        assertThat(dataSnapshot.getValue<Player>()).isEqualTo(data)
+    }
+}
+
+@RunWith(RobolectricTestRunner::class)
+class LibraryVersionTest : BaseTestCase() {
+    @Test
+    fun `library version should be registered with runtime`() {
+        val publisher = Firebase.app.get(UserAgentPublisher::class.java)
+        assertThat(publisher.userAgent).contains(LIBRARY_NAME)
+    }
+}
diff --git a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/encoding/CustomClassMapper.java b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/encoding/CustomClassMapper.java
index 442cab5ec..392e93b71 100644
--- a/firebase-database/src/main/java/com/google/firebase/database/core/utilities/encoding/CustomClassMapper.java
+++ b/firebase-database/src/main/java/com/google/firebase/database/core/utilities/encoding/CustomClassMapper.java
@@ -177,7 +177,24 @@ public static Object convertToPlainJavaTypes(Object object) {
     } else if (type instanceof Class) {
       return deserializeToClass(o, (Class<T>) type);
     } else if (type instanceof WildcardType) {
-      throw new DatabaseException("Generic wildcard types are not supported");
+      Type[] lowerBounds = ((WildcardType) type).getLowerBounds();
+      if (lowerBounds.length > 0) {
+        throw new DatabaseException("Generic lower-bounded wildcard types are not supported");
+      }
+
+      // Upper bounded wildcards are of the form <? extends Foo>. Multiple upper bounds are allowed
+      // but if any of the bounds are of class type, that bound must come first in this array. Note
+      // that this array always has at least one element, since the unbounded wildcard <?> always
+      // has at least an upper bound of Object.
+      Type[] upperBounds = ((WildcardType) type).getUpperBounds();
+      hardAssert(upperBounds.length > 0, "Wildcard type " + type + " is not upper bounded.");
+      return deserializeToType(o, upperBounds[0]);
+    } else if (type instanceof TypeVariable) {
+      // As above, TypeVariables always have at least one upper bound of Object.
+      Type[] upperBounds = ((TypeVariable<?>) type).getBounds();
+      hardAssert(upperBounds.length > 0, "Wildcard type " + type + " is not upper bounded.");
+      return deserializeToType(o, upperBounds[0]);
+
     } else if (type instanceof GenericArrayType) {
       throw new DatabaseException(
           "Generic Arrays are not supported, please use Lists " + "instead");
diff --git a/firebase-database/src/test/java/com/google/firebase/database/MapperTest.java b/firebase-database/src/test/java/com/google/firebase/database/MapperTest.java
index e1d197aca..3e8a783d2 100644
--- a/firebase-database/src/test/java/com/google/firebase/database/MapperTest.java
+++ b/firebase-database/src/test/java/com/google/firebase/database/MapperTest.java
@@ -21,6 +21,7 @@
 
 import androidx.annotation.Keep;
 import com.google.firebase.database.core.utilities.encoding.CustomClassMapper;
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -628,6 +629,22 @@ public String getValue() {
     }
   }
 
+  private static class MultiBoundedMapBean<T extends String & Serializable> {
+    private Map<String, T> values;
+
+    public Map<String, T> getValues() {
+      return values;
+    }
+  }
+
+  private static class MultiBoundedMapHolderBean {
+    private MultiBoundedMapBean<String> map;
+
+    public MultiBoundedMapBean<String> getMap() {
+      return map;
+    }
+  }
+
   private static class StaticFieldBean {
     public static String value1 = "static-value";
     public String value2;
@@ -1763,6 +1780,33 @@ public void subclassingGenericTypeIndicatorIsAllowed() {
     assertEquals("foo", bean.value);
   }
 
+  @Test
+  public void usingWildcardInGenericTypeIndicatorIsAllowed() {
+    Map<String, String> fooMap = Collections.singletonMap("foo", "bar");
+    assertEquals(
+        fooMap,
+        CustomClassMapper.convertToCustomClass(
+            fooMap, new GenericTypeIndicator<Map<String, ? extends String>>() {}));
+  }
+
+  @Test(expected = DatabaseException.class)
+  public void usingLowerBoundWildcardsIsForbidden() {
+    Map<String, String> fooMap = Collections.singletonMap("foo", "bar");
+    CustomClassMapper.convertToCustomClass(
+        fooMap, new GenericTypeIndicator<Map<String, ? super String>>() {});
+  }
+
+  @Test
+  public void multiBoundedWildcardsUsesTheFirst() {
+    Map<String, Object> source =
+        Collections.singletonMap(
+            "map", Collections.singletonMap("values", Collections.singletonMap("foo", "bar")));
+    MultiBoundedMapHolderBean bean =
+        CustomClassMapper.convertToCustomClass(source, MultiBoundedMapHolderBean.class);
+    Map<String, String> expected = Collections.singletonMap("foo", "bar");
+    assertEquals(expected, bean.map.values);
+  }
+
   @Test(expected = DatabaseException.class)
   public void unknownTypeParametersNotSupported() {
     deserialize("{'value': 'foo'}", new GenericTypeIndicatorSubclass<GenericBean<?>>() {});
diff --git a/firebase-firestore/CHANGELOG.md b/firebase-firestore/CHANGELOG.md
index 60befeeea..56aa6fe5f 100644
--- a/firebase-firestore/CHANGELOG.md
+++ b/firebase-firestore/CHANGELOG.md
@@ -1,5 +1,13 @@
 # Unreleased
 
+# 21.1.2
+- [fixed] Fixed a crash that could occur when a large number of documents were
+  removed during garbage collection of the persistence cache.
+
+# 21.1.1
+- [fixed] Addressed a regression in 21.1.0 that caused the crash: "Cannot add
+  document to the RemoteDocumentCache with a read time of zero".
+
 # 21.1.0
 - [feature] Added a `terminate()` method to `FirebaseFirestore` which
   terminates the instance, releasing any held resources. Once it completes, you
diff --git a/firebase-firestore/firebase-firestore.gradle b/firebase-firestore/firebase-firestore.gradle
index 8e3c6eca0..e8b115519 100644
--- a/firebase-firestore/firebase-firestore.gradle
+++ b/firebase-firestore/firebase-firestore.gradle
@@ -147,6 +147,8 @@ dependencies {
 
     androidTestImplementation 'junit:junit:4.12'
     androidTestImplementation "com.google.truth:truth:$googleTruthVersion"
+    androidTestImplementation 'org.mockito:mockito-core:2.25.0'
+    androidTestImplementation 'org.mockito:mockito-android:2.25.0'
     androidTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
     androidTestImplementation "androidx.annotation:annotation:1.1.0"
     androidTestImplementation 'androidx.test:runner:1.2.0'
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/AccessHelper.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/AccessHelper.java
index 30c4e0ecb..97821e6db 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/AccessHelper.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/AccessHelper.java
@@ -40,7 +40,8 @@ public static FirebaseFirestore newFirebaseFirestore(
         credentialsProvider,
         asyncQueue,
         firebaseApp,
-        instanceRegistry);
+        instanceRegistry,
+        null);
   }
 
   public static AsyncQueue getAsyncQueue(FirebaseFirestore firestore) {
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/FirebaseClientGrpcMetadataProviderTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/FirebaseClientGrpcMetadataProviderTest.java
new file mode 100644
index 000000000..c0242ccea
--- /dev/null
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/FirebaseClientGrpcMetadataProviderTest.java
@@ -0,0 +1,132 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.remote;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import androidx.test.ext.junit.runners.AndroidJUnit4;
+import com.google.firebase.heartbeatinfo.HeartBeatInfo;
+import com.google.firebase.inject.Provider;
+import com.google.firebase.platforminfo.UserAgentPublisher;
+import io.grpc.Metadata;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+@RunWith(AndroidJUnit4.class)
+public class FirebaseClientGrpcMetadataProviderTest {
+  private Provider<UserAgentPublisher> mockUserAgentProvider = mock(Provider.class);
+  private Provider<HeartBeatInfo> mockHeartBeatProvider = mock(Provider.class);
+  private UserAgentPublisher mockUserAgent = mock(UserAgentPublisher.class);
+  private HeartBeatInfo mockHeartBeat = mock(HeartBeatInfo.class);
+  private static final Metadata.Key<String> HEART_BEAT_HEADER =
+      Metadata.Key.of("x-firebase-client-log-type", Metadata.ASCII_STRING_MARSHALLER);
+
+  private static final Metadata.Key<String> USER_AGENT_HEADER =
+      Metadata.Key.of("x-firebase-client", Metadata.ASCII_STRING_MARSHALLER);
+
+  @Test
+  public void noUpdateWhenBothNullProvider() {
+    Metadata metadata = new Metadata();
+    when(mockUserAgentProvider.get()).thenReturn(null);
+    when(mockHeartBeatProvider.get()).thenReturn(null);
+    GrpcMetadataProvider metadataProvider =
+        new FirebaseClientGrpcMetadataProvider(mockUserAgentProvider, mockHeartBeatProvider);
+    metadataProvider.updateMetadata(metadata);
+    assertThat(metadata.keys().size()).isEqualTo(0);
+  }
+
+  @Test
+  public void noUpdateWhenHeartbeatNullProvider() {
+    Metadata metadata = new Metadata();
+    when(mockUserAgentProvider.get()).thenReturn(mockUserAgent);
+    when(mockHeartBeatProvider.get()).thenReturn(null);
+    GrpcMetadataProvider metadataProvider =
+        new FirebaseClientGrpcMetadataProvider(mockUserAgentProvider, mockHeartBeatProvider);
+    metadataProvider.updateMetadata(metadata);
+    assertThat(metadata.keys().size()).isEqualTo(0);
+  }
+
+  @Test
+  public void noUpdateWhenUserAgentNullProvider() {
+    Metadata metadata = new Metadata();
+    when(mockUserAgentProvider.get()).thenReturn(null);
+    when(mockHeartBeatProvider.get()).thenReturn(mockHeartBeat);
+    GrpcMetadataProvider metadataProvider =
+        new FirebaseClientGrpcMetadataProvider(mockUserAgentProvider, mockHeartBeatProvider);
+    metadataProvider.updateMetadata(metadata);
+    assertThat(metadata.keys().size()).isEqualTo(0);
+  }
+
+  @Test
+  public void updateHeaderWhenHBCodeisGlobalHeartBeat() {
+    Metadata metadata = new Metadata();
+    when(mockUserAgentProvider.get()).thenReturn(mockUserAgent);
+    when(mockHeartBeatProvider.get()).thenReturn(mockHeartBeat);
+    when(mockHeartBeat.getHeartBeatCode(any())).thenReturn(HeartBeatInfo.HeartBeat.GLOBAL);
+    when(mockUserAgent.getUserAgent()).thenReturn("foo:1.2.1");
+    GrpcMetadataProvider metadataProvider =
+        new FirebaseClientGrpcMetadataProvider(mockUserAgentProvider, mockHeartBeatProvider);
+    metadataProvider.updateMetadata(metadata);
+    assertThat(metadata.keys().size()).isEqualTo(2);
+    assertThat(metadata.get(HEART_BEAT_HEADER)).isEqualTo("2");
+    assertThat(metadata.get(USER_AGENT_HEADER)).isEqualTo("foo:1.2.1");
+  }
+
+  @Test
+  public void updateHeaderWhenHBCodeisSDKHeartBeat() {
+    Metadata metadata = new Metadata();
+    when(mockUserAgentProvider.get()).thenReturn(mockUserAgent);
+    when(mockHeartBeatProvider.get()).thenReturn(mockHeartBeat);
+    when(mockHeartBeat.getHeartBeatCode(any())).thenReturn(HeartBeatInfo.HeartBeat.SDK);
+    when(mockUserAgent.getUserAgent()).thenReturn("foo:1.2.1");
+    GrpcMetadataProvider metadataProvider =
+        new FirebaseClientGrpcMetadataProvider(mockUserAgentProvider, mockHeartBeatProvider);
+    metadataProvider.updateMetadata(metadata);
+    assertThat(metadata.keys().size()).isEqualTo(2);
+    assertThat(metadata.get(HEART_BEAT_HEADER)).isEqualTo("1");
+    assertThat(metadata.get(USER_AGENT_HEADER)).isEqualTo("foo:1.2.1");
+  }
+
+  @Test
+  public void updateHeaderWhenHBCodeisCombinedHeartBeat() {
+    Metadata metadata = new Metadata();
+    when(mockUserAgentProvider.get()).thenReturn(mockUserAgent);
+    when(mockHeartBeatProvider.get()).thenReturn(mockHeartBeat);
+    when(mockHeartBeat.getHeartBeatCode(any())).thenReturn(HeartBeatInfo.HeartBeat.COMBINED);
+    when(mockUserAgent.getUserAgent()).thenReturn("foo:1.2.1");
+    GrpcMetadataProvider metadataProvider =
+        new FirebaseClientGrpcMetadataProvider(mockUserAgentProvider, mockHeartBeatProvider);
+    metadataProvider.updateMetadata(metadata);
+    assertThat(metadata.keys().size()).isEqualTo(2);
+    assertThat(metadata.get(HEART_BEAT_HEADER)).isEqualTo("3");
+    assertThat(metadata.get(USER_AGENT_HEADER)).isEqualTo("foo:1.2.1");
+  }
+
+  @Test
+  public void noUpdateHeaderWhenHBCodeisZero() {
+    Metadata metadata = new Metadata();
+    when(mockUserAgentProvider.get()).thenReturn(mockUserAgent);
+    when(mockHeartBeatProvider.get()).thenReturn(mockHeartBeat);
+    when(mockHeartBeat.getHeartBeatCode(any())).thenReturn(HeartBeatInfo.HeartBeat.NONE);
+    when(mockUserAgent.getUserAgent()).thenReturn("foo:1.2.1");
+    GrpcMetadataProvider metadataProvider =
+        new FirebaseClientGrpcMetadataProvider(mockUserAgentProvider, mockHeartBeatProvider);
+    metadataProvider.updateMetadata(metadata);
+    assertThat(metadata.keys().size()).isEqualTo(0);
+  }
+}
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/RemoteStoreTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/RemoteStoreTest.java
index da03bc225..2be209e40 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/RemoteStoreTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/RemoteStoreTest.java
@@ -45,7 +45,8 @@ public void testRemoteStoreStreamStopsWhenNetworkUnreachable() {
             IntegrationTestUtil.testEnvDatabaseInfo(),
             testQueue,
             null,
-            ApplicationProvider.getApplicationContext());
+            ApplicationProvider.getApplicationContext(),
+            null);
     Semaphore networkChangeSemaphore = new Semaphore(0);
     RemoteStore.RemoteStoreCallback callback =
         new RemoteStore.RemoteStoreCallback() {
diff --git a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/StreamTest.java b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/StreamTest.java
index 6712b54ab..d5e54df5d 100644
--- a/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/StreamTest.java
+++ b/firebase-firestore/src/androidTest/java/com/google/firebase/firestore/remote/StreamTest.java
@@ -21,6 +21,10 @@
 import static com.google.firebase.firestore.testutil.TestUtil.setMutation;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
 
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
@@ -109,7 +113,8 @@ private WriteStream createAndOpenWriteStream(
             IntegrationTestUtil.testEnvDatabaseInfo(),
             testQueue,
             new EmptyCredentialsProvider(),
-            ApplicationProvider.getApplicationContext());
+            ApplicationProvider.getApplicationContext(),
+            null);
     final WriteStream writeStream = datastore.createWriteStream(callback);
     waitForWriteStreamOpen(testQueue, writeStream, callback);
     return writeStream;
@@ -127,12 +132,14 @@ private void waitForWriteStreamOpen(
   @Test
   public void testWatchStreamStopBeforeHandshake() throws Exception {
     AsyncQueue testQueue = new AsyncQueue();
+    GrpcMetadataProvider mockGrpcProvider = mock(GrpcMetadataProvider.class);
     Datastore datastore =
         new Datastore(
             IntegrationTestUtil.testEnvDatabaseInfo(),
             testQueue,
             new EmptyCredentialsProvider(),
-            ApplicationProvider.getApplicationContext());
+            ApplicationProvider.getApplicationContext(),
+            mockGrpcProvider);
     StreamStatusCallback streamCallback = new StreamStatusCallback() {};
     final WatchStream watchStream = datastore.createWatchStream(streamCallback);
 
@@ -142,6 +149,7 @@ public void testWatchStreamStopBeforeHandshake() throws Exception {
     // Stop should call watchStreamStreamDidClose.
     testQueue.runSync(watchStream::stop);
     assertThat(streamCallback.closeSemaphore.availablePermits()).isEqualTo(1);
+    verify(mockGrpcProvider, times(1)).updateMetadata(any());
   }
 
   @Test
@@ -152,7 +160,8 @@ public void testWriteStreamStopAfterHandshake() throws Exception {
             IntegrationTestUtil.testEnvDatabaseInfo(),
             testQueue,
             new EmptyCredentialsProvider(),
-            ApplicationProvider.getApplicationContext());
+            ApplicationProvider.getApplicationContext(),
+            null);
     final WriteStream[] writeStreamWrapper = new WriteStream[1];
     StreamStatusCallback streamCallback =
         new StreamStatusCallback() {
@@ -198,7 +207,8 @@ public void testWriteStreamStopPartial() throws Exception {
             IntegrationTestUtil.testEnvDatabaseInfo(),
             testQueue,
             new EmptyCredentialsProvider(),
-            ApplicationProvider.getApplicationContext());
+            ApplicationProvider.getApplicationContext(),
+            null);
     StreamStatusCallback streamCallback = new StreamStatusCallback() {};
     final WriteStream writeStream = datastore.createWriteStream(streamCallback);
 
@@ -277,7 +287,8 @@ public void testStreamRefreshesTokenUponExpiration() throws Exception {
             IntegrationTestUtil.testEnvDatabaseInfo(),
             testQueue,
             mockCredentialsProvider,
-            ApplicationProvider.getApplicationContext());
+            ApplicationProvider.getApplicationContext(),
+            null);
     StreamStatusCallback callback = new StreamStatusCallback();
     WriteStream writeStream = datastore.createWriteStream(callback);
     waitForWriteStreamOpen(testQueue, writeStream, callback);
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
index 1124fc7bb..e0425647c 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestore.java
@@ -39,6 +39,7 @@
 import com.google.firebase.firestore.local.SQLitePersistence;
 import com.google.firebase.firestore.model.DatabaseId;
 import com.google.firebase.firestore.model.ResourcePath;
+import com.google.firebase.firestore.remote.GrpcMetadataProvider;
 import com.google.firebase.firestore.util.AsyncQueue;
 import com.google.firebase.firestore.util.Executors;
 import com.google.firebase.firestore.util.Logger;
@@ -79,6 +80,7 @@
   private final InstanceRegistry instanceRegistry;
   private FirebaseFirestoreSettings settings;
   private volatile FirestoreClient client;
+  private final GrpcMetadataProvider metadataProvider;
 
   @NonNull
   public static FirebaseFirestore getInstance() {
@@ -109,7 +111,8 @@ static FirebaseFirestore newInstance(
       @NonNull FirebaseApp app,
       @Nullable InternalAuthProvider authProvider,
       @NonNull String database,
-      @NonNull InstanceRegistry instanceRegistry) {
+      @NonNull InstanceRegistry instanceRegistry,
+      @Nullable GrpcMetadataProvider metadataProvider) {
     String projectId = app.getOptions().getProjectId();
     if (projectId == null) {
       throw new IllegalArgumentException("FirebaseOptions.getProjectId() cannot be null");
@@ -134,7 +137,14 @@ static FirebaseFirestore newInstance(
 
     FirebaseFirestore firestore =
         new FirebaseFirestore(
-            context, databaseId, persistenceKey, provider, queue, app, instanceRegistry);
+            context,
+            databaseId,
+            persistenceKey,
+            provider,
+            queue,
+            app,
+            instanceRegistry,
+            metadataProvider);
     return firestore;
   }
 
@@ -146,7 +156,8 @@ static FirebaseFirestore newInstance(
       CredentialsProvider credentialsProvider,
       AsyncQueue asyncQueue,
       @Nullable FirebaseApp firebaseApp,
-      InstanceRegistry instanceRegistry) {
+      InstanceRegistry instanceRegistry,
+      @Nullable GrpcMetadataProvider metadataProvider) {
     this.context = checkNotNull(context);
     this.databaseId = checkNotNull(checkNotNull(databaseId));
     this.dataConverter = new UserDataConverter(databaseId);
@@ -156,6 +167,7 @@ static FirebaseFirestore newInstance(
     // NOTE: We allow firebaseApp to be null in tests only.
     this.firebaseApp = firebaseApp;
     this.instanceRegistry = instanceRegistry;
+    this.metadataProvider = metadataProvider;
 
     settings = new FirebaseFirestoreSettings.Builder().build();
   }
@@ -198,7 +210,8 @@ private void ensureClientConfigured() {
           new DatabaseInfo(databaseId, persistenceKey, settings.getHost(), settings.isSslEnabled());
 
       client =
-          new FirestoreClient(context, databaseInfo, settings, credentialsProvider, asyncQueue);
+          new FirestoreClient(
+              context, databaseInfo, settings, credentialsProvider, asyncQueue, metadataProvider);
     }
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreMultiDbComponent.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreMultiDbComponent.java
index 6edfe9076..3684c9193 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreMultiDbComponent.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreMultiDbComponent.java
@@ -21,6 +21,7 @@
 import com.google.firebase.FirebaseAppLifecycleListener;
 import com.google.firebase.FirebaseOptions;
 import com.google.firebase.auth.internal.InternalAuthProvider;
+import com.google.firebase.firestore.remote.GrpcMetadataProvider;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -37,14 +38,17 @@
   private final FirebaseApp app;
   private final Context context;
   private final InternalAuthProvider authProvider;
+  private final GrpcMetadataProvider metadataProvider;
 
   FirestoreMultiDbComponent(
       @NonNull Context context,
       @NonNull FirebaseApp app,
-      @Nullable InternalAuthProvider authProvider) {
+      @Nullable InternalAuthProvider authProvider,
+      @Nullable GrpcMetadataProvider metadataProvider) {
     this.context = context;
     this.app = app;
     this.authProvider = authProvider;
+    this.metadataProvider = metadataProvider;
     this.app.addLifecycleEventListener(this);
   }
 
@@ -53,7 +57,9 @@
   synchronized FirebaseFirestore get(@NonNull String databaseId) {
     FirebaseFirestore firestore = instances.get(databaseId);
     if (firestore == null) {
-      firestore = FirebaseFirestore.newInstance(context, app, authProvider, databaseId, this);
+      firestore =
+          FirebaseFirestore.newInstance(
+              context, app, authProvider, databaseId, this, metadataProvider);
       instances.put(databaseId, firestore);
     }
     return firestore;
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreRegistrar.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreRegistrar.java
index 5e7fbd60a..e0615e98e 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreRegistrar.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/FirestoreRegistrar.java
@@ -22,7 +22,10 @@
 import com.google.firebase.components.Component;
 import com.google.firebase.components.ComponentRegistrar;
 import com.google.firebase.components.Dependency;
+import com.google.firebase.firestore.remote.FirebaseClientGrpcMetadataProvider;
+import com.google.firebase.heartbeatinfo.HeartBeatInfo;
 import com.google.firebase.platforminfo.LibraryVersionComponent;
+import com.google.firebase.platforminfo.UserAgentPublisher;
 import java.util.Arrays;
 import java.util.List;
 
@@ -41,13 +44,18 @@
         Component.builder(FirestoreMultiDbComponent.class)
             .add(Dependency.required(FirebaseApp.class))
             .add(Dependency.required(Context.class))
+            .add(Dependency.optionalProvider(HeartBeatInfo.class))
+            .add(Dependency.optionalProvider(UserAgentPublisher.class))
             .add(Dependency.optional(InternalAuthProvider.class))
             .factory(
                 c ->
                     new FirestoreMultiDbComponent(
                         c.get(Context.class),
                         c.get(FirebaseApp.class),
-                        c.get(InternalAuthProvider.class)))
+                        c.get(InternalAuthProvider.class),
+                        new FirebaseClientGrpcMetadataProvider(
+                            c.getProvider(UserAgentPublisher.class),
+                            c.getProvider(HeartBeatInfo.class))))
             .build(),
         LibraryVersionComponent.create("fire-fst", BuildConfig.VERSION_NAME));
   }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
index 09560da2a..a3ab3bd52 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/FirestoreClient.java
@@ -22,7 +22,6 @@
 import com.google.android.gms.tasks.TaskCompletionSource;
 import com.google.android.gms.tasks.Tasks;
 import com.google.common.base.Function;
-import com.google.firebase.database.collection.ImmutableSortedMap;
 import com.google.firebase.database.collection.ImmutableSortedSet;
 import com.google.firebase.firestore.EventListener;
 import com.google.firebase.firestore.FirebaseFirestoreException;
@@ -38,6 +37,7 @@
 import com.google.firebase.firestore.local.MemoryPersistence;
 import com.google.firebase.firestore.local.Persistence;
 import com.google.firebase.firestore.local.QueryEngine;
+import com.google.firebase.firestore.local.QueryResult;
 import com.google.firebase.firestore.local.SQLitePersistence;
 import com.google.firebase.firestore.local.SimpleQueryEngine;
 import com.google.firebase.firestore.model.Document;
@@ -49,13 +49,13 @@
 import com.google.firebase.firestore.remote.AndroidConnectivityMonitor;
 import com.google.firebase.firestore.remote.ConnectivityMonitor;
 import com.google.firebase.firestore.remote.Datastore;
+import com.google.firebase.firestore.remote.GrpcMetadataProvider;
 import com.google.firebase.firestore.remote.RemoteEvent;
 import com.google.firebase.firestore.remote.RemoteSerializer;
 import com.google.firebase.firestore.remote.RemoteStore;
 import com.google.firebase.firestore.util.AsyncQueue;
 import com.google.firebase.firestore.util.Logger;
 import io.grpc.Status;
-import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -77,6 +77,7 @@
   private RemoteStore remoteStore;
   private SyncEngine syncEngine;
   private EventManager eventManager;
+  private final GrpcMetadataProvider metadataProvider;
 
   // LRU-related
   @Nullable private LruGarbageCollector.Scheduler lruScheduler;
@@ -86,10 +87,12 @@ public FirestoreClient(
       DatabaseInfo databaseInfo,
       FirebaseFirestoreSettings settings,
       CredentialsProvider credentialsProvider,
-      final AsyncQueue asyncQueue) {
+      final AsyncQueue asyncQueue,
+      @Nullable GrpcMetadataProvider metadataProvider) {
     this.databaseInfo = databaseInfo;
     this.credentialsProvider = credentialsProvider;
     this.asyncQueue = asyncQueue;
+    this.metadataProvider = metadataProvider;
 
     TaskCompletionSource<User> firstUser = new TaskCompletionSource<>();
     final AtomicBoolean initialized = new AtomicBoolean(false);
@@ -201,14 +204,9 @@ public void stopListening(QueryListener listener) {
     this.verifyNotTerminated();
     return asyncQueue.enqueue(
         () -> {
-          ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
-
-          View view =
-              new View(
-                  query,
-                  new ImmutableSortedSet<DocumentKey>(
-                      Collections.emptyList(), DocumentKey::compareTo));
-          View.DocumentChanges viewDocChanges = view.computeDocChanges(docs);
+          QueryResult queryResult = localStore.executeQuery(query, /* usePreviousResults= */ true);
+          View view = new View(query, queryResult.getRemoteKeys());
+          View.DocumentChanges viewDocChanges = view.computeDocChanges(queryResult.getDocuments());
           return view.applyChanges(viewDocChanges).getSnapshot();
         });
   }
@@ -268,7 +266,9 @@ private void initialize(Context context, User user, boolean usePersistence, long
     }
 
     persistence.start();
-    // TODO(index-free): Use IndexFreeQueryEngine/IndexedQueryEngine as appropriate.
+    // TODO(index-free): Use IndexFreeQueryEngine/IndexedQueryEngine as appropriate. When we enable
+    // IndexFreeQueryEngine, we have to reset the "lastLimboFreeSnapshotVersion" for all persisted
+    // QueryData as we had to revert the part of the change that ensured that the data is reliable.
     QueryEngine queryEngine = new SimpleQueryEngine();
     localStore = new LocalStore(persistence, queryEngine, user);
     if (gc != null) {
@@ -276,7 +276,8 @@ private void initialize(Context context, User user, boolean usePersistence, long
       lruScheduler.start();
     }
 
-    Datastore datastore = new Datastore(databaseInfo, asyncQueue, credentialsProvider, context);
+    Datastore datastore =
+        new Datastore(databaseInfo, asyncQueue, credentialsProvider, context, metadataProvider);
     ConnectivityMonitor connectivityMonitor = new AndroidConnectivityMonitor(context);
     remoteStore = new RemoteStore(this, localStore, datastore, asyncQueue, connectivityMonitor);
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java
index 869bb92c7..ba748f309 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java
@@ -32,8 +32,8 @@
 import com.google.firebase.firestore.local.LocalWriteResult;
 import com.google.firebase.firestore.local.QueryData;
 import com.google.firebase.firestore.local.QueryPurpose;
+import com.google.firebase.firestore.local.QueryResult;
 import com.google.firebase.firestore.local.ReferenceSet;
-import com.google.firebase.firestore.model.Document;
 import com.google.firebase.firestore.model.DocumentKey;
 import com.google.firebase.firestore.model.MaybeDocument;
 import com.google.firebase.firestore.model.NoDocument;
@@ -191,13 +191,10 @@ public int listen(Query query) {
   private ViewSnapshot initializeViewAndComputeSnapshot(QueryData queryData) {
     Query query = queryData.getQuery();
 
-    ImmutableSortedSet<DocumentKey> remoteKeys =
-        localStore.getRemoteDocumentKeys(queryData.getTargetId());
-    ImmutableSortedMap<DocumentKey, Document> docs =
-        localStore.executeQuery(query, queryData, remoteKeys);
+    QueryResult queryResult = localStore.executeQuery(query, /* usePreviousResults= */ true);
 
-    View view = new View(query, remoteKeys);
-    View.DocumentChanges viewDocChanges = view.computeDocChanges(docs);
+    View view = new View(query, queryResult.getRemoteKeys());
+    View.DocumentChanges viewDocChanges = view.computeDocChanges(queryResult.getDocuments());
     ViewChange viewChange = view.applyChanges(viewDocChanges);
     hardAssert(
         view.getLimboDocuments().size() == 0,
@@ -530,10 +527,9 @@ private void emitNewSnapsAndNotifyLocalStore(
         // The query has a limit and some docs were removed/updated, so we need to re-run the query
         // against the local store to make sure we didn't lose any good docs that had been past the
         // limit.
-        ImmutableSortedMap<DocumentKey, Document> docs =
-            localStore.executeQuery(
-                queryView.getQuery(), /* queryData= */ null, DocumentKey.emptyKeySet());
-        viewDocChanges = view.computeDocChanges(docs, viewDocChanges);
+        QueryResult queryResult =
+            localStore.executeQuery(queryView.getQuery(), /* usePreviousResults= */ false);
+        viewDocChanges = view.computeDocChanges(queryResult.getDocuments(), viewDocChanges);
       }
       TargetChange targetChange =
           remoteEvent == null ? null : remoteEvent.getTargetChanges().get(queryView.getTargetId());
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexFreeQueryEngine.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexFreeQueryEngine.java
index 5091667ae..77082d130 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexFreeQueryEngine.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexFreeQueryEngine.java
@@ -16,7 +16,6 @@
 
 import static com.google.firebase.firestore.util.Assert.hardAssert;
 
-import androidx.annotation.Nullable;
 import com.google.firebase.database.collection.ImmutableSortedMap;
 import com.google.firebase.database.collection.ImmutableSortedSet;
 import com.google.firebase.firestore.core.Query;
@@ -28,27 +27,22 @@
 import java.util.Collections;
 import java.util.Map;
 
+// TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.
+
 /**
  * A query engine that takes advantage of the target document mapping in the QueryCache. The
- * IndexFreeQueryEngine optimizes query execution by only reading the documents previously matched a
- * query plus any documents that were edited after the query was last listened to.
+ * IndexFreeQueryEngine optimizes query execution by only reading the documents that previously
+ * matched a query plus any documents that were edited after the query was last listened to.
  *
- * <p>There are some cases where Index-Free queries are not guaranteed to produce to the same
- * results as full collection scans. In these case, the IndexFreeQueryEngine falls back to a full
- * query processing. These cases are:
+ * <p>There are some cases where Index-Free queries are not guaranteed to produce the same results
+ * as full collection scans. In these cases, the IndexFreeQueryEngine falls back to full query
+ * processing. These cases are:
  *
  * <ol>
- *   <li>Limit queries where a document that matched the query previously no longer matches the
- *       query. In this case, we have to scan all local documents since a document that was sent to
- *       us as part of a different query result may now fall into the limit.
- *   <li>Limit queries that include edits that occurred after the last remote snapshot (both
- *       latency-compensated or committed). Even if an edited document continues to match the query,
- *       an edit may cause a document to sort below another document that is in the local cache.
- *   <li>Queries where the last snapshot contained Limbo documents. Even though a Limbo document is
- *       not part of the backend result set, we need to include Limbo documents in local views to
- *       ensure consistency between different Query views. If there exists a previous query snapshot
- *       that contained no limbo documents, we can instead use the older snapshot version for
- *       Index-Free processing.
+ *   <il>Limit queries where a document that matched the query previously no longer matches the
+ *   query. <il> Limit queries where a document edit may cause the document to sort below another
+ *   document that is in the local cache. <il>Queries that have never been CURRENT or free of Limbo
+ *   documents.
  * </ol>
  */
 public class IndexFreeQueryEngine implements QueryEngine {
@@ -63,7 +57,9 @@ public void setLocalDocumentsView(LocalDocumentsView localDocuments) {
 
   @Override
   public ImmutableSortedMap<DocumentKey, Document> getDocumentsMatchingQuery(
-      Query query, @Nullable QueryData queryData, ImmutableSortedSet<DocumentKey> remoteKeys) {
+      Query query,
+      SnapshotVersion lastLimboFreeSnapshotVersion,
+      ImmutableSortedSet<DocumentKey> remoteKeys) {
     hardAssert(localDocumentsView != null, "setLocalDocumentsView() not called");
 
     // Queries that match all document don't benefit from using IndexFreeQueries. It is more
@@ -74,15 +70,16 @@ public void setLocalDocumentsView(LocalDocumentsView localDocuments) {
 
     // Queries that have never seen a snapshot without limbo free documents should also be run as a
     // full collection scan.
-    if (queryData == null
-        || queryData.getLastLimboFreeSnapshotVersion().equals(SnapshotVersion.NONE)) {
+    if (lastLimboFreeSnapshotVersion.equals(SnapshotVersion.NONE)) {
       return executeFullCollectionScan(query);
     }
 
-    ImmutableSortedSet<Document> previousResults = getSortedPreviousResults(query, remoteKeys);
+    ImmutableSortedMap<DocumentKey, MaybeDocument> documents =
+        localDocumentsView.getDocuments(remoteKeys);
+    ImmutableSortedSet<Document> previousResults = applyQuery(query, documents);
 
     if (query.hasLimit()
-        && needsRefill(previousResults, remoteKeys, queryData.getLastLimboFreeSnapshotVersion())) {
+        && needsRefill(previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {
       return executeFullCollectionScan(query);
     }
 
@@ -90,15 +87,17 @@ public void setLocalDocumentsView(LocalDocumentsView localDocuments) {
       Logger.debug(
           LOG_TAG,
           "Re-using previous result from %s to execute query: %s",
-          queryData.getLastLimboFreeSnapshotVersion().toString(),
+          lastLimboFreeSnapshotVersion.toString(),
           query.toString());
     }
 
     // Retrieve all results for documents that were updated since the last limbo-document free
     // remote snapshot.
     ImmutableSortedMap<DocumentKey, Document> updatedResults =
-        localDocumentsView.getDocumentsMatchingQuery(
-            query, queryData.getLastLimboFreeSnapshotVersion());
+        localDocumentsView.getDocumentsMatchingQuery(query, lastLimboFreeSnapshotVersion);
+
+    // We merge `previousResults` into `updateResults`, since `updateResults` is already a
+    // ImmutableSortedMap. If a document is contained in both lists, then its contents are the same.
     for (Document result : previousResults) {
       updatedResults = updatedResults.insert(result.getKey(), result);
     }
@@ -106,28 +105,21 @@ public void setLocalDocumentsView(LocalDocumentsView localDocuments) {
     return updatedResults;
   }
 
-  /**
-   * Returns the documents for the specified remote keys if they still match the query, sorted by
-   * the query's comparator.
-   */
-  private ImmutableSortedSet<Document> getSortedPreviousResults(
-      Query query, ImmutableSortedSet<DocumentKey> remoteKeys) {
-    // Fetch the documents that matched the query at the last snapshot.
-    ImmutableSortedMap<DocumentKey, MaybeDocument> previousResults =
-        localDocumentsView.getDocuments(remoteKeys);
-
+  /** Applies the query filter and sorting to the provided documents. */
+  private ImmutableSortedSet<Document> applyQuery(
+      Query query, ImmutableSortedMap<DocumentKey, MaybeDocument> documents) {
     // Sort the documents and re-apply the query filter since previously matching documents do not
     // necessarily still match the query.
-    ImmutableSortedSet<Document> results =
+    ImmutableSortedSet<Document> queryResults =
         new ImmutableSortedSet<>(Collections.emptyList(), query.comparator());
-    for (Map.Entry<DocumentKey, MaybeDocument> entry : previousResults) {
+    for (Map.Entry<DocumentKey, MaybeDocument> entry : documents) {
       MaybeDocument maybeDoc = entry.getValue();
       if (maybeDoc instanceof Document && query.matches((Document) maybeDoc)) {
         Document doc = (Document) maybeDoc;
-        results = results.insert(doc);
+        queryResults = queryResults.insert(doc);
       }
     }
-    return results;
+    return queryResults;
   }
 
   /**
@@ -149,11 +141,6 @@ private boolean needsRefill(
       return true;
     }
 
-    // We don't need to find a better match from cache if no documents matched the query.
-    if (sortedPreviousResults.isEmpty()) {
-      return false;
-    }
-
     // Limit queries are not eligible for index-free query execution if there is a potential that an
     // older document from cache now sorts before a document that was previously part of the limit.
     // This, however, can only happen if the last document of the limit sorts lower than it did when
@@ -162,6 +149,10 @@ private boolean needsRefill(
     // continue to be "rejected" by this boundary. Therefore, we can ignore any modifications that
     // don't affect the last document.
     Document lastDocumentInLimit = sortedPreviousResults.getMaxEntry();
+    if (lastDocumentInLimit == null) {
+      // We don't need to refill the query if there were already no documents.
+      return false;
+    }
     return lastDocumentInLimit.hasPendingWrites()
         || lastDocumentInLimit.getVersion().compareTo(limboFreeSnapshotVersion) > 0;
   }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java
index fd54260f4..62f950318 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java
@@ -103,7 +103,9 @@ public void setLocalDocumentsView(LocalDocumentsView localDocuments) {
 
   @Override
   public ImmutableSortedMap<DocumentKey, Document> getDocumentsMatchingQuery(
-      Query query, @Nullable QueryData queryData, ImmutableSortedSet<DocumentKey> remoteKeys) {
+      Query query,
+      SnapshotVersion lastLimboFreeSnapshotVersion,
+      ImmutableSortedSet<DocumentKey> remoteKeys) {
     hardAssert(localDocuments != null, "setLocalDocumentsView() not called");
 
     return query.isDocumentQuery()
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalDocumentsView.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalDocumentsView.java
index 99858b8d5..b64247086 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalDocumentsView.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalDocumentsView.java
@@ -19,6 +19,7 @@
 import static com.google.firebase.firestore.util.Assert.hardAssert;
 
 import androidx.annotation.Nullable;
+import androidx.annotation.VisibleForTesting;
 import com.google.firebase.database.collection.ImmutableSortedMap;
 import com.google.firebase.firestore.core.Query;
 import com.google.firebase.firestore.model.Document;
@@ -55,6 +56,21 @@
     this.indexManager = indexManager;
   }
 
+  @VisibleForTesting
+  RemoteDocumentCache getRemoteDocumentCache() {
+    return remoteDocumentCache;
+  }
+
+  @VisibleForTesting
+  MutationQueue getMutationQueue() {
+    return mutationQueue;
+  }
+
+  @VisibleForTesting
+  IndexManager getIndexManager() {
+    return indexManager;
+  }
+
   /**
    * Returns the the local view of the document identified by {@code key}.
    *
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
index 6e1cfa426..5460f4ea9 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalStore.java
@@ -121,7 +121,10 @@
   private final QueryCache queryCache;
 
   /** Maps a targetId to data about its query. */
-  private final SparseArray<QueryData> targetIds;
+  private final SparseArray<QueryData> queryDataByTarget;
+
+  /** Maps a query to its targetID. */
+  private final Map<Query, Integer> targetIdByQuery;
 
   /** Used to generate targetIds for queries tracked locally. */
   private final TargetIdGenerator targetIdGenerator;
@@ -143,7 +146,8 @@ public LocalStore(Persistence persistence, QueryEngine queryEngine, User initial
     localViewReferences = new ReferenceSet();
     persistence.getReferenceDelegate().setInMemoryPins(localViewReferences);
 
-    targetIds = new SparseArray<>();
+    queryDataByTarget = new SparseArray<>();
+    targetIdByQuery = new HashMap<>();
   }
 
   public void start() {
@@ -340,7 +344,7 @@ public SnapshotVersion getLastRemoteSnapshotVersion() {
             int targetId = boxedTargetId;
             TargetChange change = entry.getValue();
 
-            QueryData oldQueryData = targetIds.get(targetId);
+            QueryData oldQueryData = queryDataByTarget.get(targetId);
             if (oldQueryData == null) {
               // We don't update the remote keys if the query is not active. This ensures that
               // we persist the updated query data along with the updated assignment.
@@ -357,7 +361,7 @@ public SnapshotVersion getLastRemoteSnapshotVersion() {
                   oldQueryData
                       .withResumeToken(resumeToken, remoteEvent.getSnapshotVersion())
                       .withSequenceNumber(sequenceNumber);
-              targetIds.put(boxedTargetId, newQueryData);
+              queryDataByTarget.put(targetId, newQueryData);
 
               // Update the query data if there are target changes (or if sufficient time has
               // passed since the last update).
@@ -380,18 +384,23 @@ public SnapshotVersion getLastRemoteSnapshotVersion() {
             MaybeDocument doc = entry.getValue();
             MaybeDocument existingDoc = existingDocs.get(key);
 
-            if (existingDoc == null
+            // Note: The order of the steps below is important, since we want to ensure that
+            // rejected limbo resolutions (which fabricate NoDocuments with SnapshotVersion.NONE)
+            // never add documents to cache.
+            if (doc instanceof NoDocument && doc.getVersion().equals(SnapshotVersion.NONE)) {
+              // NoDocuments with SnapshotVersion.NONE are used in manufactured events. We remove
+              // these documents from cache since we lost access.
+              remoteDocuments.remove(doc.getKey());
+              changedDocs.put(key, doc);
+            } else if (existingDoc == null
                 || doc.getVersion().compareTo(existingDoc.getVersion()) > 0
                 || (doc.getVersion().compareTo(existingDoc.getVersion()) == 0
                     && existingDoc.hasPendingWrites())) {
+              // TODO(index-free): Comment in this assert when we enable Index-Free queries
+              // hardAssert(!SnapshotVersion.NONE.equals(remoteEvent.getSnapshotVersion()), "Cannot
+              // add a document when the remote version is zero");
               remoteDocuments.add(doc, remoteEvent.getSnapshotVersion());
               changedDocs.put(key, doc);
-            } else if (doc instanceof NoDocument && doc.getVersion().equals(SnapshotVersion.NONE)) {
-              // NoDocuments with SnapshotVersion.MIN are used in manufactured events (e.g. in the
-              // case of a limbo document resolution failing). We remove these documents from cache
-              // since we lost access.
-              remoteDocuments.remove(doc.getKey());
-              changedDocs.put(key, doc);
             } else {
               Logger.debug(
                   "LocalStore",
@@ -479,7 +488,7 @@ public void notifyLocalViewChanges(List<LocalViewChanges> viewChanges) {
             localViewReferences.removeReferences(removed, targetId);
 
             if (!viewChange.isFromCache()) {
-              QueryData queryData = targetIds.get(targetId);
+              QueryData queryData = queryDataByTarget.get(targetId);
               hardAssert(
                   queryData != null,
                   "Can't set limbo-free snapshot version for unknown target: %s",
@@ -489,7 +498,7 @@ public void notifyLocalViewChanges(List<LocalViewChanges> viewChanges) {
               SnapshotVersion lastLimboFreeSnapshotVersion = queryData.getSnapshotVersion();
               QueryData updatedQueryData =
                   queryData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);
-              targetIds.put(targetId, updatedQueryData);
+              queryDataByTarget.put(targetId, updatedQueryData);
             }
           }
         });
@@ -543,8 +552,11 @@ public QueryData allocateQuery(Query query) {
 
     // Sanity check to ensure that even when resuming a query it's not currently active.
     hardAssert(
-        targetIds.get(targetId) == null, "Tried to allocate an already allocated query: %s", query);
-    targetIds.put(targetId, cached);
+        queryDataByTarget.get(targetId) == null,
+        "Tried to allocate an already allocated query: %s",
+        query);
+    queryDataByTarget.put(targetId, cached);
+    targetIdByQuery.put(query, targetId);
     return cached;
   }
 
@@ -555,12 +567,11 @@ public QueryData allocateQuery(Query query) {
   @VisibleForTesting
   @Nullable
   QueryData getQueryData(Query query) {
-    QueryData queryData = queryCache.getQueryData(query);
-    if (queryData == null) {
-      return null;
+    Integer targetId = targetIdByQuery.get(query);
+    if (targetId != null) {
+      return queryDataByTarget.get(targetId);
     }
-    QueryData updatedQueryData = targetIds.get(queryData.getTargetId());
-    return updatedQueryData != null ? updatedQueryData : queryData;
+    return queryCache.getQueryData(query);
   }
 
   /** Mutable state for the transaction in allocateQuery. */
@@ -574,44 +585,50 @@ public void releaseQuery(Query query) {
     persistence.runTransaction(
         "Release query",
         () -> {
-          QueryData queryData = getQueryData(query);
-          hardAssert(queryData != null, "Tried to release nonexistent query: %s", query);
+          Integer targetId = targetIdByQuery.get(query);
+          hardAssert(targetId != null, "Tried to release nonexistent query: %s", query);
+          QueryData queryData = queryDataByTarget.get(targetId);
 
           // References for documents sent via Watch are automatically removed when we delete a
           // query's target data from the reference delegate. Since this does not remove references
           // for locally mutated documents, we have to remove the target associations for these
           // documents manually.
           ImmutableSortedSet<DocumentKey> removedReferences =
-              localViewReferences.removeReferencesForId(queryData.getTargetId());
+              localViewReferences.removeReferencesForId(targetId);
           for (DocumentKey key : removedReferences) {
             persistence.getReferenceDelegate().removeReference(key);
           }
 
           // Note: This also updates the query cache
           persistence.getReferenceDelegate().removeTarget(queryData);
-          targetIds.remove(queryData.getTargetId());
+          queryDataByTarget.remove(targetId);
+          targetIdByQuery.remove(query);
         });
   }
 
-  /** Runs the given query against all the documents in the local store and returns the results. */
-  public ImmutableSortedMap<DocumentKey, Document> executeQuery(Query query) {
+  /**
+   * Runs the specified query against the local store and returns the results, potentially taking
+   * advantage of query data from previous executions (such as the set of remote keys).
+   *
+   * @param usePreviousResults Whether results from previous executions can be used to optimize this
+   *     query execution.
+   */
+  public QueryResult executeQuery(Query query, boolean usePreviousResults) {
     QueryData queryData = getQueryData(query);
+    SnapshotVersion lastLimboFreeSnapshotVersion = SnapshotVersion.NONE;
+    ImmutableSortedSet<DocumentKey> remoteKeys = DocumentKey.emptyKeySet();
+
     if (queryData != null) {
-      ImmutableSortedSet<DocumentKey> remoteKeys =
-          this.queryCache.getMatchingKeysForTargetId(queryData.getTargetId());
-      return executeQuery(query, queryData, remoteKeys);
-    } else {
-      return executeQuery(query, null, DocumentKey.emptyKeySet());
+      lastLimboFreeSnapshotVersion = queryData.getLastLimboFreeSnapshotVersion();
+      remoteKeys = this.queryCache.getMatchingKeysForTargetId(queryData.getTargetId());
     }
-  }
 
-  /**
-   * Runs the given query against the local store and returns the results, potentially taking
-   * advantage of the provided query data and the set of remote document keys.
-   */
-  public ImmutableSortedMap<DocumentKey, Document> executeQuery(
-      Query query, @Nullable QueryData queryData, ImmutableSortedSet<DocumentKey> remoteKeys) {
-    return queryEngine.getDocumentsMatchingQuery(query, queryData, remoteKeys);
+    ImmutableSortedMap<DocumentKey, Document> documents =
+        queryEngine.getDocumentsMatchingQuery(
+            query,
+            usePreviousResults ? lastLimboFreeSnapshotVersion : SnapshotVersion.NONE,
+            usePreviousResults ? remoteKeys : DocumentKey.emptyKeySet());
+    return new QueryResult(documents, remoteKeys);
   }
 
   /**
@@ -649,6 +666,7 @@ private void applyWriteToRemoteDocuments(MutationBatchResult batchResult) {
   }
 
   public LruGarbageCollector.Results collectGarbage(LruGarbageCollector garbageCollector) {
-    return persistence.runTransaction("Collect garbage", () -> garbageCollector.collect(targetIds));
+    return persistence.runTransaction(
+        "Collect garbage", () -> garbageCollector.collect(queryDataByTarget));
   }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
index f113580f4..439759645 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryMutationQueue.java
@@ -69,11 +69,9 @@
   private ByteString lastStreamToken;
 
   private final MemoryPersistence persistence;
-  private final StatsCollector statsCollector;
 
-  MemoryMutationQueue(MemoryPersistence persistence, StatsCollector statsCollector) {
+  MemoryMutationQueue(MemoryPersistence persistence) {
     this.persistence = persistence;
-    this.statsCollector = statsCollector;
     queue = new ArrayList<>();
 
     batchesByDocumentKey = new ImmutableSortedSet<>(emptyList(), DocumentReference.BY_KEY);
@@ -156,16 +154,12 @@ public MutationBatch addMutationBatch(
           .addToCollectionParentIndex(mutation.getKey().getPath().popLast());
     }
 
-    statsCollector.recordRowsWritten(STATS_TAG, 1);
-
     return batch;
   }
 
   @Nullable
   @Override
   public MutationBatch lookupMutationBatch(int batchId) {
-    statsCollector.recordRowsRead(STATS_TAG, 1);
-
     int index = indexOfBatchId(batchId);
     if (index < 0 || index >= queue.size()) {
       return null;
@@ -214,8 +208,6 @@ public int getHighestUnacknowledgedBatchId() {
       result.add(batch);
     }
 
-    statsCollector.recordRowsRead(STATS_TAG, result.size());
-
     return result;
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryPersistence.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryPersistence.java
index 8d9744b50..f43a3a71a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryPersistence.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryPersistence.java
@@ -35,38 +35,30 @@
   private final MemoryIndexManager indexManager;
   private final MemoryQueryCache queryCache;
   private final MemoryRemoteDocumentCache remoteDocumentCache;
-  private final StatsCollector statsCollector;
   private ReferenceDelegate referenceDelegate;
 
   private boolean started;
 
   public static MemoryPersistence createEagerGcMemoryPersistence() {
-    return createEagerGcMemoryPersistence(StatsCollector.NO_OP_STATS_COLLECTOR);
-  }
-
-  public static MemoryPersistence createEagerGcMemoryPersistence(StatsCollector statsCollector) {
-    MemoryPersistence persistence = new MemoryPersistence(statsCollector);
+    MemoryPersistence persistence = new MemoryPersistence();
     persistence.setReferenceDelegate(new MemoryEagerReferenceDelegate(persistence));
     return persistence;
   }
 
   public static MemoryPersistence createLruGcMemoryPersistence(
-      LruGarbageCollector.Params params,
-      StatsCollector statsCollector,
-      LocalSerializer serializer) {
-    MemoryPersistence persistence = new MemoryPersistence(statsCollector);
+      LruGarbageCollector.Params params, LocalSerializer serializer) {
+    MemoryPersistence persistence = new MemoryPersistence();
     persistence.setReferenceDelegate(
         new MemoryLruReferenceDelegate(persistence, params, serializer));
     return persistence;
   }
 
   /** Use static helpers to instantiate */
-  private MemoryPersistence(StatsCollector statsCollector) {
-    this.statsCollector = statsCollector;
+  private MemoryPersistence() {
     mutationQueues = new HashMap<>();
     indexManager = new MemoryIndexManager();
     queryCache = new MemoryQueryCache(this);
-    remoteDocumentCache = new MemoryRemoteDocumentCache(this, statsCollector);
+    remoteDocumentCache = new MemoryRemoteDocumentCache(this);
   }
 
   @Override
@@ -101,7 +93,7 @@ private void setReferenceDelegate(ReferenceDelegate delegate) {
   MutationQueue getMutationQueue(User user) {
     MemoryMutationQueue queue = mutationQueues.get(user);
     if (queue == null) {
-      queue = new MemoryMutationQueue(this, statsCollector);
+      queue = new MemoryMutationQueue(this);
       mutationQueues.put(user, queue);
     }
     return queue;
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryRemoteDocumentCache.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryRemoteDocumentCache.java
index 47324c6fc..8e3f2c565 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryRemoteDocumentCache.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MemoryRemoteDocumentCache.java
@@ -38,19 +38,19 @@
   private ImmutableSortedMap<DocumentKey, Pair<MaybeDocument, SnapshotVersion>> docs;
 
   private final MemoryPersistence persistence;
-  private StatsCollector statsCollector;
 
-  MemoryRemoteDocumentCache(MemoryPersistence persistence, StatsCollector statsCollector) {
+  MemoryRemoteDocumentCache(MemoryPersistence persistence) {
     docs = ImmutableSortedMap.Builder.emptyMap(DocumentKey.comparator());
-    this.statsCollector = statsCollector;
     this.persistence = persistence;
   }
 
   @Override
   public void add(MaybeDocument document, SnapshotVersion readTime) {
-    hardAssert(
-        !readTime.equals(SnapshotVersion.NONE),
-        "Cannot add document to the RemoteDocumentCache with a read time of zero");
+    // TODO(index-free): This assert causes a crash for one of our customers. Re-add the assert once
+    // we have fixed the root cause and cleaned up the underlying data.
+    //    hardAssert(
+    //        !readTime.equals(SnapshotVersion.NONE),
+    //        "Cannot add document to the RemoteDocumentCache with a read time of zero");
     docs = docs.insert(document.getKey(), new Pair<>(document, readTime));
 
     persistence.getIndexManager().addToCollectionParentIndex(document.getKey().getPath().popLast());
@@ -58,14 +58,12 @@ public void add(MaybeDocument document, SnapshotVersion readTime) {
 
   @Override
   public void remove(DocumentKey key) {
-    statsCollector.recordRowsDeleted(STATS_TAG, 1);
     docs = docs.remove(key);
   }
 
   @Nullable
   @Override
   public MaybeDocument get(DocumentKey key) {
-    statsCollector.recordRowsRead(STATS_TAG, 1);
     Pair<MaybeDocument, SnapshotVersion> entry = docs.get(key);
     return entry != null ? entry.first : null;
   }
@@ -80,7 +78,6 @@ public MaybeDocument get(DocumentKey key) {
       result.put(key, get(key));
     }
 
-    statsCollector.recordRowsRead(STATS_TAG, result.size());
     return result;
   }
 
@@ -99,13 +96,9 @@ public MaybeDocument get(DocumentKey key) {
     Iterator<Map.Entry<DocumentKey, Pair<MaybeDocument, SnapshotVersion>>> iterator =
         docs.iteratorFrom(prefix);
 
-    int rowsRead = 0;
-
     while (iterator.hasNext()) {
       Map.Entry<DocumentKey, Pair<MaybeDocument, SnapshotVersion>> entry = iterator.next();
 
-      ++rowsRead;
-
       DocumentKey key = entry.getKey();
       if (!queryPath.isPrefixOf(key.getPath())) {
         break;
@@ -127,8 +120,6 @@ public MaybeDocument get(DocumentKey key) {
       }
     }
 
-    statsCollector.recordRowsRead(STATS_TAG, rowsRead);
-
     return result;
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
index c400845a4..02a7f7ea3 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/MutationQueue.java
@@ -25,9 +25,6 @@
 
 /** A queue of mutations to apply to the remote store. */
 interface MutationQueue {
-  /** The tag used by the StatsCollector. */
-  String STATS_TAG = "mutations";
-
   /**
    * Starts the mutation queue, performing any initial reads that might be required to establish
    * invariants, etc.
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/QueryEngine.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/QueryEngine.java
index a4477dc59..9d28ee27a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/QueryEngine.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/QueryEngine.java
@@ -14,13 +14,13 @@
 
 package com.google.firebase.firestore.local;
 
-import androidx.annotation.Nullable;
 import com.google.firebase.database.collection.ImmutableSortedMap;
 import com.google.firebase.database.collection.ImmutableSortedSet;
 import com.google.firebase.firestore.core.Query;
 import com.google.firebase.firestore.model.Document;
 import com.google.firebase.firestore.model.DocumentKey;
 import com.google.firebase.firestore.model.MaybeDocument;
+import com.google.firebase.firestore.model.SnapshotVersion;
 
 /**
  * Represents a query engine capable of performing queries over the local document cache. You must
@@ -33,7 +33,9 @@
 
   /** Returns all local documents matching the specified query. */
   ImmutableSortedMap<DocumentKey, Document> getDocumentsMatchingQuery(
-      Query query, @Nullable QueryData queryData, ImmutableSortedSet<DocumentKey> remoteKeys);
+      Query query,
+      SnapshotVersion lastLimboFreeSnapshotVersion,
+      ImmutableSortedSet<DocumentKey> remoteKeys);
 
   /**
    * Notifies the query engine of a document change in case it would like to update indexes and the
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/QueryResult.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/QueryResult.java
new file mode 100644
index 000000000..ec7b90750
--- /dev/null
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/QueryResult.java
@@ -0,0 +1,41 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.local;
+
+import com.google.firebase.database.collection.ImmutableSortedMap;
+import com.google.firebase.database.collection.ImmutableSortedSet;
+import com.google.firebase.firestore.model.Document;
+import com.google.firebase.firestore.model.DocumentKey;
+
+/** The result of executing a query against the local store. */
+public class QueryResult {
+  private final ImmutableSortedMap<DocumentKey, Document> documents;
+  private final ImmutableSortedSet<DocumentKey> remoteKeys;
+
+  public QueryResult(
+      ImmutableSortedMap<DocumentKey, Document> documents,
+      ImmutableSortedSet<DocumentKey> remoteKeys) {
+    this.documents = documents;
+    this.remoteKeys = remoteKeys;
+  }
+
+  public ImmutableSortedMap<DocumentKey, Document> getDocuments() {
+    return documents;
+  }
+
+  public ImmutableSortedSet<DocumentKey> getRemoteKeys() {
+    return remoteKeys;
+  }
+}
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/RemoteDocumentCache.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/RemoteDocumentCache.java
index c79ca10ea..93c315fa2 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/RemoteDocumentCache.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/RemoteDocumentCache.java
@@ -31,9 +31,6 @@
  * instances (indicating that the document is known to not exist).
  */
 interface RemoteDocumentCache {
-  /** The tag used by the StatsCollector. */
-  String STATS_TAG = "remote_documents";
-
   /**
    * Adds or replaces an entry in the cache.
    *
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteLruReferenceDelegate.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteLruReferenceDelegate.java
index 1793c6e73..fe94bf127 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteLruReferenceDelegate.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteLruReferenceDelegate.java
@@ -24,6 +24,14 @@
 
 /** Provides LRU functionality for SQLite persistence. */
 class SQLiteLruReferenceDelegate implements ReferenceDelegate, LruDelegate {
+  /**
+   * The batch size for orphaned document GC in `removeOrphanedDocuments()`.
+   *
+   * <p>This addresses https://github.com/firebase/firebase-android-sdk/issues/706, where a customer
+   * reported that LRU GC hit a CursorWindow size limit during orphaned document removal.
+   */
+  static final int REMOVE_ORPHANED_DOCUMENTS_BATCH_SIZE = 100;
+
   private final SQLitePersistence persistence;
   private ListenSequence listenSequence;
   private long currentSequenceNumber;
@@ -148,20 +156,29 @@ private void removeSentinel(DocumentKey key) {
   @Override
   public int removeOrphanedDocuments(long upperBound) {
     int[] count = new int[1];
-    persistence
-        .query(
-            "select path from target_documents group by path having COUNT(*) = 1 AND target_id = 0 AND sequence_number <= ?")
-        .binding(upperBound)
-        .forEach(
-            row -> {
-              ResourcePath path = EncodedPath.decodeResourcePath(row.getString(0));
-              DocumentKey key = DocumentKey.fromPath(path);
-              if (!isPinned(key)) {
-                count[0]++;
-                persistence.getRemoteDocumentCache().remove(key);
-                removeSentinel(key);
-              }
-            });
+
+    boolean resultsRemaining = true;
+
+    while (resultsRemaining) {
+      int rowsProccessed =
+          persistence
+              .query(
+                  "select path from target_documents group by path having COUNT(*) = 1 AND target_id = 0 AND sequence_number <= ? LIMIT ?")
+              .binding(upperBound, REMOVE_ORPHANED_DOCUMENTS_BATCH_SIZE)
+              .forEach(
+                  row -> {
+                    ResourcePath path = EncodedPath.decodeResourcePath(row.getString(0));
+                    DocumentKey key = DocumentKey.fromPath(path);
+                    if (!isPinned(key)) {
+                      count[0]++;
+                      persistence.getRemoteDocumentCache().remove(key);
+                      removeSentinel(key);
+                    }
+                  });
+
+      resultsRemaining = (rowsProccessed == REMOVE_ORPHANED_DOCUMENTS_BATCH_SIZE);
+    }
+
     return count[0];
   }
 
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
index 3f7fe49c7..e906cf690 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteMutationQueue.java
@@ -58,7 +58,6 @@
 
   private final SQLitePersistence db;
   private final LocalSerializer serializer;
-  private final StatsCollector statsCollector;
 
   /** The normalized uid (e.g. null => "") used in the uid column. */
   private final String uid;
@@ -87,17 +86,11 @@
    * persistence interface.
    *
    * @param persistence The SQLite database in which to create the queue.
-   * @param statsCollector The stats collector for all mutation queue operations.
    * @param user The user for which to create a mutation queue.
    */
-  SQLiteMutationQueue(
-      SQLitePersistence persistence,
-      LocalSerializer serializer,
-      StatsCollector statsCollector,
-      User user) {
+  SQLiteMutationQueue(SQLitePersistence persistence, LocalSerializer serializer, User user) {
     this.db = persistence;
     this.serializer = serializer;
-    this.statsCollector = statsCollector;
     this.uid = user.isAuthenticated() ? user.getUid() : "";
     this.lastStreamToken = WriteStream.EMPTY_STREAM_TOKEN;
   }
@@ -219,16 +212,12 @@ public MutationBatch addMutationBatch(
       db.getIndexManager().addToCollectionParentIndex(key.getPath().popLast());
     }
 
-    statsCollector.recordRowsWritten(STATS_TAG, mutations.size());
-
     return batch;
   }
 
   @Nullable
   @Override
   public MutationBatch lookupMutationBatch(int batchId) {
-    statsCollector.recordRowsRead(STATS_TAG, 1);
-
     return db.query("SELECT SUBSTR(mutations, 1, ?) FROM mutations WHERE uid = ? AND batch_id = ?")
         .binding(BLOB_MAX_INLINE_LENGTH, uid, batchId)
         .firstValue(row -> decodeInlineMutationBatch(batchId, row.getBlob(0)));
@@ -237,8 +226,6 @@ public MutationBatch lookupMutationBatch(int batchId) {
   @Nullable
   @Override
   public MutationBatch getNextMutationBatchAfterBatchId(int batchId) {
-    statsCollector.recordRowsRead(STATS_TAG, 1);
-
     int nextBatchId = batchId + 1;
 
     return db.query(
@@ -259,16 +246,12 @@ public int getHighestUnacknowledgedBatchId() {
   @Override
   public List<MutationBatch> getAllMutationBatches() {
     List<MutationBatch> result = new ArrayList<>();
-    int rowsProcessed =
-        db.query(
-                "SELECT batch_id, SUBSTR(mutations, 1, ?) "
-                    + "FROM mutations "
-                    + "WHERE uid = ? ORDER BY batch_id ASC")
-            .binding(BLOB_MAX_INLINE_LENGTH, uid)
-            .forEach(row -> result.add(decodeInlineMutationBatch(row.getInt(0), row.getBlob(1))));
-
-    statsCollector.recordRowsRead(STATS_TAG, rowsProcessed);
-
+    db.query(
+            "SELECT batch_id, SUBSTR(mutations, 1, ?) "
+                + "FROM mutations "
+                + "WHERE uid = ? ORDER BY batch_id ASC")
+        .binding(BLOB_MAX_INLINE_LENGTH, uid)
+        .forEach(row -> result.add(decodeInlineMutationBatch(row.getInt(0), row.getBlob(1))));
     return result;
   }
 
@@ -277,19 +260,16 @@ public int getHighestUnacknowledgedBatchId() {
     String path = EncodedPath.encode(documentKey.getPath());
 
     List<MutationBatch> result = new ArrayList<>();
-    int rowsProcessed =
-        db.query(
-                "SELECT m.batch_id, SUBSTR(m.mutations, 1, ?) "
-                    + "FROM document_mutations dm, mutations m "
-                    + "WHERE dm.uid = ? "
-                    + "AND dm.path = ? "
-                    + "AND dm.uid = m.uid "
-                    + "AND dm.batch_id = m.batch_id "
-                    + "ORDER BY dm.batch_id")
-            .binding(BLOB_MAX_INLINE_LENGTH, uid, path)
-            .forEach(row -> result.add(decodeInlineMutationBatch(row.getInt(0), row.getBlob(1))));
-
-    statsCollector.recordRowsRead(STATS_TAG, rowsProcessed);
+    db.query(
+            "SELECT m.batch_id, SUBSTR(m.mutations, 1, ?) "
+                + "FROM document_mutations dm, mutations m "
+                + "WHERE dm.uid = ? "
+                + "AND dm.path = ? "
+                + "AND dm.uid = m.uid "
+                + "AND dm.batch_id = m.batch_id "
+                + "ORDER BY dm.batch_id")
+        .binding(BLOB_MAX_INLINE_LENGTH, uid, path)
+        .forEach(row -> result.add(decodeInlineMutationBatch(row.getInt(0), row.getBlob(1))));
 
     return result;
   }
@@ -316,26 +296,21 @@ public int getHighestUnacknowledgedBatchId() {
                 + "AND dm.batch_id = m.batch_id "
                 + "ORDER BY dm.batch_id");
 
-    int rowsProcessed = 0;
-
     List<MutationBatch> result = new ArrayList<>();
     Set<Integer> uniqueBatchIds = new HashSet<>();
     while (longQuery.hasMoreSubqueries()) {
-      rowsProcessed +=
-          longQuery
-              .performNextSubquery()
-              .forEach(
-                  row -> {
-                    int batchId = row.getInt(0);
-                    if (!uniqueBatchIds.contains(batchId)) {
-                      uniqueBatchIds.add(batchId);
-                      result.add(decodeInlineMutationBatch(batchId, row.getBlob(1)));
-                    }
-                  });
+      longQuery
+          .performNextSubquery()
+          .forEach(
+              row -> {
+                int batchId = row.getInt(0);
+                if (!uniqueBatchIds.contains(batchId)) {
+                  uniqueBatchIds.add(batchId);
+                  result.add(decodeInlineMutationBatch(batchId, row.getBlob(1)));
+                }
+              });
     }
 
-    statsCollector.recordRowsRead(STATS_TAG, rowsProcessed);
-
     // If more than one query was issued, batches might be in an unsorted order (batches are ordered
     // within one query's results, but not across queries). It's likely to be rare, so don't impose
     // performance penalty on the normal case.
@@ -376,42 +351,39 @@ public int getHighestUnacknowledgedBatchId() {
 
     List<MutationBatch> result = new ArrayList<>();
 
-    int rowsProcessed =
-        db.query(
-                "SELECT dm.batch_id, dm.path, SUBSTR(m.mutations, 1, ?) "
-                    + "FROM document_mutations dm, mutations m "
-                    + "WHERE dm.uid = ? "
-                    + "AND dm.path >= ? "
-                    + "AND dm.path < ? "
-                    + "AND dm.uid = m.uid "
-                    + "AND dm.batch_id = m.batch_id "
-                    + "ORDER BY dm.batch_id")
-            .binding(BLOB_MAX_INLINE_LENGTH, uid, prefixPath, prefixSuccessorPath)
-            .forEach(
-                row -> {
-                  // Ensure unique batches only. This works because the batches come out in order so
-                  // we only need to ensure that the batchId of this row is different from the
-                  // preceding one.
-                  int batchId = row.getInt(0);
-                  int size = result.size();
-                  if (size > 0 && batchId == result.get(size - 1).getBatchId()) {
-                    return;
-                  }
-
-                  // The query is actually returning any path that starts with the query path prefix
-                  // which may include documents in subcollections. For example, a query on 'rooms'
-                  // will return rooms/abc/messages/xyx but we shouldn't match it. Fix this by
-                  // discarding rows with document keys more than one segment longer than the query
-                  // path.
-                  ResourcePath path = EncodedPath.decodeResourcePath(row.getString(1));
-                  if (path.length() != immediateChildrenPathLength) {
-                    return;
-                  }
-
-                  result.add(decodeInlineMutationBatch(batchId, row.getBlob(2)));
-                });
-
-    statsCollector.recordRowsRead(STATS_TAG, rowsProcessed);
+    db.query(
+            "SELECT dm.batch_id, dm.path, SUBSTR(m.mutations, 1, ?) "
+                + "FROM document_mutations dm, mutations m "
+                + "WHERE dm.uid = ? "
+                + "AND dm.path >= ? "
+                + "AND dm.path < ? "
+                + "AND dm.uid = m.uid "
+                + "AND dm.batch_id = m.batch_id "
+                + "ORDER BY dm.batch_id")
+        .binding(BLOB_MAX_INLINE_LENGTH, uid, prefixPath, prefixSuccessorPath)
+        .forEach(
+            row -> {
+              // Ensure unique batches only. This works because the batches come out in order so
+              // we only need to ensure that the batchId of this row is different from the
+              // preceding one.
+              int batchId = row.getInt(0);
+              int size = result.size();
+              if (size > 0 && batchId == result.get(size - 1).getBatchId()) {
+                return;
+              }
+
+              // The query is actually returning any path that starts with the query path prefix
+              // which may include documents in subcollections. For example, a query on 'rooms'
+              // will return rooms/abc/messages/xyx but we shouldn't match it. Fix this by
+              // discarding rows with document keys more than one segment longer than the query
+              // path.
+              ResourcePath path = EncodedPath.decodeResourcePath(row.getString(1));
+              if (path.length() != immediateChildrenPathLength) {
+                return;
+              }
+
+              result.add(decodeInlineMutationBatch(batchId, row.getBlob(2)));
+            });
 
     return result;
   }
@@ -434,8 +406,6 @@ public void removeMutationBatch(MutationBatch batch) {
       db.execute(indexDeleter, uid, path, batchId);
       db.getReferenceDelegate().removeMutationReference(key);
     }
-
-    statsCollector.recordRowsDeleted(STATS_TAG, batch.getMutations().size());
   }
 
   @Override
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLitePersistence.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLitePersistence.java
index 0ffc415d8..09e06f7e3 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLitePersistence.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLitePersistence.java
@@ -79,7 +79,6 @@ public static String databaseName(String persistenceKey, DatabaseId databaseId)
 
   private final SQLiteOpenHelper opener;
   private final LocalSerializer serializer;
-  private final StatsCollector statsCollector;
   private final SQLiteQueryCache queryCache;
   private final SQLiteIndexManager indexManager;
   private final SQLiteRemoteDocumentCache remoteDocumentCache;
@@ -109,40 +108,16 @@ public SQLitePersistence(
       DatabaseId databaseId,
       LocalSerializer serializer,
       LruGarbageCollector.Params params) {
-    this(
-        context,
-        persistenceKey,
-        databaseId,
-        serializer,
-        StatsCollector.NO_OP_STATS_COLLECTOR,
-        params);
+    this(serializer, params, new OpenHelper(context, databaseName(persistenceKey, databaseId)));
   }
 
   public SQLitePersistence(
-      Context context,
-      String persistenceKey,
-      DatabaseId databaseId,
-      LocalSerializer serializer,
-      StatsCollector statsCollector,
-      LruGarbageCollector.Params params) {
-    this(
-        serializer,
-        statsCollector,
-        params,
-        new OpenHelper(context, databaseName(persistenceKey, databaseId)));
-  }
-
-  public SQLitePersistence(
-      LocalSerializer serializer,
-      StatsCollector statsCollector,
-      LruGarbageCollector.Params params,
-      SQLiteOpenHelper openHelper) {
+      LocalSerializer serializer, LruGarbageCollector.Params params, SQLiteOpenHelper openHelper) {
     this.opener = openHelper;
     this.serializer = serializer;
-    this.statsCollector = statsCollector;
     this.queryCache = new SQLiteQueryCache(this, this.serializer);
     this.indexManager = new SQLiteIndexManager(this);
-    this.remoteDocumentCache = new SQLiteRemoteDocumentCache(this, this.serializer, statsCollector);
+    this.remoteDocumentCache = new SQLiteRemoteDocumentCache(this, this.serializer);
     this.referenceDelegate = new SQLiteLruReferenceDelegate(this, params);
   }
 
@@ -188,7 +163,7 @@ public SQLiteLruReferenceDelegate getReferenceDelegate() {
 
   @Override
   MutationQueue getMutationQueue(User user) {
-    return new SQLiteMutationQueue(this, serializer, statsCollector, user);
+    return new SQLiteMutationQueue(this, serializer, user);
   }
 
   @Override
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteRemoteDocumentCache.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteRemoteDocumentCache.java
index c1270ef0d..a7c437d26 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteRemoteDocumentCache.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SQLiteRemoteDocumentCache.java
@@ -41,27 +41,24 @@
 
   private final SQLitePersistence db;
   private final LocalSerializer serializer;
-  private final StatsCollector statsCollector;
 
-  SQLiteRemoteDocumentCache(
-      SQLitePersistence persistence, LocalSerializer serializer, StatsCollector statsCollector) {
+  SQLiteRemoteDocumentCache(SQLitePersistence persistence, LocalSerializer serializer) {
     this.db = persistence;
     this.serializer = serializer;
-    this.statsCollector = statsCollector;
   }
 
   @Override
   public void add(MaybeDocument maybeDocument, SnapshotVersion readTime) {
-    hardAssert(
-        !readTime.equals(SnapshotVersion.NONE),
-        "Cannot add document to the RemoteDocumentCache with a read time of zero");
+    // TODO(index-free): This assert causes a crash for one of our customers. Re-add the assert once
+    // we have fixed the root cause and cleaned up the underlying data.
+    //    hardAssert(
+    //        !readTime.equals(SnapshotVersion.NONE),
+    //        "Cannot add document to the RemoteDocumentCache with a read time of zero");
 
     String path = pathForKey(maybeDocument.getKey());
     Timestamp timestamp = readTime.getTimestamp();
     MessageLite message = serializer.encodeMaybeDocument(maybeDocument);
 
-    statsCollector.recordRowsWritten(STATS_TAG, 1);
-
     db.execute(
         "INSERT OR REPLACE INTO remote_documents "
             + "(path, read_time_seconds, read_time_nanos, contents) "
@@ -78,8 +75,6 @@ public void add(MaybeDocument maybeDocument, SnapshotVersion readTime) {
   public void remove(DocumentKey documentKey) {
     String path = pathForKey(documentKey);
 
-    statsCollector.recordRowsDeleted(STATS_TAG, 1);
-
     db.execute("DELETE FROM remote_documents WHERE path = ?", path);
   }
 
@@ -88,8 +83,6 @@ public void remove(DocumentKey documentKey) {
   public MaybeDocument get(DocumentKey documentKey) {
     String path = pathForKey(documentKey);
 
-    statsCollector.recordRowsRead(STATS_TAG, 1);
-
     return db.query("SELECT contents FROM remote_documents WHERE path = ?")
         .binding(path)
         .firstValue(row -> decodeMaybeDocument(row.getBlob(0)));
@@ -116,21 +109,16 @@ public MaybeDocument get(DocumentKey documentKey) {
             args,
             ") ORDER BY path");
 
-    int rowsProcessed = 0;
-
     while (longQuery.hasMoreSubqueries()) {
-      rowsProcessed +=
-          longQuery
-              .performNextSubquery()
-              .forEach(
-                  row -> {
-                    MaybeDocument decoded = decodeMaybeDocument(row.getBlob(0));
-                    results.put(decoded.getKey(), decoded);
-                  });
+      longQuery
+          .performNextSubquery()
+          .forEach(
+              row -> {
+                MaybeDocument decoded = decodeMaybeDocument(row.getBlob(0));
+                results.put(decoded.getKey(), decoded);
+              });
     }
 
-    statsCollector.recordRowsRead(STATS_TAG, rowsProcessed);
-
     return results;
   }
 
@@ -175,41 +163,37 @@ public MaybeDocument get(DocumentKey documentKey) {
                   readTime.getSeconds(),
                   readTime.getNanoseconds());
     }
-
-    int rowsProcessed =
-        sqlQuery.forEach(
-            row -> {
-              // TODO: Actually implement a single-collection query
-              //
-              // The query is actually returning any path that starts with the query path prefix
-              // which may include documents in subcollections. For example, a query on 'rooms'
-              // will return rooms/abc/messages/xyx but we shouldn't match it. Fix this by
-              // discarding rows with document keys more than one segment longer than the query
-              // path.
-              ResourcePath path = EncodedPath.decodeResourcePath(row.getString(0));
-              if (path.length() != immediateChildrenPathLength) {
-                return;
-              }
-
-              byte[] rawDocument = row.getBlob(1);
-
-              // Since scheduling background tasks incurs overhead, we only dispatch to a
-              // background thread if there are still some documents remaining.
-              Executor executor = row.isLast() ? Executors.DIRECT_EXECUTOR : backgroundQueue;
-              executor.execute(
-                  () -> {
-                    MaybeDocument maybeDoc = decodeMaybeDocument(rawDocument);
-
-                    if (maybeDoc instanceof Document && query.matches((Document) maybeDoc)) {
-                      synchronized (SQLiteRemoteDocumentCache.this) {
-                        matchingDocuments[0] =
-                            matchingDocuments[0].insert(maybeDoc.getKey(), (Document) maybeDoc);
-                      }
-                    }
-                  });
-            });
-
-    statsCollector.recordRowsRead(STATS_TAG, rowsProcessed);
+    sqlQuery.forEach(
+        row -> {
+          // TODO: Actually implement a single-collection query
+          //
+          // The query is actually returning any path that starts with the query path prefix
+          // which may include documents in subcollections. For example, a query on 'rooms'
+          // will return rooms/abc/messages/xyx but we shouldn't match it. Fix this by
+          // discarding rows with document keys more than one segment longer than the query
+          // path.
+          ResourcePath path = EncodedPath.decodeResourcePath(row.getString(0));
+          if (path.length() != immediateChildrenPathLength) {
+            return;
+          }
+
+          byte[] rawDocument = row.getBlob(1);
+
+          // Since scheduling background tasks incurs overhead, we only dispatch to a
+          // background thread if there are still some documents remaining.
+          Executor executor = row.isLast() ? Executors.DIRECT_EXECUTOR : backgroundQueue;
+          executor.execute(
+              () -> {
+                MaybeDocument maybeDoc = decodeMaybeDocument(rawDocument);
+
+                if (maybeDoc instanceof Document && query.matches((Document) maybeDoc)) {
+                  synchronized (SQLiteRemoteDocumentCache.this) {
+                    matchingDocuments[0] =
+                        matchingDocuments[0].insert(maybeDoc.getKey(), (Document) maybeDoc);
+                  }
+                }
+              });
+        });
 
     try {
       backgroundQueue.drain();
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SimpleQueryEngine.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SimpleQueryEngine.java
index 998aba3bb..e66f2c0de 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SimpleQueryEngine.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/SimpleQueryEngine.java
@@ -16,7 +16,6 @@
 
 import static com.google.firebase.firestore.util.Assert.hardAssert;
 
-import androidx.annotation.Nullable;
 import com.google.firebase.database.collection.ImmutableSortedMap;
 import com.google.firebase.database.collection.ImmutableSortedSet;
 import com.google.firebase.firestore.core.Query;
@@ -40,7 +39,9 @@ public void setLocalDocumentsView(LocalDocumentsView localDocuments) {
 
   @Override
   public ImmutableSortedMap<DocumentKey, Document> getDocumentsMatchingQuery(
-      Query query, @Nullable QueryData queryData, ImmutableSortedSet<DocumentKey> remoteKeys) {
+      Query query,
+      SnapshotVersion lastLimboFreeSnapshotVersion,
+      ImmutableSortedSet<DocumentKey> remoteKeys) {
     hardAssert(localDocumentsView != null, "setLocalDocumentsView() not called");
 
     // TODO: Once LocalDocumentsView provides a getCollectionDocuments() method, we
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/StatsCollector.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/local/StatsCollector.java
deleted file mode 100644
index 04b5c0bec..000000000
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/local/StatsCollector.java
+++ /dev/null
@@ -1,36 +0,0 @@
-// Copyright 2019 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package com.google.firebase.firestore.local;
-
-/**
- * Collects the operation count from the persistence layer. Implementing subclasses can expose this
- * information to measure the efficiency of persistence operations.
- *
- * <p>The only consumer of operation counts is currently the LocalStoreTestCase (via {@link
- * com.google.firebase.firestore.local.AccumulatingStatsCollector}). If you are not interested in
- * the stats, you can use `NO_OP_STATS_COLLECTOR` for the default empty stats collector.
- */
-class StatsCollector {
-  static final StatsCollector NO_OP_STATS_COLLECTOR = new StatsCollector();
-
-  /** Records the number of rows read for the given tag. */
-  void recordRowsRead(String tag, int count) {}
-
-  /** Records the number of rows deleted for the given tag. */
-  void recordRowsDeleted(String tag, int count) {}
-
-  /** Records the number of rows written for the given tag. */
-  void recordRowsWritten(String tag, int count) {}
-}
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/Datastore.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/Datastore.java
index c2ebf2eab..a181c328a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/Datastore.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/Datastore.java
@@ -16,6 +16,7 @@
 
 import android.content.Context;
 import android.os.Build;
+import androidx.annotation.Nullable;
 import com.google.android.gms.tasks.Task;
 import com.google.firebase.firestore.FirebaseFirestoreException;
 import com.google.firebase.firestore.auth.CredentialsProvider;
@@ -87,12 +88,15 @@ public Datastore(
       DatabaseInfo databaseInfo,
       AsyncQueue workerQueue,
       CredentialsProvider credentialsProvider,
-      Context context) {
+      Context context,
+      @Nullable GrpcMetadataProvider metadataProvider) {
     this.databaseInfo = databaseInfo;
     this.workerQueue = workerQueue;
     this.serializer = new RemoteSerializer(databaseInfo.getDatabaseId());
 
-    channel = new FirestoreChannel(workerQueue, context, credentialsProvider, databaseInfo);
+    channel =
+        new FirestoreChannel(
+            workerQueue, context, credentialsProvider, databaseInfo, metadataProvider);
   }
 
   void shutdown() {
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirebaseClientGrpcMetadataProvider.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirebaseClientGrpcMetadataProvider.java
new file mode 100644
index 000000000..b8e7f5ebe
--- /dev/null
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirebaseClientGrpcMetadataProvider.java
@@ -0,0 +1,60 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.remote;
+
+import androidx.annotation.NonNull;
+import com.google.firebase.heartbeatinfo.HeartBeatInfo;
+import com.google.firebase.inject.Provider;
+import com.google.firebase.platforminfo.UserAgentPublisher;
+import io.grpc.Metadata;
+
+/**
+ * Provides an implementation of the GrpcMetadataProvider interface.
+ *
+ * <p>This updates the metadata with platformInfo string and the heartBeatInfo code.
+ */
+public class FirebaseClientGrpcMetadataProvider implements GrpcMetadataProvider {
+
+  private final Provider<HeartBeatInfo> heartBeatInfoProvider;
+  private final Provider<UserAgentPublisher> userAgentPublisherProvider;
+  private final String firebaseFirestoreHeartBeatTag = "fire-fst";
+
+  private static final Metadata.Key<String> HEART_BEAT_HEADER =
+      Metadata.Key.of("x-firebase-client-log-type", Metadata.ASCII_STRING_MARSHALLER);
+
+  private static final Metadata.Key<String> USER_AGENT_HEADER =
+      Metadata.Key.of("x-firebase-client", Metadata.ASCII_STRING_MARSHALLER);
+
+  public FirebaseClientGrpcMetadataProvider(
+      @NonNull Provider<UserAgentPublisher> userAgentPublisherProvider,
+      @NonNull Provider<HeartBeatInfo> heartBeatInfoProvider) {
+    this.userAgentPublisherProvider = userAgentPublisherProvider;
+    this.heartBeatInfoProvider = heartBeatInfoProvider;
+  }
+
+  @Override
+  public void updateMetadata(@NonNull Metadata metadata) {
+    if (heartBeatInfoProvider.get() == null || userAgentPublisherProvider.get() == null) {
+      return;
+    }
+    int heartBeatCode =
+        heartBeatInfoProvider.get().getHeartBeatCode(firebaseFirestoreHeartBeatTag).getCode();
+    // Non-zero values indicate some kind of heartbeat should be sent
+    if (heartBeatCode != 0) {
+      metadata.put(HEART_BEAT_HEADER, Integer.toString(heartBeatCode));
+      metadata.put(USER_AGENT_HEADER, userAgentPublisherProvider.get().getUserAgent());
+    }
+  }
+}
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreChannel.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreChannel.java
index e11c2dc14..6b91a5d2a 100644
--- a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreChannel.java
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/FirestoreChannel.java
@@ -64,12 +64,16 @@
   /** The value to use as resource prefix header. */
   private final String resourcePrefixValue;
 
+  private final GrpcMetadataProvider metadataProvider;
+
   FirestoreChannel(
       AsyncQueue asyncQueue,
       Context context,
       CredentialsProvider credentialsProvider,
-      DatabaseInfo databaseInfo) {
+      DatabaseInfo databaseInfo,
+      GrpcMetadataProvider metadataProvider) {
     this.asyncQueue = asyncQueue;
+    this.metadataProvider = metadataProvider;
     this.credentialsProvider = credentialsProvider;
 
     FirestoreCallCredentials firestoreHeaders = new FirestoreCallCredentials(credentialsProvider);
@@ -283,6 +287,9 @@ private Metadata requestHeaders() {
     headers.put(X_GOOG_API_CLIENT_HEADER, X_GOOG_API_CLIENT_VALUE);
     // This header is used to improve routing and project isolation by the backend.
     headers.put(RESOURCE_PREFIX_HEADER, this.resourcePrefixValue);
+    if (metadataProvider != null) {
+      metadataProvider.updateMetadata(headers);
+    }
     return headers;
   }
 }
diff --git a/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/GrpcMetadataProvider.java b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/GrpcMetadataProvider.java
new file mode 100644
index 000000000..d8d8481f7
--- /dev/null
+++ b/firebase-firestore/src/main/java/com/google/firebase/firestore/remote/GrpcMetadataProvider.java
@@ -0,0 +1,29 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.remote;
+
+import androidx.annotation.NonNull;
+import io.grpc.Metadata;
+
+/**
+ * Class updates the headers for the request to the backend.
+ *
+ * <p>UpdateMetadata updates the metadata object with some custom headers which will be sent along
+ * with the default headers to the backend.
+ */
+public interface GrpcMetadataProvider {
+
+  void updateMetadata(@NonNull Metadata metadata);
+}
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/AccumulatingStatsCollector.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/AccumulatingStatsCollector.java
deleted file mode 100644
index 08e56126f..000000000
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/AccumulatingStatsCollector.java
+++ /dev/null
@@ -1,66 +0,0 @@
-// Copyright 2019 Google LLC
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package com.google.firebase.firestore.local;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/* A test-only collector of operation counts from the persistence layer. */
-class AccumulatingStatsCollector extends StatsCollector {
-
-  private final Map<String, Integer> rowsRead = new HashMap<>();
-  private final Map<String, Integer> rowsDeleted = new HashMap<>();
-  private final Map<String, Integer> rowsWritten = new HashMap<>();
-
-  @Override
-  void recordRowsRead(String tag, int count) {
-    Integer currentValue = rowsRead.get(tag);
-    rowsRead.put(tag, currentValue != null ? currentValue + count : count);
-  }
-
-  @Override
-  void recordRowsDeleted(String tag, int count) {
-    Integer currentValue = rowsDeleted.get(tag);
-    rowsDeleted.put(tag, currentValue != null ? currentValue + count : count);
-  }
-
-  @Override
-  void recordRowsWritten(String tag, int count) {
-    Integer currentValue = rowsWritten.get(tag);
-    rowsWritten.put(tag, currentValue != null ? currentValue + count : count);
-  }
-
-  /** Reset all operation counts */
-  void reset() {
-    rowsRead.clear();
-    rowsDeleted.clear();
-    rowsWritten.clear();
-  }
-
-  /** Returns the number of rows read for the given tag since the last call to `reset()`. */
-  int getRowsRead(String tag) {
-    return rowsRead.containsKey(tag) ? rowsRead.get(tag) : 0;
-  }
-
-  /** Returns the number of rows written for the given tag since the last call to `reset()`. */
-  int getRowsWritten(String tag) {
-    return rowsWritten.containsKey(tag) ? rowsWritten.get(tag) : 0;
-  }
-
-  /** Returns the number of rows deleted for the given tag since the last call to `reset()`. */
-  int getRowsDeleted(String tag) {
-    return rowsDeleted.containsKey(tag) ? rowsDeleted.get(tag) : 0;
-  }
-}
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/CountingQueryEngine.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/CountingQueryEngine.java
new file mode 100644
index 000000000..0bef9aa26
--- /dev/null
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/CountingQueryEngine.java
@@ -0,0 +1,246 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.firestore.local;
+
+import androidx.annotation.Nullable;
+import com.google.firebase.Timestamp;
+import com.google.firebase.database.collection.ImmutableSortedMap;
+import com.google.firebase.database.collection.ImmutableSortedSet;
+import com.google.firebase.firestore.core.Query;
+import com.google.firebase.firestore.model.Document;
+import com.google.firebase.firestore.model.DocumentKey;
+import com.google.firebase.firestore.model.MaybeDocument;
+import com.google.firebase.firestore.model.SnapshotVersion;
+import com.google.firebase.firestore.model.mutation.Mutation;
+import com.google.firebase.firestore.model.mutation.MutationBatch;
+import com.google.protobuf.ByteString;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * A test-only QueryEngine that forwards all API calls and exposes the number of documents and
+ * mutations read.
+ */
+class CountingQueryEngine implements QueryEngine {
+  private final QueryEngine queryEngine;
+
+  private final int[] mutationsReadByQuery = new int[] {0};
+  private final int[] mutationsReadByKey = new int[] {0};
+  private final int[] documentsReadByQuery = new int[] {0};
+  private final int[] documentsReadByKey = new int[] {0};
+
+  CountingQueryEngine(QueryEngine queryEngine) {
+    this.queryEngine = queryEngine;
+  }
+
+  void resetCounts() {
+    mutationsReadByQuery[0] = 0;
+    mutationsReadByKey[0] = 0;
+    documentsReadByQuery[0] = 0;
+    documentsReadByKey[0] = 0;
+  }
+
+  @Override
+  public void setLocalDocumentsView(LocalDocumentsView localDocuments) {
+    LocalDocumentsView view =
+        new LocalDocumentsView(
+            wrapRemoteDocumentCache(localDocuments.getRemoteDocumentCache()),
+            wrapMutationQueue(localDocuments.getMutationQueue()),
+            localDocuments.getIndexManager());
+    queryEngine.setLocalDocumentsView(view);
+  }
+
+  @Override
+  public ImmutableSortedMap<DocumentKey, Document> getDocumentsMatchingQuery(
+      Query query,
+      SnapshotVersion lastLimboFreeSnapshotVersion,
+      ImmutableSortedSet<DocumentKey> remoteKeys) {
+    return queryEngine.getDocumentsMatchingQuery(query, lastLimboFreeSnapshotVersion, remoteKeys);
+  }
+
+  @Override
+  public void handleDocumentChange(MaybeDocument oldDocument, MaybeDocument newDocument) {
+    queryEngine.handleDocumentChange(oldDocument, newDocument);
+  }
+
+  /** Returns the query engine that is used as the backing implementation. */
+  QueryEngine getSubject() {
+    return queryEngine;
+  }
+
+  /**
+   * Returns the number of documents returned by the RemoteDocumentCache's
+   * `getDocumentsMatchingQuery()` API (since the last call to `resetCounts()`)
+   */
+  int getDocumentsReadByQuery() {
+    return documentsReadByQuery[0];
+  }
+
+  /**
+   * Returns the number of documents returned by the RemoteDocumentCache's `getEntry()` and
+   * `getEntries()` APIs (since the last call to `resetCounts()`)
+   */
+  int getDocumentsReadByKey() {
+    return documentsReadByKey[0];
+  }
+
+  /**
+   * Returns the number of mutations returned by the MutationQueue's
+   * `getAllMutationBatchesAffectingQuery()` API (since the last call to `resetCounts()`)
+   */
+  int getMutationsReadByQuery() {
+    return mutationsReadByQuery[0];
+  }
+
+  /**
+   * Returns the number of mutations returned by the MutationQueue's
+   * `getAllMutationBatchesAffectingDocumentKey()` and
+   * `getAllMutationBatchesAffectingDocumentKeys()` APIs (since the last call to `resetCounts()`)
+   */
+  int getMutationsReadByKey() {
+    return mutationsReadByKey[0];
+  }
+
+  private RemoteDocumentCache wrapRemoteDocumentCache(RemoteDocumentCache subject) {
+    return new RemoteDocumentCache() {
+      @Override
+      public void add(MaybeDocument maybeDocument, SnapshotVersion readTime) {
+        subject.add(maybeDocument, readTime);
+      }
+
+      @Override
+      public void remove(DocumentKey documentKey) {
+        subject.remove(documentKey);
+      }
+
+      @Nullable
+      @Override
+      public MaybeDocument get(DocumentKey documentKey) {
+        MaybeDocument result = subject.get(documentKey);
+        documentsReadByKey[0] += result != null ? 1 : 0;
+        return result;
+      }
+
+      @Override
+      public Map<DocumentKey, MaybeDocument> getAll(Iterable<DocumentKey> documentKeys) {
+        Map<DocumentKey, MaybeDocument> result = subject.getAll(documentKeys);
+        documentsReadByKey[0] += result.size();
+        return result;
+      }
+
+      @Override
+      public ImmutableSortedMap<DocumentKey, Document> getAllDocumentsMatchingQuery(
+          Query query, SnapshotVersion sinceReadTime) {
+        ImmutableSortedMap<DocumentKey, Document> result =
+            subject.getAllDocumentsMatchingQuery(query, sinceReadTime);
+        documentsReadByQuery[0] += result.size();
+        return result;
+      }
+    };
+  }
+
+  private MutationQueue wrapMutationQueue(MutationQueue subject) {
+    return new MutationQueue() {
+      @Override
+      public void start() {
+        subject.start();
+      }
+
+      @Override
+      public boolean isEmpty() {
+        return subject.isEmpty();
+      }
+
+      @Override
+      public void acknowledgeBatch(MutationBatch batch, ByteString streamToken) {
+        subject.acknowledgeBatch(batch, streamToken);
+      }
+
+      @Override
+      public ByteString getLastStreamToken() {
+        return subject.getLastStreamToken();
+      }
+
+      @Override
+      public void setLastStreamToken(ByteString streamToken) {
+        subject.setLastStreamToken(streamToken);
+      }
+
+      @Override
+      public MutationBatch addMutationBatch(
+          Timestamp localWriteTime, List<Mutation> baseMutations, List<Mutation> mutations) {
+        return subject.addMutationBatch(localWriteTime, baseMutations, mutations);
+      }
+
+      @Nullable
+      @Override
+      public MutationBatch lookupMutationBatch(int batchId) {
+        return subject.lookupMutationBatch(batchId);
+      }
+
+      @Nullable
+      @Override
+      public MutationBatch getNextMutationBatchAfterBatchId(int batchId) {
+        return subject.getNextMutationBatchAfterBatchId(batchId);
+      }
+
+      @Override
+      public int getHighestUnacknowledgedBatchId() {
+        return subject.getHighestUnacknowledgedBatchId();
+      }
+
+      @Override
+      public List<MutationBatch> getAllMutationBatches() {
+        List<MutationBatch> result = subject.getAllMutationBatches();
+        mutationsReadByKey[0] += result.size();
+        return result;
+      }
+
+      @Override
+      public List<MutationBatch> getAllMutationBatchesAffectingDocumentKey(
+          DocumentKey documentKey) {
+        List<MutationBatch> result = subject.getAllMutationBatchesAffectingDocumentKey(documentKey);
+        mutationsReadByKey[0] += result.size();
+        return result;
+      }
+
+      @Override
+      public List<MutationBatch> getAllMutationBatchesAffectingDocumentKeys(
+          Iterable<DocumentKey> documentKeys) {
+        List<MutationBatch> result =
+            subject.getAllMutationBatchesAffectingDocumentKeys(documentKeys);
+        mutationsReadByKey[0] += result.size();
+        return result;
+      }
+
+      @Override
+      public List<MutationBatch> getAllMutationBatchesAffectingQuery(Query query) {
+        List<MutationBatch> result = subject.getAllMutationBatchesAffectingQuery(query);
+        mutationsReadByQuery[0] += result.size();
+        return result;
+      }
+
+      @Override
+      public void removeMutationBatch(MutationBatch batch) {
+        subject.removeMutationBatch(batch);
+      }
+
+      @Override
+      public void performConsistencyCheck() {
+        subject.performConsistencyCheck();
+      }
+    };
+  }
+}
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/IndexFreeQueryEngineTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/IndexFreeQueryEngineTest.java
index f21c3a6e8..683254b6f 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/IndexFreeQueryEngineTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/IndexFreeQueryEngineTest.java
@@ -34,7 +34,6 @@
 import com.google.firebase.firestore.model.DocumentKey;
 import com.google.firebase.firestore.model.DocumentSet;
 import com.google.firebase.firestore.model.SnapshotVersion;
-import com.google.protobuf.ByteString;
 import java.util.Collections;
 import java.util.concurrent.Callable;
 import javax.annotation.Nullable;
@@ -65,6 +64,9 @@
   private static final Document UPDATED_MATCHING_DOC_B =
       doc("coll/b", 11, map("matches", true, "order", 2), Document.DocumentState.SYNCED);
 
+  private SnapshotVersion LAST_LIMBO_FREE_SNAPSHOT = version(10);
+  private SnapshotVersion MISSING_LAST_LIMBO_FREE_SNAPSHOT = SnapshotVersion.NONE;
+
   private MemoryPersistence persistence;
   private MemoryRemoteDocumentCache remoteDocumentCache;
   private QueryCache queryCache;
@@ -142,13 +144,15 @@ private void addDocument(Document... docs) {
     }
   }
 
-  private DocumentSet runQuery(Query query, QueryData queryData) {
+  private DocumentSet runQuery(Query query, SnapshotVersion lastLimboFreeSnapshotVersion) {
     Preconditions.checkNotNull(
         expectIndexFreeExecution,
         "Encountered runQuery() call not wrapped in expectIndexFreeQuery()/expectFullCollectionQuery()");
     ImmutableSortedMap<DocumentKey, Document> docs =
         queryEngine.getDocumentsMatchingQuery(
-            query, queryData, queryCache.getMatchingKeysForTargetId(TEST_TARGET_ID));
+            query,
+            lastLimboFreeSnapshotVersion,
+            queryCache.getMatchingKeysForTargetId(TEST_TARGET_ID));
     View view =
         new View(query, new ImmutableSortedSet<>(Collections.emptyList(), DocumentKey::compareTo));
     View.DocumentChanges viewDocChanges = view.computeDocChanges(docs);
@@ -158,19 +162,17 @@ private DocumentSet runQuery(Query query, QueryData queryData) {
   @Test
   public void usesTargetMappingForInitialView() throws Exception {
     Query query = query("coll").filter(filter("matches", "==", true));
-    QueryData queryData = queryData(query, /* hasLimboFreeSnapshot= */ true);
 
     addDocument(MATCHING_DOC_A, MATCHING_DOC_B);
     persistQueryMapping(MATCHING_DOC_A.getKey(), MATCHING_DOC_B.getKey());
 
-    DocumentSet docs = expectIndexFreeQuery(() -> runQuery(query, queryData));
+    DocumentSet docs = expectIndexFreeQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator(), MATCHING_DOC_A, MATCHING_DOC_B), docs);
   }
 
   @Test
   public void filtersNonMatchingInitialResults() throws Exception {
     Query query = query("coll").filter(filter("matches", "==", true));
-    QueryData queryData = queryData(query, /* hasLimboFreeSnapshot= */ true);
 
     addDocument(MATCHING_DOC_A, MATCHING_DOC_B);
     persistQueryMapping(MATCHING_DOC_A.getKey(), MATCHING_DOC_B.getKey());
@@ -178,42 +180,38 @@ public void filtersNonMatchingInitialResults() throws Exception {
     // Add a mutated document that is not yet part of query's set of remote keys.
     addDocument(PENDING_NON_MATCHING_DOC_A);
 
-    DocumentSet docs = expectIndexFreeQuery(() -> runQuery(query, queryData));
+    DocumentSet docs = expectIndexFreeQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator(), MATCHING_DOC_B), docs);
   }
 
   @Test
   public void includesChangesSinceInitialResults() throws Exception {
     Query query = query("coll").filter(filter("matches", "==", true));
-    QueryData originalQueryData = queryData(query, /* hasLimboFreeSnapshot= */ true);
 
     addDocument(MATCHING_DOC_A, MATCHING_DOC_B);
     persistQueryMapping(MATCHING_DOC_A.getKey(), MATCHING_DOC_B.getKey());
 
-    DocumentSet docs = expectIndexFreeQuery(() -> runQuery(query, originalQueryData));
+    DocumentSet docs = expectIndexFreeQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator(), MATCHING_DOC_A, MATCHING_DOC_B), docs);
 
     addDocument(UPDATED_MATCHING_DOC_B);
 
-    docs = expectIndexFreeQuery(() -> runQuery(query, originalQueryData));
+    docs = expectIndexFreeQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator(), MATCHING_DOC_A, UPDATED_MATCHING_DOC_B), docs);
   }
 
   @Test
   public void doesNotUseInitialResultsWithoutLimboFreeSnapshotVersion() throws Exception {
     Query query = query("coll").filter(filter("matches", "==", true));
-    QueryData queryData = queryData(query, /* hasLimboFreeSnapshot= */ false);
-
-    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, queryData));
+    DocumentSet docs =
+        expectFullCollectionQuery(() -> runQuery(query, MISSING_LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator()), docs);
   }
 
   @Test
   public void doesNotUseInitialResultsForUnfilteredCollectionQuery() throws Exception {
     Query query = query("coll");
-    QueryData queryData = queryData(query, /* hasLimboFreeSnapshot= */ true);
-
-    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, queryData));
+    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator()), docs);
   }
 
@@ -228,8 +226,7 @@ public void doesNotUseInitialResultsForLimitQueryWithDocumentRemoval() throws Ex
 
     addDocument(MATCHING_DOC_B);
 
-    QueryData queryData = queryData(query, /* hasLimboFreeSnapshot= */ true);
-    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, queryData));
+    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator(), MATCHING_DOC_B), docs);
   }
 
@@ -247,11 +244,9 @@ public void doesNotUseInitialResultsForLimitQueryWhenLastDocumentHasPendingWrite
     addDocument(PENDING_MATCHING_DOC_A);
     persistQueryMapping(PENDING_MATCHING_DOC_A.getKey());
 
-    QueryData queryData = queryData(query, /* hasLimboFreeSnapshot= */ true);
-
     addDocument(MATCHING_DOC_B);
 
-    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, queryData));
+    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator(), MATCHING_DOC_B), docs);
   }
 
@@ -269,11 +264,9 @@ public void doesNotUseInitialResultsForLimitQueryWhenLastDocumentHasBeenUpdatedO
     addDocument(UDPATED_DOC_A);
     persistQueryMapping(UDPATED_DOC_A.getKey());
 
-    QueryData queryData = queryData(query, /* hasLimboFreeSnapshot= */ true);
-
     addDocument(MATCHING_DOC_B);
 
-    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, queryData));
+    DocumentSet docs = expectFullCollectionQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(docSet(query.comparator(), MATCHING_DOC_B), docs);
   }
 
@@ -284,7 +277,6 @@ public void limitQueriesUseInitialResultsIfLastDocumentInLimitIsUnchanged() thro
     addDocument(doc("coll/a", 1, map("order", 1)));
     addDocument(doc("coll/b", 1, map("order", 3)));
     persistQueryMapping(key("coll/a"), key("coll/b"));
-    QueryData queryData = queryData(query, /* hasLimboFreeSnapshot= */ true);
 
     // Update "coll/a" but make sure it still sorts before "coll/b"
     addDocument(doc("coll/a", 1, map("order", 2), Document.DocumentState.LOCAL_MUTATIONS));
@@ -292,7 +284,7 @@ public void limitQueriesUseInitialResultsIfLastDocumentInLimitIsUnchanged() thro
     // Since the last document in the limit didn't change (and hence we know that all documents
     // written prior to query execution still sort after "coll/b"), we should use an Index-Free
     // query.
-    DocumentSet docs = expectIndexFreeQuery(() -> runQuery(query, queryData));
+    DocumentSet docs = expectIndexFreeQuery(() -> runQuery(query, LAST_LIMBO_FREE_SNAPSHOT));
     assertEquals(
         docSet(
             query.comparator(),
@@ -300,15 +292,4 @@ public void limitQueriesUseInitialResultsIfLastDocumentInLimitIsUnchanged() thro
             doc("coll/b", 1, map("order", 3))),
         docs);
   }
-
-  private QueryData queryData(Query query, boolean hasLimboFreeSnapshot) {
-    return new QueryData(
-        query,
-        TEST_TARGET_ID,
-        1,
-        QueryPurpose.LISTEN,
-        version(10),
-        hasLimboFreeSnapshot ? version(10) : SnapshotVersion.NONE,
-        ByteString.EMPTY);
-  }
 }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalStoreTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalStoreTestCase.java
index 72e83e440..89dd5fa72 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalStoreTestCase.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalStoreTestCase.java
@@ -90,17 +90,15 @@
  * </ol>
  */
 public abstract class LocalStoreTestCase {
-  private QueryEngine queryEngine;
+  private CountingQueryEngine queryEngine;
   private Persistence localStorePersistence;
   private LocalStore localStore;
 
   private List<MutationBatch> batches;
   private @Nullable ImmutableSortedMap<DocumentKey, MaybeDocument> lastChanges;
-  private ImmutableSortedMap<DocumentKey, Document> lastQueryResult;
+  private @Nullable QueryResult lastQueryResult;
   private int lastTargetId;
 
-  AccumulatingStatsCollector statsCollector;
-
   abstract QueryEngine getQueryEngine();
 
   abstract Persistence getPersistence();
@@ -109,14 +107,13 @@
 
   @Before
   public void setUp() {
-    statsCollector = new AccumulatingStatsCollector();
     batches = new ArrayList<>();
     lastChanges = null;
     lastQueryResult = null;
     lastTargetId = 0;
 
     localStorePersistence = getPersistence();
-    queryEngine = getQueryEngine();
+    queryEngine = new CountingQueryEngine(getQueryEngine());
     localStore = new LocalStore(localStorePersistence, queryEngine, User.UNAUTHENTICATED);
     localStore.start();
   }
@@ -181,7 +178,7 @@ private int allocateQuery(Query query) {
 
   private void executeQuery(Query query) {
     resetPersistenceStats();
-    lastQueryResult = localStore.executeQuery(query);
+    lastQueryResult = localStore.executeQuery(query, /* usePreviousResults= */ true);
   }
 
   private void releaseQuery(Query query) {
@@ -233,31 +230,35 @@ private void assertNotContains(String keyPathString) {
 
   private void assertQueryReturned(String... keys) {
     assertNotNull(lastQueryResult);
+    ImmutableSortedMap<DocumentKey, Document> documents = lastQueryResult.getDocuments();
     for (String key : keys) {
-      assertTrue("Expected query to return: " + key, lastQueryResult.containsKey(key(key)));
+      assertTrue("Expected query to return: " + key, documents.containsKey(key(key)));
     }
-    assertEquals(lastQueryResult.size(), keys.length);
+    assertEquals(documents.size(), keys.length);
   }
 
   /**
-   * Asserts the expected numbers of mutation rows read by the MutationQueue since the last call to
+   * Asserts the expected numbers of mutations read by the MutationQueue since the last call to
    * `resetPersistenceStats()`.
    */
-  private void assertMutationsRead(int expected) {
-    assertEquals(expected, statsCollector.getRowsRead(MutationQueue.STATS_TAG));
+  private void assertMutationsRead(int byKey, int byQuery) {
+    assertEquals("Mutations read (by query)", byQuery, queryEngine.getMutationsReadByQuery());
+    assertEquals("Mutations read (by key)", byKey, queryEngine.getMutationsReadByKey());
   }
 
   /**
-   * Asserts the expected numbers of document rows read by the RemoteDocumentCache since the last
-   * call to `resetPersistenceStats()`.
+   * Asserts the expected numbers of documents read by the RemoteDocumentCache since the last call
+   * to `resetPersistenceStats()`.
    */
-  private void assertRemoteDocumentsRead(int expected) {
-    assertEquals(expected, statsCollector.getRowsRead(RemoteDocumentCache.STATS_TAG));
+  private void assertRemoteDocumentsRead(int byKey, int byQuery) {
+    assertEquals(
+        "Remote documents read (by query)", byQuery, queryEngine.getDocumentsReadByQuery());
+    assertEquals("Remote documents read (by key)", byKey, queryEngine.getDocumentsReadByKey());
   }
 
-  /** Resets the count of rows read by MutationQueue and the RemoteDocumentCache. */
+  /** Resets the count of entities read by MutationQueue and the RemoteDocumentCache. */
   private void resetPersistenceStats() {
-    statsCollector.reset();
+    queryEngine.resetCounts();
   }
 
   @Test
@@ -651,9 +652,7 @@ public void testHandlesSetMutationAndPatchMutationTogether() {
 
   @Test
   public void testHandlesSetMutationThenPatchMutationThenReject() {
-    if (!garbageCollectorIsEager()) {
-      return;
-    }
+    assumeTrue(garbageCollectorIsEager());
 
     writeMutation(setMutation("foo/bar", map("foo", "old")));
     assertContains(doc("foo/bar", 0, map("foo", "old"), Document.DocumentState.LOCAL_MUTATIONS));
@@ -710,9 +709,7 @@ public void testHandlesDeleteMutationThenPatchMutationThenAckThenAck() {
 
   @Test
   public void testCollectsGarbageAfterChangeBatchWithNoTargetIDs() {
-    if (!garbageCollectorIsEager()) {
-      return;
-    }
+    assumeTrue(garbageCollectorIsEager());
 
     int targetId = 1;
     applyRemoteEvent(
@@ -727,9 +724,7 @@ public void testCollectsGarbageAfterChangeBatchWithNoTargetIDs() {
 
   @Test
   public void testCollectsGarbageAfterChangeBatch() {
-    if (!garbageCollectorIsEager()) {
-      return;
-    }
+    assumeTrue(garbageCollectorIsEager());
 
     Query query = Query.atPath(ResourcePath.fromString("foo"));
     allocateQuery(query);
@@ -747,9 +742,7 @@ public void testCollectsGarbageAfterChangeBatch() {
 
   @Test
   public void testCollectsGarbageAfterAcknowledgedMutation() {
-    if (!garbageCollectorIsEager()) {
-      return;
-    }
+    assumeTrue(garbageCollectorIsEager());
 
     Query query = Query.atPath(ResourcePath.fromString("foo"));
     int targetId = allocateQuery(query);
@@ -781,9 +774,7 @@ public void testCollectsGarbageAfterAcknowledgedMutation() {
 
   @Test
   public void testCollectsGarbageAfterRejectedMutation() {
-    if (!garbageCollectorIsEager()) {
-      return;
-    }
+    assumeTrue(garbageCollectorIsEager());
 
     Query query = Query.atPath(ResourcePath.fromString("foo"));
     int targetId = allocateQuery(query);
@@ -816,9 +807,7 @@ public void testCollectsGarbageAfterRejectedMutation() {
 
   @Test
   public void testPinsDocumentsInTheLocalView() {
-    if (!garbageCollectorIsEager()) {
-      return;
-    }
+    assumeTrue(garbageCollectorIsEager());
 
     Query query = Query.atPath(ResourcePath.fromString("foo"));
     allocateQuery(query);
@@ -849,9 +838,7 @@ public void testPinsDocumentsInTheLocalView() {
 
   @Test
   public void testThrowsAwayDocumentsWithUnknownTargetIDsImmediately() {
-    if (!garbageCollectorIsEager()) {
-      return;
-    }
+    assumeTrue(garbageCollectorIsEager());
 
     int unknownTargetID = 321;
     applyRemoteEvent(
@@ -871,10 +858,10 @@ public void testCanExecuteDocumentQueries() {
             setMutation("foo/baz", map("foo", "baz")),
             setMutation("foo/bar/Foo/Bar", map("Foo", "Bar"))));
     Query query = Query.atPath(ResourcePath.fromSegments(asList("foo", "bar")));
-    ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
+    QueryResult result = localStore.executeQuery(query, /* usePreviousResults= */ true);
     assertEquals(
         asList(doc("foo/bar", 0, map("foo", "bar"), Document.DocumentState.LOCAL_MUTATIONS)),
-        values(docs));
+        values(result.getDocuments()));
   }
 
   @Test
@@ -887,12 +874,12 @@ public void testCanExecuteCollectionQueries() {
             setMutation("foo/bar/Foo/Bar", map("Foo", "Bar")),
             setMutation("fooo/blah", map("fooo", "blah"))));
     Query query = Query.atPath(ResourcePath.fromString("foo"));
-    ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
+    QueryResult result = localStore.executeQuery(query, /* usePreviousResults= */ true);
     assertEquals(
         asList(
             doc("foo/bar", 0, map("foo", "bar"), Document.DocumentState.LOCAL_MUTATIONS),
             doc("foo/baz", 0, map("foo", "baz"), Document.DocumentState.LOCAL_MUTATIONS)),
-        values(docs));
+        values(result.getDocuments()));
   }
 
   @Test
@@ -905,17 +892,17 @@ public void testCanExecuteMixedCollectionQueries() {
     applyRemoteEvent(updateRemoteEvent(doc("foo/bar", 20, map("a", "b")), asList(2), emptyList()));
     writeMutation(setMutation("foo/bonk", map("a", "b")));
 
-    ImmutableSortedMap<DocumentKey, Document> docs = localStore.executeQuery(query);
+    QueryResult result = localStore.executeQuery(query, /* usePreviousResults= */ true);
     assertEquals(
         asList(
             doc("foo/bar", 20, map("a", "b")),
             doc("foo/baz", 10, map("a", "b")),
             doc("foo/bonk", 0, map("a", "b"), Document.DocumentState.LOCAL_MUTATIONS)),
-        values(docs));
+        values(result.getDocuments()));
   }
 
   @Test
-  public void testReadsAllDocumentsForCollectionQueries() {
+  public void testReadsAllDocumentsForInitialCollectionQueries() {
     Query query = Query.atPath(ResourcePath.fromString("foo"));
     allocateQuery(query);
 
@@ -925,10 +912,10 @@ public void testReadsAllDocumentsForCollectionQueries() {
 
     resetPersistenceStats();
 
-    localStore.executeQuery(query);
+    localStore.executeQuery(query, /* usePreviousResults= */ true);
 
-    assertRemoteDocumentsRead(2);
-    assertMutationsRead(1);
+    assertRemoteDocumentsRead(/* byKey= */ 0, /* byQuery= */ 2);
+    assertMutationsRead(/* byKey= */ 0, /* byQuery= */ 1);
   }
 
   @Test
@@ -1034,7 +1021,7 @@ public void testHandlesSetMutationThenAckThenTransformMutationThenAckThenTransfo
   @Test
   public void testUsesTargetMappingToExecuteQueries() {
     assumeFalse(garbageCollectorIsEager());
-    assumeTrue(queryEngine instanceof IndexFreeQueryEngine);
+    assumeTrue(queryEngine.getSubject() instanceof IndexFreeQueryEngine);
 
     // This test verifies that once a target mapping has been written, only documents that match
     // the query are read from the RemoteDocumentCache.
@@ -1053,7 +1040,7 @@ public void testUsesTargetMappingToExecuteQueries() {
     // Execute the query, but note that we read all existing documents from the RemoteDocumentCache
     // since we do not yet have target mapping.
     executeQuery(query);
-    assertRemoteDocumentsRead(3);
+    assertRemoteDocumentsRead(/* byKey= */ 0, /* byQuery= */ 2);
 
     // Issue a RemoteEvent to persist the target mapping.
     applyRemoteEvent(
@@ -1067,7 +1054,7 @@ public void testUsesTargetMappingToExecuteQueries() {
     // Execute the query again, this time verifying that we only read the two documents that match
     // the query.
     executeQuery(query);
-    assertRemoteDocumentsRead(2);
+    assertRemoteDocumentsRead(/* byKey= */ 2, /* byQuery= */ 0);
     assertQueryReturned("foo/a", "foo/b");
   }
 
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java
index 50522e31e..956129aab 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/LruGarbageCollectorTestCase.java
@@ -401,6 +401,30 @@ public void testRemoveOrphanedDocuments() {
         });
   }
 
+  @Test
+  public void testRemoveOrphanedDocumentsWithNoDocuments() {
+    int removed = garbageCollector.removeOrphanedDocuments(1000);
+    assertEquals(0, removed);
+  }
+
+  @Test
+  public void testRemoveOrphanedDocumentsWithLargeNumberOfDocuments() {
+    int orphanedDocumentCount =
+        SQLiteLruReferenceDelegate.REMOVE_ORPHANED_DOCUMENTS_BATCH_SIZE * 2 + 1;
+
+    persistence.runTransaction(
+        "add orphaned docs",
+        () -> {
+          for (int i = 0; i < orphanedDocumentCount; i++) {
+            Document doc = cacheADocumentInTransaction();
+            markDocumentEligibleForGcInTransaction(doc.getKey());
+          }
+        });
+
+    int removed = garbageCollector.removeOrphanedDocuments(1000);
+    assertEquals(orphanedDocumentCount, removed);
+  }
+
   @Test
   public void testRemoveTargetsThenGC() {
     // Create 3 targets, add docs to all of them
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MemoryLocalStoreTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MemoryLocalStoreTest.java
index 4b9b05664..b5e7b2e7b 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MemoryLocalStoreTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/MemoryLocalStoreTest.java
@@ -38,7 +38,7 @@ public MemoryLocalStoreTest(QueryEngine queryEngine) {
 
   @Override
   Persistence getPersistence() {
-    return PersistenceTestHelpers.createEagerGCMemoryPersistence(statsCollector);
+    return PersistenceTestHelpers.createEagerGCMemoryPersistence();
   }
 
   @Override
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/PersistenceTestHelpers.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/PersistenceTestHelpers.java
index 058dc25ee..f4de00a1a 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/PersistenceTestHelpers.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/PersistenceTestHelpers.java
@@ -29,8 +29,7 @@ public static String nextSQLiteDatabaseName() {
   }
 
   public static SQLitePersistence createSQLitePersistence(String name) {
-    return openSQLitePersistence(
-        name, StatsCollector.NO_OP_STATS_COLLECTOR, LruGarbageCollector.Params.Default());
+    return openSQLitePersistence(name, LruGarbageCollector.Params.Default());
   }
   /**
    * Creates and starts a new SQLitePersistence instance for testing.
@@ -41,30 +40,16 @@ public static SQLitePersistence createSQLitePersistence() {
     return createSQLitePersistence(LruGarbageCollector.Params.Default());
   }
 
-  public static SQLitePersistence createSQLitePersistence(StatsCollector statsCollector) {
-    return openSQLitePersistence(
-        nextSQLiteDatabaseName(), statsCollector, LruGarbageCollector.Params.Default());
-  }
-
   public static SQLitePersistence createSQLitePersistence(LruGarbageCollector.Params params) {
     // Robolectric's test runner will clear out the application database directory in between test
     // cases, but sometimes (particularly the spec tests) we create multiple databases per test
     // case and each should be fresh. A unique name is sufficient to keep these separate.
-    return openSQLitePersistence(
-        nextSQLiteDatabaseName(), StatsCollector.NO_OP_STATS_COLLECTOR, params);
+    return openSQLitePersistence(nextSQLiteDatabaseName(), params);
   }
 
   /** Creates and starts a new MemoryPersistence instance for testing. */
   public static MemoryPersistence createEagerGCMemoryPersistence() {
-    MemoryPersistence persistence =
-        MemoryPersistence.createEagerGcMemoryPersistence(StatsCollector.NO_OP_STATS_COLLECTOR);
-    persistence.start();
-    return persistence;
-  }
-
-  public static MemoryPersistence createEagerGCMemoryPersistence(StatsCollector statsCollector) {
-    MemoryPersistence persistence =
-        MemoryPersistence.createEagerGcMemoryPersistence(statsCollector);
+    MemoryPersistence persistence = MemoryPersistence.createEagerGcMemoryPersistence();
     persistence.start();
     return persistence;
   }
@@ -77,19 +62,18 @@ public static MemoryPersistence createLRUMemoryPersistence(LruGarbageCollector.P
     DatabaseId databaseId = DatabaseId.forProject("projectId");
     LocalSerializer serializer = new LocalSerializer(new RemoteSerializer(databaseId));
     MemoryPersistence persistence =
-        MemoryPersistence.createLruGcMemoryPersistence(
-            params, StatsCollector.NO_OP_STATS_COLLECTOR, serializer);
+        MemoryPersistence.createLruGcMemoryPersistence(params, serializer);
     persistence.start();
     return persistence;
   }
 
   private static SQLitePersistence openSQLitePersistence(
-      String name, StatsCollector statsCollector, LruGarbageCollector.Params params) {
+      String name, LruGarbageCollector.Params params) {
     DatabaseId databaseId = DatabaseId.forProject("projectId");
     LocalSerializer serializer = new LocalSerializer(new RemoteSerializer(databaseId));
     Context context = ApplicationProvider.getApplicationContext();
     SQLitePersistence persistence =
-        new SQLitePersistence(context, name, databaseId, serializer, statsCollector, params);
+        new SQLitePersistence(context, name, databaseId, serializer, params);
     persistence.start();
     return persistence;
   }
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteLocalStoreTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteLocalStoreTest.java
index 9f66aa726..dd56e4e81 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteLocalStoreTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteLocalStoreTest.java
@@ -43,7 +43,7 @@ QueryEngine getQueryEngine() {
 
   @Override
   Persistence getPersistence() {
-    return PersistenceTestHelpers.createSQLitePersistence(statsCollector);
+    return PersistenceTestHelpers.createSQLitePersistence();
   }
 
   @Override
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteSchemaTest.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteSchemaTest.java
index 495bb6f71..07898656d 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteSchemaTest.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/local/SQLiteSchemaTest.java
@@ -506,14 +506,9 @@ private SQLiteRemoteDocumentCache createRemoteDocumentCache() {
     DatabaseId databaseId = DatabaseId.forProject("foo");
     LocalSerializer serializer = new LocalSerializer(new RemoteSerializer(databaseId));
     SQLitePersistence persistence =
-        new SQLitePersistence(
-            serializer,
-            StatsCollector.NO_OP_STATS_COLLECTOR,
-            LruGarbageCollector.Params.Default(),
-            opener);
+        new SQLitePersistence(serializer, LruGarbageCollector.Params.Default(), opener);
     persistence.start();
-    return new SQLiteRemoteDocumentCache(
-        persistence, serializer, StatsCollector.NO_OP_STATS_COLLECTOR);
+    return new SQLiteRemoteDocumentCache(persistence, serializer);
   }
 
   private byte[] createDummyDocument(String name) {
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/MockDatastore.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/MockDatastore.java
index b13b8b89d..86d49d265 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/MockDatastore.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/remote/MockDatastore.java
@@ -220,7 +220,8 @@ public MockDatastore(AsyncQueue workerQueue, Context context) {
             DatabaseId.forDatabase("project", "database"), "persistenceKey", "host", false),
         workerQueue,
         new EmptyCredentialsProvider(),
-        context);
+        context,
+        null);
     this.serializer = new RemoteSerializer(getDatabaseInfo().getDatabaseId());
   }
 
diff --git a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
index beaab7ae4..691f371a2 100644
--- a/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
+++ b/firebase-firestore/src/test/java/com/google/firebase/firestore/spec/SpecTestCase.java
@@ -837,8 +837,9 @@ private void assertEventMatches(JSONObject expected, QueryEvent actual) throws J
     }
   }
 
-  private void validateStepExpectations(@Nullable JSONArray stepExpectations) throws JSONException {
-    if (stepExpectations == null) {
+  private void validateExpectedSnapshotEvents(@Nullable JSONArray expectedEventsJson)
+      throws JSONException {
+    if (expectedEventsJson == null) {
       for (QueryEvent event : events) {
         fail("Unexpected event: " + event);
       }
@@ -849,8 +850,8 @@ private void validateStepExpectations(@Nullable JSONArray stepExpectations) thro
     events.sort((q1, q2) -> q1.query.getCanonicalId().compareTo(q2.query.getCanonicalId()));
 
     List<JSONObject> expectedEvents = new ArrayList<>();
-    for (int i = 0; i < stepExpectations.length(); ++i) {
-      expectedEvents.add(stepExpectations.getJSONObject(i));
+    for (int i = 0; i < expectedEventsJson.length(); ++i) {
+      expectedEvents.add(expectedEventsJson.getJSONObject(i));
     }
     expectedEvents.sort(
         (left, right) -> {
@@ -867,37 +868,39 @@ private void validateStepExpectations(@Nullable JSONArray stepExpectations) thro
     for (; i < expectedEvents.size() && i < events.size(); ++i) {
       assertEventMatches(expectedEvents.get(i), events.get(i));
     }
-    for (; i < stepExpectations.length(); ++i) {
-      fail("Missing event: " + stepExpectations.get(i));
+    for (; i < expectedEventsJson.length(); ++i) {
+      fail("Missing event: " + expectedEventsJson.get(i));
     }
     for (; i < events.size(); ++i) {
       fail("Unexpected event: " + events.get(i));
     }
   }
 
-  private void validateStateExpectations(@Nullable JSONObject expected) throws JSONException {
-    if (expected != null) {
-      if (expected.has("numOutstandingWrites")) {
-        assertEquals(expected.getInt("numOutstandingWrites"), writesSent());
+  private void validateExpectedState(@Nullable JSONObject expectedState) throws JSONException {
+    if (expectedState != null) {
+      if (expectedState.has("numOutstandingWrites")) {
+        assertEquals(expectedState.getInt("numOutstandingWrites"), writesSent());
       }
-      if (expected.has("writeStreamRequestCount")) {
+      if (expectedState.has("writeStreamRequestCount")) {
         assertEquals(
-            expected.getInt("writeStreamRequestCount"), datastore.getWriteStreamRequestCount());
+            expectedState.getInt("writeStreamRequestCount"),
+            datastore.getWriteStreamRequestCount());
       }
-      if (expected.has("watchStreamRequestCount")) {
+      if (expectedState.has("watchStreamRequestCount")) {
         assertEquals(
-            expected.getInt("watchStreamRequestCount"), datastore.getWatchStreamRequestCount());
+            expectedState.getInt("watchStreamRequestCount"),
+            datastore.getWatchStreamRequestCount());
       }
-      if (expected.has("limboDocs")) {
+      if (expectedState.has("limboDocs")) {
         expectedLimboDocs = new HashSet<>();
-        JSONArray limboDocs = expected.getJSONArray("limboDocs");
+        JSONArray limboDocs = expectedState.getJSONArray("limboDocs");
         for (int i = 0; i < limboDocs.length(); i++) {
           expectedLimboDocs.add(key((String) limboDocs.get(i)));
         }
       }
-      if (expected.has("activeTargets")) {
+      if (expectedState.has("activeTargets")) {
         expectedActiveTargets = new HashMap<>();
-        JSONObject activeTargets = expected.getJSONObject("activeTargets");
+        JSONObject activeTargets = expectedState.getJSONObject("activeTargets");
         Iterator<String> keys = activeTargets.keys();
         while (keys.hasNext()) {
           String targetIdString = keys.next();
@@ -918,7 +921,7 @@ private void validateStateExpectations(@Nullable JSONObject expected) throws JSO
     }
 
     // Always validate the we received the expected number of events.
-    validateUserCallbacks(expected);
+    validateUserCallbacks(expectedState);
     // Always validate that the expected limbo docs match the actual limbo docs.
     validateLimboDocs();
     // Always validate that the expected active targets match the actual active targets.
@@ -1013,10 +1016,10 @@ private void runSteps(JSONArray steps, JSONObject config) throws Exception {
       specSetUp(config);
       for (int i = 0; i < steps.length(); ++i) {
         JSONObject step = steps.getJSONObject(i);
-        @Nullable JSONArray expect = step.optJSONArray("expect");
-        step.remove("expect");
-        @Nullable JSONObject stateExpect = step.optJSONObject("stateExpect");
-        step.remove("stateExpect");
+        @Nullable JSONArray expectedSnapshotEvents = step.optJSONArray("expectedSnapshotEvents");
+        step.remove("expectedSnapshotEvents");
+        @Nullable JSONObject expectedState = step.optJSONObject("expectedState");
+        step.remove("expectedState");
         int expectedSnapshotsInSyncEvents = step.optInt("expectedSnapshotsInSyncEvents");
         step.remove("expectedSnapshotsInSyncEvents");
 
@@ -1027,14 +1030,14 @@ private void runSteps(JSONArray steps, JSONObject config) throws Exception {
         backgroundExecutor.execute(() -> drainBackgroundQueue.setResult(null));
         waitFor(drainBackgroundQueue.getTask());
 
-        if (expect != null) {
-          log("      Validating step expectations " + expect);
+        if (expectedSnapshotEvents != null) {
+          log("      Validating expected snapshot events " + expectedSnapshotEvents);
         }
-        validateStepExpectations(expect);
-        if (stateExpect != null) {
-          log("      Validating state expectations " + stateExpect);
+        validateExpectedSnapshotEvents(expectedSnapshotEvents);
+        if (expectedState != null) {
+          log("      Validating state expectations " + expectedState);
         }
-        validateStateExpectations(stateExpect);
+        validateExpectedState(expectedState);
         validateSnapshotsInSyncEvents(expectedSnapshotsInSyncEvents);
         events.clear();
         acknowledgedDocs.clear();
diff --git a/firebase-firestore/src/test/resources/json/collection_spec_test.json b/firebase-firestore/src/test/resources/json/collection_spec_test.json
index 3f7caafd0..dd34d97ca 100644
--- a/firebase-firestore/src/test/resources/json/collection_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/collection_spec_test.json
@@ -17,7 +17,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -68,7 +68,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -114,7 +114,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -134,7 +134,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
diff --git a/firebase-firestore/src/test/resources/json/existence_filter_spec_test.json b/firebase-firestore/src/test/resources/json/existence_filter_spec_test.json
index 9eaf185ca..d1c691351 100644
--- a/firebase-firestore/src/test/resources/json/existence_filter_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/existence_filter_spec_test.json
@@ -17,7 +17,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -68,7 +68,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -128,7 +128,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -159,7 +159,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -205,7 +205,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -251,7 +251,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -282,7 +282,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -308,7 +308,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -341,7 +341,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -392,7 +392,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -427,7 +427,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -440,7 +440,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -452,7 +452,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -510,7 +510,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -543,7 +543,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -605,7 +605,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -655,7 +655,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -667,7 +667,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -725,7 +725,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/2"
           ],
@@ -767,7 +767,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -780,7 +780,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -826,7 +826,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -888,7 +888,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -933,7 +933,7 @@
           },
           "runBackoffTimer": true
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -964,7 +964,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -976,7 +976,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1034,7 +1034,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/2"
           ],
@@ -1076,7 +1076,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -1089,7 +1089,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1135,7 +1135,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1186,7 +1186,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1246,7 +1246,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1271,7 +1271,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1351,7 +1351,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1397,7 +1397,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1448,7 +1448,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -1486,7 +1486,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -1532,7 +1532,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1594,7 +1594,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1644,7 +1644,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1656,7 +1656,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1714,7 +1714,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/2"
           ],
@@ -1747,7 +1747,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1760,7 +1760,7 @@
           },
           "limboDocs": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
diff --git a/firebase-firestore/src/test/resources/json/limbo_spec_test.json b/firebase-firestore/src/test/resources/json/limbo_spec_test.json
index 0b662d500..4f84bc4d2 100644
--- a/firebase-firestore/src/test/resources/json/limbo_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/limbo_spec_test.json
@@ -17,7 +17,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -68,7 +68,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -112,7 +112,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a"
           ],
@@ -135,7 +135,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -166,7 +166,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -179,7 +179,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -225,7 +225,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -276,7 +276,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -320,7 +320,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a"
           ],
@@ -343,7 +343,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -381,7 +381,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -394,7 +394,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -446,7 +446,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -503,7 +503,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -553,7 +553,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a"
           ],
@@ -582,7 +582,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -639,7 +639,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -658,7 +658,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -716,7 +716,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -773,7 +773,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -820,7 +820,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -871,7 +871,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a"
           ],
@@ -914,7 +914,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -977,7 +977,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -1010,7 +1010,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1105,7 +1105,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1167,7 +1167,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1217,7 +1217,7 @@
           "version": 1003,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b"
           ],
@@ -1240,7 +1240,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1271,7 +1271,7 @@
           "version": 1004,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -1284,7 +1284,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1330,7 +1330,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1394,7 +1394,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1442,7 +1442,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1462,7 +1462,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -1481,7 +1481,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1554,7 +1554,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1581,7 +1581,7 @@
             "include": false
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1628,7 +1628,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b"
           ],
@@ -1752,7 +1752,7 @@
           "version": 4000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1771,7 +1771,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "4": {
@@ -1812,7 +1812,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1876,7 +1876,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1924,7 +1924,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1944,7 +1944,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -1963,7 +1963,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2036,7 +2036,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2063,7 +2063,7 @@
             "include": false
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2110,7 +2110,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b"
           ],
@@ -2165,7 +2165,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "4": {
@@ -2185,7 +2185,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2261,7 +2261,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -2279,7 +2279,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2295,7 +2295,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2365,7 +2365,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2421,7 +2421,7 @@
           "version": 1003,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b"
           ],
@@ -2448,7 +2448,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2486,7 +2486,7 @@
           "version": 1004,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -2503,7 +2503,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2545,7 +2545,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -2563,7 +2563,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2579,7 +2579,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2649,7 +2649,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2705,7 +2705,7 @@
           "version": 2000000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b"
           ],
@@ -2732,7 +2732,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -2740,7 +2740,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2756,7 +2756,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -2800,7 +2800,7 @@
           "version": 3000000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b"
           ],
@@ -2845,7 +2845,7 @@
           "version": 4000000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -2858,7 +2858,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2900,7 +2900,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -2914,7 +2914,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2991,7 +2991,7 @@
           "version": 1000000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3063,7 +3063,7 @@
           "version": 2000000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3075,7 +3075,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b",
             "collection/c"
@@ -3117,7 +3117,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 1
@@ -3128,7 +3128,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false,
           "limboDocs": [],
           "activeTargets": {
@@ -3146,7 +3146,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3189,7 +3189,7 @@
           "version": 3000000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b",
             "collection/c"
@@ -3243,7 +3243,7 @@
           "version": 3000000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/c"
           ],
@@ -3270,7 +3270,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3301,7 +3301,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -3345,7 +3345,7 @@
           "version": 5000000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/c"
           ],
@@ -3390,7 +3390,7 @@
           "version": 6000000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -3403,7 +3403,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3461,7 +3461,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -3474,7 +3474,7 @@
         "writeAck": {
           "version": 1001
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -3492,7 +3492,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3504,7 +3504,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3579,7 +3579,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b"
           ],
@@ -3618,7 +3618,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "1": {
               "query": {
@@ -3652,7 +3652,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3704,7 +3704,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -3733,7 +3733,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3759,7 +3759,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
diff --git a/firebase-firestore/src/test/resources/json/limit_spec_test.json b/firebase-firestore/src/test/resources/json/limit_spec_test.json
index 79e7c1d3f..eea16ff9a 100644
--- a/firebase-firestore/src/test/resources/json/limit_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/limit_spec_test.json
@@ -18,7 +18,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -81,7 +81,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -164,7 +164,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -225,7 +225,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -288,7 +288,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -336,7 +336,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -358,7 +358,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -371,7 +371,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -430,7 +430,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -493,7 +493,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -580,7 +580,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a"
           ],
@@ -604,7 +604,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -636,7 +636,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -650,7 +650,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -711,7 +711,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -774,7 +774,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -845,7 +845,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -859,7 +859,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -920,7 +920,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -944,7 +944,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1060,7 +1060,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1167,7 +1167,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -1190,7 +1190,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1280,7 +1280,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1359,7 +1359,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1428,7 +1428,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1448,7 +1448,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -1467,7 +1467,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1518,7 +1518,7 @@
             "matches": false
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1590,7 +1590,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1669,7 +1669,7 @@
           "version": 1003,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1738,7 +1738,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1758,7 +1758,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -1777,7 +1777,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1870,7 +1870,7 @@
           "version": 1004,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1906,7 +1906,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1941,7 +1941,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -1960,7 +1960,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2024,7 +2024,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2097,7 +2097,7 @@
           "version": 1003,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2154,7 +2154,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2180,7 +2180,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -2198,7 +2198,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2290,7 +2290,7 @@
           "version": 1004,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2324,7 +2324,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2358,7 +2358,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -2376,7 +2376,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2439,7 +2439,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2512,7 +2512,7 @@
           "version": 1003,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2569,7 +2569,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2595,7 +2595,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -2613,7 +2613,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2705,7 +2705,7 @@
           "version": 1004,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2739,7 +2739,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2759,7 +2759,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2771,7 +2771,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2857,7 +2857,7 @@
           "version": 1005,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2898,7 +2898,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2924,7 +2924,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2995,7 +2995,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3052,7 +3052,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3099,7 +3099,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -3124,7 +3124,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -3141,7 +3141,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3221,7 +3221,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3265,7 +3265,7 @@
           "version": 1003,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3282,7 +3282,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a"
           ],
@@ -3325,7 +3325,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         }
@@ -3339,7 +3339,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         }
@@ -3359,7 +3359,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3377,7 +3377,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3447,7 +3447,7 @@
           "version": 1004,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3511,7 +3511,7 @@
           "version": 1005,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a"
           ],
@@ -3559,7 +3559,7 @@
           "version": 1006,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -3578,7 +3578,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3649,7 +3649,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3706,7 +3706,7 @@
           "version": 2001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3753,7 +3753,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -3778,7 +3778,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -3795,7 +3795,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3875,7 +3875,7 @@
           "version": 2003,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3933,7 +3933,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -3959,7 +3959,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3977,7 +3977,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4030,7 +4030,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4093,7 +4093,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4140,7 +4140,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4161,7 +4161,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4291,7 +4291,7 @@
           "version": 1005,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4399,7 +4399,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a",
             "collection/b"
@@ -4440,7 +4440,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4472,7 +4472,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/b",
             "collection/c"
@@ -4513,7 +4513,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4601,7 +4601,7 @@
           "version": 2001,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/c",
             "collection/d"
@@ -4642,7 +4642,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4730,7 +4730,7 @@
           "version": 2002,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/d"
           ],
@@ -4762,7 +4762,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4850,7 +4850,7 @@
           "version": 2003,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -4872,7 +4872,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4979,7 +4979,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4996,7 +4996,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5067,7 +5067,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5161,7 +5161,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5239,7 +5239,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5256,7 +5256,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5327,7 +5327,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5381,7 +5381,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5483,7 +5483,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5513,7 +5513,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
diff --git a/firebase-firestore/src/test/resources/json/listen_spec_test.json b/firebase-firestore/src/test/resources/json/listen_spec_test.json
index 00df58771..a4e63ea22 100644
--- a/firebase-firestore/src/test/resources/json/listen_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/listen_spec_test.json
@@ -20,7 +20,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -71,7 +71,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -106,7 +106,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -119,7 +119,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -152,7 +152,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -203,7 +203,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -254,7 +254,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -300,7 +300,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -322,7 +322,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -352,7 +352,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -429,7 +429,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection1",
@@ -501,7 +501,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -513,7 +513,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -559,7 +559,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -610,7 +610,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -638,7 +638,7 @@
       },
       {
         "userDelete": "collection/a",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -668,7 +668,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -720,7 +720,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -782,7 +782,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -818,7 +818,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -839,7 +839,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -886,7 +886,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -937,7 +937,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -970,7 +970,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -997,10 +997,10 @@
             "code": 8
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1033,7 +1033,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1060,10 +1060,10 @@
             "code": 8
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1085,7 +1085,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1124,7 +1124,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1157,7 +1157,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1179,7 +1179,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1259,7 +1259,7 @@
             "code": 8
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -1271,7 +1271,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection1",
@@ -1297,7 +1297,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection2",
@@ -1343,7 +1343,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1394,7 +1394,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1445,7 +1445,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1480,7 +1480,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1500,7 +1500,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1512,7 +1512,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1602,7 +1602,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1637,7 +1637,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1688,7 +1688,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1739,7 +1739,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1767,7 +1767,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         }
@@ -1781,7 +1781,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1793,7 +1793,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1883,7 +1883,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1922,7 +1922,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1980,7 +1980,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2028,7 +2028,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2048,7 +2048,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -2060,7 +2060,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2126,7 +2126,7 @@
           "version": 4000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2162,7 +2162,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2188,7 +2188,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2246,7 +2246,7 @@
           "version": 5000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2280,7 +2280,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2300,7 +2300,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -2312,7 +2312,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2365,7 +2365,7 @@
           "version": 6000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2404,7 +2404,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2462,7 +2462,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2510,7 +2510,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2530,7 +2530,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -2542,7 +2542,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2601,7 +2601,7 @@
           "version": 4000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2637,7 +2637,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2663,7 +2663,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2721,7 +2721,7 @@
           "version": 5000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2755,7 +2755,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2775,7 +2775,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -2814,7 +2814,7 @@
           "version": 6000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2847,7 +2847,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2898,7 +2898,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2926,7 +2926,7 @@
       },
       {
         "userDelete": "collection/a",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2982,7 +2982,7 @@
         "writeAck": {
           "version": 4000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -3042,7 +3042,7 @@
           "version": 5000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3088,7 +3088,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3140,7 +3140,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3168,11 +3168,11 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3187,7 +3187,7 @@
       },
       {
         "enableNetwork": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3239,7 +3239,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3285,7 +3285,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3347,7 +3347,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3393,7 +3393,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -3413,7 +3413,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3425,7 +3425,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3471,7 +3471,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -3484,7 +3484,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -3496,7 +3496,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -3540,7 +3540,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -3575,7 +3575,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -3595,7 +3595,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3607,7 +3607,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3653,7 +3653,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3704,7 +3704,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3739,7 +3739,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -3759,7 +3759,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3771,7 +3771,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3829,7 +3829,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3875,7 +3875,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3926,7 +3926,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3961,7 +3961,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -4007,7 +4007,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4019,7 +4019,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4065,7 +4065,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4108,7 +4108,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -4147,7 +4147,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -4169,7 +4169,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -4182,7 +4182,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4194,7 +4194,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -4240,7 +4240,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4262,10 +4262,10 @@
             "code": 8
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4287,7 +4287,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4326,7 +4326,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4359,7 +4359,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4398,7 +4398,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4445,7 +4445,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4480,7 +4480,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -4500,7 +4500,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4512,7 +4512,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4564,7 +4564,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4603,7 +4603,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4648,7 +4648,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4706,7 +4706,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4758,7 +4758,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -4784,7 +4784,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4802,7 +4802,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4865,7 +4865,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4904,7 +4904,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4955,7 +4955,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4997,7 +4997,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -5017,7 +5017,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5029,7 +5029,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5073,7 +5073,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5108,7 +5108,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5159,7 +5159,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5194,7 +5194,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         }
@@ -5208,7 +5208,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5220,7 +5220,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5264,7 +5264,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5299,7 +5299,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5350,7 +5350,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5385,7 +5385,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         }
@@ -5399,7 +5399,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5411,7 +5411,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5455,7 +5455,7 @@
           "version": 300002000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5504,7 +5504,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5520,7 +5520,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5570,7 +5570,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5619,7 +5619,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5665,7 +5665,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5720,7 +5720,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5760,7 +5760,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5772,7 +5772,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5812,7 +5812,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5824,7 +5824,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5881,7 +5881,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5910,7 +5910,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5939,7 +5939,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5981,7 +5981,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -5999,7 +5999,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6015,7 +6015,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6074,7 +6074,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6142,7 +6142,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6154,7 +6154,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6218,7 +6218,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6247,7 +6247,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6337,7 +6337,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6364,7 +6364,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6380,7 +6380,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6443,7 +6443,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6472,7 +6472,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6531,7 +6531,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6586,7 +6586,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6626,7 +6626,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6638,7 +6638,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6678,7 +6678,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6722,7 +6722,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6758,14 +6758,14 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
         "clientIndex": 1
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
         "clientIndex": 0
@@ -6806,7 +6806,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6822,7 +6822,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6881,7 +6881,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6917,14 +6917,14 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
         "clientIndex": 1
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
         "clientIndex": 0
@@ -6950,7 +6950,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6962,7 +6962,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6991,7 +6991,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7050,7 +7050,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7113,7 +7113,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7129,7 +7129,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7152,14 +7152,14 @@
             "code": 8
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
         "clientIndex": 0
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7209,7 +7209,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7225,7 +7225,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7248,14 +7248,14 @@
             "code": 8
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         },
         "clientIndex": 0
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7278,7 +7278,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7294,7 +7294,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7341,7 +7341,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7391,7 +7391,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7407,7 +7407,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7454,7 +7454,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7474,7 +7474,7 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -7482,7 +7482,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7502,7 +7502,7 @@
       },
       {
         "enableNetwork": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7549,7 +7549,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7589,7 +7589,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7632,7 +7632,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7652,7 +7652,7 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -7667,7 +7667,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7679,7 +7679,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7699,11 +7699,11 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7730,7 +7730,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7742,7 +7742,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7765,7 +7765,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7777,7 +7777,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7817,7 +7817,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7860,7 +7860,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7887,7 +7887,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7899,7 +7899,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7919,11 +7919,11 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7939,7 +7939,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7955,7 +7955,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8003,7 +8003,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8019,7 +8019,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8069,7 +8069,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8085,7 +8085,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8132,7 +8132,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8148,7 +8148,7 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -8188,7 +8188,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8221,7 +8221,7 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": [],
           "isPrimary": true
@@ -8230,7 +8230,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8242,7 +8242,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -8273,7 +8273,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8289,11 +8289,11 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8309,7 +8309,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -8328,7 +8328,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8357,7 +8357,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -8375,7 +8375,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8391,7 +8391,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8450,7 +8450,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8490,7 +8490,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8502,7 +8502,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8535,7 +8535,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -8547,7 +8547,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -8603,7 +8603,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8632,7 +8632,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8674,7 +8674,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -8688,7 +8688,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8743,7 +8743,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8787,7 +8787,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8799,7 +8799,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8832,7 +8832,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -8844,7 +8844,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -8904,7 +8904,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8946,7 +8946,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -8960,7 +8960,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9015,7 +9015,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9055,7 +9055,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9067,7 +9067,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9098,7 +9098,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -9154,7 +9154,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9215,7 +9215,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9248,10 +9248,10 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9304,7 +9304,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 1
@@ -9322,7 +9322,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9338,7 +9338,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9397,7 +9397,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9432,7 +9432,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -9453,7 +9453,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -9507,7 +9507,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9542,7 +9542,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -9602,7 +9602,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9644,7 +9644,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -9662,7 +9662,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9678,7 +9678,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9700,7 +9700,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 1
@@ -9754,7 +9754,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9809,7 +9809,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9851,7 +9851,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -9869,7 +9869,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9885,7 +9885,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9944,7 +9944,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9977,7 +9977,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -9985,7 +9985,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -10045,7 +10045,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10098,7 +10098,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10141,7 +10141,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10163,7 +10163,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -10223,7 +10223,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -10231,14 +10231,14 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -10251,7 +10251,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10340,7 +10340,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10391,7 +10391,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10428,7 +10428,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10485,7 +10485,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -10493,7 +10493,7 @@
             "rejectedDocs": []
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10540,7 +10540,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10591,7 +10591,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10626,7 +10626,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10646,7 +10646,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -10710,7 +10710,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/a",
@@ -10734,7 +10734,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10815,7 +10815,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -10823,7 +10823,7 @@
             "rejectedDocs": []
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10893,7 +10893,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10944,7 +10944,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10981,7 +10981,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -11023,7 +11023,7 @@
             "v": 3
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -11060,7 +11060,7 @@
             "v": 4
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
diff --git a/firebase-firestore/src/test/resources/json/offline_spec_test.json b/firebase-firestore/src/test/resources/json/offline_spec_test.json
index 6dc71cfea..83902862e 100644
--- a/firebase-firestore/src/test/resources/json/offline_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/offline_spec_test.json
@@ -17,7 +17,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -38,7 +38,7 @@
           },
           "runBackoffTimer": true
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -89,7 +89,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -124,7 +124,7 @@
           },
           "runBackoffTimer": true
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -178,7 +178,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -199,7 +199,7 @@
           },
           "runBackoffTimer": true
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -221,7 +221,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -243,7 +243,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -264,7 +264,7 @@
           },
           "runBackoffTimer": true
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -297,7 +297,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -348,7 +348,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -382,7 +382,7 @@
           },
           "runBackoffTimer": true
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -403,7 +403,7 @@
           },
           "runBackoffTimer": true
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -442,7 +442,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -475,7 +475,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -526,7 +526,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -570,7 +570,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [
             "collection/a"
           ],
@@ -593,7 +593,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -614,7 +614,7 @@
           },
           "runBackoffTimer": true
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "1": {
               "query": {
@@ -697,7 +697,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -722,7 +722,7 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "limboDocs": [],
           "activeTargets": {
             "2": {
@@ -756,7 +756,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -771,7 +771,7 @@
       },
       {
         "runTimer": "online_state_timeout",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -840,7 +840,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -877,7 +877,7 @@
           },
           "runBackoffTimer": true
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -892,7 +892,7 @@
       },
       {
         "runTimer": "online_state_timeout",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -925,7 +925,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -946,7 +946,7 @@
           },
           "runBackoffTimer": true
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -968,7 +968,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -988,7 +988,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection2",
@@ -1021,7 +1021,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1036,7 +1036,7 @@
       },
       {
         "runTimer": "online_state_timeout",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1058,7 +1058,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1078,7 +1078,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection2",
@@ -1106,7 +1106,7 @@
     "steps": [
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         }
@@ -1120,7 +1120,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1132,7 +1132,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1154,7 +1154,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1167,7 +1167,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -1179,7 +1179,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1201,7 +1201,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       }
diff --git a/firebase-firestore/src/test/resources/json/orderby_spec_test.json b/firebase-firestore/src/test/resources/json/orderby_spec_test.json
index 90246bb6b..2ca80ced5 100644
--- a/firebase-firestore/src/test/resources/json/orderby_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/orderby_spec_test.json
@@ -47,7 +47,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -64,7 +64,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -134,7 +134,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -191,7 +191,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -260,7 +260,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -318,7 +318,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -343,7 +343,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -360,7 +360,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -430,7 +430,7 @@
           "version": 1002,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
diff --git a/firebase-firestore/src/test/resources/json/perf_spec_test.json b/firebase-firestore/src/test/resources/json/perf_spec_test.json
index e821e3c71..2c770fc9f 100644
--- a/firebase-firestore/src/test/resources/json/perf_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/perf_spec_test.json
@@ -22,7 +22,7 @@
         "writeAck": {
           "version": 0
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -43,7 +43,7 @@
         "writeAck": {
           "version": 1
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -64,7 +64,7 @@
         "writeAck": {
           "version": 2
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -85,7 +85,7 @@
         "writeAck": {
           "version": 3
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -106,7 +106,7 @@
         "writeAck": {
           "version": 4
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -127,7 +127,7 @@
         "writeAck": {
           "version": 5
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -148,7 +148,7 @@
         "writeAck": {
           "version": 6
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -169,7 +169,7 @@
         "writeAck": {
           "version": 7
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -190,7 +190,7 @@
         "writeAck": {
           "version": 8
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -211,7 +211,7 @@
         "writeAck": {
           "version": 9
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/{i}"
@@ -242,7 +242,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -262,7 +262,7 @@
             "doc": 0
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/0",
@@ -292,7 +292,7 @@
         "writeAck": {
           "version": 2
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/0"
@@ -339,7 +339,7 @@
           "version": 3,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/0",
@@ -374,7 +374,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -394,7 +394,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -414,7 +414,7 @@
             "doc": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/1",
@@ -444,7 +444,7 @@
         "writeAck": {
           "version": 4
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/1"
@@ -491,7 +491,7 @@
           "version": 5,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/1",
@@ -526,7 +526,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -546,7 +546,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -566,7 +566,7 @@
             "doc": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/2",
@@ -596,7 +596,7 @@
         "writeAck": {
           "version": 6
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/2"
@@ -643,7 +643,7 @@
           "version": 7,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/2",
@@ -678,7 +678,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -698,7 +698,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -718,7 +718,7 @@
             "doc": 3
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/3",
@@ -748,7 +748,7 @@
         "writeAck": {
           "version": 8
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/3"
@@ -795,7 +795,7 @@
           "version": 9,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/3",
@@ -830,7 +830,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -850,7 +850,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -870,7 +870,7 @@
             "doc": 4
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/4",
@@ -900,7 +900,7 @@
         "writeAck": {
           "version": 10
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/4"
@@ -947,7 +947,7 @@
           "version": 11,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/4",
@@ -982,7 +982,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1002,7 +1002,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -1022,7 +1022,7 @@
             "doc": 5
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/5",
@@ -1052,7 +1052,7 @@
         "writeAck": {
           "version": 12
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/5"
@@ -1099,7 +1099,7 @@
           "version": 13,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/5",
@@ -1134,7 +1134,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1154,7 +1154,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -1174,7 +1174,7 @@
             "doc": 6
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/6",
@@ -1204,7 +1204,7 @@
         "writeAck": {
           "version": 14
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/6"
@@ -1251,7 +1251,7 @@
           "version": 15,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/6",
@@ -1286,7 +1286,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1306,7 +1306,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -1326,7 +1326,7 @@
             "doc": 7
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/7",
@@ -1356,7 +1356,7 @@
         "writeAck": {
           "version": 16
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/7"
@@ -1403,7 +1403,7 @@
           "version": 17,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/7",
@@ -1438,7 +1438,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1458,7 +1458,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -1478,7 +1478,7 @@
             "doc": 8
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/8",
@@ -1508,7 +1508,7 @@
         "writeAck": {
           "version": 18
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/8"
@@ -1555,7 +1555,7 @@
           "version": 19,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/8",
@@ -1590,7 +1590,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -1610,7 +1610,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -1630,7 +1630,7 @@
             "doc": 9
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/9",
@@ -1660,7 +1660,7 @@
         "writeAck": {
           "version": 20
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/9"
@@ -1707,7 +1707,7 @@
           "version": 21,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/9",
@@ -1742,7 +1742,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -2580,7 +2580,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -2597,7 +2597,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3731,7 +3731,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -3749,7 +3749,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3766,7 +3766,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4900,7 +4900,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -4918,7 +4918,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4935,7 +4935,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -6069,7 +6069,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -6087,7 +6087,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6104,7 +6104,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7238,7 +7238,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -7256,7 +7256,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7273,7 +7273,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8407,7 +8407,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -8425,7 +8425,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8442,7 +8442,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9576,7 +9576,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -9594,7 +9594,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9611,7 +9611,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10745,7 +10745,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -10763,7 +10763,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10780,7 +10780,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -11914,7 +11914,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -11932,7 +11932,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -11949,7 +11949,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -13083,7 +13083,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -13101,7 +13101,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -13118,7 +13118,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -14252,7 +14252,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       }
@@ -14289,7 +14289,7 @@
         "writeAck": {
           "version": 1
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14310,7 +14310,7 @@
         "writeAck": {
           "version": 2
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14331,7 +14331,7 @@
         "writeAck": {
           "version": 3
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14352,7 +14352,7 @@
         "writeAck": {
           "version": 4
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14373,7 +14373,7 @@
         "writeAck": {
           "version": 5
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14394,7 +14394,7 @@
         "writeAck": {
           "version": 6
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14415,7 +14415,7 @@
         "writeAck": {
           "version": 7
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14436,7 +14436,7 @@
         "writeAck": {
           "version": 8
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14457,7 +14457,7 @@
         "writeAck": {
           "version": 9
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14478,7 +14478,7 @@
         "writeAck": {
           "version": 10
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14509,7 +14509,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -14529,7 +14529,7 @@
             "v": 0
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14559,7 +14559,7 @@
         "writeAck": {
           "version": 2
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14606,7 +14606,7 @@
           "version": 3,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14639,7 +14639,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14669,7 +14669,7 @@
         "writeAck": {
           "version": 4
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14703,7 +14703,7 @@
           "version": 5,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14736,7 +14736,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14766,7 +14766,7 @@
         "writeAck": {
           "version": 6
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14800,7 +14800,7 @@
           "version": 7,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14833,7 +14833,7 @@
             "v": 3
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14863,7 +14863,7 @@
         "writeAck": {
           "version": 8
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14897,7 +14897,7 @@
           "version": 9,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14930,7 +14930,7 @@
             "v": 4
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -14960,7 +14960,7 @@
         "writeAck": {
           "version": 10
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -14994,7 +14994,7 @@
           "version": 11,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15027,7 +15027,7 @@
             "v": 5
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15057,7 +15057,7 @@
         "writeAck": {
           "version": 12
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -15091,7 +15091,7 @@
           "version": 13,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15124,7 +15124,7 @@
             "v": 6
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15154,7 +15154,7 @@
         "writeAck": {
           "version": 14
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -15188,7 +15188,7 @@
           "version": 15,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15221,7 +15221,7 @@
             "v": 7
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15251,7 +15251,7 @@
         "writeAck": {
           "version": 16
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -15285,7 +15285,7 @@
           "version": 17,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15318,7 +15318,7 @@
             "v": 8
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15348,7 +15348,7 @@
         "writeAck": {
           "version": 18
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -15382,7 +15382,7 @@
           "version": 19,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15415,7 +15415,7 @@
             "v": 9
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15445,7 +15445,7 @@
         "writeAck": {
           "version": 20
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -15479,7 +15479,7 @@
           "version": 21,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15512,7 +15512,7 @@
             "v": 10
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15542,7 +15542,7 @@
         "writeAck": {
           "version": 22
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -15576,7 +15576,7 @@
           "version": 23,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -15629,7 +15629,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -15673,7 +15673,7 @@
           "version": 1,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -16805,7 +16805,7 @@
           "version": 102,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -19039,7 +19039,7 @@
           "version": 203,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -21273,7 +21273,7 @@
           "version": 304,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -23507,7 +23507,7 @@
           "version": 405,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -25741,7 +25741,7 @@
           "version": 506,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -27975,7 +27975,7 @@
           "version": 607,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -30209,7 +30209,7 @@
           "version": 708,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -32443,7 +32443,7 @@
           "version": 809,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -34677,7 +34677,7 @@
           "version": 910,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -36911,7 +36911,7 @@
           "version": 1011,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -38058,7 +38058,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -39203,7 +39203,7 @@
           "version": 102,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/1/coll",
@@ -40337,7 +40337,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -40362,7 +40362,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -40379,7 +40379,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/1/coll",
@@ -41525,7 +41525,7 @@
           "version": 103,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/1/coll",
@@ -41557,7 +41557,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -41582,7 +41582,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -42727,7 +42727,7 @@
           "version": 204,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/2/coll",
@@ -43861,7 +43861,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -43886,7 +43886,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -43903,7 +43903,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/2/coll",
@@ -45049,7 +45049,7 @@
           "version": 205,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/2/coll",
@@ -45081,7 +45081,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -45106,7 +45106,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -46251,7 +46251,7 @@
           "version": 306,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/3/coll",
@@ -47385,7 +47385,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -47410,7 +47410,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -47427,7 +47427,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/3/coll",
@@ -48573,7 +48573,7 @@
           "version": 307,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/3/coll",
@@ -48605,7 +48605,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -48630,7 +48630,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -49775,7 +49775,7 @@
           "version": 408,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/4/coll",
@@ -50909,7 +50909,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -50934,7 +50934,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -50951,7 +50951,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/4/coll",
@@ -52097,7 +52097,7 @@
           "version": 409,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/4/coll",
@@ -52129,7 +52129,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -52154,7 +52154,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -53299,7 +53299,7 @@
           "version": 510,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/5/coll",
@@ -54433,7 +54433,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -54458,7 +54458,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -54475,7 +54475,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/5/coll",
@@ -55621,7 +55621,7 @@
           "version": 511,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/5/coll",
@@ -55653,7 +55653,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -55678,7 +55678,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -56823,7 +56823,7 @@
           "version": 612,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/6/coll",
@@ -57957,7 +57957,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -57982,7 +57982,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -57999,7 +57999,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/6/coll",
@@ -59145,7 +59145,7 @@
           "version": 613,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/6/coll",
@@ -59177,7 +59177,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -59202,7 +59202,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -60347,7 +60347,7 @@
           "version": 714,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/7/coll",
@@ -61481,7 +61481,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -61506,7 +61506,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -61523,7 +61523,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/7/coll",
@@ -62669,7 +62669,7 @@
           "version": 715,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/7/coll",
@@ -62701,7 +62701,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -62726,7 +62726,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -63871,7 +63871,7 @@
           "version": 816,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/8/coll",
@@ -65005,7 +65005,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -65030,7 +65030,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -65047,7 +65047,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/8/coll",
@@ -66193,7 +66193,7 @@
           "version": 817,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/8/coll",
@@ -66225,7 +66225,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -66250,7 +66250,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -67395,7 +67395,7 @@
           "version": 918,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/9/coll",
@@ -68529,7 +68529,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -68554,7 +68554,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -68571,7 +68571,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/9/coll",
@@ -69717,7 +69717,7 @@
           "version": 919,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/9/coll",
@@ -69749,7 +69749,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -69774,7 +69774,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -70919,7 +70919,7 @@
           "version": 1020,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/10/coll",
@@ -72053,7 +72053,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -72078,7 +72078,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -72095,7 +72095,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/10/coll",
@@ -73241,7 +73241,7 @@
           "version": 1021,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/10/coll",
@@ -73273,7 +73273,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -73312,7 +73312,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -73351,7 +73351,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -73404,7 +73404,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -73471,7 +73471,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -73552,7 +73552,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -73647,7 +73647,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -73756,7 +73756,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -73879,7 +73879,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -74016,7 +74016,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -74167,7 +74167,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -74332,7 +74332,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -74511,7 +74511,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -74704,7 +74704,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -74911,7 +74911,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -75132,7 +75132,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -75367,7 +75367,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -75616,7 +75616,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -75879,7 +75879,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -76156,7 +76156,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -76447,7 +76447,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -76752,7 +76752,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -77071,7 +77071,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -77404,7 +77404,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -77751,7 +77751,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -78112,7 +78112,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -78521,7 +78521,7 @@
           "version": 3,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/1/coll",
@@ -79264,7 +79264,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -79627,7 +79627,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -79976,7 +79976,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -80311,7 +80311,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -80632,7 +80632,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -80939,7 +80939,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -81232,7 +81232,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -81511,7 +81511,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -81776,7 +81776,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -82027,7 +82027,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -82264,7 +82264,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "24": {
               "query": {
@@ -82487,7 +82487,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "26": {
               "query": {
@@ -82696,7 +82696,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "28": {
               "query": {
@@ -82891,7 +82891,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "30": {
               "query": {
@@ -83072,7 +83072,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "32": {
               "query": {
@@ -83239,7 +83239,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "34": {
               "query": {
@@ -83392,7 +83392,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "36": {
               "query": {
@@ -83531,7 +83531,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "38": {
               "query": {
@@ -83656,7 +83656,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "40": {
               "query": {
@@ -83767,7 +83767,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "42": {
               "query": {
@@ -83864,7 +83864,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "44": {
               "query": {
@@ -83947,7 +83947,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "46": {
               "query": {
@@ -84016,7 +84016,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "48": {
               "query": {
@@ -84071,7 +84071,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "50": {
               "query": {
@@ -84112,7 +84112,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -84138,7 +84138,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84177,7 +84177,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84230,7 +84230,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84297,7 +84297,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84378,7 +84378,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84473,7 +84473,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84582,7 +84582,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84705,7 +84705,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84842,7 +84842,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -84993,7 +84993,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -85158,7 +85158,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -85337,7 +85337,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -85530,7 +85530,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -85737,7 +85737,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -85958,7 +85958,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -86193,7 +86193,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -86442,7 +86442,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -86705,7 +86705,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -86982,7 +86982,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -87273,7 +87273,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -87578,7 +87578,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -87897,7 +87897,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -88230,7 +88230,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -88577,7 +88577,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -88938,7 +88938,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "52": {
               "query": {
@@ -89347,7 +89347,7 @@
           "version": 5,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/2/coll",
@@ -90090,7 +90090,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "54": {
               "query": {
@@ -90453,7 +90453,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "56": {
               "query": {
@@ -90802,7 +90802,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "58": {
               "query": {
@@ -91137,7 +91137,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "60": {
               "query": {
@@ -91458,7 +91458,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "62": {
               "query": {
@@ -91765,7 +91765,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "64": {
               "query": {
@@ -92058,7 +92058,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "66": {
               "query": {
@@ -92337,7 +92337,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "68": {
               "query": {
@@ -92602,7 +92602,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "70": {
               "query": {
@@ -92853,7 +92853,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "72": {
               "query": {
@@ -93090,7 +93090,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "74": {
               "query": {
@@ -93313,7 +93313,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "76": {
               "query": {
@@ -93522,7 +93522,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "78": {
               "query": {
@@ -93717,7 +93717,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "80": {
               "query": {
@@ -93898,7 +93898,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "82": {
               "query": {
@@ -94065,7 +94065,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "84": {
               "query": {
@@ -94218,7 +94218,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "86": {
               "query": {
@@ -94357,7 +94357,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "88": {
               "query": {
@@ -94482,7 +94482,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "90": {
               "query": {
@@ -94593,7 +94593,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "92": {
               "query": {
@@ -94690,7 +94690,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "94": {
               "query": {
@@ -94773,7 +94773,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "96": {
               "query": {
@@ -94842,7 +94842,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "98": {
               "query": {
@@ -94897,7 +94897,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "100": {
               "query": {
@@ -94938,7 +94938,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -94964,7 +94964,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95003,7 +95003,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95056,7 +95056,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95123,7 +95123,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95204,7 +95204,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95299,7 +95299,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95408,7 +95408,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95531,7 +95531,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95668,7 +95668,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95819,7 +95819,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -95984,7 +95984,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -96163,7 +96163,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -96356,7 +96356,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -96563,7 +96563,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -96784,7 +96784,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -97019,7 +97019,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -97268,7 +97268,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -97531,7 +97531,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -97808,7 +97808,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -98099,7 +98099,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -98404,7 +98404,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -98723,7 +98723,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -99056,7 +99056,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -99403,7 +99403,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -99764,7 +99764,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "102": {
               "query": {
@@ -100173,7 +100173,7 @@
           "version": 7,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/3/coll",
@@ -100916,7 +100916,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "104": {
               "query": {
@@ -101279,7 +101279,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "106": {
               "query": {
@@ -101628,7 +101628,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "108": {
               "query": {
@@ -101963,7 +101963,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "110": {
               "query": {
@@ -102284,7 +102284,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "112": {
               "query": {
@@ -102591,7 +102591,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "114": {
               "query": {
@@ -102884,7 +102884,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "116": {
               "query": {
@@ -103163,7 +103163,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "118": {
               "query": {
@@ -103428,7 +103428,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "120": {
               "query": {
@@ -103679,7 +103679,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "122": {
               "query": {
@@ -103916,7 +103916,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "124": {
               "query": {
@@ -104139,7 +104139,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "126": {
               "query": {
@@ -104348,7 +104348,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "128": {
               "query": {
@@ -104543,7 +104543,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "130": {
               "query": {
@@ -104724,7 +104724,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "132": {
               "query": {
@@ -104891,7 +104891,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "134": {
               "query": {
@@ -105044,7 +105044,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "136": {
               "query": {
@@ -105183,7 +105183,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "138": {
               "query": {
@@ -105308,7 +105308,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "140": {
               "query": {
@@ -105419,7 +105419,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "142": {
               "query": {
@@ -105516,7 +105516,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "144": {
               "query": {
@@ -105599,7 +105599,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "146": {
               "query": {
@@ -105668,7 +105668,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "148": {
               "query": {
@@ -105723,7 +105723,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "150": {
               "query": {
@@ -105764,7 +105764,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -105790,7 +105790,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -105829,7 +105829,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -105882,7 +105882,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -105949,7 +105949,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -106030,7 +106030,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -106125,7 +106125,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -106234,7 +106234,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -106357,7 +106357,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -106494,7 +106494,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -106645,7 +106645,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -106810,7 +106810,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -106989,7 +106989,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -107182,7 +107182,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -107389,7 +107389,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -107610,7 +107610,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -107845,7 +107845,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -108094,7 +108094,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -108357,7 +108357,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -108634,7 +108634,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -108925,7 +108925,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -109230,7 +109230,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -109549,7 +109549,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -109882,7 +109882,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -110229,7 +110229,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -110590,7 +110590,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "152": {
               "query": {
@@ -110999,7 +110999,7 @@
           "version": 9,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/4/coll",
@@ -111742,7 +111742,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "154": {
               "query": {
@@ -112105,7 +112105,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "156": {
               "query": {
@@ -112454,7 +112454,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "158": {
               "query": {
@@ -112789,7 +112789,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "160": {
               "query": {
@@ -113110,7 +113110,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "162": {
               "query": {
@@ -113417,7 +113417,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "164": {
               "query": {
@@ -113710,7 +113710,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "166": {
               "query": {
@@ -113989,7 +113989,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "168": {
               "query": {
@@ -114254,7 +114254,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "170": {
               "query": {
@@ -114505,7 +114505,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "172": {
               "query": {
@@ -114742,7 +114742,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "174": {
               "query": {
@@ -114965,7 +114965,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "176": {
               "query": {
@@ -115174,7 +115174,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "178": {
               "query": {
@@ -115369,7 +115369,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "180": {
               "query": {
@@ -115550,7 +115550,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "182": {
               "query": {
@@ -115717,7 +115717,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "184": {
               "query": {
@@ -115870,7 +115870,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "186": {
               "query": {
@@ -116009,7 +116009,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "188": {
               "query": {
@@ -116134,7 +116134,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "190": {
               "query": {
@@ -116245,7 +116245,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "192": {
               "query": {
@@ -116342,7 +116342,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "194": {
               "query": {
@@ -116425,7 +116425,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "196": {
               "query": {
@@ -116494,7 +116494,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "198": {
               "query": {
@@ -116549,7 +116549,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "200": {
               "query": {
@@ -116590,7 +116590,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -116616,7 +116616,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -116655,7 +116655,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -116708,7 +116708,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -116775,7 +116775,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -116856,7 +116856,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -116951,7 +116951,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -117060,7 +117060,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -117183,7 +117183,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -117320,7 +117320,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -117471,7 +117471,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -117636,7 +117636,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -117815,7 +117815,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -118008,7 +118008,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -118215,7 +118215,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -118436,7 +118436,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -118671,7 +118671,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -118920,7 +118920,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -119183,7 +119183,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -119460,7 +119460,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -119751,7 +119751,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -120056,7 +120056,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -120375,7 +120375,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -120708,7 +120708,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -121055,7 +121055,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -121416,7 +121416,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "202": {
               "query": {
@@ -121825,7 +121825,7 @@
           "version": 11,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/5/coll",
@@ -122568,7 +122568,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "204": {
               "query": {
@@ -122931,7 +122931,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "206": {
               "query": {
@@ -123280,7 +123280,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "208": {
               "query": {
@@ -123615,7 +123615,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "210": {
               "query": {
@@ -123936,7 +123936,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "212": {
               "query": {
@@ -124243,7 +124243,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "214": {
               "query": {
@@ -124536,7 +124536,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "216": {
               "query": {
@@ -124815,7 +124815,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "218": {
               "query": {
@@ -125080,7 +125080,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "220": {
               "query": {
@@ -125331,7 +125331,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "222": {
               "query": {
@@ -125568,7 +125568,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "224": {
               "query": {
@@ -125791,7 +125791,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "226": {
               "query": {
@@ -126000,7 +126000,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "228": {
               "query": {
@@ -126195,7 +126195,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "230": {
               "query": {
@@ -126376,7 +126376,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "232": {
               "query": {
@@ -126543,7 +126543,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "234": {
               "query": {
@@ -126696,7 +126696,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "236": {
               "query": {
@@ -126835,7 +126835,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "238": {
               "query": {
@@ -126960,7 +126960,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "240": {
               "query": {
@@ -127071,7 +127071,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "242": {
               "query": {
@@ -127168,7 +127168,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "244": {
               "query": {
@@ -127251,7 +127251,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "246": {
               "query": {
@@ -127320,7 +127320,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "248": {
               "query": {
@@ -127375,7 +127375,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "250": {
               "query": {
@@ -127416,7 +127416,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -127442,7 +127442,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -127481,7 +127481,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -127534,7 +127534,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -127601,7 +127601,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -127682,7 +127682,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -127777,7 +127777,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -127886,7 +127886,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -128009,7 +128009,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -128146,7 +128146,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -128297,7 +128297,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -128462,7 +128462,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -128641,7 +128641,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -128834,7 +128834,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -129041,7 +129041,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -129262,7 +129262,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -129497,7 +129497,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -129746,7 +129746,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -130009,7 +130009,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -130286,7 +130286,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -130577,7 +130577,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -130882,7 +130882,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -131201,7 +131201,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -131534,7 +131534,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -131881,7 +131881,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -132242,7 +132242,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "252": {
               "query": {
@@ -132651,7 +132651,7 @@
           "version": 13,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/6/coll",
@@ -133394,7 +133394,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "254": {
               "query": {
@@ -133757,7 +133757,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "256": {
               "query": {
@@ -134106,7 +134106,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "258": {
               "query": {
@@ -134441,7 +134441,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "260": {
               "query": {
@@ -134762,7 +134762,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "262": {
               "query": {
@@ -135069,7 +135069,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "264": {
               "query": {
@@ -135362,7 +135362,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "266": {
               "query": {
@@ -135641,7 +135641,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "268": {
               "query": {
@@ -135906,7 +135906,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "270": {
               "query": {
@@ -136157,7 +136157,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "272": {
               "query": {
@@ -136394,7 +136394,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "274": {
               "query": {
@@ -136617,7 +136617,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "276": {
               "query": {
@@ -136826,7 +136826,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "278": {
               "query": {
@@ -137021,7 +137021,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "280": {
               "query": {
@@ -137202,7 +137202,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "282": {
               "query": {
@@ -137369,7 +137369,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "284": {
               "query": {
@@ -137522,7 +137522,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "286": {
               "query": {
@@ -137661,7 +137661,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "288": {
               "query": {
@@ -137786,7 +137786,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "290": {
               "query": {
@@ -137897,7 +137897,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "292": {
               "query": {
@@ -137994,7 +137994,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "294": {
               "query": {
@@ -138077,7 +138077,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "296": {
               "query": {
@@ -138146,7 +138146,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "298": {
               "query": {
@@ -138201,7 +138201,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "300": {
               "query": {
@@ -138242,7 +138242,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -138268,7 +138268,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -138307,7 +138307,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -138360,7 +138360,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -138427,7 +138427,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -138508,7 +138508,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -138603,7 +138603,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -138712,7 +138712,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -138835,7 +138835,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -138972,7 +138972,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -139123,7 +139123,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -139288,7 +139288,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -139467,7 +139467,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -139660,7 +139660,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -139867,7 +139867,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -140088,7 +140088,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -140323,7 +140323,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -140572,7 +140572,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -140835,7 +140835,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -141112,7 +141112,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -141403,7 +141403,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -141708,7 +141708,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -142027,7 +142027,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -142360,7 +142360,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -142707,7 +142707,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -143068,7 +143068,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "302": {
               "query": {
@@ -143477,7 +143477,7 @@
           "version": 15,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/7/coll",
@@ -144220,7 +144220,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "304": {
               "query": {
@@ -144583,7 +144583,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "306": {
               "query": {
@@ -144932,7 +144932,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "308": {
               "query": {
@@ -145267,7 +145267,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "310": {
               "query": {
@@ -145588,7 +145588,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "312": {
               "query": {
@@ -145895,7 +145895,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "314": {
               "query": {
@@ -146188,7 +146188,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "316": {
               "query": {
@@ -146467,7 +146467,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "318": {
               "query": {
@@ -146732,7 +146732,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "320": {
               "query": {
@@ -146983,7 +146983,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "322": {
               "query": {
@@ -147220,7 +147220,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "324": {
               "query": {
@@ -147443,7 +147443,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "326": {
               "query": {
@@ -147652,7 +147652,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "328": {
               "query": {
@@ -147847,7 +147847,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "330": {
               "query": {
@@ -148028,7 +148028,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "332": {
               "query": {
@@ -148195,7 +148195,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "334": {
               "query": {
@@ -148348,7 +148348,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "336": {
               "query": {
@@ -148487,7 +148487,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "338": {
               "query": {
@@ -148612,7 +148612,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "340": {
               "query": {
@@ -148723,7 +148723,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "342": {
               "query": {
@@ -148820,7 +148820,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "344": {
               "query": {
@@ -148903,7 +148903,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "346": {
               "query": {
@@ -148972,7 +148972,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "348": {
               "query": {
@@ -149027,7 +149027,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "350": {
               "query": {
@@ -149068,7 +149068,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -149094,7 +149094,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149133,7 +149133,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149186,7 +149186,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149253,7 +149253,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149334,7 +149334,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149429,7 +149429,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149538,7 +149538,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149661,7 +149661,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149798,7 +149798,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -149949,7 +149949,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -150114,7 +150114,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -150293,7 +150293,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -150486,7 +150486,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -150693,7 +150693,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -150914,7 +150914,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -151149,7 +151149,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -151398,7 +151398,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -151661,7 +151661,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -151938,7 +151938,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -152229,7 +152229,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -152534,7 +152534,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -152853,7 +152853,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -153186,7 +153186,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -153533,7 +153533,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -153894,7 +153894,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "352": {
               "query": {
@@ -154303,7 +154303,7 @@
           "version": 17,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/8/coll",
@@ -155046,7 +155046,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "354": {
               "query": {
@@ -155409,7 +155409,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "356": {
               "query": {
@@ -155758,7 +155758,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "358": {
               "query": {
@@ -156093,7 +156093,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "360": {
               "query": {
@@ -156414,7 +156414,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "362": {
               "query": {
@@ -156721,7 +156721,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "364": {
               "query": {
@@ -157014,7 +157014,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "366": {
               "query": {
@@ -157293,7 +157293,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "368": {
               "query": {
@@ -157558,7 +157558,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "370": {
               "query": {
@@ -157809,7 +157809,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "372": {
               "query": {
@@ -158046,7 +158046,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "374": {
               "query": {
@@ -158269,7 +158269,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "376": {
               "query": {
@@ -158478,7 +158478,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "378": {
               "query": {
@@ -158673,7 +158673,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "380": {
               "query": {
@@ -158854,7 +158854,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "382": {
               "query": {
@@ -159021,7 +159021,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "384": {
               "query": {
@@ -159174,7 +159174,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "386": {
               "query": {
@@ -159313,7 +159313,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "388": {
               "query": {
@@ -159438,7 +159438,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "390": {
               "query": {
@@ -159549,7 +159549,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "392": {
               "query": {
@@ -159646,7 +159646,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "394": {
               "query": {
@@ -159729,7 +159729,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "396": {
               "query": {
@@ -159798,7 +159798,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "398": {
               "query": {
@@ -159853,7 +159853,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "400": {
               "query": {
@@ -159894,7 +159894,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -159920,7 +159920,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -159959,7 +159959,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160012,7 +160012,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160079,7 +160079,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160160,7 +160160,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160255,7 +160255,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160364,7 +160364,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160487,7 +160487,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160624,7 +160624,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160775,7 +160775,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -160940,7 +160940,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -161119,7 +161119,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -161312,7 +161312,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -161519,7 +161519,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -161740,7 +161740,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -161975,7 +161975,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -162224,7 +162224,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -162487,7 +162487,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -162764,7 +162764,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -163055,7 +163055,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -163360,7 +163360,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -163679,7 +163679,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -164012,7 +164012,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -164359,7 +164359,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -164720,7 +164720,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "402": {
               "query": {
@@ -165129,7 +165129,7 @@
           "version": 19,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/9/coll",
@@ -165872,7 +165872,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "404": {
               "query": {
@@ -166235,7 +166235,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "406": {
               "query": {
@@ -166584,7 +166584,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "408": {
               "query": {
@@ -166919,7 +166919,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "410": {
               "query": {
@@ -167240,7 +167240,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "412": {
               "query": {
@@ -167547,7 +167547,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "414": {
               "query": {
@@ -167840,7 +167840,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "416": {
               "query": {
@@ -168119,7 +168119,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "418": {
               "query": {
@@ -168384,7 +168384,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "420": {
               "query": {
@@ -168635,7 +168635,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "422": {
               "query": {
@@ -168872,7 +168872,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "424": {
               "query": {
@@ -169095,7 +169095,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "426": {
               "query": {
@@ -169304,7 +169304,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "428": {
               "query": {
@@ -169499,7 +169499,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "430": {
               "query": {
@@ -169680,7 +169680,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "432": {
               "query": {
@@ -169847,7 +169847,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "434": {
               "query": {
@@ -170000,7 +170000,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "436": {
               "query": {
@@ -170139,7 +170139,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "438": {
               "query": {
@@ -170264,7 +170264,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "440": {
               "query": {
@@ -170375,7 +170375,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "442": {
               "query": {
@@ -170472,7 +170472,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "444": {
               "query": {
@@ -170555,7 +170555,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "446": {
               "query": {
@@ -170624,7 +170624,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "448": {
               "query": {
@@ -170679,7 +170679,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "450": {
               "query": {
@@ -170720,7 +170720,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -170746,7 +170746,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -170785,7 +170785,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -170838,7 +170838,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -170905,7 +170905,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -170986,7 +170986,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -171081,7 +171081,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -171190,7 +171190,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -171313,7 +171313,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -171450,7 +171450,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -171601,7 +171601,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -171766,7 +171766,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -171945,7 +171945,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -172138,7 +172138,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -172345,7 +172345,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -172566,7 +172566,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -172801,7 +172801,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -173050,7 +173050,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -173313,7 +173313,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -173590,7 +173590,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -173881,7 +173881,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -174186,7 +174186,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -174505,7 +174505,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -174838,7 +174838,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -175185,7 +175185,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -175546,7 +175546,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "452": {
               "query": {
@@ -175955,7 +175955,7 @@
           "version": 21,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/10/coll",
@@ -176698,7 +176698,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "454": {
               "query": {
@@ -177061,7 +177061,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "456": {
               "query": {
@@ -177410,7 +177410,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "458": {
               "query": {
@@ -177745,7 +177745,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "460": {
               "query": {
@@ -178066,7 +178066,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "462": {
               "query": {
@@ -178373,7 +178373,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "464": {
               "query": {
@@ -178666,7 +178666,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "466": {
               "query": {
@@ -178945,7 +178945,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "468": {
               "query": {
@@ -179210,7 +179210,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "470": {
               "query": {
@@ -179461,7 +179461,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "472": {
               "query": {
@@ -179698,7 +179698,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "474": {
               "query": {
@@ -179921,7 +179921,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "476": {
               "query": {
@@ -180130,7 +180130,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "478": {
               "query": {
@@ -180325,7 +180325,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "480": {
               "query": {
@@ -180506,7 +180506,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "482": {
               "query": {
@@ -180673,7 +180673,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "484": {
               "query": {
@@ -180826,7 +180826,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "486": {
               "query": {
@@ -180965,7 +180965,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "488": {
               "query": {
@@ -181090,7 +181090,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "490": {
               "query": {
@@ -181201,7 +181201,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "492": {
               "query": {
@@ -181298,7 +181298,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "494": {
               "query": {
@@ -181381,7 +181381,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "496": {
               "query": {
@@ -181450,7 +181450,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "498": {
               "query": {
@@ -181505,7 +181505,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "500": {
               "query": {
@@ -181546,7 +181546,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -181584,7 +181584,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -191620,7 +191620,7 @@
           "version": 502,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -197154,7 +197154,7 @@
             ]
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -197185,7 +197185,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -197208,7 +197208,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -197364,7 +197364,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -197388,7 +197388,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -197411,7 +197411,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -197567,7 +197567,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -197591,7 +197591,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -197614,7 +197614,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -197770,7 +197770,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -197794,7 +197794,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -197817,7 +197817,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -197973,7 +197973,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -197997,7 +197997,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -198020,7 +198020,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -198176,7 +198176,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -198200,7 +198200,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -198223,7 +198223,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -198379,7 +198379,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -198403,7 +198403,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -198426,7 +198426,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -198582,7 +198582,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -198606,7 +198606,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -198629,7 +198629,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -198785,7 +198785,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -198809,7 +198809,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -198832,7 +198832,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -198988,7 +198988,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -199012,7 +199012,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -199035,7 +199035,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -199191,7 +199191,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -199215,7 +199215,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -199238,7 +199238,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -199394,7 +199394,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -199418,7 +199418,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -199441,7 +199441,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -199597,7 +199597,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -199621,7 +199621,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -199644,7 +199644,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -199800,7 +199800,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -199824,7 +199824,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -199847,7 +199847,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -200003,7 +200003,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -200027,7 +200027,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -200050,7 +200050,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -200206,7 +200206,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -200230,7 +200230,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -200253,7 +200253,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -200409,7 +200409,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -200433,7 +200433,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -200456,7 +200456,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -200612,7 +200612,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -200636,7 +200636,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -200659,7 +200659,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -200815,7 +200815,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -200839,7 +200839,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -200862,7 +200862,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -201018,7 +201018,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -201042,7 +201042,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -201065,7 +201065,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -201221,7 +201221,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -201245,7 +201245,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -201268,7 +201268,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -201424,7 +201424,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -201448,7 +201448,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -201471,7 +201471,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -201627,7 +201627,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -201651,7 +201651,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -201674,7 +201674,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -201830,7 +201830,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -201854,7 +201854,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -201877,7 +201877,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -202033,7 +202033,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -202057,7 +202057,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -202080,7 +202080,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -202236,7 +202236,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -202260,7 +202260,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -202283,7 +202283,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -202439,7 +202439,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -202463,7 +202463,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -202486,7 +202486,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -202642,7 +202642,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -202666,7 +202666,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -202689,7 +202689,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -202845,7 +202845,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -202869,7 +202869,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -202892,7 +202892,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -203048,7 +203048,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -203072,7 +203072,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -203095,7 +203095,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -203251,7 +203251,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -203275,7 +203275,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -203298,7 +203298,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -203454,7 +203454,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -203478,7 +203478,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -203501,7 +203501,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -203657,7 +203657,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -203681,7 +203681,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -203704,7 +203704,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -203860,7 +203860,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -203884,7 +203884,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -203907,7 +203907,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -204063,7 +204063,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -204087,7 +204087,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -204110,7 +204110,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -204266,7 +204266,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -204290,7 +204290,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -204313,7 +204313,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -204469,7 +204469,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -204493,7 +204493,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -204516,7 +204516,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -204672,7 +204672,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -204696,7 +204696,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -204719,7 +204719,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -204875,7 +204875,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -204899,7 +204899,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -204922,7 +204922,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -205078,7 +205078,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -205102,7 +205102,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -205125,7 +205125,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -205281,7 +205281,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -205305,7 +205305,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -205328,7 +205328,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -205484,7 +205484,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -205508,7 +205508,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -205531,7 +205531,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -205687,7 +205687,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -205711,7 +205711,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -205734,7 +205734,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -205890,7 +205890,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -205914,7 +205914,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -205937,7 +205937,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -206093,7 +206093,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -206117,7 +206117,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -206140,7 +206140,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -206296,7 +206296,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -206320,7 +206320,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -206343,7 +206343,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -206499,7 +206499,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -206523,7 +206523,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -206546,7 +206546,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -206702,7 +206702,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -206726,7 +206726,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -206749,7 +206749,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -206905,7 +206905,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -206929,7 +206929,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -206952,7 +206952,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -207108,7 +207108,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -207132,7 +207132,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -207155,7 +207155,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -207311,7 +207311,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -207335,7 +207335,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -207358,7 +207358,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -207514,7 +207514,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -207538,7 +207538,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -207561,7 +207561,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -207717,7 +207717,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -207741,7 +207741,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -207764,7 +207764,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -207920,7 +207920,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -207944,7 +207944,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -207967,7 +207967,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -208123,7 +208123,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -208147,7 +208147,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -208170,7 +208170,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -208326,7 +208326,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -208350,7 +208350,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -208373,7 +208373,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -208529,7 +208529,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -208553,7 +208553,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -208576,7 +208576,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -208732,7 +208732,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -208756,7 +208756,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -208779,7 +208779,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -208935,7 +208935,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -208959,7 +208959,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -208982,7 +208982,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -209138,7 +209138,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -209162,7 +209162,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -209185,7 +209185,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -209341,7 +209341,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -209365,7 +209365,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -209388,7 +209388,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -209544,7 +209544,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -209568,7 +209568,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -209591,7 +209591,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -209747,7 +209747,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -209771,7 +209771,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -209794,7 +209794,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -209950,7 +209950,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -209974,7 +209974,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -209997,7 +209997,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -210153,7 +210153,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -210177,7 +210177,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -210200,7 +210200,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -210356,7 +210356,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -210380,7 +210380,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -210403,7 +210403,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -210559,7 +210559,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -210583,7 +210583,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -210606,7 +210606,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -210762,7 +210762,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -210786,7 +210786,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -210809,7 +210809,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -210965,7 +210965,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -210989,7 +210989,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -211012,7 +211012,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -211168,7 +211168,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -211192,7 +211192,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -211215,7 +211215,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -211371,7 +211371,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -211395,7 +211395,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -211418,7 +211418,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -211574,7 +211574,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -211598,7 +211598,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -211621,7 +211621,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -211777,7 +211777,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -211801,7 +211801,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -211824,7 +211824,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -211980,7 +211980,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -212004,7 +212004,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -212027,7 +212027,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -212183,7 +212183,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -212207,7 +212207,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -212230,7 +212230,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -212386,7 +212386,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -212410,7 +212410,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -212433,7 +212433,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -212589,7 +212589,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -212613,7 +212613,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -212636,7 +212636,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -212792,7 +212792,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -212816,7 +212816,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -212839,7 +212839,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -212995,7 +212995,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -213019,7 +213019,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -213042,7 +213042,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -213198,7 +213198,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -213222,7 +213222,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -213245,7 +213245,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -213401,7 +213401,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -213425,7 +213425,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -213448,7 +213448,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -213604,7 +213604,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -213628,7 +213628,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -213651,7 +213651,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -213807,7 +213807,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -213831,7 +213831,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -213854,7 +213854,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -214010,7 +214010,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -214034,7 +214034,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -214057,7 +214057,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -214213,7 +214213,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -214237,7 +214237,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -214260,7 +214260,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -214416,7 +214416,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -214440,7 +214440,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -214463,7 +214463,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -214619,7 +214619,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -214643,7 +214643,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -214666,7 +214666,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -214822,7 +214822,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -214846,7 +214846,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -214869,7 +214869,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -215025,7 +215025,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -215049,7 +215049,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -215072,7 +215072,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -215228,7 +215228,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -215252,7 +215252,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -215275,7 +215275,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -215431,7 +215431,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -215455,7 +215455,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -215478,7 +215478,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -215634,7 +215634,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -215658,7 +215658,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "6": {
               "query": {
@@ -215681,7 +215681,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -215837,7 +215837,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -215861,7 +215861,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "8": {
               "query": {
@@ -215884,7 +215884,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -216040,7 +216040,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -216064,7 +216064,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "10": {
               "query": {
@@ -216087,7 +216087,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -216243,7 +216243,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -216267,7 +216267,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "12": {
               "query": {
@@ -216290,7 +216290,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -216446,7 +216446,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -216470,7 +216470,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "14": {
               "query": {
@@ -216493,7 +216493,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -216649,7 +216649,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -216673,7 +216673,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "16": {
               "query": {
@@ -216696,7 +216696,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -216852,7 +216852,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -216876,7 +216876,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "18": {
               "query": {
@@ -216899,7 +216899,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -217055,7 +217055,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -217079,7 +217079,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "20": {
               "query": {
@@ -217102,7 +217102,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -217258,7 +217258,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -217282,7 +217282,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "22": {
               "query": {
@@ -217305,7 +217305,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -217461,7 +217461,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       }
diff --git a/firebase-firestore/src/test/resources/json/persistence_spec_test.json b/firebase-firestore/src/test/resources/json/persistence_spec_test.json
index 2da72f8e3..40efba6cb 100644
--- a/firebase-firestore/src/test/resources/json/persistence_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/persistence_spec_test.json
@@ -28,7 +28,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": [],
           "numOutstandingWrites": 2
@@ -43,7 +43,7 @@
         "writeAck": {
           "version": 2
         },
-        "stateExpect": {
+        "expectedState": {
           "numOutstandingWrites": 0
         }
       }
@@ -78,7 +78,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         }
@@ -92,7 +92,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -104,7 +104,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -163,7 +163,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -214,7 +214,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -242,7 +242,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         }
@@ -256,7 +256,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -268,7 +268,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -314,7 +314,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -365,7 +365,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -400,7 +400,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -413,7 +413,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -425,7 +425,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -474,7 +474,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -492,7 +492,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -504,7 +504,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -551,7 +551,7 @@
       },
       {
         "changeUser": "user1",
-        "stateExpect": {
+        "expectedState": {
           "numOutstandingWrites": 0
         }
       },
@@ -574,7 +574,7 @@
       },
       {
         "changeUser": null,
-        "stateExpect": {
+        "expectedState": {
           "numOutstandingWrites": 1
         }
       },
@@ -582,7 +582,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "users/anon"
@@ -593,7 +593,7 @@
       },
       {
         "changeUser": "user1",
-        "stateExpect": {
+        "expectedState": {
           "numOutstandingWrites": 2
         }
       },
@@ -601,7 +601,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "users/user1"
@@ -614,7 +614,7 @@
         "writeAck": {
           "version": 3000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "users/user1"
@@ -646,7 +646,7 @@
       },
       {
         "changeUser": "user1",
-        "stateExpect": {
+        "expectedState": {
           "numOutstandingWrites": 0
         }
       },
@@ -672,7 +672,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": [],
           "numOutstandingWrites": 1
@@ -688,7 +688,7 @@
       },
       {
         "restart": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": [],
           "numOutstandingWrites": 2
@@ -724,7 +724,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -775,7 +775,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "users",
@@ -808,7 +808,7 @@
             "uid": "anon"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "users",
@@ -836,7 +836,7 @@
       },
       {
         "changeUser": "user1",
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -848,7 +848,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "users",
@@ -881,7 +881,7 @@
             "uid": "user1"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "users",
@@ -909,7 +909,7 @@
       },
       {
         "changeUser": null,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "users",
@@ -969,7 +969,7 @@
         "applyClientState": {
           "visibility": "hidden"
         },
-        "stateExpect": {
+        "expectedState": {
           "numActiveClients": 1
         },
         "clientIndex": 0
@@ -982,7 +982,7 @@
         "applyClientState": {
           "visibility": "visible"
         },
-        "stateExpect": {
+        "expectedState": {
           "numActiveClients": 2
         },
         "clientIndex": 1
@@ -1008,7 +1008,7 @@
         "applyClientState": {
           "visibility": "hidden"
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -1021,7 +1021,7 @@
         "applyClientState": {
           "visibility": "hidden"
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -1032,7 +1032,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -1044,7 +1044,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 1
@@ -1070,7 +1070,7 @@
         "applyClientState": {
           "visibility": "hidden"
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -1083,7 +1083,7 @@
         "applyClientState": {
           "visibility": "hidden"
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -1096,7 +1096,7 @@
         "applyClientState": {
           "visibility": "visible"
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 2
@@ -1107,7 +1107,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -1119,7 +1119,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -1130,7 +1130,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 2
@@ -1150,14 +1150,14 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": [],
           "isPrimary": true
@@ -1166,7 +1166,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -1177,7 +1177,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 0
@@ -1188,14 +1188,14 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 1
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": [],
           "isPrimary": true
@@ -1208,7 +1208,7 @@
       },
       {
         "enableNetwork": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 0
@@ -1219,7 +1219,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -1230,7 +1230,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -1272,7 +1272,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -1284,14 +1284,14 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isShutdown": true
         },
         "clientIndex": 1
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isShutdown": true
         },
         "clientIndex": 2
diff --git a/firebase-firestore/src/test/resources/json/query_spec_test.json b/firebase-firestore/src/test/resources/json/query_spec_test.json
index 2501ede33..a13c33030 100644
--- a/firebase-firestore/src/test/resources/json/query_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/query_spec_test.json
@@ -17,7 +17,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -68,7 +68,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "cg/1",
@@ -103,7 +103,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -162,7 +162,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "cg/2",
@@ -197,7 +197,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -264,7 +264,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "not-cg/nope/cg/3",
@@ -299,7 +299,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -374,7 +374,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "not-cg/nope",
@@ -409,7 +409,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -492,7 +492,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "cg/1/not-cg/nope",
@@ -528,7 +528,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -581,7 +581,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "",
@@ -646,7 +646,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -714,7 +714,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "",
@@ -778,7 +778,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -829,7 +829,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "cg/1",
@@ -864,7 +864,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -923,7 +923,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "not-cg/nope",
@@ -983,7 +983,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1012,7 +1012,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "",
@@ -1077,7 +1077,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1121,7 +1121,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "",
@@ -1185,7 +1185,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1236,7 +1236,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1269,7 +1269,7 @@
             "match": true
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1310,7 +1310,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1336,7 +1336,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
diff --git a/firebase-firestore/src/test/resources/json/remote_store_spec_test.json b/firebase-firestore/src/test/resources/json/remote_store_spec_test.json
index 57e9a2cd6..3bd4f592b 100644
--- a/firebase-firestore/src/test/resources/json/remote_store_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/remote_store_spec_test.json
@@ -17,7 +17,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -44,7 +44,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -57,7 +57,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -149,7 +149,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -195,7 +195,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -222,7 +222,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -235,7 +235,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -257,7 +257,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -270,7 +270,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -292,7 +292,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -305,7 +305,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -489,7 +489,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -535,7 +535,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -556,7 +556,7 @@
           },
           "runBackoffTimer": true
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -607,7 +607,7 @@
           "version": 1001,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -656,7 +656,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -677,7 +677,7 @@
           },
           "runBackoffTimer": false
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -689,13 +689,13 @@
             "hasPendingWrites": false
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
       {
         "changeUser": "abc",
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
diff --git a/firebase-firestore/src/test/resources/json/resume_token_spec_test.json b/firebase-firestore/src/test/resources/json/resume_token_spec_test.json
index b78b9e161..c7e126c31 100644
--- a/firebase-firestore/src/test/resources/json/resume_token_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/resume_token_spec_test.json
@@ -17,7 +17,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -68,7 +68,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -102,7 +102,7 @@
           },
           "runBackoffTimer": true
         },
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -135,7 +135,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -186,7 +186,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -221,7 +221,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -234,7 +234,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -246,7 +246,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
diff --git a/firebase-firestore/src/test/resources/json/write_spec_test.json b/firebase-firestore/src/test/resources/json/write_spec_test.json
index 1f8a024b5..93c2f9020 100644
--- a/firebase-firestore/src/test/resources/json/write_spec_test.json
+++ b/firebase-firestore/src/test/resources/json/write_spec_test.json
@@ -17,7 +17,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -79,7 +79,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -123,7 +123,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -179,7 +179,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -187,7 +187,7 @@
             "rejectedDocs": []
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -220,7 +220,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -276,7 +276,7 @@
         "writeAck": {
           "version": 2500
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -284,7 +284,7 @@
             "rejectedDocs": []
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -330,7 +330,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -381,7 +381,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -414,7 +414,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -470,7 +470,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -478,7 +478,7 @@
             "rejectedDocs": []
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -532,7 +532,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -544,7 +544,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -593,7 +593,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -611,7 +611,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -623,7 +623,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -669,7 +669,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -708,7 +708,7 @@
           "version": 250,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -733,7 +733,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -793,7 +793,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -839,7 +839,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -890,7 +890,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -923,7 +923,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -979,7 +979,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -987,7 +987,7 @@
             "rejectedDocs": []
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -1033,7 +1033,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1084,7 +1084,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -1117,7 +1117,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -1147,7 +1147,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -1181,7 +1181,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -1227,7 +1227,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1278,7 +1278,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1311,7 +1311,7 @@
             "v": 3
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1341,7 +1341,7 @@
         "writeAck": {
           "version": 3000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -1412,7 +1412,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1479,7 +1479,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1491,7 +1491,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1521,7 +1521,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -1569,7 +1569,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1603,7 +1603,7 @@
             "local": 5
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1634,7 +1634,7 @@
         "writeAck": {
           "version": 5000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -1723,7 +1723,7 @@
           "version": 5000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1770,7 +1770,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -1803,7 +1803,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1836,7 +1836,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1869,7 +1869,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1902,7 +1902,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1935,7 +1935,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -1968,7 +1968,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2001,7 +2001,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2034,7 +2034,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2067,7 +2067,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2100,7 +2100,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2133,7 +2133,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2166,7 +2166,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2199,7 +2199,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2232,7 +2232,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2265,7 +2265,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2290,7 +2290,7 @@
             "hasPendingWrites": true
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "numOutstandingWrites": 10
         }
       },
@@ -2298,7 +2298,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a0"
@@ -2332,7 +2332,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2362,7 +2362,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a1"
@@ -2396,7 +2396,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2426,7 +2426,7 @@
         "writeAck": {
           "version": 3000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a2"
@@ -2460,7 +2460,7 @@
           "version": 3000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2490,7 +2490,7 @@
         "writeAck": {
           "version": 4000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a3"
@@ -2524,7 +2524,7 @@
           "version": 4000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2554,7 +2554,7 @@
         "writeAck": {
           "version": 5000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a4"
@@ -2588,7 +2588,7 @@
           "version": 5000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2618,7 +2618,7 @@
         "writeAck": {
           "version": 6000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a5"
@@ -2652,7 +2652,7 @@
           "version": 6000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2682,7 +2682,7 @@
         "writeAck": {
           "version": 7000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a6"
@@ -2716,7 +2716,7 @@
           "version": 7000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2746,7 +2746,7 @@
         "writeAck": {
           "version": 8000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a7"
@@ -2780,7 +2780,7 @@
           "version": 8000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2810,7 +2810,7 @@
         "writeAck": {
           "version": 9000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a8"
@@ -2844,7 +2844,7 @@
           "version": 9000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2874,7 +2874,7 @@
         "writeAck": {
           "version": 10000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a9"
@@ -2908,7 +2908,7 @@
           "version": 10000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -2938,7 +2938,7 @@
         "writeAck": {
           "version": 11000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a10"
@@ -2972,7 +2972,7 @@
           "version": 11000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3002,7 +3002,7 @@
         "writeAck": {
           "version": 12000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a11"
@@ -3036,7 +3036,7 @@
           "version": 12000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3066,7 +3066,7 @@
         "writeAck": {
           "version": 13000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a12"
@@ -3100,7 +3100,7 @@
           "version": 13000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3130,7 +3130,7 @@
         "writeAck": {
           "version": 14000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a13"
@@ -3164,7 +3164,7 @@
           "version": 14000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3194,7 +3194,7 @@
         "writeAck": {
           "version": 15000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a14"
@@ -3228,7 +3228,7 @@
           "version": 15000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3274,7 +3274,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -3294,7 +3294,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3327,7 +3327,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3360,7 +3360,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3393,7 +3393,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3426,7 +3426,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3459,7 +3459,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3492,7 +3492,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3525,7 +3525,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3558,7 +3558,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3591,7 +3591,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3624,7 +3624,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3657,7 +3657,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3690,7 +3690,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3723,7 +3723,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3756,7 +3756,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3781,7 +3781,7 @@
             "hasPendingWrites": true
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "numOutstandingWrites": 10
         }
       },
@@ -3791,7 +3791,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -3799,7 +3799,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3831,7 +3831,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -3839,7 +3839,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3871,7 +3871,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -3879,7 +3879,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3911,7 +3911,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -3919,7 +3919,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3951,7 +3951,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -3959,7 +3959,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -3991,7 +3991,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -3999,7 +3999,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4031,7 +4031,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4039,7 +4039,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4071,7 +4071,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4079,7 +4079,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4111,7 +4111,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4119,7 +4119,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4151,7 +4151,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4159,7 +4159,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4191,7 +4191,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4199,7 +4199,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4231,7 +4231,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4239,7 +4239,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4271,7 +4271,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4279,7 +4279,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4311,7 +4311,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4319,7 +4319,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4351,7 +4351,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4360,7 +4360,7 @@
           },
           "numOutstandingWrites": 0
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4406,7 +4406,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4457,7 +4457,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4490,7 +4490,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4520,7 +4520,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -4536,7 +4536,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4568,7 +4568,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -4576,7 +4576,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4627,7 +4627,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4673,7 +4673,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4712,7 +4712,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4732,7 +4732,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4762,7 +4762,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -4778,7 +4778,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4808,7 +4808,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -4853,7 +4853,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4910,7 +4910,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -4949,7 +4949,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4969,7 +4969,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -4999,7 +4999,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -5011,12 +5011,12 @@
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": [],
           "writeStreamRequestCount": 3
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5031,7 +5031,7 @@
       },
       {
         "enableNetwork": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5083,7 +5083,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5132,7 +5132,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5171,7 +5171,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5191,7 +5191,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -5221,7 +5221,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -5239,7 +5239,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {}
         }
       },
@@ -5252,7 +5252,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "4": {
               "query": {
@@ -5285,7 +5285,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5305,7 +5305,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5337,7 +5337,7 @@
             "code": 3
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -5345,7 +5345,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5391,7 +5391,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5411,7 +5411,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5443,7 +5443,7 @@
             "code": 5
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -5451,7 +5451,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5497,7 +5497,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5517,7 +5517,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5549,7 +5549,7 @@
             "code": 6
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -5557,7 +5557,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5603,7 +5603,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5623,7 +5623,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5655,7 +5655,7 @@
             "code": 7
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -5663,7 +5663,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5709,7 +5709,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5729,7 +5729,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5761,7 +5761,7 @@
             "code": 9
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -5769,7 +5769,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5815,7 +5815,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5835,7 +5835,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5867,7 +5867,7 @@
             "code": 11
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -5875,7 +5875,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5921,7 +5921,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -5941,7 +5941,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -5973,7 +5973,7 @@
             "code": 12
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -5981,7 +5981,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6027,7 +6027,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6047,7 +6047,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6079,7 +6079,7 @@
             "code": 15
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -6087,7 +6087,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6133,7 +6133,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6153,7 +6153,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6207,7 +6207,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6227,7 +6227,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6265,7 +6265,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -6312,7 +6312,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6358,7 +6358,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6378,7 +6378,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6416,7 +6416,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -6463,7 +6463,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6509,7 +6509,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6529,7 +6529,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6567,7 +6567,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -6614,7 +6614,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6660,7 +6660,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6680,7 +6680,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6718,7 +6718,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -6765,7 +6765,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6811,7 +6811,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6831,7 +6831,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6869,7 +6869,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -6916,7 +6916,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -6962,7 +6962,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -6982,7 +6982,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -7020,7 +7020,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -7067,7 +7067,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -7113,7 +7113,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7133,7 +7133,7 @@
             "foo": "bar"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -7171,7 +7171,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -7218,7 +7218,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/key",
@@ -7264,7 +7264,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7318,7 +7318,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -7355,7 +7355,7 @@
             "a.c": "<DELETE>"
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -7417,7 +7417,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -7425,7 +7425,7 @@
             "rejectedDocs": []
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -7472,13 +7472,13 @@
             "foo": "bar"
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "numOutstandingWrites": 1
         }
       },
       {
         "enableNetwork": false,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": [],
           "writeStreamRequestCount": 3
@@ -7486,7 +7486,7 @@
       },
       {
         "enableNetwork": true,
-        "stateExpect": {
+        "expectedState": {
           "writeStreamRequestCount": 5,
           "numOutstandingWrites": 1
         }
@@ -7495,7 +7495,7 @@
         "writeAck": {
           "version": 1
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/key"
@@ -7530,7 +7530,7 @@
             "code": 9
           }
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -7551,7 +7551,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -7608,7 +7608,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -7668,7 +7668,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -7704,7 +7704,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7747,7 +7747,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7768,7 +7768,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7808,7 +7808,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -7820,7 +7820,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7858,7 +7858,7 @@
             "v": 2
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7887,7 +7887,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7921,7 +7921,7 @@
             "v": 3
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -7950,7 +7950,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8009,7 +8009,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8052,7 +8052,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8079,7 +8079,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8091,7 +8091,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8112,7 +8112,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8141,7 +8141,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8200,7 +8200,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8229,7 +8229,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -8237,7 +8237,7 @@
             "rejectedDocs": []
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8290,7 +8290,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8333,7 +8333,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8360,7 +8360,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8372,7 +8372,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8393,7 +8393,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8422,7 +8422,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8455,7 +8455,7 @@
             "code": 9
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8484,7 +8484,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -8492,7 +8492,7 @@
             ]
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8545,7 +8545,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8588,7 +8588,7 @@
           "version": 500,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8617,7 +8617,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8652,7 +8652,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -8692,7 +8692,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8745,7 +8745,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8766,7 +8766,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8822,7 +8822,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -8840,7 +8840,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/doc"
@@ -8858,7 +8858,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "activeTargets": {
             "2": {
@@ -8882,7 +8882,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -8902,7 +8902,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -8986,7 +8986,7 @@
           "version": 2000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection/doc",
@@ -9002,7 +9002,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9026,10 +9026,10 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9129,7 +9129,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -9161,7 +9161,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -9173,7 +9173,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/c"
@@ -9185,7 +9185,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -9255,7 +9255,7 @@
         "writeAck": {
           "version": 4000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/f"
@@ -9287,7 +9287,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/g"
@@ -9299,7 +9299,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/h"
@@ -9311,7 +9311,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -9378,7 +9378,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/j",
@@ -9412,14 +9412,14 @@
         "applyClientState": {
           "visibility": "visible"
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -9454,7 +9454,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -9462,7 +9462,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -9474,7 +9474,7 @@
       },
       {
         "runTimer": "client_metadata_refresh",
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 1
@@ -9483,7 +9483,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -9519,7 +9519,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9544,7 +9544,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9588,7 +9588,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -9600,7 +9600,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9634,7 +9634,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9663,7 +9663,7 @@
       },
       {
         "drainQueue": true,
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9692,7 +9692,7 @@
       },
       {
         "changeUser": "user2",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9737,7 +9737,7 @@
             "v": 1
           }
         ],
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9770,7 +9770,7 @@
       },
       {
         "changeUser": "user2",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9823,7 +9823,7 @@
       },
       {
         "changeUser": "user1",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9880,7 +9880,7 @@
       },
       {
         "changeUser": "user1",
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -9991,7 +9991,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10003,7 +10003,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10043,7 +10043,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10055,7 +10055,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10097,7 +10097,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -10124,7 +10124,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10136,7 +10136,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10165,7 +10165,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10187,7 +10187,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 1
@@ -10239,7 +10239,7 @@
           "version": 1000,
           "targetIds": []
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
@@ -10268,7 +10268,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -10293,14 +10293,14 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": false
         },
         "clientIndex": 1
@@ -10320,7 +10320,7 @@
       },
       {
         "shutdown": true,
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {},
           "limboDocs": []
         },
@@ -10328,7 +10328,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true,
           "numOutstandingWrites": 1
         },
@@ -10342,7 +10342,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -10367,7 +10367,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -10385,7 +10385,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -10416,7 +10416,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 2
@@ -10444,7 +10444,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -10469,7 +10469,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -10487,7 +10487,7 @@
         "writeAck": {
           "version": 1000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -10518,7 +10518,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 2
@@ -10550,7 +10550,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [],
             "rejectedDocs": [
@@ -10575,7 +10575,7 @@
     "steps": [
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -10606,7 +10606,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 1
@@ -10619,7 +10619,7 @@
       },
       {
         "drainQueue": true,
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/a"
@@ -10633,7 +10633,7 @@
         "applyClientState": {
           "primary": true
         },
-        "stateExpect": {
+        "expectedState": {
           "isPrimary": true
         },
         "clientIndex": 0
@@ -10642,7 +10642,7 @@
         "writeAck": {
           "version": 2000
         },
-        "stateExpect": {
+        "expectedState": {
           "userCallbacks": {
             "acknowledgedDocs": [
               "collection/b"
@@ -10661,7 +10661,7 @@
             "orderBys": []
           }
         ],
-        "stateExpect": {
+        "expectedState": {
           "activeTargets": {
             "2": {
               "query": {
@@ -10673,7 +10673,7 @@
             }
           }
         },
-        "expect": [
+        "expectedSnapshotEvents": [
           {
             "query": {
               "path": "collection",
diff --git a/firebase-inappmessaging-display/gradle.properties b/firebase-inappmessaging-display/gradle.properties
index 737638ce4..fd3ef991e 100644
--- a/firebase-inappmessaging-display/gradle.properties
+++ b/firebase-inappmessaging-display/gradle.properties
@@ -1,2 +1,2 @@
-version=18.0.2
-latestReleasedVersion=18.0.1
+version=19.0.1
+latestReleasedVersion=19.0.0
diff --git a/firebase-inappmessaging/gradle.properties b/firebase-inappmessaging/gradle.properties
index 737638ce4..fd3ef991e 100644
--- a/firebase-inappmessaging/gradle.properties
+++ b/firebase-inappmessaging/gradle.properties
@@ -1,2 +1,2 @@
-version=18.0.2
-latestReleasedVersion=18.0.1
+version=19.0.1
+latestReleasedVersion=19.0.0
diff --git a/firebase-storage/gradle.properties b/firebase-storage/gradle.properties
index 18169ffc3..abf55a300 100644
--- a/firebase-storage/gradle.properties
+++ b/firebase-storage/gradle.properties
@@ -12,6 +12,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-version=19.0.1
-latestReleasedVersion=19.0.0
+version=19.1.0
+latestReleasedVersion=19.0.1
 android.enableUnitTestBinaryResources=true
diff --git a/kotlindoc/README.md b/kotlindoc/README.md
new file mode 100644
index 000000000..b6144bfb9
--- /dev/null
+++ b/kotlindoc/README.md
@@ -0,0 +1,20 @@
+# Tooling to generate Kotlin documentation.
+
+This module contains configuration for generating Kotlindoc that is hosted at
+[firebase.github.io](https://firebase.github.io/firebase-android-sdk/reference/kotlin/firebase-ktx/).
+
+To generate documentation for all "supported" SDKs(ones that have Kotlin extensions) run:
+
+```bash
+./gradlew :kotlindoc:dokka
+```
+
+To generate documentation for a subset of SDKs run:
+
+```bash
+./gradlew -PkotlindocProjects=":firebase-common,:firebase-firestore" :kotlindoc:dokka
+```
+
+The output will be located in `kotlindoc/build/dokka/html`.
+
+To update the live reference, create a PR with the contents of the above directory into the `gh-pages` branch.
\ No newline at end of file
diff --git a/kotlindoc/kotlindoc.gradle b/kotlindoc/kotlindoc.gradle
new file mode 100644
index 000000000..0cf996f0b
--- /dev/null
+++ b/kotlindoc/kotlindoc.gradle
@@ -0,0 +1,73 @@
+// Copyright 2019 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+plugins {
+    id 'com.android.library'
+    id 'kotlin-android'
+    id 'org.jetbrains.dokka-android' version '0.9.18'
+}
+
+android {
+    compileSdkVersion project.targetSdkVersion
+    defaultConfig {
+        minSdkVersion project.minSdkVersion
+        targetSdkVersion project.targetSdkVersion
+    }
+}
+
+configurations {
+    dokkapath
+    dokkapath.description = "dokka project classpath"
+}
+
+def ALL_SUPPORTED_PROJECTS = [
+        ':firebase-common',
+        ':firebase-config',
+        ':firebase-firestore',
+        ':firebase-functions',
+        ':firebase-storage',
+]
+
+
+def PROJECTS_TO_DOCUMENT = (project.findProperty('kotlindocProjects')?.split(',') ?: ALL_SUPPORTED_PROJECTS).collect {
+    project(it)
+}
+
+def javaDeps = PROJECTS_TO_DOCUMENT
+def kotlinDeps = javaDeps.collect {
+    project("$it.path:ktx")
+}
+
+dokka {
+    moduleName = "firebase-ktx"
+    outputDirectory = "$buildDir/dokka/html"
+    outputFormat = "html"
+    processConfigurations = []
+
+    javaDeps.each { Project p ->
+        dependsOn "$p.path:docStubs"
+        sourceRoot {
+            path = "$p.buildDir/doc-stubs"
+        }
+    }
+    afterEvaluate {
+        sourceDirs = files(kotlinDeps.collect {
+            "$it.projectDir/src/main/kotlin"
+        })
+    }
+
+    externalDocumentationLink {
+        url = new URL('https://developer.android.com/reference/kotlin')
+    }
+}
\ No newline at end of file
diff --git a/kotlindoc/src/main/AndroidManifest.xml b/kotlindoc/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..68251e627
--- /dev/null
+++ b/kotlindoc/src/main/AndroidManifest.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright 2019 Google LLC -->
+<!-- -->
+<!-- Licensed under the Apache License, Version 2.0 (the "License"); -->
+<!-- you may not use this file except in compliance with the License. -->
+<!-- You may obtain a copy of the License at -->
+<!-- -->
+<!--      http://www.apache.org/licenses/LICENSE-2.0 -->
+<!-- -->
+<!-- Unless required by applicable law or agreed to in writing, software -->
+<!-- distributed under the License is distributed on an "AS IS" BASIS, -->
+<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. -->
+<!-- See the License for the specific language governing permissions and -->
+<!-- limitations under the License. -->
+
+<manifest package="com.google.firebase.kotlindoc" />
diff --git a/root-project.gradle b/root-project.gradle
index c013e5275..7bf62e2fa 100644
--- a/root-project.gradle
+++ b/root-project.gradle
@@ -27,7 +27,7 @@ buildscript {
 
     dependencies {
         classpath 'com.android.tools.build:gradle:3.4.2'
-        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
+        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'
         classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.7.1'
         classpath 'org.jsoup:jsoup:1.11.2'
         classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.8'
diff --git a/smoke-tests/build.gradle b/smoke-tests/build.gradle
index 7a80b78b0..424d8beb1 100644
--- a/smoke-tests/build.gradle
+++ b/smoke-tests/build.gradle
@@ -52,39 +52,30 @@ android {
   if (project.hasProperty("testBuildType")) {
     testBuildType project.getProperty("testBuildType")
   }
-
-  flavorDimensions "systemUnderTest"
-
-  // TODO(allisonbm92): Switch to the default flavor.
-  productFlavors {
-    combined {
-      dimension "systemUnderTest"
-      applicationId "com.google.firebase.testing.combined"
-    }
-  }
-
 }
 
 apply from: "configure.gradle"
 
 dependencies {
-  // Common
+  // Firebase
+  implementation "com.google.firebase:firebase-analytics"
+  implementation "com.google.firebase:firebase-auth"
+  implementation "com.google.firebase:firebase-common"
+  implementation "com.google.firebase:firebase-database"
+  implementation "com.google.firebase:firebase-dynamic-links"
+  implementation "com.google.firebase:firebase-firestore"
+  implementation "com.google.firebase:firebase-functions"
+  implementation "com.google.firebase:firebase-inappmessaging"
+  implementation "com.google.firebase:firebase-config"
+  implementation "com.google.firebase:firebase-storage"
+
+  // Common utilities (application side)
   implementation "androidx.test:rules:1.2.0"
   implementation "androidx.test:runner:1.2.0"
-  implementation "com.google.firebase:firebase-common"
   implementation "com.google.truth:truth:0.44"
   implementation "junit:junit:4.12"
 
-  // All
-  combinedImplementation "com.google.firebase:firebase-analytics"
-  combinedImplementation "com.google.firebase:firebase-auth"
-  combinedImplementation "com.google.firebase:firebase-database"
-  combinedImplementation "com.google.firebase:firebase-firestore"
-  combinedImplementation "com.google.firebase:firebase-functions"
-  combinedImplementation "com.google.firebase:firebase-inappmessaging"
-  combinedImplementation "com.google.firebase:firebase-config"
-  combinedImplementation "com.google.firebase:firebase-storage"
-
+  // Common utilities (instrumentation side)
   androidTestImplementation "androidx.test:core:1.2.0"
   androidTestImplementation "androidx.test:runner:1.2.0"
   androidTestImplementation "junit:junit:4.12"
diff --git a/smoke-tests/runner.config b/smoke-tests/runner.config
index c3bdeee34..ded648ae9 100644
--- a/smoke-tests/runner.config
+++ b/smoke-tests/runner.config
@@ -29,8 +29,9 @@ firebase {
   # latestBillOfMaterials
   ## This option specifies the Bill of Materials for the latest release. This is
   ## given as a Maven id. The tests will use this information to build a test
-  ## matrix. This is mandatory.
-  latestBillOfMaterials com.google.firebase:firebase-bom:22.1.0
+  ## matrix. If the version is set to `LATEST` or `RELEASE`, the runner will find
+  ## the latest version in GMaven. This is mandatory.
+  latestBillOfMaterials com.google.firebase:firebase-bom:RELEASE
 
   # project
   ## This option specifies the path to the main Firebase project. This is
@@ -41,7 +42,6 @@ smokeTest {
   # flavors
   ## This option specifies the Android flavors of the test to build for testing.
   ## It may be omitted if there are no flavors.
-  flavors combined
 
   # googleServices
   ## This option is the path to the Google Services file. If provided, the
diff --git a/smoke-tests/src/combined/AndroidManifest.xml b/smoke-tests/src/combined/AndroidManifest.xml
deleted file mode 100644
index d4f668e3f..000000000
--- a/smoke-tests/src/combined/AndroidManifest.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.google.firebase.testing">
-
-  <uses-permission android:name="android.permission.INTERNET" />
-
-  <application>
-    <activity android:name="android.app.Activity">
-      <intent-filter>
-        <action android:name="android.intent.action.MAIN" />
-        <category android:name="android.intent.category.LAUNCHER" />
-      </intent-filter>
-    </activity>
-
-    <meta-data android:name="com.google.firebase.testing.classes"
-      android:value="com.google.firebase.testing.combined.AllTests" />
-  </application>
-</manifest>
diff --git a/smoke-tests/src/main/AndroidManifest.xml b/smoke-tests/src/main/AndroidManifest.xml
index f05ac7415..d4f668e3f 100644
--- a/smoke-tests/src/main/AndroidManifest.xml
+++ b/smoke-tests/src/main/AndroidManifest.xml
@@ -3,4 +3,15 @@
 
   <uses-permission android:name="android.permission.INTERNET" />
 
+  <application>
+    <activity android:name="android.app.Activity">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN" />
+        <category android:name="android.intent.category.LAUNCHER" />
+      </intent-filter>
+    </activity>
+
+    <meta-data android:name="com.google.firebase.testing.classes"
+      android:value="com.google.firebase.testing.combined.AllTests" />
+  </application>
 </manifest>
diff --git a/smoke-tests/src/combined/java/com/google/firebase/testing/combined/AllTests.java b/smoke-tests/src/main/java/com/google/firebase/testing/combined/AllTests.java
similarity index 93%
rename from smoke-tests/src/combined/java/com/google/firebase/testing/combined/AllTests.java
rename to smoke-tests/src/main/java/com/google/firebase/testing/combined/AllTests.java
index c490e93cf..394882dca 100644
--- a/smoke-tests/src/combined/java/com/google/firebase/testing/combined/AllTests.java
+++ b/smoke-tests/src/main/java/com/google/firebase/testing/combined/AllTests.java
@@ -15,6 +15,7 @@
 package com.google.firebase.testing.combined;
 
 import com.google.firebase.testing.database.DatabaseTest;
+import com.google.firebase.testing.dynamiclinks.DynamicLinksTest;
 import com.google.firebase.testing.firestore.FirestoreTest;
 import com.google.firebase.testing.functions.FunctionsTest;
 import com.google.firebase.testing.inappmessaging.InappMessagingTest;
@@ -29,6 +30,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
   DatabaseTest.class,
+  DynamicLinksTest.class,
   FirestoreTest.class,
   FunctionsTest.class,
   InappMessagingTest.class,
diff --git a/smoke-tests/src/combined/java/com/google/firebase/testing/database/DatabaseTest.java b/smoke-tests/src/main/java/com/google/firebase/testing/database/DatabaseTest.java
similarity index 100%
rename from smoke-tests/src/combined/java/com/google/firebase/testing/database/DatabaseTest.java
rename to smoke-tests/src/main/java/com/google/firebase/testing/database/DatabaseTest.java
diff --git a/smoke-tests/src/main/java/com/google/firebase/testing/dynamiclinks/DynamicLinksTest.java b/smoke-tests/src/main/java/com/google/firebase/testing/dynamiclinks/DynamicLinksTest.java
new file mode 100644
index 000000000..b02e3157f
--- /dev/null
+++ b/smoke-tests/src/main/java/com/google/firebase/testing/dynamiclinks/DynamicLinksTest.java
@@ -0,0 +1,67 @@
+// Copyright 2018 Google LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.firebase.testing.dynamiclinks;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import android.app.Activity;
+import android.net.Uri;
+import androidx.test.rule.ActivityTestRule;
+import androidx.test.runner.AndroidJUnit4;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.dynamiclinks.DynamicLink;
+import com.google.firebase.dynamiclinks.FirebaseDynamicLinks;
+import com.google.firebase.testing.common.Tasks2;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+@RunWith(AndroidJUnit4.class)
+public final class DynamicLinksTest {
+
+  @Rule public final ActivityTestRule<Activity> activity = new ActivityTestRule<>(Activity.class);
+
+  @Test
+  public void buildDynamicLink_UriContainsCorrectComponents() throws Exception {
+    FirebaseDynamicLinks dl = FirebaseDynamicLinks.getInstance();
+    Uri uri = Uri.parse("http://www.example.com");
+
+    DynamicLink link =
+        dl.createDynamicLink()
+            .setLink(uri)
+            .setDomainUriPrefix("http://example.page.link")
+            .setAndroidParameters(new DynamicLink.AndroidParameters.Builder().build())
+            .buildDynamicLink();
+    Uri actual = link.getUri();
+    String[] query = actual.getQuery().split("&");
+
+    assertThat(actual.getScheme()).isEqualTo("http");
+    assertThat(actual.getHost()).isEqualTo("example.page.link");
+    assertThat(query)
+        .asList()
+        .containsAtLeast("apn=com.google.firebase.testing", "link=http://www.example.com");
+  }
+
+  @Test
+  public void getDynamicLink_NonLinkReturnsNull() throws Exception {
+    FirebaseDynamicLinks dl = FirebaseDynamicLinks.getInstance();
+    Uri uri = Uri.parse("http://www.example.com");
+
+    Task<?> task = dl.getDynamicLink(uri);
+    Object actual = Tasks2.waitForSuccess(task);
+
+    assertThat(actual).isNull();
+  }
+}
diff --git a/smoke-tests/src/combined/java/com/google/firebase/testing/firestore/FirestoreTest.java b/smoke-tests/src/main/java/com/google/firebase/testing/firestore/FirestoreTest.java
similarity index 100%
rename from smoke-tests/src/combined/java/com/google/firebase/testing/firestore/FirestoreTest.java
rename to smoke-tests/src/main/java/com/google/firebase/testing/firestore/FirestoreTest.java
diff --git a/smoke-tests/src/combined/java/com/google/firebase/testing/functions/FunctionsTest.java b/smoke-tests/src/main/java/com/google/firebase/testing/functions/FunctionsTest.java
similarity index 100%
rename from smoke-tests/src/combined/java/com/google/firebase/testing/functions/FunctionsTest.java
rename to smoke-tests/src/main/java/com/google/firebase/testing/functions/FunctionsTest.java
diff --git a/smoke-tests/src/combined/java/com/google/firebase/testing/inappmessaging/InappMessagingTest.java b/smoke-tests/src/main/java/com/google/firebase/testing/inappmessaging/InappMessagingTest.java
similarity index 100%
rename from smoke-tests/src/combined/java/com/google/firebase/testing/inappmessaging/InappMessagingTest.java
rename to smoke-tests/src/main/java/com/google/firebase/testing/inappmessaging/InappMessagingTest.java
diff --git a/smoke-tests/src/combined/java/com/google/firebase/testing/remoteconfig/RemoteConfigTest.java b/smoke-tests/src/main/java/com/google/firebase/testing/remoteconfig/RemoteConfigTest.java
similarity index 100%
rename from smoke-tests/src/combined/java/com/google/firebase/testing/remoteconfig/RemoteConfigTest.java
rename to smoke-tests/src/main/java/com/google/firebase/testing/remoteconfig/RemoteConfigTest.java
diff --git a/smoke-tests/src/combined/java/com/google/firebase/testing/storage/StorageTest.java b/smoke-tests/src/main/java/com/google/firebase/testing/storage/StorageTest.java
similarity index 100%
rename from smoke-tests/src/combined/java/com/google/firebase/testing/storage/StorageTest.java
rename to smoke-tests/src/main/java/com/google/firebase/testing/storage/StorageTest.java
diff --git a/subprojects.cfg b/subprojects.cfg
index 4f9d31782..eb97c4a08 100644
--- a/subprojects.cfg
+++ b/subprojects.cfg
@@ -7,6 +7,7 @@ firebase-config
 firebase-config:ktx
 firebase-config:bandwagoner
 firebase-database
+firebase-database:ktx
 firebase-database-collection
 firebase-datatransport
 firebase-firestore
@@ -30,3 +31,4 @@ transport
 transport:transport-api
 transport:transport-backend-cct
 transport:transport-runtime
+
diff --git a/tools/measurement/apksize/apksize.gradle b/tools/measurement/apksize/apksize.gradle
index 8ae08c8ab..eb10c62e2 100644
--- a/tools/measurement/apksize/apksize.gradle
+++ b/tools/measurement/apksize/apksize.gradle
@@ -13,6 +13,7 @@
 // limitations under the License.
 
 import com.google.firebase.gradle.plugins.measurement.apksize.GenerateMeasurementsTask
+import com.google.firebase.gradle.plugins.measurement.aarsize.GenerateMeasurementsTask as GenerateAarMeasurementTask
 import com.google.firebase.gradle.plugins.measurement.UploadMeasurementsTask
 
 apply plugin: "com.android.application"
@@ -42,6 +43,13 @@ task generateApkSizeMeasurements(type: GenerateMeasurementsTask) {
     reportFile = file("$buildDir/size-report.json")
 }
 
+task generateAarSizeMeasurements(type: GenerateAarMeasurementTask) {
+    description 'Builds release aar artifacts and calculates AAR sizes.'
+    group 'Measurements'
+
+    dependsOn (":publishAllToBuildDir")
+}
+
 /**
  * This task uploads the report produced by the generate measurements task to a SQL database.
  *
diff --git a/tools/measurement/apksize/default.gradle b/tools/measurement/apksize/default.gradle
index 5f416c301..626ebd18c 100644
--- a/tools/measurement/apksize/default.gradle
+++ b/tools/measurement/apksize/default.gradle
@@ -30,7 +30,7 @@ android {
     defaultConfig {
         applicationId 'com.google.apksize'
         minSdkVersion project.targetSdkVersion
-	    multiDexEnabled true
+        multiDexEnabled true
         targetSdkVersion project.targetSdkVersion
         versionCode 1
         versionName '1.0'
diff --git a/tools/measurement/apksize/src/inappmessagingdisplay/inappmessaging-display.gradle b/tools/measurement/apksize/src/inappmessagingdisplay/inappmessaging-display.gradle
index 4ab856cce..e5b696752 100644
--- a/tools/measurement/apksize/src/inappmessagingdisplay/inappmessaging-display.gradle
+++ b/tools/measurement/apksize/src/inappmessagingdisplay/inappmessaging-display.gradle
@@ -29,10 +29,8 @@ android {
     }
 }
 dependencies {
-    inappmessagingdisplayImplementation ("com.google.firebase:firebase-inappmessaging-display:19.0.0") {
-        exclude group: "com.google.firebase", module: "firebase-common"
-    }
-    inappmessagingdisplayImplementation ("com.google.firebase:firebase-inappmessaging:19.0.0") {
-        exclude group: "com.google.firebase", module: "firebase-common"
-    }
+    inappmessagingdisplayImplementation project(":firebase-inappmessaging-display")
+    inappmessagingdisplayImplementation project(":firebase-inappmessaging")
+
+    inappmessagingdisplayImplementation "com.google.android.gms:play-services-base:17.0.0"
 }
diff --git a/tools/measurement/apksize/src/inappmessagingdisplay/java/com.google.apksize/InAppMessagingDisplay.java b/tools/measurement/apksize/src/inappmessagingdisplay/java/com.google.apksize/InAppMessagingDisplay.java
index a2710c806..59ac8525a 100644
--- a/tools/measurement/apksize/src/inappmessagingdisplay/java/com.google.apksize/InAppMessagingDisplay.java
+++ b/tools/measurement/apksize/src/inappmessagingdisplay/java/com.google.apksize/InAppMessagingDisplay.java
@@ -16,16 +16,22 @@
 
 import android.app.Activity;
 import android.content.Context;
+import androidx.annotation.NonNull;
 import com.google.android.gms.tasks.Task;
 import com.google.android.gms.tasks.TaskCompletionSource;
 import com.google.firebase.inappmessaging.FirebaseInAppMessagingDisplayCallbacks;
 import com.google.firebase.inappmessaging.display.FirebaseInAppMessagingDisplay;
+import com.google.firebase.inappmessaging.model.Action;
+import com.google.firebase.inappmessaging.model.CampaignMetadata;
 import com.google.firebase.inappmessaging.model.InAppMessage;
+import com.google.firebase.inappmessaging.model.ModalMessage;
+import com.google.firebase.inappmessaging.model.Text;
 
 public class InAppMessagingDisplay implements SampleCode {
   private static final String SAMPLE_TEXT = "My sample text";
   private static final String ACTION_URL = "https://www.example.com";
   private static final String CAMPAIGN_ID = "my_campaign";
+  private static final String CAMPAIGN_NAME = "my_campaign_name";
   private static final String TITLE = "Title";
 
   public static class DisplayCallback implements FirebaseInAppMessagingDisplayCallbacks {
@@ -40,25 +46,25 @@
     }
 
     @Override
-    public Task<Void> messageClicked() {
+    public Task<Void> displayErrorEncountered(InAppMessagingErrorReason inAppMessagingErrorReason) {
       return new TaskCompletionSource<Void>().getTask();
     }
 
     @Override
-    public Task<Void> displayErrorEncountered(InAppMessagingErrorReason InAppMessagingErrorReason) {
+    public Task<Void> messageClicked(@NonNull Action action) {
       return new TaskCompletionSource<Void>().getTask();
     }
   }
 
   @Override
   public void runSample(Context context) {
+    CampaignMetadata metadata = new CampaignMetadata(CAMPAIGN_ID, CAMPAIGN_NAME, true);
     InAppMessage message =
-        InAppMessage.builder()
-            .setBody(InAppMessage.Text.builder().setText(SAMPLE_TEXT).build())
-            .setAction(InAppMessage.Action.builder().setActionUrl(ACTION_URL).build())
-            .setCampaignId(CAMPAIGN_ID)
-            .setTitle(InAppMessage.Text.builder().setText(TITLE).build())
-            .build();
+        ModalMessage.builder()
+            .setBody(Text.builder().setText(SAMPLE_TEXT).build())
+            .setAction(Action.builder().setActionUrl(ACTION_URL).build())
+            .setTitle(Text.builder().setText(TITLE).build())
+            .build(metadata);
 
     // NOTE: Context is *not guaranteed* to be an Activity. This is **fine** in this case because we
     // only want to compile the APK to measure it size, and it will not be run.
diff --git a/transport/transport-backend-cct/src/main/java/com/google/android/datatransport/cct/CctBackendFactory.java b/transport/transport-backend-cct/src/main/java/com/google/android/datatransport/cct/CctBackendFactory.java
index bb44cb14d..ad502317b 100644
--- a/transport/transport-backend-cct/src/main/java/com/google/android/datatransport/cct/CctBackendFactory.java
+++ b/transport/transport-backend-cct/src/main/java/com/google/android/datatransport/cct/CctBackendFactory.java
@@ -26,7 +26,7 @@
 
   static final String LFLG_URL =
       StringMerger.mergeStrings(
-          "hts/frbslgigp.ogepscmv/ieo/eaylg", "tp:/ieaeogn-agolai.o/1frlglgc/o");
+          "hts/frbslgigp.ogepscmv/ieo/eaybtho", "tp:/ieaeogn-agolai.o/1frlglgc/aclg");
 
   @Override
   public TransportBackend create(CreationContext creationContext) {
diff --git a/transport/transport-backend-cct/src/main/java/com/google/android/datatransport/cct/CctTransportBackend.java b/transport/transport-backend-cct/src/main/java/com/google/android/datatransport/cct/CctTransportBackend.java
index 75442e0f4..8f357dd40 100644
--- a/transport/transport-backend-cct/src/main/java/com/google/android/datatransport/cct/CctTransportBackend.java
+++ b/transport/transport-backend-cct/src/main/java/com/google/android/datatransport/cct/CctTransportBackend.java
@@ -55,6 +55,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.TimeZone;
+import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 
 final class CctTransportBackend implements TransportBackend {
@@ -63,6 +64,7 @@
 
   private static final int CONNECTION_TIME_OUT = 30000;
   private static final int READ_TIME_OUT = 40000;
+  private static final String ACCEPT_ENCODING_HEADER_KEY = "Accept-Encoding";
   private static final String CONTENT_ENCODING_HEADER_KEY = "Content-Encoding";
   private static final String GZIP_CONTENT_ENCODING = "gzip";
   private static final String CONTENT_TYPE_HEADER_KEY = "Content-Type";
@@ -226,6 +228,7 @@ private HttpResponse doSend(HttpRequest request) throws IOException {
         "User-Agent", String.format("datatransport/%s android/", BuildConfig.VERSION_NAME));
     connection.setRequestProperty(CONTENT_ENCODING_HEADER_KEY, GZIP_CONTENT_ENCODING);
     connection.setRequestProperty(CONTENT_TYPE_HEADER_KEY, PROTOBUF_CONTENT_TYPE);
+    connection.setRequestProperty(ACCEPT_ENCODING_HEADER_KEY, GZIP_CONTENT_ENCODING);
 
     if (request.apiKey != null) {
       connection.setRequestProperty(API_KEY_HEADER_KEY, request.apiKey);
@@ -244,7 +247,8 @@ private HttpResponse doSend(HttpRequest request) throws IOException {
       channel.write(ByteBuffer.wrap(output.toByteArray()));
       int responseCode = connection.getResponseCode();
       Logging.i(LOG_TAG, "Status Code: " + responseCode);
-      Logging.i(LOG_TAG, "Content-Type:" + connection.getHeaderField("Content-Type"));
+      Logging.i(LOG_TAG, "Content-Type: " + connection.getHeaderField("Content-Type"));
+      Logging.i(LOG_TAG, "Content-Encoding: " + connection.getHeaderField("Content-Encoding"));
 
       if (responseCode == 302 || responseCode == 301) {
         String redirect = connection.getHeaderField("Location");
@@ -254,7 +258,13 @@ private HttpResponse doSend(HttpRequest request) throws IOException {
         return new HttpResponse(responseCode, null, 0);
       }
 
-      InputStream inputStream = connection.getInputStream();
+      InputStream inputStream;
+      String contentEncoding = connection.getHeaderField(CONTENT_ENCODING_HEADER_KEY);
+      if (contentEncoding != null && contentEncoding.equals(GZIP_CONTENT_ENCODING)) {
+        inputStream = new GZIPInputStream(connection.getInputStream());
+      } else {
+        inputStream = connection.getInputStream();
+      }
       try {
         long nextRequestMillis = LogResponse.parseFrom(inputStream).getNextRequestWaitMillis();
         return new HttpResponse(responseCode, null, nextRequestMillis);
diff --git a/transport/transport-backend-cct/src/test/java/com/google/android/datatransport/cct/CctTransportBackendTest.java b/transport/transport-backend-cct/src/test/java/com/google/android/datatransport/cct/CctTransportBackendTest.java
index 7abf716d8..2a7688fda 100644
--- a/transport/transport-backend-cct/src/test/java/com/google/android/datatransport/cct/CctTransportBackendTest.java
+++ b/transport/transport-backend-cct/src/test/java/com/google/android/datatransport/cct/CctTransportBackendTest.java
@@ -43,7 +43,10 @@
 import com.google.android.datatransport.runtime.backends.BackendResponse;
 import com.google.android.datatransport.runtime.time.TestClock;
 import com.google.protobuf.ByteString;
+import java.io.ByteArrayOutputStream;
+import java.nio.charset.Charset;
 import java.util.Arrays;
+import java.util.zip.GZIPOutputStream;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -58,7 +61,8 @@
 
   private static final long INITIAL_WALL_TIME = 200L;
   private static final long INITIAL_UPTIME = 10L;
-  private static final ByteString PAYLOAD = ByteString.copyFrom("TelemetryData".getBytes());
+  private static final ByteString PAYLOAD =
+      ByteString.copyFrom("TelemetryData".getBytes(Charset.defaultCharset()));
   private static final int CODE = 5;
 
   private static final PredicateMatcher<Request, BatchedLogRequest> batchRequestMatcher =
@@ -368,6 +372,37 @@ public void send_whenBackendRedirectsMoreThan5Times_shouldOnlyRedirect4Times() {
     assertEquals(BackendResponse.fatalError(), response);
   }
 
+  @Test
+  public void send_CompressedResponseIsUncompressed() throws Exception {
+    ByteArrayOutputStream output = new ByteArrayOutputStream();
+    GZIPOutputStream gzipOutputStream = new GZIPOutputStream(output);
+    gzipOutputStream.write(
+        LogResponse.newBuilder().setNextRequestWaitMillis(3).build().toByteArray());
+    gzipOutputStream.close();
+
+    stubFor(
+        post(urlEqualTo("/api"))
+            .willReturn(
+                aResponse()
+                    .withStatus(200)
+                    .withHeader("Content-Type", "application/x-protobuf;charset=UTF8;hello=world")
+                    .withHeader("Content-Encoding", "gzip")
+                    .withBody(output.toByteArray())));
+
+    BackendRequest backendRequest = getCCTBackendRequest();
+    wallClock.tick();
+    uptimeClock.tick();
+
+    BackendResponse response = BACKEND.send(backendRequest);
+
+    verify(
+        postRequestedFor(urlEqualTo("/api"))
+            .withHeader("Content-Type", equalTo("application/x-protobuf"))
+            .withHeader("Content-Encoding", equalTo("gzip")));
+
+    assertEquals(BackendResponse.ok(3), response);
+  }
+
   // When there is no active network, the ConnectivityManager returns null when
   // getActiveNetworkInfo() is called.
   @Implements(ConnectivityManager.class)
diff --git a/transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/SchedulerIntegrationTest.java b/transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/SchedulerIntegrationTest.java
index d6115e92e..96ed624e8 100644
--- a/transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/SchedulerIntegrationTest.java
+++ b/transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/SchedulerIntegrationTest.java
@@ -35,6 +35,7 @@
 import com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig;
 import com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;
 import com.google.android.datatransport.runtime.scheduling.locking.Locker;
+import java.nio.charset.Charset;
 import java.util.UUID;
 import org.junit.Before;
 import org.junit.Rule;
@@ -142,7 +143,7 @@ public void scheduler_whenEventScheduledForFirstTime_shouldUpload() {
             .setEventMillis(3)
             .setUptimeMillis(1)
             .setTransportName(testTransport)
-            .setPayload("Data".getBytes())
+            .setPayload("Data".getBytes(Charset.defaultCharset()))
             .build();
     transport.send(stringEvent);
     verify(mockBackend, times(1)).decorate(eq(expectedEvent));
@@ -165,7 +166,7 @@ public void scheduler_whenEventsScheduledWithSameBackend_shouldUploadOnce() {
             .setEventMillis(3)
             .setUptimeMillis(1)
             .setTransportName(testTransport)
-            .setPayload("Data".getBytes())
+            .setPayload("Data".getBytes(Charset.defaultCharset()))
             .build();
     Event<String> stringEvent2 = Event.ofData("Data2");
     EventInternal expectedEvent2 =
@@ -173,7 +174,7 @@ public void scheduler_whenEventsScheduledWithSameBackend_shouldUploadOnce() {
             .setEventMillis(3)
             .setUptimeMillis(1)
             .setTransportName(testTransport)
-            .setPayload("Data2".getBytes())
+            .setPayload("Data2".getBytes(Charset.defaultCharset()))
             .build();
     transport.send(stringEvent);
     transport.send(stringEvent2);
@@ -203,7 +204,7 @@ public void scheduler_whenEventsScheduledWithDifferentBackends_shouldUploadTwice
             .setEventMillis(3)
             .setUptimeMillis(1)
             .setTransportName(testTransport)
-            .setPayload("Data".getBytes())
+            .setPayload("Data".getBytes(Charset.defaultCharset()))
             .build();
     transport.send(stringEvent);
     TransportFactory factory2 = runtime.newFactory(secondBackendName);
diff --git a/transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/UploaderIntegrationTest.java b/transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/UploaderIntegrationTest.java
index 55369f186..bc8eb8c13 100644
--- a/transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/UploaderIntegrationTest.java
+++ b/transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/UploaderIntegrationTest.java
@@ -38,6 +38,7 @@
 import com.google.android.datatransport.runtime.scheduling.persistence.EventStore;
 import com.google.android.datatransport.runtime.scheduling.persistence.PersistedEvent;
 import com.google.android.datatransport.runtime.synchronization.SynchronizationException;
+import java.nio.charset.Charset;
 import java.util.Collections;
 import java.util.UUID;
 import org.junit.Before;
@@ -98,7 +99,7 @@ public void uploader_transientError_shouldReschedule() {
             .setEventMillis(3)
             .setUptimeMillis(1)
             .setTransportName(testTransport)
-            .setPayload("TelemetryData".getBytes())
+            .setPayload("TelemetryData".getBytes(Charset.defaultCharset()))
             .build();
     transport.send(stringEvent);
     verify(mockBackend, times(2))
@@ -135,7 +136,7 @@ public void uploader_ok_shouldNotReschedule() {
             .setEventMillis(3)
             .setUptimeMillis(1)
             .setTransportName(testTransport)
-            .setPayload("TelemetryData".getBytes())
+            .setPayload("TelemetryData".getBytes(Charset.defaultCharset()))
             .build();
     transport.send(stringEvent);
     verify(mockBackend, times(1))
@@ -167,7 +168,7 @@ public void uploader_nonTransientError_shouldNotReschedule() {
             .setEventMillis(3)
             .setUptimeMillis(1)
             .setTransportName(testTransport)
-            .setPayload("TelemetryData".getBytes())
+            .setPayload("TelemetryData".getBytes(Charset.defaultCharset()))
             .build();
     transport.send(stringEvent);
     verify(mockBackend, times(1))
@@ -199,7 +200,7 @@ public void uploader_dbException_shouldReschedule() {
             .setEventMillis(3)
             .setUptimeMillis(1)
             .setTransportName(testTransport)
-            .setPayload("TelemetryData".getBytes())
+            .setPayload("TelemetryData".getBytes(Charset.defaultCharset()))
             .build();
     transport.send(stringEvent);
     verify(spyScheduler, times(1)).schedule(any(), eq(2));
diff --git a/transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/SchedulingModule.java b/transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/SchedulingModule.java
index f1ddce474..20ef1dd0f 100644
--- a/transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/SchedulingModule.java
+++ b/transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/SchedulingModule.java
@@ -21,6 +21,8 @@
 import com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig;
 import com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkScheduler;
 import com.google.android.datatransport.runtime.scheduling.persistence.EventStore;
+import com.google.android.datatransport.runtime.time.Clock;
+import com.google.android.datatransport.runtime.time.Monotonic;
 import dagger.Binds;
 import dagger.Module;
 import dagger.Provides;
@@ -29,11 +31,11 @@
 public abstract class SchedulingModule {
   @Provides
   static WorkScheduler workScheduler(
-      Context context, EventStore eventStore, SchedulerConfig config) {
+      Context context, EventStore eventStore, SchedulerConfig config, @Monotonic Clock clock) {
     if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
       return new JobInfoScheduler(context, eventStore, config);
     } else {
-      return new AlarmManagerScheduler(context, eventStore, config);
+      return new AlarmManagerScheduler(context, eventStore, clock, config);
     }
   }
 
diff --git a/transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/AlarmManagerScheduler.java b/transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/AlarmManagerScheduler.java
index 1706e0975..9a56761cc 100644
--- a/transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/AlarmManagerScheduler.java
+++ b/transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/AlarmManagerScheduler.java
@@ -24,6 +24,7 @@
 import com.google.android.datatransport.runtime.TransportContext;
 import com.google.android.datatransport.runtime.logging.Logging;
 import com.google.android.datatransport.runtime.scheduling.persistence.EventStore;
+import com.google.android.datatransport.runtime.time.Clock;
 
 /**
  * Schedules the service {@link AlarmManagerSchedulerBroadcastReceiver} based on the backendname.
@@ -44,12 +45,15 @@
 
   private final SchedulerConfig config;
 
+  private final Clock clock;
+
   public AlarmManagerScheduler(
-      Context applicationContext, EventStore eventStore, SchedulerConfig config) {
+      Context applicationContext, EventStore eventStore, Clock clock, SchedulerConfig config) {
     this(
         applicationContext,
         eventStore,
         (AlarmManager) applicationContext.getSystemService(Context.ALARM_SERVICE),
+        clock,
         config);
   }
 
@@ -58,10 +62,12 @@ public AlarmManagerScheduler(
       Context applicationContext,
       EventStore eventStore,
       AlarmManager alarmManager,
+      Clock clock,
       SchedulerConfig config) {
     this.context = applicationContext;
     this.eventStore = eventStore;
     this.alarmManager = alarmManager;
+    this.clock = clock;
     this.config = config;
   }
 
@@ -110,6 +116,7 @@ public void schedule(TransportContext transportContext, int attemptNumber) {
         attemptNumber);
 
     PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, 0);
-    this.alarmManager.set(AlarmManager.ELAPSED_REALTIME, scheduleDelay, pendingIntent);
+    this.alarmManager.set(
+        AlarmManager.ELAPSED_REALTIME, clock.getTime() + scheduleDelay, pendingIntent);
   }
 }
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/TransportContextTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/TransportContextTest.java
index 5bb5ac467..099a2678a 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/TransportContextTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/TransportContextTest.java
@@ -24,7 +24,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 public class TransportContextTest {
-  private static final byte[] EXTRAS = "hello".getBytes(Charset.forName("UTF-8"));
+  private static final byte[] EXTRAS = "hello".getBytes(Charset.defaultCharset());
   private static final String BACKEND_NAME = "bknd";
 
   private static final TransportContext CTX =
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/TransportRuntimeTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/TransportRuntimeTest.java
index 23e2a079f..10ddadaaa 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/TransportRuntimeTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/TransportRuntimeTest.java
@@ -31,6 +31,7 @@
 import com.google.android.datatransport.runtime.scheduling.ImmediateScheduler;
 import com.google.android.datatransport.runtime.scheduling.jobscheduling.Uploader;
 import com.google.android.datatransport.runtime.scheduling.jobscheduling.WorkInitializer;
+import java.nio.charset.Charset;
 import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -101,7 +102,7 @@ public void testTransportRuntimeBackendDiscovery() {
             .setEventMillis(eventMillis)
             .setUptimeMillis(uptimeMillis)
             .setTransportName(testTransport)
-            .setPayload("TelemetryData".getBytes())
+            .setPayload("TelemetryData".getBytes(Charset.defaultCharset()))
             .setCode(12)
             .build();
     transport.send(stringEvent);
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/AlarmManagerSchedulerTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/AlarmManagerSchedulerTest.java
index 4df9d3127..45c428a92 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/AlarmManagerSchedulerTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/AlarmManagerSchedulerTest.java
@@ -33,6 +33,9 @@
 import com.google.android.datatransport.runtime.TransportContext;
 import com.google.android.datatransport.runtime.scheduling.persistence.EventStore;
 import com.google.android.datatransport.runtime.scheduling.persistence.InMemoryEventStore;
+import com.google.android.datatransport.runtime.time.Clock;
+import com.google.android.datatransport.runtime.time.TestClock;
+import java.nio.charset.Charset;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -44,6 +47,7 @@
 public class AlarmManagerSchedulerTest {
   private static final long TWENTY_FOUR_HOURS = 24 * 60 * 60 * 1000;
   private static final long THIRTY_SECONDS = 30 * 1000;
+  private static final long INITIAL_TIMESTAMP = 10000000;
 
   private static final TransportContext TRANSPORT_CONTEXT =
       TransportContext.builder().setBackendName("backend1").build();
@@ -55,8 +59,9 @@
   private final AlarmManager alarmManager =
       spy((AlarmManager) context.getSystemService(Context.ALARM_SERVICE));
   private final SchedulerConfig config = SchedulerConfig.getDefault(() -> 1);
+  private final Clock testClock = new TestClock(INITIAL_TIMESTAMP);
   private final AlarmManagerScheduler scheduler =
-      new AlarmManagerScheduler(context, store, alarmManager, config);
+      new AlarmManagerScheduler(context, store, alarmManager, testClock, config);
 
   private Intent getIntent(TransportContext transportContext) {
     Uri.Builder intentDataBuilder = new Uri.Builder();
@@ -85,7 +90,8 @@ public void schedule_longWaitTimeFirstAttempt() {
     scheduler.schedule(TRANSPORT_CONTEXT, 1);
     assertThat(scheduler.isJobServiceOn(intent)).isTrue();
     PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, 0);
-    verify(alarmManager, times(1)).set(eq(AlarmManager.ELAPSED_REALTIME), eq(999999L), any());
+    verify(alarmManager, times(1))
+        .set(eq(AlarmManager.ELAPSED_REALTIME), eq(INITIAL_TIMESTAMP + 999999L), any());
   }
 
   @Test
@@ -96,7 +102,10 @@ public void schedule_noTimeRecordedForBackend() {
     assertThat(scheduler.isJobServiceOn(intent)).isTrue();
     PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, 0);
     verify(alarmManager, times(1))
-        .set(eq(AlarmManager.ELAPSED_REALTIME), eq(THIRTY_SECONDS), any()); // 2^0*DELTA
+        .set(
+            eq(AlarmManager.ELAPSED_REALTIME),
+            eq(INITIAL_TIMESTAMP + THIRTY_SECONDS),
+            any()); // 2^0*DELTA
   }
 
   @Test
@@ -107,7 +116,10 @@ public void schedule_smallWaitTImeFirstAttempt() {
     scheduler.schedule(TRANSPORT_CONTEXT, 1);
     assertThat(scheduler.isJobServiceOn(intent)).isTrue();
     verify(alarmManager, times(1))
-        .set(eq(AlarmManager.ELAPSED_REALTIME), eq(THIRTY_SECONDS), any()); // 2^0*DELTA
+        .set(
+            eq(AlarmManager.ELAPSED_REALTIME),
+            eq(INITIAL_TIMESTAMP + THIRTY_SECONDS),
+            any()); // 2^0*DELTA
   }
 
   @Test
@@ -134,7 +146,10 @@ public void schedule_twoJobs() {
   @Test
   public void schedule_whenExtrasEvailable_transmitsExtras() {
     TransportContext transportContext =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
     Intent intent = getIntent(transportContext);
     assertThat(scheduler.isJobServiceOn(intent)).isFalse();
     scheduler.schedule(transportContext, 1);
@@ -152,10 +167,16 @@ public void schedule_smallWaitTImeFirstAttempt_multiplePriorities() {
 
     assertThat(scheduler.isJobServiceOn(intent1)).isTrue();
     verify(alarmManager, times(1))
-        .set(eq(AlarmManager.ELAPSED_REALTIME), eq(THIRTY_SECONDS), any()); // 2^0*DELTA
+        .set(
+            eq(AlarmManager.ELAPSED_REALTIME),
+            eq(INITIAL_TIMESTAMP + THIRTY_SECONDS),
+            any()); // 2^0*DELTA
 
     assertThat(scheduler.isJobServiceOn(intent2)).isTrue();
     verify(alarmManager, times(1))
-        .set(eq(AlarmManager.ELAPSED_REALTIME), eq(TWENTY_FOUR_HOURS), any()); // 2^0*DELTA
+        .set(
+            eq(AlarmManager.ELAPSED_REALTIME),
+            eq(INITIAL_TIMESTAMP + TWENTY_FOUR_HOURS),
+            any()); // 2^0*DELTA
   }
 }
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/JobInfoSchedulerTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/JobInfoSchedulerTest.java
index 28d34be04..ef5f2acac 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/JobInfoSchedulerTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/JobInfoSchedulerTest.java
@@ -26,6 +26,7 @@
 import com.google.android.datatransport.runtime.TransportContext;
 import com.google.android.datatransport.runtime.scheduling.persistence.EventStore;
 import com.google.android.datatransport.runtime.scheduling.persistence.InMemoryEventStore;
+import java.nio.charset.Charset;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -140,13 +141,17 @@ public void schedule_twoJobs() {
   public void schedule_whenExtrasEvailable_transmitsExtras() {
     String extras = "e1";
     TransportContext transportContext =
-        TransportContext.builder().setBackendName("backend1").setExtras(extras.getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras(extras.getBytes(Charset.defaultCharset()))
+            .build();
     store.recordNextCallTime(transportContext, 1000000);
     scheduler.schedule(transportContext, 1);
     JobInfo jobInfo = jobScheduler.getAllPendingJobs().get(0);
     PersistableBundle bundle = jobInfo.getExtras();
     assertThat(bundle.get(JobInfoScheduler.EXTRAS))
-        .isEqualTo(Base64.encodeToString(extras.getBytes(), Base64.DEFAULT));
+        .isEqualTo(
+            Base64.encodeToString(extras.getBytes(Charset.defaultCharset()), Base64.DEFAULT));
   }
 
   @Test
@@ -154,9 +159,15 @@ public void schedule_withMultipleContexts_whenExtrasAvailable_schedulesForBothCo
     String extras1 = "e1";
     String extras2 = "e2";
     TransportContext ctx1 =
-        TransportContext.builder().setBackendName("backend1").setExtras(extras1.getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras(extras1.getBytes(Charset.defaultCharset()))
+            .build();
     TransportContext ctx2 =
-        TransportContext.builder().setBackendName("backend1").setExtras(extras2.getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras(extras2.getBytes(Charset.defaultCharset()))
+            .build();
 
     store.recordNextCallTime(ctx1, 1000000);
     store.recordNextCallTime(ctx2, 1000000);
@@ -166,12 +177,14 @@ public void schedule_withMultipleContexts_whenExtrasAvailable_schedulesForBothCo
     JobInfo jobInfo = jobScheduler.getAllPendingJobs().get(0);
     PersistableBundle bundle = jobInfo.getExtras();
     assertThat(bundle.get(JobInfoScheduler.EXTRAS))
-        .isEqualTo(Base64.encodeToString(extras1.getBytes(), Base64.DEFAULT));
+        .isEqualTo(
+            Base64.encodeToString(extras1.getBytes(Charset.defaultCharset()), Base64.DEFAULT));
 
     jobInfo = jobScheduler.getAllPendingJobs().get(1);
     bundle = jobInfo.getExtras();
     assertThat(bundle.get(JobInfoScheduler.EXTRAS))
-        .isEqualTo(Base64.encodeToString(extras2.getBytes(), Base64.DEFAULT));
+        .isEqualTo(
+            Base64.encodeToString(extras2.getBytes(Charset.defaultCharset()), Base64.DEFAULT));
   }
 
   @Test
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/UploaderTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/UploaderTest.java
index d1e178d6e..69960e064 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/UploaderTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/UploaderTest.java
@@ -31,6 +31,7 @@
 import com.google.android.datatransport.runtime.scheduling.persistence.InMemoryEventStore;
 import com.google.android.datatransport.runtime.scheduling.persistence.PersistedEvent;
 import com.google.android.datatransport.runtime.synchronization.SynchronizationGuard;
+import java.nio.charset.Charset;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -57,7 +58,7 @@
           .setTransportName("42")
           .setEventMillis(1)
           .setUptimeMillis(2)
-          .setPayload("Hello".getBytes())
+          .setPayload("Hello".getBytes(Charset.defaultCharset()))
           .addMetadata("key1", "value1")
           .addMetadata("key2", "value2")
           .build();
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/WorkInitializerTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/WorkInitializerTest.java
index 4517de5c0..b97536e4b 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/WorkInitializerTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/jobscheduling/WorkInitializerTest.java
@@ -22,6 +22,7 @@
 import com.google.android.datatransport.runtime.TransportContext;
 import com.google.android.datatransport.runtime.scheduling.persistence.EventStore;
 import com.google.android.datatransport.runtime.synchronization.SynchronizationGuard.CriticalSection;
+import java.nio.charset.Charset;
 import java.util.Arrays;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -41,7 +42,10 @@ public void test() {
     TransportContext ctx1 =
         TransportContext.builder().setBackendName("backend1").setExtras(null).build();
     TransportContext ctx2 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
 
     when(mockStore.loadActiveContexts()).thenReturn(Arrays.asList(ctx1, ctx2));
 
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/InMemoryEventStoreTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/InMemoryEventStoreTest.java
index 477793a76..faa28219e 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/InMemoryEventStoreTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/InMemoryEventStoreTest.java
@@ -18,6 +18,7 @@
 
 import com.google.android.datatransport.runtime.EventInternal;
 import com.google.android.datatransport.runtime.TransportContext;
+import java.nio.charset.Charset;
 import java.util.Collections;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -33,7 +34,7 @@
           .setTransportName("transport")
           .setEventMillis(1)
           .setUptimeMillis(2)
-          .setPayload("hello".getBytes())
+          .setPayload("hello".getBytes(Charset.defaultCharset()))
           .build();
   private static final PersistedEvent TEST_PERSISTED_EVENT =
       PersistedEvent.create(1, TRANSPORT_CONTEXT, TEST_EVENT);
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java
index 124786497..73fa14420 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java
@@ -24,6 +24,7 @@
 import com.google.android.datatransport.runtime.time.Clock;
 import com.google.android.datatransport.runtime.time.TestClock;
 import com.google.android.datatransport.runtime.time.UptimeClock;
+import java.nio.charset.Charset;
 import java.util.Arrays;
 import java.util.Collections;
 import org.junit.Test;
@@ -42,7 +43,7 @@
           .setTransportName("42")
           .setEventMillis(1)
           .setUptimeMillis(2)
-          .setPayload("Hello".getBytes())
+          .setPayload("Hello".getBytes(Charset.defaultCharset()))
           .addMetadata("key1", "value1")
           .addMetadata("key2", "value2")
           .build();
@@ -74,16 +75,20 @@ public void persist_correctlyRoundTrips() {
   @Test
   public void persist_withEventsOfDifferentPriority_shouldEndBeStoredUnderDifferentContexts() {
     TransportContext ctx1 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
     TransportContext ctx2 =
         TransportContext.builder()
             .setBackendName("backend1")
-            .setExtras("e1".getBytes())
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
             .setPriority(Priority.VERY_LOW)
             .build();
 
     EventInternal event1 = EVENT;
-    EventInternal event2 = EVENT.toBuilder().setPayload("World".getBytes()).build();
+    EventInternal event2 =
+        EVENT.toBuilder().setPayload("World".getBytes(Charset.defaultCharset())).build();
 
     PersistedEvent newEvent1 = store.persist(ctx1, event1);
     PersistedEvent newEvent2 = store.persist(ctx2, event2);
@@ -95,12 +100,19 @@ public void persist_withEventsOfDifferentPriority_shouldEndBeStoredUnderDifferen
   @Test
   public void persist_withEventsOfDifferentExtras_shouldEndBeStoredUnderDifferentContexts() {
     TransportContext ctx1 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
     TransportContext ctx2 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e2".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e2".getBytes(Charset.defaultCharset()))
+            .build();
 
     EventInternal event1 = EVENT;
-    EventInternal event2 = EVENT.toBuilder().setPayload("World".getBytes()).build();
+    EventInternal event2 =
+        EVENT.toBuilder().setPayload("World".getBytes(Charset.defaultCharset())).build();
 
     PersistedEvent newEvent1 = store.persist(ctx1, event1);
     PersistedEvent newEvent2 = store.persist(ctx2, event2);
@@ -112,9 +124,15 @@ public void persist_withEventsOfDifferentExtras_shouldEndBeStoredUnderDifferentC
   @Test
   public void persist_withEventsOfSameExtras_shouldEndBeStoredUnderSameContexts() {
     TransportContext ctx1 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
     TransportContext ctx2 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
 
     PersistedEvent newEvent1 = store.persist(ctx1, EVENT);
     PersistedEvent newEvent2 = store.persist(ctx2, EVENT);
@@ -127,7 +145,10 @@ public void persist_sameBackendswithDifferentExtras_shouldEndBeStoredUnderDiffer
     TransportContext ctx1 =
         TransportContext.builder().setBackendName("backend1").setExtras(null).build();
     TransportContext ctx2 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
 
     PersistedEvent newEvent1 = store.persist(ctx1, EVENT);
     PersistedEvent newEvent2 = store.persist(ctx2, EVENT);
@@ -279,7 +300,10 @@ public void loadActiveContexts_whenTwoContextsAvailable_shouldReturnThem() {
     TransportContext ctx1 =
         TransportContext.builder().setBackendName("backend1").setExtras(null).build();
     TransportContext ctx2 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
 
     store.persist(ctx1, EVENT);
     store.persist(ctx2, EVENT);
@@ -292,7 +316,10 @@ public void loadActiveContexts_whenTwoContextsWithOneAvailable_shouldReturnIt()
     TransportContext ctx1 =
         TransportContext.builder().setBackendName("backend1").setExtras(null).build();
     TransportContext ctx2 =
-        TransportContext.builder().setBackendName("backend1").setExtras("e1".getBytes()).build();
+        TransportContext.builder()
+            .setBackendName("backend1")
+            .setExtras("e1".getBytes(Charset.defaultCharset()))
+            .build();
 
     store.persist(ctx1, EVENT);
     PersistedEvent persistedEvent2 = store.persist(ctx2, EVENT);
diff --git a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManagerTest.java b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManagerTest.java
index f2a3fa6ff..63dffe4c2 100644
--- a/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManagerTest.java
+++ b/transport/transport-runtime/src/test/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManagerTest.java
@@ -23,6 +23,7 @@
 import com.google.android.datatransport.runtime.TransportContext;
 import com.google.android.datatransport.runtime.time.TestClock;
 import com.google.android.datatransport.runtime.time.UptimeClock;
+import java.nio.charset.Charset;
 import java.util.Map;
 import org.junit.Assert;
 import org.junit.Test;
@@ -38,7 +39,7 @@
   private static final TransportContext CONTEXT2 =
       TransportContext.builder()
           .setBackendName("b2")
-          .setExtras("e2".getBytes())
+          .setExtras("e2".getBytes(Charset.defaultCharset()))
           .build()
           .withPriority(Priority.VERY_LOW);
 
@@ -47,13 +48,13 @@
           .setTransportName("42")
           .setEventMillis(1)
           .setUptimeMillis(2)
-          .setPayload("Hello".getBytes())
+          .setPayload("Hello".getBytes(Charset.defaultCharset()))
           .addMetadata("key1", "value1")
           .addMetadata("key2", "value2")
           .build();
 
   private static final EventInternal EVENT2 =
-      EVENT1.toBuilder().setPayload("World".getBytes()).build();
+      EVENT1.toBuilder().setPayload("World".getBytes(Charset.defaultCharset())).build();
 
   private static final long HOUR = 60 * 60 * 1000;
   private static final EventStoreConfig CONFIG =
