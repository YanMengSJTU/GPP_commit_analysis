diff --git a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActivityTest.java b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActivityTest.java
index cfae14d7..b4698911 100644
--- a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActivityTest.java
+++ b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActivityTest.java
@@ -20,14 +20,12 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.view.View;
 
-import com.example.app.R;
 import com.example.app.tweetui.TweetActivity;
 import com.squareup.spoon.Spoon;
 
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.Espresso.registerIdlingResources;
 import static android.support.test.espresso.action.ViewActions.scrollTo;
-import static android.support.test.espresso.matcher.ViewMatchers.withId;
 
 /**
  * UI/integration tests of Tweet views added to the layout via code (requires network connectivity).
diff --git a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
index a315e424..4cad4689 100644
--- a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
+++ b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
@@ -21,7 +21,7 @@
 import android.support.test.espresso.matcher.BoundedMatcher;
 import android.view.View;
 import android.widget.TextView;
-import com.example.app.R;
+
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 
@@ -30,7 +30,6 @@
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
 import static android.support.test.espresso.matcher.ViewMatchers.*;
-import static org.hamcrest.Matchers.allOf;
 import static org.hamcrest.Matchers.not;
 
 public abstract class TweetAsserts {
diff --git a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetActivityTest.java b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetActivityTest.java
index 12286b50..db162f1a 100644
--- a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetActivityTest.java
+++ b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetActivityTest.java
@@ -19,14 +19,12 @@
 
 import android.test.ActivityInstrumentationTestCase2;
 
-import com.example.app.R;
 import com.example.app.tweetui.XmlTweetActivity;
 import com.squareup.spoon.Spoon;
 
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.Espresso.registerIdlingResources;
 import static android.support.test.espresso.action.ViewActions.scrollTo;
-import static android.support.test.espresso.matcher.ViewMatchers.withId;
 
 /**
  * UI/integration tests of XML Tweet views (requires network connectivity).
diff --git a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetViewIdlingResource.java b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetViewIdlingResource.java
index 8c7c59dd..9a8fe209 100644
--- a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetViewIdlingResource.java
+++ b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetViewIdlingResource.java
@@ -45,7 +45,7 @@ public boolean isIdleNow() {
         // TODO: BaseTweetView should provide an indication that rendering has completed to use here
         // XML TweetViews set a Tweet with only an id, before a Tweet is loaded from the network,
         // checking getTweet() is non-null is not sufficient.
-        if (view.getTweet() != null && view.getTweet().text != null) {
+        if (view.getTweet() != null && view.getTweet().getText() != null) {
             callback.onTransitionToIdle();
             return true;
         }
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TimelineActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TimelineActivity.java
index a8c6f3fa..04f60fae 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TimelineActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TimelineActivity.java
@@ -62,6 +62,7 @@ protected void onCreate(Bundle savedInstanceState) {
             public void success(Result<Tweet> result) {
                 // Intentionally blank
             }
+
             @Override
             public void failure(TwitterException exception) {
                 if (exception instanceof TwitterAuthException) {
@@ -88,8 +89,11 @@ public void failure(TwitterException exception) {
         // set custom scroll listener to enable swipe refresh layout only when at list top
         listView.setOnScrollListener(new AbsListView.OnScrollListener() {
             boolean enableRefresh;
+
             @Override
-            public void onScrollStateChanged(AbsListView view, int scrollState) {}
+            public void onScrollStateChanged(AbsListView view, int scrollState) {
+            }
+
             @Override
             public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,
                                  int totalItemCount) {
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TweetPojoActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TweetPojoActivity.java
index 3e91cf20..0dd08a88 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TweetPojoActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TweetPojoActivity.java
@@ -92,8 +92,9 @@ public void onCreate(Bundle savedInstanceState) {
             InputStreamReader reader = null;
             try {
                 reader = new InputStreamReader(getResources().openRawResource(R.raw.tweets));
-                return gson.fromJson(reader, new TypeToken<ArrayList<Tweet>>() {}.getType());
-            }finally {
+                return gson.fromJson(reader, new TypeToken<ArrayList<Tweet>>() {
+                }.getType());
+            } finally {
                 CommonUtils.closeQuietly(reader);
             }
         }
diff --git a/samples/app/src/main/java/com/example/app/tweetui/UniqueTweetActivity.java b/samples/app/src/main/java/com/example/app/tweetui/UniqueTweetActivity.java
index ecb8575f..7f09698d 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/UniqueTweetActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/UniqueTweetActivity.java
@@ -75,11 +75,11 @@ public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
             final Tweet knownTweet = new TweetBuilder()
                     .setId(3L)
                     .setUser(new UserBuilder()
-                                    .setId(User.INVALID_ID)
-                                    .setName("name")
-                                    .setScreenName("namename")
-                                    .setVerified(false)
-                                    .build()
+                            .setId(User.Companion.getINVALID_ID())
+                            .setName("name")
+                            .setScreenName("namename")
+                            .setVerified(false)
+                            .build()
                     )
                     .setText("Preloaded text of a Tweet that couldn't be loaded.")
                     .setCreatedAt("Wed Jun 06 20:07:10 +0000 2012")
diff --git a/tweet-composer/build.gradle b/tweet-composer/build.gradle
index 58480667..4eab4987 100644
--- a/tweet-composer/build.gradle
+++ b/tweet-composer/build.gradle
@@ -69,6 +69,7 @@ dependencies {
 
     androidTestCompile dependency.mockito
     androidTestCompile dependency.dexmakerMockito
+    androidTestCompile dependency.junit
 
     testCompile dependency.mockito
     testCompile dependency.junit
diff --git a/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java b/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
index 5a8d0f18..53c75448 100644
--- a/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
+++ b/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
@@ -24,10 +24,11 @@
 import com.twitter.sdk.android.core.TwitterCoreTestUtils;
 import com.twitter.sdk.android.core.TwitterTestUtils;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import java.util.concurrent.ThreadPoolExecutor;
 
+import static org.hamcrest.CoreMatchers.is;
 import static org.mockito.Mockito.mock;
 
 public class TweetComposerTest extends AndroidTestCase {
@@ -54,12 +55,12 @@ public void tearDown() throws Exception {
 
     public void testGetVersion() {
         final String version = BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER;
-        Assert.assertEquals(version, tweetComposer.getVersion());
+        Assert.assertThat(tweetComposer.getVersion(), is(version));
     }
 
     public void testGetIdentifier() {
         final String identifier = BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID;
-        Assert.assertEquals(identifier, tweetComposer.getIdentifier());
+        Assert.assertThat(tweetComposer.getIdentifier(), is(identifier));
     }
 
     public void testGetInstance_twitterNotInitialized() {
@@ -71,7 +72,7 @@ public void testGetInstance_twitterNotInitialized() {
             TweetComposer.getInstance();
             Assert.fail("Should fail if Twitter is not initialized");
         } catch (IllegalStateException e) {
-            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, e.getMessage());
+            Assert.assertThat(e.getMessage(), is(TWITTER_NOT_INIT_ERROR_MSG));
         }
     }
 }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.kt b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.kt
index 09e6036e..af43e5dc 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.kt
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.kt
@@ -23,6 +23,6 @@ import com.twitter.sdk.android.core.internal.scribe.ScribeItem
 /**
  * ScribeClient writes tweet-composer scribe events.
  */
-internal interface ScribeClient {
+interface ScribeClient {
     fun scribe(eventNamespace: EventNamespace, items: List<ScribeItem>)
 }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.kt b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.kt
index 3b3d5ac5..42fe9cc1 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.kt
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.kt
@@ -24,7 +24,7 @@ import com.twitter.sdk.android.core.internal.scribe.ScribeItem
 /**
  * ScribeClientImpl is a ScribeClient that writes scribes using a twitter-core DefaultScribeClient.
  */
-internal class ScribeClientImpl(private val scribeClient: DefaultScribeClient?) : ScribeClient {
+class ScribeClientImpl(private val scribeClient: DefaultScribeClient?) : ScribeClient {
 
     override fun scribe(eventNamespace: EventNamespace, items: List<ScribeItem>) {
         scribeClient?.scribe(eventNamespace, items)
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
index e44a0489..1252efa5 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
@@ -20,15 +20,23 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterSession;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.*;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.nullValue;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
 public class ComposerActivityTest {
@@ -51,7 +59,7 @@ public void setUp() {
     @Test
     public void testBuilder() {
         final ComposerActivity.Builder builder = new ComposerActivity.Builder(mockContext);
-        assertNotNull(builder);
+        assertThat(builder, notNullValue());
     }
 
     @Test
@@ -60,7 +68,7 @@ public void testBuilder_nullContext() {
             new ComposerActivity.Builder(null);
             fail("expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
-            assertEquals("Context must not be null", e.getMessage());
+            assertThat(e.getMessage(), is("Context must not be null"));
         }
     }
 
@@ -70,7 +78,7 @@ public void testBuilderSession() {
                 .session(mockSession)
                 .createIntent();
         verify(mockSession).getAuthToken();
-        assertEquals(mockAuthToken, intent.getParcelableExtra(ComposerActivity.EXTRA_USER_TOKEN));
+        assertThat(intent.getParcelableExtra(ComposerActivity.EXTRA_USER_TOKEN), is(mockAuthToken));
     }
 
     @Test
@@ -79,7 +87,7 @@ public void testBuilderSession_nullSession() {
             new ComposerActivity.Builder(mockContext).session(null);
             fail("expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
-            assertEquals("TwitterSession must not be null", e.getMessage());
+            assertThat(e.getMessage(), is("TwitterSession must not be null"));
         }
     }
 
@@ -90,7 +98,7 @@ public void testBuilderSession_nullAuthToken() {
             new ComposerActivity.Builder(mockContext).session(mockSession);
             fail("expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
-            assertEquals("TwitterSession token must not be null", e.getMessage());
+            assertThat(e.getMessage(), is("TwitterSession token must not be null"));
         }
     }
 
@@ -99,7 +107,7 @@ public void testBuilderSession_sessionNotSet() {
         try {
             new ComposerActivity.Builder(mockContext).createIntent();
         } catch (IllegalStateException e) {
-            assertEquals("Must set a TwitterSession", e.getMessage());
+            assertThat(e.getMessage(), is("Must set a TwitterSession"));
         }
     }
 
@@ -109,7 +117,7 @@ public void testBuilderDarkTheme() {
                 .session(mockSession)
                 .darkTheme()
                 .createIntent();
-        assertEquals(R.style.ComposerDark, intent.getIntExtra(ComposerActivity.EXTRA_THEME, -1));
+        assertThat(intent.getIntExtra(ComposerActivity.EXTRA_THEME, -1), is(R.style.ComposerDark));
     }
 
     @Test
@@ -117,7 +125,7 @@ public void testBuilder_defaultLightTheme() {
         final Intent intent = new ComposerActivity.Builder(mockContext)
                 .session(mockSession)
                 .createIntent();
-        assertEquals(R.style.ComposerLight, intent.getIntExtra(ComposerActivity.EXTRA_THEME, -1));
+        assertThat(intent.getIntExtra(ComposerActivity.EXTRA_THEME, -1), is(R.style.ComposerLight));
     }
 
     @Test
@@ -127,7 +135,7 @@ public void testBuilderText() {
                 .text(ANY_TEXT)
                 .createIntent();
 
-        assertEquals(ANY_TEXT, intent.getStringExtra(ComposerActivity.EXTRA_TEXT));
+        assertThat(intent.getStringExtra(ComposerActivity.EXTRA_TEXT), is(ANY_TEXT));
     }
 
     @Test
@@ -137,7 +145,7 @@ public void testBuilder_emptyArray() {
                 .hashtags()
                 .createIntent();
 
-        assertNull(intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS));
+        assertThat(intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS), nullValue());
     }
 
     @Test
@@ -147,7 +155,7 @@ public void testBuilder_validHashtags() {
                 .hashtags(ANY_HASHTAG)
                 .createIntent();
 
-        assertEquals(ANY_HASHTAG, intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS));
+        assertThat(intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS), is(ANY_HASHTAG));
     }
 
     @Test
@@ -157,7 +165,7 @@ public void testBuilder_invalidHashtags() {
                 .hashtags("NotHashtag")
                 .createIntent();
 
-        assertNull(intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS));
+        assertThat(intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS), nullValue());
     }
 
     @Test
@@ -166,6 +174,6 @@ public void testBuilderImage() {
                 .session(mockSession)
                 .image(mockUri)
                 .createIntent();
-        assertEquals(mockUri, intent.getParcelableExtra(ComposerActivity.EXTRA_IMAGE_URI));
+        assertThat(intent.getParcelableExtra(ComposerActivity.EXTRA_IMAGE_URI), is(mockUri));
     }
 }
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
index 80590f89..59073ce4 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
@@ -27,6 +27,7 @@
 import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.services.AccountService;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -36,9 +37,7 @@
 import retrofit2.Call;
 
 import static com.twitter.sdk.android.tweetcomposer.TweetUploadService.TWEET_COMPOSE_CANCEL;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
@@ -93,7 +92,7 @@ public void setUp() {
     public void testComposerController() {
         controller = new ComposerController(mockComposerView, mockTwitterSession, Uri.EMPTY,
                 ANY_TEXT, ANY_HASHTAG, mockFinisher, mockDependencyProvider);
-        assertEquals(mockTwitterSession, controller.session);
+        Assert.assertThat(controller.session, is(mockTwitterSession));
         // assert that
         // - sets callbacks on the view
         // - sets initial Tweet text and cursor position
@@ -113,36 +112,36 @@ public void testTweetTextLength() {
         controller = new ComposerController(mockComposerView, mockTwitterSession, Uri.EMPTY,
                 ANY_TEXT, ANY_HASHTAG, mockFinisher, mockDependencyProvider);
 
-        assertEquals(0, controller.tweetTextLength(null));
-        assertEquals(0, controller.tweetTextLength(""));
-        assertEquals(1, controller.tweetTextLength("☃"));
-        assertEquals(5, controller.tweetTextLength("tweet"));
-        assertEquals(39, controller.tweetTextLength("tweet with link https://example.com"));
-        assertEquals(23, controller.tweetTextLength("https://example.com/foo/bar/foo"));
+        Assert.assertThat(controller.tweetTextLength(null), is(0));
+        Assert.assertThat(controller.tweetTextLength(""), is(0));
+        Assert.assertThat(controller.tweetTextLength("☃"), is(1));
+        Assert.assertThat(controller.tweetTextLength("tweet"), is(5));
+        Assert.assertThat(controller.tweetTextLength("tweet with link https://example.com"), is(39));
+        Assert.assertThat(controller.tweetTextLength("https://example.com/foo/bar/foo"), is(23));
     }
 
     @Test
     public void testRemainingCharCount() {
-        assertEquals(140, ComposerController.remainingCharCount(0));
-        assertEquals(139, ComposerController.remainingCharCount(1));
-        assertEquals(0, ComposerController.remainingCharCount(140));
-        assertEquals(-1, ComposerController.remainingCharCount(141));
+        Assert.assertThat(ComposerController.remainingCharCount(0), is(140));
+        Assert.assertThat(ComposerController.remainingCharCount(1), is(139));
+        Assert.assertThat(ComposerController.remainingCharCount(140), is(0));
+        Assert.assertThat(ComposerController.remainingCharCount(141), is(-1));
     }
 
     @Test
     public void testIsPostEnabled() {
-        assertFalse(ComposerController.isPostEnabled(0));
-        assertTrue(ComposerController.isPostEnabled(1));
-        assertTrue(ComposerController.isPostEnabled(140));
-        assertFalse(ComposerController.isPostEnabled(141));
+        Assert.assertThat(ComposerController.isPostEnabled(0), is(false));
+        Assert.assertThat(ComposerController.isPostEnabled(1), is(true));
+        Assert.assertThat(ComposerController.isPostEnabled(140), is(true));
+        Assert.assertThat(ComposerController.isPostEnabled(141), is(false));
     }
 
     @Test
     public void testIsTweetTextOverflow() {
-        assertFalse(ComposerController.isTweetTextOverflow(0));
-        assertFalse(ComposerController.isTweetTextOverflow(1));
-        assertFalse(ComposerController.isTweetTextOverflow(140));
-        assertTrue(ComposerController.isTweetTextOverflow(141));
+        Assert.assertThat(ComposerController.isTweetTextOverflow(0), is(false));
+        Assert.assertThat(ComposerController.isTweetTextOverflow(1), is(false));
+        Assert.assertThat(ComposerController.isTweetTextOverflow(140), is(false));
+        Assert.assertThat(ComposerController.isTweetTextOverflow(141), is(true));
     }
 
     @Test
@@ -192,10 +191,9 @@ public void testComposerCallbacksImpl_onTweetPost() {
         final ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
         verify(mockContext).startService(intentCaptor.capture());
         final Intent intent = intentCaptor.getValue();
-        assertEquals(TweetUploadService.class.getCanonicalName(),
-                intent.getComponent().getClassName());
-        assertEquals(mockAuthToken, intent.getParcelableExtra(TweetUploadService.EXTRA_USER_TOKEN));
-        assertEquals(Uri.EMPTY, intent.getParcelableExtra(TweetUploadService.EXTRA_IMAGE_URI));
+        Assert.assertThat(intent.getComponent().getClassName(), is(TweetUploadService.class.getCanonicalName()));
+        Assert.assertThat(intent.getParcelableExtra(TweetUploadService.EXTRA_USER_TOKEN), is(mockAuthToken));
+        Assert.assertThat(intent.getParcelableExtra(TweetUploadService.EXTRA_IMAGE_URI), is(Uri.EMPTY));
         verify(mockComposerScribeClient).click(eq(ScribeConstants.SCRIBE_TWEET_ELEMENT));
     }
 
@@ -222,6 +220,6 @@ public void testSendCancelBroadcast() {
         verify(mockContext).sendBroadcast(intentCaptor.capture());
 
         final Intent capturedIntent = intentCaptor.getValue();
-        assertEquals(TWEET_COMPOSE_CANCEL, capturedIntent.getAction());
+        Assert.assertThat(capturedIntent.getAction(), is(TWEET_COMPOSE_CANCEL));
     }
 }
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClientTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClientTest.java
index 4f8961b1..0b5b1f8f 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClientTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClientTest.java
@@ -18,6 +18,8 @@
 
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -30,7 +32,9 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.junit.Assert.*;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
@@ -55,7 +59,7 @@ public void setUp() {
     @Test
     public void testConstructor() {
         composerScribeClient = new ComposerScribeClientImpl(mockClient);
-        assertNotNull(composerScribeClient);
+        Assert.assertThat(composerScribeClient, notNullValue());
     }
 
     @Test
@@ -64,7 +68,7 @@ public void testConstructor_null() {
             new ComposerScribeClientImpl(null);
             fail("expected scribeClient NullPointerException");
         } catch (NullPointerException npe) {
-            assertEquals("scribeClient must not be null", npe.getMessage());
+            Assert.assertThat(npe.getMessage(), is("scribeClient must not be null"));
         }
     }
 
@@ -73,8 +77,8 @@ public void testImpression() {
         composerScribeClient.impression();
         verify(mockClient).scribe(eventNamespaceCaptor.capture(), scribeItemsCaptor.capture());
         final EventNamespace eventNamespace = eventNamespaceCaptor.getValue();
-        assertEquals(expectedImpression(), eventNamespace);
-        assertEquals(Collections.EMPTY_LIST, scribeItemsCaptor.getValue());
+        Assert.assertThat(eventNamespace, is(expectedImpression()));
+        Assert.assertThat(scribeItemsCaptor.getValue(), is(Collections.EMPTY_LIST));
     }
 
     @Test
@@ -82,8 +86,8 @@ public void testTweetClick() {
         composerScribeClient.click(ScribeConstants.SCRIBE_TWEET_ELEMENT);
         verify(mockClient).scribe(eventNamespaceCaptor.capture(), scribeItemsCaptor.capture());
         final EventNamespace eventNamespace = eventNamespaceCaptor.getValue();
-        assertEquals(expectedTweetClick(), eventNamespace);
-        assertEquals(Collections.EMPTY_LIST, scribeItemsCaptor.getValue());
+        Assert.assertThat(eventNamespace, is(expectedTweetClick()));
+        Assert.assertThat(scribeItemsCaptor.getValue(), is(Collections.EMPTY_LIST));
     }
 
     @Test
@@ -91,8 +95,8 @@ public void testCancelClick() {
         composerScribeClient.click(ScribeConstants.SCRIBE_CANCEL_ELEMENT);
         verify(mockClient).scribe(eventNamespaceCaptor.capture(), scribeItemsCaptor.capture());
         final EventNamespace eventNamespace = eventNamespaceCaptor.getValue();
-        assertEquals(expectedCancelClick(), eventNamespace);
-        assertEquals(Collections.EMPTY_LIST, scribeItemsCaptor.getValue());
+        Assert.assertThat(eventNamespace, is(expectedCancelClick()));
+        Assert.assertThat(scribeItemsCaptor.getValue(), is(Collections.EMPTY_LIST));
     }
 
     private EventNamespace expectedImpression() {
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/FileUtilsTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/FileUtilsTest.java
index 253baf0b..7dc85d3c 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/FileUtilsTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/FileUtilsTest.java
@@ -20,6 +20,7 @@
 import android.net.Uri;
 import android.webkit.MimeTypeMap;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -29,8 +30,7 @@
 
 import java.io.File;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class FileUtilsTest {
@@ -53,43 +53,43 @@ public void testIsMediaDocumentAuthority() {
                 .authority("com.android.providers.media.documents")
                 .path("image%3A59161")
                 .build();
-        assertTrue(FileUtils.isMediaDocumentAuthority(uri));
+        Assert.assertThat(FileUtils.isMediaDocumentAuthority(uri), is(true));
     }
 
     @Test
     public void testIsContentScheme() {
         final Uri uri = new Uri.Builder().scheme("content").build();
-        assertTrue(FileUtils.isContentScheme(uri));
+        Assert.assertThat(FileUtils.isContentScheme(uri), is(true));
     }
 
     @Test
     public void testIsFileScheme() {
         final Uri uri = new Uri.Builder().scheme("file").build();
-        assertTrue(FileUtils.isFileScheme(uri));
+        Assert.assertThat(FileUtils.isFileScheme(uri), is(true));
     }
 
     @Test
     public void testGetMimeType() {
-        assertEquals("image/png", FileUtils.getMimeType(new File("file.png")));
-        assertEquals("image/jpeg", FileUtils.getMimeType(new File("file.jpeg")));
-        assertEquals("image/jpeg", FileUtils.getMimeType(new File("file.jpeg")));
-        assertEquals("application/octet-stream", FileUtils.getMimeType(new File("")));
+        Assert.assertThat(FileUtils.getMimeType(new File("file.png")), is("image/png"));
+        Assert.assertThat(FileUtils.getMimeType(new File("file.jpeg")), is("image/jpeg"));
+        Assert.assertThat(FileUtils.getMimeType(new File("file.jpeg")), is("image/jpeg"));
+        Assert.assertThat(FileUtils.getMimeType(new File("")), is("application/octet-stream"));
     }
 
     @Test
     public void testExtensionToMimeType() {
-        assertEquals("image/png", mimeTypeMap.getMimeTypeFromExtension("png"));
-        assertEquals("image/jpeg", mimeTypeMap.getMimeTypeFromExtension("jpg"));
-        assertEquals("image/jpeg", mimeTypeMap.getMimeTypeFromExtension("jpeg"));
-        assertEquals(null, mimeTypeMap.getMimeTypeFromExtension(""));
+        Assert.assertThat(mimeTypeMap.getMimeTypeFromExtension("png"), is("image/png"));
+        Assert.assertThat(mimeTypeMap.getMimeTypeFromExtension("jpg"), is("image/jpeg"));
+        Assert.assertThat(mimeTypeMap.getMimeTypeFromExtension("jpeg"), is("image/jpeg"));
+        Assert.assertThat(mimeTypeMap.getMimeTypeFromExtension(""), nullValue());
     }
 
     @Test
     public void testGetExtension() {
-        assertEquals("", FileUtils.getExtension(""));
-        assertEquals("", FileUtils.getExtension("file"));
-        assertEquals("", FileUtils.getExtension("file."));
-        assertEquals("png", FileUtils.getExtension("file.png"));
-        assertEquals("jpg", FileUtils.getExtension("file.jpg"));
+        Assert.assertThat(FileUtils.getExtension(""), is(""));
+        Assert.assertThat(FileUtils.getExtension("file"), is(""));
+        Assert.assertThat(FileUtils.getExtension("file."), is(""));
+        Assert.assertThat(FileUtils.getExtension("file.png"), is("png"));
+        Assert.assertThat(FileUtils.getExtension("file.jpg"), is("jpg"));
     }
 }
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
index 35f4756f..94648656 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
@@ -30,6 +30,7 @@
 import com.twitter.sdk.android.core.services.MediaService;
 import com.twitter.sdk.android.core.services.StatusesService;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -44,7 +45,7 @@
 import retrofit2.Call;
 import retrofit2.mock.Calls;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyLong;
 import static org.mockito.Mockito.anyString;
@@ -61,19 +62,16 @@
     private static final String EXPECTED_TWEET_TEXT = "tweet text";
 
     private Context context;
-    private TwitterApiClient mockTwitterApiClient;
     private StatusesService mockStatusesService;
     private MediaService mockMediaService;
-    private TweetUploadService.DependencyProvider mockDependencyProvider;
     private TweetUploadService service;
-    private Tweet tweet;
 
     @Before
     public void setUp() {
         context = RuntimeEnvironment.application;
         mockMediaService = mock(MediaService.class);
         mockStatusesService = mock(StatusesService.class);
-        tweet =  new TweetBuilder().setId(123L).setText(EXPECTED_TWEET_TEXT).build();
+        Tweet tweet = new TweetBuilder().setId(123L).setText(EXPECTED_TWEET_TEXT).build();
         when(mockMediaService
                 .upload(any(RequestBody.class), any(RequestBody.class), any(RequestBody.class)))
                 .thenReturn(mock(Call.class));
@@ -82,11 +80,11 @@ public void setUp() {
                 isNull(Boolean.class), eq(true), isNull(String.class)))
                 .thenReturn(Calls.response(tweet));
 
-        mockTwitterApiClient = mock(TwitterApiClient.class);
+        TwitterApiClient mockTwitterApiClient = mock(TwitterApiClient.class);
         when(mockTwitterApiClient.getStatusesService()).thenReturn(mockStatusesService);
         when(mockTwitterApiClient.getMediaService()).thenReturn(mockMediaService);
 
-        mockDependencyProvider = mock(TweetUploadService.DependencyProvider.class);
+        TweetUploadService.DependencyProvider mockDependencyProvider = mock(TweetUploadService.DependencyProvider.class);
         when(mockDependencyProvider.getTwitterApiClient(any(TwitterSession.class)))
                 .thenReturn(mockTwitterApiClient);
 
@@ -154,8 +152,8 @@ public void testSendSuccessBroadcast() {
         verify(service).sendBroadcast(intentCaptor.capture());
 
         final Intent capturedIntent = intentCaptor.getValue();
-        assertEquals(TweetUploadService.UPLOAD_SUCCESS, capturedIntent.getAction());
-        assertEquals(RuntimeEnvironment.application.getPackageName(), capturedIntent.getPackage());
+        Assert.assertThat(capturedIntent.getAction(), is(TweetUploadService.UPLOAD_SUCCESS));
+        Assert.assertThat(capturedIntent.getPackage(), is(RuntimeEnvironment.application.getPackageName()));
     }
 
     @Test
@@ -166,9 +164,8 @@ public void testSendFailureBroadcast() {
         verify(service).sendBroadcast(intentCaptor.capture());
 
         final Intent capturedIntent = intentCaptor.getValue();
-        assertEquals(TweetUploadService.UPLOAD_FAILURE, capturedIntent.getAction());
-        assertEquals(mockIntent,
-                capturedIntent.getParcelableExtra(TweetUploadService.EXTRA_RETRY_INTENT));
-        assertEquals(RuntimeEnvironment.application.getPackageName(), capturedIntent.getPackage());
+        Assert.assertThat(capturedIntent.getAction(), is(TweetUploadService.UPLOAD_FAILURE));
+        Assert.assertThat(capturedIntent.getParcelableExtra(TweetUploadService.EXTRA_RETRY_INTENT), is(mockIntent));
+        Assert.assertThat(capturedIntent.getPackage(), is(RuntimeEnvironment.application.getPackageName()));
     }
 }
diff --git a/tweet-composer/src/test/resources/robolectric.properties b/tweet-composer/src/test/resources/robolectric.properties
index ac810918..80ec62b7 100644
--- a/tweet-composer/src/test/resources/robolectric.properties
+++ b/tweet-composer/src/test/resources/robolectric.properties
@@ -1,2 +1,3 @@
+# suppress inspection "UnusedProperty" for whole file
 sdk = 21
 constants = com.twitter.sdk.android.tweetcomposer.BuildConfig
\ No newline at end of file
diff --git a/tweet-ui/build.gradle b/tweet-ui/build.gradle
index 0782c5b4..447d1263 100644
--- a/tweet-ui/build.gradle
+++ b/tweet-ui/build.gradle
@@ -76,6 +76,7 @@ dependencies {
     implementation dependency.supportCompatV4
     implementation dependency.recyclerview
 
+    androidTestCompile dependency.junit
     androidTestCompile dependency.retrofitMock
     androidTestCompile dependency.mockito
     androidTestCompile dependency.dexmakerMockito
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
index f2effd2e..3bb38595 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
@@ -28,17 +28,22 @@
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout;
 
+import org.junit.Assert;
+
 import java.util.Locale;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.CoreMatchers.nullValue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 public abstract class AbstractTweetViewTest extends TweetUiTestCase {
     Context context;
-    Resources resources;
-    Locale defaultLocale;
-    AbstractTweetView.DependencyProvider mockDependencyProvider;
+    private Resources resources;
+    private Locale defaultLocale;
+    private AbstractTweetView.DependencyProvider mockDependencyProvider;
 
     @Override
     protected void setUp() throws Exception {
@@ -56,7 +61,7 @@ protected void tearDown() throws Exception {
         super.tearDown();
     }
 
-    public Resources getResources() {
+    private Resources getResources() {
         return resources;
     }
 
@@ -82,39 +87,39 @@ private void setUpMockDependencyProvider() {
 
     public void testInit() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final long tweetId = TestFixtures.TEST_TWEET.id;
-        Assert.assertEquals(tweetId, view.getTweetId());
-        Assert.assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        Assert.assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
+        final long tweetId = TestFixtures.TEST_TWEET.getId();
+        Assert.assertThat(view.getTweetId(), is(tweetId));
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.TEST_NAME));
+        Assert.assertThat(view.screenNameView.getText(), is(TestFixtures.TEST_FORMATTED_SCREEN_NAME));
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.TEST_STATUS));
     }
 
     public void testInit_withEmptyTweet() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, fields should clear
         view.setTweet(TestFixtures.EMPTY_TWEET);
-        Assert.assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+        Assert.assertThat(view.getTweetId(), is(TestFixtures.EMPTY_TWEET.getId()));
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.screenNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     public void testInit_withNullTweet() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, fields should clear
         view.setTweet(null);
-        Assert.assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+        Assert.assertThat(view.getTweetId(), is(TestFixtures.EMPTY_TWEET.getId()));
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.screenNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     public void testInit_inEditMode() {
         TwitterTestUtils.resetTwitter();
         try {
             final AbstractTweetView view = createViewInEditMode(context, TestFixtures.TEST_TWEET);
-            Assert.assertTrue(view.isInEditMode());
-            Assert.assertTrue(view.isEnabled());
+            Assert.assertThat(view.isInEditMode(), is(true));
+            Assert.assertThat(view.isEnabled(), is(true));
         } catch (Exception e) {
             Assert.fail("Must start TweetUi... IllegalStateException should be caught");
         } finally {
@@ -124,18 +129,18 @@ public void testInit_inEditMode() {
 
     public void testIsTweetUiEnabled_withEditMode() {
         final AbstractTweetView view = createView(getContext(), TestFixtures.TEST_TWEET);
-        Assert.assertTrue(view.isTweetUiEnabled());
+        Assert.assertThat(view.isTweetUiEnabled(), is(true));
     }
 
     public void testIsTweetUiEnabled_inEditMode() {
         final AbstractTweetView view = createViewInEditMode(getContext(), TestFixtures.TEST_TWEET);
-        Assert.assertFalse(view.isTweetUiEnabled());
+        Assert.assertThat(view.isTweetUiEnabled(), is(false));
     }
 
     public void testIsTweetUiEnabled_tweetUiStarted() {
         final AbstractTweetView view = new TweetView(getContext(), TestFixtures.TEST_TWEET);
-        Assert.assertTrue(view.isTweetUiEnabled());
-        Assert.assertTrue(view.isEnabled());
+        Assert.assertThat(view.isTweetUiEnabled(), is(true));
+        Assert.assertThat(view.isEnabled(), is(true));
     }
 
     // Tests Date formatting reliant string, manually sets english and restores original locale
@@ -143,8 +148,7 @@ public void testGetContentDescription_emptyTweet() {
         final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         view.setTweet(TestFixtures.EMPTY_TWEET);
-        Assert.assertEquals(getResources().getString(R.string.tw__loading_tweet),
-                view.getContentDescription());
+        Assert.assertThat(view.getContentDescription(), is(getResources().getString(R.string.tw__loading_tweet)));
         TestUtils.setLocale(getContext(), originalLocale);
     }
 
@@ -153,8 +157,8 @@ public void testGetContentDescription_fullTweet() {
         final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
 
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        Assert.assertTrue(TweetUtils.isTweetResolvable(view.tweet));
-        Assert.assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
+        Assert.assertThat(TweetUtils.isTweetResolvable(view.tweet), is(true));
+        Assert.assertThat(view.getContentDescription(), is(TestFixtures.TEST_CONTENT_DESCRIPTION));
 
         TestUtils.setLocale(getContext(), originalLocale);
     }
@@ -165,7 +169,7 @@ public void testSetTweetMediaClickListener() {
 
         });
 
-        Assert.assertNotNull(view.tweetMediaClickListener);
+        Assert.assertThat(view.tweetMediaClickListener, notNullValue());
     }
 
     public void testSetTweetLinkClickListener() {
@@ -173,7 +177,7 @@ public void testSetTweetLinkClickListener() {
         final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
         view.setTweetLinkClickListener(linkClickListener);
 
-        Assert.assertNotNull(view.tweetLinkClickListener);
+        Assert.assertThat(view.tweetLinkClickListener, notNullValue());
 
         view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_URL);
         verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_LINK, TestFixtures.TEST_URL);
@@ -184,7 +188,7 @@ public void testSetHashtagLinkClickListener() {
         final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
         view.setTweetLinkClickListener(linkClickListener);
 
-        Assert.assertNotNull(view.tweetLinkClickListener);
+        Assert.assertThat(view.tweetLinkClickListener, notNullValue());
 
         view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_HASHTAG);
         verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_HASHTAG,
@@ -194,47 +198,47 @@ public void testSetHashtagLinkClickListener() {
     public void testSetTweet_defaultClickListener() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
 
-        Assert.assertNull(view.tweetLinkClickListener);
+        Assert.assertThat(view.tweetLinkClickListener, nullValue());
     }
 
     // Permalink click
     public void testSetTweet_permalink() {
         final AbstractTweetView view = createView(context, null);
         view.setTweet(TestFixtures.TEST_TWEET);
-        Assert.assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        Assert.assertThat(view.getPermalinkUri().toString(), is(TestFixtures.TEST_PERMALINK_ONE));
     }
 
     // permalinkUri should be null so the permalink launcher will be a NoOp
     public void testSetTweet_nullTweetPermalink() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         view.setTweet(null);
-        Assert.assertNull(view.getPermalinkUri());
+        Assert.assertThat(view.getPermalinkUri(), nullValue());
     }
 
     public void testSetTweet_updatePermalink() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        Assert.assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        Assert.assertThat(view.getPermalinkUri().toString(), is(TestFixtures.TEST_PERMALINK_ONE));
         view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        Assert.assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
+        Assert.assertThat(view.getPermalinkUri().toString(), is(TestFixtures.TEST_PERMALINK_TWO));
     }
 
     public void testGetAspectRatio_withNullMediaEntity() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final MediaEntity mediaEntity = null;
-        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertThat(view.getAspectRatio(mediaEntity), is(BaseTweetView.DEFAULT_ASPECT_RATIO));
     }
 
     public void testGetAspectRatio_withNullImageValue() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final ImageValue imageValue = null;
-        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue), 0.0);
     }
 
     public void testGetAspectRatio_mediaEntityWithNullSizes() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(null);
 
-        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity), 0.0);
     }
 
     public void testGetAspectRatio_mediaEntityWithEmptySizes() {
@@ -242,18 +246,18 @@ public void testGetAspectRatio_mediaEntityWithEmptySizes() {
         final MediaEntity.Sizes sizes = new MediaEntity.Sizes(null, null, null, null);
         final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(sizes);
 
-        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity), 0.0);
     }
 
     public void testGetAspectRatio_mediaEntityWithZeroDimension() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
 
         Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)));
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)), 0.0);
         Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)));
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)), 0.0);
         Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)));
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)), 0.0);
     }
 
     // Scribing
@@ -297,18 +301,18 @@ public void testRender_forSinglePhotoEntity() {
         final AbstractTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_PHOTO_TWEET);
 
-        Assert.assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        Assert.assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        Assert.assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+        Assert.assertThat(tweetView.mediaContainer.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.tweetMediaView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.mediaBadgeView.getVisibility(), is(View.GONE));
     }
 
     public void testRender_forMultiplePhotoEntities() {
         final AbstractTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_MULTIPLE_PHOTO_TWEET);
 
-        Assert.assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        Assert.assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        Assert.assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+        Assert.assertThat(tweetView.mediaContainer.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.tweetMediaView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.mediaBadgeView.getVisibility(), is(View.GONE));
     }
 
     public void testRender_rendersVineCard() {
@@ -320,12 +324,12 @@ public void testRender_rendersVineCard() {
 
         view.setTweet(tweetWithVineCard);
 
-        Assert.assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        Assert.assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        Assert.assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
-        Assert.assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
-        Assert.assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.TEST_NAME));
+        Assert.assertThat(view.screenNameView.getText(), is(TestFixtures.TEST_FORMATTED_SCREEN_NAME));
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.TEST_STATUS));
+        Assert.assertThat(view.mediaContainer.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(view.mediaBadgeView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(view.tweetMediaView.getVisibility(), is(View.VISIBLE));
     }
 
     public void testClearMedia() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
index 3634e1e1..b34067b2 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
@@ -32,12 +32,16 @@
 import com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout;
 import com.twitter.sdk.android.tweetui.internal.TweetMediaView;
 
+import org.junit.Assert;
 import org.mockito.ArgumentCaptor;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.CoreMatchers.nullValue;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;
@@ -66,6 +70,7 @@ protected void setUp() throws Exception {
         setUpMockDependencyProvider();
     }
 
+    @SuppressWarnings("SuperTearDownInFinally")
     @Override
     protected void tearDown() throws Exception {
         TestUtils.setLocale(getContext(), defaultLocale);
@@ -102,34 +107,34 @@ private void setUpMockDependencyProvider() {
 
     public void testInit() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final long tweetId = TestFixtures.TEST_TWEET.id;
-        Assert.assertEquals(tweetId, view.getTweetId());
-        Assert.assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        Assert.assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        Assert.assertEquals(TestFixtures.TIMESTAMP_RENDERED, view.timestampView.getText().toString());
+        final long tweetId = TestFixtures.TEST_TWEET.getId();
+        Assert.assertThat(view.getTweetId(), is(tweetId));
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.TEST_NAME));
+        Assert.assertThat(view.screenNameView.getText(), is(TestFixtures.TEST_FORMATTED_SCREEN_NAME));
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.TEST_STATUS));
+        Assert.assertThat(view.timestampView.getText().toString(), is(TestFixtures.TIMESTAMP_RENDERED));
     }
 
     public void testInit_withEmptyTweet() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, fields should clear
         view.setTweet(TestFixtures.EMPTY_TWEET);
-        Assert.assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
+        Assert.assertThat(view.getTweetId(), is(TestFixtures.EMPTY_TWEET.getId()));
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.screenNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.timestampView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     public void testInit_withNullTweet() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, fields should clear
         view.setTweet(null);
-        Assert.assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
+        Assert.assertThat(view.getTweetId(), is(TestFixtures.EMPTY_TWEET.getId()));
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.screenNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.EMPTY_STRING));
+        Assert.assertThat(view.timestampView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     // setTweet with a Tweet with an invalid timestamp makes timestamp view show an empty string
@@ -137,16 +142,16 @@ public void testInit_withInvalidTimestamp() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, timestamp should clear
         view.setTweet(TestFixtures.INVALID_TIMESTAMP_TWEET);
-        Assert.assertEquals(TestFixtures.INVALID_TIMESTAMP_TWEET.id, view.getTweetId());
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
+        Assert.assertThat(view.getTweetId(), is(TestFixtures.INVALID_TIMESTAMP_TWEET.getId()));
+        Assert.assertThat(view.timestampView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     public void testInit_inEditMode() {
         TwitterTestUtils.resetTwitter();
         try {
             final BaseTweetView view = createViewInEditMode(context, TestFixtures.TEST_TWEET);
-            Assert.assertTrue(view.isInEditMode());
-            Assert.assertTrue(view.isEnabled());
+            Assert.assertThat(view.isInEditMode(), is(true));
+            Assert.assertThat(view.isEnabled(), is(true));
         } catch (Exception e) {
             Assert.fail("Must start TweetUi... IllegalStateException should be caught");
         } finally {
@@ -156,18 +161,18 @@ public void testInit_inEditMode() {
 
     public void testIsTweetUiEnabled_withEditMode() {
         final BaseTweetView view = createView(getContext(), TestFixtures.TEST_TWEET);
-        Assert.assertTrue(view.isTweetUiEnabled());
+        Assert.assertThat(view.isTweetUiEnabled(), is(true));
     }
 
     public void testIsTweetUiEnabled_inEditMode() {
         final BaseTweetView view = createViewInEditMode(getContext(), TestFixtures.TEST_TWEET);
-        Assert.assertFalse(view.isTweetUiEnabled());
+        Assert.assertThat(view.isTweetUiEnabled(), is(false));
     }
 
     public void testIsTweetUiEnabled_tweetUiStarted() {
         final BaseTweetView view = new TweetView(getContext(), TestFixtures.TEST_TWEET);
-        Assert.assertTrue(view.isTweetUiEnabled());
-        Assert.assertTrue(view.isEnabled());
+        Assert.assertThat(view.isTweetUiEnabled(), is(true));
+        Assert.assertThat(view.isEnabled(), is(true));
     }
 
     // Tests Date formatting reliant string, manually sets english and restores original locale
@@ -175,8 +180,7 @@ public void testGetContentDescription_emptyTweet() {
         final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         view.setTweet(TestFixtures.EMPTY_TWEET);
-        Assert.assertEquals(getResources().getString(R.string.tw__loading_tweet),
-                view.getContentDescription());
+        Assert.assertThat(view.getContentDescription(), is(getResources().getString(R.string.tw__loading_tweet)));
         TestUtils.setLocale(getContext(), originalLocale);
     }
 
@@ -185,8 +189,8 @@ public void testGetContentDescription_fullTweet() {
         final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
 
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        Assert.assertTrue(TweetUtils.isTweetResolvable(view.tweet));
-        Assert.assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
+        Assert.assertThat(TweetUtils.isTweetResolvable(view.tweet), is(true));
+        Assert.assertThat(view.getContentDescription(), is(TestFixtures.TEST_CONTENT_DESCRIPTION));
 
         TestUtils.setLocale(getContext(), originalLocale);
     }
@@ -197,7 +201,7 @@ public void testSetTweetMediaClickListener() {
 
         });
 
-        Assert.assertNotNull(view.tweetMediaClickListener);
+        Assert.assertThat(view.tweetMediaClickListener, notNullValue());
     }
 
     public void testSetTweetLinkClickListener() {
@@ -205,7 +209,7 @@ public void testSetTweetLinkClickListener() {
         final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
         view.setTweetLinkClickListener(linkClickListener);
 
-        Assert.assertNotNull(view.tweetLinkClickListener);
+        Assert.assertThat(view.tweetLinkClickListener, notNullValue());
 
         view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_URL);
         verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_LINK, TestFixtures.TEST_URL);
@@ -214,28 +218,28 @@ public void testSetTweetLinkClickListener() {
     public void testSetTweet_defaultClickListener() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
 
-        Assert.assertNull(view.tweetLinkClickListener);
+        Assert.assertThat(view.tweetLinkClickListener, nullValue());
     }
 
     // Permalink click
     public void testSetTweet_permalink() {
         final BaseTweetView view = createView(context, null);
         view.setTweet(TestFixtures.TEST_TWEET);
-        Assert.assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        Assert.assertThat(view.getPermalinkUri().toString(), is(TestFixtures.TEST_PERMALINK_ONE));
     }
 
     // permalinkUri should be null so the permalink launcher will be a NoOp
     public void testSetTweet_nullTweetPermalink() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         view.setTweet(null);
-        Assert.assertNull(view.getPermalinkUri());
+        Assert.assertThat(view.getPermalinkUri(), nullValue());
     }
 
     public void testSetTweet_updatePermalink() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        Assert.assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        Assert.assertThat(view.getPermalinkUri().toString(), is(TestFixtures.TEST_PERMALINK_ONE));
         view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        Assert.assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
+        Assert.assertThat(view.getPermalinkUri().toString(), is(TestFixtures.TEST_PERMALINK_TWO));
     }
 
     // Styling
@@ -250,28 +254,28 @@ public void testSecondaryColorsDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final int primaryTextColor = getResources().getColor(
                 R.color.tw__tweet_light_primary_text_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_LIGHT_OPACITY, Color.WHITE, primaryTextColor);
-        Assert.assertEquals(color, view.secondaryTextColor);
-        Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
-        Assert.assertEquals(color, view.screenNameView.getCurrentTextColor());
-        Assert.assertEquals(color, view.retweetedByView.getCurrentTextColor());
+        Assert.assertThat(view.secondaryTextColor, is(color));
+        Assert.assertThat(view.timestampView.getCurrentTextColor(), is(color));
+        Assert.assertThat(view.screenNameView.getCurrentTextColor(), is(color));
+        Assert.assertThat(view.retweetedByView.getCurrentTextColor(), is(color));
     }
 
     public void testAvatarDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-        Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
+        Assert.assertThat(TestUtils.getDrawableColor(view.avatarView), is(color));
     }
 
     public void testPhotoDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
 
         final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
@@ -282,17 +286,17 @@ public void testPhotoDefault() {
         tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
 
         final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
-        Assert.assertEquals(color, TestUtils.getBackgroundColor(imageView));
+        Assert.assertThat(TestUtils.getBackgroundColor(imageView), is(color));
     }
 
     public void testTweetPhotoErrorDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        Assert.assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
+        Assert.assertThat(view.photoErrorResId, is(R.drawable.tw__ic_tweet_photo_error_light));
     }
 
     public void testRetweetIconDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_RETWEET);
-        Assert.assertEquals(R.drawable.tw__ic_retweet_light, view.retweetIconResId);
+        Assert.assertThat(view.retweetIconResId, is(R.drawable.tw__ic_retweet_light));
     }
 
     // dark style
@@ -308,12 +312,12 @@ public void testSecondaryColorsDark() {
                 R.style.tw__TweetDarkStyle);
         final int primaryTextColor = getResources().getColor(
                 R.color.tw__tweet_dark_primary_text_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_DARK_OPACITY, Color.BLACK, primaryTextColor);
-        Assert.assertEquals(color, view.secondaryTextColor);
-        Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
-        Assert.assertEquals(color, view.screenNameView.getCurrentTextColor());
-        Assert.assertEquals(color, view.retweetedByView.getCurrentTextColor());
+        Assert.assertThat(view.secondaryTextColor, is(color));
+        Assert.assertThat(view.timestampView.getCurrentTextColor(), is(color));
+        Assert.assertThat(view.screenNameView.getCurrentTextColor(), is(color));
+        Assert.assertThat(view.retweetedByView.getCurrentTextColor(), is(color));
     }
 
     public void testAvatarDark() {
@@ -321,9 +325,9 @@ public void testAvatarDark() {
                 R.style.tw__TweetDarkStyle);
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-        Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
+        Assert.assertThat(TestUtils.getDrawableColor(view.avatarView), is(color));
     }
 
     public void testPhotoDark() {
@@ -331,7 +335,7 @@ public void testPhotoDark() {
                 R.style.tw__TweetDarkStyle);
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
 
         final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
@@ -341,25 +345,25 @@ public void testPhotoDark() {
         tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
 
         final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
-        Assert.assertEquals(color, TestUtils.getBackgroundColor(imageView));
+        Assert.assertThat(TestUtils.getBackgroundColor(imageView), is(color));
     }
 
     public void testTweetPhotoErrorDark() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
                 R.style.tw__TweetDarkStyle);
-        Assert.assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
+        Assert.assertThat(view.photoErrorResId, is(R.drawable.tw__ic_tweet_photo_error_dark));
     }
 
     public void testRetweetIconDark() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_RETWEET,
                R.style.tw__TweetDarkStyle);
-        Assert.assertEquals(R.drawable.tw__ic_retweet_dark, view.retweetIconResId);
+        Assert.assertThat(view.retweetIconResId, is(R.drawable.tw__ic_retweet_dark));
     }
 
     public void testTweetActionsEnabled() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
                 R.style.tw__TweetActionsEnabled);
-        Assert.assertTrue(view.tweetActionsEnabled);
+        Assert.assertThat(view.tweetActionsEnabled, is(true));
     }
 
     public void testSetOnActionCallback_passesCorrectTweetToActionBarView() {
@@ -373,7 +377,7 @@ public void testSetOnActionCallback_passesCorrectTweetToActionBarView() {
         // verify that the TweetActionBarView is set with the Tweet, not the inner retweeted Tweet
         final ArgumentCaptor<Tweet> tweetCaptor = ArgumentCaptor.forClass(Tweet.class);
         verify(mockActionBarView).setTweet(tweetCaptor.capture());
-        Assert.assertEquals(TestFixtures.TEST_RETWEET.getId(), tweetCaptor.getValue().getId());
+        Assert.assertThat(tweetCaptor.getValue().getId(), is(TestFixtures.TEST_RETWEET.getId()));
     }
 
     public void testRender_passesCorrectTweetToActionBarView() {
@@ -386,32 +390,32 @@ public void testRender_passesCorrectTweetToActionBarView() {
         // verify that the TweetActionBarView is set with the Tweet, not the inner retweeted Tweet
         final ArgumentCaptor<Tweet> tweetCaptor = ArgumentCaptor.forClass(Tweet.class);
         verify(mockActionBarView).setTweet(tweetCaptor.capture());
-        Assert.assertEquals(TestFixtures.TEST_RETWEET.getId(), tweetCaptor.getValue().getId());
+        Assert.assertThat(tweetCaptor.getValue().getId(), is(TestFixtures.TEST_RETWEET.getId()));
     }
 
     public void testTweetActionsDisabled() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
                 R.style.tw__TweetActionsDisabled);
-        Assert.assertFalse(view.tweetActionsEnabled);
+        Assert.assertThat(view.tweetActionsEnabled, is(false));
     }
 
     public void testGetAspectRatio_withNullMediaEntity() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final MediaEntity mediaEntity = null;
-        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity), 0.0);
     }
 
     public void testGetAspectRatio_withNullImageValue() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final ImageValue imageValue = null;
-        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue), 0.0);
     }
 
     public void testGetAspectRatio_mediaEntityWithNullSizes() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(null);
 
-        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity), 0.0);
     }
 
     public void testGetAspectRatio_mediaEntityWithEmptySizes() {
@@ -419,18 +423,18 @@ public void testGetAspectRatio_mediaEntityWithEmptySizes() {
         final MediaEntity.Sizes sizes = new MediaEntity.Sizes(null, null, null, null);
         final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(sizes);
 
-        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity), 0.0);
     }
 
     public void testGetAspectRatio_mediaEntityWithZeroDimension() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
 
         Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)));
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)), 0.0);
         Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)));
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)), 0.0);
         Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)));
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)), 0.0);
     }
 
     // Scribing
@@ -466,7 +470,7 @@ public void testSetProfilePhotoView_handlesNullPicasso() {
         try {
             tweetView.setProfilePhotoView(TestFixtures.TEST_TWEET);
         } catch (NullPointerException e) {
-            Assert.fail("Should have handled null error image");
+            org.junit.Assert.fail("Should have handled null error image");
         }
     }
 
@@ -479,7 +483,7 @@ public void testSetTweetMedia_handlesNullPicasso() {
         try {
             tweetView.setTweetMedia(mock(Tweet.class));
         } catch (NullPointerException e) {
-            Assert.fail("Should have handled null error image");
+            org.junit.Assert.fail("Should have handled null error image");
         }
     }
 
@@ -487,46 +491,46 @@ public void testRender_forSinglePhotoEntity() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_PHOTO_TWEET);
 
-        Assert.assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        Assert.assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        Assert.assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+        Assert.assertThat(tweetView.mediaContainer.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.tweetMediaView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.mediaBadgeView.getVisibility(), is(View.GONE));
     }
 
     public void testRender_forMultiplePhotoEntities() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_MULTIPLE_PHOTO_TWEET);
 
-        Assert.assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        Assert.assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        Assert.assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+        Assert.assertThat(tweetView.mediaContainer.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.tweetMediaView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.mediaBadgeView.getVisibility(), is(View.GONE));
     }
 
     public void testRender_rendersRetweetedStatus() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_RETWEET);
-        Assert.assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
-        Assert.assertEquals(TestFixtures.TEST_NAME, tweetView.fullNameView.getText());
-        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, tweetView.screenNameView.getText());
-        Assert.assertEquals(TestFixtures.TEST_STATUS, tweetView.contentView.getText().toString());
+        Assert.assertThat(tweetView.retweetedByView.getText(), is(REQUIRED_RETWEETED_BY_TEXT));
+        Assert.assertThat(tweetView.fullNameView.getText(), is(TestFixtures.TEST_NAME));
+        Assert.assertThat(tweetView.screenNameView.getText(), is(TestFixtures.TEST_FORMATTED_SCREEN_NAME));
+        Assert.assertThat(tweetView.contentView.getText().toString(), is(TestFixtures.TEST_STATUS));
     }
 
     public void testSetRetweetedBy_nullTweet() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(null);
-        Assert.assertEquals(View.GONE, tweetView.retweetedByView.getVisibility());
+        Assert.assertThat(tweetView.retweetedByView.getVisibility(), is(View.GONE));
     }
 
     public void testSetRetweetedBy_nonRetweet() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_TWEET);
-        Assert.assertEquals(View.GONE, tweetView.retweetedByView.getVisibility());
+        Assert.assertThat(tweetView.retweetedByView.getVisibility(), is(View.GONE));
     }
 
     public void testSetRetweetedBy_retweet() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_RETWEET);
-        Assert.assertEquals(View.VISIBLE, tweetView.retweetedByView.getVisibility());
-        Assert.assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
+        Assert.assertThat(tweetView.retweetedByView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetView.retweetedByView.getText(), is(REQUIRED_RETWEETED_BY_TEXT));
     }
 
     public void testRender_rendersVineCard() {
@@ -538,12 +542,12 @@ public void testRender_rendersVineCard() {
 
         view.setTweet(tweetWithVineCard);
 
-        Assert.assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        Assert.assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        Assert.assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
-        Assert.assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
-        Assert.assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.TEST_NAME));
+        Assert.assertThat(view.screenNameView.getText(), is(TestFixtures.TEST_FORMATTED_SCREEN_NAME));
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.TEST_STATUS));
+        Assert.assertThat(view.mediaContainer.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(view.mediaBadgeView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(view.tweetMediaView.getVisibility(), is(View.VISIBLE));
     }
 
     public void testClearMedia() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
index ac80ba4f..f12b9a1d 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
@@ -25,6 +25,10 @@
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 
+import org.junit.Assert;
+
+import static org.hamcrest.CoreMatchers.*;
+
 /**
  * Tests the state of BaseTweetViews created via XML.
  */
@@ -57,31 +61,31 @@ protected View getInflatedLayout() {
 
     public void testInitName() {
         final BaseTweetView view = getView();
-        Assert.assertNotNull(view);
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
+        Assert.assertThat(view, notNullValue());
+        Assert.assertThat(view.fullNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     public void testInitScreenName() {
         final BaseTweetView view = getView();
-        Assert.assertNotNull(view);
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
+        Assert.assertThat(view, notNullValue());
+        Assert.assertThat(view.screenNameView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     public void testInitTimestamp() {
         final BaseTweetView view = getView();
-        Assert.assertNotNull(view);
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
+        Assert.assertThat(view, notNullValue());
+        Assert.assertThat(view.timestampView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     public void testInitText() {
         final BaseTweetView view = getView();
-        Assert.assertNotNull(view);
-        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+        Assert.assertThat(view, notNullValue());
+        Assert.assertThat(view.contentView.getText().toString(), is(TestFixtures.EMPTY_STRING));
     }
 
     public void testInitWithTweetActionsDisabled() {
         final BaseTweetView view = getView();
-        Assert.assertFalse(view.tweetActionsEnabled);
+        Assert.assertThat(view.tweetActionsEnabled, is(false));
     }
 
     public void testInitWithTweetActionsEnabled() {
@@ -90,7 +94,7 @@ public void testInitWithTweetActionsEnabled() {
                 R.layout.activity_tweet_actions_enabled, group, true);
 
         final BaseTweetView tweetView = view.findViewById(R.id.tweet_view);
-        Assert.assertTrue(tweetView.tweetActionsEnabled);
+        Assert.assertThat(tweetView.tweetActionsEnabled, is(true));
     }
 
     // asserts that a BaseTweetView with an invalid tweet id throws an exception
@@ -109,20 +113,20 @@ public void testInitWithInvalidTweetId() {
 
     public void testSetTweet_permalink() {
         final BaseTweetView view = getView();
-        Assert.assertEquals(TestFixtures.TEST_PERMALINK_UNKNOWN_USER, view.getPermalinkUri().toString());
+        Assert.assertThat(view.getPermalinkUri().toString(), is(TestFixtures.TEST_PERMALINK_UNKNOWN_USER));
     }
 
     // permalinkUri should be null so the permalink launcher will be a NoOp
     public void testSetTweet_nullTweetPermalink() {
         final BaseTweetView view = getView();
         view.setTweet(null);
-        Assert.assertNull(view.getPermalinkUri());
+        Assert.assertThat(view.getPermalinkUri(), nullValue());
     }
 
     public void testSetTweet_updatePermalink() {
         final BaseTweetView view = getView();
         view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        Assert.assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
+        Assert.assertThat(view.getPermalinkUri().toString(), is(TestFixtures.TEST_PERMALINK_TWO));
     }
 
     // Styling
@@ -137,21 +141,21 @@ public void testSecondaryColorsDefault() {
         final BaseTweetView view = getView();
         final int primaryTextColor = getResources().getColor(
                 R.color.tw__tweet_light_primary_text_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_LIGHT_OPACITY, Color.WHITE, primaryTextColor);
-        Assert.assertEquals(color, view.secondaryTextColor);
-        Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
-        Assert.assertEquals(color, view.screenNameView.getCurrentTextColor());
-        Assert.assertEquals(color, view.retweetedByView.getCurrentTextColor());
+        Assert.assertThat(view.secondaryTextColor, is(color));
+        Assert.assertThat(view.timestampView.getCurrentTextColor(), is(color));
+        Assert.assertThat(view.screenNameView.getCurrentTextColor(), is(color));
+        Assert.assertThat(view.retweetedByView.getCurrentTextColor(), is(color));
     }
 
     public void testAvatarDefault() {
         final BaseTweetView view = getView();
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-        Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
+        Assert.assertThat(TestUtils.getDrawableColor(view.avatarView), is(color));
     }
 
     public void testPhotoErrorDefault() {
@@ -175,21 +179,21 @@ public void testSecondaryColorsDark() {
         final BaseTweetView view = getViewDark();
         final int primaryTextColor = getResources().getColor(
                 R.color.tw__tweet_dark_primary_text_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_DARK_OPACITY, Color.BLACK, primaryTextColor);
-        Assert.assertEquals(color, view.secondaryTextColor);
-        Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
-        Assert.assertEquals(color, view.screenNameView.getCurrentTextColor());
-        Assert.assertEquals(color, view.retweetedByView.getCurrentTextColor());
+        Assert.assertThat(view.secondaryTextColor, is(color));
+        Assert.assertThat(view.timestampView.getCurrentTextColor(), is(color));
+        Assert.assertThat(view.screenNameView.getCurrentTextColor(), is(color));
+        Assert.assertThat(view.retweetedByView.getCurrentTextColor(), is(color));
     }
 
     public void testAvatarDark() {
         final BaseTweetView view = getViewDark();
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
+        final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-        Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
+        Assert.assertThat(TestUtils.getDrawableColor(view.avatarView), is(color));
     }
 
     public void testPhotoErrorDark() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
index 8a846df5..054f2e1c 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
@@ -23,6 +23,8 @@
 import com.squareup.picasso.RequestCreator;
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
+
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -107,9 +109,9 @@ public void testSetTweetPhoto() {
 
     public void testGetAspectRatioForPhotoEntity() {
         final CompactTweetView compactView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(1));
-        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(2));
-        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(3));
-        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(4));
+        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(1), 0.0);
+        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(2), 0.0);
+        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(3), 0.0);
+        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(4), 0.0);
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java
index 69fa73d4..735ca9ab 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java
@@ -17,6 +17,10 @@
 
 package com.twitter.sdk.android.tweetui;
 
+import org.junit.Assert;
+
+import static org.hamcrest.CoreMatchers.*;
+
 public class CompactTweetViewXmlTest extends BaseTweetViewXmlTest {
 
     @Override
@@ -33,7 +37,7 @@ CompactTweetView getViewDark() {
 
     public void testLayout() {
         final CompactTweetView view = getView();
-        Assert.assertNotNull(view);
+        Assert.assertThat(view, notNullValue());
         Assert.assertEquals(R.layout.tw__tweet_compact, view.getLayout());
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/DateTranslationsTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/DateTranslationsTest.java
index 020c40e6..aae86a05 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/DateTranslationsTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/DateTranslationsTest.java
@@ -31,7 +31,7 @@
 public class DateTranslationsTest extends AndroidTestCase {
     private Locale defaultLocale;
 
-    static final SimpleDateFormat RELATIVE_DATE_FORMAT =
+    private static final SimpleDateFormat RELATIVE_DATE_FORMAT =
             new SimpleDateFormat("MM/dd/yy", Locale.ENGLISH);
 
     @Override
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
index 605830bc..c1f7a63e 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
@@ -21,8 +21,10 @@
 
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
+
 public class QuoteTweetViewTest extends AbstractTweetViewTest {
-    protected static final double DELTA = 0.001f;
+    private static final double DELTA = 0.001f;
 
     @Override
     QuoteTweetView createView(Context context, Tweet tweet) {
@@ -85,9 +87,9 @@ public void testGetAspectRatio() {
 
     public void testGetAspectRatioForPhotoEntity() {
         final QuoteTweetView quoteTweetView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(1));
-        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(2));
-        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(3));
-        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(4));
+        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(1), 0.0);
+        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(2), 0.0);
+        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(3), 0.0);
+        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(4), 0.0);
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java
index adc2d6cc..81af2401 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java
@@ -22,8 +22,11 @@
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
 import org.mockito.ArgumentCaptor;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
@@ -34,7 +37,7 @@ public void testSetOnActionCallback() {
         final TweetActionBarView view = createView();
         final Callback<Tweet> actionCallback = mock(Callback.class);
         view.setOnActionCallback(actionCallback);
-        Assert.assertEquals(actionCallback, view.actionCallback);
+        Assert.assertThat(view.actionCallback, is(actionCallback));
     }
 
     public void testSetLike() {
@@ -44,12 +47,12 @@ public void testSetLike() {
 
         final ArgumentCaptor<LikeTweetAction> likeCaptor
                 = ArgumentCaptor.forClass(LikeTweetAction.class);
-        verify(view.likeButton).setToggledOn(TestFixtures.TEST_TWEET.favorited);
+        verify(view.likeButton).setToggledOn(TestFixtures.TEST_TWEET.getFavorited());
         verify(view.likeButton).setOnClickListener(likeCaptor.capture());
         final LikeTweetAction likeAction = likeCaptor.getValue();
-        Assert.assertNotNull(likeAction);
-        Assert.assertEquals(TestFixtures.TEST_TWEET, likeAction.tweet);
-        Assert.assertEquals(tweetRepository, likeAction.tweetRepository);
+        Assert.assertThat(likeAction, notNullValue());
+        Assert.assertThat(likeAction.tweet, is(TestFixtures.TEST_TWEET));
+        Assert.assertThat(likeAction.tweetRepository, is(tweetRepository));
     }
 
     public void testSetLike_handlesNullTweet() {
@@ -66,8 +69,8 @@ public void testSetShare() {
                 = ArgumentCaptor.forClass(ShareTweetAction.class);
         verify(view.shareButton).setOnClickListener(shareCaptor.capture());
         final ShareTweetAction shareAction = shareCaptor.getValue();
-        Assert.assertNotNull(shareAction);
-        Assert.assertEquals(TestFixtures.TEST_TWEET, shareAction.tweet);
+        Assert.assertThat(shareAction, notNullValue());
+        Assert.assertThat(shareAction.tweet, is(TestFixtures.TEST_TWEET));
     }
 
     public void testSetShare_handlesNullTweet() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
index 08d69014..ff709002 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
@@ -26,17 +26,22 @@
 import com.twitter.sdk.android.core.models.Identifiable;
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
 import org.mockito.ArgumentCaptor;
 
 import java.util.List;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.hamcrest.CoreMatchers.nullValue;
+import static org.hamcrest.CoreMatchers.sameInstance;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
 public class TweetTimelineListAdapterTest extends TweetUiTestCase {
-    static final String NULL_CONTEXT_MESSAGE = "Context must not be null";
-    static final String NULL_TIMELINE_MESSAGE = "Timeline must not be null";
-    static final int ANY_STYLE = R.style.tw__TweetLightWithActionsStyle;
+    private static final String NULL_CONTEXT_MESSAGE = "Context must not be null";
+    private static final String NULL_TIMELINE_MESSAGE = "Timeline must not be null";
+    private static final int ANY_STYLE = R.style.tw__TweetLightWithActionsStyle;
     private TweetTimelineListAdapter listAdapter;
 
     private static final String REQUIRED_SDK_IMPRESSION_CLIENT = "android";
@@ -55,11 +60,11 @@ public void testConstructor() {
         final TweetUi tweetUi = mock(TweetUi.class);
         listAdapter = new TweetTimelineListAdapter(getContext(), mockTimelineDelegate, ANY_STYLE,
                 null, tweetUi);
-        if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
+        if (listAdapter.getActionCallback() instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
             final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            Assert.assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            Assert.assertNull(replaceCallback.cb);
+                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.getActionCallback();
+            Assert.assertThat(replaceCallback.delegate, is(mockTimelineDelegate));
+            Assert.assertThat(replaceCallback.cb, nullValue());
         } else {
             Assert.fail("Expected default actionCallback to be a ReplaceTweetCallback");
         }
@@ -73,11 +78,11 @@ public void testConstructor_withActionCallback() {
                 mockCallback, tweetUi);
         // assert that
         // - developer callback wrapped in a ReplaceTweetCallback
-        if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
+        if (listAdapter.getActionCallback() instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
             final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            Assert.assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            Assert.assertEquals(mockCallback, replaceCallback.cb);
+                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.getActionCallback();
+            Assert.assertThat(replaceCallback.delegate, is(mockTimelineDelegate));
+            Assert.assertThat(replaceCallback.cb, is(mockCallback));
         } else {
             Assert.fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
         }
@@ -91,11 +96,11 @@ public void testBuilder() {
                 .setOnActionCallback(mockCallback)
                 .setViewStyle(R.style.tw__TweetDarkStyle)
                 .build();
-        Assert.assertEquals(R.style.tw__TweetDarkStyle, listAdapter.styleResId);
-        if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
+        Assert.assertThat(listAdapter.getStyleResId(), is(R.style.tw__TweetDarkStyle));
+        if (listAdapter.getActionCallback() instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
             final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            Assert.assertEquals(mockCallback, replaceCallback.cb);
+                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.getActionCallback();
+            Assert.assertThat(replaceCallback.cb, is(mockCallback));
         } else {
             Assert.fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
         }
@@ -108,7 +113,7 @@ public void testBuilder_nullContext() {
                     .build();
             Assert.fail("Null context should throw exception");
         } catch (IllegalArgumentException e) {
-            Assert.assertEquals(NULL_CONTEXT_MESSAGE, e.getMessage());
+            Assert.assertThat(e.getMessage(), is(NULL_CONTEXT_MESSAGE));
         }
     }
 
@@ -116,9 +121,9 @@ public void testBuilder_nullTimeline() {
         try {
             listAdapter = new TweetTimelineListAdapter.Builder(getContext()).setTimeline(null)
                     .build();
-            Assert.fail("Null timeline should throw exception");
+            org.junit.Assert.fail("Null timeline should throw exception");
         } catch (IllegalArgumentException e) {
-            Assert.assertEquals(NULL_TIMELINE_MESSAGE, e.getMessage());
+            Assert.assertThat(e.getMessage(), is(NULL_TIMELINE_MESSAGE));
         }
     }
 
@@ -130,7 +135,7 @@ public void testBuilder_withTimelineFilter() {
                 .setTimelineFilter(mockTimelineFilter)
                 .build();
 
-        Assert.assertTrue(listAdapter.delegate instanceof FilterTimelineDelegate);
+        Assert.assertThat(listAdapter.delegate instanceof FilterTimelineDelegate, is(true));
     }
 
     public void testBuilder_withNullTimelineFilter() {
@@ -140,7 +145,7 @@ public void testBuilder_withNullTimelineFilter() {
                 .setTimelineFilter(null)
                 .build();
 
-        Assert.assertTrue(listAdapter.delegate instanceof TimelineDelegate);
+        Assert.assertThat(listAdapter.delegate instanceof TimelineDelegate, is(true));
     }
 
     /**
@@ -157,9 +162,9 @@ public void testGetView_getsCompactTweetView() {
         // assert that
         // - default implementation of getView returns a CompactTweetView
         // - sanity check that CompactTweetView tweet id matches the Tweet's id
-        Assert.assertSame(CompactTweetView.class, view.getClass());
+        Assert.assertThat(view.getClass(), sameInstance(CompactTweetView.class));
         final BaseTweetView tv = (BaseTweetView) view;
-        Assert.assertEquals(listAdapter.getItemId(0), tv.getTweetId());
+        Assert.assertThat(tv.getTweetId(), is(listAdapter.getItemId(0)));
     }
 
     public void testDefaultViewStyle_viaConstructor() {
@@ -167,7 +172,7 @@ public void testDefaultViewStyle_viaConstructor() {
         listAdapter = new TweetTimelineListAdapter(getContext(), fakeTimeline);
         final View view = listAdapter.getView(0, null, null);
         final BaseTweetView tv = (BaseTweetView) view;
-        Assert.assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
+        Assert.assertThat(tv.styleResId, is(R.style.tw__TweetLightStyle));
     }
 
     public void testDefaultViewStyle_viaBuilder() {
@@ -177,7 +182,7 @@ public void testDefaultViewStyle_viaBuilder() {
                 .build();
         final View view = listAdapter.getView(0, null, null);
         final BaseTweetView tv = (BaseTweetView) view;
-        Assert.assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
+        Assert.assertThat(tv.styleResId, is(R.style.tw__TweetLightStyle));
     }
 
     public void testConstructor_scribesImpression() {
@@ -197,23 +202,23 @@ public void testConstructor_scribesImpression() {
         verify(tweetUi).scribe(tfwNamespaceCaptor.capture(), scribeItemsCaptor.capture());
 
         final EventNamespace sdkNs = sdkNamespaceCaptor.getValue();
-        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_CLIENT, sdkNs.client);
-        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_PAGE, sdkNs.page);
-        Assert.assertEquals(TEST_SCRIBE_SECTION, sdkNs.section);
-        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_COMPONENT, sdkNs.component);
-        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_ELEMENT, sdkNs.element);
-        Assert.assertEquals(REQUIRED_IMPRESSION_ACTION, sdkNs.action);
+        Assert.assertThat(sdkNs.client, is(REQUIRED_SDK_IMPRESSION_CLIENT));
+        Assert.assertThat(sdkNs.page, is(REQUIRED_SDK_IMPRESSION_PAGE));
+        Assert.assertThat(sdkNs.section, is(TEST_SCRIBE_SECTION));
+        Assert.assertThat(sdkNs.component, is(REQUIRED_SDK_IMPRESSION_COMPONENT));
+        Assert.assertThat(sdkNs.element, is(REQUIRED_SDK_IMPRESSION_ELEMENT));
+        Assert.assertThat(sdkNs.action, is(REQUIRED_IMPRESSION_ACTION));
 
         final EventNamespace tfwNs = tfwNamespaceCaptor.getValue();
-        Assert.assertEquals(REQUIRED_TFW_CLIENT, tfwNs.client);
-        Assert.assertEquals(REQUIRED_TFW_PAGE, tfwNs.page);
-        Assert.assertEquals(REQUIRED_TFW_SECTION, tfwNs.section);
-        Assert.assertEquals(TEST_SCRIBE_SECTION, tfwNs.component);
-        Assert.assertEquals(REQUIRED_TFW_ELEMENT, tfwNs.element);
-        Assert.assertEquals(REQUIRED_IMPRESSION_ACTION, tfwNs.action);
+        Assert.assertThat(tfwNs.client, is(REQUIRED_TFW_CLIENT));
+        Assert.assertThat(tfwNs.page, is(REQUIRED_TFW_PAGE));
+        Assert.assertThat(tfwNs.section, is(REQUIRED_TFW_SECTION));
+        Assert.assertThat(tfwNs.component, is(TEST_SCRIBE_SECTION));
+        Assert.assertThat(tfwNs.element, is(REQUIRED_TFW_ELEMENT));
+        Assert.assertThat(tfwNs.action, is(REQUIRED_IMPRESSION_ACTION));
 
         final List<ScribeItem> scribeItems = scribeItemsCaptor.getValue();
-        Assert.assertNotNull(scribeItems);
+        Assert.assertThat(scribeItems, notNullValue());
     }
 
     public void testSetViewStyle() {
@@ -224,7 +229,7 @@ public void testSetViewStyle() {
                 .build();
         final View view = listAdapter.getView(0, null, null);
         final BaseTweetView tv = (BaseTweetView) view;
-        Assert.assertEquals(R.style.tw__TweetDarkWithActionsStyle, tv.styleResId);
+        Assert.assertThat(tv.styleResId, is(R.style.tw__TweetDarkWithActionsStyle));
     }
 
     static class FakeTweetTimeline implements Timeline<Tweet> {
@@ -232,6 +237,7 @@ public void testSetViewStyle() {
 
         /**
          * Constructs a FakeTweetTimeline
+         *
          * @param numItems the number of Tweets to return per call to next/previous
          */
         FakeTweetTimeline(long numItems) {
@@ -259,6 +265,7 @@ public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) {
 
     /**
      * Makes class public so it can be mocked on ART runtime.
+     *
      * @param <T>
      */
     public class TestTimelineDelegate<T extends Identifiable> extends TimelineDelegate {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java
index b7e1867a..1b296c82 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java
@@ -24,10 +24,12 @@
 import com.twitter.sdk.android.core.models.Identifiable;
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
 import org.mockito.ArgumentCaptor;
 
 import java.util.List;
 
+import static org.hamcrest.CoreMatchers.*;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
@@ -56,13 +58,13 @@ public void testConstructor() {
         final TweetUi tweetUi = mock(TweetUi.class);
         recyclerViewAdapter = new TweetTimelineRecyclerViewAdapter(getContext(),
                 mockTimelineDelegate, ANY_STYLE, null, tweetUi);
-        if (recyclerViewAdapter.actionCallback instanceof
+        if (recyclerViewAdapter.getActionCallback() instanceof
                 TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback) {
             final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
-                    recyclerViewAdapter.actionCallback;
-            Assert.assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            Assert.assertNull(replaceCallback.cb);
+                    recyclerViewAdapter.getActionCallback();
+            Assert.assertThat(replaceCallback.delegate, is(mockTimelineDelegate));
+            Assert.assertThat(replaceCallback.cb, nullValue());
         } else {
             Assert.fail("Expected default actionCallback to be a ReplaceTweetCallback");
         }
@@ -76,13 +78,13 @@ public void testConstructor_withActionCallback() {
                 mockTimelineDelegate, ANY_STYLE, mockCallback, tweetUi);
         // assert that
         // - developer callback wrapped in a ReplaceTweetCallback
-        if (recyclerViewAdapter.actionCallback instanceof
+        if (recyclerViewAdapter.getActionCallback() instanceof
                 TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback) {
             final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
-                    recyclerViewAdapter.actionCallback;
-            Assert.assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            Assert.assertEquals(mockCallback, replaceCallback.cb);
+                    recyclerViewAdapter.getActionCallback();
+            Assert.assertThat(replaceCallback.delegate, is(mockTimelineDelegate));
+            Assert.assertThat(replaceCallback.cb, is(mockCallback));
         } else {
             Assert.fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
         }
@@ -96,13 +98,13 @@ public void testBuilder() {
                 .setOnActionCallback(mockCallback)
                 .setViewStyle(R.style.tw__TweetDarkStyle)
                 .build();
-        Assert.assertEquals(R.style.tw__TweetDarkStyle, recyclerViewAdapter.styleResId);
-        if (recyclerViewAdapter.actionCallback instanceof
+        Assert.assertEquals(R.style.tw__TweetDarkStyle, recyclerViewAdapter.getStyleResId());
+        if (recyclerViewAdapter.getActionCallback() instanceof
                 TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback) {
             final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
-                    recyclerViewAdapter.actionCallback;
-            Assert.assertEquals(mockCallback, replaceCallback.cb);
+                    recyclerViewAdapter.getActionCallback();
+            Assert.assertThat(replaceCallback.cb, is(mockCallback));
         } else {
             Assert.fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
         }
@@ -116,7 +118,7 @@ public void testBuilder_nullContext() {
                     .build();
             Assert.fail("Null context should throw exception");
         } catch (IllegalArgumentException e) {
-            Assert.assertEquals(NULL_CONTEXT_MESSAGE, e.getMessage());
+            Assert.assertThat(e.getMessage(), is(NULL_CONTEXT_MESSAGE));
         }
     }
 
@@ -127,7 +129,7 @@ public void testBuilder_nullTimeline() {
                     .build();
             Assert.fail("Null timeline should throw exception");
         } catch (IllegalArgumentException e) {
-            Assert.assertEquals(NULL_TIMELINE_MESSAGE, e.getMessage());
+            Assert.assertThat(e.getMessage(), is(NULL_TIMELINE_MESSAGE));
         }
     }
 
@@ -139,7 +141,7 @@ public void testBuilder_withTimelineFilter() {
                 .setTimelineFilter(mockTimelineFilter)
                 .build();
 
-        Assert.assertTrue(recyclerViewAdapter.timelineDelegate instanceof FilterTimelineDelegate);
+        Assert.assertThat(recyclerViewAdapter.getTimelineDelegate() instanceof FilterTimelineDelegate, is(true));
     }
 
     public void testBuilder_withNullTimelineFilter() {
@@ -149,14 +151,14 @@ public void testBuilder_withNullTimelineFilter() {
                 .setTimelineFilter(null)
                 .build();
 
-        Assert.assertTrue(recyclerViewAdapter.timelineDelegate instanceof TimelineDelegate);
+        Assert.assertThat(recyclerViewAdapter.getTimelineDelegate() instanceof TimelineDelegate, is(true));
     }
 
     public void testItemCount_viaConstructor() {
         final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(ITEM_COUNT);
         final TweetTimelineRecyclerViewAdapter recyclerViewAdapter = new
                 TweetTimelineRecyclerViewAdapter(getContext(), fakeTimeline);
-        Assert.assertEquals(ITEM_COUNT, recyclerViewAdapter.getItemCount());
+        Assert.assertThat(recyclerViewAdapter.getItemCount(), is(ITEM_COUNT));
     }
 
     public void testItemCount_viaBuilder() {
@@ -166,7 +168,7 @@ public void testItemCount_viaBuilder() {
                         .setTimeline(fakeTimeline)
                         .setViewStyle(R.style.tw__TweetLightWithActionsStyle)
                         .build();
-        Assert.assertEquals(ITEM_COUNT, recyclerViewAdapter.getItemCount());
+        Assert.assertThat(recyclerViewAdapter.getItemCount(), is(ITEM_COUNT));
     }
 
     public void testConstructor_scribesImpression() {
@@ -186,23 +188,23 @@ public void testConstructor_scribesImpression() {
         verify(tweetUi).scribe(tfwNamespaceCaptor.capture(), scribeItemsCaptor.capture());
 
         final EventNamespace sdkNs = sdkNamespaceCaptor.getValue();
-        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_CLIENT, sdkNs.client);
-        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_PAGE, sdkNs.page);
-        Assert.assertEquals(TEST_SCRIBE_SECTION, sdkNs.section);
-        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_COMPONENT, sdkNs.component);
-        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_ELEMENT, sdkNs.element);
-        Assert.assertEquals(REQUIRED_IMPRESSION_ACTION, sdkNs.action);
+        Assert.assertThat(sdkNs.client, is(REQUIRED_SDK_IMPRESSION_CLIENT));
+        Assert.assertThat(sdkNs.page, is(REQUIRED_SDK_IMPRESSION_PAGE));
+        Assert.assertThat(sdkNs.section, is(TEST_SCRIBE_SECTION));
+        Assert.assertThat(sdkNs.component, is(REQUIRED_SDK_IMPRESSION_COMPONENT));
+        Assert.assertThat(sdkNs.element, is(REQUIRED_SDK_IMPRESSION_ELEMENT));
+        Assert.assertThat(sdkNs.action, is(REQUIRED_IMPRESSION_ACTION));
 
         final EventNamespace tfwNs = tfwNamespaceCaptor.getValue();
-        Assert.assertEquals(REQUIRED_TFW_CLIENT, tfwNs.client);
-        Assert.assertEquals(REQUIRED_TFW_PAGE, tfwNs.page);
-        Assert.assertEquals(REQUIRED_TFW_SECTION, tfwNs.section);
-        Assert.assertEquals(TEST_SCRIBE_SECTION, tfwNs.component);
-        Assert.assertEquals(REQUIRED_TFW_ELEMENT, tfwNs.element);
-        Assert.assertEquals(REQUIRED_IMPRESSION_ACTION, tfwNs.action);
+        Assert.assertThat(tfwNs.client, is(REQUIRED_TFW_CLIENT));
+        Assert.assertThat(tfwNs.page, is(REQUIRED_TFW_PAGE));
+        Assert.assertThat(tfwNs.section, is(REQUIRED_TFW_SECTION));
+        Assert.assertThat(tfwNs.component, is(TEST_SCRIBE_SECTION));
+        Assert.assertThat(tfwNs.element, is(REQUIRED_TFW_ELEMENT));
+        Assert.assertThat(tfwNs.action, is(REQUIRED_IMPRESSION_ACTION));
 
         final List<ScribeItem> scribeItems = scribeItemsCaptor.getValue();
-        Assert.assertNotNull(scribeItems);
+        Assert.assertThat(scribeItems, notNullValue());
     }
 
     static class FakeTweetTimeline implements Timeline<Tweet> {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
index 9bf69850..d9b1e446 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
@@ -25,8 +25,11 @@
 import com.twitter.sdk.android.core.TwitterCoreTestUtils;
 import com.twitter.sdk.android.core.TwitterTestUtils;
 
+import org.junit.Assert;
+
 import java.util.concurrent.ThreadPoolExecutor;
 
+import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.mockito.Mockito.mock;
 
 public class TweetUiBackgroundTest extends InstrumentationTestCase {
@@ -60,6 +63,6 @@ public void testRenderTweet_beforeInBackground() {
     }
 
     public void testGetTweetRepository() {
-        Assert.assertNotNull(TweetUi.getInstance().getTweetRepository());
+        Assert.assertThat(TweetUi.getInstance().getTweetRepository(), notNullValue());
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
index 2a62e0dc..0721d4c2 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
@@ -25,8 +25,11 @@
 import com.twitter.sdk.android.core.TwitterTestUtils;
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 
+import org.junit.Assert;
+
 import java.util.concurrent.ExecutorService;
 
+import static org.hamcrest.CoreMatchers.*;
 import static org.mockito.Mockito.mock;
 
 public class TweetUiTest extends AndroidTestCase {
@@ -55,19 +58,18 @@ protected void tearDown() throws Exception {
     }
 
     public void testGetVersion() {
-        Assert.assertEquals(BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER,
-                tweetUi.getVersion());
+        Assert.assertThat(tweetUi.getVersion(), is(BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER));
     }
 
     public void testGetIdentifier() {
         final String identifier = BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID;
-        Assert.assertEquals(identifier, tweetUi.getIdentifier());
+        Assert.assertThat(tweetUi.getIdentifier(), is(identifier));
     }
 
     public void testGetInstance_tweeterStarted() {
         try {
             final TweetUi instance = TweetUi.getInstance();
-            Assert.assertNotNull(instance);
+            Assert.assertThat(instance, notNullValue());
         } catch (Exception ex) {
             Assert.fail("IllegalStateException was expected");
         }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
index 30c9fcb4..c33d113c 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
@@ -28,6 +28,11 @@
 import com.twitter.sdk.android.core.models.TweetEntities;
 import com.twitter.sdk.android.core.models.UserBuilder;
 
+import org.junit.Assert;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.nullValue;
+
 public class TweetUtilsTest extends AndroidTestCase {
     static final String NOT_STARTED_ERROR = "Must initialize Twitter before using getInstance()";
     private static final String A_FULL_PERMALINK =
@@ -52,7 +57,7 @@ public void testLoadTweet_beforeKitStart() {
             TweetUtils.loadTweet(TestFixtures.TEST_TWEET_ID, null);
             Assert.fail("IllegalStateException not thrown");
         } catch (IllegalStateException e) {
-            Assert.assertEquals(NOT_STARTED_ERROR, e.getMessage());
+            Assert.assertThat(e.getMessage(), is(NOT_STARTED_ERROR));
         } catch (Exception ex) {
             Assert.fail();
         }
@@ -63,26 +68,26 @@ public void testLoadTweets_beforeKitStart() {
             TweetUtils.loadTweets(TestFixtures.TWEET_IDS, null);
             Assert.fail("IllegalStateException not thrown");
         } catch (IllegalStateException e) {
-            Assert.assertEquals(NOT_STARTED_ERROR, e.getMessage());
+            Assert.assertThat(e.getMessage(), is(NOT_STARTED_ERROR));
         } catch (Exception ex) {
             Assert.fail();
         }
     }
 
     public void testIsTweetResolvable_nullTweet() {
-        Assert.assertFalse(TweetUtils.isTweetResolvable(null));
+        Assert.assertThat(TweetUtils.isTweetResolvable(null), is(false));
     }
 
     public void testIsTweetResolvable_hasInvalidIdAndNullUser() {
         final Tweet tweet = new TweetBuilder().build();
-        Assert.assertNull(tweet.user);
-        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertThat(tweet.getUser(), nullValue());
+        Assert.assertThat(TweetUtils.isTweetResolvable(tweet), is(false));
     }
 
     public void testIsTweetResolvable_hasValidIdAndNullUser() {
         final Tweet tweet = new TweetBuilder().setId(TestFixtures.TEST_TWEET_ID).build();
-        Assert.assertNull(tweet.user);
-        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertThat(tweet.getUser(), nullValue());
+        Assert.assertThat(TweetUtils.isTweetResolvable(tweet), is(false));
     }
 
     public void testIsTweetResolvable_hasInvalidIdAndUserWithNullScreenName() {
@@ -95,7 +100,7 @@ public void testIsTweetResolvable_hasInvalidIdAndUserWithNullScreenName() {
                                 .setVerified(false)
                                 .build())
                 .build();
-        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertThat(TweetUtils.isTweetResolvable(tweet), is(false));
     }
 
     public void testIsTweetResolvable_hasValidIdAndUserWithNullScreenName() {
@@ -109,7 +114,7 @@ public void testIsTweetResolvable_hasValidIdAndUserWithNullScreenName() {
                                 .setVerified(false)
                                 .build()
                 ).build();
-        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertThat(TweetUtils.isTweetResolvable(tweet), is(false));
     }
 
     public void testIsTweetResolvable_hasInvalidIdAndUserWithEmptyScreenName() {
@@ -121,7 +126,7 @@ public void testIsTweetResolvable_hasInvalidIdAndUserWithEmptyScreenName() {
                         .setVerified(false)
                         .build())
                 .build();
-        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertThat(TweetUtils.isTweetResolvable(tweet), is(false));
     }
 
     public void testIsTweetResolvable_hasValidIdAndUserWithEmptyScreenName() {
@@ -134,43 +139,40 @@ public void testIsTweetResolvable_hasValidIdAndUserWithEmptyScreenName() {
                         .setVerified(false)
                         .build())
                 .build();
-        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertThat(TweetUtils.isTweetResolvable(tweet), is(false));
     }
 
     public void testIsTweetResolvable_hasUserWithScreenNameAndValidId() {
-        Assert.assertTrue(TweetUtils.isTweetResolvable(TestFixtures.TEST_TWEET));
+        Assert.assertThat(TweetUtils.isTweetResolvable(TestFixtures.TEST_TWEET), is(true));
     }
 
     public void testGetPermalink_nullScreenNameValidId() {
-        Assert.assertEquals(A_PERMALINK_WITH_NO_SCREEN_NAME,
-                TweetUtils.getPermalink(null, A_VALID_TWEET_ID).toString());
+        Assert.assertThat(TweetUtils.getPermalink(null, A_VALID_TWEET_ID).toString(), is(A_PERMALINK_WITH_NO_SCREEN_NAME));
     }
 
     public void testGetPermalink_validScreenNameZeroId() {
-        Assert.assertNull(TweetUtils.getPermalink(A_VALID_SCREEN_NAME, AN_INVALID_TWEET_ID));
+        Assert.assertThat(TweetUtils.getPermalink(A_VALID_SCREEN_NAME, AN_INVALID_TWEET_ID), nullValue());
     }
 
     public void testGetPermalink_validScreenNameAndId() {
-        Assert.assertEquals(A_FULL_PERMALINK,
-                TweetUtils.getPermalink(A_VALID_SCREEN_NAME, A_VALID_TWEET_ID).toString());
+        Assert.assertThat(TweetUtils.getPermalink(A_VALID_SCREEN_NAME, A_VALID_TWEET_ID).toString(), is(A_FULL_PERMALINK));
     }
 
     public void testGetPermalink_emptyScreenName() {
         final Uri permalink = TweetUtils.getPermalink("", 20);
-        Assert.assertEquals(A_PERMALINK_WITH_NO_SCREEN_NAME, permalink.toString());
+        Assert.assertThat(permalink.toString(), is(A_PERMALINK_WITH_NO_SCREEN_NAME));
     }
 
     public void testGetDisplayTweet_nullTweet() {
-        Assert.assertNull(TweetUtils.getDisplayTweet(null));
+        Assert.assertThat(TweetUtils.getDisplayTweet(null), nullValue());
     }
 
     public void testGetDisplayTweet_retweet() {
-        Assert.assertEquals(TestFixtures.TEST_RETWEET.retweetedStatus,
-                TweetUtils.getDisplayTweet(TestFixtures.TEST_RETWEET));
+        Assert.assertThat(TweetUtils.getDisplayTweet(TestFixtures.TEST_RETWEET), is(TestFixtures.TEST_RETWEET.getRetweetedStatus()));
     }
 
     public void testGetDisplayTweet_nonRetweet() {
-        Assert.assertEquals(TestFixtures.TEST_TWEET, TweetUtils.getDisplayTweet(TestFixtures.TEST_TWEET));
+        Assert.assertThat(TweetUtils.getDisplayTweet(TestFixtures.TEST_TWEET), is(TestFixtures.TEST_TWEET));
     }
 
     public void testShowQuoteTweet() {
@@ -178,7 +180,7 @@ public void testShowQuoteTweet() {
                 .copy(TestFixtures.TEST_TWEET)
                 .setQuotedStatus(TestFixtures.TEST_TWEET)
                 .build();
-        Assert.assertTrue(TweetUtils.showQuoteTweet(tweet));
+        Assert.assertThat(TweetUtils.showQuoteTweet(tweet), is(true));
     }
 
     public void testShowQuoteTweet_withCardAndQuoteTweet() {
@@ -187,7 +189,7 @@ public void testShowQuoteTweet_withCardAndQuoteTweet() {
                 .setCard(new Card(null, "Vine"))
                 .setEntities(new TweetEntities(null, null, null, null, null))
                 .build();
-        Assert.assertFalse(TweetUtils.showQuoteTweet(tweet));
+        Assert.assertThat(TweetUtils.showQuoteTweet(tweet), is(false));
     }
 
     public void testShowQuoteTweet_withMediaAndQuoteTweet() {
@@ -195,7 +197,7 @@ public void testShowQuoteTweet_withMediaAndQuoteTweet() {
                 .copy(TestFixtures.TEST_PHOTO_TWEET)
                 .setQuotedStatus(TestFixtures.TEST_TWEET)
                 .build();
-        Assert.assertFalse(TweetUtils.showQuoteTweet(tweet));
+        Assert.assertThat(TweetUtils.showQuoteTweet(tweet), is(false));
     }
 
     public void testShowQuoteTweet_nullEntity() {
@@ -204,6 +206,6 @@ public void testShowQuoteTweet_nullEntity() {
                 .setQuotedStatus(TestFixtures.TEST_TWEET)
                 .setEntities(null)
                 .build();
-        Assert.assertTrue(TweetUtils.showQuoteTweet(tweet));
+        Assert.assertThat(TweetUtils.showQuoteTweet(tweet), is(true));
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
index 3d942e50..134350d2 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
@@ -22,6 +22,10 @@
 
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
+
+import static org.hamcrest.CoreMatchers.is;
+
 public class TweetViewTest extends BaseTweetViewTest {
     @Override
     TweetView createView(Context context, Tweet tweet) {
@@ -60,25 +64,25 @@ TweetView createViewWithMocks(Context context, Tweet tweet, int styleResId,
     public void testInit() {
         super.testInit();
         final TweetView view = createView(context, TestFixtures.TEST_TWEET);
-        Assert.assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
+        Assert.assertThat(view.mediaContainer.getVisibility(), is(ImageView.GONE));
     }
 
     @Override
     public void testInit_withEmptyTweet() {
         super.testInit();
         final TweetView view = createView(context, TestFixtures.TEST_TWEET);
-        Assert.assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
+        Assert.assertThat(view.mediaContainer.getVisibility(), is(ImageView.GONE));
     }
 
     public void testInit_withPhotoTweet() {
         final TweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        Assert.assertEquals(ImageView.VISIBLE, view.mediaContainer.getVisibility());
+        Assert.assertThat(view.mediaContainer.getVisibility(), is(ImageView.VISIBLE));
     }
 
     // Layout
     public void testLayout() {
         final TweetView tweetView = new TweetView(context, TestFixtures.TEST_TWEET);
-        Assert.assertEquals(R.layout.tw__tweet, tweetView.getLayout());
+        Assert.assertThat(tweetView.getLayout(), is(R.layout.tw__tweet));
     }
 
     public void testGetAspectRatio() {
@@ -95,9 +99,9 @@ public void testGetAspectRatio() {
     public void testGetAspectRatioForPhotoEntity() {
         final TweetView tweetView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
 
-        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(1));
-        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(2));
-        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(3));
-        Assert.assertEquals(1.0, tweetView.getAspectRatioForPhotoEntity(4));
+        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(1), 0.0);
+        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(2), 0.0);
+        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(3), 0.0);
+        Assert.assertEquals(1.0, tweetView.getAspectRatioForPhotoEntity(4), 0.0);
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java
index 09a44592..207014d8 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java
@@ -17,6 +17,10 @@
 
 package com.twitter.sdk.android.tweetui;
 
+import org.junit.Assert;
+
+import static org.hamcrest.CoreMatchers.notNullValue;
+
 public class TweetViewXmlTest extends BaseTweetViewXmlTest {
     @Override
     TweetView getView() {
@@ -32,7 +36,7 @@ TweetView getViewDark() {
 
     public void testLayout() {
         final TweetView view = getView();
-        Assert.assertNotNull(view);
-        Assert.assertEquals(R.layout.tw__tweet, view.getLayout());
+        Assert.assertThat(view, notNullValue());
+        Assert.assertThat(view.getLayout(), is(R.layout.tw__tweet));
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
index 37c0be7b..d6415b1c 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
@@ -22,13 +22,17 @@
 import android.graphics.RectF;
 import android.test.AndroidTestCase;
 
+import org.junit.Assert;
+
+import static org.hamcrest.CoreMatchers.is;
+
 public class MultiTouchImageViewTest extends AndroidTestCase {
-    static final RectF TEST_VIEW_RECT = new RectF(0, 0, 100, 100);
-    static final Matrix TEST_BASE_MATRIX = new MatrixBuilder().postScale(2f).build();
-    static final Matrix TEST_IDENTITY_MATRIX = new MatrixBuilder().build();
-    static final float TEST_BASE_SCALE = 1f;
-    static final Bitmap image = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
-    MultiTouchImageView view;
+    private static final RectF TEST_VIEW_RECT = new RectF(0, 0, 100, 100);
+    private static final Matrix TEST_BASE_MATRIX = new MatrixBuilder().postScale(2f).build();
+    private static final Matrix TEST_IDENTITY_MATRIX = new MatrixBuilder().build();
+    private static final float TEST_BASE_SCALE = 1f;
+    private static final Bitmap image = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
+    private MultiTouchImageView view;
 
     public void setUp() throws Exception {
         super.setUp();
@@ -38,11 +42,11 @@ public void setUp() throws Exception {
     }
 
     public void testInitialViewState() {
-        Assert.assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
-        Assert.assertEquals(TEST_IDENTITY_MATRIX, view.updateMatrix);
-        Assert.assertEquals(TEST_VIEW_RECT, view.viewRect);
-        Assert.assertEquals(TEST_BASE_SCALE, view.getScale());
-        Assert.assertEquals(TEST_BASE_MATRIX, view.getDrawMatrix());
+        Assert.assertThat(view.baseMatrix, is(TEST_BASE_MATRIX));
+        Assert.assertThat(view.updateMatrix, is(TEST_IDENTITY_MATRIX));
+        Assert.assertThat(view.viewRect, is(TEST_VIEW_RECT));
+        Assert.assertThat(view.getScale(), is(TEST_BASE_SCALE));
+        Assert.assertThat(view.getDrawMatrix(), is(TEST_BASE_MATRIX));
     }
 
     public void testGetDrawRect() {
@@ -52,7 +56,7 @@ public void testGetDrawRect() {
                 .build();
         final RectF result = view.getDrawRect(matrix);
         final RectF expected = new RectF(10f, 10f, 110f, 110f);
-        Assert.assertEquals(expected, result);
+        Assert.assertThat(result, is(expected));
     }
 
     public void testSetScale() {
@@ -62,18 +66,18 @@ public void testSetScale() {
                 .postScale(1.5f)
                 .postTranslate(-25f, -25f)
                 .build();
-        Assert.assertEquals(expected, view.updateMatrix);
-        Assert.assertEquals(1.5f, view.getScale());
-        Assert.assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
+        Assert.assertThat(view.updateMatrix, is(expected));
+        Assert.assertEquals(1.5f, view.getScale(), 0.0);
+        Assert.assertThat(view.baseMatrix, is(TEST_BASE_MATRIX));
     }
 
     public void testReset() {
         view.setScale(1.5f, 50f, 50f);
         view.reset();
 
-        Assert.assertEquals(TEST_IDENTITY_MATRIX, view.updateMatrix);
-        Assert.assertEquals(TEST_BASE_SCALE, view.getScale());
-        Assert.assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
+        Assert.assertThat(view.updateMatrix, is(TEST_IDENTITY_MATRIX));
+        Assert.assertEquals(TEST_BASE_SCALE, view.getScale(), 0.0);
+        Assert.assertThat(view.baseMatrix, is(TEST_BASE_MATRIX));
     }
 
     public void testSetTranslate() {
@@ -82,18 +86,18 @@ public void testSetTranslate() {
         final Matrix expected = new MatrixBuilder()
                 .postTranslate(10f, 10f)
                 .build();
-        Assert.assertEquals(expected, view.updateMatrix);
-        Assert.assertEquals(TEST_BASE_SCALE, view.getScale());
-        Assert.assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
+        Assert.assertThat(view.updateMatrix, is(expected));
+        Assert.assertEquals(TEST_BASE_SCALE, view.getScale(), 0.0);
+        Assert.assertThat(view.baseMatrix, is(TEST_BASE_MATRIX));
     }
 
     public void testCanBeSwiped_withScaleEqualOne() {
-        Assert.assertTrue(view.canBeSwiped());
+        Assert.assertThat(view.canBeSwiped(), is(true));
     }
 
     public void testCanBeSwiped_withScaleGreaterThanOne() {
         view.setScale(2, 0, 0);
-        Assert.assertFalse(view.canBeSwiped());
+        Assert.assertThat(view.canBeSwiped(), is(false));
     }
 
     static class MatrixBuilder {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
index 55c70e2e..6f99234f 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
@@ -22,6 +22,10 @@
 import android.test.AndroidTestCase;
 import android.widget.ImageView;
 
+import org.junit.Assert;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.mock;
@@ -79,8 +83,8 @@ public void testSetOverlayDrawable() {
         overlayImageView.setOverlayDrawable(drawable);
 
         verify(overlay).cleanupDrawable(overlayImageView);
-        Assert.assertNotNull(overlayImageView.overlay);
-        Assert.assertEquals(drawable, overlayImageView.overlay.drawable);
+        Assert.assertThat(overlayImageView.overlay, notNullValue());
+        Assert.assertThat(overlayImageView.overlay.drawable, is(drawable));
     }
 
     public void testSetOverlayDrawable_nullDrawable() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java
index e0be68a8..209c0660 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java
@@ -22,18 +22,19 @@
 import android.widget.ImageButton;
 import android.widget.SeekBar;
 
-import com.twitter.sdk.android.tweetui.R;
+import org.junit.Assert;
 
+import static org.hamcrest.CoreMatchers.*;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
 public class VideoControlViewTest extends AndroidTestCase {
-    static final int SECOND_IN_MS = 1000;
-    static final int MINUTE_IN_MS = 60000;
-    static final int TEST_BUFFER_PROGRESS = 32;
-    VideoControlView videoControlView;
+    private static final int SECOND_IN_MS = 1000;
+    private static final int MINUTE_IN_MS = 60000;
+    private static final int TEST_BUFFER_PROGRESS = 32;
+    private VideoControlView videoControlView;
 
     public void setUp() throws Exception {
         super.setUp();
@@ -42,19 +43,19 @@ public void setUp() throws Exception {
     }
 
     public void testInitialState() {
-        Assert.assertTrue(videoControlView.getVisibility() == View.VISIBLE);
-        Assert.assertNotNull(videoControlView.seekBar);
-        Assert.assertNotNull(videoControlView.duration);
-        Assert.assertNotNull(videoControlView.currentTime);
-        Assert.assertNotNull(videoControlView.stateControl);
-        Assert.assertNull(videoControlView.player);
-
-        Assert.assertEquals(1000, videoControlView.seekBar.getMax());
-        Assert.assertEquals(0, videoControlView.seekBar.getProgress());
-        Assert.assertEquals(0, videoControlView.seekBar.getSecondaryProgress());
-
-        Assert.assertEquals("0:00", videoControlView.duration.getText());
-        Assert.assertEquals("0:00", videoControlView.currentTime.getText());
+        Assert.assertThat(videoControlView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(videoControlView.seekBar, notNullValue());
+        Assert.assertThat(videoControlView.duration, notNullValue());
+        Assert.assertThat(videoControlView.currentTime, notNullValue());
+        Assert.assertThat(videoControlView.stateControl, notNullValue());
+        Assert.assertThat(videoControlView.player, nullValue());
+
+        Assert.assertThat(videoControlView.seekBar.getMax(), is(1000));
+        Assert.assertThat(videoControlView.seekBar.getProgress(), is(0));
+        Assert.assertThat(videoControlView.seekBar.getSecondaryProgress(), is(0));
+
+        Assert.assertThat(videoControlView.duration.getText(), is("0:00"));
+        Assert.assertThat(videoControlView.currentTime.getText(), is("0:00"));
     }
 
     public void testCreateStateControlClickListener() {
@@ -84,7 +85,7 @@ public void testCreateProgressChangeListener() {
         when(player.getDuration()).thenReturn(MINUTE_IN_MS);
         listener.onProgressChanged(null, 500, true);
         verify(player).seekTo(30000);
-        Assert.assertEquals("0:30", videoControlView.currentTime.getText());
+        Assert.assertThat(videoControlView.currentTime.getText(), is("0:30"));
     }
 
     public void testCreateProgressChangeListener_fromUserFalse() {
@@ -101,7 +102,7 @@ public void testCreateProgressChangeListener_fromUserFalse() {
     }
 
     public void testIsShowing() {
-        Assert.assertTrue(videoControlView.isShowing());
+        Assert.assertThat(videoControlView.isShowing(), is(true));
     }
 
     public void testUpdateProgress() {
@@ -114,33 +115,33 @@ public void testUpdateProgress() {
 
         videoControlView.updateProgress();
 
-        Assert.assertEquals(16, videoControlView.seekBar.getProgress());
-        Assert.assertEquals(500, videoControlView.seekBar.getSecondaryProgress());
+        Assert.assertThat(videoControlView.seekBar.getProgress(), is(16));
+        Assert.assertThat(videoControlView.seekBar.getSecondaryProgress(), is(500));
 
-        Assert.assertEquals("1:00", videoControlView.duration.getText());
-        Assert.assertEquals("0:01", videoControlView.currentTime.getText());
+        Assert.assertThat(videoControlView.duration.getText(), is("1:00"));
+        Assert.assertThat(videoControlView.currentTime.getText(), is("0:01"));
     }
 
     public void testSetDuration() {
         videoControlView.setDuration(SECOND_IN_MS);
-        Assert.assertEquals("0:01", videoControlView.duration.getText());
+        Assert.assertThat(videoControlView.duration.getText(), is("0:01"));
     }
 
     public void testSetCurrentTime() {
         videoControlView.setCurrentTime(SECOND_IN_MS);
-        Assert.assertEquals("0:01", videoControlView.currentTime.getText());
+        Assert.assertThat(videoControlView.currentTime.getText(), is("0:01"));
     }
 
     public void testSetSeekBarProgress() {
         videoControlView.setProgress(SECOND_IN_MS, MINUTE_IN_MS, TEST_BUFFER_PROGRESS);
-        Assert.assertEquals(16, videoControlView.seekBar.getProgress());
-        Assert.assertEquals(320, videoControlView.seekBar.getSecondaryProgress());
+        Assert.assertThat(videoControlView.seekBar.getProgress(), is(16));
+        Assert.assertThat(videoControlView.seekBar.getSecondaryProgress(), is(320));
     }
 
     public void testSetSeekBarProgress_zeroDuration() {
         videoControlView.setProgress(SECOND_IN_MS, 0, TEST_BUFFER_PROGRESS);
-        Assert.assertEquals(0, videoControlView.seekBar.getProgress());
-        Assert.assertEquals(320, videoControlView.seekBar.getSecondaryProgress());
+        Assert.assertThat(videoControlView.seekBar.getProgress(), is(0));
+        Assert.assertThat(videoControlView.seekBar.getSecondaryProgress(), is(320));
     }
 
     public void testSetPlayDrawable() {
@@ -172,6 +173,6 @@ public void testSetReplayDrawable() {
 
     public void testSetMediaPlayer() {
         videoControlView.setMediaPlayer(mock(VideoControlView.MediaPlayerControl.class));
-        Assert.assertNotNull(videoControlView.player);
+        Assert.assertThat(videoControlView.player, notNullValue());
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
index a39aa070..2a2a0fb9 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
@@ -173,7 +173,7 @@ public long getTweetId() {
         if (tweet == null) {
             return INVALID_ID;
         }
-        return tweet.id;
+        return tweet.getId();
     }
 
     /**
@@ -226,7 +226,7 @@ void render() {
 
         // set permalink if tweet id and screen name are available
         if (TweetUtils.isTweetResolvable(tweet)) {
-            setPermalinkUri(tweet.user.screenName, getTweetId());
+            setPermalinkUri(tweet.getUser().getScreenName(), getTweetId());
         } else {
             permalinkUri = null;
         }
@@ -272,12 +272,12 @@ void scribePermalinkClick() {
     }
 
     void scribeCardImpression(Long tweetId, Card card) {
-        final ScribeItem scribeItem = ScribeItem.fromTweetCard(tweetId, card);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromTweetCard(tweetId, card);
         dependencyProvider.getVideoScribeClient().impression(scribeItem);
     }
 
     void scribeMediaEntityImpression(long tweetId, MediaEntity mediaEntity) {
-        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(tweetId, mediaEntity);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMediaEntity(tweetId, mediaEntity);
         dependencyProvider.getVideoScribeClient().impression(scribeItem);
     }
 
@@ -285,8 +285,8 @@ void scribeMediaEntityImpression(long tweetId, MediaEntity mediaEntity) {
      * Sets the Tweet author name. If author name is unavailable, resets to empty string.
      */
     private void setName(Tweet displayTweet) {
-        if (displayTweet != null && displayTweet.user != null) {
-            fullNameView.setText(Utils.stringOrEmpty(displayTweet.user.name));
+        if (displayTweet != null && displayTweet.getUser() != null) {
+            fullNameView.setText(Utils.stringOrEmpty(displayTweet.getUser().getName()));
         } else {
             fullNameView.setText(EMPTY_STRING);
         }
@@ -296,9 +296,9 @@ private void setName(Tweet displayTweet) {
      * Sets the Tweet author screen name. If screen name is unavailable, resets to empty string.
      */
     private void setScreenName(Tweet displayTweet) {
-        if (displayTweet != null && displayTweet.user != null) {
+        if (displayTweet != null && displayTweet.getUser() != null) {
             screenNameView.setText(UserUtils.formatScreenName(
-                    Utils.stringOrEmpty(displayTweet.user.screenName)));
+                    Utils.stringOrEmpty(displayTweet.getUser().getScreenName())));
         } else {
             screenNameView.setText(EMPTY_STRING);
         }
@@ -330,8 +330,8 @@ final void setTweetMedia(Tweet displayTweet) {
             return;
         }
 
-        if (displayTweet.card != null && VineCardUtils.isVine(displayTweet.card)) {
-            final Card card = displayTweet.card;
+        if (displayTweet.getCard() != null && VineCardUtils.isVine(displayTweet.getCard())) {
+            final Card card = displayTweet.getCard();
             final ImageValue imageValue = VineCardUtils.getImageValue(card);
             final String playerStreamUrl = VineCardUtils.getStreamUrl(card);
             // Make sure we have required bindings for Vine card
@@ -340,7 +340,7 @@ final void setTweetMedia(Tweet displayTweet) {
                 tweetMediaView.setVineCard(displayTweet);
                 mediaBadgeView.setVisibility(View.VISIBLE);
                 mediaBadgeView.setCard(card);
-                scribeCardImpression(displayTweet.id, card);
+                scribeCardImpression(displayTweet.getId(), card);
             }
         } else if (TweetMediaUtils.hasSupportedVideo(displayTweet)) {
             final MediaEntity mediaEntity = TweetMediaUtils.getVideoEntity(displayTweet);
@@ -348,7 +348,7 @@ final void setTweetMedia(Tweet displayTweet) {
             tweetMediaView.setTweetMediaEntities(tweet, Collections.singletonList(mediaEntity));
             mediaBadgeView.setVisibility(View.VISIBLE);
             mediaBadgeView.setMediaEntity(mediaEntity);
-            scribeMediaEntityImpression(displayTweet.id, mediaEntity);
+            scribeMediaEntityImpression(displayTweet.getId(), mediaEntity);
         } else if (TweetMediaUtils.hasPhoto(displayTweet)) {
             final List<MediaEntity> mediaEntities = TweetMediaUtils.getPhotoEntities(displayTweet);
             setViewsForMedia(getAspectRatioForPhotoEntity(mediaEntities.size()));
@@ -396,12 +396,12 @@ protected CharSequence getLinkifiedText(Tweet displayTweet) {
 
         if (formattedText == null) return null;
 
-        final boolean stripVineCard = displayTweet.card != null
-                && VineCardUtils.isVine(displayTweet.card);
+        final boolean stripVineCard = displayTweet.getCard() != null
+                && VineCardUtils.isVine(displayTweet.getCard());
 
         final boolean stripQuoteTweet = TweetUtils.showQuoteTweet(displayTweet);
 
-        return TweetTextLinkifier.INSTANCE.linkifyUrls(formattedText, getLinkClickListener(), actionColor,
+        return TweetTextLinkifier.linkifyUrls(formattedText, getLinkClickListener(), actionColor,
                 actionHighlightColor, stripQuoteTweet, stripVineCard);
     }
 
@@ -416,14 +416,14 @@ void setContentDescription(Tweet displayTweet) {
         String tweetText = null;
         if (formattedTweetText != null) tweetText = formattedTweetText.getText();
 
-        final long createdAt = TweetDateUtils.apiTimeToLong(displayTweet.createdAt);
+        final long createdAt = TweetDateUtils.apiTimeToLong(displayTweet.getCreatedAt());
         String timestamp = null;
         if (createdAt != TweetDateUtils.INVALID_DATE) {
             timestamp = DateFormat.getDateInstance().format(new Date(createdAt));
         }
 
         setContentDescription(getResources().getString(R.string.tw__tweet_content_description,
-                Utils.stringOrEmpty(displayTweet.user.name), Utils.stringOrEmpty(tweetText),
+                Utils.stringOrEmpty(displayTweet.getUser().getName()), Utils.stringOrEmpty(tweetText),
                 Utils.stringOrEmpty(timestamp)));
     }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
index 6b14e3e8..59dd2c0c 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
@@ -213,14 +213,14 @@ private void setStyleAttributes(TypedArray a) {
         }
 
         // offset from white when background is light
-        secondaryTextColor = ColorUtils.INSTANCE.calculateOpacityTransform(
+        secondaryTextColor = ColorUtils.calculateOpacityTransform(
                 isLightBg ? SECONDARY_TEXT_COLOR_LIGHT_OPACITY : SECONDARY_TEXT_COLOR_DARK_OPACITY,
                 isLightBg ? Color.WHITE : Color.BLACK,
                 primaryTextColor
         );
 
         // offset from black when background is light
-        mediaBgColor = ColorUtils.INSTANCE.calculateOpacityTransform(
+        mediaBgColor = ColorUtils.calculateOpacityTransform(
                 isLightBg ? MEDIA_BG_LIGHT_OPACITY : MEDIA_BG_DARK_OPACITY,
                 isLightBg ? Color.BLACK : Color.WHITE,
                 containerBgColor
@@ -326,7 +326,7 @@ void setQuoteTweet(Tweet tweet) {
             quoteTweetView = new QuoteTweetView(getContext());
             quoteTweetView.setStyle(primaryTextColor, secondaryTextColor, actionColor,
                     actionHighlightColor, mediaBgColor, photoErrorResId);
-            quoteTweetView.setTweet(tweet.quotedStatus);
+            quoteTweetView.setTweet(tweet.getQuotedStatus());
             quoteTweetView.setTweetLinkClickListener(tweetLinkClickListener);
             quoteTweetView.setTweetMediaClickListener(tweetMediaClickListener);
             quoteTweetHolder.setVisibility(View.VISIBLE);
@@ -341,11 +341,11 @@ void setQuoteTweet(Tweet tweet) {
      * @param tweet The status from the API, if it is a retweet show the "retweeted by" text
      */
     void showRetweetedBy(Tweet tweet) {
-        if (tweet == null || tweet.retweetedStatus == null) {
+        if (tweet == null || tweet.getRetweetedStatus() == null) {
             retweetedByView.setVisibility(GONE);
         } else {
             retweetedByView.setText(
-                    getResources().getString(R.string.tw__retweeted_by_format, tweet.user.name));
+                    getResources().getString(R.string.tw__retweeted_by_format, tweet.getUser().getName()));
             retweetedByView.setVisibility(VISIBLE);
         }
     }
@@ -373,10 +373,10 @@ protected void applyStyles() {
      */
     private void setTimestamp(Tweet displayTweet) {
         final String formattedTimestamp;
-        if (displayTweet != null && displayTweet.createdAt != null &&
-                TweetDateUtils.isValidTimestamp(displayTweet.createdAt)) {
+        if (displayTweet != null && displayTweet.getCreatedAt() != null &&
+                TweetDateUtils.isValidTimestamp(displayTweet.getCreatedAt())) {
             final Long createdAtTimestamp
-                    = TweetDateUtils.apiTimeToLong(displayTweet.createdAt);
+                    = TweetDateUtils.apiTimeToLong(displayTweet.getCreatedAt());
             final String timestamp = TweetDateUtils.getRelativeTimeString(getResources(),
                     System.currentTimeMillis(),
                     createdAtTimestamp);
@@ -400,10 +400,10 @@ void setProfilePhotoView(Tweet displayTweet) {
         if (imageLoader == null) return;
 
         final String url;
-        if (displayTweet == null || displayTweet.user == null) {
+        if (displayTweet == null || displayTweet.getUser() == null) {
             url = null;
         } else {
-            url = UserUtils.INSTANCE.getProfileImageUrlHttps(displayTweet.user,
+            url = UserUtils.INSTANCE.getProfileImageUrlHttps(displayTweet.getUser(),
                     AvatarSize.REASONABLY_SMALL);
         }
 
@@ -415,14 +415,14 @@ void setProfilePhotoView(Tweet displayTweet) {
      * @param displayTweet The tweet from which to linkify the profile photo
      */
     void linkifyProfilePhotoView(final Tweet displayTweet) {
-        if (displayTweet != null && displayTweet.user != null) {
+        if (displayTweet != null && displayTweet.getUser() != null) {
             avatarView.setOnClickListener(v -> {
                 if (tweetLinkClickListener != null) {
                     tweetLinkClickListener.onLinkClick(displayTweet,
-                            TweetUtils.getProfilePermalink(displayTweet.user.screenName));
+                            TweetUtils.getProfilePermalink(displayTweet.getUser().getScreenName()));
                 } else {
                     final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(
-                            TweetUtils.getProfilePermalink(displayTweet.user.screenName)));
+                            TweetUtils.getProfilePermalink(displayTweet.getUser().getScreenName())));
                     if (!IntentUtils.safeStartActivity(getContext(), intent)) {
                         Twitter.getLogger().e(TweetUi.LOGTAG,
                                 "Activity cannot be found to open URL");
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java
index d5da879a..fb0392de 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java
@@ -96,16 +96,16 @@ public int totalFilters() {
     }
 
     boolean shouldFilterTweet(Tweet tweet) {
-        if (tweet.user != null &&
-                containsMatchingScreenName(tweet.user.screenName)) {
+        if (tweet.getUser() != null &&
+                containsMatchingScreenName(tweet.getUser().getScreenName())) {
             return true;
         }
 
-        if (tweet.entities != null &&
-                (containsMatchingHashtag(tweet.entities.hashtags) ||
-                        containsMatchingSymbol(tweet.entities.symbols) ||
-                        containsMatchingUrl(tweet.entities.urls) ||
-                        containsMatchingMention(tweet.entities.userMentions))) {
+        if (tweet.getEntities() != null &&
+                (containsMatchingHashtag(tweet.getEntities().getHashtags()) ||
+                        containsMatchingSymbol(tweet.getEntities().getSymbols()) ||
+                        containsMatchingUrl(tweet.getEntities().getUrls()) ||
+                        containsMatchingMention(tweet.getEntities().getUserMentions()))) {
             return true;
         }
 
@@ -113,12 +113,12 @@ boolean shouldFilterTweet(Tweet tweet) {
     }
 
     boolean containsMatchingText(Tweet tweet) {
-        wordIterator.setText(tweet.text);
+        wordIterator.setText(tweet.getText());
         int start = wordIterator.first();
         for (int end = wordIterator.next();
              end != BreakIterator.DONE;
              start = end, end = wordIterator.next()) {
-            final String word = tweet.text.substring(start, end);
+            final String word = tweet.getText().substring(start, end);
 
             if (keywordConstraints.contains(word)) {
                 return true;
@@ -150,7 +150,7 @@ boolean containsMatchingSymbol(List<SymbolEntity> symbols) {
 
     boolean containsMatchingUrl(List<UrlEntity> urls) {
         for (UrlEntity entity : urls) {
-            final String url = normalizeUrl(entity.expandedUrl);
+            final String url = normalizeUrl(entity.getExpandedUrl());
             if (urlConstraints.contains(url)) {
                 return true;
             }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
index 1d44aee9..3bcaad9f 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
@@ -145,14 +145,14 @@ public void failure(TwitterException exception) {
 
     static Tweet mapTweetToUsers(Tweet trimmedTweet, Map<Long, User> userMap) {
         // read user id from the trimmed Tweet
-        final Long userId = trimmedTweet.user.id;
+        final Long userId = trimmedTweet.getUser().getId();
         // lookup User in the collection response's UserMap
         final User user = userMap.get(userId);
         // build the Tweet with the User
         final TweetBuilder builder = new TweetBuilder().copy(trimmedTweet).setUser(user);
         // Repeat process for any quote tweets
-        if (trimmedTweet.quotedStatus != null) {
-            final Tweet quoteStatus = mapTweetToUsers(trimmedTweet.quotedStatus, userMap);
+        if (trimmedTweet.getQuotedStatus() != null) {
+            final Tweet quoteStatus = mapTweetToUsers(trimmedTweet.getQuotedStatus(), userMap);
             builder.setQuotedStatus(quoteStatus);
         }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.kt
index e3c22b94..d01fd6fd 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.kt
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.kt
@@ -19,7 +19,7 @@ package com.twitter.sdk.android.tweetui
 
 import android.graphics.Color
 
-internal object ColorUtils {
+object ColorUtils {
 
     /**
      * This method calculates a combination of colors using an opacity of the foreground layered
@@ -32,6 +32,7 @@ internal object ColorUtils {
      * @param primaryColor The background color that the foreground color is applied to
      * @return             The combined color value
      */
+    @JvmStatic
     fun calculateOpacityTransform(opacity: Double, overlayColor: Int,
                                   primaryColor: Int): Int {
         val redPrimary = Color.red(primaryColor)
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
index de406356..d43cb4de 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
@@ -133,7 +133,7 @@ void scribeFilteredTimeline(List<Tweet> tweets, List<Tweet> filteredTweets) {
 
         final String jsonMessage = getJsonMessage(tweetCount, totalTweetsFiltered,
                 totalFilters);
-        final ScribeItem scribeItem = ScribeItem.fromMessage(jsonMessage);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMessage(jsonMessage);
         final List<ScribeItem> items = new ArrayList<>();
         items.add(scribeItem);
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedMediaEntity.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedMediaEntity.java
index 662244bd..0c04c946 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedMediaEntity.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedMediaEntity.java
@@ -24,8 +24,8 @@
     final String mediaUrlHttps;
 
     FormattedMediaEntity(MediaEntity entity) {
-        super(entity.getStart(), entity.getEnd(), entity.displayUrl, entity.url,
-                entity.expandedUrl);
+        super(entity.getStart(), entity.getEnd(), entity.getDisplayUrl(), entity.getUrl(),
+                entity.getExpandedUrl());
         this.type = entity.type;
         this.mediaUrlHttps = entity.mediaUrlHttps;
     }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
index b2d1104a..b76f05f1 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
@@ -24,9 +24,9 @@ package com.twitter.sdk.android.tweetui
  */
 data class FormattedTweetText @JvmOverloads constructor(
         var text: String? = null,
-        val urlEntities: List<FormattedUrlEntity> = arrayListOf(),
-        val hashtagEntities: List<FormattedUrlEntity> = arrayListOf(),
-        val mediaEntities: List<FormattedMediaEntity> = arrayListOf(),
-        val mentionEntities: List<FormattedUrlEntity> = arrayListOf(),
-        val symbolEntities: List<FormattedUrlEntity> = arrayListOf()
+        val urlEntities: ArrayList<FormattedUrlEntity> = arrayListOf(),
+        val hashtagEntities: ArrayList<FormattedUrlEntity> = arrayListOf(),
+        val mediaEntities: ArrayList<FormattedMediaEntity> = arrayListOf(),
+        val mentionEntities: ArrayList<FormattedUrlEntity> = arrayListOf(),
+        val symbolEntities: ArrayList<FormattedUrlEntity> = arrayListOf()
 )
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt
index d3d6575d..91e64f2f 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt
@@ -27,15 +27,14 @@ open class FormattedUrlEntity(
         open var end: Int,
         open val displayUrl: String,
         open val url: String,
-        open val expandedUrl: String
+        open val expandedUrl: String?
 ) {
     companion object {
 
         @JvmStatic
-        fun createFormattedUrlEntity(entity: UrlEntity): FormattedUrlEntity {
-            return FormattedUrlEntity(entity.start, entity.end, entity.displayUrl,
-                    entity.url, entity.expandedUrl)
-        }
+        fun createFormattedUrlEntity(entity: UrlEntity): FormattedUrlEntity =
+                FormattedUrlEntity(entity.start, entity.end, entity.displayUrl,
+                        entity.url, entity.expandedUrl)
 
         @JvmStatic
         fun createFormattedUrlEntity(hashtagEntity: HashtagEntity): FormattedUrlEntity {
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryActivity.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryActivity.java
index a159b9cd..93b156d5 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryActivity.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryActivity.java
@@ -131,7 +131,7 @@ void scribeDismissEvent() {
 
     void scribeImpressionEvent(int mediaEntityPosition) {
         final MediaEntity mediaEntity = galleryItem.mediaEntities.get(mediaEntityPosition);
-        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(galleryItem.tweetId, mediaEntity);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMediaEntity(galleryItem.tweetId, mediaEntity);
         galleryScribeClient.impression(scribeItem);
     }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LikeTweetAction.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LikeTweetAction.java
index b95ede54..7ad9c411 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LikeTweetAction.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LikeTweetAction.java
@@ -56,13 +56,13 @@
     public void onClick(View view) {
         if (view instanceof ToggleImageButton) {
             final ToggleImageButton toggleImageButton = (ToggleImageButton) view;
-            if (tweet.favorited) {
+            if (tweet.getFavorited()) {
                 scribeUnFavoriteAction();
-                tweetRepository.unfavorite(tweet.id,
+                tweetRepository.unfavorite(tweet.getId(),
                         new LikeCallback(toggleImageButton, tweet, getActionCallback()));
             } else {
                 scribeFavoriteAction();
-                tweetRepository.favorite(tweet.id,
+                tweetRepository.favorite(tweet.getId(),
                         new LikeCallback(toggleImageButton, tweet, getActionCallback()));
             }
         }
@@ -121,13 +121,13 @@ public void failure(TwitterException exception) {
                         return;
                     default:
                         // reset the toggle state back to match the Tweet
-                        button.setToggledOn(tweet.favorited);
+                        button.setToggledOn(tweet.getFavorited());
                         cb.failure(exception);
                         return;
                 }
             }
             // reset the toggle state back to match the Tweet
-            button.setToggledOn(tweet.favorited);
+            button.setToggledOn(tweet.getFavorited());
             cb.failure(exception);
         }
     }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ShareTweetAction.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ShareTweetAction.java
index 49ccf1d8..2043f188 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ShareTweetAction.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ShareTweetAction.java
@@ -52,7 +52,7 @@ void scribeShareAction() {
     }
 
     void onClick(Context context, Resources resources) {
-        if (tweet == null || tweet.user == null) return;
+        if (tweet == null || tweet.getUser() == null) return;
 
         scribeShareAction();
 
@@ -66,12 +66,12 @@ void onClick(Context context, Resources resources) {
 
     String getShareContent(Resources resources) {
         return resources.getString(R.string.tw__share_content_format,
-                tweet.user.screenName, Long.toString(tweet.id));
+                tweet.getUser().getScreenName(), Long.toString(tweet.getId()));
     }
 
     String getShareSubject(Resources resources) {
-        return resources.getString(R.string.tw__share_subject_format, tweet.user.name,
-                tweet.user.screenName);
+        return resources.getString(R.string.tw__share_subject_format, tweet.getUser().getName(),
+                tweet.getUser().getScreenName());
     }
 
     void launchShareIntent(Intent chooser, Context context) {
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetActionBarView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetActionBarView.java
index 9fb7619d..2dd43fa5 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetActionBarView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetActionBarView.java
@@ -74,7 +74,7 @@ void setTweet(Tweet tweet) {
     void setLike(Tweet tweet) {
         final TweetUi tweetUi = dependencyProvider.getTweetUi();
         if (tweet != null) {
-            likeButton.setToggledOn(tweet.favorited);
+            likeButton.setToggledOn(tweet.getFavorited());
             final LikeTweetAction likeTweetAction = new LikeTweetAction(tweet,
                     tweetUi, actionCallback);
             likeButton.setOnClickListener(likeTweetAction);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
index 1c6e1e37..b98d0db6 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
@@ -72,20 +72,20 @@
     FormattedTweetText formatTweetText(final Tweet tweet) {
         if (tweet == null) return null;
 
-        final FormattedTweetText cached = formatCache.get(tweet.id);
+        final FormattedTweetText cached = formatCache.get(tweet.getId());
 
         if (cached != null) return cached;
 
         final FormattedTweetText formattedTweetText = TweetTextUtils.formatTweetText(tweet);
         if (formattedTweetText != null && !TextUtils.isEmpty(formattedTweetText.getText())) {
-            formatCache.put(tweet.id, formattedTweetText);
+            formatCache.put(tweet.getId(), formattedTweetText);
         }
 
         return formattedTweetText;
     }
 
     void updateCache(final Tweet tweet) {
-        tweetCache.put(tweet.id, tweet);
+        tweetCache.put(tweet.getId(), tweet);
     }
 
     /**
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetScribeClientImpl.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetScribeClientImpl.java
index 6e4353b8..6353193f 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetScribeClientImpl.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetScribeClientImpl.java
@@ -54,7 +54,7 @@
     @Override
     public void impression(Tweet tweet, String viewName, boolean actionEnabled) {
         final List<ScribeItem> items = new ArrayList<>();
-        items.add(ScribeItem.fromTweet(tweet));
+        items.add(ScribeItem.Companion.fromTweet(tweet));
 
         tweetUi.scribe(getTfwImpressionNamespace(viewName, actionEnabled), items);
         tweetUi.scribe(getSyndicatedImpressionNamespace(viewName), items);
@@ -63,7 +63,7 @@ public void impression(Tweet tweet, String viewName, boolean actionEnabled) {
     @Override
     public void share(Tweet tweet) {
         final List<ScribeItem> items = new ArrayList<>();
-        items.add(ScribeItem.fromTweet(tweet));
+        items.add(ScribeItem.Companion.fromTweet(tweet));
 
         tweetUi.scribe(getTfwShareNamespace(), items);
     }
@@ -71,7 +71,7 @@ public void share(Tweet tweet) {
     @Override
     public void favorite(Tweet tweet) {
         final List<ScribeItem> items = new ArrayList<>();
-        items.add(ScribeItem.fromTweet(tweet));
+        items.add(ScribeItem.Companion.fromTweet(tweet));
 
         tweetUi.scribe(getTfwFavoriteNamespace(), items);
     }
@@ -79,7 +79,7 @@ public void favorite(Tweet tweet) {
     @Override
     public void unfavorite(Tweet tweet) {
         final List<ScribeItem> items = new ArrayList<>();
-        items.add(ScribeItem.fromTweet(tweet));
+        items.add(ScribeItem.Companion.fromTweet(tweet));
 
         tweetUi.scribe(getTfwUnfavoriteNamespace(), items);
     }
@@ -87,7 +87,7 @@ public void unfavorite(Tweet tweet) {
     @Override
     public void click(Tweet tweet, String viewName) {
         final List<ScribeItem> items = new ArrayList<>();
-        items.add(ScribeItem.fromTweet(tweet));
+        items.add(ScribeItem.Companion.fromTweet(tweet));
 
         tweetUi.scribe(getTfwClickNamespace(viewName), items);
     }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.kt
index 3ee10ccf..c3c0ee7a 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.kt
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.kt
@@ -21,20 +21,17 @@ import android.os.Build
 import android.text.SpannableStringBuilder
 import android.text.Spanned
 import android.text.TextUtils
-import android.text.style.CharacterStyle
 import android.view.View
-
 import com.twitter.sdk.android.core.models.ModelUtils
 import com.twitter.sdk.android.tweetui.internal.ClickableLinkSpan
 import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils
-
 import java.util.ArrayList
-import java.util.Collections
 import java.util.regex.Pattern
+import kotlin.Comparator
 
 object TweetTextLinkifier {
-    val QUOTED_STATUS_URL = Pattern.compile("^https?://twitter\\.com(/#!)?/\\w+/status/\\d+$")
-    val VINE_URL = Pattern.compile("^https?://vine\\.co(/#!)?/v/\\w+$")
+    private val QUOTED_STATUS_URL: Pattern? = Pattern.compile("^https?://twitter\\.com(/#!)?/\\w+/status/\\d+$")
+    private val VINE_URL: Pattern? = Pattern.compile("^https?://vine\\.co(/#!)?/v/\\w+$")
 
     /**
      * Returns a charSequence with the display urls substituted in place of the t.co links. It will
@@ -181,8 +178,8 @@ object TweetTextLinkifier {
     }
 
     @JvmStatic
-    fun getEntityToStrip(tweetText: String?, combined: List<FormattedUrlEntity>,
-                         stripQuoteTweet: Boolean, stripVineCard: Boolean): FormattedUrlEntity? {
+    private fun getEntityToStrip(tweetText: String?, combined: List<FormattedUrlEntity>,
+                                 stripQuoteTweet: Boolean, stripVineCard: Boolean): FormattedUrlEntity? {
         if (combined.isEmpty()) return null
 
         val urlEntity = combined[combined.size - 1]
@@ -209,11 +206,11 @@ object TweetTextLinkifier {
 
     @JvmStatic
     fun isQuotedStatus(urlEntity: FormattedUrlEntity): Boolean {
-        return QUOTED_STATUS_URL.matcher(urlEntity.expandedUrl).find()
+        return QUOTED_STATUS_URL!!.matcher(urlEntity.expandedUrl).find()
     }
 
     @JvmStatic
     fun isVineCard(urlEntity: FormattedUrlEntity): Boolean {
-        return VINE_URL.matcher(urlEntity.expandedUrl).find()
+        return VINE_URL!!.matcher(urlEntity.expandedUrl).find()
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
index 6f4a6e08..68579034 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
@@ -59,9 +59,9 @@ static FormattedTweetText formatTweetText(Tweet tweet) {
      * @param tweet The source Tweet
      */
     static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet) {
-        if (tweet.entities == null) return;
+        if (tweet.getEntities() == null) return;
 
-        final List<UrlEntity> coreUrls = tweet.entities.urls;
+        final List<UrlEntity> coreUrls = tweet.getEntities().getUrls();
         if (coreUrls != null) {
             for (UrlEntity entity : coreUrls) {
                 final FormattedUrlEntity formattedUrlEntity =
@@ -70,7 +70,7 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
             }
         }
 
-        final List<MediaEntity> coreMedia = tweet.entities.media;
+        final List<MediaEntity> coreMedia = tweet.getEntities().getMedia();
         if (coreMedia != null) {
             for (MediaEntity entity : coreMedia) {
                 final FormattedMediaEntity formattedMediaEntity = new FormattedMediaEntity(entity);
@@ -78,7 +78,7 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
             }
         }
 
-        final List<HashtagEntity> coreHashtags = tweet.entities.hashtags;
+        final List<HashtagEntity> coreHashtags = tweet.getEntities().getHashtags();
         if (coreHashtags != null) {
             for (HashtagEntity entity : coreHashtags) {
                 final FormattedUrlEntity formattedHashtagEntity =
@@ -87,7 +87,7 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
             }
         }
 
-        final List<MentionEntity> coreMentions = tweet.entities.userMentions;
+        final List<MentionEntity> coreMentions = tweet.getEntities().getUserMentions();
         if (coreMentions != null) {
             for (MentionEntity entity : coreMentions) {
                 final FormattedUrlEntity formattedMentionEntity =
@@ -96,7 +96,7 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
             }
         }
 
-        final List<SymbolEntity> coreSymbols = tweet.entities.symbols;
+        final List<SymbolEntity> coreSymbols = tweet.getEntities().getSymbols();
         if (coreSymbols != null) {
             for (SymbolEntity entity : coreSymbols) {
                 final FormattedUrlEntity formattedSymbolEntity =
@@ -114,9 +114,9 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
      * @param tweet The source Tweet
      */
     static void format(FormattedTweetText formattedTweetText, Tweet tweet) {
-        if (TextUtils.isEmpty(tweet.text)) return;
+        if (TextUtils.isEmpty(tweet.getText())) return;
 
-        final HtmlEntities.Unescaped u = HtmlEntities.HTML40.unescape(tweet.text);
+        final HtmlEntities.Unescaped u = HtmlEntities.HTML40.unescape(tweet.getText());
         final StringBuilder result = new StringBuilder(u.unescaped);
 
         adjustIndicesForEscapedChars(formattedTweetText.getUrlEntities(), u.indices);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
index 1d6b0064..57a186e4 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
@@ -36,13 +36,13 @@
  * TweetTimelineListAdapter is a ListAdapter which can provide Timeline Tweets to ListViews.
  */
 public class TweetTimelineListAdapter extends TimelineListAdapter<Tweet> {
-    protected Callback<Tweet> actionCallback;
-    protected final int styleResId;
-    protected TweetUi tweetUi;
+    private Callback<Tweet> actionCallback;
+    private final int styleResId;
+    private TweetUi tweetUi;
 
     static final String TOTAL_FILTERS_JSON_PROP = "total_filters";
     static final String DEFAULT_FILTERS_JSON_MSG = "{\"total_filters\":0}";
-    final Gson gson = new Gson();
+    private final Gson gson = new Gson();
 
     /**
      * Constructs a TweetTimelineListAdapter for the given Tweet Timeline.
@@ -63,8 +63,8 @@ public TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline) {
                              Callback<Tweet> cb, TweetUi tweetUi) {
         super(context, delegate);
         this.styleResId = styleResId;
-        this.actionCallback = new ReplaceTweetCallback(delegate, cb);
-        this.tweetUi = tweetUi;
+        this.setActionCallback(new ReplaceTweetCallback(delegate, cb));
+        this.setTweetUi(tweetUi);
 
         scribeTimelineImpression();
     }
@@ -80,8 +80,8 @@ public View getView(int position, View convertView, ViewGroup parent) {
         View rowView = convertView;
         final Tweet tweet = getItem(position);
         if (rowView == null) {
-            final BaseTweetView tv = new CompactTweetView(context, tweet, styleResId);
-            tv.setOnActionCallback(actionCallback);
+            final BaseTweetView tv = new CompactTweetView(context, tweet, getStyleResId());
+            tv.setOnActionCallback(getActionCallback());
             rowView = tv;
         } else {
             ((BaseTweetView) rowView).setTweet(tweet);
@@ -99,13 +99,13 @@ private void scribeTimelineImpression() {
             jsonMessage = DEFAULT_FILTERS_JSON_MSG;
         }
 
-        final ScribeItem scribeItem = ScribeItem.fromMessage(jsonMessage);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMessage(jsonMessage);
         final List<ScribeItem> items = new ArrayList<>();
         items.add(scribeItem);
 
         final String timelineType = getTimelineType(delegate.getTimeline());
-        tweetUi.scribe(ScribeConstants.getSyndicatedSdkTimelineNamespace(timelineType));
-        tweetUi.scribe(ScribeConstants.getTfwClientTimelineNamespace(timelineType), items);
+        getTweetUi().scribe(ScribeConstants.getSyndicatedSdkTimelineNamespace(timelineType));
+        getTweetUi().scribe(ScribeConstants.getTfwClientTimelineNamespace(timelineType), items);
     }
 
     private String getJsonMessage(int totalFilters) {
@@ -121,6 +121,26 @@ static String getTimelineType(Timeline timeline) {
         return "other";
     }
 
+    public Callback<Tweet> getActionCallback() {
+        return actionCallback;
+    }
+
+    public void setActionCallback(Callback<Tweet> actionCallback) {
+        this.actionCallback = actionCallback;
+    }
+
+    public TweetUi getTweetUi() {
+        return tweetUi;
+    }
+
+    public void setTweetUi(TweetUi tweetUi) {
+        this.tweetUi = tweetUi;
+    }
+
+    public int getStyleResId() {
+        return styleResId;
+    }
+
     /*
      * On success, sets the updated Tweet in the TimelineDelegate to replace any old copies
      * of the same Tweet by id.
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
index 547b2ed4..0d9915af 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
@@ -43,9 +43,9 @@
         RecyclerView.Adapter<TweetTimelineRecyclerViewAdapter.TweetViewHolder> {
 
     protected final Context context;
-    protected final TimelineDelegate<Tweet> timelineDelegate;
-    protected Callback<Tweet> actionCallback;
-    protected final int styleResId;
+    private final TimelineDelegate<Tweet> timelineDelegate;
+    private Callback<Tweet> actionCallback;
+    private final int styleResId;
     protected TweetUi tweetUi;
     private int previousCount;
 
@@ -72,7 +72,7 @@ protected TweetTimelineRecyclerViewAdapter(Context context, Timeline<Tweet> time
     TweetTimelineRecyclerViewAdapter(Context context, TimelineDelegate<Tweet> timelineDelegate,
                                      int styleResId, Callback<Tweet> cb, TweetUi tweetUi) {
         this(context, timelineDelegate, styleResId);
-        actionCallback = new ReplaceTweetCallback(timelineDelegate, cb);
+        setActionCallback(new ReplaceTweetCallback(timelineDelegate, cb));
         this.tweetUi = tweetUi;
         scribeTimelineImpression();
     }
@@ -87,11 +87,11 @@ protected TweetTimelineRecyclerViewAdapter(Context context, Timeline<Tweet> time
         this.timelineDelegate = timelineDelegate;
         this.styleResId = styleResId;
 
-        this.timelineDelegate.refresh(new Callback<TimelineResult<Tweet>>() {
+        this.getTimelineDelegate().refresh(new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
                 notifyDataSetChanged();
-                previousCount = TweetTimelineRecyclerViewAdapter.this.timelineDelegate.getCount();
+                previousCount = TweetTimelineRecyclerViewAdapter.this.getTimelineDelegate().getCount();
             }
 
             @Override
@@ -108,10 +108,10 @@ public void onChanged() {
                     notifyDataSetChanged();
                 } else {
                     notifyItemRangeInserted(previousCount,
-                            TweetTimelineRecyclerViewAdapter.this.timelineDelegate.getCount()
+                            TweetTimelineRecyclerViewAdapter.this.getTimelineDelegate().getCount()
                                     - previousCount);
                 }
-                previousCount = TweetTimelineRecyclerViewAdapter.this.timelineDelegate.getCount();
+                previousCount = TweetTimelineRecyclerViewAdapter.this.getTimelineDelegate().getCount();
             }
 
             @Override
@@ -121,11 +121,11 @@ public void onInvalidated() {
             }
         };
 
-        this.timelineDelegate.registerDataSetObserver(dataSetObserver);
+        this.getTimelineDelegate().registerDataSetObserver(dataSetObserver);
     }
 
     public void refresh(Callback<TimelineResult<Tweet>> cb) {
-        timelineDelegate.refresh(cb);
+        getTimelineDelegate().refresh(cb);
         previousCount = 0;
     }
 
@@ -133,21 +133,37 @@ public void refresh(Callback<TimelineResult<Tweet>> cb) {
     @Override
     public TweetViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
         final Tweet tweet = new TweetBuilder().build();
-        final CompactTweetView compactTweetView = new CompactTweetView(context, tweet, styleResId);
-        compactTweetView.setOnActionCallback(actionCallback);
+        final CompactTweetView compactTweetView = new CompactTweetView(context, tweet, getStyleResId());
+        compactTweetView.setOnActionCallback(getActionCallback());
         return new TweetViewHolder(compactTweetView);
     }
 
     @Override
     public void onBindViewHolder(@NonNull TweetViewHolder holder, int position) {
-        final Tweet tweet = timelineDelegate.getItem(position);
+        final Tweet tweet = getTimelineDelegate().getItem(position);
         final CompactTweetView compactTweetView = (CompactTweetView) holder.itemView;
         compactTweetView.setTweet(tweet);
     }
 
     @Override
     public int getItemCount() {
-        return timelineDelegate.getCount();
+        return getTimelineDelegate().getCount();
+    }
+
+    public Callback<Tweet> getActionCallback() {
+        return actionCallback;
+    }
+
+    public void setActionCallback(Callback<Tweet> actionCallback) {
+        this.actionCallback = actionCallback;
+    }
+
+    public int getStyleResId() {
+        return styleResId;
+    }
+
+    public TimelineDelegate<Tweet> getTimelineDelegate() {
+        return timelineDelegate;
     }
 
     protected static final class TweetViewHolder extends RecyclerView.ViewHolder {
@@ -158,20 +174,20 @@ public TweetViewHolder(CompactTweetView itemView) {
 
     private void scribeTimelineImpression() {
         final String jsonMessage;
-        if (timelineDelegate instanceof FilterTimelineDelegate) {
+        if (getTimelineDelegate() instanceof FilterTimelineDelegate) {
             final FilterTimelineDelegate filterTimelineDelegate =
-                    (FilterTimelineDelegate) timelineDelegate;
+                    (FilterTimelineDelegate) getTimelineDelegate();
             final TimelineFilter timelineFilter = filterTimelineDelegate.timelineFilter;
             jsonMessage = getJsonMessage(timelineFilter.totalFilters());
         } else {
             jsonMessage = DEFAULT_FILTERS_JSON_MSG;
         }
 
-        final ScribeItem scribeItem = ScribeItem.fromMessage(jsonMessage);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMessage(jsonMessage);
         final List<ScribeItem> items = new ArrayList<>();
         items.add(scribeItem);
 
-        final String timelineType = getTimelineType(timelineDelegate.getTimeline());
+        final String timelineType = getTimelineType(getTimelineDelegate().getTimeline());
         tweetUi.scribe(ScribeConstants.getSyndicatedSdkTimelineNamespace(timelineType));
         tweetUi.scribe(ScribeConstants.getTfwClientTimelineNamespace(timelineType), items);
     }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUtils.java
index 9a02c850..4ec4ab2a 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUtils.java
@@ -85,8 +85,8 @@ public void success(Result<List<Tweet>> result) {
      * @return Returns true if tweet has a greater than zero id and a screen name
      */
     static boolean isTweetResolvable(Tweet tweet) {
-        return tweet != null && tweet.id > 0 && tweet.user != null
-                && !TextUtils.isEmpty(tweet.user.screenName);
+        return tweet != null && tweet.getId() > 0 && tweet.getUser() != null
+                && !TextUtils.isEmpty(tweet.getUser().getScreenName());
     }
 
     /**
@@ -96,17 +96,17 @@ static boolean isTweetResolvable(Tweet tweet) {
      * @return either the tweet argument or the Tweet in the retweetedStatus field
      */
     static Tweet getDisplayTweet(Tweet tweet) {
-        if (tweet == null || tweet.retweetedStatus == null) {
+        if (tweet == null || tweet.getRetweetedStatus() == null) {
             return tweet;
         } else {
-            return tweet.retweetedStatus;
+            return tweet.getRetweetedStatus();
         }
     }
 
     static boolean showQuoteTweet(Tweet tweet) {
-        return tweet.quotedStatus != null &&
-                tweet.card == null && (tweet.entities == null || tweet.entities.media == null
-                || tweet.entities.media.isEmpty());
+        return tweet.getQuotedStatus() != null &&
+                tweet.getCard() == null && (tweet.getEntities() == null || tweet.getEntities().getMedia() == null
+                || tweet.getEntities().getMedia().isEmpty());
     }
 
     /**
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetView.java
index 1f174db8..be57e4a8 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetView.java
@@ -84,7 +84,7 @@ protected double getAspectRatioForPhotoEntity(int photoCount) {
      * verification data is unavailable, remove the check.
      */
     private void setVerifiedCheck(Tweet tweet) {
-        if (tweet != null && tweet.user != null && tweet.user.verified) {
+        if (tweet != null && tweet.getUser() != null && tweet.getUser().getVerified()) {
             fullNameView.setCompoundDrawablesWithIntrinsicBounds(0, 0,
                     R.drawable.tw__ic_tweet_verified, 0);
         } else {
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/Utils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/Utils.java
index f0cdfc27..dc9311c4 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/Utils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/Utils.java
@@ -60,7 +60,7 @@ static CharSequence charSeqOrDefault(CharSequence candidate, CharSequence defaul
         final HashMap<Long, Tweet> idToTweet = new HashMap<>();
         final ArrayList<Tweet> ordered = new ArrayList<>();
         for (Tweet tweet: tweets) {
-            idToTweet.put(tweet.id, tweet);
+            idToTweet.put(tweet.getId(), tweet);
         }
         for (Long id: tweetIds) {
             if (idToTweet.containsKey(id)) {
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
index 0a6fe7e2..20db01de 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
@@ -62,12 +62,12 @@ public static MediaEntity getPhotoEntity(Tweet tweet) {
      */
     public static List<MediaEntity> getPhotoEntities(Tweet tweet) {
         final List<MediaEntity> photoEntities = new ArrayList<>();
-        final TweetEntities extendedEntities = tweet.extendedEntities;
+        final TweetEntities extendedEntities = tweet.getExtendedEntities();
 
-        if (extendedEntities != null && extendedEntities.media != null
-                && extendedEntities.media.size() > 0) {
-            for (int i = 0; i <= extendedEntities.media.size() - 1; i++) {
-                final MediaEntity entity = extendedEntities.media.get(i);
+        if (extendedEntities != null && extendedEntities.getMedia() != null
+                && extendedEntities.getMedia().size() > 0) {
+            for (int i = 0; i <= extendedEntities.getMedia().size() - 1; i++) {
+                final MediaEntity entity = extendedEntities.getMedia().get(i);
                 if (entity.type != null && isPhotoType(entity)) {
                     photoEntities.add(entity);
                 }
@@ -157,12 +157,12 @@ static boolean isVariantSupported(VideoInfo.Variant variant) {
 
     static List<MediaEntity> getAllMediaEntities(Tweet tweet) {
         final List<MediaEntity> entities = new ArrayList<>();
-        if (tweet.entities != null && tweet.entities.media != null) {
-            entities.addAll(tweet.entities.media);
+        if (tweet.getEntities() != null && tweet.getEntities().getMedia() != null) {
+            entities.addAll(tweet.getEntities().getMedia());
         }
 
-        if (tweet.extendedEntities != null && tweet.extendedEntities.media != null) {
-            entities.addAll(tweet.extendedEntities.media);
+        if (tweet.getExtendedEntities() != null && tweet.getExtendedEntities().getMedia() != null) {
+            entities.addAll(tweet.getExtendedEntities().getMedia());
         }
 
         return entities;
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaView.java
index fa19f9d4..455d175d 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaView.java
@@ -191,7 +191,7 @@ public void launchVideoPlayer(MediaEntity entity) {
     }
 
     public void launchVideoPlayer(Tweet tweet) {
-        final Card card = tweet.card;
+        final Card card = tweet.getCard();
         final Intent intent = new Intent(getContext(), PlayerActivity.class);
         final String playerStreamUrl = VineCardUtils.getStreamUrl(card);
 
@@ -199,7 +199,7 @@ public void launchVideoPlayer(Tweet tweet) {
                 new PlayerActivity.PlayerItem(playerStreamUrl, true, false, null, null);
         intent.putExtra(PlayerActivity.PLAYER_ITEM, playerItem);
 
-        final ScribeItem scribeItem = ScribeItem.fromTweetCard(tweet.id, card);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromTweetCard(tweet.getId(), card);
         intent.putExtra(PlayerActivity.SCRIBE_ITEM, scribeItem);
 
         IntentUtils.safeStartActivity(getContext(), intent);
@@ -208,7 +208,7 @@ public void launchVideoPlayer(Tweet tweet) {
     public void launchPhotoGallery(int mediaEntityIndex) {
         final Intent intent = new Intent(getContext(), GalleryActivity.class);
         final GalleryActivity.GalleryItem item =
-                new GalleryActivity.GalleryItem(tweet.id, mediaEntityIndex, mediaEntities);
+                new GalleryActivity.GalleryItem(tweet.getId(), mediaEntityIndex, mediaEntities);
         intent.putExtra(GalleryActivity.GALLERY_ITEM, item);
         IntentUtils.safeStartActivity(getContext(), intent);
     }
@@ -231,7 +231,7 @@ public void setTweetMediaEntities(Tweet tweet, List<MediaEntity> mediaEntities)
     }
 
     public void setVineCard(Tweet tweet) {
-        if (tweet == null || tweet.card == null || !VineCardUtils.isVine(tweet.card)) {
+        if (tweet == null || tweet.getCard() == null || !VineCardUtils.isVine(tweet.getCard())) {
             return;
         }
 
@@ -239,7 +239,7 @@ public void setVineCard(Tweet tweet) {
         this.mediaEntities = Collections.emptyList();
 
         clearImageViews();
-        initializeImageViews(tweet.card);
+        initializeImageViews(tweet.getCard());
 
         internalRoundedCornersEnabled = false;
 
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java
index 3534bb34..640d69c9 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java
@@ -17,12 +17,12 @@
 
 package com.twitter.sdk.android.tweetui;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class BaseTimelineTest {
@@ -31,11 +31,11 @@
     @Test
     public void testDecrementMaxId_positive() {
         final Long correctedId = BaseTimeline.decrementMaxId(TEST_ID);
-        assertEquals((Long) (TEST_ID - 1L), correctedId);
+        Assert.assertThat(correctedId, is(TEST_ID - 1L));
     }
 
     @Test
     public void testDecrementMaxId_nullId() {
-        assertNull(BaseTimeline.decrementMaxId(null));
+        Assert.assertThat(BaseTimeline.decrementMaxId(null), nullValue());
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java
index 70796263..648e8f6d 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java
@@ -29,6 +29,7 @@
 import com.twitter.sdk.android.core.models.User;
 import com.twitter.sdk.android.core.models.UserBuilder;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -39,10 +40,8 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
 
 @RunWith(RobolectricTestRunner.class)
 public class BasicTimelineFilterTest {
@@ -82,20 +81,20 @@ public void testFilter() {
 
         final List<Tweet> filteredTweets = basicTimelineFilter.filter(tweets);
 
-        assertNotNull(filteredTweets);
-        assertEquals(2, filteredTweets.size());
-        assertEquals(TEST_TWEET_2, filteredTweets.get(0));
-        assertEquals(TEST_TWEET_3, filteredTweets.get(0));
+        Assert.assertThat(filteredTweets, notNullValue());
+        Assert.assertThat(filteredTweets.size(), is(2));
+        Assert.assertThat(filteredTweets.get(0), is(TEST_TWEET_2));
+        Assert.assertThat(filteredTweets.get(0), is(TEST_TWEET_3));
     }
 
     @Test
     public void testShouldFilterTweet_withNoMatch() {
-        assertFalse(basicTimelineFilter.shouldFilterTweet(TEST_TWEET_2));
+        Assert.assertThat(basicTimelineFilter.shouldFilterTweet(TEST_TWEET_2), is(false));
     }
 
     @Test
     public void testShouldFilterTweet_withTextMatch() {
-        assertTrue(basicTimelineFilter.shouldFilterTweet(TEST_TWEET_1));
+        Assert.assertThat(basicTimelineFilter.shouldFilterTweet(TEST_TWEET_1), is(true));
     }
 
     @Test
@@ -106,7 +105,7 @@ public void testShouldFilterTweet_withEntityMatch() {
                 new TweetEntities(Collections.singletonList(entity), null, null, null, null);
         final Tweet tweet = new TweetBuilder().setText("").setEntities(entities).build();
 
-        assertTrue(basicTimelineFilter.shouldFilterTweet(tweet));
+        Assert.assertThat(basicTimelineFilter.shouldFilterTweet(tweet), is(true));
     }
 
     @Test
@@ -114,17 +113,17 @@ public void testShouldFilterTweet_withUserMatch() {
         final User user = new UserBuilder().setScreenName("EricFrohnhoefer").build();
         final Tweet tweet = new TweetBuilder().setText("").setUser(user).build();
 
-        assertTrue(basicTimelineFilter.shouldFilterTweet(tweet));
+        Assert.assertThat(basicTimelineFilter.shouldFilterTweet(tweet), is(true));
     }
 
     @Test
     public void testContainsMatchingText_withNoMatch() {
-        assertFalse(basicTimelineFilter.containsMatchingText(TEST_TWEET_2));
+        Assert.assertThat(basicTimelineFilter.containsMatchingText(TEST_TWEET_2), is(false));
     }
 
     @Test
     public void testContainsMatchingText_withMatch() {
-        assertTrue(basicTimelineFilter.containsMatchingText(TEST_TWEET_1));
+        Assert.assertThat(basicTimelineFilter.containsMatchingText(TEST_TWEET_1), is(true));
     }
 
     @Test
@@ -132,7 +131,7 @@ public void testContainsMatchingUrl_withNoMatch() {
         final UrlEntity entity =
                 new UrlEntity("foobar.com", "http://foobar.com", "foobar.com", 0, 0);
 
-        assertFalse(basicTimelineFilter.containsMatchingUrl(Collections.singletonList(entity)));
+        Assert.assertThat(basicTimelineFilter.containsMatchingUrl(Collections.singletonList(entity)), is(false));
     }
 
     @Test
@@ -140,35 +139,35 @@ public void testContainsMatchingUrl_withMatch() {
         final UrlEntity entity = new UrlEntity("Cookiesareawesome.com",
                 "http://Cookiesareawesome.com", "Cookiesareawesome.com", 0, 0);
 
-        assertTrue(basicTimelineFilter.containsMatchingUrl(Collections.singletonList(entity)));
+        Assert.assertThat(basicTimelineFilter.containsMatchingUrl(Collections.singletonList(entity)), is(true));
     }
 
     @Test
     public void testContainsMatchingHashtag_withNoMatch() {
         final HashtagEntity entity = new HashtagEntity("foobar", 0, 0);
 
-        assertFalse(basicTimelineFilter.containsMatchingHashtag(Collections.singletonList(entity)));
+        Assert.assertThat(basicTimelineFilter.containsMatchingHashtag(Collections.singletonList(entity)), is(false));
     }
 
     @Test
     public void testContainsMatchingHashtag_withMatch() {
         final HashtagEntity entity = new HashtagEntity("cookies", 0, 0);
 
-        assertTrue(basicTimelineFilter.containsMatchingHashtag(Collections.singletonList(entity)));
+        Assert.assertThat(basicTimelineFilter.containsMatchingHashtag(Collections.singletonList(entity)), is(true));
     }
 
     @Test
     public void testContainsMatchingSymbol_withNoMatch() {
         final SymbolEntity entity = new SymbolEntity("foobar", 0, 0);
 
-        assertFalse(basicTimelineFilter.containsMatchingSymbol(Collections.singletonList(entity)));
+        Assert.assertThat(basicTimelineFilter.containsMatchingSymbol(Collections.singletonList(entity)), is(false));
     }
 
     @Test
     public void testContainsMatchingSymbol_withMatch() {
         final SymbolEntity entity = new SymbolEntity("cookies", 0, 0);
 
-        assertTrue(basicTimelineFilter.containsMatchingSymbol(Collections.singletonList(entity)));
+        Assert.assertThat(basicTimelineFilter.containsMatchingSymbol(Collections.singletonList(entity)), is(true));
     }
 
     @Test
@@ -176,7 +175,7 @@ public void testContainsMatchingMention_withNoMatch() {
         final MentionEntity entity =
                 new MentionEntity(0, "0", "Foo Bar", "FooBar", 0, 0);
 
-        assertFalse(basicTimelineFilter.containsMatchingMention(Collections.singletonList(entity)));
+        Assert.assertThat(basicTimelineFilter.containsMatchingMention(Collections.singletonList(entity)), is(false));
     }
 
     @Test
@@ -184,94 +183,94 @@ public void testContainsMatchingMention_withMatch() {
         final MentionEntity entity =
                 new MentionEntity(0, "0", "Eric Frohnhoefer", "EricFrohnhoefer", 0, 0);
 
-        assertTrue(basicTimelineFilter.containsMatchingMention(Collections.singletonList(entity)));
+        Assert.assertThat(basicTimelineFilter.containsMatchingMention(Collections.singletonList(entity)), is(true));
     }
 
     @Test
     public void testContainsMatchingScreenName_withNoMatch() {
-        assertFalse(basicTimelineFilter.containsMatchingScreenName("FooBar"));
+        Assert.assertThat(basicTimelineFilter.containsMatchingScreenName("FooBar"), is(false));
     }
 
     @Test
     public void testContainsMatchingScreenName_withMatch() {
-        assertTrue(basicTimelineFilter.containsMatchingScreenName("EricFrohnhoefer"));
+        Assert.assertThat(basicTimelineFilter.containsMatchingScreenName("EricFrohnhoefer"), is(true));
     }
 
     @Test
     public void testNormalizeHandle() {
         String twitterHandle = "@twitter";
         String normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
-        assertEquals("twitter", normalizedHandle);
+        Assert.assertThat(normalizedHandle, is("twitter"));
 
         twitterHandle = "＠twitter";
         normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
-        assertEquals("twitter", normalizedHandle);
+        Assert.assertThat(normalizedHandle, is("twitter"));
     }
 
     @Test
     public void testNormalizeHandleWithoutAtSign() {
         final String twitterHandle = "twiTTer";
         final String normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
-        assertEquals("twitter", normalizedHandle);
+        Assert.assertThat(normalizedHandle, is("twitter"));
     }
 
     @Test
     public void testNormalizeHashtag() {
         String hashtag = "#twitter";
         String normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
-        assertEquals("twitter", normalizedHashtag);
+        Assert.assertThat(normalizedHashtag, is("twitter"));
 
         hashtag = "＃twitter";
         normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
-        assertEquals("twitter", normalizedHashtag);
+        Assert.assertThat(normalizedHashtag, is("twitter"));
 
         hashtag = "$TWTR";
         normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
-        assertEquals("TWTR", normalizedHashtag);
+        Assert.assertThat(normalizedHashtag, is("TWTR"));
     }
 
     @Test
     public void testNormalizeHashtagWithoutHashtag() {
         final String hashtag = "TWTR";
         final String normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
-        assertEquals(hashtag, normalizedHashtag);
+        Assert.assertThat(normalizedHashtag, is(hashtag));
     }
 
     @Test
     public void testNormalizeUrl() {
         String url = "twitter.com";
         String normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("twitter.com", normalizedUrl);
+        Assert.assertThat(normalizedUrl, is("twitter.com"));
 
         url = "dev.twitter.com";
         normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("dev.twitter.com", normalizedUrl);
+        Assert.assertThat(normalizedUrl, is("dev.twitter.com"));
 
         url = "http://twitter.com";
         normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("twitter.com", normalizedUrl);
+        Assert.assertThat(normalizedUrl, is("twitter.com"));
 
         url = "http://TwiTTer.com";
         normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("twitter.com", normalizedUrl);
+        Assert.assertThat(normalizedUrl, is("twitter.com"));
 
         url = "https://twitter.com/test";
         normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("twitter.com", normalizedUrl);
+        Assert.assertThat(normalizedUrl, is("twitter.com"));
 
         url = "транспорт.com";
         normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("xn--80a0addceeeh.com", normalizedUrl);
+        Assert.assertThat(normalizedUrl, is("xn--80a0addceeeh.com"));
 
         url = "https://транспорт.com/test";
         normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("xn--80a0addceeeh.com", normalizedUrl);
+        Assert.assertThat(normalizedUrl, is("xn--80a0addceeeh.com"));
     }
 
     @Test
     public void testNormalizeUrl_withProhibitedCodePoint() {
         final String url = "twitter\u180E.com";
         final String normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals(url, normalizedUrl);
+        Assert.assertThat(normalizedUrl, is(url));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java
index 92dd5ac5..9b324e29 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java
@@ -27,6 +27,7 @@
 import com.twitter.sdk.android.core.models.UserBuilder;
 import com.twitter.sdk.android.core.services.CollectionService;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -35,9 +36,8 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isNull;
@@ -77,11 +77,11 @@
 
     @Before
     public void setUp() throws Exception {
-        testUserMap.put(TEST_USER_1.id, TEST_USER_1);
-        testUserMap.put(TEST_USER_2.id, TEST_USER_2);
-        testTweetMap.put(TEST_TWEET_1.id, TEST_TWEET_1);
-        testTweetMap.put(TEST_TWEET_2.id, TEST_TWEET_2);
-        testTweetMap.put(TEST_TWEET_QUOTE.id, TEST_TWEET_QUOTE);
+        testUserMap.put(TEST_USER_1.getId(), TEST_USER_1);
+        testUserMap.put(TEST_USER_2.getId(), TEST_USER_2);
+        testTweetMap.put(TEST_TWEET_1.getId(), TEST_TWEET_1);
+        testTweetMap.put(TEST_TWEET_2.getId(), TEST_TWEET_2);
+        testTweetMap.put(TEST_TWEET_QUOTE.getId(), TEST_TWEET_QUOTE);
         // testItems order Test Tweet 1, then 2
         testItems.add(new TwitterCollection.TimelineItem(
                 new TwitterCollection.TimelineItem.TweetItem(5858L)));
@@ -109,8 +109,7 @@ public void setUp() throws Exception {
     public void testConstructor() {
         final CollectionTimeline timeline = new CollectionTimeline(twitterCore, TEST_COLLECTION_ID,
                 TEST_ITEMS_PER_REQUEST);
-        assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
-                timeline.collectionIdentifier);
+        Assert.assertThat(timeline.collectionIdentifier, is(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID));
     }
 
     @Test
@@ -149,7 +148,7 @@ public void testGetScribeSection() {
         final CollectionTimeline timeline = new CollectionTimeline.Builder(twitterCore)
                 .id(TEST_COLLECTION_ID)
                 .build();
-        assertEquals(REQUIRED_IMPRESSION_SECTION, timeline.getTimelineType());
+        Assert.assertThat(timeline.getTimelineType(), is(REQUIRED_IMPRESSION_SECTION));
     }
 
     @Test
@@ -160,10 +159,10 @@ public void testGetOrderedTweets() {
                 = new TwitterCollection.Metadata("", TEST_POSITION, testItems);
         final List<Tweet> tweets = CollectionTimeline.getOrderedTweets(
                 new TwitterCollection(contents, metadata));
-        assertEquals(3, tweets.size());
-        assertEquals(TEST_TWEET_1, tweets.get(0));
-        assertEquals(TEST_TWEET_2, tweets.get(1));
-        assertEquals(TEST_TWEET_QUOTE, tweets.get(2));
+        Assert.assertThat(tweets.size(), is(3));
+        Assert.assertThat(tweets.get(0), is(TEST_TWEET_1));
+        Assert.assertThat(tweets.get(1), is(TEST_TWEET_2));
+        Assert.assertThat(tweets.get(2), is(TEST_TWEET_QUOTE));
     }
 
     @Test
@@ -174,10 +173,10 @@ public void testGetOrderedTweets_respectsTimelineItemsOrder() {
                 TEST_POSITION, testItemsRev);
         final List<Tweet> tweets = CollectionTimeline.getOrderedTweets(
                 new TwitterCollection(contents, metadata));
-        assertEquals(3, tweets.size());
-        assertEquals(TEST_TWEET_QUOTE, tweets.get(0));
-        assertEquals(TEST_TWEET_2, tweets.get(1));
-        assertEquals(TEST_TWEET_1, tweets.get(2));
+        Assert.assertThat(tweets.size(), is(3));
+        Assert.assertThat(tweets.get(0), is(TEST_TWEET_QUOTE));
+        Assert.assertThat(tweets.get(1), is(TEST_TWEET_2));
+        Assert.assertThat(tweets.get(2), is(TEST_TWEET_1));
     }
 
     @Test
@@ -186,32 +185,32 @@ public void testGetOrderedTweets_handlesNull() {
             new TwitterCollection.Content(null, testUserMap),
             new TwitterCollection.Metadata("", TEST_POSITION, testItems));
         List<Tweet> tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
+        Assert.assertThat(tweets.isEmpty(), is(true));
         collection = new TwitterCollection(new TwitterCollection.Content(testTweetMap, null),
                 new TwitterCollection.Metadata("", TEST_POSITION, testItems));
         tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
+        Assert.assertThat(tweets.isEmpty(), is(true));
         collection = new TwitterCollection(new TwitterCollection.Content(testTweetMap, testUserMap),
                 new TwitterCollection.Metadata("", null, testItems));
         tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
+        Assert.assertThat(tweets.isEmpty(), is(true));
         collection = new TwitterCollection(new TwitterCollection.Content(testTweetMap, testUserMap),
                 new TwitterCollection.Metadata("", TEST_POSITION, null));
         tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
+        Assert.assertThat(tweets.isEmpty(), is(true));
         collection = new TwitterCollection(new TwitterCollection.Content(testTweetMap, testUserMap),
                 null);
         tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
+        Assert.assertThat(tweets.isEmpty(), is(true));
         collection = new TwitterCollection(null, new TwitterCollection.Metadata("", TEST_POSITION,
                 testItems));
         tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
+        Assert.assertThat(tweets.isEmpty(), is(true));
         collection = new TwitterCollection(null, null);
         tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
+        Assert.assertThat(tweets.isEmpty(), is(true));
         tweets = CollectionTimeline.getOrderedTweets(null);
-        assertTrue(tweets.isEmpty());
+        Assert.assertThat(tweets.isEmpty(), is(true));
     }
 
     @Test
@@ -222,8 +221,8 @@ public void testGetTimelineCursor() {
                 = new TwitterCollection.Metadata("", TEST_POSITION, testItems);
         final TimelineCursor cursor = CollectionTimeline.getTimelineCursor(
                 new TwitterCollection(contents, metadata));
-        assertEquals(TEST_MAX_POSITION, cursor.maxPosition);
-        assertEquals(TEST_MIN_POSITION, cursor.minPosition);
+        Assert.assertThat(cursor.maxPosition, is(TEST_MAX_POSITION));
+        Assert.assertThat(cursor.minPosition, is(TEST_MIN_POSITION));
     }
 
     @Test
@@ -231,12 +230,12 @@ public void testGetTimelineCursor_handlesNull() {
         TwitterCollection collection = new TwitterCollection(new TwitterCollection.Content(null,
                 testUserMap), new TwitterCollection.Metadata("", null, testItems));
         TimelineCursor timelineCursor = CollectionTimeline.getTimelineCursor(collection);
-        assertNull(timelineCursor);
+        Assert.assertThat(timelineCursor, nullValue());
         collection = new TwitterCollection(new TwitterCollection.Content(null, testUserMap), null);
         timelineCursor = CollectionTimeline.getTimelineCursor(collection);
-        assertNull(timelineCursor);
+        Assert.assertThat(timelineCursor, nullValue());
         timelineCursor = CollectionTimeline.getTimelineCursor(null);
-        assertNull(timelineCursor);
+        Assert.assertThat(timelineCursor, nullValue());
     }
 
     /* Builder */
@@ -246,9 +245,8 @@ public void testBuilder() {
                 .id(TEST_COLLECTION_ID)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
-        assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
-                timeline.collectionIdentifier);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
+        Assert.assertThat(timeline.collectionIdentifier, is(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
     }
 
     @Test
@@ -256,9 +254,8 @@ public void testBuilder_defaults() {
         final CollectionTimeline timeline = new CollectionTimeline.Builder(twitterCore)
                 .id(TEST_COLLECTION_ID)
                 .build();
-        assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
-                timeline.collectionIdentifier);
-        assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
+        Assert.assertThat(timeline.collectionIdentifier, is(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(REQUIRED_DEFAULT_ITEMS_PER_REQUEST));
     }
 
     @Test
@@ -266,8 +263,7 @@ public void testBuilder_id() {
         final CollectionTimeline timeline = new CollectionTimeline.Builder(twitterCore)
                 .id(TEST_COLLECTION_ID)
                 .build();
-        assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
-                timeline.collectionIdentifier);
+        Assert.assertThat(timeline.collectionIdentifier, is(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID));
     }
 
     @Test
@@ -276,7 +272,7 @@ public void testBuilder_idNull() {
             new CollectionTimeline.Builder(twitterCore).id(null).build();
             fail("Expected IllegalStateException");
         } catch (IllegalStateException e) {
-            assertEquals("collection id must not be null", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("collection id must not be null"));
         }
     }
 
@@ -286,6 +282,6 @@ public void testBuilder_maxItemsPerRequest() {
                 .id(TEST_COLLECTION_ID)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java
index 39fba92f..facdf4f1 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java
@@ -19,45 +19,44 @@
 
 import android.graphics.Color;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class ColorUtilsTest {
 
     @Test
     public void testIsLightColor_blue() {
-        assertFalse(ColorUtils.INSTANCE.isLightColor(Color.BLUE));
+        Assert.assertThat(ColorUtils.INSTANCE.isLightColor(Color.BLUE), is(false));
     }
 
     @Test
     public void testIsLightColor_black() {
-        assertFalse(ColorUtils.INSTANCE.isLightColor(Color.BLACK));
+        Assert.assertThat(ColorUtils.INSTANCE.isLightColor(Color.BLACK), is(false));
     }
 
     @Test
     public void testIsLightColor_white() {
-        assertTrue(ColorUtils.INSTANCE.isLightColor(Color.WHITE));
+        Assert.assertThat(ColorUtils.INSTANCE.isLightColor(Color.WHITE), is(true));
     }
 
     @Test
     public void testCalculateOpacityTransform_zeroOpacity() {
-        assertEquals(Color.WHITE, ColorUtils.INSTANCE.calculateOpacityTransform(0, Color.BLUE, Color.WHITE));
+        Assert.assertThat(ColorUtils.calculateOpacityTransform(0, Color.BLUE, Color.WHITE), is(Color.WHITE));
     }
 
     @Test
     public void testCalculateOpacityTransform_fullOpacity() {
-        assertEquals(Color.BLUE, ColorUtils.INSTANCE.calculateOpacityTransform(1, Color.BLUE, Color.WHITE));
+        Assert.assertThat(ColorUtils.calculateOpacityTransform(1, Color.BLUE, Color.WHITE), is(Color.BLUE));
     }
 
     @Test
     public void testCalculateOpacityTransform_returnsFullOpacity() {
-        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(0, Color.BLUE, Color.WHITE);
-        assertEquals(0xFF000000, color & 0xFF000000);
+        final int color = ColorUtils.calculateOpacityTransform(0, Color.BLUE, Color.WHITE);
+        Assert.assertThat(color & 0xFF000000, is(0xFF000000));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
index 0104acdf..94513741 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
@@ -22,16 +22,14 @@
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 
 public class FixedTweetTimelineTest {
@@ -48,14 +46,14 @@ public void setUp() throws Exception {
     @Test
     public void testConstructor() {
         final FixedTweetTimeline timeline = new FixedTweetTimeline(fixedTweets);
-        assertNotNull(timeline.tweets);
-        assertEquals(fixedTweets, timeline.tweets);
+        Assert.assertThat(timeline.tweets, notNullValue());
+        Assert.assertThat(timeline.tweets, is(fixedTweets));
     }
 
     @Test
     public void testConstructor_nullTweets() {
         final FixedTweetTimeline timeline = new FixedTweetTimeline(null);
-        assertTrue(timeline.tweets.isEmpty());
+        Assert.assertThat(timeline.tweets.isEmpty(), is(true));
     }
 
     @Test
@@ -64,12 +62,10 @@ public void testNext_succeedsWithFixedTweets() {
         timeline.next(ANY_ID, new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
-                assertEquals(fixedTweets, result.getData().getItems());
-                assertEquals((Long) TestFixtures.TEST_PHOTO_TWEET.getId(),
-                        result.getData().getTimelineCursor().minPosition);
-                assertEquals((Long) TestFixtures.TEST_TWEET.getId(),
-                        result.getData().getTimelineCursor().maxPosition);
-                assertNull(result.getResponse());
+                Assert.assertThat(result.getData().getItems(), is(fixedTweets));
+                Assert.assertThat(result.getData().getTimelineCursor().minPosition, is(TestFixtures.TEST_PHOTO_TWEET.getId()));
+                Assert.assertThat(result.getData().getTimelineCursor().maxPosition, is(TestFixtures.TEST_TWEET.getId()));
+                Assert.assertThat(result.getResponse(), nullValue());
             }
             @Override
             public void failure(TwitterException exception) {
@@ -84,10 +80,10 @@ public void testNext_succeedsWithEmptyTweets() {
         timeline.previous(ANY_ID, new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
-                assertTrue(result.getData().getItems().isEmpty());
-                assertNull(result.getData().getTimelineCursor().maxPosition);
-                assertNull(result.getData().getTimelineCursor().minPosition);
-                assertNull(result.getResponse());
+                Assert.assertThat(result.getData().getItems().isEmpty(), is(true));
+                Assert.assertThat(result.getData().getTimelineCursor().maxPosition, nullValue());
+                Assert.assertThat(result.getData().getTimelineCursor().minPosition, nullValue());
+                Assert.assertThat(result.getResponse(), nullValue());
             }
 
             @Override
@@ -102,12 +98,12 @@ public void failure(TwitterException exception) {
     public void testBuilder() {
         final FixedTweetTimeline timeline = new FixedTweetTimeline.Builder()
                 .setTweets(fixedTweets).build();
-        assertEquals(fixedTweets, timeline.tweets);
+        Assert.assertThat(timeline.tweets, is(fixedTweets));
     }
 
     @Test
     public void testBuilder_empty() {
         final FixedTweetTimeline timeline = new FixedTweetTimeline.Builder().build();
-        assertTrue(timeline.tweets.isEmpty());
+        Assert.assertThat(timeline.tweets.isEmpty(), is(true));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java
index 39b571db..cbdf3ea8 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java
@@ -24,6 +24,7 @@
 import com.twitter.sdk.android.tweetui.internal.GalleryImageView;
 import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -34,10 +35,7 @@
 
 import java.util.Collections;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
@@ -61,23 +59,23 @@ public void setUp() {
 
     @Test
     public void testGetCount_withZeroItems() {
-        assertEquals(0, subject.getCount());
+        Assert.assertThat(subject.getCount(), is(0));
     }
 
     @Test
     public void testGetCount_withOneItems() {
         subject.addAll(Collections.singletonList(entity));
-        assertEquals(1, subject.getCount());
+        Assert.assertThat(subject.getCount(), is(1));
     }
 
     @Test
     public void testIsViewFromObject_withSameObject() {
-        assertTrue(subject.isViewFromObject(view, view));
+        Assert.assertThat(subject.isViewFromObject(view, view), is(true));
     }
 
     @Test
     public void testIsViewFromObject_withDifferentObject() {
-        assertFalse(subject.isViewFromObject(view, entity));
+        Assert.assertThat(subject.isViewFromObject(view, entity), is(false));
     }
 
     @Test
@@ -85,7 +83,7 @@ public void testInstantiateItem() {
         subject.addAll(Collections.singletonList(entity));
         final GalleryImageView result = (GalleryImageView) subject.instantiateItem(container, 0);
 
-        assertNotNull(result);
+        Assert.assertThat(result, notNullValue());
         verify(container).addView(result);
     }
 
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImplTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImplTest.java
index 73b237f7..12aa8c64 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImplTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImplTest.java
@@ -22,6 +22,7 @@
 import com.twitter.sdk.android.core.internal.scribe.SyndicationClientEvent;
 import com.twitter.sdk.android.core.models.MediaEntity;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -31,9 +32,7 @@
 
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.verify;
 
 public class GalleryScribeClientImplTest {
@@ -70,19 +69,19 @@ public void testShow() {
 
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertBaseNamespace(ns);
-        assertEquals(TEST_SCRIBE_SHOW_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(TEST_SCRIBE_SHOW_ACTION));
     }
 
     @Test
     public void testImpression() {
-        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
                 createTestEntity());
         galleryScribeClient.impression(scribeItem);
         verify(tweetUi).scribe(namespaceArgumentCaptor.capture(), itemsArgumentCaptor.capture());
 
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertBaseNamespace(ns);
-        assertEquals(TEST_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(TEST_SCRIBE_IMPRESSION_ACTION));
 
         final List<ScribeItem> items = itemsArgumentCaptor.getValue();
         assertItems(items);
@@ -95,7 +94,7 @@ public void testNavigate() {
 
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertBaseNamespace(ns);
-        assertEquals(TEST_SCRIBE_NAVIGATE_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(TEST_SCRIBE_NAVIGATE_ACTION));
     }
 
     @Test
@@ -105,33 +104,33 @@ public void testDismiss() {
 
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertBaseNamespace(ns);
-        assertEquals(TEST_SCRIBE_DISMISS_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(TEST_SCRIBE_DISMISS_ACTION));
     }
 
 
     static void assertItems(List<ScribeItem> items) {
-        assertNotNull(items);
-        assertEquals(1, items.size());
-        assertEquals(TestFixtures.TEST_TWEET_ID, items.get(0).id.longValue());
-        assertEquals(ScribeItem.TYPE_TWEET, items.get(0).itemType.intValue());
+        Assert.assertThat(items, notNullValue());
+        Assert.assertThat(items.size(), is(1));
+        Assert.assertThat(items.get(0).getId().longValue(), is(TestFixtures.TEST_TWEET_ID));
+        Assert.assertThat(items.get(0).getItemType().intValue(), is(ScribeItem.TYPE_TWEET));
 
-        assertMediaDetails(items.get(0).mediaDetails, TEST_TYPE_CONSUMER_ID);
+        assertMediaDetails(items.get(0).getMediaDetails(), TEST_TYPE_CONSUMER_ID);
     }
 
     static void assertMediaDetails(ScribeItem.MediaDetails mediaDetails, int type) {
-        assertNotNull(mediaDetails);
-        assertEquals(TestFixtures.TEST_TWEET_ID, mediaDetails.contentId);
-        assertEquals(type, mediaDetails.mediaType);
-        assertEquals(TEST_MEDIA_ID, mediaDetails.publisherId);
+        Assert.assertThat(mediaDetails, notNullValue());
+        Assert.assertThat(mediaDetails.getContentId(), is(TestFixtures.TEST_TWEET_ID));
+        Assert.assertThat(mediaDetails.getMediaType(), is(type));
+        Assert.assertThat(mediaDetails.getPublisherId(), is(TEST_MEDIA_ID));
     }
 
 
     static void assertBaseNamespace(EventNamespace ns) {
-        assertEquals(SyndicationClientEvent.CLIENT_NAME, ns.client);
-        assertEquals(TEST_TFW_CLIENT_EVENT_PAGE, ns.page);
-        assertEquals(TEST_TFW_CLIENT_EVENT_SECTION, ns.section);
-        assertNull(ns.element);
-        assertNull(ns.component);
+        Assert.assertThat(ns.client, is(SyndicationClientEvent.CLIENT_NAME));
+        Assert.assertThat(ns.page, is(TEST_TFW_CLIENT_EVENT_PAGE));
+        Assert.assertThat(ns.section, is(TEST_TFW_CLIENT_EVENT_SECTION));
+        Assert.assertThat(ns.element, nullValue());
+        Assert.assertThat(ns.component, nullValue());
     }
 
     private MediaEntity createTestEntity() {
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java
index 6cde3db3..d46f1543 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java
@@ -24,15 +24,14 @@
 import com.twitter.sdk.android.core.internal.TwitterApiConstants;
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -65,10 +64,10 @@ public void testOnClick_performFavorite() {
         // - performs a like action which favorites the correct tweet id
         // - passes FavoriteCallback with toggle button and tweet references
         likeAction.onClick(mockToggleButton);
-        verify(mockTweetRepository).favorite(eq(TestFixtures.TEST_TWEET.id),
+        verify(mockTweetRepository).favorite(eq(TestFixtures.TEST_TWEET.getId()),
                 favoriteCbCaptor.capture());
-        assertEquals(mockToggleButton, favoriteCbCaptor.getValue().button);
-        assertFalse(favoriteCbCaptor.getValue().tweet.favorited);
+        Assert.assertThat(favoriteCbCaptor.getValue().button, is(mockToggleButton));
+        Assert.assertThat(favoriteCbCaptor.getValue().tweet.getFavorited(), is(false));
 
         assertFavoriteScribe();
     }
@@ -84,10 +83,10 @@ public void testOnClick_performUnfavorite() {
         // - performs an unlike action which unfavorites the correct tweet id
         // - passes FavoriteCallback with toggle button and tweet references
         favoriteAction.onClick(mockToggleButton);
-        verify(mockTweetRepository).unfavorite(eq(TestFixtures.TEST_TWEET.id),
+        verify(mockTweetRepository).unfavorite(eq(TestFixtures.TEST_TWEET.getId()),
                 favoriteCbCaptor.capture());
-        assertEquals(mockToggleButton, favoriteCbCaptor.getValue().button);
-        assertTrue(favoriteCbCaptor.getValue().tweet.favorited);
+        Assert.assertThat(favoriteCbCaptor.getValue().button, is(mockToggleButton));
+        Assert.assertThat(favoriteCbCaptor.getValue().tweet.getFavorited(), is(true));
 
         assertUnfavoriteScribe();
     }
@@ -97,7 +96,7 @@ private void assertFavoriteScribe() {
                 = ArgumentCaptor.forClass(Tweet.class);
         verify(mockScribeClient).favorite(tweetCaptor.capture());
         final Tweet capturedTweet = tweetCaptor.getValue();
-        assertEquals(TestFixtures.TEST_TWEET, capturedTweet);
+        Assert.assertThat(capturedTweet, is(TestFixtures.TEST_TWEET));
     }
 
     private void assertUnfavoriteScribe() {
@@ -105,7 +104,7 @@ private void assertUnfavoriteScribe() {
                 = ArgumentCaptor.forClass(Tweet.class);
         verify(mockScribeClient).unfavorite(tweetCaptor.capture());
         final Tweet capturedTweet = tweetCaptor.getValue();
-        assertEquals(TestFixtures.TEST_FAVORITED_TWEET, capturedTweet);
+        Assert.assertThat(capturedTweet, is(TestFixtures.TEST_FAVORITED_TWEET));
     }
 
     @Test
@@ -138,8 +137,8 @@ public void testFavoriteCallback_failureAlreadyFavorited() {
         final ArgumentCaptor<Result<Tweet>> resultCaptor
                 = ArgumentCaptor.forClass(Result.class);
         verify(mockCallback).success(resultCaptor.capture());
-        assertEquals(tweet.getId(), resultCaptor.getValue().getData().getId());
-        assertTrue(resultCaptor.getValue().getData().favorited);
+        Assert.assertThat(resultCaptor.getValue().getData().getId(), is(tweet.getId()));
+        Assert.assertThat(resultCaptor.getValue().getData().getFavorited(), is(true));
     }
 
     @Test
@@ -160,8 +159,8 @@ public void testFavoriteCallback_failureAlreadyUnfavorited() {
         final ArgumentCaptor<Result<Tweet>> resultCaptor
                 = ArgumentCaptor.forClass(Result.class);
         verify(mockCallback).success(resultCaptor.capture());
-        assertEquals(tweet.getId(), resultCaptor.getValue().getData().getId());
-        assertFalse(resultCaptor.getValue().getData().favorited);
+        Assert.assertThat(resultCaptor.getValue().getData().getId(), is(tweet.getId()));
+        Assert.assertThat(resultCaptor.getValue().getData().getFavorited(), is(false));
     }
 
     @Test
@@ -174,7 +173,7 @@ public void testFavoriteCallback_failureOtherTwitterApiException() {
                 mockCallback);
         final TwitterApiException twitterApiException = mock(TwitterApiException.class);
         callback.failure(twitterApiException);
-        verify(mockToggleButton).setToggledOn(favoritedTweet.favorited);
+        verify(mockToggleButton).setToggledOn(favoritedTweet.getFavorited());
         verify(mockCallback).failure(twitterApiException);
     }
 
@@ -188,7 +187,7 @@ public void testFavoriteCallback_failureOtherTwitterException() {
                 mockCallback);
         final TwitterException twitterException = mock(TwitterException.class);
         callback.failure(twitterException);
-        verify(mockToggleButton).setToggledOn(unfavoritedTweet.favorited);
+        verify(mockToggleButton).setToggledOn(unfavoritedTweet.getFavorited());
         verify(mockCallback).failure(twitterException);
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java
index 0abcf7bd..78248998 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java
@@ -27,6 +27,7 @@
 import com.twitter.sdk.android.tweetui.internal.VideoControlView;
 import com.twitter.sdk.android.tweetui.internal.VideoView;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -37,7 +38,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.spy;
@@ -215,8 +216,8 @@ public void testOnPause() {
 
         verify(videoView).getCurrentPosition();
         verify(videoView).isPlaying();
-        assertEquals(true, subject.isPlaying);
-        assertEquals(TEST_SEEK_POSITION, subject.seekPosition);
+        Assert.assertThat(subject.isPlaying, is(true));
+        Assert.assertThat(subject.seekPosition, is(TEST_SEEK_POSITION));
     }
 
     @Test
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ScribeConstantsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ScribeConstantsTest.java
index dc35c08f..407a0eeb 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ScribeConstantsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ScribeConstantsTest.java
@@ -19,9 +19,10 @@
 
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 
+import org.junit.Assert;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 public class ScribeConstantsTest {
     static final String REQUIRED_TFW_SCRIBE_CLIENT = "tfw";
@@ -41,23 +42,23 @@
     public void testGetSyndicatedSdkTimelineNamespace() {
         final EventNamespace ns = ScribeConstants.getSyndicatedSdkTimelineNamespace(TEST_VIEW_NAME);
 
-        assertEquals(REQUIRED_SDK_SCRIBE_CLIENT, ns.client);
-        assertEquals(REQUIRED_SCRIBE_TIMELINE_PAGE, ns.page);
-        assertEquals(TEST_VIEW_NAME, ns.section);
-        assertEquals(REQUIRED_SCRIBE_INITIAL_COMPONENT, ns.component);
-        assertEquals(REQUIRED_SDK_SCRIBE_ELEMENT, ns.element);
-        assertEquals(REQUIRED_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.client, is(REQUIRED_SDK_SCRIBE_CLIENT));
+        Assert.assertThat(ns.page, is(REQUIRED_SCRIBE_TIMELINE_PAGE));
+        Assert.assertThat(ns.section, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.component, is(REQUIRED_SCRIBE_INITIAL_COMPONENT));
+        Assert.assertThat(ns.element, is(REQUIRED_SDK_SCRIBE_ELEMENT));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_IMPRESSION_ACTION));
     }
 
     @Test
     public void testGetTfwClientTimelineNamespace() {
         final EventNamespace ns = ScribeConstants.getTfwClientTimelineNamespace(TEST_VIEW_NAME);
 
-        assertEquals(REQUIRED_TFW_SCRIBE_CLIENT, ns.client);
-        assertEquals(REQUIRED_TFW_SCRIBE_PAGE, ns.page);
-        assertEquals(REQUIRED_SCRIBE_TIMELINE_SECTION, ns.section);
-        assertEquals(TEST_VIEW_NAME, ns.component);
-        assertEquals(REQUIRED_SCRIBE_INITIAL_ELEMENT, ns.element);
-        assertEquals(REQUIRED_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.client, is(REQUIRED_TFW_SCRIBE_CLIENT));
+        Assert.assertThat(ns.page, is(REQUIRED_TFW_SCRIBE_PAGE));
+        Assert.assertThat(ns.section, is(REQUIRED_SCRIBE_TIMELINE_SECTION));
+        Assert.assertThat(ns.component, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.element, is(REQUIRED_SCRIBE_INITIAL_ELEMENT));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_IMPRESSION_ACTION));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
index 711ef0c3..8dcc807d 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
@@ -23,6 +23,7 @@
 import com.twitter.sdk.android.core.services.SearchService;
 import com.twitter.sdk.android.core.services.params.Geocode;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -30,10 +31,7 @@
 import java.util.Date;
 import java.util.GregorianCalendar;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.isNull;
@@ -76,10 +74,10 @@ public void setUp() {
     public void testConstructor() {
         final SearchTimeline timeline = new SearchTimeline(twitterCore, TEST_QUERY, TEST_GEOCODE,
                 TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST, TEST_UNTIL_DATE);
-        assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
-        assertEquals(TEST_LANG, timeline.languageCode);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertEquals(TEST_UNTIL_DATE, timeline.untilDate);
+        Assert.assertThat(timeline.query, is(TEST_QUERY + SearchTimeline.FILTER_RETWEETS));
+        Assert.assertThat(timeline.languageCode, is(TEST_LANG));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.untilDate, is(TEST_UNTIL_DATE));
     }
 
     @Test
@@ -87,10 +85,10 @@ public void testConstructor() {
     public void testConstructor_defaults() {
         final SearchTimeline timeline = new SearchTimeline(twitterCore, null, null, null, null,
                 null, null);
-        assertNull(timeline.query);
-        assertNull(timeline.languageCode);
-        assertNull(timeline.maxItemsPerRequest);
-        assertNull(timeline.untilDate);
+        Assert.assertThat(timeline.query, nullValue());
+        Assert.assertThat(timeline.languageCode, nullValue());
+        Assert.assertThat(timeline.maxItemsPerRequest, nullValue());
+        Assert.assertThat(timeline.untilDate, nullValue());
     }
 
     @Test
@@ -98,14 +96,14 @@ public void testConstructor_defaults() {
     public void testFilterRetweets() {
         final SearchTimeline timeline = new SearchTimeline(twitterCore, TEST_QUERY, null, null,
                 null, null, null);
-        assertTrue(timeline.query.endsWith(SearchTimeline.FILTER_RETWEETS));
+        Assert.assertThat(timeline.query.endsWith(SearchTimeline.FILTER_RETWEETS), is(true));
     }
 
     @Test
     public void testAddFilterRetweets() {
         final SearchTimeline timeline = new SearchTimeline(twitterCore, TEST_FILTER_QUERY, null,
                 null, null, null, null);
-        assertEquals("from:twitter -filter:retweets", timeline.query);
+        Assert.assertThat(timeline.query, is("from:twitter -filter:retweets"));
     }
 
     @Test
@@ -113,7 +111,7 @@ public void testFilterRetweets_nullQuery() {
         // handle null queries, do not append FILTER_RETWEETS
         final SearchTimeline timeline = new SearchTimeline(twitterCore, null, null, null, null,
                 null, null);
-        assertNull(timeline.query);
+        Assert.assertThat(timeline.query, nullValue());
     }
 
     @Test
@@ -158,7 +156,7 @@ public void testGetScribeSection() {
         final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
                 .query(TEST_QUERY)
                 .build();
-        assertEquals(REQUIRED_IMPRESSION_SECTION, timeline.getTimelineType());
+        Assert.assertThat(timeline.getTimelineType(), is(REQUIRED_IMPRESSION_SECTION));
     }
 
     /* Builder */
@@ -172,12 +170,12 @@ public void testBuilder() {
                 .resultType(SearchTimeline.ResultType.POPULAR)
                 .untilDate(TEST_UNTIL)
                 .build();
-        assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
-        assertEquals(TEST_RESULT_TYPE, timeline.resultType);
-        assertEquals(TEST_LANG, timeline.languageCode);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertEquals(TEST_UNTIL_DATE, timeline.untilDate);
-        assertSame(TEST_GEOCODE, timeline.geocode);
+        Assert.assertThat(timeline.query, is(TEST_QUERY + SearchTimeline.FILTER_RETWEETS));
+        Assert.assertThat(timeline.resultType, is(TEST_RESULT_TYPE));
+        Assert.assertThat(timeline.languageCode, is(TEST_LANG));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.untilDate, is(TEST_UNTIL_DATE));
+        Assert.assertThat(timeline.geocode, sameInstance(TEST_GEOCODE));
     }
 
     @Test
@@ -186,9 +184,9 @@ public void testBuilder_defaults() {
         final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
                 .query(TEST_QUERY)
                 .build();
-        assertNull(timeline.languageCode);
-        assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertNull(timeline.untilDate);
+        Assert.assertThat(timeline.languageCode, nullValue());
+        Assert.assertThat(timeline.maxItemsPerRequest, is(REQUIRED_DEFAULT_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.untilDate, nullValue());
     }
 
     @Test
@@ -196,7 +194,7 @@ public void testBuilder_query() {
         final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
                 .query(TEST_QUERY)
                 .build();
-        assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
+        Assert.assertThat(timeline.query, is(TEST_QUERY + SearchTimeline.FILTER_RETWEETS));
     }
 
     @Test
@@ -205,7 +203,7 @@ public void testBuilder_nullQuery() {
             new SearchTimeline.Builder(twitterCore).build();
             fail("Expected IllegalStateException");
         } catch (IllegalStateException e) {
-            assertEquals("query must not be null", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("query must not be null"));
         }
     }
 
@@ -215,7 +213,7 @@ public void testBuilder_lang() {
                 .query(TEST_QUERY)
                 .languageCode(TEST_LANG)
                 .build();
-        assertEquals(TEST_LANG, timeline.languageCode);
+        Assert.assertThat(timeline.languageCode, is(TEST_LANG));
     }
 
     @Test
@@ -224,7 +222,7 @@ public void testBuilder_geocode() {
                 .query(TEST_QUERY)
                 .geocode(TEST_GEOCODE)
                 .build();
-        assertSame(TEST_GEOCODE, timeline.geocode);
+        Assert.assertThat(timeline.geocode, sameInstance(TEST_GEOCODE));
     }
 
     @Test
@@ -233,6 +231,6 @@ public void testBuilder_maxItemsPerRequest() {
                 .query(TEST_QUERY)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ShareTweetActionTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ShareTweetActionTest.java
index 2d222e80..38cc6d2b 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ShareTweetActionTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ShareTweetActionTest.java
@@ -26,6 +26,7 @@
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -36,7 +37,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyInt;
 import static org.mockito.Mockito.mock;
@@ -54,7 +55,7 @@
             "Tweet from " + TestFixtures.TEST_NAME + " (@" + TestFixtures.TEST_SCREEN_NAME + ")";
     private static final String A_SHARE_TEXT
             = "Check out @" + TestFixtures.TEST_SCREEN_NAME + "'s Tweet: https://twitter.com/" +
-            TestFixtures.TEST_SCREEN_NAME + "/status/" + TestFixtures.TEST_TWEET.id;
+            TestFixtures.TEST_SCREEN_NAME + "/status/" + TestFixtures.TEST_TWEET.getId();
 
     private ShareTweetAction listener;
     private Resources resources;
@@ -102,19 +103,19 @@ private void assertScribe() {
                 = ArgumentCaptor.forClass(Tweet.class);
 
         verify(mockScribeClient).share(tweetCaptor.capture());
-        assertEquals(TestFixtures.TEST_TWEET, tweetCaptor.getValue());
+        Assert.assertThat(tweetCaptor.getValue(), is(TestFixtures.TEST_TWEET));
     }
 
     @Test
     public void testGetShareContent() {
         final String shareContent = listener.getShareContent(resources);
-        assertEquals(A_SHARE_TEXT, shareContent);
+        Assert.assertThat(shareContent, is(A_SHARE_TEXT));
     }
 
     @Test
     public void testGetShareSubject() {
         final String shareSubject = listener.getShareSubject(resources);
-        assertEquals(A_SHARE_SUBJECT, shareSubject);
+        Assert.assertThat(shareSubject, is(A_SHARE_SUBJECT));
     }
 
     @Test
@@ -128,10 +129,10 @@ public void testLaunchShareIntent_startsActivity() {
     @Test
     public void testGetShareIntent() {
         final Intent intent = listener.getShareIntent(A_SHARE_SUBJECT, A_SHARE_TEXT);
-        assertEquals(REQUIRED_SEND_ACTION, intent.getAction());
-        assertEquals(REQUIRED_MIME_TYPE, intent.getType());
-        assertEquals(A_SHARE_SUBJECT, intent.getStringExtra(Intent.EXTRA_SUBJECT));
-        assertEquals(A_SHARE_TEXT, intent.getStringExtra(Intent.EXTRA_TEXT));
+        Assert.assertThat(intent.getAction(), is(REQUIRED_SEND_ACTION));
+        Assert.assertThat(intent.getType(), is(REQUIRED_MIME_TYPE));
+        Assert.assertThat(intent.getStringExtra(Intent.EXTRA_SUBJECT), is(A_SHARE_SUBJECT));
+        Assert.assertThat(intent.getStringExtra(Intent.EXTRA_TEXT), is(A_SHARE_TEXT));
     }
 
     private Context createContextWithPackageManager() {
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineCursorTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineCursorTest.java
index 0f199533..746fc5c5 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineCursorTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineCursorTest.java
@@ -17,6 +17,7 @@
 
 package com.twitter.sdk.android.tweetui;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -24,7 +25,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TimelineCursorTest {
@@ -34,8 +35,8 @@
     @Test
     public void testConstructor() {
         final TimelineCursor cursor = new TimelineCursor(TEST_MIN_POSITION, TEST_MAX_POSITION);
-        assertEquals(TEST_MIN_POSITION, cursor.minPosition);
-        assertEquals(TEST_MAX_POSITION, cursor.maxPosition);
+        Assert.assertThat(cursor.minPosition, is(TEST_MIN_POSITION));
+        Assert.assertThat(cursor.maxPosition, is(TEST_MAX_POSITION));
     }
 
     @Test
@@ -44,7 +45,7 @@ public void testConstructor_withList() {
         testItems.add(new TestItem(TEST_MAX_POSITION));
         testItems.add(new TestItem(TEST_MIN_POSITION));
         final TimelineCursor cursor = new TimelineCursor(testItems);
-        assertEquals(TEST_MIN_POSITION, cursor.minPosition);
-        assertEquals(TEST_MAX_POSITION, cursor.maxPosition);
+        Assert.assertThat(cursor.minPosition, is(TEST_MIN_POSITION));
+        Assert.assertThat(cursor.maxPosition, is(TEST_MAX_POSITION));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
index c34b910e..cd8eaf5f 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
@@ -24,6 +24,8 @@
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterException;
 
+import org.hamcrest.MatcherAssert;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -35,12 +37,9 @@
 import java.util.List;
 
 import static org.hamcrest.CoreMatchers.not;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.isNull;
@@ -78,6 +77,7 @@
 
     @Before
     public void setUp() throws Exception {
+        //noinspection unchecked,unchecked
         mockTimeline = mock(Timeline.class);
         mockObservable = mock(DataSetObservable.class);
         // lists of items ordered from larger id to smaller
@@ -92,25 +92,25 @@ public void setUp() throws Exception {
     @Test
     public void testConstructor() {
         delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        assertEquals(mockTimeline, delegate.timeline);
-        assertEquals(mockObservable, delegate.listAdapterObservable);
-        assertEquals(testItems, delegate.itemList);
-        assertNotNull(delegate.timelineStateHolder);
+        Assert.assertThat(delegate.timeline, is(mockTimeline));
+        Assert.assertThat(delegate.listAdapterObservable, is(mockObservable));
+        Assert.assertThat(delegate.itemList, is(testItems));
+        Assert.assertThat(delegate.timelineStateHolder, notNullValue());
         // initial positions must be null
-        assertNull(delegate.timelineStateHolder.positionForNext());
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
+        Assert.assertThat(delegate.timelineStateHolder.positionForNext(), nullValue());
+        Assert.assertThat(delegate.timelineStateHolder.positionForPrevious(), nullValue());
     }
 
     @Test
     public void testConstructor_defaults() {
         delegate = new TimelineDelegate<>(mockTimeline);
-        assertEquals(mockTimeline, delegate.timeline);
-        assertNotNull(delegate.listAdapterObservable);
-        assertNotNull(delegate.itemList);
-        assertNotNull(delegate.timelineStateHolder);
+        Assert.assertThat(delegate.timeline, is(mockTimeline));
+        Assert.assertThat(delegate.listAdapterObservable, notNullValue());
+        Assert.assertThat(delegate.itemList, notNullValue());
+        Assert.assertThat(delegate.timelineStateHolder, notNullValue());
         // initial positions must be null
-        assertNull(delegate.timelineStateHolder.positionForNext());
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
+        Assert.assertThat(delegate.timelineStateHolder.positionForNext(), nullValue());
+        Assert.assertThat(delegate.timelineStateHolder.positionForPrevious(), nullValue());
     }
 
     @Test
@@ -119,23 +119,23 @@ public void testConstructor_nullTimeline() {
             delegate = new TimelineDelegate<>(null);
             fail("IllegalArgumentException expected");
         } catch (IllegalArgumentException e) {
-            assertEquals("Timeline must not be null", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("Timeline must not be null"));
         }
     }
 
     @Test
     public void testGetCount() {
         delegate = new TimelineDelegate<>(mockTimeline);
-        assertEquals(0, delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(0));
         delegate = new TimelineDelegate<>(mockTimeline, null, testItems);
-        assertEquals(testItems.size(), delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(testItems.size()));
     }
 
     @Test
     public void testGetItem() {
         delegate = new TimelineDelegate<>(mockTimeline, null, testItems);
-        assertEquals(TEST_ITEM_2, delegate.getItem(0));
-        assertEquals(TEST_ITEM_1, delegate.getItem(1));
+        Assert.assertThat(delegate.getItem(0), is(TEST_ITEM_2));
+        Assert.assertThat(delegate.getItem(1), is(TEST_ITEM_1));
     }
 
     @Test
@@ -148,7 +148,7 @@ public void testGetLastItem_loadsPrevious() {
         verify(mockObservable).notifyChanged();
         delegate.getItem(NUM_ITEMS - 1);
         // assert items are added and notifyChanged is called again
-        assertEquals(2 * NUM_ITEMS, delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(2 * NUM_ITEMS));
         verify(mockObservable, times(2)).notifyChanged();
     }
 
@@ -160,40 +160,40 @@ public void testGetNonLastItem_doesNotLoadPrevious() {
         delegate.refresh(null);
         // refresh loads latest items (notifyChange)
         verify(mockObservable).notifyChanged();
-        assertEquals(NUM_ITEMS, delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(NUM_ITEMS));
         delegate.getItem(1);
         // assert no items added and notifyChanged is not called again
-        assertEquals(NUM_ITEMS, delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(NUM_ITEMS));
         verify(mockObservable, times(1)).notifyChanged();
     }
 
     @Test
     public void testGetItemId() {
         delegate = new TimelineDelegate<>(mockTimeline, null, testItems);
-        assertEquals(TEST_ITEM_2.getId(), delegate.getItemId(0));
-        assertEquals(TEST_ITEM_1.getId(), delegate.getItemId(1));
+        Assert.assertThat(delegate.getItemId(0), is(TEST_ITEM_2.getId()));
+        Assert.assertThat(delegate.getItemId(1), is(TEST_ITEM_1.getId()));
     }
 
     @Test
     public void testSetItemById() {
         delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        assertEquals(TEST_ITEM_2, delegate.getItem(0));
-        assertEquals(TEST_ITEM_1, delegate.getItem(1));
+        Assert.assertThat(delegate.getItem(0), is(TEST_ITEM_2));
+        Assert.assertThat(delegate.getItem(1), is(TEST_ITEM_1));
         final TestItem differentItemSameId = new TestItem(TEST_ITEM_2.getId());
         delegate.setItemById(differentItemSameId);
-        assertThat(TEST_ITEM_2, not(delegate.getItem(0)));
-        assertEquals(differentItemSameId, delegate.getItem(0));
-        assertEquals(TEST_ITEM_1, delegate.getItem(1));
+        MatcherAssert.assertThat(TEST_ITEM_2, not(delegate.getItem(0)));
+        Assert.assertThat(delegate.getItem(0), is(differentItemSameId));
+        Assert.assertThat(delegate.getItem(1), is(TEST_ITEM_1));
         verify(mockObservable).notifyChanged();
     }
 
     @Test
     public void testWithinMaxCapacity() {
         delegate = new TimelineDelegate<>(mockTimeline);
-        assertTrue(delegate.withinMaxCapacity());
+        Assert.assertThat(delegate.withinMaxCapacity(), is(true));
         TestItem.populateList(testItems, TimelineDelegate.CAPACITY);
         delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        assertFalse(delegate.withinMaxCapacity());
+        Assert.assertThat(delegate.withinMaxCapacity(), is(false));
     }
 
     @Test
@@ -201,9 +201,9 @@ public void testIsLastPosition() {
         testItems = new ArrayList<>();
         TestItem.populateList(testItems, NUM_ITEMS);
         delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        assertFalse(delegate.isLastPosition(0));
-        assertFalse(delegate.isLastPosition(NUM_ITEMS - 2));
-        assertTrue(delegate.isLastPosition(NUM_ITEMS - 1));
+        Assert.assertThat(delegate.isLastPosition(0), is(false));
+        Assert.assertThat(delegate.isLastPosition(NUM_ITEMS - 2), is(false));
+        Assert.assertThat(delegate.isLastPosition(NUM_ITEMS - 1), is(true));
     }
 
     // reset, next, previous
@@ -215,8 +215,8 @@ public void testRefresh_resetsTimelineCursors() {
         delegate.timelineStateHolder.setPreviousCursor(new TimelineCursor(ANY_POSITION,
                 ANY_POSITION));
         delegate.refresh(null);
-        assertNull(delegate.timelineStateHolder.positionForNext());
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
+        Assert.assertThat(delegate.timelineStateHolder.positionForNext(), nullValue());
+        Assert.assertThat(delegate.timelineStateHolder.positionForPrevious(), nullValue());
     }
 
     @Test
@@ -232,10 +232,10 @@ public void testRefresh_replacesItems() {
         final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, ANY_POSITION,
                 ANY_POSITION);
         delegate = new TimelineDelegate<>(fakeTimeline, mockObservable, testItems);
-        assertEquals(testItems, delegate.itemList);
+        Assert.assertThat(delegate.itemList, is(testItems));
         delegate.refresh(null);
         // assert that items were replaced and notifyChanged called
-        assertEquals(NUM_ITEMS, delegate.itemList.size());
+        Assert.assertThat(delegate.itemList.size(), is(NUM_ITEMS));
         verify(mockObservable).notifyChanged();
     }
 
@@ -248,7 +248,7 @@ public void testNext_addsItems() {
         // refresh loads latest items (notifyChange)
         delegate.next(null);
         // assert items are added and notifyChanges is called again
-        assertEquals(2 * NUM_ITEMS, delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(2 * NUM_ITEMS));
         verify(mockObservable, times(2)).notifyChanged();
     }
 
@@ -263,7 +263,7 @@ public void testNext_doesNotAddItemsAtBeginningOfTimeline() {
         delegate = new TimelineDelegate<>(fakeEndTimeline, mockObservable, initialItems);
         delegate.next(null);
         // assert no items are added and notifyChanged is not called
-        assertEquals(INITIAL_COUNT, delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(INITIAL_COUNT));
         verifyZeroInteractions(mockObservable);
     }
 
@@ -272,9 +272,9 @@ public void testNext_updatesPositionForNext() {
         final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, ANY_POSITION,
                 TEST_MAX_POSITION);
         delegate = new TimelineDelegate<>(fakeTimeline);
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
+        Assert.assertThat(delegate.timelineStateHolder.positionForPrevious(), nullValue());
         delegate.next(null);
-        assertEquals(TEST_MAX_POSITION, delegate.timelineStateHolder.positionForNext());
+        Assert.assertThat(delegate.timelineStateHolder.positionForNext(), is(TEST_MAX_POSITION));
     }
 
     @Test
@@ -284,7 +284,7 @@ public void testNext_doesNotUpdatePositionAtBeginningOfTimeline() {
         delegate = new TimelineDelegate<>(fakeEndTimeline);
         delegate.timelineStateHolder.setPreviousCursor(new TimelineCursor(null, null));
         delegate.next(null);
-        assertNull(delegate.timelineStateHolder.positionForNext());
+        Assert.assertThat(delegate.timelineStateHolder.positionForNext(), nullValue());
     }
 
     @Test
@@ -296,7 +296,7 @@ public void testPrevious_addsItems() {
         // refresh loads latest items (notifyChange)
         delegate.previous();
         // assert items are added and notifyChanges is called again
-        assertEquals(2 * NUM_ITEMS, delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(2 * NUM_ITEMS));
         verify(mockObservable, times(2)).notifyChanged();
     }
 
@@ -311,7 +311,7 @@ public void testPrevious_doesNotAddItemsAtEndOfTimeline() {
         delegate = new TimelineDelegate<>(fakeEndTimeline, mockObservable, initialItems);
         delegate.previous();
         // assert no items are added and notifyChanged is not called
-        assertEquals(INITIAL_COUNT, delegate.getCount());
+        Assert.assertThat(delegate.getCount(), is(INITIAL_COUNT));
         verifyZeroInteractions(mockObservable);
     }
 
@@ -320,9 +320,9 @@ public void testPrevious_updatesPositionForPrevious() {
         final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, TEST_MIN_POSITION,
                 ANY_POSITION);
         delegate = new TimelineDelegate<>(fakeTimeline);
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
+        Assert.assertThat(delegate.timelineStateHolder.positionForPrevious(), nullValue());
         delegate.previous();
-        assertEquals(TEST_MIN_POSITION, delegate.timelineStateHolder.positionForPrevious());
+        Assert.assertThat(delegate.timelineStateHolder.positionForPrevious(), is(TEST_MIN_POSITION));
     }
 
     @Test
@@ -332,7 +332,7 @@ public void testPrevious_doesNotUpdatePositionAtEndOfTimeline() {
         delegate = new TimelineDelegate<>(fakeEndTimeline);
         delegate.timelineStateHolder.setPreviousCursor(new TimelineCursor(null, null));
         delegate.previous();
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
+        Assert.assertThat(delegate.timelineStateHolder.positionForPrevious(), nullValue());
     }
 
     // loadNext, loadPrevious
@@ -356,7 +356,7 @@ public void testLoadNext_respectsMaxCapacity() {
                 = ArgumentCaptor.forClass(TwitterException.class);
         verifyZeroInteractions(mockTimeline);
         verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(REQUIRED_MAX_CAPACITY_ERROR, exceptionCaptor.getValue().getMessage());
+        Assert.assertThat(exceptionCaptor.getValue().getMessage(), is(REQUIRED_MAX_CAPACITY_ERROR));
     }
 
     @Test
@@ -369,7 +369,7 @@ public void testLoadNext_respectsRequestInFlight() {
                 = ArgumentCaptor.forClass(TwitterException.class);
         verifyZeroInteractions(mockTimeline);
         verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(REQUIRED_REQUEST_IN_FLIGHT_ERROR, exceptionCaptor.getValue().getMessage());
+        Assert.assertThat(exceptionCaptor.getValue().getMessage(), is(REQUIRED_REQUEST_IN_FLIGHT_ERROR));
     }
 
     @Test
@@ -391,7 +391,7 @@ public void testLoadPrevious_respectsMaxCapacity() {
                 = ArgumentCaptor.forClass(TwitterException.class);
         verifyZeroInteractions(mockTimeline);
         verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(REQUIRED_MAX_CAPACITY_ERROR, exceptionCaptor.getValue().getMessage());
+        Assert.assertThat(exceptionCaptor.getValue().getMessage(), is(REQUIRED_MAX_CAPACITY_ERROR));
     }
 
     @Test
@@ -404,7 +404,7 @@ public void testLoadPrevious_respectsRequestInFlight() {
                 = ArgumentCaptor.forClass(TwitterException.class);
         verifyZeroInteractions(mockTimeline);
         verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(REQUIRED_REQUEST_IN_FLIGHT_ERROR, exceptionCaptor.getValue().getMessage());
+        Assert.assertThat(exceptionCaptor.getValue().getMessage(), is(REQUIRED_REQUEST_IN_FLIGHT_ERROR));
     }
 
     /* nested Callbacks */
@@ -484,14 +484,14 @@ public void testNextCallback_successReceivedItems() {
                 timelineStateHolder);
         cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
         // assert the next TimelineCursor is set on the ScrollStateHolder, previous unchanged
-        assertEquals(TEST_MAX_POSITION, timelineStateHolder.positionForNext());
-        assertEquals(ANY_POSITION, timelineStateHolder.positionForPrevious());
+        Assert.assertThat(timelineStateHolder.positionForNext(), is(TEST_MAX_POSITION));
+        Assert.assertThat(timelineStateHolder.positionForPrevious(), is(ANY_POSITION));
         // assert that extra items were prepended in reverse order
-        assertEquals(TOTAL_ITEMS, delegate.itemList.size());
-        assertEquals(TEST_ITEM_4, delegate.getItem(0));
-        assertEquals(TEST_ITEM_3, delegate.getItem(1));
-        assertEquals(TEST_ITEM_2, delegate.getItem(2));
-        assertEquals(TEST_ITEM_1, delegate.getItem(3));
+        Assert.assertThat(delegate.itemList.size(), is(TOTAL_ITEMS));
+        Assert.assertThat(delegate.getItem(0), is(TEST_ITEM_4));
+        Assert.assertThat(delegate.getItem(1), is(TEST_ITEM_3));
+        Assert.assertThat(delegate.getItem(2), is(TEST_ITEM_2));
+        Assert.assertThat(delegate.getItem(3), is(TEST_ITEM_1));
         // assert observer's notifyChanged is called
         verify(mockObservable).notifyChanged();
     }
@@ -505,8 +505,8 @@ public void testNextCallback_successFirstReceivedItems() {
                 timelineStateHolder);
         cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
         // assert the next TimelineCursor is set on the ScrollStateHolder, previous unchanged
-        assertEquals(TEST_MAX_POSITION, timelineStateHolder.positionForNext());
-        assertEquals(TEST_MIN_POSITION, timelineStateHolder.positionForPrevious());
+        Assert.assertThat(timelineStateHolder.positionForNext(), is(TEST_MAX_POSITION));
+        Assert.assertThat(timelineStateHolder.positionForPrevious(), is(TEST_MIN_POSITION));
     }
 
     // should do nothing
@@ -519,9 +519,9 @@ public void testNextCallback_successReceivedZeroItems() {
         cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, Collections.emptyList()),
                 null));
         // assert that the cursors and itemList are left unmodified
-        assertNull(timelineStateHolder.positionForNext());
-        assertNull(timelineStateHolder.positionForPrevious());
-        assertEquals(testItems.size(), delegate.itemList.size());
+        Assert.assertThat(timelineStateHolder.positionForNext(), nullValue());
+        Assert.assertThat(timelineStateHolder.positionForPrevious(), nullValue());
+        Assert.assertThat(delegate.itemList.size(), is(testItems.size()));
         verifyZeroInteractions(mockObservable);
     }
 
@@ -536,12 +536,12 @@ public void testRefreshCallback_successReceivedItems() {
                 timelineStateHolder);
         cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
         // assert the next TimelineCursor is set on the ScrollStateHolder, previous unchanged
-        assertEquals(TEST_MAX_POSITION, timelineStateHolder.positionForNext());
-        assertEquals(ANY_POSITION, timelineStateHolder.positionForPrevious());
+        Assert.assertThat(timelineStateHolder.positionForNext(), is(TEST_MAX_POSITION));
+        Assert.assertThat(timelineStateHolder.positionForPrevious(), is(ANY_POSITION));
         // assert that extra items replaced the old items
-        assertEquals(testExtraItems.size(), delegate.itemList.size());
-        assertEquals(TEST_ITEM_4, delegate.getItem(0));
-        assertEquals(TEST_ITEM_3, delegate.getItem(1));
+        Assert.assertThat(delegate.itemList.size(), is(testExtraItems.size()));
+        Assert.assertThat(delegate.getItem(0), is(TEST_ITEM_4));
+        Assert.assertThat(delegate.getItem(1), is(TEST_ITEM_3));
         // assert observer's notifyChanged is called
         verify(mockObservable).notifyChanged();
     }
@@ -556,9 +556,9 @@ public void testRefreshCallback_successReceivedZeroItems() {
         cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, Collections.emptyList()),
                 null));
         // assert that the cursors and itemList are left unmodified
-        assertNull(timelineStateHolder.positionForNext());
-        assertNull(timelineStateHolder.positionForPrevious());
-        assertEquals(testItems.size(), delegate.itemList.size());
+        Assert.assertThat(timelineStateHolder.positionForNext(), nullValue());
+        Assert.assertThat(timelineStateHolder.positionForPrevious(), nullValue());
+        Assert.assertThat(delegate.itemList.size(), is(testItems.size()));
         verifyZeroInteractions(mockObservable);
     }
 
@@ -573,14 +573,14 @@ public void testPreviousCallback_successReceivedItems() {
                 = delegate.new PreviousCallback(timelineStateHolder);
         cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
         // assert the previous TimelineCursor is set on the ScrollStateHolder
-        assertEquals(TEST_MIN_POSITION, timelineStateHolder.positionForPrevious());
-        assertEquals(ANY_POSITION, timelineStateHolder.positionForNext());
+        Assert.assertThat(timelineStateHolder.positionForPrevious(), is(TEST_MIN_POSITION));
+        Assert.assertThat(timelineStateHolder.positionForNext(), is(ANY_POSITION));
         // assert that extra items were appended in order received
-        assertEquals(TOTAL_ITEMS, delegate.itemList.size());
-        assertEquals(TEST_ITEM_2, delegate.getItem(0));
-        assertEquals(TEST_ITEM_1, delegate.getItem(1));
-        assertEquals(TEST_ITEM_4, delegate.getItem(2));
-        assertEquals(TEST_ITEM_3, delegate.getItem(3));
+        Assert.assertThat(delegate.itemList.size(), is(TOTAL_ITEMS));
+        Assert.assertThat(delegate.getItem(0), is(TEST_ITEM_2));
+        Assert.assertThat(delegate.getItem(1), is(TEST_ITEM_1));
+        Assert.assertThat(delegate.getItem(2), is(TEST_ITEM_4));
+        Assert.assertThat(delegate.getItem(3), is(TEST_ITEM_3));
         // assert observer's notifyChanged is called
         verify(mockObservable).notifyChanged();
     }
@@ -594,8 +594,8 @@ public void testPreviousCallback_successFirstReceivedItems() {
                 = delegate.new PreviousCallback(timelineStateHolder);
         cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
         // assert the previous TimelineCursor is set on the ScrollStateHolder
-        assertEquals(TEST_MAX_POSITION, timelineStateHolder.positionForNext());
-        assertEquals(TEST_MIN_POSITION, timelineStateHolder.positionForPrevious());
+        Assert.assertThat(timelineStateHolder.positionForNext(), is(TEST_MAX_POSITION));
+        Assert.assertThat(timelineStateHolder.positionForPrevious(), is(TEST_MIN_POSITION));
     }
 
 
@@ -609,9 +609,9 @@ public void testPreviousCallback_successReceivedZeroItems() {
         cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, Collections.emptyList()),
                 null));
         // assert that the cursors and itemList are left unmodified
-        assertNull(timelineStateHolder.positionForNext());
-        assertNull(timelineStateHolder.positionForPrevious());
-        assertEquals(testItems.size(), delegate.itemList.size());
+        Assert.assertThat(timelineStateHolder.positionForNext(), nullValue());
+        Assert.assertThat(timelineStateHolder.positionForPrevious(), nullValue());
+        Assert.assertThat(delegate.itemList.size(), is(testItems.size()));
         verifyZeroInteractions(mockObservable);
     }
 
@@ -656,7 +656,8 @@ public void testNotifyDataSetInvalidated() {
 
         /**
          * Constructs a FakeItemTimeline
-         * @param numItems the number of TestItems to return per call to next/previous
+         *
+         * @param numItems    the number of TestItems to return per call to next/previous
          * @param minPosition the TimelineCursor minPosition returned by calls to next/previous
          * @param maxPosition the TimelineCursor maxPosition returned by calls to next/previous
          */
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java
index 71d28a66..bdf25fcc 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java
@@ -25,13 +25,14 @@
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Identifiable;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
@@ -63,7 +64,7 @@ public void testConstructor_nullTimeline() {
             new TestTimelineListAdapter<>(context, (Timeline) null);
             fail("IllegalArgumentException expected");
         } catch (IllegalArgumentException e) {
-            assertEquals("Timeline must not be null", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("Timeline must not be null"));
         }
     }
 
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java
index b10c1f72..047ad9a9 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java
@@ -17,15 +17,13 @@
 
 package com.twitter.sdk.android.tweetui;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
@@ -47,18 +45,18 @@ public void setUp() throws Exception {
     @Test
     public void testConstructor() {
         final TimelineStateHolder holder = new TimelineStateHolder();
-        assertNull(holder.nextCursor);
-        assertNull(holder.previousCursor);
-        assertFalse(holder.requestInFlight.get());
+        Assert.assertThat(holder.nextCursor, nullValue());
+        Assert.assertThat(holder.previousCursor, nullValue());
+        Assert.assertThat(holder.requestInFlight.get(), is(false));
     }
 
     @Test
     public void testInternalConstructor() {
         final TimelineStateHolder holder = new TimelineStateHolder(TEST_TIMELINE_CURSOR,
                 TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.previousCursor);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.nextCursor);
-        assertFalse(holder.requestInFlight.get());
+        Assert.assertThat(holder.previousCursor, is(TEST_TIMELINE_CURSOR));
+        Assert.assertThat(holder.nextCursor, is(TEST_TIMELINE_CURSOR));
+        Assert.assertThat(holder.requestInFlight.get(), is(false));
     }
 
     @Test
@@ -66,21 +64,21 @@ public void testResetCursors() {
         final TimelineStateHolder holder = new TimelineStateHolder(TEST_TIMELINE_CURSOR,
                 TEST_TIMELINE_CURSOR);
         holder.resetCursors();
-        assertNull(holder.nextCursor);
-        assertNull(holder.previousCursor);
+        Assert.assertThat(holder.nextCursor, nullValue());
+        Assert.assertThat(holder.previousCursor, nullValue());
     }
 
     @Test
     public void testPositionForNext() {
         final TimelineStateHolder holder = new TimelineStateHolder(new TimelineCursor(ANY_POSITION,
                 TEST_MAX_POSITION), mockTimelineCursor);
-        assertEquals(TEST_MAX_POSITION, holder.positionForNext());
+        Assert.assertThat(holder.positionForNext(), is(TEST_MAX_POSITION));
     }
 
     @Test
     public void testPositionForNext_nullCursor() {
         final TimelineStateHolder holder = new TimelineStateHolder(null, mockTimelineCursor);
-        assertNull(holder.positionForNext());
+        Assert.assertThat(holder.positionForNext(), nullValue());
     }
 
     @Test
@@ -90,8 +88,8 @@ public void testSetNextCursor() {
                 new TimelineCursor(ANY_POSITION, ANY_POSITION),
                 previousCursor);
         holder.setNextCursor(TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.nextCursor);
-        assertEquals(previousCursor, holder.previousCursor);
+        Assert.assertThat(holder.nextCursor, is(TEST_TIMELINE_CURSOR));
+        Assert.assertThat(holder.previousCursor, is(previousCursor));
     }
 
     // first next load will set both nextCursor and previousCursor
@@ -99,21 +97,21 @@ public void testSetNextCursor() {
     public void testSetNextCursor_firstLoad() {
         final TimelineStateHolder holder = new TimelineStateHolder();
         holder.setNextCursor(TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.nextCursor);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.previousCursor);
+        Assert.assertThat(holder.nextCursor, is(TEST_TIMELINE_CURSOR));
+        Assert.assertThat(holder.previousCursor, is(TEST_TIMELINE_CURSOR));
     }
 
     @Test
     public void testPositionForPrevious() {
         final TimelineStateHolder holder = new TimelineStateHolder(mockTimelineCursor,
                 new TimelineCursor(TEST_MIN_POSITION, ANY_POSITION));
-        assertEquals(TEST_MIN_POSITION, holder.positionForPrevious());
+        Assert.assertThat(holder.positionForPrevious(), is(TEST_MIN_POSITION));
     }
 
     @Test
     public void testPositionForPrevious_nullCursor() {
         final TimelineStateHolder holder = new TimelineStateHolder(mockTimelineCursor, null);
-        assertNull(holder.positionForPrevious());
+        Assert.assertThat(holder.positionForPrevious(), nullValue());
     }
 
     @Test
@@ -122,8 +120,8 @@ public void testSetPreviousCursor() {
         final TimelineStateHolder holder = new TimelineStateHolder(nextCursor,
                 new TimelineCursor(ANY_POSITION, ANY_POSITION));
         holder.setPreviousCursor(TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.previousCursor);
-        assertEquals(nextCursor, holder.nextCursor);
+        Assert.assertThat(holder.previousCursor, is(TEST_TIMELINE_CURSOR));
+        Assert.assertThat(holder.nextCursor, is(nextCursor));
     }
 
     // first previous load will set both nextCursor and previousCursor
@@ -131,17 +129,17 @@ public void testSetPreviousCursor() {
     public void testSetPreviousCursor_firstLoad() {
         final TimelineStateHolder holder = new TimelineStateHolder();
         holder.setPreviousCursor(TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.nextCursor);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.previousCursor);
+        Assert.assertThat(holder.nextCursor, is(TEST_TIMELINE_CURSOR));
+        Assert.assertThat(holder.previousCursor, is(TEST_TIMELINE_CURSOR));
     }
 
     @Test
     public void testStartTimelineRequest() {
         final TimelineStateHolder holder = new TimelineStateHolder();
-        assertFalse(holder.requestInFlight.get());
-        assertTrue(holder.startTimelineRequest());
-        assertTrue(holder.requestInFlight.get());
-        assertFalse(holder.startTimelineRequest());
+        Assert.assertThat(holder.requestInFlight.get(), is(false));
+        Assert.assertThat(holder.startTimelineRequest(), is(true));
+        Assert.assertThat(holder.requestInFlight.get(), is(true));
+        Assert.assertThat(holder.startTimelineRequest(), is(false));
     }
 
     @Test
@@ -149,6 +147,6 @@ public void testFinishTimelineRequest() {
         final TimelineStateHolder holder = new TimelineStateHolder();
         holder.requestInFlight.set(true);
         holder.finishTimelineRequest();
-        assertFalse(holder.requestInFlight.get());
+        Assert.assertThat(holder.requestInFlight.get(), is(false));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ToggleImageButtonTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ToggleImageButtonTest.java
index 01f66ea4..612f1f1d 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ToggleImageButtonTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ToggleImageButtonTest.java
@@ -19,16 +19,14 @@
 
 import android.util.AttributeSet;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class ToggleImageButtonTest {
@@ -52,63 +50,63 @@ ToggleImageButton createButtonWithAttributes() {
     @Test
     public void testInit() {
         final ToggleImageButton button = createDefaultButton();
-        assertNull(button.contentDescriptionOn);
-        assertNull(button.contentDescriptionOff);
-        assertFalse(button.isToggledOn());
-        assertTrue(button.toggleOnClick);
+        Assert.assertThat(button.contentDescriptionOn, nullValue());
+        Assert.assertThat(button.contentDescriptionOff, nullValue());
+        Assert.assertThat(button.isToggledOn(), is(false));
+        Assert.assertThat(button.toggleOnClick, is(true));
     }
 
     @Test
     public void testPerformClick() {
         final ToggleImageButton button = createDefaultButton();
-        assertTrue(button.toggleOnClick);
-        assertFalse(button.isToggledOn());
+        Assert.assertThat(button.toggleOnClick, is(true));
+        Assert.assertThat(button.isToggledOn(), is(false));
         button.performClick();
-        assertTrue(button.isToggledOn());
+        Assert.assertThat(button.isToggledOn(), is(true));
     }
 
     @Test
     public void testSetToggledOn() {
         final ToggleImageButton button = createDefaultButton();
-        assertFalse(button.isToggledOn());
+        Assert.assertThat(button.isToggledOn(), is(false));
         button.setToggledOn(true);
-        assertTrue(button.isToggledOn());
+        Assert.assertThat(button.isToggledOn(), is(true));
     }
 
     @Test
     public void testToggle() {
         final ToggleImageButton button = createDefaultButton();
-        assertFalse(button.isToggledOn());
+        Assert.assertThat(button.isToggledOn(), is(false));
         button.toggle();
-        assertTrue(button.isToggledOn());
+        Assert.assertThat(button.isToggledOn(), is(true));
     }
 
     @Test
     public void testXmlInit() {
         final ToggleImageButton button = createButtonWithAttributes();
-        assertEquals(CONTENT_DESCRIPTION_ON, button.contentDescriptionOn);
-        assertEquals(CONTENT_DESCRIPTION_OFF, button.contentDescriptionOff);
-        assertFalse(button.isToggledOn());
-        assertEquals(CONTENT_DESCRIPTION_OFF, button.getContentDescription());
-        assertFalse(button.toggleOnClick);
+        Assert.assertThat(button.contentDescriptionOn, is(CONTENT_DESCRIPTION_ON));
+        Assert.assertThat(button.contentDescriptionOff, is(CONTENT_DESCRIPTION_OFF));
+        Assert.assertThat(button.isToggledOn(), is(false));
+        Assert.assertThat(button.getContentDescription(), is(CONTENT_DESCRIPTION_OFF));
+        Assert.assertThat(button.toggleOnClick, is(false));
     }
 
     @Test
     public void testPerformClick_toggleOnClickDisabled() {
         final ToggleImageButton button = createButtonWithAttributes();
-        assertFalse(button.toggleOnClick);
-        assertFalse(button.isToggledOn());
+        Assert.assertThat(button.toggleOnClick, is(false));
+        Assert.assertThat(button.isToggledOn(), is(false));
         button.performClick();
-        assertFalse(button.isToggledOn());
+        Assert.assertThat(button.isToggledOn(), is(false));
     }
 
     @Test
     public void testSetToggledOn_withContentDescription() {
         final ToggleImageButton button = createButtonWithAttributes();
-        assertFalse(button.isToggledOn());
-        assertEquals(CONTENT_DESCRIPTION_OFF, button.getContentDescription());
+        Assert.assertThat(button.isToggledOn(), is(false));
+        Assert.assertThat(button.getContentDescription(), is(CONTENT_DESCRIPTION_OFF));
         button.setToggledOn(true);
-        assertTrue(button.isToggledOn());
-        assertEquals(CONTENT_DESCRIPTION_ON, button.getContentDescription());
+        Assert.assertThat(button.isToggledOn(), is(true));
+        Assert.assertThat(button.getContentDescription(), is(CONTENT_DESCRIPTION_ON));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
index a5430d28..230f53d9 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
@@ -19,7 +19,9 @@
 
 import android.content.res.Resources;
 import android.text.format.DateUtils;
+
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -28,7 +30,7 @@
 
 import java.util.TimeZone;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TweetDateUtilsTest {
@@ -58,94 +60,80 @@ public void tearDown() {
 
     @Test
     public void testApiTimeToLong_jacksFirstTweet() {
-        assertEquals(JACKS_FIRST_TWEET_IN_MILLIS,
-                TweetDateUtils.apiTimeToLong("Tue Mar 21 20:50:14 +0000 2006"));
+        Assert.assertThat(TweetDateUtils.apiTimeToLong("Tue Mar 21 20:50:14 +0000 2006"), is(JACKS_FIRST_TWEET_IN_MILLIS));
     }
 
     @Test
     public void testApiTimeToLong_emptyString() {
-        assertEquals(TweetDateUtils.INVALID_DATE,
-                TweetDateUtils.apiTimeToLong(""));
+        Assert.assertThat(TweetDateUtils.apiTimeToLong(""), is(TweetDateUtils.INVALID_DATE));
     }
 
     @Test
     public void testApiTimeToLong_nullString() {
-        assertEquals(TweetDateUtils.INVALID_DATE,
-                TweetDateUtils.apiTimeToLong(null));
+        Assert.assertThat(TweetDateUtils.apiTimeToLong(null), is(TweetDateUtils.INVALID_DATE));
     }
 
     @Test
     public void testApiTimeToLong_invalidString() {
-        assertEquals(TweetDateUtils.INVALID_DATE,
-                TweetDateUtils.apiTimeToLong("11111"));
+        Assert.assertThat(TweetDateUtils.apiTimeToLong("11111"), is(TweetDateUtils.INVALID_DATE));
     }
 
     @Test
     public void testGetRelativeTimeString_now() {
-        assertEquals("0s",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, NOW_IN_MILLIS));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, NOW_IN_MILLIS), is("0s"));
     }
 
     @Test
     public void testGetRelativeTimeString_secondsAgo() {
         final long tenSecondsAgo = NOW_IN_MILLIS - DateUtils.SECOND_IN_MILLIS * 10;
-        assertEquals("10s",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, tenSecondsAgo));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, tenSecondsAgo), is("10s"));
     }
 
     @Test
     public void testGetRelativeTimeString_minutesAgo() {
         final long twoMinutesAgo = NOW_IN_MILLIS - DateUtils.MINUTE_IN_MILLIS * 2;
-        assertEquals("2m",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoMinutesAgo));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoMinutesAgo), is("2m"));
     }
 
     @Test
     public void testGetRelativeTimeString_hoursAgo() {
         final long twoHoursAgo = NOW_IN_MILLIS - DateUtils.HOUR_IN_MILLIS * 2;
-        assertEquals("2h",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoHoursAgo));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoHoursAgo), is("2h"));
     }
 
     @Test
     public void testGetRelativeTimeString_daysAgo() {
         final long twoDaysAgo = NOW_IN_MILLIS - DateUtils.DAY_IN_MILLIS * 2;
-        assertEquals("Mar 18",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoDaysAgo));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoDaysAgo), is("Mar 18"));
     }
 
     @Test
     public void testGetRelativeTimeString_lessThanAYearAgoWithinSameYear() {
         final long sixtyDaysAgo = NOW_IN_MILLIS - DateUtils.DAY_IN_MILLIS * 60;
-        assertEquals("Jan 19",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, sixtyDaysAgo));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, sixtyDaysAgo), is("Jan 19"));
     }
 
     @Test
     public void testGetRelativeTimeString_moreThanAYearAgo() {
         final long twoYearsAgo = NOW_IN_MILLIS - DateUtils.DAY_IN_MILLIS * 730;
-        assertEquals("03/20/12",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoYearsAgo));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoYearsAgo), is("03/20/12"));
     }
 
     @Test
     public void testGetRelativeTimeString_inTheFuture() {
         final long twoYearsIntoTheFuture = NOW_IN_MILLIS + DateUtils.DAY_IN_MILLIS * 730;
-        assertEquals("03/19/16",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS,
-                        twoYearsIntoTheFuture));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS,
+                twoYearsIntoTheFuture), is("03/19/16"));
     }
 
     @Test
     public void testGetRelativeTimeString_negativeTime() {
         final long wayInthePast = -DateUtils.DAY_IN_MILLIS;
-        assertEquals("12/31/69",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, wayInthePast));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, wayInthePast), is("12/31/69"));
     }
 
     @Test
     public void testGetRelativeTimeString_zeroTime() {
-        assertEquals("01/01/70",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, 0));
+        Assert.assertThat(TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, 0), is("01/01/70"));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
index c5a46000..5f92ee2a 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
@@ -49,19 +49,16 @@
 public class TweetRepositoryTest {
     private static final Long anyId = 123L;
     private static final List<Long> anyIds = new ArrayList<>();
-    private TwitterCore mockTwitterCore;
-    private TwitterApiClient mockApiClient;
     private FavoriteService mockFavoriteService;
     private StatusesService mockStatusesService;
     private SessionManager<TwitterSession> mockSessionManager;
-    private Handler mockHandler;
     private TweetRepository tweetRepository;
 
     @Before
     public void setUp() throws Exception {
         anyIds.add(anyId);
-        mockTwitterCore = mock(TwitterCore.class);
-        mockApiClient = mock(TwitterApiClient.class);
+        TwitterCore mockTwitterCore = mock(TwitterCore.class);
+        TwitterApiClient mockApiClient = mock(TwitterApiClient.class);
         mockStatusesService = mock(StatusesService.class, Mockito.RETURNS_MOCKS);
         when(mockApiClient.getStatusesService()).thenReturn(mockStatusesService);
         mockFavoriteService = mock(FavoriteService.class, Mockito.RETURNS_MOCKS);
@@ -70,7 +67,7 @@ public void setUp() throws Exception {
         when(mockTwitterCore.getApiClient()).thenReturn(mockApiClient);
         mockSessionManager = mock(SessionManager.class);
         when(mockSessionManager.getActiveSession()).thenReturn(mock(TwitterSession.class));
-        mockHandler = mock(Handler.class);
+        Handler mockHandler = mock(Handler.class);
         tweetRepository = new TweetRepository(mockHandler, mockSessionManager, mockTwitterCore);
     }
 
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetScribeClientImplTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetScribeClientImplTest.java
index 82248c9e..a399943f 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetScribeClientImplTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetScribeClientImplTest.java
@@ -20,6 +20,7 @@
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -29,8 +30,7 @@
 
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
@@ -77,12 +77,12 @@ public void testImpression() {
 
         EventNamespace ns = namespaceArgumentCaptor.getAllValues().get(0);
         assertTfwNamespaceValuesForTweets(ns);
-        assertEquals(TEST_VIEW_NAME, ns.component);
-        assertEquals(REQUIRED_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.component, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_IMPRESSION_ACTION));
         ns = namespaceArgumentCaptor.getAllValues().get(1);
         assertSyndicatedNamespaceValuesForTweets(ns);
-        assertEquals(TEST_VIEW_NAME, ns.section);
-        assertEquals(REQUIRED_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.section, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_IMPRESSION_ACTION));
 
         List<ScribeItem> items = itemsArgumentCaptor.getAllValues().get(0);
         assertItems(items);
@@ -98,7 +98,7 @@ public void testShare() {
 
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertTfwNamespaceForActions(ns);
-        assertEquals(REQUIRED_SCRIBE_SHARE_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_SHARE_ACTION));
         assertItems(itemsArgumentCaptor.getValue());
     }
 
@@ -109,7 +109,7 @@ public void testFavorite() {
         verify(tweetUi).scribe(namespaceArgumentCaptor.capture(), itemsArgumentCaptor.capture());
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertTfwNamespaceForActions(ns);
-        assertEquals(REQUIRED_SCRIBE_FAVORITE_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_FAVORITE_ACTION));
         assertItems(itemsArgumentCaptor.getValue());
     }
 
@@ -120,7 +120,7 @@ public void testUnfavorite() {
         verify(tweetUi).scribe(namespaceArgumentCaptor.capture(), itemsArgumentCaptor.capture());
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertTfwNamespaceForActions(ns);
-        assertEquals(REQUIRED_SCRIBE_UNFAVORITE_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_UNFAVORITE_ACTION));
         assertItems(itemsArgumentCaptor.getValue());
     }
 
@@ -131,8 +131,8 @@ public void testClick() {
         verify(tweetUi).scribe(namespaceArgumentCaptor.capture(), itemsArgumentCaptor.capture());
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertTfwNamespaceValuesForTweets(ns);
-        assertEquals(TEST_VIEW_NAME, ns.component);
-        assertEquals(REQUIRED_SCRIBE_CLICK_ACTION, ns.action);
+        Assert.assertThat(ns.component, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_CLICK_ACTION));
         assertItems(itemsArgumentCaptor.getValue());
     }
 
@@ -140,12 +140,12 @@ public void testClick() {
     public void testGetTfwImpressionNamespace_actionsEnabled() {
         final EventNamespace ns =
                 TweetScribeClientImpl.getTfwImpressionNamespace(TEST_VIEW_NAME, true);
-        assertEquals(REQUIRED_TFW_SCRIBE_CLIENT, ns.client);
-        assertEquals(REQUIRED_TFW_SCRIBE_PAGE, ns.page);
-        assertEquals(REQUIRED_TFW_SCRIBE_SECTION, ns.section);
-        assertEquals(REQUIRED_SCRIBE_ACTIONS_ELEMENT, ns.element);
-        assertEquals(TEST_VIEW_NAME, ns.component);
-        assertEquals(REQUIRED_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.client, is(REQUIRED_TFW_SCRIBE_CLIENT));
+        Assert.assertThat(ns.page, is(REQUIRED_TFW_SCRIBE_PAGE));
+        Assert.assertThat(ns.section, is(REQUIRED_TFW_SCRIBE_SECTION));
+        Assert.assertThat(ns.element, is(REQUIRED_SCRIBE_ACTIONS_ELEMENT));
+        Assert.assertThat(ns.component, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_IMPRESSION_ACTION));
     }
 
     @Test
@@ -153,8 +153,8 @@ public void testGetTfwImpressionNamespace_actionsDisabled() {
         final EventNamespace ns =
                 TweetScribeClientImpl.getTfwImpressionNamespace(TEST_VIEW_NAME, false);
         assertTfwNamespaceValuesForTweets(ns);
-        assertEquals(TEST_VIEW_NAME, ns.component);
-        assertEquals(REQUIRED_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.component, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_IMPRESSION_ACTION));
     }
 
     @Test
@@ -162,8 +162,8 @@ public void testGetSyndicatedImpressionNamespace() {
         final EventNamespace ns =
                 TweetScribeClientImpl.getSyndicatedImpressionNamespace(TEST_VIEW_NAME);
         assertSyndicatedNamespaceValuesForTweets(ns);
-        assertEquals(TEST_VIEW_NAME, ns.section);
-        assertEquals(REQUIRED_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.section, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_IMPRESSION_ACTION));
     }
 
     @Test
@@ -171,56 +171,56 @@ public void testGetTfwClickNamespace() {
         final EventNamespace ns = TweetScribeClientImpl.getTfwClickNamespace(TEST_VIEW_NAME);
 
         assertTfwNamespaceValuesForTweets(ns);
-        assertEquals(TEST_VIEW_NAME, ns.component);
-        assertEquals(REQUIRED_SCRIBE_CLICK_ACTION, ns.action);
+        Assert.assertThat(ns.component, is(TEST_VIEW_NAME));
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_CLICK_ACTION));
     }
 
     @Test
     public void testGetTfwFavoriteNamespace() {
         final EventNamespace ns = TweetScribeClientImpl.getTfwFavoriteNamespace();
         assertTfwNamespaceForActions(ns);
-        assertEquals(REQUIRED_SCRIBE_FAVORITE_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_FAVORITE_ACTION));
     }
 
     @Test
     public void testGetTfwUnfavoriteNamespace() {
         final EventNamespace ns = TweetScribeClientImpl.getTfwUnfavoriteNamespace();
         assertTfwNamespaceForActions(ns);
-        assertEquals(REQUIRED_SCRIBE_UNFAVORITE_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_UNFAVORITE_ACTION));
     }
 
     @Test
     public void testGetTfwShareNamespace() {
         final EventNamespace ns = TweetScribeClientImpl.getTfwShareNamespace();
         assertTfwNamespaceForActions(ns);
-        assertEquals(REQUIRED_SCRIBE_SHARE_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(REQUIRED_SCRIBE_SHARE_ACTION));
     }
 
     static void assertItems(List<ScribeItem> items) {
-        assertNotNull(items);
-        assertEquals(1, items.size());
-        assertEquals(TestFixtures.TEST_TWEET.id, items.get(0).id.longValue());
-        assertEquals(ScribeItem.TYPE_TWEET, items.get(0).itemType.intValue());
+        Assert.assertThat(items, notNullValue());
+        Assert.assertThat(items.size(), is(1));
+        Assert.assertThat(items.get(0).getId().longValue(), is(TestFixtures.TEST_TWEET.getId()));
+        Assert.assertThat(items.get(0).getItemType().intValue(), is(ScribeItem.TYPE_TWEET));
     }
 
     static void assertTfwNamespaceForActions(EventNamespace ns) {
-        assertEquals(REQUIRED_TFW_SCRIBE_CLIENT, ns.client);
-        assertEquals(REQUIRED_TFW_SCRIBE_PAGE, ns.page);
-        assertEquals(REQUIRED_TFW_SCRIBE_SECTION, ns.section);
-        assertEquals(REQUIRED_SCRIBE_ACTIONS_ELEMENT, ns.element);
+        Assert.assertThat(ns.client, is(REQUIRED_TFW_SCRIBE_CLIENT));
+        Assert.assertThat(ns.page, is(REQUIRED_TFW_SCRIBE_PAGE));
+        Assert.assertThat(ns.section, is(REQUIRED_TFW_SCRIBE_SECTION));
+        Assert.assertThat(ns.element, is(REQUIRED_SCRIBE_ACTIONS_ELEMENT));
     }
 
     static void assertTfwNamespaceValuesForTweets(EventNamespace ns) {
-        assertEquals(REQUIRED_TFW_SCRIBE_CLIENT, ns.client);
-        assertEquals(REQUIRED_TFW_SCRIBE_PAGE, ns.page);
-        assertEquals(REQUIRED_TFW_SCRIBE_SECTION, ns.section);
-        assertEquals(REQUIRED_TFW_SCRIBE_ELEMENT, ns.element);
+        Assert.assertThat(ns.client, is(REQUIRED_TFW_SCRIBE_CLIENT));
+        Assert.assertThat(ns.page, is(REQUIRED_TFW_SCRIBE_PAGE));
+        Assert.assertThat(ns.section, is(REQUIRED_TFW_SCRIBE_SECTION));
+        Assert.assertThat(ns.element, is(REQUIRED_TFW_SCRIBE_ELEMENT));
     }
 
     static void assertSyndicatedNamespaceValuesForTweets(EventNamespace ns) {
-        assertEquals(REQUIRED_SDK_SCRIBE_CLIENT, ns.client);
-        assertEquals(REQUIRED_SDK_SCRIBE_PAGE, ns.page);
-        assertEquals(REQUIRED_SDK_SCRIBE_COMPONENT, ns.component);
-        assertEquals(REQUIRED_SDK_SCRIBE_ELEMENT, ns.element);
+        Assert.assertThat(ns.client, is(REQUIRED_SDK_SCRIBE_CLIENT));
+        Assert.assertThat(ns.page, is(REQUIRED_SDK_SCRIBE_PAGE));
+        Assert.assertThat(ns.component, is(REQUIRED_SDK_SCRIBE_COMPONENT));
+        Assert.assertThat(ns.element, is(REQUIRED_SDK_SCRIBE_ELEMENT));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
deleted file mode 100644
index 7a0ba4d9..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
+++ /dev/null
@@ -1,390 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.text.SpannableStringBuilder;
-import android.text.style.ClickableSpan;
-
-import com.twitter.sdk.android.core.models.HashtagEntity;
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.MentionEntity;
-import com.twitter.sdk.android.core.models.SymbolEntity;
-import com.twitter.sdk.android.core.models.UrlEntity;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotEquals;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetTextLinkifierTest {
-    static final String BASE_TEXT = "just setting up my twttr";
-    static final String TEST_RLT_STRING = "ייִדיש משלי https://t.co/sfb4Id7esk\u200E";
-
-    @Test
-    public void testLinkifyUrls_nullFormattedTweetText() {
-        try {
-            TweetTextLinkifier.linkifyUrls(null, null, 0, 0, true, true);
-        } catch (Exception e) {
-            fail("threw unexpected exception");
-        }
-    }
-
-    @Test
-    public void testLinkifyUrls_newFormattedTweetText() {
-        try {
-            TweetTextLinkifier.linkifyUrls(new FormattedTweetText(), null, 0, 0, true, true);
-        } catch (Exception e) {
-            fail("threw unexpected exception");
-        }
-    }
-
-    @Test
-    public void testLinkifyUrls_oneUrlEntity() {
-        final String url = "http://t.co/foo";
-        final String displayUrl = "dev.twitter.com";
-        final String fullText = BASE_TEXT + " " + "http://t.co/foo";
-        final UrlEntity urlEntity
-                = EntityFactory.newUrlEntity(fullText, url, displayUrl);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(urlEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        final String displayUrlFromEntity =
-                linkifiedText.subSequence(urlEntity.getStart(), urlEntity.getEnd()).toString();
-        assertEquals(urlEntity.displayUrl, displayUrlFromEntity);
-    }
-
-    @Test
-    public void testLinkifyUrls_oneInvalidUrlEntity() {
-        final String fullText = "";
-        final UrlEntity urlEntity = new UrlEntity("x z", "y", "z", -1, 30);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getUrlEntities().add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        assertEquals("", linkifiedText.toString());
-    }
-
-    @Test
-    public void testLinkifyUrls_linkClickListener() {
-        final String url = "http://t.co/foo";
-        final String displayUrl = "dev.twitter.com";
-        final String fullText = BASE_TEXT + " " + "http://t.co/foo";
-
-        final LinkClickListener mockClickListener = mock(LinkClickListener.class);
-
-        final UrlEntity urlEntity =
-                EntityFactory.newUrlEntity(fullText, url, displayUrl);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(urlEntity));
-
-        final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
-                        true);
-        final ClickableSpan[] clickables =
-                linkifiedText.getSpans(urlEntity.getStart(), urlEntity.getEnd(),
-                        ClickableSpan.class);
-        assertEquals(1, clickables.length);
-    }
-
-    @Test
-    public void testLinkifyHashtags_oneHashtagEntity() {
-        final String hashtag = "TwitterForGood";
-        final String fullHashtag = "#" + hashtag;
-        final String fullText = BASE_TEXT + " " + fullHashtag;
-        final HashtagEntity hashtagEntity = EntityFactory.newHashtagEntity(fullText, hashtag);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getHashtagEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
-                hashtagEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        final String displayUrlFromEntity = linkifiedText.subSequence(hashtagEntity.getStart(),
-                        hashtagEntity.getEnd()).toString();
-        assertEquals(fullHashtag, displayUrlFromEntity);
-    }
-
-    @Test
-    public void testLinkifyHashtags_linkClickListener() {
-        final String hashtag = "TwitterForGood";
-        final String fullText = BASE_TEXT + " #" + hashtag;
-
-        final LinkClickListener mockClickListener = mock(LinkClickListener.class);
-
-        final HashtagEntity hashtagEntity = EntityFactory.newHashtagEntity(fullText, hashtag);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getHashtagEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
-                hashtagEntity));
-
-        final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
-                        true);
-        final ClickableSpan[] clickables =
-                linkifiedText.getSpans(hashtagEntity.getStart(), hashtagEntity.getEnd(),
-                        ClickableSpan.class);
-        assertEquals(1, clickables.length);
-    }
-
-    @Test
-    public void testLinkifyMentions_oneMentionEntity() {
-        final String mention = "TwitterDev";
-        final String fullMention = "@" + mention;
-        final String fullText = BASE_TEXT + " " + fullMention;
-        final MentionEntity mentionEntity = EntityFactory.newMentionEntity(fullText, mention);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getMentionEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
-                mentionEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        final String displayUrlFromEntity = linkifiedText.subSequence(mentionEntity.getStart(),
-                mentionEntity.getEnd()).toString();
-        assertEquals(fullMention, displayUrlFromEntity);
-    }
-
-    @Test
-    public void testLinkifyMentions_linkClickListener() {
-        final String mention = "TwitterDev";
-        final String fullText = BASE_TEXT + " @" + mention;
-
-        final LinkClickListener mockClickListener = mock(LinkClickListener.class);
-
-        final MentionEntity mentionEntity = EntityFactory.newMentionEntity(fullText, mention);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getMentionEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
-                mentionEntity));
-
-        final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
-                        true);
-        final ClickableSpan[] clickables =
-                linkifiedText.getSpans(mentionEntity.getStart(), mentionEntity.getEnd(),
-                        ClickableSpan.class);
-        assertEquals(1, clickables.length);
-    }
-
-    @Test
-    public void testLinkifySymbols_oneSymbolEntity() {
-        final String symbol = "TWTR";
-        final String fullSymbol = "$" + symbol;
-        final String fullText = BASE_TEXT + " " + fullSymbol;
-        final SymbolEntity symbolEntity = EntityFactory.newSymbolEntity(fullText, symbol);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getSymbolEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
-                symbolEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        final String displayUrlFromEntity = linkifiedText.subSequence(symbolEntity.getStart(),
-                symbolEntity.getEnd()).toString();
-        assertEquals(fullSymbol, displayUrlFromEntity);
-    }
-
-    @Test
-    public void testLinkifySymbols_linkClickListener() {
-        final String symbol = "TWTR";
-        final String fullText = BASE_TEXT + " $" + symbol;
-
-        final LinkClickListener mockClickListener = mock(LinkClickListener.class);
-
-        final SymbolEntity symbolEntity = EntityFactory.newSymbolEntity(fullText, symbol);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(fullText);
-        formattedText.getSymbolEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
-                symbolEntity));
-
-        final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
-                        true);
-        final ClickableSpan[] clickables =
-                linkifiedText.getSpans(symbolEntity.getStart(), symbolEntity.getEnd(),
-                        ClickableSpan.class);
-        assertEquals(1, clickables.length);
-    }
-
-    @Test
-    public void testLinkifyUrls_verifyPhotoOnlyStrippedFromEnd() {
-        final FormattedTweetText formattedText = setupPicTwitterEntities();
-        final FormattedMediaEntity lastPhotoUrl = formattedText.getMediaEntities().get(0);
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-
-        // make sure we are stripping out a photo entity since it is the only media entity
-        // that we can render inline
-        assertEquals("photo", lastPhotoUrl.type);
-        // assert that we do not strip it here and display it in the middle
-        assertTrue(linkifiedText.toString().contains(lastPhotoUrl.getDisplayUrl()));
-    }
-
-    @Test
-    public void testGetEntityToStrip_withLtrMarker() {
-        final String result = TweetTextLinkifier.stripLtrMarker(TEST_RLT_STRING);
-
-        assertNotEquals(TEST_RLT_STRING, result);
-        assertFalse(result.endsWith(Character.toString('\u200E')));
-    }
-
-    @Test
-    public void testGetEntityToStrip_withoutLtrMarker() {
-        final String result = TweetTextLinkifier.stripLtrMarker(BASE_TEXT);
-
-        assertEquals(BASE_TEXT, result);
-        assertFalse(result.endsWith(Character.toString('\u200E')));
-    }
-
-    @Test
-    public void testIsPhotoEntity_withPhotoUrl() {
-        final MediaEntity mediaEntity = new MediaEntity("http://t.co/PFHCdlr4i0", null,
-                "pic.twitter.com/abc", 27, 49, 0L, null, null, null, null, 0L, null, "photo", null,
-                "");
-        final FormattedUrlEntity formattedUrlEntity = new FormattedMediaEntity(mediaEntity);
-
-        assertTrue(TweetTextLinkifier.isPhotoEntity(formattedUrlEntity));
-    }
-
-    @Test
-    public void testIsQuotedStatus_withQuotedStatusUrl() {
-        final UrlEntity urlEntity = new UrlEntity("https://t.co/kMXdOEnVMg",
-                "https://twitter.com/nasajpl/status/634475698174865408",
-                "twitter.com/nasajpl/status\u2026", 50, 72);
-        final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(urlEntity.getStart(),
-                urlEntity.getEnd(), urlEntity.displayUrl, urlEntity.url, urlEntity.expandedUrl);
-        assertTrue(TweetTextLinkifier.isQuotedStatus(formattedUrlEntity));
-    }
-
-    @Test
-    public void testIsVineCard_withVineUrl() {
-        final UrlEntity urlEntity = new UrlEntity("https://t.co/NdpqweoNbi",
-                "https://vine.co/v/eVmZVXbeDK1", "vine.co/v/eVmZVXbeDK1", 1, 23);
-        final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(urlEntity.getStart(),
-                urlEntity.getEnd(), urlEntity.displayUrl, urlEntity.url, urlEntity.expandedUrl);
-
-        assertTrue(TweetTextLinkifier.isVineCard(formattedUrlEntity));
-    }
-
-    private FormattedTweetText setupPicTwitterEntities() {
-        final String text = "first link is a pictwitter http://t.co/PFHCdlr4i0 " +
-                "http://t.co/V3hLRdFdeN final text";
-
-        final MediaEntity mediaEntity = new MediaEntity("http://t.co/PFHCdlr4i0", null,
-                "pic.twitter.com/abc", 27, 49, 0L, null, null, null, null, 0L, null, "photo", null,
-                "");
-
-        final UrlEntity urlEntity = new UrlEntity("http://t.co/V3hLRdFdeN", null, "example.com", 50,
-                72);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.setText(text);
-        formattedText.getUrlEntities().add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
-        formattedText.getMediaEntities().add(new FormattedMediaEntity(mediaEntity));
-
-        return formattedText;
-    }
-
-    @Test
-    public void testTrimEnd_withoutTrailingSpace() {
-        assertSame(BASE_TEXT, TweetTextLinkifier.trimEnd(BASE_TEXT));
-    }
-
-    @Test
-    public void testTrimEnd_withTrailingSpace() {
-        final CharSequence result = TweetTextLinkifier.trimEnd(BASE_TEXT + "\n\r\t ");
-        assertEquals(BASE_TEXT, result);
-        assertNotSame(BASE_TEXT, result);
-    }
-
-    /*
-     * mergeAndSortEntities method
-     */
-    @Test
-    public void testMergeAndSortEntities_emptyEntities() {
-        final List<FormattedUrlEntity> urls = new ArrayList<>();
-        final List<FormattedMediaEntity> media = new ArrayList<>();
-        final List<FormattedUrlEntity> hashtags = new ArrayList<>();
-        final List<FormattedUrlEntity> mentions = new ArrayList<>();
-        final List<FormattedUrlEntity> symbols = new ArrayList<>();
-        assertEquals(urls, TweetTextLinkifier.mergeAndSortEntities(urls, media, hashtags,
-                mentions, symbols));
-    }
-
-    @Test
-    public void testMergeAndSortEntities_sortUrlsAndMediaAndHashtags() {
-        final List<FormattedUrlEntity> urls = new ArrayList<>();
-        final UrlEntity urlEntity = TestFixtures.newUrlEntity(2, 5);
-        final FormattedUrlEntity adjustedUrl = FormattedUrlEntity.Companion.createFormattedUrlEntity(
-                urlEntity);
-        urls.add(adjustedUrl);
-
-        final List<FormattedMediaEntity> media = new ArrayList<>();
-        final MediaEntity photo = TestFixtures.newMediaEntity(1, 5, "photo");
-        final FormattedMediaEntity adjustedPhoto = new FormattedMediaEntity(photo);
-        media.add(adjustedPhoto);
-
-        final List<FormattedUrlEntity> hashtags = new ArrayList<>();
-        final HashtagEntity hashtag = TestFixtures.newHashtagEntity("TwitterForGood", 0, 13);
-        final FormattedUrlEntity adjustedHashtag =
-                FormattedUrlEntity.Companion.createFormattedUrlEntity(hashtag);
-        hashtags.add(adjustedHashtag);
-
-        final List<FormattedUrlEntity> mentions = new ArrayList<>();
-        final MentionEntity mention = TestFixtures.newMentionEntity("twitterdev", 0, 9);
-        final FormattedUrlEntity adjustedMention =
-                FormattedUrlEntity.Companion.createFormattedUrlEntity(mention);
-        mentions.add(adjustedMention);
-
-        final List<FormattedUrlEntity> symbols = new ArrayList<>();
-        final SymbolEntity symbol = TestFixtures.newSymbolEntity("TWTR", 0, 3);
-        final FormattedUrlEntity adjustedSymbol =
-                FormattedUrlEntity.Companion.createFormattedUrlEntity(symbol);
-        symbols.add(adjustedSymbol);
-
-        final List<? extends FormattedUrlEntity> combined
-                = TweetTextLinkifier.mergeAndSortEntities(urls, media, hashtags, mentions, symbols);
-        assertEquals(adjustedPhoto, combined.get(3));
-        assertEquals(adjustedUrl, combined.get(4));
-        assertEquals(adjustedHashtag, combined.get(0));
-        assertEquals(adjustedMention, combined.get(1));
-        assertEquals(adjustedSymbol, combined.get(2));
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.kt b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.kt
new file mode 100644
index 00000000..5a6da88f
--- /dev/null
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.kt
@@ -0,0 +1,380 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui
+
+import android.text.SpannableStringBuilder
+import android.text.style.ClickableSpan
+import com.twitter.sdk.android.core.models.MediaEntity
+import com.twitter.sdk.android.core.models.UrlEntity
+import org.hamcrest.Matchers.*
+import org.junit.Assert.assertThat
+import org.junit.Assert.fail
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.mockito.Mockito.mock
+import org.robolectric.RobolectricTestRunner
+import java.util.*
+
+@RunWith(RobolectricTestRunner::class)
+class TweetTextLinkifierTest {
+
+    @Test
+    fun testLinkifyUrls_nullFormattedTweetText() {
+        try {
+            TweetTextLinkifier.linkifyUrls(null, null, 0, 0, true, true)
+        } catch (e: Exception) {
+            fail("threw unexpected exception")
+        }
+
+    }
+
+    @Test
+    fun testLinkifyUrls_newFormattedTweetText() {
+        try {
+            TweetTextLinkifier.linkifyUrls(FormattedTweetText(), null, 0, 0, true, true)
+        } catch (e: Exception) {
+            fail("threw unexpected exception")
+        }
+
+    }
+
+    @Test
+    fun testLinkifyUrls_oneUrlEntity() {
+        val url = "http://t.co/foo"
+        val displayUrl = "dev.twitter.com"
+        val fullText = "$BASE_TEXT http://t.co/foo"
+        val urlEntity = EntityFactory.newUrlEntity(fullText, url, displayUrl)
+
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true)
+        val displayUrlFromEntity = linkifiedText!!.subSequence(urlEntity.start, urlEntity.end).toString()
+        assertThat(displayUrlFromEntity, `is`(urlEntity.displayUrl))
+    }
+
+    @Test
+    fun testLinkifyUrls_oneInvalidUrlEntity() {
+        val fullText = ""
+        val urlEntity = UrlEntity("x z", "y", "z", -1, 30)
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true)
+        assertThat(linkifiedText!!.toString(), `is`(""))
+    }
+
+    @Test
+    fun testLinkifyUrls_linkClickListener() {
+        val url = "http://t.co/foo"
+        val displayUrl = "dev.twitter.com"
+        val fullText = "$BASE_TEXT http://t.co/foo"
+
+        val mockClickListener = mock(LinkClickListener::class.java)
+
+        val urlEntity = EntityFactory.newUrlEntity(fullText, url, displayUrl)
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
+                true) as SpannableStringBuilder?
+        val clickables = linkifiedText!!.getSpans(urlEntity.start, urlEntity.end,
+                ClickableSpan::class.java)
+        assertThat(clickables.size, `is`(1))
+    }
+
+    @Test
+    fun testLinkifyHashtags_oneHashtagEntity() {
+        val hashtag = "TwitterForGood"
+        val fullHashtag = "#$hashtag"
+        val fullText = "$BASE_TEXT $fullHashtag"
+        val hashtagEntity = EntityFactory.newHashtagEntity(fullText, hashtag)
+
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.hashtagEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+                hashtagEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true)
+        val displayUrlFromEntity = linkifiedText!!.subSequence(hashtagEntity.start,
+                hashtagEntity.end).toString()
+        assertThat(displayUrlFromEntity, `is`(fullHashtag))
+    }
+
+    @Test
+    fun testLinkifyHashtags_linkClickListener() {
+        val hashtag = "TwitterForGood"
+        val fullText = "$BASE_TEXT #$hashtag"
+
+        val mockClickListener = mock(LinkClickListener::class.java)
+
+        val hashtagEntity = EntityFactory.newHashtagEntity(fullText, hashtag)
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.hashtagEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+                hashtagEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
+                true) as SpannableStringBuilder?
+        val clickables = linkifiedText!!.getSpans(hashtagEntity.start, hashtagEntity.end,
+                ClickableSpan::class.java)
+        assertThat(clickables.size, `is`(1))
+    }
+
+    @Test
+    fun testLinkifyMentions_oneMentionEntity() {
+        val mention = "TwitterDev"
+        val fullMention = "@$mention"
+        val fullText = "$BASE_TEXT $fullMention"
+        val mentionEntity = EntityFactory.newMentionEntity(fullText, mention)
+
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.mentionEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+                mentionEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true)
+        val displayUrlFromEntity = linkifiedText!!.subSequence(mentionEntity.start,
+                mentionEntity.end).toString()
+        assertThat(displayUrlFromEntity, `is`(fullMention))
+    }
+
+    @Test
+    fun testLinkifyMentions_linkClickListener() {
+        val mention = "TwitterDev"
+        val fullText = "$BASE_TEXT @$mention"
+
+        val mockClickListener = mock(LinkClickListener::class.java)
+
+        val mentionEntity = EntityFactory.newMentionEntity(fullText, mention)
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.mentionEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+                mentionEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
+                true) as SpannableStringBuilder?
+        val clickables = linkifiedText!!.getSpans(mentionEntity.start, mentionEntity.end,
+                ClickableSpan::class.java)
+        assertThat(clickables.size, `is`(1))
+    }
+
+    @Test
+    fun testLinkifySymbols_oneSymbolEntity() {
+        val symbol = "TWTR"
+        val fullSymbol = "$$symbol"
+        val fullText = "$BASE_TEXT $fullSymbol"
+        val symbolEntity = EntityFactory.newSymbolEntity(fullText, symbol)
+
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.symbolEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+                symbolEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true)
+        val displayUrlFromEntity = linkifiedText!!.subSequence(symbolEntity.start,
+                symbolEntity.end).toString()
+        assertThat(displayUrlFromEntity, `is`(fullSymbol))
+    }
+
+    @Test
+    fun testLinkifySymbols_linkClickListener() {
+        val symbol = "TWTR"
+        val fullText = "$BASE_TEXT $$symbol"
+
+        val mockClickListener = mock(LinkClickListener::class.java)
+
+        val symbolEntity = EntityFactory.newSymbolEntity(fullText, symbol)
+        val formattedText = FormattedTweetText()
+        formattedText.text = fullText
+        formattedText.symbolEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+                symbolEntity))
+
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
+                true) as SpannableStringBuilder?
+        val clickables = linkifiedText!!.getSpans(symbolEntity.start, symbolEntity.end,
+                ClickableSpan::class.java)
+        assertThat(clickables.size, `is`(1))
+    }
+
+    @Test
+    fun testLinkifyUrls_verifyPhotoOnlyStrippedFromEnd() {
+        val formattedText = setupPicTwitterEntities()
+        val lastPhotoUrl = formattedText.mediaEntities[0]
+        val linkifiedText = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true)
+
+        // make sure we are stripping out a photo entity since it is the only media entity
+        // that we can render inline
+        assertThat(lastPhotoUrl.type, `is`("photo"))
+        // assert that we do not strip it here and display it in the middle
+        assertThat(linkifiedText!!.toString(), containsString(lastPhotoUrl.displayUrl))
+    }
+
+    @Test
+    fun testGetEntityToStrip_withLtrMarker() {
+        val result = TweetTextLinkifier.stripLtrMarker(TEST_RLT_STRING)
+
+        assertThat(result, not(`is`(TEST_RLT_STRING)))
+        assertThat(result.endsWith(Character.toString('\u200E')), `is`(false))
+    }
+
+    @Test
+    fun testGetEntityToStrip_withoutLtrMarker() {
+        val result = TweetTextLinkifier.stripLtrMarker(BASE_TEXT)
+
+        assertThat(result, `is`(BASE_TEXT))
+        assertThat(result.endsWith(Character.toString('\u200E')), `is`(false))
+    }
+
+    @Test
+    fun testIsPhotoEntity_withPhotoUrl() {
+        val mediaEntity = MediaEntity("http://t.co/PFHCdlr4i0", null,
+                "pic.twitter.com/abc", 27, 49, 0L, null, null, null, null, 0L, null, "photo", null,
+                "")
+        val formattedUrlEntity = FormattedMediaEntity(mediaEntity)
+
+        assertThat(TweetTextLinkifier.isPhotoEntity(formattedUrlEntity), `is`(true))
+    }
+
+    @Test
+    fun testIsQuotedStatus_withQuotedStatusUrl() {
+        val urlEntity = UrlEntity("https://t.co/kMXdOEnVMg",
+                "https://twitter.com/nasajpl/status/634475698174865408",
+                "twitter.com/nasajpl/status\u2026", 50, 72)
+        val formattedUrlEntity = FormattedUrlEntity(urlEntity.start,
+                urlEntity.end, urlEntity.displayUrl, urlEntity.url, urlEntity.expandedUrl)
+        assertThat(TweetTextLinkifier.isQuotedStatus(formattedUrlEntity), `is`(true))
+    }
+
+    @Test
+    fun testIsVineCard_withVineUrl() {
+        val urlEntity = UrlEntity("https://t.co/NdpqweoNbi",
+                "https://vine.co/v/eVmZVXbeDK1", "vine.co/v/eVmZVXbeDK1", 1, 23)
+        val formattedUrlEntity = FormattedUrlEntity(urlEntity.start,
+                urlEntity.end, urlEntity.displayUrl, urlEntity.url, urlEntity.expandedUrl)
+
+        assertThat(TweetTextLinkifier.isVineCard(formattedUrlEntity), `is`(true))
+    }
+
+    private fun setupPicTwitterEntities(): FormattedTweetText {
+        val text = "first link is a pictwitter http://t.co/PFHCdlr4i0 " + "http://t.co/V3hLRdFdeN final text"
+
+        val mediaEntity = MediaEntity(
+                "http://t.co/PFHCdlr4i0",
+                null,
+                "pic.twitter.com/abc",
+                27,
+                49,
+                0L,
+                null,
+                null,
+                null,
+                null,
+                0L,
+                null,
+                "photo",
+                null,
+                ""
+        )
+
+        val urlEntity = UrlEntity(
+                "http://t.co/V3hLRdFdeN",
+                null,
+                "example.com",
+                50,
+                72
+        )
+
+        val formattedText = FormattedTweetText()
+        formattedText.text = text
+        formattedText.urlEntities += FormattedUrlEntity.createFormattedUrlEntity(urlEntity)
+        formattedText.mediaEntities += FormattedMediaEntity(mediaEntity)
+
+        return formattedText
+    }
+
+    @Test
+    fun testTrimEnd_withoutTrailingSpace() {
+        assertThat(TweetTextLinkifier.trimEnd(BASE_TEXT), sameInstance<CharSequence>(BASE_TEXT))
+    }
+
+    @Test
+    fun testTrimEnd_withTrailingSpace() {
+        val result = TweetTextLinkifier.trimEnd("$BASE_TEXT\n\r\t ")
+        assertThat(result, `is`<CharSequence>(BASE_TEXT))
+        assertThat(result, not(sameInstance<CharSequence>(BASE_TEXT)))
+    }
+
+    /*
+     * mergeAndSortEntities method
+     */
+    @Test
+    fun testMergeAndSortEntities_emptyEntities() {
+        val urls = ArrayList<FormattedUrlEntity>()
+        val media = ArrayList<FormattedMediaEntity>()
+        val hashtags = ArrayList<FormattedUrlEntity>()
+        val mentions = ArrayList<FormattedUrlEntity>()
+        val symbols = ArrayList<FormattedUrlEntity>()
+        assertThat(TweetTextLinkifier.mergeAndSortEntities(urls, media, hashtags,
+                mentions, symbols), `is`<List<FormattedUrlEntity>>(urls))
+    }
+
+    @Test
+    fun testMergeAndSortEntities_sortUrlsAndMediaAndHashtags() {
+        val urls = ArrayList<FormattedUrlEntity>()
+        val urlEntity = TestFixtures.newUrlEntity(2, 5)
+        val adjustedUrl = FormattedUrlEntity.createFormattedUrlEntity(
+                urlEntity)
+        urls.add(adjustedUrl)
+
+        val media = ArrayList<FormattedMediaEntity>()
+        val photo = TestFixtures.newMediaEntity(1, 5, "photo")
+        val adjustedPhoto = FormattedMediaEntity(photo)
+        media.add(adjustedPhoto)
+
+        val hashtags = ArrayList<FormattedUrlEntity>()
+        val hashtag = TestFixtures.newHashtagEntity("TwitterForGood", 0, 13)
+        val adjustedHashtag = FormattedUrlEntity.createFormattedUrlEntity(hashtag)
+        hashtags.add(adjustedHashtag)
+
+        val mentions = ArrayList<FormattedUrlEntity>()
+        val mention = TestFixtures.newMentionEntity("twitterdev", 0, 9)
+        val adjustedMention = FormattedUrlEntity.createFormattedUrlEntity(mention)
+        mentions.add(adjustedMention)
+
+        val symbols = ArrayList<FormattedUrlEntity>()
+        val symbol = TestFixtures.newSymbolEntity("TWTR", 0, 3)
+        val adjustedSymbol = FormattedUrlEntity.createFormattedUrlEntity(symbol)
+        symbols.add(adjustedSymbol)
+
+        val combined = TweetTextLinkifier.mergeAndSortEntities(urls, media, hashtags, mentions, symbols)
+        assertThat(combined[3], `is`<FormattedUrlEntity>(adjustedPhoto))
+        assertThat(combined[4], `is`(adjustedUrl))
+        assertThat(combined[0], `is`(adjustedHashtag))
+        assertThat(combined[1], `is`(adjustedMention))
+        assertThat(combined[2], `is`(adjustedSymbol))
+    }
+
+    companion object {
+        private const val BASE_TEXT = "just setting up my twttr"
+        private const val TEST_RLT_STRING = "ייִדיש משלי https://t.co/sfb4Id7esk\u200E"
+    }
+}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java
index 1c38a888..a39adb59 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java
@@ -21,11 +21,12 @@
 import com.twitter.sdk.android.core.models.TweetBuilder;
 import com.twitter.sdk.android.core.models.UrlEntity;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TweetTextUtilsTest {
@@ -44,20 +45,20 @@ public void testFormat_singleEscaping() {
         final Tweet tweet = setupTweetToBeFormatted();
         TweetTextUtils.format(formattedTweetText, tweet);
 
-        assertEquals(UNESCAPED_TWEET_TEXT, formattedTweetText.getText());
-        assertEquals("Hello", 1, formattedTweetText.getUrlEntities().get(0).getStart());
-        assertEquals("Hello", 5, formattedTweetText.getUrlEntities().get(0).getEnd());
-        assertEquals("There", 7, formattedTweetText.getUrlEntities().get(1).getStart());
-        assertEquals("There", 11, formattedTweetText.getUrlEntities().get(1).getEnd());
+        Assert.assertThat(formattedTweetText.getText(), is(UNESCAPED_TWEET_TEXT));
+        Assert.assertThat("Hello", formattedTweetText.getUrlEntities().get(0).getStart(), is(1));
+        Assert.assertThat("Hello", formattedTweetText.getUrlEntities().get(0).getEnd(), is(5));
+        Assert.assertThat("There", formattedTweetText.getUrlEntities().get(1).getStart(), is(7));
+        Assert.assertThat("There", formattedTweetText.getUrlEntities().get(1).getEnd(), is(11));
 
-        assertEquals("What", 15, formattedTweetText.getUrlEntities().get(2).getStart());
-        assertEquals("What", 18, formattedTweetText.getUrlEntities().get(2).getEnd());
+        Assert.assertThat("What", formattedTweetText.getUrlEntities().get(2).getStart(), is(15));
+        Assert.assertThat("What", formattedTweetText.getUrlEntities().get(2).getEnd(), is(18));
 
-        assertEquals("is", 20, formattedTweetText.getUrlEntities().get(3).getStart());
-        assertEquals("is", 21, formattedTweetText.getUrlEntities().get(3).getEnd());
+        Assert.assertThat("is", formattedTweetText.getUrlEntities().get(3).getStart(), is(20));
+        Assert.assertThat("is", formattedTweetText.getUrlEntities().get(3).getEnd(), is(21));
 
-        assertEquals("a", 23, formattedTweetText.getUrlEntities().get(4).getStart());
-        assertEquals("a", 23, formattedTweetText.getUrlEntities().get(4).getEnd());
+        Assert.assertThat("a", formattedTweetText.getUrlEntities().get(4).getStart(), is(23));
+        Assert.assertThat("a", formattedTweetText.getUrlEntities().get(4).getEnd(), is(23));
     }
 
     @Test
@@ -66,35 +67,35 @@ public void testFormat_htmlEntityEdgeCases() {
 
         Tweet tweet = new TweetBuilder().setText("&amp;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&", formattedTweetText.getText());
+        Assert.assertThat(formattedTweetText.getText(), is("&"));
 
         tweet = new TweetBuilder().setText("&#;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&#;", formattedTweetText.getText());
+        Assert.assertThat(formattedTweetText.getText(), is("&#;"));
 
         tweet = new TweetBuilder().setText("&#34;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("\"", formattedTweetText.getText());
+        Assert.assertThat(formattedTweetText.getText(), is("\""));
 
         tweet = new TweetBuilder().setText("&#x22;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("\"", formattedTweetText.getText());
+        Assert.assertThat(formattedTweetText.getText(), is("\""));
 
         tweet = new TweetBuilder().setText("&lt; & Larry &gt; &").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("< & Larry > &", formattedTweetText.getText());
+        Assert.assertThat(formattedTweetText.getText(), is("< & Larry > &"));
 
         tweet = new TweetBuilder().setText("&&amp;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&", formattedTweetText.getText());
+        Assert.assertThat(formattedTweetText.getText(), is("&&"));
 
         tweet = new TweetBuilder().setText("&&&&&&&&amp;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&&&&&&&", formattedTweetText.getText());
+        Assert.assertThat(formattedTweetText.getText(), is("&&&&&&&&"));
 
         tweet = new TweetBuilder().setText("&&&&gt&&lt&&amplt;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&&&gt&&lt&&amplt;", formattedTweetText.getText());
+        Assert.assertThat(formattedTweetText.getText(), is("&&&&gt&&lt&&amplt;"));
     }
 
     @Test
@@ -108,8 +109,8 @@ public void testFormat_withEmojiAndEscapedHtml() {
                 .build();
         TweetTextUtils.format(formattedTweetText, tweet);
 
-        assertEquals(24, formattedTweetText.getUrlEntities().get(0).getStart());
-        assertEquals(47, formattedTweetText.getUrlEntities().get(0).getEnd());
+        Assert.assertThat(formattedTweetText.getUrlEntities().get(0).getStart(), is(24));
+        Assert.assertThat(formattedTweetText.getUrlEntities().get(0).getEnd(), is(47));
     }
 
     private Tweet setupTweetToBeFormatted() {
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java
index 67075aac..acda0121 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java
@@ -21,13 +21,11 @@
 import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.services.ListService;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -63,12 +61,12 @@ public void setUp() {
     public void testConstructor() {
         final TwitterListTimeline timeline = new TwitterListTimeline(twitterCore, TEST_LIST_ID,
                 TEST_SLUG, TEST_OWNER_ID, TEST_OWNER_SCREEN_NAME, TEST_ITEMS_PER_REQUEST, true);
-        assertEquals(TEST_LIST_ID, timeline.listId);
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_ID, timeline.ownerId);
-        assertEquals(TEST_OWNER_SCREEN_NAME, timeline.ownerScreenName);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeRetweets);
+        Assert.assertThat(timeline.listId, is(TEST_LIST_ID));
+        Assert.assertThat(timeline.slug, is(TEST_SLUG));
+        Assert.assertThat(timeline.ownerId, is(TEST_OWNER_ID));
+        Assert.assertThat(timeline.ownerScreenName, is(TEST_OWNER_SCREEN_NAME));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.includeRetweets, is(true));
     }
 
     @Test
@@ -76,12 +74,12 @@ public void testConstructor() {
     public void testConstructor_defaults() {
         final TwitterListTimeline timeline = new TwitterListTimeline(twitterCore, TEST_LIST_ID,
                 null, null, null, null, null);
-        assertEquals(TEST_LIST_ID, timeline.listId);
-        assertNull(timeline.slug);
-        assertNull(timeline.ownerId);
-        assertNull(timeline.ownerScreenName);
-        assertNull(timeline.maxItemsPerRequest);
-        assertNull(timeline.includeRetweets);
+        Assert.assertThat(timeline.listId, is(TEST_LIST_ID));
+        Assert.assertThat(timeline.slug, nullValue());
+        Assert.assertThat(timeline.ownerId, nullValue());
+        Assert.assertThat(timeline.ownerScreenName, nullValue());
+        Assert.assertThat(timeline.maxItemsPerRequest, nullValue());
+        Assert.assertThat(timeline.includeRetweets, nullValue());
     }
 
     @Test
@@ -103,7 +101,7 @@ public void testGetScribeSection() {
         final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
                 .id(TEST_LIST_ID)
                 .build();
-        assertEquals(REQUIRED_IMPRESSION_SECTION, timeline.getTimelineType());
+        Assert.assertThat(timeline.getTimelineType(), is(REQUIRED_IMPRESSION_SECTION));
     }
 
     /* Builder */
@@ -114,9 +112,9 @@ public void testBuilder_viaLlistId() {
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .includeRetweets(true)
                 .build();
-        assertEquals(TEST_LIST_ID, timeline.listId);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeRetweets);
+        Assert.assertThat(timeline.listId, is(TEST_LIST_ID));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.includeRetweets, is(true));
     }
 
     @Test
@@ -126,10 +124,10 @@ public void testBuilder_viaSlugOwnerId() {
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .includeRetweets(true)
                 .build();
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_ID, timeline.ownerId);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeRetweets);
+        Assert.assertThat(timeline.slug, is(TEST_SLUG));
+        Assert.assertThat(timeline.ownerId, is(TEST_OWNER_ID));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.includeRetweets, is(true));
     }
 
     @Test
@@ -139,10 +137,10 @@ public void testBuilder_viaSlugOwnerScreenName() {
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .includeRetweets(true)
                 .build();
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_SCREEN_NAME, timeline.ownerScreenName);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeRetweets);
+        Assert.assertThat(timeline.slug, is(TEST_SLUG));
+        Assert.assertThat(timeline.ownerScreenName, is(TEST_OWNER_SCREEN_NAME));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.includeRetweets, is(true));
     }
 
     @Test
@@ -151,8 +149,8 @@ public void testBuilder_defaults() {
         final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
                 .id(TEST_LIST_ID)
                 .build();
-        assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertNull(timeline.includeRetweets);
+        Assert.assertThat(timeline.maxItemsPerRequest, is(REQUIRED_DEFAULT_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.includeRetweets, nullValue());
     }
 
     @Test
@@ -160,7 +158,7 @@ public void testBuilder_listId() {
         final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
                 .id(TEST_LIST_ID)
                 .build();
-        assertEquals(TEST_LIST_ID, timeline.listId);
+        Assert.assertThat(timeline.listId, is(TEST_LIST_ID));
     }
 
     @Test
@@ -168,8 +166,8 @@ public void testBuilder_slugWithOwnerId() {
         final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
                 .slugWithOwnerId(TEST_SLUG, TEST_OWNER_ID)
                 .build();
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_ID, timeline.ownerId);
+        Assert.assertThat(timeline.slug, is(TEST_SLUG));
+        Assert.assertThat(timeline.ownerId, is(TEST_OWNER_ID));
     }
 
     @Test
@@ -177,8 +175,8 @@ public void testBuilder_slugWithOwnerScreenName() {
         final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
                 .slugWithOwnerScreenName(TEST_SLUG, TEST_OWNER_SCREEN_NAME)
                 .build();
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_SCREEN_NAME, timeline.ownerScreenName);
+        Assert.assertThat(timeline.slug, is(TEST_SLUG));
+        Assert.assertThat(timeline.ownerScreenName, is(TEST_OWNER_SCREEN_NAME));
     }
 
     @Test
@@ -187,23 +185,23 @@ public void testBuilder_maxItemsPerRequest() {
                 .id(TEST_LIST_ID)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
     }
 
     @Test
     public void testBuilder_includeRetweets() {
         TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore).id(TEST_LIST_ID)
                 .build();
-        assertNull(timeline.includeRetweets);
+        Assert.assertThat(timeline.includeRetweets, nullValue());
         timeline = new TwitterListTimeline.Builder(twitterCore)
                 .id(TEST_LIST_ID).includeRetweets(true)
                 .build();
-        assertTrue(timeline.includeRetweets);
+        Assert.assertThat(timeline.includeRetweets, is(true));
         timeline = new TwitterListTimeline.Builder(twitterCore)
                 .id(TEST_LIST_ID)
                 .includeRetweets(false)
                 .build();
-        assertFalse(timeline.includeRetweets);
+        Assert.assertThat(timeline.includeRetweets, is(false));
     }
 
     @Test
@@ -212,7 +210,7 @@ public void testBuilder_noIdOrSlugOwnerPair() {
             new TwitterListTimeline.Builder(twitterCore).build();
             fail("Expected IllegalArgumentException to be thrown");
         } catch (IllegalStateException e) {
-            assertEquals("must specify either a list id or slug/owner pair", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("must specify either a list id or slug/owner pair"));
         }
     }
 
@@ -224,7 +222,7 @@ public void testBuilder_bothIdAndSlugOwnerPair() {
                     .slugWithOwnerId(TEST_SLUG, TEST_OWNER_ID)
                     .build();
         } catch (IllegalStateException e) {
-            assertEquals("must specify either a list id or slug/owner pair", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("must specify either a list id or slug/owner pair"));
         }
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java
index 28eeab5d..5aab0b09 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java
@@ -22,13 +22,11 @@
 import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.services.StatusesService;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.isNull;
 import static org.mockito.Mockito.mock;
@@ -60,31 +58,31 @@ public void setUp() {
 
     @Test
     public void testConstructor() {
-        final UserTimeline timeline = new UserTimeline(twitterCore, TestFixtures.TEST_USER.id,
-                TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, true, true);
-        assertEquals((Long) TestFixtures.TEST_USER.id, timeline.userId);
-        assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeReplies);
-        assertTrue(timeline.includeRetweets);
+        final UserTimeline timeline = new UserTimeline(twitterCore, TestFixtures.TEST_USER.getId(),
+                TestFixtures.TEST_USER.getScreenName(), TEST_ITEMS_PER_REQUEST, true, true);
+        Assert.assertThat(timeline.userId, is(TestFixtures.TEST_USER.getId()));
+        Assert.assertThat(timeline.screenName, is(TestFixtures.TEST_USER.getScreenName()));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.includeReplies, is(true));
+        Assert.assertThat(timeline.includeRetweets, is(true));
     }
 
     @Test
     // most api arguments should default to Null to allow the backend to determine default behavior
     public void testConstructor_defaults() {
         final UserTimeline timeline = new UserTimeline(twitterCore, null, null, null, null, null);
-        assertNull(timeline.userId);
-        assertNull(timeline.screenName);
-        assertNull(timeline.maxItemsPerRequest);
-        assertNull(timeline.includeRetweets);
+        Assert.assertThat(timeline.userId, nullValue());
+        Assert.assertThat(timeline.screenName, nullValue());
+        Assert.assertThat(timeline.maxItemsPerRequest, nullValue());
+        Assert.assertThat(timeline.includeRetweets, nullValue());
         // parameters which default to false
-        assertFalse(timeline.includeReplies);
+        Assert.assertThat(timeline.includeReplies, is(false));
     }
 
     @Test
     public void testNext_createsCorrectRequest() {
-        final UserTimeline timeline = spy(new UserTimeline(twitterCore, TestFixtures.TEST_USER.id,
-                TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null));
+        final UserTimeline timeline = spy(new UserTimeline(twitterCore, TestFixtures.TEST_USER.getId(),
+                TestFixtures.TEST_USER.getScreenName(), TEST_ITEMS_PER_REQUEST, null, null));
         timeline.next(TEST_SINCE_ID, mock(Callback.class));
         verify(timeline, times(1)).createUserTimelineRequest(eq(TEST_SINCE_ID),
                 isNull(Long.class));
@@ -92,8 +90,8 @@ public void testNext_createsCorrectRequest() {
 
     @Test
     public void testPrevious_createsCorrectRequest() {
-        final UserTimeline timeline = spy(new UserTimeline(twitterCore, TestFixtures.TEST_USER.id,
-                TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null));
+        final UserTimeline timeline = spy(new UserTimeline(twitterCore, TestFixtures.TEST_USER.getId(),
+                TestFixtures.TEST_USER.getScreenName(), TEST_ITEMS_PER_REQUEST, null, null));
         timeline.previous(TEST_MAX_ID, mock(Callback.class));
         // intentionally decrementing the maxId which is passed through to the request
         verify(timeline, times(1)).createUserTimelineRequest(isNull(Long.class),
@@ -103,16 +101,16 @@ public void testPrevious_createsCorrectRequest() {
     @Test
     public void testCreateUserTimelineRequest() {
         // build a timeline with test params
-        final UserTimeline timeline = new UserTimeline(twitterCore, TestFixtures.TEST_USER.id,
-                TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null);
+        final UserTimeline timeline = new UserTimeline(twitterCore, TestFixtures.TEST_USER.getId(),
+                TestFixtures.TEST_USER.getScreenName(), TEST_ITEMS_PER_REQUEST, null, null);
 
         // create a request directly
         timeline.createUserTimelineRequest(TEST_SINCE_ID, TEST_MAX_ID);
 
         // assert userTimeline call is made with the correct arguments
         verify(twitterCore.getApiClient().getStatusesService())
-                .userTimeline(eq(TestFixtures.TEST_USER.id),
-                        eq(TestFixtures.TEST_USER.screenName), eq(TEST_ITEMS_PER_REQUEST),
+                .userTimeline(eq(TestFixtures.TEST_USER.getId()),
+                        eq(TestFixtures.TEST_USER.getScreenName()), eq(TEST_ITEMS_PER_REQUEST),
                         eq(TEST_SINCE_ID), eq(TEST_MAX_ID), eq(false), eq(true),
                         isNull(Boolean.class), isNull(Boolean.class));
     }
@@ -120,53 +118,53 @@ public void testCreateUserTimelineRequest() {
     @Test
     public void testGetScribeSection() {
         final UserTimeline timeline = new UserTimeline.Builder(twitterCore).build();
-        assertEquals(REQUIRED_IMPRESSION_SECTION, timeline.getTimelineType());
+        Assert.assertThat(timeline.getTimelineType(), is(REQUIRED_IMPRESSION_SECTION));
     }
 
     /* Builder */
     @Test
     public void testBuilder() {
         final UserTimeline timeline = new UserTimeline.Builder(twitterCore)
-                .userId(TestFixtures.TEST_USER.id)
-                .screenName(TestFixtures.TEST_USER.screenName)
+                .userId(TestFixtures.TEST_USER.getId())
+                .screenName(TestFixtures.TEST_USER.getScreenName())
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .includeReplies(true)
                 .includeRetweets(true)
                 .build();
-        assertEquals((Long) TestFixtures.TEST_USER.id, timeline.userId);
-        assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeReplies);
-        assertTrue(timeline.includeRetweets);
+        Assert.assertThat(timeline.userId, is(TestFixtures.TEST_USER.getId()));
+        Assert.assertThat(timeline.screenName, is(TestFixtures.TEST_USER.getScreenName()));
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.includeReplies, is(true));
+        Assert.assertThat(timeline.includeRetweets, is(true));
     }
 
     @Test
     // api arguments should default to Null to allow the backend to determine default behavior
     public void testBuilder_defaults() {
         final UserTimeline timeline = new UserTimeline.Builder(twitterCore).build();
-        assertNull(timeline.userId);
-        assertNull(timeline.screenName);
-        assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertNull(timeline.includeRetweets);
+        Assert.assertThat(timeline.userId, nullValue());
+        Assert.assertThat(timeline.screenName, nullValue());
+        Assert.assertThat(timeline.maxItemsPerRequest, is(REQUIRED_DEFAULT_ITEMS_PER_REQUEST));
+        Assert.assertThat(timeline.includeRetweets, nullValue());
         // parameters which default to false
-        assertFalse(timeline.includeReplies);
+        Assert.assertThat(timeline.includeReplies, is(false));
     }
 
     @Test
     public void testBuilder_userId() {
-        final Long USER_ID = TestFixtures.TEST_USER.id;
+        final Long USER_ID = TestFixtures.TEST_USER.getId();
         final UserTimeline timeline = new UserTimeline.Builder(twitterCore)
                 .userId(USER_ID)
                 .build();
-        assertEquals(USER_ID, timeline.userId);
+        Assert.assertThat(timeline.userId, is(USER_ID));
     }
 
     @Test
     public void testBuilder_screenName() {
         final UserTimeline timeline = new UserTimeline.Builder(twitterCore)
-                .screenName(TestFixtures.TEST_USER.screenName)
+                .screenName(TestFixtures.TEST_USER.getScreenName())
                 .build();
-        assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
+        Assert.assertThat(timeline.screenName, is(TestFixtures.TEST_USER.getScreenName()));
     }
 
     @Test
@@ -174,27 +172,27 @@ public void testBuilder_maxItemsPerRequest() {
         final UserTimeline timeline = new UserTimeline.Builder(twitterCore)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
+        Assert.assertThat(timeline.maxItemsPerRequest, is(TEST_ITEMS_PER_REQUEST));
     }
 
     @Test
     public void testBuilder_includeReplies() {
         // null includeReplies defaults to false
         UserTimeline timeline = new UserTimeline.Builder(twitterCore).build();
-        assertFalse(timeline.includeReplies);
+        Assert.assertThat(timeline.includeReplies, is(false));
         timeline = new UserTimeline.Builder(twitterCore).includeReplies(true).build();
-        assertTrue(timeline.includeReplies);
+        Assert.assertThat(timeline.includeReplies, is(true));
         timeline = new UserTimeline.Builder(twitterCore).includeReplies(false).build();
-        assertFalse(timeline.includeReplies);
+        Assert.assertThat(timeline.includeReplies, is(false));
     }
 
     @Test
     public void testBuilder_includeRetweets() {
         UserTimeline timeline = new UserTimeline.Builder(twitterCore).build();
-        assertNull(timeline.includeRetweets);
+        Assert.assertThat(timeline.includeRetweets, nullValue());
         timeline = new UserTimeline.Builder(twitterCore).includeRetweets(true).build();
-        assertTrue(timeline.includeRetweets);
+        Assert.assertThat(timeline.includeRetweets, is(true));
         timeline = new UserTimeline.Builder(twitterCore).includeRetweets(false).build();
-        assertFalse(timeline.includeRetweets);
+        Assert.assertThat(timeline.includeRetweets, is(false));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UtilsTest.java
index 5840b2f3..fb44ea73 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UtilsTest.java
@@ -19,6 +19,7 @@
 
 import com.twitter.sdk.android.core.models.Tweet;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -26,59 +27,59 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class UtilsTest {
 
     @Test
     public void testNumberOrDefault_validNumber() {
-        assertEquals(Long.valueOf(123), Utils.numberOrDefault("123", -1L));
+        Assert.assertThat(Utils.numberOrDefault("123", -1L), is(Long.valueOf(123)));
     }
 
     @Test
     public void testNumberOrDefault_invalidNumber() {
-        assertEquals(Long.valueOf(-1L), Utils.numberOrDefault("abc", -1L));
+        Assert.assertThat(Utils.numberOrDefault("abc", -1L), is(Long.valueOf(-1L)));
     }
 
     @Test
     public void testStringOrEmpty_validString() {
-        assertEquals("string", Utils.stringOrEmpty("string"));
+        Assert.assertThat(Utils.stringOrEmpty("string"), is("string"));
     }
 
     @Test
     public void testStringOrEmpty_nullString() {
-        assertEquals("", Utils.stringOrEmpty(null));
+        Assert.assertThat(Utils.stringOrEmpty(null), is(""));
     }
 
     @Test
     public void testStringOrDefault_validString() {
-        assertEquals("string", Utils.stringOrDefault("string", "default"));
+        Assert.assertThat(Utils.stringOrDefault("string", "default"), is("string"));
     }
 
     @Test
     public void testStringOrDefault_nullString() {
-        assertEquals("default", Utils.stringOrDefault(null, "default"));
+        Assert.assertThat(Utils.stringOrDefault(null, "default"), is("default"));
     }
 
     @Test
     public void testCharSeqOrEmpty_validCharSeq() {
-        assertEquals("string", Utils.charSeqOrEmpty("string"));
+        Assert.assertThat(Utils.charSeqOrEmpty("string"), is("string"));
     }
 
     @Test
     public void testCharSeqOrEmpty_nullCharSeq() {
-        assertEquals("", Utils.charSeqOrEmpty(null));
+        Assert.assertThat(Utils.charSeqOrEmpty(null), is(""));
     }
 
     @Test
     public void testCharSeqOrDefault_validCharSeq() {
-        assertEquals("string", Utils.charSeqOrDefault("string", "default"));
+        Assert.assertThat(Utils.charSeqOrDefault("string", "default"), is("string"));
     }
 
     @Test
     public void testCharSeqOrDefault_nullCharSeq() {
-        assertEquals("default", Utils.charSeqOrDefault(null, "default"));
+        Assert.assertThat(Utils.charSeqOrDefault(null, "default"), is("default"));
     }
 
     @Test
@@ -87,7 +88,7 @@ public void testSortTweets() {
         final List<Tweet> tweets = new ArrayList<>();
         tweets.addAll(TestFixtures.UNORDERED_TWEETS);
         final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_TWEETS, ordered);
+        Assert.assertThat(ordered, is(TestFixtures.ORDERED_TWEETS));
     }
 
     // Tweet results will match the requested Tweet ids, duplicate requested ids duplicate Tweets.
@@ -97,7 +98,7 @@ public void testSortTweets_duplicateRequestedIds() {
         final List<Tweet> tweets = new ArrayList<>();
         tweets.addAll(TestFixtures.UNORDERED_TWEETS);
         final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_DUPLICATE_TWEETS, ordered);
+        Assert.assertThat(ordered, is(TestFixtures.ORDERED_DUPLICATE_TWEETS));
     }
 
     // Tweet results will match the requested Tweet ids, duplicate results ignored.
@@ -107,7 +108,7 @@ public void testSortTweets_duplicateTweets() {
         final List<Tweet> tweets = new ArrayList<>();
         tweets.addAll(TestFixtures.UNORDERED_DUPLICATE_TWEETS);
         final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_TWEETS, ordered);
+        Assert.assertThat(ordered, is(TestFixtures.ORDERED_TWEETS));
     }
 
     @Test
@@ -116,7 +117,7 @@ public void testSortTweets_missingTweets() {
         final List<Tweet> tweets = new ArrayList<>();
         tweets.addAll(TestFixtures.UNORDERED_MISSING_TWEETS);
         final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_MISSING_TWEETS, ordered);
+        Assert.assertThat(ordered, is(TestFixtures.ORDERED_MISSING_TWEETS));
     }
 
     // Tweet result with an extra, unrequested Tweet, not included in the result.
@@ -128,7 +129,7 @@ public void testSortTweets_extraTweetsFirst() {
         tweets.add(TestFixtures.TEST_TWEET);
 
         final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_TWEETS, ordered);
+        Assert.assertThat(ordered, is(TestFixtures.ORDERED_TWEETS));
     }
 }
 
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/VideoScribeClientImplTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/VideoScribeClientImplTest.java
index 9d64f1ab..213a7aec 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/VideoScribeClientImplTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/VideoScribeClientImplTest.java
@@ -22,6 +22,7 @@
 import com.twitter.sdk.android.core.internal.scribe.SyndicationClientEvent;
 import com.twitter.sdk.android.core.models.MediaEntity;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -31,9 +32,7 @@
 
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.verify;
 
 public class VideoScribeClientImplTest {
@@ -63,7 +62,7 @@ public void setUp() {
 
     @Test
     public void testImpression() {
-        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
                 createTestEntity(TEST_TYPE_ANIMATED_GIF));
         scribeClient.impression(scribeItem);
 
@@ -71,7 +70,7 @@ public void testImpression() {
 
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertBaseNamespace(ns);
-        assertEquals(TEST_SCRIBE_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(TEST_SCRIBE_IMPRESSION_ACTION));
 
         final List<ScribeItem> items = itemsArgumentCaptor.getValue();
         assertItems(items);
@@ -79,7 +78,7 @@ public void testImpression() {
 
     @Test
     public void testPlay() {
-        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
                 createTestEntity(TEST_TYPE_ANIMATED_GIF));
         scribeClient.play(scribeItem);
 
@@ -87,35 +86,35 @@ public void testPlay() {
 
         final EventNamespace ns = namespaceArgumentCaptor.getValue();
         assertBaseNamespace(ns);
-        assertEquals(TEST_SCRIBE_PLAY_ACTION, ns.action);
+        Assert.assertThat(ns.action, is(TEST_SCRIBE_PLAY_ACTION));
 
         final List<ScribeItem> items = itemsArgumentCaptor.getValue();
         assertItems(items);
     }
 
     static void assertItems(List<ScribeItem> items) {
-        assertNotNull(items);
-        assertEquals(1, items.size());
-        assertEquals(TestFixtures.TEST_TWEET_ID, items.get(0).id.longValue());
-        assertEquals(ScribeItem.TYPE_TWEET, items.get(0).itemType.intValue());
+        Assert.assertThat(items, notNullValue());
+        Assert.assertThat(items.size(), is(1));
+        Assert.assertThat(items.get(0).getId().longValue(), is(TestFixtures.TEST_TWEET_ID));
+        Assert.assertThat(items.get(0).getItemType().intValue(), is(ScribeItem.TYPE_TWEET));
 
-        assertMediaDetails(items.get(0).mediaDetails, TEST_TYPE_ANIMATED_GIF_ID);
+        assertMediaDetails(items.get(0).getMediaDetails(), TEST_TYPE_ANIMATED_GIF_ID);
     }
 
     static void assertMediaDetails(ScribeItem.MediaDetails mediaDetails, int type) {
-        assertNotNull(mediaDetails);
-        assertEquals(TestFixtures.TEST_TWEET_ID, mediaDetails.contentId);
-        assertEquals(type, mediaDetails.mediaType);
-        assertEquals(TEST_MEDIA_ID, mediaDetails.publisherId);
+        Assert.assertThat(mediaDetails, notNullValue());
+        Assert.assertThat(mediaDetails.getContentId(), is(TestFixtures.TEST_TWEET_ID));
+        Assert.assertThat(mediaDetails.getMediaType(), is(type));
+        Assert.assertThat(mediaDetails.getPublisherId(), is(TEST_MEDIA_ID));
     }
 
 
     static void assertBaseNamespace(EventNamespace ns) {
-        assertEquals(SyndicationClientEvent.CLIENT_NAME, ns.client);
-        assertEquals(TEST_TFW_CLIENT_EVENT_PAGE, ns.page);
-        assertEquals(TEST_TFW_CLIENT_EVENT_SECTION, ns.section);
-        assertNull(ns.element);
-        assertNull(ns.component);
+        Assert.assertThat(ns.client, is(SyndicationClientEvent.CLIENT_NAME));
+        Assert.assertThat(ns.page, is(TEST_TFW_CLIENT_EVENT_PAGE));
+        Assert.assertThat(ns.section, is(TEST_TFW_CLIENT_EVENT_SECTION));
+        Assert.assertThat(ns.element, nullValue());
+        Assert.assertThat(ns.component, nullValue());
     }
 
     private MediaEntity createTestEntity(String type) {
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java
index 9f1358aa..de3410a2 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java
@@ -21,15 +21,14 @@
 import android.text.TextPaint;
 import android.view.View;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.MockitoAnnotations.initMocks;
 
@@ -54,7 +53,7 @@ public void testUpdateDrawState_shouldSetTextPaintDefaultColor() {
         clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR);
         clickableLinkSpan.updateDrawState(textPaint);
         verify(textPaint).setColor(textPaint.linkColor);
-        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
+        Assert.assertThat(textPaint.bgColor, is(Color.TRANSPARENT));
     }
 
     @Test
@@ -62,7 +61,7 @@ public void testUpdateDrawState_shouldSetTextPaintProvidedColor() {
         clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, false);
         clickableLinkSpan.updateDrawState(textPaint);
         verify(textPaint).setColor(LINK_COLOR);
-        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
+        Assert.assertThat(textPaint.bgColor, is(Color.TRANSPARENT));
     }
 
     @Test
@@ -70,7 +69,7 @@ public void testUpdateDrawState_shouldSetTextPaintUnderlined() {
         clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
         clickableLinkSpan.updateDrawState(textPaint);
         verify(textPaint).setUnderlineText(true);
-        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
+        Assert.assertThat(textPaint.bgColor, is(Color.TRANSPARENT));
     }
 
     @Test
@@ -79,21 +78,21 @@ public void testUpdateDrawState_shouldSetTextPaintBackground() {
         clickableLinkSpan.select(true);
         clickableLinkSpan.updateDrawState(textPaint);
         verify(textPaint).setUnderlineText(true);
-        assertEquals(SELECTED_COLOR, textPaint.bgColor);
+        Assert.assertThat(textPaint.bgColor, is(SELECTED_COLOR));
     }
 
     @Test
     public void testSelect_shouldSetIsSelectedTrue() {
         clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
         clickableLinkSpan.select(true);
-        assertTrue(clickableLinkSpan.isSelected());
+        Assert.assertThat(clickableLinkSpan.isSelected(), is(true));
     }
 
     @Test
     public void testSelect_shouldSetIsSelectedFalse() {
         clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
         clickableLinkSpan.select(false);
-        assertFalse(clickableLinkSpan.isSelected());
+        Assert.assertThat(clickableLinkSpan.isSelected(), is(false));
     }
 
     private static class TestClickableLinkSpan extends ClickableLinkSpan {
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java
index 9da26fcb..070242be 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java
@@ -24,6 +24,7 @@
 import android.widget.FrameLayout;
 import android.widget.ProgressBar;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -32,8 +33,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.spy;
@@ -63,19 +63,19 @@ public void setUp() {
 
     @Test
     public void testConstructor() {
-        assertNotNull(subject.imageView);
-        assertNotNull(subject.progressBar);
+        Assert.assertThat(subject.imageView, notNullValue());
+        Assert.assertThat(subject.progressBar, notNullValue());
 
         FrameLayout.LayoutParams params;
         params = (FrameLayout.LayoutParams) subject.imageView.getLayoutParams();
-        assertEquals(FrameLayout.LayoutParams.MATCH_PARENT, params.height);
-        assertEquals(FrameLayout.LayoutParams.MATCH_PARENT, params.width);
-        assertEquals(Gravity.CENTER, params.gravity);
+        Assert.assertThat(params.height, is(FrameLayout.LayoutParams.MATCH_PARENT));
+        Assert.assertThat(params.width, is(FrameLayout.LayoutParams.MATCH_PARENT));
+        Assert.assertThat(params.gravity, is(Gravity.CENTER));
 
         params = (FrameLayout.LayoutParams) subject.progressBar.getLayoutParams();
-        assertEquals(FrameLayout.LayoutParams.WRAP_CONTENT, params.height);
-        assertEquals(FrameLayout.LayoutParams.WRAP_CONTENT, params.width);
-        assertEquals(Gravity.CENTER, params.gravity);
+        Assert.assertThat(params.height, is(FrameLayout.LayoutParams.WRAP_CONTENT));
+        Assert.assertThat(params.width, is(FrameLayout.LayoutParams.WRAP_CONTENT));
+        Assert.assertThat(params.gravity, is(Gravity.CENTER));
     }
 
     @Test
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java
index 1fb5cad9..1f96b377 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java
@@ -24,13 +24,14 @@
 import com.twitter.sdk.android.core.models.VideoInfo;
 import com.twitter.sdk.android.tweetui.TestFixtures;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class MediaBadgeViewTest {
@@ -43,8 +44,8 @@ public void setUp() throws Exception {
 
     @Test
     public void testInitialViewState() {
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
+        Assert.assertThat(view.badge.getVisibility(), is(View.GONE));
+        Assert.assertThat(view.videoDuration.getVisibility(), is(View.GONE));
     }
 
     @Test
@@ -52,8 +53,8 @@ public void testSetMediaEntity_withAnimatedGif() {
         final MediaEntity entity = TestFixtures.createEntityWithAnimatedGif(null);
         view.setMediaEntity(entity);
 
-        assertEquals(View.VISIBLE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
+        Assert.assertThat(view.badge.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(view.videoDuration.getVisibility(), is(View.GONE));
     }
 
     @Test
@@ -62,9 +63,9 @@ public void testSetMediaEntity_withVideo() {
         final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
         view.setMediaEntity(entity);
 
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.VISIBLE, view.videoDuration.getVisibility());
-        assertEquals("0:01", view.videoDuration.getText());
+        Assert.assertThat(view.badge.getVisibility(), is(View.GONE));
+        Assert.assertThat(view.videoDuration.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(view.videoDuration.getText(), is("0:01"));
     }
 
     @Test
@@ -72,9 +73,9 @@ public void testSetMediaEntity_withNullVideoInfo() {
         final MediaEntity entity = TestFixtures.createEntityWithVideo(null);
         view.setMediaEntity(entity);
 
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.VISIBLE, view.videoDuration.getVisibility());
-        assertEquals("0:00", view.videoDuration.getText());
+        Assert.assertThat(view.badge.getVisibility(), is(View.GONE));
+        Assert.assertThat(view.videoDuration.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(view.videoDuration.getText(), is("0:00"));
     }
 
     @Test
@@ -82,8 +83,8 @@ public void testSetMediaEntity_withImage() {
         final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(null);
         view.setMediaEntity(entity);
 
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
+        Assert.assertThat(view.badge.getVisibility(), is(View.GONE));
+        Assert.assertThat(view.videoDuration.getVisibility(), is(View.GONE));
     }
 
     @Test
@@ -91,8 +92,8 @@ public void testSetEntity_withVineCard() {
         final Card vineCard = TestFixtures.sampleValidVineCard();
         view.setCard(vineCard);
 
-        assertEquals(View.VISIBLE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
+        Assert.assertThat(view.badge.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(view.videoDuration.getVisibility(), is(View.GONE));
     }
 
     @Test
@@ -100,7 +101,7 @@ public void testSetEntity_withInvalidVineCard() {
         final Card vineCard = TestFixtures.sampleInvalidVineCard();
         view.setCard(vineCard);
 
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
+        Assert.assertThat(view.badge.getVisibility(), is(View.GONE));
+        Assert.assertThat(view.videoDuration.getVisibility(), is(View.GONE));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaTimeUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaTimeUtilsTest.java
index 50b0bd00..a842eb98 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaTimeUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaTimeUtilsTest.java
@@ -17,9 +17,10 @@
 
 package com.twitter.sdk.android.tweetui.internal;
 
+import org.junit.Assert;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 public class MediaTimeUtilsTest {
     static final int SECOND_IN_MS = 1000;
@@ -28,9 +29,9 @@
 
     @Test
     public void testFormatPlaybackTime() {
-        assertEquals("0:01", MediaTimeUtils.getPlaybackTime(SECOND_IN_MS));
-        assertEquals("1:01", MediaTimeUtils.getPlaybackTime(MINUTE_IN_MS + SECOND_IN_MS));
-        assertEquals("1:01:01", MediaTimeUtils
-                .getPlaybackTime(HOUR_IN_MS + MINUTE_IN_MS + SECOND_IN_MS));
+        Assert.assertThat(MediaTimeUtils.getPlaybackTime(SECOND_IN_MS), is("0:01"));
+        Assert.assertThat(MediaTimeUtils.getPlaybackTime(MINUTE_IN_MS + SECOND_IN_MS), is("1:01"));
+        Assert.assertThat(MediaTimeUtils
+                .getPlaybackTime(HOUR_IN_MS + MINUTE_IN_MS + SECOND_IN_MS), is("1:01:01"));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
index a2137f4b..5379becb 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
@@ -24,6 +24,7 @@
 import com.twitter.sdk.android.core.models.VideoInfo;
 import com.twitter.sdk.android.tweetui.TestFixtures;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -31,11 +32,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TweetMediaUtilsTest {
@@ -51,14 +48,14 @@
     @Test
     public void testGetPhotoEntity_nullEntities() {
         final Tweet tweet = new TweetBuilder().setEntities(null).build();
-        assertNull(TweetMediaUtils.getPhotoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getPhotoEntity(tweet), nullValue());
     }
 
     @Test
     public void testGetPhotoEntity_nullMedia() {
         final TweetEntities entities = new TweetEntities(null, null, null, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-        assertNull(TweetMediaUtils.getPhotoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getPhotoEntity(tweet), nullValue());
     }
 
     @Test
@@ -66,7 +63,7 @@ public void testGetPhotoEntity_emptyMedia() {
         final TweetEntities entities = new TweetEntities(null, null, new ArrayList<>(),
                 null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-        assertNull(TweetMediaUtils.getPhotoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getPhotoEntity(tweet), nullValue());
     }
 
     @Test
@@ -78,7 +75,7 @@ public void testGetPhotoEntity_hasFinalPhotoEntity() {
         final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
 
-        assertEquals(entity, TweetMediaUtils.getPhotoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getPhotoEntity(tweet), is(entity));
     }
 
     @Test
@@ -90,7 +87,7 @@ public void testGetPhotoEntity_nonPhotoMedia() {
         final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
 
-        assertNull(TweetMediaUtils.getPhotoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getPhotoEntity(tweet), nullValue());
     }
 
     @Test
@@ -102,7 +99,7 @@ public void testHasPhoto_hasPhotoEntity() {
         final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
 
-        assertTrue(TweetMediaUtils.hasPhoto(tweet));
+        Assert.assertThat(TweetMediaUtils.hasPhoto(tweet), is(true));
     }
 
     @Test
@@ -114,33 +111,33 @@ public void testHasPhoto_noPhotoEntity() {
         final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
 
-        assertFalse(TweetMediaUtils.hasPhoto(tweet));
+        Assert.assertThat(TweetMediaUtils.hasPhoto(tweet), is(false));
     }
 
     @Test
     public void testHasPhoto_uninitializedMediaEntities() {
         final TweetEntities entities = new TweetEntities(null, null, null, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-        assertFalse(TweetMediaUtils.hasPhoto(tweet));
+        Assert.assertThat(TweetMediaUtils.hasPhoto(tweet), is(false));
     }
 
     @Test
     public void testHasPhoto_nullEntities() {
         final Tweet tweet = new TweetBuilder().setEntities(null).build();
-        assertFalse(TweetMediaUtils.hasPhoto(tweet));
+        Assert.assertThat(TweetMediaUtils.hasPhoto(tweet), is(false));
     }
 
     @Test
     public void testGetVideoEntity_nullEntities() {
         final Tweet tweet = new TweetBuilder().setExtendedEntities(null).build();
-        assertNull(TweetMediaUtils.getVideoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getVideoEntity(tweet), nullValue());
     }
 
     @Test
     public void testGetVideoEntity_nullMedia() {
         final TweetEntities entities = new TweetEntities(null, null, null, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-        assertNull(TweetMediaUtils.getVideoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getVideoEntity(tweet), nullValue());
     }
 
     @Test
@@ -148,7 +145,7 @@ public void testGetVideoEntity_emptyMedia() {
         final TweetEntities entities = new TweetEntities(null, null, new ArrayList<>(),
                 null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-        assertNull(TweetMediaUtils.getVideoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getVideoEntity(tweet), nullValue());
     }
 
     @Test
@@ -160,7 +157,7 @@ public void testGetVideoEntity_hasVideoEntity() {
         final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
-        assertEquals(entity, TweetMediaUtils.getVideoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getVideoEntity(tweet), is(entity));
     }
 
     @Test
@@ -172,7 +169,7 @@ public void testGetVideoEntity_nonVideoMedia() {
         final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
-        assertNull(TweetMediaUtils.getVideoEntity(tweet));
+        Assert.assertThat(TweetMediaUtils.getVideoEntity(tweet), nullValue());
     }
 
     @Test
@@ -185,7 +182,7 @@ public void testHasSupportedVideo_hasUnsupportedVideoEntity() {
                 null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
-        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
+        Assert.assertThat(TweetMediaUtils.hasSupportedVideo(tweet), is(false));
     }
 
     @Test
@@ -198,7 +195,7 @@ public void testHasSupportedVideo_hasSupportedVideoEntity() {
                 null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
-        assertTrue(TweetMediaUtils.hasSupportedVideo(tweet));
+        Assert.assertThat(TweetMediaUtils.hasSupportedVideo(tweet), is(true));
     }
 
     @Test
@@ -210,62 +207,62 @@ public void testHasSupportedVideo_noVideoEntity() {
         final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
-        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
+        Assert.assertThat(TweetMediaUtils.hasSupportedVideo(tweet), is(false));
     }
 
     @Test
     public void testHasSupportedVideo_uninitializedMediaEntities() {
         final TweetEntities entities = new TweetEntities(null, null, null, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
+        Assert.assertThat(TweetMediaUtils.hasSupportedVideo(tweet), is(false));
     }
 
     @Test
     public void testHasSupportedVideo_nullEntities() {
         final Tweet tweet = new TweetBuilder().setExtendedEntities(null).build();
-        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
+        Assert.assertThat(TweetMediaUtils.hasSupportedVideo(tweet), is(false));
     }
 
     @Test
     public void testIsPhotoType_photoEntity() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_PHOTO);
-        assertTrue(TweetMediaUtils.isPhotoType(entity));
+        Assert.assertThat(TweetMediaUtils.isPhotoType(entity), is(true));
     }
 
     @Test
     public void testIsPhotoType_videoEntity() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_VIDEO);
-        assertFalse(TweetMediaUtils.isPhotoType(entity));
+        Assert.assertThat(TweetMediaUtils.isPhotoType(entity), is(false));
     }
 
     @Test
     public void testIsPhotoType_animatedGifEntity() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_ANIMATED_GIF);
-        assertFalse(TweetMediaUtils.isPhotoType(entity));
+        Assert.assertThat(TweetMediaUtils.isPhotoType(entity), is(false));
     }
 
     @Test
     public void testIsVideoType_photoEntity() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_PHOTO);
-        assertFalse(TweetMediaUtils.isVideoType(entity));
+        Assert.assertThat(TweetMediaUtils.isVideoType(entity), is(false));
     }
 
     @Test
     public void testIsVideoType_videoEntity() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_VIDEO);
-        assertTrue(TweetMediaUtils.isVideoType(entity));
+        Assert.assertThat(TweetMediaUtils.isVideoType(entity), is(true));
     }
 
     @Test
     public void testIsVideoType_animatedGifEntity() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_ANIMATED_GIF);
-        assertTrue(TweetMediaUtils.isVideoType(entity));
+        Assert.assertThat(TweetMediaUtils.isVideoType(entity), is(true));
     }
 
     @Test
@@ -274,8 +271,8 @@ public void testGetSupportedVariant() {
         final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
         final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
 
-        assertNotNull(TweetMediaUtils.getSupportedVariant(entity));
-        assertEquals(variant, TweetMediaUtils.getSupportedVariant(entity));
+        Assert.assertThat(TweetMediaUtils.getSupportedVariant(entity), notNullValue());
+        Assert.assertThat(TweetMediaUtils.getSupportedVariant(entity), is(variant));
     }
 
     @Test
@@ -284,65 +281,65 @@ public void testGetSupportedVariant_unsupportedContentType() {
         final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
         final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
 
-        assertNull(TweetMediaUtils.getSupportedVariant(entity));
+        Assert.assertThat(TweetMediaUtils.getSupportedVariant(entity), nullValue());
     }
 
     @Test
     public void testIsVariantSupported_withMP4() {
         final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_MP4, null);
-        assertTrue(TweetMediaUtils.isVariantSupported(variant));
+        Assert.assertThat(TweetMediaUtils.isVariantSupported(variant), is(true));
     }
 
     @Test
     public void testIsVariantSupported_withHLS() {
         final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_HLS, null);
-        assertTrue(TweetMediaUtils.isVariantSupported(variant));
+        Assert.assertThat(TweetMediaUtils.isVariantSupported(variant), is(true));
     }
 
     @Test
     public void testIsVariantSupported_withNullContentType() {
         final VideoInfo.Variant variant = new VideoInfo.Variant(0, null, null);
-        assertFalse(TweetMediaUtils.isVariantSupported(variant));
+        Assert.assertThat(TweetMediaUtils.isVariantSupported(variant), is(false));
     }
 
     @Test
     public void testIsVariantSupported_withUnsupportedContentType() {
         final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_DASH, null);
-        assertFalse(TweetMediaUtils.isVariantSupported(variant));
+        Assert.assertThat(TweetMediaUtils.isVariantSupported(variant), is(false));
     }
 
     @Test
     public void testIsLooping_withVideoOverSevenSeconds() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_VIDEO, 7000);
-        assertFalse(TweetMediaUtils.isLooping(entity));
+        Assert.assertThat(TweetMediaUtils.isLooping(entity), is(false));
     }
 
     @Test
     public void testIsLooping_withVideoUnderSevenSeconds() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_VIDEO, 6000);
-        assertTrue(TweetMediaUtils.isLooping(entity));
+        Assert.assertThat(TweetMediaUtils.isLooping(entity), is(true));
     }
 
     @Test
     public void testIsLooping_withAnimatedGif() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_ANIMATED_GIF);
-        assertTrue(TweetMediaUtils.isLooping(entity));
+        Assert.assertThat(TweetMediaUtils.isLooping(entity), is(true));
     }
 
     @Test
     public void showVideoControlsWithVideo() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_VIDEO);
-        assertTrue(TweetMediaUtils.showVideoControls(entity));
+        Assert.assertThat(TweetMediaUtils.showVideoControls(entity), is(true));
     }
 
     @Test
     public void showVideoControlsWithAnimatedGif() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_ANIMATED_GIF);
-        assertFalse(TweetMediaUtils.showVideoControls(entity));
+        Assert.assertThat(TweetMediaUtils.showVideoControls(entity), is(false));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
index d4793504..24e4bb9a 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
@@ -28,6 +28,7 @@
 import com.twitter.sdk.android.tweetui.R;
 import com.twitter.sdk.android.tweetui.TestFixtures;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -38,10 +39,10 @@
 import java.util.Collections;
 import java.util.List;
 
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.mock;
@@ -67,7 +68,7 @@ public void setUp() throws Exception {
     public void testInitialViewState() {
         for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
             final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
-            assertNull(imageView);
+            Assert.assertThat(imageView, nullValue());
         }
 
         assertArrayEquals(new float[]{0, 0, 0, 0, 0, 0, 0, 0}, tweetMediaView.radii, 0);
@@ -76,13 +77,13 @@ public void testInitialViewState() {
     @Test
     public void testSetMediaBgColor() {
         tweetMediaView.setMediaBgColor(Color.BLUE);
-        assertEquals(Color.BLUE, tweetMediaView.mediaBgColor);
+        Assert.assertThat(tweetMediaView.mediaBgColor, is(Color.BLUE));
     }
 
     @Test
     public void testSetPhotoErrorResId() {
         tweetMediaView.setPhotoErrorResId(TEST_ERROR_RES_ID);
-        assertEquals(TEST_ERROR_RES_ID, tweetMediaView.photoErrorResId);
+        Assert.assertThat(tweetMediaView.photoErrorResId, is(TEST_ERROR_RES_ID));
     }
 
     @Test
@@ -92,7 +93,7 @@ public void testSetTweetMediaEntities_withEmptyList() {
 
         for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
             final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
-            assertNull(imageView);
+            Assert.assertThat(imageView, nullValue());
         }
     }
 
@@ -104,10 +105,10 @@ public void testSetTweetMediaEntities_withSingleEntity() {
         tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
 
         final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
-        assertEquals(View.VISIBLE, imageView.getVisibility());
-        assertNull(tweetMediaView.getChildAt(1));
-        assertNull(tweetMediaView.getChildAt(2));
-        assertNull(tweetMediaView.getChildAt(3));
+        Assert.assertThat(imageView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(tweetMediaView.getChildAt(1), nullValue());
+        Assert.assertThat(tweetMediaView.getChildAt(2), nullValue());
+        Assert.assertThat(tweetMediaView.getChildAt(3), nullValue());
     }
 
     @Test
@@ -118,9 +119,9 @@ public void testSetTweetMediaEntities_withMultipleEntities() {
 
         for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
             final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
-            assertEquals(View.VISIBLE, imageView.getVisibility());
-            assertEquals(index, imageView.getTag(R.id.tw__entity_index));
-            assertEquals(contentDefaultDescription, imageView.getContentDescription());
+            Assert.assertThat(imageView.getVisibility(), is(View.VISIBLE));
+            Assert.assertThat(imageView.getTag(R.id.tw__entity_index), is(index));
+            Assert.assertThat(imageView.getContentDescription(), is(contentDefaultDescription));
         }
     }
 
@@ -134,11 +135,11 @@ public void testSetTweetMediaEntities_withVine() {
         tweetMediaView.setVineCard(tweetWithVineCard);
 
         final OverlayImageView imageView = (OverlayImageView) tweetMediaView.getChildAt(0);
-        assertEquals(View.VISIBLE, imageView.getVisibility());
-        assertNotNull(imageView.overlay.drawable);
-        assertNull(tweetMediaView.getChildAt(1));
-        assertNull(tweetMediaView.getChildAt(2));
-        assertNull(tweetMediaView.getChildAt(3));
+        Assert.assertThat(imageView.getVisibility(), is(View.VISIBLE));
+        Assert.assertThat(imageView.overlay.drawable, notNullValue());
+        Assert.assertThat(tweetMediaView.getChildAt(1), nullValue());
+        Assert.assertThat(tweetMediaView.getChildAt(2), nullValue());
+        Assert.assertThat(tweetMediaView.getChildAt(3), nullValue());
     }
 
     @Test
@@ -187,7 +188,7 @@ public void testClearImageViews() {
         tweetMediaView.clearImageViews();
         for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
             final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
-            assertEquals(View.GONE, imageView.getVisibility());
+            Assert.assertThat(imageView.getVisibility(), is(View.GONE));
         }
     }
 }
diff --git a/tweet-ui/src/test/resources/robolectric.properties b/tweet-ui/src/test/resources/robolectric.properties
index 37ab2cac..ca46efc1 100644
--- a/tweet-ui/src/test/resources/robolectric.properties
+++ b/tweet-ui/src/test/resources/robolectric.properties
@@ -1,2 +1,3 @@
+# suppress inspection "UnusedProperty" for whole file
 sdk = 21
 constants = com.twitter.sdk.android.tweetui.BuildConfig
\ No newline at end of file
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventTransformTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventTransformTest.java
index 5d0b4e80..444dd544 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventTransformTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventTransformTest.java
@@ -66,7 +66,7 @@ public void testToBytes() throws IOException {
     }
 
     public void testToBytes_withItems() throws IOException {
-        final ScribeItem scribeItem = ScribeItem.fromMessage(TEST_MESSAGE);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMessage(TEST_MESSAGE);
         final List<ScribeItem> itemList = Arrays.asList(scribeItem);
         final ScribeEvent scribeEvent =
                 new ScribeEvent("testcategory", eventNamespace, 1404426136717L, itemList);
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.kt
index 4b34ab2a..ddf6ccbb 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.kt
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.kt
@@ -25,7 +25,7 @@ import kotlinx.android.parcel.Parcelize
  * Represents an authorization token and its secret.
  */
 @Parcelize
-data class TwitterAuthToken @JvmOverloads constructor(
+open class TwitterAuthToken @JvmOverloads constructor(
         @field:SerializedName("token") var token: String?,
         @field:SerializedName("secret") var secret: String?,
         override val createdAt: Long = System.currentTimeMillis()
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.java
index a5c318a2..e65161a7 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.java
@@ -46,7 +46,6 @@
     OAuthController oAuthController;
 
     private ProgressBar spinner;
-    private WebView webView;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -54,7 +53,7 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.tw__activity_oauth);
 
         spinner = findViewById(R.id.tw__spinner);
-        webView = findViewById(R.id.tw__web_view);
+        WebView webView = findViewById(R.id.tw__web_view);
 
         final boolean showProgress;
         if (savedInstanceState != null) {
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
index 17479464..c701cbed 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
@@ -191,7 +191,7 @@ public void requestEmail(TwitterSession session, final Callback<String> callback
         verifyRequest.enqueue(new Callback<User>() {
             @Override
             public void success(Result<User> result) {
-                callback.success(new Result<>(result.getData().email, null));
+                callback.success(new Result<>(result.getData().getEmail(), null));
             }
 
             @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClient.java
index dfe46608..78d8c27d 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClient.java
@@ -166,6 +166,7 @@ public static ScribeConfig getScribeConfig(String kitName, String kitVersion) {
      * interface.
      */
     private static boolean isEnabled() {
+        //noinspection ConstantConditions
         return !BuildConfig.BUILD_TYPE.equals(DEBUG_BUILD);
     }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSender.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSender.java
index 5e432136..a350b4f3 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSender.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSender.java
@@ -75,7 +75,6 @@
     private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager;
     private final GuestSessionProvider guestSessionProvider;
     private final AtomicReference<ScribeService> scribeService;
-    private final ExecutorService executorService;
     private final IdManager idManager;
 
     ScribeFilesSender(Context context, ScribeConfig scribeConfig, long ownerId,
@@ -89,7 +88,7 @@
         this.authConfig = authConfig;
         this.sessionManager = sessionManager;
         this.guestSessionProvider = guestSessionProvider;
-        this.executorService = executorService;
+        ExecutorService executorService1 = executorService;
         this.idManager = idManager;
         this.scribeService = new AtomicReference<>();
     }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.java
deleted file mode 100644
index 6b92f263..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.java
+++ /dev/null
@@ -1,274 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.scribe;
-
-import com.google.gson.annotations.SerializedName;
-import com.twitter.sdk.android.core.internal.VineCardUtils;
-import com.twitter.sdk.android.core.models.Card;
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.User;
-
-import java.io.Serializable;
-
-public class ScribeItem implements Serializable {
-    /**
-     * Scribe item types. See ItemType in
-     * See: source/tree/science/src/thrift/com/twitter/clientapp/gen/client_app.thrift
-     */
-    public static final int TYPE_TWEET = 0;
-    public static final int TYPE_USER = 3;
-    public static final int TYPE_MESSAGE = 6;
-
-    /**
-     * The type of item (tweet, message, etc).
-     * Optional field.
-     */
-    @SerializedName("item_type")
-    public final Integer itemType;
-
-    /**
-     * A numerical id associated with the item.
-     * Optional field.
-     */
-    @SerializedName("id")
-    public final Long id;
-
-    /**
-     *  A description of the item.
-     *  Optional field.
-     */
-    @SerializedName("description")
-    public final String description;
-
-    /**
-     * Card event.
-     * Optional field.
-     */
-    @SerializedName("card_event")
-    public final CardEvent cardEvent;
-
-    /**
-     * Media details.
-     * Optional field.
-     */
-    @SerializedName("media_details")
-    public final MediaDetails mediaDetails;
-
-    private ScribeItem(Integer itemType, Long id, String description, CardEvent cardEvent,
-            MediaDetails mediaDetails) {
-        this.itemType = itemType;
-        this.id = id;
-        this.description = description;
-        this.cardEvent = cardEvent;
-        this.mediaDetails = mediaDetails;
-    }
-
-    public static ScribeItem fromTweet(Tweet tweet) {
-        return new ScribeItem.Builder()
-                .setItemType(TYPE_TWEET)
-                .setId(tweet.id)
-                .build();
-    }
-
-    public static ScribeItem fromUser(User user) {
-        return new ScribeItem.Builder()
-                .setItemType(TYPE_USER)
-                .setId(user.id)
-                .build();
-    }
-
-    public static ScribeItem fromMessage(String message) {
-        return new ScribeItem.Builder()
-                .setItemType(TYPE_MESSAGE)
-                .setDescription(message)
-                .build();
-    }
-
-    public static ScribeItem fromTweetCard(long tweetId, Card card) {
-        return new ScribeItem.Builder()
-                .setItemType(ScribeItem.TYPE_TWEET)
-                .setId(tweetId)
-                .setMediaDetails(createCardDetails(tweetId, card))
-                .build();
-    }
-
-    public static ScribeItem fromMediaEntity(long tweetId, MediaEntity mediaEntity) {
-        return new ScribeItem.Builder()
-                .setItemType(ScribeItem.TYPE_TWEET)
-                .setId(tweetId)
-                .setMediaDetails(createMediaDetails(tweetId, mediaEntity))
-                .build();
-    }
-
-    static ScribeItem.MediaDetails createMediaDetails(long tweetId,
-                                                             MediaEntity mediaEntity) {
-        return new ScribeItem.MediaDetails(tweetId, getMediaType(mediaEntity), mediaEntity.id);
-    }
-
-    static ScribeItem.MediaDetails createCardDetails(long tweetId, Card card) {
-        return new ScribeItem.MediaDetails(tweetId, MediaDetails.TYPE_VINE,
-                Long.valueOf(VineCardUtils.getPublisherId(card)));
-    }
-
-    static int getMediaType(MediaEntity mediaEntity) {
-        if (MediaDetails.GIF_TYPE.equals(mediaEntity.type)) {
-            return ScribeItem.MediaDetails.TYPE_ANIMATED_GIF;
-        } else {
-            return ScribeItem.MediaDetails.TYPE_CONSUMER;
-        }
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        final ScribeItem that = (ScribeItem) o;
-
-        if (itemType != null ? !itemType.equals(that.itemType) : that.itemType != null)
-            return false;
-        if (id != null ? !id.equals(that.id) : that.id != null) return false;
-        if (description != null ? !description.equals(that.description) : that.description != null)
-            return false;
-        if (cardEvent != null ? !cardEvent.equals(that.cardEvent) : that.cardEvent != null)
-            return false;
-        return !(mediaDetails != null ? !mediaDetails.equals(that.mediaDetails) : that
-                .mediaDetails != null);
-    }
-
-    @Override
-    public int hashCode() {
-        int result = itemType != null ? itemType.hashCode() : 0;
-        result = 31 * result + (id != null ? id.hashCode() : 0);
-        result = 31 * result + (description != null ? description.hashCode() : 0);
-        result = 31 * result + (cardEvent != null ? cardEvent.hashCode() : 0);
-        result = 31 * result + (mediaDetails != null ? mediaDetails.hashCode() : 0);
-        return result;
-    }
-
-    /**
-     * Card event.
-     */
-    public static class CardEvent implements Serializable {
-
-        @SerializedName("promotion_card_type")
-        final int promotionCardType;
-
-        public CardEvent(int cardType) {
-            promotionCardType = cardType;
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            final CardEvent cardEvent = (CardEvent) o;
-            return promotionCardType == cardEvent.promotionCardType;
-        }
-
-        @Override
-        public int hashCode() {
-            return promotionCardType;
-        }
-    }
-
-    /**
-     * Media details.
-     */
-    public static class MediaDetails implements Serializable {
-        public static final int TYPE_CONSUMER = 1;
-        public static final int TYPE_AMPLIFY = 2;
-        public static final int TYPE_ANIMATED_GIF = 3;
-        public static final int TYPE_VINE = 4;
-
-        public static final String GIF_TYPE = "animated_gif";
-
-        @SerializedName("content_id")
-        public final long contentId;
-
-        @SerializedName("media_type")
-        public final int mediaType;
-
-        @SerializedName("publisher_id")
-        public final long publisherId;
-
-        public MediaDetails(long contentId, int mediaType, long publisherId) {
-            this.contentId = contentId;
-            this.mediaType = mediaType;
-            this.publisherId = publisherId;
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-
-            final MediaDetails that = (MediaDetails) o;
-
-            if (contentId != that.contentId) return false;
-            if (mediaType != that.mediaType) return false;
-            return publisherId == that.publisherId;
-        }
-
-        @Override
-        public int hashCode() {
-            int result = (int) (contentId ^ (contentId >>> 32));
-            result = 31 * result + mediaType;
-            result = 31 * result + (int) (publisherId ^ (publisherId >>> 32));
-            return result;
-        }
-    }
-
-    public static class Builder {
-        private Integer itemType;
-        private Long id;
-        private String description;
-        private CardEvent cardEvent;
-        private MediaDetails mediaDetails;
-
-        public Builder setItemType(int itemType) {
-            this.itemType = itemType;
-            return this;
-        }
-
-        public Builder setId(long id) {
-            this.id = id;
-            return this;
-        }
-
-        public Builder setDescription(String description) {
-            this.description = description;
-            return this;
-        }
-
-        public Builder setCardEvent(CardEvent cardEvent) {
-            this.cardEvent = cardEvent;
-            return this;
-        }
-
-        public Builder setMediaDetails(MediaDetails mediaDetails) {
-            this.mediaDetails = mediaDetails;
-            return this;
-        }
-
-        public ScribeItem build() {
-            return new ScribeItem(itemType, id, description, cardEvent, mediaDetails);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.kt
new file mode 100644
index 00000000..a5f818cd
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.kt
@@ -0,0 +1,177 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.scribe
+
+import android.os.Parcelable
+import com.google.gson.annotations.SerializedName
+import com.twitter.sdk.android.core.internal.VineCardUtils
+import com.twitter.sdk.android.core.models.Card
+import com.twitter.sdk.android.core.models.MediaEntity
+import com.twitter.sdk.android.core.models.Tweet
+import com.twitter.sdk.android.core.models.User
+import kotlinx.android.parcel.Parcelize
+import java.io.Serializable
+
+@Parcelize
+data class ScribeItem(
+        /**
+         * The type of item (tweet, message, etc).
+         * Optional field.
+         */
+        @field:SerializedName("item_type") val itemType: Int?,
+        /**
+         * A numerical id associated with the item.
+         * Optional field.
+         */
+        @field:SerializedName("id") val id: Long?,
+        /**
+         * A description of the item.
+         * Optional field.
+         */
+        @field:SerializedName("description") val description: String?,
+        /**
+         * Card event.
+         * Optional field.
+         */
+        @field:SerializedName("card_event") val cardEvent: CardEvent?,
+        /**
+         * Media details.
+         * Optional field.
+         */
+        @field:SerializedName("media_details") val mediaDetails: MediaDetails?) : Serializable, Parcelable {
+
+    /**
+     * Card event.
+     */
+    @Parcelize
+    class CardEvent(@field:SerializedName("promotion_card_type") val promotionCardType: Int) : Serializable, Parcelable
+
+    /**
+     * Media details.
+     */
+    @Parcelize
+    data class MediaDetails(
+            @field:SerializedName("content_id") val contentId: Long,
+            @field:SerializedName("media_type") val mediaType: Int,
+            @field:SerializedName("publisher_id") val publisherId: Long?
+    ) : Serializable, Parcelable {
+
+        companion object {
+            const val TYPE_CONSUMER = 1
+            const val TYPE_AMPLIFY = 2
+            const val TYPE_ANIMATED_GIF = 3
+            const val TYPE_VINE = 4
+
+            const val GIF_TYPE = "animated_gif"
+        }
+    }
+
+    class Builder {
+        private var itemType: Int? = null
+        private var id: Long? = null
+        private var description: String? = null
+        private var cardEvent: CardEvent? = null
+        private var mediaDetails: MediaDetails? = null
+
+        fun setItemType(itemType: Int): Builder {
+            this.itemType = itemType
+            return this
+        }
+
+        fun setId(id: Long): Builder {
+            this.id = id
+            return this
+        }
+
+        fun setDescription(description: String): Builder {
+            this.description = description
+            return this
+        }
+
+        fun setCardEvent(cardEvent: CardEvent): Builder {
+            this.cardEvent = cardEvent
+            return this
+        }
+
+        fun setMediaDetails(mediaDetails: MediaDetails): Builder {
+            this.mediaDetails = mediaDetails
+            return this
+        }
+
+        fun build(): ScribeItem = ScribeItem(itemType, id, description, cardEvent, mediaDetails)
+    }
+
+    companion object {
+        /**
+         * Scribe item types. See ItemType in
+         * See: source/tree/science/src/thrift/com/twitter/clientapp/gen/client_app.thrift
+         */
+        const val TYPE_TWEET = 0
+        const val TYPE_USER = 3
+        const val TYPE_MESSAGE = 6
+
+        fun fromTweet(tweet: Tweet): ScribeItem = ScribeItem.Builder()
+                .setItemType(TYPE_TWEET)
+                .setId(tweet.id)
+                .build()
+
+        fun fromUser(user: User): ScribeItem = ScribeItem.Builder()
+                .setItemType(TYPE_USER)
+                .setId(user.id)
+                .build()
+
+        fun fromMessage(message: String): ScribeItem = ScribeItem.Builder()
+                .setItemType(TYPE_MESSAGE)
+                .setDescription(message)
+                .build()
+
+        fun fromTweetCard(tweetId: Long, card: Card): ScribeItem = ScribeItem.Builder()
+                .setItemType(ScribeItem.TYPE_TWEET)
+                .setId(tweetId)
+                .setMediaDetails(createCardDetails(tweetId, card))
+                .build()
+
+        fun fromMediaEntity(tweetId: Long, mediaEntity: MediaEntity): ScribeItem =
+                ScribeItem.Builder()
+                        .setItemType(ScribeItem.TYPE_TWEET)
+                        .setId(tweetId)
+                        .setMediaDetails(createMediaDetails(tweetId, mediaEntity))
+                        .build()
+
+        private fun createMediaDetails(tweetId: Long, mediaEntity: MediaEntity): ScribeItem.MediaDetails =
+                ScribeItem.MediaDetails(
+                        tweetId,
+                        getMediaType(mediaEntity),
+                        mediaEntity.id
+                )
+
+        private fun createCardDetails(tweetId: Long, card: Card): ScribeItem.MediaDetails =
+                ScribeItem.MediaDetails(
+                        tweetId,
+                        MediaDetails.TYPE_VINE,
+                        VineCardUtils.getPublisherId(card).toLongOrNull()
+                )
+
+        private fun getMediaType(mediaEntity: MediaEntity): Int =
+                if (MediaDetails.GIF_TYPE == mediaEntity.type) {
+                    ScribeItem.MediaDetails.TYPE_ANIMATED_GIF
+                } else {
+                    ScribeItem.MediaDetails.TYPE_CONSUMER
+                }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.kt
similarity index 53%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.kt
index 15a7e6e1..77d31f96 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.kt
@@ -15,41 +15,39 @@
  *
  */
 
-package com.twitter.sdk.android.core.models;
+package com.twitter.sdk.android.core.models
 
-import com.google.gson.annotations.SerializedName;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
+import com.google.gson.annotations.SerializedName
+import java.io.Serializable
+import java.util.*
 
 /**
  * Provides metadata and additional contextual information about content posted on Twitter
  */
-class Entity implements Serializable {
-    private static final int START_INDEX = 0;
-    private static final int END_INDEX = 1;
+open class Entity(start: Int, end: Int) : Serializable {
 
     /**
      * An array of integers indicating the offsets.
      */
     @SerializedName("indices")
-    public final List<Integer> indices;
+    val indices: List<Int>
 
-    Entity(int start, int end) {
-        final List<Integer> temp = new ArrayList<>(2);
-        temp.add(START_INDEX, start);
-        temp.add(END_INDEX, end);
+    val start: Int
+        get() = indices[START_INDEX]
 
-        indices = Collections.unmodifiableList(temp);
-    }
+    val end: Int
+        get() = indices[END_INDEX]
+
+    init {
+        val temp = ArrayList<Int>(2)
+        temp.add(START_INDEX, start)
+        temp.add(END_INDEX, end)
 
-    public int getStart() {
-        return indices.get(START_INDEX);
+        indices = Collections.unmodifiableList(temp)
     }
 
-    public int getEnd() {
-        return indices.get(END_INDEX);
+    companion object {
+        private const val START_INDEX = 0
+        private const val END_INDEX = 1
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java
deleted file mode 100644
index 3357b6e8..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.io.Serializable;
-
-/**
- * Represents media elements uploaded with the Tweet.
- */
-public class MediaEntity extends UrlEntity {
-
-    /**
-     * ID of the media expressed as a 64-bit integer.
-     */
-    @SerializedName("id")
-    public final long id;
-
-    /**
-     * ID of the media expressed as a string.
-     */
-    @SerializedName("id_str")
-    public final String idStr;
-
-    /**
-     * A http:// URL pointing directly to the uploaded media file.
-     *
-     * For media in direct messages, media_url is the same https URL as media_url_https and must be
-     * accessed via an authenticated twitter.com session or by signing a request with the user's
-     * access token using OAuth 1.0A. It is not possible to directly embed these images in a web
-     * page.
-     */
-    @SerializedName("media_url")
-    public final String mediaUrl;
-
-    /**
-     * A https:// URL pointing directly to the uploaded media file, for embedding on https pages.
-     *
-     * For media in direct messages, media_url_https must be accessed via an authenticated
-     * twitter.com session or by signing a request with the user's access token using OAuth 1.0A.
-     * It is not possible to directly embed these images in a web page.
-     */
-    @SerializedName("media_url_https")
-    public final String mediaUrlHttps;
-
-    /**
-     * An object showing available sizes for the media file.
-     */
-    @SerializedName("sizes")
-    public final Sizes sizes;
-
-    /**
-     * For Tweets containing media that was originally associated with a different tweet, this ID
-     * points to the original Tweet.
-     */
-    @SerializedName("source_status_id")
-    public final long sourceStatusId;
-
-    /**
-     * For Tweets containing media that was originally associated with a different tweet, this
-     * string-based ID points to the original Tweet.
-     */
-    @SerializedName("source_status_id_str")
-    public final String sourceStatusIdStr;
-
-    /**
-     * Type of uploaded media.
-     */
-    @SerializedName("type")
-    public final String type;
-
-    /**
-     * An object showing details for the video file. This field is present only when there is a
-     * video in the payload.
-     */
-    @SerializedName("video_info")
-    public final VideoInfo videoInfo;
-
-    @SerializedName("ext_alt_text")
-    public final String altText;
-
-    public MediaEntity(String url, String expandedUrl, String displayUrl, int start, int end,
-            long id, String idStr, String mediaUrl, String mediaUrlHttps, Sizes sizes,
-            long sourceStatusId, String sourceStatusIdStr, String type, VideoInfo videoInfo,
-            String altText) {
-        super(url, expandedUrl, displayUrl, start, end);
-        this.id = id;
-        this.idStr = idStr;
-        this.mediaUrl = mediaUrl;
-        this.mediaUrlHttps = mediaUrlHttps;
-        this.sizes = sizes;
-        this.sourceStatusId = sourceStatusId;
-        this.sourceStatusIdStr = sourceStatusIdStr;
-        this.type = type;
-        this.videoInfo = videoInfo;
-        this.altText = altText;
-    }
-
-    public static class Sizes implements Serializable {
-        /**
-         * Information for a medium-sized version of the media.
-         */
-        @SerializedName("medium")
-        public final Size medium;
-
-        /**
-         * Information for a thumbnail-sized version of the media.
-         */
-        @SerializedName("thumb")
-        public final Size thumb;
-
-        /**
-         * Information for a small-sized version of the media.
-         */
-        @SerializedName("small")
-        public final Size small;
-
-        /**
-         * Information for a large-sized version of the media.
-         */
-        @SerializedName("large")
-        public final Size large;
-
-        public Sizes(Size thumb, Size small, Size medium, Size large) {
-            this.thumb = thumb;
-            this.small = small;
-            this.medium = medium;
-            this.large = large;
-        }
-    }
-
-    public static class Size implements Serializable {
-        /**
-         * Width in pixels of this size.
-         */
-        @SerializedName("w")
-        public final int w;
-
-        /**
-         * Height in pixels of this size.
-         */
-        @SerializedName("h")
-        public final int h;
-
-        /**
-         * Resizing method used to obtain this size. A value of fit means that the media was resized
-         * to fit one dimension, keeping its native aspect ratio. A value of crop means that the
-         * media was cropped in order to fit a specific resolution.
-         */
-        @SerializedName("resize")
-        public final String resize;
-
-        public Size(int w, int h, String resize) {
-            this.w = w;
-            this.h = h;
-            this.resize = resize;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.kt
new file mode 100644
index 00000000..e28a7c78
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.kt
@@ -0,0 +1,124 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models
+
+import com.google.gson.annotations.SerializedName
+
+import java.io.Serializable
+
+/**
+ * Represents media elements uploaded with the Tweet.
+ */
+class MediaEntity(
+        url: String,
+        expandedUrl: String?,
+        displayUrl: String,
+        start: Int,
+        end: Int,
+        /**
+         * ID of the media expressed as a 64-bit integer.
+         */
+        @field:SerializedName("id") val id: Long,
+        /**
+         * ID of the media expressed as a string.
+         */
+        @field:SerializedName("id_str") val idStr: String?,
+        /**
+         * A http:// URL pointing directly to the uploaded media file.
+         *
+         * For media in direct messages, media_url is the same https URL as media_url_https and must be
+         * accessed via an authenticated twitter.com session or by signing a request with the user's
+         * access token using OAuth 1.0A. It is not possible to directly embed these images in a web
+         * page.
+         */
+        @field:SerializedName("media_url") val mediaUrl: String?,
+        /**
+         * A https:// URL pointing directly to the uploaded media file, for embedding on https pages.
+         *
+         * For media in direct messages, media_url_https must be accessed via an authenticated
+         * twitter.com session or by signing a request with the user's access token using OAuth 1.0A.
+         * It is not possible to directly embed these images in a web page.
+         */
+        @field:SerializedName("media_url_https") val mediaUrlHttps: String?,
+        /**
+         * An object showing available sizes for the media file.
+         */
+        @field:SerializedName("sizes") val sizes: Sizes?,
+        /**
+         * For Tweets containing media that was originally associated with a different tweet, this ID
+         * points to the original Tweet.
+         */
+        @field:SerializedName("source_status_id") val sourceStatusId: Long,
+        /**
+         * For Tweets containing media that was originally associated with a different tweet, this
+         * string-based ID points to the original Tweet.
+         */
+        @field:SerializedName("source_status_id_str") val sourceStatusIdStr: String?,
+        /**
+         * Type of uploaded media.
+         */
+        @field:SerializedName("type") val type: String,
+        /**
+         * An object showing details for the video file. This field is present only when there is a
+         * video in the payload.
+         */
+        @field:SerializedName("video_info") val videoInfo: VideoInfo?,
+        @field:SerializedName("ext_alt_text") val altText: String
+) : UrlEntity(url, expandedUrl, displayUrl, start, end) {
+
+    class Sizes(
+            /**
+             * Information for a thumbnail-sized version of the media.
+             */
+            @field:SerializedName("thumb")
+            val thumb: Size,
+            /**
+             * Information for a small-sized version of the media.
+             */
+            @field:SerializedName("small")
+            val small: Size,
+            /**
+             * Information for a medium-sized version of the media.
+             */
+            @field:SerializedName("medium")
+            val medium: Size,
+            /**
+             * Information for a large-sized version of the media.
+             */
+            @field:SerializedName("large")
+            val large: Size) : Serializable
+
+    class Size(
+            /**
+             * Width in pixels of this size.
+             */
+            @field:SerializedName("w")
+            val w: Int,
+            /**
+             * Height in pixels of this size.
+             */
+            @field:SerializedName("h")
+            val h: Int,
+            /**
+             * Resizing method used to obtain this size. A value of fit means that the media was resized
+             * to fit one dimension, keeping its native aspect ratio. A value of crop means that the
+             * media was cropped in order to fit a specific resolution.
+             */
+            @field:SerializedName("resize")
+            val resize: String) : Serializable
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java
deleted file mode 100644
index 6ad8777a..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java
+++ /dev/null
@@ -1,353 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-
-/**
- * A Tweet is the basic atomic building block of all things Twitter. Tweets, also known more
- * generically as "status updates." Tweets can be embedded, replied to, favorited, unfavorited and
- * deleted.
- */
-public class Tweet implements Identifiable {
-    public static final long INVALID_ID = -1L;
-
-
-    /**
-     * Nullable. Represents the geographic location of this Tweet as reported by the user or client
-     * application. The inner coordinates array is formatted as geoJSON (longitude first,
-     * then latitude).
-     */
-    @SerializedName("coordinates")
-    public final Coordinates coordinates;
-
-    /**
-     * UTC time when this Tweet was created.
-     */
-    @SerializedName("created_at")
-    public final String createdAt;
-
-    /**
-     * Perspectival. Only surfaces on methods supporting the include_my_retweet parameter, when set
-     * to true. Details the Tweet ID of the user's own retweet (if existent) of this Tweet.
-     */
-    @SerializedName("current_user_retweet")
-    public final Object currentUserRetweet;
-
-    /**
-     * Entities which have been parsed out of the text of the Tweet.
-     */
-    @SerializedName("entities")
-    public final TweetEntities entities;
-
-    /**
-     * Additional entities such as multi photos, animated gifs and video.
-     */
-    @SerializedName("extended_entities")
-    public final TweetEntities extendedEntities;
-
-    /**
-     * Nullable. Indicates approximately how many times this Tweet has been "favorited" by Twitter
-     * users.
-     */
-    @SerializedName("favorite_count")
-    public final Integer favoriteCount;
-
-    /**
-     * Nullable. Perspectival. Indicates whether this Tweet has been favorited by the authenticating
-     * user.
-     */
-    @SerializedName("favorited")
-    public final boolean favorited;
-
-    /**
-     * Indicates the maximum value of the filter_level parameter which may be used and still stream
-     * this Tweet. So a value of medium will be streamed on none, low, and medium streams.
-     */
-    @SerializedName("filter_level")
-    public final String filterLevel;
-
-    /**
-     * The integer representation of the unique identifier for this Tweet. This number is greater
-     * than 53 bits and some programming languages may have difficulty/silent defects in
-     * interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use
-     * id_str for fetching the identifier to stay on the safe side. See Twitter IDs, JSON and
-     * Snowflake.
-     */
-    @SerializedName("id")
-    public final long id;
-
-    /**
-     * The string representation of the unique identifier for this Tweet. Implementations should use
-     * this rather than the large integer in id
-     */
-    @SerializedName("id_str")
-    public final String idStr;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the screen name of
-     * the original Tweet's author.
-     */
-    @SerializedName("in_reply_to_screen_name")
-    public final String inReplyToScreenName;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the integer
-     * representation of the original Tweet's ID.
-     */
-    @SerializedName("in_reply_to_status_id")
-    public final long inReplyToStatusId;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the string
-     * representation of the original Tweet's ID.
-     */
-    @SerializedName("in_reply_to_status_id_str")
-    public final String inReplyToStatusIdStr;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the integer
-     * representation of the original Tweet's author ID. This will not necessarily always be the
-     * user directly mentioned in the Tweet.
-     */
-    @SerializedName("in_reply_to_user_id")
-    public final long inReplyToUserId;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the string
-     * representation of the original Tweet's author ID. This will not necessarily always be the
-     * user directly mentioned in the Tweet.
-     */
-    @SerializedName("in_reply_to_user_id_str")
-    public final String inReplyToUserIdStr;
-
-    /**
-     * Nullable. When present, indicates a BCP 47 language identifier corresponding to the
-     * machine-detected language of the Tweet text, or "und" if no language could be detected.
-     */
-    @SerializedName("lang")
-    public final String lang;
-
-    /**
-     * Nullable. When present, indicates that the tweet is associated (but not necessarily
-     * originating from) a Place.
-     */
-    @SerializedName("place")
-    public final Place place;
-
-    /**
-     * Nullable. This field only surfaces when a tweet contains a link. The meaning of the field
-     * doesn't pertain to the tweet content itself, but instead it is an indicator that the URL
-     * contained in the tweet may contain content or media identified as sensitive content.
-     */
-    @SerializedName("possibly_sensitive")
-    public final boolean possiblySensitive;
-
-    /**
-     * A set of key-value pairs indicating the intended contextual delivery of the containing Tweet.
-     * Currently used by Twitter's Promoted Products.
-     */
-    @SerializedName("scopes")
-    public final Object scopes;
-
-    /**
-     * This field only surfaces when the Tweet is a quote Tweet. This field contains the
-     * integer value Tweet ID of the quoted Tweet.
-     */
-    @SerializedName("quoted_status_id")
-    public final long quotedStatusId;
-
-    /**
-     * This field only surfaces when the Tweet is a quote Tweet. This is the string representation
-     * Tweet ID of the quoted Tweet.
-     */
-    @SerializedName("quoted_status_id_str")
-    public final String quotedStatusIdStr;
-
-    /**
-     * This field only surfaces when the Tweet is a quote Tweet. This attribute contains the
-     * Tweet object of the original Tweet that was quoted.
-     */
-    @SerializedName("quoted_status")
-    public final Tweet quotedStatus;
-
-    /**
-     * Number of times this Tweet has been retweeted. This field is no longer capped at 99 and will
-     * not turn into a String for "100+"
-     */
-    @SerializedName("retweet_count")
-    public final int retweetCount;
-
-    /**
-     * Perspectival. Indicates whether this Tweet has been retweeted by the authenticating user.
-     */
-    @SerializedName("retweeted")
-    public final boolean retweeted;
-
-    /**
-     * Users can amplify the broadcast of tweets authored by other users by retweeting. Retweets can
-     * be distinguished from typical Tweets by the existence of a retweeted_status attribute. This
-     * attribute contains a representation of the original Tweet that was retweeted. Note that
-     * retweets of retweets do not show representations of the intermediary retweet, but only the
-     * original tweet. (Users can also unretweet a retweet they created by deleting their retweet.)
-     */
-    @SerializedName("retweeted_status")
-    public final Tweet retweetedStatus;
-
-    /**
-     * Utility used to post the Tweet, as an HTML-formatted string. Tweets from the Twitter website
-     * have a source value of web.
-     */
-    @SerializedName("source")
-    public final String source;
-
-    /**
-     * The actual UTF-8 text of the status update. See twitter-text for details on what is currently
-     * considered valid characters.
-     */
-    @SerializedName(value = "text", alternate = {"full_text"})
-    public final String text;
-
-
-    /**
-     * An array of two unicode code point indices, identifying the inclusive start and exclusive end
-     * of the displayable content of the Tweet.
-     */
-    @SerializedName("display_text_range")
-    public final List<Integer> displayTextRange;
-
-    /**
-     * Indicates whether the value of the text parameter was truncated, for example, as a result of
-     * a retweet exceeding the 140 character Tweet length. Truncated text will end in ellipsis, like
-     * this ... Since Twitter now rejects long Tweets vs truncating them, the large majority of
-     * Tweets will have this set to false.
-     * Note that while native retweets may have their toplevel text property shortened, the original
-     * text will be available under the retweeted_status object and the truncated parameter will be
-     * set to the value of the original status (in most cases, false).
-     */
-    @SerializedName("truncated")
-    public final boolean truncated;
-
-    /**
-     * The user who posted this Tweet. Perspectival attributes embedded within this object are
-     * unreliable. See Why are embedded objects stale or inaccurate?.
-     */
-    @SerializedName("user")
-    public final User user;
-
-    /**
-     * When present and set to "true", it indicates that this piece of content has been withheld due
-     * to a DMCA complaint.
-     */
-    @SerializedName("withheld_copyright")
-    public final boolean withheldCopyright;
-
-    /**
-     * When present, indicates a list of uppercase two-letter country codes this content is withheld
-     * from. Twitter supports the following non-country values for this field:
-     * "XX" - Content is withheld in all countries
-     * "XY" - Content is withheld due to a DMCA request.
-     */
-    @SerializedName("withheld_in_countries")
-    public final List<String> withheldInCountries;
-
-    /**
-     * When present, indicates whether the content being withheld is the "status" or a "user."
-     */
-    @SerializedName("withheld_scope")
-    public final String withheldScope;
-
-    /**
-     * Nullable. Card data used to attach rich photos, videos and media experience to Tweets.
-     */
-    @SerializedName("card")
-    public final Card card;
-
-    private Tweet() {
-        this(null, null, null, TweetEntities.EMPTY, TweetEntities.EMPTY, 0, false, null, 0, "0",
-                null, 0, "0", 0, "0", null, null, false, null, 0, "0", null, 0, false, null, null,
-                null, null, false, null, false, null, null, null);
-    }
-
-    public Tweet(Coordinates coordinates, String createdAt, Object currentUserRetweet,
-            TweetEntities entities, TweetEntities extendedEntities, Integer favoriteCount,
-            boolean favorited, String filterLevel, long id, String idStr,
-            String inReplyToScreenName, long inReplyToStatusId, String inReplyToStatusIdStr,
-            long inReplyToUserId, String inReplyToUserIdStr, String lang, Place place,
-            boolean possiblySensitive, Object scopes, long quotedStatusId, String quotedStatusIdStr,
-            Tweet quotedStatus, int retweetCount, boolean retweeted, Tweet retweetedStatus,
-            String source, String text, List<Integer> displayTextRange, boolean truncated,
-            User user, boolean withheldCopyright, List<String> withheldInCountries,
-            String withheldScope, Card card) {
-        this.coordinates = coordinates;
-        this.createdAt = createdAt;
-        this.currentUserRetweet = currentUserRetweet;
-        this.entities = entities == null ? TweetEntities.EMPTY : entities;
-        this.extendedEntities = extendedEntities == null ? TweetEntities.EMPTY : extendedEntities;
-        this.favoriteCount = favoriteCount;
-        this.favorited = favorited;
-        this.filterLevel = filterLevel;
-        this.id = id;
-        this.idStr = idStr;
-        this.inReplyToScreenName = inReplyToScreenName;
-        this.inReplyToStatusId = inReplyToStatusId;
-        this.inReplyToStatusIdStr = inReplyToStatusIdStr;
-        this.inReplyToUserId = inReplyToUserId;
-        this.inReplyToUserIdStr = inReplyToUserIdStr;
-        this.lang = lang;
-        this.place = place;
-        this.possiblySensitive = possiblySensitive;
-        this.scopes = scopes;
-        this.quotedStatusId = quotedStatusId;
-        this.quotedStatusIdStr = quotedStatusIdStr;
-        this.quotedStatus = quotedStatus;
-        this.retweetCount = retweetCount;
-        this.retweeted = retweeted;
-        this.retweetedStatus = retweetedStatus;
-        this.source = source;
-        this.text = text;
-        this.displayTextRange = ModelUtils.getSafeList(displayTextRange);
-        this.truncated = truncated;
-        this.user = user;
-        this.withheldCopyright = withheldCopyright;
-        this.withheldInCountries = ModelUtils.getSafeList(withheldInCountries);
-        this.withheldScope = withheldScope;
-        this.card = card;
-    }
-
-    @Override
-    public long getId() {
-        return this.id;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (o == null) return false;
-        if (!(o instanceof Tweet)) return false;
-        final Tweet other = (Tweet) o;
-        return this.id == other.id;
-    }
-
-    @Override
-    public int hashCode() {
-        return (int) this.id;
-    }
-
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.kt
new file mode 100644
index 00000000..e0bf1ae9
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.kt
@@ -0,0 +1,266 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models
+
+import com.google.gson.annotations.SerializedName
+
+/**
+ * A Tweet is the basic atomic building block of all things Twitter. Tweets, also known more
+ * generically as "status updates." Tweets can be embedded, replied to, favorited, unfavorited and
+ * deleted.
+ */
+class Tweet(
+        /**
+         * Nullable. Represents the geographic location of this Tweet as reported by the user or client
+         * application. The inner coordinates array is formatted as geoJSON (longitude first,
+         * then latitude).
+         */
+        @field:SerializedName("coordinates")
+        val coordinates: Coordinates?,
+        /**
+         * UTC time when this Tweet was created.
+         */
+        @field:SerializedName("created_at")
+        val createdAt: String?,
+        /**
+         * Perspectival. Only surfaces on methods supporting the include_my_retweet parameter, when set
+         * to true. Details the Tweet ID of the user's own retweet (if existent) of this Tweet.
+         */
+        @field:SerializedName("current_user_retweet")
+        val currentUserRetweet: Any?,
+        entities: TweetEntities?,
+        extendedEntities: TweetEntities?,
+        /**
+         * Nullable. Indicates approximately how many times this Tweet has been "favorited" by Twitter
+         * users.
+         */
+        @field:SerializedName("favorite_count")
+        val favoriteCount: Int?,
+        /**
+         * Nullable. Perspectival. Indicates whether this Tweet has been favorited by the authenticating
+         * user.
+         */
+        @field:SerializedName("favorited")
+        val favorited: Boolean,
+        /**
+         * Indicates the maximum value of the filter_level parameter which may be used and still stream
+         * this Tweet. So a value of medium will be streamed on none, low, and medium streams.
+         */
+        @field:SerializedName("filter_level")
+        val filterLevel: String?,
+        /**
+         * The integer representation of the unique identifier for this Tweet. This number is greater
+         * than 53 bits and some programming languages may have difficulty/silent defects in
+         * interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use
+         * id_str for fetching the identifier to stay on the safe side. See Twitter IDs, JSON and
+         * Snowflake.
+         */
+        @field:SerializedName("id")
+        override val id: Long,
+        /**
+         * The string representation of the unique identifier for this Tweet. Implementations should use
+         * this rather than the large integer in id
+         */
+        @field:SerializedName("id_str")
+        val idStr: String,
+        /**
+         * Nullable. If the represented Tweet is a reply, this field will contain the screen name of
+         * the original Tweet's author.
+         */
+        @field:SerializedName("in_reply_to_screen_name")
+        val inReplyToScreenName: String?,
+        /**
+         * Nullable. If the represented Tweet is a reply, this field will contain the integer
+         * representation of the original Tweet's ID.
+         */
+        @field:SerializedName("in_reply_to_status_id")
+        val inReplyToStatusId: Long,
+        /**
+         * Nullable. If the represented Tweet is a reply, this field will contain the string
+         * representation of the original Tweet's ID.
+         */
+        @field:SerializedName("in_reply_to_status_id_str")
+        val inReplyToStatusIdStr: String,
+        /**
+         * Nullable. If the represented Tweet is a reply, this field will contain the integer
+         * representation of the original Tweet's author ID. This will not necessarily always be the
+         * user directly mentioned in the Tweet.
+         */
+        @field:SerializedName("in_reply_to_user_id")
+        val inReplyToUserId: Long,
+        /**
+         * Nullable. If the represented Tweet is a reply, this field will contain the string
+         * representation of the original Tweet's author ID. This will not necessarily always be the
+         * user directly mentioned in the Tweet.
+         */
+        @field:SerializedName("in_reply_to_user_id_str")
+        val inReplyToUserIdStr: String,
+        /**
+         * Nullable. When present, indicates a BCP 47 language identifier corresponding to the
+         * machine-detected language of the Tweet text, or "und" if no language could be detected.
+         */
+        @field:SerializedName("lang")
+        val lang: String?,
+        /**
+         * Nullable. When present, indicates that the tweet is associated (but not necessarily
+         * originating from) a Place.
+         */
+        @field:SerializedName("place")
+        val place: Place?,
+        /**
+         * Nullable. This field only surfaces when a tweet contains a link. The meaning of the field
+         * doesn't pertain to the tweet content itself, but instead it is an indicator that the URL
+         * contained in the tweet may contain content or media identified as sensitive content.
+         */
+        @field:SerializedName("possibly_sensitive")
+        val possiblySensitive: Boolean,
+        /**
+         * A set of key-value pairs indicating the intended contextual delivery of the containing Tweet.
+         * Currently used by Twitter's Promoted Products.
+         */
+        @field:SerializedName("scopes")
+        val scopes: Any?,
+        /**
+         * This field only surfaces when the Tweet is a quote Tweet. This field contains the
+         * integer value Tweet ID of the quoted Tweet.
+         */
+        @field:SerializedName("quoted_status_id")
+        val quotedStatusId: Long,
+        /**
+         * This field only surfaces when the Tweet is a quote Tweet. This is the string representation
+         * Tweet ID of the quoted Tweet.
+         */
+        @field:SerializedName("quoted_status_id_str")
+        val quotedStatusIdStr: String,
+        /**
+         * This field only surfaces when the Tweet is a quote Tweet. This attribute contains the
+         * Tweet object of the original Tweet that was quoted.
+         */
+        @field:SerializedName("quoted_status")
+        val quotedStatus: Tweet?,
+        /**
+         * Number of times this Tweet has been retweeted. This field is no longer capped at 99 and will
+         * not turn into a String for "100+"
+         */
+        @field:SerializedName("retweet_count")
+        val retweetCount: Int,
+        /**
+         * Perspectival. Indicates whether this Tweet has been retweeted by the authenticating user.
+         */
+        @field:SerializedName("retweeted")
+        val retweeted: Boolean,
+        /**
+         * Users can amplify the broadcast of tweets authored by other users by retweeting. Retweets can
+         * be distinguished from typical Tweets by the existence of a retweeted_status attribute. This
+         * attribute contains a representation of the original Tweet that was retweeted. Note that
+         * retweets of retweets do not show representations of the intermediary retweet, but only the
+         * original tweet. (Users can also unretweet a retweet they created by deleting their retweet.)
+         */
+        @field:SerializedName("retweeted_status")
+        val retweetedStatus: Tweet?,
+        /**
+         * Utility used to post the Tweet, as an HTML-formatted string. Tweets from the Twitter website
+         * have a source value of web.
+         */
+        @field:SerializedName("source")
+        val source: String?,
+        /**
+         * The actual UTF-8 text of the status update. See twitter-text for details on what is currently
+         * considered valid characters.
+         */
+        @field:SerializedName(value = "text", alternate = ["full_text"])
+        val text: String?,
+        displayTextRange: List<Int>?,
+        /**
+         * Indicates whether the value of the text parameter was truncated, for example, as a result of
+         * a retweet exceeding the 140 character Tweet length. Truncated text will end in ellipsis, like
+         * this ... Since Twitter now rejects long Tweets vs truncating them, the large majority of
+         * Tweets will have this set to false.
+         * Note that while native retweets may have their toplevel text property shortened, the original
+         * text will be available under the retweeted_status object and the truncated parameter will be
+         * set to the value of the original status (in most cases, false).
+         */
+        @field:SerializedName("truncated")
+        val truncated: Boolean,
+        /**
+         * The user who posted this Tweet. Perspectival attributes embedded within this object are
+         * unreliable. See Why are embedded objects stale or inaccurate?.
+         */
+        @field:SerializedName("user")
+        val user: User?,
+        /**
+         * When present and set to "true", it indicates that this piece of content has been withheld due
+         * to a DMCA complaint.
+         */
+        @field:SerializedName("withheld_copyright")
+        val withheldCopyright: Boolean,
+        withheldInCountries: List<String>?,
+        /**
+         * When present, indicates whether the content being withheld is the "status" or a "user."
+         */
+        @field:SerializedName("withheld_scope")
+        val withheldScope: String?,
+        /**
+         * Nullable. Card data used to attach rich photos, videos and media experience to Tweets.
+         */
+        @field:SerializedName("card")
+        val card: Card?
+) : Identifiable {
+
+    /**
+     * Entities which have been parsed out of the text of the Tweet.
+     */
+    @SerializedName("entities")
+    val entities: TweetEntities
+
+    /**
+     * Additional entities such as multi photos, animated gifs and video.
+     */
+    @SerializedName("extended_entities")
+    val extendedEntities: TweetEntities
+
+
+    /**
+     * An array of two unicode code point indices, identifying the inclusive start and exclusive end
+     * of the displayable content of the Tweet.
+     */
+    @SerializedName("display_text_range")
+    val displayTextRange: List<Int>
+
+    /**
+     * When present, indicates a list of uppercase two-letter country codes this content is withheld
+     * from. Twitter supports the following non-country values for this field:
+     * "XX" - Content is withheld in all countries
+     * "XY" - Content is withheld due to a DMCA request.
+     */
+    @SerializedName("withheld_in_countries")
+    val withheldInCountries: List<String>
+
+    private constructor() : this(null, null, null, TweetEntities.EMPTY, TweetEntities.EMPTY, 0, false, null, 0, "0", null, 0, "0", 0, "0", null, null, false, null, 0, "0", null, 0, false, null, null, null, null, false, null, false, null, null, null) {}
+
+    init {
+        this.entities = entities ?: TweetEntities.EMPTY
+        this.extendedEntities = extendedEntities ?: TweetEntities.EMPTY
+        this.displayTextRange = ModelUtils.getSafeList(displayTextRange)
+        this.withheldInCountries = ModelUtils.getSafeList(withheldInCountries)
+    }
+
+    companion object {
+        const val INVALID_ID = -1L
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java
index f2d2c153..3c531a58 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java
@@ -226,40 +226,40 @@ public TweetBuilder setCard(Card card) {
     }
 
     public TweetBuilder copy(Tweet tweet) {
-        this.coordinates = tweet.coordinates;
-        this.createdAt = tweet.createdAt;
-        this.currentUserRetweet = tweet.currentUserRetweet;
-        this.entities = tweet.entities;
-        this.extendedEntities = tweet.extendedEntities;
-        this.favoriteCount = tweet.favoriteCount;
-        this.favorited = tweet.favorited;
-        this.filterLevel = tweet.filterLevel;
-        this.id = tweet.id;
-        this.idStr = tweet.idStr;
-        this.inReplyToScreenName = tweet.inReplyToScreenName;
-        this.inReplyToStatusId = tweet.inReplyToStatusId;
-        this.inReplyToStatusIdStr = tweet.inReplyToStatusIdStr;
-        this.inReplyToUserId = tweet.inReplyToUserId;
-        this.inReplyToUserIdStr = tweet.inReplyToStatusIdStr;
-        this.lang = tweet.lang;
-        this.place = tweet.place;
-        this.possiblySensitive = tweet.possiblySensitive;
-        this.scopes = tweet.scopes;
-        this.quotedStatusId = tweet.quotedStatusId;
-        this.quotedStatusIdStr = tweet.quotedStatusIdStr;
-        this.quotedStatus = tweet.quotedStatus;
-        this.retweetCount = tweet.retweetCount;
-        this.retweeted = tweet.retweeted;
-        this.retweetedStatus = tweet.retweetedStatus;
-        this.source = tweet.source;
-        this.text = tweet.text;
-        this.displayTextRange = tweet.displayTextRange;
-        this.truncated = tweet.truncated;
-        this.user = tweet.user;
-        this.withheldCopyright = tweet.withheldCopyright;
-        this.withheldInCountries = tweet.withheldInCountries;
-        this.withheldScope = tweet.withheldScope;
-        this.card = tweet.card;
+        this.coordinates = tweet.getCoordinates();
+        this.createdAt = tweet.getCreatedAt();
+        this.currentUserRetweet = tweet.getCurrentUserRetweet();
+        this.entities = tweet.getEntities();
+        this.extendedEntities = tweet.getExtendedEntities();
+        this.favoriteCount = tweet.getFavoriteCount();
+        this.favorited = tweet.getFavorited();
+        this.filterLevel = tweet.getFilterLevel();
+        this.id = tweet.getId();
+        this.idStr = tweet.getIdStr();
+        this.inReplyToScreenName = tweet.getInReplyToScreenName();
+        this.inReplyToStatusId = tweet.getInReplyToStatusId();
+        this.inReplyToStatusIdStr = tweet.getInReplyToStatusIdStr();
+        this.inReplyToUserId = tweet.getInReplyToUserId();
+        this.inReplyToUserIdStr = tweet.getInReplyToStatusIdStr();
+        this.lang = tweet.getLang();
+        this.place = tweet.getPlace();
+        this.possiblySensitive = tweet.getPossiblySensitive();
+        this.scopes = tweet.getScopes();
+        this.quotedStatusId = tweet.getQuotedStatusId();
+        this.quotedStatusIdStr = tweet.getQuotedStatusIdStr();
+        this.quotedStatus = tweet.getQuotedStatus();
+        this.retweetCount = tweet.getRetweetCount();
+        this.retweeted = tweet.getRetweeted();
+        this.retweetedStatus = tweet.getRetweetedStatus();
+        this.source = tweet.getSource();
+        this.text = tweet.getText();
+        this.displayTextRange = tweet.getDisplayTextRange();
+        this.truncated = tweet.getTruncated();
+        this.user = tweet.getUser();
+        this.withheldCopyright = tweet.getWithheldCopyright();
+        this.withheldInCountries = tweet.getWithheldInCountries();
+        this.withheldScope = tweet.getWithheldScope();
+        this.card = tweet.getCard();
         return this;
     }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.kt
similarity index 57%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.kt
index ca2bcbf4..93fc7ed8 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.kt
@@ -15,60 +15,53 @@
  *
  */
 
-package com.twitter.sdk.android.core.models;
+package com.twitter.sdk.android.core.models
 
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
+import com.google.gson.annotations.SerializedName
 
 /**
  * Provides metadata and additional contextual information about content posted in a tweet.
  */
-public class TweetEntities {
-
-    static final TweetEntities EMPTY = new TweetEntities(null, null, null, null, null);
+class TweetEntities(
+        urls: List<UrlEntity>?,
+        userMentions: List<MentionEntity>?,
+        media: List<MediaEntity>?,
+        hashtags: List<HashtagEntity>?,
+        symbols: List<SymbolEntity>?
+) {
 
     /**
      * Represents URLs included in the text of a Tweet or within textual fields of a user object.
      */
     @SerializedName("urls")
-    public final List<UrlEntity> urls;
+    val urls: List<UrlEntity> = ModelUtils.getSafeList(urls)
 
     /**
      * Represents other Twitter users mentioned in the text of the Tweet.
      */
     @SerializedName("user_mentions")
-    public final List<MentionEntity> userMentions;
+    val userMentions: List<MentionEntity> = ModelUtils.getSafeList(userMentions)
 
     /**
      * Represents media elements uploaded with the Tweet.
      */
     @SerializedName("media")
-    public final List<MediaEntity> media;
+    val media: List<MediaEntity> = ModelUtils.getSafeList(media)
 
     /**
      * Represents hashtags which have been parsed out of the Tweet text.
      */
     @SerializedName("hashtags")
-    public final List<HashtagEntity> hashtags;
+    val hashtags: List<HashtagEntity> = ModelUtils.getSafeList(hashtags)
 
     /**
      * Represents symbols which have been parsed out of the Tweet text.
      */
     @SerializedName("symbols")
-    public final List<SymbolEntity> symbols;
+    val symbols: List<SymbolEntity> = ModelUtils.getSafeList(symbols)
 
-    private TweetEntities() {
-        this(null, null, null, null, null);
+    companion object {
+        @JvmStatic
+        internal val EMPTY = TweetEntities(null, null, null, null, null)
     }
-
-    public TweetEntities(List<UrlEntity> urls, List<MentionEntity> userMentions,
-            List<MediaEntity> media, List<HashtagEntity> hashtags, List<SymbolEntity> symbols) {
-        this.urls = ModelUtils.getSafeList(urls);
-        this.userMentions = ModelUtils.getSafeList(userMentions);
-        this.media = ModelUtils.getSafeList(media);
-        this.hashtags = ModelUtils.getSafeList(hashtags);
-        this.symbols = ModelUtils.getSafeList(symbols);
-    }
-
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.java
deleted file mode 100644
index 7fb8444b..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents URLs included in the text of a Tweet or within textual fields of a user object.
- */
-public class UrlEntity extends Entity {
-
-    /**
-     * Wrapped URL, corresponding to the value embedded directly into the raw Tweet text, and the
-     * values for the indices parameter.
-     */
-    @SerializedName("url")
-    public final String url;
-
-    /**
-     * Expanded version of display_url
-     */
-    @SerializedName("expanded_url")
-    public final String expandedUrl;
-
-    /**
-     * Version of the URL to display to clients.
-     */
-    @SerializedName("display_url")
-    public final String displayUrl;
-
-    public UrlEntity(String url, String expandedUrl, String displayUrl, int start, int end) {
-        super(start, end);
-        this.url = url;
-        this.expandedUrl = expandedUrl;
-        this.displayUrl = displayUrl;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.kt
new file mode 100644
index 00000000..75d2ce3f
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.kt
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models
+
+import com.google.gson.annotations.SerializedName
+
+/**
+ * Represents URLs included in the text of a Tweet or within textual fields of a user object.
+ */
+open class UrlEntity(
+        /**
+         * Wrapped URL, corresponding to the value embedded directly into the raw Tweet text, and the
+         * values for the indices parameter.
+         */
+        @field:SerializedName("url") val url: String,
+        /**
+         * Expanded version of display_url
+         */
+        @field:SerializedName("expanded_url") val expandedUrl: String?,
+        /**
+         * Version of the URL to display to clients.
+         */
+        @field:SerializedName("display_url") val displayUrl: String,
+        start: Int,
+        end: Int
+) : Entity(start, end)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
deleted file mode 100644
index 5ee60582..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
+++ /dev/null
@@ -1,380 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.io.Serializable;
-import java.util.List;
-
-/**
- * Users can be anyone or anything. They tweet, follow, create lists, have a home_timeline, can be
- * mentioned, and can be looked up in bulk.
- */
-public class User implements Serializable, Identifiable {
-    private static final long serialVersionUID = 4663450696842173958L;
-    public static final long INVALID_ID = -1L;
-
-    /**
-     * Indicates that the user has an account with "contributor mode" enabled, allowing for Tweets
-     * issued by the user to be co-authored by another account. Rarely true.
-     */
-    @SerializedName("contributors_enabled")
-    public final boolean contributorsEnabled;
-
-    /**
-     * The UTC datetime that the user account was created on Twitter.
-     */
-    @SerializedName("created_at")
-    public final String createdAt;
-
-    /**
-     * When true, indicates that the user has not altered the theme or background of their user
-     * profile.
-     */
-    @SerializedName("default_profile")
-    public final boolean defaultProfile;
-
-    /**
-     * When true, indicates that the user has not uploaded their own avatar and a default egg avatar
-     * is used instead.
-     */
-    @SerializedName("default_profile_image")
-    public final boolean defaultProfileImage;
-
-    /**
-     * Nullable. The user-defined UTF-8 string describing their account.
-     */
-    @SerializedName("description")
-    public final String description;
-
-    /**
-     * Nullable. The logged in user email address if available. Must have permission to access email
-     * address.
-     */
-    @SerializedName("email")
-    public final String email;
-
-    /**
-     * Entities which have been parsed out of the url or description fields defined by the user.
-     * Read more about User Entities.
-     */
-    @SerializedName("entities")
-    public final UserEntities entities;
-
-    /**
-     * The number of tweets this user has favorited in the account's lifetime. British spelling used
-     * in the field name for historical reasons.
-     */
-    @SerializedName("favourites_count")
-    public final int favouritesCount;
-
-    /**
-     * Nullable. Perspectival. When true, indicates that the authenticating user has issued a follow
-     * request to this protected user account.
-     */
-    @SerializedName("follow_request_sent")
-    public final boolean followRequestSent;
-
-    /**
-     * The number of followers this account currently has. Under certain conditions of duress, this
-     * field will temporarily indicate "0."
-     */
-    @SerializedName("followers_count")
-    public final int followersCount;
-
-    /**
-     * The number of users this account is following (AKA their "followings"). Under certain
-     * conditions of duress, this field will temporarily indicate "0."
-     */
-    @SerializedName("friends_count")
-    public final int friendsCount;
-
-    /**
-     * When true, indicates that the user has enabled the possibility of geotagging their Tweets.
-     * This field must be true for the current user to attach geographic data when using
-     * POST statuses / update.
-     */
-    @SerializedName("geo_enabled")
-    public final boolean geoEnabled;
-
-    /**
-     * The integer representation of the unique identifier for this User. This number is greater
-     * than 53 bits and some programming languages may have difficulty/silent defects in
-     * interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use
-     * id_str for fetching the identifier to stay on the safe side. See Twitter IDs, JSON and
-     * Snowflake.
-     */
-    @SerializedName("id")
-    public final long id;
-
-    /**
-     * The string representation of the unique identifier for this User. Implementations should use
-     * this rather than the large, possibly un-consumable integer in id
-     */
-    @SerializedName("id_str")
-    public final String idStr;
-
-    /**
-     * When true, indicates that the user is a participant in Twitter's translator community.
-     */
-    @SerializedName("is_translator")
-    public final boolean isTranslator;
-
-    /**
-     * The BCP 47 code for the user's self-declared user interface language. May or may not have
-     * anything to do with the content of their Tweets.
-     */
-    @SerializedName("lang")
-    public final String lang;
-
-    /**
-     * The number of public lists that this user is a member of.
-     */
-    @SerializedName("listed_count")
-    public final int listedCount;
-
-    /**
-     * Nullable. The user-defined location for this account's profile. Not necessarily a location
-     * nor parseable. This field will occasionally be fuzzily interpreted by the Search service.
-     */
-    @SerializedName("location")
-    public final String location;
-
-    /**
-     * The name of the user, as they've defined it. Not necessarily a person's name. Typically
-     * capped at 20 characters, but subject to change.
-     */
-    @SerializedName("name")
-    public final String name;
-
-    /**
-     * The hexadecimal color chosen by the user for their background.
-     */
-    @SerializedName("profile_background_color")
-    public final String profileBackgroundColor;
-
-    /**
-     * A HTTP-based URL pointing to the background image the user has uploaded for their profile.
-     */
-    @SerializedName("profile_background_image_url")
-    public final String profileBackgroundImageUrl;
-
-    /**
-     * A HTTPS-based URL pointing to the background image the user has uploaded for their profile.
-     */
-    @SerializedName("profile_background_image_url_https")
-    public final String profileBackgroundImageUrlHttps;
-
-    /**
-     * When true, indicates that the user's profile_background_image_url should be tiled when
-     * displayed.
-     */
-    @SerializedName("profile_background_tile")
-    public final boolean profileBackgroundTile;
-
-    /**
-     * The HTTPS-based URL pointing to the standard web representation of the user's uploaded
-     * profile banner. By adding a final path element of the URL, you can obtain different image
-     * sizes optimized for specific displays. In the future, an API method will be provided to serve
-     * these URLs so that you need not modify the original URL. For size variations, please see
-     * User Profile Images and Banners.
-     */
-    @SerializedName("profile_banner_url")
-    public final String profileBannerUrl;
-
-    /**
-     * A HTTP-based URL pointing to the user's avatar image. See User Profile Images and Banners.
-     */
-    @SerializedName("profile_image_url")
-    public final String profileImageUrl;
-
-    /**
-     * A HTTPS-based URL pointing to the user's avatar image.
-     */
-    @SerializedName("profile_image_url_https")
-    public final String profileImageUrlHttps;
-
-    /**
-     * The hexadecimal color the user has chosen to display links with in their Twitter UI.
-     */
-    @SerializedName("profile_link_color")
-    public final String profileLinkColor;
-
-    /**
-     * The hexadecimal color the user has chosen to display sidebar borders with in their Twitter
-     * UI.
-     */
-    @SerializedName("profile_sidebar_border_color")
-    public final String profileSidebarBorderColor;
-
-    /**
-     * The hexadecimal color the user has chosen to display sidebar backgrounds with in their
-     * Twitter UI.
-     */
-    @SerializedName("profile_sidebar_fill_color")
-    public final String profileSidebarFillColor;
-
-    /**
-     * The hexadecimal color the user has chosen to display text with in their Twitter UI.
-     */
-    @SerializedName("profile_text_color")
-    public final String profileTextColor;
-
-    /**
-     * When true, indicates the user wants their uploaded background image to be used.
-     */
-    @SerializedName("profile_use_background_image")
-    public final boolean profileUseBackgroundImage;
-
-    /**
-     * When true, indicates that this user has chosen to protect their Tweets. See About Public and
-     * Protected Tweets.
-     */
-    @SerializedName("protected")
-    public final boolean protectedUser;
-
-    /**
-     * The screen name, handle, or alias that this user identifies themselves with. screen_names are
-     * unique but subject to change. Use id_str as a user identifier whenever possible. Typically a
-     * maximum of 15 characters long, but some historical accounts may exist with longer names.
-     */
-    @SerializedName("screen_name")
-    public final String screenName;
-
-    /**
-     * Indicates that the user would like to see media inline. Somewhat disused.
-     */
-    @SerializedName("show_all_inline_media")
-    public final boolean showAllInlineMedia;
-
-    /**
-     * Nullable. If possible, the user's most recent tweet or retweet. In some circumstances, this
-     * data cannot be provided and this field will be omitted, null, or empty. Perspectival
-     * attributes within tweets embedded within users cannot always be relied upon. See Why are
-     * embedded objects stale or inaccurate?.
-     */
-    @SerializedName("status")
-    public final Tweet status;
-
-    /**
-     * The number of tweets (including retweets) issued by the user.
-     */
-    @SerializedName("statuses_count")
-    public final int statusesCount;
-
-    /**
-     * Nullable. A string describing the Time Zone this user declares themselves within.
-     */
-    @SerializedName("time_zone")
-    public final String timeZone;
-
-    /**
-     * Nullable. A URL provided by the user in association with their profile.
-     */
-    @SerializedName("url")
-    public final String url;
-
-    /**
-     * Nullable. The offset from GMT/UTC in seconds.
-     */
-    @SerializedName("utc_offset")
-    public final int utcOffset;
-
-    /**
-     * When true, indicates that the user has a verified account. See Verified Accounts.
-     */
-    @SerializedName("verified")
-    public final boolean verified;
-
-    /**
-     * When present, indicates a textual representation of the two-letter country codes this user is
-     * withheld from.
-     */
-    @SerializedName("withheld_in_countries")
-    public final List<String> withheldInCountries;
-
-    /**
-     * When present, indicates whether the content being withheld is the "status" or a "user."
-     */
-    @SerializedName("withheld_scope")
-    public final String withheldScope;
-
-    public User(boolean contributorsEnabled, String createdAt, boolean defaultProfile,
-            boolean defaultProfileImage, String description, String emailAddress,
-            UserEntities entities, int favouritesCount, boolean followRequestSent,
-            int followersCount, int friendsCount, boolean geoEnabled, long id, String idStr,
-            boolean isTranslator, String lang, int listedCount, String location, String name,
-            String profileBackgroundColor, String profileBackgroundImageUrl,
-            String profileBackgroundImageUrlHttps, boolean profileBackgroundTile,
-            String profileBannerUrl, String profileImageUrl, String profileImageUrlHttps,
-            String profileLinkColor, String profileSidebarBorderColor,
-            String profileSidebarFillColor, String profileTextColor,
-            boolean profileUseBackgroundImage, boolean protectedUser, String screenName,
-            boolean showAllInlineMedia, Tweet status, int statusesCount, String timeZone,
-            String url, int utcOffset, boolean verified, List<String> withheldInCountries,
-            String withheldScope) {
-        this.contributorsEnabled = contributorsEnabled;
-        this.createdAt = createdAt;
-        this.defaultProfile = defaultProfile;
-        this.defaultProfileImage = defaultProfileImage;
-        this.description = description;
-        this.email = emailAddress;
-        this.entities = entities;
-        this.favouritesCount = favouritesCount;
-        this.followRequestSent = followRequestSent;
-        this.followersCount = followersCount;
-        this.friendsCount = friendsCount;
-        this.geoEnabled = geoEnabled;
-        this.id = id;
-        this.idStr = idStr;
-        this.isTranslator = isTranslator;
-        this.lang = lang;
-        this.listedCount = listedCount;
-        this.location = location;
-        this.name = name;
-        this.profileBackgroundColor = profileBackgroundColor;
-        this.profileBackgroundImageUrl = profileBackgroundImageUrl;
-        this.profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps;
-        this.profileBackgroundTile = profileBackgroundTile;
-        this.profileBannerUrl = profileBannerUrl;
-        this.profileImageUrl = profileImageUrl;
-        this.profileImageUrlHttps = profileImageUrlHttps;
-        this.profileLinkColor = profileLinkColor;
-        this.profileSidebarBorderColor = profileSidebarBorderColor;
-        this.profileSidebarFillColor = profileSidebarFillColor;
-        this.profileTextColor = profileTextColor;
-        this.profileUseBackgroundImage = profileUseBackgroundImage;
-        this.protectedUser = protectedUser;
-        this.screenName = screenName;
-        this.showAllInlineMedia = showAllInlineMedia;
-        this.status = status;
-        this.statusesCount = statusesCount;
-        this.timeZone = timeZone;
-        this.url = url;
-        this.utcOffset = utcOffset;
-        this.verified = verified;
-        this.withheldInCountries = withheldInCountries;
-        this.withheldScope = withheldScope;
-    }
-
-    @Override
-    public long getId() {
-        return this.id;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.kt
new file mode 100644
index 00000000..cf042e64
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.kt
@@ -0,0 +1,276 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models
+
+import com.google.gson.annotations.SerializedName
+
+import java.io.Serializable
+
+/**
+ * Users can be anyone or anything. They tweet, follow, create lists, have a home_timeline, can be
+ * mentioned, and can be looked up in bulk.
+ */
+class User(
+        /**
+         * Indicates that the user has an account with "contributor mode" enabled, allowing for Tweets
+         * issued by the user to be co-authored by another account. Rarely true.
+         */
+        @field:SerializedName("contributors_enabled")
+        val contributorsEnabled: Boolean,
+        /**
+         * The UTC datetime that the user account was created on Twitter.
+         */
+        @field:SerializedName("created_at")
+        val createdAt: String,
+        /**
+         * When true, indicates that the user has not altered the theme or background of their user
+         * profile.
+         */
+        @field:SerializedName("default_profile")
+        val defaultProfile: Boolean,
+        /**
+         * When true, indicates that the user has not uploaded their own avatar and a default egg avatar
+         * is used instead.
+         */
+        @field:SerializedName("default_profile_image")
+        val defaultProfileImage: Boolean,
+        /**
+         * Nullable. The user-defined UTF-8 string describing their account.
+         */
+        @field:SerializedName("description")
+        val description: String,
+        /**
+         * Nullable. The logged in user email address if available. Must have permission to access email
+         * address.
+         */
+        @field:SerializedName("email")
+        val email: String,
+        /**
+         * Entities which have been parsed out of the url or description fields defined by the user.
+         * Read more about User Entities.
+         */
+        @field:SerializedName("entities")
+        val entities: UserEntities,
+        /**
+         * The number of tweets this user has favorited in the account's lifetime. British spelling used
+         * in the field name for historical reasons.
+         */
+        @field:SerializedName("favourites_count")
+        val favouritesCount: Int,
+        /**
+         * Nullable. Perspectival. When true, indicates that the authenticating user has issued a follow
+         * request to this protected user account.
+         */
+        @field:SerializedName("follow_request_sent")
+        val followRequestSent: Boolean,
+        /**
+         * The number of followers this account currently has. Under certain conditions of duress, this
+         * field will temporarily indicate "0."
+         */
+        @field:SerializedName("followers_count")
+        val followersCount: Int,
+        /**
+         * The number of users this account is following (AKA their "followings"). Under certain
+         * conditions of duress, this field will temporarily indicate "0."
+         */
+        @field:SerializedName("friends_count")
+        val friendsCount: Int,
+        /**
+         * When true, indicates that the user has enabled the possibility of geotagging their Tweets.
+         * This field must be true for the current user to attach geographic data when using
+         * POST statuses / update.
+         */
+        @field:SerializedName("geo_enabled")
+        val geoEnabled: Boolean,
+        /**
+         * The integer representation of the unique identifier for this User. This number is greater
+         * than 53 bits and some programming languages may have difficulty/silent defects in
+         * interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use
+         * id_str for fetching the identifier to stay on the safe side. See Twitter IDs, JSON and
+         * Snowflake.
+         */
+        @field:SerializedName("id")
+        override val id: Long,
+        /**
+         * The string representation of the unique identifier for this User. Implementations should use
+         * this rather than the large, possibly un-consumable integer in id
+         */
+        @field:SerializedName("id_str")
+        val idStr: String,
+        /**
+         * When true, indicates that the user is a participant in Twitter's translator community.
+         */
+        @field:SerializedName("is_translator")
+        val isTranslator: Boolean,
+        /**
+         * The BCP 47 code for the user's self-declared user interface language. May or may not have
+         * anything to do with the content of their Tweets.
+         */
+        @field:SerializedName("lang")
+        val lang: String,
+        /**
+         * The number of public lists that this user is a member of.
+         */
+        @field:SerializedName("listed_count")
+        val listedCount: Int,
+        /**
+         * Nullable. The user-defined location for this account's profile. Not necessarily a location
+         * nor parseable. This field will occasionally be fuzzily interpreted by the Search service.
+         */
+        @field:SerializedName("location")
+        val location: String,
+        /**
+         * The name of the user, as they've defined it. Not necessarily a person's name. Typically
+         * capped at 20 characters, but subject to change.
+         */
+        @field:SerializedName("name")
+        val name: String,
+        /**
+         * The hexadecimal color chosen by the user for their background.
+         */
+        @field:SerializedName("profile_background_color")
+        val profileBackgroundColor: String,
+        /**
+         * A HTTP-based URL pointing to the background image the user has uploaded for their profile.
+         */
+        @field:SerializedName("profile_background_image_url")
+        val profileBackgroundImageUrl: String,
+        /**
+         * A HTTPS-based URL pointing to the background image the user has uploaded for their profile.
+         */
+        @field:SerializedName("profile_background_image_url_https")
+        val profileBackgroundImageUrlHttps: String,
+        /**
+         * When true, indicates that the user's profile_background_image_url should be tiled when
+         * displayed.
+         */
+        @field:SerializedName("profile_background_tile")
+        val profileBackgroundTile: Boolean,
+        /**
+         * The HTTPS-based URL pointing to the standard web representation of the user's uploaded
+         * profile banner. By adding a final path element of the URL, you can obtain different image
+         * sizes optimized for specific displays. In the future, an API method will be provided to serve
+         * these URLs so that you need not modify the original URL. For size variations, please see
+         * User Profile Images and Banners.
+         */
+        @field:SerializedName("profile_banner_url")
+        val profileBannerUrl: String,
+        /**
+         * A HTTP-based URL pointing to the user's avatar image. See User Profile Images and Banners.
+         */
+        @field:SerializedName("profile_image_url")
+        val profileImageUrl: String,
+        /**
+         * A HTTPS-based URL pointing to the user's avatar image.
+         */
+        @field:SerializedName("profile_image_url_https")
+        val profileImageUrlHttps: String,
+        /**
+         * The hexadecimal color the user has chosen to display links with in their Twitter UI.
+         */
+        @field:SerializedName("profile_link_color")
+        val profileLinkColor: String,
+        /**
+         * The hexadecimal color the user has chosen to display sidebar borders with in their Twitter
+         * UI.
+         */
+        @field:SerializedName("profile_sidebar_border_color")
+        val profileSidebarBorderColor: String,
+        /**
+         * The hexadecimal color the user has chosen to display sidebar backgrounds with in their
+         * Twitter UI.
+         */
+        @field:SerializedName("profile_sidebar_fill_color")
+        val profileSidebarFillColor: String,
+        /**
+         * The hexadecimal color the user has chosen to display text with in their Twitter UI.
+         */
+        @field:SerializedName("profile_text_color")
+        val profileTextColor: String,
+        /**
+         * When true, indicates the user wants their uploaded background image to be used.
+         */
+        @field:SerializedName("profile_use_background_image")
+        val profileUseBackgroundImage: Boolean,
+        /**
+         * When true, indicates that this user has chosen to protect their Tweets. See About Public and
+         * Protected Tweets.
+         */
+        @field:SerializedName("protected")
+        val protectedUser: Boolean,
+        /**
+         * The screen name, handle, or alias that this user identifies themselves with. screen_names are
+         * unique but subject to change. Use id_str as a user identifier whenever possible. Typically a
+         * maximum of 15 characters long, but some historical accounts may exist with longer names.
+         */
+        @field:SerializedName("screen_name")
+        val screenName: String,
+        /**
+         * Indicates that the user would like to see media inline. Somewhat disused.
+         */
+        @field:SerializedName("show_all_inline_media")
+        val showAllInlineMedia: Boolean,
+        /**
+         * Nullable. If possible, the user's most recent tweet or retweet. In some circumstances, this
+         * data cannot be provided and this field will be omitted, null, or empty. Perspectival
+         * attributes within tweets embedded within users cannot always be relied upon. See Why are
+         * embedded objects stale or inaccurate?.
+         */
+        @field:SerializedName("status")
+        val status: Tweet,
+        /**
+         * The number of tweets (including retweets) issued by the user.
+         */
+        @field:SerializedName("statuses_count")
+        val statusesCount: Int,
+        /**
+         * Nullable. A string describing the Time Zone this user declares themselves within.
+         */
+        @field:SerializedName("time_zone")
+        val timeZone: String,
+        /**
+         * Nullable. A URL provided by the user in association with their profile.
+         */
+        @field:SerializedName("url")
+        val url: String,
+        /**
+         * Nullable. The offset from GMT/UTC in seconds.
+         */
+        @field:SerializedName("utc_offset")
+        val utcOffset: Int,
+        /**
+         * When true, indicates that the user has a verified account. See Verified Accounts.
+         */
+        @field:SerializedName("verified")
+        val verified: Boolean,
+        /**
+         * When present, indicates a textual representation of the two-letter country codes this user is
+         * withheld from.
+         */
+        @field:SerializedName("withheld_in_countries")
+        val withheldInCountries: List<String>,
+        /**
+         * When present, indicates whether the content being withheld is the "status" or a "user."
+         */
+        @field:SerializedName("withheld_scope")
+        val withheldScope: String) : Serializable, Identifiable {
+    companion object {
+        private const val serialVersionUID = 4663450696842173958L
+        val INVALID_ID = -1L
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
index 3483f945..40df1bf0 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
@@ -32,7 +32,7 @@
     private int followersCount;
     private int friendsCount;
     private boolean geoEnabled;
-    private long id = User.INVALID_ID;
+    private long id = User.Companion.getINVALID_ID();
     private String idStr;
     private boolean isTranslator;
     private String lang;
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
index d3aa914d..44a5c174 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
@@ -23,13 +23,13 @@
 import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
 import com.twitter.sdk.android.core.internal.oauth.OAuthUtils;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class AuthTokenAdapterTest  {
@@ -87,12 +87,12 @@ public void setUp() throws Exception {
 
     @Test
     public void testGetAuthTypeString() {
-        assertEquals("oauth1a", AuthTokenAdapter.getAuthTypeString(TwitterAuthToken.class));
+        Assert.assertThat(AuthTokenAdapter.getAuthTypeString(TwitterAuthToken.class), is("oauth1a"));
     }
 
     @Test
     public void testGetAuthTypeString_unregisteredAuthType() {
-        assertEquals("", AuthTokenAdapter.getAuthTypeString(TestAuthToken.class));
+        Assert.assertThat(AuthTokenAdapter.getAuthTypeString(TestAuthToken.class), is(""));
     }
 
     @Test
@@ -100,7 +100,7 @@ public void testSerialize_oauth1aToken() {
         final AuthTokenWrapper authTokenWrapper = new AuthTokenWrapper(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT));
         final String json = gson.toJson(authTokenWrapper);
-        assertEquals(json, JSON_OAUTH1A_TOKEN, json);
+        Assert.assertThat(json, json, is(JSON_OAUTH1A_TOKEN));
     }
 
     @Test
@@ -108,7 +108,7 @@ public void testSerialize_oauth2Token() {
         final AuthTokenWrapper test = new AuthTokenWrapper(
                 OAuthUtils.createOAuth2Token(TOKEN_TYPE, ACCESS_TOKEN, CREATED_AT));
         final String json = gson.toJson(test);
-        assertEquals(json, JSON_OAUTH2_TOKEN, json);
+        Assert.assertThat(json, json, is(JSON_OAUTH2_TOKEN));
     }
 
     @Test
@@ -117,72 +117,72 @@ public void testSerialize_guestAuthToken() {
                 OAuthUtils.createGuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN,
                         CREATED_AT));
         final String json = gson.toJson(test);
-        assertEquals(json, JSON_GUEST_AUTH_TOKEN, json);
+        Assert.assertThat(json, json, is(JSON_GUEST_AUTH_TOKEN));
     }
 
     @Test
     public void testDeserialize_oauth1aToken() {
         final AuthTokenWrapper authTokenWrapper = gson.fromJson(JSON_OAUTH1A_TOKEN,
                 AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof TwitterAuthToken);
+        Assert.assertThat(authTokenWrapper.authToken instanceof TwitterAuthToken, is(true));
         final TwitterAuthToken authToken = (TwitterAuthToken) authTokenWrapper.authToken;
-        assertEquals(TestFixtures.TOKEN, authToken.getToken());
-        assertEquals(TestFixtures.SECRET, authToken.getSecret());
+        Assert.assertThat(authToken.getToken(), is(TestFixtures.TOKEN));
+        Assert.assertThat(authToken.getSecret(), is(TestFixtures.SECRET));
     }
 
     @Test
     public void testDeserialize_oauth2Token() {
         final AuthTokenWrapper authTokenWrapper = gson.fromJson(JSON_OAUTH2_TOKEN,
                 AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof OAuth2Token);
+        Assert.assertThat(authTokenWrapper.authToken instanceof OAuth2Token, is(true));
         final OAuth2Token authToken = (OAuth2Token) authTokenWrapper.authToken;
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
+        Assert.assertThat(authToken.getTokenType(), is(TOKEN_TYPE));
+        Assert.assertThat(authToken.getAccessToken(), is(ACCESS_TOKEN));
     }
 
     @Test
     public void testDeserialize_guestAuthToken() {
         final AuthTokenWrapper authTokenWrapper = gson.fromJson(JSON_GUEST_AUTH_TOKEN,
                 AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof GuestAuthToken);
+        Assert.assertThat(authTokenWrapper.authToken instanceof GuestAuthToken, is(true));
         final GuestAuthToken authToken = (GuestAuthToken) authTokenWrapper.authToken;
-        assertEquals(GUEST_TOKEN, authToken.getGuestToken());
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
+        Assert.assertThat(authToken.getGuestToken(), is(GUEST_TOKEN));
+        Assert.assertThat(authToken.getTokenType(), is(TOKEN_TYPE));
+        Assert.assertThat(authToken.getAccessToken(), is(ACCESS_TOKEN));
     }
 
     @Test
     public void testDeserialize_oauth1aTokenMissingCreatedAt() {
         final AuthTokenWrapper authTokenWrapper = gson.fromJson(
                 JSON_OAUTH1A_TOKEN_MISSING_CREATED_AT, AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof TwitterAuthToken);
+        Assert.assertThat(authTokenWrapper.authToken instanceof TwitterAuthToken, is(true));
         final TwitterAuthToken authToken = (TwitterAuthToken) authTokenWrapper.authToken;
-        assertEquals(TestFixtures.TOKEN, authToken.getToken());
-        assertEquals(TestFixtures.SECRET, authToken.getSecret());
-        assertEquals(0, authToken.getCreatedAt());
+        Assert.assertThat(authToken.getToken(), is(TestFixtures.TOKEN));
+        Assert.assertThat(authToken.getSecret(), is(TestFixtures.SECRET));
+        Assert.assertThat(authToken.getCreatedAt(), is(0));
     }
 
     @Test
     public void testDeserialize_oauth2TokenMissingCreatedAt() {
         final AuthTokenWrapper authTokenWrapper = gson.fromJson(
                 JSON_OAUTH2_TOKEN_MISSING_CREATED_AT, AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof OAuth2Token);
+        Assert.assertThat(authTokenWrapper.authToken instanceof OAuth2Token, is(true));
         final OAuth2Token authToken = (OAuth2Token) authTokenWrapper.authToken;
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-        assertEquals(0, authToken.getCreatedAt());
+        Assert.assertThat(authToken.getTokenType(), is(TOKEN_TYPE));
+        Assert.assertThat(authToken.getAccessToken(), is(ACCESS_TOKEN));
+        Assert.assertThat(authToken.getCreatedAt(), is(0));
     }
 
     @Test
     public void testDeserialize_guestAuthTokenMissingCreatedAt() {
         final AuthTokenWrapper authTokenWrapper = gson.fromJson(
                 JSON_GUEST_AUTH_TOKEN_MISSING_CREATED_AT, AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof GuestAuthToken);
+        Assert.assertThat(authTokenWrapper.authToken instanceof GuestAuthToken, is(true));
         final GuestAuthToken authToken = (GuestAuthToken) authTokenWrapper.authToken;
-        assertEquals(GUEST_TOKEN, authToken.getGuestToken());
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-        assertEquals(0, authToken.getCreatedAt());
+        Assert.assertThat(authToken.getGuestToken(), is(GUEST_TOKEN));
+        Assert.assertThat(authToken.getTokenType(), is(TOKEN_TYPE));
+        Assert.assertThat(authToken.getAccessToken(), is(ACCESS_TOKEN));
+        Assert.assertThat(authToken.getCreatedAt(), is(0));
     }
 
     private static class AuthTokenWrapper {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
index 3d1b732a..a61012bd 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
@@ -19,14 +19,13 @@
 
 import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertSame;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class GuestSessionSerializerTest {
@@ -54,38 +53,38 @@ public void setUp() throws Exception {
 
     @Test
     public void testSerialize_sessionNull() {
-        assertEquals("", serializer.serialize(null));
+        Assert.assertThat(serializer.serialize(null), is(""));
     }
 
     @Test
     public void testSerialize_sessionAuthTokenIsGuestAuthToken() {
         final GuestSession session = new GuestSession(new GuestAuthToken(TEST_TOKEN_TYPE,
                 TEST_ACCESS_TOKEN, TEST_GUEST_TOKEN, CREATED_AT));
-        assertEquals(JSON_SESSION_GUEST, serializer.serialize(session));
+        Assert.assertThat(serializer.serialize(session), is(JSON_SESSION_GUEST));
     }
 
     @Test
     public void testDeserialize_serializedStringNull() {
-        assertEquals(null, serializer.deserialize(null));
+        Assert.assertThat(serializer.deserialize(null), nullValue());
     }
 
     @Test
     public void testDeserialize_serializedStringEmpty() {
-        assertEquals(null, serializer.deserialize(""));
+        Assert.assertThat(serializer.deserialize(""), nullValue());
     }
 
     @Test
     public void testDeserialize_serializedStringAuthTokenIsGuestAuthToken() {
         final GuestSession session = serializer.deserialize(JSON_SESSION_GUEST);
-        assertSame(GuestAuthToken.class, session.getAuthToken().getClass());
-        assertEquals(TEST_TOKEN_TYPE, session.getAuthToken().getTokenType());
-        assertEquals(TEST_ACCESS_TOKEN, session.getAuthToken().getAccessToken());
-        assertEquals(TEST_GUEST_TOKEN, session.getAuthToken().getGuestToken());
+        Assert.assertThat(session.getAuthToken().getClass(), sameInstance(GuestAuthToken.class));
+        Assert.assertThat(session.getAuthToken().getTokenType(), is(TEST_TOKEN_TYPE));
+        Assert.assertThat(session.getAuthToken().getAccessToken(), is(TEST_ACCESS_TOKEN));
+        Assert.assertThat(session.getAuthToken().getGuestToken(), is(TEST_GUEST_TOKEN));
     }
 
     @Test
     public void testDeserialize_serializedStringAuthTokenIsInvalid() {
         final GuestSession session = serializer.deserialize(JSON_SESSION_INVALID_AUTH_TYPE);
-        assertNull(session);
+        Assert.assertThat(session, nullValue());
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/IntentUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/IntentUtilsTest.java
index 08dde86c..3b6816cf 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/IntentUtilsTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/IntentUtilsTest.java
@@ -22,6 +22,7 @@
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -31,8 +32,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -60,7 +60,7 @@ public void testIsActivityAvailable_activitiesAvailable() {
         when(pm.queryIntentActivities(intent, 0)).thenReturn(activities);
         when(context.getPackageManager()).thenReturn(pm);
 
-        assertTrue(IntentUtils.isActivityAvailable(context, intent));
+        Assert.assertThat(IntentUtils.isActivityAvailable(context, intent), is(true));
     }
 
     @Test
@@ -70,7 +70,7 @@ public void testSafeStartActivity() {
         when(context.getPackageManager()).thenReturn(pm);
 
         final Intent intent = new Intent("com.twitter.is.awesome");
-        assertFalse(IntentUtils.safeStartActivity(context, intent));
+        Assert.assertThat(IntentUtils.safeStartActivity(context, intent), is(false));
         verify(context).getPackageManager();
         verify(pm).queryIntentActivities(intent, 0);
     }
@@ -81,7 +81,7 @@ public void testIsActivityAvailable_noActivitiesAvailable() {
                 .thenReturn(Collections.EMPTY_LIST);
         when(context.getPackageManager()).thenReturn(pm);
 
-        assertFalse(IntentUtils.isActivityAvailable(context, intent));
+        Assert.assertThat(IntentUtils.isActivityAvailable(context, intent), is(false));
         verify(context).getPackageManager();
         verify(pm).queryIntentActivities(intent, 0);
     }
@@ -94,7 +94,7 @@ public void testIsActivityAvailable_activityAvailable() {
         when(pm.queryIntentActivities(intent, 0)).thenReturn(activities);
         when(context.getPackageManager()).thenReturn(pm);
 
-        assertTrue(IntentUtils.isActivityAvailable(context, intent));
+        Assert.assertThat(IntentUtils.isActivityAvailable(context, intent), is(true));
         verify(context).getPackageManager();
         verify(pm).queryIntentActivities(intent, 0);
     }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java
index a429aabc..268afd5a 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java
@@ -19,12 +19,13 @@
 
 import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -58,7 +59,7 @@ public void testConstructor_nullAuthConfig() {
             new OAuthSigning(null, authToken);
             fail("Expected IllegalArgumentException to be thrown");
         } catch (IllegalArgumentException e) {
-            assertEquals("authConfig must not be null", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("authConfig must not be null"));
         }
     }
 
@@ -68,7 +69,7 @@ public void testConstructor_nullAuthToken() {
             new OAuthSigning(authConfig, null);
             fail("Expected IllegalArgumentException to be thrown");
         } catch (IllegalArgumentException e) {
-            assertEquals("authToken must not be null", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("authToken must not be null"));
         }
     }
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
index 35a2e406..a3f15dc2 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
@@ -25,6 +25,7 @@
 import com.twitter.sdk.android.core.internal.persistence.SerializationStrategy;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -35,11 +36,10 @@
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.sameInstance;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -55,7 +55,6 @@
     private static final String RESTORED_USER = "restoredUser";
 
     private PreferenceStore preferenceStore;
-    private SerializationStrategy<TwitterSession> mockSerializer;
     private ConcurrentHashMap<Long, TwitterSession> sessionMap;
     private ConcurrentHashMap<Long, PreferenceStoreStrategy<TwitterSession>> storageMap;
     private PreferenceStoreStrategy<TwitterSession> mockActiveSessionStorage;
@@ -64,7 +63,7 @@
     @Before
     public void setUp() throws Exception {
         preferenceStore = new PreferenceStoreImpl(RuntimeEnvironment.application, "testSession");
-        mockSerializer = mock(SerializationStrategy.class);
+        SerializationStrategy<TwitterSession> mockSerializer = mock(SerializationStrategy.class);
         sessionMap = new ConcurrentHashMap<>();
         storageMap = new ConcurrentHashMap<>();
         mockActiveSessionStorage = mock(PreferenceStoreStrategy.class);
@@ -81,19 +80,19 @@ public void tearDown() {
     @Test
     public void testIsSessionPreferenceKey_validKey() {
         final String preferenceKey = PREF_KEY_SESSION + "_" + TestFixtures.USER_ID;
-        assertTrue(sessionManager.isSessionPreferenceKey(preferenceKey));
+        Assert.assertThat(sessionManager.isSessionPreferenceKey(preferenceKey), is(true));
     }
 
     @Test
     public void testIsSessionPreferenceKey_invalidKey() {
-        assertFalse(sessionManager.isSessionPreferenceKey(PREF_RANDOM_KEY));
+        Assert.assertThat(sessionManager.isSessionPreferenceKey(PREF_RANDOM_KEY), is(false));
     }
 
     @Test
     public void testRestoreSession_noSavedSession() {
         when(mockActiveSessionStorage.restore()).thenReturn(null);
         sessionManager.restoreAllSessionsIfNecessary();
-        assertNull(sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), nullValue());
     }
 
     @Test
@@ -101,7 +100,7 @@ public void testRestoreSession_savedSession() {
         final TwitterSession mockSession = mock(TwitterSession.class);
         when(mockActiveSessionStorage.restore()).thenReturn(mockSession);
         sessionManager.restoreAllSessionsIfNecessary();
-        assertEquals(mockSession, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), is(mockSession));
     }
 
     @Test
@@ -128,7 +127,7 @@ public void testRestoreSession_multipleSavedSessions() {
         localSessionManager.restoreAllSessionsIfNecessary();
         assertMapSizes(sessions.length);
         for (TwitterSession session : sessions) {
-            assertEquals(session, localSessionManager.getSession(session.getId()));
+            Assert.assertThat(localSessionManager.getSession(session.getId()), is(session));
         }
     }
 
@@ -147,7 +146,7 @@ public void testRestoreSession_multipleRestoreCalls() {
         final TwitterSession mockSession = mock(TwitterSession.class);
         when(mockActiveSessionStorage.restore()).thenReturn(mockSession);
 
-        assertEquals(mockSession, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), is(mockSession));
         sessionManager.restoreAllSessionsIfNecessary();
 
         // restore should only be called once.
@@ -163,7 +162,7 @@ public void testRestoreSession_afterActiveSessionSetExternally() {
         sessionManager.setActiveSession(mockActiveSession);
         sessionManager.restoreAllSessionsIfNecessary();
 
-        assertEquals(mockActiveSession, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), is(mockActiveSession));
     }
 
     @Test
@@ -172,19 +171,19 @@ public void testGetActiveSession_restoredSession() {
         when(mockActiveSessionStorage.restore()).thenReturn(mockRestoredSession);
 
         final TwitterSession activeSession = sessionManager.getActiveSession();
-        assertEquals(mockRestoredSession, activeSession);
+        Assert.assertThat(activeSession, is(mockRestoredSession));
         verify(mockActiveSessionStorage).restore();
     }
 
     @Test
     public void testGetActiveSession_nullSession() {
-        assertNull(sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), nullValue());
     }
 
     @Test
     public void testGetActiveSession_validSession() {
         final TwitterSession session = setupActiveSessionTest();
-        assertEquals(session, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), is(session));
     }
 
     private TwitterSession setupActiveSessionTest() {
@@ -200,7 +199,7 @@ public void testSetActiveSession_nullSession() {
             sessionManager.setActiveSession(null);
             fail();
         } catch (Exception e) {
-            assertTrue(e instanceof IllegalArgumentException);
+            Assert.assertThat(e instanceof IllegalArgumentException, is(true));
         }
     }
 
@@ -211,13 +210,13 @@ public void testSetActiveSession_validSession() {
         assertMapSizes(numSessionsThisTest);
 
         verify(mockActiveSessionStorage).save(session);
-        assertEquals(session, sessionManager.getActiveSession());
-        assertEquals(session, sessionManager.getSession(session.getId()));
+        Assert.assertThat(sessionManager.getActiveSession(), is(session));
+        Assert.assertThat(sessionManager.getSession(session.getId()), is(session));
     }
 
     private void assertMapSizes(int count) {
-        assertEquals(count, sessionMap.size());
-        assertEquals(count, storageMap.size());
+        Assert.assertThat(sessionMap.size(), is(count));
+        Assert.assertThat(storageMap.size(), is(count));
     }
 
     @Test
@@ -226,7 +225,7 @@ public void testSetActiveSession_differentSession() {
         int numSessionsThisTest = 1;
         assertMapSizes(numSessionsThisTest);
         verify(mockActiveSessionStorage).save(session);
-        assertEquals(session, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), is(session));
 
         final TwitterSession session2 = mock(TwitterSession.class);
         final long differentSessionId = session.getId() + 1;
@@ -235,8 +234,8 @@ public void testSetActiveSession_differentSession() {
         numSessionsThisTest++;
         assertMapSizes(numSessionsThisTest);
         verify(mockActiveSessionStorage).save(session2);
-        assertNotSame(session2, session);
-        assertEquals(session2, sessionManager.getActiveSession());
+        Assert.assertThat(session, not(sameInstance(session2)));
+        Assert.assertThat(sessionManager.getActiveSession(), is(session2));
     }
 
     @Test
@@ -245,7 +244,7 @@ public void testClearActiveSession() {
         sessionManager.clearActiveSession();
         assertMapSizes(0);
         verify(mockActiveSessionStorage).clear();
-        assertNull(sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), nullValue());
     }
 
     @Test
@@ -261,13 +260,13 @@ public void testClearActiveSession_noActiveSession() {
     public void testClearActiveSession_beforeRestoreSession() {
         setupActiveSessionTest();
         sessionManager.clearActiveSession();
-        assertNull(sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), nullValue());
     }
 
     @Test
     public void testGetSession() {
         final TwitterSession session = setupActiveSessionTest();
-        assertEquals(session, sessionManager.getSession(session.getId()));
+        Assert.assertThat(sessionManager.getSession(session.getId()), is(session));
     }
 
     @Test
@@ -276,7 +275,7 @@ public void testGetSession_multipleSessions() {
         final List<TwitterSession> sessions = setupMultipleSessionsTest(count);
         for (int i = 0; i < count; i++) {
             final TwitterSession session = sessions.get(i);
-            assertEquals(session, sessionManager.getSession(session.getId()));
+            Assert.assertThat(sessionManager.getSession(session.getId()), is(session));
         }
     }
 
@@ -298,7 +297,7 @@ public void testSetSession_nullSession() {
             sessionManager.setSession(TEST_SESSION_ID, null);
             fail();
         } catch (Exception e) {
-            assertTrue(e instanceof IllegalArgumentException);
+            Assert.assertThat(e instanceof IllegalArgumentException, is(true));
         }
     }
 
@@ -312,8 +311,8 @@ public void testSetSession_noActiveSession() {
         // Verify that when setSession is called and there is no active session, the specified
         // session becomes the active session.
         verify(mockActiveSessionStorage).save(session);
-        assertEquals(session, sessionManager.getSession(TEST_SESSION_ID));
-        assertEquals(session, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getSession(TEST_SESSION_ID), is(session));
+        Assert.assertThat(sessionManager.getActiveSession(), is(session));
     }
 
     @Test
@@ -324,10 +323,10 @@ public void testSetSession_multipleSessions() {
 
         for (int i = 0; i < count; i++) {
             final TwitterSession session = sessions.get(i);
-            assertEquals(session, sessionManager.getSession(session.getId()));
+            Assert.assertThat(sessionManager.getSession(session.getId()), is(session));
         }
         // Verify that the first session is still the active session.
-        assertEquals(sessions.get(0), sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), is(sessions.get(0)));
     }
 
     @Test
@@ -337,15 +336,15 @@ public void testSetSession_updateExistingSession() {
                 TestFixtures.SCREEN_NAME);
         final long sessionId = session.getId();
         sessionManager.setSession(sessionId, session);
-        assertEquals(session, sessionManager.getSession(sessionId));
-        assertEquals(session, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getSession(sessionId), is(session));
+        Assert.assertThat(sessionManager.getActiveSession(), is(session));
         assertMapSizes(1);
 
         final TwitterSession sessionWithDifferentUserName = new TwitterSession(authToken, sessionId,
                 "differentUserName");
         sessionManager.setSession(sessionId, sessionWithDifferentUserName);
-        assertEquals(sessionWithDifferentUserName, sessionManager.getSession(sessionId));
-        assertEquals(sessionWithDifferentUserName, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getSession(sessionId), is(sessionWithDifferentUserName));
+        Assert.assertThat(sessionManager.getActiveSession(), is(sessionWithDifferentUserName));
         assertMapSizes(1);
     }
 
@@ -365,7 +364,7 @@ public void testSetSession_beforeRestoreSession() {
 
         // We want to make sure that even if restore sessions is called after setSession.
         // session set in setSession will not be overwritten.
-        assertEquals(newSession, sessionManager.getSession(newSession.getId()));
+        Assert.assertThat(sessionManager.getSession(newSession.getId()), is(newSession));
     }
 
     private void setupSessionForRestore(final TwitterSession restoredSession) {
@@ -381,8 +380,8 @@ public void testClearSession() {
         final TwitterSession session = setupActiveSessionTest();
         sessionManager.clearSession(session.getId());
         assertMapSizes(0);
-        assertNull(sessionManager.getActiveSession());
-        assertNull(sessionManager.getSession(session.getId()));
+        Assert.assertThat(sessionManager.getActiveSession(), nullValue());
+        Assert.assertThat(sessionManager.getSession(session.getId()), nullValue());
     }
 
     @Test
@@ -406,10 +405,10 @@ public void testClearSession_multipleSessionsClearFirstSession() {
         sessionManager.clearSession(firstSessionId);
         numSessionsThisTest--;
         assertMapSizes(numSessionsThisTest);
-        assertNull(sessionManager.getSession(firstSessionId));
+        Assert.assertThat(sessionManager.getSession(firstSessionId), nullValue());
         // Make sure the second session is still there
         final long secondSessionId = sessions.get(1).getId();
-        assertEquals(sessions.get(1), sessionManager.getSession(secondSessionId));
+        Assert.assertThat(sessionManager.getSession(secondSessionId), is(sessions.get(1)));
     }
 
     @Test
@@ -424,10 +423,10 @@ public void testClearSession_multipleSessionsClearSecondSession() {
         sessionManager.clearSession(secondSessionId);
         numSessionsThisTest--;
         assertMapSizes(numSessionsThisTest);
-        assertNull(sessionManager.getSession(secondSessionId));
+        Assert.assertThat(sessionManager.getSession(secondSessionId), nullValue());
         // Make sure the first session is still there
         final long firstSessionId = sessions.get(0).getId();
-        assertEquals(sessions.get(0), sessionManager.getSession(firstSessionId));
+        Assert.assertThat(sessionManager.getSession(firstSessionId), is(sessions.get(0)));
     }
 
     @Test
@@ -439,13 +438,12 @@ public void testClearSession_beforeRestoreSession() {
         sessionManager.clearSession(TestFixtures.USER_ID);
         sessionManager.restoreAllSessionsIfNecessary();
 
-        assertNull(sessionManager.getSession(TestFixtures.USER_ID));
+        Assert.assertThat(sessionManager.getSession(TestFixtures.USER_ID), nullValue());
     }
 
     @Test
     public void testGetPrefKey() {
-        assertEquals(PREF_KEY_SESSION + "_" + TEST_SESSION_ID,
-                sessionManager.getPrefKey(TEST_SESSION_ID));
+        Assert.assertThat(sessionManager.getPrefKey(TEST_SESSION_ID), is(PREF_KEY_SESSION + "_" + TEST_SESSION_ID));
     }
 
     @Test
@@ -463,6 +461,6 @@ public void testGetSessionMap_restoresSessionsIfNecessary() {
         final TwitterSession mockSession = mock(TwitterSession.class);
         when(mockActiveSessionStorage.restore()).thenReturn(mockSession);
         sessionManager.getSessionMap();
-        assertEquals(mockSession, sessionManager.getActiveSession());
+        Assert.assertThat(sessionManager.getActiveSession(), is(mockSession));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java
index 4e68c6c3..b75e1428 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java
@@ -20,23 +20,24 @@
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStore;
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreImpl;
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreStrategy;
+
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class PreferenceStoreStrategyTest {
-    private PreferenceStore preferenceStore;
     private PreferenceStoreStrategy<TwitterSession> preferenceStrategy;
 
     @Before
     public void setUp() throws Exception {
-        preferenceStore = new PreferenceStoreImpl(RuntimeEnvironment.application, "testSession");
+        PreferenceStore preferenceStore = new PreferenceStoreImpl(RuntimeEnvironment.application, "testSession");
         preferenceStrategy = new PreferenceStoreStrategy<>(preferenceStore,
                 new TwitterSession.Serializer(), "testSession");
     }
@@ -48,14 +49,14 @@ public void tearDown() {
 
     @Test
     public void testRestore_emptyStore() {
-        assertEquals(null, preferenceStrategy.restore());
+        Assert.assertThat(preferenceStrategy.restore(), nullValue());
     }
 
     @Test
     public void testSaveAndRestore_nullSession() {
         preferenceStrategy.save(null);
         final TwitterSession restoredSession = preferenceStrategy.restore();
-        assertEquals(null, restoredSession);
+        Assert.assertThat(restoredSession, nullValue());
     }
 
     @Test
@@ -65,6 +66,6 @@ public void testSaveAndRestore_session() {
                 TwitterSession.UNKNOWN_USER_NAME);
         preferenceStrategy.save(session);
         final TwitterSession restoredSession = preferenceStrategy.restore();
-        assertEquals(session, restoredSession);
+        Assert.assertThat(restoredSession, is(session));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
index 638e0de5..ee95ca7a 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
@@ -18,12 +18,13 @@
 package com.twitter.sdk.android.core;
 
 import com.twitter.sdk.android.core.models.ApiError;
+
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TwitterApiExceptionTest  {
@@ -42,33 +43,33 @@
     @Test
     public void testParseErrorCode() {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_JSON);
-        assertEquals(API_ERROR_CODE, apiError.code);
-        assertEquals(API_ERROR_MESSAGE, apiError.message);
+        Assert.assertThat(apiError.code, is(API_ERROR_CODE));
+        Assert.assertThat(apiError.message, is(API_ERROR_MESSAGE));
     }
 
     @Test
     public void testParseError_nonJSON() {
-        assertNull(TwitterApiException.parseApiError(API_ERROR_NON_JSON));
+        Assert.assertThat(TwitterApiException.parseApiError(API_ERROR_NON_JSON), nullValue());
     }
 
     @Test
     public void testParseError_noErrorCode() {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERROR_CODE);
-        assertEquals(DEFAULT_ERROR_CODE, apiError.code);
-        assertEquals(API_ERROR_MESSAGE, apiError.message);
+        Assert.assertThat(apiError.code, is(DEFAULT_ERROR_CODE));
+        Assert.assertThat(apiError.message, is(API_ERROR_MESSAGE));
     }
 
     @Test
     public void testParseError_noErrors() {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERRORS);
-        assertNull(apiError);
+        Assert.assertThat(apiError, nullValue());
     }
 
     @Test
     public void testParseError_noMessage() {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERROR_MESSAGE);
-        assertEquals(API_ERROR_CODE, apiError.code);
-        assertEquals(null, apiError.message);
+        Assert.assertThat(apiError.code, is(API_ERROR_CODE));
+        Assert.assertThat(apiError.message, nullValue());
     }
 
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java
index 4631bca2..5e9fa99b 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java
@@ -19,13 +19,13 @@
 
 import android.os.Parcel;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 
 @RunWith(RobolectricTestRunner.class)
@@ -47,30 +47,30 @@ public void testParcelable() {
         parcel.setDataPosition(0);
         final TwitterAuthConfig parceledAuthConfig
                 = TwitterAuthConfig.CREATOR.createFromParcel(parcel);
-        assertEquals(TestFixtures.KEY, parceledAuthConfig.getConsumerKey());
-        assertEquals(TestFixtures.SECRET, parceledAuthConfig.getConsumerSecret());
+        Assert.assertThat(parceledAuthConfig.getConsumerKey(), is(TestFixtures.KEY));
+        Assert.assertThat(parceledAuthConfig.getConsumerSecret(), is(TestFixtures.SECRET));
     }
 
     @Test
     public void testGetRequestCode() {
-        assertEquals(TwitterAuthConfig.DEFAULT_AUTH_REQUEST_CODE, authConfig.getRequestCode());
+        Assert.assertThat(authConfig.getRequestCode(), is(TwitterAuthConfig.DEFAULT_AUTH_REQUEST_CODE));
     }
 
     @Test
     public void testSanitizeAttribute_nullAttribute() {
-        assertNull(TwitterAuthConfig.sanitizeAttribute(null));
+        Assert.assertThat(TwitterAuthConfig.sanitizeAttribute(null), nullValue());
     }
 
     @Test
     public void testSanitizeAttribute_sanitizedString() {
         final String test = "test";
-        assertEquals(test, TwitterAuthConfig.sanitizeAttribute(test));
+        Assert.assertThat(TwitterAuthConfig.sanitizeAttribute(test), is(test));
     }
 
     @Test
     public void testSanitizeAttribute_withWhitespace() {
         final String test = "\ttest    ";
-        assertEquals("test", TwitterAuthConfig.sanitizeAttribute(test));
+        Assert.assertThat(TwitterAuthConfig.sanitizeAttribute(test), is("test"));
     }
 
     @Test
@@ -79,7 +79,7 @@ public void testConstructor_nullKey() {
             new TwitterAuthConfig(null, "secret");
             fail();
         } catch (IllegalArgumentException ie) {
-            assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage());
+            Assert.assertThat(ie.getMessage(), is(NO_PARAM_ERROR_MSG));
         }
     }
 
@@ -89,7 +89,7 @@ public void testConstructor_nullSecret() {
             new TwitterAuthConfig("key", null);
             fail();
         } catch (IllegalArgumentException ie) {
-            assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage());
+            Assert.assertThat(ie.getMessage(), is(NO_PARAM_ERROR_MSG));
         }
     }
 
@@ -99,7 +99,7 @@ public void testConstructor_nullArguments() {
             new TwitterAuthConfig(null, null);
             fail();
         } catch (IllegalArgumentException ie) {
-            assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage());
+            Assert.assertThat(ie.getMessage(), is(NO_PARAM_ERROR_MSG));
         }
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java
deleted file mode 100644
index c3b62e4e..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.os.Parcel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterAuthTokenTest  {
-
-    @Test
-    public void testParcelable() {
-        final TwitterAuthToken authToken = new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET);
-        final Parcel parcel = Parcel.obtain();
-        authToken.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        final TwitterAuthToken parceledAuthToken
-                = TwitterAuthToken.Companion.getCREATOR().createFromParcel(parcel);
-        assertEquals(authToken, parceledAuthToken);
-    }
-
-    @Test
-    public void testIsExpired() {
-        final TwitterAuthToken token = new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET);
-        assertFalse(token.isExpired());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterConfigTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterConfigTest.java
index ea495990..a5aed00f 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterConfigTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterConfigTest.java
@@ -20,6 +20,7 @@
 import android.app.Application;
 import android.content.Context;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
@@ -27,9 +28,7 @@
 
 import java.util.concurrent.ExecutorService;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.when;
 
 public class TwitterConfigTest {
@@ -54,7 +53,7 @@ public void setUp() {
     @Test
     public void testBuilderConstructor_shouldStoreAppContext() {
         final TwitterConfig config = new TwitterConfig.Builder(mockContext).build();
-        assertEquals(mockApplication, config.context);
+        Assert.assertThat(config.context, is(mockApplication));
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -72,11 +71,11 @@ public void testBuilder() {
                 .debug(true)
                 .build();
 
-        assertEquals(mockApplication, config.context);
-        assertEquals(mockExecutorService, config.executorService);
-        assertEquals(mockLogger, config.logger);
-        assertEquals(mockTwitterAuthConfig, config.twitterAuthConfig);
-        assertTrue(config.debug);
+        Assert.assertThat(config.context, is(mockApplication));
+        Assert.assertThat(config.executorService, is(mockExecutorService));
+        Assert.assertThat(config.logger, is(mockLogger));
+        Assert.assertThat(config.twitterAuthConfig, is(mockTwitterAuthConfig));
+        Assert.assertThat(config.debug, is(true));
     }
 
     @Test
@@ -85,11 +84,11 @@ public void testBuilder_withDefaults() {
                 .Builder(mockContext)
                 .build();
 
-        assertEquals(mockApplication, config.context);
-        assertNull(config.executorService);
-        assertNull(config.logger);
-        assertNull(config.twitterAuthConfig);
-        assertNull(config.debug);
+        Assert.assertThat(config.context, is(mockApplication));
+        Assert.assertThat(config.executorService, nullValue());
+        Assert.assertThat(config.logger, nullValue());
+        Assert.assertThat(config.twitterAuthConfig, nullValue());
+        Assert.assertThat(config.debug, nullValue());
     }
 
     @Test(expected = IllegalArgumentException.class)
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java
index 099a1cd5..99ed2bc4 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java
@@ -21,6 +21,7 @@
 import android.content.SharedPreferences;
 import android.database.sqlite.SQLiteDatabase;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -29,9 +30,7 @@
 
 import java.io.File;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @SuppressWarnings("FieldCanBeLocal")
 @RunWith(RobolectricTestRunner.class)
@@ -52,20 +51,20 @@ public void setUp() throws Exception {
     public void testGetDatabasePath() {
         final File file = context.getDatabasePath("a");
         assertValidDirStructure(file);
-        assertTrue(file.getParentFile().exists());
+        Assert.assertThat(file.getParentFile().exists(), is(true));
     }
 
     @Test
     public void testOpenOrCreateDatabase() {
         final SQLiteDatabase db = context.openOrCreateDatabase("b", Context.MODE_PRIVATE, null);
-        assertNotNull(db);
+        Assert.assertThat(db, notNullValue());
     }
 
     @Test
     public void testOpenOrCreateDatabaseWithErrorHandler() {
         final SQLiteDatabase db =
                 context.openOrCreateDatabase("b", Context.MODE_PRIVATE, null, null);
-        assertNotNull(db);
+        Assert.assertThat(db, notNullValue());
     }
 
     @Test
@@ -104,16 +103,16 @@ public void testGetSharedPreferences() {
         final SharedPreferences testPref =
                 testContext.getSharedPreferences(testName, Context.MODE_PRIVATE);
 
-        assertNotNull(pref);
-        assertFalse(pref.equals(testPref));
+        Assert.assertThat(pref, notNullValue());
+        Assert.assertThat(testPref, not(is(pref)));
         pref.edit().putBoolean(testName, true).commit();
-        assertFalse(testPref.getBoolean(testName, false));
+        Assert.assertThat(testPref.getBoolean(testName, false), is(false));
 
     }
 
     private void assertValidDirStructure(File file) {
-        assertNotNull(file);
-        assertTrue(file.getPath().contains(name));
-        assertTrue(file.getPath().contains(ROOT_DIR));
+        Assert.assertThat(file, notNullValue());
+        Assert.assertThat(file.getPath(), containsString(name));
+        Assert.assertThat(file.getPath(), containsString(ROOT_DIR));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java
index d9c33b34..b49c06f5 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java
@@ -17,6 +17,7 @@
 
 package com.twitter.sdk.android.core;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -28,7 +29,7 @@
 
 import okhttp3.Headers;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TwitterRateLimitTest  {
@@ -47,7 +48,7 @@ public void setUp() throws Exception {
     @Test
     public void testConstructor_nonePublic() {
         final Constructor<?>[] constructors = TwitterRateLimit.class.getConstructors();
-        assertEquals(0, constructors.length);
+        Assert.assertThat(constructors.length, is(0));
     }
 
     @Test
@@ -61,16 +62,16 @@ public void testCreator_populatedHeader() {
         headers.put(X_RATE_LIMIT_RESET, reset);
 
         final TwitterRateLimit rateLimit = new TwitterRateLimit(Headers.of(headers));
-        assertEquals(10, rateLimit.getLimit());
-        assertEquals(20, rateLimit.getRemaining());
-        assertEquals(30L, rateLimit.getReset());
+        Assert.assertThat(rateLimit.getLimit(), is(10));
+        Assert.assertThat(rateLimit.getRemaining(), is(20));
+        Assert.assertThat(rateLimit.getReset(), is(30L));
     }
 
     @Test
     public void testCreator_emptyHeader() {
         final TwitterRateLimit rateLimit = new TwitterRateLimit(Headers.of(headers));
-        assertEquals(0, rateLimit.getLimit());
-        assertEquals(0, rateLimit.getRemaining());
-        assertEquals(0, rateLimit.getReset());
+        Assert.assertThat(rateLimit.getLimit(), is(0));
+        Assert.assertThat(rateLimit.getRemaining(), is(0));
+        Assert.assertThat(rateLimit.getReset(), is(0));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java
index 0caeb6d1..ff68daa2 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java
@@ -17,13 +17,13 @@
 
 package com.twitter.sdk.android.core;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.*;
 
 
 @RunWith(RobolectricTestRunner.class)
@@ -63,28 +63,27 @@ public void testDeserialize_sessionWithAuthToken() {
         final TwitterSession newSession = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
                 TwitterSession.UNKNOWN_USER_ID, TwitterSession.UNKNOWN_USER_NAME);
-        assertEquals(session, newSession);
+        Assert.assertThat(newSession, is(session));
     }
 
     @Test
     public void testDeserialize_session() {
         final TwitterSession session = serializer.deserialize(FULL_SESSION_JSON);
-        assertEquals(new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET, CREATED_AT), TestFixtures.USER_ID, TestFixtures.SCREEN_NAME),
-                session);
+        Assert.assertThat(session, is(new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN,
+                TestFixtures.SECRET, CREATED_AT), TestFixtures.USER_ID, TestFixtures.SCREEN_NAME)));
     }
 
     @Test
     public void testDeserialize_sessionWithNullUserName() {
         final TwitterSession session = serializer.deserialize(SESSION_JSON_NULL_USERNAME);
-        assertEquals(new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET, CREATED_AT), TestFixtures.USER_ID, null), session);
+        Assert.assertThat(session, is(new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN,
+                TestFixtures.SECRET, CREATED_AT), TestFixtures.USER_ID, null)));
     }
 
     @Test
     public void testDeserialize_nullSerializedSession() {
         final TwitterSession session = serializer.deserialize(null);
-        assertNull(session);
+        Assert.assertThat(session, nullValue());
     }
 
     @Test
@@ -92,7 +91,7 @@ public void testSerialize_sessionWithAuthToken() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
                 TwitterSession.UNKNOWN_USER_ID, TwitterSession.UNKNOWN_USER_NAME);
-        assertEquals(SESSION_JSON, serializer.serialize(session));
+        Assert.assertThat(serializer.serialize(session), is(SESSION_JSON));
     }
 
     @Test
@@ -100,7 +99,7 @@ public void testSerialize_session() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
                 TestFixtures.USER_ID, TestFixtures.SCREEN_NAME);
-        assertEquals(FULL_SESSION_JSON, serializer.serialize(session));
+        Assert.assertThat(serializer.serialize(session), is(FULL_SESSION_JSON));
     }
 
     @Test
@@ -108,6 +107,6 @@ public void testSerialize_sessionWithNullUserName() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
                 TestFixtures.USER_ID, null);
-        assertEquals(SESSION_JSON_NULL_USERNAME, serializer.serialize(session));
+        Assert.assertThat(serializer.serialize(session), is(SESSION_JSON_NULL_USERNAME));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java
index f7cf3e01..72c12645 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java
@@ -17,10 +17,12 @@
 
 package com.twitter.sdk.android.core;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
 @RunWith(RobolectricTestRunner.class)
@@ -33,7 +35,7 @@ public void testConstructor_noAuthToken() {
                     TwitterSession.UNKNOWN_USER_NAME);
             fail();
         } catch (IllegalArgumentException ie) {
-            assertEquals("AuthToken must not be null.", ie.getMessage());
+            Assert.assertThat(ie.getMessage(), is("AuthToken must not be null."));
         }
     }
 
@@ -45,8 +47,8 @@ public void testEquals_sameObjects() {
         final TwitterSession newSession = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
                 TestFixtures.SCREEN_NAME);
-        assertEquals(session.hashCode(), newSession.hashCode());
-        assertEquals(session, newSession);
+        Assert.assertThat(newSession.hashCode(), is(session.hashCode()));
+        Assert.assertThat(newSession, is(session));
     }
 
     @Test
@@ -57,8 +59,8 @@ public void testEquals_sameObjectsWithNullUserName() {
         final TwitterSession newSession = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
                 null);
-        assertEquals(session.hashCode(), newSession.hashCode());
-        assertEquals(session, newSession);
+        Assert.assertThat(newSession.hashCode(), is(session.hashCode()));
+        Assert.assertThat(newSession, is(session));
     }
 
     @Test
@@ -70,7 +72,7 @@ public void testEquals_diffObjects() {
         final TwitterSession newSession = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), differentUserId,
                 TestFixtures.SCREEN_NAME);
-        assertNotSame(session, newSession);
+        Assert.assertThat(newSession, not(sameInstance(session)));
     }
 
     @Test
@@ -82,7 +84,7 @@ public void testEquals_diffObjectsWithNullUserName() {
         final TwitterSession newSession = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), differentUserId,
                 null);
-        assertNotSame(session, newSession);
+        Assert.assertThat(newSession, not(sameInstance(session)));
     }
 
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterTest.java
index 85fd895d..e5b998d6 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterTest.java
@@ -23,6 +23,7 @@
 import android.content.res.Resources;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -33,10 +34,7 @@
 import java.io.File;
 import java.util.concurrent.ExecutorService;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
@@ -96,12 +94,12 @@ public void testInitialize_withConfig() {
 
         Twitter.initialize(config);
 
-        assertEquals(mockExecutorService, Twitter.getInstance().getExecutorService());
-        assertEquals(mockLogger, Twitter.getLogger());
-        assertEquals(mockTwitterAuthConfig, Twitter.getInstance().getTwitterAuthConfig());
-        assertNotNull(Twitter.getInstance().getIdManager());
-        assertNotNull(Twitter.getInstance().getActivityLifecycleManager());
-        assertTrue(Twitter.getInstance().isDebug());
+        Assert.assertThat(Twitter.getInstance().getExecutorService(), is(mockExecutorService));
+        Assert.assertThat(Twitter.getLogger(), is(mockLogger));
+        Assert.assertThat(Twitter.getInstance().getTwitterAuthConfig(), is(mockTwitterAuthConfig));
+        Assert.assertThat(Twitter.getInstance().getIdManager(), notNullValue());
+        Assert.assertThat(Twitter.getInstance().getActivityLifecycleManager(), notNullValue());
+        Assert.assertThat(Twitter.getInstance().isDebug(), is(true));
 
         verifyContext(Twitter.getInstance().getContext(TEST_PACKAGE_NAME));
     }
@@ -110,24 +108,24 @@ public void testInitialize_withConfig() {
     public void testInitialize_withDefaults() {
         Twitter.initialize(mockContext);
 
-        assertNotNull(Twitter.getInstance().getExecutorService());
-        assertNotNull(Twitter.getInstance().getIdManager());
-        assertNotNull(Twitter.getInstance().getActivityLifecycleManager());
-        assertEquals(Twitter.DEFAULT_LOGGER, Twitter.getLogger());
-        assertFalse(Twitter.getInstance().isDebug());
+        Assert.assertThat(Twitter.getInstance().getExecutorService(), notNullValue());
+        Assert.assertThat(Twitter.getInstance().getIdManager(), notNullValue());
+        Assert.assertThat(Twitter.getInstance().getActivityLifecycleManager(), notNullValue());
+        Assert.assertThat(Twitter.getLogger(), is(Twitter.DEFAULT_LOGGER));
+        Assert.assertThat(Twitter.getInstance().isDebug(), is(false));
 
         final TwitterAuthConfig authConfig = Twitter.getInstance().getTwitterAuthConfig();
-        assertNotNull(authConfig);
-        assertEquals(TestFixtures.KEY, authConfig.getConsumerKey());
-        assertEquals(TestFixtures.SECRET, authConfig.getConsumerSecret());
+        Assert.assertThat(authConfig, notNullValue());
+        Assert.assertThat(authConfig.getConsumerKey(), is(TestFixtures.KEY));
+        Assert.assertThat(authConfig.getConsumerSecret(), is(TestFixtures.SECRET));
 
         verifyContext(Twitter.getInstance().getContext(TEST_PACKAGE_NAME));
     }
 
     private void verifyContext(Context context) {
-        assertNotNull(context);
-        assertTrue(context instanceof TwitterContext);
-        assertTrue(context.getFilesDir().getAbsolutePath().endsWith(TEST_PATH_SUFFIX));
+        Assert.assertThat(context, notNullValue());
+        Assert.assertThat(context instanceof TwitterContext, is(true));
+        Assert.assertThat(context.getFilesDir().getAbsolutePath().endsWith(TEST_PATH_SUFFIX), is(true));
     }
 
     @Test(expected = IllegalStateException.class)
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
index 3f3a5cc2..087a5d93 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
@@ -28,20 +28,19 @@
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterSession;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.CoreMatchers.is;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(RobolectricTestRunner.class)
-public class AuthHandlerTest  {
+public class AuthHandlerTest {
     private static final TwitterAuthConfig AUTH_CONFIG
             = new TwitterAuthConfig("consumerKey", "consumerSecret");
     private static final int TEST_REQUEST_CODE = 1;
@@ -62,15 +61,15 @@ public void testHandleOnActivityResult_resultCodeOK() {
                         .putExtra(AuthHandler.EXTRA_SCREEN_NAME, TestFixtures.SCREEN_NAME)
                         .putExtra(AuthHandler.EXTRA_USER_ID, TestFixtures.USER_ID));
 
-        assertTrue(result);
+        Assert.assertThat(result, is(true));
         final ArgumentCaptor<Result> argCaptor = ArgumentCaptor.forClass(Result.class);
         verify(mockCallback).success(argCaptor.capture());
         final TwitterSession session = (TwitterSession) argCaptor.getValue().getData();
         final TwitterAuthToken authToken = session.getAuthToken();
-        assertEquals(TestFixtures.TOKEN, authToken.getToken());
-        assertEquals(TestFixtures.SECRET, authToken.getSecret());
-        assertEquals(TestFixtures.SCREEN_NAME, session.getUserName());
-        assertEquals(TestFixtures.USER_ID, session.getUserId());
+        Assert.assertThat(authToken.getToken(), is(TestFixtures.TOKEN));
+        Assert.assertThat(authToken.getSecret(), is(TestFixtures.SECRET));
+        Assert.assertThat(session.getUserName(), is(TestFixtures.SCREEN_NAME));
+        Assert.assertThat(session.getUserId(), is(TestFixtures.USER_ID));
     }
 
     @Test
@@ -85,16 +84,16 @@ public void testHandleOnActivityResult_resultCodeCancel() {
                 Activity.RESULT_CANCELED, new Intent().putExtra(AuthHandler.EXTRA_AUTH_ERROR,
                         authException));
 
-        assertTrue(result);
+        Assert.assertThat(result, is(true));
         assertCallbackFailureErrorMsg(mockCallback, authException.getMessage());
     }
 
     private void assertCallbackFailureErrorMsg(Callback<TwitterSession> mockCallback,
-            String expectedErrorMsg) {
+                                               String expectedErrorMsg) {
         final ArgumentCaptor<TwitterAuthException> argCaptor
                 = ArgumentCaptor.forClass(TwitterAuthException.class);
         verify(mockCallback).failure(argCaptor.capture());
-        assertEquals(expectedErrorMsg, argCaptor.getValue().getMessage());
+        Assert.assertThat(argCaptor.getValue().getMessage(), is(expectedErrorMsg));
     }
 
     @Test
@@ -109,7 +108,7 @@ public void testHandleOnActivityResult_resultCodeError() {
                 AuthHandler.RESULT_CODE_ERROR, new Intent().putExtra(AuthHandler.EXTRA_AUTH_ERROR,
                         authException));
 
-        assertTrue(result);
+        Assert.assertThat(result, is(true));
         assertCallbackFailureErrorMsg(mockCallback, authException.getMessage());
     }
 
@@ -123,7 +122,7 @@ public void testHandleOnActivityResult_resultCodeErrorDataNull() {
         final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
                 AuthHandler.RESULT_CODE_ERROR, null);
 
-        assertTrue(result);
+        Assert.assertThat(result, is(true));
         assertCallbackFailureErrorMsg(mockCallback, "Authorize failed.");
     }
 
@@ -137,7 +136,7 @@ public void testHandleOnActivityResult_resultCodeErrorDataWithNoAuthError() {
         final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
                 AuthHandler.RESULT_CODE_ERROR, new Intent());
 
-        assertTrue(result);
+        Assert.assertThat(result, is(true));
         assertCallbackFailureErrorMsg(mockCallback, "Authorize failed.");
     }
 
@@ -151,7 +150,7 @@ public void testHandleOnActivityResult_unrecognizedRequestCode() {
         final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE + 1,
                 Activity.RESULT_CANCELED, null);
 
-        assertFalse(result);
+        Assert.assertThat(result, is(false));
         verifyZeroInteractions(mockCallback);
     }
 
@@ -161,7 +160,7 @@ public void testHandleOnActivityResult_nullCallback() {
         final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
                 Activity.RESULT_OK, null);
 
-        assertTrue(result);
+        Assert.assertThat(result, is(true));
     }
 
     private AuthHandler newAuthHandler(Callback<TwitterSession> callback) {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthStateTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthStateTest.java
index cdb03b5a..d19d4509 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthStateTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthStateTest.java
@@ -22,15 +22,14 @@
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.nullValue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -52,9 +51,9 @@ public void setUp() throws Exception {
     public void testBeginAuthorize() {
         final AuthState authState = new AuthState();
         final boolean result = authState.beginAuthorize(mockActivity, mockAuthHandler);
-        assertTrue(result);
-        assertTrue(authState.isAuthorizeInProgress());
-        assertEquals(mockAuthHandler, authState.getAuthHandler());
+        Assert.assertThat(result, is(true));
+        Assert.assertThat(authState.isAuthorizeInProgress(), is(true));
+        Assert.assertThat(authState.getAuthHandler(), is(mockAuthHandler));
     }
 
     @Test
@@ -65,18 +64,18 @@ public void testBeginAuthorize_authorizeFails() {
         final boolean result = authState.beginAuthorize(mockActivity, mockAuthHandler);
         // Verify that attempting to begin authorize fails if the AuthHandler#authorize returns
         // false.
-        assertFalse(result);
-        assertFalse(authState.isAuthorizeInProgress());
-        assertNull(authState.getAuthHandler());
+        Assert.assertThat(result, is(false));
+        Assert.assertThat(authState.isAuthorizeInProgress(), is(false));
+        Assert.assertThat(authState.getAuthHandler(), nullValue());
     }
 
     @Test
     public void testBeginAuthorize_authorizeInProgress() {
         final AuthState authState = new AuthState();
         final boolean result = authState.beginAuthorize(mockActivity, mockAuthHandler);
-        assertTrue(result);
+        Assert.assertThat(result, is(true));
         // Verify that attempting to begin another authorize fails since one is already in progress.
-        assertFalse(authState.beginAuthorize(mockActivity, mockAuthHandler));
+        Assert.assertThat(authState.beginAuthorize(mockActivity, mockAuthHandler), is(false));
     }
 
     @Test
@@ -94,22 +93,22 @@ public boolean authorize(Activity activity) {
                         return true;
                     }
                 });
-        assertFalse(result);
+        Assert.assertThat(result, is(false));
     }
 
     @Test
     public void testEndAuthorize() {
         final AuthState authState = new AuthState();
         final boolean result = authState.beginAuthorize(mockActivity, mockAuthHandler);
-        assertTrue(result);
-        assertTrue(authState.isAuthorizeInProgress());
-        assertEquals(mockAuthHandler, authState.getAuthHandler());
+        Assert.assertThat(result, is(true));
+        Assert.assertThat(authState.isAuthorizeInProgress(), is(true));
+        Assert.assertThat(authState.getAuthHandler(), is(mockAuthHandler));
 
         authState.endAuthorize();
 
         // Verify that end authorize resets everything.
-        assertFalse(authState.isAuthorizeInProgress());
-        assertNull(authState.getAuthHandler());
+        Assert.assertThat(authState.isAuthorizeInProgress(), is(false));
+        Assert.assertThat(authState.getAuthHandler(), nullValue());
     }
 
     @Test
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthControllerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthControllerTest.java
index d49a18c2..94445fdc 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthControllerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthControllerTest.java
@@ -38,14 +38,14 @@
 import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
 import com.twitter.sdk.android.core.internal.oauth.OAuthResponse;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -95,7 +95,7 @@ public void testNewRequestTempTokenCallback_success() {
         final OAuthResponse oAuthResponse = new OAuthResponse(mockRequestToken, null, 0L);
         callback.success(new Result<>(oAuthResponse, null));
 
-        assertEquals(mockRequestToken, controller.requestToken);
+        Assert.assertThat(controller.requestToken, is(mockRequestToken));
         verify(mockOAuth1aService).getAuthorizeUrl(eq(mockRequestToken));
     }
 
@@ -114,8 +114,8 @@ private void verifyOnCompleteWithError(String expectedMsg) {
         final Intent data = intentArgCaptor.getValue();
         final TwitterAuthException authException
                 = (TwitterAuthException) data.getSerializableExtra(AuthHandler.EXTRA_AUTH_ERROR);
-        assertNull(authException.getCause());
-        assertEquals(expectedMsg, authException.getMessage());
+        Assert.assertThat(authException.getCause(), nullValue());
+        Assert.assertThat(authException.getMessage(), is(expectedMsg));
     }
 
     @Test
@@ -127,7 +127,7 @@ public void testHandleAuthError() {
         verify(mockListener).onComplete(eq(AuthHandler.RESULT_CODE_ERROR),
                 intentArgCaptor.capture());
         final Intent data = intentArgCaptor.getValue();
-        assertEquals(mockException, data.getSerializableExtra(AuthHandler.EXTRA_AUTH_ERROR));
+        Assert.assertThat(data.getSerializableExtra(AuthHandler.EXTRA_AUTH_ERROR), is(mockException));
     }
 
     @Test
@@ -157,10 +157,10 @@ public void testNewAccessTokenCallback_success() {
         final ArgumentCaptor<Intent> intentArgCaptor = ArgumentCaptor.forClass(Intent.class);
         verify(mockListener).onComplete(eq(Activity.RESULT_OK), intentArgCaptor.capture());
         final Intent data = intentArgCaptor.getValue();
-        assertEquals(TestFixtures.SCREEN_NAME, data.getStringExtra(AuthHandler.EXTRA_SCREEN_NAME));
-        assertEquals(TestFixtures.USER_ID, data.getLongExtra(AuthHandler.EXTRA_USER_ID, 0L));
-        assertEquals(TestFixtures.TOKEN, data.getStringExtra(AuthHandler.EXTRA_TOKEN));
-        assertEquals(TestFixtures.SECRET, data.getStringExtra(AuthHandler.EXTRA_TOKEN_SECRET));
+        Assert.assertThat(data.getStringExtra(AuthHandler.EXTRA_SCREEN_NAME), is(TestFixtures.SCREEN_NAME));
+        Assert.assertThat(data.getLongExtra(AuthHandler.EXTRA_USER_ID, 0L), is(TestFixtures.USER_ID));
+        Assert.assertThat(data.getStringExtra(AuthHandler.EXTRA_TOKEN), is(TestFixtures.TOKEN));
+        Assert.assertThat(data.getStringExtra(AuthHandler.EXTRA_TOKEN_SECRET), is(TestFixtures.SECRET));
     }
 
     @Test
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthHandlerTest.java
index 6af47307..9db253f0 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthHandlerTest.java
@@ -25,12 +25,13 @@
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyInt;
 import static org.mockito.Mockito.doNothing;
@@ -69,6 +70,6 @@ public void testAuthorize() {
     public void testNewIntent() {
         final Activity mockActivity = mock(Activity.class);
         final Intent intent = authHandler.newIntent(mockActivity);
-        assertEquals(mockAuthConfig, intent.getParcelableExtra(OAuthActivity.EXTRA_AUTH_CONFIG));
+        Assert.assertThat(intent.getParcelableExtra(OAuthActivity.EXTRA_AUTH_CONFIG), is(mockAuthConfig));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebViewClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebViewClientTest.java
index 1954687a..69241824 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebViewClientTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebViewClientTest.java
@@ -24,13 +24,14 @@
 
 import com.twitter.sdk.android.core.TestFixtures;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -84,10 +85,10 @@ public void testShouldOverrideUrlLoading_urlStartsWithCompleteUrl() {
         verify(mockListener).onSuccess(bundleArgCaptor.capture());
 
         final Bundle bundle = bundleArgCaptor.getValue();
-        assertEquals(EXPECTED_VERSION_VALUE, bundle.getString(EXPECTED_VERSION_KEY));
-        assertEquals(EXPECTED_APP_VALUE, bundle.getString(EXPECTED_APP_KEY));
-        assertEquals(EXPECTED_OAUTH_TOKEN_VALUE, bundle.getString(EXPECTED_OAUTH_TOKEN_KEY));
-        assertEquals(EXPECTED_OAUTH_VERIFIER_VALUE, bundle.getString(EXPECTED_OAUTH_VERIFIER_KEY));
+        Assert.assertThat(bundle.getString(EXPECTED_VERSION_KEY), is(EXPECTED_VERSION_VALUE));
+        Assert.assertThat(bundle.getString(EXPECTED_APP_KEY), is(EXPECTED_APP_VALUE));
+        Assert.assertThat(bundle.getString(EXPECTED_OAUTH_TOKEN_KEY), is(EXPECTED_OAUTH_TOKEN_VALUE));
+        Assert.assertThat(bundle.getString(EXPECTED_OAUTH_VERIFIER_KEY), is(EXPECTED_OAUTH_VERIFIER_VALUE));
     }
 
     @Test
@@ -120,8 +121,8 @@ private void verifyOnError(int expectedErrorCode, String expectedErrorDesc,
         verify(mockListener).onError(exceptionArgCaptor.capture());
 
         final WebViewException exception = exceptionArgCaptor.getValue();
-        assertEquals(expectedErrorCode, exception.getErrorCode());
-        assertEquals(expectedErrorDesc, exception.getMessage());
-        assertEquals(expectedFailingUrl, exception.getFailingUrl());
+        Assert.assertThat(exception.getErrorCode(), is(expectedErrorCode));
+        Assert.assertThat(exception.getMessage(), is(expectedErrorDesc));
+        Assert.assertThat(exception.getFailingUrl(), is(expectedFailingUrl));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java
index c8cdad4f..eafa8608 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java
@@ -25,6 +25,7 @@
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -32,8 +33,7 @@
 
 import java.util.Collections;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.doThrow;
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
     public void testIsAvailable_twitterInstalled() throws PackageManager.NameNotFoundException {
         final Context mockContext = mock(Context.class);
         TestUtils.setupTwitterInstalled(mockContext, SSOAuthHandler.TWITTER_SIGNATURE);
-        assertTrue(SSOAuthHandler.isAvailable(mockContext));
+        Assert.assertThat(SSOAuthHandler.isAvailable(mockContext), is(true));
     }
 
     @Test
@@ -67,7 +67,7 @@ public void testIsAvailable_twitterInstalledInvalidSignature()
             throws PackageManager.NameNotFoundException {
         final Context mockContext = mock(Context.class);
         TestUtils.setupTwitterInstalled(mockContext, INVALID_SIGNATURE);
-        assertFalse(SSOAuthHandler.isAvailable(mockContext));
+        Assert.assertThat(SSOAuthHandler.isAvailable(mockContext), is(false));
     }
 
     @Test
@@ -76,7 +76,7 @@ public void testIsAvailable_twitterInstalledWithValidAndInvalidSignature()
         final Context mockContext = mock(Context.class);
         TestUtils.setupTwitterInstalled(mockContext, SSOAuthHandler.TWITTER_SIGNATURE,
                 INVALID_SIGNATURE);
-        assertFalse(SSOAuthHandler.isAvailable(mockContext));
+        Assert.assertThat(SSOAuthHandler.isAvailable(mockContext), is(false));
     }
 
     @Test
@@ -84,7 +84,7 @@ public void testIsAvailable_twitterDogfoodInstalled()
             throws PackageManager.NameNotFoundException {
         final Context mockContext = mock(Context.class);
         TestUtils.setupTwitterDogfoodInstalled(mockContext, SSOAuthHandler.DOGFOOD_SIGNATURE);
-        assertTrue(SSOAuthHandler.isAvailable(mockContext));
+        Assert.assertThat(SSOAuthHandler.isAvailable(mockContext), is(true));
     }
 
     @Test
@@ -92,21 +92,21 @@ public void testIsAvailable_twitterDogfoodInstalledInvalidSignature()
             throws PackageManager.NameNotFoundException {
         final Context mockContext = mock(Context.class);
         TestUtils.setupTwitterDogfoodInstalled(mockContext, INVALID_SIGNATURE);
-        assertFalse(SSOAuthHandler.isAvailable(mockContext));
+        Assert.assertThat(SSOAuthHandler.isAvailable(mockContext), is(false));
     }
 
     @Test
     public void testIsAvailable_noSSOAppsInstalled() throws PackageManager.NameNotFoundException {
         final Context mockContext = mock(Context.class);
         TestUtils.setupNoSSOAppInstalled(mockContext);
-        assertFalse(SSOAuthHandler.isAvailable(mockContext));
+        Assert.assertThat(SSOAuthHandler.isAvailable(mockContext), is(false));
     }
 
     @Test
     public void testAuthorize_twitterInstalled() throws PackageManager.NameNotFoundException {
         final Activity mockActivity = mock(Activity.class);
         TestUtils.setupTwitterInstalled(mockActivity, SSOAuthHandler.TWITTER_SIGNATURE);
-        assertTrue(ssoAuthHandler.authorize(mockActivity));
+        Assert.assertThat(ssoAuthHandler.authorize(mockActivity), is(true));
     }
 
     @Test
@@ -114,7 +114,7 @@ public void testAuthorize_twitterInstalledInvalidSignature()
             throws PackageManager.NameNotFoundException {
         final Activity mockActivity = mock(Activity.class);
         TestUtils.setupTwitterInstalled(mockActivity, INVALID_SIGNATURE);
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
+        Assert.assertThat(ssoAuthHandler.authorize(mockActivity), is(false));
     }
 
     @Test
@@ -122,7 +122,7 @@ public void testAuthorize_twitterDogfoodInstalled()
             throws PackageManager.NameNotFoundException {
         final Activity mockActivity = mock(Activity.class);
         TestUtils.setupTwitterDogfoodInstalled(mockActivity, SSOAuthHandler.DOGFOOD_SIGNATURE);
-        assertTrue(ssoAuthHandler.authorize(mockActivity));
+        Assert.assertThat(ssoAuthHandler.authorize(mockActivity), is(true));
     }
 
     @Test
@@ -130,7 +130,7 @@ public void testAuthorize_twitterDogfoodInstalledInvalidSignature()
             throws PackageManager.NameNotFoundException {
         final Activity mockActivity = mock(Activity.class);
         TestUtils.setupTwitterDogfoodInstalled(mockActivity, INVALID_SIGNATURE);
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
+        Assert.assertThat(ssoAuthHandler.authorize(mockActivity), is(false));
     }
 
     @Test
@@ -140,14 +140,14 @@ public void testAuthorize_twitterInstalledNoSsoActivity()
         TestUtils.setupTwitterInstalled(mockActivity, SSOAuthHandler.TWITTER_SIGNATURE);
         when(mockActivity.getPackageManager().queryIntentActivities(any(Intent.class),
                 anyInt())).thenReturn(Collections.emptyList());
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
+        Assert.assertThat(ssoAuthHandler.authorize(mockActivity), is(false));
     }
 
     @Test
     public void testAuthorize_noSSOAppsInstalled() throws PackageManager.NameNotFoundException {
         final Activity mockActivity = mock(Activity.class);
         TestUtils.setupNoSSOAppInstalled(mockActivity);
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
+        Assert.assertThat(ssoAuthHandler.authorize(mockActivity), is(false));
     }
 
     @Test
@@ -157,6 +157,6 @@ public void testAuthorize_startActivityForResultThrowsException()
         TestUtils.setupTwitterInstalled(mockActivity, SSOAuthHandler.TWITTER_SIGNATURE);
         doThrow(new RuntimeException()).when(mockActivity)
                 .startActivityForResult(any(Intent.class), eq(REQUEST_CODE));
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
+        Assert.assertThat(ssoAuthHandler.authorize(mockActivity), is(false));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java
index 56e65c77..68b2cc52 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java
@@ -38,6 +38,7 @@
 import com.twitter.sdk.android.core.models.UserBuilder;
 import com.twitter.sdk.android.core.services.AccountService;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -49,7 +50,7 @@
 import retrofit2.Call;
 import retrofit2.mock.Calls;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyBoolean;
@@ -68,7 +69,6 @@
     private static final int TEST_REQUEST_CODE = 100;
     private static final String TEST_EMAIL = "foo@twitter.com";
 
-    private Context mockContext;
     private TwitterCore mockTwitterCore;
     private TwitterAuthConfig mockAuthConfig;
     private SessionManager<TwitterSession> mockSessionManager;
@@ -79,7 +79,7 @@
 
     @Before
     public void setUp() throws Exception {
-        mockContext = mock(Context.class);
+        Context mockContext = mock(Context.class);
         when(mockContext.getPackageName()).thenReturn(getClass().getPackage().toString());
 
         mockTwitterCore = mock(TwitterCore.class);
@@ -96,7 +96,7 @@ public void setUp() throws Exception {
 
     @Test
     public void testGetRequestCode() {
-        assertEquals(TEST_REQUEST_CODE, authClient.getRequestCode());
+        Assert.assertThat(authClient.getRequestCode(), is(TEST_REQUEST_CODE));
     }
 
     @Test
@@ -105,7 +105,7 @@ public void testAuthorize_activityNull() {
             authClient.authorize(null, mock(Callback.class));
             fail("Expected IllegalArgumentException to be thrown");
         } catch (IllegalArgumentException e) {
-            assertEquals("Activity must not be null.", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("Activity must not be null."));
         }
     }
 
@@ -125,7 +125,7 @@ public void testAuthorize_callbackNull() {
             authClient.authorize(mock(Activity.class), null);
             fail("Expected IllegalArgumentException to be thrown");
         } catch (IllegalArgumentException e) {
-            assertEquals("Callback must not be null.", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("Callback must not be null."));
         }
     }
 
@@ -198,7 +198,7 @@ public void testAuthorize_bothSsoAndOAuthFail() throws PackageManager.NameNotFou
         final ArgumentCaptor<TwitterAuthException> argCaptor
                 = ArgumentCaptor.forClass(TwitterAuthException.class);
         verify(mockCallback).failure(argCaptor.capture());
-        assertEquals("Authorize failed.", argCaptor.getValue().getMessage());
+        Assert.assertThat(argCaptor.getValue().getMessage(), is("Authorize failed."));
     }
 
     @Test
@@ -312,7 +312,7 @@ public void testRequestEmail_withSuccess() {
         authClient.requestEmail(mock(TwitterSession.class), new Callback<String>() {
             @Override
             public void success(Result<String> result) {
-                assertEquals(TEST_EMAIL, result.getData());
+                Assert.assertThat(result.getData(), is(TEST_EMAIL));
             }
 
             @Override
@@ -336,7 +336,7 @@ public void success(Result<String> result) {
 
             @Override
             public void failure(TwitterException exception) {
-                assertEquals(exception.getCause(), networkException);
+                Assert.assertThat(networkException, is(exception.getCause()));
             }
         });
     }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java
index cc0a5504..00cdc24e 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java
@@ -17,6 +17,7 @@
 
 package com.twitter.sdk.android.core.internal;
 
+import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.concurrent.Callable;
@@ -24,7 +25,7 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.ThreadFactory;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.mock;
 
 public class ExecutorUtilsTest {
@@ -36,7 +37,7 @@ public void testBuildSingleThreadScheduledExecutorService() throws Exception {
         final ExecutorService service =
                 ExecutorUtils.buildSingleThreadScheduledExecutorService(THREAD_FACTORY_NAME);
         final Future<String> future = service.submit(new ThreadNameCallable());
-        assertEquals(FIRST_THREAD_NAME, future.get());
+        Assert.assertThat(future.get(), is(FIRST_THREAD_NAME));
     }
 
     @Test
@@ -44,7 +45,7 @@ public void testBuildThreadScheduledExecutorService() throws Exception {
         final ExecutorService service =
                 ExecutorUtils.buildThreadPoolExecutorService(THREAD_FACTORY_NAME);
         final Future<String> future = service.submit(new ThreadNameCallable());
-        assertEquals(FIRST_THREAD_NAME, future.get());
+        Assert.assertThat(future.get(), is(FIRST_THREAD_NAME));
     }
 
     @Test
@@ -64,7 +65,7 @@ private void verifyGetNamedThreadFactory(String threadFactorName) {
         for (int i = 0; i < 2; i++) {
             thread = threadFactory.newThread(mock(Runnable.class));
             // Thread identifier starts from 1
-            assertEquals(threadFactorName + (i + 1), thread.getName());
+            Assert.assertThat(thread.getName(), is(threadFactorName + (i + 1)));
         }
     }
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/IdManagerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/IdManagerTest.java
index 1f25cd69..1f4bd007 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/IdManagerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/IdManagerTest.java
@@ -23,6 +23,7 @@
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStore;
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreImpl;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -34,9 +35,7 @@
 import static com.twitter.sdk.android.core.internal.IdManager.ADVERTISING_PREFERENCES;
 import static com.twitter.sdk.android.core.internal.IdManager.PREFKEY_INSTALLATION_UUID;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
@@ -69,34 +68,34 @@ public void setUp() throws Exception {
 
     @Test
     public void testGetAppIdentifier() {
-        assertEquals(TEST_PACKAGE, idManager.getAppIdentifier());
+        Assert.assertThat(idManager.getAppIdentifier(), is(TEST_PACKAGE));
     }
 
     @Test
     public void testGetOsVersionString() {
-        assertEquals(TEST_VERSION, idManager.getOsVersionString());
+        Assert.assertThat(idManager.getOsVersionString(), is(TEST_VERSION));
     }
 
     @Test
     public void testGetAdvertisingId() {
-        assertEquals(TEST_AD_ID, idManager.getAdvertisingId());
-        assertTrue(idManager.fetchedAdvertisingInfo);
+        Assert.assertThat(idManager.getAdvertisingId(), is(TEST_AD_ID));
+        Assert.assertThat(idManager.fetchedAdvertisingInfo, is(true));
     }
 
     @Test
     public void testIsLimitAdTrackingEnabled() {
-        assertTrue(idManager.isLimitAdTrackingEnabled());
-        assertTrue(idManager.fetchedAdvertisingInfo);
+        Assert.assertThat(idManager.isLimitAdTrackingEnabled(), is(true));
+        Assert.assertThat(idManager.fetchedAdvertisingInfo, is(true));
     }
 
     @Test
     public void testGetDeviceUUID_shouldReturnUUID() {
         final String uuid = idManager.getDeviceUUID();
-        assertNotNull(TEST_SECURE_ID, uuid);
+        Assert.assertThat(TEST_SECURE_ID, uuid, notNullValue());
 
         final SharedPreferences prefs = context
                 .getSharedPreferences(ADVERTISING_PREFERENCES, Context.MODE_PRIVATE);
-        assertEquals(uuid, prefs.getString(PREFKEY_INSTALLATION_UUID, ""));
+        Assert.assertThat(prefs.getString(PREFKEY_INSTALLATION_UUID, ""), is(uuid));
     }
 
     @Test
@@ -106,6 +105,6 @@ public void testGetDeviceUUID_shouldReturnSavedUUID() {
         prefs.edit().putString(PREFKEY_INSTALLATION_UUID, TEST_UUID).apply();
 
         final String uuid = idManager.getDeviceUUID();
-        assertNotNull(TEST_UUID, uuid);
+        Assert.assertThat(TEST_UUID, uuid, notNullValue());
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
index d109f34f..152fbb71 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
@@ -23,13 +23,15 @@
 import com.twitter.sdk.android.core.internal.network.OkHttpClientHelper;
 import okhttp3.Interceptor;
 import okhttp3.OkHttpClient;
+
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
 import java.util.List;
 
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
@@ -47,7 +49,7 @@ public void testGetCustomOkHttpClient_guestAuth() {
                 sessionProvider);
 
         final List<Interceptor> interceptors = guestAuthHttpClient.interceptors();
-        assertTrue(interceptors.contains(mockInterceptor));
+        Assert.assertThat(interceptors, hasItem(mockInterceptor));
     }
 
     @Test
@@ -63,6 +65,6 @@ public void testGetCustomOkHttpClient_userAuth() {
                 new TwitterAuthConfig("", ""));
 
         final List<Interceptor> interceptors = guestAuthHttpClient.interceptors();
-        assertTrue(interceptors.contains(mockInterceptor));
+        Assert.assertThat(interceptors, hasItem(mockInterceptor));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java
index 0422df14..58e7a280 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java
@@ -22,6 +22,7 @@
 import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.SessionManager;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -32,9 +33,7 @@
 import java.util.Map;
 import java.util.concurrent.ExecutorService;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyLong;
 import static org.mockito.Mockito.mock;
@@ -128,7 +127,7 @@ public void testVerifyAll_verifiesAllSessions() {
     public void testVerifyAll_shouldNotImmediatelyReverify() {
         when(mockSystemCurrentTimeProvider.getCurrentTimeMillis()).thenReturn(TEST_TIME_1200_UTC);
         sessionMonitor.verifyAll();
-        assertFalse(sessionMonitor.monitorState.beginVerification(TEST_TIME_1200_UTC + 1));
+        Assert.assertThat(sessionMonitor.monitorState.beginVerification(TEST_TIME_1200_UTC + 1), is(false));
     }
 
     @Test
@@ -150,7 +149,7 @@ public void testMonitorStateStartVerification_duringVerification() {
 
         monitorState.lastVerification = startTime;
         monitorState.verifying = true;
-        assertFalse(monitorState.beginVerification(now));
+        Assert.assertThat(monitorState.beginVerification(now), is(false));
     }
 
     @Test
@@ -160,7 +159,7 @@ public void testMonitorStateStartVerification_beforeTimeThreshold() {
 
         monitorState.lastVerification = startTime;
         monitorState.verifying = false;
-        assertFalse(monitorState.beginVerification(now));
+        Assert.assertThat(monitorState.beginVerification(now), is(false));
     }
 
     @Test
@@ -170,7 +169,7 @@ public void testMonitorStateStartVerification_dayChangedButBeforeThreshold() {
 
         monitorState.lastVerification = startTime;
         monitorState.verifying = false;
-        assertTrue(monitorState.beginVerification(now));
+        Assert.assertThat(monitorState.beginVerification(now), is(true));
     }
 
     @Test
@@ -180,19 +179,19 @@ public void testMonitorStateStartVerification_pastTimeThreshold() {
 
         monitorState.lastVerification = startTime;
         monitorState.verifying = false;
-        assertTrue(monitorState.beginVerification(now));
+        Assert.assertThat(monitorState.beginVerification(now), is(true));
     }
 
     @Test
     public void testMonitorStateStartVerification_newState() {
-        assertTrue(monitorState.beginVerification(System.currentTimeMillis()));
+        Assert.assertThat(monitorState.beginVerification(System.currentTimeMillis()), is(true));
     }
 
     @Test
     public void testMonitorStateStartVerification_marksVerificationInProgress() {
-        assertFalse(monitorState.verifying);
-        assertTrue(monitorState.beginVerification(System.currentTimeMillis()));
-        assertTrue(monitorState.verifying);
+        Assert.assertThat(monitorState.verifying, is(false));
+        Assert.assertThat(monitorState.beginVerification(System.currentTimeMillis()), is(true));
+        Assert.assertThat(monitorState.verifying, is(true));
     }
 
     @Test
@@ -200,7 +199,7 @@ public void testMonitorStateFinishVerification_marksVerificationDone() {
         monitorState.verifying = true;
         monitorState.lastVerification = TEST_TIME_1200_UTC;
         monitorState.endVerification(TEST_TIME_2359_UTC);
-        assertFalse(monitorState.verifying);
-        assertEquals(TEST_TIME_2359_UTC, monitorState.lastVerification);
+        Assert.assertThat(monitorState.verifying, is(false));
+        Assert.assertThat(monitorState.lastVerification, is(TEST_TIME_2359_UTC));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java
index f5c94ce4..f0233996 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java
@@ -20,10 +20,12 @@
 import android.net.Uri;
 import android.os.Build;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
@@ -34,7 +36,7 @@ public void testBuildUponBaseHost_singlePath() {
         final String baseHost = "testbasehost";
         final TwitterApi api = new TwitterApi(baseHost);
         final Uri.Builder builder = api.buildUponBaseHostUrl("path1");
-        assertEquals(baseHost + "/path1", builder.build().toString());
+        Assert.assertThat(builder.build().toString(), is(baseHost + "/path1"));
     }
 
     @Test
@@ -42,7 +44,7 @@ public void testBuildUponBaseHost_multiplePaths() {
         final String baseHost = "testbasehost";
         final TwitterApi api = new TwitterApi(baseHost);
         final Uri.Builder builder = api.buildUponBaseHostUrl("path1", "path2");
-        assertEquals(baseHost + "/path1/path2", builder.build().toString());
+        Assert.assertThat(builder.build().toString(), is(baseHost + "/path1/path2"));
     }
 
     @Test
@@ -60,6 +62,6 @@ public void testBuildUserAgent() {
 
     @Test
     public void testNormalizeString() {
-        assertEquals("Twitter", TwitterApi.normalizeString("Tw" + '\u00ED' + "tter\r\n\t"));
+        Assert.assertThat(TwitterApi.normalizeString("Tw" + '\u00ED' + "tter\r\n\t"), is("Twitter"));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
index 01c0a22a..8dcf3388 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
@@ -24,6 +24,7 @@
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.services.AccountService;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -34,7 +35,7 @@
 
 import retrofit2.mock.Calls;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.doReturn;
@@ -80,12 +81,12 @@ public void testVerifySession() {
         verify(mockAccountService).verifyCredentials(true, false, false);
         verify(mockScribeClient).scribe(namespaceCaptor.capture());
         final EventNamespace ns = namespaceCaptor.getValue();
-        assertEquals(REQUIRED_IMPRESSION_CLIENT, ns.client);
-        assertEquals(REQUIRED_IMPRESSION_PAGE, ns.page);
-        assertEquals(REQUIRED_IMPRESSION_SECTION, ns.section);
-        assertEquals(REQUIRED_IMPRESSION_COMPONENT, ns.component);
-        assertEquals(REQUIRED_IMPRESSION_ELEMENT, ns.element);
-        assertEquals(REQUIRED_IMPRESSION_ACTION, ns.action);
+        Assert.assertThat(ns.client, is(REQUIRED_IMPRESSION_CLIENT));
+        Assert.assertThat(ns.page, is(REQUIRED_IMPRESSION_PAGE));
+        Assert.assertThat(ns.section, is(REQUIRED_IMPRESSION_SECTION));
+        Assert.assertThat(ns.component, is(REQUIRED_IMPRESSION_COMPONENT));
+        Assert.assertThat(ns.element, is(REQUIRED_IMPRESSION_ELEMENT));
+        Assert.assertThat(ns.action, is(REQUIRED_IMPRESSION_ACTION));
     }
 
     @Test
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java
index 05a1b0dc..bbdf0a8d 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java
@@ -20,12 +20,13 @@
 import com.twitter.sdk.android.core.models.User;
 import com.twitter.sdk.android.core.models.UserBuilder;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class UserUtilsTest {
@@ -43,27 +44,25 @@ public void setUp() throws Exception {
 
     @Test
     public void testGetProfileImageUrlHttps_nullSize() {
-        assertEquals(user.profileImageUrlHttps,
-                UserUtils.INSTANCE.getProfileImageUrlHttps(user, null));
+        Assert.assertThat(UserUtils.INSTANCE.getProfileImageUrlHttps(user, null), is(user.getProfileImageUrlHttps()));
     }
 
     @Test
     public void testGetProfileImageUrlHttps_reasonablySmall() {
         final String reasonableSize = "https://pbs.twimg.com/profile_images/2284174872/" +
                   "7df3h38zabcvjylnyfe3_reasonably_small.png";
-        assertEquals(reasonableSize,
-                UserUtils.INSTANCE.getProfileImageUrlHttps(user, AvatarSize.REASONABLY_SMALL));
+        Assert.assertThat(UserUtils.INSTANCE.getProfileImageUrlHttps(user, AvatarSize.REASONABLY_SMALL), is(reasonableSize));
     }
 
     @Test
     public void testFormatScreenName_alreadyFormatted() {
         final String test = "@test";
-        assertEquals(test, UserUtils.formatScreenName(test));
+        Assert.assertThat(UserUtils.formatScreenName(test), is(test));
     }
 
     @Test
     public void testFormatScreenName() {
         final String test = "@test";
-        assertEquals("@test", UserUtils.formatScreenName(test));
+        Assert.assertThat(UserUtils.formatScreenName(test), is("@test"));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
index df06e909..fdbe0587 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
@@ -23,6 +23,7 @@
 import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
 import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -35,8 +36,7 @@
 import okhttp3.Interceptor;
 import okhttp3.Request;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertSame;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -86,9 +86,8 @@ public void testIntercept() throws Exception {
         verify(mockChain).proceed(requestCaptor.capture());
 
         final Request signedRequest = requestCaptor.getValue();
-        assertEquals(TEST_HEADER_AUTHORIZATION,
-                signedRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_GUEST_TOKEN, signedRequest.header(OAuthConstants.HEADER_GUEST_TOKEN));
+        Assert.assertThat(signedRequest.header(OAuthConstants.HEADER_AUTHORIZATION), is(TEST_HEADER_AUTHORIZATION));
+        Assert.assertThat(signedRequest.header(OAuthConstants.HEADER_GUEST_TOKEN), is(TEST_GUEST_TOKEN));
     }
 
     @Test
@@ -102,7 +101,7 @@ public void testIntercept_nullSessionFromProvider() throws Exception {
         verify(mockChain).proceed(requestCaptor.capture());
 
         final Request unsignedRequest = requestCaptor.getValue();
-        assertSame(request, unsignedRequest);
+        Assert.assertThat(unsignedRequest, sameInstance(request));
     }
 
     @Test
@@ -111,9 +110,8 @@ public void testAddAuthHeaders() {
         GuestAuthInterceptor.addAuthHeaders(builder, mockAuthToken);
         final Request request = builder.build();
 
-        assertEquals(TEST_HEADER_AUTHORIZATION,
-                request.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_GUEST_TOKEN, request.header(OAuthConstants.HEADER_GUEST_TOKEN));
+        Assert.assertThat(request.header(OAuthConstants.HEADER_AUTHORIZATION), is(TEST_HEADER_AUTHORIZATION));
+        Assert.assertThat(request.header(OAuthConstants.HEADER_GUEST_TOKEN), is(TEST_GUEST_TOKEN));
     }
 
     @Test
@@ -125,9 +123,8 @@ public void testAddAuthHeaders_removesOldHeaders() {
         GuestAuthInterceptor.addAuthHeaders(builder, mockAuthToken);
         final Request request = builder.build();
 
-        assertEquals(TEST_HEADER_AUTHORIZATION,
-                request.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_GUEST_TOKEN, request.header(OAuthConstants.HEADER_GUEST_TOKEN));
-        assertEquals(TEST_HEADER, request.header(TEST_HEADER));
+        Assert.assertThat(request.header(OAuthConstants.HEADER_AUTHORIZATION), is(TEST_HEADER_AUTHORIZATION));
+        Assert.assertThat(request.header(OAuthConstants.HEADER_GUEST_TOKEN), is(TEST_GUEST_TOKEN));
+        Assert.assertThat(request.header(TEST_HEADER), is(TEST_HEADER));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java
index 1507adb5..c1f67275 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java
@@ -17,6 +17,7 @@
 
 package com.twitter.sdk.android.core.internal.network;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -29,9 +30,7 @@
 import okhttp3.Request;
 import okhttp3.Response;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
@@ -65,8 +64,8 @@ public void testIntercept_with403() throws Exception {
 
         final Response modifiedResponse = interceptor.intercept(mockChain);
 
-        assertFalse(response == modifiedResponse);
-        assertEquals(401, modifiedResponse.code());
+        Assert.assertThat(modifiedResponse, not(sameInstance(response)));
+        Assert.assertThat(modifiedResponse.code(), is(401));
     }
 
     @Test
@@ -83,7 +82,7 @@ public void testIntercept_with400() throws Exception {
 
         final Response unmodifiedResponse = interceptor.intercept(mockChain);
 
-        assertTrue(response == unmodifiedResponse);
-        assertEquals(400, unmodifiedResponse.code());
+        Assert.assertThat(unmodifiedResponse, sameInstance(response));
+        Assert.assertThat(unmodifiedResponse.code(), is(400));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java
index 3125e566..a28551c7 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java
@@ -23,6 +23,7 @@
 import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
 import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -34,10 +35,7 @@
 import okhttp3.Request;
 import okhttp3.Response;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
@@ -89,8 +87,8 @@ public void testGetExpiredToken() {
         final GuestSession session = authenticator.getExpiredSession(response);
 
         final GuestAuthToken token = session.getAuthToken();
-        assertEquals(TEST_GUEST_TOKEN, token.getGuestToken());
-        assertEquals(TEST_ACCESS_TOKEN, token.getAccessToken());
+        Assert.assertThat(token.getGuestToken(), is(TEST_GUEST_TOKEN));
+        Assert.assertThat(token.getAccessToken(), is(TEST_ACCESS_TOKEN));
     }
 
     @Test
@@ -108,7 +106,7 @@ public void testGetExpiredToken_emptyHeaders() {
 
         final GuestSession session = authenticator.getExpiredSession(response);
 
-        assertNull(session);
+        Assert.assertThat(session, nullValue());
     }
 
     @Test
@@ -125,21 +123,20 @@ public void testReauth_emptyHeaders() {
                 .build();
 
         final Request request = authenticator.reauth(response);
-        assertNull(request);
+        Assert.assertThat(request, nullValue());
     }
 
     @Test
     public void testResign() {
         final Request newRequest = authenticator.resign(request, mockAuthToken);
 
-        assertEquals(TEST_HEADER_AUTHORIZATION_2,
-                newRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_GUEST_TOKEN_2, newRequest.header(OAuthConstants.HEADER_GUEST_TOKEN));
+        Assert.assertThat(newRequest.header(OAuthConstants.HEADER_AUTHORIZATION), is(TEST_HEADER_AUTHORIZATION_2));
+        Assert.assertThat(newRequest.header(OAuthConstants.HEADER_GUEST_TOKEN), is(TEST_GUEST_TOKEN_2));
     }
 
     @Test
     public void testCanRetry_firstRetry() {
-        assertTrue(authenticator.canRetry(response));
+        Assert.assertThat(authenticator.canRetry(response), is(true));
     }
 
     @Test
@@ -152,6 +149,6 @@ public void testCanRetry_secondRetry() {
                 .priorResponse(response)
                 .build();
 
-        assertFalse(authenticator.canRetry(failedResponse));
+        Assert.assertThat(authenticator.canRetry(failedResponse), is(false));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java
index 54524c85..57236ed3 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java
@@ -23,6 +23,7 @@
 import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -38,8 +39,7 @@
 import okhttp3.Interceptor;
 import okhttp3.Request;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -90,8 +90,8 @@ public void testIntercept() throws Exception {
         verify(mockChain).proceed(requestCaptor.capture());
 
         final Request signedRequest = requestCaptor.getValue();
-        assertNotNull(signedRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_HEADER, signedRequest.header(TEST_HEADER));
+        Assert.assertThat(signedRequest.header(OAuthConstants.HEADER_AUTHORIZATION), notNullValue());
+        Assert.assertThat(signedRequest.header(TEST_HEADER), is(TEST_HEADER));
     }
 
     @Test
@@ -100,7 +100,7 @@ public void testGetAuthHeaders() {
 
         final String header = interceptor.getAuthorizationHeader(request);
 
-        assertNotNull(header);
+        Assert.assertThat(header, notNullValue());
     }
 
     @Test
@@ -117,9 +117,9 @@ public void testGetPostParameters_bodyWithMultipleParams() {
 
         final Map<String, String> params = interceptor.getPostParams(request);
 
-        assertEquals(2, params.size());
-        assertEquals(POST_VALUE, params.get(POST_KEY));
-        assertEquals(POST_VALUE_2, params.get(POST_KEY_2_ENCODED));
+        Assert.assertThat(params.size(), is(2));
+        Assert.assertThat(params.get(POST_KEY), is(POST_VALUE));
+        Assert.assertThat(params.get(POST_KEY_2_ENCODED), is(POST_VALUE_2));
     }
 
     @Test
@@ -133,7 +133,7 @@ public void testGetPostParameters_withZeroParams() {
 
         final Map<String, String> params = interceptor.getPostParams(request);
 
-        assertEquals(0, params.size());
+        Assert.assertThat(params.size(), is(0));
     }
 
     @Test
@@ -142,6 +142,6 @@ public void testGetPostParameters_withGetRequest() {
 
         final Map<String, String> params = interceptor.getPostParams(request);
 
-        assertEquals(0, params.size());
+        Assert.assertThat(params.size(), is(0));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/UrlUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/UrlUtilsTest.java
index 5860f07c..ab8f13c3 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/UrlUtilsTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/UrlUtilsTest.java
@@ -17,6 +17,7 @@
 
 package com.twitter.sdk.android.core.internal.network;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -24,8 +25,7 @@
 import java.net.URI;
 import java.util.TreeMap;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class UrlUtilsTest {
@@ -62,7 +62,7 @@
     public void testPercentEncode() {
         int i = 0;
         for (String s : ORIGINAL_STRINGS) {
-            assertEquals(PERCENT_ENCODED_STRINGS[i], UrlUtils.percentEncode(s));
+            Assert.assertThat(UrlUtils.percentEncode(s), is(PERCENT_ENCODED_STRINGS[i]));
             i += 1;
         }
     }
@@ -70,15 +70,15 @@ public void testPercentEncode() {
     @Test
     public void testGetQueryParams_nullDecode() {
         final TreeMap<String, String> params = UrlUtils.getQueryParams(EMPTY_PARAM_VALUE, true);
-        assertNotNull(params);
-        assertEquals(0, params.size());
+        Assert.assertThat(params, notNullValue());
+        Assert.assertThat(params.size(), is(0));
     }
 
     @Test
     public void testGetQueryParams_nullNotDecode() {
         final TreeMap<String, String> params = UrlUtils.getQueryParams(EMPTY_PARAM_VALUE, false);
-        assertNotNull(params);
-        assertEquals(0, params.size());
+        Assert.assertThat(params, notNullValue());
+        Assert.assertThat(params.size(), is(0));
     }
 
     @Test
@@ -106,16 +106,16 @@ public void testURIParams_allParamsNotDecode() {
     }
 
     private void assertNotDecodedValue(final TreeMap<String, String> params) {
-        assertEquals(3, params.size());
-        assertEquals(PLAIN_PARAM_VALUE, params.get(PLAIN_PARAM_KEY));
-        assertEquals(EMPTY_PARAM_VALUE, params.get(EMPTY_PARAM_KEY));
-        assertEquals(DECODED_PARAM_VALUE_PLAIN, params.get(DECODED_PARAM_KEY));
+        Assert.assertThat(params.size(), is(3));
+        Assert.assertThat(params.get(PLAIN_PARAM_KEY), is(PLAIN_PARAM_VALUE));
+        Assert.assertThat(params.get(EMPTY_PARAM_KEY), is(EMPTY_PARAM_VALUE));
+        Assert.assertThat(params.get(DECODED_PARAM_KEY), is(DECODED_PARAM_VALUE_PLAIN));
     }
 
     private void assertDecodedValue(final TreeMap<String, String> params) {
-        assertEquals(3, params.size());
-        assertEquals(PLAIN_PARAM_VALUE, params.get(PLAIN_PARAM_KEY));
-        assertEquals(EMPTY_PARAM_VALUE, params.get(EMPTY_PARAM_KEY));
-        assertEquals(DECODED_PARAM_VALUE_DECODED, params.get(DECODED_PARAM_KEY));
+        Assert.assertThat(params.size(), is(3));
+        Assert.assertThat(params.get(PLAIN_PARAM_KEY), is(PLAIN_PARAM_VALUE));
+        Assert.assertThat(params.get(EMPTY_PARAM_KEY), is(EMPTY_PARAM_VALUE));
+        Assert.assertThat(params.get(DECODED_PARAM_KEY), is(DECODED_PARAM_VALUE_DECODED));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java
index 55ffe998..b800e8a7 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java
@@ -17,12 +17,12 @@
 
 package com.twitter.sdk.android.core.internal.oauth;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class GuestAuthTokenTest  {
@@ -37,26 +37,26 @@
     @Test
     public void testIsExpired_newToken() {
         final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN);
-        assertFalse(token.isExpired());
+        Assert.assertThat(token.isExpired(), is(false));
     }
 
     @Test
     public void testIsExpired_oneHourOld() {
         final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN,
                 ONE_HOUR_AGE);
-        assertFalse(token.isExpired());
+        Assert.assertThat(token.isExpired(), is(false));
     }
 
     @Test
     public void testIsExpired_threeHoursOld() {
         final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN,
                 THREE_HOURS_AGO);
-        assertTrue(token.isExpired());
+        Assert.assertThat(token.isExpired(), is(true));
     }
 
     @Test
     public void testIsExpired_createdAtZero() {
         final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN, 0);
-        assertTrue(token.isExpired());
+        Assert.assertThat(token.isExpired(), is(true));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java
index 99c13109..d1d0f209 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java
@@ -20,6 +20,8 @@
 
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterAuthToken;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -27,7 +29,7 @@
 
 import java.util.Map;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricTestRunner.class)
@@ -51,10 +53,10 @@ public void testGetOAuthEchoHeaders() {
 
         final Map<String, String> headers = oAuthHeaders.getOAuthEchoHeaders(config, token, null,
                 "GET", VERIFY_CREDENTIALS_URL, null);
-        assertEquals(VERIFY_CREDENTIALS_URL, headers.get(OAuth1aHeaders
-                .HEADER_AUTH_SERVICE_PROVIDER));
-        assertEquals(ANY_AUTH_CREDENTIALS, headers.get(OAuth1aHeaders
-                .HEADER_AUTH_CREDENTIALS));
+        Assert.assertThat(headers.get(OAuth1aHeaders
+                .HEADER_AUTH_SERVICE_PROVIDER), is(VERIFY_CREDENTIALS_URL));
+        Assert.assertThat(headers.get(OAuth1aHeaders
+                .HEADER_AUTH_CREDENTIALS), is(ANY_AUTH_CREDENTIALS));
     }
 
     @Test
@@ -62,8 +64,8 @@ public void testGetAuthorizationHeader() {
         final TwitterAuthConfig config = mock(TwitterAuthConfig.class);
         final TwitterAuthToken token = mock(TwitterAuthToken.class);
 
-        assertEquals(ANY_AUTH_CREDENTIALS, oAuthHeaders.getAuthorizationHeader(config, token, null,
-                "GET", VERIFY_CREDENTIALS_URL, null));
+        Assert.assertThat(oAuthHeaders.getAuthorizationHeader(config, token, null,
+                "GET", VERIFY_CREDENTIALS_URL, null), is(ANY_AUTH_CREDENTIALS));
     }
 
     private class MockOAuth1aParameters extends OAuth1aParameters {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParametersTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParametersTest.java
index 2dffc03c..29b144b9 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParametersTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParametersTest.java
@@ -20,6 +20,7 @@
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterAuthToken;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -27,7 +28,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 @SuppressWarnings("checkstyle:linelength")
@@ -112,7 +113,7 @@ public void testConstructSignatureBase() {
             final OAuth1aParameters oAuth1aParameters = toOAuth1aParameters(testParameters);
             final String signatureBase = oAuth1aParameters.constructSignatureBase(
                     testParameters.nonce, testParameters.timestamp);
-            assertEquals(testParameters.expectedSignatureBase, signatureBase);
+            Assert.assertThat(signatureBase, is(testParameters.expectedSignatureBase));
         }
     }
 
@@ -136,7 +137,7 @@ public void testCalculateSignature() {
             final OAuth1aParameters oAuth1aParameters = toOAuth1aParameters(testParameters);
             final String signature
                     = oAuth1aParameters.calculateSignature(testParameters.expectedSignatureBase);
-            assertEquals(testParameters.expectedSignature, signature);
+            Assert.assertThat(signature, is(testParameters.expectedSignature));
         }
     }
 
@@ -147,7 +148,7 @@ public void testConstructAuthorizationHeader() {
             final String authHeader = oAuth1aParameters.constructAuthorizationHeader(
                     testParameters.nonce, testParameters.timestamp,
                     testParameters.expectedSignature);
-            assertEquals(testParameters.expectedAuthHeader, authHeader);
+            Assert.assertThat(authHeader, is(testParameters.expectedAuthHeader));
         }
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
index 18a03ba9..a701bfce 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
@@ -25,6 +25,7 @@
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.internal.TwitterApi;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -38,10 +39,7 @@
 import retrofit2.http.Query;
 import retrofit2.mock.Calls;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
@@ -68,12 +66,12 @@ public void setUp() throws Exception {
 
     @Test
     public void testGetTempTokenUrl() {
-        assertEquals("https://api.twitter.com/oauth/request_token", service.getTempTokenUrl());
+        Assert.assertThat(service.getTempTokenUrl(), is("https://api.twitter.com/oauth/request_token"));
     }
 
     @Test
     public void testGetAccessTokenUrl() {
-        assertEquals("https://api.twitter.com/oauth/access_token", service.getAccessTokenUrl());
+        Assert.assertThat(service.getAccessTokenUrl(), is("https://api.twitter.com/oauth/access_token"));
     }
 
     @Test
@@ -81,7 +79,7 @@ public void testRequestTempToken() {
         service.api = new MockOAuth1aService() {
             @Override
             public Call<ResponseBody> getTempToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
-                assertTrue(auth.contains(OAuthConstants.PARAM_CALLBACK));
+                Assert.assertThat(auth, containsString(OAuthConstants.PARAM_CALLBACK));
                 return super.getTempToken(auth);
             }
         };
@@ -97,9 +95,9 @@ public void testRequestAccessToken() {
             public Call<ResponseBody> getAccessToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
                                                      @Query(OAuthConstants.PARAM_VERIFIER) String innerVerifier) {
 
-                assertEquals(verifier, innerVerifier);
-                assertNotNull(auth);
-                assertTrue(auth.contains(token.getToken()));
+                Assert.assertThat(innerVerifier, is(verifier));
+                Assert.assertThat(auth, notNullValue());
+                Assert.assertThat(auth, containsString(token.getToken()));
 
                 return super.getAccessToken(auth, innerVerifier);
             }
@@ -109,29 +107,29 @@ public void testRequestAccessToken() {
 
     @Test
     public void testApiHost() {
-        assertEquals(twitterApi, service.getApi());
+        Assert.assertThat(service.getApi(), is(twitterApi));
     }
 
     @Test
     public void testGetUserAgent() {
         final String userAgent = TwitterApi.buildUserAgent("TwitterAndroidSDK",
                 twitterCore.getVersion());
-        assertEquals(userAgent, service.getUserAgent());
+        Assert.assertThat(service.getUserAgent(), is(userAgent));
     }
 
     @Test
     public void testBuildCallbackUrl() {
         final String callbackUrl = service.buildCallbackUrl(authConfig);
 
-        assertEquals(String.format("twittersdk://callback?version=%s&app=%s",
-                twitterCore.getVersion(), authConfig.getConsumerKey()), callbackUrl);
+        Assert.assertThat(callbackUrl, is(String.format("twittersdk://callback?version=%s&app=%s",
+                twitterCore.getVersion(), authConfig.getConsumerKey())));
     }
 
     @Test
     public void testGetAuthorizeUrl() {
         final TwitterAuthToken authToken = new TwitterAuthToken("token", "secret");
         final String authorizeUrl = service.getAuthorizeUrl(authToken);
-        assertEquals("https://api.twitter.com/oauth/authorize?oauth_token=token", authorizeUrl);
+        Assert.assertThat(authorizeUrl, is("https://api.twitter.com/oauth/authorize?oauth_token=token"));
     }
 
     @Test
@@ -140,18 +138,17 @@ public void testParseAuthResponse() {
                 + "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
                 + "screen_name=test&user_id=1";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.getToken());
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.getSecret());
-        assertEquals("test", authResponse.userName);
-        assertEquals(1L, authResponse.userId);
+        Assert.assertThat(authResponse.authToken.getToken(), is("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4"));
+        Assert.assertThat(authResponse.authToken.getSecret(), is("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo"));
+        Assert.assertThat(authResponse.userName, is("test"));
+        Assert.assertThat(authResponse.userId, is(1L));
     }
 
     @Test
     public void testParseAuthResponse_noQueryParameters() {
         final String response = "noQueryParameters";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertNull(authResponse);
+        Assert.assertThat(authResponse, nullValue());
     }
 
     @Test
@@ -159,7 +156,7 @@ public void testParseAuthResponse_noToken() {
         final String response = "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
                 + "screen_name=test&user_id=1";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertNull(authResponse);
+        Assert.assertThat(authResponse, nullValue());
     }
 
     @Test
@@ -167,7 +164,7 @@ public void testParseAuthResponse_noSecret() {
         final String response = "oauth_token=7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4&"
                 + "screen_name=test&user_id=1";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertNull(authResponse);
+        Assert.assertThat(authResponse, nullValue());
     }
 
     @Test
@@ -176,11 +173,10 @@ public void testParseAuthResponse_noScreenName() {
                 + "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
                 + "user_id=1";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.getToken());
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.getSecret());
-        assertNull(authResponse.userName);
-        assertEquals(1L, authResponse.userId);
+        Assert.assertThat(authResponse.authToken.getToken(), is("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4"));
+        Assert.assertThat(authResponse.authToken.getSecret(), is("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo"));
+        Assert.assertThat(authResponse.userName, nullValue());
+        Assert.assertThat(authResponse.userId, is(1L));
     }
 
     @Test
@@ -189,11 +185,10 @@ public void testParseAuthResponse_noUserId() {
                 + "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
                 + "screen_name=test";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.getToken());
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.getSecret());
-        assertEquals("test", authResponse.userName);
-        assertEquals(0L, authResponse.userId);
+        Assert.assertThat(authResponse.authToken.getToken(), is("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4"));
+        Assert.assertThat(authResponse.authToken.getSecret(), is("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo"));
+        Assert.assertThat(authResponse.userName, is("test"));
+        Assert.assertThat(authResponse.userId, is(0L));
     }
 
     @Test
@@ -205,12 +200,10 @@ public void testCallbackWrapperSuccess() {
             @Override
             public void success(Result<OAuthResponse> result) {
                 final OAuthResponse authResponse = result.getData();
-                assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                        authResponse.authToken.getToken());
-                assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo",
-                        authResponse.authToken.getSecret());
-                assertEquals("test", authResponse.userName);
-                assertEquals(1L, authResponse.userId);
+                Assert.assertThat(authResponse.authToken.getToken(), is("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4"));
+                Assert.assertThat(authResponse.authToken.getSecret(), is("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo"));
+                Assert.assertThat(authResponse.userName, is("test"));
+                Assert.assertThat(authResponse.userId, is(1L));
             }
 
             @Override
@@ -242,7 +235,7 @@ public void success(Result<OAuthResponse> result) {
 
             @Override
             public void failure(TwitterException exception) {
-                assertNotNull(exception);
+                Assert.assertThat(exception, notNullValue());
             }
         };
         setupCallbackWrapperTest(response, callback);
@@ -258,7 +251,7 @@ public void success(Result<OAuthResponse> result) {
 
             @Override
             public void failure(TwitterException exception) {
-                assertNotNull(exception);
+                Assert.assertThat(exception, notNullValue());
             }
         };
         final Callback<ResponseBody> callbackWrapper = service.getCallbackWrapper(callback);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
index b39d9d77..4b414f9c 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
@@ -24,6 +24,7 @@
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.internal.TwitterApi;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -40,8 +41,7 @@
 import retrofit2.http.POST;
 import retrofit2.mock.Calls;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
@@ -96,7 +96,7 @@ public void testGetGuestToken_url() throws NoSuchMethodException {
         final Method method = OAuth2Service.OAuth2Api.class
                 .getDeclaredMethod("getGuestToken", String.class);
         final POST post = method.getAnnotation(POST.class);
-        assertEquals("/1.1/guest/activate.json", post.value());
+        Assert.assertThat(post.value(), is("/1.1/guest/activate.json"));
     }
 
     @Test
@@ -104,7 +104,7 @@ public void testGetAppAuthToken_url() throws NoSuchMethodException {
         final Method method = OAuth2Service.OAuth2Api.class
                 .getDeclaredMethod("getAppAuthToken", String.class, String.class);
         final POST post = method.getAnnotation(POST.class);
-        assertEquals("/oauth2/token", post.value());
+        Assert.assertThat(post.value(), is("/oauth2/token"));
     }
 
     @Test
@@ -112,20 +112,19 @@ public void testGetAppAuthToken_contentType() throws NoSuchMethodException {
         final Method method = OAuth2Service.OAuth2Api.class
                 .getDeclaredMethod("getAppAuthToken", String.class, String.class);
         final Headers header = method.getAnnotation(Headers.class);
-        assertEquals("Content-Type: application/x-www-form-urlencoded;charset=UTF-8",
-                header.value()[0]);
+        Assert.assertThat(header.value()[0], is("Content-Type: application/x-www-form-urlencoded;charset=UTF-8"));
     }
 
     @Test
     public void testApiHost() {
-        assertEquals(twitterApi, service.getApi());
+        Assert.assertThat(service.getApi(), is(twitterApi));
     }
 
     @Test
     public void testGetUserAgent() {
         final String userAgent
                 = TwitterApi.buildUserAgent("TwitterAndroidSDK", twitterCore.getVersion());
-        assertEquals(userAgent, service.getUserAgent());
+        Assert.assertThat(service.getUserAgent(), is(userAgent));
     }
 
     @Test
@@ -156,7 +155,7 @@ public void testRequestGuestAuthToken_guestAuthSuccess() {
         service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
             @Override
             public void success(Result<GuestAuthToken> result) {
-                assertEquals(GUEST_TOKEN, result.getData());
+                Assert.assertThat(result.getData(), is(GUEST_TOKEN));
             }
 
             @Override
@@ -184,7 +183,7 @@ public void success(Result<GuestAuthToken> result) {
 
             @Override
             public void failure(TwitterException error) {
-                assertNotNull(error);
+                Assert.assertThat(error, notNullValue());
             }
         });
     }
@@ -208,7 +207,7 @@ public void success(Result<GuestAuthToken> result) {
 
             @Override
             public void failure(TwitterException error) {
-                assertNotNull(error);
+                Assert.assertThat(error, notNullValue());
             }
         });
     }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java
index a7833887..18326065 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java
@@ -19,12 +19,12 @@
 
 import android.os.Parcel;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class OAuth2TokenTest  {
@@ -40,12 +40,12 @@ public void testParcelable() {
         parcel.setDataPosition(0);
         final OAuth2Token parceledAuthToken
                 = OAuth2Token.CREATOR.createFromParcel(parcel);
-        assertEquals(authToken, parceledAuthToken);
+        Assert.assertThat(parceledAuthToken, is(authToken));
     }
 
     @Test
     public void testIsExpired() {
         final OAuth2Token token = new OAuth2Token(TOKEN_TYPE, ACCESS_TOKEN);
-        assertFalse(token.isExpired());
+        Assert.assertThat(token.isExpired(), is(false));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponseTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponseTest.java
index 5cdfd6a8..49d3f939 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponseTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponseTest.java
@@ -22,11 +22,12 @@
 import com.twitter.sdk.android.core.TestFixtures;
 import com.twitter.sdk.android.core.TwitterAuthToken;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class OAuthResponseTest  {
@@ -42,8 +43,8 @@ public void testParcelable() {
         parcel.setDataPosition(0);
         final OAuthResponse parceledAuthResponse
                 = OAuthResponse.CREATOR.createFromParcel(parcel);
-        assertEquals(authResponse.authToken, parceledAuthResponse.authToken);
-        assertEquals(TestFixtures.SCREEN_NAME, parceledAuthResponse.userName);
-        assertEquals(TestFixtures.USER_ID, parceledAuthResponse.userId);
+        Assert.assertThat(parceledAuthResponse.authToken, is(authResponse.authToken));
+        Assert.assertThat(parceledAuthResponse.userName, is(TestFixtures.SCREEN_NAME));
+        Assert.assertThat(parceledAuthResponse.userId, is(TestFixtures.USER_ID));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java
index c4ac4c2a..87c038ea 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java
@@ -19,6 +19,7 @@
 
 import android.os.Environment;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -28,10 +29,7 @@
 
 import java.io.File;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 
 @RunWith(RobolectricTestRunner.class)
@@ -49,7 +47,7 @@ public void testConstructor() {
             new FileStoreImpl(null);
             fail();
         } catch (IllegalArgumentException ex) {
-            assertEquals("Context must not be null", ex.getMessage());
+            Assert.assertThat(ex.getMessage(), is("Context must not be null"));
         }
     }
 
@@ -72,7 +70,7 @@ public void testGetExternalCacheDir() {
     @Test
     public void testGetExternalCacheDir_withoutExternalStorage() {
         ShadowEnvironment.setExternalStorageState(Environment.MEDIA_REMOVED);
-        assertNull(fileStore.getExternalCacheDir());
+        Assert.assertThat(fileStore.getExternalCacheDir(), nullValue());
     }
 
     @Test
@@ -84,7 +82,7 @@ public void testGetExternalFilesDir() {
     @Test
     public void testGetExternalFilesDir_withoutExternalStorage() {
         ShadowEnvironment.setExternalStorageState(Environment.MEDIA_REMOVED);
-        assertNull(fileStore.getExternalFilesDir());
+        Assert.assertThat(fileStore.getExternalFilesDir(), nullValue());
     }
 
     @Test
@@ -96,12 +94,11 @@ public void testPrepare() {
     @Test
     public void testisExternalStorageAvailable() {
         final String state = Environment.getExternalStorageState();
-        assertEquals(Environment.MEDIA_MOUNTED.equals(state),
-                fileStore.isExternalStorageAvailable());
+        Assert.assertThat(fileStore.isExternalStorageAvailable(), is(Environment.MEDIA_MOUNTED.equals(state)));
     }
 
     private void verifyFile(File file) {
-        assertNotNull(file);
-        assertTrue(file.exists());
+        Assert.assertThat(file, notNullValue());
+        Assert.assertThat(file.exists(), is(true));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImplTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImplTest.java
index 63302fad..d6b6109f 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImplTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImplTest.java
@@ -20,17 +20,14 @@
 import android.annotation.SuppressLint;
 import android.content.SharedPreferences;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class PreferenceStoreImplTest {
@@ -44,15 +41,15 @@ public void setUp() {
     @Test
     @SuppressLint("CommitPrefEdits")
     public void testGet() {
-        assertNotNull(preferenceStore.get());
-        assertTrue(preferenceStore.get() instanceof SharedPreferences);
+        Assert.assertThat(preferenceStore.get(), notNullValue());
+        Assert.assertThat(preferenceStore.get() instanceof SharedPreferences, is(true));
     }
 
     @Test
     @SuppressLint("CommitPrefEdits")
     public void testEdit() {
-        assertNotNull(preferenceStore.edit());
-        assertTrue(preferenceStore.edit() instanceof SharedPreferences.Editor);
+        Assert.assertThat(preferenceStore.edit(), notNullValue());
+        Assert.assertThat(preferenceStore.edit() instanceof SharedPreferences.Editor, is(true));
     }
 
     @Test
@@ -62,12 +59,12 @@ public void testSave() {
         final String value = "Test Value";
         final SharedPreferences.Editor editor = preferenceStore.edit();
         editor.putString(key, value);
-        assertTrue(preferenceStore.save(editor));
+        Assert.assertThat(preferenceStore.save(editor), is(true));
 
         final String result = preferenceStore.get().getString(key, null);
 
-        assertNotNull(result);
-        assertEquals(value, result);
+        Assert.assertThat(result, notNullValue());
+        Assert.assertThat(result, is(value));
     }
 
     @Test
@@ -79,11 +76,11 @@ public void testNamespace() {
         final PreferenceStoreImpl secondPrefStore =
                 new PreferenceStoreImpl(RuntimeEnvironment.application, "PersistenceTest");
 
-        assertNotSame(preferenceStore.get(), secondPrefStore.get());
+        Assert.assertThat(secondPrefStore.get(), not(sameInstance(preferenceStore.get())));
 
         preferenceStore.save(preferenceStore.edit().putString(key, value));
 
-        assertNull(secondPrefStore.get().getString(key, null));
+        Assert.assertThat(secondPrefStore.get().getString(key, null), nullValue());
 
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClientTest.java
index 2ed99dca..b044c164 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClientTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClientTest.java
@@ -35,9 +35,10 @@
 
 import java.util.Locale;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertSame;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.nullValue;
+import static org.hamcrest.Matchers.sameInstance;
+import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -77,43 +78,43 @@ public void testGetScribeConfig_settingsDataNull() {
         final ScribeConfig scribeConfig
                 = DefaultScribeClient.getScribeConfig(TEST_SCRIBE_KIT_NAME, TEST_KIT_VERSION);
 
-        assertEquals(!BuildConfig.BUILD_TYPE.equals(DEBUG_BUILD_TYPE), scribeConfig.isEnabled);
-        assertEquals(REQUIRED_SCRIBE_URL_COMPONENT, scribeConfig.baseUrl);
-        assertEquals(BuildConfig.SCRIBE_SEQUENCE, scribeConfig.sequence);
-        assertEquals(TEST_USER_AGENT, scribeConfig.userAgent);
-        assertEquals(ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP, scribeConfig.maxFilesToKeep);
-        assertEquals(ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS, scribeConfig.sendIntervalSeconds);
+        //noinspection ConstantConditions
+        assertThat(scribeConfig.isEnabled, is(!BuildConfig.BUILD_TYPE.equals(DEBUG_BUILD_TYPE)));
+        assertThat(scribeConfig.baseUrl, is(REQUIRED_SCRIBE_URL_COMPONENT));
+        assertThat(scribeConfig.sequence, is(BuildConfig.SCRIBE_SEQUENCE));
+        assertThat(scribeConfig.userAgent, is(TEST_USER_AGENT));
+        assertThat(scribeConfig.maxFilesToKeep, is(ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP));
+        assertThat(scribeConfig.sendIntervalSeconds, is(ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS));
     }
 
     @Test
     public void testGetScribeUrl_nullOverride() {
         final String scribeUrl
                 = DefaultScribeClient.getScribeUrl(TEST_DEFAULT_SCRIBE_URL, null);
-        assertEquals(TEST_DEFAULT_SCRIBE_URL, scribeUrl);
+        assertThat(scribeUrl, is(TEST_DEFAULT_SCRIBE_URL));
     }
 
     @Test
     public void testGetScribeUrl_emptyOverride() {
         final String scribeUrl = DefaultScribeClient.getScribeUrl(TEST_DEFAULT_SCRIBE_URL, "");
-        assertEquals(TEST_DEFAULT_SCRIBE_URL, scribeUrl);
+        assertThat(scribeUrl, is(TEST_DEFAULT_SCRIBE_URL));
     }
 
     @Test
     public void testGetScribeUrl_override() {
         final String scribeUrl = DefaultScribeClient.getScribeUrl(TEST_DEFAULT_SCRIBE_URL,
                 TEST_OVERRIDE_SCRIBE_URL);
-        assertEquals(TEST_OVERRIDE_SCRIBE_URL, scribeUrl);
+        assertThat(scribeUrl, is(TEST_OVERRIDE_SCRIBE_URL));
     }
 
     @Test
     public void testGetScribeUserAgent() {
-        assertEquals(TEST_USER_AGENT,
-                DefaultScribeClient.getUserAgent(TEST_SCRIBE_KIT_NAME, TEST_KIT_VERSION));
+        assertThat(DefaultScribeClient.getUserAgent(TEST_SCRIBE_KIT_NAME, TEST_KIT_VERSION), is(TEST_USER_AGENT));
     }
 
     @Test
     public void testGetActiveSession_activeSessionDoesNotExist() {
-        assertNull(scribeClient.getActiveSession());
+        assertThat(scribeClient.getActiveSession(), nullValue());
     }
 
     @Test
@@ -122,12 +123,12 @@ public void testGetActiveSession_activeSessionFirstManager() {
 
         when(mockTwitterSessionManager.getActiveSession()).thenReturn(mockSession);
 
-        assertSame(mockSession, scribeClient.getActiveSession());
+        assertThat(scribeClient.getActiveSession(), sameInstance(mockSession));
     }
 
     @Test
     public void testGetScribeSessionId_nullSession() {
-        assertEquals(REQUIRED_LOGGED_OUT_USER_ID, scribeClient.getScribeSessionId(null));
+        assertThat(scribeClient.getScribeSessionId(null), is(REQUIRED_LOGGED_OUT_USER_ID));
     }
 
     @Test
@@ -138,6 +139,6 @@ public void testGetScribeSessionId_activeSession() {
         final Session mockSession = mock(Session.class);
         when(mockSession.getId()).thenReturn(TEST_ACTIVE_SESSION_ID);
 
-        assertEquals(TEST_ACTIVE_SESSION_ID, scribeClient.getScribeSessionId(mockSession));
+        assertThat(scribeClient.getScribeSessionId(mockSession), is(TEST_ACTIVE_SESSION_ID));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledEventsStrategyTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledEventsStrategyTest.java
index 4e0d5b62..e46289a5 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledEventsStrategyTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledEventsStrategyTest.java
@@ -17,6 +17,7 @@
 
 package com.twitter.sdk.android.core.internal.scribe;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -32,16 +33,26 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.*;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.nullValue;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.doReturn;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
 
 @RunWith(RobolectricTestRunner.class)
 public class EnabledEventsStrategyTest {
 
-    TestEnabledEventsStrategy eventsStrategy;
-    ScheduledExecutorService mockExecutor;
-    EventsFilesManager mockFilesManager;
-    FilesSender mockFilesSender;
+    private TestEnabledEventsStrategy eventsStrategy;
+    private ScheduledExecutorService mockExecutor;
+    private EventsFilesManager mockFilesManager;
+    private FilesSender mockFilesSender;
 
     @Before
     public void setUp() throws Exception {
@@ -74,7 +85,7 @@ public void testCancelTimeBasedFileRollOver() {
         eventsStrategy.cancelTimeBasedFileRollOver();
 
         verify(mockFuture).cancel(false);
-        assertNull(eventsStrategy.scheduledRolloverFutureRef.get());
+        Assert.assertThat(eventsStrategy.scheduledRolloverFutureRef.get(), nullValue());
     }
 
     @Test
@@ -96,26 +107,26 @@ public void testRecordEvent() throws Exception {
     @Test
     public void testRollFileOver() throws Exception {
         doReturn(true).when(mockFilesManager).rollFileOver();
-        assertTrue(eventsStrategy.rollFileOver());
+        Assert.assertThat(eventsStrategy.rollFileOver(), is(true));
     }
 
     @Test
     public void testRollFileOver_failure() throws Exception {
         doReturn(false).when(mockFilesManager).rollFileOver();
-        assertFalse(eventsStrategy.rollFileOver());
+        Assert.assertThat(eventsStrategy.rollFileOver(), is(false));
     }
 
     @Test
     public void testRollFileOver_exception() throws Exception {
         doThrow(new IOException()).when(mockFilesManager).rollFileOver();
-        assertFalse(eventsStrategy.rollFileOver());
+        Assert.assertThat(eventsStrategy.rollFileOver(), is(false));
     }
 
     @Test
     public void testConfigureRollover() {
         final int rollover = 10;
         eventsStrategy.configureRollover(rollover);
-        assertEquals(rollover, eventsStrategy.rolloverIntervalSeconds);
+        Assert.assertThat(eventsStrategy.rolloverIntervalSeconds, is(rollover));
         verifyExecutorScheduled(0, rollover);
     }
 
@@ -131,7 +142,7 @@ public void testScheduleTimeBasedFileRollOver() {
 
         eventsStrategy.scheduleTimeBasedFileRollOver(initialDelay, frequency);
 
-        assertEquals(mockFuture, eventsStrategy.scheduledRolloverFutureRef.get());
+        Assert.assertThat(eventsStrategy.scheduledRolloverFutureRef.get(), is(mockFuture));
     }
 
     @Test
@@ -213,7 +224,7 @@ public void testSendAndCleanUpIfSuccess_failedToSendFile() {
         verifyNoMoreInteractions(mockFilesManager);
     }
 
-    void verifyExecutorScheduled(long initialDelaySecs, long frequencySecs) {
+    private void verifyExecutorScheduled(long initialDelaySecs, long frequencySecs) {
         verify(mockExecutor).scheduleAtFixedRate(any(TimeBasedFileRollOverRunnable.class),
                 eq(initialDelaySecs), eq(frequencySecs), eq(TimeUnit.SECONDS));
     }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledScribeStrategyTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledScribeStrategyTest.java
index 881effaa..0847bac0 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledScribeStrategyTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledScribeStrategyTest.java
@@ -19,6 +19,7 @@
 
 import android.content.Context;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -26,7 +27,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyLong;
 import static org.mockito.Matchers.eq;
@@ -64,6 +65,6 @@ public void testGetFileSender() {
         final EnabledScribeStrategy strategy = new EnabledScribeStrategy(mock(Context.class),
                 mock(ScheduledExecutorService.class), mock(ScribeFilesManager.class),
                 scribeConfig, mockSender);
-        assertEquals(mockSender, strategy.getFilesSender());
+        Assert.assertThat(strategy.getFilesSender(), is(mockSender));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
index 57adcfa6..057238c7 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
@@ -21,6 +21,7 @@
 import com.twitter.sdk.android.core.internal.CurrentTimeProvider;
 import com.twitter.sdk.android.core.internal.SystemCurrentTimeProvider;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -34,8 +35,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.mock;
@@ -83,8 +83,7 @@ public void testNoRollOverNeeded() throws IOException{
         verify(mockEventStorage).canWorkingFileStore(anyInt(), anyInt());
         verify(mockCurrentTimeProvider, times(1)).getCurrentTimeMillis();
 
-        assertEquals("roll over time should NOT have been updated",
-                startTime, filesManager.getLastRollOverTime());
+        Assert.assertThat("roll over time should NOT have been updated", filesManager.getLastRollOverTime(), is(startTime));
     }
 
     @Test
@@ -116,8 +115,7 @@ public void testSizeTriggeredRollOver() throws IOException{
         verify(mockEventStorage).rollOver(any(String.class));
         verify(mockCurrentTimeProvider, times(2)).getCurrentTimeMillis();
 
-        assertEquals("roll over time should have been updated", newMostRecentRollOverTime,
-                filesManager.getLastRollOverTime());
+        Assert.assertThat("roll over time should have been updated", filesManager.getLastRollOverTime(), is(newMostRecentRollOverTime));
     }
 
     @Test
@@ -131,10 +129,10 @@ public void testParseTimestampFromRolledOverFileName() {
                 "testParseTimestampFromRolledOverFileName",
                 EventsFilesManager.MAX_FILES_TO_KEEP);
 
-        assertEquals(10, filesManager.parseCreationTimestampFromFileName("sa_hey_10"));
-        assertEquals(0, filesManager.parseCreationTimestampFromFileName("unexpected_badname"));
-        assertEquals(0, filesManager.parseCreationTimestampFromFileName(
-                "unexpected_nonnumeric_time"));
+        Assert.assertThat(filesManager.parseCreationTimestampFromFileName("sa_hey_10"), is(10));
+        Assert.assertThat(filesManager.parseCreationTimestampFromFileName("unexpected_badname"), is(0));
+        Assert.assertThat(filesManager.parseCreationTimestampFromFileName(
+                "unexpected_nonnumeric_time"), is(0));
     }
 
     @Test
@@ -208,8 +206,8 @@ public boolean canWorkingFileStore(int newEventSizeInBytes,
 
             // Verify the event transform.
             final byte[] writtenBytes = bos.toByteArray();
-            assertTrue(Arrays.equals(transform.toBytes(testEvent), writtenBytes));
-            assertEquals(testEvent, transform.fromBytes(writtenBytes));
+            Assert.assertThat(Arrays.equals(transform.toBytes(testEvent), writtenBytes), is(true));
+            Assert.assertThat(transform.fromBytes(writtenBytes), is(testEvent));
         } finally {
             CommonUtils.closeQuietly(bos);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeClientTest.java
index eedcef65..3eda2358 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeClientTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeClientTest.java
@@ -25,6 +25,7 @@
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.internal.IdManager;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -34,10 +35,7 @@
 import java.io.IOException;
 import java.util.concurrent.ScheduledExecutorService;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
@@ -85,17 +83,16 @@ public void testScribeAndFlush() {
     public void testGetScribeHandler() throws IOException {
         final ScribeHandler loggedOutScribeHandler
                 = scribeClient.getScribeHandler(GuestSession.LOGGED_OUT_USER_ID);
-        assertNotNull(loggedOutScribeHandler);
+        Assert.assertThat(loggedOutScribeHandler, notNullValue());
         // Verify that asking for a scribe handler for the same owner id results in the same one
         // being returned.
-        assertEquals(loggedOutScribeHandler,
-                scribeClient.getScribeHandler(GuestSession.LOGGED_OUT_USER_ID));
+        Assert.assertThat(scribeClient.getScribeHandler(GuestSession.LOGGED_OUT_USER_ID), is(loggedOutScribeHandler));
 
         // Verify that different scribe handlers are returned for the different user ids.
         final ScribeHandler testUserScribeHandler
                 = scribeClient.getScribeHandler(TEST_USER_ID);
-        assertNotNull(testUserScribeHandler);
-        assertNotSame(loggedOutScribeHandler, testUserScribeHandler);
+        Assert.assertThat(testUserScribeHandler, notNullValue());
+        Assert.assertThat(testUserScribeHandler, not(sameInstance(loggedOutScribeHandler)));
     }
 
     @Test
@@ -110,7 +107,7 @@ public void testGetScribeStrategy_scribeEnabled() {
 
         final EventsStrategy<ScribeEvent> scribeStrategy
                 = scribeClient.getScribeStrategy(GuestSession.LOGGED_OUT_USER_ID, null);
-        assertTrue(scribeStrategy instanceof EnabledScribeStrategy);
+        Assert.assertThat(scribeStrategy instanceof EnabledScribeStrategy, is(true));
     }
 
     @Test
@@ -125,24 +122,24 @@ public void testGetScribeStrategy_scribeDisabled() {
 
         final EventsStrategy<ScribeEvent> scribeStrategy
                 = scribeClient.getScribeStrategy(GuestSession.LOGGED_OUT_USER_ID, null);
-        assertTrue(scribeStrategy instanceof DisabledEventsStrategy);
+        Assert.assertThat(scribeStrategy instanceof DisabledEventsStrategy, is(true));
     }
 
     @Test
     public void testGetWorkingFileNameForOwner() {
-        assertTrue(scribeClient.getWorkingFileNameForOwner(GuestSession.LOGGED_OUT_USER_ID)
-                .startsWith(Long.toString(GuestSession.LOGGED_OUT_USER_ID)));
+        Assert.assertThat(scribeClient.getWorkingFileNameForOwner(GuestSession.LOGGED_OUT_USER_ID)
+                .startsWith(Long.toString(GuestSession.LOGGED_OUT_USER_ID)), is(true));
 
-        assertTrue(scribeClient.getWorkingFileNameForOwner(TEST_USER_ID)
-                .startsWith(Long.toString(TEST_USER_ID)));
+        Assert.assertThat(scribeClient.getWorkingFileNameForOwner(TEST_USER_ID)
+                .startsWith(Long.toString(TEST_USER_ID)), is(true));
     }
 
     @Test
     public void testGetStorageDirForOwner() {
-        assertTrue(scribeClient.getStorageDirForOwner(GuestSession.LOGGED_OUT_USER_ID)
-                .startsWith(Long.toString(GuestSession.LOGGED_OUT_USER_ID)));
+        Assert.assertThat(scribeClient.getStorageDirForOwner(GuestSession.LOGGED_OUT_USER_ID)
+                .startsWith(Long.toString(GuestSession.LOGGED_OUT_USER_ID)), is(true));
 
-        assertTrue(scribeClient.getStorageDirForOwner(TEST_USER_ID)
-                .startsWith(Long.toString(TEST_USER_ID)));
+        Assert.assertThat(scribeClient.getStorageDirForOwner(TEST_USER_ID)
+                .startsWith(Long.toString(TEST_USER_ID)), is(true));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
index 011e78c8..0f4b6171 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
@@ -17,13 +17,14 @@
 
 package com.twitter.sdk.android.core.internal.scribe;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
 import java.util.Collections;
 
-import static org.junit.Assert.assertSame;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class ScribeEventFactoryTest {
@@ -41,7 +42,7 @@ public void testNewScribeEvent_tfwEvent() {
                 = new EventNamespace.Builder().setClient(TFW_CLIENT_NAME).builder();
         final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, ANY_TIMESTAMP,
                 ANY_LANGUAGE, ANY_ADVERTISING_ID);
-        assertSame(SyndicationClientEvent.class, event.getClass());
+        Assert.assertThat(event.getClass(), sameInstance(SyndicationClientEvent.class));
     }
 
     @Test
@@ -50,7 +51,7 @@ public void testNewScribeEvent_sdkEvent() {
                 = new EventNamespace.Builder().setClient(SDK_CLIENT_NAME).builder();
         final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, ANY_TIMESTAMP,
                 ANY_LANGUAGE, ANY_ADVERTISING_ID);
-        assertSame(SyndicatedSdkImpressionEvent.class, event.getClass());
+        Assert.assertThat(event.getClass(), sameInstance(SyndicatedSdkImpressionEvent.class));
     }
 
     @Test
@@ -59,7 +60,7 @@ public void testNewScribeEvent_otherEvent() {
                 = new EventNamespace.Builder().setClient(OTHER_CLIENT_NAME).builder();
         final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, ANY_TIMESTAMP,
                 ANY_LANGUAGE, ANY_ADVERTISING_ID);
-        assertSame(SyndicatedSdkImpressionEvent.class, event.getClass());
+        Assert.assertThat(event.getClass(), sameInstance(SyndicatedSdkImpressionEvent.class));
     }
 
     @Test
@@ -69,6 +70,6 @@ public void testNewScribeEvent_withEventInfo() {
         final String eventInfo = "any info";
         final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, eventInfo, ANY_TIMESTAMP,
                 ANY_LANGUAGE, ANY_ADVERTISING_ID, Collections.emptyList());
-        assertSame(SyndicatedSdkImpressionEvent.class, event.getClass());
+        Assert.assertThat(event.getClass(), sameInstance(SyndicatedSdkImpressionEvent.class));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
index 5fb527ef..64807f55 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
@@ -22,9 +22,11 @@
 import com.twitter.sdk.android.core.internal.CommonUtils;
 import com.twitter.sdk.android.core.internal.IdManager;
 import okhttp3.*;
+
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -41,7 +43,7 @@
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 
-import static org.junit.Assert.*;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
@@ -68,7 +70,6 @@
     private Context context;
 
     private ScribeFilesSender filesSender;
-    private String[] filenames;
     private List<File> tempFiles;
 
     @Rule
@@ -96,7 +97,7 @@ public void setUp() throws Exception {
                 mockGuestSessionProvider, mock(ExecutorService.class), mockIdManager);
         filesSender.setScribeService(mockService);
 
-        filenames = new String[] {
+        String[] filenames = new String[]{
                 "se_c9666213-d768-45a1-a3ca-5941e4c35f26_1404423214376.tap",
                 "se_f6a58964-88aa-4e52-8bf8-d1d461b64392_1404423154382.tap"
         };
@@ -160,33 +161,33 @@ private void setUpScribeSequence(String sequence) {
 
     // tests follow
     @Test
-    public void testGetScribeEventsAsJsonArrayString() throws IOException, JSONException {
+    public void testGetScribeEventsAsJsonArrayString() throws Exception {
         final String jsonArrayString = filesSender.getScribeEventsAsJsonArrayString(tempFiles);
 
         // Assert that we got back valid json
         final JSONArray jsonArray = new JSONArray(jsonArrayString);
-        assertNotNull(jsonArray);
-        assertEquals(NUM_SCRIBE_EVENTS, jsonArray.length());
+        Assert.assertThat(jsonArray, notNullValue());
+        Assert.assertThat(jsonArray.length(), is(NUM_SCRIBE_EVENTS));
     }
 
     @Test
     public void testGetApiAdapter_nullUserSession() {
         filesSender.setScribeService(null); // set api adapter to null since we pre-set it in setUp
         when(mockSessionMgr.getSession(anyLong())).thenReturn(null);
-        assertNotNull(filesSender.getScribeService());
+        Assert.assertThat(filesSender.getScribeService(), notNullValue());
     }
 
     @Test
     public void testGetApiAdapter_validSession() {
         when(mockSessionMgr.getSession(anyLong())).thenReturn(mockSession);
-        assertNotNull(filesSender.getScribeService());
+        Assert.assertThat(filesSender.getScribeService(), notNullValue());
     }
 
     @Test
     public void testGetApiAdapter_multipleCalls() {
         when(mockSessionMgr.getSession(anyLong())).thenReturn(mockSession);
         final ScribeFilesSender.ScribeService service = filesSender.getScribeService();
-        assertEquals(service, filesSender.getScribeService());
+        Assert.assertThat(filesSender.getScribeService(), is(service));
     }
 
     @Test
@@ -211,27 +212,27 @@ public void testUpload_withSequence() throws IOException {
     @Test
     public void testSend_uploadSucceeds() {
         setUpMockServiceResponse(successResponse());
-        assertTrue(filesSender.send(tempFiles));
+        Assert.assertThat(filesSender.send(tempFiles), is(true));
     }
 
     @Test
     public void testSend_uploadFailsInternalServerError() {
         setUpMockServiceResponse(errorResponse(HttpURLConnection.HTTP_INTERNAL_ERROR));
-        assertTrue(filesSender.send(tempFiles));
+        Assert.assertThat(filesSender.send(tempFiles), is(true));
         verify(mockService, times(1)).upload(anyString(), anyString(), anyString());
     }
 
     @Test
     public void testSend_uploadFailsBadRequest() {
         setUpMockServiceResponse(errorResponse(HttpURLConnection.HTTP_BAD_REQUEST));
-        assertTrue(filesSender.send(tempFiles));
+        Assert.assertThat(filesSender.send(tempFiles), is(true));
         verify(mockService, times(1)).upload(anyString(), anyString(), anyString());
     }
 
     @Test
     public void testSend_uploadFailsForbidden() {
         setUpMockServiceResponse(errorResponse(HttpURLConnection.HTTP_FORBIDDEN));
-        assertFalse(filesSender.send(tempFiles));
+        Assert.assertThat(filesSender.send(tempFiles), is(false));
     }
 
     public Interceptor.Chain createMockChain() throws IOException{
@@ -258,7 +259,7 @@ public void testConfigRequestInterceptor_addsPollingHeader() throws IOException
 
         final Request request = interceptor.intercept(createMockChain()).request();
 
-        assertEquals(REQUIRED_TWITTER_POLLING_HEADER_VALUE, request.header(TWITTER_POLLING_HEADER));
+        Assert.assertThat(request.header(TWITTER_POLLING_HEADER), is(REQUIRED_TWITTER_POLLING_HEADER_VALUE));
     }
 
     @Test
@@ -271,7 +272,7 @@ public void testConfigRequestInterceptor_nullUserAgent() throws IOException {
 
         final Request request = interceptor.intercept(createMockChain()).request();
 
-        assertNull(request.header(USER_AGENT_HEADER));
+        Assert.assertThat(request.header(USER_AGENT_HEADER), nullValue());
     }
 
     @Test
@@ -284,7 +285,7 @@ public void testConfigRequestInterceptor_anUserAgent() throws IOException {
 
         final Request request = interceptor.intercept(createMockChain()).request();
 
-        assertEquals(ANY_USER_AGENT, request.header(USER_AGENT_HEADER));
+        Assert.assertThat(request.header(USER_AGENT_HEADER), is(ANY_USER_AGENT));
     }
 
     @Test
@@ -295,7 +296,7 @@ public void testConfigRequestInterceptor_nullIdManager() throws IOException {
 
         final Request request = interceptor.intercept(createMockChain()).request();
 
-        assertNull(request.header(DEVICE_ID_HEADER));
+        Assert.assertThat(request.header(DEVICE_ID_HEADER), nullValue());
     }
 
     @Test
@@ -307,6 +308,6 @@ public void testConfigRequestInterceptor_anIdManager() throws IOException {
 
         final Request request = interceptor.intercept(createMockChain()).request();
 
-        assertEquals(ANY_DEVICE_ID, request.header(DEVICE_ID_HEADER));
+        Assert.assertThat(request.header(DEVICE_ID_HEADER), is(ANY_DEVICE_ID));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeHandlerTest.java
index d254d134..e2c7043f 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeHandlerTest.java
@@ -17,6 +17,7 @@
 
 package com.twitter.sdk.android.core.internal.scribe;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -25,7 +26,7 @@
 
 import java.util.concurrent.ScheduledExecutorService;
 
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -58,6 +59,6 @@ public void testScribeAndFlush() {
     @Test
     public void testGetDisabledEventsStrategy() {
         final EventsStrategy<ScribeEvent> strategy = scribeHandler.getDisabledEventsStrategy();
-        assertTrue(strategy instanceof DisabledEventsStrategy);
+        Assert.assertThat(strategy instanceof DisabledEventsStrategy, is(true));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeItemTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeItemTest.java
index 6f7944f4..a49347d7 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeItemTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeItemTest.java
@@ -25,13 +25,12 @@
 import com.twitter.sdk.android.core.models.User;
 import com.twitter.sdk.android.core.models.UserBuilder;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class ScribeItemTest {
@@ -50,61 +49,61 @@
     @Test
     public void testFromTweet() {
         final Tweet tweet = new TweetBuilder().setId(TEST_ID).build();
-        final ScribeItem item = ScribeItem.fromTweet(tweet);
+        final ScribeItem item = ScribeItem.Companion.fromTweet(tweet);
 
-        assertEquals(Long.valueOf(TEST_ID), item.id);
-        assertEquals(Integer.valueOf(ScribeItem.TYPE_TWEET), item.itemType);
-        assertNull(item.description);
+        Assert.assertThat(item.getId(), is(Long.valueOf(TEST_ID)));
+        Assert.assertThat(item.getItemType(), is(Integer.valueOf(ScribeItem.TYPE_TWEET)));
+        Assert.assertThat(item.getDescription(), nullValue());
     }
 
     @Test
     public void testFromUser() {
         final User user = new UserBuilder().setId(TEST_ID).build();
-        final ScribeItem item = ScribeItem.fromUser(user);
+        final ScribeItem item = ScribeItem.Companion.fromUser(user);
 
-        assertEquals(Long.valueOf(TEST_ID), item.id);
-        assertEquals(Integer.valueOf(ScribeItem.TYPE_USER), item.itemType);
-        assertNull(item.description);
+        Assert.assertThat(item.getId(), is(Long.valueOf(TEST_ID)));
+        Assert.assertThat(item.getItemType(), is(Integer.valueOf(ScribeItem.TYPE_USER)));
+        Assert.assertThat(item.getDescription(), nullValue());
     }
 
     @Test
     public void testFromMediaEntity_withAnimatedGif() {
         final MediaEntity animatedGif = createTestEntity(TEST_TYPE_ANIMATED_GIF);
-        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TEST_ID, animatedGif);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMediaEntity(TEST_ID, animatedGif);
 
-        assertEquals(Long.valueOf(TEST_ID), scribeItem.id);
-        assertEquals(Integer.valueOf(ScribeItem.TYPE_TWEET), scribeItem.itemType);
-        assertMediaDetails(scribeItem.mediaDetails, TEST_TYPE_ANIMATED_GIF_ID);
+        Assert.assertThat(scribeItem.getId(), is(Long.valueOf(TEST_ID)));
+        Assert.assertThat(scribeItem.getItemType(), is(Integer.valueOf(ScribeItem.TYPE_TWEET)));
+        assertMediaDetails(scribeItem.getMediaDetails(), TEST_TYPE_ANIMATED_GIF_ID);
     }
 
     @Test
     public void testFromMediaEntity_withConsumerVideo() {
         final MediaEntity videoEntity = createTestEntity(TEST_TYPE_CONSUMER);
-        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TEST_ID, videoEntity);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromMediaEntity(TEST_ID, videoEntity);
 
-        assertEquals(Long.valueOf(TEST_ID), scribeItem.id);
-        assertEquals(Integer.valueOf(ScribeItem.TYPE_TWEET), scribeItem.itemType);
-        assertMediaDetails(scribeItem.mediaDetails, TEST_TYPE_CONSUMER_ID);
+        Assert.assertThat(scribeItem.getId(), is(Long.valueOf(TEST_ID)));
+        Assert.assertThat(scribeItem.getItemType(), is(Integer.valueOf(ScribeItem.TYPE_TWEET)));
+        assertMediaDetails(scribeItem.getMediaDetails(), TEST_TYPE_CONSUMER_ID);
     }
 
     @Test
     public void testFromTweetCard() {
         final long tweetId = TEST_ID;
         final Card vineCard = TestFixtures.sampleValidVineCard();
-        final ScribeItem scribeItem = ScribeItem.fromTweetCard(tweetId, vineCard);
+        final ScribeItem scribeItem = ScribeItem.Companion.fromTweetCard(tweetId, vineCard);
 
-        assertEquals(Long.valueOf(TEST_ID), scribeItem.id);
-        assertEquals(Integer.valueOf(ScribeItem.TYPE_TWEET), scribeItem.itemType);
-        assertMediaDetails(scribeItem.mediaDetails, TEST_TYPE_VINE_ID);
+        Assert.assertThat(scribeItem.getId(), is(Long.valueOf(TEST_ID)));
+        Assert.assertThat(scribeItem.getItemType(), is(Integer.valueOf(ScribeItem.TYPE_TWEET)));
+        assertMediaDetails(scribeItem.getMediaDetails(), TEST_TYPE_VINE_ID);
     }
 
     @Test
     public void testFromMessage() {
-        final ScribeItem item = ScribeItem.fromMessage(TEST_MESSAGE);
+        final ScribeItem item = ScribeItem.Companion.fromMessage(TEST_MESSAGE);
 
-        assertNull(item.id);
-        assertEquals(Integer.valueOf(ScribeItem.TYPE_MESSAGE), item.itemType);
-        assertEquals(TEST_MESSAGE, item.description);
+        Assert.assertThat(item.getId(), nullValue());
+        Assert.assertThat(item.getItemType(), is(Integer.valueOf(ScribeItem.TYPE_MESSAGE)));
+        Assert.assertThat(item.getDescription(), is(TEST_MESSAGE));
     }
 
     @Test
@@ -117,30 +116,30 @@ public void testBuilder() {
                 .setMediaDetails(TEST_MEDIA_DETAILS)
                 .build();
 
-        assertEquals(Long.valueOf(TEST_ID), item.id);
-        assertEquals(Integer.valueOf(ScribeItem.TYPE_MESSAGE), item.itemType);
-        assertEquals(TEST_MESSAGE, item.description);
-        assertEquals(TEST_CARD_EVENT, item.cardEvent);
-        assertEquals(TEST_MEDIA_DETAILS, item.mediaDetails);
+        Assert.assertThat(item.getId(), is(Long.valueOf(TEST_ID)));
+        Assert.assertThat(item.getItemType(), is(Integer.valueOf(ScribeItem.TYPE_MESSAGE)));
+        Assert.assertThat(item.getDescription(), is(TEST_MESSAGE));
+        Assert.assertThat(item.getCardEvent(), is(TEST_CARD_EVENT));
+        Assert.assertThat(item.getMediaDetails(), is(TEST_MEDIA_DETAILS));
     }
 
     @Test
     public void testBuilder_empty() {
         final ScribeItem item = new ScribeItem.Builder().build();
 
-        assertNull(item.id);
-        assertNull(item.itemType);
-        assertNull(item.description);
-        assertNull(item.cardEvent);
-        assertNull(item.mediaDetails);
+        Assert.assertThat(item.getId(), nullValue());
+        Assert.assertThat(item.getItemType(), nullValue());
+        Assert.assertThat(item.getDescription(), nullValue());
+        Assert.assertThat(item.getCardEvent(), nullValue());
+        Assert.assertThat(item.getMediaDetails(), nullValue());
     }
 
 
     static void assertMediaDetails(ScribeItem.MediaDetails mediaDetails, int type) {
-        assertNotNull(mediaDetails);
-        assertEquals(TEST_ID, mediaDetails.contentId);
-        assertEquals(type, mediaDetails.mediaType);
-        assertEquals(TEST_MEDIA_ID, mediaDetails.publisherId);
+        Assert.assertThat(mediaDetails, notNullValue());
+        Assert.assertThat(mediaDetails.getContentId(), is(TEST_ID));
+        Assert.assertThat(mediaDetails.getMediaType(), is(type));
+        Assert.assertThat(mediaDetails.getPublisherId(), is(TEST_MEDIA_ID));
     }
 
     private MediaEntity createTestEntity(String type) {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
index 80d2de74..5fba2f6d 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
@@ -22,17 +22,14 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 
 import java.io.InputStreamReader;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 public class BindingValuesAdapterTest {
     Gson gson;
@@ -53,56 +50,56 @@ public void testDeserialize_withValidBindingValues() {
                 .getAsStream("model_card.json")));
         final Card card = gson.fromJson(reader, Card.class);
 
-        assertNotNull(card.getBindingValues());
-        assertTrue(card.getBindingValues().containsKey("app_id"));
-        assertEquals("co.vine.android", card.getBindingValues().get("app_id"));
-        assertTrue(card.getBindingValues().containsKey("app_is_free"));
-        assertEquals("true", card.getBindingValues().get("app_is_free"));
-        assertTrue(card.getBindingValues().containsKey("app_name"));
-        assertEquals("Vine - video entertainment", card.getBindingValues().get("app_name"));
-        assertTrue(card.getBindingValues().containsKey("app_num_ratings"));
-        assertEquals("1,080,460", card.getBindingValues().get("app_num_ratings"));
-        assertTrue(card.getBindingValues().containsKey("app_price_amount"));
-        assertEquals("0.0", card.getBindingValues().get("app_price_amount"));
-        assertTrue(card.getBindingValues().containsKey("app_price_currency"));
-        assertEquals("USD", card.getBindingValues().get("app_price_currency"));
-        assertTrue(card.getBindingValues().containsKey("app_star_rating"));
-        assertEquals("4.2", card.getBindingValues().get("app_star_rating"));
-        assertTrue(card.getBindingValues().containsKey("app_url"));
-        assertTrue(card.getBindingValues().containsKey("app_url_resolved"));
-        assertTrue(card.getBindingValues().containsKey("card_url"));
-        assertTrue(card.getBindingValues().containsKey("description"));
-        assertEquals("Vine by Krystaalized", card.getBindingValues().get("description"));
-        assertTrue(card.getBindingValues().containsKey("domain"));
-        assertEquals("vine.co", card.getBindingValues().get("domain"));
-        assertTrue(card.getBindingValues().containsKey("player_height"));
-        assertEquals("535", card.getBindingValues().get("player_height"));
-        assertTrue(card.getBindingValues().containsKey("player_image"));
+        Assert.assertThat(card.getBindingValues(), notNullValue());
+        Assert.assertThat(card.getBindingValues().containsKey("app_id"), is(true));
+        Assert.assertThat(card.getBindingValues().get("app_id"), is("co.vine.android"));
+        Assert.assertThat(card.getBindingValues().containsKey("app_is_free"), is(true));
+        Assert.assertThat(card.getBindingValues().get("app_is_free"), is("true"));
+        Assert.assertThat(card.getBindingValues().containsKey("app_name"), is(true));
+        Assert.assertThat(card.getBindingValues().get("app_name"), is("Vine - video entertainment"));
+        Assert.assertThat(card.getBindingValues().containsKey("app_num_ratings"), is(true));
+        Assert.assertThat(card.getBindingValues().get("app_num_ratings"), is("1,080,460"));
+        Assert.assertThat(card.getBindingValues().containsKey("app_price_amount"), is(true));
+        Assert.assertThat(card.getBindingValues().get("app_price_amount"), is("0.0"));
+        Assert.assertThat(card.getBindingValues().containsKey("app_price_currency"), is(true));
+        Assert.assertThat(card.getBindingValues().get("app_price_currency"), is("USD"));
+        Assert.assertThat(card.getBindingValues().containsKey("app_star_rating"), is(true));
+        Assert.assertThat(card.getBindingValues().get("app_star_rating"), is("4.2"));
+        Assert.assertThat(card.getBindingValues().containsKey("app_url"), is(true));
+        Assert.assertThat(card.getBindingValues().containsKey("app_url_resolved"), is(true));
+        Assert.assertThat(card.getBindingValues().containsKey("card_url"), is(true));
+        Assert.assertThat(card.getBindingValues().containsKey("description"), is(true));
+        Assert.assertThat(card.getBindingValues().get("description"), is("Vine by Krystaalized"));
+        Assert.assertThat(card.getBindingValues().containsKey("domain"), is(true));
+        Assert.assertThat(card.getBindingValues().get("domain"), is("vine.co"));
+        Assert.assertThat(card.getBindingValues().containsKey("player_height"), is(true));
+        Assert.assertThat(card.getBindingValues().get("player_height"), is("535"));
+        Assert.assertThat(card.getBindingValues().containsKey("player_image"), is(true));
         final ImageValue imageValue = card.getBindingValues().get("player_image");
-        assertNotNull(imageValue);
-        assertEquals(480, imageValue.height);
-        assertEquals(480, imageValue.width);
-        assertEquals("https://o.twimg.com/qwhjddd", imageValue.url);
-        assertTrue(card.getBindingValues().containsKey("player_stream_content_type"));
-        assertTrue(card.getBindingValues().containsKey("player_stream_url"));
-        assertTrue(card.getBindingValues().containsKey("player_url"));
-        assertTrue(card.getBindingValues().containsKey("player_width"));
-        assertEquals("535", card.getBindingValues().get("player_width"));
-        assertTrue(card.getBindingValues().containsKey("site"));
-        assertNotNull(card.getBindingValues().get("site"));
-        assertEquals("586671909", ((UserValue) card.getBindingValues().get("site")).getIdStr());
-        assertTrue(card.getBindingValues().containsKey("title"));
-        assertTrue(card.getBindingValues().containsKey("vanity_url"));
-        assertEquals("vine.co", card.getBindingValues().get("vanity_url"));
-        assertFalse(card.getBindingValues().containsKey("foo"));
-        assertFalse(card.getBindingValues().containsKey(null));
+        Assert.assertThat(imageValue, notNullValue());
+        Assert.assertThat(imageValue.height, is(480));
+        Assert.assertThat(imageValue.width, is(480));
+        Assert.assertThat(imageValue.url, is("https://o.twimg.com/qwhjddd"));
+        Assert.assertThat(card.getBindingValues().containsKey("player_stream_content_type"), is(true));
+        Assert.assertThat(card.getBindingValues().containsKey("player_stream_url"), is(true));
+        Assert.assertThat(card.getBindingValues().containsKey("player_url"), is(true));
+        Assert.assertThat(card.getBindingValues().containsKey("player_width"), is(true));
+        Assert.assertThat(card.getBindingValues().get("player_width"), is("535"));
+        Assert.assertThat(card.getBindingValues().containsKey("site"), is(true));
+        Assert.assertThat(card.getBindingValues().get("site"), notNullValue());
+        Assert.assertThat(((UserValue) card.getBindingValues().get("site")).getIdStr(), is("586671909"));
+        Assert.assertThat(card.getBindingValues().containsKey("title"), is(true));
+        Assert.assertThat(card.getBindingValues().containsKey("vanity_url"), is(true));
+        Assert.assertThat(card.getBindingValues().get("vanity_url"), is("vine.co"));
+        Assert.assertThat(card.getBindingValues().containsKey("foo"), is(false));
+        Assert.assertThat(card.getBindingValues().containsKey(null), is(false));
     }
 
     @Test
     public void testDeserialize_withEmptyBindingValues() {
         final BindingValues bindingValues = gson.fromJson("{}", BindingValues.class);
 
-        assertNotNull(bindingValues);
+        Assert.assertThat(bindingValues, notNullValue());
     }
 
     @Test
@@ -110,9 +107,9 @@ public void testDeserialize_withNoType() {
         final String testString = "{\"app_id\": {}}";
         final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
 
-        assertNotNull(bindingValues);
-        assertTrue(bindingValues.containsKey("app_id"));
-        assertNull(bindingValues.get("app_id"));
+        Assert.assertThat(bindingValues, notNullValue());
+        Assert.assertThat(bindingValues.containsKey("app_id"), is(true));
+        Assert.assertThat(bindingValues.get("app_id"), nullValue());
     }
 
     @Test
@@ -120,9 +117,9 @@ public void testDeserialize_withUnsupportedType() {
         final String testString = "{\"app_id\": {\"type\": \"FOOBAR\"}}";
         final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
 
-        assertNotNull(bindingValues);
-        assertTrue(bindingValues.containsKey("app_id"));
-        assertNull(bindingValues.get("app_id"));
+        Assert.assertThat(bindingValues, notNullValue());
+        Assert.assertThat(bindingValues.containsKey("app_id"), is(true));
+        Assert.assertThat(bindingValues.get("app_id"), nullValue());
     }
 
     @Test
@@ -130,9 +127,9 @@ public void testDeserialize_withNonPrimitiveType() {
         final String testString = "{\"app_id\": {\"type\": {}}}";
         final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
 
-        assertNotNull(bindingValues);
-        assertTrue(bindingValues.containsKey("app_id"));
-        assertNull(bindingValues.get("app_id"));
+        Assert.assertThat(bindingValues, notNullValue());
+        Assert.assertThat(bindingValues.containsKey("app_id"), is(true));
+        Assert.assertThat(bindingValues.get("app_id"), nullValue());
     }
 
     @Test
@@ -140,8 +137,8 @@ public void testDeserialize_withNoValue() {
         final String testString = "{\"app_id\": {\"type\": \"STRING\"}}";
         final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
 
-        assertNotNull(bindingValues);
-        assertTrue(bindingValues.containsKey("app_id"));
-        assertNull(bindingValues.get("app_id"));
+        Assert.assertThat(bindingValues, notNullValue());
+        Assert.assertThat(bindingValues.containsKey("app_id"), is(true));
+        Assert.assertThat(bindingValues.get("app_id"), nullValue());
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
index 1679958d..2b2c5203 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
@@ -19,12 +19,13 @@
 
 import com.google.gson.Gson;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class CoordinatesTest  {
@@ -52,8 +53,8 @@ public void setUp() throws Exception {
     @Test
     public void testDeserialization() {
         final Coordinates coordinates = gson.fromJson(TEST_JSON, Coordinates.class);
-        assertEquals(TEST_COORDINATES_LONGITUDE, coordinates.getLongitude());
-        assertEquals(TEST_COORDINATES_LATITUDE, coordinates.getLatitude());
-        assertEquals(TEST_TYPE, coordinates.type);
+        Assert.assertThat(coordinates.getLongitude(), is(TEST_COORDINATES_LONGITUDE));
+        Assert.assertThat(coordinates.getLatitude(), is(TEST_COORDINATES_LATITUDE));
+        Assert.assertThat(coordinates.type, is(TEST_TYPE));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java
index d14974eb..24223354 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java
@@ -18,12 +18,14 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class EntityTest  {
@@ -43,7 +45,7 @@ public void setUp() throws Exception {
     @Test
     public void testDeserialization() {
         final Entity entity = gson.fromJson(TEST_JSON, Entity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
+        Assert.assertThat(entity.getStart(), is(TEST_INDICES_START));
+        Assert.assertThat(entity.getEnd(), is(TEST_INDICES_END));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
index 968b24fe..67f2b75a 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
@@ -18,12 +18,14 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class HashTagEntityTest  {
@@ -44,8 +46,8 @@ public void setUp() throws Exception {
     @Test
     public void testDeserialization() {
         final HashtagEntity entity = gson.fromJson(TEST_JSON, HashtagEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_TEXT, entity.text);
+        Assert.assertThat(entity.getStart(), is(TEST_INDICES_START));
+        Assert.assertThat(entity.getEnd(), is(TEST_INDICES_END));
+        Assert.assertThat(entity.text, is(TEST_TEXT));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
index 0a55b848..6fdec2aa 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
@@ -21,6 +21,8 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -32,7 +34,7 @@
 import java.io.NotSerializableException;
 import java.io.ObjectOutputStream;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.fail;
 
 @RunWith(RobolectricTestRunner.class)
@@ -83,29 +85,29 @@ public void testDeserialization() {
                     .getAsStream("model_media_entity.json")));
             final MediaEntity entity = gson.fromJson(reader, MediaEntity.class);
 
-            assertEquals(TEST_INDICES_START, entity.getStart());
-            assertEquals(TEST_INDICES_END, entity.getEnd());
-            assertEquals(TEST_URL, entity.url);
-            assertEquals(TEST_DISPLAY_URL, entity.displayUrl);
-            assertEquals(TEST_EXPANDED_URL, entity.expandedUrl);
-            assertEquals(TEST_ID, entity.id);
-            assertEquals(TEST_ID_STR, entity.idStr);
-            assertEquals(TEST_MEDIA_URL, entity.mediaUrl);
-            assertEquals(TEST_MEDIA_URL_HTTPS, entity.mediaUrlHttps);
-            assertSizeEquals(TEST_SIZE_THUMB, entity.sizes.thumb);
-            assertSizeEquals(TEST_SIZE_SMALL, entity.sizes.small);
-            assertSizeEquals(TEST_SIZE_MEDIUM, entity.sizes.medium);
-            assertSizeEquals(TEST_SIZE_LARGE, entity.sizes.large);
-            assertEquals(TEST_SOURCE_STATUS_ID, entity.sourceStatusId);
-            assertEquals(TEST_SOURCE_STATUS_ID_STR, entity.sourceStatusIdStr);
-            assertEquals(TEST_TYPE, entity.type);
-            assertEquals(TEST_ASPECT_WIDTH, (int) entity.videoInfo.aspectRatio.get(0));
-            assertEquals(TEST_ASPECT_HEIGHT, (int) entity.videoInfo.aspectRatio.get(1));
-            assertEquals(TEST_DURATION, entity.videoInfo.durationMillis);
-            assertEquals(TEST_TOTAL_VARIANTS, entity.videoInfo.variants.size());
-            assertVariantEquals(TEST_VARIANT_0, entity.videoInfo.variants.get(0));
-            assertVariantEquals(TEST_VARIANT_1, entity.videoInfo.variants.get(1));
-            assertEquals(TEST_ALT_TEXT, entity.altText);
+            Assert.assertThat(entity.getStart(), is(TEST_INDICES_START));
+            Assert.assertThat(entity.getEnd(), is(TEST_INDICES_END));
+            Assert.assertThat(entity.getUrl(), is(TEST_URL));
+            Assert.assertThat(entity.getDisplayUrl(), is(TEST_DISPLAY_URL));
+            Assert.assertThat(entity.getExpandedUrl(), is(TEST_EXPANDED_URL));
+            Assert.assertThat(entity.id, is(TEST_ID));
+            Assert.assertThat(entity.idStr, is(TEST_ID_STR));
+            Assert.assertThat(entity.mediaUrl, is(TEST_MEDIA_URL));
+            Assert.assertThat(entity.mediaUrlHttps, is(TEST_MEDIA_URL_HTTPS));
+            assertSizeEquals(TEST_SIZE_THUMB, entity.sizes.getThumb());
+            assertSizeEquals(TEST_SIZE_SMALL, entity.sizes.getSmall());
+            assertSizeEquals(TEST_SIZE_MEDIUM, entity.sizes.getMedium());
+            assertSizeEquals(TEST_SIZE_LARGE, entity.sizes.getLarge());
+            Assert.assertThat(entity.getSourceStatusId(), is(TEST_SOURCE_STATUS_ID));
+            Assert.assertThat(entity.getSourceStatusIdStr(), is(TEST_SOURCE_STATUS_ID_STR));
+            Assert.assertThat(entity.getType(), is(TEST_TYPE));
+            Assert.assertThat(entity.getVideoInfo().aspectRatio.get(0), is(TEST_ASPECT_WIDTH));
+            Assert.assertThat(entity.getVideoInfo().aspectRatio.get(1), is(TEST_ASPECT_HEIGHT));
+            Assert.assertThat(entity.getVideoInfo().durationMillis, is(TEST_DURATION));
+            Assert.assertThat(entity.getVideoInfo().variants.size(), is(TEST_TOTAL_VARIANTS));
+            assertVariantEquals(TEST_VARIANT_0, entity.getVideoInfo().variants.get(0));
+            assertVariantEquals(TEST_VARIANT_1, entity.getVideoInfo().variants.get(1));
+            Assert.assertThat(entity.getAltText(), is(TEST_ALT_TEXT));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
@@ -128,14 +130,14 @@ public void testSerializable() throws Exception {
     }
 
     public static void assertSizeEquals(MediaEntity.Size expected, MediaEntity.Size actual) {
-        assertEquals(expected.h, actual.h);
-        assertEquals(expected.w, actual.w);
-        assertEquals(expected.resize, actual.resize);
+        Assert.assertThat(actual.getH(), is(expected.getH()));
+        Assert.assertThat(actual.getW(), is(expected.getW()));
+        Assert.assertThat(actual.getResize(), is(expected.getResize()));
     }
 
     public static void assertVariantEquals(VideoInfo.Variant expected, VideoInfo.Variant actual) {
-        assertEquals(expected.bitrate, actual.bitrate);
-        assertEquals(expected.contentType, actual.contentType);
-        assertEquals(expected.url, actual.url);
+        Assert.assertThat(actual.bitrate, is(expected.bitrate));
+        Assert.assertThat(actual.contentType, is(expected.contentType));
+        Assert.assertThat(actual.url, is(expected.url));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
index 2c2ea514..9678c23d 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
@@ -18,12 +18,14 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class MentionEntityTest  {
@@ -49,11 +51,11 @@ public void setUp() throws Exception {
     @Test
     public void testDeserialization() {
         final MentionEntity entity = gson.fromJson(TEST_JSON, MentionEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_ID, entity.id);
-        assertEquals(TEST_ID_STR, entity.idStr);
-        assertEquals(TEST_NAME, entity.name);
-        assertEquals(TEST_SCREEN_NAME, entity.screenName);
+        Assert.assertThat(entity.getStart(), is(TEST_INDICES_START));
+        Assert.assertThat(entity.getEnd(), is(TEST_INDICES_END));
+        Assert.assertThat(entity.id, is(TEST_ID));
+        Assert.assertThat(entity.idStr, is(TEST_ID_STR));
+        Assert.assertThat(entity.name, is(TEST_NAME));
+        Assert.assertThat(entity.screenName, is(TEST_SCREEN_NAME));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
index bcb96cf7..87d960ef 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
@@ -21,6 +21,8 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -31,7 +33,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class PlaceTest {
@@ -74,31 +76,30 @@ public void testDeserialization() {
             final Place place = gson.fromJson(reader, Place.class);
             assertAttributes(place.attributes);
             assertBoundingBox(place.boundingBox);
-            assertEquals(EXPECTED_COUNTRY, place.country);
-            assertEquals(EXPECTED_COUNTRY_CODE, place.countryCode);
-            assertEquals(EXPECTED_FULL_NAME, place.fullName);
-            assertEquals(EXPECTED_ID, place.id);
-            assertEquals(EXPECTED_NAME, place.name);
-            assertEquals(EXPECTED_PLACE_TYPE, place.placeType);
-            assertEquals(EXPECTED_URL, place.url);
+            Assert.assertThat(place.country, is(EXPECTED_COUNTRY));
+            Assert.assertThat(place.countryCode, is(EXPECTED_COUNTRY_CODE));
+            Assert.assertThat(place.fullName, is(EXPECTED_FULL_NAME));
+            Assert.assertThat(place.id, is(EXPECTED_ID));
+            Assert.assertThat(place.name, is(EXPECTED_NAME));
+            Assert.assertThat(place.placeType, is(EXPECTED_PLACE_TYPE));
+            Assert.assertThat(place.url, is(EXPECTED_URL));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
     }
 
     private void assertAttributes(Map<String, String> attributes) {
-        assertEquals(EXPECTED_ATTR_STREET_ADDRESS_VALUE,
-                attributes.get(EXPECTED_ATTR_STREET_ADDRESS));
-        assertEquals(EXPECTED_ATTR_623_ID_VALUE, attributes.get(EXPECTED_ATTR_623_ID));
-        assertEquals(EXPECTED_ATTR_TWITTER_VALUE, attributes.get(EXPECTED_ATTR_TWITTER));
+        Assert.assertThat(attributes.get(EXPECTED_ATTR_STREET_ADDRESS), is(EXPECTED_ATTR_STREET_ADDRESS_VALUE));
+        Assert.assertThat(attributes.get(EXPECTED_ATTR_623_ID), is(EXPECTED_ATTR_623_ID_VALUE));
+        Assert.assertThat(attributes.get(EXPECTED_ATTR_TWITTER), is(EXPECTED_ATTR_TWITTER_VALUE));
     }
 
     private void assertBoundingBox(Place.BoundingBox boundingBox) {
-        assertEquals(EXPECTED_BOUNDING_BOX_TYPE, boundingBox.type);
-        assertEquals(4, boundingBox.coordinates.get(0).size());
+        Assert.assertThat(boundingBox.type, is(EXPECTED_BOUNDING_BOX_TYPE));
+        Assert.assertThat(boundingBox.coordinates.get(0).size(), is(4));
         for (List<Double> d: boundingBox.coordinates.get(0)) {
-            assertEquals(EXPECTED_BOUNDING_BOX_LONGITUDE, d.get(0));
-            assertEquals(EXPECTED_BOUNDING_BOX_LATITUDE, d.get(1));
+            Assert.assertThat(d.get(0), is(EXPECTED_BOUNDING_BOX_LONGITUDE));
+            Assert.assertThat(d.get(1), is(EXPECTED_BOUNDING_BOX_LATITUDE));
         }
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java
index 3b67c855..35266a32 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java
@@ -21,6 +21,7 @@
 import com.google.gson.GsonBuilder;
 import com.google.gson.annotations.SerializedName;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -29,8 +30,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class SafeListAdapterTest  {
@@ -52,13 +52,13 @@ public void setUp() throws Exception {
     @Test
     public void testDeserialization_nullListModel1() {
         final Model1 model = gson.fromJson(TEST_JSON_LIST_NULL, Model1.class);
-        assertEquals(Collections.EMPTY_LIST, model.listOfIntegers);
+        Assert.assertThat(model.listOfIntegers, is(Collections.EMPTY_LIST));
     }
 
     @Test
     public void testDeserialization_emptyListModel1() {
         final Model1 model = gson.fromJson(TEST_JSON_LIST_EMPTY, Model1.class);
-        assertEquals(Collections.EMPTY_LIST, model.listOfIntegers);
+        Assert.assertThat(model.listOfIntegers, is(Collections.EMPTY_LIST));
     }
 
     @Test
@@ -67,20 +67,20 @@ public void testDeserialization_validListModel1() {
         try {
             model.listOfIntegers.add(TEST_ANY_NUMBER);
         } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
+            Assert.assertThat(e instanceof UnsupportedOperationException, is(true));
         }
     }
 
     @Test
     public void testDeserialization_nullListModel2() {
         final Model2 model = gson.fromJson(TEST_JSON_LIST_NULL, Model2.class);
-        assertEquals(Collections.EMPTY_LIST, model.listOfLongs);
+        Assert.assertThat(model.listOfLongs, is(Collections.EMPTY_LIST));
     }
 
     @Test
     public void testDeserialization_emptyList() {
         final Model2 model = gson.fromJson(TEST_JSON_LIST_EMPTY, Model2.class);
-        assertEquals(Collections.EMPTY_LIST, model.listOfLongs);
+        Assert.assertThat(model.listOfLongs, is(Collections.EMPTY_LIST));
     }
 
     @Test
@@ -89,7 +89,7 @@ public void testDeserialization_validListModel2() {
         try {
             model.listOfLongs.add((long) TEST_ANY_NUMBER);
         } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
+            Assert.assertThat(e instanceof UnsupportedOperationException, is(true));
         }
     }
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java
index e7b4fd7c..46d4206b 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java
@@ -21,6 +21,7 @@
 import com.google.gson.GsonBuilder;
 import com.google.gson.annotations.SerializedName;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -29,8 +30,7 @@
 import java.util.Collections;
 import java.util.Map;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class SafeMapAdapterTest  {
@@ -54,7 +54,7 @@ public void setUp() throws Exception {
     @Test
     public void testDeserialization_emptyMapModel1() {
         final Model1 model = gson.fromJson(TEST_JSON_MAP_EMPTY, Model1.class);
-        assertEquals(Collections.EMPTY_MAP, model.mapOfStrings);
+        Assert.assertThat(model.mapOfStrings, is(Collections.EMPTY_MAP));
     }
 
     @Test
@@ -63,14 +63,14 @@ public void testDeserialization_validMapModel1() {
         try {
             model.mapOfStrings.put(TEST_ANY_STRING_KEY, TEST_ANY_STRING_VALUE);
         } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
+            Assert.assertThat(e instanceof UnsupportedOperationException, is(true));
         }
     }
 
     @Test
     public void testDeserialization_emptyList() {
         final Model2 model = gson.fromJson(TEST_JSON_MAP_EMPTY, Model2.class);
-        assertEquals(Collections.EMPTY_MAP, model.stringLongMap);
+        Assert.assertThat(model.stringLongMap, is(Collections.EMPTY_MAP));
     }
 
     @Test
@@ -79,7 +79,7 @@ public void testDeserialization_validMapModel2() {
         try {
             model.stringLongMap.put(TEST_ANY_STRING_KEY, (long) TEST_ANY_NUMBER);
         } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
+            Assert.assertThat(e instanceof UnsupportedOperationException, is(true));
         }
     }
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
index a74f8d11..5d7ee04f 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
@@ -18,12 +18,14 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class SymbolEntityTest  {
@@ -43,8 +45,8 @@ public void setUp() throws Exception {
     @Test
     public void testDeserialization() {
         final SymbolEntity entity = gson.fromJson(TEST_JSON, SymbolEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_TEXT, entity.text);
+        Assert.assertThat(entity.getStart(), is(TEST_INDICES_START));
+        Assert.assertThat(entity.getEnd(), is(TEST_INDICES_END));
+        Assert.assertThat(entity.text, is(TEST_TEXT));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
index 8f83f369..69a5602e 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
@@ -21,6 +21,8 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -30,6 +32,7 @@
 import java.io.InputStreamReader;
 import java.util.Collections;
 
+import static org.hamcrest.Matchers.*;
 import static org.junit.Assert.*;
 
 @RunWith(RobolectricTestRunner.class)
@@ -55,10 +58,10 @@ public void setUp() throws Exception {
     public void testConstructor_nullParameters() {
         try {
             final TweetEntities entities = new TweetEntities(null, null, null, null, null);
-            assertEquals(Collections.EMPTY_LIST, entities.urls);
-            assertEquals(Collections.EMPTY_LIST, entities.userMentions);
-            assertEquals(Collections.EMPTY_LIST, entities.media);
-            assertEquals(Collections.EMPTY_LIST, entities.hashtags);
+            Assert.assertThat(entities.getUrls(), is(Collections.EMPTY_LIST));
+            Assert.assertThat(entities.getUserMentions(), is(Collections.EMPTY_LIST));
+            Assert.assertThat(entities.getMedia(), is(Collections.EMPTY_LIST));
+            Assert.assertThat(entities.getHashtags(), is(Collections.EMPTY_LIST));
         } catch (Exception e) {
             fail();
         }
@@ -73,11 +76,11 @@ public void testDeserialization() {
             final TweetEntities tweetEntities = gson.fromJson(reader, TweetEntities.class);
             // We simply assert that we parsed it successfully and rely on our other unit tests to
             // verify parsing of the individual objects.
-            assertEquals(EXPECTED_URLS_SIZE, tweetEntities.urls.size());
-            assertEquals(EXPECTED_USER_MENTIONS_SIZE, tweetEntities.userMentions.size());
-            assertEquals(EXPECTED_MEDIA_SIZE, tweetEntities.media.size());
-            assertEquals(EXPECTED_HASHTAGS_SIZE, tweetEntities.hashtags.size());
-            assertEquals(EXPECTED_SYMBOLS_SIZE, tweetEntities.symbols.size());
+            Assert.assertThat(tweetEntities.getUrls().size(), is(EXPECTED_URLS_SIZE));
+            Assert.assertThat(tweetEntities.getUserMentions().size(), is(EXPECTED_USER_MENTIONS_SIZE));
+            Assert.assertThat(tweetEntities.getMedia().size(), is(EXPECTED_MEDIA_SIZE));
+            Assert.assertThat(tweetEntities.getHashtags().size(), is(EXPECTED_HASHTAGS_SIZE));
+            Assert.assertThat(tweetEntities.getSymbols().size(), is(EXPECTED_SYMBOLS_SIZE));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
@@ -88,15 +91,15 @@ public void testDeserialization_noEntities() {
         final TweetEntities tweetEntities = gson.fromJson("{\"urls\":[]}", TweetEntities.class);
         // We simply assert that we parsed it successfully and rely on our other unit tests to
         // verify parsing of the individual objects.
-        assertNotNull(tweetEntities.urls);
-        assertEquals(0, tweetEntities.urls.size());
-        assertNotNull(tweetEntities.userMentions);
-        assertEquals(0, tweetEntities.userMentions.size());
-        assertNotNull(tweetEntities.media);
-        assertEquals(0, tweetEntities.media.size());
-        assertNotNull(tweetEntities.hashtags);
-        assertEquals(0, tweetEntities.hashtags.size());
-        assertNotNull(tweetEntities.symbols);
-        assertEquals(0, tweetEntities.symbols.size());
+        Assert.assertThat(tweetEntities.getUrls(), notNullValue());
+        Assert.assertThat(tweetEntities.getUrls().size(), is(0));
+        Assert.assertThat(tweetEntities.getUserMentions(), notNullValue());
+        Assert.assertThat(tweetEntities.getUserMentions().size(), is(0));
+        Assert.assertThat(tweetEntities.getMedia(), notNullValue());
+        Assert.assertThat(tweetEntities.getMedia().size(), is(0));
+        Assert.assertThat(tweetEntities.getHashtags(), notNullValue());
+        Assert.assertThat(tweetEntities.getHashtags().size(), is(0));
+        Assert.assertThat(tweetEntities.getSymbols(), notNullValue());
+        Assert.assertThat(tweetEntities.getSymbols().size(), is(0));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
index f73860d3..b099cc94 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
@@ -21,6 +21,8 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -29,7 +31,7 @@
 
 import java.io.InputStreamReader;
 
-import static org.junit.Assert.*;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TweetTest {
@@ -60,25 +62,25 @@ public void testDeserialization() {
             final Tweet tweet = gson.fromJson(reader, Tweet.class);
             // We simply assert that we parsed it successfully and rely on our other unit tests to
             // verify parsing of the individual objects.
-            assertEquals(EXPECTED_CREATED_AT, tweet.createdAt);
-            assertNotNull(tweet.entities);
-            assertNotNull(tweet.entities.hashtags);
-            assertNotNull(tweet.entities.media);
-            assertNotNull(tweet.entities.symbols);
-            assertNotNull(tweet.entities.urls);
-            assertNotNull(tweet.entities.userMentions);
-            assertNotNull(tweet.user);
-            assertTrue(tweet.retweeted);
-            assertEquals(EXPECTED_ID, tweet.id);
-            assertEquals(EXPECTED_ID, tweet.getId());
-            assertNotNull(tweet.text);
-            assertEquals(EXPECTED_TEXT, tweet.text);
-            assertNotNull(tweet.displayTextRange);
-            assertFalse(tweet.truncated);
-            assertArrayEquals(EXPECTED_DISPLAY_TEXT_RANGE, tweet.displayTextRange.toArray());
-            assertNotNull(tweet.withheldInCountries);
-            assertEquals(1, tweet.withheldInCountries.size());
-            assertEquals(EXPECTED_WITHHELD_IN_COUNTRIES, tweet.withheldInCountries.get(0));
+            Assert.assertThat(tweet.getCreatedAt(), is(EXPECTED_CREATED_AT));
+            Assert.assertThat(tweet.getEntities(), notNullValue());
+            Assert.assertThat(tweet.getEntities().getHashtags(), notNullValue());
+            Assert.assertThat(tweet.getEntities().getMedia(), notNullValue());
+            Assert.assertThat(tweet.getEntities().getSymbols(), notNullValue());
+            Assert.assertThat(tweet.getEntities().getUrls(), notNullValue());
+            Assert.assertThat(tweet.getEntities().getUserMentions(), notNullValue());
+            Assert.assertThat(tweet.getUser(), notNullValue());
+            Assert.assertThat(tweet.getRetweeted(), is(true));
+            Assert.assertThat(tweet.getId(), is(EXPECTED_ID));
+            Assert.assertThat(tweet.getId(), is(EXPECTED_ID));
+            Assert.assertThat(tweet.getText(), notNullValue());
+            Assert.assertThat(tweet.getText(), is(EXPECTED_TEXT));
+            Assert.assertThat(tweet.getDisplayTextRange(), notNullValue());
+            Assert.assertThat(tweet.getTruncated(), is(false));
+            Assert.assertThat(tweet.getDisplayTextRange().toArray(), is(EXPECTED_DISPLAY_TEXT_RANGE));
+            Assert.assertThat(tweet.getWithheldInCountries(), notNullValue());
+            Assert.assertThat(tweet.getWithheldInCountries().size(), is(1));
+            Assert.assertThat(tweet.getWithheldInCountries().get(0), is(EXPECTED_WITHHELD_IN_COUNTRIES));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
@@ -91,9 +93,9 @@ public void testQuotedTweetDeserialization() {
             reader = new JsonReader(new InputStreamReader(testResources
                 .getAsStream("model_quoted_tweet.json")));
             final Tweet tweet = gson.fromJson(reader, Tweet.class);
-            assertEquals(EXPECTED_QUOTED_STATUS_ID, tweet.quotedStatusId);
-            assertEquals(String.valueOf(EXPECTED_QUOTED_STATUS_ID), tweet.quotedStatusIdStr);
-            assertNotNull(tweet.quotedStatus);
+            Assert.assertThat(tweet.getQuotedStatusId(), is(EXPECTED_QUOTED_STATUS_ID));
+            Assert.assertThat(tweet.getQuotedStatusIdStr(), is(String.valueOf(EXPECTED_QUOTED_STATUS_ID)));
+            Assert.assertThat(tweet.getQuotedStatus(), notNullValue());
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
index 135220d1..76b7d2ee 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
@@ -21,6 +21,8 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -29,8 +31,7 @@
 
 import java.io.InputStreamReader;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TwitterCollectionTest {
@@ -65,25 +66,21 @@ public void testDeserialization() {
                     = gson.fromJson(reader, TwitterCollection.class);
 
             // check collection decomposed object maps in objects field
-            assertEquals(EXPECTED_NUM_TWEETS, twitterCollection.contents.tweetMap.size());
-            assertEquals(EXPECTED_NUM_USERS, twitterCollection.contents.userMap.size());
-            assertTrue(twitterCollection.contents.tweetMap.containsKey(EXPECTED_TWEET_ID_FIRST));
-            assertEquals((long) EXPECTED_TWEET_ID_FIRST,
-                    twitterCollection.contents.tweetMap.get(EXPECTED_TWEET_ID_FIRST).id);
-            assertTrue(twitterCollection.contents.tweetMap.containsKey(EXPECTED_TWEET_ID_SECOND));
-            assertTrue(twitterCollection.contents.userMap.containsKey(EXPECTED_USER_ID_FIRST));
-            assertEquals(EXPECTED_USER_SCREEN_NAME_FIRST,
-                    twitterCollection.contents.userMap.get(EXPECTED_USER_ID_FIRST).screenName);
+            Assert.assertThat(twitterCollection.contents.tweetMap.size(), is(EXPECTED_NUM_TWEETS));
+            Assert.assertThat(twitterCollection.contents.userMap.size(), is(EXPECTED_NUM_USERS));
+            Assert.assertThat(twitterCollection.contents.tweetMap.containsKey(EXPECTED_TWEET_ID_FIRST), is(true));
+            Assert.assertThat(twitterCollection.contents.tweetMap.get(EXPECTED_TWEET_ID_FIRST).getId(), is(EXPECTED_TWEET_ID_FIRST));
+            Assert.assertThat(twitterCollection.contents.tweetMap.containsKey(EXPECTED_TWEET_ID_SECOND), is(true));
+            Assert.assertThat(twitterCollection.contents.userMap.containsKey(EXPECTED_USER_ID_FIRST), is(true));
+            Assert.assertThat(twitterCollection.contents.userMap.get(EXPECTED_USER_ID_FIRST).getScreenName(), is(EXPECTED_USER_SCREEN_NAME_FIRST));
 
             // check object references and contextual info in response field
-            assertEquals(EXPECTED_TIMELINE_ID, twitterCollection.metadata.timelineId);
-            assertEquals(EXPECTED_MAX_POSITION, twitterCollection.metadata.position.maxPosition);
-            assertEquals(EXPECTED_MIN_POSITION, twitterCollection.metadata.position.minPosition);
-            assertEquals(EXPECTED_NUM_TWEETS, twitterCollection.metadata.timelineItems.size());
-            assertEquals(EXPECTED_TWEET_ID_FIRST,
-                    twitterCollection.metadata.timelineItems.get(0).tweetItem.id);
-            assertEquals(EXPECTED_TWEET_ID_SECOND,
-                    twitterCollection.metadata.timelineItems.get(1).tweetItem.id);
+            Assert.assertThat(twitterCollection.metadata.timelineId, is(EXPECTED_TIMELINE_ID));
+            Assert.assertThat(twitterCollection.metadata.position.maxPosition, is(EXPECTED_MAX_POSITION));
+            Assert.assertThat(twitterCollection.metadata.position.minPosition, is(EXPECTED_MIN_POSITION));
+            Assert.assertThat(twitterCollection.metadata.timelineItems.size(), is(EXPECTED_NUM_TWEETS));
+            Assert.assertThat(twitterCollection.metadata.timelineItems.get(0).tweetItem.id, is(EXPECTED_TWEET_ID_FIRST));
+            Assert.assertThat(twitterCollection.metadata.timelineItems.get(1).tweetItem.id, is(EXPECTED_TWEET_ID_SECOND));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java
index 93ac1cd0..41b808c1 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java
@@ -18,12 +18,14 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class UrlEntityTest  {
@@ -49,10 +51,10 @@ public void setUp() throws Exception {
     @Test
     public void testDeserialization() {
         final UrlEntity entity = gson.fromJson(TEST_JSON, UrlEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_URL, entity.url);
-        assertEquals(TEST_DISPLAY_URL, entity.displayUrl);
-        assertEquals(TEST_EXPANDED_URL, entity.expandedUrl);
+        Assert.assertThat(entity.getStart(), is(TEST_INDICES_START));
+        Assert.assertThat(entity.getEnd(), is(TEST_INDICES_END));
+        Assert.assertThat(entity.getUrl(), is(TEST_URL));
+        Assert.assertThat(entity.getDisplayUrl(), is(TEST_DISPLAY_URL));
+        Assert.assertThat(entity.getExpandedUrl(), is(TEST_EXPANDED_URL));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java
index 615bf424..008e520e 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java
@@ -21,6 +21,8 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
+
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -30,7 +32,7 @@
 import java.io.InputStreamReader;
 import java.util.Collections;
 
-import static org.junit.Assert.*;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class UserEntitiesTest {
@@ -54,11 +56,11 @@ public void testDeserialization() {
             final UserEntities userEntities = gson.fromJson(reader, UserEntities.class);
             // We simply assert that we parsed it successfully and rely on our other unit tests to
             // verify parsing of the individual objects.
-            assertNotNull(userEntities.url);
-            assertFalse(userEntities.url.urls.isEmpty());
+            Assert.assertThat(userEntities.url, notNullValue());
+            Assert.assertThat(userEntities.url.urls.isEmpty(), is(false));
 
-            assertNotNull(userEntities.description);
-            assertEquals(Collections.EMPTY_LIST, userEntities.description.urls);
+            Assert.assertThat(userEntities.description, notNullValue());
+            Assert.assertThat(userEntities.description.urls, is(Collections.EMPTY_LIST));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
index 3a65251a..e294878d 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
@@ -21,6 +21,9 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
+
+import org.hamcrest.number.OrderingComparison;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -29,7 +32,7 @@
 
 import java.io.InputStreamReader;
 
-import static org.junit.Assert.*;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class UserTest {
@@ -61,18 +64,18 @@ public void testDeserialization() {
             final User user = gson.fromJson(reader, User.class);
             // We simply assert that we parsed it successfully and rely on our other unit tests to
             // verify parsing of the individual objects.
-            assertEquals(EXPECTED_ID, user.id);
-            assertEquals(EXPECTED_ID, user.getId());
-            assertEquals(EXPECTED_NAME, user.name);
-            assertTrue(user.entities.url.urls.size() > 0);
-            assertTrue(user.entities.description.urls.isEmpty());
-            assertEquals(EXPECTED_SCREEN_NAME, user.screenName);
-            assertEquals(EXPECTED_PROFILE_IMAGE_URL_HTTPS, user.profileImageUrlHttps);
-            assertEquals(EXPECTED_VERIFIED, user.verified);
-            assertNotNull(user.status);
-            assertNotNull(user.withheldInCountries);
-            assertEquals(1, user.withheldInCountries.size());
-            assertEquals(EXPECTED_WITHHELD_IN_COUNTRIES, user.withheldInCountries.get(0));
+            Assert.assertThat(user.getId(), is(EXPECTED_ID));
+            Assert.assertThat(user.getId(), is(EXPECTED_ID));
+            Assert.assertThat(user.getName(), is(EXPECTED_NAME));
+            Assert.assertThat(user.getEntities().url.urls.size(), OrderingComparison.greaterThan(0));
+            Assert.assertThat(user.getEntities().description.urls.isEmpty(), is(true));
+            Assert.assertThat(user.getScreenName(), is(EXPECTED_SCREEN_NAME));
+            Assert.assertThat(user.getProfileImageUrlHttps(), is(EXPECTED_PROFILE_IMAGE_URL_HTTPS));
+            Assert.assertThat(user.getVerified(), is(EXPECTED_VERIFIED));
+            Assert.assertThat(user.getStatus(), notNullValue());
+            Assert.assertThat(user.getWithheldInCountries(), notNullValue());
+            Assert.assertThat(user.getWithheldInCountries().size(), is(1));
+            Assert.assertThat(user.getWithheldInCountries().get(0), is(EXPECTED_WITHHELD_IN_COUNTRIES));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/services/params/GeocodeTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/services/params/GeocodeTest.java
index c05b5d29..d9b67eef 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/services/params/GeocodeTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/services/params/GeocodeTest.java
@@ -17,11 +17,12 @@
 
 package com.twitter.sdk.android.core.services.params;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class GeocodeTest  {
@@ -29,6 +30,6 @@
     @Test
     public void testToString() {
         final Geocode geocode = new Geocode(1.0, 1.0, 1, Geocode.Distance.MILES);
-        assertEquals("1.0,1.0,1mi", geocode.toString());
+        Assert.assertThat(geocode.toString(), is("1.0,1.0,1mi"));
     }
 }
diff --git a/twitter-core/src/test/resources/robolectric.properties b/twitter-core/src/test/resources/robolectric.properties
index a4f9233b..ec368b61 100644
--- a/twitter-core/src/test/resources/robolectric.properties
+++ b/twitter-core/src/test/resources/robolectric.properties
@@ -1,2 +1,3 @@
+# suppress inspection "UnusedProperty" for whole file
 sdk = 21
 constants = com.twitter.sdk.android.core.BuildConfig
\ No newline at end of file
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/ColorUtilsTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/ColorUtilsTest.java
index 0f84aae3..6bf909ee 100644
--- a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/ColorUtilsTest.java
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/ColorUtilsTest.java
@@ -19,43 +19,42 @@
 
 import android.graphics.Color;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class ColorUtilsTest {
 
     @Test
     public void testIsLightColor_black() {
-        assertFalse(ColorUtils.isLightColor(Color.BLACK));
+        Assert.assertThat(ColorUtils.isLightColor(Color.BLACK), is(false));
     }
 
     @Test
     public void testIsLightColor_white() {
-        assertTrue(ColorUtils.isLightColor(Color.WHITE));
+        Assert.assertThat(ColorUtils.isLightColor(Color.WHITE), is(true));
     }
 
     @Test
     public void testDefaultCtaButtonIsDarkColor() {
-        assertFalse(ColorUtils.isLightColor(R.color.tw__ad_cta_default));
+        Assert.assertThat(ColorUtils.isLightColor(R.color.tw__ad_cta_default), is(false));
     }
 
     @Test
     public void testCtaTextColorIsLightForDarkBgColor() {
-        assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(R.color.tw__ad_cta_default));
-        assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(Color.BLACK));
-        assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(Color.DKGRAY));
+        Assert.assertThat(ColorUtils.calculateCtaTextColor(R.color.tw__ad_cta_default), is(Color.WHITE));
+        Assert.assertThat(ColorUtils.calculateCtaTextColor(Color.BLACK), is(Color.WHITE));
+        Assert.assertThat(ColorUtils.calculateCtaTextColor(Color.DKGRAY), is(Color.WHITE));
     }
 
     @Test
     public void testCtaTextColorIsDarkForLightBgColor() {
-        assertTrue(Color.WHITE != ColorUtils.calculateCtaTextColor(Color.WHITE));
-        assertTrue(Color.WHITE != ColorUtils.calculateCtaTextColor(Color.LTGRAY));
+        Assert.assertThat(Color.WHITE, not(is(ColorUtils.calculateCtaTextColor(Color.WHITE))));
+        Assert.assertThat(Color.WHITE, not(is(ColorUtils.calculateCtaTextColor(Color.LTGRAY))));
     }
 
     @Test
@@ -70,9 +69,9 @@ public void testCTAOnTapColorIsLighterForDarkBgColor() {
         final int lighterGreen = Color.green(lighterColor);
         final int lighterBlue = Color.blue(lighterColor);
 
-        assertTrue(lighterRed > originalRed
+        Assert.assertThat(lighterRed > originalRed
                 && lighterGreen > originalGreen
-                && lighterBlue > originalBlue);
+                && lighterBlue > originalBlue, is(true));
     }
 
     @Test
@@ -87,22 +86,22 @@ public void testCTAOnTapColorIsDarkerForLightBgColor() {
         final int darkerGreen = Color.green(darkerColor);
         final int darkerBlue = Color.blue(darkerColor);
 
-        assertTrue(originalRed > darkerRed
+        Assert.assertThat(originalRed > darkerRed
                 && originalGreen > darkerGreen
-                && originalBlue > darkerBlue);
+                && originalBlue > darkerBlue, is(true));
     }
 
     @Test
     public void testContrastColorForDarkColor() {
         final int darkColor = Color.BLACK;
         final int contrastingLightColor = ColorUtils.calculateContrastingColor(darkColor);
-        assertTrue(ColorUtils.isLightColor(contrastingLightColor));
+        Assert.assertThat(ColorUtils.isLightColor(contrastingLightColor), is(true));
     }
 
     @Test
     public void testContrastColorForLightColor() {
         final int lightColor = Color.WHITE;
         final int contrastingDarkColor = ColorUtils.calculateContrastingColor(lightColor);
-        assertFalse(ColorUtils.isLightColor(contrastingDarkColor));
+        Assert.assertThat(ColorUtils.isLightColor(contrastingDarkColor), is(false));
     }
 }
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
index 30b0182b..62f8b3fd 100644
--- a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
@@ -31,6 +31,7 @@
 import com.mopub.volley.toolbox.ImageLoader;
 import com.twitter.sdk.android.mopub.internal.RoundedImageView;
 
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -41,8 +42,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.hamcrest.Matchers.*;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.doAnswer;
@@ -138,7 +138,8 @@ public void testRenderAdView_shouldReturnPopulatedView() {
 
     @Test
     public void testSupports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() {
-        assertTrue(twitterStaticNativeAdRenderer.supports(new StaticNativeAd() {}));
-        assertFalse(twitterStaticNativeAdRenderer.supports(mock(BaseNativeAd.class)));
+        Assert.assertThat(twitterStaticNativeAdRenderer.supports(new StaticNativeAd() {
+        }), is(true));
+        Assert.assertThat(twitterStaticNativeAdRenderer.supports(mock(BaseNativeAd.class)), is(false));
     }
 }
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java
index fe926ea6..88c3f3b2 100644
--- a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java
@@ -25,6 +25,8 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 
+import static org.hamcrest.Matchers.*;
+
 @RunWith(RobolectricTestRunner.class)
 public class TwitterStaticNativeAdTest extends AndroidTestCase {
 
@@ -43,11 +45,11 @@ public void testStyleAttrsForDefaultTheme() {
         final int cardBorderColor =
                 nativeAd.getResources().getColor(R.color.tw__ad_light_card_border_color);
 
-        Assert.assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor);
-        Assert.assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor);
-        Assert.assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor);
-        Assert.assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor);
-        Assert.assertEquals(cardBorderColor, nativeAd.cardBorderColor);
+        Assert.assertThat(nativeAd.containerBackgroundColor, is(expectedContainerBgColor));
+        Assert.assertThat(nativeAd.cardBackgroundColor, is(expectedCardBgColor));
+        Assert.assertThat(nativeAd.primaryTextColor, is(expectedPrimaryTextColor));
+        Assert.assertThat(nativeAd.ctaBackgroundColor, is(ctaBackgroundColor));
+        Assert.assertThat(nativeAd.cardBorderColor, is(cardBorderColor));
     }
 
     @Test
@@ -67,10 +69,10 @@ public void testStyleAttrsForDarkTheme() {
         final int cardBorderColor =
                 nativeAd.getResources().getColor(R.color.tw__ad_dark_card_border_color);
 
-        Assert.assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor);
-        Assert.assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor);
-        Assert.assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor);
-        Assert.assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor);
-        Assert.assertEquals(cardBorderColor, nativeAd.cardBorderColor);
+        Assert.assertThat(nativeAd.containerBackgroundColor, is(expectedContainerBgColor));
+        Assert.assertThat(nativeAd.cardBackgroundColor, is(expectedCardBgColor));
+        Assert.assertThat(nativeAd.primaryTextColor, is(expectedPrimaryTextColor));
+        Assert.assertThat(nativeAd.ctaBackgroundColor, is(ctaBackgroundColor));
+        Assert.assertThat(nativeAd.cardBorderColor, is(cardBorderColor));
     }
 }
diff --git a/twitter-mopub/src/test/resources/robolectric.properties b/twitter-mopub/src/test/resources/robolectric.properties
index 1cb48e48..44a02594 100644
--- a/twitter-mopub/src/test/resources/robolectric.properties
+++ b/twitter-mopub/src/test/resources/robolectric.properties
@@ -1,2 +1,3 @@
+# suppress inspection "UnusedProperty" for whole file
 sdk = 21
 constants = com.twitter.sdk.android.mopub.BuildConfig
\ No newline at end of file
