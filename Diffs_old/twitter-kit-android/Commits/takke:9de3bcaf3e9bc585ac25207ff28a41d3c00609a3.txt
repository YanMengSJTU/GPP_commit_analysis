diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthSigning.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthSigning.java
deleted file mode 100644
index f87a63f7..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthSigning.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;
-
-import java.util.Map;
-
-/**
- * Provides convenience methods for generating OAuth headers for Twitter
- **/
-public class OAuthSigning {
-    static final String VERIFY_CREDENTIALS_URL = TwitterApi.BASE_HOST_URL +
-            "/1.1/account/verify_credentials.json";
-
-    final TwitterAuthConfig authConfig;
-    final TwitterAuthToken authToken;
-    final OAuth1aHeaders oAuth1aHeaders;
-
-    /**
-     * Constructs OAuthSigning with TwitterAuthConfig and TwitterAuthToken
-     *
-     * @param authConfig The auth config.
-     * @param authToken  The auth token to use to sign the request.
-     */
-    public OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken) {
-        this(authConfig, authToken, new OAuth1aHeaders());
-    }
-
-    OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken,
-            OAuth1aHeaders oAuth1aHeaders) {
-        if (authConfig == null) {
-            throw new IllegalArgumentException("authConfig must not be null");
-        }
-        if (authToken == null) {
-            throw new IllegalArgumentException("authToken must not be null");
-        }
-
-        this.authConfig = authConfig;
-        this.authToken = authToken;
-        this.oAuth1aHeaders = oAuth1aHeaders;
-    }
-
-    /**
-     * Gets authorization header for inclusion in HTTP request headers.
-     *
-     * @param method The HTTP method.
-     * @param url The url.
-     * @param postParams The post parameters.
-     */
-    public String getAuthorizationHeader(String method, String url,
-            Map<String, String> postParams) {
-        return oAuth1aHeaders.getAuthorizationHeader(authConfig, authToken, null, method, url,
-                postParams);
-    }
-
-    /**
-     * Returns OAuth Echo header using given parameters.
-     *
-     * OAuth Echo allows you to securely delegate an API request to a third party. For example,
-     * you may wish to verify a users credentials from your backend (i.e. the third party). This
-     * method provides the OAuth parameters required to make an authenticated request from your
-     * backend.
-     *
-     * @param method     The HTTP method (GET, POST, PUT, DELETE, etc).
-     * @param url        The url delegation should be sent to (e.g. https://api.twitter.com/1.1/account/verify_credentials.json).
-     * @param postParams The post parameters.
-     * @return A map of OAuth Echo headers
-     * @see <a href="https://dev.twitter.com/oauth/echo">OAuth Echo</a>
-     */
-    public Map<String, String> getOAuthEchoHeaders(String method, String url,
-            Map<String, String> postParams) {
-        return oAuth1aHeaders.getOAuthEchoHeaders(authConfig, authToken, null, method, url,
-                postParams);
-    }
-
-    /**
-     * Returns OAuth Echo header for <a href="https://dev.twitter.com/rest/reference/get/account/verify_credentials">verify_credentials</a> endpoint.
-     *
-     * @return A map of OAuth Echo headers
-     * @see #getOAuthEchoHeaders(String, String, java.util.Map)
-     */
-    public Map<String, String> getOAuthEchoHeadersForVerifyCredentials() {
-        return oAuth1aHeaders.getOAuthEchoHeaders(authConfig, authToken, null,
-                "GET", VERIFY_CREDENTIALS_URL, null);
-    }
-
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiErrorConstants.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiErrorConstants.java
deleted file mode 100644
index 8e784ea7..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiErrorConstants.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-/**
- * Error codes that may be returned from the API. For complete list of error codes, see
- * https://dev.twitter.com/overview/api/response-codes
- */
-public class TwitterApiErrorConstants {
-    public static final int RATE_LIMIT_EXCEEDED = 88;
-    public static final int COULD_NOT_AUTHENTICATE = 32;
-    public static final int CLIENT_NOT_PRIVILEGED = 87;
-    public static final int PAGE_NOT_EXIST = 34;
-    public static final int UNKNOWN_ERROR = -1;
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApiConstants.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApiConstants.java
deleted file mode 100644
index 616360fc..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApiConstants.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-public class TwitterApiConstants {
-    public static class Errors {
-
-        // error when app auth token not recognized (such as when expired)
-        public static final int APP_AUTH_ERROR_CODE = 89;
-        // error when a tweet has already been favorited
-        public static final int ALREADY_FAVORITED = 139;
-        // error when a tweet has already been unfavorited
-        public static final int ALREADY_UNFAVORITED = 144;
-        // error when guest auth token not recognized (such as when expired)
-        public static final int GUEST_AUTH_ERROR_CODE = 239;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.java
deleted file mode 100644
index a8bad6dd..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.text.TextUtils;
-
-import com.twitter.sdk.android.core.models.User;
-
-public final class UserUtils {
-    private UserUtils() {}
-
-    // see https://dev.twitter.com/overview/general/user-profile-images-and-banners
-    // see also: https://confluence.twitter.biz/display/PLATFORM/Image+Types+and+Sizes
-    public enum AvatarSize {
-        NORMAL("_normal"),
-        BIGGER("_bigger"),
-        MINI("_mini"),
-        ORIGINAL("_original"),
-        REASONABLY_SMALL("_reasonably_small");
-
-        private final String suffix;
-
-        AvatarSize(String suffix) {
-            this.suffix = suffix;
-        }
-
-        String getSuffix() {
-            return suffix;
-        }
-    }
-
-    public static String getProfileImageUrlHttps(User user, AvatarSize size) {
-        if (user != null && user.profileImageUrlHttps != null) {
-            final String url = user.profileImageUrlHttps;
-            if (size == null || url == null) {
-                return url;
-            }
-
-            switch (size) {
-                case NORMAL:
-                case BIGGER:
-                case MINI:
-                case ORIGINAL:
-                case REASONABLY_SMALL:
-                    return url
-                            .replace(AvatarSize.NORMAL.getSuffix(), size.getSuffix());
-                default:
-                    return url;
-            }
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * @return the given screenName, prepended with an "@"
-     */
-    public static CharSequence formatScreenName(CharSequence screenName) {
-        if (TextUtils.isEmpty(screenName)) {
-            return "";
-        }
-
-        if (screenName.charAt(0) == '@') {
-            return screenName;
-        }
-        return "@" + screenName;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/FileStore.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/FileStore.java
deleted file mode 100644
index 634b5c7d..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/FileStore.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.persistence;
-
-
-import java.io.File;
-
-public interface FileStore {
-    /**
-     *
-     * @return Directory to store internal Cache files
-     */
-    File getCacheDir();
-
-    /**
-     *
-     * @return Directory to store External Cache files.
-     */
-    File getExternalCacheDir();
-
-    /**
-     *
-     * @return Directory to store internal files.
-     */
-    File getFilesDir();
-
-    /**
-     *
-     * @return Directory to store External files.
-     */
-    File getExternalFilesDir();
-
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImpl.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImpl.java
deleted file mode 100644
index 7f5d10ee..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImpl.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.persistence;
-
-import android.content.Context;
-import android.os.Environment;
-
-import com.twitter.sdk.android.core.Twitter;
-
-import java.io.File;
-
-public class FileStoreImpl implements FileStore {
-    private final Context context;
-
-    public FileStoreImpl(Context context) {
-        if (context == null) {
-            throw new IllegalArgumentException("Context must not be null");
-        }
-
-        this.context = context;
-    }
-
-    /**
-     *
-     * @return Directory to store internal cache files.
-     */
-    @Override
-    public File getCacheDir() {
-        return prepare(context.getCacheDir());
-    }
-
-    /**
-     * Requires {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE}
-     *
-     * @return Directory to store External Cache files.
-     */
-    @Override
-    public File getExternalCacheDir() {
-        if (isExternalStorageAvailable()) {
-            return prepare(context.getExternalCacheDir());
-        }
-
-        return prepare(null);
-    }
-
-    /**
-     *
-     * @return Directory to store internal files.
-     */
-    @Override
-    public File getFilesDir() {
-        return prepare(context.getFilesDir());
-    }
-
-    /**
-     * Requires {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE}
-     *
-     * @return Directory to store External files.
-     */
-    @Override
-    public File getExternalFilesDir() {
-        if (isExternalStorageAvailable()) {
-            return prepare(context.getExternalFilesDir(null));
-        }
-
-        return prepare(null);
-    }
-
-    File prepare(File file) {
-        if (file != null) {
-            if (file.exists() || file.mkdirs()) {
-                return file;
-            } else {
-                Twitter.getLogger().w(Twitter.TAG, "Couldn't create file");
-            }
-        } else {
-            Twitter.getLogger().d(Twitter.TAG, "Null File");
-        }
-        return null;
-    }
-
-    boolean isExternalStorageAvailable() {
-        final String state = Environment.getExternalStorageState();
-        if (!Environment.MEDIA_MOUNTED.equals(state)) {
-            Twitter.getLogger().w(Twitter.TAG,
-                    "External Storage is not mounted and/or writable\n" +
-                            "Have you declared android.permission.WRITE_EXTERNAL_STORAGE " +
-                            "in the manifest?");
-            return false;
-        }
-
-        return true;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java
deleted file mode 100644
index eee87763..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-public class Card {
-
-    @SerializedName("binding_values")
-    public final BindingValues bindingValues;
-
-    @SerializedName("name")
-    public final String name;
-
-    public Card(BindingValues bindingValues, String name) {
-        this.bindingValues = bindingValues;
-        this.name = name;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
deleted file mode 100644
index e9f71385..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
+++ /dev/null
@@ -1,288 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import java.util.List;
-
-public class UserBuilder {
-    private boolean contributorsEnabled;
-    private String createdAt;
-    private boolean defaultProfile;
-    private boolean defaultProfileImage;
-    private String description;
-    private String email;
-    private UserEntities entities;
-    private int favouritesCount;
-    private boolean followRequestSent;
-    private int followersCount;
-    private int friendsCount;
-    private boolean geoEnabled;
-    private long id = User.INVALID_ID;
-    private String idStr;
-    private boolean isTranslator;
-    private String lang;
-    private int listedCount;
-    private String location;
-    private String name;
-    private String profileBackgroundColor;
-    private String profileBackgroundImageUrl;
-    private String profileBackgroundImageUrlHttps;
-    private boolean profileBackgroundTile;
-    private String profileBannerUrl;
-    private String profileImageUrl;
-    private String profileImageUrlHttps;
-    private String profileLinkColor;
-    private String profileSidebarBorderColor;
-    private String profileSidebarFillColor;
-    private String profileTextColor;
-    private boolean profileUseBackgroundImage;
-    private boolean protectedUser;
-    private String screenName;
-    private boolean showAllInlineMedia;
-//    private Tweet status;
-    private int statusesCount;
-    private String timeZone;
-    private String url;
-    private int utcOffset;
-    private boolean verified;
-    private List<String> withheldInCountries;
-    private String withheldScope;
-
-    public UserBuilder setContributorsEnabled(boolean contributorsEnabled) {
-        this.contributorsEnabled = contributorsEnabled;
-        return this;
-    }
-
-    public UserBuilder setCreatedAt(String createdAt) {
-        this.createdAt = createdAt;
-        return this;
-    }
-
-    public UserBuilder setDefaultProfile(boolean defaultProfile) {
-        this.defaultProfile = defaultProfile;
-        return this;
-    }
-
-    public UserBuilder setDefaultProfileImage(boolean defaultProfileImage) {
-        this.defaultProfileImage = defaultProfileImage;
-        return this;
-    }
-
-    public UserBuilder setDescription(String description) {
-        this.description = description;
-        return this;
-    }
-
-    public UserBuilder setEmail(String email) {
-        this.email = email;
-        return this;
-    }
-
-    public UserBuilder setEntities(UserEntities entities) {
-        this.entities = entities;
-        return this;
-    }
-
-    public UserBuilder setFavouritesCount(int favouritesCount) {
-        this.favouritesCount = favouritesCount;
-        return this;
-    }
-
-    public UserBuilder setFollowRequestSent(boolean followRequestSent) {
-        this.followRequestSent = followRequestSent;
-        return this;
-    }
-
-    public UserBuilder setFollowersCount(int followersCount) {
-        this.followersCount = followersCount;
-        return this;
-    }
-
-    public UserBuilder setFriendsCount(int friendsCount) {
-        this.friendsCount = friendsCount;
-        return this;
-    }
-
-    public UserBuilder setGeoEnabled(boolean geoEnabled) {
-        this.geoEnabled = geoEnabled;
-        return this;
-    }
-
-    public UserBuilder setId(long id) {
-        this.id = id;
-        return this;
-    }
-
-    public UserBuilder setIdStr(String idStr) {
-        this.idStr = idStr;
-        return this;
-    }
-
-    public UserBuilder setIsTranslator(boolean isTranslator) {
-        this.isTranslator = isTranslator;
-        return this;
-    }
-
-    public UserBuilder setLang(String lang) {
-        this.lang = lang;
-        return this;
-    }
-
-    public UserBuilder setListedCount(int listedCount) {
-        this.listedCount = listedCount;
-        return this;
-    }
-
-    public UserBuilder setLocation(String location) {
-        this.location = location;
-        return this;
-    }
-
-    public UserBuilder setName(String name) {
-        this.name = name;
-        return this;
-    }
-
-    public UserBuilder setProfileBackgroundColor(String profileBackgroundColor) {
-        this.profileBackgroundColor = profileBackgroundColor;
-        return this;
-    }
-
-    public UserBuilder setProfileBackgroundImageUrl(String profileBackgroundImageUrl) {
-        this.profileBackgroundImageUrl = profileBackgroundImageUrl;
-        return this;
-    }
-
-    public UserBuilder setProfileBackgroundImageUrlHttps(String profileBackgroundImageUrlHttps) {
-        this.profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps;
-        return this;
-    }
-
-    public UserBuilder setProfileBackgroundTile(boolean profileBackgroundTile) {
-        this.profileBackgroundTile = profileBackgroundTile;
-        return this;
-    }
-
-    public UserBuilder setProfileBannerUrl(String profileBannerUrl) {
-        this.profileBannerUrl = profileBannerUrl;
-        return this;
-    }
-
-    public UserBuilder setProfileImageUrl(String profileImageUrl) {
-        this.profileImageUrl = profileImageUrl;
-        return this;
-    }
-
-    public UserBuilder setProfileImageUrlHttps(String profileImageUrlHttps) {
-        this.profileImageUrlHttps = profileImageUrlHttps;
-        return this;
-    }
-
-    public UserBuilder setProfileLinkColor(String profileLinkColor) {
-        this.profileLinkColor = profileLinkColor;
-        return this;
-    }
-
-    public UserBuilder setProfileSidebarBorderColor(String profileSidebarBorderColor) {
-        this.profileSidebarBorderColor = profileSidebarBorderColor;
-        return this;
-    }
-
-    public UserBuilder setProfileSidebarFillColor(String profileSidebarFillColor) {
-        this.profileSidebarFillColor = profileSidebarFillColor;
-        return this;
-    }
-
-    public UserBuilder setProfileTextColor(String profileTextColor) {
-        this.profileTextColor = profileTextColor;
-        return this;
-    }
-
-    public UserBuilder setProfileUseBackgroundImage(boolean profileUseBackgroundImage) {
-        this.profileUseBackgroundImage = profileUseBackgroundImage;
-        return this;
-    }
-
-    public UserBuilder setProtectedUser(boolean protectedUser) {
-        this.protectedUser = protectedUser;
-        return this;
-    }
-
-    public UserBuilder setScreenName(String screenName) {
-        this.screenName = screenName;
-        return this;
-    }
-
-    public UserBuilder setShowAllInlineMedia(boolean showAllInlineMedia) {
-        this.showAllInlineMedia = showAllInlineMedia;
-        return this;
-    }
-
-//    public UserBuilder setStatus(Tweet status) {
-//        this.status = status;
-//        return this;
-//    }
-
-    public UserBuilder setStatusesCount(int statusesCount) {
-        this.statusesCount = statusesCount;
-        return this;
-    }
-
-    public UserBuilder setTimeZone(String timeZone) {
-        this.timeZone = timeZone;
-        return this;
-    }
-
-    public UserBuilder setUrl(String url) {
-        this.url = url;
-        return this;
-    }
-
-    public UserBuilder setUtcOffset(int utcOffset) {
-        this.utcOffset = utcOffset;
-        return this;
-    }
-
-    public UserBuilder setVerified(boolean verified) {
-        this.verified = verified;
-        return this;
-    }
-
-    public UserBuilder setWithheldInCountries(List<String> withheldInCountries) {
-        this.withheldInCountries = withheldInCountries;
-        return this;
-    }
-
-    public UserBuilder setWithheldScope(String withheldScope) {
-        this.withheldScope = withheldScope;
-        return this;
-    }
-
-    public User build() {
-        return new User(contributorsEnabled, createdAt, defaultProfile, defaultProfileImage,
-                description, email, entities, favouritesCount, followRequestSent,
-                followersCount, friendsCount, geoEnabled, id, idStr, isTranslator, lang,
-                listedCount, location, name, profileBackgroundColor,
-                profileBackgroundImageUrl, profileBackgroundImageUrlHttps, profileBackgroundTile,
-                profileBannerUrl, profileImageUrl, profileImageUrlHttps,
-                profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor,
-                profileTextColor, profileUseBackgroundImage, protectedUser, screenName,
-                showAllInlineMedia, statusesCount, timeZone, url, utcOffset, verified,
-                withheldInCountries, withheldScope);
-    }
-}
