diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
index 15a28908..3634e1e1 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
@@ -250,7 +250,7 @@ public void testSecondaryColorsDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final int primaryTextColor = getResources().getColor(
                 R.color.tw__tweet_light_primary_text_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_LIGHT_OPACITY, Color.WHITE, primaryTextColor);
         Assert.assertEquals(color, view.secondaryTextColor);
         Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
@@ -262,7 +262,7 @@ public void testAvatarDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
         Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
@@ -271,7 +271,7 @@ public void testPhotoDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
 
         final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
@@ -308,7 +308,7 @@ public void testSecondaryColorsDark() {
                 R.style.tw__TweetDarkStyle);
         final int primaryTextColor = getResources().getColor(
                 R.color.tw__tweet_dark_primary_text_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_DARK_OPACITY, Color.BLACK, primaryTextColor);
         Assert.assertEquals(color, view.secondaryTextColor);
         Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
@@ -321,7 +321,7 @@ public void testAvatarDark() {
                 R.style.tw__TweetDarkStyle);
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
         Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
@@ -331,7 +331,7 @@ public void testPhotoDark() {
                 R.style.tw__TweetDarkStyle);
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
 
         final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
index 6b1f2514..ac80ba4f 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
@@ -137,7 +137,7 @@ public void testSecondaryColorsDefault() {
         final BaseTweetView view = getView();
         final int primaryTextColor = getResources().getColor(
                 R.color.tw__tweet_light_primary_text_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_LIGHT_OPACITY, Color.WHITE, primaryTextColor);
         Assert.assertEquals(color, view.secondaryTextColor);
         Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
@@ -149,7 +149,7 @@ public void testAvatarDefault() {
         final BaseTweetView view = getView();
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
         Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
@@ -175,7 +175,7 @@ public void testSecondaryColorsDark() {
         final BaseTweetView view = getViewDark();
         final int primaryTextColor = getResources().getColor(
                 R.color.tw__tweet_dark_primary_text_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_DARK_OPACITY, Color.BLACK, primaryTextColor);
         Assert.assertEquals(color, view.secondaryTextColor);
         Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
@@ -187,7 +187,7 @@ public void testAvatarDark() {
         final BaseTweetView view = getViewDark();
         final int containerColor = getResources().getColor(
                 R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
         Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
index 36a7671a..b28fa57b 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
@@ -414,7 +414,7 @@ void setContentDescription(Tweet displayTweet) {
         final FormattedTweetText formattedTweetText = dependencyProvider.getTweetUi()
                 .getTweetRepository().formatTweetText(displayTweet);
         String tweetText = null;
-        if (formattedTweetText != null) tweetText = formattedTweetText.text;
+        if (formattedTweetText != null) tweetText = formattedTweetText.getText();
 
         final long createdAt = TweetDateUtils.apiTimeToLong(displayTweet.createdAt);
         String timestamp = null;
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetAction.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetAction.kt
similarity index 63%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetAction.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetAction.kt
index c3262aec..b26dd36d 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetAction.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetAction.kt
@@ -15,22 +15,12 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui;
+package com.twitter.sdk.android.tweetui
 
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.Callback
+import com.twitter.sdk.android.core.models.Tweet
 
 /**
  * BaseTweetAction keeps a Callback which should be called after Tweet actions are performed.
  */
-class BaseTweetAction {
-    protected final Callback<Tweet> actionCallback;
-
-    BaseTweetAction(Callback<Tweet> actionCallback) {
-        this.actionCallback = actionCallback;
-    }
-
-    Callback<Tweet> getActionCallback() {
-        return actionCallback;
-    }
-}
+internal open class BaseTweetAction(val actionCallback: Callback<Tweet>)
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
index 5363eec2..9087e410 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
@@ -199,7 +199,7 @@ private void setStyleAttributes(TypedArray a) {
                 a.getBoolean(R.styleable.tw__TweetView_tw__tweet_actions_enabled, false);
 
         // Calculated colors
-        final boolean isLightBg = ColorUtils.isLightColor(containerBgColor);
+        final boolean isLightBg = ColorUtils.INSTANCE.isLightColor(containerBgColor);
 
         if (isLightBg) {
             photoErrorResId = R.drawable.tw__ic_tweet_photo_error_light;
@@ -212,14 +212,14 @@ private void setStyleAttributes(TypedArray a) {
         }
 
         // offset from white when background is light
-        secondaryTextColor = ColorUtils.calculateOpacityTransform(
+        secondaryTextColor = ColorUtils.INSTANCE.calculateOpacityTransform(
                 isLightBg ? SECONDARY_TEXT_COLOR_LIGHT_OPACITY : SECONDARY_TEXT_COLOR_DARK_OPACITY,
                 isLightBg ? Color.WHITE : Color.BLACK,
                 primaryTextColor
         );
 
         // offset from black when background is light
-        mediaBgColor = ColorUtils.calculateOpacityTransform(
+        mediaBgColor = ColorUtils.INSTANCE.calculateOpacityTransform(
                 isLightBg ? MEDIA_BG_LIGHT_OPACITY : MEDIA_BG_DARK_OPACITY,
                 isLightBg ? Color.BLACK : Color.WHITE,
                 containerBgColor
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java
index 2cf75a68..d5da879a 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java
@@ -55,22 +55,22 @@ public BasicTimelineFilter(FilterValues filterValues, Locale locale) {
 
         wordIterator = BreakIterator.getWordInstance(locale);
         keywordConstraints = new TreeSet<>(comparator);
-        keywordConstraints.addAll(filterValues.keywords);
+        keywordConstraints.addAll(filterValues.getKeywords());
 
         hashTagConstraints = new TreeSet<>(comparator);
-        for (String hashtag : filterValues.hashtags) {
+        for (String hashtag : filterValues.getHashtags()) {
             final String sanitizedHashtag = normalizeHashtag(hashtag);
             hashTagConstraints.add(sanitizedHashtag);
         }
 
-        handleConstraints = new HashSet<>(filterValues.handles.size());
-        for (String handle : filterValues.handles) {
+        handleConstraints = new HashSet<>(filterValues.getHandles().size());
+        for (String handle : filterValues.getHandles()) {
             final String sanitizedHandle = normalizeHandle(handle);
             handleConstraints.add(sanitizedHandle);
         }
 
-        urlConstraints = new HashSet<>(filterValues.urls.size());
-        for (String url : filterValues.urls) {
+        urlConstraints = new HashSet<>(filterValues.getUrls().size());
+        for (String url : filterValues.getUrls()) {
             final String sanitizedUrl = normalizeUrl(url);
             urlConstraints.add(sanitizedUrl);
         }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.kt
similarity index 58%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.kt
index 2cda092e..e3c22b94 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ColorUtils.kt
@@ -15,12 +15,11 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui;
+package com.twitter.sdk.android.tweetui
 
-import android.graphics.Color;
+import android.graphics.Color
 
-final class ColorUtils {
-    private ColorUtils() {}
+internal object ColorUtils {
 
     /**
      * This method calculates a combination of colors using an opacity of the foreground layered
@@ -28,25 +27,25 @@ private ColorUtils() {}
      * alpha values in the color attributes on the views directly.
      *
      * @param opacity      A value in the range of 0 to 1 that indicates the opacity desired for the
-     *                     overlay color
+     * overlay color
      * @param overlayColor The foreground color that the opacity will be applied to
      * @param primaryColor The background color that the foreground color is applied to
      * @return             The combined color value
      */
-    static int calculateOpacityTransform(final double opacity, final int overlayColor,
-            final int primaryColor) {
-        final int redPrimary = Color.red(primaryColor);
-        final int redOverlay = Color.red(overlayColor);
-        final int greenPrimary = Color.green(primaryColor);
-        final int greenOverlay = Color.green(overlayColor);
-        final int bluePrimary = Color.blue(primaryColor);
-        final int blueOverlay = Color.blue(overlayColor);
+    fun calculateOpacityTransform(opacity: Double, overlayColor: Int,
+                                  primaryColor: Int): Int {
+        val redPrimary = Color.red(primaryColor)
+        val redOverlay = Color.red(overlayColor)
+        val greenPrimary = Color.green(primaryColor)
+        val greenOverlay = Color.green(overlayColor)
+        val bluePrimary = Color.blue(primaryColor)
+        val blueOverlay = Color.blue(overlayColor)
 
-        final int redCalculated = (int) ((1 - opacity) * redPrimary + opacity * redOverlay);
-        final int greenCalculated = (int) ((1 - opacity) * greenPrimary + opacity * greenOverlay);
-        final int blueCalculated = (int) ((1 - opacity) * bluePrimary + opacity * blueOverlay);
+        val redCalculated = ((1 - opacity) * redPrimary + opacity * redOverlay).toInt()
+        val greenCalculated = ((1 - opacity) * greenPrimary + opacity * greenOverlay).toInt()
+        val blueCalculated = ((1 - opacity) * bluePrimary + opacity * blueOverlay).toInt()
 
-        return Color.rgb(redCalculated, greenCalculated, blueCalculated);
+        return Color.rgb(redCalculated, greenCalculated, blueCalculated)
     }
 
     /**
@@ -57,12 +56,12 @@ static int calculateOpacityTransform(final double opacity, final int overlayColo
      * @param  color A color value
      * @return Whether or not the color is considered light
      */
-    static boolean isLightColor(final int color) {
-        final int r = Color.red(color);
-        final int g = Color.green(color);
-        final int b = Color.blue(color);
+    fun isLightColor(color: Int): Boolean {
+        val r = Color.red(color)
+        val g = Color.green(color)
+        val b = Color.blue(color)
 
-        final double threshold = 0.21 * r + 0.72 * g + 0.07 * b;
-        return threshold > 128;
+        val threshold = 0.21 * r + 0.72 * g + 0.07 * b
+        return threshold > 128
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
index 933fa657..de406356 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
@@ -101,13 +101,13 @@ public void previous() {
         @Override
         public void success(final Result<TimelineResult<Tweet>> result) {
             final Runnable timelineFilterRunnable = () -> {
-                final List<Tweet> filteredTweets = timelineFilter.filter(result.getData().items);
+                final List<Tweet> filteredTweets = timelineFilter.filter(result.getData().getItems());
                 final TimelineResult<Tweet> filteredTimelineResult =
-                        buildTimelineResult(result.getData().timelineCursor, filteredTweets);
+                        buildTimelineResult(result.getData().getTimelineCursor(), filteredTweets);
 
                 handler.post(() -> callback.success(new Result<>(filteredTimelineResult, result.getResponse())));
 
-                scribeFilteredTimeline(result.getData().items, filteredTweets);
+                scribeFilteredTimeline(result.getData().getItems(), filteredTweets);
             };
 
             executorService.execute(timelineFilterRunnable);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.java
deleted file mode 100644
index 5cfd228e..00000000
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.google.gson.annotations.SerializedName;
-import com.twitter.sdk.android.core.models.ModelUtils;
-
-import java.util.List;
-
-public class FilterValues {
-
-    @SerializedName("keywords")
-    public final List<String> keywords;
-
-    @SerializedName("hashtags")
-    public final List<String> hashtags;
-
-    @SerializedName("handles")
-    public final List<String> handles;
-
-    @SerializedName("urls")
-    public final List<String> urls;
-
-    private FilterValues() {
-        this(null, null, null, null);
-    }
-
-    public FilterValues(List<String> keywords, List<String> hashtags,
-                        List<String> handles, List<String> urls) {
-        this.keywords = ModelUtils.getSafeList(keywords);
-        this.hashtags = ModelUtils.getSafeList(hashtags);
-        this.handles = ModelUtils.getSafeList(handles);
-        this.urls = ModelUtils.getSafeList(urls);
-    }
-}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.kt
new file mode 100644
index 00000000..24d6b0b6
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.kt
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui
+
+import com.google.gson.annotations.SerializedName
+
+class FilterValues(
+        @SerializedName("keywords") val keywords: List<String>,
+        @SerializedName("hashtags") val hashtags: List<String>,
+        @SerializedName("handles") val handles: List<String>,
+        @SerializedName("urls") val urls: List<String>
+)
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
similarity index 56%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
index 71748efd..d6569a61 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
@@ -15,29 +15,18 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui;
-
-import java.util.ArrayList;
-import java.util.List;
+package com.twitter.sdk.android.tweetui
 
 /**
  * This class holds values we need to correctly render tweet text. The values returned directly
  * from the REST API are html escaped for & < and > characters as well as not counting emoji
  * characters correctly in the entity indices.
  */
-class FormattedTweetText {
-    String text;
-    final List<FormattedUrlEntity> urlEntities;
-    final List<FormattedMediaEntity> mediaEntities;
-    final List<FormattedUrlEntity> hashtagEntities;
-    final List<FormattedUrlEntity> mentionEntities;
-    final List<FormattedUrlEntity> symbolEntities;
-
-    FormattedTweetText() {
-        urlEntities = new ArrayList<>();
-        mediaEntities = new ArrayList<>();
-        hashtagEntities = new ArrayList<>();
-        mentionEntities = new ArrayList<>();
-        symbolEntities = new ArrayList<>();
-    }
-}
+internal data class FormattedTweetText @JvmOverloads constructor(
+        var text: String? = null,
+        val urlEntities: List<FormattedUrlEntity> = arrayListOf(),
+        val hashtagEntities: List<FormattedUrlEntity> = arrayListOf(),
+        val mediaEntities: List<FormattedMediaEntity> = arrayListOf(),
+        val mentionEntities: List<FormattedUrlEntity> = arrayListOf(),
+        val symbolEntities: List<FormattedUrlEntity> = arrayListOf()
+)
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.java
deleted file mode 100644
index 7075d05f..00000000
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.models.HashtagEntity;
-import com.twitter.sdk.android.core.models.MentionEntity;
-import com.twitter.sdk.android.core.models.SymbolEntity;
-import com.twitter.sdk.android.core.models.UrlEntity;
-
-class FormattedUrlEntity {
-    int start;
-    int end;
-    final String displayUrl;
-    final String url;
-    final String expandedUrl;
-
-    FormattedUrlEntity(int start, int end, String displayUrl, String url, String expandedUrl) {
-        this.start = start;
-        this.end = end;
-        this.displayUrl = displayUrl;
-        this.url = url;
-        this.expandedUrl = expandedUrl;
-    }
-
-    static FormattedUrlEntity createFormattedUrlEntity(UrlEntity entity) {
-        return new FormattedUrlEntity(entity.getStart(), entity.getEnd(), entity.displayUrl,
-                entity.url, entity.expandedUrl);
-    }
-
-    static FormattedUrlEntity createFormattedUrlEntity(HashtagEntity hashtagEntity) {
-        final String url = TweetUtils.getHashtagPermalink(hashtagEntity.text);
-        return new FormattedUrlEntity(hashtagEntity.getStart(), hashtagEntity.getEnd(),
-                "#" + hashtagEntity.text, url, url);
-    }
-
-    static FormattedUrlEntity createFormattedUrlEntity(MentionEntity mentionEntity) {
-        final String url = TweetUtils.getProfilePermalink(mentionEntity.screenName);
-        return new FormattedUrlEntity(mentionEntity.getStart(), mentionEntity.getEnd(),
-                "@" + mentionEntity.screenName, url, url);
-    }
-
-    static FormattedUrlEntity createFormattedUrlEntity(SymbolEntity symbolEntity) {
-        final String url = TweetUtils.getSymbolPermalink(symbolEntity.text);
-        return new FormattedUrlEntity(symbolEntity.getStart(), symbolEntity.getEnd(),
-                "$" + symbolEntity.text, url, url);
-    }
-}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt
new file mode 100644
index 00000000..1cb232d3
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui
+
+import com.twitter.sdk.android.core.models.HashtagEntity
+import com.twitter.sdk.android.core.models.MentionEntity
+import com.twitter.sdk.android.core.models.SymbolEntity
+import com.twitter.sdk.android.core.models.UrlEntity
+
+internal open class FormattedUrlEntity(
+        var start: Int,
+        var end: Int,
+        val displayUrl: String,
+        val url: String,
+        val expandedUrl: String
+) {
+    companion object {
+
+        fun createFormattedUrlEntity(entity: UrlEntity): FormattedUrlEntity {
+            return FormattedUrlEntity(entity.start, entity.end, entity.displayUrl,
+                    entity.url, entity.expandedUrl)
+        }
+
+        fun createFormattedUrlEntity(hashtagEntity: HashtagEntity): FormattedUrlEntity {
+            val url = TweetUtils.getHashtagPermalink(hashtagEntity.text)
+            return FormattedUrlEntity(hashtagEntity.start, hashtagEntity.end,
+                    "#" + hashtagEntity.text, url, url)
+        }
+
+        fun createFormattedUrlEntity(mentionEntity: MentionEntity): FormattedUrlEntity {
+            val url = TweetUtils.getProfilePermalink(mentionEntity.screenName)
+            return FormattedUrlEntity(mentionEntity.start, mentionEntity.end,
+                    "@" + mentionEntity.screenName, url, url)
+        }
+
+        fun createFormattedUrlEntity(symbolEntity: SymbolEntity): FormattedUrlEntity {
+            val url = TweetUtils.getSymbolPermalink(symbolEntity.text)
+            return FormattedUrlEntity(symbolEntity.start, symbolEntity.end,
+                    "$" + symbolEntity.text, url, url)
+        }
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.kt
similarity index 86%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.kt
index 701ac560..16fb0f54 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.kt
@@ -15,16 +15,16 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui;
+package com.twitter.sdk.android.tweetui
 
 /**
  * Tweet interaction listener
  */
-interface LinkClickListener {
+internal interface LinkClickListener {
     /**
      * A URL was clicked
      *
      * @param url The source URL
      */
-    void onUrlClicked(String url);
+    fun onUrlClicked(url: String)
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
index 834d091b..fef93ebc 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
@@ -236,12 +236,12 @@ public void failure(TwitterException exception) {
 
         @Override
         public void success(Result<TimelineResult<T>> result) {
-            if (result.getData().items.size() > 0) {
-                final ArrayList<T> receivedItems = new ArrayList<>(result.getData().items);
+            if (result.getData().getItems().size() > 0) {
+                final ArrayList<T> receivedItems = new ArrayList<>(result.getData().getItems());
                 receivedItems.addAll(itemList);
                 itemList = receivedItems;
                 notifyDataSetChanged();
-                timelineStateHolder.setNextCursor(result.getData().timelineCursor);
+                timelineStateHolder.setNextCursor(result.getData().getTimelineCursor());
             }
             // do nothing when zero items are received. Subsequent 'next' call does not change.
             super.success(result);
@@ -262,7 +262,7 @@ public void success(Result<TimelineResult<T>> result) {
 
         @Override
         public void success(Result<TimelineResult<T>> result) {
-            if (result.getData().items.size() > 0) {
+            if (result.getData().getItems().size() > 0) {
                 itemList.clear();
             }
             super.success(result);
@@ -280,10 +280,10 @@ public void success(Result<TimelineResult<T>> result) {
 
         @Override
         public void success(Result<TimelineResult<T>> result) {
-            if (result.getData().items.size() > 0) {
-                itemList.addAll(result.getData().items);
+            if (result.getData().getItems().size() > 0) {
+                itemList.addAll(result.getData().getItems());
                 notifyDataSetChanged();
-                timelineStateHolder.setPreviousCursor(result.getData().timelineCursor);
+                timelineStateHolder.setPreviousCursor(result.getData().getTimelineCursor());
             }
             // do nothing when zero items are received. Subsequent 'next' call does not change.
             super.success(result);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.kt
similarity index 58%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.kt
index b8c16d78..cf0b8f88 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.kt
@@ -15,26 +15,16 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui;
-
-import java.util.List;
+package com.twitter.sdk.android.tweetui
 
 /**
  * TimelineResult represents timeline items and the TimelineCursor from a Timeline response.
  * @param <T> timeline item type
+</T> */
+/**
+ * Constructs a TimelineResult storing item and cursor data.
+ * @param timelineCursor cursor representing position and containsLastItem data
+ * @param items timeline items
  */
-public class TimelineResult<T> {
-
-    public final TimelineCursor timelineCursor;
-    public final List<T> items;
 
-    /**
-     * Constructs a TimelineResult storing item and cursor data.
-     * @param timelineCursor cursor representing position and containsLastItem data
-     * @param items timeline items
-     */
-    public TimelineResult(TimelineCursor timelineCursor, List<T> items) {
-        this.timelineCursor = timelineCursor;
-        this.items = items;
-    }
-}
+class TimelineResult<T>(val timelineCursor: TimelineCursor, val items: List<T>)
\ No newline at end of file
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.kt
similarity index 76%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.kt
index 9a629a3f..8e168ff3 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.kt
@@ -15,20 +15,20 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui;
+package com.twitter.sdk.android.tweetui
 
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.models.MediaEntity
+import com.twitter.sdk.android.core.models.Tweet
 
 /**
  * Interface to be invoked when media is clicked.
  */
-public interface TweetMediaClickListener {
+interface TweetMediaClickListener {
 
     /**
      * Called when media clicked.
      * @param tweet The Tweet that was clicked.
      * @param entity The entity that was clicked.
      */
-    void onMediaEntityClick(Tweet tweet, MediaEntity entity);
+    fun onMediaEntityClick(tweet: Tweet, entity: MediaEntity)
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
index 20d2a014..1c6e1e37 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
@@ -77,7 +77,7 @@ FormattedTweetText formatTweetText(final Tweet tweet) {
         if (cached != null) return cached;
 
         final FormattedTweetText formattedTweetText = TweetTextUtils.formatTweetText(tweet);
-        if (formattedTweetText != null && !TextUtils.isEmpty(formattedTweetText.text)) {
+        if (formattedTweetText != null && !TextUtils.isEmpty(formattedTweetText.getText())) {
             formatCache.put(tweet.id, formattedTweetText);
         }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
index 057427d5..c1e57d96 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
@@ -59,23 +59,23 @@ static CharSequence linkifyUrls(FormattedTweetText tweetText,
                                     boolean stripQuoteTweet, boolean stripVineCard) {
         if (tweetText == null) return null;
 
-        if (TextUtils.isEmpty(tweetText.text)) {
-            return tweetText.text;
+        if (TextUtils.isEmpty(tweetText.getText())) {
+            return tweetText.getText();
         }
 
-        final SpannableStringBuilder spannable = new SpannableStringBuilder(tweetText.text);
-        final List<FormattedUrlEntity> urls = ModelUtils.getSafeList(tweetText.urlEntities);
-        final List<FormattedMediaEntity> media = ModelUtils.getSafeList(tweetText.mediaEntities);
-        final List<FormattedUrlEntity> hashtags = ModelUtils.getSafeList(tweetText.hashtagEntities);
-        final List<FormattedUrlEntity> mentions = ModelUtils.getSafeList(tweetText.mentionEntities);
-        final List<FormattedUrlEntity> symbols = ModelUtils.getSafeList(tweetText.symbolEntities);
+        final SpannableStringBuilder spannable = new SpannableStringBuilder(tweetText.getText());
+        final List<FormattedUrlEntity> urls = ModelUtils.getSafeList(tweetText.getUrlEntities());
+        final List<FormattedMediaEntity> media = ModelUtils.getSafeList(tweetText.getMediaEntities());
+        final List<FormattedUrlEntity> hashtags = ModelUtils.getSafeList(tweetText.getHashtagEntities());
+        final List<FormattedUrlEntity> mentions = ModelUtils.getSafeList(tweetText.getMentionEntities());
+        final List<FormattedUrlEntity> symbols = ModelUtils.getSafeList(tweetText.getSymbolEntities());
         /*
          * We combine and sort the entities here so that we can correctly calculate the offsets
          * into the text.
          */
         final List<FormattedUrlEntity> combined = mergeAndSortEntities(urls, media, hashtags,
                 mentions, symbols);
-        final FormattedUrlEntity strippedEntity = getEntityToStrip(tweetText.text, combined,
+        final FormattedUrlEntity strippedEntity = getEntityToStrip(tweetText.getText(), combined,
                 stripQuoteTweet, stripVineCard);
 
         addUrlEntities(spannable, combined, strippedEntity, linkListener, linkColor,
@@ -118,7 +118,7 @@ static CharSequence trimEnd(CharSequence charSequence) {
             if (lhs == null && rhs != null) return -1;
             if (lhs != null && rhs == null) return 1;
             if (lhs == null && rhs == null) return 0;
-            return Integer.compare(lhs.start, rhs.start);
+            return Integer.compare(lhs.getStart(), rhs.getStart());
 
         });
         return combined;
@@ -146,19 +146,19 @@ private static void addUrlEntities(final SpannableStringBuilder spannable,
         int start;
         int end;
         for (final FormattedUrlEntity url : entities) {
-            start = url.start - offset;
-            end = url.end - offset;
+            start = url.getStart() - offset;
+            end = url.getEnd() - offset;
             if (start >= 0 && end <= spannable.length()) {
                 // replace the last photo url with empty string, we can use the start indices as
                 // as simple check, since none of this will work anyways if we have overlapping
                 // entities
-                if (strippedEntity != null && strippedEntity.start == url.start) {
+                if (strippedEntity != null && strippedEntity.getStart() == url.getStart()) {
                     spannable.replace(start, end, "");
                     len = end - start;
                     offset += len;
-                } else if (!TextUtils.isEmpty(url.displayUrl)) {
-                    spannable.replace(start, end, url.displayUrl);
-                    len = end - (start + url.displayUrl.length());
+                } else if (!TextUtils.isEmpty(url.getDisplayUrl())) {
+                    spannable.replace(start, end, url.getDisplayUrl());
+                    len = end - (start + url.getDisplayUrl().length());
                     end -= len;
                     offset += len;
 
@@ -167,7 +167,7 @@ private static void addUrlEntities(final SpannableStringBuilder spannable,
                         @Override
                         public void onClick(View widget) {
                             if (linkListener == null) return;
-                            linkListener.onUrlClicked(url.url);
+                            linkListener.onUrlClicked(url.getUrl());
                         }
                     };
                     spannable.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
@@ -181,7 +181,7 @@ static FormattedUrlEntity getEntityToStrip(String tweetText, List<FormattedUrlEn
         if (combined.isEmpty()) return null;
 
         final FormattedUrlEntity urlEntity = combined.get(combined.size() - 1);
-        if (stripLtrMarker(tweetText).endsWith(urlEntity.url) && (isPhotoEntity(urlEntity) ||
+        if (stripLtrMarker(tweetText).endsWith(urlEntity.getUrl()) && (isPhotoEntity(urlEntity) ||
                 (stripQuoteTweet && isQuotedStatus(urlEntity)) ||
                 (stripVineCard && isVineCard(urlEntity)))) {
             return urlEntity;
@@ -204,10 +204,10 @@ static boolean isPhotoEntity(final FormattedUrlEntity urlEntity) {
     }
 
     static boolean isQuotedStatus(final FormattedUrlEntity urlEntity) {
-        return QUOTED_STATUS_URL.matcher(urlEntity.expandedUrl).find();
+        return QUOTED_STATUS_URL.matcher(urlEntity.getExpandedUrl()).find();
     }
 
     static boolean isVineCard(final FormattedUrlEntity urlEntity) {
-        return VINE_URL.matcher(urlEntity.expandedUrl).find();
+        return VINE_URL.matcher(urlEntity.getExpandedUrl()).find();
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
index 0d042f5f..6e44e658 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
@@ -65,8 +65,8 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
         if (coreUrls != null) {
             for (UrlEntity entity : coreUrls) {
                 final FormattedUrlEntity formattedUrlEntity =
-                        FormattedUrlEntity.createFormattedUrlEntity(entity);
-                formattedTweetText.urlEntities.add(formattedUrlEntity);
+                        FormattedUrlEntity.Companion.createFormattedUrlEntity(entity);
+                formattedTweetText.getUrlEntities().add(formattedUrlEntity);
             }
         }
 
@@ -74,7 +74,7 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
         if (coreMedia != null) {
             for (MediaEntity entity : coreMedia) {
                 final FormattedMediaEntity formattedMediaEntity = new FormattedMediaEntity(entity);
-                formattedTweetText.mediaEntities.add(formattedMediaEntity);
+                formattedTweetText.getMediaEntities().add(formattedMediaEntity);
             }
         }
 
@@ -82,8 +82,8 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
         if (coreHashtags != null) {
             for (HashtagEntity entity : coreHashtags) {
                 final FormattedUrlEntity formattedHashtagEntity =
-                        FormattedUrlEntity.createFormattedUrlEntity(entity);
-                formattedTweetText.hashtagEntities.add(formattedHashtagEntity);
+                        FormattedUrlEntity.Companion.createFormattedUrlEntity(entity);
+                formattedTweetText.getHashtagEntities().add(formattedHashtagEntity);
             }
         }
 
@@ -91,8 +91,8 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
         if (coreMentions != null) {
             for (MentionEntity entity : coreMentions) {
                 final FormattedUrlEntity formattedMentionEntity =
-                        FormattedUrlEntity.createFormattedUrlEntity(entity);
-                formattedTweetText.mentionEntities.add(formattedMentionEntity);
+                        FormattedUrlEntity.Companion.createFormattedUrlEntity(entity);
+                formattedTweetText.getMentionEntities().add(formattedMentionEntity);
             }
         }
 
@@ -100,8 +100,8 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
         if (coreSymbols != null) {
             for (SymbolEntity entity : coreSymbols) {
                 final FormattedUrlEntity formattedSymbolEntity =
-                        FormattedUrlEntity.createFormattedUrlEntity(entity);
-                formattedTweetText.symbolEntities.add(formattedSymbolEntity);
+                        FormattedUrlEntity.Companion.createFormattedUrlEntity(entity);
+                formattedTweetText.getSymbolEntities().add(formattedSymbolEntity);
             }
         }
     }
@@ -119,13 +119,13 @@ static void format(FormattedTweetText formattedTweetText, Tweet tweet) {
         final HtmlEntities.Unescaped u = HtmlEntities.HTML40.unescape(tweet.text);
         final StringBuilder result = new StringBuilder(u.unescaped);
 
-        adjustIndicesForEscapedChars(formattedTweetText.urlEntities, u.indices);
-        adjustIndicesForEscapedChars(formattedTweetText.mediaEntities, u.indices);
-        adjustIndicesForEscapedChars(formattedTweetText.hashtagEntities, u.indices);
-        adjustIndicesForEscapedChars(formattedTweetText.mentionEntities, u.indices);
-        adjustIndicesForEscapedChars(formattedTweetText.symbolEntities, u.indices);
+        adjustIndicesForEscapedChars(formattedTweetText.getUrlEntities(), u.indices);
+        adjustIndicesForEscapedChars(formattedTweetText.getMediaEntities(), u.indices);
+        adjustIndicesForEscapedChars(formattedTweetText.getHashtagEntities(), u.indices);
+        adjustIndicesForEscapedChars(formattedTweetText.getMentionEntities(), u.indices);
+        adjustIndicesForEscapedChars(formattedTweetText.getSymbolEntities(), u.indices);
         adjustIndicesForSupplementaryChars(result, formattedTweetText);
-        formattedTweetText.text = result.toString();
+        formattedTweetText.setText(result.toString());
     }
 
     /**
@@ -163,17 +163,17 @@ static void adjustIndicesForEscapedChars(
                 end = index[1];
                 // len is actually (end - start + 1) - 1
                 len = end - start;
-                if (end < entity.start) {
+                if (end < entity.getStart()) {
                     // bump position of the next marker
                     diff += len;
                     m++;
-                } else if (end < entity.end) {
+                } else if (end < entity.getEnd()) {
                     inDiff += len;
                 }
             }
             // Once we've accumulated diffs, calc the offset
-            entity.start = entity.start  - (diff + inDiff);
-            entity.end = entity.end - (diff + inDiff);
+            entity.setStart(entity.getStart() - (diff + inDiff));
+            entity.setEnd(entity.getEnd() - (diff + inDiff));
         }
     }
 
@@ -196,11 +196,11 @@ static void adjustIndicesForSupplementaryChars(StringBuilder content,
             }
         }
 
-        adjustEntitiesWithOffsets(formattedTweetText.urlEntities, highSurrogateIndices);
-        adjustEntitiesWithOffsets(formattedTweetText.mediaEntities, highSurrogateIndices);
-        adjustEntitiesWithOffsets(formattedTweetText.hashtagEntities, highSurrogateIndices);
-        adjustEntitiesWithOffsets(formattedTweetText.mentionEntities, highSurrogateIndices);
-        adjustEntitiesWithOffsets(formattedTweetText.symbolEntities, highSurrogateIndices);
+        adjustEntitiesWithOffsets(formattedTweetText.getUrlEntities(), highSurrogateIndices);
+        adjustEntitiesWithOffsets(formattedTweetText.getMediaEntities(), highSurrogateIndices);
+        adjustEntitiesWithOffsets(formattedTweetText.getHashtagEntities(), highSurrogateIndices);
+        adjustEntitiesWithOffsets(formattedTweetText.getMentionEntities(), highSurrogateIndices);
+        adjustEntitiesWithOffsets(formattedTweetText.getSymbolEntities(), highSurrogateIndices);
     }
 
     /**
@@ -215,7 +215,7 @@ static void adjustEntitiesWithOffsets(List<? extends FormattedUrlEntity> entitie
         if (entities == null || indices == null) return;
         for (FormattedUrlEntity entity : entities) {
             // find all indices <= start and update offsets by that much
-            final int start = entity.start;
+            final int start = entity.getStart();
             int offset = 0;
             for (Integer index : indices) {
                 if (index - offset <= start) {
@@ -224,8 +224,8 @@ static void adjustEntitiesWithOffsets(List<? extends FormattedUrlEntity> entitie
                     break;
                 }
             }
-            entity.start = entity.start + offset;
-            entity.end = entity.end + offset;
+            entity.setStart(entity.getStart() + offset);
+            entity.setEnd(entity.getEnd() + offset);
         }
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java
index aac69f58..39fba92f 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java
@@ -32,32 +32,32 @@
 
     @Test
     public void testIsLightColor_blue() {
-        assertFalse(ColorUtils.isLightColor(Color.BLUE));
+        assertFalse(ColorUtils.INSTANCE.isLightColor(Color.BLUE));
     }
 
     @Test
     public void testIsLightColor_black() {
-        assertFalse(ColorUtils.isLightColor(Color.BLACK));
+        assertFalse(ColorUtils.INSTANCE.isLightColor(Color.BLACK));
     }
 
     @Test
     public void testIsLightColor_white() {
-        assertTrue(ColorUtils.isLightColor(Color.WHITE));
+        assertTrue(ColorUtils.INSTANCE.isLightColor(Color.WHITE));
     }
 
     @Test
     public void testCalculateOpacityTransform_zeroOpacity() {
-        assertEquals(Color.WHITE, ColorUtils.calculateOpacityTransform(0, Color.BLUE, Color.WHITE));
+        assertEquals(Color.WHITE, ColorUtils.INSTANCE.calculateOpacityTransform(0, Color.BLUE, Color.WHITE));
     }
 
     @Test
     public void testCalculateOpacityTransform_fullOpacity() {
-        assertEquals(Color.BLUE, ColorUtils.calculateOpacityTransform(1, Color.BLUE, Color.WHITE));
+        assertEquals(Color.BLUE, ColorUtils.INSTANCE.calculateOpacityTransform(1, Color.BLUE, Color.WHITE));
     }
 
     @Test
     public void testCalculateOpacityTransform_returnsFullOpacity() {
-        final int color = ColorUtils.calculateOpacityTransform(0, Color.BLUE, Color.WHITE);
+        final int color = ColorUtils.INSTANCE.calculateOpacityTransform(0, Color.BLUE, Color.WHITE);
         assertEquals(0xFF000000, color & 0xFF000000);
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
index ffc4e76b..0104acdf 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
@@ -64,11 +64,11 @@ public void testNext_succeedsWithFixedTweets() {
         timeline.next(ANY_ID, new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
-                assertEquals(fixedTweets, result.getData().items);
+                assertEquals(fixedTweets, result.getData().getItems());
                 assertEquals((Long) TestFixtures.TEST_PHOTO_TWEET.getId(),
-                        result.getData().timelineCursor.minPosition);
+                        result.getData().getTimelineCursor().minPosition);
                 assertEquals((Long) TestFixtures.TEST_TWEET.getId(),
-                        result.getData().timelineCursor.maxPosition);
+                        result.getData().getTimelineCursor().maxPosition);
                 assertNull(result.getResponse());
             }
             @Override
@@ -84,9 +84,9 @@ public void testNext_succeedsWithEmptyTweets() {
         timeline.previous(ANY_ID, new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
-                assertTrue(result.getData().items.isEmpty());
-                assertNull(result.getData().timelineCursor.maxPosition);
-                assertNull(result.getData().timelineCursor.minPosition);
+                assertTrue(result.getData().getItems().isEmpty());
+                assertNull(result.getData().getTimelineCursor().maxPosition);
+                assertNull(result.getData().getTimelineCursor().minPosition);
                 assertNull(result.getResponse());
             }
 
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
index a027cf42..fc1fcbb4 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
@@ -74,8 +74,8 @@ public void testLinkifyUrls_oneUrlEntity() {
                 = EntityFactory.newUrlEntity(fullText, url, displayUrl);
 
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
+        formattedText.setText(fullText);
+        formattedText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(urlEntity));
 
         final CharSequence linkifiedText
                 = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
@@ -89,8 +89,8 @@ public void testLinkifyUrls_oneInvalidUrlEntity() {
         final String fullText = "";
         final UrlEntity urlEntity = new UrlEntity("x z", "y", "z", -1, 30);
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
+        formattedText.setText(fullText);
+        formattedText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(urlEntity));
 
         final CharSequence linkifiedText
                 = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
@@ -108,8 +108,8 @@ public void testLinkifyUrls_linkClickListener() {
         final UrlEntity urlEntity =
                 EntityFactory.newUrlEntity(fullText, url, displayUrl);
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
+        formattedText.setText(fullText);
+        formattedText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(urlEntity));
 
         final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
                 TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
@@ -128,8 +128,8 @@ public void testLinkifyHashtags_oneHashtagEntity() {
         final HashtagEntity hashtagEntity = EntityFactory.newHashtagEntity(fullText, hashtag);
 
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.hashtagEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+        formattedText.setText(fullText);
+        formattedText.getHashtagEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
                 hashtagEntity));
 
         final CharSequence linkifiedText
@@ -148,8 +148,8 @@ public void testLinkifyHashtags_linkClickListener() {
 
         final HashtagEntity hashtagEntity = EntityFactory.newHashtagEntity(fullText, hashtag);
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.hashtagEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+        formattedText.setText(fullText);
+        formattedText.getHashtagEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
                 hashtagEntity));
 
         final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
@@ -169,8 +169,8 @@ public void testLinkifyMentions_oneMentionEntity() {
         final MentionEntity mentionEntity = EntityFactory.newMentionEntity(fullText, mention);
 
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.mentionEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+        formattedText.setText(fullText);
+        formattedText.getMentionEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
                 mentionEntity));
 
         final CharSequence linkifiedText
@@ -189,8 +189,8 @@ public void testLinkifyMentions_linkClickListener() {
 
         final MentionEntity mentionEntity = EntityFactory.newMentionEntity(fullText, mention);
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.mentionEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+        formattedText.setText(fullText);
+        formattedText.getMentionEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
                 mentionEntity));
 
         final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
@@ -210,8 +210,8 @@ public void testLinkifySymbols_oneSymbolEntity() {
         final SymbolEntity symbolEntity = EntityFactory.newSymbolEntity(fullText, symbol);
 
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.symbolEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+        formattedText.setText(fullText);
+        formattedText.getSymbolEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
                 symbolEntity));
 
         final CharSequence linkifiedText
@@ -230,8 +230,8 @@ public void testLinkifySymbols_linkClickListener() {
 
         final SymbolEntity symbolEntity = EntityFactory.newSymbolEntity(fullText, symbol);
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.symbolEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
+        formattedText.setText(fullText);
+        formattedText.getSymbolEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(
                 symbolEntity));
 
         final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
@@ -246,7 +246,7 @@ public void testLinkifySymbols_linkClickListener() {
     @Test
     public void testLinkifyUrls_verifyPhotoOnlyStrippedFromEnd() {
         final FormattedTweetText formattedText = setupPicTwitterEntities();
-        final FormattedMediaEntity lastPhotoUrl = formattedText.mediaEntities.get(0);
+        final FormattedMediaEntity lastPhotoUrl = formattedText.getMediaEntities().get(0);
         final CharSequence linkifiedText
                 = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
 
@@ -254,7 +254,7 @@ public void testLinkifyUrls_verifyPhotoOnlyStrippedFromEnd() {
         // that we can render inline
         assertEquals("photo", lastPhotoUrl.type);
         // assert that we do not strip it here and display it in the middle
-        assertTrue(linkifiedText.toString().contains(lastPhotoUrl.displayUrl));
+        assertTrue(linkifiedText.toString().contains(lastPhotoUrl.getDisplayUrl()));
     }
 
     @Test
@@ -315,9 +315,9 @@ private FormattedTweetText setupPicTwitterEntities() {
                 72);
 
         final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = text;
-        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
-        formattedText.mediaEntities.add(new FormattedMediaEntity(mediaEntity));
+        formattedText.setText(text);
+        formattedText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(urlEntity));
+        formattedText.getMediaEntities().add(new FormattedMediaEntity(mediaEntity));
 
         return formattedText;
     }
@@ -352,7 +352,7 @@ public void testMergeAndSortEntities_emptyEntities() {
     public void testMergeAndSortEntities_sortUrlsAndMediaAndHashtags() {
         final List<FormattedUrlEntity> urls = new ArrayList<>();
         final UrlEntity urlEntity = TestFixtures.newUrlEntity(2, 5);
-        final FormattedUrlEntity adjustedUrl = FormattedUrlEntity.createFormattedUrlEntity(
+        final FormattedUrlEntity adjustedUrl = FormattedUrlEntity.Companion.createFormattedUrlEntity(
                 urlEntity);
         urls.add(adjustedUrl);
 
@@ -364,19 +364,19 @@ public void testMergeAndSortEntities_sortUrlsAndMediaAndHashtags() {
         final List<FormattedUrlEntity> hashtags = new ArrayList<>();
         final HashtagEntity hashtag = TestFixtures.newHashtagEntity("TwitterForGood", 0, 13);
         final FormattedUrlEntity adjustedHashtag =
-                FormattedUrlEntity.createFormattedUrlEntity(hashtag);
+                FormattedUrlEntity.Companion.createFormattedUrlEntity(hashtag);
         hashtags.add(adjustedHashtag);
 
         final List<FormattedUrlEntity> mentions = new ArrayList<>();
         final MentionEntity mention = TestFixtures.newMentionEntity("twitterdev", 0, 9);
         final FormattedUrlEntity adjustedMention =
-                FormattedUrlEntity.createFormattedUrlEntity(mention);
+                FormattedUrlEntity.Companion.createFormattedUrlEntity(mention);
         mentions.add(adjustedMention);
 
         final List<FormattedUrlEntity> symbols = new ArrayList<>();
         final SymbolEntity symbol = TestFixtures.newSymbolEntity("TWTR", 0, 3);
         final FormattedUrlEntity adjustedSymbol =
-                FormattedUrlEntity.createFormattedUrlEntity(symbol);
+                FormattedUrlEntity.Companion.createFormattedUrlEntity(symbol);
         symbols.add(adjustedSymbol);
 
         final List<? extends FormattedUrlEntity> combined
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java
index ac8a1e4d..1c38a888 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java
@@ -44,20 +44,20 @@ public void testFormat_singleEscaping() {
         final Tweet tweet = setupTweetToBeFormatted();
         TweetTextUtils.format(formattedTweetText, tweet);
 
-        assertEquals(UNESCAPED_TWEET_TEXT, formattedTweetText.text);
-        assertEquals("Hello", 1, formattedTweetText.urlEntities.get(0).start);
-        assertEquals("Hello", 5, formattedTweetText.urlEntities.get(0).end);
-        assertEquals("There", 7, formattedTweetText.urlEntities.get(1).start);
-        assertEquals("There", 11, formattedTweetText.urlEntities.get(1).end);
+        assertEquals(UNESCAPED_TWEET_TEXT, formattedTweetText.getText());
+        assertEquals("Hello", 1, formattedTweetText.getUrlEntities().get(0).getStart());
+        assertEquals("Hello", 5, formattedTweetText.getUrlEntities().get(0).getEnd());
+        assertEquals("There", 7, formattedTweetText.getUrlEntities().get(1).getStart());
+        assertEquals("There", 11, formattedTweetText.getUrlEntities().get(1).getEnd());
 
-        assertEquals("What", 15, formattedTweetText.urlEntities.get(2).start);
-        assertEquals("What", 18, formattedTweetText.urlEntities.get(2).end);
+        assertEquals("What", 15, formattedTweetText.getUrlEntities().get(2).getStart());
+        assertEquals("What", 18, formattedTweetText.getUrlEntities().get(2).getEnd());
 
-        assertEquals("is", 20, formattedTweetText.urlEntities.get(3).start);
-        assertEquals("is", 21, formattedTweetText.urlEntities.get(3).end);
+        assertEquals("is", 20, formattedTweetText.getUrlEntities().get(3).getStart());
+        assertEquals("is", 21, formattedTweetText.getUrlEntities().get(3).getEnd());
 
-        assertEquals("a", 23, formattedTweetText.urlEntities.get(4).start);
-        assertEquals("a", 23, formattedTweetText.urlEntities.get(4).end);
+        assertEquals("a", 23, formattedTweetText.getUrlEntities().get(4).getStart());
+        assertEquals("a", 23, formattedTweetText.getUrlEntities().get(4).getEnd());
     }
 
     @Test
@@ -66,50 +66,50 @@ public void testFormat_htmlEntityEdgeCases() {
 
         Tweet tweet = new TweetBuilder().setText("&amp;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&", formattedTweetText.text);
+        assertEquals("&", formattedTweetText.getText());
 
         tweet = new TweetBuilder().setText("&#;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&#;", formattedTweetText.text);
+        assertEquals("&#;", formattedTweetText.getText());
 
         tweet = new TweetBuilder().setText("&#34;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("\"", formattedTweetText.text);
+        assertEquals("\"", formattedTweetText.getText());
 
         tweet = new TweetBuilder().setText("&#x22;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("\"", formattedTweetText.text);
+        assertEquals("\"", formattedTweetText.getText());
 
         tweet = new TweetBuilder().setText("&lt; & Larry &gt; &").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("< & Larry > &", formattedTweetText.text);
+        assertEquals("< & Larry > &", formattedTweetText.getText());
 
         tweet = new TweetBuilder().setText("&&amp;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&", formattedTweetText.text);
+        assertEquals("&&", formattedTweetText.getText());
 
         tweet = new TweetBuilder().setText("&&&&&&&&amp;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&&&&&&&", formattedTweetText.text);
+        assertEquals("&&&&&&&&", formattedTweetText.getText());
 
         tweet = new TweetBuilder().setText("&&&&gt&&lt&&amplt;").build();
         TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&&&gt&&lt&&amplt;", formattedTweetText.text);
+        assertEquals("&&&&gt&&lt&&amplt;", formattedTweetText.getText());
     }
 
     @Test
     public void testFormat_withEmojiAndEscapedHtml() {
         final FormattedTweetText formattedTweetText = new FormattedTweetText();
         final UrlEntity url = TestFixtures.newUrlEntity(24, 47);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
+        formattedTweetText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(url));
 
         final Tweet tweet = new TweetBuilder()
                 .setText(ESCAPED_TWEET_TEXT_WITH_EMOJI)
                 .build();
         TweetTextUtils.format(formattedTweetText, tweet);
 
-        assertEquals(24, formattedTweetText.urlEntities.get(0).start);
-        assertEquals(47, formattedTweetText.urlEntities.get(0).end);
+        assertEquals(24, formattedTweetText.getUrlEntities().get(0).getStart());
+        assertEquals(47, formattedTweetText.getUrlEntities().get(0).getEnd());
     }
 
     private Tweet setupTweetToBeFormatted() {
@@ -121,23 +121,23 @@ private FormattedTweetText setupAdjustedTweet() {
 
         UrlEntity url = TestFixtures.newUrlEntity(4, 8);
         // Hello
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
+        formattedTweetText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(url));
 
         // There
         url = TestFixtures.newUrlEntity(10, 14);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
+        formattedTweetText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(url));
 
         // What
         url = TestFixtures.newUrlEntity(26, 29);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
+        formattedTweetText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(url));
 
         // is
         url = TestFixtures.newUrlEntity(31, 32);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
+        formattedTweetText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(url));
 
         // a
         url = TestFixtures.newUrlEntity(34, 34);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
+        formattedTweetText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(url));
 
         return formattedTweetText;
     }
