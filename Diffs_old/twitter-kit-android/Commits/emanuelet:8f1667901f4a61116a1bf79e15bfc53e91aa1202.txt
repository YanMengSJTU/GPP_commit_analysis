diff --git a/build.gradle b/build.gradle
index 4ca49cad..17ed6a61 100644
--- a/build.gradle
+++ b/build.gradle
@@ -20,8 +20,8 @@ apply from: rootProject.file('dependencies.gradle')
 subprojects { Project subproject ->
     buildscript {
         repositories {
-            jcenter()
             google()
+            jcenter()
             maven { url 'https://maven.fabric.io/public' }
         }
         dependencies {
diff --git a/dependencies.gradle b/dependencies.gradle
index e8ea5982..f2e93e71 100644
--- a/dependencies.gradle
+++ b/dependencies.gradle
@@ -1,22 +1,19 @@
 ext {
-    compileSdkVersion = 26
-    buildToolsVersion = '26.0.2'
-    targetSdkVersion = 22
-    minSdkVersion = 14
+    compileSdkVersion = 28
+    buildToolsVersion = '28.0.3'
+    targetSdkVersion = 28
+    minSdkVersion = 21
 
     sourceCompatibilityVersion = JavaVersion.VERSION_1_8
     targetCompatibilityVersion = JavaVersion.VERSION_1_8
 
-    enableTestCodeCoverage = true
     buildNumber = 'dev'
 
     dependency = [
             // Gradle plugins
-            spoonGradlePlugin          : 'com.stanfy.spoon:spoon-gradle-plugin:1.0.4',
             androidGradlePlugin        : 'com.android.tools.build:gradle:3.0.0',
 
             // Mopub
-            mopub                      : 'com.mopub:mopub-sdk-native-static:4.11.0@aar',
 
             // Sample App
             leakCanary                 : 'com.squareup.leakcanary:leakcanary-android:1.5.3',
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a524104b..c9d0383a 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -20,4 +20,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip
diff --git a/tweet-ui/build.gradle b/tweet-ui/build.gradle
index 624a2320..075bef64 100644
--- a/tweet-ui/build.gradle
+++ b/tweet-ui/build.gradle
@@ -41,10 +41,6 @@ android {
         }
     }
 
-    lintOptions {
-        warningsAsErrors true
-    }
-
     compileOptions {
         sourceCompatibility 1.8
         targetCompatibility 1.8
@@ -70,10 +66,4 @@ dependencies {
     implementation "com.google.android.material:material:1.0.0"
     implementation "androidx.appcompat:appcompat:1.0.2"
 
-    testImplementation "org.hamcrest:hamcrest-all:1.3"
-
-    testImplementation "junit:junit:4.12"
-    androidTestImplementation "androidx.test:runner:1.1.1"
-    androidTestImplementation "androidx.test.espresso:espresso-core:3.1.1"
-
 }
diff --git a/tweet-ui/internal-build.gradle b/tweet-ui/internal-build.gradle
index 64e55471..c4232757 100644
--- a/tweet-ui/internal-build.gradle
+++ b/tweet-ui/internal-build.gradle
@@ -89,14 +89,8 @@ dependencies {
 
     implementation 'com.squareup.picasso:picasso:2.71828'
 
-    implementation deps.support.design
-    implementation deps.support.compat
-
-    testImplementation deps.test.hamcrest
-
-    testImplementation deps.junit
-    androidTestImplementation deps.atsl.runner
-    androidTestImplementation deps.espresso.core
+    implementation "com.google.android.material:material:1.0.0"
+    implementation "androidx.appcompat:appcompat:1.0.2"
 }
 
 apply from: rootProject.deployScript
\ No newline at end of file
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
deleted file mode 100644
index 140bbeb3..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
+++ /dev/null
@@ -1,315 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.view.View;
-
-import com.twitter.sdk.android.core.TwitterTestUtils;
-import com.twitter.sdk.android.core.models.Card;
-import com.twitter.sdk.android.core.models.ImageValue;
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout;
-
-import java.util.Locale;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-public abstract class AbstractTweetViewTest extends TweetUiTestCase {
-    Context context;
-    Resources resources;
-    Locale defaultLocale;
-    AbstractTweetView.DependencyProvider mockDependencyProvider;
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        context = getContext();
-        resources = context.getResources();
-        defaultLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
-        setUpMockDependencyProvider();
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        TestUtils.setLocale(getContext(), defaultLocale);
-        scrubClass(AbstractTweetViewTest.class);
-        super.tearDown();
-    }
-
-    public Resources getResources() {
-        return resources;
-    }
-
-    // constructor factories
-    abstract AbstractTweetView createView(Context context, Tweet tweet);
-
-    abstract AbstractTweetView createViewInEditMode(Context context, Tweet tweet);
-
-    abstract AbstractTweetView createViewWithMocks(Context context, Tweet tweet);
-
-    abstract AbstractTweetView createViewWithMocks(Context context, Tweet tweet,
-                                                   AbstractTweetView.DependencyProvider dependencyProvider);
-
-    private void setUpMockDependencyProvider() {
-        mockDependencyProvider = mock(TestDependencyProvider.class);
-        when(mockDependencyProvider.getImageLoader())
-                .thenReturn(TweetUi.getInstance().getImageLoader());
-        when(mockDependencyProvider.getTweetUi()).thenReturn(TweetUi.getInstance());
-    }
-
-    // initialization
-
-    public void testInit() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final long tweetId = TestFixtures.TEST_TWEET.id;
-        assertEquals(tweetId, view.getTweetId());
-        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-    }
-
-    public void testInit_withEmptyTweet() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        // recycle so we're not relying on first time defaults, fields should clear
-        view.setTweet(TestFixtures.EMPTY_TWEET);
-        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-    }
-
-    public void testInit_withNullTweet() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        // recycle so we're not relying on first time defaults, fields should clear
-        view.setTweet(null);
-        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-    }
-
-    public void testInit_inEditMode() {
-        TwitterTestUtils.resetTwitter();
-        try {
-            final AbstractTweetView view = createViewInEditMode(context, TestFixtures.TEST_TWEET);
-            assertTrue(view.isInEditMode());
-            assertTrue(view.isEnabled());
-        } catch (Exception e) {
-            fail("Must start TweetUi... IllegalStateException should be caught");
-        } finally {
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    public void testIsTweetUiEnabled_withEditMode() {
-        final AbstractTweetView view = createView(getContext(), TestFixtures.TEST_TWEET);
-        assertTrue(view.isTweetUiEnabled());
-    }
-
-    public void testIsTweetUiEnabled_inEditMode() {
-        final AbstractTweetView view = createViewInEditMode(getContext(), TestFixtures.TEST_TWEET);
-        assertFalse(view.isTweetUiEnabled());
-    }
-
-    public void testIsTweetUiEnabled_tweetUiStarted() {
-        final AbstractTweetView view = new TweetView(getContext(), TestFixtures.TEST_TWEET);
-        assertTrue(view.isTweetUiEnabled());
-        assertTrue(view.isEnabled());
-    }
-
-    // Tests Date formatting reliant string, manually sets english and restores original locale
-    public void testGetContentDescription_emptyTweet() {
-        final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        view.setTweet(TestFixtures.EMPTY_TWEET);
-        assertEquals(getResources().getString(R.string.tw__loading_tweet),
-                view.getContentDescription());
-        TestUtils.setLocale(getContext(), originalLocale);
-    }
-
-    // Tests Date formatting reliant string, manually sets english and restores original locale
-    public void testGetContentDescription_fullTweet() {
-        final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
-
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertTrue(TweetUtils.isTweetResolvable(view.tweet));
-        assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
-
-        TestUtils.setLocale(getContext(), originalLocale);
-    }
-
-    public void testSetTweetMediaClickListener() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
-        view.setTweetMediaClickListener((tweet, entity) -> {
-
-        });
-
-        assertNotNull(view.tweetMediaClickListener);
-    }
-
-    public void testSetTweetLinkClickListener() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
-        final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
-        view.setTweetLinkClickListener(linkClickListener);
-
-        assertNotNull(view.tweetLinkClickListener);
-
-        view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_URL);
-        verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_LINK, TestFixtures.TEST_URL);
-    }
-
-    public void testSetHashtagLinkClickListener() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_HASHTAG);
-        final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
-        view.setTweetLinkClickListener(linkClickListener);
-
-        assertNotNull(view.tweetLinkClickListener);
-
-        view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_HASHTAG);
-        verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_HASHTAG,
-                TestFixtures.TEST_HASHTAG);
-    }
-
-    public void testSetTweet_defaultClickListener() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
-
-        assertNull(view.tweetLinkClickListener);
-    }
-
-    // Permalink click
-    public void testSetTweet_permalink() {
-        final AbstractTweetView view = createView(context, null);
-        view.setTweet(TestFixtures.TEST_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
-    }
-
-    // permalinkUri should be null so the permalink launcher will be a NoOp
-    public void testSetTweet_nullTweetPermalink() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        view.setTweet(null);
-        assertNull(view.getPermalinkUri());
-    }
-
-    public void testSetTweet_updatePermalink() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
-        view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
-    }
-
-    public void testGetAspectRatio_withNullMediaEntity() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final MediaEntity mediaEntity = null;
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
-    }
-
-    public void testGetAspectRatio_withNullImageValue() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final ImageValue imageValue = null;
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
-    }
-
-    public void testGetAspectRatio_mediaEntityWithNullSizes() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(null);
-
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
-    }
-
-    public void testGetAspectRatio_mediaEntityWithEmptySizes() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final MediaEntity.Sizes sizes = new MediaEntity.Sizes(null, null, null, null);
-        final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(sizes);
-
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
-    }
-
-    public void testGetAspectRatio_mediaEntityWithZeroDimension() {
-        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)));
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)));
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)));
-    }
-
-    public void testSetTweetMedia_handlesNullPicasso() {
-        when(mockDependencyProvider.getImageLoader()).thenReturn(null);
-
-        final AbstractTweetView tweetView = createViewWithMocks(context, TestFixtures.TEST_TWEET,
-                mockDependencyProvider);
-
-        try {
-            tweetView.setTweetMedia(mock(Tweet.class));
-        } catch (NullPointerException e) {
-            fail("Should have handled null error image");
-        }
-    }
-
-    public void testRender_forSinglePhotoEntity() {
-        final AbstractTweetView tweetView = createViewWithMocks(context, null);
-        tweetView.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-
-        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
-    }
-
-    public void testRender_forMultiplePhotoEntities() {
-        final AbstractTweetView tweetView = createViewWithMocks(context, null);
-        tweetView.setTweet(TestFixtures.TEST_MULTIPLE_PHOTO_TWEET);
-
-        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
-    }
-
-    public void testRender_rendersVineCard() {
-        final AbstractTweetView view = createViewWithMocks(context, null);
-        final Card sampleVineCard = TestFixtures.sampleValidVineCard();
-        final Tweet tweetWithVineCard = TestFixtures.createTweetWithVineCard(
-                TestFixtures.TEST_TWEET_ID, TestFixtures.TEST_USER,
-                TestFixtures.TEST_STATUS, sampleVineCard);
-
-        view.setTweet(tweetWithVineCard);
-
-        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
-        assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
-    }
-
-    public void testClearMedia() {
-        final AbstractTweetView view = createViewWithMocks(context, null);
-        view.mediaContainer = mock(AspectRatioFrameLayout.class);
-
-        view.clearTweetMedia();
-
-        verify(view.mediaContainer).setVisibility(View.GONE);
-    }
-}
-
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
deleted file mode 100644
index f3b17b6b..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
+++ /dev/null
@@ -1,532 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Color;
-import android.view.View;
-import android.widget.ImageView;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterTestUtils;
-import com.twitter.sdk.android.core.models.Card;
-import com.twitter.sdk.android.core.models.ImageValue;
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout;
-import com.twitter.sdk.android.tweetui.internal.TweetMediaView;
-
-import org.mockito.ArgumentCaptor;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.doNothing;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-/**
- * Tests the state of BaseTweetViews created via constructors.
- */
-public abstract class BaseTweetViewTest extends TweetUiTestCase {
-    private static final String REQUIRED_RETWEETED_BY_TEXT = "Retweeted by Mr Retweets";
-    protected static final double DELTA = 0.001f;
-    protected static final String ALT_TEXT = "ALT_TEXT";
-
-    protected Context context;
-    private Resources resources;
-    private Locale defaultLocale;
-    protected BaseTweetView.DependencyProvider mockDependencyProvider;
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        context = getContext();
-        resources = context.getResources();
-        defaultLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
-        setUpMockDependencyProvider();
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        TestUtils.setLocale(getContext(), defaultLocale);
-        scrubClass(BaseTweetViewTest.class);
-        super.tearDown();
-    }
-
-    public Resources getResources() {
-        return resources;
-    }
-
-    // constructor factories
-
-    abstract BaseTweetView createView(Context context, Tweet tweet);
-
-    abstract BaseTweetView createView(Context context, Tweet tweet, int styleResId);
-
-    abstract BaseTweetView createViewInEditMode(Context context, Tweet tweet);
-
-    abstract BaseTweetView createViewWithMocks(Context context, Tweet tweet);
-
-    abstract BaseTweetView createViewWithMocks(Context context, Tweet tweet, int styleResId,
-                                               BaseTweetView.DependencyProvider dependencyProvider);
-
-    private void setUpMockDependencyProvider() {
-        mockDependencyProvider = mock(TestDependencyProvider.class);
-        when(mockDependencyProvider.getImageLoader())
-                .thenReturn(TweetUi.getInstance().getImageLoader());
-        when(mockDependencyProvider.getTweetUi()).thenReturn(TweetUi.getInstance());
-    }
-
-    // initialization
-
-    public void testInit() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final long tweetId = TestFixtures.TEST_TWEET.id;
-        assertEquals(tweetId, view.getTweetId());
-        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        assertEquals(TestFixtures.TIMESTAMP_RENDERED, view.timestampView.getText().toString());
-    }
-
-    public void testInit_withEmptyTweet() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        // recycle so we're not relying on first time defaults, fields should clear
-        view.setTweet(TestFixtures.EMPTY_TWEET);
-        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
-    }
-
-    public void testInit_withNullTweet() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        // recycle so we're not relying on first time defaults, fields should clear
-        view.setTweet(null);
-        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
-    }
-
-    // setTweet with a Tweet with an invalid timestamp makes timestamp view show an empty string
-    public void testInit_withInvalidTimestamp() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        // recycle so we're not relying on first time defaults, timestamp should clear
-        view.setTweet(TestFixtures.INVALID_TIMESTAMP_TWEET);
-        assertEquals(TestFixtures.INVALID_TIMESTAMP_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
-    }
-
-    public void testInit_inEditMode() {
-        TwitterTestUtils.resetTwitter();
-        try {
-            final BaseTweetView view = createViewInEditMode(context, TestFixtures.TEST_TWEET);
-            assertTrue(view.isInEditMode());
-            assertTrue(view.isEnabled());
-        } catch (Exception e) {
-            fail("Must start TweetUi... IllegalStateException should be caught");
-        } finally {
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    public void testIsTweetUiEnabled_withEditMode() {
-        final BaseTweetView view = createView(getContext(), TestFixtures.TEST_TWEET);
-        assertTrue(view.isTweetUiEnabled());
-    }
-
-    public void testIsTweetUiEnabled_inEditMode() {
-        final BaseTweetView view = createViewInEditMode(getContext(), TestFixtures.TEST_TWEET);
-        assertFalse(view.isTweetUiEnabled());
-    }
-
-    public void testIsTweetUiEnabled_tweetUiStarted() {
-        final BaseTweetView view = new TweetView(getContext(), TestFixtures.TEST_TWEET);
-        assertTrue(view.isTweetUiEnabled());
-        assertTrue(view.isEnabled());
-    }
-
-    // Tests Date formatting reliant string, manually sets english and restores original locale
-    public void testGetContentDescription_emptyTweet() {
-        final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        view.setTweet(TestFixtures.EMPTY_TWEET);
-        assertEquals(getResources().getString(R.string.tw__loading_tweet),
-                view.getContentDescription());
-        TestUtils.setLocale(getContext(), originalLocale);
-    }
-
-    // Tests Date formatting reliant string, manually sets english and restores original locale
-    public void testGetContentDescription_fullTweet() {
-        final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
-
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertTrue(TweetUtils.isTweetResolvable(view.tweet));
-        assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
-
-        TestUtils.setLocale(getContext(), originalLocale);
-    }
-
-    public void testSetTweetMediaClickListener() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
-        view.setTweetMediaClickListener((tweet, entity) -> {
-
-        });
-
-        assertNotNull(view.tweetMediaClickListener);
-    }
-
-    public void testSetTweetLinkClickListener() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
-        final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
-        view.setTweetLinkClickListener(linkClickListener);
-
-        assertNotNull(view.tweetLinkClickListener);
-
-        view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_URL);
-        verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_LINK, TestFixtures.TEST_URL);
-    }
-
-    public void testSetTweet_defaultClickListener() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
-
-        assertNull(view.tweetLinkClickListener);
-    }
-
-    // Permalink click
-    public void testSetTweet_permalink() {
-        final BaseTweetView view = createView(context, null);
-        view.setTweet(TestFixtures.TEST_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
-    }
-
-    // permalinkUri should be null so the permalink launcher will be a NoOp
-    public void testSetTweet_nullTweetPermalink() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        view.setTweet(null);
-        assertNull(view.getPermalinkUri());
-    }
-
-    public void testSetTweet_updatePermalink() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
-        view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
-    }
-
-    // Styling
-    // light style (default)
-
-    public void testStaticColorsDefault() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        TweetAsserts.assertDefaultColors(view, getResources());
-    }
-
-    public void testSecondaryColorsDefault() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final int primaryTextColor = getResources().getColor(
-                R.color.tw__tweet_light_primary_text_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.SECONDARY_TEXT_COLOR_LIGHT_OPACITY, Color.WHITE, primaryTextColor);
-        assertEquals(color, view.secondaryTextColor);
-        assertEquals(color, view.timestampView.getCurrentTextColor());
-        assertEquals(color, view.screenNameView.getCurrentTextColor());
-        assertEquals(color, view.retweetedByView.getCurrentTextColor());
-    }
-
-    public void testAvatarDefault() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final int containerColor = getResources().getColor(
-                R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
-    }
-
-    public void testPhotoDefault() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        final int containerColor = getResources().getColor(
-                R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-
-        final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
-        final List<MediaEntity> mediaEntities = new ArrayList<>();
-        mediaEntities.add(entity);
-
-        final TweetMediaView tweetMediaView = view.tweetMediaView;
-        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
-
-        final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
-        assertEquals(color, TestUtils.getBackgroundColor(imageView));
-    }
-
-    public void testTweetPhotoErrorDefault() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
-    }
-
-    public void testRetweetIconDefault() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_RETWEET);
-        assertEquals(R.drawable.tw__ic_retweet_light, view.retweetIconResId);
-    }
-
-    // dark style
-
-    public void testStaticColorsDark() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetDarkStyle);
-        TweetAsserts.assertDarkColors(view, getResources());
-    }
-
-    public void testSecondaryColorsDark() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetDarkStyle);
-        final int primaryTextColor = getResources().getColor(
-                R.color.tw__tweet_dark_primary_text_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.SECONDARY_TEXT_COLOR_DARK_OPACITY, Color.BLACK, primaryTextColor);
-        assertEquals(color, view.secondaryTextColor);
-        assertEquals(color, view.timestampView.getCurrentTextColor());
-        assertEquals(color, view.screenNameView.getCurrentTextColor());
-        assertEquals(color, view.retweetedByView.getCurrentTextColor());
-    }
-
-    public void testAvatarDark() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetDarkStyle);
-        final int containerColor = getResources().getColor(
-                R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
-    }
-
-    public void testPhotoDark() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET,
-                R.style.tw__TweetDarkStyle);
-        final int containerColor = getResources().getColor(
-                R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-
-        final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
-        final List<MediaEntity> mediaEntities = new ArrayList<>();
-        mediaEntities.add(entity);
-        final TweetMediaView tweetMediaView = view.tweetMediaView;
-        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
-
-        final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
-        assertEquals(color, TestUtils.getBackgroundColor(imageView));
-    }
-
-    public void testTweetPhotoErrorDark() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetDarkStyle);
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
-    }
-
-    public void testRetweetIconDark() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_RETWEET,
-                R.style.tw__TweetDarkStyle);
-        assertEquals(R.drawable.tw__ic_retweet_dark, view.retweetIconResId);
-    }
-
-    public void testTweetActionsEnabled() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetActionsEnabled);
-        assertTrue(view.tweetActionsEnabled);
-    }
-
-    public void testSetOnActionCallback_passesCorrectTweetToActionBarView() {
-        final BaseTweetView tweetView = createView(context, TestFixtures.TEST_RETWEET,
-                R.style.tw__TweetActionsEnabled);
-        final TweetActionBarView mockActionBarView = mock(TestTweetActionBarView.class);
-        tweetView.tweetActionBarView = mockActionBarView;
-        doNothing().when(mockActionBarView).setLike(any(Tweet.class));
-        final Callback<Tweet> mockCallback = mock(Callback.class);
-        tweetView.setOnActionCallback(mockCallback);
-        // verify that the TweetActionBarView is set with the Tweet, not the inner retweeted Tweet
-        final ArgumentCaptor<Tweet> tweetCaptor = ArgumentCaptor.forClass(Tweet.class);
-        verify(mockActionBarView).setTweet(tweetCaptor.capture());
-        assertEquals(TestFixtures.TEST_RETWEET.getId(), tweetCaptor.getValue().getId());
-    }
-
-    public void testRender_passesCorrectTweetToActionBarView() {
-        final BaseTweetView tweetView = createView(context, TestFixtures.TEST_RETWEET,
-                R.style.tw__TweetActionsEnabled);
-        final TweetActionBarView mockActionBarView = mock(TestTweetActionBarView.class);
-        tweetView.tweetActionBarView = mockActionBarView;
-        doNothing().when(mockActionBarView).setLike(any(Tweet.class));
-        tweetView.render();
-        // verify that the TweetActionBarView is set with the Tweet, not the inner retweeted Tweet
-        final ArgumentCaptor<Tweet> tweetCaptor = ArgumentCaptor.forClass(Tweet.class);
-        verify(mockActionBarView).setTweet(tweetCaptor.capture());
-        assertEquals(TestFixtures.TEST_RETWEET.getId(), tweetCaptor.getValue().getId());
-    }
-
-    public void testTweetActionsDisabled() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetActionsDisabled);
-        assertFalse(view.tweetActionsEnabled);
-    }
-
-    public void testGetAspectRatio_withNullMediaEntity() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final MediaEntity mediaEntity = null;
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
-    }
-
-    public void testGetAspectRatio_withNullImageValue() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final ImageValue imageValue = null;
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
-    }
-
-    public void testGetAspectRatio_mediaEntityWithNullSizes() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(null);
-
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
-    }
-
-    public void testGetAspectRatio_mediaEntityWithEmptySizes() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        final MediaEntity.Sizes sizes = new MediaEntity.Sizes(null, null, null, null);
-        final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(sizes);
-
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
-    }
-
-    public void testGetAspectRatio_mediaEntityWithZeroDimension() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)));
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)));
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
-                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)));
-    }
-
-    public void testSetProfilePhotoView_handlesNullPicasso() {
-        when(mockDependencyProvider.getImageLoader()).thenReturn(null);
-
-        final BaseTweetView tweetView = createViewWithMocks(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetDarkStyle, mockDependencyProvider);
-
-        try {
-            tweetView.setProfilePhotoView(TestFixtures.TEST_TWEET);
-        } catch (NullPointerException e) {
-            fail("Should have handled null error image");
-        }
-    }
-
-    public void testSetTweetMedia_handlesNullPicasso() {
-        when(mockDependencyProvider.getImageLoader()).thenReturn(null);
-
-        final BaseTweetView tweetView = createViewWithMocks(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetDarkStyle, mockDependencyProvider);
-
-        try {
-            tweetView.setTweetMedia(mock(Tweet.class));
-        } catch (NullPointerException e) {
-            fail("Should have handled null error image");
-        }
-    }
-
-    public void testRender_forSinglePhotoEntity() {
-        final BaseTweetView tweetView = createViewWithMocks(context, null);
-        tweetView.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-
-        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
-    }
-
-    public void testRender_forMultiplePhotoEntities() {
-        final BaseTweetView tweetView = createViewWithMocks(context, null);
-        tweetView.setTweet(TestFixtures.TEST_MULTIPLE_PHOTO_TWEET);
-
-        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
-    }
-
-    public void testRender_rendersRetweetedStatus() {
-        final BaseTweetView tweetView = createViewWithMocks(context, null);
-        tweetView.setTweet(TestFixtures.TEST_RETWEET);
-        assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
-        assertEquals(TestFixtures.TEST_NAME, tweetView.fullNameView.getText());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, tweetView.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, tweetView.contentView.getText().toString());
-    }
-
-    public void testSetRetweetedBy_nullTweet() {
-        final BaseTweetView tweetView = createViewWithMocks(context, null);
-        tweetView.setTweet(null);
-        assertEquals(View.GONE, tweetView.retweetedByView.getVisibility());
-    }
-
-    public void testSetRetweetedBy_nonRetweet() {
-        final BaseTweetView tweetView = createViewWithMocks(context, null);
-        tweetView.setTweet(TestFixtures.TEST_TWEET);
-        assertEquals(View.GONE, tweetView.retweetedByView.getVisibility());
-    }
-
-    public void testSetRetweetedBy_retweet() {
-        final BaseTweetView tweetView = createViewWithMocks(context, null);
-        tweetView.setTweet(TestFixtures.TEST_RETWEET);
-        assertEquals(View.VISIBLE, tweetView.retweetedByView.getVisibility());
-        assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
-    }
-
-    public void testRender_rendersVineCard() {
-        final BaseTweetView view = createViewWithMocks(context, null);
-        final Card sampleVineCard = TestFixtures.sampleValidVineCard();
-        final Tweet tweetWithVineCard = TestFixtures.createTweetWithVineCard(
-                TestFixtures.TEST_TWEET_ID, TestFixtures.TEST_USER,
-                TestFixtures.TEST_STATUS, sampleVineCard);
-
-        view.setTweet(tweetWithVineCard);
-
-        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
-        assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
-    }
-
-    public void testClearMedia() {
-        final BaseTweetView view = createViewWithMocks(context, null);
-        view.mediaContainer = mock(AspectRatioFrameLayout.class);
-
-        view.clearTweetMedia();
-
-        verify(view.mediaContainer).setVisibility(View.GONE);
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
deleted file mode 100644
index 76e5760e..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.res.Resources;
-import android.graphics.Color;
-import android.view.InflateException;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.LinearLayout;
-
-/**
- * Tests the state of BaseTweetViews created via XML.
- */
-public abstract class BaseTweetViewXmlTest extends TweetUiTestCase {
-    @Override
-    protected void tearDown() throws Exception {
-        scrubClass(BaseTweetViewXmlTest.class);
-        super.tearDown();
-    }
-
-    // View without Tweet data attributes
-    abstract BaseTweetView getView();
-
-    // View with dark style attributes
-    abstract BaseTweetView getViewDark();
-
-    public Resources getResources() {
-        return getContext().getResources();
-    }
-
-    protected View getInflatedLayout() {
-        final ViewGroup group = new LinearLayout(getContext());
-        return LayoutInflater.from(getContext())
-                .inflate(R.layout.activity_tweet_view_test, group, true);
-    }
-
-    // Initialization
-
-    // init without data attributes, subviews should have empty string values
-
-    public void testInitName() {
-        final BaseTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-    }
-
-    public void testInitScreenName() {
-        final BaseTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-    }
-
-    public void testInitTimestamp() {
-        final BaseTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
-    }
-
-    public void testInitText() {
-        final BaseTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-    }
-
-    public void testInitWithTweetActionsDisabled() {
-        final BaseTweetView view = getView();
-        assertFalse(view.tweetActionsEnabled);
-    }
-
-    public void testInitWithTweetActionsEnabled() {
-        final ViewGroup group = new LinearLayout((getContext()));
-        final View view = LayoutInflater.from(getContext()).inflate(
-                R.layout.activity_tweet_actions_enabled, group, true);
-
-        final BaseTweetView tweetView = view.findViewById(R.id.tweet_view);
-        assertTrue(tweetView.tweetActionsEnabled);
-    }
-
-    // asserts that a BaseTweetView with an invalid tweet id throws an exception
-    public void testInitWithInvalidTweetId() {
-        final ViewGroup group = new LinearLayout((getContext()));
-        try {
-            final View view = LayoutInflater.from(getContext()).inflate(
-                    R.layout.activity_invalid_tweet_id, group, true);
-            fail("InflateException not thrown");
-        } catch (InflateException e) {
-            // success
-        }
-    }
-
-    // Permalink
-
-    public void testSetTweet_permalink() {
-        final BaseTweetView view = getView();
-        assertEquals(TestFixtures.TEST_PERMALINK_UNKNOWN_USER, view.getPermalinkUri().toString());
-    }
-
-    // permalinkUri should be null so the permalink launcher will be a NoOp
-    public void testSetTweet_nullTweetPermalink() {
-        final BaseTweetView view = getView();
-        view.setTweet(null);
-        assertNull(view.getPermalinkUri());
-    }
-
-    public void testSetTweet_updatePermalink() {
-        final BaseTweetView view = getView();
-        view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
-    }
-
-    // Styling
-    // light style (default)
-
-    public void testStaticColorsDefault() {
-        final BaseTweetView view = getView();
-        TweetAsserts.assertDefaultColors(view, getResources());
-    }
-
-    public void testSecondaryColorsDefault() {
-        final BaseTweetView view = getView();
-        final int primaryTextColor = getResources().getColor(
-                R.color.tw__tweet_light_primary_text_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.SECONDARY_TEXT_COLOR_LIGHT_OPACITY, Color.WHITE, primaryTextColor);
-        assertEquals(color, view.secondaryTextColor);
-        assertEquals(color, view.timestampView.getCurrentTextColor());
-        assertEquals(color, view.screenNameView.getCurrentTextColor());
-        assertEquals(color, view.retweetedByView.getCurrentTextColor());
-    }
-
-    public void testAvatarDefault() {
-        final BaseTweetView view = getView();
-        final int containerColor = getResources().getColor(
-                R.color.tw__tweet_light_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
-    }
-
-    public void testPhotoErrorDefault() {
-        final BaseTweetView view = getView();
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
-    }
-
-
-    public void testRetweetIconDefault() {
-        final BaseTweetView view = getView();
-        assertEquals(R.drawable.tw__ic_retweet_light, view.retweetIconResId);
-    }
-
-    // dark style
-    public void testStaticColorsDark() {
-        final BaseTweetView view = getViewDark();
-        TweetAsserts.assertDarkColors(view, getResources());
-    }
-
-    public void testSecondaryColorsDark() {
-        final BaseTweetView view = getViewDark();
-        final int primaryTextColor = getResources().getColor(
-                R.color.tw__tweet_dark_primary_text_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.SECONDARY_TEXT_COLOR_DARK_OPACITY, Color.BLACK, primaryTextColor);
-        assertEquals(color, view.secondaryTextColor);
-        assertEquals(color, view.timestampView.getCurrentTextColor());
-        assertEquals(color, view.screenNameView.getCurrentTextColor());
-        assertEquals(color, view.retweetedByView.getCurrentTextColor());
-    }
-
-    public void testAvatarDark() {
-        final BaseTweetView view = getViewDark();
-        final int containerColor = getResources().getColor(
-                R.color.tw__tweet_dark_container_bg_color);
-        final int color = ColorUtils.calculateOpacityTransform(
-                BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
-    }
-
-    public void testPhotoErrorDark() {
-        final BaseTweetView view = getViewDark();
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
-    }
-
-    public void testRetweetIconDark() {
-        final BaseTweetView view = getViewDark();
-        assertEquals(R.drawable.tw__ic_retweet_dark, view.retweetIconResId);
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
deleted file mode 100644
index b4c470a3..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-
-import com.squareup.picasso.Picasso;
-import com.squareup.picasso.RequestCreator;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-public class CompactTweetViewTest extends BaseTweetViewTest {
-    private static final float DELTA = 0.001f;
-
-    @Override
-    CompactTweetView createView(Context context, Tweet tweet) {
-        return new CompactTweetView(context, tweet);
-    }
-
-    @Override
-    CompactTweetView createView(Context context, Tweet tweet, int styleResId) {
-        return new CompactTweetView(context, tweet, styleResId);
-    }
-
-    @Override
-    CompactTweetView createViewInEditMode(Context context, Tweet tweet) {
-        return new CompactTweetView(context, tweet) {
-            @Override
-            public boolean isInEditMode() {
-                return true;
-            }
-        };
-    }
-
-    @Override
-    CompactTweetView createViewWithMocks(Context context, Tweet tweet) {
-        return new CompactTweetView(context, tweet);
-    }
-
-    @Override
-    CompactTweetView createViewWithMocks(Context context, Tweet tweet, int styleResId,
-                                         BaseTweetView.DependencyProvider dependencyProvider) {
-        return new CompactTweetView(context, tweet, styleResId, dependencyProvider);
-    }
-
-    // Layout
-    public void testLayout() {
-        final CompactTweetView compactView = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(R.layout.tw__tweet_compact, compactView.getLayout());
-    }
-
-    public void testGetAspectRatio() {
-        final CompactTweetView compactView = createView(context, TestFixtures.TEST_TWEET);
-
-        assertEquals(1.0, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(100, 100)), DELTA);
-        assertEquals(1.0, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(300, 400)), DELTA);
-        assertEquals(1.0, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(100, 800)), DELTA);
-        assertEquals(1.3333, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(400, 300)), DELTA);
-        assertEquals(1.6666, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(500, 300)), DELTA);
-        assertEquals(2.0, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(600, 300)), DELTA);
-        assertEquals(2.3333, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(700, 300)), DELTA);
-        assertEquals(2.6666, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(800, 300)), DELTA);
-        assertEquals(3.0, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(900, 300)), DELTA);
-        assertEquals(3.0, compactView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(1000, 50)), DELTA);
-    }
-
-    public void testSetTweetPhoto() {
-        final Picasso mockPicasso = mock(Picasso.class);
-        final RequestCreator mockRequestCreator = mock(RequestCreator.class);
-        MockUtils.mockPicasso(mockPicasso, mockRequestCreator);
-        when(mockDependencyProvider.getImageLoader()).thenReturn(mockPicasso);
-
-        final CompactTweetView tv = createViewWithMocks(context, TestFixtures.TEST_PHOTO_TWEET,
-                R.style.tw__TweetLightStyle, mockDependencyProvider);
-        // assert 1 load for profile photo, tweet photo loaded in TweetMediaView
-        verify(mockPicasso, times(1)).load(TestFixtures.TEST_PROFILE_IMAGE_URL);
-    }
-
-    public void testGetAspectRatioForPhotoEntity() {
-        final CompactTweetView compactView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(1));
-        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(2));
-        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(3));
-        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(4));
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java
deleted file mode 100644
index 82b7bcbe..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-public class CompactTweetViewXmlTest extends BaseTweetViewXmlTest {
-
-    @Override
-    CompactTweetView getView() {
-        return (CompactTweetView) getInflatedLayout().findViewById(R.id.compact_tweet_view);
-    }
-
-    @Override
-    CompactTweetView getViewDark() {
-        return (CompactTweetView) getInflatedLayout().findViewById(R.id.compact_tweet_view_dark);
-    }
-
-    // Layout
-
-    public void testLayout() {
-        final CompactTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(R.layout.tw__tweet_compact, view.getLayout());
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/DateTranslationsTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/DateTranslationsTest.java
deleted file mode 100644
index 5149951e..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/DateTranslationsTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.test.AndroidTestCase;
-
-import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Locale;
-
-/**
- * Incorrectly translated dates can cause our process to crash, so here we exercise all of our
- * translations.
- */
-public class DateTranslationsTest extends AndroidTestCase {
-    private Locale defaultLocale;
-
-    static final SimpleDateFormat RELATIVE_DATE_FORMAT =
-            new SimpleDateFormat("MM/dd/yy", Locale.ENGLISH);
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        defaultLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        super.tearDown();
-        TestUtils.setLocale(getContext(), defaultLocale);
-    }
-
-    public void testDateLocales() {
-        final List<Locale> locales = Arrays.asList(new Locale("ar"), new Locale("da"),
-                new Locale("de"), new Locale("en", "GB"), new Locale("en", "SS"),
-                new Locale("en", "XX"), new Locale("es"), new Locale("fa"), new Locale("fi"),
-                new Locale("fr"), new Locale("hi"), new Locale("hu"), new Locale("in"),
-                new Locale("it"), new Locale("iw"), new Locale("ja"), new Locale("ko"),
-                new Locale("ms"), new Locale("nb"), new Locale("nl"), new Locale("pl"),
-                new Locale("pt"), new Locale("ru"), new Locale("sv"), new Locale("th"),
-                new Locale("tl"), new Locale("tr"), new Locale("ur"), new Locale("zh", "CN"),
-                new Locale("zh", "TW"));
-        for (Locale locale : locales) {
-            TestUtils.setLocale(getContext(), locale);
-            final String shortStr = getContext().getResources()
-                    .getString(R.string.tw__relative_date_format_short);
-            final String longStr = getContext().getResources()
-                    .getString(R.string.tw__relative_date_format_long);
-            // incorrect localized format strings would throw an exception
-            RELATIVE_DATE_FORMAT.applyPattern(shortStr);
-            RELATIVE_DATE_FORMAT.applyPattern(longStr);
-        }
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockUtils.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockUtils.java
deleted file mode 100644
index b0c6e160..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockUtils.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.graphics.drawable.Drawable;
-import android.widget.ImageView;
-
-import com.squareup.picasso.Picasso;
-import com.squareup.picasso.RequestCreator;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.services.StatusesService;
-
-import org.mockito.Mockito;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-
-import java.util.concurrent.ConcurrentHashMap;
-
-import retrofit2.Call;
-
-import static org.mockito.ArgumentMatchers.isNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyObject;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.doNothing;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-final class MockUtils {
-
-    private MockUtils() {
-    }
-
-    static Picasso mockPicasso(Picasso picasso, RequestCreator requestCreator) {
-        when(picasso.load(anyString())).thenReturn(requestCreator);
-        when(picasso.load(anyInt())).thenReturn(requestCreator);
-        when(picasso.load(isNull(String.class))).thenReturn(requestCreator);
-        when(requestCreator.centerCrop()).thenReturn(requestCreator);
-        when(requestCreator.error(anyInt())).thenReturn(requestCreator);
-        when(requestCreator.fit()).thenReturn(requestCreator);
-        when(requestCreator.placeholder(any(Drawable.class)))
-                .thenReturn(requestCreator);
-        doNothing().when(requestCreator).into(any(ImageView.class));
-        return picasso;
-    }
-
-    static void mockApiClient(TwitterApiClient apiClient) {
-        final StatusesService statusesService = mock(StatusesService.class, new MockCallAnswer());
-
-        when(apiClient.getStatusesService()).thenReturn(statusesService);
-    }
-
-    static void mockClients(ConcurrentHashMap<Session, TwitterApiClient> clients,
-                            TwitterApiClient apiClient) {
-        when(clients.get(anyObject())).thenReturn(apiClient);
-        when(clients.contains(anyObject())).thenReturn(true);
-    }
-
-    static class MockCallAnswer implements Answer<Object> {
-        @Override
-        public Object answer(InvocationOnMock invocation) throws Throwable {
-            if (invocation.getMethod().getReturnType().equals(Call.class)) {
-                return mock(Call.class);
-            } else {
-                return Mockito.RETURNS_DEFAULTS.answer(invocation);
-            }
-        }
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
deleted file mode 100644
index ff19a5a4..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-public class QuoteTweetViewTest extends AbstractTweetViewTest {
-    protected static final double DELTA = 0.001f;
-
-    @Override
-    QuoteTweetView createView(Context context, Tweet tweet) {
-        final QuoteTweetView quoteTweetView = new QuoteTweetView(context);
-        quoteTweetView.setTweet(tweet);
-        return quoteTweetView;
-    }
-
-    @Override
-    QuoteTweetView createViewInEditMode(Context context, Tweet tweet) {
-        final QuoteTweetView quoteTweetView = new QuoteTweetView(context) {
-            @Override
-            public boolean isInEditMode() {
-                return true;
-            }
-        };
-
-        return quoteTweetView;
-    }
-
-    @Override
-    QuoteTweetView createViewWithMocks(Context context, Tweet tweet) {
-        final QuoteTweetView quoteTweetView = new QuoteTweetView(context);
-        quoteTweetView.setTweet(tweet);
-        return quoteTweetView;
-    }
-
-    @Override
-    QuoteTweetView createViewWithMocks(Context context, Tweet tweet,
-                                       BaseTweetView.DependencyProvider dependencyProvider) {
-        final QuoteTweetView quoteTweetView = new QuoteTweetView(context, dependencyProvider);
-        quoteTweetView.setTweet(tweet);
-        return quoteTweetView;
-    }
-
-    public void testGetAspectRatio() {
-        final QuoteTweetView quoteTweetView = createView(context, TestFixtures.TEST_TWEET);
-
-        assertEquals(1.0, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(100, 100)), DELTA);
-        assertEquals(1.0, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(300, 400)), DELTA);
-        assertEquals(1.0, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(100, 800)), DELTA);
-        assertEquals(1.3333, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(400, 300)), DELTA);
-        assertEquals(1.6666, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(500, 300)), DELTA);
-        assertEquals(2.0, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(600, 300)), DELTA);
-        assertEquals(2.3333, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(700, 300)), DELTA);
-        assertEquals(2.6666, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(800, 300)), DELTA);
-        assertEquals(3.0, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(900, 300)), DELTA);
-        assertEquals(3.0, quoteTweetView.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(1000, 50)), DELTA);
-    }
-
-    public void testGetAspectRatioForPhotoEntity() {
-        final QuoteTweetView quoteTweetView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(1));
-        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(2));
-        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(3));
-        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(4));
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java
deleted file mode 100644
index a35f071e..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.widget.ImageButton;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import org.mockito.ArgumentCaptor;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-public class TweetActionBarViewTest extends TweetUiTestCase {
-
-    public void testSetOnActionCallback() {
-        final TweetActionBarView view = createView();
-        final Callback<Tweet> actionCallback = mock(Callback.class);
-        view.setOnActionCallback(actionCallback);
-        assertEquals(actionCallback, view.actionCallback);
-    }
-
-    public void testSetLike() {
-        final TweetRepository tweetRepository = TweetUi.getInstance().getTweetRepository();
-        final TweetActionBarView view = createView();
-        view.setLike(TestFixtures.TEST_TWEET);
-
-        final ArgumentCaptor<LikeTweetAction> likeCaptor
-                = ArgumentCaptor.forClass(LikeTweetAction.class);
-        verify(view.likeButton).setToggledOn(TestFixtures.TEST_TWEET.favorited);
-        verify(view.likeButton).setOnClickListener(likeCaptor.capture());
-        final LikeTweetAction likeAction = likeCaptor.getValue();
-        assertNotNull(likeAction);
-        assertEquals(TestFixtures.TEST_TWEET, likeAction.tweet);
-        assertEquals(tweetRepository, likeAction.tweetRepository);
-    }
-
-    public void testSetLike_handlesNullTweet() {
-        final TweetActionBarView view = createView();
-        view.setLike(null);
-        verifyZeroInteractions(view.likeButton);
-    }
-
-    public void testSetShare() {
-        final TweetActionBarView view = createView();
-        view.setShare(TestFixtures.TEST_TWEET);
-
-        final ArgumentCaptor<ShareTweetAction> shareCaptor
-                = ArgumentCaptor.forClass(ShareTweetAction.class);
-        verify(view.shareButton).setOnClickListener(shareCaptor.capture());
-        final ShareTweetAction shareAction = shareCaptor.getValue();
-        assertNotNull(shareAction);
-        assertEquals(TestFixtures.TEST_TWEET, shareAction.tweet);
-    }
-
-    public void testSetShare_handlesNullTweet() {
-        final TweetActionBarView view = createView();
-        view.setShare(null);
-        verifyZeroInteractions(view.shareButton);
-    }
-
-    private TweetActionBarView createView() {
-        final TweetActionBarView view = new TweetActionBarView(getContext());
-        view.likeButton = mock(ToggleImageButton.class);
-        view.shareButton = mock(ImageButton.class);
-        return view;
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
deleted file mode 100644
index 44d71b7f..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
+++ /dev/null
@@ -1,219 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.view.View;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.models.Identifiable;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-import static org.mockito.Mockito.mock;
-
-public class TweetTimelineListAdapterTest extends TweetUiTestCase {
-    static final String NULL_CONTEXT_MESSAGE = "Context must not be null";
-    static final String NULL_TIMELINE_MESSAGE = "Timeline must not be null";
-    static final int ANY_STYLE = R.style.tw__TweetLightWithActionsStyle;
-    private TweetTimelineListAdapter listAdapter;
-
-    public void testConstructor() {
-        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TestTimelineDelegate.class);
-        final TweetUi tweetUi = mock(TweetUi.class);
-        listAdapter = new TweetTimelineListAdapter(getContext(), mockTimelineDelegate, ANY_STYLE,
-                null, tweetUi);
-        if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
-            final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            assertNull(replaceCallback.cb);
-        } else {
-            fail("Expected default actionCallback to be a ReplaceTweetCallback");
-        }
-    }
-
-    public void testConstructor_withActionCallback() {
-        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TestTimelineDelegate.class);
-        final Callback<Tweet> mockCallback = mock(Callback.class);
-        final TweetUi tweetUi = mock(TweetUi.class);
-        listAdapter = new TweetTimelineListAdapter(getContext(), mockTimelineDelegate, ANY_STYLE,
-                mockCallback, tweetUi);
-        // assert that
-        // - developer callback wrapped in a ReplaceTweetCallback
-        if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
-            final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            assertEquals(mockCallback, replaceCallback.cb);
-        } else {
-            fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
-        }
-    }
-
-    public void testBuilder() {
-        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
-        final Callback<Tweet> mockCallback = mock(Callback.class);
-        listAdapter = new TweetTimelineListAdapter.Builder(getContext())
-                .setTimeline(mockTimeline)
-                .setOnActionCallback(mockCallback)
-                .setViewStyle(R.style.tw__TweetDarkStyle)
-                .build();
-        assertEquals(R.style.tw__TweetDarkStyle, listAdapter.styleResId);
-        if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
-            final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            assertEquals(mockCallback, replaceCallback.cb);
-        } else {
-            fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
-        }
-    }
-
-    public void testBuilder_nullContext() {
-        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
-        try {
-            listAdapter = new TweetTimelineListAdapter.Builder(null).setTimeline(mockTimeline)
-                    .build();
-            fail("Null context should throw exception");
-        } catch (IllegalArgumentException e) {
-            assertEquals(NULL_CONTEXT_MESSAGE, e.getMessage());
-        }
-    }
-
-    public void testBuilder_nullTimeline() {
-        try {
-            listAdapter = new TweetTimelineListAdapter.Builder(getContext()).setTimeline(null)
-                    .build();
-            fail("Null timeline should throw exception");
-        } catch (IllegalArgumentException e) {
-            assertEquals(NULL_TIMELINE_MESSAGE, e.getMessage());
-        }
-    }
-
-    public void testBuilder_withTimelineFilter() {
-        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
-        final TimelineFilter mockTimelineFilter = mock(TimelineFilter.class);
-        listAdapter = new TweetTimelineListAdapter.Builder(getContext())
-                .setTimeline(mockTimeline)
-                .setTimelineFilter(mockTimelineFilter)
-                .build();
-
-        assertTrue(listAdapter.delegate instanceof FilterTimelineDelegate);
-    }
-
-    public void testBuilder_withNullTimelineFilter() {
-        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
-        listAdapter = new TweetTimelineListAdapter.Builder(getContext())
-                .setTimeline(mockTimeline)
-                .setTimelineFilter(null)
-                .build();
-
-        assertTrue(listAdapter.delegate instanceof TimelineDelegate);
-    }
-
-    /**
-     * Requires TweetUi to be setup by the test class. Without TweetUi, TweetView construction
-     * returns before calling setTweet to support IDE edit mode, so getTweetId would always be -1.
-     */
-    public void testGetView_getsCompactTweetView() {
-        final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(10);
-        final TimelineDelegate<Tweet> fakeDelegate = new TimelineDelegate<>(fakeTimeline);
-        listAdapter = new TweetTimelineListAdapter(getContext(), fakeDelegate, ANY_STYLE,
-                null, tweetUi);
-
-        final View view = listAdapter.getView(0, null, null);
-        // assert that
-        // - default implementation of getView returns a CompactTweetView
-        // - sanity check that CompactTweetView tweet id matches the Tweet's id
-        assertEquals(CompactTweetView.class, view.getClass());
-        final BaseTweetView tv = (BaseTweetView) view;
-        assertEquals(listAdapter.getItemId(0), tv.getTweetId());
-    }
-
-    public void testDefaultViewStyle_viaConstructor() {
-        final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(10);
-        listAdapter = new TweetTimelineListAdapter(getContext(), fakeTimeline);
-        final View view = listAdapter.getView(0, null, null);
-        final BaseTweetView tv = (BaseTweetView) view;
-        assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
-    }
-
-    public void testDefaultViewStyle_viaBuilder() {
-        final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(10);
-        listAdapter = new TweetTimelineListAdapter.Builder(getContext())
-                .setTimeline(fakeTimeline)
-                .build();
-        final View view = listAdapter.getView(0, null, null);
-        final BaseTweetView tv = (BaseTweetView) view;
-        assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
-    }
-
-    public void testSetViewStyle() {
-        final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(10);
-        listAdapter = new TweetTimelineListAdapter.Builder(getContext())
-                .setTimeline(fakeTimeline)
-                .setViewStyle(R.style.tw__TweetDarkWithActionsStyle)
-                .build();
-        final View view = listAdapter.getView(0, null, null);
-        final BaseTweetView tv = (BaseTweetView) view;
-        assertEquals(R.style.tw__TweetDarkWithActionsStyle, tv.styleResId);
-    }
-
-    static class FakeTweetTimeline implements Timeline<Tweet> {
-        private long numItems;
-
-        /**
-         * Constructs a FakeTweetTimeline
-         *
-         * @param numItems the number of Tweets to return per call to next/previous
-         */
-        FakeTweetTimeline(long numItems) {
-            this.numItems = numItems;
-        }
-
-        @Override
-        public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) {
-            final List<Tweet> tweets = TestFixtures.getTweetList(numItems);
-            final TimelineCursor timelineCursor = new TimelineCursor(tweets);
-            final TimelineResult<Tweet> timelineResult
-                    = new TimelineResult<>(timelineCursor, tweets);
-            cb.success(new Result<>(timelineResult, null));
-        }
-
-        @Override
-        public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) {
-            final List<Tweet> tweets = TestFixtures.getTweetList(numItems);
-            final TimelineCursor timelineCursor = new TimelineCursor(tweets);
-            final TimelineResult<Tweet> timelineResult
-                    = new TimelineResult<>(timelineCursor, tweets);
-            cb.success(new Result<>(timelineResult, null));
-        }
-    }
-
-    /**
-     * Makes class public so it can be mocked on ART runtime.
-     *
-     * @param <T>
-     */
-    public class TestTimelineDelegate<T extends Identifiable> extends TimelineDelegate {
-        public TestTimelineDelegate(Timeline<T> timeline) {
-            super(timeline);
-        }
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java
deleted file mode 100644
index c595baaf..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.models.Identifiable;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-import static org.mockito.Mockito.mock;
-
-public class TweetTimelineRecyclerViewAdapterTest extends TweetUiTestCase {
-    static final String NULL_CONTEXT_MESSAGE = "Context must not be null";
-    static final String NULL_TIMELINE_MESSAGE = "Timeline must not be null";
-    static final int ANY_STYLE = R.style.tw__TweetLightWithActionsStyle;
-    private TweetTimelineRecyclerViewAdapter recyclerViewAdapter;
-
-    private static final int ITEM_COUNT = 10;
-
-
-    public void testConstructor() {
-        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TestTimelineDelegate.class);
-        final TweetUi tweetUi = mock(TweetUi.class);
-        recyclerViewAdapter = new TweetTimelineRecyclerViewAdapter(getContext(),
-                mockTimelineDelegate, ANY_STYLE, null, tweetUi);
-        if (recyclerViewAdapter.actionCallback instanceof
-                TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback) {
-            final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
-                    recyclerViewAdapter.actionCallback;
-            assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            assertNull(replaceCallback.cb);
-        } else {
-            fail("Expected default actionCallback to be a ReplaceTweetCallback");
-        }
-    }
-
-    public void testConstructor_withActionCallback() {
-        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TestTimelineDelegate.class);
-        final Callback<Tweet> mockCallback = mock(Callback.class);
-        final TweetUi tweetUi = mock(TweetUi.class);
-        recyclerViewAdapter = new TweetTimelineRecyclerViewAdapter(getContext(),
-                mockTimelineDelegate, ANY_STYLE, mockCallback, tweetUi);
-        // assert that
-        // - developer callback wrapped in a ReplaceTweetCallback
-        if (recyclerViewAdapter.actionCallback instanceof
-                TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback) {
-            final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
-                    recyclerViewAdapter.actionCallback;
-            assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            assertEquals(mockCallback, replaceCallback.cb);
-        } else {
-            fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
-        }
-    }
-
-    public void testBuilder() {
-        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
-        final Callback<Tweet> mockCallback = mock(Callback.class);
-        recyclerViewAdapter = new TweetTimelineRecyclerViewAdapter.Builder(getContext())
-                .setTimeline(mockTimeline)
-                .setOnActionCallback(mockCallback)
-                .setViewStyle(R.style.tw__TweetDarkStyle)
-                .build();
-        assertEquals(R.style.tw__TweetDarkStyle, recyclerViewAdapter.styleResId);
-        if (recyclerViewAdapter.actionCallback instanceof
-                TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback) {
-            final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
-                    = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
-                    recyclerViewAdapter.actionCallback;
-            assertEquals(mockCallback, replaceCallback.cb);
-        } else {
-            fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
-        }
-    }
-
-    public void testBuilder_nullContext() {
-        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
-        try {
-            recyclerViewAdapter =
-                    new TweetTimelineRecyclerViewAdapter.Builder(null).setTimeline(mockTimeline)
-                            .build();
-            fail("Null context should throw exception");
-        } catch (IllegalArgumentException e) {
-            assertEquals(NULL_CONTEXT_MESSAGE, e.getMessage());
-        }
-    }
-
-    public void testBuilder_nullTimeline() {
-        try {
-            recyclerViewAdapter =
-                    new TweetTimelineRecyclerViewAdapter.Builder(getContext()).setTimeline(null)
-                            .build();
-            fail("Null timeline should throw exception");
-        } catch (IllegalArgumentException e) {
-            assertEquals(NULL_TIMELINE_MESSAGE, e.getMessage());
-        }
-    }
-
-    public void testBuilder_withTimelineFilter() {
-        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
-        final TimelineFilter mockTimelineFilter = mock(TimelineFilter.class);
-        recyclerViewAdapter = new TweetTimelineRecyclerViewAdapter.Builder(getContext())
-                .setTimeline(mockTimeline)
-                .setTimelineFilter(mockTimelineFilter)
-                .build();
-
-        assertTrue(recyclerViewAdapter.timelineDelegate instanceof FilterTimelineDelegate);
-    }
-
-    public void testBuilder_withNullTimelineFilter() {
-        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
-        recyclerViewAdapter = new TweetTimelineRecyclerViewAdapter.Builder(getContext())
-                .setTimeline(mockTimeline)
-                .setTimelineFilter(null)
-                .build();
-
-        assertTrue(recyclerViewAdapter.timelineDelegate instanceof TimelineDelegate);
-    }
-
-    public void testItemCount_viaConstructor() {
-        final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(ITEM_COUNT);
-        final TweetTimelineRecyclerViewAdapter recyclerViewAdapter = new
-                TweetTimelineRecyclerViewAdapter(getContext(), fakeTimeline);
-        assertEquals(recyclerViewAdapter.getItemCount(), ITEM_COUNT);
-    }
-
-    public void testItemCount_viaBuilder() {
-        final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(ITEM_COUNT);
-        final TweetTimelineRecyclerViewAdapter recyclerViewAdapter =
-                new TweetTimelineRecyclerViewAdapter.Builder(getContext())
-                        .setTimeline(fakeTimeline)
-                        .setViewStyle(R.style.tw__TweetLightWithActionsStyle)
-                        .build();
-        assertEquals(recyclerViewAdapter.getItemCount(), ITEM_COUNT);
-    }
-
-    static class FakeTweetTimeline implements Timeline<Tweet> {
-        private long numItems;
-
-        /**
-         * Constructs a FakeTweetTimeline
-         *
-         * @param numItems the number of Tweets to return per call to next/previous
-         */
-        FakeTweetTimeline(long numItems) {
-            this.numItems = numItems;
-        }
-
-        @Override
-        public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) {
-            final List<Tweet> tweets = TestFixtures.getTweetList(numItems);
-            final TimelineCursor timelineCursor = new TimelineCursor(tweets);
-            final TimelineResult<Tweet> timelineResult
-                    = new TimelineResult<>(timelineCursor, tweets);
-            cb.success(new Result<>(timelineResult, null));
-        }
-
-        @Override
-        public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) {
-            final List<Tweet> tweets = TestFixtures.getTweetList(numItems);
-            final TimelineCursor timelineCursor = new TimelineCursor(tweets);
-            final TimelineResult<Tweet> timelineResult
-                    = new TimelineResult<>(timelineCursor, tweets);
-            cb.success(new Result<>(timelineResult, null));
-        }
-    }
-
-    /**
-     * Makes class public so it can be mocked on ART runtime.
-     *
-     * @param <T>
-     */
-    public class TestTimelineDelegate<T extends Identifiable> extends TimelineDelegate {
-        public TestTimelineDelegate(Timeline<T> timeline) {
-            super(timeline);
-        }
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
deleted file mode 100644
index 576b1137..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.test.InstrumentationTestCase;
-import android.test.UiThreadTest;
-
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterConfig;
-import com.twitter.sdk.android.core.TwitterCoreTestUtils;
-import com.twitter.sdk.android.core.TwitterTestUtils;
-
-import java.util.concurrent.ThreadPoolExecutor;
-
-import static org.mockito.Mockito.mock;
-
-public class TweetUiBackgroundTest extends InstrumentationTestCase {
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        // Set a mock thread pool executor so we can run these tests knowing that doInBackground
-        // has not been run.
-        Twitter.initialize(new TwitterConfig.Builder(getInstrumentation().getTargetContext())
-                .executorService(mock(ThreadPoolExecutor.class))
-                .build());
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        TwitterTestUtils.resetTwitter();
-        TwitterCoreTestUtils.resetTwitterCore();
-        TweetUiTestUtils.resetTweetUi();
-
-        super.tearDown();
-    }
-
-    @UiThreadTest
-    public void testRenderTweet_beforeInBackground() {
-        try {
-            new TweetView(getInstrumentation().getTargetContext(), TestFixtures.TEST_TWEET);
-        } catch (IllegalArgumentException e) {
-            fail(e.getMessage());
-        }
-    }
-
-    public void testGetTweetRepository() {
-        assertNotNull(TweetUi.getInstance().getTweetRepository());
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
deleted file mode 100644
index f8a229de..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.test.AndroidTestCase;
-
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterConfig;
-import com.twitter.sdk.android.core.TwitterCoreTestUtils;
-import com.twitter.sdk.android.core.TwitterTestUtils;
-
-import java.util.concurrent.ExecutorService;
-
-import static org.mockito.Mockito.mock;
-
-public class TweetUiTest extends AndroidTestCase {
-    private TweetUi tweetUi;
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        Twitter.initialize(new TwitterConfig.Builder(getContext())
-                .executorService(mock(ExecutorService.class))
-                .build());
-
-        tweetUi = new TweetUi();
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        TwitterTestUtils.resetTwitter();
-        TwitterCoreTestUtils.resetTwitterCore();
-        TweetUiTestUtils.resetTweetUi();
-
-        super.tearDown();
-    }
-
-    public void testGetVersion() {
-        assertEquals(BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER,
-                tweetUi.getVersion());
-    }
-
-    public void testGetIdentifier() {
-        final String identifier = BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID;
-        assertEquals(identifier, tweetUi.getIdentifier());
-    }
-
-    public void testGetInstance_tweeterStarted() {
-        try {
-            final TweetUi instance = TweetUi.getInstance();
-            assertNotNull(instance);
-        } catch (Exception ex) {
-            fail("IllegalStateException was expected");
-        }
-    }
-
-    public void testGetInstance_tweeterNotStarted() {
-        TwitterTestUtils.resetTwitter();
-        try {
-            TweetUi.getInstance();
-            fail("IllegalStateException was expected");
-        } catch (Exception ex) {
-            if (!(ex instanceof IllegalStateException)) {
-                fail("IllegalStateException was expected");
-            }
-        }
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTestCase.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTestCase.java
deleted file mode 100644
index 94ff07ee..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTestCase.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.os.Handler;
-import android.test.AndroidTestCase;
-import android.util.Log;
-
-import com.squareup.picasso.Picasso;
-import com.squareup.picasso.RequestCreator;
-import com.twitter.sdk.android.core.DefaultLogger;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterConfig;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterCoreTestUtils;
-import com.twitter.sdk.android.core.TwitterTestUtils;
-
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ThreadPoolExecutor;
-
-import static org.mockito.Mockito.mock;
-
-public class TweetUiTestCase extends AndroidTestCase {
-
-    protected TweetUi tweetUi;
-
-    // mocks
-    protected Picasso picasso;
-    protected Handler mainHandler;
-    private TwitterApiClient apiClient;
-    private ConcurrentHashMap<Session, TwitterApiClient> clients;
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        createMocks();
-
-        // Initialize Fabric with mock executor so that kit#doInBackground() will not be called
-        // during kit initialization.
-        final TwitterConfig config = new TwitterConfig.Builder(getContext())
-                .logger(new DefaultLogger(Log.DEBUG))
-                .executorService(mock(ThreadPoolExecutor.class))
-                .build();
-
-        Twitter.initialize(config);
-
-        final TwitterCore twitterCore = TwitterCoreTestUtils.createTwitterCore(
-                new TwitterAuthConfig("", ""), clients, apiClient);
-
-        tweetUi = TweetUi.getInstance();
-        final TweetRepository tweetRepository = new TweetRepository(mainHandler,
-                mock(SessionManager.class), twitterCore);
-        tweetUi.setTweetRepository(tweetRepository);
-        tweetUi.setImageLoader(picasso);
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        TwitterTestUtils.resetTwitter();
-        TwitterCoreTestUtils.resetTwitterCore();
-        TweetUiTestUtils.resetTweetUi();
-
-        scrubClass(TweetUiTestCase.class);
-        super.tearDown();
-    }
-
-    private void createMocks() {
-        mainHandler = mock(Handler.class);
-        picasso = MockUtils.mockPicasso(mock(Picasso.class), mock(RequestCreator.class));
-
-        apiClient = mock(TwitterApiClient.class);
-        MockUtils.mockApiClient(apiClient);
-
-        clients = mock(ConcurrentHashMap.class);
-        MockUtils.mockClients(clients, apiClient);
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
deleted file mode 100644
index 715349ef..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
+++ /dev/null
@@ -1,209 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.net.Uri;
-import android.test.AndroidTestCase;
-
-import com.twitter.sdk.android.core.TwitterCoreTestUtils;
-import com.twitter.sdk.android.core.TwitterTestUtils;
-import com.twitter.sdk.android.core.models.Card;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-import com.twitter.sdk.android.core.models.TweetEntities;
-import com.twitter.sdk.android.core.models.UserBuilder;
-
-public class TweetUtilsTest extends AndroidTestCase {
-    static final String NOT_STARTED_ERROR = "Must initialize Twitter before using getInstance()";
-    private static final String A_FULL_PERMALINK =
-            "https://twitter.com/jack/status/20?ref_src=twsrc%5Etwitterkit";
-    private static final String A_PERMALINK_WITH_NO_SCREEN_NAME
-            = "https://twitter.com/twitter_unknown/status/20?ref_src=twsrc%5Etwitterkit";
-    private static final String A_VALID_SCREEN_NAME = "jack";
-    private static final int A_VALID_TWEET_ID = 20;
-    private static final int AN_INVALID_TWEET_ID = 0;
-
-    @Override
-    public void tearDown() throws Exception {
-        TwitterTestUtils.resetTwitter();
-        TwitterCoreTestUtils.resetTwitterCore();
-        TweetUiTestUtils.resetTweetUi();
-
-        super.tearDown();
-    }
-
-    public void testLoadTweet_beforeKitStart() {
-        try {
-            TweetUtils.loadTweet(TestFixtures.TEST_TWEET_ID, null);
-            fail("IllegalStateException not thrown");
-        } catch (IllegalStateException e) {
-            assertEquals(NOT_STARTED_ERROR, e.getMessage());
-        } catch (Exception ex) {
-            fail();
-        }
-    }
-
-    public void testLoadTweets_beforeKitStart() {
-        try {
-            TweetUtils.loadTweets(TestFixtures.TWEET_IDS, null);
-            fail("IllegalStateException not thrown");
-        } catch (IllegalStateException e) {
-            assertEquals(NOT_STARTED_ERROR, e.getMessage());
-        } catch (Exception ex) {
-            fail();
-        }
-    }
-
-    public void testIsTweetResolvable_nullTweet() {
-        assertFalse(TweetUtils.isTweetResolvable(null));
-    }
-
-    public void testIsTweetResolvable_hasInvalidIdAndNullUser() {
-        final Tweet tweet = new TweetBuilder().build();
-        assertNull(tweet.user);
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
-    }
-
-    public void testIsTweetResolvable_hasValidIdAndNullUser() {
-        final Tweet tweet = new TweetBuilder().setId(TestFixtures.TEST_TWEET_ID).build();
-        assertNull(tweet.user);
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
-    }
-
-    public void testIsTweetResolvable_hasInvalidIdAndUserWithNullScreenName() {
-        final Tweet tweet = new TweetBuilder()
-                .setUser(
-                        new UserBuilder()
-                                .setId(1)
-                                .setName(null)
-                                .setScreenName(null)
-                                .setVerified(false)
-                                .build())
-                .build();
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
-    }
-
-    public void testIsTweetResolvable_hasValidIdAndUserWithNullScreenName() {
-        final Tweet tweet = new TweetBuilder()
-                .setId(TestFixtures.TEST_TWEET_ID)
-                .setUser(
-                        new UserBuilder()
-                                .setId(1)
-                                .setName(null)
-                                .setScreenName(null)
-                                .setVerified(false)
-                                .build()
-                ).build();
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
-    }
-
-    public void testIsTweetResolvable_hasInvalidIdAndUserWithEmptyScreenName() {
-        final Tweet tweet = new TweetBuilder()
-                .setUser(new UserBuilder()
-                        .setId(1)
-                        .setName(null)
-                        .setScreenName("")
-                        .setVerified(false)
-                        .build())
-                .build();
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
-    }
-
-    public void testIsTweetResolvable_hasValidIdAndUserWithEmptyScreenName() {
-        final Tweet tweet = new TweetBuilder()
-                .setId(TestFixtures.TEST_TWEET_ID)
-                .setUser(new UserBuilder()
-                        .setId(1)
-                        .setName(null)
-                        .setScreenName("")
-                        .setVerified(false)
-                        .build())
-                .build();
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
-    }
-
-    public void testIsTweetResolvable_hasUserWithScreenNameAndValidId() {
-        assertTrue(TweetUtils.isTweetResolvable(TestFixtures.TEST_TWEET));
-    }
-
-    public void testGetPermalink_nullScreenNameValidId() {
-        assertEquals(A_PERMALINK_WITH_NO_SCREEN_NAME,
-                TweetUtils.getPermalink(null, A_VALID_TWEET_ID).toString());
-    }
-
-    public void testGetPermalink_validScreenNameZeroId() {
-        assertNull(TweetUtils.getPermalink(A_VALID_SCREEN_NAME, AN_INVALID_TWEET_ID));
-    }
-
-    public void testGetPermalink_validScreenNameAndId() {
-        assertEquals(A_FULL_PERMALINK,
-                TweetUtils.getPermalink(A_VALID_SCREEN_NAME, A_VALID_TWEET_ID).toString());
-    }
-
-    public void testGetPermalink_emptyScreenName() {
-        final Uri permalink = TweetUtils.getPermalink("", 20);
-        assertEquals(A_PERMALINK_WITH_NO_SCREEN_NAME, permalink.toString());
-    }
-
-    public void testGetDisplayTweet_nullTweet() {
-        assertNull(TweetUtils.getDisplayTweet(null));
-    }
-
-    public void testGetDisplayTweet_retweet() {
-        assertEquals(TestFixtures.TEST_RETWEET.retweetedStatus,
-                TweetUtils.getDisplayTweet(TestFixtures.TEST_RETWEET));
-    }
-
-    public void testGetDisplayTweet_nonRetweet() {
-        assertEquals(TestFixtures.TEST_TWEET, TweetUtils.getDisplayTweet(TestFixtures.TEST_TWEET));
-    }
-
-    public void testShowQuoteTweet() {
-        final Tweet tweet = new TweetBuilder()
-                .copy(TestFixtures.TEST_TWEET)
-                .setQuotedStatus(TestFixtures.TEST_TWEET)
-                .build();
-        assertTrue(TweetUtils.showQuoteTweet(tweet));
-    }
-
-    public void testShowQuoteTweet_withCardAndQuoteTweet() {
-        final Tweet tweet = new TweetBuilder()
-                .setQuotedStatus(TestFixtures.TEST_TWEET)
-                .setCard(new Card(null, "Vine"))
-                .setEntities(new TweetEntities(null, null, null, null, null))
-                .build();
-        assertFalse(TweetUtils.showQuoteTweet(tweet));
-    }
-
-    public void testShowQuoteTweet_withMediaAndQuoteTweet() {
-        final Tweet tweet = new TweetBuilder()
-                .copy(TestFixtures.TEST_PHOTO_TWEET)
-                .setQuotedStatus(TestFixtures.TEST_TWEET)
-                .build();
-        assertFalse(TweetUtils.showQuoteTweet(tweet));
-    }
-
-    public void testShowQuoteTweet_nullEntity() {
-        final Tweet tweet = new TweetBuilder()
-                .copy(TestFixtures.TEST_PHOTO_TWEET)
-                .setQuotedStatus(TestFixtures.TEST_TWEET)
-                .setEntities(null)
-                .build();
-        assertTrue(TweetUtils.showQuoteTweet(tweet));
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
deleted file mode 100644
index 832919c8..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-import android.widget.ImageView;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-public class TweetViewTest extends BaseTweetViewTest {
-    @Override
-    TweetView createView(Context context, Tweet tweet) {
-        return new TweetView(context, tweet);
-    }
-
-    @Override
-    TweetView createView(Context context, Tweet tweet, int styleResId) {
-        return new TweetView(context, tweet, styleResId);
-    }
-
-    @Override
-    TweetView createViewInEditMode(Context context, Tweet tweet) {
-        return new TweetView(context, tweet) {
-            @Override
-            public boolean isInEditMode() {
-                return true;
-            }
-        };
-    }
-
-    @Override
-    TweetView createViewWithMocks(Context context, Tweet tweet) {
-        return new TweetView(context, tweet);
-    }
-
-    @Override
-    TweetView createViewWithMocks(Context context, Tweet tweet, int styleResId,
-                                  BaseTweetView.DependencyProvider dependencyProvider) {
-        return new TweetView(context, tweet, styleResId, dependencyProvider);
-    }
-
-    // Initialization
-
-    @Override
-    public void testInit() {
-        super.testInit();
-        final TweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
-    }
-
-    @Override
-    public void testInit_withEmptyTweet() {
-        super.testInit();
-        final TweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
-    }
-
-    public void testInit_withPhotoTweet() {
-        final TweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(ImageView.VISIBLE, view.mediaContainer.getVisibility());
-    }
-
-    // Layout
-    public void testLayout() {
-        final TweetView tweetView = new TweetView(context, TestFixtures.TEST_TWEET);
-        assertEquals(R.layout.tw__tweet, tweetView.getLayout());
-    }
-
-    public void testGetAspectRatio() {
-        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-
-        assertEquals(1, view.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(100, 100)), DELTA);
-        assertEquals(.5, view.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(100, 200)), DELTA);
-        assertEquals(2, view.getAspectRatio(
-                TestFixtures.createMediaEntityWithPhoto(200, 100)), DELTA);
-    }
-
-    public void testGetAspectRatioForPhotoEntity() {
-        final TweetView tweetView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-
-        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(1));
-        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(2));
-        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(3));
-        assertEquals(1.0, tweetView.getAspectRatioForPhotoEntity(4));
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java
deleted file mode 100644
index 82760707..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-public class TweetViewXmlTest extends BaseTweetViewXmlTest {
-    @Override
-    TweetView getView() {
-        return (TweetView) getInflatedLayout().findViewById(R.id.tweet_view);
-    }
-
-    @Override
-    TweetView getViewDark() {
-        return (TweetView) getInflatedLayout().findViewById(R.id.tweet_view_dark);
-    }
-
-    // Layout
-
-    public void testLayout() {
-        final TweetView view = getView();
-        assertNotNull(view);
-        assertEquals(R.layout.tw__tweet, view.getLayout());
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
deleted file mode 100644
index 84c22a1a..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import android.graphics.Bitmap;
-import android.graphics.Matrix;
-import android.graphics.RectF;
-import android.test.AndroidTestCase;
-
-public class MultiTouchImageViewTest extends AndroidTestCase {
-    static final RectF TEST_VIEW_RECT = new RectF(0, 0, 100, 100);
-    static final Matrix TEST_BASE_MATRIX = new MatrixBuilder().postScale(2f).build();
-    static final Matrix TEST_IDENTITY_MATRIX = new MatrixBuilder().build();
-    static final float TEST_BASE_SCALE = 1f;
-    static final Bitmap image = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
-    MultiTouchImageView view;
-
-    public void setUp() throws Exception {
-        super.setUp();
-        view = new MultiTouchImageView(getContext());
-        view.setImageBitmap(image);
-        view.layout(0, 0, 100, 100);
-    }
-
-    public void testInitialViewState() {
-        assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
-        assertEquals(TEST_IDENTITY_MATRIX, view.updateMatrix);
-        assertEquals(TEST_VIEW_RECT, view.viewRect);
-        assertEquals(TEST_BASE_SCALE, view.getScale());
-        assertEquals(TEST_BASE_MATRIX, view.getDrawMatrix());
-    }
-
-    public void testGetDrawRect() {
-        final Matrix matrix = new MatrixBuilder()
-                .postScale(2f)
-                .postTranslate(10f, 10f)
-                .build();
-        final RectF result = view.getDrawRect(matrix);
-        final RectF expected = new RectF(10f, 10f, 110f, 110f);
-        assertEquals(expected, result);
-    }
-
-    public void testSetScale() {
-        view.setScale(1.5f, 50f, 50f);
-
-        final Matrix expected = new MatrixBuilder()
-                .postScale(1.5f)
-                .postTranslate(-25f, -25f)
-                .build();
-        assertEquals(expected, view.updateMatrix);
-        assertEquals(1.5f, view.getScale());
-        assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
-    }
-
-    public void testReset() {
-        view.setScale(1.5f, 50f, 50f);
-        view.reset();
-
-        assertEquals(TEST_IDENTITY_MATRIX, view.updateMatrix);
-        assertEquals(TEST_BASE_SCALE, view.getScale());
-        assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
-    }
-
-    public void testSetTranslate() {
-        view.setTranslate(10f, 10f);
-
-        final Matrix expected = new MatrixBuilder()
-                .postTranslate(10f, 10f)
-                .build();
-        assertEquals(expected, view.updateMatrix);
-        assertEquals(TEST_BASE_SCALE, view.getScale());
-        assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
-    }
-
-    public void testCanBeSwiped_withScaleEqualOne() {
-        assertTrue(view.canBeSwiped());
-    }
-
-    public void testCanBeSwiped_withScaleGreaterThanOne() {
-        view.setScale(2, 0, 0);
-        assertFalse(view.canBeSwiped());
-    }
-
-    static class MatrixBuilder {
-        private final Matrix matrix = new Matrix();
-
-        MatrixBuilder postScale(float scale) {
-            matrix.postScale(scale, scale);
-            return this;
-        }
-
-        MatrixBuilder postTranslate(float x, float y) {
-            matrix.postTranslate(x, y);
-            return this;
-        }
-
-        Matrix build() {
-            return matrix;
-        }
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
deleted file mode 100644
index 40e5f7b9..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import android.graphics.Canvas;
-import android.graphics.drawable.Drawable;
-import android.test.AndroidTestCase;
-import android.widget.ImageView;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-public class OverlayImageViewTest extends AndroidTestCase {
-    public static final int[] TEST_STATE = new int[]{0, 0};
-    public static final int TEST_HEIGHT = 2;
-    public static final int TEST_WIDTH = 4;
-
-    public void testOnDraw() {
-        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
-        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
-        final Canvas canvas = new Canvas();
-        overlayImageView.overlay = overlay;
-        overlayImageView.draw(canvas);
-
-        verify(overlay).draw(canvas);
-    }
-
-    public void testDrawableStateChanged() {
-        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
-        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
-        overlayImageView.overlay = overlay;
-        overlayImageView.drawableStateChanged();
-
-        verify(overlay).setDrawableState(any(int[].class));
-    }
-
-    public void testOnMeasure() {
-        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
-        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
-        overlayImageView.overlay = overlay;
-        overlayImageView.measure(0, 0);
-
-        verify(overlay).setDrawableBounds(anyInt(), anyInt());
-    }
-
-    public void testOnSizeChanged() {
-        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
-        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
-        overlayImageView.overlay = overlay;
-        overlayImageView.onSizeChanged(TEST_WIDTH, TEST_HEIGHT, 0, 0);
-
-        verify(overlay).setDrawableBounds(TEST_WIDTH, TEST_HEIGHT);
-    }
-
-    public void testSetOverlayDrawable() {
-        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
-        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
-        overlayImageView.overlay = overlay;
-        final Drawable drawable = mock(Drawable.class);
-        overlayImageView.setOverlayDrawable(drawable);
-
-        verify(overlay).cleanupDrawable(overlayImageView);
-        assertNotNull(overlayImageView.overlay);
-        assertEquals(drawable, overlayImageView.overlay.drawable);
-    }
-
-    public void testSetOverlayDrawable_nullDrawable() {
-        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
-        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
-        overlayImageView.overlay = overlay;
-        overlayImageView.setOverlayDrawable(null);
-
-        verifyNoMoreInteractions(overlay);
-    }
-
-    public void testOverlayDraw() {
-        final Drawable drawable = mock(Drawable.class);
-        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
-        final Canvas canvas = new Canvas();
-        overlay.draw(canvas);
-
-        verify(drawable).draw(canvas);
-    }
-
-    public void testOverlaySetDrawableState() {
-        final Drawable drawable = mock(Drawable.class);
-        when(drawable.isStateful()).thenReturn(true);
-        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
-        overlay.setDrawableState(TEST_STATE);
-
-        verify(drawable).isStateful();
-        verify(drawable).setState(TEST_STATE);
-    }
-
-    public void testOverlaySetDrawableState_drawableNotStateful() {
-        final Drawable drawable = mock(Drawable.class);
-        when(drawable.isStateful()).thenReturn(false);
-        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
-        overlay.setDrawableState(TEST_STATE);
-
-        verify(drawable).isStateful();
-        verifyNoMoreInteractions(drawable);
-    }
-
-    public void testOverlaySetDrawableBounds() {
-        final Drawable drawable = mock(Drawable.class);
-        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
-        overlay.setDrawableBounds(TEST_WIDTH, TEST_HEIGHT);
-
-        verify(drawable).setBounds(0, 0, TEST_WIDTH, TEST_HEIGHT);
-    }
-
-    public void testCleanupDrawable() {
-        final ImageView imageView = mock(ImageView.class);
-        final Drawable drawable = mock(Drawable.class);
-        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
-        overlay.cleanupDrawable(imageView);
-
-        verify(imageView).unscheduleDrawable(drawable);
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java
deleted file mode 100644
index a48be453..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java
+++ /dev/null
@@ -1,177 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import android.test.AndroidTestCase;
-import android.view.View;
-import android.widget.ImageButton;
-import android.widget.SeekBar;
-
-import com.twitter.sdk.android.tweetui.R;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-public class VideoControlViewTest extends AndroidTestCase {
-    static final int SECOND_IN_MS = 1000;
-    static final int MINUTE_IN_MS = 60000;
-    static final int TEST_BUFFER_PROGRESS = 32;
-    VideoControlView videoControlView;
-
-    public void setUp() throws Exception {
-        super.setUp();
-        videoControlView = new VideoControlView(getContext());
-        videoControlView.onFinishInflate();
-    }
-
-    public void testInitialState() {
-        assertTrue(videoControlView.getVisibility() == View.VISIBLE);
-        assertNotNull(videoControlView.seekBar);
-        assertNotNull(videoControlView.duration);
-        assertNotNull(videoControlView.currentTime);
-        assertNotNull(videoControlView.stateControl);
-        assertNull(videoControlView.player);
-
-        assertEquals(1000, videoControlView.seekBar.getMax());
-        assertEquals(0, videoControlView.seekBar.getProgress());
-        assertEquals(0, videoControlView.seekBar.getSecondaryProgress());
-
-        assertEquals("0:00", videoControlView.duration.getText());
-        assertEquals("0:00", videoControlView.currentTime.getText());
-    }
-
-    public void testCreateStateControlClickListener() {
-        final VideoControlView.MediaPlayerControl player =
-                mock(VideoControlView.MediaPlayerControl.class);
-        videoControlView.setMediaPlayer(player);
-
-        final View.OnClickListener listener = videoControlView.createStateControlClickListener();
-
-        when(player.isPlaying()).thenReturn(false);
-        listener.onClick(null);
-        verify(player).start();
-
-        when(player.isPlaying()).thenReturn(true);
-        listener.onClick(null);
-        verify(player).pause();
-    }
-
-    public void testCreateProgressChangeListener() {
-        final VideoControlView.MediaPlayerControl player =
-                mock(VideoControlView.MediaPlayerControl.class);
-        videoControlView.setMediaPlayer(player);
-
-        final SeekBar.OnSeekBarChangeListener listener =
-                videoControlView.createProgressChangeListener();
-
-        when(player.getDuration()).thenReturn(MINUTE_IN_MS);
-        listener.onProgressChanged(null, 500, true);
-        verify(player).seekTo(30000);
-        assertEquals("0:30", videoControlView.currentTime.getText());
-    }
-
-    public void testCreateProgressChangeListener_fromUserFalse() {
-        final VideoControlView.MediaPlayerControl player =
-                mock(VideoControlView.MediaPlayerControl.class);
-        videoControlView.setMediaPlayer(player);
-
-        final SeekBar.OnSeekBarChangeListener listener =
-                videoControlView.createProgressChangeListener();
-
-        when(player.getDuration()).thenReturn(MINUTE_IN_MS);
-        listener.onProgressChanged(null, 500, false);
-        verifyNoMoreInteractions(player);
-    }
-
-    public void testIsShowing() {
-        assertTrue(videoControlView.isShowing());
-    }
-
-    public void testUpdateProgress() {
-        final VideoControlView.MediaPlayerControl player =
-                mock(VideoControlView.MediaPlayerControl.class);
-        when(player.getCurrentPosition()).thenReturn(SECOND_IN_MS);
-        when(player.getDuration()).thenReturn(MINUTE_IN_MS);
-        when(player.getBufferPercentage()).thenReturn(50);
-        videoControlView.setMediaPlayer(player);
-
-        videoControlView.updateProgress();
-
-        assertEquals(16, videoControlView.seekBar.getProgress());
-        assertEquals(500, videoControlView.seekBar.getSecondaryProgress());
-
-        assertEquals("1:00", videoControlView.duration.getText());
-        assertEquals("0:01", videoControlView.currentTime.getText());
-    }
-
-    public void testSetDuration() {
-        videoControlView.setDuration(SECOND_IN_MS);
-        assertEquals("0:01", videoControlView.duration.getText());
-    }
-
-    public void testSetCurrentTime() {
-        videoControlView.setCurrentTime(SECOND_IN_MS);
-        assertEquals("0:01", videoControlView.currentTime.getText());
-    }
-
-    public void testSetSeekBarProgress() {
-        videoControlView.setProgress(SECOND_IN_MS, MINUTE_IN_MS, TEST_BUFFER_PROGRESS);
-        assertEquals(16, videoControlView.seekBar.getProgress());
-        assertEquals(320, videoControlView.seekBar.getSecondaryProgress());
-    }
-
-    public void testSetSeekBarProgress_zeroDuration() {
-        videoControlView.setProgress(SECOND_IN_MS, 0, TEST_BUFFER_PROGRESS);
-        assertEquals(0, videoControlView.seekBar.getProgress());
-        assertEquals(320, videoControlView.seekBar.getSecondaryProgress());
-    }
-
-    public void testSetPlayDrawable() {
-        videoControlView.stateControl = mock(ImageButton.class);
-        videoControlView.setPlayDrawable();
-
-        verify(videoControlView.stateControl).setImageResource(R.drawable.tw__video_play_btn);
-        verify(videoControlView.stateControl)
-                .setContentDescription(getContext().getString(R.string.tw__play));
-    }
-
-    public void testSetPauseDrawable() {
-        videoControlView.stateControl = mock(ImageButton.class);
-        videoControlView.setPauseDrawable();
-
-        verify(videoControlView.stateControl).setImageResource(R.drawable.tw__video_pause_btn);
-        verify(videoControlView.stateControl)
-                .setContentDescription(getContext().getString(R.string.tw__pause));
-    }
-
-    public void testSetReplayDrawable() {
-        videoControlView.stateControl = mock(ImageButton.class);
-        videoControlView.setReplayDrawable();
-
-        verify(videoControlView.stateControl).setImageResource(R.drawable.tw__video_replay_btn);
-        verify(videoControlView.stateControl)
-                .setContentDescription(getContext().getString(R.string.tw__replay));
-    }
-
-    public void testSetMediaPlayer() {
-        videoControlView.setMediaPlayer(mock(VideoControlView.MediaPlayerControl.class));
-        assertNotNull(videoControlView.player);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java
deleted file mode 100644
index 3534bb34..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricTestRunner.class)
-public class BaseTimelineTest {
-    private static final Long TEST_ID = 200L;
-
-    @Test
-    public void testDecrementMaxId_positive() {
-        final Long correctedId = BaseTimeline.decrementMaxId(TEST_ID);
-        assertEquals((Long) (TEST_ID - 1L), correctedId);
-    }
-
-    @Test
-    public void testDecrementMaxId_nullId() {
-        assertNull(BaseTimeline.decrementMaxId(null));
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java
deleted file mode 100644
index 70796263..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java
+++ /dev/null
@@ -1,277 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.annotation.SuppressLint;
-
-import com.twitter.sdk.android.core.models.HashtagEntity;
-import com.twitter.sdk.android.core.models.MentionEntity;
-import com.twitter.sdk.android.core.models.SymbolEntity;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-import com.twitter.sdk.android.core.models.TweetEntities;
-import com.twitter.sdk.android.core.models.UrlEntity;
-import com.twitter.sdk.android.core.models.User;
-import com.twitter.sdk.android.core.models.UserBuilder;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class BasicTimelineFilterTest {
-    static final Tweet TEST_TWEET_1 = new TweetBuilder()
-            .setText("Lorem Ipsum is simply dummy text of the printing and typesetting industry.")
-            .setLang("en")
-            .build();
-    static final Tweet TEST_TWEET_2 = new TweetBuilder()
-            .setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit.")
-            .setLang("en")
-            .build();
-    static final Tweet TEST_TWEET_3 = new TweetBuilder()
-            .setText("Donec sodales imperdiet nisi non ullamcorper. Maecenas in turpis ex.")
-            .setLang("en")
-            .build();
-
-    BasicTimelineFilter basicTimelineFilter;
-
-    @Before
-    @SuppressLint("NewApi")
-    public void setUp() throws Exception {
-        final List<String> keywords = Arrays.asList("dummy", "darn", "foobar");
-        final List<String> hashtags = Arrays.asList("cookies", "CookiesAreAwesome");
-        final List<String> handles = Arrays.asList("benward", "vam_si", "ericfrohnhoefer");
-        final List<String> urls = Arrays.asList("Cookiesareawesome.com", "beevil.net");
-        final FilterValues filterValues = new FilterValues(keywords, hashtags, handles, urls);
-
-        basicTimelineFilter = new BasicTimelineFilter(filterValues);
-    }
-
-    @Test
-    public void testFilter() {
-        final List<Tweet> tweets = new ArrayList<>();
-        tweets.add(TEST_TWEET_1);
-        tweets.add(TEST_TWEET_2);
-        tweets.add(TEST_TWEET_3);
-
-        final List<Tweet> filteredTweets = basicTimelineFilter.filter(tweets);
-
-        assertNotNull(filteredTweets);
-        assertEquals(2, filteredTweets.size());
-        assertEquals(TEST_TWEET_2, filteredTweets.get(0));
-        assertEquals(TEST_TWEET_3, filteredTweets.get(0));
-    }
-
-    @Test
-    public void testShouldFilterTweet_withNoMatch() {
-        assertFalse(basicTimelineFilter.shouldFilterTweet(TEST_TWEET_2));
-    }
-
-    @Test
-    public void testShouldFilterTweet_withTextMatch() {
-        assertTrue(basicTimelineFilter.shouldFilterTweet(TEST_TWEET_1));
-    }
-
-    @Test
-    public void testShouldFilterTweet_withEntityMatch() {
-        final UrlEntity entity =
-                new UrlEntity("beevil.net", "http://beevil.net", "beevil.net", 0, 0);
-        final TweetEntities entities =
-                new TweetEntities(Collections.singletonList(entity), null, null, null, null);
-        final Tweet tweet = new TweetBuilder().setText("").setEntities(entities).build();
-
-        assertTrue(basicTimelineFilter.shouldFilterTweet(tweet));
-    }
-
-    @Test
-    public void testShouldFilterTweet_withUserMatch() {
-        final User user = new UserBuilder().setScreenName("EricFrohnhoefer").build();
-        final Tweet tweet = new TweetBuilder().setText("").setUser(user).build();
-
-        assertTrue(basicTimelineFilter.shouldFilterTweet(tweet));
-    }
-
-    @Test
-    public void testContainsMatchingText_withNoMatch() {
-        assertFalse(basicTimelineFilter.containsMatchingText(TEST_TWEET_2));
-    }
-
-    @Test
-    public void testContainsMatchingText_withMatch() {
-        assertTrue(basicTimelineFilter.containsMatchingText(TEST_TWEET_1));
-    }
-
-    @Test
-    public void testContainsMatchingUrl_withNoMatch() {
-        final UrlEntity entity =
-                new UrlEntity("foobar.com", "http://foobar.com", "foobar.com", 0, 0);
-
-        assertFalse(basicTimelineFilter.containsMatchingUrl(Collections.singletonList(entity)));
-    }
-
-    @Test
-    public void testContainsMatchingUrl_withMatch() {
-        final UrlEntity entity = new UrlEntity("Cookiesareawesome.com",
-                "http://Cookiesareawesome.com", "Cookiesareawesome.com", 0, 0);
-
-        assertTrue(basicTimelineFilter.containsMatchingUrl(Collections.singletonList(entity)));
-    }
-
-    @Test
-    public void testContainsMatchingHashtag_withNoMatch() {
-        final HashtagEntity entity = new HashtagEntity("foobar", 0, 0);
-
-        assertFalse(basicTimelineFilter.containsMatchingHashtag(Collections.singletonList(entity)));
-    }
-
-    @Test
-    public void testContainsMatchingHashtag_withMatch() {
-        final HashtagEntity entity = new HashtagEntity("cookies", 0, 0);
-
-        assertTrue(basicTimelineFilter.containsMatchingHashtag(Collections.singletonList(entity)));
-    }
-
-    @Test
-    public void testContainsMatchingSymbol_withNoMatch() {
-        final SymbolEntity entity = new SymbolEntity("foobar", 0, 0);
-
-        assertFalse(basicTimelineFilter.containsMatchingSymbol(Collections.singletonList(entity)));
-    }
-
-    @Test
-    public void testContainsMatchingSymbol_withMatch() {
-        final SymbolEntity entity = new SymbolEntity("cookies", 0, 0);
-
-        assertTrue(basicTimelineFilter.containsMatchingSymbol(Collections.singletonList(entity)));
-    }
-
-    @Test
-    public void testContainsMatchingMention_withNoMatch() {
-        final MentionEntity entity =
-                new MentionEntity(0, "0", "Foo Bar", "FooBar", 0, 0);
-
-        assertFalse(basicTimelineFilter.containsMatchingMention(Collections.singletonList(entity)));
-    }
-
-    @Test
-    public void testContainsMatchingMention_withMatch() {
-        final MentionEntity entity =
-                new MentionEntity(0, "0", "Eric Frohnhoefer", "EricFrohnhoefer", 0, 0);
-
-        assertTrue(basicTimelineFilter.containsMatchingMention(Collections.singletonList(entity)));
-    }
-
-    @Test
-    public void testContainsMatchingScreenName_withNoMatch() {
-        assertFalse(basicTimelineFilter.containsMatchingScreenName("FooBar"));
-    }
-
-    @Test
-    public void testContainsMatchingScreenName_withMatch() {
-        assertTrue(basicTimelineFilter.containsMatchingScreenName("EricFrohnhoefer"));
-    }
-
-    @Test
-    public void testNormalizeHandle() {
-        String twitterHandle = "@twitter";
-        String normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
-        assertEquals("twitter", normalizedHandle);
-
-        twitterHandle = "＠twitter";
-        normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
-        assertEquals("twitter", normalizedHandle);
-    }
-
-    @Test
-    public void testNormalizeHandleWithoutAtSign() {
-        final String twitterHandle = "twiTTer";
-        final String normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
-        assertEquals("twitter", normalizedHandle);
-    }
-
-    @Test
-    public void testNormalizeHashtag() {
-        String hashtag = "#twitter";
-        String normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
-        assertEquals("twitter", normalizedHashtag);
-
-        hashtag = "＃twitter";
-        normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
-        assertEquals("twitter", normalizedHashtag);
-
-        hashtag = "$TWTR";
-        normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
-        assertEquals("TWTR", normalizedHashtag);
-    }
-
-    @Test
-    public void testNormalizeHashtagWithoutHashtag() {
-        final String hashtag = "TWTR";
-        final String normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
-        assertEquals(hashtag, normalizedHashtag);
-    }
-
-    @Test
-    public void testNormalizeUrl() {
-        String url = "twitter.com";
-        String normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("twitter.com", normalizedUrl);
-
-        url = "dev.twitter.com";
-        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("dev.twitter.com", normalizedUrl);
-
-        url = "http://twitter.com";
-        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("twitter.com", normalizedUrl);
-
-        url = "http://TwiTTer.com";
-        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("twitter.com", normalizedUrl);
-
-        url = "https://twitter.com/test";
-        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("twitter.com", normalizedUrl);
-
-        url = "транспорт.com";
-        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("xn--80a0addceeeh.com", normalizedUrl);
-
-        url = "https://транспорт.com/test";
-        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals("xn--80a0addceeeh.com", normalizedUrl);
-    }
-
-    @Test
-    public void testNormalizeUrl_withProhibitedCodePoint() {
-        final String url = "twitter\u180E.com";
-        final String normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
-        assertEquals(url, normalizedUrl);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java
deleted file mode 100644
index d6a370d8..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java
+++ /dev/null
@@ -1,283 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-import com.twitter.sdk.android.core.models.TwitterCollection;
-import com.twitter.sdk.android.core.models.User;
-import com.twitter.sdk.android.core.models.UserBuilder;
-import com.twitter.sdk.android.core.services.CollectionService;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-public class CollectionTimelineTest {
-    private static final String ILLEGAL_TWEET_UI_MESSAGE = "TweetUi instance must not be null";
-    private static final Long TEST_COLLECTION_ID = 393773266801659904L;
-    private static final Integer TEST_ITEMS_PER_REQUEST = 100;
-    private static final Integer REQUIRED_DEFAULT_ITEMS_PER_REQUEST = 30;
-    private static final String REQUIRED_IMPRESSION_SECTION = "collection";
-    private static final Long TEST_MAX_POSITION = 1111L;
-    private static final Long TEST_MIN_POSITION = 1000L;
-    private static final TwitterCollection.Metadata.Position TEST_POSITION
-            = new TwitterCollection.Metadata.Position(TEST_MAX_POSITION, TEST_MIN_POSITION);
-    private static final User TEST_USER_1 = new UserBuilder().setName("foo").setId(40L).build();
-    private static final User TEST_USER_2 = new UserBuilder().setName("bar").setId(41L).build();
-    private static final Tweet TEST_TWEET_1
-            = new TweetBuilder().setId(5858L).setUser(TEST_USER_1).build();
-    private static final Tweet TEST_TWEET_2
-            = new TweetBuilder().setId(8585L).setUser(TEST_USER_1).build();
-    private static final Tweet TEST_TWEET_QUOTE
-            = new TweetBuilder().setId(858909L).setUser(TEST_USER_1).setQuotedStatus(TEST_TWEET_2)
-            .build();
-
-    private Map<Long, Tweet> testTweetMap = new HashMap<>();
-    private Map<Long, User> testUserMap = new HashMap<>();
-    private List<TwitterCollection.TimelineItem> testItems = new ArrayList<>();
-    private List<TwitterCollection.TimelineItem> testItemsRev = new ArrayList<>();
-
-    TwitterCore twitterCore;
-    TwitterApiClient apiClient;
-    CollectionService collectionService;
-
-    @Before
-    public void setUp() throws Exception {
-        testUserMap.put(TEST_USER_1.id, TEST_USER_1);
-        testUserMap.put(TEST_USER_2.id, TEST_USER_2);
-        testTweetMap.put(TEST_TWEET_1.id, TEST_TWEET_1);
-        testTweetMap.put(TEST_TWEET_2.id, TEST_TWEET_2);
-        testTweetMap.put(TEST_TWEET_QUOTE.id, TEST_TWEET_QUOTE);
-        // testItems order Test Tweet 1, then 2
-        testItems.add(new TwitterCollection.TimelineItem(
-                new TwitterCollection.TimelineItem.TweetItem(5858L)));
-        testItems.add(new TwitterCollection.TimelineItem(
-                new TwitterCollection.TimelineItem.TweetItem(8585L)));
-        testItems.add(new TwitterCollection.TimelineItem(
-                new TwitterCollection.TimelineItem.TweetItem(858909L)));
-        // testItemsRev orders Test Tweet 2, then 1
-        testItemsRev.add(new TwitterCollection.TimelineItem(
-                new TwitterCollection.TimelineItem.TweetItem(858909L)));
-        testItemsRev.add(new TwitterCollection.TimelineItem(
-                new TwitterCollection.TimelineItem.TweetItem(8585L)));
-        testItemsRev.add(new TwitterCollection.TimelineItem(
-                new TwitterCollection.TimelineItem.TweetItem(5858L)));
-
-        twitterCore = mock(TwitterCore.class);
-        apiClient = mock(TwitterApiClient.class);
-        collectionService = mock(CollectionService.class, new MockCallAnswer());
-
-        when(apiClient.getCollectionService()).thenReturn(collectionService);
-        when(twitterCore.getApiClient()).thenReturn(apiClient);
-    }
-
-    @Test
-    public void testConstructor() {
-        final CollectionTimeline timeline = new CollectionTimeline(twitterCore, TEST_COLLECTION_ID,
-                TEST_ITEMS_PER_REQUEST);
-        assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
-                timeline.collectionIdentifier);
-    }
-
-    @Test
-    public void testNext_createsCorrectRequest() {
-        final CollectionTimeline timeline = spy(new CollectionTimeline(twitterCore,
-                TEST_COLLECTION_ID, TEST_ITEMS_PER_REQUEST));
-        timeline.next(TEST_MIN_POSITION, mock(Callback.class));
-        verify(timeline).createCollectionRequest(eq(TEST_MIN_POSITION), isNull(Long.class));
-    }
-
-    @Test
-    public void testPrevious_createsCorrectRequest() {
-        final CollectionTimeline timeline = spy(new CollectionTimeline(twitterCore,
-                TEST_COLLECTION_ID, TEST_ITEMS_PER_REQUEST));
-        timeline.next(TEST_MAX_POSITION, mock(Callback.class));
-        verify(timeline).createCollectionRequest(eq(TEST_MAX_POSITION), isNull(Long.class));
-    }
-
-    @Test
-    public void testCreateCollectionRequest() {
-        // build a timeline with test params
-        final CollectionTimeline timeline = new CollectionTimeline(twitterCore,
-                TEST_COLLECTION_ID, TEST_ITEMS_PER_REQUEST);
-
-        // create a request directly
-        timeline.createCollectionRequest(TEST_MIN_POSITION, TEST_MAX_POSITION);
-
-        // assert collection call is made with the correct arguments
-        verify(twitterCore.getApiClient().getCollectionService()).collection(
-                eq(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID),
-                eq(TEST_ITEMS_PER_REQUEST), eq(TEST_MAX_POSITION), eq(TEST_MIN_POSITION));
-    }
-
-    @Test
-    public void testGetOrderedTweets() {
-        final TwitterCollection.Content contents
-                = new TwitterCollection.Content(testTweetMap, testUserMap);
-        final TwitterCollection.Metadata metadata
-                = new TwitterCollection.Metadata("", TEST_POSITION, testItems);
-        final List<Tweet> tweets = CollectionTimeline.getOrderedTweets(
-                new TwitterCollection(contents, metadata));
-        assertEquals(3, tweets.size());
-        assertEquals(TEST_TWEET_1, tweets.get(0));
-        assertEquals(TEST_TWEET_2, tweets.get(1));
-        assertEquals(TEST_TWEET_QUOTE, tweets.get(2));
-    }
-
-    @Test
-    public void testGetOrderedTweets_respectsTimelineItemsOrder() {
-        final TwitterCollection.Content contents = new TwitterCollection.Content(testTweetMap,
-                testUserMap);
-        final TwitterCollection.Metadata metadata = new TwitterCollection.Metadata("",
-                TEST_POSITION, testItemsRev);
-        final List<Tweet> tweets = CollectionTimeline.getOrderedTweets(
-                new TwitterCollection(contents, metadata));
-        assertEquals(3, tweets.size());
-        assertEquals(TEST_TWEET_QUOTE, tweets.get(0));
-        assertEquals(TEST_TWEET_2, tweets.get(1));
-        assertEquals(TEST_TWEET_1, tweets.get(2));
-    }
-
-    @Test
-    public void testGetOrderedTweets_handlesNull() {
-        TwitterCollection collection = new TwitterCollection(
-                new TwitterCollection.Content(null, testUserMap),
-                new TwitterCollection.Metadata("", TEST_POSITION, testItems));
-        List<Tweet> tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
-        collection = new TwitterCollection(new TwitterCollection.Content(testTweetMap, null),
-                new TwitterCollection.Metadata("", TEST_POSITION, testItems));
-        tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
-        collection = new TwitterCollection(new TwitterCollection.Content(testTweetMap, testUserMap),
-                new TwitterCollection.Metadata("", null, testItems));
-        tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
-        collection = new TwitterCollection(new TwitterCollection.Content(testTweetMap, testUserMap),
-                new TwitterCollection.Metadata("", TEST_POSITION, null));
-        tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
-        collection = new TwitterCollection(new TwitterCollection.Content(testTweetMap, testUserMap),
-                null);
-        tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
-        collection = new TwitterCollection(null, new TwitterCollection.Metadata("", TEST_POSITION,
-                testItems));
-        tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
-        collection = new TwitterCollection(null, null);
-        tweets = CollectionTimeline.getOrderedTweets(collection);
-        assertTrue(tweets.isEmpty());
-        tweets = CollectionTimeline.getOrderedTweets(null);
-        assertTrue(tweets.isEmpty());
-    }
-
-    @Test
-    public void testGetTimelineCursor() {
-        final TwitterCollection.Content contents
-                = new TwitterCollection.Content(testTweetMap, testUserMap);
-        final TwitterCollection.Metadata metadata
-                = new TwitterCollection.Metadata("", TEST_POSITION, testItems);
-        final TimelineCursor cursor = CollectionTimeline.getTimelineCursor(
-                new TwitterCollection(contents, metadata));
-        assertEquals(TEST_MAX_POSITION, cursor.maxPosition);
-        assertEquals(TEST_MIN_POSITION, cursor.minPosition);
-    }
-
-    @Test
-    public void testGetTimelineCursor_handlesNull() {
-        TwitterCollection collection = new TwitterCollection(new TwitterCollection.Content(null,
-                testUserMap), new TwitterCollection.Metadata("", null, testItems));
-        TimelineCursor timelineCursor = CollectionTimeline.getTimelineCursor(collection);
-        assertNull(timelineCursor);
-        collection = new TwitterCollection(new TwitterCollection.Content(null, testUserMap), null);
-        timelineCursor = CollectionTimeline.getTimelineCursor(collection);
-        assertNull(timelineCursor);
-        timelineCursor = CollectionTimeline.getTimelineCursor(null);
-        assertNull(timelineCursor);
-    }
-
-    /* Builder */
-    @Test
-    public void testBuilder() {
-        final CollectionTimeline timeline = new CollectionTimeline.Builder(twitterCore)
-                .id(TEST_COLLECTION_ID)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .build();
-        assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
-                timeline.collectionIdentifier);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-    }
-
-    @Test
-    public void testBuilder_defaults() {
-        final CollectionTimeline timeline = new CollectionTimeline.Builder(twitterCore)
-                .id(TEST_COLLECTION_ID)
-                .build();
-        assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
-                timeline.collectionIdentifier);
-        assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-    }
-
-    @Test
-    public void testBuilder_id() {
-        final CollectionTimeline timeline = new CollectionTimeline.Builder(twitterCore)
-                .id(TEST_COLLECTION_ID)
-                .build();
-        assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
-                timeline.collectionIdentifier);
-    }
-
-    @Test
-    public void testBuilder_idNull() {
-        try {
-            new CollectionTimeline.Builder(twitterCore).id(null).build();
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertEquals("collection id must not be null", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testBuilder_maxItemsPerRequest() {
-        final CollectionTimeline timeline = new CollectionTimeline.Builder(twitterCore)
-                .id(TEST_COLLECTION_ID)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .build();
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java
deleted file mode 100644
index aac69f58..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ColorUtilsTest.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.graphics.Color;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class ColorUtilsTest {
-
-    @Test
-    public void testIsLightColor_blue() {
-        assertFalse(ColorUtils.isLightColor(Color.BLUE));
-    }
-
-    @Test
-    public void testIsLightColor_black() {
-        assertFalse(ColorUtils.isLightColor(Color.BLACK));
-    }
-
-    @Test
-    public void testIsLightColor_white() {
-        assertTrue(ColorUtils.isLightColor(Color.WHITE));
-    }
-
-    @Test
-    public void testCalculateOpacityTransform_zeroOpacity() {
-        assertEquals(Color.WHITE, ColorUtils.calculateOpacityTransform(0, Color.BLUE, Color.WHITE));
-    }
-
-    @Test
-    public void testCalculateOpacityTransform_fullOpacity() {
-        assertEquals(Color.BLUE, ColorUtils.calculateOpacityTransform(1, Color.BLUE, Color.WHITE));
-    }
-
-    @Test
-    public void testCalculateOpacityTransform_returnsFullOpacity() {
-        final int color = ColorUtils.calculateOpacityTransform(0, Color.BLUE, Color.WHITE);
-        assertEquals(0xFF000000, color & 0xFF000000);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
deleted file mode 100644
index 367c5378..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-public class FixedTweetTimelineTest {
-    private static final Long ANY_ID = 1234L;
-    private List<Tweet> fixedTweets = new ArrayList<>();
-
-    @Before
-    public void setUp() throws Exception {
-        fixedTweets.add(TestFixtures.TEST_TWEET);
-        fixedTweets.add(TestFixtures.TEST_RETWEET);
-        fixedTweets.add(TestFixtures.TEST_PHOTO_TWEET);
-    }
-
-    @Test
-    public void testConstructor() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline(fixedTweets);
-        assertNotNull(timeline.tweets);
-        assertEquals(fixedTweets, timeline.tweets);
-    }
-
-    @Test
-    public void testConstructor_nullTweets() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline(null);
-        assertTrue(timeline.tweets.isEmpty());
-    }
-
-    @Test
-    public void testNext_succeedsWithFixedTweets() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline(fixedTweets);
-        timeline.next(ANY_ID, new Callback<TimelineResult<Tweet>>() {
-            @Override
-            public void success(Result<TimelineResult<Tweet>> result) {
-                assertEquals(fixedTweets, result.data.items);
-                assertEquals((Long) TestFixtures.TEST_PHOTO_TWEET.getId(),
-                        result.data.timelineCursor.minPosition);
-                assertEquals((Long) TestFixtures.TEST_TWEET.getId(),
-                        result.data.timelineCursor.maxPosition);
-                assertNull(result.response);
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                fail("Expected FixedTweetTimeline next to always succeed.");
-            }
-        });
-    }
-
-    @Test
-    public void testNext_succeedsWithEmptyTweets() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline(fixedTweets);
-        timeline.previous(ANY_ID, new Callback<TimelineResult<Tweet>>() {
-            @Override
-            public void success(Result<TimelineResult<Tweet>> result) {
-                assertTrue(result.data.items.isEmpty());
-                assertNull(result.data.timelineCursor.maxPosition);
-                assertNull(result.data.timelineCursor.minPosition);
-                assertNull(result.response);
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                fail("Expected FixedTweetTimeline previous to always succeed.");
-            }
-        });
-    }
-
-    /* Builder */
-    @Test
-    public void testBuilder() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline.Builder()
-                .setTweets(fixedTweets).build();
-        assertEquals(fixedTweets, timeline.tweets);
-    }
-
-    @Test
-    public void testBuilder_empty() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline.Builder().build();
-        assertTrue(timeline.tweets.isEmpty());
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java
deleted file mode 100644
index 39b571db..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.tweetui.internal.GalleryImageView;
-import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.Collections;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class GalleryAdapterTest {
-    @Mock
-    SwipeToDismissTouchListener.Callback callback;
-    @Mock
-    MediaEntity entity;
-    @Mock
-    View view;
-    @Mock
-    ViewGroup container;
-    GalleryAdapter subject;
-
-    @Before
-    public void setUp() {
-        MockitoAnnotations.initMocks(this);
-
-        subject = new GalleryAdapter(RuntimeEnvironment.application, callback);
-    }
-
-    @Test
-    public void testGetCount_withZeroItems() {
-        assertEquals(0, subject.getCount());
-    }
-
-    @Test
-    public void testGetCount_withOneItems() {
-        subject.addAll(Collections.singletonList(entity));
-        assertEquals(1, subject.getCount());
-    }
-
-    @Test
-    public void testIsViewFromObject_withSameObject() {
-        assertTrue(subject.isViewFromObject(view, view));
-    }
-
-    @Test
-    public void testIsViewFromObject_withDifferentObject() {
-        assertFalse(subject.isViewFromObject(view, entity));
-    }
-
-    @Test
-    public void testInstantiateItem() {
-        subject.addAll(Collections.singletonList(entity));
-        final GalleryImageView result = (GalleryImageView) subject.instantiateItem(container, 0);
-
-        assertNotNull(result);
-        verify(container).addView(result);
-    }
-
-    @Test
-    public void testDestroyItem() {
-        subject.destroyItem(container, 0, view);
-
-        verify(container).removeView(view);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java
deleted file mode 100644
index 31bd6232..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java
+++ /dev/null
@@ -1,171 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiException;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.internal.TwitterApiConstants;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class LikeTweetActionTest {
-    TweetUi mockTweetUi;
-    TweetRepository mockTweetRepository;
-    Callback<Tweet> mockCallback;
-
-    @Before
-    public void setUp() throws Exception {
-        mockTweetUi = mock(TweetUi.class);
-        mockTweetRepository = mock(TweetRepository.class);
-        when(mockTweetUi.getTweetRepository()).thenReturn(mockTweetRepository);
-        mockCallback = mock(Callback.class);
-    }
-
-    @Test
-    public void testOnClick_performFavorite() {
-        final ArgumentCaptor<LikeTweetAction.LikeCallback> favoriteCbCaptor
-                = ArgumentCaptor.forClass(LikeTweetAction.LikeCallback.class);
-        final LikeTweetAction likeAction = new LikeTweetAction(TestFixtures.TEST_TWEET,
-                mockTweetUi, mockCallback);
-        final ToggleImageButton mockToggleButton = mock(ToggleImageButton.class);
-        // assert that click when tweet is unfavorited
-        // - performs a like action which favorites the correct tweet id
-        // - passes FavoriteCallback with toggle button and tweet references
-        likeAction.onClick(mockToggleButton);
-        verify(mockTweetRepository).favorite(eq(TestFixtures.TEST_TWEET.id),
-                favoriteCbCaptor.capture());
-        assertEquals(mockToggleButton, favoriteCbCaptor.getValue().button);
-        assertFalse(favoriteCbCaptor.getValue().tweet.favorited);
-    }
-
-    @Test
-    public void testOnClick_performUnfavorite() {
-        final ArgumentCaptor<LikeTweetAction.LikeCallback> favoriteCbCaptor
-                = ArgumentCaptor.forClass(LikeTweetAction.LikeCallback.class);
-        final LikeTweetAction favoriteAction = new LikeTweetAction(
-                TestFixtures.TEST_FAVORITED_TWEET, mockTweetUi, mockCallback);
-        final ToggleImageButton mockToggleButton = mock(ToggleImageButton.class);
-        // assert that click when tweet is favorited
-        // - performs an unlike action which unfavorites the correct tweet id
-        // - passes FavoriteCallback with toggle button and tweet references
-        favoriteAction.onClick(mockToggleButton);
-        verify(mockTweetRepository).unfavorite(eq(TestFixtures.TEST_TWEET.id),
-                favoriteCbCaptor.capture());
-        assertEquals(mockToggleButton, favoriteCbCaptor.getValue().button);
-        assertTrue(favoriteCbCaptor.getValue().tweet.favorited);
-    }
-
-    @Test
-    public void testFavoriteCallback_successCallsCallback() {
-        final ToggleImageButton mockToggleButton = mock(ToggleImageButton.class);
-        final Tweet unfavoritedTweet = TestFixtures.TEST_TWEET;
-        final LikeTweetAction.LikeCallback callback
-                = new LikeTweetAction.LikeCallback(mockToggleButton, unfavoritedTweet,
-                mockCallback);
-        final Result<Tweet> successResult = new Result<>(TestFixtures.TEST_FAVORITED_TWEET, null);
-        callback.success(successResult);
-        verify(mockCallback).success(successResult);
-    }
-
-    @Test
-    public void testFavoriteCallback_failureAlreadyFavorited() {
-        final ToggleImageButton mockToggleButton = mock(ToggleImageButton.class);
-        // locally unfavorited, but on server the tweet is favorited
-        final Tweet tweet = TestFixtures.TEST_TWEET;
-        final LikeTweetAction.LikeCallback callback
-                = new LikeTweetAction.LikeCallback(mockToggleButton, tweet,
-                mockCallback);
-        final TwitterApiException alreadyFavoritedException = mock(TwitterApiException.class);
-        when(alreadyFavoritedException.getErrorCode()).thenReturn(
-                TwitterApiConstants.Errors.ALREADY_FAVORITED);
-        // assert that
-        // - the failure is treated as a cb success
-        // - success result Tweet is marked as favorited
-        callback.failure(alreadyFavoritedException);
-        final ArgumentCaptor<Result<Tweet>> resultCaptor
-                = ArgumentCaptor.forClass(Result.class);
-        verify(mockCallback).success(resultCaptor.capture());
-        assertEquals(tweet.getId(), resultCaptor.getValue().data.getId());
-        assertTrue(resultCaptor.getValue().data.favorited);
-    }
-
-    @Test
-    public void testFavoriteCallback_failureAlreadyUnfavorited() {
-        final ToggleImageButton mockToggleButton = mock(ToggleImageButton.class);
-        // locally favorited, but on server the tweet is unfavorited
-        final Tweet tweet = TestFixtures.TEST_FAVORITED_TWEET;
-        final LikeTweetAction.LikeCallback callback
-                = new LikeTweetAction.LikeCallback(mockToggleButton, tweet,
-                mockCallback);
-        final TwitterApiException alreadyUnfavoritedException = mock(TwitterApiException.class);
-        when(alreadyUnfavoritedException.getErrorCode()).thenReturn(
-                TwitterApiConstants.Errors.ALREADY_UNFAVORITED);
-        // assert that
-        // - the failure is treated as a cb success
-        // - success result Tweet is marked as unfavorited
-        callback.failure(alreadyUnfavoritedException);
-        final ArgumentCaptor<Result<Tweet>> resultCaptor
-                = ArgumentCaptor.forClass(Result.class);
-        verify(mockCallback).success(resultCaptor.capture());
-        assertEquals(tweet.getId(), resultCaptor.getValue().data.getId());
-        assertFalse(resultCaptor.getValue().data.favorited);
-    }
-
-    @Test
-    public void testFavoriteCallback_failureOtherTwitterApiException() {
-        final ToggleImageButton mockToggleButton = mock(ToggleImageButton.class);
-        final Tweet favoritedTweet = TestFixtures.TEST_FAVORITED_TWEET;
-        final Callback<Tweet> mockCallback = mock(Callback.class);
-        final LikeTweetAction.LikeCallback callback
-                = new LikeTweetAction.LikeCallback(mockToggleButton, favoritedTweet,
-                mockCallback);
-        final TwitterApiException twitterApiException = mock(TwitterApiException.class);
-        callback.failure(twitterApiException);
-        verify(mockToggleButton).setToggledOn(favoritedTweet.favorited);
-        verify(mockCallback).failure(twitterApiException);
-    }
-
-    @Test
-    public void testFavoriteCallback_failureOtherTwitterException() {
-        final ToggleImageButton mockToggleButton = mock(ToggleImageButton.class);
-        final Tweet unfavoritedTweet = TestFixtures.TEST_TWEET;
-        final Callback<Tweet> mockCallback = mock(Callback.class);
-        final LikeTweetAction.LikeCallback callback
-                = new LikeTweetAction.LikeCallback(mockToggleButton, unfavoritedTweet,
-                mockCallback);
-        final TwitterException twitterException = mock(TwitterException.class);
-        callback.failure(twitterException);
-        verify(mockToggleButton).setToggledOn(unfavoritedTweet.favorited);
-        verify(mockCallback).failure(twitterException);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LoggingCallbackTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LoggingCallbackTest.java
deleted file mode 100644
index 11db8102..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LoggingCallbackTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Logger;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class LoggingCallbackTest {
-    static final String TEST_MESSAGE = "TEST_MESSAGE";
-
-    @Test
-    public void testFailure_callsCb() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final LoggingCallback<Tweet> cb
-                = new TestLoggingCallback<>(developerCallback, mock(Logger.class));
-        cb.failure(mock(TwitterException.class));
-        verify(developerCallback).failure(any(TwitterException.class));
-    }
-
-    @Test
-    public void testFailure_handlesNullCb() {
-        final Logger logger = mock(Logger.class);
-        final LoggingCallback<Tweet> cb = new TestLoggingCallback<>(null, logger);
-        try {
-            cb.failure(new TwitterException(TEST_MESSAGE));
-            verify(logger).e(any(String.class), any(String.class), any(Throwable.class));
-        } catch (NullPointerException e) {
-            fail("Should have handled null callback");
-        }
-    }
-
-    @Test
-    public void testFailure_logsFailure() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final Logger logger = mock(Logger.class);
-        final LoggingCallback<Tweet> cb = new TestLoggingCallback<>(developerCallback, logger);
-        cb.failure(new TwitterException(TEST_MESSAGE));
-        verify(logger).e(any(String.class), any(String.class), any(Throwable.class));
-    }
-
-    public class TestLoggingCallback<T> extends LoggingCallback<T> {
-
-        public TestLoggingCallback(Callback<T> cb, Logger logger) {
-            super(cb, logger);
-        }
-
-        @Override
-        public void success(Result<T> result) {
-            // intentionally blank, implements abstract success method
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/MockCallAnswer.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/MockCallAnswer.java
deleted file mode 100644
index 2ee9f482..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/MockCallAnswer.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import org.mockito.Mockito;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-
-import retrofit2.Call;
-
-import static org.mockito.Mockito.mock;
-
-class MockCallAnswer implements Answer<Object> {
-    @Override
-    public Object answer(InvocationOnMock invocation) throws Throwable {
-        if (invocation.getMethod().getReturnType().equals(Call.class)) {
-            return mock(Call.class);
-        } else {
-            return Mockito.RETURNS_DEFAULTS.answer(invocation);
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java
deleted file mode 100644
index 0abcf7bd..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java
+++ /dev/null
@@ -1,240 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.media.MediaPlayer;
-import android.net.Uri;
-import android.view.View;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
-import com.twitter.sdk.android.tweetui.internal.VideoControlView;
-import com.twitter.sdk.android.tweetui.internal.VideoView;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doNothing;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class PlayerControllerTest {
-    private static final String TEST_CONTENT_URL = "https://example.com";
-    private static final String TEST_CALL_TO_ACTION_URL = "https://example.com";
-    private static final String TEST_CALL_TO_ACTION_TEXT = "Open in";
-    private static final int TEST_SEEK_POSITION = 1000;
-    private static final Uri TEST_URI = Uri.parse(TEST_CONTENT_URL);
-
-    @Mock
-    VideoView videoView;
-    @Mock
-    VideoControlView videoControlView;
-    @Mock
-    ProgressBar videoProgressView;
-    @Mock
-    TextView callToActionView;
-    @Mock
-    View rootView;
-    @Mock
-    SwipeToDismissTouchListener.Callback callback;
-    @Captor
-    private ArgumentCaptor<View.OnClickListener> clickListenerCaptor;
-    @Captor
-    private ArgumentCaptor<MediaPlayer.OnPreparedListener> prepareListenerCaptor;
-    @Captor
-    private ArgumentCaptor<MediaPlayer.OnInfoListener> infoListenerCaptor;
-
-    PlayerController subject;
-    PlayerActivity.PlayerItem playerItem;
-
-    @Before
-    public void setUp() {
-        MockitoAnnotations.initMocks(this);
-        when(videoView.getContext()).thenReturn(RuntimeEnvironment.application);
-        subject = spy(new PlayerController(rootView, videoView, videoControlView,
-                videoProgressView, callToActionView, callback));
-        playerItem = new PlayerActivity.PlayerItem(TEST_CONTENT_URL, false, true, null, null);
-    }
-
-    @Test
-    public void testPrepare() {
-        doNothing().when(subject).setUpMediaControl();
-        subject.prepare(playerItem);
-
-        verify(subject).setUpMediaControl(false, true);
-        verify(videoView).setOnTouchListener(any(View.OnTouchListener.class));
-        verify(videoView).setVideoURI(TEST_URI, false);
-        verify(videoView).requestFocus();
-        verify(videoView).setOnPreparedListener(any(MediaPlayer.OnPreparedListener.class));
-        verify(videoView).setOnInfoListener(any(MediaPlayer.OnInfoListener.class));
-    }
-
-    @Test
-    public void testPrepare_verifyOnPreparedListener() {
-        doNothing().when(subject).setUpMediaControl();
-        subject.prepare(playerItem);
-
-        verify(subject).setUpMediaControl(false, true);
-        verify(videoView).setVideoURI(TEST_URI, false);
-        verify(videoView).requestFocus();
-        verify(videoView).setOnPreparedListener(prepareListenerCaptor.capture());
-        verify(videoView).setOnInfoListener(any(MediaPlayer.OnInfoListener.class));
-        verifyOnPreparedListener(prepareListenerCaptor.getValue());
-    }
-
-    @Test
-    public void testPrepare_setUpCallToActionListener() {
-        doNothing().when(subject).setUpMediaControl();
-
-        final PlayerActivity.PlayerItem itemWithCallToActionUrl =
-                new PlayerActivity.PlayerItem(TEST_CONTENT_URL, false, false,
-                        TEST_CALL_TO_ACTION_TEXT, TEST_CALL_TO_ACTION_URL);
-        subject.prepare(itemWithCallToActionUrl);
-
-        verify(subject).setUpMediaControl(false, false);
-        verify(videoView).setVideoURI(TEST_URI, false);
-        verify(videoView).requestFocus();
-        verify(videoView).setOnPreparedListener(any(MediaPlayer.OnPreparedListener.class));
-        verify(videoView).setOnInfoListener(any(MediaPlayer.OnInfoListener.class));
-
-        verify(callToActionView).setVisibility(View.VISIBLE);
-        verify(callToActionView).setText(TEST_CALL_TO_ACTION_TEXT);
-        verify(callToActionView).setOnClickListener(any(View.OnClickListener.class));
-        verify(rootView).setOnClickListener(any(View.OnClickListener.class));
-    }
-
-    private void verifyOnPreparedListener(MediaPlayer.OnPreparedListener listener) {
-        listener.onPrepared(null);
-        verify(videoProgressView).setVisibility(View.GONE);
-    }
-
-    @Test
-    public void testPrepare_verifyOnInfoListener() {
-        doNothing().when(subject).setUpMediaControl();
-        subject.prepare(playerItem);
-
-        verify(subject).setUpMediaControl(false, true);
-        verify(videoView).setVideoURI(TEST_URI, false);
-        verify(videoView).requestFocus();
-        verify(videoView).setOnPreparedListener(any(MediaPlayer.OnPreparedListener.class));
-        verify(videoView).setOnInfoListener(infoListenerCaptor.capture());
-        verifyOnInfoListener(infoListenerCaptor.getValue());
-    }
-
-    private void verifyOnInfoListener(MediaPlayer.OnInfoListener listener) {
-        listener.onInfo(null, MediaPlayer.MEDIA_INFO_BUFFERING_START, 0);
-        verify(videoProgressView).setVisibility(View.VISIBLE);
-        listener.onInfo(null, MediaPlayer.MEDIA_INFO_BUFFERING_END, 0);
-        verify(videoProgressView).setVisibility(View.GONE);
-    }
-
-    @Test
-    public void testPrepare_withNullEntity() {
-        doNothing().when(subject).setUpMediaControl();
-        subject.prepare(null);
-    }
-
-    @Test
-    public void testSetUpMediaControl_withLooping() {
-        subject.setUpMediaControl(true, false);
-
-        verify(subject).setUpLoopControl();
-    }
-
-    @Test
-    public void testSetUpMediaControl_withLoopingAndControls() {
-        subject.setUpMediaControl(true, true);
-
-        verify(subject).setUpMediaControl();
-    }
-
-    @Test
-    public void testSetUpMediaControl_withOutLooping() {
-        doNothing().when(subject).setUpMediaControl();
-        subject.setUpMediaControl(false, true);
-
-        verify(subject).setUpMediaControl();
-    }
-
-    @Test
-    public void testSetUpLoopControl() {
-        subject.setUpLoopControl();
-
-        verify(videoView).setOnClickListener(clickListenerCaptor.capture());
-        final View.OnClickListener listener = clickListenerCaptor.getValue();
-
-        when(videoView.isPlaying()).thenReturn(false);
-        listener.onClick(null);
-        verify(videoView).start();
-
-        when(videoView.isPlaying()).thenReturn(true);
-        listener.onClick(null);
-        verify(videoView).pause();
-    }
-
-    @Test
-    public void testOnDestroy() {
-        subject.onDestroy();
-
-        verify(videoView).stopPlayback();
-    }
-
-    @Test
-    public void testOnPause() {
-        when(videoView.getCurrentPosition()).thenReturn(TEST_SEEK_POSITION);
-        when(videoView.isPlaying()).thenReturn(true);
-
-        subject.onPause();
-
-        verify(videoView).getCurrentPosition();
-        verify(videoView).isPlaying();
-        assertEquals(true, subject.isPlaying);
-        assertEquals(TEST_SEEK_POSITION, subject.seekPosition);
-    }
-
-    @Test
-    public void testOnResume() {
-        subject.isPlaying = true;
-        subject.seekPosition = TEST_SEEK_POSITION;
-        subject.onResume();
-
-        verify(videoView).start();
-    }
-
-    @Test
-    public void testOnResume_withSeeekPosition() {
-        subject.isPlaying = true;
-        subject.seekPosition = TEST_SEEK_POSITION;
-        subject.onResume();
-
-        verify(videoView).seekTo(TEST_SEEK_POSITION);
-        verify(videoView).start();
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ReplaceTweetCallbackTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ReplaceTweetCallbackTest.java
deleted file mode 100644
index 2381cd97..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ReplaceTweetCallbackTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class ReplaceTweetCallbackTest {
-    TimelineDelegate<Tweet> mockTimelineDelegate;
-
-    @Before
-    public void setUp() throws Exception {
-        mockTimelineDelegate = mock(TimelineDelegate.class);
-    }
-
-    @Test
-    public void testSuccess() {
-        final Callback<Tweet> cb = mock(Callback.class);
-        final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                = new TweetTimelineListAdapter.ReplaceTweetCallback(mockTimelineDelegate, cb);
-        final Result<Tweet> successResult = new Result<>(TestFixtures.TEST_TWEET, null);
-        replaceCallback.success(successResult);
-        verify(mockTimelineDelegate).setItemById(TestFixtures.TEST_TWEET);
-        verify(cb).success(successResult);
-    }
-
-    @Test
-    public void testSuccess_handlesNullCallback() {
-        final Callback<Tweet> cb = mock(Callback.class);
-        final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                = new TweetTimelineListAdapter.ReplaceTweetCallback(mockTimelineDelegate, null);
-        final Result<Tweet> successResult = new Result<>(TestFixtures.TEST_TWEET, null);
-        try {
-            replaceCallback.success(successResult);
-        } catch (NullPointerException e) {
-            fail("Should have handled null callback");
-        }
-        verify(mockTimelineDelegate).setItemById(TestFixtures.TEST_TWEET);
-    }
-
-    @Test
-    public void testFailure() {
-        final Callback<Tweet> cb = mock(Callback.class);
-        final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                = new TweetTimelineListAdapter.ReplaceTweetCallback(mockTimelineDelegate, cb);
-        final TwitterException exception = mock(TwitterException.class);
-        replaceCallback.failure(exception);
-        verify(cb).failure(exception);
-    }
-
-    @Test
-    public void testFailure_handlesNullCallback() {
-        final Callback<Tweet> cb = mock(Callback.class);
-        final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
-                = new TweetTimelineListAdapter.ReplaceTweetCallback(mockTimelineDelegate, null);
-        final TwitterException exception = mock(TwitterException.class);
-        try {
-            replaceCallback.failure(exception);
-        } catch (NullPointerException e) {
-            fail("Should have handled null callback");
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ResetTweetCallbackTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ResetTweetCallbackTest.java
deleted file mode 100644
index b9d9bf7d..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ResetTweetCallbackTest.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class ResetTweetCallbackTest {
-
-    BaseTweetView mockTweetView;
-    TweetRepository mockTweetRepository;
-
-    @Before
-    public void setUp() throws Exception {
-        mockTweetRepository = mock(TweetRepository.class);
-        mockTweetView = mock(BaseTweetView.class);
-    }
-
-    @Test
-    public void testSuccess() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final ResetTweetCallback resetCallback = new ResetTweetCallback(mockTweetView,
-                mockTweetRepository, developerCallback);
-        final Result<Tweet> successResult = new Result<>(TestFixtures.TEST_TWEET, null);
-        resetCallback.success(successResult);
-        verify(mockTweetRepository).updateCache(TestFixtures.TEST_TWEET);
-        verify(mockTweetView).setTweet(TestFixtures.TEST_TWEET);
-        verify(developerCallback).success(successResult);
-    }
-
-    @Test
-    public void testSuccess_handlesNullCallback() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final ResetTweetCallback resetCallback = new ResetTweetCallback(mockTweetView,
-                mockTweetRepository, null);
-        final Result<Tweet> successResult = new Result<>(TestFixtures.TEST_TWEET, null);
-        try {
-            resetCallback.success(successResult);
-        } catch (NullPointerException e) {
-            fail("Should have handled null callback");
-        }
-        verify(mockTweetRepository).updateCache(TestFixtures.TEST_TWEET);
-        verify(mockTweetView).setTweet(TestFixtures.TEST_TWEET);
-    }
-
-    @Test
-    public void testFailure() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final ResetTweetCallback resetCallback = new ResetTweetCallback(mockTweetView,
-                mockTweetRepository, developerCallback);
-        final TwitterException exception = mock(TwitterException.class);
-        resetCallback.failure(exception);
-        verify(developerCallback).failure(exception);
-    }
-
-    @Test
-    public void testFailure_handlesNullCallback() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final ResetTweetCallback resetCallback = new ResetTweetCallback(mockTweetView,
-                mockTweetRepository, null);
-        final TwitterException exception = mock(TwitterException.class);
-        try {
-            resetCallback.failure(exception);
-        } catch (NullPointerException e) {
-            fail("Should have handled null callback");
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
deleted file mode 100644
index bf35be65..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
+++ /dev/null
@@ -1,229 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.services.SearchService;
-import com.twitter.sdk.android.core.services.params.Geocode;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.isNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-public class SearchTimelineTest {
-    private static final String TEST_QUERY = "twitterflock";
-    private static final Geocode TEST_GEOCODE =
-            new Geocode(37.7767902, -122.4164055, 1, Geocode.Distance.MILES);
-    private static final String TEST_FILTER_QUERY = "from:twitter";
-    private static final String TEST_RESULT_TYPE = "popular";
-    private static final String TEST_LANG = "en";
-    private static final String TEST_UNTIL_DATE = "2012-08-20";
-    private static final Date TEST_UNTIL =
-            new GregorianCalendar(2012, Calendar.AUGUST, 20).getTime();
-    private static final Integer REQUIRED_DEFAULT_ITEMS_PER_REQUEST = 30;
-    private static final Integer TEST_ITEMS_PER_REQUEST = 100;
-    private static final Long TEST_SINCE_ID = 1000L;
-    private static final Long TEST_MAX_ID = 1111L;
-    private static final String REQUIRED_IMPRESSION_SECTION = "search";
-
-    TwitterCore twitterCore;
-    TwitterApiClient apiClient;
-    SearchService searchService;
-
-    @Before
-    public void setUp() {
-        twitterCore = mock(TwitterCore.class);
-        apiClient = mock(TwitterApiClient.class);
-        searchService = mock(SearchService.class, new MockCallAnswer());
-
-        when(apiClient.getSearchService()).thenReturn(searchService);
-        when(twitterCore.getApiClient()).thenReturn(apiClient);
-    }
-
-    @Test
-    public void testConstructor() {
-        final SearchTimeline timeline = new SearchTimeline(twitterCore, TEST_QUERY, TEST_GEOCODE,
-                TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST, TEST_UNTIL_DATE);
-        assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
-        assertEquals(TEST_LANG, timeline.languageCode);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertEquals(TEST_UNTIL_DATE, timeline.untilDate);
-    }
-
-    @Test
-    // most api arguments should default to Null to allow the backend to determine default behavior
-    public void testConstructor_defaults() {
-        final SearchTimeline timeline = new SearchTimeline(twitterCore, null, null, null, null,
-                null, null);
-        assertNull(timeline.query);
-        assertNull(timeline.languageCode);
-        assertNull(timeline.maxItemsPerRequest);
-        assertNull(timeline.untilDate);
-    }
-
-    @Test
-    // FILTER_RETWEETS modifier should be added to the end of the non-null search queries
-    public void testFilterRetweets() {
-        final SearchTimeline timeline = new SearchTimeline(twitterCore, TEST_QUERY, null, null,
-                null, null, null);
-        assertTrue(timeline.query.endsWith(SearchTimeline.FILTER_RETWEETS));
-    }
-
-    @Test
-    public void testAddFilterRetweets() {
-        final SearchTimeline timeline = new SearchTimeline(twitterCore, TEST_FILTER_QUERY, null,
-                null, null, null, null);
-        assertEquals("from:twitter -filter:retweets", timeline.query);
-    }
-
-    @Test
-    public void testFilterRetweets_nullQuery() {
-        // handle null queries, do not append FILTER_RETWEETS
-        final SearchTimeline timeline = new SearchTimeline(twitterCore, null, null, null, null,
-                null, null);
-        assertNull(timeline.query);
-    }
-
-    @Test
-    public void testNext_createsCorrectRequest() {
-        final SearchTimeline timeline = spy(new SearchTimeline(twitterCore, TEST_QUERY,
-                TEST_GEOCODE, TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST,
-                TEST_UNTIL_DATE));
-        timeline.next(TEST_SINCE_ID, mock(Callback.class));
-        verify(timeline).createSearchRequest(eq(TEST_SINCE_ID),
-                isNull(Long.class));
-    }
-
-    @Test
-    public void testPrevious_createsCorrectRequest() {
-        final SearchTimeline timeline = spy(new SearchTimeline(twitterCore, TEST_QUERY,
-                TEST_GEOCODE, TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST,
-                TEST_UNTIL_DATE));
-        timeline.previous(TEST_MAX_ID, mock(Callback.class));
-        // intentionally decrementing the maxId which is passed through to the request
-        verify(timeline).createSearchRequest(isNull(Long.class),
-                eq(TEST_MAX_ID - 1));
-    }
-
-    @Test
-    public void testCreateSearchRequest() {
-        // build a timeline with test params
-        final SearchTimeline timeline = spy(new SearchTimeline(twitterCore, TEST_QUERY, null,
-                TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST, TEST_UNTIL_DATE));
-        // create a request directly
-        timeline.createSearchRequest(TEST_SINCE_ID, TEST_MAX_ID);
-
-        // assert searchTimeline call is made with the correct arguments
-        verify(twitterCore.getApiClient().getSearchService())
-                .tweets(eq(TEST_QUERY + SearchTimeline.FILTER_RETWEETS),
-                        isNull(Geocode.class), eq(TEST_LANG), isNull(String.class),
-                        eq(TEST_RESULT_TYPE), eq(TEST_ITEMS_PER_REQUEST), eq(TEST_UNTIL_DATE),
-                        eq(TEST_SINCE_ID), eq(TEST_MAX_ID), eq(true));
-    }
-
-    /* Builder */
-    @Test
-    public void testBuilder() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
-                .query(TEST_QUERY)
-                .geocode(TEST_GEOCODE)
-                .languageCode(TEST_LANG)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .resultType(SearchTimeline.ResultType.POPULAR)
-                .untilDate(TEST_UNTIL)
-                .build();
-        assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
-        assertEquals(TEST_RESULT_TYPE, timeline.resultType);
-        assertEquals(TEST_LANG, timeline.languageCode);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertEquals(TEST_UNTIL_DATE, timeline.untilDate);
-        assertEquals(TEST_GEOCODE, timeline.geocode);
-    }
-
-    @Test
-    // api arguments should default to Null to allow the backend to determine default behavior
-    public void testBuilder_defaults() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
-                .query(TEST_QUERY)
-                .build();
-        assertNull(timeline.languageCode);
-        assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertNull(timeline.untilDate);
-    }
-
-    @Test
-    public void testBuilder_query() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
-                .query(TEST_QUERY)
-                .build();
-        assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
-    }
-
-    @Test
-    public void testBuilder_nullQuery() {
-        try {
-            new SearchTimeline.Builder(twitterCore).build();
-            fail("Expected IllegalStateException");
-        } catch (IllegalStateException e) {
-            assertEquals("query must not be null", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testBuilder_lang() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
-                .query(TEST_QUERY)
-                .languageCode(TEST_LANG)
-                .build();
-        assertEquals(TEST_LANG, timeline.languageCode);
-    }
-
-    @Test
-    public void testBuilder_geocode() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
-                .query(TEST_QUERY)
-                .geocode(TEST_GEOCODE)
-                .build();
-        assertEquals(TEST_GEOCODE, timeline.geocode);
-    }
-
-    @Test
-    public void testBuilder_maxItemsPerRequest() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(twitterCore)
-                .query(TEST_QUERY)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .build();
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ShareTweetActionTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ShareTweetActionTest.java
deleted file mode 100644
index 1d90ee3e..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ShareTweetActionTest.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.content.res.Resources;
-
-import com.twitter.sdk.android.core.models.TweetBuilder;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class ShareTweetActionTest {
-
-    private static final String REQUIRED_SEND_ACTION = Intent.ACTION_SEND;
-    private static final String REQUIRED_MIME_TYPE = "text/plain";
-    private static final String A_SHARE_SUBJECT =
-            "Tweet from " + TestFixtures.TEST_NAME + " (@" + TestFixtures.TEST_SCREEN_NAME + ")";
-    private static final String A_SHARE_TEXT
-            = "Check out @" + TestFixtures.TEST_SCREEN_NAME + "'s Tweet: https://twitter.com/" +
-            TestFixtures.TEST_SCREEN_NAME + "/status/" + TestFixtures.TEST_TWEET.id;
-
-    private ShareTweetAction listener;
-    private Resources resources;
-    private TweetUi mockTweetUi;
-
-    @Before
-    public void setUp() throws Exception {
-        mockTweetUi = mock(TweetUi.class);
-        listener = new ShareTweetAction(TestFixtures.TEST_TWEET, mockTweetUi);
-        resources = RuntimeEnvironment.application.getResources();
-    }
-
-    @Test
-    public void testOnClick_nullTweet() {
-        final ShareTweetAction listener = new ShareTweetAction(null, mockTweetUi);
-        final Context context = mock(Context.class);
-        listener.onClick(context, resources);
-        verify(context, times(0)).startActivity(any(Intent.class));
-        verifyNoMoreInteractions(mockTweetUi);
-    }
-
-    @Test
-    public void testOnClick_nullTweetUser() {
-        final ShareTweetAction listener =
-                new ShareTweetAction(new TweetBuilder().build(), mockTweetUi);
-        final Context context = mock(Context.class);
-        listener.onClick(context, resources);
-        verify(context, times(0)).startActivity(any(Intent.class));
-        verifyNoMoreInteractions(mockTweetUi);
-    }
-
-    @Test
-    public void testOnClick_tweetWithData() {
-        final Context context = createContextWithPackageManager();
-        listener.onClick(context, resources);
-        verify(context, times(1)).startActivity(any(Intent.class));
-    }
-
-    @Test
-    public void testGetShareContent() {
-        final String shareContent = listener.getShareContent(resources);
-        assertEquals(A_SHARE_TEXT, shareContent);
-    }
-
-    @Test
-    public void testGetShareSubject() {
-        final String shareSubject = listener.getShareSubject(resources);
-        assertEquals(A_SHARE_SUBJECT, shareSubject);
-    }
-
-    @Test
-    public void testLaunchShareIntent_startsActivity() {
-        final Intent intent = mock(Intent.class);
-        final Context context = createContextWithPackageManager();
-        listener.launchShareIntent(intent, context);
-        verify(context, times(1)).startActivity(intent);
-    }
-
-    @Test
-    public void testGetShareIntent() {
-        final Intent intent = listener.getShareIntent(A_SHARE_SUBJECT, A_SHARE_TEXT);
-        assertEquals(REQUIRED_SEND_ACTION, intent.getAction());
-        assertEquals(REQUIRED_MIME_TYPE, intent.getType());
-        assertEquals(A_SHARE_SUBJECT, intent.getStringExtra(Intent.EXTRA_SUBJECT));
-        assertEquals(A_SHARE_TEXT, intent.getStringExtra(Intent.EXTRA_TEXT));
-    }
-
-    private Context createContextWithPackageManager() {
-        final Context context = mock(Context.class);
-        final PackageManager pm = mock(PackageManager.class);
-        final List<ResolveInfo> activities = new ArrayList<>();
-        activities.add(mock(ResolveInfo.class));
-
-        when(pm.queryIntentActivities(any(Intent.class), anyInt())).thenReturn(activities);
-        when(context.getPackageManager()).thenReturn(pm);
-
-        return context;
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TestItem.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TestItem.java
deleted file mode 100644
index 9313847d..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TestItem.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.models.Identifiable;
-
-import java.util.List;
-
-/**
- * A TestItem Identifiable for testing components generic to Identifiable types. Avoids the need
- * to test against a concrete Identifiable.
- */
-public class TestItem implements Identifiable {
-
-    private final long id;
-
-    public TestItem(long id) {
-        this.id = id;
-    }
-
-    @Override
-    public long getId() {
-        return id;
-    }
-
-    public static <T extends List> T populateList(T items, long count) {
-        for (int i = 0; i < count; i++) {
-            // add 1000 just so ids are clearly distinct from position
-            items.add(new TestItem(1000 + i));
-        }
-        return items;
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineCursorTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineCursorTest.java
deleted file mode 100644
index 0f199533..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineCursorTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class TimelineCursorTest {
-    private static final Long TEST_MAX_POSITION = 200L;
-    private static final Long TEST_MIN_POSITION = 100L;
-
-    @Test
-    public void testConstructor() {
-        final TimelineCursor cursor = new TimelineCursor(TEST_MIN_POSITION, TEST_MAX_POSITION);
-        assertEquals(TEST_MIN_POSITION, cursor.minPosition);
-        assertEquals(TEST_MAX_POSITION, cursor.maxPosition);
-    }
-
-    @Test
-    public void testConstructor_withList() {
-        final List<TestItem> testItems = new ArrayList<>();
-        testItems.add(new TestItem(TEST_MAX_POSITION));
-        testItems.add(new TestItem(TEST_MIN_POSITION));
-        final TimelineCursor cursor = new TimelineCursor(testItems);
-        assertEquals(TEST_MIN_POSITION, cursor.minPosition);
-        assertEquals(TEST_MAX_POSITION, cursor.maxPosition);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
deleted file mode 100644
index 43e02bf7..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
+++ /dev/null
@@ -1,688 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.database.DataSetObservable;
-import android.database.DataSetObserver;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterException;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import static org.hamcrest.CoreMatchers.not;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.isNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(RobolectricTestRunner.class)
-public class TimelineDelegateTest {
-    private static final TestItem TEST_ITEM_1 = new TestItem(1111L);
-    private static final TestItem TEST_ITEM_2 = new TestItem(2222L);
-    private static final TestItem TEST_ITEM_3 = new TestItem(3333L);
-    private static final TestItem TEST_ITEM_4 = new TestItem(4444L);
-    private static final int TOTAL_ITEMS = 4;
-    private static final int NUM_ITEMS = 100;
-    private static final int ZERO_ITEMS = 0;
-    private static final Long ANY_POSITION = 1234L;
-    private static final Long TEST_MIN_POSITION = 3333L;
-    private static final Long TEST_MAX_POSITION = 4444L;
-    private static final TimelineCursor TEST_TIMELINE_CURSOR = new TimelineCursor(TEST_MIN_POSITION,
-            TEST_MAX_POSITION);
-    private static final String REQUIRED_MAX_CAPACITY_ERROR = "Max capacity reached";
-    private static final String REQUIRED_REQUEST_IN_FLIGHT_ERROR = "Request already in flight";
-    private static final TwitterException TEST_TWITTER_EXCEPTION
-            = new TwitterException("Some exception");
-
-    private TimelineDelegate<TestItem> delegate;
-    private Timeline<TestItem> mockTimeline;
-    private DataSetObservable mockObservable;
-    private List<TestItem> testItems = new ArrayList<>();
-    // test items for testing prepending and appending to another list
-    private List<TestItem> testExtraItems = new ArrayList<>();
-    private static Result<TimelineResult<TestItem>> testResult;
-
-    @Before
-    public void setUp() throws Exception {
-        mockTimeline = mock(Timeline.class);
-        mockObservable = mock(DataSetObservable.class);
-        // lists of items ordered from larger id to smaller
-        testItems.add(TEST_ITEM_2);
-        testItems.add(TEST_ITEM_1);
-        // extra result items ordered from larger id to smaller
-        testExtraItems.add(TEST_ITEM_4);
-        testExtraItems.add(TEST_ITEM_3);
-        testResult = new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testItems), null);
-    }
-
-    @Test
-    public void testConstructor() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        assertEquals(mockTimeline, delegate.timeline);
-        assertEquals(mockObservable, delegate.listAdapterObservable);
-        assertEquals(testItems, delegate.itemList);
-        assertNotNull(delegate.timelineStateHolder);
-        // initial positions must be null
-        assertNull(delegate.timelineStateHolder.positionForNext());
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
-    }
-
-    @Test
-    public void testConstructor_defaults() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        assertEquals(mockTimeline, delegate.timeline);
-        assertNotNull(delegate.listAdapterObservable);
-        assertNotNull(delegate.itemList);
-        assertNotNull(delegate.timelineStateHolder);
-        // initial positions must be null
-        assertNull(delegate.timelineStateHolder.positionForNext());
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
-    }
-
-    @Test
-    public void testConstructor_nullTimeline() {
-        try {
-            delegate = new TimelineDelegate<>(null);
-            fail("IllegalArgumentException expected");
-        } catch (IllegalArgumentException e) {
-            assertEquals("Timeline must not be null", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testGetCount() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        assertEquals(0, delegate.getCount());
-        delegate = new TimelineDelegate<>(mockTimeline, null, testItems);
-        assertEquals(testItems.size(), delegate.getCount());
-    }
-
-    @Test
-    public void testGetItem() {
-        delegate = new TimelineDelegate<>(mockTimeline, null, testItems);
-        assertEquals(TEST_ITEM_2, delegate.getItem(0));
-        assertEquals(TEST_ITEM_1, delegate.getItem(1));
-    }
-
-    @Test
-    public void testGetLastItem_loadsPrevious() {
-        final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeTimeline, mockObservable, null);
-        delegate.refresh(null);
-        // refresh loads latest items (notifyChange)
-        verify(mockObservable).notifyChanged();
-        delegate.getItem(NUM_ITEMS - 1);
-        // assert items are added and notifyChanged is called again
-        assertEquals(2 * NUM_ITEMS, delegate.getCount());
-        verify(mockObservable, times(2)).notifyChanged();
-    }
-
-    @Test
-    public void testGetNonLastItem_doesNotLoadPrevious() {
-        final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeTimeline, mockObservable, null);
-        delegate.refresh(null);
-        // refresh loads latest items (notifyChange)
-        verify(mockObservable).notifyChanged();
-        assertEquals(NUM_ITEMS, delegate.getCount());
-        delegate.getItem(1);
-        // assert no items added and notifyChanged is not called again
-        assertEquals(NUM_ITEMS, delegate.getCount());
-        verify(mockObservable, times(1)).notifyChanged();
-    }
-
-    @Test
-    public void testGetItemId() {
-        delegate = new TimelineDelegate<>(mockTimeline, null, testItems);
-        assertEquals(TEST_ITEM_2.getId(), delegate.getItemId(0));
-        assertEquals(TEST_ITEM_1.getId(), delegate.getItemId(1));
-    }
-
-    @Test
-    public void testSetItemById() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        assertEquals(TEST_ITEM_2, delegate.getItem(0));
-        assertEquals(TEST_ITEM_1, delegate.getItem(1));
-        final TestItem differentItemSameId = new TestItem(TEST_ITEM_2.getId());
-        delegate.setItemById(differentItemSameId);
-        assertThat(TEST_ITEM_2, not(delegate.getItem(0)));
-        assertEquals(differentItemSameId, delegate.getItem(0));
-        assertEquals(TEST_ITEM_1, delegate.getItem(1));
-        verify(mockObservable).notifyChanged();
-    }
-
-    @Test
-    public void testWithinMaxCapacity() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        assertTrue(delegate.withinMaxCapacity());
-        TestItem.populateList(testItems, TimelineDelegate.CAPACITY);
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        assertFalse(delegate.withinMaxCapacity());
-    }
-
-    @Test
-    public void testIsLastPosition() {
-        testItems = new ArrayList<>();
-        TestItem.populateList(testItems, NUM_ITEMS);
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        assertFalse(delegate.isLastPosition(0));
-        assertFalse(delegate.isLastPosition(NUM_ITEMS - 2));
-        assertTrue(delegate.isLastPosition(NUM_ITEMS - 1));
-    }
-
-    // reset, next, previous
-
-    @Test
-    public void testRefresh_resetsTimelineCursors() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        delegate.timelineStateHolder.setNextCursor(new TimelineCursor(ANY_POSITION, ANY_POSITION));
-        delegate.timelineStateHolder.setPreviousCursor(new TimelineCursor(ANY_POSITION,
-                ANY_POSITION));
-        delegate.refresh(null);
-        assertNull(delegate.timelineStateHolder.positionForNext());
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
-    }
-
-    @Test
-    public void testRefresh_callsNextForLatest() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        delegate.refresh(null);
-        verify(mockTimeline).next(isNull(Long.class), any(TimelineDelegate.NextCallback.class));
-    }
-
-    @Test
-    public void testRefresh_replacesItems() {
-        // refresh replaces initial items
-        final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeTimeline, mockObservable, testItems);
-        assertEquals(testItems, delegate.itemList);
-        delegate.refresh(null);
-        // assert that items were replaced and notifyChanged called
-        assertEquals(NUM_ITEMS, delegate.itemList.size());
-        verify(mockObservable).notifyChanged();
-    }
-
-    @Test
-    public void testNext_addsItems() {
-        final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeTimeline, mockObservable, null);
-        delegate.refresh(null);
-        // refresh loads latest items (notifyChange)
-        delegate.next(null);
-        // assert items are added and notifyChanges is called again
-        assertEquals(2 * NUM_ITEMS, delegate.getCount());
-        verify(mockObservable, times(2)).notifyChanged();
-    }
-
-    @Test
-    public void testNext_doesNotAddItemsAtBeginningOfTimeline() {
-        // when a Timeline successfully returns an empty set of items, there are no next items (yet)
-        List<TestItem> initialItems = new ArrayList<>();
-        final int INITIAL_COUNT = 5;
-        initialItems = TestItem.populateList(initialItems, INITIAL_COUNT);
-        final Timeline<TestItem> fakeEndTimeline = new FakeItemTimeline(ZERO_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeEndTimeline, mockObservable, initialItems);
-        delegate.next(null);
-        // assert no items are added and notifyChanged is not called
-        assertEquals(INITIAL_COUNT, delegate.getCount());
-        verifyZeroInteractions(mockObservable);
-    }
-
-    @Test
-    public void testNext_updatesPositionForNext() {
-        final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, ANY_POSITION,
-                TEST_MAX_POSITION);
-        delegate = new TimelineDelegate<>(fakeTimeline);
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
-        delegate.next(null);
-        assertEquals(TEST_MAX_POSITION, delegate.timelineStateHolder.positionForNext());
-    }
-
-    @Test
-    public void testNext_doesNotUpdatePositionAtBeginningOfTimeline() {
-        final Timeline<TestItem> fakeEndTimeline = new FakeItemTimeline(ZERO_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeEndTimeline);
-        delegate.timelineStateHolder.setPreviousCursor(new TimelineCursor(null, null));
-        delegate.next(null);
-        assertNull(delegate.timelineStateHolder.positionForNext());
-    }
-
-    @Test
-    public void testPrevious_addsItems() {
-        final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeTimeline, mockObservable, null);
-        delegate.refresh(null);
-        // refresh loads latest items (notifyChange)
-        delegate.previous();
-        // assert items are added and notifyChanges is called again
-        assertEquals(2 * NUM_ITEMS, delegate.getCount());
-        verify(mockObservable, times(2)).notifyChanged();
-    }
-
-    @Test
-    public void testPrevious_doesNotAddItemsAtEndOfTimeline() {
-        // when a Timeline successfully returns an empty set of items, its end has been reached
-        List<TestItem> initialItems = new ArrayList<>();
-        final int INITIAL_COUNT = 5;
-        initialItems = TestItem.populateList(initialItems, INITIAL_COUNT);
-        final Timeline<TestItem> fakeEndTimeline = new FakeItemTimeline(ZERO_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeEndTimeline, mockObservable, initialItems);
-        delegate.previous();
-        // assert no items are added and notifyChanged is not called
-        assertEquals(INITIAL_COUNT, delegate.getCount());
-        verifyZeroInteractions(mockObservable);
-    }
-
-    @Test
-    public void testPrevious_updatesPositionForPrevious() {
-        final Timeline<TestItem> fakeTimeline = new FakeItemTimeline(NUM_ITEMS, TEST_MIN_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeTimeline);
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
-        delegate.previous();
-        assertEquals(TEST_MIN_POSITION, delegate.timelineStateHolder.positionForPrevious());
-    }
-
-    @Test
-    public void testPrevious_doesNotUpdatePositionAtEndOfTimeline() {
-        final Timeline<TestItem> fakeEndTimeline = new FakeItemTimeline(ZERO_ITEMS, ANY_POSITION,
-                ANY_POSITION);
-        delegate = new TimelineDelegate<>(fakeEndTimeline);
-        delegate.timelineStateHolder.setPreviousCursor(new TimelineCursor(null, null));
-        delegate.previous();
-        assertNull(delegate.timelineStateHolder.positionForPrevious());
-    }
-
-    // loadNext, loadPrevious
-
-    @Test
-    public void testLoadNext() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        final Callback<TimelineResult<TestItem>> testCb = delegate.new NextCallback(null,
-                delegate.timelineStateHolder);
-        delegate.loadNext(TEST_MIN_POSITION, testCb);
-        verify(mockTimeline).next(TEST_MIN_POSITION, testCb);
-    }
-
-    @Test
-    public void testLoadNext_respectsMaxCapacity() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        TestItem.populateList(delegate.itemList, TimelineDelegate.CAPACITY);
-        final Callback<TimelineResult<TestItem>> mockCallback = mock(Callback.class);
-        delegate.loadNext(ANY_POSITION, mockCallback);
-        final ArgumentCaptor<TwitterException> exceptionCaptor
-                = ArgumentCaptor.forClass(TwitterException.class);
-        verifyZeroInteractions(mockTimeline);
-        verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(exceptionCaptor.getValue().getMessage(), REQUIRED_MAX_CAPACITY_ERROR);
-    }
-
-    @Test
-    public void testLoadNext_respectsRequestInFlight() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        delegate.timelineStateHolder.startTimelineRequest();
-        final Callback<TimelineResult<TestItem>> mockCallback = mock(Callback.class);
-        delegate.loadNext(ANY_POSITION, mockCallback);
-        final ArgumentCaptor<TwitterException> exceptionCaptor
-                = ArgumentCaptor.forClass(TwitterException.class);
-        verifyZeroInteractions(mockTimeline);
-        verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(exceptionCaptor.getValue().getMessage(), REQUIRED_REQUEST_IN_FLIGHT_ERROR);
-    }
-
-    @Test
-    public void testLoadPrevious() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        final Callback<TimelineResult<TestItem>> testCb = delegate.new PreviousCallback(
-                delegate.timelineStateHolder);
-        delegate.loadPrevious(TEST_MAX_POSITION, testCb);
-        verify(mockTimeline).previous(TEST_MAX_POSITION, testCb);
-    }
-
-    @Test
-    public void testLoadPrevious_respectsMaxCapacity() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        TestItem.populateList(delegate.itemList, TimelineDelegate.CAPACITY);
-        final Callback<TimelineResult<TestItem>> mockCallback = mock(Callback.class);
-        delegate.loadPrevious(ANY_POSITION, mockCallback);
-        final ArgumentCaptor<TwitterException> exceptionCaptor
-                = ArgumentCaptor.forClass(TwitterException.class);
-        verifyZeroInteractions(mockTimeline);
-        verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(exceptionCaptor.getValue().getMessage(), REQUIRED_MAX_CAPACITY_ERROR);
-    }
-
-    @Test
-    public void testLoadPrevious_respectsRequestInFlight() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        delegate.timelineStateHolder.startTimelineRequest();
-        final Callback<TimelineResult<TestItem>> mockCallback = mock(Callback.class);
-        delegate.loadPrevious(ANY_POSITION, mockCallback);
-        final ArgumentCaptor<TwitterException> exceptionCaptor
-                = ArgumentCaptor.forClass(TwitterException.class);
-        verifyZeroInteractions(mockTimeline);
-        verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(exceptionCaptor.getValue().getMessage(), REQUIRED_REQUEST_IN_FLIGHT_ERROR);
-    }
-
-    /* nested Callbacks */
-
-    // should unconditionally set requestInFlight to false
-    @Test
-    public void testDefaultCallback_successCallsFinishTimelineRequest() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        final TimelineStateHolder mockHolder = mock(TimelineStateHolder.class);
-        final TimelineDelegate.DefaultCallback cb = delegate.new DefaultCallback(null, mockHolder);
-        cb.success(null);
-        verify(mockHolder).finishTimelineRequest();
-    }
-
-    @Test
-    public void testDefaultCallback_successCallsDeveloperCallback() {
-        final Callback<TimelineResult<TestItem>> developerCb = mock(Callback.class);
-        delegate = new TimelineDelegate<>(mockTimeline);
-        final TimelineDelegate.DefaultCallback cb = delegate.new DefaultCallback(developerCb,
-                delegate.timelineStateHolder);
-        cb.success(testResult);
-        verify(developerCb).success(testResult);
-    }
-
-    @Test
-    public void testDefaultCallback_successHandlesNullDeveloperCallback() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        final TimelineDelegate.DefaultCallback cb = delegate.new DefaultCallback(null,
-                delegate.timelineStateHolder);
-        try {
-            cb.success(testResult);
-        } catch (NullPointerException e) {
-            fail("Should have handled null callback");
-        }
-    }
-
-    // should unconditionally set requestInFlight to false
-    @Test
-    public void testDefaultCallback_failureCallsFinishTimelineRequest() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        final TimelineStateHolder mockHolder = mock(TimelineStateHolder.class);
-        final TimelineDelegate.DefaultCallback cb = delegate.new DefaultCallback(null, mockHolder);
-        cb.failure(null);
-        verify(mockHolder).finishTimelineRequest();
-    }
-
-    @Test
-    public void testDefaultCallback_failureCallsDeveloperCallback() {
-        final Callback<TimelineResult<TestItem>> developerCb = mock(Callback.class);
-        delegate = new TimelineDelegate<>(mockTimeline);
-        final TimelineDelegate.DefaultCallback cb = delegate.new DefaultCallback(developerCb,
-                delegate.timelineStateHolder);
-        cb.failure(TEST_TWITTER_EXCEPTION);
-        verify(developerCb).failure(TEST_TWITTER_EXCEPTION);
-    }
-
-    @Test
-    public void testDefaultCallback_failureHandlesNullDeveloperCallback() {
-        delegate = new TimelineDelegate<>(mockTimeline);
-        final TimelineDelegate.DefaultCallback cb = delegate.new DefaultCallback(null,
-                delegate.timelineStateHolder);
-        try {
-            cb.failure(TEST_TWITTER_EXCEPTION);
-        } catch (NullPointerException e) {
-            fail("Should have handled null callback");
-        }
-    }
-
-    // should prepend result items, set next cursor, and call notifyChanged
-    @Test
-    public void testNextCallback_successReceivedItems() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        final TimelineStateHolder timelineStateHolder = new TimelineStateHolder(
-                new TimelineCursor(ANY_POSITION, ANY_POSITION),
-                new TimelineCursor(ANY_POSITION, ANY_POSITION));
-        final TimelineDelegate.NextCallback cb = delegate.new NextCallback(null,
-                timelineStateHolder);
-        cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
-        // assert the next TimelineCursor is set on the ScrollStateHolder, previous unchanged
-        assertEquals(TEST_MAX_POSITION, timelineStateHolder.positionForNext());
-        assertEquals(ANY_POSITION, timelineStateHolder.positionForPrevious());
-        // assert that extra items were prepended in reverse order
-        assertEquals(TOTAL_ITEMS, delegate.itemList.size());
-        assertEquals(TEST_ITEM_4, delegate.getItem(0));
-        assertEquals(TEST_ITEM_3, delegate.getItem(1));
-        assertEquals(TEST_ITEM_2, delegate.getItem(2));
-        assertEquals(TEST_ITEM_1, delegate.getItem(3));
-        // assert observer's notifyChanged is called
-        verify(mockObservable).notifyChanged();
-    }
-
-    // should set both nextCursor and previousCursor to be non-null
-    @Test
-    public void testNextCallback_successFirstReceivedItems() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        final TimelineStateHolder timelineStateHolder = new TimelineStateHolder();
-        final TimelineDelegate.NextCallback cb = delegate.new NextCallback(null,
-                timelineStateHolder);
-        cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
-        // assert the next TimelineCursor is set on the ScrollStateHolder, previous unchanged
-        assertEquals(TEST_MAX_POSITION, timelineStateHolder.positionForNext());
-        assertEquals(TEST_MIN_POSITION, timelineStateHolder.positionForPrevious());
-    }
-
-    // should do nothing
-    @Test
-    public void testNextCallback_successReceivedZeroItems() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        final TimelineStateHolder timelineStateHolder = new TimelineStateHolder();
-        final TimelineDelegate.NextCallback cb = delegate.new NextCallback(null,
-                timelineStateHolder);
-        cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, Collections.emptyList()),
-                null));
-        // assert that the cursors and itemList are left unmodified
-        assertNull(timelineStateHolder.positionForNext());
-        assertNull(timelineStateHolder.positionForPrevious());
-        assertEquals(testItems.size(), delegate.itemList.size());
-        verifyZeroInteractions(mockObservable);
-    }
-
-    // should clear items with result items, set next cursor, and call notifyChanged
-    @Test
-    public void testRefreshCallback_successReceivedItems() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        final TimelineStateHolder timelineStateHolder = new TimelineStateHolder(
-                new TimelineCursor(ANY_POSITION, ANY_POSITION),
-                new TimelineCursor(ANY_POSITION, ANY_POSITION));
-        final TimelineDelegate.RefreshCallback cb = delegate.new RefreshCallback(null,
-                timelineStateHolder);
-        cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
-        // assert the next TimelineCursor is set on the ScrollStateHolder, previous unchanged
-        assertEquals(TEST_MAX_POSITION, timelineStateHolder.positionForNext());
-        assertEquals(ANY_POSITION, timelineStateHolder.positionForPrevious());
-        // assert that extra items replaced the old items
-        assertEquals(testExtraItems.size(), delegate.itemList.size());
-        assertEquals(TEST_ITEM_4, delegate.getItem(0));
-        assertEquals(TEST_ITEM_3, delegate.getItem(1));
-        // assert observer's notifyChanged is called
-        verify(mockObservable).notifyChanged();
-    }
-
-    // should do nothing
-    @Test
-    public void testRefreshCallback_successReceivedZeroItems() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        final TimelineStateHolder timelineStateHolder = new TimelineStateHolder();
-        final TimelineDelegate.RefreshCallback cb = delegate.new RefreshCallback(null,
-                timelineStateHolder);
-        cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, Collections.emptyList()),
-                null));
-        // assert that the cursors and itemList are left unmodified
-        assertNull(timelineStateHolder.positionForNext());
-        assertNull(timelineStateHolder.positionForPrevious());
-        assertEquals(testItems.size(), delegate.itemList.size());
-        verifyZeroInteractions(mockObservable);
-    }
-
-    // should append result items, set previous cursor, and call notifyChanged
-    @Test
-    public void testPreviousCallback_successReceivedItems() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        final TimelineStateHolder timelineStateHolder = new TimelineStateHolder(
-                new TimelineCursor(ANY_POSITION, ANY_POSITION),
-                new TimelineCursor(ANY_POSITION, ANY_POSITION));
-        final TimelineDelegate.PreviousCallback cb
-                = delegate.new PreviousCallback(timelineStateHolder);
-        cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
-        // assert the previous TimelineCursor is set on the ScrollStateHolder
-        assertEquals(TEST_MIN_POSITION, timelineStateHolder.positionForPrevious());
-        assertEquals(ANY_POSITION, timelineStateHolder.positionForNext());
-        // assert that extra items were appended in order received
-        assertEquals(TOTAL_ITEMS, delegate.itemList.size());
-        assertEquals(TEST_ITEM_2, delegate.getItem(0));
-        assertEquals(TEST_ITEM_1, delegate.getItem(1));
-        assertEquals(TEST_ITEM_4, delegate.getItem(2));
-        assertEquals(TEST_ITEM_3, delegate.getItem(3));
-        // assert observer's notifyChanged is called
-        verify(mockObservable).notifyChanged();
-    }
-
-    // should set both nextCursor and previousCursor to be non-null
-    @Test
-    public void testPreviousCallback_successFirstReceivedItems() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        final TimelineStateHolder timelineStateHolder = new TimelineStateHolder();
-        final TimelineDelegate.PreviousCallback cb
-                = delegate.new PreviousCallback(timelineStateHolder);
-        cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, testExtraItems), null));
-        // assert the previous TimelineCursor is set on the ScrollStateHolder
-        assertEquals(TEST_MAX_POSITION, timelineStateHolder.positionForNext());
-        assertEquals(TEST_MIN_POSITION, timelineStateHolder.positionForPrevious());
-    }
-
-
-    // should do nothing
-    @Test
-    public void testPreviousCallback_successReceivedZeroItems() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, testItems);
-        final TimelineStateHolder timelineStateHolder = new TimelineStateHolder();
-        final TimelineDelegate.PreviousCallback cb
-                = delegate.new PreviousCallback(timelineStateHolder);
-        cb.success(new Result<>(new TimelineResult<>(TEST_TIMELINE_CURSOR, Collections.emptyList()),
-                null));
-        // assert that the cursors and itemList are left unmodified
-        assertNull(timelineStateHolder.positionForNext());
-        assertNull(timelineStateHolder.positionForPrevious());
-        assertEquals(testItems.size(), delegate.itemList.size());
-        verifyZeroInteractions(mockObservable);
-    }
-
-    /* test DataSetObservable */
-
-    @Test
-    public void testRegisterDataSetObserver() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, null);
-        delegate.registerDataSetObserver(mock(DataSetObserver.class));
-        verify(mockObservable, times(1)).registerObserver(any(DataSetObserver.class));
-    }
-
-    @Test
-    public void testUnregisterDataSetObserver() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, null);
-        delegate.unregisterDataSetObserver(mock(DataSetObserver.class));
-        verify(mockObservable, times(1)).unregisterObserver(any(DataSetObserver.class));
-    }
-
-    @Test
-    public void testNotifyDataSetChanged() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, null);
-        delegate.notifyDataSetChanged();
-        verify(mockObservable, times(1)).notifyChanged();
-    }
-
-    @Test
-    public void testNotifyDataSetInvalidated() {
-        delegate = new TimelineDelegate<>(mockTimeline, mockObservable, null);
-        delegate.notifyDataSetInvalidated();
-        verify(mockObservable, times(1)).notifyInvalidated();
-    }
-
-    /**
-     * Timeline which loads numItems TestItems on each next/previous call. Use zero for numItems
-     * to simulate reaching the end of a finite timeline.
-     */
-    public static class FakeItemTimeline implements Timeline<TestItem> {
-        private long numItems;
-        private Long minPosition;
-        private Long maxPosition;
-
-        /**
-         * Constructs a FakeItemTimeline
-         *
-         * @param numItems    the number of TestItems to return per call to next/previous
-         * @param minPosition the TimelineCursor minPosition returned by calls to next/previous
-         * @param maxPosition the TimelineCursor maxPosition returned by calls to next/previous
-         */
-        public FakeItemTimeline(long numItems, Long minPosition, Long maxPosition) {
-            this.numItems = numItems;
-            this.minPosition = minPosition;
-            this.maxPosition = maxPosition;
-        }
-
-        @Override
-        public void next(Long sinceId, Callback<TimelineResult<TestItem>> cb) {
-            final List<TestItem> testItems = new ArrayList<>();
-            TestItem.populateList(testItems, numItems);
-            final TimelineResult<TestItem> timelineResult
-                    = new TimelineResult<>(new TimelineCursor(minPosition, maxPosition), testItems);
-            cb.success(new Result<>(timelineResult, null));
-        }
-
-        @Override
-        public void previous(Long maxId, Callback<TimelineResult<TestItem>> cb) {
-            final List<TestItem> testItems = new ArrayList<>();
-            TestItem.populateList(testItems, numItems);
-            final TimelineResult<TestItem> timelineResult
-                    = new TimelineResult<>(new TimelineCursor(minPosition, maxPosition), testItems);
-            cb.success(new Result<>(timelineResult, null));
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java
deleted file mode 100644
index bf4b0e1f..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java
+++ /dev/null
@@ -1,158 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-import android.database.DataSetObserver;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.models.Identifiable;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class TimelineListAdapterTest {
-    private static final int TEST_POSITION = 10;
-    private TimelineListAdapter<TestItem> listAdapter;
-    private TimelineDelegate<TestItem> mockTimelineDelegate;
-    private Context context;
-
-    @Before
-    public void setUp() throws Exception {
-        mockTimelineDelegate = mock(TestTimelineDelegate.class);
-        context = RuntimeEnvironment.application;
-    }
-
-    @Test
-    public void testConstructor() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        verify(mockTimelineDelegate).refresh(null);
-    }
-
-    @Test
-    public void testConstructor_nullTimeline() {
-        try {
-            new TestTimelineListAdapter<>(context, (Timeline) null);
-            fail("IllegalArgumentException expected");
-        } catch (IllegalArgumentException e) {
-            assertEquals("Timeline must not be null", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testRefresh() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        final Callback<TimelineResult<TestItem>> mockCallback = mock(Callback.class);
-        listAdapter.refresh(mockCallback);
-        verify(mockTimelineDelegate).refresh(mockCallback);
-    }
-
-    @Test
-    public void testGetCount() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        listAdapter.getCount();
-        verify(mockTimelineDelegate).getCount();
-    }
-
-    @Test
-    public void testGetItem() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        listAdapter.getItem(TEST_POSITION);
-        verify(mockTimelineDelegate).getItem(TEST_POSITION);
-    }
-
-    @Test
-    public void testGetItemId() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        listAdapter.getItemId(TEST_POSITION);
-        verify(mockTimelineDelegate).getItemId(TEST_POSITION);
-    }
-
-    @Test
-    public void testRegisterDataSetObserver() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        listAdapter.registerDataSetObserver(mock(DataSetObserver.class));
-        verify(mockTimelineDelegate, times(1)).registerDataSetObserver(any(DataSetObserver.class));
-    }
-
-    @Test
-    public void testUnregisterDataSetObserver() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        listAdapter.unregisterDataSetObserver(mock(DataSetObserver.class));
-        verify(mockTimelineDelegate, times(1))
-                .unregisterDataSetObserver(any(DataSetObserver.class));
-    }
-
-    @Test
-    public void testNotifyDataSetChanged() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        listAdapter.notifyDataSetChanged();
-        verify(mockTimelineDelegate, times(1)).notifyDataSetChanged();
-    }
-
-    @Test
-    public void testNotifyDataSetInvalidated() {
-        listAdapter = new TestTimelineListAdapter<>(context, mockTimelineDelegate);
-        listAdapter.notifyDataSetInvalidated();
-        verify(mockTimelineDelegate, times(1)).notifyDataSetInvalidated();
-    }
-
-    /**
-     * Implement abstract method getView to create a concrete subclass TestTimelineListAdapter so
-     * that TimelineListAdapter non-view related behavior can be tested.
-     */
-    public class TestTimelineListAdapter<T extends Identifiable> extends TimelineListAdapter<T> {
-
-        TestTimelineListAdapter(Context context, Timeline<T> timeline) {
-            super(context, timeline);
-        }
-
-        TestTimelineListAdapter(Context context, TimelineDelegate<T> delegate) {
-            super(context, delegate);
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            return null;
-        }
-    }
-
-    /**
-     * Makes class public so it can be mocked on ART runtime.
-     *
-     * @param <T>
-     */
-    class TestTimelineDelegate<T extends Identifiable> extends TimelineDelegate {
-        TestTimelineDelegate(Timeline<T> timeline) {
-            super(timeline);
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java
deleted file mode 100644
index b10c1f72..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java
+++ /dev/null
@@ -1,154 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-
-@RunWith(RobolectricTestRunner.class)
-public class TimelineStateHolderTest {
-    private static final Long ANY_POSITION = 1234L;
-    private static final Long TEST_MIN_POSITION = 1111L;
-    private static final Long TEST_MAX_POSITION = 3333L;
-    private static final TimelineCursor TEST_TIMELINE_CURSOR = new TimelineCursor(ANY_POSITION,
-            ANY_POSITION);
-
-    private TimelineCursor mockTimelineCursor;
-
-    @Before
-    public void setUp() throws Exception {
-
-        mockTimelineCursor = mock(TimelineCursor.class);
-    }
-
-    @Test
-    public void testConstructor() {
-        final TimelineStateHolder holder = new TimelineStateHolder();
-        assertNull(holder.nextCursor);
-        assertNull(holder.previousCursor);
-        assertFalse(holder.requestInFlight.get());
-    }
-
-    @Test
-    public void testInternalConstructor() {
-        final TimelineStateHolder holder = new TimelineStateHolder(TEST_TIMELINE_CURSOR,
-                TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.previousCursor);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.nextCursor);
-        assertFalse(holder.requestInFlight.get());
-    }
-
-    @Test
-    public void testResetCursors() {
-        final TimelineStateHolder holder = new TimelineStateHolder(TEST_TIMELINE_CURSOR,
-                TEST_TIMELINE_CURSOR);
-        holder.resetCursors();
-        assertNull(holder.nextCursor);
-        assertNull(holder.previousCursor);
-    }
-
-    @Test
-    public void testPositionForNext() {
-        final TimelineStateHolder holder = new TimelineStateHolder(new TimelineCursor(ANY_POSITION,
-                TEST_MAX_POSITION), mockTimelineCursor);
-        assertEquals(TEST_MAX_POSITION, holder.positionForNext());
-    }
-
-    @Test
-    public void testPositionForNext_nullCursor() {
-        final TimelineStateHolder holder = new TimelineStateHolder(null, mockTimelineCursor);
-        assertNull(holder.positionForNext());
-    }
-
-    @Test
-    public void testSetNextCursor() {
-        final TimelineCursor previousCursor = new TimelineCursor(ANY_POSITION, ANY_POSITION);
-        final TimelineStateHolder holder = new TimelineStateHolder(
-                new TimelineCursor(ANY_POSITION, ANY_POSITION),
-                previousCursor);
-        holder.setNextCursor(TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.nextCursor);
-        assertEquals(previousCursor, holder.previousCursor);
-    }
-
-    // first next load will set both nextCursor and previousCursor
-    @Test
-    public void testSetNextCursor_firstLoad() {
-        final TimelineStateHolder holder = new TimelineStateHolder();
-        holder.setNextCursor(TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.nextCursor);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.previousCursor);
-    }
-
-    @Test
-    public void testPositionForPrevious() {
-        final TimelineStateHolder holder = new TimelineStateHolder(mockTimelineCursor,
-                new TimelineCursor(TEST_MIN_POSITION, ANY_POSITION));
-        assertEquals(TEST_MIN_POSITION, holder.positionForPrevious());
-    }
-
-    @Test
-    public void testPositionForPrevious_nullCursor() {
-        final TimelineStateHolder holder = new TimelineStateHolder(mockTimelineCursor, null);
-        assertNull(holder.positionForPrevious());
-    }
-
-    @Test
-    public void testSetPreviousCursor() {
-        final TimelineCursor nextCursor = new TimelineCursor(ANY_POSITION, ANY_POSITION);
-        final TimelineStateHolder holder = new TimelineStateHolder(nextCursor,
-                new TimelineCursor(ANY_POSITION, ANY_POSITION));
-        holder.setPreviousCursor(TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.previousCursor);
-        assertEquals(nextCursor, holder.nextCursor);
-    }
-
-    // first previous load will set both nextCursor and previousCursor
-    @Test
-    public void testSetPreviousCursor_firstLoad() {
-        final TimelineStateHolder holder = new TimelineStateHolder();
-        holder.setPreviousCursor(TEST_TIMELINE_CURSOR);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.nextCursor);
-        assertEquals(TEST_TIMELINE_CURSOR, holder.previousCursor);
-    }
-
-    @Test
-    public void testStartTimelineRequest() {
-        final TimelineStateHolder holder = new TimelineStateHolder();
-        assertFalse(holder.requestInFlight.get());
-        assertTrue(holder.startTimelineRequest());
-        assertTrue(holder.requestInFlight.get());
-        assertFalse(holder.startTimelineRequest());
-    }
-
-    @Test
-    public void testFinishTimelineRequest() {
-        final TimelineStateHolder holder = new TimelineStateHolder();
-        holder.requestInFlight.set(true);
-        holder.finishTimelineRequest();
-        assertFalse(holder.requestInFlight.get());
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ToggleImageButtonTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ToggleImageButtonTest.java
deleted file mode 100644
index 01f66ea4..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ToggleImageButtonTest.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.util.AttributeSet;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class ToggleImageButtonTest {
-    private static final String CONTENT_DESCRIPTION_ON = "ContentDescriptionOn";
-    private static final String CONTENT_DESCRIPTION_OFF = "ContentDescriptionOff";
-
-    ToggleImageButton createDefaultButton() {
-        return new ToggleImageButton(RuntimeEnvironment.application);
-    }
-
-    ToggleImageButton createButtonWithAttributes() {
-        final AttributeSet attrs = Robolectric.buildAttributeSet()
-                .addAttribute(R.attr.contentDescriptionOff, CONTENT_DESCRIPTION_OFF)
-                .addAttribute(R.attr.contentDescriptionOn, CONTENT_DESCRIPTION_ON)
-                .addAttribute(R.attr.toggleOnClick, "false")
-                .build();
-
-        return new ToggleImageButton(RuntimeEnvironment.application, attrs);
-    }
-
-    @Test
-    public void testInit() {
-        final ToggleImageButton button = createDefaultButton();
-        assertNull(button.contentDescriptionOn);
-        assertNull(button.contentDescriptionOff);
-        assertFalse(button.isToggledOn());
-        assertTrue(button.toggleOnClick);
-    }
-
-    @Test
-    public void testPerformClick() {
-        final ToggleImageButton button = createDefaultButton();
-        assertTrue(button.toggleOnClick);
-        assertFalse(button.isToggledOn());
-        button.performClick();
-        assertTrue(button.isToggledOn());
-    }
-
-    @Test
-    public void testSetToggledOn() {
-        final ToggleImageButton button = createDefaultButton();
-        assertFalse(button.isToggledOn());
-        button.setToggledOn(true);
-        assertTrue(button.isToggledOn());
-    }
-
-    @Test
-    public void testToggle() {
-        final ToggleImageButton button = createDefaultButton();
-        assertFalse(button.isToggledOn());
-        button.toggle();
-        assertTrue(button.isToggledOn());
-    }
-
-    @Test
-    public void testXmlInit() {
-        final ToggleImageButton button = createButtonWithAttributes();
-        assertEquals(CONTENT_DESCRIPTION_ON, button.contentDescriptionOn);
-        assertEquals(CONTENT_DESCRIPTION_OFF, button.contentDescriptionOff);
-        assertFalse(button.isToggledOn());
-        assertEquals(CONTENT_DESCRIPTION_OFF, button.getContentDescription());
-        assertFalse(button.toggleOnClick);
-    }
-
-    @Test
-    public void testPerformClick_toggleOnClickDisabled() {
-        final ToggleImageButton button = createButtonWithAttributes();
-        assertFalse(button.toggleOnClick);
-        assertFalse(button.isToggledOn());
-        button.performClick();
-        assertFalse(button.isToggledOn());
-    }
-
-    @Test
-    public void testSetToggledOn_withContentDescription() {
-        final ToggleImageButton button = createButtonWithAttributes();
-        assertFalse(button.isToggledOn());
-        assertEquals(CONTENT_DESCRIPTION_OFF, button.getContentDescription());
-        button.setToggledOn(true);
-        assertTrue(button.isToggledOn());
-        assertEquals(CONTENT_DESCRIPTION_ON, button.getContentDescription());
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
deleted file mode 100644
index 34bc8c6a..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.res.Resources;
-import android.text.format.DateUtils;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.TimeZone;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetDateUtilsTest {
-    // this is an arbitrary date, but the relative date assertions are all based off of it
-    private static final long NOW_IN_MILLIS = 1395345704198L;
-    private static final long JACKS_FIRST_TWEET_IN_MILLIS = 1142974214000L;
-
-    private Resources resources;
-    private TimeZone realDefaultTimeZone;
-
-    @Before
-    public void setUp() throws Exception {
-        resources = RuntimeEnvironment.application.getResources();
-
-        // force timezone in utc so we get consistent values out of the formatter classes that rely
-        // on using the default timezone. We restore in tearDown whatever the real default timezone
-        // was in order to not interfere with other tests
-        realDefaultTimeZone = TimeZone.getDefault();
-        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
-        TweetDateUtils.DATE_TIME_RFC822.setTimeZone(TimeZone.getDefault());
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        TimeZone.setDefault(realDefaultTimeZone);
-    }
-
-    @Test
-    public void testApiTimeToLong_jacksFirstTweet() {
-        assertEquals(JACKS_FIRST_TWEET_IN_MILLIS,
-                TweetDateUtils.apiTimeToLong("Tue Mar 21 20:50:14 +0000 2006"));
-    }
-
-    @Test
-    public void testApiTimeToLong_emptyString() {
-        assertEquals(TweetDateUtils.INVALID_DATE,
-                TweetDateUtils.apiTimeToLong(""));
-    }
-
-    @Test
-    public void testApiTimeToLong_nullString() {
-        assertEquals(TweetDateUtils.INVALID_DATE,
-                TweetDateUtils.apiTimeToLong(null));
-    }
-
-    @Test
-    public void testApiTimeToLong_invalidString() {
-        assertEquals(TweetDateUtils.INVALID_DATE,
-                TweetDateUtils.apiTimeToLong("11111"));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_now() {
-        assertEquals("0s",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, NOW_IN_MILLIS));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_secondsAgo() {
-        final long tenSecondsAgo = NOW_IN_MILLIS - DateUtils.SECOND_IN_MILLIS * 10;
-        assertEquals("10s",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, tenSecondsAgo));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_minutesAgo() {
-        final long twoMinutesAgo = NOW_IN_MILLIS - DateUtils.MINUTE_IN_MILLIS * 2;
-        assertEquals("2m",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoMinutesAgo));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_hoursAgo() {
-        final long twoHoursAgo = NOW_IN_MILLIS - DateUtils.HOUR_IN_MILLIS * 2;
-        assertEquals("2h",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoHoursAgo));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_daysAgo() {
-        final long twoDaysAgo = NOW_IN_MILLIS - DateUtils.DAY_IN_MILLIS * 2;
-        assertEquals("Mar 18",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoDaysAgo));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_lessThanAYearAgoWithinSameYear() {
-        final long sixtyDaysAgo = NOW_IN_MILLIS - DateUtils.DAY_IN_MILLIS * 60;
-        assertEquals("Jan 19",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, sixtyDaysAgo));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_moreThanAYearAgo() {
-        final long twoYearsAgo = NOW_IN_MILLIS - DateUtils.DAY_IN_MILLIS * 730;
-        assertEquals("03/20/12",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, twoYearsAgo));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_inTheFuture() {
-        final long twoYearsIntoTheFuture = NOW_IN_MILLIS + DateUtils.DAY_IN_MILLIS * 730;
-        assertEquals("03/19/16",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS,
-                        twoYearsIntoTheFuture));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_negativeTime() {
-        final long wayInthePast = -DateUtils.DAY_IN_MILLIS;
-        assertEquals("12/31/69",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, wayInthePast));
-    }
-
-    @Test
-    public void testGetRelativeTimeString_zeroTime() {
-        assertEquals("01/01/70",
-                TweetDateUtils.getRelativeTimeString(resources, NOW_IN_MILLIS, 0));
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
deleted file mode 100644
index c5a46000..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.os.Handler;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.services.FavoriteService;
-import com.twitter.sdk.android.core.services.StatusesService;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mockito;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetRepositoryTest {
-    private static final Long anyId = 123L;
-    private static final List<Long> anyIds = new ArrayList<>();
-    private TwitterCore mockTwitterCore;
-    private TwitterApiClient mockApiClient;
-    private FavoriteService mockFavoriteService;
-    private StatusesService mockStatusesService;
-    private SessionManager<TwitterSession> mockSessionManager;
-    private Handler mockHandler;
-    private TweetRepository tweetRepository;
-
-    @Before
-    public void setUp() throws Exception {
-        anyIds.add(anyId);
-        mockTwitterCore = mock(TwitterCore.class);
-        mockApiClient = mock(TwitterApiClient.class);
-        mockStatusesService = mock(StatusesService.class, Mockito.RETURNS_MOCKS);
-        when(mockApiClient.getStatusesService()).thenReturn(mockStatusesService);
-        mockFavoriteService = mock(FavoriteService.class, Mockito.RETURNS_MOCKS);
-        when(mockApiClient.getFavoriteService()).thenReturn(mockFavoriteService);
-        when(mockTwitterCore.getApiClient(any(TwitterSession.class))).thenReturn(mockApiClient);
-        when(mockTwitterCore.getApiClient()).thenReturn(mockApiClient);
-        mockSessionManager = mock(SessionManager.class);
-        when(mockSessionManager.getActiveSession()).thenReturn(mock(TwitterSession.class));
-        mockHandler = mock(Handler.class);
-        tweetRepository = new TweetRepository(mockHandler, mockSessionManager, mockTwitterCore);
-    }
-
-    @Test
-    public void testFavoriteDelegation() {
-        tweetRepository.favorite(anyId, mock(Callback.class));
-        verify(mockFavoriteService).create(anyId, false);
-    }
-
-    @Test
-    public void testUnfavoriteDelegation() {
-        tweetRepository.unfavorite(anyId, mock(Callback.class));
-        verify(mockFavoriteService).destroy(anyId, false);
-    }
-
-    @Test
-    public void testRetweetDelegation() {
-        tweetRepository.retweet(anyId, mock(Callback.class));
-        verify(mockStatusesService).retweet(anyId, false);
-    }
-
-    @Test
-    public void testUnretweetDelegation() {
-        tweetRepository.unretweet(anyId, mock(Callback.class));
-        verify(mockStatusesService).unretweet(anyId, false);
-    }
-
-    @Test
-    public void testLoadTweetDelegation() {
-        tweetRepository.loadTweet(anyId, mock(Callback.class));
-        verify(mockStatusesService).show(anyId, null, null, null);
-    }
-
-    @Test
-    public void testLoadTweetsDelegation() {
-        tweetRepository.loadTweets(anyIds, mock(Callback.class));
-        verify(mockStatusesService).lookup(anyId.toString(), null, null, null);
-    }
-
-    @Test
-    public void testGetUserSession_withActiveUserSession() {
-        final Callback<TwitterSession> cb = mock(Callback.class);
-        tweetRepository.getUserSession(cb);
-
-        verify(cb).success(any(Result.class));
-    }
-
-    @Test
-    public void testGetUserSession_withNoActiveUserSession() {
-        final Callback<TwitterSession> cb = mock(Callback.class);
-        when(mockSessionManager.getActiveSession()).thenReturn(null);
-        tweetRepository.getUserSession(cb);
-
-        verify(cb).failure(any(TwitterAuthException.class));
-    }
-
-    @Test
-    public void testSingleTweetCallback_callsUpdateCache() {
-        final TweetRepository mockRepo = mock(TweetRepository.class);
-        final TweetRepository.SingleTweetCallback callback
-                = mockRepo.new SingleTweetCallback(null);
-        callback.success(new Result<>(mock(Tweet.class), null));
-        verify(mockRepo, times(1)).updateCache(any(Tweet.class));
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
deleted file mode 100644
index ab756e89..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
+++ /dev/null
@@ -1,390 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.text.SpannableStringBuilder;
-import android.text.style.ClickableSpan;
-
-import com.twitter.sdk.android.core.models.HashtagEntity;
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.MentionEntity;
-import com.twitter.sdk.android.core.models.SymbolEntity;
-import com.twitter.sdk.android.core.models.UrlEntity;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotEquals;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetTextLinkifierTest {
-    static final String BASE_TEXT = "just setting up my twttr";
-    static final String TEST_RLT_STRING = "ייִדיש משלי https://t.co/sfb4Id7esk\u200E";
-
-    @Test
-    public void testLinkifyUrls_nullFormattedTweetText() {
-        try {
-            TweetTextLinkifier.linkifyUrls(null, null, 0, 0, true, true);
-        } catch (Exception e) {
-            fail("threw unexpected exception");
-        }
-    }
-
-    @Test
-    public void testLinkifyUrls_newFormattedTweetText() {
-        try {
-            TweetTextLinkifier.linkifyUrls(new FormattedTweetText(), null, 0, 0, true, true);
-        } catch (Exception e) {
-            fail("threw unexpected exception");
-        }
-    }
-
-    @Test
-    public void testLinkifyUrls_oneUrlEntity() {
-        final String url = "http://t.co/foo";
-        final String displayUrl = "dev.twitter.com";
-        final String fullText = BASE_TEXT + " " + "http://t.co/foo";
-        final UrlEntity urlEntity
-                = EntityFactory.newUrlEntity(fullText, url, displayUrl);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        final String displayUrlFromEntity =
-                linkifiedText.subSequence(urlEntity.getStart(), urlEntity.getEnd()).toString();
-        assertEquals(urlEntity.displayUrl, displayUrlFromEntity);
-    }
-
-    @Test
-    public void testLinkifyUrls_oneInvalidUrlEntity() {
-        final String fullText = "";
-        final UrlEntity urlEntity = new UrlEntity("x z", "y", "z", -1, 30);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        assertEquals("", linkifiedText.toString());
-    }
-
-    @Test
-    public void testLinkifyUrls_linkClickListener() {
-        final String url = "http://t.co/foo";
-        final String displayUrl = "dev.twitter.com";
-        final String fullText = BASE_TEXT + " " + "http://t.co/foo";
-
-        final LinkClickListener mockClickListener = mock(LinkClickListener.class);
-
-        final UrlEntity urlEntity =
-                EntityFactory.newUrlEntity(fullText, url, displayUrl);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
-
-        final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
-                        true);
-        final ClickableSpan[] clickables =
-                linkifiedText.getSpans(urlEntity.getStart(), urlEntity.getEnd(),
-                        ClickableSpan.class);
-        assertEquals(1, clickables.length);
-    }
-
-    @Test
-    public void testLinkifyHashtags_oneHashtagEntity() {
-        final String hashtag = "TwitterForGood";
-        final String fullHashtag = "#" + hashtag;
-        final String fullText = BASE_TEXT + " " + fullHashtag;
-        final HashtagEntity hashtagEntity = EntityFactory.newHashtagEntity(fullText, hashtag);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.hashtagEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
-                hashtagEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        final String displayUrlFromEntity = linkifiedText.subSequence(hashtagEntity.getStart(),
-                hashtagEntity.getEnd()).toString();
-        assertEquals(fullHashtag, displayUrlFromEntity);
-    }
-
-    @Test
-    public void testLinkifyHashtags_linkClickListener() {
-        final String hashtag = "TwitterForGood";
-        final String fullText = BASE_TEXT + " #" + hashtag;
-
-        final LinkClickListener mockClickListener = mock(LinkClickListener.class);
-
-        final HashtagEntity hashtagEntity = EntityFactory.newHashtagEntity(fullText, hashtag);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.hashtagEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
-                hashtagEntity));
-
-        final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
-                        true);
-        final ClickableSpan[] clickables =
-                linkifiedText.getSpans(hashtagEntity.getStart(), hashtagEntity.getEnd(),
-                        ClickableSpan.class);
-        assertEquals(1, clickables.length);
-    }
-
-    @Test
-    public void testLinkifyMentions_oneMentionEntity() {
-        final String mention = "TwitterDev";
-        final String fullMention = "@" + mention;
-        final String fullText = BASE_TEXT + " " + fullMention;
-        final MentionEntity mentionEntity = EntityFactory.newMentionEntity(fullText, mention);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.mentionEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
-                mentionEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        final String displayUrlFromEntity = linkifiedText.subSequence(mentionEntity.getStart(),
-                mentionEntity.getEnd()).toString();
-        assertEquals(fullMention, displayUrlFromEntity);
-    }
-
-    @Test
-    public void testLinkifyMentions_linkClickListener() {
-        final String mention = "TwitterDev";
-        final String fullText = BASE_TEXT + " @" + mention;
-
-        final LinkClickListener mockClickListener = mock(LinkClickListener.class);
-
-        final MentionEntity mentionEntity = EntityFactory.newMentionEntity(fullText, mention);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.mentionEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
-                mentionEntity));
-
-        final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
-                        true);
-        final ClickableSpan[] clickables =
-                linkifiedText.getSpans(mentionEntity.getStart(), mentionEntity.getEnd(),
-                        ClickableSpan.class);
-        assertEquals(1, clickables.length);
-    }
-
-    @Test
-    public void testLinkifySymbols_oneSymbolEntity() {
-        final String symbol = "TWTR";
-        final String fullSymbol = "$" + symbol;
-        final String fullText = BASE_TEXT + " " + fullSymbol;
-        final SymbolEntity symbolEntity = EntityFactory.newSymbolEntity(fullText, symbol);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.symbolEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
-                symbolEntity));
-
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-        final String displayUrlFromEntity = linkifiedText.subSequence(symbolEntity.getStart(),
-                symbolEntity.getEnd()).toString();
-        assertEquals(fullSymbol, displayUrlFromEntity);
-    }
-
-    @Test
-    public void testLinkifySymbols_linkClickListener() {
-        final String symbol = "TWTR";
-        final String fullText = BASE_TEXT + " $" + symbol;
-
-        final LinkClickListener mockClickListener = mock(LinkClickListener.class);
-
-        final SymbolEntity symbolEntity = EntityFactory.newSymbolEntity(fullText, symbol);
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = fullText;
-        formattedText.symbolEntities.add(FormattedUrlEntity.createFormattedUrlEntity(
-                symbolEntity));
-
-        final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true,
-                        true);
-        final ClickableSpan[] clickables =
-                linkifiedText.getSpans(symbolEntity.getStart(), symbolEntity.getEnd(),
-                        ClickableSpan.class);
-        assertEquals(1, clickables.length);
-    }
-
-    @Test
-    public void testLinkifyUrls_verifyPhotoOnlyStrippedFromEnd() {
-        final FormattedTweetText formattedText = setupPicTwitterEntities();
-        final FormattedMediaEntity lastPhotoUrl = formattedText.mediaEntities.get(0);
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
-
-        // make sure we are stripping out a photo entity since it is the only media entity
-        // that we can render inline
-        assertEquals("photo", lastPhotoUrl.type);
-        // assert that we do not strip it here and display it in the middle
-        assertTrue(linkifiedText.toString().contains(lastPhotoUrl.displayUrl));
-    }
-
-    @Test
-    public void testGetEntityToStrip_withLtrMarker() {
-        final String result = TweetTextLinkifier.stripLtrMarker(TEST_RLT_STRING);
-
-        assertNotEquals(TEST_RLT_STRING, result);
-        assertFalse(result.endsWith(Character.toString('\u200E')));
-    }
-
-    @Test
-    public void testGetEntityToStrip_withoutLtrMarker() {
-        final String result = TweetTextLinkifier.stripLtrMarker(BASE_TEXT);
-
-        assertEquals(BASE_TEXT, result);
-        assertFalse(result.endsWith(Character.toString('\u200E')));
-    }
-
-    @Test
-    public void testIsPhotoEntity_withPhotoUrl() {
-        final MediaEntity mediaEntity = new MediaEntity("http://t.co/PFHCdlr4i0", null,
-                "pic.twitter.com/abc", 27, 49, 0L, null, null, null, null, 0L, null, "photo", null,
-                "");
-        final FormattedUrlEntity formattedUrlEntity = new FormattedMediaEntity(mediaEntity);
-
-        assertTrue(TweetTextLinkifier.isPhotoEntity(formattedUrlEntity));
-    }
-
-    @Test
-    public void testIsQuotedStatus_withQuotedStatusUrl() {
-        final UrlEntity urlEntity = new UrlEntity("https://t.co/kMXdOEnVMg",
-                "https://twitter.com/nasajpl/status/634475698174865408",
-                "twitter.com/nasajpl/status\u2026", 50, 72);
-        final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(urlEntity.getStart(),
-                urlEntity.getEnd(), urlEntity.displayUrl, urlEntity.url, urlEntity.expandedUrl);
-        assertTrue(TweetTextLinkifier.isQuotedStatus(formattedUrlEntity));
-    }
-
-    @Test
-    public void testIsVineCard_withVineUrl() {
-        final UrlEntity urlEntity = new UrlEntity("https://t.co/NdpqweoNbi",
-                "https://vine.co/v/eVmZVXbeDK1", "vine.co/v/eVmZVXbeDK1", 1, 23);
-        final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(urlEntity.getStart(),
-                urlEntity.getEnd(), urlEntity.displayUrl, urlEntity.url, urlEntity.expandedUrl);
-
-        assertTrue(TweetTextLinkifier.isVineCard(formattedUrlEntity));
-    }
-
-    private FormattedTweetText setupPicTwitterEntities() {
-        final String text = "first link is a pictwitter http://t.co/PFHCdlr4i0 " +
-                "http://t.co/V3hLRdFdeN final text";
-
-        final MediaEntity mediaEntity = new MediaEntity("http://t.co/PFHCdlr4i0", null,
-                "pic.twitter.com/abc", 27, 49, 0L, null, null, null, null, 0L, null, "photo", null,
-                "");
-
-        final UrlEntity urlEntity = new UrlEntity("http://t.co/V3hLRdFdeN", null, "example.com", 50,
-                72);
-
-        final FormattedTweetText formattedText = new FormattedTweetText();
-        formattedText.text = text;
-        formattedText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
-        formattedText.mediaEntities.add(new FormattedMediaEntity(mediaEntity));
-
-        return formattedText;
-    }
-
-    @Test
-    public void testTrimEnd_withoutTrailingSpace() {
-        assertSame(BASE_TEXT, TweetTextLinkifier.trimEnd(BASE_TEXT));
-    }
-
-    @Test
-    public void testTrimEnd_withTrailingSpace() {
-        final CharSequence result = TweetTextLinkifier.trimEnd(BASE_TEXT + "\n\r\t ");
-        assertEquals(BASE_TEXT, result);
-        assertNotSame(BASE_TEXT, result);
-    }
-
-    /*
-     * mergeAndSortEntities method
-     */
-    @Test
-    public void testMergeAndSortEntities_emptyEntities() {
-        final List<FormattedUrlEntity> urls = new ArrayList<>();
-        final List<FormattedMediaEntity> media = new ArrayList<>();
-        final List<FormattedUrlEntity> hashtags = new ArrayList<>();
-        final List<FormattedUrlEntity> mentions = new ArrayList<>();
-        final List<FormattedUrlEntity> symbols = new ArrayList<>();
-        assertEquals(urls, TweetTextLinkifier.mergeAndSortEntities(urls, media, hashtags,
-                mentions, symbols));
-    }
-
-    @Test
-    public void testMergeAndSortEntities_sortUrlsAndMediaAndHashtags() {
-        final List<FormattedUrlEntity> urls = new ArrayList<>();
-        final UrlEntity urlEntity = TestFixtures.newUrlEntity(2, 5);
-        final FormattedUrlEntity adjustedUrl = FormattedUrlEntity.createFormattedUrlEntity(
-                urlEntity);
-        urls.add(adjustedUrl);
-
-        final List<FormattedMediaEntity> media = new ArrayList<>();
-        final MediaEntity photo = TestFixtures.newMediaEntity(1, 5, "photo");
-        final FormattedMediaEntity adjustedPhoto = new FormattedMediaEntity(photo);
-        media.add(adjustedPhoto);
-
-        final List<FormattedUrlEntity> hashtags = new ArrayList<>();
-        final HashtagEntity hashtag = TestFixtures.newHashtagEntity("TwitterForGood", 0, 13);
-        final FormattedUrlEntity adjustedHashtag =
-                FormattedUrlEntity.createFormattedUrlEntity(hashtag);
-        hashtags.add(adjustedHashtag);
-
-        final List<FormattedUrlEntity> mentions = new ArrayList<>();
-        final MentionEntity mention = TestFixtures.newMentionEntity("twitterdev", 0, 9);
-        final FormattedUrlEntity adjustedMention =
-                FormattedUrlEntity.createFormattedUrlEntity(mention);
-        mentions.add(adjustedMention);
-
-        final List<FormattedUrlEntity> symbols = new ArrayList<>();
-        final SymbolEntity symbol = TestFixtures.newSymbolEntity("TWTR", 0, 3);
-        final FormattedUrlEntity adjustedSymbol =
-                FormattedUrlEntity.createFormattedUrlEntity(symbol);
-        symbols.add(adjustedSymbol);
-
-        final List<? extends FormattedUrlEntity> combined
-                = TweetTextLinkifier.mergeAndSortEntities(urls, media, hashtags, mentions, symbols);
-        assertEquals(adjustedPhoto, combined.get(3));
-        assertEquals(adjustedUrl, combined.get(4));
-        assertEquals(adjustedHashtag, combined.get(0));
-        assertEquals(adjustedMention, combined.get(1));
-        assertEquals(adjustedSymbol, combined.get(2));
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java
deleted file mode 100644
index ac8a1e4d..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextUtilsTest.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-import com.twitter.sdk.android.core.models.UrlEntity;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetTextUtilsTest {
-    private static final String UNESCAPED_TWEET_TEXT = ">Hello there <\"What is a?\" &;";
-    private static final String ESCAPED_TWEET_TEXT
-            = "&gt;Hello there &lt;&quot;What is a?&quot; &;";
-    private static final String ESCAPED_TWEET_TEXT_WITH_EMOJI =
-            "\ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb, community \ud83d\udc93 &amp; https://t.co/oCkwy2C80m";
-
-    // test ported from:
-    // twitter-android/app/src/androidTest/java/com/twitter/library/util/EntitiesTests.java
-    // tests fixing up entity indices after unescaping html characters in tweet text
-    @Test
-    public void testFormat_singleEscaping() {
-        final FormattedTweetText formattedTweetText = setupAdjustedTweet();
-        final Tweet tweet = setupTweetToBeFormatted();
-        TweetTextUtils.format(formattedTweetText, tweet);
-
-        assertEquals(UNESCAPED_TWEET_TEXT, formattedTweetText.text);
-        assertEquals("Hello", 1, formattedTweetText.urlEntities.get(0).start);
-        assertEquals("Hello", 5, formattedTweetText.urlEntities.get(0).end);
-        assertEquals("There", 7, formattedTweetText.urlEntities.get(1).start);
-        assertEquals("There", 11, formattedTweetText.urlEntities.get(1).end);
-
-        assertEquals("What", 15, formattedTweetText.urlEntities.get(2).start);
-        assertEquals("What", 18, formattedTweetText.urlEntities.get(2).end);
-
-        assertEquals("is", 20, formattedTweetText.urlEntities.get(3).start);
-        assertEquals("is", 21, formattedTweetText.urlEntities.get(3).end);
-
-        assertEquals("a", 23, formattedTweetText.urlEntities.get(4).start);
-        assertEquals("a", 23, formattedTweetText.urlEntities.get(4).end);
-    }
-
-    @Test
-    public void testFormat_htmlEntityEdgeCases() {
-        final FormattedTweetText formattedTweetText = new FormattedTweetText();
-
-        Tweet tweet = new TweetBuilder().setText("&amp;").build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&", formattedTweetText.text);
-
-        tweet = new TweetBuilder().setText("&#;").build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&#;", formattedTweetText.text);
-
-        tweet = new TweetBuilder().setText("&#34;").build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("\"", formattedTweetText.text);
-
-        tweet = new TweetBuilder().setText("&#x22;").build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("\"", formattedTweetText.text);
-
-        tweet = new TweetBuilder().setText("&lt; & Larry &gt; &").build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("< & Larry > &", formattedTweetText.text);
-
-        tweet = new TweetBuilder().setText("&&amp;").build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&", formattedTweetText.text);
-
-        tweet = new TweetBuilder().setText("&&&&&&&&amp;").build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&&&&&&&", formattedTweetText.text);
-
-        tweet = new TweetBuilder().setText("&&&&gt&&lt&&amplt;").build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-        assertEquals("&&&&gt&&lt&&amplt;", formattedTweetText.text);
-    }
-
-    @Test
-    public void testFormat_withEmojiAndEscapedHtml() {
-        final FormattedTweetText formattedTweetText = new FormattedTweetText();
-        final UrlEntity url = TestFixtures.newUrlEntity(24, 47);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
-
-        final Tweet tweet = new TweetBuilder()
-                .setText(ESCAPED_TWEET_TEXT_WITH_EMOJI)
-                .build();
-        TweetTextUtils.format(formattedTweetText, tweet);
-
-        assertEquals(24, formattedTweetText.urlEntities.get(0).start);
-        assertEquals(47, formattedTweetText.urlEntities.get(0).end);
-    }
-
-    private Tweet setupTweetToBeFormatted() {
-        return new TweetBuilder().setText(ESCAPED_TWEET_TEXT).build();
-    }
-
-    private FormattedTweetText setupAdjustedTweet() {
-        final FormattedTweetText formattedTweetText = new FormattedTweetText();
-
-        UrlEntity url = TestFixtures.newUrlEntity(4, 8);
-        // Hello
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
-
-        // There
-        url = TestFixtures.newUrlEntity(10, 14);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
-
-        // What
-        url = TestFixtures.newUrlEntity(26, 29);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
-
-        // is
-        url = TestFixtures.newUrlEntity(31, 32);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
-
-        // a
-        url = TestFixtures.newUrlEntity(34, 34);
-        formattedTweetText.urlEntities.add(FormattedUrlEntity.createFormattedUrlEntity(url));
-
-        return formattedTweetText;
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java
deleted file mode 100644
index 2981801c..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java
+++ /dev/null
@@ -1,221 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.services.ListService;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-public class TwitterListTimelineTest {
-    private static final Integer REQUIRED_DEFAULT_ITEMS_PER_REQUEST = 30;
-    private static final Long TEST_LIST_ID = 128271137L;
-    private static final String TEST_SLUG = "cool-accounts";
-    private static final Long TEST_OWNER_ID = 623265148L;
-    private static final String TEST_OWNER_SCREEN_NAME = "dghubble";
-    private static final Integer TEST_ITEMS_PER_REQUEST = 100;
-    private static final Long TEST_SINCE_ID = 1000L;
-    private static final Long TEST_MAX_ID = 1111L;
-
-    TwitterCore twitterCore;
-    TwitterApiClient apiClient;
-    ListService listService;
-
-    @Before
-    public void setUp() {
-        twitterCore = mock(TwitterCore.class);
-        apiClient = mock(TwitterApiClient.class);
-        listService = mock(ListService.class, new MockCallAnswer());
-
-        when(apiClient.getListService()).thenReturn(listService);
-        when(twitterCore.getApiClient()).thenReturn(apiClient);
-    }
-
-    @Test
-    public void testConstructor() {
-        final TwitterListTimeline timeline = new TwitterListTimeline(twitterCore, TEST_LIST_ID,
-                TEST_SLUG, TEST_OWNER_ID, TEST_OWNER_SCREEN_NAME, TEST_ITEMS_PER_REQUEST, true);
-        assertEquals(TEST_LIST_ID, timeline.listId);
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_ID, timeline.ownerId);
-        assertEquals(TEST_OWNER_SCREEN_NAME, timeline.ownerScreenName);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeRetweets);
-    }
-
-    @Test
-    // most api arguments should default to Null to allow the backend to determine default behavior
-    public void testConstructor_defaults() {
-        final TwitterListTimeline timeline = new TwitterListTimeline(twitterCore, TEST_LIST_ID,
-                null, null, null, null, null);
-        assertEquals(TEST_LIST_ID, timeline.listId);
-        assertNull(timeline.slug);
-        assertNull(timeline.ownerId);
-        assertNull(timeline.ownerScreenName);
-        assertNull(timeline.maxItemsPerRequest);
-        assertNull(timeline.includeRetweets);
-    }
-
-    @Test
-    public void testCreateListTimelineRequest() {
-        // build a timeline with test params
-        final TwitterListTimeline timeline = new TwitterListTimeline(twitterCore, TEST_LIST_ID,
-                TEST_SLUG, TEST_OWNER_ID, TEST_OWNER_SCREEN_NAME, TEST_ITEMS_PER_REQUEST, true);
-
-        timeline.createListTimelineRequest(TEST_SINCE_ID, TEST_MAX_ID);
-
-        // assert twitterListTimeline call is made with the correct arguments
-        verify(twitterCore.getApiClient().getListService()).statuses(eq(TEST_LIST_ID),
-                eq(TEST_SLUG), eq(TEST_OWNER_SCREEN_NAME), eq(TEST_OWNER_ID), eq(TEST_SINCE_ID),
-                eq(TEST_MAX_ID), eq(TEST_ITEMS_PER_REQUEST), eq(true), eq(true));
-    }
-
-    /* Builder */
-    @Test
-    public void testBuilder_viaLlistId() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
-                .id(TEST_LIST_ID)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .includeRetweets(true)
-                .build();
-        assertEquals(TEST_LIST_ID, timeline.listId);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeRetweets);
-    }
-
-    @Test
-    public void testBuilder_viaSlugOwnerId() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
-                .slugWithOwnerId(TEST_SLUG, TEST_OWNER_ID)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .includeRetweets(true)
-                .build();
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_ID, timeline.ownerId);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeRetweets);
-    }
-
-    @Test
-    public void testBuilder_viaSlugOwnerScreenName() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
-                .slugWithOwnerScreenName(TEST_SLUG, TEST_OWNER_SCREEN_NAME)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .includeRetweets(true)
-                .build();
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_SCREEN_NAME, timeline.ownerScreenName);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeRetweets);
-    }
-
-    @Test
-    // api arguments should default to Null to allow the backend to determine default behavior
-    public void testBuilder_defaults() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
-                .id(TEST_LIST_ID)
-                .build();
-        assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertNull(timeline.includeRetweets);
-    }
-
-    @Test
-    public void testBuilder_listId() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
-                .id(TEST_LIST_ID)
-                .build();
-        assertEquals(TEST_LIST_ID, timeline.listId);
-    }
-
-    @Test
-    public void testBuilder_slugWithOwnerId() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
-                .slugWithOwnerId(TEST_SLUG, TEST_OWNER_ID)
-                .build();
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_ID, timeline.ownerId);
-    }
-
-    @Test
-    public void testBuilder_slugWithOwnerScreenName() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
-                .slugWithOwnerScreenName(TEST_SLUG, TEST_OWNER_SCREEN_NAME)
-                .build();
-        assertEquals(TEST_SLUG, timeline.slug);
-        assertEquals(TEST_OWNER_SCREEN_NAME, timeline.ownerScreenName);
-    }
-
-    @Test
-    public void testBuilder_maxItemsPerRequest() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore)
-                .id(TEST_LIST_ID)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .build();
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-    }
-
-    @Test
-    public void testBuilder_includeRetweets() {
-        TwitterListTimeline timeline = new TwitterListTimeline.Builder(twitterCore).id(TEST_LIST_ID)
-                .build();
-        assertNull(timeline.includeRetweets);
-        timeline = new TwitterListTimeline.Builder(twitterCore)
-                .id(TEST_LIST_ID).includeRetweets(true)
-                .build();
-        assertTrue(timeline.includeRetweets);
-        timeline = new TwitterListTimeline.Builder(twitterCore)
-                .id(TEST_LIST_ID)
-                .includeRetweets(false)
-                .build();
-        assertFalse(timeline.includeRetweets);
-    }
-
-    @Test
-    public void testBuilder_noIdOrSlugOwnerPair() {
-        try {
-            new TwitterListTimeline.Builder(twitterCore).build();
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalStateException e) {
-            assertEquals("must specify either a list id or slug/owner pair", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testBuilder_bothIdAndSlugOwnerPair() {
-        try {
-            new TwitterListTimeline.Builder(twitterCore)
-                    .id(TEST_LIST_ID)
-                    .slugWithOwnerId(TEST_SLUG, TEST_OWNER_ID)
-                    .build();
-        } catch (IllegalStateException e) {
-            assertEquals("must specify either a list id or slug/owner pair", e.getMessage());
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java
deleted file mode 100644
index d559ef72..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java
+++ /dev/null
@@ -1,194 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.services.StatusesService;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.isNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-public class UserTimelineTest {
-    private static final Integer REQUIRED_DEFAULT_ITEMS_PER_REQUEST = 30;
-    private static final Integer TEST_ITEMS_PER_REQUEST = 100;
-    private static final Long TEST_SINCE_ID = 1000L;
-    private static final Long TEST_MAX_ID = 1111L;
-    private static final String REQUIRED_IMPRESSION_SECTION = "user";
-
-    TwitterCore twitterCore;
-    TwitterApiClient apiClient;
-    StatusesService statusesService;
-
-    @Before
-    public void setUp() {
-        twitterCore = mock(TwitterCore.class);
-        apiClient = mock(TwitterApiClient.class);
-        statusesService = mock(StatusesService.class, new MockCallAnswer());
-
-        when(apiClient.getStatusesService()).thenReturn(statusesService);
-        when(twitterCore.getApiClient()).thenReturn(apiClient);
-    }
-
-    @Test
-    public void testConstructor() {
-        final UserTimeline timeline = new UserTimeline(twitterCore, TestFixtures.TEST_USER.id,
-                TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, true, true);
-        assertEquals((Long) TestFixtures.TEST_USER.id, timeline.userId);
-        assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeReplies);
-        assertTrue(timeline.includeRetweets);
-    }
-
-    @Test
-    // most api arguments should default to Null to allow the backend to determine default behavior
-    public void testConstructor_defaults() {
-        final UserTimeline timeline = new UserTimeline(twitterCore, null, null, null, null, null);
-        assertNull(timeline.userId);
-        assertNull(timeline.screenName);
-        assertNull(timeline.maxItemsPerRequest);
-        assertNull(timeline.includeRetweets);
-        // parameters which default to false
-        assertFalse(timeline.includeReplies);
-    }
-
-    @Test
-    public void testNext_createsCorrectRequest() {
-        final UserTimeline timeline = spy(new UserTimeline(twitterCore, TestFixtures.TEST_USER.id,
-                TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null));
-        timeline.next(TEST_SINCE_ID, mock(Callback.class));
-        verify(timeline, times(1)).createUserTimelineRequest(eq(TEST_SINCE_ID),
-                isNull(Long.class));
-    }
-
-    @Test
-    public void testPrevious_createsCorrectRequest() {
-        final UserTimeline timeline = spy(new UserTimeline(twitterCore, TestFixtures.TEST_USER.id,
-                TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null));
-        timeline.previous(TEST_MAX_ID, mock(Callback.class));
-        // intentionally decrementing the maxId which is passed through to the request
-        verify(timeline, times(1)).createUserTimelineRequest(isNull(Long.class),
-                eq(TEST_MAX_ID - 1));
-    }
-
-    @Test
-    public void testCreateUserTimelineRequest() {
-        // build a timeline with test params
-        final UserTimeline timeline = new UserTimeline(twitterCore, TestFixtures.TEST_USER.id,
-                TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null);
-
-        // create a request directly
-        timeline.createUserTimelineRequest(TEST_SINCE_ID, TEST_MAX_ID);
-
-        // assert userTimeline call is made with the correct arguments
-        verify(twitterCore.getApiClient().getStatusesService())
-                .userTimeline(eq(TestFixtures.TEST_USER.id),
-                        eq(TestFixtures.TEST_USER.screenName), eq(TEST_ITEMS_PER_REQUEST),
-                        eq(TEST_SINCE_ID), eq(TEST_MAX_ID), eq(false), eq(true),
-                        isNull(Boolean.class), isNull(Boolean.class));
-    }
-
-    /* Builder */
-    @Test
-    public void testBuilder() {
-        final UserTimeline timeline = new UserTimeline.Builder(twitterCore)
-                .userId(TestFixtures.TEST_USER.id)
-                .screenName(TestFixtures.TEST_USER.screenName)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .includeReplies(true)
-                .includeRetweets(true)
-                .build();
-        assertEquals((Long) TestFixtures.TEST_USER.id, timeline.userId);
-        assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertTrue(timeline.includeReplies);
-        assertTrue(timeline.includeRetweets);
-    }
-
-    @Test
-    // api arguments should default to Null to allow the backend to determine default behavior
-    public void testBuilder_defaults() {
-        final UserTimeline timeline = new UserTimeline.Builder(twitterCore).build();
-        assertNull(timeline.userId);
-        assertNull(timeline.screenName);
-        assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-        assertNull(timeline.includeRetweets);
-        // parameters which default to false
-        assertFalse(timeline.includeReplies);
-    }
-
-    @Test
-    public void testBuilder_userId() {
-        final Long USER_ID = TestFixtures.TEST_USER.id;
-        final UserTimeline timeline = new UserTimeline.Builder(twitterCore)
-                .userId(USER_ID)
-                .build();
-        assertEquals(USER_ID, timeline.userId);
-    }
-
-    @Test
-    public void testBuilder_screenName() {
-        final UserTimeline timeline = new UserTimeline.Builder(twitterCore)
-                .screenName(TestFixtures.TEST_USER.screenName)
-                .build();
-        assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
-    }
-
-    @Test
-    public void testBuilder_maxItemsPerRequest() {
-        final UserTimeline timeline = new UserTimeline.Builder(twitterCore)
-                .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
-                .build();
-        assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-    }
-
-    @Test
-    public void testBuilder_includeReplies() {
-        // null includeReplies defaults to false
-        UserTimeline timeline = new UserTimeline.Builder(twitterCore).build();
-        assertFalse(timeline.includeReplies);
-        timeline = new UserTimeline.Builder(twitterCore).includeReplies(true).build();
-        assertTrue(timeline.includeReplies);
-        timeline = new UserTimeline.Builder(twitterCore).includeReplies(false).build();
-        assertFalse(timeline.includeReplies);
-    }
-
-    @Test
-    public void testBuilder_includeRetweets() {
-        UserTimeline timeline = new UserTimeline.Builder(twitterCore).build();
-        assertNull(timeline.includeRetweets);
-        timeline = new UserTimeline.Builder(twitterCore).includeRetweets(true).build();
-        assertTrue(timeline.includeRetweets);
-        timeline = new UserTimeline.Builder(twitterCore).includeRetweets(false).build();
-        assertFalse(timeline.includeRetweets);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UtilsTest.java
deleted file mode 100644
index d61482c3..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UtilsTest.java
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class UtilsTest {
-
-    @Test
-    public void testNumberOrDefault_validNumber() {
-        assertEquals(Long.valueOf(123), Utils.numberOrDefault("123", -1L));
-    }
-
-    @Test
-    public void testNumberOrDefault_invalidNumber() {
-        assertEquals(Long.valueOf(-1L), Utils.numberOrDefault("abc", -1L));
-    }
-
-    @Test
-    public void testStringOrEmpty_validString() {
-        assertEquals("string", Utils.stringOrEmpty("string"));
-    }
-
-    @Test
-    public void testStringOrEmpty_nullString() {
-        assertEquals("", Utils.stringOrEmpty(null));
-    }
-
-    @Test
-    public void testStringOrDefault_validString() {
-        assertEquals("string", Utils.stringOrDefault("string", "default"));
-    }
-
-    @Test
-    public void testStringOrDefault_nullString() {
-        assertEquals("default", Utils.stringOrDefault(null, "default"));
-    }
-
-    @Test
-    public void testCharSeqOrEmpty_validCharSeq() {
-        assertEquals("string", Utils.charSeqOrEmpty("string"));
-    }
-
-    @Test
-    public void testCharSeqOrEmpty_nullCharSeq() {
-        assertEquals("", Utils.charSeqOrEmpty(null));
-    }
-
-    @Test
-    public void testCharSeqOrDefault_validCharSeq() {
-        assertEquals("string", Utils.charSeqOrDefault("string", "default"));
-    }
-
-    @Test
-    public void testCharSeqOrDefault_nullCharSeq() {
-        assertEquals("default", Utils.charSeqOrDefault(null, "default"));
-    }
-
-    @Test
-    public void testSortTweets() {
-        final List<Long> requestedIds = TestFixtures.TWEET_IDS;
-        final List<Tweet> tweets = new ArrayList<>(TestFixtures.UNORDERED_TWEETS);
-        final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_TWEETS, ordered);
-    }
-
-    // Tweet results will match the requested Tweet ids, duplicate requested ids duplicate Tweets.
-    @Test
-    public void testSortTweets_duplicateRequestedIds() {
-        final List<Long> requestedIds = TestFixtures.DUPLICATE_TWEET_IDS;
-        final List<Tweet> tweets = new ArrayList<>(TestFixtures.UNORDERED_TWEETS);
-        final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_DUPLICATE_TWEETS, ordered);
-    }
-
-    // Tweet results will match the requested Tweet ids, duplicate results ignored.
-    @Test
-    public void testSortTweets_duplicateTweets() {
-        final List<Long> requestedIds = TestFixtures.TWEET_IDS;
-        final List<Tweet> tweets = new ArrayList<>(TestFixtures.UNORDERED_DUPLICATE_TWEETS);
-        final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_TWEETS, ordered);
-    }
-
-    @Test
-    public void testSortTweets_missingTweets() {
-        final List<Long> requestedIds = TestFixtures.TWEET_IDS;
-        final List<Tweet> tweets = new ArrayList<>(TestFixtures.UNORDERED_MISSING_TWEETS);
-        final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_MISSING_TWEETS, ordered);
-    }
-
-    // Tweet result with an extra, unrequested Tweet, not included in the result.
-    @Test
-    public void testSortTweets_extraTweetsFirst() {
-        final List<Long> requestedIds = TestFixtures.TWEET_IDS;
-        final List<Tweet> tweets = new ArrayList<>(TestFixtures.UNORDERED_TWEETS);
-        tweets.add(TestFixtures.TEST_TWEET);
-
-        final List<Tweet> ordered = Utils.orderTweets(requestedIds, tweets);
-        assertEquals(TestFixtures.ORDERED_TWEETS, ordered);
-    }
-}
-
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java
deleted file mode 100644
index 9f1358aa..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import android.graphics.Color;
-import android.text.TextPaint;
-import android.view.View;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.verify;
-import static org.mockito.MockitoAnnotations.initMocks;
-
-@RunWith(RobolectricTestRunner.class)
-public class ClickableLinkSpanTest {
-
-    private static final int SELECTED_COLOR = 1;
-    private static final int LINK_COLOR = 2;
-
-    @Mock
-    private TextPaint textPaint;
-
-    private ClickableLinkSpan clickableLinkSpan;
-
-    @Before
-    public void before() {
-        initMocks(this);
-    }
-
-    @Test
-    public void testUpdateDrawState_shouldSetTextPaintDefaultColor() {
-        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR);
-        clickableLinkSpan.updateDrawState(textPaint);
-        verify(textPaint).setColor(textPaint.linkColor);
-        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
-    }
-
-    @Test
-    public void testUpdateDrawState_shouldSetTextPaintProvidedColor() {
-        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, false);
-        clickableLinkSpan.updateDrawState(textPaint);
-        verify(textPaint).setColor(LINK_COLOR);
-        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
-    }
-
-    @Test
-    public void testUpdateDrawState_shouldSetTextPaintUnderlined() {
-        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
-        clickableLinkSpan.updateDrawState(textPaint);
-        verify(textPaint).setUnderlineText(true);
-        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
-    }
-
-    @Test
-    public void testUpdateDrawState_shouldSetTextPaintBackground() {
-        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
-        clickableLinkSpan.select(true);
-        clickableLinkSpan.updateDrawState(textPaint);
-        verify(textPaint).setUnderlineText(true);
-        assertEquals(SELECTED_COLOR, textPaint.bgColor);
-    }
-
-    @Test
-    public void testSelect_shouldSetIsSelectedTrue() {
-        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
-        clickableLinkSpan.select(true);
-        assertTrue(clickableLinkSpan.isSelected());
-    }
-
-    @Test
-    public void testSelect_shouldSetIsSelectedFalse() {
-        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
-        clickableLinkSpan.select(false);
-        assertFalse(clickableLinkSpan.isSelected());
-    }
-
-    private static class TestClickableLinkSpan extends ClickableLinkSpan {
-        TestClickableLinkSpan(int selectedColor) {
-            super(selectedColor, 0, false, false);
-        }
-
-        TestClickableLinkSpan(int selectedColor, int linkColor, boolean underlined) {
-            super(selectedColor, linkColor, true, underlined);
-        }
-
-        @Override
-        public void onClick(View widget) {
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java
deleted file mode 100644
index 9da26fcb..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.FrameLayout;
-import android.widget.ProgressBar;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(RobolectricTestRunner.class)
-public class GalleryImageViewTest {
-    @Mock
-    SwipeToDismissTouchListener.Callback callback;
-    @Mock
-    Drawable drawable;
-    MultiTouchImageView imageView;
-    ProgressBar progressBar;
-    Bitmap bitmap;
-    GalleryImageView subject;
-
-    @Before
-    public void setUp() {
-        MockitoAnnotations.initMocks(this);
-
-        imageView = spy(new MultiTouchImageView(RuntimeEnvironment.application));
-        progressBar = spy(new ProgressBar(RuntimeEnvironment.application));
-        bitmap = Bitmap.createBitmap(10, 10, null);
-        subject = new GalleryImageView(RuntimeEnvironment.application, imageView, progressBar);
-    }
-
-    @Test
-    public void testConstructor() {
-        assertNotNull(subject.imageView);
-        assertNotNull(subject.progressBar);
-
-        FrameLayout.LayoutParams params;
-        params = (FrameLayout.LayoutParams) subject.imageView.getLayoutParams();
-        assertEquals(FrameLayout.LayoutParams.MATCH_PARENT, params.height);
-        assertEquals(FrameLayout.LayoutParams.MATCH_PARENT, params.width);
-        assertEquals(Gravity.CENTER, params.gravity);
-
-        params = (FrameLayout.LayoutParams) subject.progressBar.getLayoutParams();
-        assertEquals(FrameLayout.LayoutParams.WRAP_CONTENT, params.height);
-        assertEquals(FrameLayout.LayoutParams.WRAP_CONTENT, params.width);
-        assertEquals(Gravity.CENTER, params.gravity);
-    }
-
-    @Test
-    public void testSetSwipeToDismissCallback() {
-        subject.setSwipeToDismissCallback(callback);
-
-        verify(subject.imageView).setOnTouchListener(any(View.OnTouchListener.class));
-    }
-
-    @Test
-    public void testOnBitmapLoaded() {
-        subject.onBitmapLoaded(bitmap, null);
-
-        verify(subject.imageView).setImageBitmap(bitmap);
-        verify(subject.progressBar).setVisibility(View.GONE);
-    }
-
-    @Test
-    public void testOnBitmapFailed() {
-        reset(subject.imageView, subject.progressBar);
-
-        subject.onBitmapFailed(drawable);
-
-        verifyZeroInteractions(subject.imageView, subject.progressBar);
-    }
-
-    @Test
-    public void testOnPrepareLoad() {
-        subject.onPrepareLoad(drawable);
-
-        verify(subject.imageView).setImageResource(android.R.color.transparent);
-        verify(subject.progressBar).setVisibility(View.VISIBLE);
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java
deleted file mode 100644
index 1fb5cad9..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import android.view.View;
-
-import com.twitter.sdk.android.core.models.Card;
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.VideoInfo;
-import com.twitter.sdk.android.tweetui.TestFixtures;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class MediaBadgeViewTest {
-    MediaBadgeView view;
-
-    @Before
-    public void setUp() throws Exception {
-        view = new MediaBadgeView(RuntimeEnvironment.application);
-    }
-
-    @Test
-    public void testInitialViewState() {
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
-    }
-
-    @Test
-    public void testSetMediaEntity_withAnimatedGif() {
-        final MediaEntity entity = TestFixtures.createEntityWithAnimatedGif(null);
-        view.setMediaEntity(entity);
-
-        assertEquals(View.VISIBLE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
-    }
-
-    @Test
-    public void testSetMediaEntity_withVideo() {
-        final VideoInfo videoInfo = new VideoInfo(null, 1000, null);
-        final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
-        view.setMediaEntity(entity);
-
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.VISIBLE, view.videoDuration.getVisibility());
-        assertEquals("0:01", view.videoDuration.getText());
-    }
-
-    @Test
-    public void testSetMediaEntity_withNullVideoInfo() {
-        final MediaEntity entity = TestFixtures.createEntityWithVideo(null);
-        view.setMediaEntity(entity);
-
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.VISIBLE, view.videoDuration.getVisibility());
-        assertEquals("0:00", view.videoDuration.getText());
-    }
-
-    @Test
-    public void testSetMediaEntity_withImage() {
-        final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(null);
-        view.setMediaEntity(entity);
-
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
-    }
-
-    @Test
-    public void testSetEntity_withVineCard() {
-        final Card vineCard = TestFixtures.sampleValidVineCard();
-        view.setCard(vineCard);
-
-        assertEquals(View.VISIBLE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
-    }
-
-    @Test
-    public void testSetEntity_withInvalidVineCard() {
-        final Card vineCard = TestFixtures.sampleInvalidVineCard();
-        view.setCard(vineCard);
-
-        assertEquals(View.GONE, view.badge.getVisibility());
-        assertEquals(View.GONE, view.videoDuration.getVisibility());
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaTimeUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaTimeUtilsTest.java
deleted file mode 100644
index 50b0bd00..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/MediaTimeUtilsTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class MediaTimeUtilsTest {
-    static final int SECOND_IN_MS = 1000;
-    static final int MINUTE_IN_MS = 60000;
-    static final int HOUR_IN_MS = 3600000;
-
-    @Test
-    public void testFormatPlaybackTime() {
-        assertEquals("0:01", MediaTimeUtils.getPlaybackTime(SECOND_IN_MS));
-        assertEquals("1:01", MediaTimeUtils.getPlaybackTime(MINUTE_IN_MS + SECOND_IN_MS));
-        assertEquals("1:01:01", MediaTimeUtils
-                .getPlaybackTime(HOUR_IN_MS + MINUTE_IN_MS + SECOND_IN_MS));
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
deleted file mode 100644
index a2137f4b..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
+++ /dev/null
@@ -1,348 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-import com.twitter.sdk.android.core.models.TweetEntities;
-import com.twitter.sdk.android.core.models.VideoInfo;
-import com.twitter.sdk.android.tweetui.TestFixtures;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetMediaUtilsTest {
-    private static final int TEST_INDICES_START = 0;
-    private static final int TEST_INDICES_END = 13;
-    private static final String TEST_MEDIA_TYPE_PHOTO = "photo";
-    private static final String TEST_MEDIA_TYPE_VIDEO = "video";
-    private static final String TEST_MEDIA_TYPE_ANIMATED_GIF = "animated_gif";
-    private static final String TEST_CONTENT_TYPE_MP4 = "video/mp4";
-    private static final String TEST_CONTENT_TYPE_HLS = "application/x-mpegURL";
-    private static final String TEST_CONTENT_TYPE_DASH = "video/dash+xml";
-
-    @Test
-    public void testGetPhotoEntity_nullEntities() {
-        final Tweet tweet = new TweetBuilder().setEntities(null).build();
-        assertNull(TweetMediaUtils.getPhotoEntity(tweet));
-    }
-
-    @Test
-    public void testGetPhotoEntity_nullMedia() {
-        final TweetEntities entities = new TweetEntities(null, null, null, null, null);
-        final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-        assertNull(TweetMediaUtils.getPhotoEntity(tweet));
-    }
-
-    @Test
-    public void testGetPhotoEntity_emptyMedia() {
-        final TweetEntities entities = new TweetEntities(null, null, new ArrayList<>(),
-                null, null);
-        final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-        assertNull(TweetMediaUtils.getPhotoEntity(tweet));
-    }
-
-    @Test
-    public void testGetPhotoEntity_hasFinalPhotoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_PHOTO);
-        final ArrayList<MediaEntity> media = new ArrayList<>();
-        media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
-        final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-
-        assertEquals(entity, TweetMediaUtils.getPhotoEntity(tweet));
-    }
-
-    @Test
-    public void testGetPhotoEntity_nonPhotoMedia() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO);
-        final ArrayList<MediaEntity> media = new ArrayList<>();
-        media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
-        final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-
-        assertNull(TweetMediaUtils.getPhotoEntity(tweet));
-    }
-
-    @Test
-    public void testHasPhoto_hasPhotoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_PHOTO);
-        final ArrayList<MediaEntity> media = new ArrayList<>();
-        media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
-        final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-
-        assertTrue(TweetMediaUtils.hasPhoto(tweet));
-    }
-
-    @Test
-    public void testHasPhoto_noPhotoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO);
-        final ArrayList<MediaEntity> media = new ArrayList<>();
-        media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
-        final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-
-        assertFalse(TweetMediaUtils.hasPhoto(tweet));
-    }
-
-    @Test
-    public void testHasPhoto_uninitializedMediaEntities() {
-        final TweetEntities entities = new TweetEntities(null, null, null, null, null);
-        final Tweet tweet = new TweetBuilder().setEntities(entities).build();
-        assertFalse(TweetMediaUtils.hasPhoto(tweet));
-    }
-
-    @Test
-    public void testHasPhoto_nullEntities() {
-        final Tweet tweet = new TweetBuilder().setEntities(null).build();
-        assertFalse(TweetMediaUtils.hasPhoto(tweet));
-    }
-
-    @Test
-    public void testGetVideoEntity_nullEntities() {
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(null).build();
-        assertNull(TweetMediaUtils.getVideoEntity(tweet));
-    }
-
-    @Test
-    public void testGetVideoEntity_nullMedia() {
-        final TweetEntities entities = new TweetEntities(null, null, null, null, null);
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-        assertNull(TweetMediaUtils.getVideoEntity(tweet));
-    }
-
-    @Test
-    public void testGetVideoEntity_emptyMedia() {
-        final TweetEntities entities = new TweetEntities(null, null, new ArrayList<>(),
-                null, null);
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-        assertNull(TweetMediaUtils.getVideoEntity(tweet));
-    }
-
-    @Test
-    public void testGetVideoEntity_hasVideoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO);
-        final ArrayList<MediaEntity> media = new ArrayList<>();
-        media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-
-        assertEquals(entity, TweetMediaUtils.getVideoEntity(tweet));
-    }
-
-    @Test
-    public void testGetVideoEntity_nonVideoMedia() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_PHOTO);
-        final ArrayList<MediaEntity> media = new ArrayList<>();
-        media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-
-        assertNull(TweetMediaUtils.getVideoEntity(tweet));
-    }
-
-    @Test
-    public void testHasSupportedVideo_hasUnsupportedVideoEntity() {
-        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_DASH, null);
-        final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
-        final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
-
-        final TweetEntities entities = new TweetEntities(null, null, Arrays.asList(entity), null,
-                null);
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-
-        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
-    }
-
-    @Test
-    public void testHasSupportedVideo_hasSupportedVideoEntity() {
-        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_MP4, null);
-        final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
-        final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
-
-        final TweetEntities entities = new TweetEntities(null, null, Arrays.asList(entity), null,
-                null);
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-
-        assertTrue(TweetMediaUtils.hasSupportedVideo(tweet));
-    }
-
-    @Test
-    public void testHasSupportedVideo_noVideoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_PHOTO);
-        final ArrayList<MediaEntity> media = new ArrayList<>();
-        media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-
-        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
-    }
-
-    @Test
-    public void testHasSupportedVideo_uninitializedMediaEntities() {
-        final TweetEntities entities = new TweetEntities(null, null, null, null, null);
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
-    }
-
-    @Test
-    public void testHasSupportedVideo_nullEntities() {
-        final Tweet tweet = new TweetBuilder().setExtendedEntities(null).build();
-        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
-    }
-
-    @Test
-    public void testIsPhotoType_photoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_PHOTO);
-        assertTrue(TweetMediaUtils.isPhotoType(entity));
-    }
-
-    @Test
-    public void testIsPhotoType_videoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO);
-        assertFalse(TweetMediaUtils.isPhotoType(entity));
-    }
-
-    @Test
-    public void testIsPhotoType_animatedGifEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_ANIMATED_GIF);
-        assertFalse(TweetMediaUtils.isPhotoType(entity));
-    }
-
-    @Test
-    public void testIsVideoType_photoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_PHOTO);
-        assertFalse(TweetMediaUtils.isVideoType(entity));
-    }
-
-    @Test
-    public void testIsVideoType_videoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO);
-        assertTrue(TweetMediaUtils.isVideoType(entity));
-    }
-
-    @Test
-    public void testIsVideoType_animatedGifEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_ANIMATED_GIF);
-        assertTrue(TweetMediaUtils.isVideoType(entity));
-    }
-
-    @Test
-    public void testGetSupportedVariant() {
-        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_MP4, null);
-        final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
-        final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
-
-        assertNotNull(TweetMediaUtils.getSupportedVariant(entity));
-        assertEquals(variant, TweetMediaUtils.getSupportedVariant(entity));
-    }
-
-    @Test
-    public void testGetSupportedVariant_unsupportedContentType() {
-        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_DASH, null);
-        final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
-        final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
-
-        assertNull(TweetMediaUtils.getSupportedVariant(entity));
-    }
-
-    @Test
-    public void testIsVariantSupported_withMP4() {
-        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_MP4, null);
-        assertTrue(TweetMediaUtils.isVariantSupported(variant));
-    }
-
-    @Test
-    public void testIsVariantSupported_withHLS() {
-        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_HLS, null);
-        assertTrue(TweetMediaUtils.isVariantSupported(variant));
-    }
-
-    @Test
-    public void testIsVariantSupported_withNullContentType() {
-        final VideoInfo.Variant variant = new VideoInfo.Variant(0, null, null);
-        assertFalse(TweetMediaUtils.isVariantSupported(variant));
-    }
-
-    @Test
-    public void testIsVariantSupported_withUnsupportedContentType() {
-        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_DASH, null);
-        assertFalse(TweetMediaUtils.isVariantSupported(variant));
-    }
-
-    @Test
-    public void testIsLooping_withVideoOverSevenSeconds() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO, 7000);
-        assertFalse(TweetMediaUtils.isLooping(entity));
-    }
-
-    @Test
-    public void testIsLooping_withVideoUnderSevenSeconds() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO, 6000);
-        assertTrue(TweetMediaUtils.isLooping(entity));
-    }
-
-    @Test
-    public void testIsLooping_withAnimatedGif() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_ANIMATED_GIF);
-        assertTrue(TweetMediaUtils.isLooping(entity));
-    }
-
-    @Test
-    public void showVideoControlsWithVideo() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO);
-        assertTrue(TweetMediaUtils.showVideoControls(entity));
-    }
-
-    @Test
-    public void showVideoControlsWithAnimatedGif() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_ANIMATED_GIF);
-        assertFalse(TweetMediaUtils.showVideoControls(entity));
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
deleted file mode 100644
index e4836cdf..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import android.graphics.Color;
-import android.graphics.drawable.Drawable;
-import android.view.View;
-import android.widget.ImageView;
-
-import com.twitter.sdk.android.core.models.Card;
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.tweetui.R;
-import com.twitter.sdk.android.tweetui.TestFixtures;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.isNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetMediaViewTest {
-    static final String TEST_ALT_TEXT = "alt text";
-    static final int TEST_ERROR_RES_ID = 123456789;
-
-    private TweetMediaView tweetMediaView;
-    private CharSequence contentDefaultDescription;
-
-    @Before
-    public void setUp() throws Exception {
-        tweetMediaView = new TweetMediaView(RuntimeEnvironment.application, null,
-                mock(TweetMediaView.DependencyProvider.class));
-        contentDefaultDescription = RuntimeEnvironment.application.getResources()
-                .getString(R.string.tw__tweet_media);
-    }
-
-    @Test
-    public void testInitialViewState() {
-        for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
-            final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
-            assertNull(imageView);
-        }
-
-        assertArrayEquals(new float[]{0, 0, 0, 0, 0, 0, 0, 0}, tweetMediaView.radii, 0);
-    }
-
-    public void testSetMediaBgColor() {
-        tweetMediaView.setMediaBgColor(Color.BLUE);
-        assertEquals(Color.BLUE, tweetMediaView.mediaBgColor);
-    }
-
-    public void testSetPhotoErrorResId() {
-        tweetMediaView.setPhotoErrorResId(TEST_ERROR_RES_ID);
-        assertEquals(TEST_ERROR_RES_ID, tweetMediaView.photoErrorResId);
-    }
-
-    @Test
-    public void testSetTweetMediaEntities_withEmptyList() {
-        final List<MediaEntity> emptyMediaEntities = Collections.EMPTY_LIST;
-        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, emptyMediaEntities);
-
-        for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
-            final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
-            assertNull(imageView);
-        }
-    }
-
-    @Test
-    public void testSetTweetMediaEntities_withSingleEntity() {
-        final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
-        final List<MediaEntity> mediaEntities = new ArrayList<>();
-        mediaEntities.add(entity);
-        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
-
-        final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
-        assertEquals(View.VISIBLE, imageView.getVisibility());
-        assertNull(tweetMediaView.getChildAt(1));
-        assertNull(tweetMediaView.getChildAt(2));
-        assertNull(tweetMediaView.getChildAt(3));
-    }
-
-    @Test
-    public void testSetTweetMediaEntities_withMultipleEntities() {
-        final List<MediaEntity> mediaEntities = TestFixtures.createMultipleMediaEntitiesWithPhoto
-                (TweetMediaView.MAX_IMAGE_VIEW_COUNT, 100, 100);
-        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
-
-        for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
-            final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
-            assertEquals(View.VISIBLE, imageView.getVisibility());
-            assertEquals(index, imageView.getTag(R.id.tw__entity_index));
-            assertEquals(contentDefaultDescription, imageView.getContentDescription());
-        }
-    }
-
-    @Test
-    public void testSetTweetMediaEntities_withVine() {
-        final Card sampleVineCard = TestFixtures.sampleValidVineCard();
-        final Tweet tweetWithVineCard = TestFixtures.createTweetWithVineCard(
-                TestFixtures.TEST_TWEET_ID, TestFixtures.TEST_USER,
-                TestFixtures.TEST_STATUS, sampleVineCard);
-
-        tweetMediaView.setVineCard(tweetWithVineCard);
-
-        final OverlayImageView imageView = (OverlayImageView) tweetMediaView.getChildAt(0);
-        assertEquals(View.VISIBLE, imageView.getVisibility());
-        assertNotNull(imageView.overlay.drawable);
-        assertNull(tweetMediaView.getChildAt(1));
-        assertNull(tweetMediaView.getChildAt(2));
-        assertNull(tweetMediaView.getChildAt(3));
-    }
-
-    @Test
-    public void testSetRoundedCornersRadii() {
-        tweetMediaView.setRoundedCornersRadii(1, 2, 3, 4);
-        assertArrayEquals(new float[]{1, 1, 2, 2, 3, 3, 4, 4}, tweetMediaView.radii, 0);
-    }
-
-    @Test
-    public void testSetAltText_withEmptyString() {
-        final OverlayImageView imageView = mock(OverlayImageView.class);
-        tweetMediaView.setAltText(imageView, "");
-
-        verify(imageView).setContentDescription(contentDefaultDescription);
-    }
-
-    @Test
-    public void testSetAltText_withAtlText() {
-        final OverlayImageView imageView = mock(OverlayImageView.class);
-        tweetMediaView.setAltText(imageView, TEST_ALT_TEXT);
-
-        verify(imageView).setContentDescription(TEST_ALT_TEXT);
-    }
-
-    @Test
-    public void testSetOverlayImage_isVideoTrue() {
-        final OverlayImageView imageView = mock(OverlayImageView.class);
-        tweetMediaView.setOverlayImage(imageView, true);
-
-        verify(imageView).setOverlayDrawable(any(Drawable.class));
-    }
-
-    @Test
-    public void testSetOverlayImage_isVideoFalse() {
-        final OverlayImageView imageView = mock(OverlayImageView.class);
-        tweetMediaView.setOverlayImage(imageView, false);
-
-        verify(imageView).setOverlayDrawable(isNull(Drawable.class));
-    }
-
-    @Test
-    public void testClearImageViews() {
-        final List<MediaEntity> mediaEntities = TestFixtures.createMultipleMediaEntitiesWithPhoto
-                (TweetMediaView.MAX_IMAGE_VIEW_COUNT, 100, 100);
-        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
-        tweetMediaView.clearImageViews();
-        for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
-            final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
-            assertEquals(View.GONE, imageView.getVisibility());
-        }
-    }
-}
diff --git a/twitter-core/build.gradle b/twitter-core/build.gradle
index d4f68831..6e838aba 100644
--- a/twitter-core/build.gradle
+++ b/twitter-core/build.gradle
@@ -20,6 +20,7 @@ apply plugin: 'com.android.library'
 android {
     compileSdkVersion rootProject.compileSdkVersion
 
+
     defaultConfig {
         versionCode 1
         versionName version
@@ -42,10 +43,6 @@ android {
         }
     }
 
-    lintOptions {
-        warningsAsErrors true
-    }
-
     compileOptions {
         sourceCompatibility 1.8
         targetCompatibility 1.8
diff --git a/twitter-core/internal-build.gradle b/twitter-core/internal-build.gradle
index 8db5375c..291d9b21 100644
--- a/twitter-core/internal-build.gradle
+++ b/twitter-core/internal-build.gradle
@@ -71,22 +71,10 @@ android {
 }
 
 dependencies {
-    api dependency.retrofit
-    implementation dependency.retrofitGsonConverter
-    api dependency.gson
-    api dependency.okHttp
-
-    androidTestCompile dependency.mockito
-    androidTestCompile dependency.dexmakerMockito
-
-    testCompile dependency.mockito
-    testCompile dependency.junit
-    testCompile dependency.retrofitMock
-    testCompile(dependency.robolectric) {
-        exclude group: 'commons-logging', module: 'commons-logging'
-        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
-    }
-    testCompile dependency.equalsVerifier
+    api "com.squareup.retrofit2:retrofit:2.5.0"
+    implementation "com.squareup.retrofit2:converter-gson:2.5.0"
+    api 'com.google.code.gson:gson:2.8.5'
+    api 'com.squareup.okhttp3:okhttp:3.12.1'
 }
 
 apply from: rootProject.deployScript
\ No newline at end of file
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TestFixtures.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TestFixtures.java
deleted file mode 100644
index 35bab7af..00000000
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TestFixtures.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-public final class TestFixtures {
-    public static final String TOKEN = "token";
-    public static final String SECRET = "secret";
-}
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
deleted file mode 100644
index ec0aa8a3..00000000
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.test.AndroidTestCase;
-
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.services.FavoriteService;
-import com.twitter.sdk.android.core.services.StatusesService;
-
-import java.util.concurrent.ExecutorService;
-
-import okhttp3.OkHttpClient;
-
-import static org.mockito.Mockito.mock;
-
-public class TwitterApiClientTest extends AndroidTestCase {
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        Twitter.initialize(new TwitterConfig.Builder(getContext())
-                .executorService(mock(ExecutorService.class))
-                .build());
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        TwitterTestUtils.resetTwitter();
-        TwitterCoreTestUtils.resetTwitterCore();
-        super.tearDown();
-    }
-
-    public void testGetService_sdkNotStarted() {
-        try {
-            TwitterTestUtils.resetTwitter();
-            new TwitterApiClient(mock(TwitterSession.class));
-            fail();
-        } catch (IllegalStateException ise) {
-            assertEquals("Must initialize Twitter before using getInstance()", ise.getMessage());
-        }
-    }
-
-    public void testConstructor_noSession() throws Exception {
-        try {
-            new TwitterApiClient((TwitterSession) null);
-            fail();
-        } catch (IllegalArgumentException ie) {
-            assertEquals("Session must not be null.", ie.getMessage());
-        }
-    }
-
-    public void testGetService_cachedService() throws Exception {
-        final TwitterApiClient client = newTwitterApiClient();
-        final StatusesService service = client.getService(StatusesService.class);
-        assertSame(service, client.getService(StatusesService.class));
-    }
-
-    public void testGetService_differentServices() throws Exception {
-        final TwitterApiClient client = newTwitterApiClient();
-        final FavoriteService service = client.getService(FavoriteService.class);
-        assertNotSame(service, client.getService(StatusesService.class));
-    }
-
-    public void testApiClient_cachedGuestAuthClient() throws Exception {
-        final TwitterApiClient customApiClient = new TwitterApiClient(newOkHttpClient());
-        TwitterCore.getInstance().addGuestApiClient(customApiClient);
-
-        assertEquals(customApiClient, TwitterCore.getInstance().getGuestApiClient());
-    }
-
-    public void testApiClient_cachedUserAuthApiClient() throws Exception {
-        final TwitterSession mockUserSession = mock(TwitterSession.class);
-        final TwitterApiClient customApiClient =
-                new TwitterApiClient(mockUserSession, newOkHttpClient());
-        TwitterCore.getInstance().addApiClient(mockUserSession, customApiClient);
-
-        assertEquals(customApiClient, TwitterCore.getInstance().getApiClient(mockUserSession));
-    }
-
-    private TwitterApiClient newTwitterApiClient() {
-        return new TwitterApiClient(mock(OkHttpClient.class), new TwitterApi());
-    }
-
-    private OkHttpClient newOkHttpClient() {
-        return new OkHttpClient.Builder().build();
-    }
-}
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
deleted file mode 100644
index 47acc2de..00000000
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.test.AndroidTestCase;
-
-import java.util.concurrent.ExecutorService;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-public class TwitterCoreTest extends AndroidTestCase {
-
-    private static final String TWITTER_NOT_INIT_ERROR_MSG = "Must initialize Twitter before using getInstance()";
-    private TwitterCore twitterCore;
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        Twitter.initialize(new TwitterConfig.Builder(getContext())
-                .executorService(mock(ExecutorService.class))
-                .build());
-        twitterCore = new TwitterCore(new TwitterAuthConfig("", ""));
-        TwitterCore.instance = twitterCore;
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        TwitterTestUtils.resetTwitter();
-        TwitterCoreTestUtils.resetTwitterCore();
-        super.tearDown();
-    }
-
-    public void testGuestSessionManager_noSdkStart() {
-        try {
-            TwitterTestUtils.resetTwitter();
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterCore.getInstance().getGuestSessionProvider();
-            fail("Should fail if Twitter is not initialized.");
-        } catch (IllegalStateException ie) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage());
-        }
-    }
-
-    public void testGuestSessionManager_sdkStartNoTwitterKit() throws Exception {
-        try {
-            TwitterTestUtils.resetTwitter();
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterCore.getInstance().getGuestSessionProvider();
-            fail("Should fail if Twitter is not initialized.");
-        } catch (IllegalStateException ie) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage());
-        }
-    }
-
-    public void testGetIdentifier() {
-        final String identifier = BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID;
-        assertEquals(identifier, twitterCore.getIdentifier());
-    }
-
-    public void testGetSessionManager() throws Exception {
-        assertNotNull(twitterCore.getSessionManager());
-    }
-
-    public void testGetSessionManager_twitterNotInitialized() throws Exception {
-        try {
-            TwitterTestUtils.resetTwitter();
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterCore.getInstance().getSessionManager();
-            fail("Should fail if Twitter is not initialized.");
-        } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
-        }
-    }
-
-    public void testGetAppSessionManager() throws Exception {
-        assertNotNull(twitterCore.getGuestSessionProvider());
-    }
-
-    public void testGetAppSessionManager_twitterNotInitialized() throws Exception {
-        try {
-            TwitterTestUtils.resetTwitter();
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterCore.getInstance().getGuestSessionProvider();
-            fail("Should fail if Twitter is not initialized.");
-        } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
-        }
-    }
-
-    public void testGetApiClient_activeSessionExists() throws Exception {
-        twitterCore.twitterSessionManager = setUpSessionManager(mock(TwitterSession.class));
-        assertNotNull(twitterCore.getApiClient());
-    }
-
-    public void testGetApiClient_twitterNotInitialized() throws Exception {
-        try {
-            TwitterTestUtils.resetTwitter();
-            TwitterCoreTestUtils.resetTwitterCore();
-            twitterCore.getApiClient();
-            fail("Should fail if Twitter is not initialized.");
-        } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
-        }
-    }
-
-    public void testGetApiClient_withSession() throws Exception {
-        assertNotNull(twitterCore.getApiClient(mock(TwitterSession.class)));
-    }
-
-    public void testGetApiClient_withSessionTwitterNotInitialized() throws Exception {
-        try {
-            TwitterTestUtils.resetTwitter();
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterCore.getInstance().getApiClient(mock(TwitterSession.class));
-            fail("Should fail if Twitter is not initialized.");
-        } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
-        }
-    }
-
-    public void testGetGuestApiClient_twitterNotInitialized() throws Exception {
-        try {
-            TwitterTestUtils.resetTwitter();
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterCore.getInstance().getGuestApiClient();
-            fail("Should fail if Twitter is not initialized.");
-        } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
-        }
-    }
-
-    private <T extends Session> SessionManager<T> setUpSessionManager(T session) {
-        final SessionManager<T> sessionManager = mock(SessionManager.class);
-        when(sessionManager.getActiveSession()).thenReturn(session);
-        return sessionManager;
-    }
-}
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/OAuthActivityTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/OAuthActivityTest.java
deleted file mode 100644
index a4d4252a..00000000
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/OAuthActivityTest.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.test.ActivityUnitTestCase;
-
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterConfig;
-import com.twitter.sdk.android.core.TwitterCoreTestUtils;
-import com.twitter.sdk.android.core.TwitterTestUtils;
-
-import org.mockito.ArgumentCaptor;
-
-import java.util.concurrent.ExecutorService;
-
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-public class OAuthActivityTest extends ActivityUnitTestCase<OAuthActivity> {
-
-    private Context context;
-    private OAuthController mockController;
-
-    public OAuthActivityTest() {
-        super(OAuthActivity.class);
-    }
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        context = getInstrumentation().getTargetContext();
-        Twitter.initialize(new TwitterConfig.Builder(context)
-                .executorService(mock(ExecutorService.class))
-                .build());
-        mockController = mock(TestOAuthController.class);
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        TwitterTestUtils.resetTwitter();
-        TwitterCoreTestUtils.resetTwitterCore();
-        super.tearDown();
-    }
-
-    private void init() {
-        final Intent intent = new Intent(context, OAuthActivity.class)
-                .putExtra(OAuthActivity.EXTRA_AUTH_CONFIG, new TwitterAuthConfig("", ""));
-        final OAuthActivity activity = startActivity(intent, null, null);
-        activity.oAuthController = mockController;
-    }
-
-    public void testOnBackPressed() {
-        init();
-        getActivity().onBackPressed();
-
-        final ArgumentCaptor<TwitterAuthException> exceptionArgCaptor
-                = ArgumentCaptor.forClass(TwitterAuthException.class);
-        verify(mockController).handleAuthError(eq(Activity.RESULT_CANCELED),
-                exceptionArgCaptor.capture());
-        assertEquals("Authorization failed, request was canceled.",
-                exceptionArgCaptor.getValue().getMessage());
-    }
-
-    public void testOnComplete() {
-        init();
-        getActivity().onComplete(Activity.RESULT_OK, new Intent());
-
-        assertTrue(isFinishCalled());
-    }
-}
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TestOAuthController.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TestOAuthController.java
deleted file mode 100644
index 82331845..00000000
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TestOAuthController.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.webkit.WebView;
-import android.widget.ProgressBar;
-
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aService;
-
-/**
- * Test class to allow mocking of OAuthController.
- */
-public class TestOAuthController extends OAuthController {
-
-    TestOAuthController(ProgressBar spinner, WebView webView, TwitterAuthConfig authConfig,
-                        OAuth1aService oAuth1aService, Listener listener) {
-        super(spinner, webView, authConfig, oAuth1aService, listener);
-    }
-}
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java
deleted file mode 100644
index 7bf250ef..00000000
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java
+++ /dev/null
@@ -1,370 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.test.AndroidTestCase;
-import android.util.Log;
-import android.view.View;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Logger;
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterConfig;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterCoreTestUtils;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.TwitterTestUtils;
-
-import org.mockito.ArgumentCaptor;
-
-import java.util.concurrent.ExecutorService;
-
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyInt;
-import static org.mockito.Mockito.anyString;
-import static org.mockito.Mockito.doNothing;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-public class TwitterLoginButtonTest extends AndroidTestCase {
-
-    private static final int TEST_REQUEST_CODE = 100;
-
-    private Activity mockActivity;
-    private TwitterAuthClient mockAuthClient;
-    private Callback<TwitterSession> mockCallback;
-    private View.OnClickListener mockViewClickListener;
-    private TwitterLoginButton loginButton;
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        mockActivity = mock(Activity.class);
-        mockAuthClient = mock(TwitterAuthClient.class);
-        when(mockAuthClient.getRequestCode()).thenReturn(TEST_REQUEST_CODE);
-        doNothing().when(mockAuthClient).authorize(any(Activity.class), any(Callback.class));
-        doNothing().when(mockAuthClient).onActivityResult(anyInt(), anyInt(), any(Intent.class));
-
-        mockCallback = mock(Callback.class);
-        mockViewClickListener = mock(View.OnClickListener.class);
-
-        loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) {
-            // This is to allow us to test TwitterLoginButton without having to set up a real
-            // activity.
-            @Override
-            protected Activity getActivity() {
-                return mockActivity;
-            }
-        };
-    }
-
-    public void testConstructor_contextNotActivity() {
-        try {
-            loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient);
-            fail("Constructor should throw an exception when provided context is not an activity");
-        } catch (IllegalStateException e) {
-            assertEquals(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY, e.getMessage());
-        }
-    }
-
-    public void testConstructor_contextNotActivityEditModeTrue() {
-        loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) {
-            @Override
-            public boolean isInEditMode() {
-                return true;
-            }
-        };
-        assertNull(loginButton.getActivity());
-    }
-
-    public void testConstructor_nullTwitterAuthClient() {
-        final TwitterLoginButton button = new TwitterLoginButton(getContext()) {
-            @Override
-            protected Activity getActivity() {
-                return mock(Activity.class);
-            }
-        };
-        assertNull(button.authClient);
-    }
-
-    public void testConstructor_editMode() throws Exception {
-        final TwitterLoginButton button = new TwitterLoginButton(getContext()) {
-            @Override
-            protected Activity getActivity() {
-                return mock(Activity.class);
-            }
-
-            @Override
-            public boolean isInEditMode() {
-                return true;
-            }
-        };
-        assertTrue(button.isEnabled());
-    }
-
-    public void testConstructor_twitterNotStarted() throws Exception {
-        try {
-            TwitterTestUtils.resetTwitter();
-            TwitterCoreTestUtils.resetTwitterCore();
-            final TwitterLoginButton button = new TwitterLoginButton(getContext()) {
-                @Override
-                protected Activity getActivity() {
-                    return mock(Activity.class);
-                }
-            };
-
-            assertFalse(button.isEnabled());
-
-        } finally {
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    public void testConstructor_twitterStarted() throws Exception {
-        try {
-            Twitter.initialize(setUpLogTest());
-
-            final TwitterLoginButton button = new TwitterLoginButton(getContext()) {
-                @Override
-                protected Activity getActivity() {
-                    return mock(Activity.class);
-                }
-            };
-
-            final Logger logger = Twitter.getLogger();
-            verify(logger, never()).e(eq(TwitterLoginButton.TAG), anyString());
-            assertTrue(button.isEnabled());
-
-        } finally {
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-
-    public void testSetCallback_callbackNull() {
-        try {
-            loginButton.setCallback(null);
-            fail("setCallback should throw an exception when called with null callback");
-        } catch (IllegalArgumentException e) {
-            assertEquals("Callback cannot be null", e.getMessage());
-        }
-    }
-
-    public void testGetCallback() {
-        final Callback<TwitterSession> mockCallback = mock(Callback.class);
-        loginButton.setCallback(mockCallback);
-        assertSame(mockCallback, loginButton.getCallback());
-    }
-
-    public void testOnClick() {
-        loginButton.setCallback(mockCallback);
-        loginButton.performClick();
-        verify(mockAuthClient).authorize(eq(mockActivity), eq(mockCallback));
-    }
-
-    public void testOnClick_withOnClickListener() {
-        loginButton.setCallback(mockCallback);
-        loginButton.setOnClickListener(mockViewClickListener);
-        loginButton.performClick();
-        verify(mockAuthClient).authorize(eq(mockActivity), eq(mockCallback));
-        verify(mockViewClickListener).onClick(eq(loginButton));
-    }
-
-    public void testOnClick_callbackNullDebuggableTrue() throws Exception {
-        Twitter.initialize(new TwitterConfig.Builder(getContext())
-                .executorService(mock(ExecutorService.class))
-                .debug(true)
-                .build());
-        try {
-            loginButton.performClick();
-            fail("onClick should throw an exception when called and there is no callback");
-        } catch (IllegalStateException e) {
-            assertEquals("Callback must not be null, did you call setCallback?", e.getMessage());
-        } finally {
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    public void testOnClick_callbackNullDebuggableFalse() throws Exception {
-        Twitter.initialize(setUpLogTest());
-        try {
-            loginButton.performClick();
-            assertLogMessage("Callback must not be null, did you call setCallback?");
-        } finally {
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    public void testOnClick_activityNullDebuggableTrue() throws Exception {
-        Twitter.initialize(new TwitterConfig.Builder(getContext())
-                .executorService(mock(ExecutorService.class))
-                .debug(true)
-                .build());
-        loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) {
-            // This is to allow us to test TwitterLoginButton without having to set up a real
-            // activity.
-            @Override
-            protected Activity getActivity() {
-                return null;
-            }
-        };
-        loginButton.setCallback(mockCallback);
-
-        try {
-            loginButton.performClick();
-            fail("onClick should throw an exception when called and there is no activity");
-        } catch (IllegalStateException e) {
-            assertEquals(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY, e.getMessage());
-        } finally {
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    public void testOnClick_activityNullDebuggableFalse() throws Exception {
-        Twitter.initialize(setUpLogTest());
-        loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) {
-            // This is to allow us to test TwitterLoginButton without having to set up a real
-            // activity.
-            @Override
-            protected Activity getActivity() {
-                return null;
-            }
-        };
-        loginButton.setCallback(mockCallback);
-
-        try {
-            loginButton.performClick();
-            assertLogMessage(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY);
-        } finally {
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    public void testOnClick_activityFinishingDebuggableFalse() throws Exception {
-        Twitter.initialize(setUpLogTest());
-        loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) {
-            // This is to allow us to test TwitterLoginButton without having to set up a real
-            // activity.
-            @Override
-            protected Activity getActivity() {
-                final Activity mockActivity = mock(Activity.class);
-                when(mockActivity.isFinishing()).thenReturn(true);
-                return mockActivity;
-            }
-        };
-        loginButton.setCallback(mockCallback);
-
-        try {
-            loginButton.performClick();
-            assertLogMessage(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY);
-        } finally {
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    private TwitterConfig setUpLogTest() {
-        final Logger mockLogger = mock(Logger.class);
-        when(mockLogger.isLoggable(TwitterCore.TAG, Log.WARN)).thenReturn(true);
-
-        final TwitterConfig config = new TwitterConfig.Builder(getContext())
-                .executorService(mock(ExecutorService.class))
-                .logger(mockLogger)
-                .build();
-
-        return config;
-    }
-
-    private void assertLogMessage(String expectedMessage) {
-        final ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);
-        verify(Twitter.getLogger()).w(eq(Twitter.TAG), argumentCaptor.capture());
-        assertEquals(expectedMessage, argumentCaptor.getValue());
-    }
-
-    public void testOnActivityResult_requestCodeMatches() {
-        final int requestCode = TEST_REQUEST_CODE;
-        final int resultCode = Activity.RESULT_OK;
-        final Intent mockData = mock(Intent.class);
-        loginButton.onActivityResult(requestCode, resultCode, mockData);
-        verify(mockAuthClient).getRequestCode();
-        verify(mockAuthClient).onActivityResult(requestCode, resultCode, mockData);
-    }
-
-    public void testOnActivityResult_requestCodeDoesNotMatch() {
-        final int requestCode = -1;
-        final int resultCode = Activity.RESULT_OK;
-        final Intent mockData = mock(Intent.class);
-        loginButton.onActivityResult(requestCode, resultCode, mockData);
-        verify(mockAuthClient).getRequestCode();
-        verifyNoMoreInteractions(mockAuthClient);
-    }
-
-    public void testGetTwitterAuthClient() throws Exception {
-        try {
-            Twitter.initialize(new TwitterConfig.Builder(getContext())
-                    .executorService(mock(ExecutorService.class))
-                    .build());
-
-            final TwitterLoginButton button = new TwitterLoginButton(getContext()) {
-                @Override
-                protected Activity getActivity() {
-                    return mock(Activity.class);
-                }
-            };
-            final TwitterAuthClient client = button.getTwitterAuthClient();
-            assertNotNull(client);
-
-        } finally {
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-
-    public void testGetTwitterAuthClient_duplicateCalls() throws Exception {
-        try {
-            Twitter.initialize(new TwitterConfig.Builder(getContext())
-                    .executorService(mock(ExecutorService.class))
-                    .build());
-
-            final TwitterLoginButton button = new TwitterLoginButton(getContext()) {
-                @Override
-                protected Activity getActivity() {
-                    return mock(Activity.class);
-                }
-            };
-            final TwitterAuthClient client = button.getTwitterAuthClient();
-            final TwitterAuthClient client2 = button.getTwitterAuthClient();
-            assertSame(client, client2);
-
-        } finally {
-            TwitterCoreTestUtils.resetTwitterCore();
-            TwitterTestUtils.resetTwitter();
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
deleted file mode 100644
index 3c263057..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
+++ /dev/null
@@ -1,203 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-import com.twitter.sdk.android.core.internal.oauth.OAuthUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class AuthTokenAdapterTest {
-    private static final long CREATED_AT = 1414450780L;
-    private static final String TOKEN_TYPE = "testTokenType";
-    private static final String ACCESS_TOKEN = "testAccessToken";
-    private static final String GUEST_TOKEN = "testGuestToken";
-    private static final String JSON_OAUTH1A_TOKEN
-            = "{\"authToken\":{\"auth_type\":\"oauth1a\","
-            + "\"auth_token\":{"
-            + "\"token\":\"" + TestFixtures.TOKEN + "\","
-            + "\"secret\":\"" + TestFixtures.SECRET + "\","
-            + "\"created_at\":" + CREATED_AT + "}}}";
-    private static final String JSON_OAUTH2_TOKEN
-            = "{\"authToken\":{\"auth_type\":\"oauth2\","
-            + "\"auth_token\":{"
-            + "\"token_type\":\"" + TOKEN_TYPE + "\","
-            + "\"access_token\":\"" + ACCESS_TOKEN + "\","
-            + "\"created_at\":" + CREATED_AT + "}}}";
-    private static final String JSON_GUEST_AUTH_TOKEN
-            = "{\"authToken\":{\"auth_type\":\"guest\","
-            + "\"auth_token\":{\"guest_token\":\"" + GUEST_TOKEN + "\","
-            + "\"token_type\":\"" + TOKEN_TYPE + "\","
-            + "\"access_token\":\"" + ACCESS_TOKEN + "\","
-            + "\"created_at\":" + CREATED_AT + "}}}";
-    private static final String JSON_APP_AUTH_TOKEN
-            = "{\"authToken\":{\"auth_type\":\"app\","
-            + "\"auth_token\":{"
-            + "\"token_type\":\"" + TOKEN_TYPE + "\","
-            + "\"access_token\":\"" + ACCESS_TOKEN + "\","
-            + "\"created_at\":" + CREATED_AT + "}}}";
-    private static final String JSON_OAUTH1A_TOKEN_MISSING_CREATED_AT
-            = "{\"authToken\":{\"auth_type\":\"oauth1a\","
-            + "\"auth_token\":{\"secret\":\"" + TestFixtures.SECRET + "\","
-            + "\"token\":\"" + TestFixtures.TOKEN + "\"}}}";
-    private static final String JSON_OAUTH2_TOKEN_MISSING_CREATED_AT
-            = "{\"authToken\":{\"auth_type\":\"oauth2\","
-            + "\"auth_token\":{\"access_token\":\"" + ACCESS_TOKEN + "\","
-            + "\"token_type\":\"" + TOKEN_TYPE + "\"}}}";
-    private static final String JSON_GUEST_AUTH_TOKEN_MISSING_CREATED_AT
-            = "{\"authToken\":{\"auth_type\":\"guest\","
-            + "\"auth_token\":{\"guest_token\":\"" + GUEST_TOKEN + "\","
-            + "\"access_token\":\"" + ACCESS_TOKEN + "\","
-            + "\"token_type\":\"" + TOKEN_TYPE + "\"}}}";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new GsonBuilder()
-                .registerTypeAdapter(AuthToken.class, new AuthTokenAdapter())
-                .create();
-    }
-
-    @Test
-    public void testGetAuthTypeString() {
-        assertEquals("oauth1a", AuthTokenAdapter.getAuthTypeString(TwitterAuthToken.class));
-    }
-
-    @Test
-    public void testGetAuthTypeString_unregisteredAuthType() {
-        assertEquals("", AuthTokenAdapter.getAuthTypeString(TestAuthToken.class));
-    }
-
-    @Test
-    public void testSerialize_oauth1aToken() {
-        final AuthTokenWrapper authTokenWrapper = new AuthTokenWrapper(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT));
-        final String json = gson.toJson(authTokenWrapper);
-        assertEquals(json, JSON_OAUTH1A_TOKEN, json);
-    }
-
-    @Test
-    public void testSerialize_oauth2Token() {
-        final AuthTokenWrapper test = new AuthTokenWrapper(
-                OAuthUtils.createOAuth2Token(TOKEN_TYPE, ACCESS_TOKEN, CREATED_AT));
-        final String json = gson.toJson(test);
-        assertEquals(json, JSON_OAUTH2_TOKEN, json);
-    }
-
-    @Test
-    public void testSerialize_guestAuthToken() {
-        final AuthTokenWrapper test = new AuthTokenWrapper(
-                OAuthUtils.createGuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN,
-                        CREATED_AT));
-        final String json = gson.toJson(test);
-        assertEquals(json, JSON_GUEST_AUTH_TOKEN, json);
-    }
-
-    @Test
-    public void testDeserialize_oauth1aToken() {
-        final AuthTokenWrapper authTokenWrapper = gson.fromJson(JSON_OAUTH1A_TOKEN,
-                AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof TwitterAuthToken);
-        final TwitterAuthToken authToken = (TwitterAuthToken) authTokenWrapper.authToken;
-        assertEquals(TestFixtures.TOKEN, authToken.token);
-        assertEquals(TestFixtures.SECRET, authToken.secret);
-    }
-
-    @Test
-    public void testDeserialize_oauth2Token() {
-        final AuthTokenWrapper authTokenWrapper = gson.fromJson(JSON_OAUTH2_TOKEN,
-                AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof OAuth2Token);
-        final OAuth2Token authToken = (OAuth2Token) authTokenWrapper.authToken;
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-    }
-
-    @Test
-    public void testDeserialize_guestAuthToken() {
-        final AuthTokenWrapper authTokenWrapper = gson.fromJson(JSON_GUEST_AUTH_TOKEN,
-                AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof GuestAuthToken);
-        final GuestAuthToken authToken = (GuestAuthToken) authTokenWrapper.authToken;
-        assertEquals(GUEST_TOKEN, authToken.getGuestToken());
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-    }
-
-    @Test
-    public void testDeserialize_oauth1aTokenMissingCreatedAt() {
-        final AuthTokenWrapper authTokenWrapper = gson.fromJson(
-                JSON_OAUTH1A_TOKEN_MISSING_CREATED_AT, AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof TwitterAuthToken);
-        final TwitterAuthToken authToken = (TwitterAuthToken) authTokenWrapper.authToken;
-        assertEquals(TestFixtures.TOKEN, authToken.token);
-        assertEquals(TestFixtures.SECRET, authToken.secret);
-        assertEquals(0, authToken.createdAt);
-    }
-
-    @Test
-    public void testDeserialize_oauth2TokenMissingCreatedAt() {
-        final AuthTokenWrapper authTokenWrapper = gson.fromJson(
-                JSON_OAUTH2_TOKEN_MISSING_CREATED_AT, AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof OAuth2Token);
-        final OAuth2Token authToken = (OAuth2Token) authTokenWrapper.authToken;
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-        assertEquals(0, authToken.createdAt);
-    }
-
-    @Test
-    public void testDeserialize_guestAuthTokenMissingCreatedAt() {
-        final AuthTokenWrapper authTokenWrapper = gson.fromJson(
-                JSON_GUEST_AUTH_TOKEN_MISSING_CREATED_AT, AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof GuestAuthToken);
-        final GuestAuthToken authToken = (GuestAuthToken) authTokenWrapper.authToken;
-        assertEquals(GUEST_TOKEN, authToken.getGuestToken());
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-        assertEquals(0, authToken.createdAt);
-    }
-
-    private static class AuthTokenWrapper {
-        final AuthToken authToken;
-
-        AuthTokenWrapper(AuthToken authToken) {
-            this.authToken = authToken;
-        }
-    }
-
-    private static class TestAuthToken extends AuthToken {
-
-        @Override
-        public boolean isExpired() {
-            return false;
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
deleted file mode 100644
index 8bd9b40b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-
-import org.junit.Test;
-
-import nl.jqno.equalsverifier.EqualsVerifier;
-import nl.jqno.equalsverifier.Warning;
-
-public class EqualsHashCodeTest {
-
-    @Test
-    public void testTwitterAuthToken() throws Exception {
-        EqualsVerifier.forClass(TwitterAuthToken.class)
-                .suppress(Warning.STRICT_INHERITANCE)
-                .withIgnoredFields("createdAt")
-                .verify();
-    }
-
-    @Test
-    public void testOAuth2Token() throws Exception {
-        EqualsVerifier.forClass(OAuth2Token.class)
-                .suppress(Warning.STRICT_INHERITANCE)
-                .withIgnoredFields("createdAt")
-                .usingGetClass()
-                .verify();
-    }
-
-    @Test
-    public void testGuestAuthToken() throws Exception {
-        EqualsVerifier.forClass(GuestAuthToken.class)
-                .suppress(Warning.STRICT_INHERITANCE)
-                .withIgnoredFields("createdAt")
-                .usingGetClass()
-                .verify();
-    }
-
-    @Test
-    public void testSession() throws Exception {
-        EqualsVerifier.forClass(Session.class)
-                .suppress(Warning.STRICT_INHERITANCE)
-                .usingGetClass()
-                .verify();
-    }
-
-    @Test
-    public void testGuestSession() throws Exception {
-        EqualsVerifier.forClass(GuestSession.class)
-                .suppress(Warning.STRICT_INHERITANCE)
-                .usingGetClass()
-                .verify();
-    }
-
-    @Test
-    public void testTwitterSession() throws Exception {
-        EqualsVerifier.forClass(TwitterSession.class)
-                .suppress(Warning.STRICT_INHERITANCE)
-                .usingGetClass()
-                .verify();
-    }
-
-    @Test
-    public void testTweet() throws Exception {
-        final Tweet tweet01 = new TweetBuilder().setId(123456).build();
-        final Tweet tweet02 = new TweetBuilder().setId(654321).build();
-        EqualsVerifier.forClass(Tweet.class)
-                .suppress(Warning.STRICT_INHERITANCE)
-                .withPrefabValues(Tweet.class, tweet01, tweet02)
-                .withOnlyTheseFields("id")
-                .verify();
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
deleted file mode 100644
index 902c581a..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricTestRunner.class)
-public class GuestSessionSerializerTest {
-    private static final long CREATED_AT = 1414450780L;
-
-    private static final String JSON_SESSION_GUEST = "{\"auth_token\":{\"auth_type\":\"guest\","
-            + "\"auth_token\":{\"guest_token\":\"guestToken\",\"token_type\":\"tokenType\","
-            + "\"access_token\":\"accessToken\",\"created_at\":1414450780}},\"id\":0}";
-    private static final String JSON_SESSION_INVALID_AUTH_TYPE =
-            "{\"auth_token\":{\"auth_type\":\"INVALID\","
-                    + "\"auth_token\":{\"guest_token\":\"guestToken\",\"access_token\":\"accessToken\","
-                    + "\"token_type\":\"tokenType\",\"created_at\":1414450780}},\"id\":0}";
-
-    private static final String TEST_TOKEN_TYPE = "tokenType";
-    private static final String TEST_ACCESS_TOKEN = "accessToken";
-    private static final String TEST_GUEST_TOKEN = "guestToken";
-
-    private GuestSession.Serializer serializer;
-
-    @Before
-    public void setUp() throws Exception {
-
-        serializer = new GuestSession.Serializer();
-    }
-
-    @Test
-    public void testSerialize_sessionNull() {
-        assertEquals("", serializer.serialize(null));
-    }
-
-    @Test
-    public void testSerialize_sessionAuthTokenIsGuestAuthToken() {
-        final GuestSession session = new GuestSession(new GuestAuthToken(TEST_TOKEN_TYPE,
-                TEST_ACCESS_TOKEN, TEST_GUEST_TOKEN, CREATED_AT));
-        assertEquals(JSON_SESSION_GUEST, serializer.serialize(session));
-    }
-
-    @Test
-    public void testDeserialize_serializedStringNull() {
-        assertEquals(null, serializer.deserialize(null));
-    }
-
-    @Test
-    public void testDeserialize_serializedStringEmpty() {
-        assertEquals(null, serializer.deserialize(""));
-    }
-
-    @Test
-    public void testDeserialize_serializedStringAuthTokenIsGuestAuthToken() {
-        final GuestSession session = serializer.deserialize(JSON_SESSION_GUEST);
-        assertEquals(GuestAuthToken.class, session.getAuthToken().getClass());
-        assertEquals(TEST_TOKEN_TYPE, session.getAuthToken().getTokenType());
-        assertEquals(TEST_ACCESS_TOKEN, session.getAuthToken().getAccessToken());
-        assertEquals(TEST_GUEST_TOKEN, session.getAuthToken().getGuestToken());
-    }
-
-    @Test
-    public void testDeserialize_serializedStringAuthTokenIsInvalid() {
-        final GuestSession session = serializer.deserialize(JSON_SESSION_INVALID_AUTH_TYPE);
-        assertNull(session);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/IntentUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/IntentUtilsTest.java
deleted file mode 100644
index 08dde86c..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/IntentUtilsTest.java
+++ /dev/null
@@ -1,127 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class IntentUtilsTest {
-    Intent intent;
-    Context context;
-    PackageManager pm;
-
-    @Before
-    public void setUp() throws Exception {
-
-        context = mock(Context.class);
-        pm = mock(PackageManager.class);
-        intent = mock(Intent.class);
-    }
-
-    @Test
-    public void testIsActivityAvailable_activitiesAvailable() {
-        final List<ResolveInfo> activities = new ArrayList<>();
-        activities.add(mock(ResolveInfo.class));
-
-        when(pm.queryIntentActivities(intent, 0)).thenReturn(activities);
-        when(context.getPackageManager()).thenReturn(pm);
-
-        assertTrue(IntentUtils.isActivityAvailable(context, intent));
-    }
-
-    @Test
-    public void testSafeStartActivity() {
-        when(pm.queryIntentActivities(intent, 0))
-                .thenReturn(Collections.EMPTY_LIST);
-        when(context.getPackageManager()).thenReturn(pm);
-
-        final Intent intent = new Intent("com.twitter.is.awesome");
-        assertFalse(IntentUtils.safeStartActivity(context, intent));
-        verify(context).getPackageManager();
-        verify(pm).queryIntentActivities(intent, 0);
-    }
-
-    @Test
-    public void testIsActivityAvailable_noActivitiesAvailable() {
-        when(pm.queryIntentActivities(intent, 0))
-                .thenReturn(Collections.EMPTY_LIST);
-        when(context.getPackageManager()).thenReturn(pm);
-
-        assertFalse(IntentUtils.isActivityAvailable(context, intent));
-        verify(context).getPackageManager();
-        verify(pm).queryIntentActivities(intent, 0);
-    }
-
-    @Test
-    public void testIsActivityAvailable_activityAvailable() {
-        final List<ResolveInfo> activities = new ArrayList<>();
-        activities.add(mock(ResolveInfo.class));
-
-        when(pm.queryIntentActivities(intent, 0)).thenReturn(activities);
-        when(context.getPackageManager()).thenReturn(pm);
-
-        assertTrue(IntentUtils.isActivityAvailable(context, intent));
-        verify(context).getPackageManager();
-        verify(pm).queryIntentActivities(intent, 0);
-    }
-
-    @Test
-    @SuppressWarnings("WrongConstant")
-    public void testSafeStartActivity_noActivitiesAvailable() {
-        when(pm.queryIntentActivities(intent, 0))
-                .thenReturn(Collections.EMPTY_LIST);
-        when(context.getPackageManager()).thenReturn(pm);
-
-        IntentUtils.safeStartActivity(context, intent);
-
-        verify(context).getPackageManager();
-        verifyNoMoreInteractions(context);
-    }
-
-    @Test
-    public void testSafeStartActivity_activityAvailable() {
-        final List<ResolveInfo> activities = new ArrayList<>();
-        activities.add(mock(ResolveInfo.class));
-
-        when(pm.queryIntentActivities(intent, 0)).thenReturn(activities);
-        when(context.getPackageManager()).thenReturn(pm);
-
-        IntentUtils.safeStartActivity(context, intent);
-
-        verify(context).startActivity(intent);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java
deleted file mode 100644
index 9b608b95..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuthSigningTests {
-    private static final String ANY_AUTH_HEADER = "Twitter Authority!";
-    private static final String VERIFY_CREDENTIALS_URL = "https://twitter.com";
-
-    private TwitterAuthConfig authConfig;
-    private TwitterAuthToken authToken;
-    private OAuthSigning authSigning;
-    private OAuth1aHeaders oAuthHeaders;
-
-    @Before
-    public void setUp() throws Exception {
-
-        oAuthHeaders = mock(OAuth1aHeaders.class);
-        authConfig = new TwitterAuthConfig(TestFixtures.KEY, TestFixtures.SECRET);
-        authToken = new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET);
-        authSigning = new OAuthSigning(authConfig, authToken, oAuthHeaders);
-
-        when(oAuthHeaders.getAuthorizationHeader(authConfig, authToken, null, "GET",
-                OAuthSigning.VERIFY_CREDENTIALS_URL, null)).thenReturn(ANY_AUTH_HEADER);
-    }
-
-    @Test
-    public void testConstructor_nullAuthConfig() {
-        try {
-            new OAuthSigning(null, authToken);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals("authConfig must not be null", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testConstructor_nullAuthToken() {
-        try {
-            new OAuthSigning(authConfig, null);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals("authToken must not be null", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testGetAuthorizationHeader() {
-        authSigning.getAuthorizationHeader("POST", VERIFY_CREDENTIALS_URL, null);
-
-        verify(oAuthHeaders).getAuthorizationHeader(authConfig, authToken, null,
-                "POST", VERIFY_CREDENTIALS_URL, null);
-    }
-
-    @Test
-    public void testGetOAuthEchoHeaders() {
-        authSigning.getOAuthEchoHeaders("POST", VERIFY_CREDENTIALS_URL, null);
-
-        verify(oAuthHeaders).getOAuthEchoHeaders(authConfig, authToken, null,
-                "POST", VERIFY_CREDENTIALS_URL, null);
-    }
-
-    @Test
-    public void testGetOAuthEchoHeadersForVerifyCredentials() {
-        authSigning.getOAuthEchoHeadersForVerifyCredentials();
-
-        verify(oAuthHeaders).getOAuthEchoHeaders(authConfig, authToken, null, "GET",
-                OAuthSigning.VERIFY_CREDENTIALS_URL, null);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
deleted file mode 100644
index ac8c481a..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
+++ /dev/null
@@ -1,468 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.content.SharedPreferences;
-
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStore;
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreImpl;
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreStrategy;
-import com.twitter.sdk.android.core.internal.persistence.SerializationStrategy;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ConcurrentHashMap;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class PersistedSessionManagerTest {
-
-    static final String PREF_KEY_SESSION = "session";
-
-    private static final long TEST_SESSION_ID = 1L;
-    private static final String PREF_RANDOM_KEY = "random_key";
-    private static final String RESTORED_USER = "restoredUser";
-
-    private PreferenceStore preferenceStore;
-    private SerializationStrategy<TwitterSession> mockSerializer;
-    private ConcurrentHashMap<Long, TwitterSession> sessionMap;
-    private ConcurrentHashMap<Long, PreferenceStoreStrategy<TwitterSession>> storageMap;
-    private PreferenceStoreStrategy<TwitterSession> mockActiveSessionStorage;
-    private PersistedSessionManager<TwitterSession> sessionManager;
-
-    @Before
-    public void setUp() throws Exception {
-        preferenceStore = new PreferenceStoreImpl(RuntimeEnvironment.application, "testSession");
-        mockSerializer = mock(SerializationStrategy.class);
-        sessionMap = new ConcurrentHashMap<>();
-        storageMap = new ConcurrentHashMap<>();
-        mockActiveSessionStorage = mock(PreferenceStoreStrategy.class);
-        sessionManager = new PersistedSessionManager<>(preferenceStore,
-                mockSerializer, sessionMap, storageMap, mockActiveSessionStorage,
-                PREF_KEY_SESSION);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        preferenceStore.edit().clear().commit();
-    }
-
-    @Test
-    public void testIsSessionPreferenceKey_validKey() {
-        final String preferenceKey = PREF_KEY_SESSION + "_" + TestFixtures.USER_ID;
-        assertTrue(sessionManager.isSessionPreferenceKey(preferenceKey));
-    }
-
-    @Test
-    public void testIsSessionPreferenceKey_invalidKey() {
-        assertFalse(sessionManager.isSessionPreferenceKey(PREF_RANDOM_KEY));
-    }
-
-    @Test
-    public void testRestoreSession_noSavedSession() {
-        when(mockActiveSessionStorage.restore()).thenReturn(null);
-        sessionManager.restoreAllSessionsIfNecessary();
-        assertNull(sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testRestoreSession_savedSession() {
-        final TwitterSession mockSession = mock(TwitterSession.class);
-        when(mockActiveSessionStorage.restore()).thenReturn(mockSession);
-        sessionManager.restoreAllSessionsIfNecessary();
-        assertEquals(mockSession, sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testRestoreSession_multipleSavedSessions() {
-        // Set up test by creating and serializing some test TwitterSessions.
-        final SharedPreferences.Editor editor = preferenceStore.edit();
-        final TwitterSession[] sessions = new TwitterSession[]{
-                new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET),
-                        TestFixtures.USER_ID, TestFixtures.SCREEN_NAME),
-                new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET),
-                        TestFixtures.USER_ID + 1, TestFixtures.SCREEN_NAME + "1")
-        };
-        final TwitterSession.Serializer serializer = new TwitterSession.Serializer();
-        final PersistedSessionManager<TwitterSession> localSessionManager =
-                new PersistedSessionManager<>(preferenceStore,
-                        serializer, sessionMap, storageMap, mockActiveSessionStorage,
-                        PREF_KEY_SESSION);
-        for (TwitterSession session : sessions) {
-            final String serializedObject = serializer.serialize(session);
-            editor.putString(localSessionManager.getPrefKey(session.getId()), serializedObject);
-        }
-        preferenceStore.save(editor);
-
-        localSessionManager.restoreAllSessionsIfNecessary();
-        assertMapSizes(sessions.length);
-        for (TwitterSession session : sessions) {
-            assertEquals(session, localSessionManager.getSession(session.getId()));
-        }
-    }
-
-    @Test
-    public void testRestoreSession_invalidPreferenceKey() {
-        final SharedPreferences.Editor editor = preferenceStore.edit();
-        editor.putString(PREF_RANDOM_KEY, "random value");
-        preferenceStore.save(editor);
-
-        sessionManager.restoreAllSessionsIfNecessary();
-        assertMapSizes(0);
-    }
-
-    @Test
-    public void testRestoreSession_multipleRestoreCalls() throws Exception {
-        final TwitterSession mockSession = mock(TwitterSession.class);
-        when(mockActiveSessionStorage.restore()).thenReturn(mockSession);
-
-        assertEquals(mockSession, sessionManager.getActiveSession());
-        sessionManager.restoreAllSessionsIfNecessary();
-
-        // restore should only be called once.
-        verify(mockActiveSessionStorage).restore();
-    }
-
-    @Test
-    public void testRestoreSession_afterActiveSessionSetExternally() throws Exception {
-        final TwitterSession mockRestoredSession = mock(TwitterSession.class);
-        when(mockActiveSessionStorage.restore()).thenReturn(mockRestoredSession);
-
-        final TwitterSession mockActiveSession = mock(TwitterSession.class);
-        sessionManager.setActiveSession(mockActiveSession);
-        sessionManager.restoreAllSessionsIfNecessary();
-
-        assertEquals(mockActiveSession, sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testGetActiveSession_restoredSession() {
-        final TwitterSession mockRestoredSession = mock(TwitterSession.class);
-        when(mockActiveSessionStorage.restore()).thenReturn(mockRestoredSession);
-
-        final TwitterSession activeSession = sessionManager.getActiveSession();
-        assertEquals(mockRestoredSession, activeSession);
-        verify(mockActiveSessionStorage).restore();
-    }
-
-    @Test
-    public void testGetActiveSession_nullSession() {
-        assertNull(sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testGetActiveSession_validSession() {
-        final TwitterSession session = setupActiveSessionTest();
-        assertEquals(session, sessionManager.getActiveSession());
-    }
-
-    private TwitterSession setupActiveSessionTest() {
-        final TwitterSession mockSession = mock(TwitterSession.class);
-        when(mockSession.getId()).thenReturn(TEST_SESSION_ID);
-        sessionManager.setActiveSession(mockSession);
-        return mockSession;
-    }
-
-    @Test
-    public void testSetActiveSession_nullSession() {
-        try {
-            sessionManager.setActiveSession(null);
-            fail();
-        } catch (Exception e) {
-            assertTrue(e instanceof IllegalArgumentException);
-        }
-    }
-
-    @Test
-    public void testSetActiveSession_validSession() {
-        final TwitterSession session = setupActiveSessionTest();
-        final int numSessionsThisTest = 1;
-        assertMapSizes(numSessionsThisTest);
-
-        verify(mockActiveSessionStorage).save(session);
-        assertEquals(session, sessionManager.getActiveSession());
-        assertEquals(session, sessionManager.getSession(session.getId()));
-    }
-
-    private void assertMapSizes(int count) {
-        assertEquals(count, sessionMap.size());
-        assertEquals(count, storageMap.size());
-    }
-
-    @Test
-    public void testSetActiveSession_differentSession() {
-        final TwitterSession session = setupActiveSessionTest();
-        int numSessionsThisTest = 1;
-        assertMapSizes(numSessionsThisTest);
-        verify(mockActiveSessionStorage).save(session);
-        assertEquals(session, sessionManager.getActiveSession());
-
-        final TwitterSession session2 = mock(TwitterSession.class);
-        final long differentSessionId = session.getId() + 1;
-        when(session2.getId()).thenReturn(differentSessionId);
-        sessionManager.setActiveSession(session2);
-        numSessionsThisTest++;
-        assertMapSizes(numSessionsThisTest);
-        verify(mockActiveSessionStorage).save(session2);
-        assertNotSame(session, session2);
-        assertEquals(session2, sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testClearActiveSession() {
-        setupActiveSessionTest();
-        sessionManager.clearActiveSession();
-        assertMapSizes(0);
-        verify(mockActiveSessionStorage).clear();
-        assertNull(sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testClearActiveSession_noActiveSession() {
-        try {
-            sessionManager.clearActiveSession();
-        } catch (Exception e) {
-            fail();
-        }
-    }
-
-    @Test
-    public void testClearActiveSession_beforeRestoreSession() {
-        setupActiveSessionTest();
-        sessionManager.clearActiveSession();
-        assertNull(sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testGetSession() {
-        final TwitterSession session = setupActiveSessionTest();
-        assertEquals(session, sessionManager.getSession(session.getId()));
-    }
-
-    @Test
-    public void testGetSession_multipleSessions() {
-        final int count = 2;
-        final List<TwitterSession> sessions = setupMultipleSessionsTest(count);
-        for (int i = 0; i < count; i++) {
-            final TwitterSession session = sessions.get(i);
-            assertEquals(session, sessionManager.getSession(session.getId()));
-        }
-    }
-
-    private List<TwitterSession> setupMultipleSessionsTest(int count) {
-        final List<TwitterSession> sessions = new ArrayList<>(count);
-        for (int i = 0; i < count; i++) {
-            final long id = i;
-            final TwitterSession session = mock(TwitterSession.class);
-            when(session.getId()).thenReturn(id);
-            sessionManager.setSession(id, session);
-            sessions.add(session);
-        }
-        return sessions;
-    }
-
-    @Test
-    public void testSetSession_nullSession() {
-        try {
-            sessionManager.setSession(TEST_SESSION_ID, null);
-            fail();
-        } catch (Exception e) {
-            assertTrue(e instanceof IllegalArgumentException);
-        }
-    }
-
-    @Test
-    public void testSetSession_noActiveSession() {
-        final TwitterSession session = mock(TwitterSession.class);
-        when(session.getId()).thenReturn(TEST_SESSION_ID);
-        sessionManager.setSession(TEST_SESSION_ID, session);
-        final int numSessionsThisTest = 1;
-        assertMapSizes(numSessionsThisTest);
-        // Verify that when setSession is called and there is no active session, the specified
-        // session becomes the active session.
-        verify(mockActiveSessionStorage).save(session);
-        assertEquals(session, sessionManager.getSession(TEST_SESSION_ID));
-        assertEquals(session, sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testSetSession_multipleSessions() {
-        final int count = 2;
-        final List<TwitterSession> sessions = setupMultipleSessionsTest(count);
-        assertMapSizes(count);
-
-        for (int i = 0; i < count; i++) {
-            final TwitterSession session = sessions.get(i);
-            assertEquals(session, sessionManager.getSession(session.getId()));
-        }
-        // Verify that the first session is still the active session.
-        assertEquals(sessions.get(0), sessionManager.getActiveSession());
-    }
-
-    @Test
-    public void testSetSession_updateExistingSession() {
-        final TwitterAuthToken authToken = mock(TwitterAuthToken.class);
-        final TwitterSession session = new TwitterSession(authToken, TestFixtures.USER_ID,
-                TestFixtures.SCREEN_NAME);
-        final long sessionId = session.getId();
-        sessionManager.setSession(sessionId, session);
-        assertEquals(session, sessionManager.getSession(sessionId));
-        assertEquals(session, sessionManager.getActiveSession());
-        assertMapSizes(1);
-
-        final TwitterSession sessionWithDifferentUserName = new TwitterSession(authToken, sessionId,
-                "differentUserName");
-        sessionManager.setSession(sessionId, sessionWithDifferentUserName);
-        assertEquals(sessionWithDifferentUserName, sessionManager.getSession(sessionId));
-        assertEquals(sessionWithDifferentUserName, sessionManager.getActiveSession());
-        assertMapSizes(1);
-    }
-
-    @Test
-    public void testSetSession_beforeRestoreSession() {
-        final TwitterAuthToken authToken = mock(TwitterAuthToken.class);
-
-        final TwitterSession newSession = new TwitterSession(authToken, TestFixtures.USER_ID,
-                TestFixtures.SCREEN_NAME);
-        final TwitterSession restoredSession =
-                new TwitterSession(authToken, TestFixtures.USER_ID, RESTORED_USER);
-
-        setupSessionForRestore(restoredSession);
-
-        sessionManager.setSession(newSession.getId(), newSession);
-        sessionManager.restoreAllSessionsIfNecessary();
-
-        // We want to make sure that even if restore sessions is called after setSession.
-        // session set in setSession will not be overwritten.
-        assertEquals(newSession, sessionManager.getSession(newSession.getId()));
-    }
-
-    private void setupSessionForRestore(final TwitterSession restoredSession) {
-        final SharedPreferences.Editor editor = preferenceStore.edit();
-        final TwitterSession.Serializer serializer = new TwitterSession.Serializer();
-        final String serializedObject = serializer.serialize(restoredSession);
-        editor.putString(sessionManager.getPrefKey(restoredSession.getId()), serializedObject);
-        editor.commit();
-    }
-
-    @Test
-    public void testClearSession() {
-        final TwitterSession session = setupActiveSessionTest();
-        sessionManager.clearSession(session.getId());
-        assertMapSizes(0);
-        assertNull(sessionManager.getActiveSession());
-        assertNull(sessionManager.getSession(session.getId()));
-    }
-
-    @Test
-    public void testClearSession_noSessions() {
-        try {
-            sessionManager.clearSession(TEST_SESSION_ID);
-        } catch (Exception e) {
-            fail();
-        }
-    }
-
-    @Test
-    public void testClearSession_multipleSessionsClearFirstSession() {
-        final int count = 2;
-        final List<TwitterSession> sessions = setupMultipleSessionsTest(count);
-        int numSessionsThisTest = count;
-        assertMapSizes(numSessionsThisTest);
-
-        // Clear the first session
-        final long firstSessionId = sessions.get(0).getId();
-        sessionManager.clearSession(firstSessionId);
-        numSessionsThisTest--;
-        assertMapSizes(numSessionsThisTest);
-        assertNull(sessionManager.getSession(firstSessionId));
-        // Make sure the second session is still there
-        final long secondSessionId = sessions.get(1).getId();
-        assertEquals(sessions.get(1), sessionManager.getSession(secondSessionId));
-    }
-
-    @Test
-    public void testClearSession_multipleSessionsClearSecondSession() {
-        final int count = 2;
-        final List<TwitterSession> sessions = setupMultipleSessionsTest(count);
-        int numSessionsThisTest = count;
-        assertMapSizes(numSessionsThisTest);
-
-        // Clear the second session
-        final long secondSessionId = sessions.get(1).getId();
-        sessionManager.clearSession(secondSessionId);
-        numSessionsThisTest--;
-        assertMapSizes(numSessionsThisTest);
-        assertNull(sessionManager.getSession(secondSessionId));
-        // Make sure the first session is still there
-        final long firstSessionId = sessions.get(0).getId();
-        assertEquals(sessions.get(0), sessionManager.getSession(firstSessionId));
-    }
-
-    @Test
-    public void testClearSession_beforeRestoreSession() {
-        final TwitterSession restoredSession =
-                new TwitterSession(mock(TwitterAuthToken.class), TestFixtures.USER_ID,
-                        RESTORED_USER);
-        setupSessionForRestore(restoredSession);
-        sessionManager.clearSession(TestFixtures.USER_ID);
-        sessionManager.restoreAllSessionsIfNecessary();
-
-        assertNull(sessionManager.getSession(TestFixtures.USER_ID));
-    }
-
-    @Test
-    public void testGetPrefKey() {
-        assertEquals(PREF_KEY_SESSION + "_" + TEST_SESSION_ID,
-                sessionManager.getPrefKey(TEST_SESSION_ID));
-    }
-
-    @Test
-    public void testGetSessionMap() {
-        try {
-            sessionManager.getSessionMap().put(1L, null);
-            fail("should be unmodifiable map");
-        } catch (UnsupportedOperationException e) {
-            // success
-        }
-    }
-
-    @Test
-    public void testGetSessionMap_restoresSessionsIfNecessary() {
-        final TwitterSession mockSession = mock(TwitterSession.class);
-        when(mockActiveSessionStorage.restore()).thenReturn(mockSession);
-        sessionManager.getSessionMap();
-        assertEquals(mockSession, sessionManager.getActiveSession());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java
deleted file mode 100644
index bc51f745..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStore;
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreImpl;
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreStrategy;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class PreferenceStoreStrategyTest {
-    private PreferenceStore preferenceStore;
-    private PreferenceStoreStrategy<TwitterSession> preferenceStrategy;
-
-    @Before
-    public void setUp() throws Exception {
-        preferenceStore = new PreferenceStoreImpl(RuntimeEnvironment.application, "testSession");
-        preferenceStrategy = new PreferenceStoreStrategy<>(preferenceStore,
-                new TwitterSession.Serializer(), "testSession");
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        preferenceStrategy.clear();
-    }
-
-    @Test
-    public void testRestore_emptyStore() throws Exception {
-        assertEquals(null, preferenceStrategy.restore());
-    }
-
-    @Test
-    public void testSaveAndRestore_nullSession() throws Exception {
-        preferenceStrategy.save(null);
-        final TwitterSession restoredSession = preferenceStrategy.restore();
-        assertEquals(null, restoredSession);
-    }
-
-    @Test
-    public void testSaveAndRestore_session() throws Exception {
-        final TwitterSession session = new TwitterSession(new TwitterAuthToken
-                (TestFixtures.TOKEN, TestFixtures.SECRET), TwitterSession.UNKNOWN_USER_ID,
-                TwitterSession.UNKNOWN_USER_NAME);
-        preferenceStrategy.save(session);
-        final TwitterSession restoredSession = preferenceStrategy.restore();
-        assertEquals(session, restoredSession);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java
deleted file mode 100644
index 53808dd2..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.VineCardUtils;
-import com.twitter.sdk.android.core.models.BindingValues;
-import com.twitter.sdk.android.core.models.Card;
-import com.twitter.sdk.android.core.models.UserValue;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public final class TestFixtures {
-
-    public static final String KEY = "key";
-    public static final String TOKEN = "token";
-    public static final String SECRET = "secret";
-    public static final String VERIFIER = "verifier";
-    public static final long USER_ID = 11L;
-    public static final String SCREEN_NAME = "username";
-
-    public static final String PLAYER_CARD_VINE = VineCardUtils.VINE_CARD;
-
-    public static final String TEST_VINE_USER_ID = "586671909";
-
-    public static Card sampleValidVineCard() {
-        return new Card(createBindingValuesForCard(), PLAYER_CARD_VINE);
-    }
-
-    public static BindingValues createBindingValuesForCard() {
-        final UserValue testUser = new UserValue(TEST_VINE_USER_ID);
-        final Map<String, Object> testValues = new HashMap<>();
-        testValues.put("site", testUser);
-
-        final BindingValues bindingValues = new BindingValues(testValues);
-        return bindingValues;
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TestResources.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TestResources.java
deleted file mode 100644
index a08f7056..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TestResources.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-package com.twitter.sdk.android.core;
-
-import org.junit.rules.TestRule;
-import org.junit.runner.Description;
-import org.junit.runners.model.Statement;
-
-import java.io.InputStream;
-
-/**
- * A rule for accessing test resources needed by unit tests.
- * <p>
- * Add this as a public member variable annotated with @Rule. For example:
- *
- * @Rule public final TestResources mTestResources = new TestResources();
- */
-public class TestResources implements TestRule {
-    @Override
-    public Statement apply(final Statement base, Description description) {
-        return base;
-    }
-
-    /**
-     * Open a resource under src/resources/test as an InputStream.
-     *
-     * @throws ResourceNotFound if the resource is not found
-     */
-    public InputStream getAsStream(String resourceName) {
-        final InputStream stream = getClass().getClassLoader().getResourceAsStream(resourceName);
-        if (stream == null) {
-            throw new ResourceNotFound(resourceName);
-        }
-        return stream;
-    }
-
-    public static class ResourceNotFound extends RuntimeException {
-        public final String resourceName;
-
-        public ResourceNotFound(String resourceName) {
-            this.resourceName = resourceName;
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
deleted file mode 100644
index 47fa9016..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.models.ApiError;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterApiExceptionTest {
-
-    private static final int API_ERROR_CODE = 239;
-    private static final int DEFAULT_ERROR_CODE = 0;
-    private static final String API_ERROR_MESSAGE = "Bad guest token";
-    private static final String API_ERROR_JSON = "{\"errors\":[{\"message\":\"Bad guest token\"," +
-            "\"code\":239}]}\n";
-    private static final String API_ERROR_NO_ERROR_CODE = "{\"errors\":[{\"message\":\"Bad " +
-            "guest token\"}]}\n";
-    private static final String API_ERROR_NO_ERRORS = "{\"errors\": null}\n";
-    private static final String API_ERROR_NO_ERROR_MESSAGE = "{\"errors\":[{\"code\":239}]}\n";
-    private static final String API_ERROR_NON_JSON = "not a json";
-
-    @Test
-    public void testParseErrorCode() throws IOException {
-        final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_JSON);
-        assertEquals(API_ERROR_CODE, apiError.code);
-        assertEquals(API_ERROR_MESSAGE, apiError.message);
-    }
-
-    @Test
-    public void testParseError_nonJSON() throws Exception {
-        assertNull(TwitterApiException.parseApiError(API_ERROR_NON_JSON));
-    }
-
-    @Test
-    public void testParseError_noErrorCode() throws Exception {
-        final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERROR_CODE);
-        assertEquals(DEFAULT_ERROR_CODE, apiError.code);
-        assertEquals(API_ERROR_MESSAGE, apiError.message);
-    }
-
-    @Test
-    public void testParseError_noErrors() throws Exception {
-        final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERRORS);
-        assertNull(apiError);
-    }
-
-    @Test
-    public void testParseError_noMessage() throws Exception {
-        final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERROR_MESSAGE);
-        assertEquals(API_ERROR_CODE, apiError.code);
-        assertEquals(null, apiError.message);
-    }
-
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java
deleted file mode 100644
index 4631bca2..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.os.Parcel;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterAuthConfigTest {
-    private static final String NO_PARAM_ERROR_MSG =
-            "TwitterAuthConfig must not be created with null consumer key or secret.";
-
-    private TwitterAuthConfig authConfig;
-
-    @Before
-    public void setUp() throws Exception {
-        authConfig = new TwitterAuthConfig(TestFixtures.KEY, TestFixtures.SECRET);
-    }
-
-    @Test
-    public void testParcelable() {
-        final Parcel parcel = Parcel.obtain();
-        authConfig.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        final TwitterAuthConfig parceledAuthConfig
-                = TwitterAuthConfig.CREATOR.createFromParcel(parcel);
-        assertEquals(TestFixtures.KEY, parceledAuthConfig.getConsumerKey());
-        assertEquals(TestFixtures.SECRET, parceledAuthConfig.getConsumerSecret());
-    }
-
-    @Test
-    public void testGetRequestCode() {
-        assertEquals(TwitterAuthConfig.DEFAULT_AUTH_REQUEST_CODE, authConfig.getRequestCode());
-    }
-
-    @Test
-    public void testSanitizeAttribute_nullAttribute() {
-        assertNull(TwitterAuthConfig.sanitizeAttribute(null));
-    }
-
-    @Test
-    public void testSanitizeAttribute_sanitizedString() {
-        final String test = "test";
-        assertEquals(test, TwitterAuthConfig.sanitizeAttribute(test));
-    }
-
-    @Test
-    public void testSanitizeAttribute_withWhitespace() {
-        final String test = "\ttest    ";
-        assertEquals("test", TwitterAuthConfig.sanitizeAttribute(test));
-    }
-
-    @Test
-    public void testConstructor_nullKey() {
-        try {
-            new TwitterAuthConfig(null, "secret");
-            fail();
-        } catch (IllegalArgumentException ie) {
-            assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage());
-        }
-    }
-
-    @Test
-    public void testConstructor_nullSecret() {
-        try {
-            new TwitterAuthConfig("key", null);
-            fail();
-        } catch (IllegalArgumentException ie) {
-            assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage());
-        }
-    }
-
-    @Test
-    public void testConstructor_nullArguments() {
-        try {
-            new TwitterAuthConfig(null, null);
-            fail();
-        } catch (IllegalArgumentException ie) {
-            assertEquals(NO_PARAM_ERROR_MSG, ie.getMessage());
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java
deleted file mode 100644
index 380505e1..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.os.Parcel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterAuthTokenTest {
-
-    @Test
-    public void testParcelable() {
-        final TwitterAuthToken authToken = new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET);
-        final Parcel parcel = Parcel.obtain();
-        authToken.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        final TwitterAuthToken parceledAuthToken
-                = TwitterAuthToken.CREATOR.createFromParcel(parcel);
-        assertEquals(authToken, parceledAuthToken);
-    }
-
-    @Test
-    public void testIsExpired() {
-        final TwitterAuthToken token = new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET);
-        assertFalse(token.isExpired());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterConfigTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterConfigTest.java
deleted file mode 100644
index ea495990..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterConfigTest.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.app.Application;
-import android.content.Context;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import java.util.concurrent.ExecutorService;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.when;
-
-public class TwitterConfigTest {
-    @Mock
-    Context mockContext;
-    @Mock
-    Application mockApplication;
-    @Mock
-    ExecutorService mockExecutorService;
-    @Mock
-    TwitterAuthConfig mockTwitterAuthConfig;
-    @Mock
-    Logger mockLogger;
-
-    @Before
-    public void setUp() {
-        MockitoAnnotations.initMocks(this);
-
-        when(mockContext.getApplicationContext()).thenReturn(mockApplication);
-    }
-
-    @Test
-    public void testBuilderConstructor_shouldStoreAppContext() {
-        final TwitterConfig config = new TwitterConfig.Builder(mockContext).build();
-        assertEquals(mockApplication, config.context);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testBuilderConstructor_shouldThrowException() {
-        new TwitterConfig.Builder(null).build();
-    }
-
-    @Test
-    public void testBuilder() {
-        final TwitterConfig config = new TwitterConfig
-                .Builder(mockContext)
-                .executorService(mockExecutorService)
-                .logger(mockLogger)
-                .twitterAuthConfig(mockTwitterAuthConfig)
-                .debug(true)
-                .build();
-
-        assertEquals(mockApplication, config.context);
-        assertEquals(mockExecutorService, config.executorService);
-        assertEquals(mockLogger, config.logger);
-        assertEquals(mockTwitterAuthConfig, config.twitterAuthConfig);
-        assertTrue(config.debug);
-    }
-
-    @Test
-    public void testBuilder_withDefaults() {
-        final TwitterConfig config = new TwitterConfig
-                .Builder(mockContext)
-                .build();
-
-        assertEquals(mockApplication, config.context);
-        assertNull(config.executorService);
-        assertNull(config.logger);
-        assertNull(config.twitterAuthConfig);
-        assertNull(config.debug);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testBuilder_withNullLogger_shouldThrowException() {
-        new TwitterConfig.Builder(mockContext).logger(null).build();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testBuilder_withNullTwitterAuthConfig_shouldThrowException() {
-        new TwitterConfig.Builder(mockContext).twitterAuthConfig(null).build();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testBuilder_withNullExecutorService_shouldThrowException() {
-        new TwitterConfig.Builder(mockContext).executorService(null).build();
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java
deleted file mode 100644
index 662e6bf3..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.database.sqlite.SQLiteDatabase;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import java.io.File;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterContextTest {
-    private static final String ROOT_DIR = ".Fabric";
-    private String name;
-    private String componentPath;
-    private Context context;
-
-    @Before
-    public void setUp() throws Exception {
-        name = "com.twitter.sdk.android:twitter-core";
-        componentPath = ROOT_DIR + "/" + name;
-        context = new TwitterContext(RuntimeEnvironment.application, name, componentPath);
-    }
-
-    @Test
-    public void testGetDatabasePath() {
-        final File file = context.getDatabasePath("a");
-        assertValidDirStructure(file);
-        assertTrue(file.getParentFile().exists());
-    }
-
-    @Test
-    public void testOpenOrCreateDatabase() {
-        final SQLiteDatabase db = context.openOrCreateDatabase("b", Context.MODE_PRIVATE, null);
-        assertNotNull(db);
-    }
-
-    @Test
-    public void testOpenOrCreateDatabaseWithErrorHandler() {
-        final SQLiteDatabase db =
-                context.openOrCreateDatabase("b", Context.MODE_PRIVATE, null, null);
-        assertNotNull(db);
-    }
-
-    @Test
-    public void testGetFilesDir() {
-        final File file = context.getFilesDir();
-        assertValidDirStructure(file);
-    }
-
-    @Test
-    public void testExternalGetFilesDir() {
-        final File file = context.getExternalFilesDir(null);
-        assertValidDirStructure(file);
-    }
-
-    @Test
-    public void testGetCacheDir() {
-        final File file = context.getCacheDir();
-        assertValidDirStructure(file);
-    }
-
-    @Test
-    public void testGetExternalCacheDir() {
-        final File file = context.getExternalCacheDir();
-        assertValidDirStructure(file);
-    }
-
-    @Test
-    public void testGetSharedPreferences() {
-        final String testName = "test";
-        final String testComponentPath = ROOT_DIR + "/" + testName;
-        final Context testContext =
-                new TwitterContext(RuntimeEnvironment.application, testName, testComponentPath);
-
-        final SharedPreferences pref =
-                context.getSharedPreferences(testName, Context.MODE_PRIVATE);
-        final SharedPreferences testPref =
-                testContext.getSharedPreferences(testName, Context.MODE_PRIVATE);
-
-        assertNotNull(pref);
-        assertFalse(pref.equals(testPref));
-        pref.edit().putBoolean(testName, true).commit();
-        assertFalse(testPref.getBoolean(testName, false));
-
-    }
-
-    private void assertValidDirStructure(File file) {
-        assertNotNull(file);
-        assertTrue(file.getPath().contains(name));
-        assertTrue(file.getPath().contains(ROOT_DIR));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java
deleted file mode 100644
index fefbc4a0..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.lang.reflect.Constructor;
-import java.util.HashMap;
-import java.util.Map;
-
-import okhttp3.Headers;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterRateLimitTest {
-
-    public static final String X_RATE_LIMIT_LIMIT = "x-rate-limit-limit";
-    public static final String X_RATE_LIMIT_REMAINING = "x-rate-limit-remaining";
-    public static final String X_RATE_LIMIT_RESET = "x-rate-limit-reset";
-
-    private Map<String, String> headers;
-
-    @Before
-    public void setUp() throws Exception {
-        headers = new HashMap<>();
-    }
-
-    @Test
-    public void testConstructor_nonePublic() {
-        final Constructor<?>[] constructors = TwitterRateLimit.class.getConstructors();
-        assertEquals(0, constructors.length);
-    }
-
-    @Test
-    public void testCreator_populatedHeader() {
-
-        final String limit = "10";
-        final String remaining = "20";
-        final String reset = "30";
-        headers.put(X_RATE_LIMIT_LIMIT, limit);
-        headers.put(X_RATE_LIMIT_REMAINING, remaining);
-        headers.put(X_RATE_LIMIT_RESET, reset);
-
-        final TwitterRateLimit rateLimit = new TwitterRateLimit(Headers.of(headers));
-        assertEquals(10, rateLimit.getLimit());
-        assertEquals(20, rateLimit.getRemaining());
-        assertEquals(30L, rateLimit.getReset());
-    }
-
-    @Test
-    public void testCreator_emptyHeader() {
-        final TwitterRateLimit rateLimit = new TwitterRateLimit(Headers.of(headers));
-        assertEquals(0, rateLimit.getLimit());
-        assertEquals(0, rateLimit.getRemaining());
-        assertEquals(0, rateLimit.getReset());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java
deleted file mode 100644
index 52f1bf1b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterSessionSerializerTest {
-    // static unix timestamp so that tests are repeatable and more easily debugged
-    private static final long CREATED_AT = 1414450780L;
-    public static final String SESSION_JSON = "{\"user_name\":\"\","
-            + "\"auth_token\":{"
-            + "\"token\":\"" + TestFixtures.TOKEN + "\","
-            + "\"secret\":\"" + TestFixtures.SECRET + "\","
-            + "\"created_at\":" + CREATED_AT + "},"
-            + "\"id\":-1}";
-    public static final String FULL_SESSION_JSON =
-            "{\"user_name\":\"" + TestFixtures.SCREEN_NAME + "\","
-                    + "\"auth_token\":{"
-                    + "\"token\":\"" + TestFixtures.TOKEN + "\","
-                    + "\"secret\":\"" + TestFixtures.SECRET + "\","
-                    + "\"created_at\":" + CREATED_AT + "},"
-                    + "\"id\":" + TestFixtures.USER_ID + "}";
-    public static final String SESSION_JSON_NULL_USERNAME = "{\"auth_token\":{"
-            + "\"token\":\"token\","
-            + "\"secret\":\"secret\","
-            + "\"created_at\":" + CREATED_AT + "},"
-            + "\"id\":" + TestFixtures.USER_ID + "}";
-
-    private TwitterSession.Serializer serializer;
-
-    @Before
-    public void setUp() throws Exception {
-
-        serializer = new TwitterSession.Serializer();
-    }
-
-    @Test
-    public void testDeserialize_sessionWithAuthToken() throws Exception {
-        final TwitterSession session = serializer.deserialize(SESSION_JSON);
-        final TwitterSession newSession = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
-                TwitterSession.UNKNOWN_USER_ID, TwitterSession.UNKNOWN_USER_NAME);
-        assertEquals(session, newSession);
-    }
-
-    @Test
-    public void testDeserialize_session() throws Exception {
-        final TwitterSession session = serializer.deserialize(FULL_SESSION_JSON);
-        assertEquals(new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN,
-                        TestFixtures.SECRET, CREATED_AT), TestFixtures.USER_ID, TestFixtures.SCREEN_NAME),
-                session);
-    }
-
-    @Test
-    public void testDeserialize_sessionWithNullUserName() throws Exception {
-        final TwitterSession session = serializer.deserialize(SESSION_JSON_NULL_USERNAME);
-        assertEquals(new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET, CREATED_AT), TestFixtures.USER_ID, null), session);
-    }
-
-    @Test
-    public void testDeserialize_nullSerializedSession() throws Exception {
-        final TwitterSession session = serializer.deserialize(null);
-        assertNull(session);
-    }
-
-    @Test
-    public void testSerialize_sessionWithAuthToken() throws Exception {
-        final TwitterSession session = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
-                TwitterSession.UNKNOWN_USER_ID, TwitterSession.UNKNOWN_USER_NAME);
-        assertEquals(SESSION_JSON, serializer.serialize(session));
-    }
-
-    @Test
-    public void testSerialize_session() throws Exception {
-        final TwitterSession session = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
-                TestFixtures.USER_ID, TestFixtures.SCREEN_NAME);
-        assertEquals(FULL_SESSION_JSON, serializer.serialize(session));
-    }
-
-    @Test
-    public void testSerialize_sessionWithNullUserName() throws Exception {
-        final TwitterSession session = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
-                TestFixtures.USER_ID, null);
-        assertEquals(SESSION_JSON_NULL_USERNAME, serializer.serialize(session));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java
deleted file mode 100644
index 2be6720b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterSessionTest {
-
-    @Test
-    public void testConstructor_noAuthToken() throws Exception {
-        try {
-            final TwitterSession session = new TwitterSession(null, TwitterSession.UNKNOWN_USER_ID,
-                    TwitterSession.UNKNOWN_USER_NAME);
-            fail();
-        } catch (IllegalArgumentException ie) {
-            assertEquals("AuthToken must not be null.", ie.getMessage());
-        }
-    }
-
-    @Test
-    public void testEquals_sameObjects() throws Exception {
-        final TwitterSession session = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
-                TestFixtures.SCREEN_NAME);
-        final TwitterSession newSession = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
-                TestFixtures.SCREEN_NAME);
-        assertEquals(session.hashCode(), newSession.hashCode());
-        assertEquals(session, newSession);
-    }
-
-    @Test
-    public void testEquals_sameObjectsWithNullUserName() throws Exception {
-        final TwitterSession session = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
-                null);
-        final TwitterSession newSession = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
-                null);
-        assertEquals(session.hashCode(), newSession.hashCode());
-        assertEquals(session, newSession);
-    }
-
-    @Test
-    public void testEquals_diffObjects() throws Exception {
-        final TwitterSession session = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
-                TestFixtures.SCREEN_NAME);
-        final long differentUserId = TestFixtures.USER_ID + 1;
-        final TwitterSession newSession = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), differentUserId,
-                TestFixtures.SCREEN_NAME);
-        assertNotSame(session, newSession);
-    }
-
-    @Test
-    public void testEquals_diffObjectsWithNullUserName() throws Exception {
-        final TwitterSession session = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
-                null);
-        final long differentUserId = TestFixtures.USER_ID + 1;
-        final TwitterSession newSession = new TwitterSession(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), differentUserId,
-                null);
-        assertNotSame(session, newSession);
-    }
-
-}
-
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterTest.java
deleted file mode 100644
index f86f426b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterTest.java
+++ /dev/null
@@ -1,135 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.app.Application;
-import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.content.res.Resources;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.File;
-import java.util.concurrent.ExecutorService;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterTest {
-    private static final String CONSUMER_KEY = "com.twitter.sdk.android.CONSUMER_KEY";
-    private static final String CONSUMER_SECRET = "com.twitter.sdk.android.CONSUMER_SECRET";
-    private static final String TEST_PACKAGE_NAME = "com.twitter.sdk.android.test";
-    private static final String TEST_PATH_SUFFIX = ".TwitterKit" + File.separator + TEST_PACKAGE_NAME;
-
-    @Mock
-    Context mockContext;
-    @Mock
-    Application mockApplication;
-    @Mock
-    ExecutorService mockExecutorService;
-    @Mock
-    TwitterAuthConfig mockTwitterAuthConfig;
-    @Mock
-    Logger mockLogger;
-    @Mock
-    Resources mockResources;
-
-    @Before
-    @SuppressWarnings("ResourceType")
-    public void setUp() {
-        MockitoAnnotations.initMocks(this);
-
-        when(mockResources.getIdentifier(CONSUMER_KEY, "string", TEST_PACKAGE_NAME)).thenReturn(1);
-        when(mockResources.getIdentifier(CONSUMER_SECRET, "string", TEST_PACKAGE_NAME))
-                .thenReturn(2);
-        when(mockResources.getString(1)).thenReturn(TestFixtures.KEY);
-        when(mockResources.getString(2)).thenReturn(TestFixtures.SECRET);
-
-        when(mockApplication.getResources()).thenReturn(mockResources);
-        when(mockApplication.getApplicationInfo()).thenReturn(new ApplicationInfo());
-        when(mockApplication.getApplicationContext()).thenReturn(mockApplication);
-        when(mockApplication.getPackageName()).thenReturn(TEST_PACKAGE_NAME);
-
-        when(mockContext.getApplicationContext()).thenReturn(mockApplication);
-    }
-
-    @After
-    public void tearDown() {
-        // Reset static instance for next test
-        Twitter.instance = null;
-    }
-
-    @Test
-    public void testInitialize_withConfig() {
-        final TwitterConfig config = new TwitterConfig
-                .Builder(mockContext)
-                .executorService(mockExecutorService)
-                .logger(mockLogger)
-                .twitterAuthConfig(mockTwitterAuthConfig)
-                .debug(true)
-                .build();
-
-        Twitter.initialize(config);
-
-        assertEquals(mockExecutorService, Twitter.getInstance().getExecutorService());
-        assertEquals(mockLogger, Twitter.getLogger());
-        assertEquals(mockTwitterAuthConfig, Twitter.getInstance().getTwitterAuthConfig());
-        assertNotNull(Twitter.getInstance().getActivityLifecycleManager());
-        assertTrue(Twitter.getInstance().isDebug());
-
-        verifyContext(Twitter.getInstance().getContext(TEST_PACKAGE_NAME));
-    }
-
-    @Test
-    public void testInitialize_withDefaults() {
-        Twitter.initialize(mockContext);
-
-        assertNotNull(Twitter.getInstance().getExecutorService());
-        assertNotNull(Twitter.getInstance().getActivityLifecycleManager());
-        assertEquals(Twitter.DEFAULT_LOGGER, Twitter.getLogger());
-        assertFalse(Twitter.getInstance().isDebug());
-
-        final TwitterAuthConfig authConfig = Twitter.getInstance().getTwitterAuthConfig();
-        assertNotNull(authConfig);
-        assertEquals(TestFixtures.KEY, authConfig.getConsumerKey());
-        assertEquals(TestFixtures.SECRET, authConfig.getConsumerSecret());
-
-        verifyContext(Twitter.getInstance().getContext(TEST_PACKAGE_NAME));
-    }
-
-    private void verifyContext(Context context) {
-        assertNotNull(context);
-        assertTrue(context instanceof TwitterContext);
-        assertTrue(context.getFilesDir().getAbsolutePath().endsWith(TEST_PATH_SUFFIX));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void testGetInstance_shouldThrowWhenNotInitialized() {
-        Twitter.getInstance();
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
deleted file mode 100644
index 2dcbaacb..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TestFixtures;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterSession;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(RobolectricTestRunner.class)
-public class AuthHandlerTest {
-    private static final TwitterAuthConfig AUTH_CONFIG
-            = new TwitterAuthConfig("consumerKey", "consumerSecret");
-    private static final int TEST_REQUEST_CODE = 1;
-    private static final String TEST_CANCEL_MESSAGE = "Test cancel message";
-    private static final String TEST_ERROR_MESSAGE = "Test error message";
-
-    @Test
-    public void testHandleOnActivityResult_resultCodeOK() {
-        // Verify that when handleOnActivityResult is called with ok, the listener receives the auth
-        // response.
-        final Callback<TwitterSession> mockCallback = mock(Callback.class);
-        final AuthHandler authHandler = newAuthHandler(mockCallback);
-
-        final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
-                Activity.RESULT_OK, new Intent()
-                        .putExtra(AuthHandler.EXTRA_TOKEN, TestFixtures.TOKEN)
-                        .putExtra(AuthHandler.EXTRA_TOKEN_SECRET, TestFixtures.SECRET)
-                        .putExtra(AuthHandler.EXTRA_SCREEN_NAME, TestFixtures.SCREEN_NAME)
-                        .putExtra(AuthHandler.EXTRA_USER_ID, TestFixtures.USER_ID));
-
-        assertTrue(result);
-        final ArgumentCaptor<Result> argCaptor = ArgumentCaptor.forClass(Result.class);
-        verify(mockCallback).success(argCaptor.capture());
-        final TwitterSession session = (TwitterSession) argCaptor.getValue().data;
-        final TwitterAuthToken authToken = session.getAuthToken();
-        assertEquals(TestFixtures.TOKEN, authToken.token);
-        assertEquals(TestFixtures.SECRET, authToken.secret);
-        assertEquals(TestFixtures.SCREEN_NAME, session.getUserName());
-        assertEquals(TestFixtures.USER_ID, session.getUserId());
-    }
-
-    @Test
-    public void testHandleOnActivityResult_resultCodeCancel() {
-        // Verify that when handleOnActivityResult is called with cancel code, the listener receives
-        // the error.
-        final Callback<TwitterSession> mockCallback = mock(Callback.class);
-        final AuthHandler authHandler = newAuthHandler(mockCallback);
-        final TwitterAuthException authException = new TwitterAuthException(TEST_CANCEL_MESSAGE);
-
-        final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
-                Activity.RESULT_CANCELED, new Intent().putExtra(AuthHandler.EXTRA_AUTH_ERROR,
-                        authException));
-
-        assertTrue(result);
-        assertCallbackFailureErrorMsg(mockCallback, authException.getMessage());
-    }
-
-    private void assertCallbackFailureErrorMsg(Callback<TwitterSession> mockCallback,
-                                               String expectedErrorMsg) {
-        final ArgumentCaptor<TwitterAuthException> argCaptor
-                = ArgumentCaptor.forClass(TwitterAuthException.class);
-        verify(mockCallback).failure(argCaptor.capture());
-        assertEquals(expectedErrorMsg, argCaptor.getValue().getMessage());
-    }
-
-    @Test
-    public void testHandleOnActivityResult_resultCodeError() {
-        // Verify that when handleOnActivityResult is called with an error code and intent data, the
-        // listener receives the error.
-        final Callback<TwitterSession> mockCallback = mock(Callback.class);
-        final AuthHandler authHandler = newAuthHandler(mockCallback);
-        final TwitterAuthException authException = new TwitterAuthException(TEST_ERROR_MESSAGE);
-
-        final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
-                AuthHandler.RESULT_CODE_ERROR, new Intent().putExtra(AuthHandler.EXTRA_AUTH_ERROR,
-                        authException));
-
-        assertTrue(result);
-        assertCallbackFailureErrorMsg(mockCallback, authException.getMessage());
-    }
-
-    @Test
-    public void testHandleOnActivityResult_resultCodeErrorDataNull() {
-        // Verify that when handleOnActivityResult is called with an error code and no intent data,
-        // the listener receives generic error.
-        final Callback<TwitterSession> mockCallback = mock(Callback.class);
-        final AuthHandler authHandler = newAuthHandler(mockCallback);
-
-        final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
-                AuthHandler.RESULT_CODE_ERROR, null);
-
-        assertTrue(result);
-        assertCallbackFailureErrorMsg(mockCallback, "Authorize failed.");
-    }
-
-    @Test
-    public void testHandleOnActivityResult_resultCodeErrorDataWithNoAuthError() {
-        // Verify that when handleOnActivityResult is called with an error code and intent data but
-        // no auth error, the listener receives generic error.
-        final Callback<TwitterSession> mockCallback = mock(Callback.class);
-        final AuthHandler authHandler = newAuthHandler(mockCallback);
-
-        final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
-                AuthHandler.RESULT_CODE_ERROR, new Intent());
-
-        assertTrue(result);
-        assertCallbackFailureErrorMsg(mockCallback, "Authorize failed.");
-    }
-
-    @Test
-    public void testHandleOnActivityResult_unrecognizedRequestCode() {
-        // Verify that when handleOnActivityResult is called with a different request code, the
-        // listener is not called.
-        final Callback<TwitterSession> mockCallback = mock(Callback.class);
-        final AuthHandler authHandler = newAuthHandler(mockCallback);
-
-        final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE + 1,
-                Activity.RESULT_CANCELED, null);
-
-        assertFalse(result);
-        verifyZeroInteractions(mockCallback);
-    }
-
-    @Test
-    public void testHandleOnActivityResult_nullCallback() {
-        final AuthHandler authHandler = newAuthHandler(null);
-        final boolean result = authHandler.handleOnActivityResult(TEST_REQUEST_CODE,
-                Activity.RESULT_OK, null);
-
-        assertTrue(result);
-    }
-
-    private AuthHandler newAuthHandler(Callback<TwitterSession> callback) {
-        return new AuthHandler(AUTH_CONFIG, callback, TEST_REQUEST_CODE) {
-            @Override
-            public boolean authorize(Activity activity) {
-                return true;
-            }
-        };
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthStateTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthStateTest.java
deleted file mode 100644
index 97279003..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthStateTest.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class AuthStateTest {
-
-    private Activity mockActivity;
-    private AuthHandler mockAuthHandler;
-
-    @Before
-    public void setUp() throws Exception {
-
-        mockActivity = mock(Activity.class);
-        mockAuthHandler = mock(AuthHandler.class);
-        when(mockAuthHandler.authorize(mockActivity)).thenReturn(true);
-    }
-
-    @Test
-    public void testBeginAuthorize() {
-        final AuthState authState = new AuthState();
-        final boolean result = authState.beginAuthorize(mockActivity, mockAuthHandler);
-        assertTrue(result);
-        assertTrue(authState.isAuthorizeInProgress());
-        assertEquals(mockAuthHandler, authState.getAuthHandler());
-    }
-
-    @Test
-    public void testBeginAuthorize_authorizeFails() {
-        when(mockAuthHandler.authorize(mockActivity)).thenReturn(false);
-
-        final AuthState authState = new AuthState();
-        final boolean result = authState.beginAuthorize(mockActivity, mockAuthHandler);
-        // Verify that attempting to begin authorize fails if the AuthHandler#authorize returns
-        // false.
-        assertFalse(result);
-        assertFalse(authState.isAuthorizeInProgress());
-        assertNull(authState.getAuthHandler());
-    }
-
-    @Test
-    public void testBeginAuthorize_authorizeInProgress() {
-        final AuthState authState = new AuthState();
-        final boolean result = authState.beginAuthorize(mockActivity, mockAuthHandler);
-        assertTrue(result);
-        // Verify that attempting to begin another authorize fails since one is already in progress.
-        assertFalse(authState.beginAuthorize(mockActivity, mockAuthHandler));
-    }
-
-    @Test
-    public void testBeginAuthorize_authHandlerCompareAndSetFails() {
-        final AuthState authState = new AuthState();
-        final boolean result = authState.beginAuthorize(mockActivity,
-                new AuthHandler(mock(TwitterAuthConfig.class), mock(Callback.class),
-                        TwitterAuthConfig.DEFAULT_AUTH_REQUEST_CODE) {
-                    @Override
-                    public boolean authorize(Activity activity) {
-                        // We use this opportunity to set authState's authHandlerRef so that we
-                        // can verify behavior when compare and set fails. This is done because
-                        // AtomicReference has methods that cannot be mocked.
-                        authState.authHandlerRef.set(mock(AuthHandler.class));
-                        return true;
-                    }
-                });
-        assertFalse(result);
-    }
-
-    @Test
-    public void testEndAuthorize() {
-        final AuthState authState = new AuthState();
-        final boolean result = authState.beginAuthorize(mockActivity, mockAuthHandler);
-        assertTrue(result);
-        assertTrue(authState.isAuthorizeInProgress());
-        assertEquals(mockAuthHandler, authState.getAuthHandler());
-
-        authState.endAuthorize();
-
-        // Verify that end authorize resets everything.
-        assertFalse(authState.isAuthorizeInProgress());
-        assertNull(authState.getAuthHandler());
-    }
-
-    @Test
-    public void testEndAuthorize_noAuthorizeInProgress() {
-        final AuthState authState = new AuthState();
-        // Verify that calling end authorize when there is no authorize in progress does not cause
-        // any problems.
-        authState.endAuthorize();
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthControllerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthControllerTest.java
deleted file mode 100644
index 5df65930..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthControllerTest.java
+++ /dev/null
@@ -1,212 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.webkit.WebChromeClient;
-import android.webkit.WebSettings;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import android.widget.ProgressBar;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TestFixtures;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aService;
-import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-import com.twitter.sdk.android.core.internal.oauth.OAuthResponse;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuthControllerTest {
-
-    private static final String TEST_URL = "https://test.com";
-    private static final int TEST_ERROR_CODE = 1000;
-    private static final String TEST_ERROR_DESC = "ERROR ERROR ERROR!";
-    private static final String TEST_VERIFIER_VALUE = "e1BmelAyStYjkAEtqGPBQ8xNlh5GOVtU";
-
-    private ProgressBar mockSpinner;
-    private WebView mockWebView;
-    private WebSettings mockWebSettings;
-    private OAuth1aService mockOAuth1aService;
-    private OAuthController.Listener mockListener;
-    private OAuthController controller;
-
-    @Before
-    public void setUp() throws Exception {
-
-
-        mockSpinner = mock(ProgressBar.class);
-        mockWebView = mock(WebView.class);
-        mockWebSettings = mock(WebSettings.class);
-        when(mockWebView.getSettings()).thenReturn(mockWebSettings);
-
-        mockOAuth1aService = mock(OAuth1aService.class);
-        mockListener = mock(OAuthController.Listener.class);
-        controller = new OAuthController(mockSpinner, mockWebView, mock(TwitterAuthConfig.class),
-                mockOAuth1aService, mockListener);
-    }
-
-    @Test
-    public void testStartAuth() {
-        controller.startAuth();
-        verify(mockOAuth1aService).requestTempToken(any(Callback.class));
-    }
-
-    @Test
-    public void testNewRequestTempTokenCallback_success() {
-        final Callback<OAuthResponse> callback = controller.newRequestTempTokenCallback();
-        final TwitterAuthToken mockRequestToken = mock(TwitterAuthToken.class);
-        final OAuthResponse oAuthResponse = new OAuthResponse(mockRequestToken, null, 0L);
-        callback.success(new Result<>(oAuthResponse, null));
-
-        assertEquals(mockRequestToken, controller.requestToken);
-        verify(mockOAuth1aService).getAuthorizeUrl(eq(mockRequestToken));
-    }
-
-    @Test
-    public void testNewRequestTempTokenCallback_failure() {
-        final Callback<OAuthResponse> callback = controller.newRequestTempTokenCallback();
-        final TwitterException mockException = mock(TwitterException.class);
-        callback.failure(mockException);
-        verifyOnCompleteWithError("Failed to get request token");
-    }
-
-    private void verifyOnCompleteWithError(String expectedMsg) {
-        final ArgumentCaptor<Intent> intentArgCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(mockListener).onComplete(eq(AuthHandler.RESULT_CODE_ERROR),
-                intentArgCaptor.capture());
-        final Intent data = intentArgCaptor.getValue();
-        final TwitterAuthException authException
-                = (TwitterAuthException) data.getSerializableExtra(AuthHandler.EXTRA_AUTH_ERROR);
-        assertNull(authException.getCause());
-        assertEquals(expectedMsg, authException.getMessage());
-    }
-
-    @Test
-    public void testHandleAuthError() {
-        final TwitterAuthException mockException = mock(TwitterAuthException.class);
-        controller.handleAuthError(AuthHandler.RESULT_CODE_ERROR, mockException);
-
-        final ArgumentCaptor<Intent> intentArgCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(mockListener).onComplete(eq(AuthHandler.RESULT_CODE_ERROR),
-                intentArgCaptor.capture());
-        final Intent data = intentArgCaptor.getValue();
-        assertEquals(mockException, data.getSerializableExtra(AuthHandler.EXTRA_AUTH_ERROR));
-    }
-
-    @Test
-    public void testSetUpWebView() {
-        final WebViewClient mockWebClient = mock(WebViewClient.class);
-        final WebChromeClient mockWebChromeClient = mock(WebChromeClient.class);
-        controller.setUpWebView(mockWebView, mockWebClient, TEST_URL, mockWebChromeClient);
-        verify(mockWebSettings).setJavaScriptEnabled(false);
-        verify(mockWebSettings).setAllowFileAccess(false);
-        verify(mockWebSettings).setSaveFormData(false);
-        verify(mockWebView).setVerticalScrollBarEnabled(false);
-        verify(mockWebView).setHorizontalScrollBarEnabled(false);
-        verify(mockWebView).setWebViewClient(mockWebClient);
-        verify(mockWebView).loadUrl(TEST_URL);
-        verify(mockWebView).setVisibility(View.INVISIBLE);
-        verify(mockWebView).setWebChromeClient(mockWebChromeClient);
-    }
-
-    @Test
-    public void testNewAccessTokenCallback_success() {
-        final Callback<OAuthResponse> callback = controller.newRequestAccessTokenCallback();
-        final OAuthResponse oAuthResponse = new OAuthResponse(
-                new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET),
-                TestFixtures.SCREEN_NAME, TestFixtures.USER_ID);
-        callback.success(new Result<>(oAuthResponse, null));
-
-        final ArgumentCaptor<Intent> intentArgCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(mockListener).onComplete(eq(Activity.RESULT_OK), intentArgCaptor.capture());
-        final Intent data = intentArgCaptor.getValue();
-        assertEquals(TestFixtures.SCREEN_NAME, data.getStringExtra(AuthHandler.EXTRA_SCREEN_NAME));
-        assertEquals(TestFixtures.USER_ID, data.getLongExtra(AuthHandler.EXTRA_USER_ID, 0L));
-        assertEquals(TestFixtures.TOKEN, data.getStringExtra(AuthHandler.EXTRA_TOKEN));
-        assertEquals(TestFixtures.SECRET, data.getStringExtra(AuthHandler.EXTRA_TOKEN_SECRET));
-    }
-
-    @Test
-    public void testNewAccessTokenCallback_failure() {
-        final Callback<OAuthResponse> callback = controller.newRequestAccessTokenCallback();
-        final TwitterException mockException = mock(TwitterException.class);
-        callback.failure(mockException);
-        verifyOnCompleteWithError("Failed to get access token");
-    }
-
-    @Test
-    public void testOnPageFinished() {
-        controller.onPageFinished(mockWebView, TEST_URL);
-        verify(mockSpinner).setVisibility(View.GONE);
-        verify(mockWebView).setVisibility(View.VISIBLE);
-    }
-
-    @Test
-    public void testOnSuccess() {
-        final Bundle bundle = new Bundle();
-        bundle.putString(OAuthConstants.PARAM_VERIFIER, TEST_VERIFIER_VALUE);
-        controller.onSuccess(bundle);
-        verify(mockOAuth1aService).requestAccessToken(any(Callback.class),
-                eq(controller.requestToken), eq(TEST_VERIFIER_VALUE));
-        verify(mockWebView).stopLoading();
-    }
-
-    @Test
-    public void testOnSuccess_bundleNull() {
-        controller.onSuccess(null);
-        verifyOnCompleteWithError("Failed to get authorization, bundle incomplete");
-        verify(mockWebView).stopLoading();
-    }
-
-    @Test
-    public void testOnSuccess_bundleIncomplete() {
-        controller.onSuccess(Bundle.EMPTY);
-        verifyOnCompleteWithError("Failed to get authorization, bundle incomplete");
-        verify(mockWebView).stopLoading();
-    }
-
-    @Test
-    public void testOnError() {
-        final WebViewException webViewException = new WebViewException(TEST_ERROR_CODE,
-                TEST_ERROR_DESC, TEST_URL);
-        controller.onError(webViewException);
-        verifyOnCompleteWithError("OAuth web view completed with an error");
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthHandlerTest.java
deleted file mode 100644
index e602b36e..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthHandlerTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Build;
-import android.os.Bundle;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyInt;
-import static org.mockito.Mockito.doNothing;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuthHandlerTest {
-
-    private static final int REQUEST_CODE = TwitterAuthConfig.DEFAULT_AUTH_REQUEST_CODE;
-
-    private TwitterAuthConfig mockAuthConfig;
-    private OAuthHandler authHandler;
-
-    @Before
-    public void setUp() throws Exception {
-
-        mockAuthConfig = mock(TwitterAuthConfig.class);
-        authHandler = new OAuthHandler(mockAuthConfig, mock(Callback.class), REQUEST_CODE);
-    }
-
-    @Test
-    public void testAuthorize() {
-        final Activity mockActivity = mock(Activity.class);
-        doNothing().when(mockActivity).startActivityForResult(any(Intent.class), anyInt());
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            doNothing().when(mockActivity).startActivityForResult(any(Intent.class), anyInt(),
-                    any(Bundle.class));
-        }
-        authHandler.authorize(mockActivity);
-        verify(mockActivity).startActivityForResult(any(Intent.class), eq(REQUEST_CODE));
-    }
-
-    @Test
-    public void testNewIntent() {
-        final Activity mockActivity = mock(Activity.class);
-        final Intent intent = authHandler.newIntent(mockActivity);
-        assertEquals(mockAuthConfig, intent.getParcelableExtra(OAuthActivity.EXTRA_AUTH_CONFIG));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClientTest.java
deleted file mode 100644
index fa825714..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClientTest.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.webkit.ConsoleMessage;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuthWebChromeClientTest {
-
-    OAuthWebChromeClient client;
-
-    @Before
-    public void setUp() throws Exception {
-        client = new OAuthWebChromeClient();
-    }
-
-    @Test
-    public void testOnConsoleMessage() throws Exception {
-        final ConsoleMessage message = mock(ConsoleMessage.class);
-        client.onConsoleMessage(message);
-        verifyZeroInteractions(message);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebViewClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebViewClientTest.java
deleted file mode 100644
index 8b0e7585..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebViewClientTest.java
+++ /dev/null
@@ -1,127 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.net.http.SslError;
-import android.os.Bundle;
-import android.webkit.SslErrorHandler;
-import android.webkit.WebView;
-
-import com.twitter.sdk.android.core.TestFixtures;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuthWebViewClientTest {
-
-    private static final String COMPLETE_URL = "twittersdk://callback";
-    private static final String RETURNED_URL = "twittersdk://callback?version=1.0.1-SNAPSHOT.dev"
-            + "&app=test_app"
-            + "&oauth_token=" + TestFixtures.TOKEN
-            + "&oauth_verifier=" + TestFixtures.VERIFIER;
-    private static final String TEST_URL = "https://test.com";
-    private static final int TEST_ERROR_CODE = 1000;
-    private static final String TEST_ERROR_DESC = "ERROR ERROR ERROR!";
-
-    private static final String EXPECTED_VERSION_KEY = "version";
-    private static final String EXPECTED_VERSION_VALUE = "1.0.1-SNAPSHOT.dev";
-    private static final String EXPECTED_APP_KEY = "app";
-    private static final String EXPECTED_APP_VALUE = "test_app";
-    private static final String EXPECTED_OAUTH_TOKEN_KEY = "oauth_token";
-    private static final String EXPECTED_OAUTH_TOKEN_VALUE = TestFixtures.TOKEN;
-    private static final String EXPECTED_OAUTH_VERIFIER_KEY = "oauth_verifier";
-    private static final String EXPECTED_OAUTH_VERIFIER_VALUE = TestFixtures.VERIFIER;
-
-    private OAuthWebViewClient.Listener mockListener;
-    private OAuthWebViewClient webViewClient;
-
-    @Before
-    public void setUp() throws Exception {
-
-
-        mockListener = mock(OAuthWebViewClient.Listener.class);
-        webViewClient = new OAuthWebViewClient(COMPLETE_URL, mockListener);
-    }
-
-    @Test
-    public void testOnPageFinished() {
-        final WebView mockWebView = mock(WebView.class);
-        webViewClient.onPageFinished(mockWebView, COMPLETE_URL);
-        verify(mockListener).onPageFinished(eq(mockWebView), eq(COMPLETE_URL));
-    }
-
-    @Test
-    public void testShouldOverrideUrlLoading_urlStartsWithCompleteUrl() {
-        webViewClient.shouldOverrideUrlLoading(mock(WebView.class), RETURNED_URL);
-
-        final ArgumentCaptor<Bundle> bundleArgCaptor = ArgumentCaptor.forClass(Bundle.class);
-        verify(mockListener).onSuccess(bundleArgCaptor.capture());
-
-        final Bundle bundle = bundleArgCaptor.getValue();
-        assertEquals(EXPECTED_VERSION_VALUE, bundle.getString(EXPECTED_VERSION_KEY));
-        assertEquals(EXPECTED_APP_VALUE, bundle.getString(EXPECTED_APP_KEY));
-        assertEquals(EXPECTED_OAUTH_TOKEN_VALUE, bundle.getString(EXPECTED_OAUTH_TOKEN_KEY));
-        assertEquals(EXPECTED_OAUTH_VERIFIER_VALUE, bundle.getString(EXPECTED_OAUTH_VERIFIER_KEY));
-    }
-
-    @Test
-    public void testShouldOverrideUrlLoading_urlDoesNotStartWithCompleteUrl() {
-        webViewClient.shouldOverrideUrlLoading(mock(WebView.class), TEST_URL);
-        verifyZeroInteractions(mockListener);
-    }
-
-    @Test
-    public void testOnReceivedError() {
-        webViewClient.onReceivedError(mock(WebView.class), TEST_ERROR_CODE, TEST_ERROR_DESC,
-                TEST_URL);
-        verifyOnError(TEST_ERROR_CODE, TEST_ERROR_DESC, TEST_URL);
-    }
-
-    @Test
-    public void testOnReceivedSslError() {
-        final SslError mockSslError = mock(SslError.class);
-        when(mockSslError.getPrimaryError()).thenReturn(TEST_ERROR_CODE);
-
-        webViewClient.onReceivedSslError(mock(WebView.class), mock(SslErrorHandler.class),
-                mockSslError);
-        verifyOnError(TEST_ERROR_CODE, null, null);
-    }
-
-    private void verifyOnError(int expectedErrorCode, String expectedErrorDesc,
-                               String expectedFailingUrl) {
-        final ArgumentCaptor<WebViewException> exceptionArgCaptor
-                = ArgumentCaptor.forClass(WebViewException.class);
-        verify(mockListener).onError(exceptionArgCaptor.capture());
-
-        final WebViewException exception = exceptionArgCaptor.getValue();
-        assertEquals(expectedErrorCode, exception.getErrorCode());
-        assertEquals(expectedErrorDesc, exception.getMessage());
-        assertEquals(expectedFailingUrl, exception.getFailingUrl());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java
deleted file mode 100644
index a5a7911f..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java
+++ /dev/null
@@ -1,162 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.Collections;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class SSOAuthHandlerTest {
-
-    private static final int REQUEST_CODE = TwitterAuthConfig.DEFAULT_AUTH_REQUEST_CODE;
-    private static final String INVALID_SIGNATURE = "AAAAAAAAAA";
-
-    private SSOAuthHandler ssoAuthHandler;
-
-    @Before
-    public void setUp() throws Exception {
-        ssoAuthHandler = new SSOAuthHandler(mock(TwitterAuthConfig.class),
-                mock(Callback.class), REQUEST_CODE);
-    }
-
-    @Test
-    public void testIsAvailable_twitterInstalled() throws PackageManager.NameNotFoundException {
-        final Context mockContext = mock(Context.class);
-        TestUtils.setupTwitterInstalled(mockContext, SSOAuthHandler.TWITTER_SIGNATURE);
-        assertTrue(SSOAuthHandler.isAvailable(mockContext));
-    }
-
-    @Test
-    public void testIsAvailable_twitterInstalledInvalidSignature()
-            throws PackageManager.NameNotFoundException {
-        final Context mockContext = mock(Context.class);
-        TestUtils.setupTwitterInstalled(mockContext, INVALID_SIGNATURE);
-        assertFalse(SSOAuthHandler.isAvailable(mockContext));
-    }
-
-    @Test
-    public void testIsAvailable_twitterInstalledWithValidAndInvalidSignature()
-            throws PackageManager.NameNotFoundException {
-        final Context mockContext = mock(Context.class);
-        TestUtils.setupTwitterInstalled(mockContext, SSOAuthHandler.TWITTER_SIGNATURE,
-                INVALID_SIGNATURE);
-        assertFalse(SSOAuthHandler.isAvailable(mockContext));
-    }
-
-    @Test
-    public void testIsAvailable_twitterDogfoodInstalled()
-            throws PackageManager.NameNotFoundException {
-        final Context mockContext = mock(Context.class);
-        TestUtils.setupTwitterDogfoodInstalled(mockContext, SSOAuthHandler.DOGFOOD_SIGNATURE);
-        assertTrue(SSOAuthHandler.isAvailable(mockContext));
-    }
-
-    @Test
-    public void testIsAvailable_twitterDogfoodInstalledInvalidSignature()
-            throws PackageManager.NameNotFoundException {
-        final Context mockContext = mock(Context.class);
-        TestUtils.setupTwitterDogfoodInstalled(mockContext, INVALID_SIGNATURE);
-        assertFalse(SSOAuthHandler.isAvailable(mockContext));
-    }
-
-    @Test
-    public void testIsAvailable_noSSOAppsInstalled() throws PackageManager.NameNotFoundException {
-        final Context mockContext = mock(Context.class);
-        TestUtils.setupNoSSOAppInstalled(mockContext);
-        assertFalse(SSOAuthHandler.isAvailable(mockContext));
-    }
-
-    @Test
-    public void testAuthorize_twitterInstalled() throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterInstalled(mockActivity, SSOAuthHandler.TWITTER_SIGNATURE);
-        assertTrue(ssoAuthHandler.authorize(mockActivity));
-    }
-
-    @Test
-    public void testAuthorize_twitterInstalledInvalidSignature()
-            throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterInstalled(mockActivity, INVALID_SIGNATURE);
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
-    }
-
-    @Test
-    public void testAuthorize_twitterDogfoodInstalled()
-            throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterDogfoodInstalled(mockActivity, SSOAuthHandler.DOGFOOD_SIGNATURE);
-        assertTrue(ssoAuthHandler.authorize(mockActivity));
-    }
-
-    @Test
-    public void testAuthorize_twitterDogfoodInstalledInvalidSignature()
-            throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterDogfoodInstalled(mockActivity, INVALID_SIGNATURE);
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
-    }
-
-    @Test
-    public void testAuthorize_twitterInstalledNoSsoActivity()
-            throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterInstalled(mockActivity, SSOAuthHandler.TWITTER_SIGNATURE);
-        when(mockActivity.getPackageManager().queryIntentActivities(any(Intent.class),
-                anyInt())).thenReturn(Collections.emptyList());
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
-    }
-
-    @Test
-    public void testAuthorize_noSSOAppsInstalled() throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupNoSSOAppInstalled(mockActivity);
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
-    }
-
-    @Test
-    public void testAuthorize_startActivityForResultThrowsException()
-            throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterInstalled(mockActivity, SSOAuthHandler.TWITTER_SIGNATURE);
-        doThrow(new RuntimeException()).when(mockActivity)
-                .startActivityForResult(any(Intent.class), eq(REQUEST_CODE));
-        assertFalse(ssoAuthHandler.authorize(mockActivity));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TestUtils.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TestUtils.java
deleted file mode 100644
index 0f8dc70b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TestUtils.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.content.pm.Signature;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-public final class TestUtils {
-
-    private TestUtils() {
-        // Private constructor
-    }
-
-    public static void setupTwitterInstalled(Context mockContext, String... signatures)
-            throws PackageManager.NameNotFoundException {
-        final PackageManager mockPm = mock(PackageManager.class);
-        final PackageInfo mockPackageInfo = mock(PackageInfo.class);
-        mockPackageInfo.signatures = new Signature[signatures.length];
-
-        for (int i = 0; i < signatures.length; i++) {
-            mockPackageInfo.signatures[i] = new Signature(signatures[i]);
-        }
-
-        when(mockContext.getPackageManager()).thenReturn(mockPm);
-        when(mockPm.getPackageInfo(SSOAuthHandler.TWITTER_PACKAGE_NAME,
-                PackageManager.GET_SIGNATURES)).thenReturn(mockPackageInfo);
-        when(mockPm.getPackageInfo(SSOAuthHandler.DOGFOOD_PACKAGE_NAME,
-                PackageManager.GET_SIGNATURES))
-                .thenThrow(new PackageManager.NameNotFoundException());
-        final List<ResolveInfo> activities = new ArrayList<>();
-        activities.add(mock(ResolveInfo.class));
-        when(mockContext.getPackageManager().queryIntentActivities(any(Intent.class),
-                anyInt())).thenReturn(activities);
-    }
-
-    public static void setupTwitterDogfoodInstalled(Context mockContext, String signature)
-            throws PackageManager.NameNotFoundException {
-        final PackageManager mockPm = mock(PackageManager.class);
-        final PackageInfo mockPackageInfo = mock(PackageInfo.class);
-        mockPackageInfo.signatures = new Signature[]{
-                new Signature(signature)
-        };
-        when(mockContext.getPackageManager()).thenReturn(mockPm);
-        when(mockPm.getPackageInfo(SSOAuthHandler.DOGFOOD_PACKAGE_NAME,
-                PackageManager.GET_SIGNATURES)).thenReturn(mockPackageInfo);
-        when(mockPm.getPackageInfo(SSOAuthHandler.TWITTER_PACKAGE_NAME,
-                PackageManager.GET_SIGNATURES))
-                .thenThrow(new PackageManager.NameNotFoundException());
-        final List<ResolveInfo> activities = new ArrayList<>();
-        activities.add(mock(ResolveInfo.class));
-        when(mockContext.getPackageManager().queryIntentActivities(any(Intent.class),
-                anyInt())).thenReturn(activities);
-    }
-
-    public static void setupNoSSOAppInstalled(Context mockContext)
-            throws PackageManager.NameNotFoundException {
-        final PackageManager mockPm = mock(PackageManager.class);
-
-        when(mockContext.getPackageManager()).thenReturn(mockPm);
-        when(mockPm.getPackageInfo(SSOAuthHandler.TWITTER_PACKAGE_NAME,
-                PackageManager.GET_SIGNATURES))
-                .thenThrow(new PackageManager.NameNotFoundException());
-        when(mockPm.getPackageInfo(SSOAuthHandler.DOGFOOD_PACKAGE_NAME,
-                PackageManager.GET_SIGNATURES))
-                .thenThrow(new PackageManager.NameNotFoundException());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java
deleted file mode 100644
index 2c831b8d..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java
+++ /dev/null
@@ -1,310 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.models.User;
-import com.twitter.sdk.android.core.models.UserBuilder;
-import com.twitter.sdk.android.core.services.AccountService;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import retrofit2.Call;
-import retrofit2.mock.Calls;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterAuthClientTest {
-
-    private static final int TEST_REQUEST_CODE = 100;
-    private static final String TEST_EMAIL = "foo@twitter.com";
-
-    private Context mockContext;
-    private TwitterCore mockTwitterCore;
-    private TwitterAuthConfig mockAuthConfig;
-    private SessionManager<TwitterSession> mockSessionManager;
-    private AuthState mockAuthState;
-    private Callback<TwitterSession> mockCallback;
-    private TwitterAuthClient authClient;
-
-    @Before
-    public void setUp() throws Exception {
-        mockContext = mock(Context.class);
-        when(mockContext.getPackageName()).thenReturn(getClass().getPackage().toString());
-
-        mockTwitterCore = mock(TwitterCore.class);
-        mockAuthConfig = mock(TwitterAuthConfig.class);
-        when(mockAuthConfig.getRequestCode()).thenReturn(TEST_REQUEST_CODE);
-        mockSessionManager = mock(SessionManager.class);
-        mockAuthState = mock(AuthState.class);
-        mockCallback = mock(Callback.class);
-
-        authClient = new TwitterAuthClient(mockTwitterCore, mockAuthConfig, mockSessionManager,
-                mockAuthState);
-    }
-
-    @Test
-    public void testGetRequestCode() {
-        assertEquals(TEST_REQUEST_CODE, authClient.getRequestCode());
-    }
-
-    @Test
-    public void testAuthorize_activityNull() {
-        try {
-            authClient.authorize(null, mock(Callback.class));
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals("Activity must not be null.", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testAuthorize_activityIsFinishing() {
-        final Activity mockActivity = mock(Activity.class);
-        when(mockActivity.isFinishing()).thenReturn(true);
-
-        // Verify that when activity is finishing, no further work is done.
-        authClient.authorize(mockActivity, mockCallback);
-        verifyZeroInteractions(mockAuthState);
-    }
-
-    @Test
-    public void testAuthorize_callbackNull() {
-        try {
-            authClient.authorize(mock(Activity.class), null);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals("Callback must not be null.", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testAuthorize_cancelAuthorize() {
-        authClient.cancelAuthorize();
-        verify(mockAuthState).endAuthorize();
-    }
-
-    @Test
-    public void testAuthorize_authorizeInProgress() throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupNoSSOAppInstalled(mockActivity);
-        when(mockAuthState.isAuthorizeInProgress()).thenReturn(true);
-
-        // Verify that when authorize is in progress, callback is notified of error.
-        authClient.authorize(mockActivity, mockCallback);
-        verify(mockCallback).failure(any(TwitterAuthException.class));
-    }
-
-    @Test
-    public void testAuthorize_ssoAvailable() throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterInstalled(mockActivity);
-        when(mockAuthState.beginAuthorize(any(Activity.class), any(AuthHandler.class)))
-                .thenReturn(true);
-
-        // Verify that when SSO is available, SSOAuthHandler is used to complete the authorization
-        // flow.
-        authClient.authorize(mockActivity, mockCallback);
-        verify(mockAuthState).beginAuthorize(eq(mockActivity), any(SSOAuthHandler.class));
-    }
-
-    @Test
-    public void testAuthorize_ssoAvailableViaTwitterDogfood()
-            throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterInstalled(mockActivity);
-        when(mockAuthState.beginAuthorize(any(Activity.class), any(AuthHandler.class)))
-                .thenReturn(true);
-
-        // Verify that when SSO is available, SSOAuthHandler is used to complete the authorization
-        // flow.
-        authClient.authorize(mockActivity, mockCallback);
-        verify(mockAuthState).beginAuthorize(eq(mockActivity), any(SSOAuthHandler.class));
-    }
-
-    @Test
-    public void testAuthorize_ssoNotAvailable() throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupNoSSOAppInstalled(mockActivity);
-        when(mockAuthState.beginAuthorize(any(Activity.class), any(AuthHandler.class)))
-                .thenReturn(true);
-
-        // Verify that when SSO is not available, OAuthHandler is used to complete the
-        // authorization flow.
-        authClient.authorize(mockActivity, mockCallback);
-        verify(mockAuthState).beginAuthorize(eq(mockActivity), any(OAuthHandler.class));
-    }
-
-    @Test
-    public void testAuthorize_bothSsoAndOAuthFail() throws PackageManager.NameNotFoundException {
-        final Activity mockActivity = mock(Activity.class);
-        TestUtils.setupTwitterInstalled(mockActivity);
-        when(mockAuthState.beginAuthorize(any(Activity.class), any(AuthHandler.class)))
-                .thenReturn(false);
-
-        authClient.authorize(mockActivity, mockCallback);
-        verify(mockAuthState, times(2)).beginAuthorize(eq(mockActivity), any(AuthHandler.class));
-        final ArgumentCaptor<TwitterAuthException> argCaptor
-                = ArgumentCaptor.forClass(TwitterAuthException.class);
-        verify(mockCallback).failure(argCaptor.capture());
-        assertEquals("Authorize failed.", argCaptor.getValue().getMessage());
-    }
-
-    @Test
-    public void testOnActivityResult_noAuthorizeInProgress() {
-        when(mockAuthState.isAuthorizeInProgress()).thenReturn(false);
-
-        // Verify that if authorize is in progress, onActivityResult returns early.
-        authClient.onActivityResult(TEST_REQUEST_CODE, Activity.RESULT_OK, mock(Intent.class));
-        verify(mockAuthState).isAuthorizeInProgress();
-        verifyNoMoreInteractions(mockAuthState);
-    }
-
-    @Test
-    public void testOnActivityResult_handleOnActivityResultTrue() {
-        setUpAuthStateOnActivityResult(true);
-
-        // Verify that when the activity result is handled, auth state is updated to end.
-        authClient.onActivityResult(TEST_REQUEST_CODE, Activity.RESULT_OK, mock(Intent.class));
-        verify(mockAuthState).isAuthorizeInProgress();
-        verify(mockAuthState).getAuthHandler();
-        verify(mockAuthState).endAuthorize();
-    }
-
-    @Test
-    public void testOnActivityResult_handleOnActivityResultFalse() {
-        setUpAuthStateOnActivityResult(false);
-
-        // Verify that when the activity result is not handled, auth state is not updated to end.
-        authClient.onActivityResult(TEST_REQUEST_CODE, Activity.RESULT_OK, mock(Intent.class));
-        verify(mockAuthState).isAuthorizeInProgress();
-        verify(mockAuthState).getAuthHandler();
-        verifyNoMoreInteractions(mockAuthState);
-    }
-
-    private void setUpAuthStateOnActivityResult(boolean handled) {
-        final AuthHandler mockAuthHandler = mock(AuthHandler.class);
-        when(mockAuthHandler.handleOnActivityResult(anyInt(), anyInt(), any(Intent.class)))
-                .thenReturn(handled);
-        when(mockAuthState.isAuthorizeInProgress()).thenReturn(true);
-        when(mockAuthState.getAuthHandler()).thenReturn(mockAuthHandler);
-    }
-
-    @Test
-    public void testCallbackWrapper_success() {
-        final TwitterAuthClient.CallbackWrapper callbackWrapper
-                = new TwitterAuthClient.CallbackWrapper(mockSessionManager, mockCallback);
-
-        final TwitterSession mockSession = mock(TwitterSession.class);
-        final Result<TwitterSession> mockResult = new Result<>(mockSession, null);
-        callbackWrapper.success(mockResult);
-
-        verify(mockSessionManager).setActiveSession(eq(mockSession));
-        verify(mockCallback).success(eq(mockResult));
-    }
-
-    @Test
-    public void testCallbackWrapper_failure() {
-        final TwitterAuthClient.CallbackWrapper callbackWrapper
-                = new TwitterAuthClient.CallbackWrapper(mockSessionManager, mockCallback);
-
-        final TwitterAuthException mockException = mock(TwitterAuthException.class);
-        callbackWrapper.failure(mockException);
-
-        verifyZeroInteractions(mockSessionManager);
-        verify(mockCallback).failure(eq(mockException));
-    }
-
-    @Test
-    public void testRequestEmail_withSuccess() {
-        final User user = new UserBuilder().setEmail(TEST_EMAIL).build();
-        final Call<User> call = Calls.response(user);
-        setupMockAccountService(call);
-
-        authClient.requestEmail(mock(TwitterSession.class), new Callback<String>() {
-            @Override
-            public void success(Result<String> result) {
-                assertEquals(TEST_EMAIL, result.data);
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                fail("Expected Callback#success to be called");
-            }
-        });
-    }
-
-    @Test
-    public void testRequestEmail_withFailure() {
-        final IOException networkException = new IOException("Network failure");
-        final Call<User> call = Calls.failure(networkException);
-        setupMockAccountService(call);
-
-        authClient.requestEmail(mock(TwitterSession.class), new Callback<String>() {
-            @Override
-            public void success(Result<String> result) {
-                fail("Expected Callback#failure to be called");
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                assertEquals(exception.getCause(), networkException);
-            }
-        });
-    }
-
-    private void setupMockAccountService(Call<User> call) {
-        final AccountService mockAccountService = mock(AccountService.class);
-        when(mockAccountService.verifyCredentials(anyBoolean(), anyBoolean(), eq(true)))
-                .thenReturn(call);
-        final TwitterApiClient mockApiClient = mock(TwitterApiClient.class);
-        when(mockApiClient.getAccountService()).thenReturn(mockAccountService);
-        when(mockTwitterCore.getApiClient(any(TwitterSession.class))).thenReturn(mockApiClient);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java
deleted file mode 100644
index 4ed049f7..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import org.junit.Test;
-
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Future;
-import java.util.concurrent.ThreadFactory;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-
-public class ExecutorUtilsTest {
-    private static final String THREAD_FACTORY_NAME = "TestThreadFactory";
-    private static final String FIRST_THREAD_NAME = THREAD_FACTORY_NAME + "1";
-
-    @Test
-    public void testBuildSingleThreadScheduledExecutorService() throws Exception {
-        final ExecutorService service =
-                ExecutorUtils.buildSingleThreadScheduledExecutorService(THREAD_FACTORY_NAME);
-        final Future<String> future = service.submit(new ThreadNameCallable());
-        assertEquals(FIRST_THREAD_NAME, future.get());
-    }
-
-    @Test
-    public void testBuildThreadScheduledExecutorService() throws Exception {
-        final ExecutorService service =
-                ExecutorUtils.buildThreadPoolExecutorService(THREAD_FACTORY_NAME);
-        final Future<String> future = service.submit(new ThreadNameCallable());
-        assertEquals(FIRST_THREAD_NAME, future.get());
-    }
-
-    @Test
-    public void testGetNamedThreadFactory() throws Exception {
-        verifyGetNamedThreadFactory(THREAD_FACTORY_NAME);
-    }
-
-    @Test
-    public void testGetNamedThreadFactory_nullName() throws Exception {
-        verifyGetNamedThreadFactory(null);
-    }
-
-    private void verifyGetNamedThreadFactory(String threadFactorName) {
-        final ThreadFactory threadFactory =
-                ExecutorUtils.getNamedThreadFactory(threadFactorName);
-        Thread thread;
-        for (int i = 0; i < 2; i++) {
-            thread = threadFactory.newThread(mock(Runnable.class));
-            // Thread identifier starts from 1
-            assertEquals(threadFactorName + (i + 1), thread.getName());
-        }
-    }
-
-    private static class ThreadNameCallable implements Callable<String> {
-        @Override
-        public String call() throws Exception {
-            return Thread.currentThread().getName();
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
deleted file mode 100644
index 86c670ae..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.GuestSessionProvider;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.internal.network.OkHttpClientHelper;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.List;
-
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-
-@RunWith(RobolectricTestRunner.class)
-public class OkHttpClientHelperTest {
-
-    @Test
-    public void testGetCustomOkHttpClient_guestAuth() throws Exception {
-        final Interceptor mockInterceptor = mock(Interceptor.class);
-        final OkHttpClient customHttpClient = new OkHttpClient.Builder()
-                .addInterceptor(mockInterceptor).build();
-
-        final GuestSessionProvider sessionProvider = mock(GuestSessionProvider.class);
-        final OkHttpClient guestAuthHttpClient = OkHttpClientHelper.getCustomOkHttpClient(
-                customHttpClient,
-                sessionProvider);
-
-        final List<Interceptor> interceptors = guestAuthHttpClient.interceptors();
-        assertTrue(interceptors.contains(mockInterceptor));
-    }
-
-    @Test
-    public void testGetCustomOkHttpClient_userAuth() throws Exception {
-        final Interceptor mockInterceptor = mock(Interceptor.class);
-        final OkHttpClient customHttpClient = new OkHttpClient.Builder()
-                .addInterceptor(mockInterceptor).build();
-
-        final TwitterSession mockSession = mock(TwitterSession.class);
-        final OkHttpClient guestAuthHttpClient = OkHttpClientHelper.getCustomOkHttpClient(
-                customHttpClient,
-                mockSession,
-                new TwitterAuthConfig("", ""));
-
-        final List<Interceptor> interceptors = guestAuthHttpClient.interceptors();
-        assertTrue(interceptors.contains(mockInterceptor));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java
deleted file mode 100644
index 741b46c1..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java
+++ /dev/null
@@ -1,206 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.text.format.DateUtils;
-
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.SessionManager;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.concurrent.ExecutorService;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyLong;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class SessionMonitorTest {
-
-    private static final long TEST_TIME_1200_UTC = 1422014401245L;
-    private static final long TEST_TIME_2359_UTC = 1422057541245L;
-    private static final long TEST_TIME_0001_UTC = 1422057661245L;
-
-    private SessionManager<Session> mockSessionManager;
-    private SystemCurrentTimeProvider mockSystemCurrentTimeProvider;
-    private ExecutorService mockExecutorService;
-    private SessionMonitor.MonitorState mockMonitorState;
-
-    private SessionMonitor<Session> sessionMonitor;
-    private SessionMonitor.MonitorState monitorState;
-    private Map<Long, Session> sessionMap;
-    private SessionVerifier mockSessionVerifier;
-
-    @Before
-    public void setUp() throws Exception {
-
-        mockSessionManager = mock(SessionManager.class);
-        mockSystemCurrentTimeProvider = mock(SystemCurrentTimeProvider.class);
-        mockExecutorService = mock(ExecutorService.class);
-        mockMonitorState = mock(SessionMonitor.MonitorState.class);
-        mockSessionVerifier = mock(SessionVerifier.class);
-        sessionMonitor = new SessionMonitor<>(mockSessionManager, mockSystemCurrentTimeProvider,
-                mockExecutorService, mockMonitorState, mockSessionVerifier);
-        monitorState = new SessionMonitor.MonitorState();
-        final Session testSession = mock(Session.class);
-        when(testSession.getId()).thenReturn(1L);
-        sessionMap = new HashMap<>();
-        sessionMap.put(1L, testSession);
-
-        when(mockSessionManager.getSessionMap()).thenReturn(sessionMap);
-        when(mockSessionManager.getActiveSession()).thenReturn(testSession);
-    }
-
-    @Test
-    public void testMonitorActivityLifecycle_registersActivityLifecycleCallbacks() {
-        final ActivityLifecycleManager mockActivityLifecycleManager =
-                mock(ActivityLifecycleManager.class);
-        sessionMonitor = new SessionMonitor<>(mockSessionManager, mockExecutorService,
-                mockSessionVerifier);
-
-        sessionMonitor.monitorActivityLifecycle(mockActivityLifecycleManager);
-
-        verify(mockActivityLifecycleManager)
-                .registerCallbacks(any(ActivityLifecycleManager.Callbacks.class));
-    }
-
-    @Test
-    public void testTriggerVerificationIfNecessary_respectsFalseStartVerification() {
-        when(mockMonitorState.beginVerification(anyLong())).thenReturn(false);
-        sessionMonitor.triggerVerificationIfNecessary();
-        verifyZeroInteractions(mockExecutorService);
-    }
-
-    @Test
-    public void testTriggerVerificationIfNecessary_doesNotTriggerIfNoActiveSession() {
-        when(mockMonitorState.beginVerification(anyLong())).thenReturn(true);
-        when(mockSessionManager.getActiveSession()).thenReturn(null);
-
-        sessionMonitor.triggerVerificationIfNecessary();
-
-        verifyZeroInteractions(mockExecutorService);
-    }
-
-    @Test
-    public void testTriggerVerificationIfNecessary_submitsRunnable() {
-        when(mockMonitorState.beginVerification(anyLong())).thenReturn(true);
-        sessionMonitor.triggerVerificationIfNecessary();
-        verify(mockExecutorService).submit(any(Runnable.class));
-    }
-
-    @Test
-    public void testVerifyAll_verifiesAllSessions() {
-        sessionMap.put(2L, mock(Session.class));
-        sessionMonitor.verifyAll();
-        verify(mockSessionVerifier, times(2)).verifySession(any(Session.class));
-    }
-
-    @Test
-    public void testVerifyAll_shouldNotImmediatelyReverify() {
-        when(mockSystemCurrentTimeProvider.getCurrentTimeMillis()).thenReturn(TEST_TIME_1200_UTC);
-        sessionMonitor.verifyAll();
-        assertFalse(sessionMonitor.monitorState.beginVerification(TEST_TIME_1200_UTC + 1));
-    }
-
-    @Test
-    public void testVerifySession_callsAccountService() {
-        when(mockMonitorState.beginVerification(anyLong())).thenReturn(Boolean.TRUE);
-        sessionMonitor.triggerVerificationIfNecessary();
-        final ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable
-                .class);
-        verify(mockExecutorService).submit(runnableArgumentCaptor.capture());
-        final Runnable tasks = runnableArgumentCaptor.getValue();
-        tasks.run();
-        verify(mockSessionVerifier).verifySession(any(Session.class));
-    }
-
-    @Test
-    public void testMonitorStateStartVerification_duringVerification() {
-        final long startTime = TEST_TIME_1200_UTC;
-        final long now = startTime + 9 * DateUtils.HOUR_IN_MILLIS;
-
-        monitorState.lastVerification = startTime;
-        monitorState.verifying = true;
-        assertFalse(monitorState.beginVerification(now));
-    }
-
-    @Test
-    public void testMonitorStateStartVerification_beforeTimeThreshold() {
-        final long startTime = TEST_TIME_1200_UTC;
-        final long now = startTime + DateUtils.HOUR_IN_MILLIS;
-
-        monitorState.lastVerification = startTime;
-        monitorState.verifying = false;
-        assertFalse(monitorState.beginVerification(now));
-    }
-
-    @Test
-    public void testMonitorStateStartVerification_dayChangedButBeforeThreshold() {
-        final long startTime = TEST_TIME_2359_UTC;
-        final long now = TEST_TIME_0001_UTC;
-
-        monitorState.lastVerification = startTime;
-        monitorState.verifying = false;
-        assertTrue(monitorState.beginVerification(now));
-    }
-
-    @Test
-    public void testMonitorStateStartVerification_pastTimeThreshold() {
-        final long startTime = TEST_TIME_1200_UTC;
-        final long now = startTime + (8 * DateUtils.HOUR_IN_MILLIS);
-
-        monitorState.lastVerification = startTime;
-        monitorState.verifying = false;
-        assertTrue(monitorState.beginVerification(now));
-    }
-
-    @Test
-    public void testMonitorStateStartVerification_newState() {
-        assertTrue(monitorState.beginVerification(System.currentTimeMillis()));
-    }
-
-    @Test
-    public void testMonitorStateStartVerification_marksVerificationInProgress() {
-        assertFalse(monitorState.verifying);
-        assertTrue(monitorState.beginVerification(System.currentTimeMillis()));
-        assertTrue(monitorState.verifying);
-    }
-
-    @Test
-    public void testMonitorStateFinishVerification_marksVerificationDone() {
-        monitorState.verifying = true;
-        monitorState.lastVerification = TEST_TIME_1200_UTC;
-        monitorState.endVerification(TEST_TIME_2359_UTC);
-        assertFalse(monitorState.verifying);
-        assertEquals(TEST_TIME_2359_UTC, monitorState.lastVerification);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java
deleted file mode 100644
index cbff1c26..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.net.Uri;
-import android.os.Build;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterApiTest {
-
-    @Test
-    public void testBuildUponBaseHost_singlePath() {
-        final String baseHost = "testbasehost";
-        final TwitterApi api = new TwitterApi(baseHost);
-        final Uri.Builder builder = api.buildUponBaseHostUrl("path1");
-        assertEquals(baseHost + "/path1", builder.build().toString());
-    }
-
-    @Test
-    public void testBuildUponBaseHost_multiplePaths() {
-        final String baseHost = "testbasehost";
-        final TwitterApi api = new TwitterApi(baseHost);
-        final Uri.Builder builder = api.buildUponBaseHostUrl("path1", "path2");
-        assertEquals(baseHost + "/path1/path2", builder.build().toString());
-    }
-
-    @Test
-    public void testBuildUserAgent() {
-        final String clientName = "TwitterAndroidSDK";
-        final String version = "1.0.0.1";
-        final String userAgent = TwitterApi.buildUserAgent(clientName, version);
-        assertEquals(
-                // client_name/client_version model/os_version (manufacturer;device;brand;product)
-                String.format("%s/%s %s/%s (%s;%s;%s;%s)",
-                        clientName, version, Build.MODEL, Build.VERSION.RELEASE, Build.MANUFACTURER,
-                        Build.MODEL, Build.BRAND, Build.PRODUCT),
-                userAgent);
-    }
-
-    @Test
-    public void testNormalizeString() {
-        assertEquals("Twitter", TwitterApi.normalizeString("Tw" + '\u00ED' + "tter\r\n\t"));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
deleted file mode 100644
index 8073cb80..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.TestFixtures;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.internal.TwitterSessionVerifier.AccountServiceProvider;
-import com.twitter.sdk.android.core.services.AccountService;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import retrofit2.mock.Calls;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterSessionVerifierTest {
-    private AccountServiceProvider mockAccountServiceProvider;
-    private TwitterSessionVerifier verifier;
-    private AccountService mockAccountService;
-    private TwitterSession session;
-
-    @Before
-    public void setUp() throws Exception {
-        mockAccountServiceProvider = mock(AccountServiceProvider.class);
-        mockAccountService = mock(AccountService.class);
-        when(mockAccountServiceProvider.getAccountService(any(TwitterSession.class))).thenReturn
-                (mockAccountService);
-        session = mock(TwitterSession.class);
-        when(session.getId()).thenReturn(TestFixtures.USER_ID);
-        verifier = new TwitterSessionVerifier(mockAccountServiceProvider);
-    }
-
-    @Test
-    public void testVerifySession() throws Exception {
-        verifier.verifySession(session);
-
-        verify(mockAccountService).verifyCredentials(true, false, false);
-    }
-
-    @Test
-    public void testVerifySession_catchesRetrofitExceptionsAndFinishesVerification() {
-        doReturn(Calls.failure(new IOException()))
-                .when(mockAccountService).verifyCredentials(true, false, false);
-
-        verifier.verifySession(session);
-
-        verify(mockAccountService).verifyCredentials(true, false, false);
-        // success, we caught the exception
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java
deleted file mode 100644
index df93be66..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.models.User;
-import com.twitter.sdk.android.core.models.UserBuilder;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class UserUtilsTest {
-    private User user;
-
-    @Before
-    public void setUp() throws Exception {
-
-        user = new UserBuilder()
-                .setId(1)
-                .setProfileImageUrlHttps(
-                        "https://pbs.twimg.com/profile_images/2284174872/7df3h38zabcvjylnyfe3_normal.png"
-                ).build();
-    }
-
-    @Test
-    public void testGetProfileImageUrlHttps_nullSize() {
-        assertEquals(user.profileImageUrlHttps,
-                UserUtils.getProfileImageUrlHttps(user, null));
-    }
-
-    @Test
-    public void testGetProfileImageUrlHttps_reasonablySmall() {
-        final String reasonableSize = "https://pbs.twimg.com/profile_images/2284174872/" +
-                "7df3h38zabcvjylnyfe3_reasonably_small.png";
-        assertEquals(reasonableSize,
-                UserUtils.getProfileImageUrlHttps(user, UserUtils.AvatarSize.REASONABLY_SMALL));
-    }
-
-    @Test
-    public void testFormatScreenName_alreadyFormatted() {
-        final String test = "@test";
-        assertEquals(test, UserUtils.formatScreenName(test));
-    }
-
-    @Test
-    public void testFormatScreenName() {
-        final String test = "@test";
-        assertEquals("@test", UserUtils.formatScreenName(test));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
deleted file mode 100644
index 0c7a310f..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import com.twitter.sdk.android.core.GuestSession;
-import com.twitter.sdk.android.core.GuestSessionProvider;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-
-import okhttp3.Interceptor;
-import okhttp3.Request;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class GuestAuthInterceptorTest {
-    static final String TEST_GUEST_TOKEN = "139854932048";
-    static final String TEST_ACCESS_TOKEN = "AjhdlsjreurWfjdiskdjieidfkdjshrow";
-    static final String TEST_HEADER_AUTHORIZATION = OAuth2Token.TOKEN_TYPE_BEARER
-            + " " + TEST_ACCESS_TOKEN;
-    static final String TEST_URL = "https://api.twitter.com";
-    static final String TEST_HEADER = "TEST_HEADER";
-
-    @Mock
-    GuestSessionProvider mockGuestSessionProvider;
-    @Mock
-    GuestSession mockGuestSession;
-    @Mock
-    GuestAuthToken mockAuthToken;
-    @Mock
-    Interceptor.Chain mockChain;
-    @Captor
-    ArgumentCaptor<Request> requestCaptor;
-    GuestAuthInterceptor interceptor;
-
-    @Before
-    public void setUp() throws Exception {
-        MockitoAnnotations.initMocks(this);
-
-        when(mockAuthToken.getGuestToken()).thenReturn(TEST_GUEST_TOKEN);
-        when(mockAuthToken.getAccessToken()).thenReturn(TEST_ACCESS_TOKEN);
-        when(mockAuthToken.getTokenType()).thenReturn(OAuth2Token.TOKEN_TYPE_BEARER);
-
-        when(mockGuestSession.getAuthToken()).thenReturn(mockAuthToken);
-
-        when(mockGuestSessionProvider.getCurrentSession()).thenReturn(mockGuestSession);
-
-        interceptor = new GuestAuthInterceptor(mockGuestSessionProvider);
-    }
-
-    @Test
-    public void testIntercept() throws Exception {
-        final Request request = new Request.Builder().url(TEST_URL).build();
-        when(mockChain.request()).thenReturn(request);
-
-        interceptor.intercept(mockChain);
-
-        verify(mockChain).proceed(requestCaptor.capture());
-
-        final Request signedRequest = requestCaptor.getValue();
-        assertEquals(TEST_HEADER_AUTHORIZATION,
-                signedRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_GUEST_TOKEN, signedRequest.header(OAuthConstants.HEADER_GUEST_TOKEN));
-    }
-
-    @Test
-    public void testIntercept_nullSessionFromProvider() throws Exception {
-        final Request request = new Request.Builder().url(TEST_URL).build();
-        when(mockChain.request()).thenReturn(request);
-        when(mockGuestSessionProvider.getCurrentSession()).thenReturn(null);
-
-        interceptor.intercept(mockChain);
-
-        verify(mockChain).proceed(requestCaptor.capture());
-
-        final Request unsignedRequest = requestCaptor.getValue();
-        assertEquals(request, unsignedRequest);
-    }
-
-    @Test
-    public void testAddAuthHeaders() {
-        final Request.Builder builder = new Request.Builder().url(TEST_URL);
-        GuestAuthInterceptor.addAuthHeaders(builder, mockAuthToken);
-        final Request request = builder.build();
-
-        assertEquals(TEST_HEADER_AUTHORIZATION,
-                request.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_GUEST_TOKEN, request.header(OAuthConstants.HEADER_GUEST_TOKEN));
-    }
-
-    @Test
-    public void testAddAuthHeaders_removesOldHeaders() {
-        final Request.Builder builder = new Request.Builder().url(TEST_URL);
-        builder.header(OAuthConstants.HEADER_AUTHORIZATION, "23233");
-        builder.header(OAuthConstants.HEADER_GUEST_TOKEN, "djfhjASEfjvncdjfhdkjASjshdj");
-        builder.header(TEST_HEADER, TEST_HEADER);
-        GuestAuthInterceptor.addAuthHeaders(builder, mockAuthToken);
-        final Request request = builder.build();
-
-        assertEquals(TEST_HEADER_AUTHORIZATION,
-                request.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_GUEST_TOKEN, request.header(OAuthConstants.HEADER_GUEST_TOKEN));
-        assertEquals(TEST_HEADER, request.header(TEST_HEADER));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java
deleted file mode 100644
index 1507adb5..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-
-import okhttp3.Interceptor;
-import okhttp3.Protocol;
-import okhttp3.Request;
-import okhttp3.Response;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class GuestAuthNetworkInterceptorTest {
-    static final String TEST_URL = "https://api.twitter.com";
-
-    @Mock
-    Interceptor.Chain mockChain;
-    Request request;
-    GuestAuthNetworkInterceptor interceptor;
-
-    @Before
-    public void setUp() throws Exception {
-        MockitoAnnotations.initMocks(this);
-
-        request = new Request.Builder().url(TEST_URL).build();
-        interceptor = new GuestAuthNetworkInterceptor();
-    }
-
-    @Test
-    public void testIntercept_with403() throws Exception {
-        final Response response = new Response.Builder()
-                .protocol(Protocol.HTTP_1_1)
-                .request(request)
-                .code(403)
-                .message("Forbidden")
-                .build();
-
-        when(mockChain.request()).thenReturn(request);
-        when(mockChain.proceed(request)).thenReturn(response);
-
-        final Response modifiedResponse = interceptor.intercept(mockChain);
-
-        assertFalse(response == modifiedResponse);
-        assertEquals(401, modifiedResponse.code());
-    }
-
-    @Test
-    public void testIntercept_with400() throws Exception {
-        final Response response = new Response.Builder()
-                .protocol(Protocol.HTTP_1_1)
-                .request(request)
-                .message("Bad Request")
-                .code(400)
-                .build();
-
-        when(mockChain.request()).thenReturn(request);
-        when(mockChain.proceed(request)).thenReturn(response);
-
-        final Response unmodifiedResponse = interceptor.intercept(mockChain);
-
-        assertTrue(response == unmodifiedResponse);
-        assertEquals(400, unmodifiedResponse.code());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java
deleted file mode 100644
index 3125e566..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java
+++ /dev/null
@@ -1,157 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import com.twitter.sdk.android.core.GuestSession;
-import com.twitter.sdk.android.core.GuestSessionProvider;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-
-import okhttp3.Protocol;
-import okhttp3.Request;
-import okhttp3.Response;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class GuestAuthenticatorTest {
-    static final String TEST_GUEST_TOKEN = "139854932048";
-    static final String TEST_ACCESS_TOKEN = "AjhdlsjreurWfjdiskdjieidfkdjshrow";
-    static final String TEST_GUEST_TOKEN_2 = "13985434545048";
-    static final String TEST_ACCESS_TOKEN_2 = "ldsjfljsdhfjhuYSGYYSuagshjhags";
-    static final String TEST_HEADER_AUTHORIZATION = OAuth2Token.TOKEN_TYPE_BEARER
-            + " " + TEST_ACCESS_TOKEN;
-    static final String TEST_HEADER_AUTHORIZATION_2 = OAuth2Token.TOKEN_TYPE_BEARER
-            + " " + TEST_ACCESS_TOKEN_2;
-    static final String TEST_URL = "https://api.twitter.com";
-
-    @Mock
-    GuestSessionProvider mockGuestSessionProvider;
-    @Mock
-    GuestAuthToken mockAuthToken;
-    Request request;
-    Response response;
-    GuestAuthenticator authenticator;
-
-    @Before
-    public void setUp() throws Exception {
-        MockitoAnnotations.initMocks(this);
-
-        when(mockAuthToken.getGuestToken()).thenReturn(TEST_GUEST_TOKEN_2);
-        when(mockAuthToken.getAccessToken()).thenReturn(TEST_ACCESS_TOKEN_2);
-        when(mockAuthToken.getTokenType()).thenReturn(OAuth2Token.TOKEN_TYPE_BEARER);
-
-        request = new Request.Builder()
-                .url(TEST_URL)
-                .header(OAuthConstants.HEADER_AUTHORIZATION, TEST_HEADER_AUTHORIZATION)
-                .header(OAuthConstants.HEADER_GUEST_TOKEN, TEST_GUEST_TOKEN)
-                .build();
-
-        response = new Response.Builder()
-                .code(401)
-                .message("Unauthorized")
-                .protocol(Protocol.HTTP_1_1)
-                .request(request)
-                .build();
-
-        authenticator = new GuestAuthenticator(mockGuestSessionProvider);
-    }
-
-    @Test
-    public void testGetExpiredToken() {
-        final GuestSession session = authenticator.getExpiredSession(response);
-
-        final GuestAuthToken token = session.getAuthToken();
-        assertEquals(TEST_GUEST_TOKEN, token.getGuestToken());
-        assertEquals(TEST_ACCESS_TOKEN, token.getAccessToken());
-    }
-
-    @Test
-    public void testGetExpiredToken_emptyHeaders() {
-        request = new Request.Builder()
-                .url(TEST_URL)
-                .build();
-
-        response = new Response.Builder()
-                .code(401)
-                .message("Unauthorized")
-                .protocol(Protocol.HTTP_1_1)
-                .request(request)
-                .build();
-
-        final GuestSession session = authenticator.getExpiredSession(response);
-
-        assertNull(session);
-    }
-
-    @Test
-    public void testReauth_emptyHeaders() {
-        request = new Request.Builder()
-                .url(TEST_URL)
-                .build();
-
-        response = new Response.Builder()
-                .code(401)
-                .message("Unauthorized")
-                .protocol(Protocol.HTTP_1_1)
-                .request(request)
-                .build();
-
-        final Request request = authenticator.reauth(response);
-        assertNull(request);
-    }
-
-    @Test
-    public void testResign() {
-        final Request newRequest = authenticator.resign(request, mockAuthToken);
-
-        assertEquals(TEST_HEADER_AUTHORIZATION_2,
-                newRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_GUEST_TOKEN_2, newRequest.header(OAuthConstants.HEADER_GUEST_TOKEN));
-    }
-
-    @Test
-    public void testCanRetry_firstRetry() {
-        assertTrue(authenticator.canRetry(response));
-    }
-
-    @Test
-    public void testCanRetry_secondRetry() {
-        final Response failedResponse = new Response.Builder()
-                .code(401)
-                .message("Unauthorized")
-                .protocol(Protocol.HTTP_1_1)
-                .request(request)
-                .priorResponse(response)
-                .build();
-
-        assertFalse(authenticator.canRetry(failedResponse));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java
deleted file mode 100644
index d72e76e9..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import com.twitter.sdk.android.core.TestFixtures;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.util.Map;
-
-import okhttp3.FormBody;
-import okhttp3.Interceptor;
-import okhttp3.Request;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuth1aInterceptorTest {
-    static final String POST_KEY = "test";
-    static final String POST_KEY_2 = "test 2!";
-    static final String POST_KEY_2_ENCODED = "test%202%21";
-    static final String POST_VALUE = "value";
-    static final String POST_VALUE_2 = "value 2!";
-    static final String TEST_URL = "https://api.twitter.com";
-    static final String TEST_HEADER = "TEST_HEADER";
-
-    @Mock
-    TwitterSession mockTwitterSession;
-    @Mock
-    TwitterAuthToken mockAuthToken;
-    @Mock
-    TwitterAuthConfig mockAuthConfig;
-    @Mock
-    Interceptor.Chain mockChain;
-    @Captor
-    ArgumentCaptor<Request> requestCaptor;
-    OAuth1aInterceptor interceptor;
-
-    @Before
-    public void setUp() throws Exception {
-        MockitoAnnotations.initMocks(this);
-
-        when(mockAuthConfig.getConsumerKey()).thenReturn(TestFixtures.KEY);
-        when(mockAuthConfig.getConsumerSecret()).thenReturn(TestFixtures.SECRET);
-
-        when(mockTwitterSession.getAuthToken()).thenReturn(mockAuthToken);
-
-        interceptor = new OAuth1aInterceptor(mockTwitterSession, mockAuthConfig);
-    }
-
-    @Test
-    public void testIntercept() throws Exception {
-        final Request request = new Request.Builder()
-                .url(TEST_URL)
-                .header(TEST_HEADER, TEST_HEADER)
-                .build();
-        when(mockChain.request()).thenReturn(request);
-
-        interceptor.intercept(mockChain);
-
-        verify(mockChain).proceed(requestCaptor.capture());
-
-        final Request signedRequest = requestCaptor.getValue();
-        assertNotNull(signedRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
-        assertEquals(TEST_HEADER, signedRequest.header(TEST_HEADER));
-    }
-
-    @Test
-    public void testGetAuthHeaders() throws IOException {
-        final Request request = new Request.Builder().url(TEST_URL).build();
-
-        final String header = interceptor.getAuthorizationHeader(request);
-
-        assertNotNull(header);
-    }
-
-    @Test
-    public void testGetPostParameters_bodyWithMultipleParams() throws IOException {
-        final FormBody formBody = new FormBody.Builder()
-                .add(POST_KEY, POST_VALUE)
-                .add(POST_KEY_2, POST_VALUE_2)
-                .build();
-
-        final Request request = new Request.Builder()
-                .url(TEST_URL)
-                .post(formBody)
-                .build();
-
-        final Map<String, String> params = interceptor.getPostParams(request);
-
-        assertEquals(2, params.size());
-        assertEquals(POST_VALUE, params.get(POST_KEY));
-        assertEquals(POST_VALUE_2, params.get(POST_KEY_2_ENCODED));
-    }
-
-    @Test
-    public void testGetPostParameters_withZeroParams() throws IOException {
-        final FormBody formBody = new FormBody.Builder().build();
-
-        final Request request = new Request.Builder()
-                .url(TEST_URL)
-                .post(formBody)
-                .build();
-
-        final Map<String, String> params = interceptor.getPostParams(request);
-
-        assertEquals(0, params.size());
-    }
-
-    @Test
-    public void testGetPostParameters_withGetRequest() throws IOException {
-        final Request request = new Request.Builder().url(TEST_URL).build();
-
-        final Map<String, String> params = interceptor.getPostParams(request);
-
-        assertEquals(0, params.size());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/UrlUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/UrlUtilsTest.java
deleted file mode 100644
index bc461c1a..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/UrlUtilsTest.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.net.URI;
-import java.util.TreeMap;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-@RunWith(RobolectricTestRunner.class)
-public class UrlUtilsTest {
-
-    private static final String[] ORIGINAL_STRINGS = new String[]{
-            "Ladies + Gentlemen",
-            "An encoded string!",
-            "Dogs, Cats & Mice",
-            "☃",
-            "~`!@#$%^&*()+=,<.>?/",
-            "-._~"
-    };
-
-    private static final String[] PERCENT_ENCODED_STRINGS = new String[]{
-            "Ladies%20%2B%20Gentlemen",
-            "An%20encoded%20string%21",
-            "Dogs%2C%20Cats%20%26%20Mice",
-            "%E2%98%83",
-            "~%60%21%40%23%24%25%5E%26%2A%28%29%2B%3D%2C%3C.%3E%3F%2F",
-            "-._~"
-    };
-
-    private static final String QUERY_PARAMS = "plainParam=1&&emptyParam&decodedParam=%2B2me&";
-    private static final String PLAIN_PARAM_KEY = "plainParam";
-    private static final String PLAIN_PARAM_VALUE = "1";
-    private static final String EMPTY_PARAM_KEY = "emptyParam";
-    private static final String EMPTY_PARAM_VALUE = "";
-    private static final String DECODED_PARAM_KEY = "decodedParam";
-    private static final String DECODED_PARAM_VALUE_PLAIN = "%2B2me";
-    private static final String DECODED_PARAM_VALUE_DECODED = "+2me";
-    private static final URI URI_WITH_PARAMS = URI.create("http://test.com?" + QUERY_PARAMS);
-
-    @Test
-    public void testPercentEncode() {
-        int i = 0;
-        for (String s : ORIGINAL_STRINGS) {
-            assertEquals(PERCENT_ENCODED_STRINGS[i], UrlUtils.percentEncode(s));
-            i += 1;
-        }
-    }
-
-    @Test
-    public void testGetQueryParams_nullDecode() {
-        final TreeMap<String, String> params = UrlUtils.getQueryParams(EMPTY_PARAM_VALUE, true);
-        assertNotNull(params);
-        assertEquals(0, params.size());
-    }
-
-    @Test
-    public void testGetQueryParams_nullNotDecode() {
-        final TreeMap<String, String> params = UrlUtils.getQueryParams(EMPTY_PARAM_VALUE, false);
-        assertNotNull(params);
-        assertEquals(0, params.size());
-    }
-
-    @Test
-    public void testGetQueryParams_allParamsDecode() {
-        final TreeMap<String, String> params = UrlUtils.getQueryParams(QUERY_PARAMS, true);
-        assertDecodedValue(params);
-    }
-
-    @Test
-    public void testGetQueryParams_allParamsNotDecode() {
-        final TreeMap<String, String> params = UrlUtils.getQueryParams(QUERY_PARAMS, false);
-        assertNotDecodedValue(params);
-    }
-
-    @Test
-    public void testURIParams_allParamsDecode() {
-        final TreeMap<String, String> params = UrlUtils.getQueryParams(URI_WITH_PARAMS, true);
-        assertDecodedValue(params);
-    }
-
-    @Test
-    public void testURIParams_allParamsNotDecode() {
-        final TreeMap<String, String> params = UrlUtils.getQueryParams(URI_WITH_PARAMS, false);
-        assertNotDecodedValue(params);
-    }
-
-    private void assertNotDecodedValue(final TreeMap<String, String> params) {
-        assertEquals(3, params.size());
-        assertEquals(PLAIN_PARAM_VALUE, params.get(PLAIN_PARAM_KEY));
-        assertEquals(EMPTY_PARAM_VALUE, params.get(EMPTY_PARAM_KEY));
-        assertEquals(DECODED_PARAM_VALUE_PLAIN, params.get(DECODED_PARAM_KEY));
-    }
-
-    private void assertDecodedValue(final TreeMap<String, String> params) {
-        assertEquals(3, params.size());
-        assertEquals(PLAIN_PARAM_VALUE, params.get(PLAIN_PARAM_KEY));
-        assertEquals(EMPTY_PARAM_VALUE, params.get(EMPTY_PARAM_KEY));
-        assertEquals(DECODED_PARAM_VALUE_DECODED, params.get(DECODED_PARAM_KEY));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java
deleted file mode 100644
index 013b8692..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class GuestAuthTokenTest {
-
-    private static final int HEADERS_COUNT = 2;
-    private static final String TOKEN_TYPE = "tokenType";
-    private static final String ACCESS_TOKEN = "accessToken";
-    private static final String GUEST_TOKEN = "guestToken";
-    private static final long ONE_HOUR_AGE = System.currentTimeMillis() - (3600 * 1000);
-    private static final long THREE_HOURS_AGO = System.currentTimeMillis() - (3600 * 3 * 1000);
-
-    @Test
-    public void testIsExpired_newToken() {
-        final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN);
-        assertFalse(token.isExpired());
-    }
-
-    @Test
-    public void testIsExpired_oneHourOld() {
-        final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN,
-                ONE_HOUR_AGE);
-        assertFalse(token.isExpired());
-    }
-
-    @Test
-    public void testIsExpired_threeHoursOld() {
-        final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN,
-                THREE_HOURS_AGO);
-        assertTrue(token.isExpired());
-    }
-
-    @Test
-    public void testIsExpired_createdAtZero() {
-        final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN, 0);
-        assertTrue(token.isExpired());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java
deleted file mode 100644
index 0e8bbc6c..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuth1aHeadersTest {
-    private static final String VERIFY_CREDENTIALS_URL = "api.twitter.com";
-    private static final String ANY_AUTH_CREDENTIALS = "auth_credentials";
-    private OAuth1aParameters oAuth1aParameters;
-    private OAuth1aHeaders oAuthHeaders;
-
-    @Before
-    public void setUp() throws Exception {
-
-        oAuth1aParameters = new MockOAuth1aParameters();
-        oAuthHeaders = new MockOAuth1aHeaders();
-    }
-
-    @Test
-    public void testGetOAuthEchoHeaders() throws Exception {
-        final TwitterAuthConfig config = mock(TwitterAuthConfig.class);
-        final TwitterAuthToken token = mock(TwitterAuthToken.class);
-
-        final Map<String, String> headers = oAuthHeaders.getOAuthEchoHeaders(config, token, null,
-                "GET", VERIFY_CREDENTIALS_URL, null);
-        assertEquals(VERIFY_CREDENTIALS_URL, headers.get(OAuth1aHeaders
-                .HEADER_AUTH_SERVICE_PROVIDER));
-        assertEquals(ANY_AUTH_CREDENTIALS, headers.get(OAuth1aHeaders
-                .HEADER_AUTH_CREDENTIALS));
-    }
-
-    @Test
-    public void testGetAuthorizationHeader() throws Exception {
-        final TwitterAuthConfig config = mock(TwitterAuthConfig.class);
-        final TwitterAuthToken token = mock(TwitterAuthToken.class);
-
-        assertEquals(ANY_AUTH_CREDENTIALS, oAuthHeaders.getAuthorizationHeader(config, token, null,
-                "GET", VERIFY_CREDENTIALS_URL, null));
-    }
-
-    private class MockOAuth1aParameters extends OAuth1aParameters {
-        MockOAuth1aParameters() {
-            super(null, null, null, null, null, null);
-        }
-
-        @Override
-        public String getAuthorizationHeader() {
-            return ANY_AUTH_CREDENTIALS;
-        }
-    }
-
-    private class MockOAuth1aHeaders extends OAuth1aHeaders {
-        @Override
-        OAuth1aParameters getOAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken
-                authToken, String callback, String method, String url,
-                                               Map<String, String> postParams) {
-            return oAuth1aParameters;
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParametersTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParametersTest.java
deleted file mode 100644
index 17890768..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParametersTest.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-@SuppressWarnings("checkstyle:linelength")
-public class OAuth1aParametersTest {
-
-    private static class TestParameters {
-        public final String method;
-        public final String url;
-        public final Map<String, String> postParams;
-        public final String consumerKey;
-        public final String consumerSecret;
-        public final String callback;
-        public final String nonce;
-        public final String timestamp;
-        public final String token;
-        public final String tokenSecret;
-        public final String expectedSignatureBase;
-        public final String expectedSignature;
-        public final String expectedAuthHeader;
-
-        TestParameters(String method, String url, Map<String, String> postParams,
-                       String consumerKey, String consumerSecret, String callback, String nonce,
-                       String timestamp, String token, String tokenSecret,
-                       String expectedSignatureBase, String expectedSignature,
-                       String expectedAuthHeader) {
-            this.method = method;
-            this.url = url;
-            this.postParams = postParams;
-            this.consumerKey = consumerKey;
-            this.consumerSecret = consumerSecret;
-            this.callback = callback;
-            this.nonce = nonce;
-            this.timestamp = timestamp;
-            this.token = token;
-            this.tokenSecret = tokenSecret;
-            this.expectedSignatureBase = expectedSignatureBase;
-            this.expectedSignature = expectedSignature;
-            this.expectedAuthHeader = expectedAuthHeader;
-        }
-    }
-
-    private static final TestParameters[] TEST_PARAMETERS = new TestParameters[]{
-            // tokens/secrets (disabled) from https://dev.twitter.com/web/sign-in/implementing
-            new TestParameters(
-                    "POST",
-                    "https://api.twitter.com/oauth/request_token",
-                    null,
-                    "cChZNFj6T5R0TigYB9yd1w",
-                    "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg",
-                    "http://localhost/sign-in-with-twitter/",
-                    "ea9ec8429b68d6b77cd5600adbbb0456",
-                    "1318467427",
-                    null,
-                    null,
-                    "POST&https%3A%2F%2Fapi.twitter.com%2Foauth%2Frequest_token&oauth_callback%3Dhttp%253A%252F%252Flocalhost%252Fsign-in-with-twitter%252F%26oauth_consumer_key%3DcChZNFj6T5R0TigYB9yd1w%26oauth_nonce%3Dea9ec8429b68d6b77cd5600adbbb0456%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1318467427%26oauth_version%3D1.0",
-                    "F1Li3tvehgcraF8DMJ7OyxO4w9Y=",
-                    "OAuth oauth_callback=\"http%3A%2F%2Flocalhost%2Fsign-in-with-twitter%2F\", oauth_consumer_key=\"cChZNFj6T5R0TigYB9yd1w\", oauth_nonce=\"ea9ec8429b68d6b77cd5600adbbb0456\", oauth_signature=\"F1Li3tvehgcraF8DMJ7OyxO4w9Y%3D\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"1318467427\", oauth_version=\"1.0\""),
-            new TestParameters(
-                    "POST",
-                    "https://api.twitter.com/1/statuses/update.json?include_entities=true",
-                    new HashMap<String, String>() {
-                        {
-                            put("status", "Hello Ladies + Gentlemen, a signed OAuth request!");
-                        }
-                    },
-                    "xvz1evFS4wEEPTGEFPHBog",
-                    "kAcSOqF21Fu85e7zjz7ZN2U4ZRhfV3WpwPAoE3Z7kBw",
-                    null,
-                    "kYjzVBB8Y0ZFabxSWbWovY3uYSQ2pTgmZeNu2VS4cg",
-                    "1318622958",
-                    "370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb",
-                    "LswwdoUaIvS8ltyTt5jkRh4J50vUPVVHtR2YPi5kE",
-                    "POST&https%3A%2F%2Fapi.twitter.com%2F1%2Fstatuses%2Fupdate.json&include_entities%3Dtrue%26oauth_consumer_key%3Dxvz1evFS4wEEPTGEFPHBog%26oauth_nonce%3DkYjzVBB8Y0ZFabxSWbWovY3uYSQ2pTgmZeNu2VS4cg%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1318622958%26oauth_token%3D370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb%26oauth_version%3D1.0%26status%3DHello%2520Ladies%2520%252B%2520Gentlemen%252C%2520a%2520signed%2520OAuth%2520request%2521",
-                    "tnnArxj06cWHq44gCs1OSKk/jLY=",
-                    "OAuth oauth_consumer_key=\"xvz1evFS4wEEPTGEFPHBog\", oauth_nonce=\"kYjzVBB8Y0ZFabxSWbWovY3uYSQ2pTgmZeNu2VS4cg\", oauth_signature=\"tnnArxj06cWHq44gCs1OSKk%2FjLY%3D\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"1318622958\", oauth_token=\"370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb\", oauth_version=\"1.0\"")
-    };
-
-    @Test
-    public void testConstructSignatureBase() {
-        for (TestParameters testParameters : TEST_PARAMETERS) {
-            final OAuth1aParameters oAuth1aParameters = toOAuth1aParameters(testParameters);
-            final String signatureBase = oAuth1aParameters.constructSignatureBase(
-                    testParameters.nonce, testParameters.timestamp);
-            assertEquals(testParameters.expectedSignatureBase, signatureBase);
-        }
-    }
-
-    private OAuth1aParameters toOAuth1aParameters(TestParameters testParameters) {
-        final TwitterAuthToken authToken;
-        if (testParameters.token != null && testParameters.tokenSecret != null) {
-            authToken = new TwitterAuthToken(testParameters.token, testParameters.tokenSecret);
-        } else {
-            authToken = null;
-        }
-        return new OAuth1aParameters(
-                new TwitterAuthConfig(testParameters.consumerKey, testParameters.consumerSecret),
-                authToken,
-                testParameters.callback, testParameters.method, testParameters.url,
-                testParameters.postParams);
-    }
-
-    @Test
-    public void testCalculateSignature() {
-        for (TestParameters testParameters : TEST_PARAMETERS) {
-            final OAuth1aParameters oAuth1aParameters = toOAuth1aParameters(testParameters);
-            final String signature
-                    = oAuth1aParameters.calculateSignature(testParameters.expectedSignatureBase);
-            assertEquals(testParameters.expectedSignature, signature);
-        }
-    }
-
-    @Test
-    public void testConstructAuthorizationHeader() {
-        for (TestParameters testParameters : TEST_PARAMETERS) {
-            final OAuth1aParameters oAuth1aParameters = toOAuth1aParameters(testParameters);
-            final String authHeader = oAuth1aParameters.constructAuthorizationHeader(
-                    testParameters.nonce, testParameters.timestamp,
-                    testParameters.expectedSignature);
-            assertEquals(testParameters.expectedAuthHeader, authHeader);
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
deleted file mode 100644
index 30676cce..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
+++ /dev/null
@@ -1,295 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.internal.TwitterApi;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import okhttp3.MediaType;
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.Response;
-import retrofit2.http.Header;
-import retrofit2.http.Query;
-import retrofit2.mock.Calls;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-@SuppressWarnings("checkstyle:linelength")
-public class OAuth1aServiceTest {
-
-    private TwitterAuthConfig authConfig;
-    private TwitterCore twitterCore;
-    private OAuth1aService service;
-    private TwitterApi twitterApi;
-
-    @Before
-    public void setUp() throws Exception {
-        authConfig = new TwitterAuthConfig("key", "secret");
-        twitterCore = mock(TwitterCore.class);
-        when(twitterCore.getAuthConfig()).thenReturn(authConfig);
-        twitterApi = new TwitterApi();
-        service = new OAuth1aService(twitterCore, twitterApi);
-    }
-
-    @Test
-    public void testGetTempTokenUrl() {
-        assertEquals("https://api.twitter.com/oauth/request_token", service.getTempTokenUrl());
-    }
-
-    @Test
-    public void testGetAccessTokenUrl() throws NoSuchMethodException {
-        assertEquals("https://api.twitter.com/oauth/access_token", service.getAccessTokenUrl());
-    }
-
-    @Test
-    public void testRequestTempToken() {
-        service.api = new MockOAuth1aService() {
-            @Override
-            public Call<ResponseBody> getTempToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
-                assertTrue(auth.contains(OAuthConstants.PARAM_CALLBACK));
-                return super.getTempToken(auth);
-            }
-        };
-        service.requestTempToken(mock(Callback.class));
-    }
-
-    @Test
-    public void testRequestAccessToken() {
-        final TwitterAuthToken token = new TwitterAuthToken("token", "secret");
-        final String verifier = "verifier";
-        service.api = new MockOAuth1aService() {
-            @Override
-            public Call<ResponseBody> getAccessToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
-                                                     @Query(OAuthConstants.PARAM_VERIFIER) String innerVerifier) {
-
-                assertEquals(verifier, innerVerifier);
-                assertNotNull(auth);
-                assertTrue(auth.contains(token.token));
-
-                return super.getAccessToken(auth, innerVerifier);
-            }
-        };
-        service.requestAccessToken(mock(Callback.class), token, verifier);
-    }
-
-    @Test
-    public void testApiHost() {
-        assertEquals(twitterApi, service.getApi());
-    }
-
-    @Test
-    public void testGetUserAgent() {
-        final String userAgent = TwitterApi.buildUserAgent("TwitterAndroidSDK",
-                twitterCore.getVersion());
-        assertEquals(userAgent, service.getUserAgent());
-    }
-
-    @Test
-    public void testBuildCallbackUrl() {
-        final String callbackUrl = service.buildCallbackUrl(authConfig);
-
-        assertEquals(String.format("twittersdk://callback?version=%s&app=%s",
-                twitterCore.getVersion(), authConfig.getConsumerKey()), callbackUrl);
-    }
-
-    @Test
-    public void testGetAuthorizeUrl() {
-        final TwitterAuthToken authToken = new TwitterAuthToken("token", "secret");
-        final String authorizeUrl = service.getAuthorizeUrl(authToken);
-        assertEquals("https://api.twitter.com/oauth/authorize?oauth_token=token", authorizeUrl);
-    }
-
-    @Test
-    public void testParseAuthResponse() {
-        final String response = "oauth_token=7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4&"
-                + "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
-                + "screen_name=test&user_id=1";
-        final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.token);
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.secret);
-        assertEquals("test", authResponse.userName);
-        assertEquals(1L, authResponse.userId);
-    }
-
-    @Test
-    public void testParseAuthResponse_noQueryParameters() {
-        final String response = "noQueryParameters";
-        final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertNull(authResponse);
-    }
-
-    @Test
-    public void testParseAuthResponse_noToken() {
-        final String response = "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
-                + "screen_name=test&user_id=1";
-        final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertNull(authResponse);
-    }
-
-    @Test
-    public void testParseAuthResponse_noSecret() {
-        final String response = "oauth_token=7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4&"
-                + "screen_name=test&user_id=1";
-        final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertNull(authResponse);
-    }
-
-    @Test
-    public void testParseAuthResponse_noScreenName() {
-        final String response = "oauth_token=7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4&"
-                + "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
-                + "user_id=1";
-        final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.token);
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.secret);
-        assertNull(authResponse.userName);
-        assertEquals(1L, authResponse.userId);
-    }
-
-    @Test
-    public void testParseAuthResponse_noUserId() {
-        final String response = "oauth_token=7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4&"
-                + "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
-                + "screen_name=test";
-        final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
-        assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.token);
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.secret);
-        assertEquals("test", authResponse.userName);
-        assertEquals(0L, authResponse.userId);
-    }
-
-    @Test
-    public void testCallbackWrapperSuccess() throws IOException {
-        final String response = "oauth_token=7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4&"
-                + "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
-                + "screen_name=test&user_id=1";
-        final Callback<OAuthResponse> callback = new Callback<OAuthResponse>() {
-            @Override
-            public void success(Result<OAuthResponse> result) {
-                final OAuthResponse authResponse = result.data;
-                assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                        authResponse.authToken.token);
-                assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo",
-                        authResponse.authToken.secret);
-                assertEquals("test", authResponse.userName);
-                assertEquals(1L, authResponse.userId);
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                fail();
-            }
-        };
-        setupCallbackWrapperTest(response, callback);
-    }
-
-    private void setupCallbackWrapperTest(String responseStr,
-                                          Callback<OAuthResponse> authResponseCallback) throws IOException {
-        final Callback<ResponseBody> callbackWrapper = service.getCallbackWrapper(authResponseCallback);
-        final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), responseStr);
-        final Response<ResponseBody> response = Response.success(responseBody);
-
-        callbackWrapper.success(new Result<>(responseBody, response));
-    }
-
-    @Test
-    public void testCallbackWrapperSuccess_noToken() throws IOException {
-        final String response = "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
-                + "screen_name=test&user_id=1";
-        final Callback<OAuthResponse> callback = new Callback<OAuthResponse>() {
-            @Override
-            public void success(Result<OAuthResponse> result) {
-                fail();
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                assertNotNull(exception);
-            }
-        };
-        setupCallbackWrapperTest(response, callback);
-    }
-
-    @Test
-    public void testCallbackWrapperSuccess_iOException() throws IOException {
-        final Callback<OAuthResponse> callback = new Callback<OAuthResponse>() {
-            @Override
-            public void success(Result<OAuthResponse> result) {
-                fail();
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                assertNotNull(exception);
-            }
-        };
-        final Callback<ResponseBody> callbackWrapper = service.getCallbackWrapper(callback);
-        final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), "");
-        callbackWrapper.success(new Result<>(responseBody, Response.success(responseBody)));
-    }
-
-    @Test
-    public void testCallbackWrapperFailure() {
-        final Callback<OAuthResponse> authResponseCallback = mock(Callback.class);
-        final Callback<ResponseBody> callbackWrapper = service.getCallbackWrapper(authResponseCallback);
-        final TwitterException mockException = mock(TwitterException.class);
-        callbackWrapper.failure(mockException);
-        verify(authResponseCallback).failure(eq(mockException));
-    }
-
-    private static class MockOAuth1aService implements OAuth1aService.OAuthApi {
-
-        @Override
-        public Call<ResponseBody> getTempToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
-            final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), "");
-            return Calls.response(Response.success(responseBody));
-        }
-
-        @Override
-        public Call<ResponseBody> getAccessToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
-                                                 @Query(OAuthConstants.PARAM_VERIFIER) String verifier) {
-            final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), "");
-            return Calls.response(Response.success(responseBody));
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
deleted file mode 100644
index 4d4897b9..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
+++ /dev/null
@@ -1,215 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.internal.TwitterApi;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.lang.reflect.Method;
-
-import retrofit2.Call;
-import retrofit2.Response;
-import retrofit2.http.Field;
-import retrofit2.http.Header;
-import retrofit2.http.Headers;
-import retrofit2.http.POST;
-import retrofit2.mock.Calls;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-@SuppressWarnings("checkstyle:linelength")
-public class OAuth2ServiceTest {
-
-    /**
-     * Example consumer key and consumer secret values provided by:
-     * https://dev.twitter.com/oauth/application-only
-     */
-    static final String CONSUMER_KEY = "xvz1evFS4wEEPTGEFPHBog";
-    static final String CONSUMER_SECRET = "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg";
-    static final TwitterAuthConfig AUTH_CONFIG = new TwitterAuthConfig(CONSUMER_KEY, CONSUMER_SECRET);
-    static final String EXPECTED_BASIC_AUTH = "Basic eHZ6MWV2RlM0d0VFUFRHRUZQSEJvZzpMOHFxOVBaeVJnNmllS0dFS2hab2xHQzB2SldMdzhpRUo4OERSZHlPZw==";
-    static final OAuth2Token APP_TOKEN = new OAuth2Token("type", "access");
-    static final GuestAuthToken GUEST_TOKEN = new GuestAuthToken("type", "access", "guest");
-    static final GuestTokenResponse GUEST_RESPONSE = new GuestTokenResponse("guest");
-
-    private TwitterCore twitterCore;
-    private TwitterApi twitterApi;
-    private OAuth2Service service;
-
-    @Before
-    public void setUp() {
-        twitterCore = mock(TwitterCore.class);
-        when(twitterCore.getAuthConfig()).thenReturn(AUTH_CONFIG);
-
-        twitterApi = new TwitterApi();
-        service = new OAuth2Service(twitterCore, twitterApi);
-    }
-
-    public class MockOAuth2Api implements OAuth2Service.OAuth2Api {
-
-        @Override
-        public Call<GuestTokenResponse> getGuestToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
-            return Calls.response(Response.success(GUEST_RESPONSE));
-        }
-
-        @Override
-        public Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
-                                                 @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType) {
-            return Calls.response(Response.success(APP_TOKEN));
-        }
-    }
-
-    @Test
-    public void testGetGuestToken_url() throws NoSuchMethodException {
-        final Method method = OAuth2Service.OAuth2Api.class
-                .getDeclaredMethod("getGuestToken", String.class);
-        final POST post = method.getAnnotation(POST.class);
-        assertEquals("/1.1/guest/activate.json", post.value());
-    }
-
-    @Test
-    public void testGetAppAuthToken_url() throws NoSuchMethodException {
-        final Method method = OAuth2Service.OAuth2Api.class
-                .getDeclaredMethod("getAppAuthToken", String.class, String.class);
-        final POST post = method.getAnnotation(POST.class);
-        assertEquals("/oauth2/token", post.value());
-    }
-
-    @Test
-    public void testGetAppAuthToken_contentType() throws NoSuchMethodException {
-        final Method method = OAuth2Service.OAuth2Api.class
-                .getDeclaredMethod("getAppAuthToken", String.class, String.class);
-        final Headers header = method.getAnnotation(Headers.class);
-        assertEquals("Content-Type: application/x-www-form-urlencoded;charset=UTF-8",
-                header.value()[0]);
-    }
-
-    @Test
-    public void testApiHost() {
-        assertEquals(twitterApi, service.getApi());
-    }
-
-    @Test
-    public void testGetUserAgent() {
-        final String userAgent
-                = TwitterApi.buildUserAgent("TwitterAndroidSDK", twitterCore.getVersion());
-        assertEquals(userAgent, service.getUserAgent());
-    }
-
-    @Test
-    public void testRequestAppAuthToken() {
-        service.api = spy(new MockOAuth2Api());
-        service.requestAppAuthToken(mock(Callback.class));
-
-        verify(service.api).getAppAuthToken(EXPECTED_BASIC_AUTH,
-                OAuthConstants.GRANT_TYPE_CLIENT_CREDENTIALS);
-    }
-
-    @Test
-    public void testRequestGuestToken() {
-        final OAuth2Token token = new OAuth2Token("type", "token");
-        final String bearerAuth = OAuthConstants.AUTHORIZATION_BEARER + " "
-                + token.getAccessToken();
-
-        service.api = spy(new MockOAuth2Api());
-        service.requestGuestToken(mock(Callback.class), token);
-
-        verify(service.api).getGuestToken(bearerAuth);
-    }
-
-    @Test
-    public void testRequestGuestAuthToken_guestAuthSuccess() {
-
-        service.api = new MockOAuth2Api();
-        service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
-            @Override
-            public void success(Result<GuestAuthToken> result) {
-                assertEquals(GUEST_TOKEN, result.data);
-            }
-
-            @Override
-            public void failure(TwitterException error) {
-                fail();
-            }
-        });
-    }
-
-    @Test
-    public void testRequestGuestAuthToken_guestFailure() {
-
-        service.api = new MockOAuth2Api() {
-            @Override
-            public Call<GuestTokenResponse> getGuestToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
-                return Calls.failure(new IOException());
-            }
-        };
-
-        service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
-            @Override
-            public void success(Result<GuestAuthToken> result) {
-                fail();
-            }
-
-            @Override
-            public void failure(TwitterException error) {
-                assertNotNull(error);
-            }
-        });
-    }
-
-    @Test
-    public void testRequestGuestAuthToken_appAuthFailure() {
-
-        service.api = new MockOAuth2Api() {
-            @Override
-            public Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
-                                                     @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType) {
-                return Calls.failure(new IOException());
-            }
-        };
-
-        service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
-            @Override
-            public void success(Result<GuestAuthToken> result) {
-                fail();
-            }
-
-            @Override
-            public void failure(TwitterException error) {
-                assertNotNull(error);
-            }
-        });
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java
deleted file mode 100644
index c0584f07..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import android.os.Parcel;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuth2TokenTest {
-
-    private static final String TOKEN_TYPE = "tokenType";
-    private static final String ACCESS_TOKEN = "accessToken";
-
-    @Test
-    public void testParcelable() {
-        final OAuth2Token authToken = new OAuth2Token(TOKEN_TYPE, ACCESS_TOKEN);
-        final Parcel parcel = Parcel.obtain();
-        authToken.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        final OAuth2Token parceledAuthToken
-                = OAuth2Token.CREATOR.createFromParcel(parcel);
-        assertEquals(authToken, parceledAuthToken);
-    }
-
-    @Test
-    public void testIsExpired() {
-        final OAuth2Token token = new OAuth2Token(TOKEN_TYPE, ACCESS_TOKEN);
-        assertFalse(token.isExpired());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponseTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponseTest.java
deleted file mode 100644
index 29f842b1..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponseTest.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import android.os.Parcel;
-
-import com.twitter.sdk.android.core.TestFixtures;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class OAuthResponseTest {
-
-    @Test
-    public void testParcelable() {
-        final TwitterAuthToken authToken = new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET);
-        final OAuthResponse authResponse = new OAuthResponse(authToken, TestFixtures.SCREEN_NAME,
-                TestFixtures.USER_ID);
-        final Parcel parcel = Parcel.obtain();
-        authResponse.writeToParcel(parcel, 0);
-        parcel.setDataPosition(0);
-        final OAuthResponse parceledAuthResponse
-                = OAuthResponse.CREATOR.createFromParcel(parcel);
-        assertEquals(authResponse.authToken, parceledAuthResponse.authToken);
-        assertEquals(TestFixtures.SCREEN_NAME, parceledAuthResponse.userName);
-        assertEquals(TestFixtures.USER_ID, parceledAuthResponse.userId);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthUtils.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthUtils.java
deleted file mode 100644
index 7ff0fa3c..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuthUtils.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-public class OAuthUtils {
-
-    public static OAuth2Token createOAuth2Token(String tokenType, String accessToken,
-                                                long createdAt) {
-        return new OAuth2Token(tokenType, accessToken, createdAt);
-    }
-
-    public static GuestAuthToken createGuestAuthToken(String tokenType, String accessToken,
-                                                      String guestToken, long createdAt) {
-        return new GuestAuthToken(tokenType, accessToken, guestToken, createdAt);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java
deleted file mode 100644
index f6f56f81..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.persistence;
-
-import android.os.Environment;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.shadows.ShadowEnvironment;
-
-import java.io.File;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class FileStoreImplTest {
-    FileStoreImpl fileStore;
-
-    @Before
-    public void setUp() throws Exception {
-        fileStore = new FileStoreImpl(RuntimeEnvironment.application);
-    }
-
-    @Test
-    public void testConstructor() {
-        try {
-            new FileStoreImpl(null);
-            fail();
-        } catch (IllegalArgumentException ex) {
-            assertEquals("Context must not be null", ex.getMessage());
-        }
-    }
-
-    @Test
-    public void testGetCacheDir() {
-        verifyFile(fileStore.getCacheDir());
-    }
-
-    @Test
-    public void testGetFilesDir() {
-        verifyFile(fileStore.getFilesDir());
-    }
-
-    @Test
-    public void testGetExternalCacheDir() {
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-        verifyFile(fileStore.getExternalCacheDir());
-    }
-
-    @Test
-    public void testGetExternalCacheDir_withoutExternalStorage() {
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_REMOVED);
-        assertNull(fileStore.getExternalCacheDir());
-    }
-
-    @Test
-    public void testGetExternalFilesDir() {
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-        verifyFile(fileStore.getExternalFilesDir());
-    }
-
-    @Test
-    public void testGetExternalFilesDir_withoutExternalStorage() {
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_REMOVED);
-        assertNull(fileStore.getExternalFilesDir());
-    }
-
-    public void testPrepare() {
-        verifyFile(fileStore.prepare(new File(RuntimeEnvironment.application.getFilesDir(),
-                "FileStoreImplTest/")));
-    }
-
-    @Test
-    public void testisExternalStorageAvailable() {
-        final String state = Environment.getExternalStorageState();
-        assertEquals(Environment.MEDIA_MOUNTED.equals(state),
-                fileStore.isExternalStorageAvailable());
-    }
-
-    private void verifyFile(File file) {
-        assertNotNull(file);
-        assertTrue(file.exists());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImplTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImplTest.java
deleted file mode 100644
index 63302fad..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImplTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.persistence;
-
-import android.annotation.SuppressLint;
-import android.content.SharedPreferences;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class PreferenceStoreImplTest {
-    PreferenceStoreImpl preferenceStore;
-
-    @Before
-    public void setUp() {
-        preferenceStore = new PreferenceStoreImpl(RuntimeEnvironment.application, "Stub");
-    }
-
-    @Test
-    @SuppressLint("CommitPrefEdits")
-    public void testGet() {
-        assertNotNull(preferenceStore.get());
-        assertTrue(preferenceStore.get() instanceof SharedPreferences);
-    }
-
-    @Test
-    @SuppressLint("CommitPrefEdits")
-    public void testEdit() {
-        assertNotNull(preferenceStore.edit());
-        assertTrue(preferenceStore.edit() instanceof SharedPreferences.Editor);
-    }
-
-    @Test
-    @SuppressLint("CommitPrefEdits")
-    public void testSave() {
-        final String key = "Test Key";
-        final String value = "Test Value";
-        final SharedPreferences.Editor editor = preferenceStore.edit();
-        editor.putString(key, value);
-        assertTrue(preferenceStore.save(editor));
-
-        final String result = preferenceStore.get().getString(key, null);
-
-        assertNotNull(result);
-        assertEquals(value, result);
-    }
-
-    @Test
-    @SuppressLint("CommitPrefEdits")
-    public void testNamespace() {
-        final String key = "Test namespace key";
-        final String value = "Test namespace value";
-
-        final PreferenceStoreImpl secondPrefStore =
-                new PreferenceStoreImpl(RuntimeEnvironment.application, "PersistenceTest");
-
-        assertNotSame(preferenceStore.get(), secondPrefStore.get());
-
-        preferenceStore.save(preferenceStore.edit().putString(key, value));
-
-        assertNull(secondPrefStore.get().getString(key, null));
-
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
deleted file mode 100644
index e55d94d5..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-
-import java.io.InputStreamReader;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-public class BindingValuesAdapterTest {
-    Gson gson;
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    @Before
-    public void setUp() {
-        gson = new GsonBuilder()
-                .registerTypeAdapter(BindingValues.class, new BindingValuesAdapter())
-                .create();
-    }
-
-    @Test
-    public void testDeserialize_withValidBindingValues() {
-        final JsonReader reader = new JsonReader(new InputStreamReader(testResources
-                .getAsStream("model_card.json")));
-        final Card card = gson.fromJson(reader, Card.class);
-
-        assertNotNull(card.bindingValues);
-        assertTrue(card.bindingValues.containsKey("app_id"));
-        assertEquals("co.vine.android", card.bindingValues.get("app_id"));
-        assertTrue(card.bindingValues.containsKey("app_is_free"));
-        assertEquals("true", card.bindingValues.get("app_is_free"));
-        assertTrue(card.bindingValues.containsKey("app_name"));
-        assertEquals("Vine - video entertainment", card.bindingValues.get("app_name"));
-        assertTrue(card.bindingValues.containsKey("app_num_ratings"));
-        assertEquals("1,080,460", card.bindingValues.get("app_num_ratings"));
-        assertTrue(card.bindingValues.containsKey("app_price_amount"));
-        assertEquals("0.0", card.bindingValues.get("app_price_amount"));
-        assertTrue(card.bindingValues.containsKey("app_price_currency"));
-        assertEquals("USD", card.bindingValues.get("app_price_currency"));
-        assertTrue(card.bindingValues.containsKey("app_star_rating"));
-        assertEquals("4.2", card.bindingValues.get("app_star_rating"));
-        assertTrue(card.bindingValues.containsKey("app_url"));
-        assertTrue(card.bindingValues.containsKey("app_url_resolved"));
-        assertTrue(card.bindingValues.containsKey("card_url"));
-        assertTrue(card.bindingValues.containsKey("description"));
-        assertEquals("Vine by Krystaalized", card.bindingValues.get("description"));
-        assertTrue(card.bindingValues.containsKey("domain"));
-        assertEquals("vine.co", card.bindingValues.get("domain"));
-        assertTrue(card.bindingValues.containsKey("player_height"));
-        assertEquals("535", card.bindingValues.get("player_height"));
-        assertTrue(card.bindingValues.containsKey("player_image"));
-        final ImageValue imageValue = card.bindingValues.get("player_image");
-        assertNotNull(imageValue);
-        assertEquals(480, imageValue.height);
-        assertEquals(480, imageValue.width);
-        assertEquals("https://o.twimg.com/qwhjddd", imageValue.url);
-        assertTrue(card.bindingValues.containsKey("player_stream_content_type"));
-        assertTrue(card.bindingValues.containsKey("player_stream_url"));
-        assertTrue(card.bindingValues.containsKey("player_url"));
-        assertTrue(card.bindingValues.containsKey("player_width"));
-        assertEquals("535", card.bindingValues.get("player_width"));
-        assertTrue(card.bindingValues.containsKey("site"));
-        assertNotNull(card.bindingValues.get("site"));
-        assertEquals("586671909", ((UserValue) card.bindingValues.get("site")).idStr);
-        assertTrue(card.bindingValues.containsKey("title"));
-        assertTrue(card.bindingValues.containsKey("vanity_url"));
-        assertEquals("vine.co", card.bindingValues.get("vanity_url"));
-        assertFalse(card.bindingValues.containsKey("foo"));
-        assertFalse(card.bindingValues.containsKey(null));
-    }
-
-    @Test
-    public void testDeserialize_withEmptyBindingValues() {
-        final BindingValues bindingValues = gson.fromJson("{}", BindingValues.class);
-
-        assertNotNull(bindingValues);
-    }
-
-    @Test
-    public void testDeserialize_withNoType() {
-        final String testString = "{\"app_id\": {}}";
-        final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
-
-        assertNotNull(bindingValues);
-        assertTrue(bindingValues.containsKey("app_id"));
-        assertNull(bindingValues.get("app_id"));
-    }
-
-    @Test
-    public void testDeserialize_withUnsupportedType() {
-        final String testString = "{\"app_id\": {\"type\": \"FOOBAR\"}}";
-        final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
-
-        assertNotNull(bindingValues);
-        assertTrue(bindingValues.containsKey("app_id"));
-        assertNull(bindingValues.get("app_id"));
-    }
-
-    @Test
-    public void testDeserialize_withNonPrimitiveType() {
-        final String testString = "{\"app_id\": {\"type\": {}}}";
-        final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
-
-        assertNotNull(bindingValues);
-        assertTrue(bindingValues.containsKey("app_id"));
-        assertNull(bindingValues.get("app_id"));
-    }
-
-    @Test
-    public void testDeserialize_withNoValue() {
-        final String testString = "{\"app_id\": {\"type\": \"STRING\"}}";
-        final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
-
-        assertNotNull(bindingValues);
-        assertTrue(bindingValues.containsKey("app_id"));
-        assertNull(bindingValues.get("app_id"));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
deleted file mode 100644
index c280f6e5..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-@RunWith(RobolectricTestRunner.class)
-public class ConfigurationTest {
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private static final int TEST_DM_CHAR_LIMIT = 10000;
-    private static final int TEST_SHORT_URL_LENGTH = 23;
-    private static final int TEST_NUN_NON_USER_NAME = 85;
-    private static final long TEST_PHOTO_SIZE_LIMIT = 3145728;
-    private static final MediaEntity.Size TEST_SIZE_THUMB = new MediaEntity.Size(150, 150, "crop");
-    private static final MediaEntity.Size TEST_SIZE_SMALL = new MediaEntity.Size(340, 480, "fit");
-    private static final MediaEntity.Size TEST_SIZE_MEDIUM = new MediaEntity.Size(600, 1200, "fit");
-    private static final MediaEntity.Size TEST_SIZE_LARGE = new MediaEntity.Size(1024, 2048, "fit");
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_configuration.json")));
-            final Configuration configuration = new Gson().fromJson(reader, Configuration.class);
-            assertEquals(TEST_DM_CHAR_LIMIT, configuration.dmTextCharacterLimit);
-            assertNotNull(configuration.nonUsernamePaths);
-            assertEquals(TEST_NUN_NON_USER_NAME, configuration.nonUsernamePaths.size());
-            assertEquals(TEST_PHOTO_SIZE_LIMIT, configuration.photoSizeLimit);
-            assertNotNull(configuration.photoSizes);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_THUMB, configuration.photoSizes.thumb);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_SMALL, configuration.photoSizes.small);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_MEDIUM, configuration.photoSizes.medium);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_LARGE, configuration.photoSizes.large);
-            assertEquals(TEST_SHORT_URL_LENGTH, configuration.shortUrlLengthHttps);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
deleted file mode 100644
index f45600cb..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class CoordinatesTest {
-
-    private static final String TEST_JSON = "{\n"
-            + "    \"coordinates\":\n"
-            + "    [\n"
-            + "        -75.14310264,\n"
-            + "        40.05701649\n"
-            + "    ],\n"
-            + "    \"type\":\"Point\"\n"
-            + "}\n";
-    private static final Double TEST_COORDINATES_LONGITUDE = Double.valueOf(-75.14310264);
-    private static final Double TEST_COORDINATES_LATITUDE = Double.valueOf(40.05701649);
-    private static final String TEST_TYPE = "Point";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final Coordinates coordinates = gson.fromJson(TEST_JSON, Coordinates.class);
-        assertEquals(TEST_COORDINATES_LONGITUDE, coordinates.getLongitude());
-        assertEquals(TEST_COORDINATES_LATITUDE, coordinates.getLatitude());
-        assertEquals(TEST_TYPE, coordinates.type);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java
deleted file mode 100644
index d65288a4..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class EntityTest {
-
-    private static final String TEST_JSON = "{\"indices\":[32,36]}";
-    private static final int TEST_INDICES_START = 32;
-    private static final int TEST_INDICES_END = 36;
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final Entity entity = gson.fromJson(TEST_JSON, Entity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
deleted file mode 100644
index 206c1a22..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class HashTagEntityTest {
-
-    private static final String TEST_JSON = "{\"indices\":[32,36],\"text\":\"lol\"}";
-    private static final int TEST_INDICES_START = 32;
-    private static final int TEST_INDICES_END = 36;
-    private static final String TEST_TEXT = "lol";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final HashtagEntity entity = gson.fromJson(TEST_JSON, HashtagEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_TEXT, entity.text);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
deleted file mode 100644
index d417f6d3..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
+++ /dev/null
@@ -1,143 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.NotSerializableException;
-import java.io.ObjectOutputStream;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class MediaEntityTest {
-    private static final int TEST_INDICES_START = 117;
-    private static final int TEST_INDICES_END = 139;
-    private static final String TEST_URL = "http://t.co/lvYVFjAbzz";
-    private static final String TEST_DISPLAY_URL = "pic.twitter.com/lvYVFjAbzz";
-    private static final String TEST_EXPANDED_URL = "http://twitter.com/jbulava/status/606528031289655296/video/1";
-    private static final long TEST_ID = 606527664086781952L;
-    private static final String TEST_ID_STR = "606527664086781952";
-    private static final String TEST_MEDIA_URL = "http://pbs.twimg.com/ext_tw_video_thumb/606527664086781952/pu/img/mInvoINHjLcN8Mvk.jpg";
-    private static final String TEST_MEDIA_URL_HTTPS = "https://pbs.twimg.com/ext_tw_video_thumb/606527664086781952/pu/img/mInvoINHjLcN8Mvk.jpg";
-    private static final MediaEntity.Size TEST_SIZE_THUMB = new MediaEntity.Size(150, 150, "crop");
-    private static final MediaEntity.Size TEST_SIZE_SMALL = new MediaEntity.Size(340, 191, "fit");
-    private static final MediaEntity.Size TEST_SIZE_MEDIUM = new MediaEntity.Size(600, 338, "fit");
-    private static final MediaEntity.Size TEST_SIZE_LARGE = new MediaEntity.Size(1024, 576, "fit");
-    private static final long TEST_SOURCE_STATUS_ID = 205282515685081088L;
-    private static final String TEST_SOURCE_STATUS_ID_STR = "205282515685081088";
-    private static final String TEST_TYPE = "video";
-    private static final int TEST_ASPECT_WIDTH = 16;
-    private static final int TEST_ASPECT_HEIGHT = 9;
-    private static final long TEST_DURATION = 30024;
-    private static final int TEST_TOTAL_VARIANTS = 2;
-    private static final String TEST_ALT_TEXT = "A Twitter employee";
-    private static final String TEST_URL_0 = "https://video.twimg.com/ext_tw_video/606527664086781952/pu/vid/640x360/jdAs88NgP4N3Iqtu.mp4";
-    private static final VideoInfo.Variant TEST_VARIANT_0 =
-            new VideoInfo.Variant(832000, "video/mp4", TEST_URL_0);
-    private static final String TEST_URL_1 = "https://video.twimg.com/ext_tw_video/606527664086781952/pu/vid/640x360/jdAs88NgP4N3Iqtu.webm";
-    private static final VideoInfo.Variant TEST_VARIANT_1 =
-            new VideoInfo.Variant(832000, "video/webm", TEST_URL_1);
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_media_entity.json")));
-            final MediaEntity entity = gson.fromJson(reader, MediaEntity.class);
-
-            assertEquals(TEST_INDICES_START, entity.getStart());
-            assertEquals(TEST_INDICES_END, entity.getEnd());
-            assertEquals(TEST_URL, entity.url);
-            assertEquals(TEST_DISPLAY_URL, entity.displayUrl);
-            assertEquals(TEST_EXPANDED_URL, entity.expandedUrl);
-            assertEquals(TEST_ID, entity.id);
-            assertEquals(TEST_ID_STR, entity.idStr);
-            assertEquals(TEST_MEDIA_URL, entity.mediaUrl);
-            assertEquals(TEST_MEDIA_URL_HTTPS, entity.mediaUrlHttps);
-            assertSizeEquals(TEST_SIZE_THUMB, entity.sizes.thumb);
-            assertSizeEquals(TEST_SIZE_SMALL, entity.sizes.small);
-            assertSizeEquals(TEST_SIZE_MEDIUM, entity.sizes.medium);
-            assertSizeEquals(TEST_SIZE_LARGE, entity.sizes.large);
-            assertEquals(TEST_SOURCE_STATUS_ID, entity.sourceStatusId);
-            assertEquals(TEST_SOURCE_STATUS_ID_STR, entity.sourceStatusIdStr);
-            assertEquals(TEST_TYPE, entity.type);
-            assertEquals(TEST_ASPECT_WIDTH, (int) entity.videoInfo.aspectRatio.get(0));
-            assertEquals(TEST_ASPECT_HEIGHT, (int) entity.videoInfo.aspectRatio.get(1));
-            assertEquals(TEST_DURATION, entity.videoInfo.durationMillis);
-            assertEquals(TEST_TOTAL_VARIANTS, entity.videoInfo.variants.size());
-            assertVariantEquals(TEST_VARIANT_0, entity.videoInfo.variants.get(0));
-            assertVariantEquals(TEST_VARIANT_1, entity.videoInfo.variants.get(1));
-            assertEquals(TEST_ALT_TEXT, entity.altText);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    @Test
-    public void testSerializable() throws Exception {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_media_entity.json")));
-            final MediaEntity entity = gson.fromJson(reader, MediaEntity.class);
-
-            new ObjectOutputStream(new ByteArrayOutputStream()).writeObject(entity);
-        } catch (NotSerializableException ex) {
-            fail("MediaEntity should implement Serializable");
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    public static void assertSizeEquals(MediaEntity.Size expected, MediaEntity.Size actual) {
-        assertEquals(expected.h, actual.h);
-        assertEquals(expected.w, actual.w);
-        assertEquals(expected.resize, actual.resize);
-    }
-
-    public static void assertVariantEquals(VideoInfo.Variant expected, VideoInfo.Variant actual) {
-        assertEquals(expected.bitrate, actual.bitrate);
-        assertEquals(expected.contentType, actual.contentType);
-        assertEquals(expected.url, actual.url);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
deleted file mode 100644
index 7576e84d..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class MentionEntityTest {
-
-    private static final String TEST_JSON = "{\"name\":\"Twitter API\","
-            + "\"indices\":[4,15], \"screen_name\":\"twitterapi\","
-            + "\"id\":6253282, \"id_str\":\"6253282\"}";
-    private static final int TEST_INDICES_START = 4;
-    private static final int TEST_INDICES_END = 15;
-    private static final long TEST_ID = 6253282L;
-    private static final String TEST_ID_STR = "6253282";
-    private static final String TEST_NAME = "Twitter API";
-    private static final String TEST_SCREEN_NAME = "twitterapi";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final MentionEntity entity = gson.fromJson(TEST_JSON, MentionEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_ID, entity.id);
-        assertEquals(TEST_ID_STR, entity.idStr);
-        assertEquals(TEST_NAME, entity.name);
-        assertEquals(TEST_SCREEN_NAME, entity.screenName);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
deleted file mode 100644
index a425e630..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.List;
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class PlaceTest {
-
-    private static final String EXPECTED_COUNTRY = "United States";
-    private static final String EXPECTED_COUNTRY_CODE = "US";
-    private static final String EXPECTED_FULL_NAME = "Twitter HQ, San Francisco";
-    private static final String EXPECTED_ID = "247f43d441defc03";
-    private static final String EXPECTED_NAME = "Twitter HQ";
-    private static final String EXPECTED_PLACE_TYPE = "poi";
-    private static final String EXPECTED_URL = "https://api.twitter.com/1.1/geo/id/247f43d441defc03.json";
-
-    private static final String EXPECTED_ATTR_STREET_ADDRESS = "street_address";
-    private static final String EXPECTED_ATTR_STREET_ADDRESS_VALUE = "795 Folsom St";
-    private static final String EXPECTED_ATTR_623_ID = "623:id";
-    private static final String EXPECTED_ATTR_623_ID_VALUE = "210176";
-    private static final String EXPECTED_ATTR_TWITTER = "twitter";
-    private static final String EXPECTED_ATTR_TWITTER_VALUE = "twitter";
-
-    private static final Double EXPECTED_BOUNDING_BOX_LONGITUDE = -122.400612831116;
-    private static final Double EXPECTED_BOUNDING_BOX_LATITUDE = 37.7821120598956;
-    private static final String EXPECTED_BOUNDING_BOX_TYPE = "Polygon";
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_places.json")));
-            final Place place = gson.fromJson(reader, Place.class);
-            assertAttributes(place.attributes);
-            assertBoundingBox(place.boundingBox);
-            assertEquals(EXPECTED_COUNTRY, place.country);
-            assertEquals(EXPECTED_COUNTRY_CODE, place.countryCode);
-            assertEquals(EXPECTED_FULL_NAME, place.fullName);
-            assertEquals(EXPECTED_ID, place.id);
-            assertEquals(EXPECTED_NAME, place.name);
-            assertEquals(EXPECTED_PLACE_TYPE, place.placeType);
-            assertEquals(EXPECTED_URL, place.url);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    private void assertAttributes(Map<String, String> attributes) {
-        assertEquals(EXPECTED_ATTR_STREET_ADDRESS_VALUE,
-                attributes.get(EXPECTED_ATTR_STREET_ADDRESS));
-        assertEquals(EXPECTED_ATTR_623_ID_VALUE, attributes.get(EXPECTED_ATTR_623_ID));
-        assertEquals(EXPECTED_ATTR_TWITTER_VALUE, attributes.get(EXPECTED_ATTR_TWITTER));
-    }
-
-    private void assertBoundingBox(Place.BoundingBox boundingBox) {
-        assertEquals(EXPECTED_BOUNDING_BOX_TYPE, boundingBox.type);
-        assertEquals(4, boundingBox.coordinates.get(0).size());
-        for (List<Double> d : boundingBox.coordinates.get(0)) {
-            assertEquals(EXPECTED_BOUNDING_BOX_LONGITUDE, d.get(0));
-            assertEquals(EXPECTED_BOUNDING_BOX_LATITUDE, d.get(1));
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java
deleted file mode 100644
index 8fd27b2b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.Collections;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class SafeListAdapterTest {
-
-    private static final String TEST_JSON_LIST_NULL = "{\"list\":null}";
-    private static final String TEST_JSON_LIST_EMPTY = "{\"list\":[]}";
-    private static final String TEST_JSON_LIST_VALUES = "{\"list\":[32,36]}";
-
-    private static final int TEST_ANY_NUMBER = 100;
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new GsonBuilder().registerTypeAdapterFactory(new SafeListAdapter()).create();
-    }
-
-    @Test
-    public void testDeserialization_nullListModel1() {
-        final Model1 model = gson.fromJson(TEST_JSON_LIST_NULL, Model1.class);
-        assertEquals(Collections.EMPTY_LIST, model.listOfIntegers);
-    }
-
-    @Test
-    public void testDeserialization_emptyListModel1() {
-        final Model1 model = gson.fromJson(TEST_JSON_LIST_EMPTY, Model1.class);
-        assertEquals(Collections.EMPTY_LIST, model.listOfIntegers);
-    }
-
-    @Test
-    public void testDeserialization_validListModel1() {
-        final Model1 model = gson.fromJson(TEST_JSON_LIST_VALUES, Model1.class);
-        try {
-            model.listOfIntegers.add(Integer.valueOf(TEST_ANY_NUMBER));
-        } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
-        }
-    }
-
-    @Test
-    public void testDeserialization_nullListModel2() {
-        final Model2 model = gson.fromJson(TEST_JSON_LIST_NULL, Model2.class);
-        assertEquals(Collections.EMPTY_LIST, model.listOfLongs);
-    }
-
-    @Test
-    public void testDeserialization_emptyList() {
-        final Model2 model = gson.fromJson(TEST_JSON_LIST_EMPTY, Model2.class);
-        assertEquals(Collections.EMPTY_LIST, model.listOfLongs);
-    }
-
-    @Test
-    public void testDeserialization_validListModel2() {
-        final Model2 model = gson.fromJson(TEST_JSON_LIST_VALUES, Model2.class);
-        try {
-            model.listOfLongs.add(Long.valueOf(TEST_ANY_NUMBER));
-        } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
-        }
-    }
-
-    private static class Model1 {
-
-        @SerializedName("list")
-        public final List<Integer> listOfIntegers;
-
-        // Not used in testing, but needed because of final.
-        Model1(List<Integer> listOfLongs) {
-            this.listOfIntegers = listOfLongs;
-        }
-    }
-
-    private static class Model2 {
-
-        @SerializedName("list")
-        public final List<Long> listOfLongs;
-
-        // Not used in testing, but needed because of final.
-        Model2(List<Long> listOfLongs) {
-            this.listOfLongs = listOfLongs;
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java
deleted file mode 100644
index c5c64ab4..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.SerializedName;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.Collections;
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class SafeMapAdapterTest {
-    private static final String TEST_JSON_MAP_EMPTY = "{\"map\":{}}";
-    private static final String TEST_JSON_MAP_STRING_VALUES
-            = "{\"map\": {\"k1\": \"v1\",\"k2\": \"v2\"}}";
-    private static final String TEST_JSON_MAP_NUMBER_VALUES = "{\"map\": {\"k1\": 1,\"k2\": 2}}";
-
-    private static final String TEST_ANY_STRING_KEY = "any key";
-    private static final String TEST_ANY_STRING_VALUE = "any value";
-    private static final int TEST_ANY_NUMBER = 100;
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new GsonBuilder().registerTypeAdapterFactory(new SafeMapAdapter()).create();
-    }
-
-    @Test
-    public void testDeserialization_emptyMapModel1() {
-        final Model1 model = gson.fromJson(TEST_JSON_MAP_EMPTY, Model1.class);
-        assertEquals(Collections.EMPTY_MAP, model.mapOfStrings);
-    }
-
-    @Test
-    public void testDeserialization_validMapModel1() {
-        final Model1 model = gson.fromJson(TEST_JSON_MAP_STRING_VALUES, Model1.class);
-        try {
-            model.mapOfStrings.put(TEST_ANY_STRING_KEY, TEST_ANY_STRING_VALUE);
-        } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
-        }
-    }
-
-    @Test
-    public void testDeserialization_emptyList() {
-        final Model2 model = gson.fromJson(TEST_JSON_MAP_EMPTY, Model2.class);
-        assertEquals(Collections.EMPTY_MAP, model.stringLongMap);
-    }
-
-    @Test
-    public void testDeserialization_validMapModel2() {
-        final Model2 model = gson.fromJson(TEST_JSON_MAP_NUMBER_VALUES, Model2.class);
-        try {
-            model.stringLongMap.put(TEST_ANY_STRING_KEY, Long.valueOf(TEST_ANY_NUMBER));
-        } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
-        }
-    }
-
-    private static class Model1 {
-
-        @SerializedName("map")
-        public final Map<String, String> mapOfStrings;
-
-        // Not used in testing, but needed because of final.
-        Model1(Map<String, String> mapOfStrings) {
-            this.mapOfStrings = mapOfStrings;
-        }
-    }
-
-    private static class Model2 {
-
-        @SerializedName("map")
-        public final Map<String, Long> stringLongMap;
-
-        // Not used in testing, but needed because of final.
-        Model2(Map<String, Long> stringLongMap) {
-            this.stringLongMap = stringLongMap;
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
deleted file mode 100644
index 9240234b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class SymbolEntityTest {
-
-    private static final String TEST_JSON = "{\"indices\":[32,36],\"text\":\"TWTR\"}";
-    private static final int TEST_INDICES_START = 32;
-    private static final int TEST_INDICES_END = 36;
-    private static final String TEST_TEXT = "TWTR";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final SymbolEntity entity = gson.fromJson(TEST_JSON, SymbolEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_TEXT, entity.text);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
deleted file mode 100644
index cf32cc34..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collections;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetEntitiesTest {
-
-    private static final int EXPECTED_URLS_SIZE = 1;
-    private static final int EXPECTED_USER_MENTIONS_SIZE = 1;
-    private static final int EXPECTED_MEDIA_SIZE = 1;
-    private static final int EXPECTED_HASHTAGS_SIZE = 1;
-    private static final int EXPECTED_SYMBOLS_SIZE = 1;
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testConstructor_nullParameters() {
-        try {
-            final TweetEntities entities = new TweetEntities(null, null, null, null, null);
-            assertEquals(Collections.EMPTY_LIST, entities.urls);
-            assertEquals(Collections.EMPTY_LIST, entities.userMentions);
-            assertEquals(Collections.EMPTY_LIST, entities.media);
-            assertEquals(Collections.EMPTY_LIST, entities.hashtags);
-        } catch (Exception e) {
-            fail();
-        }
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_tweetentities.json")));
-            final TweetEntities tweetEntities = gson.fromJson(reader, TweetEntities.class);
-            // We simply assert that we parsed it successfully and rely on our other unit tests to
-            // verify parsing of the individual objects.
-            assertEquals(EXPECTED_URLS_SIZE, tweetEntities.urls.size());
-            assertEquals(EXPECTED_USER_MENTIONS_SIZE, tweetEntities.userMentions.size());
-            assertEquals(EXPECTED_MEDIA_SIZE, tweetEntities.media.size());
-            assertEquals(EXPECTED_HASHTAGS_SIZE, tweetEntities.hashtags.size());
-            assertEquals(EXPECTED_SYMBOLS_SIZE, tweetEntities.symbols.size());
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    @Test
-    public void testDeserialization_noEntities() throws IOException {
-        final TweetEntities tweetEntities = gson.fromJson("{\"urls\":[]}", TweetEntities.class);
-        // We simply assert that we parsed it successfully and rely on our other unit tests to
-        // verify parsing of the individual objects.
-        assertNotNull(tweetEntities.urls);
-        assertEquals(0, tweetEntities.urls.size());
-        assertNotNull(tweetEntities.userMentions);
-        assertEquals(0, tweetEntities.userMentions.size());
-        assertNotNull(tweetEntities.media);
-        assertEquals(0, tweetEntities.media.size());
-        assertNotNull(tweetEntities.hashtags);
-        assertEquals(0, tweetEntities.hashtags.size());
-        assertNotNull(tweetEntities.symbols);
-        assertEquals(0, tweetEntities.symbols.size());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
deleted file mode 100644
index e7f93a57..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetTest {
-
-    private static final String EXPECTED_CREATED_AT = "Wed Jun 06 20:07:10 +0000 2012";
-    private static final long EXPECTED_ID = 210462857140252672L;
-    private static final String EXPECTED_TEXT = "Along with our new #Twitterbird, we've also updated our Display Guidelines: https://t.co/Ed4omjYs  ^JC";
-    private static final Integer[] EXPECTED_DISPLAY_TEXT_RANGE = {0, 102};
-    private static final String EXPECTED_WITHHELD_IN_COUNTRIES = "XY";
-    private static final long EXPECTED_QUOTED_STATUS_ID = 745634624466911232L;
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_tweet.json")));
-            final Tweet tweet = gson.fromJson(reader, Tweet.class);
-            // We simply assert that we parsed it successfully and rely on our other unit tests to
-            // verify parsing of the individual objects.
-            assertEquals(EXPECTED_CREATED_AT, tweet.createdAt);
-            assertNotNull(tweet.entities);
-            assertNotNull(tweet.entities.hashtags);
-            assertNotNull(tweet.entities.media);
-            assertNotNull(tweet.entities.symbols);
-            assertNotNull(tweet.entities.urls);
-            assertNotNull(tweet.entities.userMentions);
-            assertNotNull(tweet.user);
-            assertTrue(tweet.retweeted);
-            assertEquals(EXPECTED_ID, tweet.id);
-            assertEquals(EXPECTED_ID, tweet.getId());
-            assertNotNull(tweet.text);
-            assertEquals(EXPECTED_TEXT, tweet.text);
-            assertNotNull(tweet.displayTextRange);
-            assertFalse(tweet.truncated);
-            assertArrayEquals(EXPECTED_DISPLAY_TEXT_RANGE, tweet.displayTextRange.toArray());
-            assertNotNull(tweet.withheldInCountries);
-            assertEquals(1, tweet.withheldInCountries.size());
-            assertEquals(EXPECTED_WITHHELD_IN_COUNTRIES, tweet.withheldInCountries.get(0));
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    @Test
-    public void testQuotedTweetDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_quoted_tweet.json")));
-            final Tweet tweet = gson.fromJson(reader, Tweet.class);
-            assertEquals(EXPECTED_QUOTED_STATUS_ID, tweet.quotedStatusId);
-            assertEquals(String.valueOf(EXPECTED_QUOTED_STATUS_ID), tweet.quotedStatusIdStr);
-            assertNotNull(tweet.quotedStatus);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
deleted file mode 100644
index 5b97932a..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class TwitterCollectionTest {
-    private static final int EXPECTED_NUM_USERS = 2;
-    private static final int EXPECTED_NUM_TWEETS = 3;
-    private static final Long EXPECTED_TWEET_ID_FIRST = 504032379045179393L;
-    private static final Long EXPECTED_TWEET_ID_SECOND = 532654992071852032L;
-    private static final Long EXPECTED_USER_ID_FIRST = 2244994945L;
-    private static final String EXPECTED_USER_SCREEN_NAME_FIRST = "TwitterDev";
-
-    private static final String EXPECTED_TIMELINE_ID = "custom-539487832448843776";
-    private static final Long EXPECTED_MAX_POSITION = 371578415352947200L;
-    private static final Long EXPECTED_MIN_POSITION = 371578380871797248L;
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_twitter_collection.json")));
-            final TwitterCollection twitterCollection
-                    = gson.fromJson(reader, TwitterCollection.class);
-
-            // check collection decomposed object maps in objects field
-            assertEquals(EXPECTED_NUM_TWEETS, twitterCollection.contents.tweetMap.size());
-            assertEquals(EXPECTED_NUM_USERS, twitterCollection.contents.userMap.size());
-            assertTrue(twitterCollection.contents.tweetMap.containsKey(EXPECTED_TWEET_ID_FIRST));
-            assertEquals((long) EXPECTED_TWEET_ID_FIRST,
-                    twitterCollection.contents.tweetMap.get(EXPECTED_TWEET_ID_FIRST).id);
-            assertTrue(twitterCollection.contents.tweetMap.containsKey(EXPECTED_TWEET_ID_SECOND));
-            assertTrue(twitterCollection.contents.userMap.containsKey(EXPECTED_USER_ID_FIRST));
-            assertEquals(EXPECTED_USER_SCREEN_NAME_FIRST,
-                    twitterCollection.contents.userMap.get(EXPECTED_USER_ID_FIRST).screenName);
-
-            // check object references and contextual info in response field
-            assertEquals(EXPECTED_TIMELINE_ID, twitterCollection.metadata.timelineId);
-            assertEquals(EXPECTED_MAX_POSITION, twitterCollection.metadata.position.maxPosition);
-            assertEquals(EXPECTED_MIN_POSITION, twitterCollection.metadata.position.minPosition);
-            assertEquals(EXPECTED_NUM_TWEETS, twitterCollection.metadata.timelineItems.size());
-            assertEquals(EXPECTED_TWEET_ID_FIRST,
-                    twitterCollection.metadata.timelineItems.get(0).tweetItem.id);
-            assertEquals(EXPECTED_TWEET_ID_SECOND,
-                    twitterCollection.metadata.timelineItems.get(1).tweetItem.id);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java
deleted file mode 100644
index c705e5f6..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class UrlEntityTest {
-
-    private static final String TEST_JSON
-            = "{\"indices\":[32,52], \"url\":\"http:\\/\\/t.co\\/IOwBrTZR\","
-            + "\"display_url\":\"youtube.com\\/watch?v=oHg5SJ\\u2026\","
-            + "\"expanded_url\":\"http:\\/\\/www.youtube.com\\/watch?v=oHg5SJYRHA0\"}";
-    private static final int TEST_INDICES_START = 32;
-    private static final int TEST_INDICES_END = 52;
-    private static final String TEST_URL = "http://t.co/IOwBrTZR";
-    private static final String TEST_DISPLAY_URL = "youtube.com/watch?v=oHg5SJ\u2026";
-    private static final String TEST_EXPANDED_URL = "http://www.youtube.com/watch?v=oHg5SJYRHA0";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final UrlEntity entity = gson.fromJson(TEST_JSON, UrlEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_URL, entity.url);
-        assertEquals(TEST_DISPLAY_URL, entity.displayUrl);
-        assertEquals(TEST_EXPANDED_URL, entity.expandedUrl);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java
deleted file mode 100644
index bc1d259f..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collections;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-
-@RunWith(RobolectricTestRunner.class)
-public class UserEntitiesTest {
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_userentities.json")));
-            final UserEntities userEntities = gson.fromJson(reader, UserEntities.class);
-            // We simply assert that we parsed it successfully and rely on our other unit tests to
-            // verify parsing of the individual objects.
-            assertNotNull(userEntities.url);
-            assertFalse(userEntities.url.urls.isEmpty());
-
-            assertNotNull(userEntities.description);
-            assertEquals(Collections.EMPTY_LIST, userEntities.description.urls);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
deleted file mode 100644
index 733205f4..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class UserTest {
-
-    private static final long EXPECTED_ID = 795649L;
-    private static final String EXPECTED_NAME = "Ryan Sarver";
-    private static final String EXPECTED_SCREEN_NAME = "rsarver";
-    private static final String EXPECTED_PROFILE_IMAGE_URL_HTTPS
-            = "https://si0.twimg.com/profile_images/1777569006/image1327396628_normal.png";
-    private static final boolean EXPECTED_VERIFIED = false;
-    private static final String EXPECTED_WITHHELD_IN_COUNTRIES = "XY";
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_user.json")));
-            final User user = gson.fromJson(reader, User.class);
-            // We simply assert that we parsed it successfully and rely on our other unit tests to
-            // verify parsing of the individual objects.
-            assertEquals(EXPECTED_ID, user.id);
-            assertEquals(EXPECTED_ID, user.getId());
-            assertEquals(EXPECTED_NAME, user.name);
-            assertTrue(user.entities.url.urls.size() > 0);
-            assertTrue(user.entities.description.urls.isEmpty());
-            assertEquals(EXPECTED_SCREEN_NAME, user.screenName);
-            assertEquals(EXPECTED_PROFILE_IMAGE_URL_HTTPS, user.profileImageUrlHttps);
-            assertEquals(EXPECTED_VERIFIED, user.verified);
-            assertNotNull(user.status);
-            assertNotNull(user.withheldInCountries);
-            assertEquals(1, user.withheldInCountries.size());
-            assertEquals(EXPECTED_WITHHELD_IN_COUNTRIES, user.withheldInCountries.get(0));
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/services/params/GeocodeTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/services/params/GeocodeTest.java
deleted file mode 100644
index 19dc6b7c..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/services/params/GeocodeTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services.params;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class GeocodeTest {
-
-    @Test
-    public void testToString() {
-        final Geocode geocode = new Geocode(1.0, 1.0, 1, Geocode.Distance.MILES);
-        assertEquals("1.0,1.0,1mi", geocode.toString());
-    }
-}
