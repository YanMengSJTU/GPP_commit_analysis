diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
index ec0aa8a3..7a711d31 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
@@ -20,8 +20,6 @@
 import android.test.AndroidTestCase;
 
 import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.services.FavoriteService;
-import com.twitter.sdk.android.core.services.StatusesService;
 
 import java.util.concurrent.ExecutorService;
 
@@ -66,17 +64,17 @@ public void testConstructor_noSession() throws Exception {
         }
     }
 
-    public void testGetService_cachedService() throws Exception {
-        final TwitterApiClient client = newTwitterApiClient();
-        final StatusesService service = client.getService(StatusesService.class);
-        assertSame(service, client.getService(StatusesService.class));
-    }
-
-    public void testGetService_differentServices() throws Exception {
-        final TwitterApiClient client = newTwitterApiClient();
-        final FavoriteService service = client.getService(FavoriteService.class);
-        assertNotSame(service, client.getService(StatusesService.class));
-    }
+//    public void testGetService_cachedService() throws Exception {
+//        final TwitterApiClient client = newTwitterApiClient();
+//        final StatusesService service = client.getService(StatusesService.class);
+//        assertSame(service, client.getService(StatusesService.class));
+//    }
+//
+//    public void testGetService_differentServices() throws Exception {
+//        final TwitterApiClient client = newTwitterApiClient();
+//        final FavoriteService service = client.getService(FavoriteService.class);
+//        assertNotSame(service, client.getService(StatusesService.class));
+//    }
 
     public void testApiClient_cachedGuestAuthClient() throws Exception {
         final TwitterApiClient customApiClient = new TwitterApiClient(newOkHttpClient());
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java
index 9d1e21a7..818d1360 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java
@@ -26,13 +26,6 @@
 import com.twitter.sdk.android.core.models.SafeListAdapter;
 import com.twitter.sdk.android.core.models.SafeMapAdapter;
 import com.twitter.sdk.android.core.services.AccountService;
-import com.twitter.sdk.android.core.services.CollectionService;
-import com.twitter.sdk.android.core.services.ConfigurationService;
-import com.twitter.sdk.android.core.services.FavoriteService;
-import com.twitter.sdk.android.core.services.ListService;
-import com.twitter.sdk.android.core.services.MediaService;
-import com.twitter.sdk.android.core.services.SearchService;
-import com.twitter.sdk.android.core.services.StatusesService;
 
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -126,57 +119,6 @@ public AccountService getAccountService() {
         return getService(AccountService.class);
     }
 
-    /**
-     * @return {@link com.twitter.sdk.android.core.services.FavoriteService} to access TwitterApi
-     */
-    public FavoriteService getFavoriteService() {
-        return getService(FavoriteService.class);
-    }
-
-    /**
-     * @return {@link com.twitter.sdk.android.core.services.StatusesService} to access TwitterApi
-     */
-    public StatusesService getStatusesService() {
-        return getService(StatusesService.class);
-    }
-
-    /**
-     * @return {@link com.twitter.sdk.android.core.services.SearchService} to access TwitterApi
-     */
-    public SearchService getSearchService() {
-        return getService(SearchService.class);
-    }
-
-    /**
-     * @return {@link com.twitter.sdk.android.core.services.ListService} to access TwitterApi
-     */
-    public ListService getListService() {
-        return getService(ListService.class);
-    }
-
-    /**
-     * Use CollectionTimeline directly, CollectionService is expected to change.
-     * @return {@link CollectionService} to access TwitterApi
-     */
-    public CollectionService getCollectionService() {
-        return getService(CollectionService.class);
-    }
-
-    /**
-     * @return {@link com.twitter.sdk.android.core.services.ConfigurationService} to access TwitterApi
-     */
-    public ConfigurationService getConfigurationService() {
-        return getService(ConfigurationService.class);
-    }
-
-    /**
-     * @return {@link com.twitter.sdk.android.core.services.MediaService} to access Twitter API
-     * upload endpoints.
-     */
-    public MediaService getMediaService() {
-        return getService(MediaService.class);
-    }
-
     /**
      * Converts Retrofit style interface into instance for API access
      *
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java
deleted file mode 100644
index a8ef5116..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.models.Card;
-import com.twitter.sdk.android.core.models.ImageValue;
-import com.twitter.sdk.android.core.models.UserValue;
-
-public class VineCardUtils {
-    public static final String PLAYER_CARD = "player";
-    public static final String VINE_CARD = "vine";
-    public static final long VINE_USER_ID = 586671909;
-
-    private VineCardUtils() {}
-
-    public static boolean isVine(Card card) {
-        return (PLAYER_CARD.equals(card.name) || VINE_CARD.equals(card.name)) && isVineUser(card);
-    }
-
-    private static boolean isVineUser(Card card) {
-        final UserValue user = card.bindingValues.get("site");
-        try {
-            if (user != null && Long.parseLong(user.idStr) == VINE_USER_ID) {
-                return true;
-            }
-        } catch (NumberFormatException ex) {
-            return false;
-        }
-
-        return false;
-    }
-
-    public static String getPublisherId(Card card) {
-        final UserValue user_value = card.bindingValues.get("site");
-        return user_value.idStr;
-    }
-
-    public static String getStreamUrl(Card card) {
-        return card.bindingValues.get("player_stream_url");
-    }
-
-    public static ImageValue getImageValue(Card card) {
-        return card.bindingValues.get("player_image");
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java
index a18a1264..800165bd 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java
@@ -80,8 +80,8 @@ Object getValue(JsonObject obj, JsonDeserializationContext context) {
         switch (typeObj.getAsString()) {
             case STRING_TYPE:
                 return context.deserialize(obj.get(TYPE_VALUE_MEMBER), String.class);
-            case IMAGE_TYPE:
-                return context.deserialize(obj.get(IMAGE_VALUE_MEMBER), ImageValue.class);
+//            case IMAGE_TYPE:
+//                return context.deserialize(obj.get(IMAGE_VALUE_MEMBER), ImageValue.class);
             case USER_TYPE:
                 return context.deserialize(obj.get(USER_VALUE_MEMBER), UserValue.class);
             case BOOLEAN_TYPE:
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Image.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Image.java
deleted file mode 100644
index aa52efd9..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Image.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents an image which has been uploaded to Twitter.
- */
-public class Image {
-
-    @SerializedName("w")
-    public final int w;
-
-    @SerializedName("h")
-    public final int h;
-
-    @SerializedName("image_type")
-    public final String imageType;
-
-    public Image(int w, int h, String imageType) {
-        this.w = w;
-        this.h = h;
-        this.imageType = imageType;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ImageValue.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ImageValue.java
deleted file mode 100644
index d51c57ef..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ImageValue.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-public class ImageValue {
-
-    @SerializedName("height")
-    public final int height;
-
-    @SerializedName("width")
-    public final int width;
-
-    @SerializedName("url")
-    public final String url;
-
-    @SerializedName("alt")
-    public final String alt;
-
-    public ImageValue(int height, int width, String url, String alt) {
-        this.height = height;
-        this.width = width;
-        this.url = url;
-        this.alt = alt;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.java
deleted file mode 100644
index 9d83d17c..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents Media which has been uploaded to Twitter upload endpoints.
- */
-public class Media {
-
-    @SerializedName("media_id")
-    public final long mediaId;
-
-    @SerializedName("media_id_string")
-    public final String mediaIdString;
-
-    @SerializedName("size")
-    public final long size;
-
-    @SerializedName("image")
-    public final Image image;
-
-    public Media(long mediaID, String mediaIdString, long size, Image image) {
-        this.mediaId = mediaID;
-        this.mediaIdString = mediaIdString;
-        this.size = size;
-        this.image = image;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Search.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Search.java
deleted file mode 100644
index 0ec2a156..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Search.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-
-/**
- * Collection of relevant Tweets matching a specified query.
- */
-public class Search {
-    @SerializedName("statuses")
-    public final List<Tweet> tweets;
-
-    @SerializedName("search_metadata")
-    public final SearchMetadata searchMetadata;
-
-    private Search() {
-        this(null, null);
-    }
-
-    public Search(List<Tweet> tweets, SearchMetadata searchMetadata) {
-        this.tweets = ModelUtils.getSafeList(tweets);
-        this.searchMetadata = searchMetadata;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TwitterCollection.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TwitterCollection.java
deleted file mode 100644
index 42bf4dbb..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TwitterCollection.java
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-import java.util.Map;
-
-/**
- * TwitterCollection is a new type of timeline you control: you create the collection, give it a
- * name, and select which Tweets to add, either by hand or programmatically using the REST API.
- */
-public class TwitterCollection {
-
-    @SerializedName("objects")
-    public final Content contents;
-
-    @SerializedName("response")
-    public final Metadata metadata;
-
-    public TwitterCollection(Content contents, Metadata metadata) {
-        this.contents = contents;
-        this.metadata = metadata;
-    }
-
-    /**
-     * Contents represent the grouped, decomposed collection objects (tweets, users).
-     */
-    public static final class Content {
-        /**
-         * Represents the mapping from string Tweet ids to user-trimmed Tweets.
-         */
-        @SerializedName("tweets")
-        public final Map<Long, Tweet> tweetMap;
-
-        /**
-         * Represents the mapping from string user ids to Users who authored Tweets or Timelines.
-         */
-        @SerializedName("users")
-        public final Map<Long, User> userMap;
-
-        public Content(Map<Long, Tweet> tweetMap, Map<Long, User> userMap) {
-            this.tweetMap = ModelUtils.getSafeMap(tweetMap);
-            this.userMap = ModelUtils.getSafeMap(userMap);
-        }
-    }
-
-    /**
-     * Metadata lists references to decomposed objects and contextual information (such as cursors)
-     * needed to navigate the boundaries of the collection in subsequent requests.
-     */
-    public static final class Metadata {
-
-        /**
-         * The collection object identifier (e.g. "custom-393773270547177472")
-         */
-        @SerializedName("timeline_id")
-        public final String timelineId;
-
-        @SerializedName("position")
-        public final Position position;
-
-        /**
-         * The ordered set of Collection items.
-         */
-        @SerializedName("timeline")
-        public final List<TimelineItem> timelineItems;
-
-        public Metadata(String timelineId, Position position, List<TimelineItem> timelines) {
-            this.timelineId = timelineId;
-            this.position = position;
-            this.timelineItems = timelines;
-        }
-
-        /**
-         * Position information for navigation.
-         */
-        public static final class Position {
-
-            /**
-             * The exclusive minimum position value of the results (positions will be greater than
-             * this value).
-             */
-            @SerializedName("min_position")
-            public final Long minPosition;
-
-            /**
-             * The inclusive maximum position value of the results (positions will be less than or
-             * equal to this value).
-             */
-            @SerializedName("max_position")
-            public final Long maxPosition;
-
-            public Position(Long maxPosition, Long minPosition) {
-                this.maxPosition = maxPosition;
-                this.minPosition = minPosition;
-            }
-        }
-    }
-
-    /**
-     * Represents an item in a Timeline with a object references.
-     */
-    public static class TimelineItem {
-
-        /**
-         * Represents a reference to a Tweet.
-         */
-        @SerializedName("tweet")
-        public final TweetItem tweetItem;
-
-        public TimelineItem(TweetItem tweetItem) {
-            this.tweetItem = tweetItem;
-        }
-
-        public static final class TweetItem {
-
-            /**
-             * A Tweet id.
-             */
-            @SerializedName("id")
-            public final Long id;
-
-            public TweetItem(Long id) {
-                this.id = id;
-            }
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java
deleted file mode 100644
index e75b05ab..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.TwitterCollection;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.http.Query;
-
-public interface CollectionService {
-
-    /**
-     * Retrieve the identified TwitterCollection, presented as a list of the curated Tweets.
-     * The response structure of this method differs significantly from timelines you may be
-     * used to working with in the Twitter REST API.
-     * Use the response/position hash to navigate through the collection via the min_position
-     * and max_position. The was_truncated attribute will indicate to you whether additional tweets
-     * exist in the collection outside of what was in range of the current request.
-     * @param id The identifier of the Collection to return results for (e.g. "custom-5394878324")
-     * @param count Specifies the number of Tweets to try and retrieve, up to a maximum of 200 per
-     *              distinct request. The value of count is best thought of as an "up to" parameter;
-     *              receiving less results than the specified count does not necessarily mean there
-     *              aren't remaining results to fetch.
-     * @param maxPosition Returns results with a position value less than or equal to the specified
-     *                    position.
-     * @param minPosition Returns results with a position greater than the specified position.
-     */
-    @GET("/1.1/collections/entries.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<TwitterCollection> collection(@Query("id") String id,
-                                       @Query("count") Integer count,
-                                       @Query("max_position") Long maxPosition,
-                                       @Query("min_position") Long minPosition);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java
deleted file mode 100644
index aeb4e0e8..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Configuration;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-
-public interface ConfigurationService {
-    /**
-     * Returns the current configuration used by Twitter including twitter.com slugs which are not
-     * user names, maximum photo resolutions, and t.co URL lengths.
-     */
-    @GET("/1.1/help/configuration.json")
-    Call<Configuration> configuration();
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java
deleted file mode 100644
index 97d55a4c..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-import retrofit2.Call;
-import retrofit2.http.Field;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.GET;
-import retrofit2.http.POST;
-import retrofit2.http.Query;
-
-public interface FavoriteService {
-
-    /**
-     * Returns recent Tweets favorited by the authenticating or specified user,
-     * by default returns 20 tweets.
-     *
-     * @param userId (optional) The ID of the user for whom to return results for.
-     * @param screenName (optional) The screen name of the user for whom to return results for.
-     * @param count (optional) Specifies the number of records to retrieve. Must be less than or
-     *              equal to 200. Defaults to 20.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of Tweets which can be
-     *                accessed through the API. If the limit of Tweets has occured since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param includeEntities (optional) The entities node will be omitted when set to false.
-     */
-    @GET("/1.1/favorites/list.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> list(@Query("user_id") Long userId,
-                           @Query("screen_name") String screenName,
-                           @Query("count") Integer count,
-                           @Query("since_id") String sinceId,
-                           @Query("max_id") String maxId,
-                           @Query("include_entities") Boolean includeEntities);
-
-    /**
-     * Un-favorites the status specified in the ID parameter as the authenticating user. Returns the
-     * un-favorited status in the requested format when successful.
-     * <p>
-     * This process invoked by this method is asynchronous. The immediately returned status may not
-     * indicate the resultant favorited status of the Tweet. A 200 OK response from this method will
-     * indicate whether the intended action was successful or not.
-     *
-     * @param id (required) The numerical ID of the desired status.
-     * @param includeEntities (optional) The entities node will be omitted when set to false.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/favorites/destroy.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> destroy(@Field("id") Long id,
-                        @Field("include_entities") Boolean includeEntities);
-
-    /**
-     * Favorites the status specified in the ID parameter as the authenticating user. Returns the
-     * favorite status when successful.
-     * <p>
-     * This process invoked by this method is asynchronous. The immediately returned status may not
-     * indicate the resultant favorited status of the Tweet. A 200 OK response from this method will
-     * indicate whether the intended action was successful or not.
-     *
-     * @param id (required) The numerical ID of the desired status.
-     * @param includeEntities (optional) The entities node will be omitted when set to false.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/favorites/create.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> create(@Field("id") Long id,
-                       @Field("include_entities") Boolean includeEntities);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java
deleted file mode 100644
index aa30ed87..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.http.Query;
-
-public interface ListService {
-
-    /**
-     * Returns a timeline of tweets authored by members of the specified list. Retweets are included
-     * by default.
-     * @param listId The numerical id of the list.
-     * @param slug You can identify a list by its slug instead of its numerical id. If you decide to
-     *             do so, note that you'll also have to specify the list owner using the owner_id or
-     *             owner_screen_name parameters.
-     * @param ownerScreenName The screen name of the user who owns the list being requested by a
-     *                        slug.
-     * @param ownerId The user ID of the user who owns the list being requested by a slug.
-     * @param sinceId Returns results with an ID greater than (that is, more recent than) the
-     *                specified ID. There are limits to the number of Tweets which can be accessed
-     *                through the API. If the limit of Tweets has occurred since the since_id, the
-     *                since_id will be forced to the oldest ID available.
-     * @param maxId Returns results with an ID less than (that is, older than) or equal to the
-     *              specified ID.
-     * @param count Specifies the number of results to retrieve per "page."
-     * @param includeEntities Entities are ON by default in API 1.1, each Tweet includes a node
-     *                        called "entities." This node offers a variety of metadata about the
-     *                        Tweet in a discrete structure, including: user_mentions, urls, and
-     *                        hashtags.
-     * @param includeRetweets When set to either true, t or 1, the list timeline will contain native
-     *                        retweets (if they exist) in addition to the standard stream of tweets.
-     *                        The output format of retweeted tweets is identical to the
-     *                        representation you see in home_timeline.
-     */
-    @GET("/1.1/lists/statuses.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> statuses(@Query("list_id") Long listId,
-                               @Query("slug") String slug,
-                               @Query("owner_screen_name") String ownerScreenName,
-                               @Query("owner_id") Long ownerId,
-                               @Query("since_id") Long sinceId,
-                               @Query("max_id") Long maxId,
-                               @Query("count") Integer count,
-                               @Query("include_entities") Boolean includeEntities,
-                               @Query("include_rts") Boolean includeRetweets);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java
deleted file mode 100644
index 844cfdea..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Media;
-
-import okhttp3.RequestBody;
-import retrofit2.Call;
-import retrofit2.http.Multipart;
-import retrofit2.http.POST;
-import retrofit2.http.Part;
-
-public interface MediaService {
-
-    /**
-     * Uploads media (images) to Twitter for use in a Tweet or Twitter-hosted Card. You may
-     * upload the raw binary file or its base64 encoded contents. The media and media_data
-     * parameters are mutually exclusive. Media uploads for images are limited to 5MB in file
-     * size.
-     * Supported MIME-types are PNG, JPEG, BMP, WEBP, GIF, and Animated Gif
-     * @param media the raw binary file content to upload. Cannot be used with the mediaData
-     *              parameter.
-     * @param mediaData the base64-encoded file content to upload. Cannot be used with the media
-     *                  parameter
-     */
-    @Multipart
-    @POST("https://upload.twitter.com/1.1/media/upload.json")
-    Call<Media> upload(@Part("media") RequestBody media,
-                @Part("media_data") RequestBody mediaData,
-                @Part("additional_owners") RequestBody additionalOwners);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java
deleted file mode 100644
index dd009fd6..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Search;
-import com.twitter.sdk.android.core.services.params.Geocode;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.http.Query;
-
-public interface SearchService {
-
-    /**
-     * Returns a collection of relevant Tweets matching a specified query.
-     * <p>
-     * Please note that Twitter's search service and, by extension, the Search API is not meant to
-     * be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the
-     * search interface.
-     * <p>
-     * In API v1.1, the response format of the Search API has been improved to return Tweet objects
-     * more similar to the objects you'll find across the REST API and platform. You may need to
-     * tolerate some inconsistencies and variance in perspectival values (fields that pertain to the
-     * perspective of the authenticating user) and embedded user objects.
-     * <p>
-     * To learn how to use Twitter Search effectively, consult our guide to Using the Twitter Search
-     * API. See Working with Timelines to learn best practices for navigating results by since_id
-     * and max_id.
-     *
-     * @param query (required) A UTF-8, URL-encoded search query of 500 characters maximum,
-     *              including operators. Queries may additionally be limited by complexity.
-     * @param geocode (optional) Returns tweets by users located within a given radius of the given
-     *                latitude/longitude. The location is preferentially taking from the Geotagging
-     *                API, but will fall back to their Twitter profile. The parameter value is
-     *                specified by "latitude,longitude,radius", where radius units must be specified
-     *                as either "mi" (miles) or "km" (kilometers). Note that you cannot use the near
-     *                operator via the API to geocode arbitrary locations; however you can use this
-     *                geocode parameter to search near geocodes directly. A maximum of 1,000
-     *                distinct "sub-regions" will be considered when using the radius modifier.
-     * @param lang (optional) Restricts tweets to the given language, given by an ISO 639-1 code.
-     *             Language detection is best-effort.
-     * @param locale (optional) Specify the language of the query you are sending (only ja is
-     *               currently effective). This is intended for language-specific consumers and the
-     *               default should work in the majority of cases.
-     * @param resultType (optional) Specifies what type of search results you would prefer to
-     *                   receive. The current default is "mixed." Valid values include:
-     * mixed: Include both popular and real time results in the response.
-     * recent: return only the most recent results in the response
-     * popular: return only the most popular results in the response.
-     * @param count (optional) The number of tweets to return per page, up to a maximum of 100.
-     *              Defaults to 15. This was formerly the "rpp" parameter in the old Search API.
-     * @param until (optional) Returns tweets generated before the given date. Date should be
-     *              formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as
-     *              far as the date you specify here.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of Tweets which can be
-     *                accessed through the API. If the limit of Tweets has occured since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     */
-    @GET("/1.1/search/tweets.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Search> tweets(@Query("q") String query,
-                        //EncodedQuery protects commas from encode
-                        @Query(value = "geocode", encoded = true) Geocode geocode,
-                        @Query("lang") String lang,
-                        @Query("locale") String locale,
-                        @Query("result_type") String resultType,
-                        @Query("count") Integer count,
-                        @Query("until") String until,
-                        @Query("since_id") Long sinceId,
-                        @Query("max_id") Long maxId,
-                        @Query("include_entities") Boolean includeEntities);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java
deleted file mode 100644
index ef464bb8..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java
+++ /dev/null
@@ -1,363 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-import retrofit2.Call;
-import retrofit2.http.Field;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.GET;
-import retrofit2.http.POST;
-import retrofit2.http.Path;
-import retrofit2.http.Query;
-
-public interface StatusesService {
-
-    /**
-     * Returns most recent mentions (tweets containing a user's @screen_name) for the
-     * authenticating user, by default returns 20 tweets.
-     * <p>
-     * The timeline returned is the equivalent of the one seen when you view your mentions on
-     * twitter.com.
-     * <p>
-     * The Twitter REST API goes back up to 800 tweets.
-     *
-     * @param count (optional) Specifies the number of tweets to try and retrieve, up to a maximum
-     *              of 200. The value of count is best thought of as a limit to the number of tweets
-     *              to return because suspended or deleted content is removed after the count has
-     *              been applied. We include retweets in the count, even if include_rts is not
-     *              supplied. It is recommended you always send include_rts=1 when using this API
-     *              method.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of tweets which can be
-     *                accessed through the API. If the limit of tweets has occurred since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param contributeDetails (optional) This parameter enhances the contributors element of the
-     *                          status response to include the screen_name of the contributor. By
-     *                          default only the user_id of the contributor is included.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     */
-    @GET("/1.1/statuses/mentions_timeline.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> mentionsTimeline(@Query("count") Integer count,
-                                       @Query("since_id") Long sinceId,
-                                       @Query("max_id") Long maxId,
-                                       @Query("trim_user") Boolean trimUser,
-                                       @Query("contributor_details") Boolean contributeDetails,
-                                       @Query("include_entities") Boolean includeEntities);
-
-    /**
-     * Returns a collection of the most recent tweets posted by the user indicated by the
-     * screen_name or user_id parameters.
-     * <p>
-     * User timelines belonging to protected users may only be requested when the authenticated user
-     * either "owns" the timeline or is an approved follower of the owner.
-     * <p>
-     * The timeline returned is the equivalent of the one seen when you view a user's profile on
-     * twitter.com.
-     * <p>
-     * The Twitter REST API goes back up to 3,200 of a user's most recent tweets.
-     * Native retweets of other statuses by the user is included in this total, regardless of
-     * whether include_rts is set to false when requesting this resource.
-     * <p>
-     * Always specify either an user_id or screen_name when requesting a user timeline.
-     *
-     * @param userId (optional) The ID of the user for whom to return results for.
-     * @param screenName (optional) The screen name of the user for whom to return results for.
-     * @param count (optional) Specifies the number of tweets to try and retrieve, up to a maximum
-     *              of 200. The value of count is best thought of as a limit to the number of tweets
-     *              to return because suspended or deleted content is removed after the count has
-     *              been applied. We include retweets in the count, even if include_rts is not
-     *              supplied. It is recommended you always send include_rts=1 when using this API
-     *              method.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of tweets which can be
-     *                accessed through the API. If the limit of tweets has occurred since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param excludeReplies (optional) This parameter will prevent replies from appearing in the
-     *                       returned timeline. Using exclude_replies with the count parameter will
-     *                       mean you will receive up-to count tweets — this is because the count
-     *                       parameter retrieves that many tweets before filtering out retweets and
-     *                       replies. This parameter is only supported for JSON and XML responses.
-     * @param contributeDetails (optional) This parameter enhances the contributors element of the
-     *                          status response to include the screen_name of the contributor. By
-     *                          default only the user_id of the contributor is included.
-     * @param includeRetweets (optional) When set to false, the timeline will strip any native
-     *                        retweets (though they will still count toward both the maximal length
-     *                        of the timeline and the slice selected by the count parameter).
-     *                        Note: If you're using the trim_user parameter in conjunction with
-     *                        include_rts, the retweets will still contain a full user object.
-     */
-    @GET("/1.1/statuses/user_timeline.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> userTimeline(@Query("user_id") Long userId,
-                                   @Query("screen_name") String screenName,
-                                   @Query("count") Integer count,
-                                   @Query("since_id") Long sinceId,
-                                   @Query("max_id") Long maxId,
-                                   @Query("trim_user") Boolean trimUser,
-                                   @Query("exclude_replies") Boolean excludeReplies,
-                                   @Query("contributor_details") Boolean contributeDetails,
-                                   @Query("include_rts") Boolean includeRetweets);
-
-    /**
-     * Returns a collection of the most recent Tweets and retweets posted by the authenticating user
-     * and the users they follow. The home timeline is central to how most users interact with the
-     * Twitter service.
-     * <p>
-     * The Twitter REST API goes back up to 800 tweets on the home timeline.
-     * It is more volatile for users that follow many users or follow users who Tweet frequently.
-     *
-     * @param count (optional) Specifies the number of tweets to try and retrieve, up to a maximum
-     *              of 200. The value of count is best thought of as a limit to the number of tweets
-     *              to return because suspended or deleted content is removed after the count has
-     *              been applied. We include retweets in the count, even if include_rts is not
-     *              supplied. It is recommended you always send include_rts=1 when using this API
-     *              method.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of Tweets which can be
-     *                accessed through the API. If the limit of Tweets has occurred since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param excludeReplies (optional) This parameter will prevent replies from appearing in the
-     *                       returned timeline. Using exclude_replies with the count parameter will
-     *                       mean you will receive up-to count tweets — this is because the count
-     *                       parameter retrieves that many tweets before filtering out retweets and
-     *                       replies. This parameter is only supported for JSON and XML responses.
-     * @param contributeDetails (optional) This parameter enhances the contributors element of the
-     *                          status response to include the screen_name of the contributor. By
-     *                          default only the user_id of the contributor is included.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     */
-    @GET("/1.1/statuses/home_timeline.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> homeTimeline(@Query("count") Integer count,
-                                   @Query("since_id") Long sinceId,
-                                   @Query("max_id") Long maxId,
-                                   @Query("trim_user") Boolean trimUser,
-                                   @Query("exclude_replies") Boolean excludeReplies,
-                                   @Query("contributor_details") Boolean contributeDetails,
-                                   @Query("include_entities") Boolean includeEntities);
-
-    /**
-     * Returns the most recent tweets authored by the authenticating user that have been retweeted
-     * by others. This timeline is a subset of the user's GET statuses / user_timeline.
-     *
-     * @param count (optional) Specifies the number of tweets to try and retrieve, up to a maximum
-     *              of 200. The value of count is best thought of as a limit to the number of tweets
-     *              to return because suspended or deleted content is removed after the count has
-     *              been applied. We include retweets in the count, even if include_rts is not
-     *              supplied. It is recommended you always send include_rts=1 when using this API
-     *              method.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of Tweets which can be
-     *                accessed through the API. If the limit of Tweets has occurred since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     * @param includeUserEntities (optional) The user entities node will not be included when set to
-     *                            false.
-     */
-    @GET("/1.1/statuses/retweets_of_me.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> retweetsOfMe(@Query("count") Integer count,
-                                   @Query("since_id") Long sinceId,
-                                   @Query("max_id") Long maxId,
-                                   @Query("trim_user") Boolean trimUser,
-                                   @Query("include_entities") Boolean includeEntities,
-                                   @Query("include_user_entities") Boolean includeUserEntities);
-
-    /**
-     * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be
-     * embedded within the Tweet.
-     *
-     * @param id (required) The numerical ID of the desired Tweet.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param includeMyRetweet (optional) When set to either true, t or 1, any Tweets returned that
-     *                         have been retweeted by the authenticating user will include an
-     *                         additional current_user_retweet node, containing the ID of the source
-     *                         status for the retweet.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     */
-    @GET("/1.1/statuses/show.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> show(@Query("id") Long id,
-                     @Query("trim_user") Boolean trimUser,
-                     @Query("include_my_retweet") Boolean includeMyRetweet,
-                     @Query("include_entities") Boolean includeEntities);
-
-    /**
-     * Returns fully-hydrated Tweet objects for up to 100 tweets per request, as specified by
-     * comma-separated values passed to the id parameter.
-     * <p>
-     * This method is especially useful to get the details (hydrate) a collection of Tweet IDs.
-     * <p>
-     * GET statuses / show / :id is used to retrieve a single Tweet object.
-     * <p>
-     * There are a few things to note when using this method.
-     * <ul>
-     * <li>You must be following a protected user to be able to see their most recent tweets. If you
-     * don't follow a protected user their status will be removed.</li>
-     * <li>The order of Tweet IDs may not match the order of tweets in the returned array.</li>
-     * <li>If a requested Tweet is unknown or deleted, then that Tweet will not be returned in the
-     * results list, unless the map parameter is set to true, in which case it will be returned with
-     * a value of null.</li>
-     * <li>If none of your lookup criteria matches valid Tweet IDs an empty array will be returned
-     * for map=false.</li>
-     * <li>You are strongly encouraged to use a POST for larger requests.</li>
-     * </ul>
-     *
-     * @param id (required) The comma separated ids of the desired Tweets as a string.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param map (optional) When using the map parameter, tweets that do not exist or cannot be
-     *            viewed by the current user will still have their key represented but with an
-     *            explicitly null value paired with it
-     */
-    @GET("/1.1/statuses/lookup.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> lookup(@Query("id") String id,
-                             @Query("include_entities") Boolean includeEntities,
-                             @Query("trim_user") Boolean trimUser,
-                             @Query("map") Boolean map);
-
-    /**
-     * Updates the authenticating user's current status, also known as tweeting.
-     * <p>
-     * For each update attempt, the update text is compared with the authenticating user's recent
-     * tweets. Any attempt that would result in duplication will be blocked, resulting in a 403
-     * error. Therefore, a user cannot submit the same status twice in a row.
-     * <p>
-     * While not rate limited by the API a user is limited in the number of tweets they can create
-     * at a time. If the number of updates posted by the user reaches the current allowed limit this
-     * method will return an HTTP 403 error.
-     *
-     * @param status (required) The text of your status update, typically up to 140 characters. URL
-     *               encode as necessary. [node:840,title="t.co link wrapping"] may effect character
-     *               counts. There are some special commands in this field to be aware of. For
-     *               instance, preceding a message with "D " or "M " and following it with a screen
-     *               name can create a direct message to that user if the relationship allows for
-     *               it.
-     * @param inReplyToStatusId (optional) The ID of an existing status that the update is in reply
-     *                          to. Note:: This parameter will be ignored unless the author of the
-     *                          Tweet this parameter references is mentioned within the status text.
-     *                          Therefore, you must include @username, where username is the author
-     *                          of the referenced Tweet, within the update.
-     * @param possiblySensitive (optional) If you upload Tweet media that might be considered
-     *                          sensitive content such as nudity, violence, or medical procedures,
-     *                          you should set this value to true. See Media setting and best
-     *                          practices for more context. Defaults to false.
-     * @param latitude (optional) The latitude of the location this Tweet refers to. This parameter
-     *                 will be ignored unless it is inside the range -90.0 to +90.0 (North is
-     *                 positive) inclusive. It will also be ignored if there isn't a corresponding
-     *                 long parameter.
-     * @param longitude (optional) The longitude of the location this Tweet refers to. The valid
-     *                  ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This
-     *                  parameter will be ignored if outside that range, if it is not a number, if
-     *                  geo_enabled is disabled, or if there not a corresponding lat parameter.
-     * @param placeId (optional) A place in the world. These IDs can be retrieved from [node:29].
-     * @param displayCoordinates (optional) Whether or not to put a pin on the exact coordinates a
-     *                           Tweet has been sent from.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param mediaIds A comma separated media ids as a string for uploaded media to associate
-     *                 with a Tweet. You may include up to 4 photos in a Tweet.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/statuses/update.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> update(@Field("status") String status,
-                       @Field("in_reply_to_status_id") Long inReplyToStatusId,
-                       @Field("possibly_sensitive") Boolean possiblySensitive,
-                       @Field("lat") Double latitude,
-                       @Field("long") Double longitude,
-                       @Field("place_id") String placeId,
-                       @Field("display_coordinates") Boolean displayCoordinates,
-                       @Field("trim_user") Boolean trimUser,
-                       @Field("media_ids") String mediaIds);
-
-    /**
-     * Retweets a Tweet. Returns the original Tweet with retweet details embedded.
-     *
-     * @param id (required) The numerical ID of the desired Tweet.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/statuses/retweet/{id}.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> retweet(@Path("id") Long id,
-                        @Field("trim_user") Boolean trimUser);
-
-    /**
-     * Destroys the status specified by the required ID parameter. The authenticating user must be
-     * the author of the specified status. Returns the destroyed status if successful.
-     *
-     * @param id (required) The numerical ID of the desired Tweet.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/statuses/destroy/{id}.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> destroy(@Path("id") Long id,
-                        @Field("trim_user") Boolean trimUser);
-
-    /**
-     * Destroys the retweet specified by the required source Tweet's ID parameter. Returns the
-     * source Tweet if successful.
-     *
-     * @param id (required) The numerical ID of the source Tweet.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/statuses/unretweet/{id}.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> unretweet(@Path("id") Long id,
-                          @Field("trim_user") Boolean trimUser);
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java
index 53808dd2..ca407601 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java
@@ -17,7 +17,6 @@
 
 package com.twitter.sdk.android.core;
 
-import com.twitter.sdk.android.core.internal.VineCardUtils;
 import com.twitter.sdk.android.core.models.BindingValues;
 import com.twitter.sdk.android.core.models.Card;
 import com.twitter.sdk.android.core.models.UserValue;
