diff --git a/.travis.yml b/.travis.yml
index 31ef25a5..39fa4cd9 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -2,8 +2,12 @@ language: android
 jdk: oraclejdk7
 android:
   components:
-    - build-tools-23.0.1
-    - android-22
+    # Workaround to get build tools 23.0.3
+    # https://github.com/travis-ci/travis-ci/issues/5036
+    - tools
+    - platform-tools
+    - build-tools-23.0.3
+    - android-23
     - extra-android-m2repository
 
 script:
diff --git a/ISSUE_TEMPLATE.md b/ISSUE_TEMPLATE.md
new file mode 100644
index 00000000..0d938876
--- /dev/null
+++ b/ISSUE_TEMPLATE.md
@@ -0,0 +1,18 @@
+This form is for reporting issues in the Twitter Kit Android library. For all other developer questions/issues about Twitter or Fabric please use [Twitter Community](https://twittercommunity.com/).
+
+**Bug Report**
+
+We work constantly to fix bugs, tweak functionality and improve device support. Providing detailed feedback will help us to quickly resolve your issue.
+
+* Steps to reproduce the problem (include logs and/or sample code where appropriate):
+* Expected behavior:
+* Android API Version:
+* Android Device (include Model and Manufacturer):
+* Artifact Versions (run `./gradlew :app:dependencies`):
+
+**Feature Request**
+
+We are seeking fix contributions over external feature PRs. If you have anything you'd like to contribute, we recommend discussing it with the core team before writing it.
+
+* Describe feature in as much detail as possible:
+* Include sample usage where appropriate:
\ No newline at end of file
diff --git a/README.md b/README.md
index e55aaed0..ee93f806 100644
--- a/README.md
+++ b/README.md
@@ -28,7 +28,7 @@ repositories {
 }
 
 dependencies {
-  compile('com.twitter.sdk.android:twitter:1.12.1@aar') {
+  compile('com.twitter.sdk.android:twitter:2.3.2@aar') {
     transitive = true
   }
 }
@@ -89,6 +89,7 @@ Follow [@Fabric](http://twitter.com/fabric) on Twitter for updates.
 * [Eric Frohnhoefer](https://twitter.com/ericfrohnhoefer)
 * [Lien Mamitsuka](https://twitter.com/lientm)
 * [Ty Smith](https://twitter.com/tsmith)
+* [Vamsi Kancharla](https://twitter.com/vam_si)
 
 Thanks for assistance and contributions:
 
diff --git a/build.gradle b/build.gradle
index 70177751..acb828a2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,94 +15,27 @@
  *
  */
 
-buildscript {
-    repositories {
-        mavenCentral()
-        maven { url 'https://maven.fabric.io/public' }
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.0'
-        classpath 'io.fabric.gradle.unity:unity:0.0.1'
-        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
-        classpath 'io.fabric.gradle.weaving:projectOrBinary:0.0.1'
-        classpath 'io.fabric.gradle.release:kit-release:0.0.4'
-    }
-}
-
-ext {
-    commonPlugins = new File(projectDir, 'common-plugins.gradle')
-    internalScript = new File(projectDir, 'internal.gradle')
-
-    fabricDir = projectDir.parentFile.parentFile
-    qualityScript = new File(fabricDir, 'quality.gradle')
-    deployScript = new File(fabricDir, 'deploy.gradle')
-    kitsForRelease = [
-            ":tweet-composer": false,
-            ":tweet-ui": false,
-            ":twitter": false,
-            ":twitter-core": false,
-            ":twitter-unity": false
-    ]
-}
+apply from: rootProject.file('dependencies.gradle')
 
 subprojects { Project subproject ->
-    apply from: rootProject.internalScript
-    apply plugin: 'io.fabric.gradle.weaving.projectOrBinary'
+    buildscript {
+        repositories {
+            jcenter()
+            maven { url 'https://maven.fabric.io/public' }
+        }
+        dependencies {
+            classpath dependency.androidGradlePlugin
+            classpath 'io.fabric.gradle.unity:unity:0.0.1'
+        }
+    }
 
     repositories {
-        mavenCentral()
+        jcenter()
         maven { url 'https://maven.fabric.io/public' }
-        mavenLocal()
-    }
-
-    // We need to do this so that by the time any project registers a dependency, that project
-    // already have this property.
-    projectOrBinary {
-        useProject = kitsForRelease.findAll({it.getValue()}).isEmpty() ||
-                kitsForRelease.get(subproject.path)
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.5'
+    gradleVersion = '2.12'
 }
 
-ext {
-    enableTestCodeCoverage = true
-    compileSdkVersion = 22
-    targetSdkVersion = 22
-    buildToolsVersion = '23.0.1'
-    buildNumber = 'dev'
-
-    // Fabric
-    fabric = 'io.fabric.sdk.android:fabric:1.3.+@aar'
-    fabricTest = 'io.fabric.sdk.android:fabric-test:0.0.+@aar'
-    digits = 'com.digits.sdk.android:digits:1.7.+@aar'
-
-    // Sample App
-    leakCanary = 'com.squareup.leakcanary:leakcanary-android:1.3.1'
-    leakCanaryNoOp = 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
-    appCompat = 'com.android.support:appcompat-v7:22.2.0'
-
-    // Tests
-    spoon = 'com.squareup.spoon:spoon-client:1.1.10'
-    espresso = 'com.android.support.test.espresso:espresso-core:2.2'
-    androidTestingSupport = 'com.android.support.test:runner:0.3'
-    junit = 'junit:junit:4.12'
-    junitAddons = 'junit-addons:junit-addons:1.4'
-    robolectric = 'org.robolectric:robolectric:3.0'
-    mockito = 'org.mockito:mockito-core:1.9.5'
-    dexmakerMockito = 'com.google.dexmaker:dexmaker-mockito:1.2'
-    mavenAntTasks = 'org.apache.maven:maven-ant-tasks:2.1.3'
-
-    // Other
-    picasso = 'com.squareup.picasso:picasso:2.5.2'
-    supportV4 = 'com.android.support:support-v4:22.2.0'
-    retrofit = 'com.squareup.retrofit:retrofit:1.8.0'
-    retrofitMock = 'com.squareup.retrofit:retrofit-mock:1.8.0'
-    gson = 'com.google.code.gson:gson:2.2.4'
-    okHttp = 'com.squareup.okhttp:okhttp:2.3.0'
-    okHttpUrlConnection = 'com.squareup.okhttp:okhttp-urlconnection:2.3.0'
-    design = 'com.android.support:design:22.2.0'
-    tweetText = 'com.twitter:twitter-text:1.13.0'
-}
diff --git a/common-plugins.gradle b/common-plugins.gradle
deleted file mode 100644
index 3819f34b..00000000
--- a/common-plugins.gradle
+++ /dev/null
@@ -1,6 +0,0 @@
-applyInternal from: rootProject.deployScript
-applyInternal from: rootProject.qualityScript
-applyInternal plugin: 'io.fabric.gradle.weaving.ArtifactSizePlugin'
-applyInternal plugin: 'io.fabric.gradle.weaving.FabricPropertiesPlugin'
-applyInternal plugin: 'io.fabric.gradle.weaving.DexMethodCountPlugin'
-
diff --git a/dependencies.gradle b/dependencies.gradle
new file mode 100644
index 00000000..3f22fb2f
--- /dev/null
+++ b/dependencies.gradle
@@ -0,0 +1,54 @@
+ext {
+    compileSdkVersion = 23
+    buildToolsVersion = '23.0.3'
+    targetSdkVersion = 22
+
+    minSdkVersion = [
+            twitter        : 14
+    ]
+
+    sourceCompatibilityVersion = JavaVersion.VERSION_1_7
+    targetCompatibilityVersion = JavaVersion.VERSION_1_7
+
+    enableTestCodeCoverage = true
+    buildNumber = 'dev'
+
+    dependency = [
+            // Gradle plugins
+            spoonGradlePlugin          : 'com.stanfy.spoon:spoon-gradle-plugin:1.0.4',
+            androidGradlePlugin        : 'com.android.tools.build:gradle:2.1.2',
+            fabricGradlePlugin         : 'io.fabric.tools:gradle:1.22.0',
+
+            // Fabric
+            fabric                     : 'io.fabric.sdk.android:fabric:1.3.+@aar',
+            fabricTest                 : 'io.fabric.sdk.android:fabric-test:0.0.+@aar',
+            mopub                      : 'com.mopub:mopub-sdk:4.6.0@aar',
+
+            // Sample App
+            leakCanary                 : 'com.squareup.leakcanary:leakcanary-android:1.4',
+            leakCanaryNoOp             : 'com.squareup.leakcanary:leakcanary-android-no-op:1.4',
+            appCompat                  : 'com.android.support:appcompat-v7:23.1.1',
+
+            // Tests
+            spoon                      : 'com.squareup.spoon:spoon-client:1.3.2',
+            espresso                   : 'com.android.support.test.espresso:espresso-core:2.2.2',
+            androidTestingSupport      : 'com.android.support.test:runner:0.5',
+            junit                      : 'junit:junit:4.12',
+            junitAddons                : 'junit-addons:junit-addons:1.4',
+            robolectric                : 'org.robolectric:robolectric:3.0',
+            mockito                    : 'org.mockito:mockito-core:1.9.5',
+            dexmakerMockito            : 'com.google.dexmaker:dexmaker-mockito:1.2',
+
+            // Other
+            picasso                    : 'com.squareup.picasso:picasso:2.5.2',
+            supportV4                  : 'com.android.support:support-v4:23.1.1',
+            retrofit                   : 'com.squareup.retrofit2:retrofit:2.0.2',
+            retrofitMock               : 'com.squareup.retrofit2:retrofit-mock:2.0.2',
+            retrofitGsonConverter      : 'com.squareup.retrofit2:converter-gson:2.0.2',
+            gson                       : 'com.google.code.gson:gson:2.6.1',
+            okHttp                     : 'com.squareup.okhttp3:okhttp:3.2.0',
+            okHttpInterceptor          : 'com.squareup.okhttp3:logging-interceptor:3.2.0',
+            design                     : 'com.android.support:design:23.1.1',
+            tweetText                  : 'com.twitter:twitter-text:1.13.0'
+    ]
+}
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index c4e17207..ed735253 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -20,4 +20,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-all.zip
diff --git a/internal.gradle b/internal.gradle
deleted file mode 100644
index 31ca8613..00000000
--- a/internal.gradle
+++ /dev/null
@@ -1,30 +0,0 @@
-project.ext.applyInternal = { Map arguments ->
-    String plugin = arguments.plugin
-    File scriptFile = arguments.from
-
-    // Apply script
-    if (scriptFile != null) {
-        if (scriptFile.exists()) {
-            project.apply from: scriptFile
-        } else {
-            project.logger.info("Unable to apply plugin script: {}", scriptFile.name)
-        }
-    }
-
-    // Apply plugin
-    if (plugin != null) {
-        try {
-            project.apply plugin: Class.forName(plugin)
-        } catch (ClassNotFoundException e) {
-            project.logger.info("Unable to apply plugin class: {}", plugin)
-        }
-    }
-}
-
-project.ext.internal = { Closure closure ->
-    try {
-        closure()
-    } catch (MissingMethodException e) {
-        project.logger.info("Unable to apply closure: {}", e.method)
-    }
-}
diff --git a/samples/app/build.gradle b/samples/app/build.gradle
index f1d32bfe..c1929d41 100644
--- a/samples/app/build.gradle
+++ b/samples/app/build.gradle
@@ -1,13 +1,7 @@
 buildscript {
-    repositories {
-        mavenCentral()
-        maven { url 'https://maven.fabric.io/public' }
-    }
-
     dependencies {
-        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.0.3'
-        classpath 'com.android.tools.build:gradle:1.3.0'
-        classpath 'io.fabric.tools:gradle:1.19.0'
+        classpath dependency.spoonGradlePlugin
+        classpath dependency.fabricGradlePlugin
     }
 }
 
@@ -23,11 +17,6 @@ apply plugin: 'com.android.application'
 apply plugin: 'io.fabric'
 apply plugin: 'spoon'
 
-repositories {
-    mavenCentral()
-    maven { url 'https://maven.fabric.io/public' }
-}
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -36,7 +25,7 @@ android {
         applicationId "com.example.app.twitter"
         versionCode 1
         versionName "1.0"
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
         targetSdkVersion rootProject.targetSdkVersion
         testInstrumentationRunner "com.example.app.SpoonInstrumentationTestRunner"
     }
@@ -45,11 +34,13 @@ android {
         debug {
             buildConfigField "String", "CONSUMER_KEY", "\"${props.getProperty("twitterConsumerKey")}\""
             buildConfigField "String", "CONSUMER_SECRET", "\"${props.getProperty("twitterConsumerSecret")}\""
+            buildConfigField "String", "MOPUB_AD_UNIT_ID", "\"${props.getProperty("mopubAdUnitId")}\""
         }
         release {
             buildConfigField "String", "CONSUMER_KEY", "\"${props.getProperty("twitterConsumerKey")}\""
             buildConfigField "String", "CONSUMER_SECRET", "\"${props.getProperty("twitterConsumerSecret")}\""
-            minifyEnabled false
+            buildConfigField "String", "MOPUB_AD_UNIT_ID", "\"${props.getProperty("mopubAdUnitId")}\""
+            minifyEnabled true
             proguardFiles getDefaultProguardFile('proguard-android.txt')
         }
     }
@@ -69,20 +60,22 @@ android {
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 }
 
 dependencies {
     compile project(':twitter')
-    compile rootProject.appCompat
-    compile rootProject.design
+    compile project(':twitter-mopub')
+    compile dependency.appCompat
+    compile dependency.design
+    compile dependency.okHttpInterceptor
 
-    debugCompile rootProject.leakCanary
-    releaseCompile rootProject.leakCanaryNoOp
+    debugCompile dependency.leakCanary
+    releaseCompile dependency.leakCanaryNoOp
 
-    androidTestCompile rootProject.spoon
-    androidTestCompile rootProject.espresso
-    androidTestCompile rootProject.androidTestingSupport
+    androidTestCompile dependency.spoon
+    androidTestCompile dependency.espresso
+    androidTestCompile dependency.androidTestingSupport
 }
diff --git a/samples/app/internal-build.gradle b/samples/app/internal-build.gradle
index b7caf275..a671a371 100644
--- a/samples/app/internal-build.gradle
+++ b/samples/app/internal-build.gradle
@@ -1,13 +1,13 @@
 buildscript {
     repositories {
-        mavenCentral()
+        jcenter()
         maven { url 'https://maven.fabric.io/public' }
     }
 
     dependencies {
-        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.0.3'
-        classpath 'com.android.tools.build:gradle:1.3.0'
-        classpath 'io.fabric.tools:gradle:1.19.0'
+        classpath dependency.spoonGradlePlugin
+        classpath dependency.androidGradlePlugin
+        classpath dependency.fabricGradlePlugin
     }
 }
 
@@ -27,11 +27,6 @@ apply plugin: 'com.android.application'
 apply plugin: 'io.fabric'
 apply plugin: 'spoon'
 
-repositories {
-    mavenCentral()
-    maven { url 'https://maven.fabric.io/public' }
-}
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -40,7 +35,7 @@ android {
         applicationId "com.example.app.twitter"
         versionCode 1
         versionName "1.0"
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
         targetSdkVersion rootProject.targetSdkVersion
         testInstrumentationRunner "com.example.app.SpoonInstrumentationTestRunner"
     }
@@ -49,11 +44,13 @@ android {
         debug {
             buildConfigField "String", "CONSUMER_KEY", "\"${props.getProperty("twitterConsumerKey")}\""
             buildConfigField "String", "CONSUMER_SECRET", "\"${props.getProperty("twitterConsumerSecret")}\""
+            buildConfigField "String", "MOPUB_AD_UNIT_ID", "\"${props.getProperty("mopubAdUnitId")}\""
         }
         release {
             buildConfigField "String", "CONSUMER_KEY", "\"${props.getProperty("twitterConsumerKey")}\""
             buildConfigField "String", "CONSUMER_SECRET", "\"${props.getProperty("twitterConsumerSecret")}\""
-            minifyEnabled false
+            buildConfigField "String", "MOPUB_AD_UNIT_ID", "\"${props.getProperty("mopubAdUnitId")}\""
+            minifyEnabled true
             proguardFiles getDefaultProguardFile('proguard-android.txt')
         }
     }
@@ -73,23 +70,26 @@ android {
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 }
 
 dependencies {
     debugCompile project(path: ':sdk:twitter:twitter', configuration: 'debug')
+    debugCompile project(path: ':sdk:twitter:twitter-mopub', configuration: 'debug')
     releaseCompile project(path: ':sdk:twitter:twitter', configuration: 'release')
+    releaseCompile project(path: ':sdk:twitter:twitter-mopub', configuration: 'release')
 
-    compile rootProject.appCompat
-    compile rootProject.design
-    debugCompile rootProject.leakCanary
-    releaseCompile rootProject.leakCanaryNoOp
+    compile dependency.appCompat
+    compile dependency.design
+    compile dependency.okHttpInterceptor
+    debugCompile dependency.leakCanary
+    releaseCompile dependency.leakCanaryNoOp
 
-    androidTestCompile rootProject.spoon
-    androidTestCompile rootProject.espresso
-    androidTestCompile rootProject.androidTestingSupport
+    androidTestCompile dependency.spoon
+    androidTestCompile dependency.espresso
+    androidTestCompile dependency.androidTestingSupport
 }
 
 task setupCi << {
diff --git a/samples/app/lint.xml b/samples/app/lint.xml
index f878d726..5d197bf8 100644
--- a/samples/app/lint.xml
+++ b/samples/app/lint.xml
@@ -17,13 +17,8 @@
   -->
 
 <lint>
-    <issue id="UnusedResources">
-        <ignore path="src/main/res/values/com_crashlytics_export_strings.xml"/>
-    </issue>
-    <issue id="UnusedResources">
-        <ignore path="src/main/res/raw/fabric_logo_large.png"/>
-    </issue>
-    <issue id="TypographyDashes">
-        <ignore path="src/main/res/values/com_crashlytics_export_strings.xml"/>
-    </issue>
+    <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+    <issue id="MissingPermission" severity="ignore"/>
+    <issue id="Registered" severity="ignore"/>
+    <issue id="InvalidPackage" severity="ignore"/>
 </lint>
diff --git a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActivityTest.java b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActivityTest.java
index 4af7042f..acd10021 100644
--- a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActivityTest.java
+++ b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActivityTest.java
@@ -75,7 +75,7 @@ public void testCompactTweetView() throws Exception {
         onView(withId(R.id.jack_compact_tweet)).perform(scrollTo());
         TweetAsserts.assertTweetText(R.id.jack_compact_tweet, EXPECTED_TEXT);
         TweetAsserts.assertTweetTimestamp(R.id.jack_compact_tweet, EXPECTED_TIMESTAMP);
-        TweetAsserts.assertNoVerifiedBadge(R.id.jack_compact_tweet);
+        TweetAsserts.assertNonVerifiedUser(R.id.jack_compact_tweet);
         TweetAsserts.assertActionsEnabled(R.id.jack_compact_tweet);
 
         Spoon.screenshot(activity, TAG);
diff --git a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
index 2637077d..48f91c7a 100644
--- a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
+++ b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
@@ -17,9 +17,18 @@
 
 package com.twitter.sdk.android.tweetui;
 
+import android.graphics.drawable.Drawable;
+import android.support.test.espresso.matcher.BoundedMatcher;
+import android.view.View;
+import android.widget.TextView;
+
 import com.example.app.R;
 
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+
 import java.lang.SuppressWarnings;
+import java.util.Locale;
 
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.assertion.ViewAssertions.*;
@@ -45,23 +54,16 @@ public static void assertTweetTimestamp(int tweetResId, String expected) throws
 
     @SuppressWarnings("PrivateResource")
     public static void assertVerifiedUser(int tweetResId) {
-        onView(allOf(withId(R.id.tw__tweet_author_verified),
+        onView(allOf(withId(R.id.tw__tweet_author_full_name),
                 isDescendantOfA(withId(tweetResId))))
-                .check(matches(isDisplayed()));
+                .check(matches(hasCompoundDrawable(0, 0, R.drawable.tw__ic_tweet_verified, 0)));
     }
 
     @SuppressWarnings("PrivateResource")
     public static void assertNonVerifiedUser(int tweetResId) {
-        onView(allOf(withId(R.id.tw__tweet_author_verified),
-                isDescendantOfA(withId(tweetResId))))
-                .check(matches(not(isDisplayed())));
-    }
-
-    @SuppressWarnings("PrivateResource")
-    public static void assertNoVerifiedBadge(int tweetResId) {
-        onView(allOf(withId(R.id.tw__tweet_author_verified),
+        onView(allOf(withId(R.id.tw__tweet_author_full_name),
                 isDescendantOfA(withId(tweetResId))))
-                .check(doesNotExist());
+                .check(matches(hasCompoundDrawable(0, 0, 0, 0)));
     }
 
     @SuppressWarnings("PrivateResource")
@@ -92,4 +94,38 @@ public static void assertActionsDisabled(int tweetResId) {
                 isDescendantOfA(withId(tweetResId))))
                 .check(matches(not(isDisplayed())));
     }
+
+    public static Matcher<View> hasCompoundDrawable(final int start, final int top,
+                                                         final int end, final int bottom) {
+        return new BoundedMatcher<View, TextView>(TextView.class){
+            @Override
+            public void describeTo(Description description) {
+                final String formatted =
+                        String.format(Locale.getDefault(),
+                                "has Compound Drawable: start=%d, top=%d, end=%d, bottom=%d",
+                                start, top, end, bottom);
+                description.appendText(formatted);
+            }
+
+            @Override
+            public boolean matchesSafely(TextView view) {
+                // We cannot verify the actual drawable, but we can verify one has been set.
+                final Drawable [] drawables = view.getCompoundDrawables();
+                if (drawables[0] != null && start == 0) {
+                    return false;
+                }
+                if (drawables[1] != null && top == 0) {
+                    return false;
+                }
+                if (drawables[2] != null && end == 0) {
+                    return false;
+                }
+                if (drawables[3] != null && bottom == 0) {
+                    return false;
+                }
+
+                return true;
+            }
+        };
+    }
 }
diff --git a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetActivityTest.java b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetActivityTest.java
index aae9893b..0994a455 100644
--- a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetActivityTest.java
+++ b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/XmlTweetActivityTest.java
@@ -96,7 +96,7 @@ public void testCompactTweetView() throws Exception {
         onView(withId(R.id.jack_compact_tweet)).perform(scrollTo());
         TweetAsserts.assertTweetText(R.id.jack_compact_tweet, EXPECTED_TEXT);
         TweetAsserts.assertTweetTimestamp(R.id.jack_compact_tweet, EXPECTED_TIMESTAMP);
-        TweetAsserts.assertNoVerifiedBadge(R.id.jack_compact_tweet);
+        TweetAsserts.assertNonVerifiedUser(R.id.jack_compact_tweet);
         TweetAsserts.assertActionsDisabled(R.id.jack_compact_tweet);
 
         Spoon.screenshot(activity, TAG);
diff --git a/samples/app/src/main/AndroidManifest.xml b/samples/app/src/main/AndroidManifest.xml
index 3cb81eca..d751253d 100644
--- a/samples/app/src/main/AndroidManifest.xml
+++ b/samples/app/src/main/AndroidManifest.xml
@@ -15,11 +15,8 @@
   ~ limitations under the License.
   ~
   -->
-
-<manifest
-    package="com.example.app"
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.app">
 
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
@@ -30,8 +27,8 @@
         android:allowBackup="true"
         android:icon="@drawable/twitter_ic_launcher"
         android:label="@string/twitter_app_name"
+        android:supportsRtl="true"
         android:theme="@style/TwitterSampleTheme">
-
         <activity
             android:name=".TwitterSampleActivity"
             android:label="@string/twitter_app_name">
@@ -77,6 +74,12 @@
         <activity
             android:name=".tweetui.TweetPreviewActivity"
             android:label="@string/kit_tweetui"/>
+        <activity
+            android:name=".tweetui.TweetPojoActivity"
+            android:label="@string/kit_tweetui"/>
+        <activity
+            android:name=".tweetui.RtlTimelineActivity"
+            android:label="@string/kit_tweetui"/>
 
         <receiver
             android:name=".tweetcomposer.TweetSuccessReceiver"
diff --git a/samples/app/src/main/java/com/example/app/SampleApplication.java b/samples/app/src/main/java/com/example/app/SampleApplication.java
index b9ea167c..4d4ff900 100644
--- a/samples/app/src/main/java/com/example/app/SampleApplication.java
+++ b/samples/app/src/main/java/com/example/app/SampleApplication.java
@@ -23,10 +23,15 @@
 
 import io.fabric.sdk.android.DefaultLogger;
 import io.fabric.sdk.android.Fabric;
+import okhttp3.OkHttpClient;
+import okhttp3.logging.HttpLoggingInterceptor;
 
 import com.squareup.leakcanary.LeakCanary;
 import com.twitter.sdk.android.Twitter;
+import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.TwitterSession;
 
 public class SampleApplication extends Application {
     private static final String TAG = SampleApplication.class.getSimpleName();
@@ -57,5 +62,22 @@ public void onCreate() {
                 .build();
 
         Fabric.with(fabric);
+
+        final HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
+        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);
+        final OkHttpClient customClient = new OkHttpClient.Builder()
+                .addInterceptor(loggingInterceptor).build();
+
+        final TwitterSession activeSession = TwitterCore.getInstance()
+                .getSessionManager().getActiveSession();
+
+        final TwitterApiClient customApiClient;
+        if (activeSession != null) {
+            customApiClient = new TwitterApiClient(activeSession, customClient);
+            TwitterCore.getInstance().addApiClient(activeSession, customApiClient);
+        } else {
+            customApiClient = new TwitterApiClient(customClient);
+            TwitterCore.getInstance().addGuestApiClient(customApiClient);
+        }
     }
 }
diff --git a/samples/app/src/main/java/com/example/app/tweetcomposer/TweetComposerMainActivity.java b/samples/app/src/main/java/com/example/app/tweetcomposer/TweetComposerMainActivity.java
index 588444cd..63096e59 100644
--- a/samples/app/src/main/java/com/example/app/tweetcomposer/TweetComposerMainActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetcomposer/TweetComposerMainActivity.java
@@ -103,6 +103,7 @@ void launchComposer(String text, Uri uri) {
         final Intent intent = new ComposerActivity.Builder(TweetComposerMainActivity.this)
                 .session(session)
                 .card(card)
+                .hashtags("#fabric")
                 .createIntent();
         startActivity(intent);
     }
diff --git a/samples/app/src/main/java/com/example/app/tweetui/ListTimelineFragment.java b/samples/app/src/main/java/com/example/app/tweetui/ListTimelineFragment.java
index 4336999c..753b0961 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/ListTimelineFragment.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/ListTimelineFragment.java
@@ -26,14 +26,22 @@
 import com.example.app.R;
 
 import com.example.app.twittercore.TwitterCoreMainActivity;
+import com.google.gson.Gson;
+import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterAuthException;
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.tweetui.BasicTimelineFilter;
+import com.twitter.sdk.android.tweetui.FilterValues;
+import com.twitter.sdk.android.tweetui.TimelineFilter;
 import com.twitter.sdk.android.tweetui.TweetTimelineListAdapter;
 import com.twitter.sdk.android.tweetui.TwitterListTimeline;
 
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
 /**
  * ListTimelineFragment demonstrates a TimelineListAdapter with a TwitterListTimeline.
  */
@@ -63,14 +71,26 @@ public void failure(TwitterException exception) {
         final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .slugWithOwnerScreenName("twitter-bots", "dghubble")
                 .build();
-        final TweetTimelineListAdapter adapter = new TweetTimelineListAdapter.Builder(getActivity())
+
+        final TweetTimelineListAdapter adapter =
+                new TweetTimelineListAdapter.Builder(getActivity())
+                .setTimelineFilter(getBasicTimelineFilter())
                 .setTimeline(timeline)
                 .setViewStyle(R.style.tw__TweetLightWithActionsStyle)
                 .setOnActionCallback(actionCallback)
                 .build();
+
         setListAdapter(adapter);
     }
 
+    private TimelineFilter getBasicTimelineFilter() {
+        final InputStream inputStream = getContext().getResources().
+                openRawResource(R.raw.filter_values);
+        final JsonReader reader = new JsonReader(new InputStreamReader(inputStream));
+        final FilterValues filterValues = new Gson().fromJson(reader, FilterValues.class);
+        return new BasicTimelineFilter(filterValues);
+    }
+
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
diff --git a/samples/app/src/main/java/com/example/app/tweetui/RtlTimelineActivity.java b/samples/app/src/main/java/com/example/app/tweetui/RtlTimelineActivity.java
new file mode 100644
index 00000000..a8f765d5
--- /dev/null
+++ b/samples/app/src/main/java/com/example/app/tweetui/RtlTimelineActivity.java
@@ -0,0 +1,97 @@
+package com.example.app.tweetui;
+
+import android.annotation.TargetApi;
+import android.content.res.Configuration;
+import android.os.Build;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.ListFragment;
+import android.support.v7.app.ActionBar;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.example.app.R;
+import com.twitter.sdk.android.tweetui.TweetTimelineListAdapter;
+import com.twitter.sdk.android.tweetui.UserTimeline;
+
+import java.util.Locale;
+
+public class RtlTimelineActivity extends TweetUiActivity {
+    final Locale deviceLocale = Locale.getDefault();
+
+    @Override
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setTitle(R.string.rtl_timeline);
+        }
+
+        if ( Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            findViewById(android.R.id.content).setLayoutDirection(View.LAYOUT_DIRECTION_RTL);
+        }
+    }
+
+    @Override
+    int getLayout() {
+        return R.layout.activity_frame;
+    }
+
+    @Override
+    Fragment createFragment() {
+        return RtlTimelineFragment.newInstance();
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        final Locale locale = new Locale("ar");
+        Locale.setDefault(locale);
+        final Configuration config = getResources().getConfiguration();
+        config.locale = locale;
+        getResources().updateConfiguration(config, getResources().getDisplayMetrics());
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+
+        Locale.setDefault(deviceLocale);
+        final Configuration config = getResources().getConfiguration();
+        config.locale = deviceLocale;
+        getResources().updateConfiguration(config, getResources().getDisplayMetrics());
+    }
+
+    /**
+     * Fragment showing a Timeline with a list of Rtl Tweets.
+     */
+    public static class RtlTimelineFragment extends ListFragment {
+
+        public static RtlTimelineFragment newInstance() {
+            return new RtlTimelineFragment();
+        }
+
+        @Override
+        public void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+
+            final UserTimeline userTimeline = new UserTimeline.Builder()
+                    .screenName("DubaiAirportsAr")
+                    .build();
+            final TweetTimelineListAdapter adapter = new TweetTimelineListAdapter.Builder(getActivity())
+                    .setTimeline(userTimeline)
+                    .build();
+
+            setListAdapter(adapter);
+        }
+
+        @Override
+        public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                                 Bundle savedInstanceState) {
+            return inflater.inflate(R.layout.tweetui_timeline, container, false);
+        }
+    }
+}
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TweetPojoActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TweetPojoActivity.java
new file mode 100644
index 00000000..91a2f5d7
--- /dev/null
+++ b/samples/app/src/main/java/com/example/app/tweetui/TweetPojoActivity.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.example.app.tweetui;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.ListFragment;
+import android.support.v7.app.ActionBar;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.example.app.R;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.reflect.TypeToken;
+import com.twitter.sdk.android.core.models.SafeListAdapter;
+import com.twitter.sdk.android.core.models.SafeMapAdapter;
+import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.tweetui.FixedTweetTimeline;
+import com.twitter.sdk.android.tweetui.TweetTimelineListAdapter;
+
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+
+import io.fabric.sdk.android.services.common.CommonUtils;
+
+/**
+ * Example code showing how to load Tweets from JSON.
+ */
+public class TweetPojoActivity extends TweetUiActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setTitle(R.string.tweet_pojo);
+        }
+    }
+
+    @Override
+    int getLayout() {
+        return R.layout.activity_frame;
+    }
+
+    @Override
+    Fragment createFragment() {
+        return TweetPojoFragment.newInstance();
+    }
+
+    public static class TweetPojoFragment extends ListFragment {
+
+        public static TweetPojoFragment newInstance() {
+            return new TweetPojoFragment();
+        }
+
+        @Override
+        public void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+
+            // Note: Load should normally be called from background thread.
+            final List<Tweet> tweets = loadTweets();
+            final FixedTweetTimeline fixedTimeline = new FixedTweetTimeline.Builder()
+                    .setTweets(tweets).build();
+            final TweetTimelineListAdapter adapter = new TweetTimelineListAdapter(getActivity(),
+                    fixedTimeline);
+            setListAdapter(adapter);
+        }
+
+        List<Tweet> loadTweets() {
+            final Gson gson = new GsonBuilder()
+                    .registerTypeAdapterFactory(new SafeListAdapter())
+                    .registerTypeAdapterFactory(new SafeMapAdapter())
+                    .create();
+
+            InputStreamReader reader = null;
+            try {
+                reader = new InputStreamReader(getResources().openRawResource(R.raw.tweets));
+                return gson.fromJson(reader, new TypeToken<ArrayList<Tweet>>() {}.getType());
+            }finally {
+                CommonUtils.closeQuietly(reader);
+            }
+        }
+
+        @Override
+        public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                                 Bundle savedInstanceState) {
+            return inflater.inflate(R.layout.tweetui_timeline, container, false);
+        }
+    }
+}
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TweetUiMainActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TweetUiMainActivity.java
index 27621920..bc3e4ae5 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TweetUiMainActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TweetUiMainActivity.java
@@ -93,5 +93,22 @@ public void onClick(View v) {
                 startActivity(new Intent(TweetUiMainActivity.this, TweetPreviewActivity.class));
             }
         });
+
+        final Button tweetPojoButton = (Button) findViewById(
+                R.id.button_tweet_pojo_activity);
+        tweetPojoButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(TweetUiMainActivity.this, TweetPojoActivity.class));
+            }
+        });
+
+        final Button rtlTimelineButton = (Button) findViewById(R.id.button_rtl_timeline_activity);
+        rtlTimelineButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(TweetUiMainActivity.this, RtlTimelineActivity.class));
+            }
+        });
     }
 }
diff --git a/samples/app/src/main/java/com/example/app/tweetui/UserTimelineFragment.java b/samples/app/src/main/java/com/example/app/tweetui/UserTimelineFragment.java
index 59d19929..9ca2d324 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/UserTimelineFragment.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/UserTimelineFragment.java
@@ -23,13 +23,18 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.example.app.BuildConfig;
 import com.example.app.R;
 import com.example.app.twittercore.TwitterCoreMainActivity;
+import com.mopub.nativeads.MoPubAdAdapter;
+import com.mopub.nativeads.RequestParameters;
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterAuthException;
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.mopub.TwitterMoPubAdAdapter;
+import com.twitter.sdk.android.mopub.TwitterStaticNativeAdRenderer;
 import com.twitter.sdk.android.tweetui.TweetTimelineListAdapter;
 import com.twitter.sdk.android.tweetui.UserTimeline;
 
@@ -42,6 +47,8 @@ public static UserTimelineFragment newInstance() {
         return new UserTimelineFragment();
     }
 
+    private MoPubAdAdapter moPubAdAdapter;
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -66,7 +73,13 @@ public void failure(TwitterException exception) {
                 .setViewStyle(R.style.tw__TweetLightWithActionsStyle)
                 .setOnActionCallback(actionCallback)
                 .build();
-        setListAdapter(adapter);
+
+        moPubAdAdapter = new TwitterMoPubAdAdapter(getActivity(), adapter);
+        final TwitterStaticNativeAdRenderer adRenderer = new TwitterStaticNativeAdRenderer();
+        moPubAdAdapter.registerAdRenderer(adRenderer);
+        moPubAdAdapter.loadAds(BuildConfig.MOPUB_AD_UNIT_ID);
+
+        setListAdapter(moPubAdAdapter);
     }
 
     @Override
@@ -74,4 +87,11 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         return inflater.inflate(R.layout.tweetui_timeline, container, false);
     }
+
+    @Override
+    public void onDestroy() {
+        // You must call this or the ad adapter may cause a memory leak
+        moPubAdAdapter.destroy();
+        super.onDestroy();
+    }
 }
diff --git a/samples/app/src/main/res/layout/tweetui_activity_main.xml b/samples/app/src/main/res/layout/tweetui_activity_main.xml
index bc39599c..bdd02cc9 100644
--- a/samples/app/src/main/res/layout/tweetui_activity_main.xml
+++ b/samples/app/src/main/res/layout/tweetui_activity_main.xml
@@ -10,54 +10,71 @@
         android:layout_width="match_parent"
         android:layout_height="wrap_content"/>
 
-    <LinearLayout
-        android:orientation="vertical"
-        android:layout_width="wrap_content"
-        android:layout_height="match_parent"
-        android:layout_gravity="center"
-        android:gravity="center">
-
-        <Button
-            android:id="@+id/button_tweet_preview_activity"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/preview_tweet"/>
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
 
-        <Button
-            android:id="@+id/button_xml_tweet_activity"
-            android:layout_width="wrap_content"
+        <LinearLayout
+            android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:text="@string/xml_tweets_activity"/>
+            android:layout_gravity="center"
+            android:gravity="center"
+            android:orientation="vertical">
 
-        <Button
-            android:id="@+id/button_tweet_activity"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/tweets_activity"/>
+            <Button
+                android:id="@+id/button_tweet_preview_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/preview_tweet" />
 
-        <Button
-            android:id="@+id/button_unique_tweet_activity"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/unqiue_tweets"/>
+            <Button
+                android:id="@+id/button_xml_tweet_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/xml_tweets_activity" />
 
-        <Button
-            android:id="@+id/button_timelines_activity"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/button_timelines_activity"/>
+            <Button
+                android:id="@+id/button_tweet_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/tweets_activity" />
 
-        <Button
-            android:id="@+id/button_fixed_timeline_activity"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/fixed_timeline"/>
+            <Button
+                android:id="@+id/button_unique_tweet_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/unqiue_tweets" />
 
-        <Button
-            android:id="@+id/button_refresh_timeline_activity"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/refresh_timeline"/>
+            <Button
+                android:id="@+id/button_timelines_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/button_timelines_activity" />
+
+            <Button
+                android:id="@+id/button_fixed_timeline_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/fixed_timeline" />
+
+            <Button
+                android:id="@+id/button_refresh_timeline_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/refresh_timeline" />
+
+            <Button
+                android:id="@+id/button_tweet_pojo_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/tweet_pojo" />
+
+            <Button
+                android:id="@+id/button_rtl_timeline_activity"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="@string/rtl_timeline" />
 
-    </LinearLayout>
+        </LinearLayout>
+    </ScrollView>
 </LinearLayout>
diff --git a/samples/app/src/main/res/raw/fabric_logo_large.png b/samples/app/src/main/res/raw/fabric_logo_large.png
deleted file mode 100644
index b8ed96d4..00000000
Binary files a/samples/app/src/main/res/raw/fabric_logo_large.png and /dev/null differ
diff --git a/samples/app/src/main/res/raw/filter_values.json b/samples/app/src/main/res/raw/filter_values.json
new file mode 100644
index 00000000..051f5f72
--- /dev/null
+++ b/samples/app/src/main/res/raw/filter_values.json
@@ -0,0 +1,23 @@
+{
+  "keywords": [
+    "dummy",
+    "darn",
+    "foobar",
+    "tea",
+    "cat"
+  ],
+  "hashtags": [
+    "cookies",
+    "CookiesAreAwesome"
+  ],
+  "handles": [
+    "benward",
+    "vam_si",
+    "ericfrohnhoefer"
+  ],
+  "urls": [
+    "Cookiesareawesome.com",
+    "dontbeevil.com",
+    "beevil.net"
+  ]
+}
\ No newline at end of file
diff --git a/samples/app/src/main/res/raw/tweets.json b/samples/app/src/main/res/raw/tweets.json
new file mode 100644
index 00000000..6f46ff6a
--- /dev/null
+++ b/samples/app/src/main/res/raw/tweets.json
@@ -0,0 +1,399 @@
+[
+  {
+    "contributors": null,
+    "coordinates": null,
+    "created_at": "Mon Apr 11 22:42:04 +0000 2016",
+    "entities": {
+      "hashtags": [
+        {
+          "indices": [
+            58,
+            75
+          ],
+          "text": "userverification"
+        }
+      ],
+      "media": [
+        {
+          "display_url": "pic.twitter.com/X6axD8CQ8G",
+          "expanded_url": "http://twitter.com/digits/status/719654922409521152/photo/1",
+          "id": 719654691236282372,
+          "id_str": "719654691236282372",
+          "indices": [
+            143,
+            144
+          ],
+          "media_url": "http://pbs.twimg.com/tweet_video_thumb/Cfy6IPgVAAQ6jDw.jpg",
+          "media_url_https": "https://pbs.twimg.com/tweet_video_thumb/Cfy6IPgVAAQ6jDw.jpg",
+          "sizes": {
+            "large": {
+              "h": 434,
+              "resize": "fit",
+              "w": 506
+            },
+            "medium": {
+              "h": 434,
+              "resize": "fit",
+              "w": 506
+            },
+            "small": {
+              "h": 292,
+              "resize": "fit",
+              "w": 340
+            },
+            "thumb": {
+              "h": 150,
+              "resize": "crop",
+              "w": 150
+            }
+          },
+          "source_status_id": 719654922409521152,
+          "source_status_id_str": "719654922409521152",
+          "source_user_id": 2847649621,
+          "source_user_id_str": "2847649621",
+          "type": "photo",
+          "url": "https://t.co/X6axD8CQ8G"
+        }
+      ],
+      "symbols": [],
+      "urls": [],
+      "user_mentions": [
+        {
+          "id": 2847649621,
+          "id_str": "2847649621",
+          "indices": [
+            3,
+            10
+          ],
+          "name": "Digits",
+          "screen_name": "digits"
+        }
+      ]
+    },
+    "extended_entities": {
+      "media": [
+        {
+          "display_url": "pic.twitter.com/X6axD8CQ8G",
+          "expanded_url": "http://twitter.com/digits/status/719654922409521152/photo/1",
+          "id": 719654691236282372,
+          "id_str": "719654691236282372",
+          "indices": [
+            143,
+            144
+          ],
+          "media_url": "http://pbs.twimg.com/tweet_video_thumb/Cfy6IPgVAAQ6jDw.jpg",
+          "media_url_https": "https://pbs.twimg.com/tweet_video_thumb/Cfy6IPgVAAQ6jDw.jpg",
+          "sizes": {
+            "large": {
+              "h": 434,
+              "resize": "fit",
+              "w": 506
+            },
+            "medium": {
+              "h": 434,
+              "resize": "fit",
+              "w": 506
+            },
+            "small": {
+              "h": 292,
+              "resize": "fit",
+              "w": 340
+            },
+            "thumb": {
+              "h": 150,
+              "resize": "crop",
+              "w": 150
+            }
+          },
+          "source_status_id": 719654922409521152,
+          "source_status_id_str": "719654922409521152",
+          "source_user_id": 2847649621,
+          "source_user_id_str": "2847649621",
+          "type": "animated_gif",
+          "url": "https://t.co/X6axD8CQ8G",
+          "video_info": {
+            "aspect_ratio": [
+              253,
+              217
+            ],
+            "variants": [
+              {
+                "bitrate": 0,
+                "content_type": "video/mp4",
+                "url": "https://pbs.twimg.com/tweet_video/Cfy6IPgVAAQ6jDw.mp4"
+              }
+            ]
+          }
+        }
+      ]
+    },
+    "favorite_count": 0,
+    "favorited": false,
+    "geo": null,
+    "id": 719656792750358528,
+    "id_str": "719656792750358528",
+    "in_reply_to_screen_name": null,
+    "in_reply_to_status_id": null,
+    "in_reply_to_status_id_str": null,
+    "in_reply_to_user_id": null,
+    "in_reply_to_user_id_str": null,
+    "is_quote_status": false,
+    "lang": "en",
+    "place": null,
+    "possibly_sensitive": false,
+    "retweet_count": 21,
+    "retweeted": false,
+    "retweeted_status": {
+      "contributors": null,
+      "coordinates": null,
+      "created_at": "Mon Apr 11 22:34:38 +0000 2016",
+      "entities": {
+        "hashtags": [
+          {
+            "indices": [
+              46,
+              63
+            ],
+            "text": "userverification"
+          }
+        ],
+        "media": [
+          {
+            "display_url": "pic.twitter.com/X6axD8CQ8G",
+            "expanded_url": "http://twitter.com/digits/status/719654922409521152/photo/1",
+            "id": 719654691236282372,
+            "id_str": "719654691236282372",
+            "indices": [
+              120,
+              143
+            ],
+            "media_url": "http://pbs.twimg.com/tweet_video_thumb/Cfy6IPgVAAQ6jDw.jpg",
+            "media_url_https": "https://pbs.twimg.com/tweet_video_thumb/Cfy6IPgVAAQ6jDw.jpg",
+            "sizes": {
+              "large": {
+                "h": 434,
+                "resize": "fit",
+                "w": 506
+              },
+              "medium": {
+                "h": 434,
+                "resize": "fit",
+                "w": 506
+              },
+              "small": {
+                "h": 292,
+                "resize": "fit",
+                "w": 340
+              },
+              "thumb": {
+                "h": 150,
+                "resize": "crop",
+                "w": 150
+              }
+            },
+            "type": "photo",
+            "url": "https://t.co/X6axD8CQ8G"
+          }
+        ],
+        "symbols": [],
+        "urls": [],
+        "user_mentions": []
+      },
+      "extended_entities": {
+        "media": [
+          {
+            "display_url": "pic.twitter.com/X6axD8CQ8G",
+            "expanded_url": "http://twitter.com/digits/status/719654922409521152/photo/1",
+            "id": 719654691236282372,
+            "id_str": "719654691236282372",
+            "indices": [
+              120,
+              143
+            ],
+            "media_url": "http://pbs.twimg.com/tweet_video_thumb/Cfy6IPgVAAQ6jDw.jpg",
+            "media_url_https": "https://pbs.twimg.com/tweet_video_thumb/Cfy6IPgVAAQ6jDw.jpg",
+            "sizes": {
+              "large": {
+                "h": 434,
+                "resize": "fit",
+                "w": 506
+              },
+              "medium": {
+                "h": 434,
+                "resize": "fit",
+                "w": 506
+              },
+              "small": {
+                "h": 292,
+                "resize": "fit",
+                "w": 340
+              },
+              "thumb": {
+                "h": 150,
+                "resize": "crop",
+                "w": 150
+              }
+            },
+            "type": "animated_gif",
+            "url": "https://t.co/X6axD8CQ8G",
+            "video_info": {
+              "aspect_ratio": [
+                253,
+                217
+              ],
+              "variants": [
+                {
+                  "bitrate": 0,
+                  "content_type": "video/mp4",
+                  "url": "https://pbs.twimg.com/tweet_video/Cfy6IPgVAAQ6jDw.mp4"
+                }
+              ]
+            }
+          }
+        ]
+      },
+      "favorite_count": 32,
+      "favorited": false,
+      "geo": null,
+      "id": 719654922409521152,
+      "id_str": "719654922409521152",
+      "in_reply_to_screen_name": null,
+      "in_reply_to_status_id": null,
+      "in_reply_to_status_id_str": null,
+      "in_reply_to_user_id": null,
+      "in_reply_to_user_id_str": null,
+      "is_quote_status": false,
+      "lang": "en",
+      "place": null,
+      "possibly_sensitive": false,
+      "retweet_count": 21,
+      "retweeted": false,
+      "source": "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>",
+      "text": "1/ Passwords = poor UX. Non-password forms of #userverification are emerging: phone, fingerprint &amp; even the selfie. https://t.co/X6axD8CQ8G",
+      "truncated": false,
+      "user": {
+        "contributors_enabled": false,
+        "created_at": "Wed Oct 08 16:01:38 +0000 2014",
+        "default_profile": true,
+        "default_profile_image": false,
+        "description": "No more passwords. Powerful login that grows your mobile graph.",
+        "entities": {
+          "description": {
+            "urls": []
+          },
+          "url": {
+            "urls": [
+              {
+                "display_url": "digits.com",
+                "expanded_url": "http://digits.com",
+                "indices": [
+                  0,
+                  22
+                ],
+                "url": "http://t.co/BNZoojPX1o"
+              }
+            ]
+          }
+        },
+        "favourites_count": 42,
+        "follow_request_sent": false,
+        "followers_count": 36085,
+        "following": false,
+        "friends_count": 1,
+        "geo_enabled": false,
+        "has_extended_profile": false,
+        "id": 2847649621,
+        "id_str": "2847649621",
+        "is_translation_enabled": false,
+        "is_translator": false,
+        "lang": "en",
+        "listed_count": 80,
+        "location": "San Francisco, CA",
+        "name": "Digits",
+        "notifications": false,
+        "profile_background_color": "C0DEED",
+        "profile_background_image_url": "http://abs.twimg.com/images/themes/theme1/bg.png",
+        "profile_background_image_url_https": "https://abs.twimg.com/images/themes/theme1/bg.png",
+        "profile_background_tile": false,
+        "profile_banner_url": "https://pbs.twimg.com/profile_banners/2847649621/1427216104",
+        "profile_image_url": "http://pbs.twimg.com/profile_images/524974153040793600/SFY-beyr_normal.png",
+        "profile_image_url_https": "https://pbs.twimg.com/profile_images/524974153040793600/SFY-beyr_normal.png",
+        "profile_link_color": "0084B4",
+        "profile_sidebar_border_color": "C0DEED",
+        "profile_sidebar_fill_color": "DDEEF6",
+        "profile_text_color": "333333",
+        "profile_use_background_image": true,
+        "protected": false,
+        "screen_name": "digits",
+        "statuses_count": 223,
+        "time_zone": "Mazatlan",
+        "url": "http://t.co/BNZoojPX1o",
+        "utc_offset": -21600,
+        "verified": true
+      }
+    },
+    "source": "<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>",
+    "text": "RT @digits: 1/ Passwords = poor UX. Non-password forms of #userverification are emerging: phone, fingerprint &amp; even the selfie. https://t.c\u2026",
+    "truncated": false,
+    "user": {
+      "contributors_enabled": false,
+      "created_at": "Thu Oct 16 00:15:43 +0000 2014",
+      "default_profile": true,
+      "default_profile_image": false,
+      "description": "The official Twitter account for Fabric. The tools you need to build the best apps.",
+      "entities": {
+        "description": {
+          "urls": []
+        },
+        "url": {
+          "urls": [
+            {
+              "display_url": "get.fabric.io",
+              "expanded_url": "http://get.fabric.io",
+              "indices": [
+                0,
+                22
+              ],
+              "url": "http://t.co/OZQv5dblxS"
+            }
+          ]
+        }
+      },
+      "favourites_count": 545,
+      "follow_request_sent": false,
+      "followers_count": 134190,
+      "following": false,
+      "friends_count": 7,
+      "geo_enabled": false,
+      "has_extended_profile": false,
+      "id": 2857397298,
+      "id_str": "2857397298",
+      "is_translation_enabled": false,
+      "is_translator": false,
+      "lang": "en",
+      "listed_count": 319,
+      "location": "San Francisco, CA",
+      "name": "Fabric",
+      "notifications": false,
+      "profile_background_color": "C0DEED",
+      "profile_background_image_url": "http://abs.twimg.com/images/themes/theme1/bg.png",
+      "profile_background_image_url_https": "https://abs.twimg.com/images/themes/theme1/bg.png",
+      "profile_background_tile": false,
+      "profile_banner_url": "https://pbs.twimg.com/profile_banners/2857397298/1413997067",
+      "profile_image_url": "http://pbs.twimg.com/profile_images/524967911010471937/wKnU1vK2_normal.png",
+      "profile_image_url_https": "https://pbs.twimg.com/profile_images/524967911010471937/wKnU1vK2_normal.png",
+      "profile_link_color": "0084B4",
+      "profile_sidebar_border_color": "C0DEED",
+      "profile_sidebar_fill_color": "DDEEF6",
+      "profile_text_color": "333333",
+      "profile_use_background_image": true,
+      "protected": false,
+      "screen_name": "fabric",
+      "statuses_count": 1943,
+      "time_zone": "Pacific Time (US & Canada)",
+      "url": "http://t.co/OZQv5dblxS",
+      "utc_offset": -25200,
+      "verified": true
+    }
+  }
+]
diff --git a/samples/app/src/main/res/values/strings.xml b/samples/app/src/main/res/values/strings.xml
index 57092bd7..6cfbf147 100644
--- a/samples/app/src/main/res/values/strings.xml
+++ b/samples/app/src/main/res/values/strings.xml
@@ -18,7 +18,7 @@
 
 <resources xmlns:tools="http://schemas.android.com/tools">
     <string name="twitter_app_name"
-            tools:ignore="UnusedResources">Twitter Sample</string>
+        tools:ignore="UnusedResources">Twitter Sample</string>
     <string name="kit_twittercore">Twitter Core</string>
     <string name="kit_tweetcomposer">Tweet Composer</string>
     <string name="kit_tweetui">Tweet Ui</string>
@@ -38,6 +38,7 @@
     <string name="collection_timeline_title">Collection Timeline</string>
     <string name="list_timeline_title">List Timeline</string>
     <string name="fixed_timeline">Fixed Timeline</string>
+    <string name="rtl_timeline">RTL Timeline</string>
     <string name="refresh_timeline">Refresh Timeline</string>
     <string name="refresh_timeline_title">Search: #twitter</string>
     <string name="button_show_light">Light</string>
@@ -46,5 +47,6 @@
     <string name="tweet_load_error">Failed to load Tweet</string>
     <string name="multi_tweet_view_error">Failed to load tweets</string>
     <string name="timeline_empty">No tweets :(</string>
+    <string name="tweet_pojo">Tweet Pojo</string>
 
 </resources>
diff --git a/settings.gradle b/settings.gradle
index 26e4b29b..3da05967 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -18,6 +18,7 @@
 include ':twitter-core'
 include ':tweet-composer'
 include ':tweet-ui'
+include ':twitter-mopub'
 include ':twitter'
 include ':twitter-unity'
 include ':samples:app'
\ No newline at end of file
diff --git a/tweet-composer/build.gradle b/tweet-composer/build.gradle
index d252d1d4..a84b7810 100644
--- a/tweet-composer/build.gradle
+++ b/tweet-composer/build.gradle
@@ -15,11 +15,8 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 
-apply from: rootProject.commonPlugins
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -27,7 +24,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
     }
 
     buildTypes {
@@ -53,8 +50,8 @@ android {
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 
     testOptions {
@@ -62,30 +59,18 @@ android {
     }
 }
 
-internal {
-    dexMethodCount {
-        packageFilter = "com.twitter.sdk.android.tweetcomposer"
-    }
-}
-
-ext.projectDependencies = [
-        ':twitter-core' : 'com.twitter.sdk.android:twitter-core:+@aar'
-]
-
 dependencies {
-    projectDependencies.each { path, binary ->
-        compile projectOrBinary(path: path, binary: binary)
-    }
+    compile project(':twitter-core')
 
-    compile rootProject.fabric
-    compile rootProject.picasso
-    compile rootProject.tweetText
+    compile dependency.fabric
+    compile dependency.picasso
+    compile dependency.tweetText
 
-    testCompile rootProject.fabricTest
-    testCompile rootProject.mockito
-    testCompile rootProject.junit
-    testCompile rootProject.mavenAntTasks
-    testCompile(rootProject.robolectric) {
+    testCompile dependency.fabricTest
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile dependency.retrofitMock
+    testCompile(dependency.robolectric) {
         exclude group: 'commons-logging', module: 'commons-logging'
         exclude group: 'org.apache.httpcomponents', module: 'httpclient'
     }
diff --git a/tweet-composer/changelog.md b/tweet-composer/changelog.md
index 131a95a7..e81ef9ee 100644
--- a/tweet-composer/changelog.md
+++ b/tweet-composer/changelog.md
@@ -4,6 +4,41 @@
 
 ## Unreleased
 
+## v2.3.1
+
+* Restricted Broadcast Intents to current application to avoid leaking sensitive information.
+
+## v2.3.0
+
+* Updated Twitter Core dependency.
+
+## v2.2.0
+
+* Updated Twitter Core dependency.
+
+## v2.1.0
+
+* Updated Twitter Core dependency to version 2.1.0.
+
+## v2.0.1
+
+* Added translations.
+* Removed pseudo locales from translations.
+
+## v2.0.0
+
+* Dropped support for API versions before API 14 (ICS).
+* Updated Twitter Core dependency
+
+## v1.0.5
+
+* Updated Twitter Core dependency
+
+## v1.0.4
+
+* Updated Fabric Base dependency
+* Updated composer to accept #hashtags
+
 ## v1.0.3
 
 ## v1.0.2
diff --git a/tweet-composer/gradle.properties b/tweet-composer/gradle.properties
index 443741ff..a468a7f7 100644
--- a/tweet-composer/gradle.properties
+++ b/tweet-composer/gradle.properties
@@ -17,7 +17,7 @@
 
 // The to be released version. When releasing, drop -SNAPSHOT. After releasing, bump version
 // number and add back -SNAPSHOT
-version=1.0.3-SNAPSHOT
+version=2.3.2-SNAPSHOT
 version_code=1
 
 pom_name=Android SDK Tweet Composer
diff --git a/tweet-composer/internal-build.gradle b/tweet-composer/internal-build.gradle
index 29278d69..d156921a 100644
--- a/tweet-composer/internal-build.gradle
+++ b/tweet-composer/internal-build.gradle
@@ -15,7 +15,6 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 apply from: rootProject.qualityScript
 apply from: rootProject.deployScript
@@ -23,10 +22,6 @@ apply plugin: io.fabric.gradle.weaving.ArtifactSizePlugin
 apply plugin: io.fabric.gradle.weaving.FabricPropertiesPlugin
 apply plugin: io.fabric.gradle.weaving.DexMethodCountPlugin
 
-repositories {
-    mavenLocal()
-}
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -34,7 +29,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
     }
 
     buildTypes {
@@ -68,8 +63,8 @@ android {
     publishNonDefault true
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 
     testOptions {
@@ -78,7 +73,6 @@ android {
 }
 
 ext.projectDependencies = [
-        ':sdk:fabric:fabric' : 'io.fabric.sdk.android:fabric:+@aar',
         ':sdk:twitter:twitter-core' : 'com.twitter.sdk.android:twitter-core:+aar'
 ]
 
@@ -87,14 +81,14 @@ dependencies {
         debugCompile project(path: path, configuration: 'debug')
         releaseCompile projectOrBinary(path: path, configuration: 'release', binary: binary)
     }
-    compile rootProject.picasso
-    compile rootProject.tweetText
+    compile dependency.picasso
+    compile dependency.tweetText
 
-    testCompile rootProject.fabricTest
-    testCompile rootProject.mockito
-    testCompile rootProject.junit
-    testCompile rootProject.mavenAntTasks
-    testCompile(rootProject.robolectric) {
+    testCompile dependency.fabricTest
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile dependency.retrofitMock
+    testCompile(dependency.robolectric) {
         exclude group: 'commons-logging', module: 'commons-logging'
         exclude group: 'org.apache.httpcomponents', module: 'httpclient'
     }
diff --git a/tweet-composer/lint.xml b/tweet-composer/lint.xml
index d857cfc2..9d1a00a6 100644
--- a/tweet-composer/lint.xml
+++ b/tweet-composer/lint.xml
@@ -23,4 +23,5 @@
         assets for all your app's images." -->
         <ignore path="src/main/res/drawable-xxxhdpi"/>
     </issue>
+    <issue id="InvalidPackage" severity="ignore"/>
 </lint>
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/AppCardView.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/AppCardView.java
index 7e1ecb5c..2d54e376 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/AppCardView.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/AppCardView.java
@@ -17,10 +17,8 @@
 
 package com.twitter.sdk.android.tweetcomposer;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.net.Uri;
-import android.os.Build;
 import android.util.AttributeSet;
 import android.view.ViewGroup;
 import android.widget.ImageView;
@@ -46,7 +44,6 @@ public AppCardView(Context context, AttributeSet attrs) {
         init(context);
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public AppCardView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         init(context);
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerActivity.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerActivity.java
index a5e824b6..3e5180ee 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerActivity.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerActivity.java
@@ -22,6 +22,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 
+import com.twitter.Regex;
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterSession;
 
@@ -29,6 +30,7 @@
     static final String EXTRA_USER_TOKEN = "EXTRA_USER_TOKEN";
     static final String EXTRA_CARD = "EXTRA_CARD";
     static final String EXTRA_THEME = "EXTRA_THEME";
+    static final String EXTRA_HASHTAGS = "EXTRA_HASHTAGS";
     private static final int PLACEHOLDER_ID = -1;
     private static final String PLACEHOLDER_SCREEN_NAME = "";
 
@@ -41,12 +43,13 @@ protected void onCreate(Bundle savedInstanceState) {
         final TwitterSession session = new TwitterSession(token, PLACEHOLDER_ID,
                 PLACEHOLDER_SCREEN_NAME);
         final Card card = (Card) intent.getSerializableExtra(EXTRA_CARD);
+        final String hashtags = intent.getStringExtra(EXTRA_HASHTAGS);
         final int themeResId = intent.getIntExtra(EXTRA_THEME, R.style.ComposerLight);
 
         setTheme(themeResId);
         setContentView(R.layout.tw__activity_composer);
         final ComposerView composerView = (ComposerView) findViewById(R.id.tw__composer_view);
-        new ComposerController(composerView, session, card, new FinisherImpl());
+        new ComposerController(composerView, session, card, hashtags, new FinisherImpl());
     }
 
     interface Finisher {
@@ -66,6 +69,7 @@ public void finish() {
         private TwitterAuthToken token;
         private int themeResId = R.style.ComposerLight;
         private Card card;
+        private String hashtags;
 
         public Builder(Context context) {
             if (context == null) {
@@ -92,6 +96,22 @@ public Builder card(Card card) {
             return this;
         }
 
+        public Builder hashtags(String... hashtags) {
+            if (hashtags == null) return this;
+
+            final StringBuilder sb = new StringBuilder();
+            for (String hashtag : hashtags) {
+                final boolean isValid = Regex.VALID_HASHTAG.matcher(hashtag).find();
+                if (isValid) {
+                    sb.append(" ").append(hashtag);
+                }
+            }
+
+            this.hashtags = sb.length() == 0 ? null : sb.toString();
+
+            return this;
+        }
+
         public Builder darkTheme() {
             themeResId = R.style.ComposerDark;
             return this;
@@ -105,6 +125,7 @@ public Intent createIntent() {
             intent.putExtra(EXTRA_USER_TOKEN, token);
             intent.putExtra(EXTRA_CARD, card);
             intent.putExtra(EXTRA_THEME, themeResId);
+            intent.putExtra(EXTRA_HASHTAGS, hashtags);
             return intent;
         }
     }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerApiClient.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerApiClient.java
index 95f3c8bf..759bb9a7 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerApiClient.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerApiClient.java
@@ -17,51 +17,14 @@
 
 package com.twitter.sdk.android.tweetcomposer;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.twitter.sdk.android.core.AuthenticatedClient;
-import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.models.SafeListAdapter;
-import com.twitter.sdk.android.core.models.SafeMapAdapter;
 import com.twitter.sdk.android.tweetcomposer.internal.CardService;
 
-import java.util.concurrent.ExecutorService;
-
-import javax.net.ssl.SSLSocketFactory;
-
-import retrofit.RestAdapter;
-import retrofit.android.MainThreadExecutor;
-import retrofit.converter.GsonConverter;
-
 class ComposerApiClient extends TwitterApiClient {
-    private static final String CARDS_ENDPOINT = "https://caps.twitter.com";
-    final RestAdapter cardsAdapter;
-
-    ComposerApiClient(TwitterAuthConfig authConfig, Session session,
-                     SSLSocketFactory sslSocketFactory, ExecutorService executorService) {
-        super(session);
-
-        final Gson gson = new GsonBuilder()
-                .registerTypeAdapterFactory(new SafeListAdapter())
-                .registerTypeAdapterFactory(new SafeMapAdapter())
-                .create();
-
-        cardsAdapter = new RestAdapter.Builder()
-                .setClient(new AuthenticatedClient(authConfig, session, sslSocketFactory))
-                .setEndpoint(CARDS_ENDPOINT)
-                .setConverter(new GsonConverter(gson))
-                .setExecutors(executorService, new MainThreadExecutor())
-                .build();
-    }
 
     ComposerApiClient(TwitterSession session) {
-        this(TwitterCore.getInstance().getAuthConfig(), session,
-                TwitterCore.getInstance().getSSLSocketFactory(),
-                TwitterCore.getInstance().getFabric().getExecutorService());
+        super(session);
     }
 
     /**
@@ -75,6 +38,6 @@ StatusesService getComposerStatusesService() {
      * @return {@link com.twitter.sdk.android.tweetcomposer.internal.CardService}
      */
     CardService getCardService() {
-        return getAdapterService(cardsAdapter, CardService.class);
+        return getService(CardService.class);
     }
 }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerController.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerController.java
index 2b2e724d..c5f73484 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerController.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerController.java
@@ -32,20 +32,20 @@
 import com.twitter.sdk.android.core.models.User;
 
 class ComposerController {
-    ComposerView composerView;
-    TwitterSession session;
-    Card card;
-    ComposerActivity.Finisher finisher;
+    final ComposerView composerView;
+    final TwitterSession session;
+    final Card card;
+    final ComposerActivity.Finisher finisher;
     final DependencyProvider dependencyProvider;
 
     ComposerController(final ComposerView composerView, TwitterSession session, Card card,
-                       ComposerActivity.Finisher finisher) {
-        this(composerView, session, card, finisher, new DependencyProvider());
+                       String hashtags, ComposerActivity.Finisher finisher) {
+        this(composerView, session, card, hashtags, finisher, new DependencyProvider());
     }
 
     // testing purposes
     ComposerController(final ComposerView composerView, TwitterSession session, Card card,
-                       ComposerActivity.Finisher finisher,
+                       String hashtags, ComposerActivity.Finisher finisher,
             DependencyProvider dependencyProvider) {
         this.composerView = composerView;
         this.session = session;
@@ -54,16 +54,15 @@
         this.dependencyProvider = dependencyProvider;
 
         composerView.setCallbacks(new ComposerCallbacksImpl());
-        composerView.setTweetText("");
-        composerView.setCursorAtEnd();
+        composerView.setTweetText(hashtags);
         setProfilePhoto();
         setCardView(card);
         dependencyProvider.getScribeClient().impression(card);
     }
 
     void setProfilePhoto() {
-        dependencyProvider.getApiClient(session).getAccountService().verifyCredentials(false, true,
-                new Callback<User>() {
+        dependencyProvider.getApiClient(session).getAccountService().verifyCredentials(false, true)
+                .enqueue(new Callback<User>() {
                     @Override
                     public void success(Result<User> result) {
                         composerView.setProfilePhotoView(result.data);
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerView.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerView.java
index edb41ea7..0f3d1df2 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerView.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerView.java
@@ -17,10 +17,8 @@
 
 package com.twitter.sdk.android.tweetcomposer;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.drawable.ColorDrawable;
-import android.os.Build;
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.util.AttributeSet;
@@ -35,9 +33,11 @@
 
 import com.squareup.picasso.Picasso;
 import com.twitter.sdk.android.core.internal.UserUtils;
-import com.twitter.sdk.android.core.internal.util.ObservableScrollView;
+import com.twitter.sdk.android.tweetcomposer.internal.util.ObservableScrollView;
 import com.twitter.sdk.android.core.models.User;
 
+import java.util.Locale;
+
 public class ComposerView extends LinearLayout {
     ImageView avatarView;
     ImageView closeView;
@@ -63,7 +63,6 @@ public ComposerView(Context context, AttributeSet attrs) {
         init(context);
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public ComposerView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         init(context);
@@ -167,12 +166,8 @@ void setTweetText(String text) {
         tweetEditView.setText(text);
     }
 
-    void setCursorAtEnd() {
-        tweetEditView.setSelection(getTweetText().length());
-    }
-
     void setCharCount(int remainingCount) {
-        charCountView.setText(Integer.toString(remainingCount));
+        charCountView.setText(String.format(Locale.getDefault(), "%d", remainingCount));
     }
 
     void setCharCountTextStyle(int textStyleResId) {
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeConstants.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeConstants.java
index d06e584c..2c3589b2 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeConstants.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeConstants.java
@@ -20,7 +20,10 @@
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
 
-class ScribeConstants {
+final class ScribeConstants {
+
+    private ScribeConstants() {}
+
     // namespaces with client "tfw" become SyndicationClientEvent scribes to /logs/tfw_client_event
     static final String SCRIBE_TFW_CLIENT = "tfw";
 
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/StatusesService.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/StatusesService.java
index fc84c4b3..ba565dae 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/StatusesService.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/StatusesService.java
@@ -17,18 +17,17 @@
 
 package com.twitter.sdk.android.tweetcomposer;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Tweet;
 
-import retrofit.http.Field;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.POST;
+import retrofit2.Call;
+import retrofit2.http.Field;
+import retrofit2.http.FormUrlEncoded;
+import retrofit2.http.POST;
 
 public interface StatusesService {
 
     @FormUrlEncoded
     @POST("/1.1/statuses/update.json")
-    void update(@Field("status") String status,
-                @Field("card_uri") String cardUri,
-                Callback<Tweet> cb);
+    Call<Tweet> update(@Field("status") String status,
+                       @Field("card_uri") String cardUri);
 }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetComposer.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetComposer.java
index 02c24b4f..8067586f 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetComposer.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetComposer.java
@@ -24,6 +24,7 @@
 import android.net.Uri;
 import android.text.TextUtils;
 
+import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TwitterCore;
@@ -36,7 +37,6 @@
 import io.fabric.sdk.android.services.network.UrlUtils;
 
 import java.net.URL;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -54,6 +54,7 @@
     private final ConcurrentHashMap<Session, ComposerApiClient> apiClients;
     String advertisingId;
     SessionManager<TwitterSession> sessionManager;
+    GuestSessionProvider guestSessionProvider;
     private ScribeClient scribeClient;
 
     public TweetComposer() {
@@ -68,18 +69,15 @@ public String getVersion() {
 
     protected boolean onPreExecute() {
         sessionManager = TwitterCore.getInstance().getSessionManager();
+        guestSessionProvider = TwitterCore.getInstance().getGuestSessionProvider();
         return super.onPreExecute();
     }
 
     @Override
     protected Void doInBackground() {
         advertisingId = getIdManager().getAdvertisingId();
-        // Trigger restoration of session
-        sessionManager.getActiveSession();
-        final List<SessionManager<? extends Session>> sessionManagers = new ArrayList<>();
-        sessionManagers.add(sessionManager);
-        scribeClient = new ScribeClientImpl(new DefaultScribeClient(this,
-                KIT_SCRIBE_NAME, sessionManagers, getIdManager()));
+        scribeClient = new ScribeClientImpl(new DefaultScribeClient(this, KIT_SCRIBE_NAME,
+                sessionManager, guestSessionProvider, getIdManager()));
         return null;
     }
 
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
index 7b1703b1..b3066dee 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
@@ -34,7 +34,8 @@
 import java.io.File;
 
 import io.fabric.sdk.android.Fabric;
-import retrofit.mime.TypedFile;
+import okhttp3.MediaType;
+import okhttp3.RequestBody;
 
 public class TweetUploadService extends IntentService {
     public static final String UPLOAD_SUCCESS
@@ -84,7 +85,7 @@ protected void onHandleIntent(Intent intent) {
 
     void uploadTweet(TwitterSession session, final String text) {
         final ComposerApiClient client = dependencyProvider.getComposerApiClient(session);
-        client.getComposerStatusesService().update(text, null, new Callback<Tweet>() {
+        client.getComposerStatusesService().update(text, null).enqueue(new Callback<Tweet>() {
             @Override
             public void success(Result<Tweet> result) {
                 sendSuccessBroadcast(result.data.getId());
@@ -109,18 +110,18 @@ void uploadAppCardTweet(TwitterSession session, final String text, final Card ca
         }
         final File file = new File(path);
         final String mimeType = FileUtils.getMimeType(file);
-        final TypedFile media = new TypedFile(mimeType, file);
+        final RequestBody media = RequestBody.create(MediaType.parse(mimeType), file);
 
-        client.getMediaService().upload(media, null, null, new Callback<Media>() {
+        client.getMediaService().upload(media, null, null).enqueue(new Callback<Media>() {
             @Override
             public void success(Result<Media> result) {
                 final CardData cardData = CardDataFactory.createAppCardData(card,
                         result.data.mediaId, dependencyProvider.getAdvertisingId());
-                client.getCardService().create(cardData, new Callback<CardCreate>() {
+                client.getCardService().create(cardData).enqueue(new Callback<CardCreate>() {
                     @Override
                     public void success(Result<CardCreate> result) {
                         final String cardUri = result.data.cardUri;
-                        client.getComposerStatusesService().update(text, cardUri,
+                        client.getComposerStatusesService().update(text, cardUri).enqueue(
                                 new Callback<Tweet>() {
                                     @Override
                                     public void success(Result<Tweet> result) {
@@ -158,12 +159,14 @@ void fail(TwitterException e) {
     void sendSuccessBroadcast(long tweetId) {
         final Intent intent = new Intent(UPLOAD_SUCCESS);
         intent.putExtra(EXTRA_TWEET_ID, tweetId);
+        intent.setPackage(getApplicationContext().getPackageName());
         sendBroadcast(intent);
     }
 
     void sendFailureBroadcast(Intent original) {
         final Intent intent = new Intent(UPLOAD_FAILURE);
         intent.putExtra(EXTRA_RETRY_INTENT, original);
+        intent.setPackage(getApplicationContext().getPackageName());
         sendBroadcast(intent);
     }
 
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/CardService.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/CardService.java
index 9431679e..c12d2ab0 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/CardService.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/CardService.java
@@ -17,11 +17,10 @@
 
 package com.twitter.sdk.android.tweetcomposer.internal;
 
-import com.twitter.sdk.android.core.Callback;
-
-import retrofit.http.Field;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.POST;
+import retrofit2.Call;
+import retrofit2.http.Field;
+import retrofit2.http.FormUrlEncoded;
+import retrofit2.http.POST;
 
 /**
  * Internal Twitter Cards API.
@@ -32,6 +31,6 @@
      * Internal API for creating Twitter cards.
      */
     @FormUrlEncoded
-    @POST("/v2/cards/create.json")
-    void create(@Field("card_data") CardData data, Callback<CardCreate> cb);
+    @POST("https://caps.twitter.com/v2/cards/create.json")
+    Call<CardCreate> create(@Field("card_data") CardData data);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/util/ObservableScrollView.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.java
similarity index 96%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/util/ObservableScrollView.java
rename to tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.java
index d722e607..bd4aa07f 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/util/ObservableScrollView.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.java
@@ -15,7 +15,7 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal.util;
+package com.twitter.sdk.android.tweetcomposer.internal.util;
 
 import android.annotation.TargetApi;
 import android.content.Context;
diff --git a/tweet-composer/src/main/res/layout/tw__composer_view.xml b/tweet-composer/src/main/res/layout/tw__composer_view.xml
index 78b9b404..df307921 100644
--- a/tweet-composer/src/main/res/layout/tw__composer_view.xml
+++ b/tweet-composer/src/main/res/layout/tw__composer_view.xml
@@ -55,7 +55,7 @@
         android:visibility="invisible"
         style="@style/tw__ComposerDivider"/>
 
-    <com.twitter.sdk.android.core.internal.util.ObservableScrollView
+    <com.twitter.sdk.android.tweetcomposer.internal.util.ObservableScrollView
         android:id="@+id/tw__composer_scroll_view"
         android:layout_width="match_parent"
         android:layout_height="0dp"
@@ -78,7 +78,7 @@
                 android:layout_height="wrap_content"
                 android:layout_margin="@dimen/tw__card_spacing_large"/>
         </LinearLayout>
-    </com.twitter.sdk.android.core.internal.util.ObservableScrollView>
+    </com.twitter.sdk.android.tweetcomposer.internal.util.ObservableScrollView>
 
     <View
         android:id="@+id/tw__composer_toolbar_divider"
diff --git a/tweet-composer/src/main/res/values-ar/strings.xml b/tweet-composer/src/main/res/values-ar/strings.xml
new file mode 100644
index 00000000..bab98141
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ar/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">ماذا يحدث؟</string>
+    <string name="tw__install">تنصيب</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">تغريد</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-bg/strings.xml b/tweet-composer/src/main/res/values-bg/strings.xml
new file mode 100644
index 00000000..1699a6cd
--- /dev/null
+++ b/tweet-composer/src/main/res/values-bg/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Какво става?</string>
+    <string name="tw__install">Инсталиране</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Туитване</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-bn/strings.xml b/tweet-composer/src/main/res/values-bn/strings.xml
new file mode 100644
index 00000000..c5ef7a7d
--- /dev/null
+++ b/tweet-composer/src/main/res/values-bn/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">কী ঘটছে?</string>
+    <string name="tw__install">ইনস্টল করুন</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">টুইট</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-ca/strings.xml b/tweet-composer/src/main/res/values-ca/strings.xml
new file mode 100644
index 00000000..024160fd
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ca/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Què està passant?</string>
+    <string name="tw__install">Instal·la</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tuita</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-cs/strings.xml b/tweet-composer/src/main/res/values-cs/strings.xml
new file mode 100644
index 00000000..f200eb7b
--- /dev/null
+++ b/tweet-composer/src/main/res/values-cs/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Co se právě děje?</string>
+    <string name="tw__install">Instalovat</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweetnout</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-da/strings.xml b/tweet-composer/src/main/res/values-da/strings.xml
new file mode 100644
index 00000000..12dee3cc
--- /dev/null
+++ b/tweet-composer/src/main/res/values-da/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Hvad sker der?</string>
+    <string name="tw__install">Installer</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-de/strings.xml b/tweet-composer/src/main/res/values-de/strings.xml
new file mode 100644
index 00000000..710b715d
--- /dev/null
+++ b/tweet-composer/src/main/res/values-de/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Was gibt’s Neues?</string>
+    <string name="tw__install">Installieren</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Twittern</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-el/strings.xml b/tweet-composer/src/main/res/values-el/strings.xml
new file mode 100644
index 00000000..ee2f0689
--- /dev/null
+++ b/tweet-composer/src/main/res/values-el/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Τι συμβαίνει;</string>
+    <string name="tw__install">Εγκατάσταση</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Γράψτε ένα Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-en-rGB/strings.xml b/tweet-composer/src/main/res/values-en-rGB/strings.xml
new file mode 100644
index 00000000..aca08c0a
--- /dev/null
+++ b/tweet-composer/src/main/res/values-en-rGB/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">What\'s Happening?</string>
+    <string name="tw__install">Install</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-en-rSS/strings.xml b/tweet-composer/src/main/res/values-en-rSS/strings.xml
new file mode 100644
index 00000000..b34b6b4d
--- /dev/null
+++ b/tweet-composer/src/main/res/values-en-rSS/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">[[141545]] What\'s Happening?</string>
+    <string name="tw__install">[[141548]] Install</string>
+    <string name="tw__max_tweet_chars">[[141547]] 140</string>
+    <string name="tw__post_tweet">[[141546]] Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-es/strings.xml b/tweet-composer/src/main/res/values-es/strings.xml
new file mode 100644
index 00000000..b379b89c
--- /dev/null
+++ b/tweet-composer/src/main/res/values-es/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">¿Qué está pasando?</string>
+    <string name="tw__install">Descargar</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Twittear</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-fa/strings.xml b/tweet-composer/src/main/res/values-fa/strings.xml
new file mode 100644
index 00000000..121d48c5
--- /dev/null
+++ b/tweet-composer/src/main/res/values-fa/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">چه اتفاقى در حال رخ دادن است؟</string>
+    <string name="tw__install">نصب</string>
+    <string name="tw__max_tweet_chars">۱۴۰</string>
+    <string name="tw__post_tweet">توييت</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-fi/strings.xml b/tweet-composer/src/main/res/values-fi/strings.xml
new file mode 100644
index 00000000..ad034701
--- /dev/null
+++ b/tweet-composer/src/main/res/values-fi/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Mitä tapahtuu?</string>
+    <string name="tw__install">Asenna</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Twiittaa</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-fr/strings.xml b/tweet-composer/src/main/res/values-fr/strings.xml
new file mode 100644
index 00000000..2f9bda36
--- /dev/null
+++ b/tweet-composer/src/main/res/values-fr/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Que se passe-t-il ?</string>
+    <string name="tw__install">Installer</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-gu/strings.xml b/tweet-composer/src/main/res/values-gu/strings.xml
new file mode 100644
index 00000000..925f05a5
--- /dev/null
+++ b/tweet-composer/src/main/res/values-gu/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">શું ચાલી રહ્યું છ?</string>
+    <string name="tw__install">ઇન્સ્ટૉલ કરો</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">ટ્વીટ કરો</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-hi/strings.xml b/tweet-composer/src/main/res/values-hi/strings.xml
new file mode 100644
index 00000000..993ed1e8
--- /dev/null
+++ b/tweet-composer/src/main/res/values-hi/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">क्या हो रहा है?</string>
+    <string name="tw__install">इंस्टॉल करें</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">ट्वीट करें</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-hr/strings.xml b/tweet-composer/src/main/res/values-hr/strings.xml
new file mode 100644
index 00000000..cc949a4f
--- /dev/null
+++ b/tweet-composer/src/main/res/values-hr/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Što se događa?</string>
+    <string name="tw__install">Instaliraj</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Pošalji Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-hu/strings.xml b/tweet-composer/src/main/res/values-hu/strings.xml
new file mode 100644
index 00000000..4ccac442
--- /dev/null
+++ b/tweet-composer/src/main/res/values-hu/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Mi történik éppen most?</string>
+    <string name="tw__install">Telepítés</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-in/strings.xml b/tweet-composer/src/main/res/values-in/strings.xml
new file mode 100644
index 00000000..ac3cd5c4
--- /dev/null
+++ b/tweet-composer/src/main/res/values-in/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Apa yang Sedang Terjadi?</string>
+    <string name="tw__install">Pasang</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-it/strings.xml b/tweet-composer/src/main/res/values-it/strings.xml
new file mode 100644
index 00000000..1f4550c4
--- /dev/null
+++ b/tweet-composer/src/main/res/values-it/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Cosa c\'è di nuovo?</string>
+    <string name="tw__install">Installa</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Twitta</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-iw/strings.xml b/tweet-composer/src/main/res/values-iw/strings.xml
new file mode 100644
index 00000000..202fb5e8
--- /dev/null
+++ b/tweet-composer/src/main/res/values-iw/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">מה קורה?</string>
+    <string name="tw__install">התקן</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">צייץ</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-ja/strings.xml b/tweet-composer/src/main/res/values-ja/strings.xml
new file mode 100644
index 00000000..31798abd
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ja/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">いまどうしてる?</string>
+    <string name="tw__install">インストール</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">ツイート</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-kn/strings.xml b/tweet-composer/src/main/res/values-kn/strings.xml
new file mode 100644
index 00000000..dbdc6ec6
--- /dev/null
+++ b/tweet-composer/src/main/res/values-kn/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">ಏನು ನಡೆಯುತ್ತಿದೆ?</string>
+    <string name="tw__install">ಸ್ಥಾಪಿಸಿ</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">ಟ್ವೀಟ್ ಮಾಡಿ</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-ko/strings.xml b/tweet-composer/src/main/res/values-ko/strings.xml
new file mode 100644
index 00000000..e615ae02
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ko/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">지금 무슨 일이   일어나고 있나요?</string>
+    <string name="tw__install">설치</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">트윗</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-mr/strings.xml b/tweet-composer/src/main/res/values-mr/strings.xml
new file mode 100644
index 00000000..6aff3713
--- /dev/null
+++ b/tweet-composer/src/main/res/values-mr/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">काय चालू आहे?</string>
+    <string name="tw__install">स्थापित करा</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">ट्विट</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-ms/strings.xml b/tweet-composer/src/main/res/values-ms/strings.xml
new file mode 100644
index 00000000..e381d552
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ms/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Apa Yang Berlaku?</string>
+    <string name="tw__install">Pasang</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-nb/strings.xml b/tweet-composer/src/main/res/values-nb/strings.xml
new file mode 100644
index 00000000..2f4d6b82
--- /dev/null
+++ b/tweet-composer/src/main/res/values-nb/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Hva skjer?</string>
+    <string name="tw__install">Installer</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-nl/strings.xml b/tweet-composer/src/main/res/values-nl/strings.xml
new file mode 100644
index 00000000..746f3693
--- /dev/null
+++ b/tweet-composer/src/main/res/values-nl/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Wat gebeurt er?</string>
+    <string name="tw__install">Installeren</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-pl/strings.xml b/tweet-composer/src/main/res/values-pl/strings.xml
new file mode 100644
index 00000000..916788ad
--- /dev/null
+++ b/tweet-composer/src/main/res/values-pl/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Co się dzieje?</string>
+    <string name="tw__install">Zainstaluj</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-pt/strings.xml b/tweet-composer/src/main/res/values-pt/strings.xml
new file mode 100644
index 00000000..186369c9
--- /dev/null
+++ b/tweet-composer/src/main/res/values-pt/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">O que está acontecendo?</string>
+    <string name="tw__install">Instalar</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweetar</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-ro/strings.xml b/tweet-composer/src/main/res/values-ro/strings.xml
new file mode 100644
index 00000000..f6a58818
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ro/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Ce se întâmplă?</string>
+    <string name="tw__install">Instalează</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Scrie un Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-ru/strings.xml b/tweet-composer/src/main/res/values-ru/strings.xml
new file mode 100644
index 00000000..55490442
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ru/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Что нового?</string>
+    <string name="tw__install">Установить</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Твитнуть</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-sk/strings.xml b/tweet-composer/src/main/res/values-sk/strings.xml
new file mode 100644
index 00000000..89427da2
--- /dev/null
+++ b/tweet-composer/src/main/res/values-sk/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Čo sa deje?</string>
+    <string name="tw__install">Inštalovať</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweetnuť</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-sr/strings.xml b/tweet-composer/src/main/res/values-sr/strings.xml
new file mode 100644
index 00000000..51832c0f
--- /dev/null
+++ b/tweet-composer/src/main/res/values-sr/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Шта се дешава?</string>
+    <string name="tw__install">Инсталирај</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Твитуј</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-sv/strings.xml b/tweet-composer/src/main/res/values-sv/strings.xml
new file mode 100644
index 00000000..dd6110fe
--- /dev/null
+++ b/tweet-composer/src/main/res/values-sv/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Vad händer?</string>
+    <string name="tw__install">Installera</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweeta</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-ta/strings.xml b/tweet-composer/src/main/res/values-ta/strings.xml
new file mode 100644
index 00000000..b8050197
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ta/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">என்ன நடக்கிறது?</string>
+    <string name="tw__install">நிறுவு</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">ட்விட் செய்</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-th/strings.xml b/tweet-composer/src/main/res/values-th/strings.xml
new file mode 100644
index 00000000..33e7e1cc
--- /dev/null
+++ b/tweet-composer/src/main/res/values-th/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">มีอะไรเกิดขึ้น?</string>
+    <string name="tw__install">ติดตั้ง</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">ทวีต</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-tl/strings.xml b/tweet-composer/src/main/res/values-tl/strings.xml
new file mode 100644
index 00000000..a9adbc3b
--- /dev/null
+++ b/tweet-composer/src/main/res/values-tl/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Anong nangyayari?</string>
+    <string name="tw__install">I-install</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Mag-Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-tr/strings.xml b/tweet-composer/src/main/res/values-tr/strings.xml
new file mode 100644
index 00000000..5c12725a
--- /dev/null
+++ b/tweet-composer/src/main/res/values-tr/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Neler oluyor?</string>
+    <string name="tw__install">Yükle</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-uk/strings.xml b/tweet-composer/src/main/res/values-uk/strings.xml
new file mode 100644
index 00000000..74edf47c
--- /dev/null
+++ b/tweet-composer/src/main/res/values-uk/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Що відбувається?</string>
+    <string name="tw__install">Установити</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Твітнути</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-ur/strings.xml b/tweet-composer/src/main/res/values-ur/strings.xml
new file mode 100644
index 00000000..ff211a26
--- /dev/null
+++ b/tweet-composer/src/main/res/values-ur/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">کیا ہو رہا ہے؟</string>
+    <string name="tw__install">انسٹال کریں</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">ٹویٹ</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-vi/strings.xml b/tweet-composer/src/main/res/values-vi/strings.xml
new file mode 100644
index 00000000..af5b130e
--- /dev/null
+++ b/tweet-composer/src/main/res/values-vi/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">Điều gì đang Xảy ra?</string>
+    <string name="tw__install">Cài đặt</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">Tweet</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-zh-rCN/strings.xml b/tweet-composer/src/main/res/values-zh-rCN/strings.xml
new file mode 100644
index 00000000..86b8aabb
--- /dev/null
+++ b/tweet-composer/src/main/res/values-zh-rCN/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">正在发生什么事情？</string>
+    <string name="tw__install">安装</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">推文</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values-zh-rTW/strings.xml b/tweet-composer/src/main/res/values-zh-rTW/strings.xml
new file mode 100644
index 00000000..550e1de5
--- /dev/null
+++ b/tweet-composer/src/main/res/values-zh-rTW/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__composer_hint">有什麼新鮮事？</string>
+    <string name="tw__install">安裝</string>
+    <string name="tw__max_tweet_chars">140</string>
+    <string name="tw__post_tweet">推文</string>
+</resources>
diff --git a/tweet-composer/src/main/res/values/const_strings.xml b/tweet-composer/src/main/res/values/const_strings.xml
index f34d1bde..389a0438 100644
--- a/tweet-composer/src/main/res/values/const_strings.xml
+++ b/tweet-composer/src/main/res/values/const_strings.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <string name="tw__play_store">Google Play</string>
+    <string name="tw__play_store" translatable="false">Google Play</string>
 </resources>
\ No newline at end of file
diff --git a/tweet-composer/src/main/resources/fabric/com.twitter.sdk.android.tweet-composer.properties b/tweet-composer/src/main/resources/fabric/com.twitter.sdk.android.tweet-composer.properties
index 80f9da5e..4aaee7a0 100644
--- a/tweet-composer/src/main/resources/fabric/com.twitter.sdk.android.tweet-composer.properties
+++ b/tweet-composer/src/main/resources/fabric/com.twitter.sdk.android.tweet-composer.properties
@@ -16,5 +16,5 @@
 #
 
 fabric-identifier=com.twitter.sdk.android:tweet-composer
-fabric-version=1.0.3-SNAPSHOT
+fabric-version=2.3.2-SNAPSHOT
 fabric-build-type=source
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/CardDataFactoryTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/CardDataFactoryTest.java
index 08343860..22495f0e 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/CardDataFactoryTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/CardDataFactoryTest.java
@@ -17,8 +17,6 @@
 
 package com.twitter.sdk.android.tweetcomposer;
 
-import android.test.AndroidTestCase;
-
 import com.twitter.sdk.android.tweetcomposer.internal.CardData;
 
 import org.junit.Test;
@@ -26,9 +24,11 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
+import static org.junit.Assert.assertEquals;
+
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
-public class CardDataFactoryTest extends AndroidTestCase {
+public class CardDataFactoryTest {
     private static final String TEST_IMAGE_URI = "image_uri";
     private static final String TEST_APP_NAME = "Example App";
     private static final String TEST_IPHONE_ID = "333903271";
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
index a4ae9688..b4b49202 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
@@ -31,6 +31,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -39,7 +40,7 @@
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
 public class ComposerActivityTest {
-    private static final String TWEET_TEXT = "tweet text";
+    private static final String ANY_HASHTAG = "#hashtag";
     private Context mockContext;
     private TwitterSession mockSession;
     private TwitterAuthToken mockAuthToken;
@@ -126,6 +127,36 @@ public void testBuilder_defaultLightTheme() {
         assertEquals(R.style.ComposerLight, intent.getIntExtra(ComposerActivity.EXTRA_THEME, -1));
     }
 
+    @Test
+    public void testBuilder_emptyArray() {
+        final Intent intent = new ComposerActivity.Builder(mockContext)
+                .session(mockSession)
+                .hashtags(new String[0])
+                .createIntent();
+
+        assertNull(intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS));
+    }
+
+    @Test
+    public void testBuilder_validHashtags() {
+        final Intent intent = new ComposerActivity.Builder(mockContext)
+                .session(mockSession)
+                .hashtags(ANY_HASHTAG)
+                .createIntent();
+
+        assertEquals(" " + ANY_HASHTAG, intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS));
+    }
+
+    @Test
+    public void testBuilder_invalidHashtags() {
+        final Intent intent = new ComposerActivity.Builder(mockContext)
+                .session(mockSession)
+                .hashtags("NotHashtag")
+                .createIntent();
+
+        assertNull(intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS));
+    }
+
     @Test
     public void testBuilderCardData() {
         final Intent intent = new ComposerActivity.Builder(mockContext)
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
index 13e2b426..27749091 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
@@ -19,11 +19,9 @@
 
 import android.content.Context;
 import android.content.Intent;
-import android.test.AndroidTestCase;
 import android.view.View;
 
 import com.twitter.Validator;
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterSession;
@@ -36,6 +34,11 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
+import retrofit2.Call;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -44,10 +47,11 @@
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
-public class ComposerControllerTest extends AndroidTestCase {
+public class ComposerControllerTest {
     private static final String TWEET_TEXT = "some text";
     private static final int REMAINING_CHAR_COUNT = 131;
     private static final int OVERFLOW_REMAINING_CHAR_COUNT = -3;
+    private static final String ANY_HASHTAG = "#hashtag";
     private ComposerController controller;
     private ComposerView mockComposerView;
     private Context mockContext;
@@ -74,6 +78,8 @@ public void setUp() throws Exception {
 
         final TwitterApiClient mockTwitterApiClient = mock(TwitterApiClient.class);
         mockAccountService = mock(AccountService.class);
+        when(mockAccountService.verifyCredentials(any(Boolean.class), any(Boolean.class)))
+                .thenReturn(mock(Call.class));
         when(mockTwitterApiClient.getAccountService()).thenReturn(mockAccountService);
 
         mockCardViewFactory = mock(CardViewFactory.class);
@@ -92,7 +98,7 @@ public void setUp() throws Exception {
     @Test
     public void testComposerController() {
         controller = new ComposerController(mockComposerView, mockTwitterSession, mockCard,
-                mockFinisher, mockDependencyProvider);
+                ANY_HASHTAG, mockFinisher, mockDependencyProvider);
         assertEquals(mockTwitterSession, controller.session);
         // assert that
         // - sets callbacks on the view
@@ -101,19 +107,18 @@ public void testComposerController() {
         // - sets card view in composer
         // - scribes a Tweet Composer impression
         verify(mockComposerView).setCallbacks(any(ComposerController.ComposerCallbacks.class));
-        verify(mockComposerView).setTweetText("");
-        verify(mockComposerView).setCursorAtEnd();
+        verify(mockComposerView).setTweetText(ANY_HASHTAG);
         verify(mockComposerView).setCardView(any(View.class));
         verify(mockDependencyProvider).getApiClient(mockTwitterSession);
         verify(mockDependencyProvider).getCardViewFactory();
-        verify(mockAccountService).verifyCredentials(eq(false), eq(true), any(Callback.class));
+        verify(mockAccountService).verifyCredentials(eq(false), eq(true));
         verify(mockComposerScribeClient).impression(mockCard);
     }
 
     @Test
     public void testTweetTextLength() {
         controller = new ComposerController(mockComposerView, mockTwitterSession, mockCard,
-                mockFinisher, mockDependencyProvider);
+                ANY_HASHTAG, mockFinisher, mockDependencyProvider);
 
         assertEquals(0, controller.tweetTextLength(null));
         assertEquals(0, controller.tweetTextLength(""));
@@ -151,7 +156,7 @@ public void testIsTweetTextOverflow() {
     public void testComposerCallbacksImpl_onTextChangedOk() {
         mockTwitterSession = mock(TwitterSession.class);
         controller = new ComposerController(mockComposerView, mockTwitterSession, mockCard,
-                mockFinisher, mockDependencyProvider);
+                ANY_HASHTAG, mockFinisher, mockDependencyProvider);
         final ComposerController.ComposerCallbacks callbacks
                 = controller.new ComposerCallbacksImpl();
         callbacks.onTextChanged(TWEET_TEXT);
@@ -167,7 +172,7 @@ public void testComposerCallbacksImpl_onTextChangedOverflow() {
                 "longer than 140 characters. This tweet is longer than 140 characters. Overflow." +
                 "Overflow";
         controller = new ComposerController(mockComposerView, mockTwitterSession, mockCard,
-                mockFinisher, mockDependencyProvider);
+                ANY_HASHTAG, mockFinisher, mockDependencyProvider);
         final ComposerController.ComposerCallbacks callbacks
                 = controller.new ComposerCallbacksImpl();
         callbacks.onTextChanged(OVERFLOW_TEXT);
@@ -183,7 +188,7 @@ public void testComposerCallbacksImpl_onTweetPost() {
         when(mockComposerView.getContext()).thenReturn(mockContext);
 
         controller = new ComposerController(mockComposerView, mockTwitterSession, mockCard,
-                mockFinisher, mockDependencyProvider);
+                ANY_HASHTAG, mockFinisher, mockDependencyProvider);
         final ComposerController.ComposerCallbacks callbacks
                 = controller.new ComposerCallbacksImpl();
         callbacks.onTweetPost(TWEET_TEXT);
@@ -205,7 +210,7 @@ public void testComposerCallbacksImpl_onTweetPost() {
     @Test
     public void testComposerCallbacksImpl_onClose() {
         controller = new ComposerController(mockComposerView, mockTwitterSession, mockCard,
-                mockFinisher, mockDependencyProvider);
+                ANY_HASHTAG, mockFinisher, mockDependencyProvider);
         final ComposerController.ComposerCallbacks callbacks
                 = controller.new ComposerCallbacksImpl();
         callbacks.onCloseClick();
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/FileUtilsTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/FileUtilsTest.java
index 5ebd242e..ead62ce7 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/FileUtilsTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/FileUtilsTest.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.tweetcomposer;
 
 import android.net.Uri;
-import android.test.AndroidTestCase;
 import android.webkit.MimeTypeMap;
 
 import org.junit.Before;
@@ -26,19 +25,23 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.internal.ShadowExtractor;
 import org.robolectric.shadows.ShadowMimeTypeMap;
-import static org.robolectric.Shadows.shadowOf;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.io.File;
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
-public class FileUtilsTest extends AndroidTestCase {
+public class FileUtilsTest {
     ShadowMimeTypeMap mimeTypeMap;
 
     @Before
     public void setUp() {
-        final ShadowMimeTypeMap mimeTypeMap = shadowOf(MimeTypeMap.getSingleton());
+        final ShadowMimeTypeMap mimeTypeMap = (ShadowMimeTypeMap) ShadowExtractor
+                .extract(MimeTypeMap.getSingleton());
         mimeTypeMap.addExtensionMimeTypMapping("jpg", "image/jpeg");
         mimeTypeMap.addExtensionMimeTypMapping("jpeg", "image/jpeg");
         mimeTypeMap.addExtensionMimeTypMapping("png", "image/png");
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
index 28792ce5..8d6684be 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.tweetcomposer;
 
 import android.content.Context;
-import android.test.AndroidTestCase;
 
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterSession;
@@ -34,11 +33,13 @@
 import io.fabric.sdk.android.FabricTestUtils;
 import io.fabric.sdk.android.KitStub;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
-public class TweetComposerTest extends AndroidTestCase {
+public class TweetComposerTest {
     private static final String TWITTER_NOT_INIT_ERROR_MSG
             = "Must start Twitter Kit with Fabric.with() first";
     private Context context = RuntimeEnvironment.application;
@@ -46,13 +47,11 @@
 
     @Before
     public void setUp() throws Exception {
-        super.setUp();
         tweetComposer = new TweetComposer();
     }
 
     @After
     public void tearDown() throws Exception {
-        super.tearDown();
         FabricTestUtils.resetFabric();
     }
 
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
index 8349cdda..c4de6514 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
@@ -20,12 +20,8 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
-import android.test.AndroidTestCase;
 
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
@@ -39,8 +35,16 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
+import java.io.IOException;
+
+import okhttp3.RequestBody;
+import retrofit2.Call;
+import retrofit2.mock.Calls;
+
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyLong;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.mock;
@@ -50,23 +54,28 @@
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
-public class TweetUploadServiceTest extends AndroidTestCase {
+public class TweetUploadServiceTest {
     private static final String EXPECTED_TWEET_TEXT = "tweet text";
 
     private Context context;
     private ComposerApiClient mockComposerApiClient;
     private StatusesService mockStatusesService;
-    private ArgumentCaptor<Callback> callbackCaptor;
     private MediaService mockMediaService;
     private TweetUploadService.DependencyProvider mockDependencyProvider;
     private TweetUploadService service;
+    private Tweet tweet;
 
     @Before
     public void setUp() throws Exception {
         context = RuntimeEnvironment.application;
         mockMediaService = mock(MediaService.class);
         mockStatusesService = mock(StatusesService.class);
-        callbackCaptor = ArgumentCaptor.forClass(Callback.class);
+        tweet =  new TweetBuilder().setId(123L).setText(EXPECTED_TWEET_TEXT).build();
+        when(mockMediaService
+                .upload(any(RequestBody.class), any(RequestBody.class), any(RequestBody.class)))
+                .thenReturn(mock(Call.class));
+        when(mockStatusesService.update(anyString(), anyString()))
+                .thenReturn(mock(Call.class));
 
         mockComposerApiClient = mock(ComposerApiClient.class);
         when(mockComposerApiClient.getComposerStatusesService()).thenReturn(mockStatusesService);
@@ -118,21 +127,22 @@ public void testOnHandleIntent_withAppCard() {
 
     @Test
     public void testUploadTweet_success() {
+        when(mockStatusesService.update(anyString(), anyString()))
+                .thenReturn(Calls.response(tweet));
         service.uploadTweet(mock(TwitterSession.class), EXPECTED_TWEET_TEXT);
-        verify(mockStatusesService).update(eq(EXPECTED_TWEET_TEXT), isNull(String.class),
-                callbackCaptor.capture());
-        final Tweet tweet =  new TweetBuilder().setId(123L).build();
-        callbackCaptor.getValue().success(new Result<>(tweet, null));
+
+        verify(mockStatusesService).update(eq(EXPECTED_TWEET_TEXT), isNull(String.class));
         verify(service).sendSuccessBroadcast(eq(123L));
         verify(service).stopSelf();
     }
 
     @Test
     public void testUploadTweet_failure() {
+        when(mockStatusesService.update(anyString(), anyString()))
+                .thenReturn(Calls.<Tweet>failure(new IOException()));
         service.uploadTweet(mock(TwitterSession.class), EXPECTED_TWEET_TEXT);
-        verify(mockStatusesService).update(eq(EXPECTED_TWEET_TEXT), isNull(String.class),
-                callbackCaptor.capture());
-        callbackCaptor.getValue().failure(mock(TwitterException.class));
+
+        verify(mockStatusesService).update(eq(EXPECTED_TWEET_TEXT), isNull(String.class));
         verify(service).sendFailureBroadcast(any(Intent.class));
         verify(service).stopSelf();
     }
@@ -142,7 +152,10 @@ public void testSendSuccessBroadcast() {
         final ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
         service.sendSuccessBroadcast(anyLong());
         verify(service).sendBroadcast(intentCaptor.capture());
-        assertEquals(TweetUploadService.UPLOAD_SUCCESS, intentCaptor.getValue().getAction());
+
+        final Intent capturedIntent = intentCaptor.getValue();
+        assertEquals(TweetUploadService.UPLOAD_SUCCESS, capturedIntent.getAction());
+        assertEquals(RuntimeEnvironment.application.getPackageName(), capturedIntent.getPackage());
     }
 
     @Test
@@ -151,8 +164,11 @@ public void testSendFailureBroadcast() {
         final ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
         service.sendFailureBroadcast(mockIntent);
         verify(service).sendBroadcast(intentCaptor.capture());
-        assertEquals(TweetUploadService.UPLOAD_FAILURE, intentCaptor.getValue().getAction());
+
+        final Intent capturedIntent = intentCaptor.getValue();
+        assertEquals(TweetUploadService.UPLOAD_FAILURE, capturedIntent.getAction());
         assertEquals(mockIntent,
-                intentCaptor.getValue().getParcelableExtra(TweetUploadService.EXTRA_RETRY_INTENT));
+                capturedIntent.getParcelableExtra(TweetUploadService.EXTRA_RETRY_INTENT));
+        assertEquals(RuntimeEnvironment.application.getPackageName(), capturedIntent.getPackage());
     }
 }
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/CardDataTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/CardDataTest.java
index 5911b21f..5e41b63d 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/CardDataTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/CardDataTest.java
@@ -17,8 +17,6 @@
 
 package com.twitter.sdk.android.tweetcomposer.internal;
 
-import android.test.AndroidTestCase;
-
 import com.twitter.sdk.android.tweetcomposer.BuildConfig;
 
 import org.junit.Test;
@@ -26,9 +24,11 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
+import static org.junit.Assert.assertEquals;
+
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
-public class CardDataTest extends AndroidTestCase {
+public class CardDataTest {
     private static final String TEST_CARD = "card_type";
     private static final String TEST_DESCRIPTION = "description";
     private static final String TEST_SITE = "site";
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/util/ObservableScrollViewTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollViewTest.java
similarity index 65%
rename from twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/util/ObservableScrollViewTest.java
rename to tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollViewTest.java
index 129bd300..cf115686 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/util/ObservableScrollViewTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollViewTest.java
@@ -15,18 +15,28 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal.util;
+package com.twitter.sdk.android.tweetcomposer.internal.util;
 
-import android.test.AndroidTestCase;
+import com.twitter.sdk.android.tweetcomposer.BuildConfig;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-public class ObservableScrollViewTest extends AndroidTestCase {
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class ObservableScrollViewTest {
     static final int TEST_SCROLL_X = 10;
 
+    @Test
     public void testOnScrollChanged() {
-        final ObservableScrollView scrollView = new ObservableScrollView(getContext());
+        final ObservableScrollView scrollView =
+                new ObservableScrollView(RuntimeEnvironment.application);
         final ObservableScrollView.ScrollViewListener listener =
                 mock(ObservableScrollView.ScrollViewListener.class);
         scrollView.setScrollViewListener(listener);
diff --git a/tweet-ui/build.gradle b/tweet-ui/build.gradle
index dcae64fe..b7a7fee8 100644
--- a/tweet-ui/build.gradle
+++ b/tweet-ui/build.gradle
@@ -15,11 +15,8 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 
-apply from: rootProject.commonPlugins
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -27,7 +24,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
         consumerProguardFiles 'proguard.txt'
     }
 
@@ -53,8 +50,8 @@ android {
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 
     // Forcibly add debug and the generated "R" files onto the test classpath
@@ -68,41 +65,26 @@ android {
     }
 }
 
-internal {
-    dexMethodCount {
-        packageFilter = "com.twitter.sdk.android.tweetui"
-    }
-}
-
-ext.projectDependencies = [
-        ':twitter-core' : 'com.twitter.sdk.android:twitter-core:+@aar'
-]
-
 dependencies {
-    projectDependencies.each { path, binary ->
-        compile projectOrBinary(path: path, binary: binary)
-    }
-
-    compile rootProject.fabric
-    compile rootProject.picasso
-    compile rootProject.supportV4
+    compile project(':twitter-core')
 
-    debugCompile rootProject.mockito
+    compile dependency.fabric
+    compile dependency.picasso
+    compile dependency.supportV4
 
-    androidTestCompile rootProject.retrofitMock
-    androidTestCompile rootProject.mockito
-    androidTestCompile rootProject.dexmakerMockito
-    androidTestCompile rootProject.fabricTest
+    androidTestCompile dependency.retrofitMock
+    androidTestCompile dependency.mockito
+    androidTestCompile dependency.dexmakerMockito
+    androidTestCompile dependency.fabricTest
 
-    testCompile rootProject.fabricTest
-    testCompile rootProject.mockito
-    testCompile rootProject.junit
-    testCompile rootProject.mavenAntTasks
-    testCompile(rootProject.robolectric) {
+    testCompile dependency.fabricTest
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile(dependency.robolectric) {
         exclude group: 'commons-logging', module: 'commons-logging'
         exclude group: 'org.apache.httpcomponents', module: 'httpclient'
     }
-    testCompile (rootProject.junitAddons) {
+    testCompile (dependency.junitAddons) {
         transitive = false
     }
 }
diff --git a/tweet-ui/changelog.md b/tweet-ui/changelog.md
index 26337fb9..765bca26 100644
--- a/tweet-ui/changelog.md
+++ b/tweet-ui/changelog.md
@@ -1,9 +1,75 @@
 # Android SDK TweetUi Kit changelog
-
 *Non-trivial pull requests should include an entry below. Entries must be suitable for inclusion in public-facing materials such as release notes and blog posts. Keep them short, sweet, and in the past tense. New entries go on top. When merging to deploy, add the version number and date.*
 
 ## Unreleased
 
+## v2.3.2
+
+* Added ability to set geocode for SearchTimeline builder.
+* Videos less than 6.5 seconds now loop.
+* Fixed issue where quote Tweets with media showed both media and quote Tweet. Only media should be shown if both are included.
+
+## v2.3.1
+
+* Improved RTL mirroring for Tweet views.
+* Dates are now properly localized for non-English locales.
+
+## v2.3.0
+
+* Added support for timeline filtering.
+
+## v2.2.0
+
+* Added support for quote Tweet display.
+
+## v2.1.1
+
+* Fixed UnsupportedOperationException when rendering multiple photos API 17 and below.
+
+## v2.1.0
+
+* Added multi-photo support for inline views and the fullscreen gallery view.
+* Updated Twitter Core dependency to version 2.1.0.
+
+## v2.0.1
+
+* Removed pseudo locales from translations.
+
+## v2.0.0
+
+* Dropped support for API versions before API 14 (ICS).
+* Updated Twitter Core dependency.
+* Removed previously deprecated methods and classes.
+* Added contentDescription for media based on altText field.
+
+## v1.11.1
+
+* Allow non-filtered search results for SearchTimeline
+
+## v1.11.0
+
+* Added support for Vine in Tweets
+
+## v1.10.3
+
+* Updated Twitter Core dependency
+
+## v1.10.2
+
+* Updated Fabric Base dependency
+
+## v1.10.1
+
+* Added HLS playback support. Removed WebM playback support.
+* Added loading and buffering spinners to video player.
+* Only show play button and media badge if playback is supported.
+
+## v1.10.0
+
+* Added click listeners on Tweet views for URL and media clicks.
+* Fixed click listeners on Tweet text so multiple events are not generated.
+* Fixed JavaDocs.
+
 ## v1.9.1
 
 * Added gif or duration badge to media view.
diff --git a/tweet-ui/gradle.properties b/tweet-ui/gradle.properties
index 03ebab08..b3a44cc5 100644
--- a/tweet-ui/gradle.properties
+++ b/tweet-ui/gradle.properties
@@ -17,7 +17,7 @@
 
 // The to be released version. When releasing, drop -SNAPSHOT. After releasing, bump version
 // number and add back -SNAPSHOT
-version=1.9.1-SNAPSHOT
+version=2.3.2-SNAPSHOT
 version_code=1
 
 pom_name=Android SDK Tweet Ui
diff --git a/tweet-ui/internal-build.gradle b/tweet-ui/internal-build.gradle
index 50a6f57a..a137abe2 100644
--- a/tweet-ui/internal-build.gradle
+++ b/tweet-ui/internal-build.gradle
@@ -15,7 +15,6 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 apply from: rootProject.qualityScript
 apply from: rootProject.deployScript
@@ -23,11 +22,6 @@ apply plugin: io.fabric.gradle.weaving.ArtifactSizePlugin
 apply plugin: io.fabric.gradle.weaving.FabricPropertiesPlugin
 apply plugin: io.fabric.gradle.weaving.DexMethodCountPlugin
 
-repositories {
-    mavenLocal()
-    maven { url 'https://maven.fabric.io/public' }
-}
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -35,7 +29,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
         consumerProguardFiles 'proguard.txt'
     }
 
@@ -70,8 +64,8 @@ android {
     publishNonDefault true
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 
     // Forcibly add debug and the generated "R" files onto the test classpath
@@ -86,7 +80,6 @@ android {
 }
 
 ext.projectDependencies = [
-        ':sdk:fabric:fabric' : 'io.fabric.sdk.android:fabric:+@aar',
         ':sdk:twitter:twitter-core' : 'com.twitter.sdk.android:twitter-core:+@aar'
 ]
 
@@ -96,22 +89,22 @@ dependencies {
         releaseCompile projectOrBinary(path: path, configuration: 'release', binary: binary)
     }
 
-    compile rootProject.picasso
-    compile rootProject.supportV4
+    compile dependency.picasso
+    compile dependency.supportV4
 
-    androidTestCompile rootProject.retrofitMock
-    androidTestCompile rootProject.mockito
-    androidTestCompile rootProject.dexmakerMockito
+    androidTestCompile dependency.retrofitMock
+    androidTestCompile dependency.mockito
+    androidTestCompile dependency.dexmakerMockito
+    androidTestCompile dependency.fabricTest
 
-    testCompile rootProject.fabricTest
-    testCompile rootProject.mockito
-    testCompile rootProject.junit
-    testCompile rootProject.mavenAntTasks
-    testCompile(rootProject.robolectric) {
+    testCompile dependency.fabricTest
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile(dependency.robolectric) {
         exclude group: 'commons-logging', module: 'commons-logging'
         exclude group: 'org.apache.httpcomponents', module: 'httpclient'
     }
-    testCompile (rootProject.junitAddons) {
+    testCompile (dependency.junitAddons) {
         transitive = false
     }
 }
diff --git a/tweet-ui/lint.xml b/tweet-ui/lint.xml
index 4857e0c1..9523b8b9 100644
--- a/tweet-ui/lint.xml
+++ b/tweet-ui/lint.xml
@@ -28,10 +28,6 @@
     <issue id="MissingQuantity" severity="ignore" />
     <issue id="ImpliedQuantity" severity="ignore" />
     <issue id="UnusedQuantity" severity="ignore" />
-    <!--Ignore support library point updates unless there are useful fixes or features. Any updates
-    should be communicated to developers since they require downloading new libs from the manager-->
-    <issue id="GradleDependency" severity="ignore" />
-    <issue id="WrongRegion" severity="ignore" />
     <issue id="IconDensities" severity="ignore">
         <ignore path="src/main/res/drawable-mdpi/tw__heart_animation_detail_60fps*"/>
         <ignore path="src/main/res/drawable-hdpi/tw__heart_animation_detail_60fps*"/>
@@ -40,4 +36,5 @@
     <issue id="HandlerLeak" severity="ignore">
         <ignore path="src/main/java/com/twitter/sdk/android/tweetui/internal/VideoControlView.java"/>
     </issue>
+    <issue id="InvalidPackage" severity="ignore"/>
 </lint>
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
new file mode 100644
index 00000000..74f05ba9
--- /dev/null
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
@@ -0,0 +1,339 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.view.View;
+
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.ImageValue;
+import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout;
+
+import java.util.Locale;
+
+import io.fabric.sdk.android.Fabric;
+import io.fabric.sdk.android.FabricTestUtils;
+import io.fabric.sdk.android.KitStub;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+public abstract class AbstractTweetViewTest extends TweetUiTestCase {
+    Context context;
+    Resources resources;
+    Locale defaultLocale;
+    AbstractTweetView.DependencyProvider mockDependencyProvider;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        context = Fabric.getKit(TweetUi.class).getContext();
+        resources = context.getResources();
+        defaultLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
+        setUpMockDependencyProvider();
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        TestUtils.setLocale(getContext(), defaultLocale);
+        scrubClass(AbstractTweetViewTest.class);
+        super.tearDown();
+    }
+
+    public Resources getResources() {
+        return resources;
+    }
+
+    // constructor factories
+    abstract AbstractTweetView createView(Context context, Tweet tweet);
+
+    abstract AbstractTweetView createViewInEditMode(Context context, Tweet tweet);
+
+    abstract AbstractTweetView createViewWithMocks(Context context, Tweet tweet);
+
+    abstract AbstractTweetView createViewWithMocks(Context context, Tweet tweet,
+            AbstractTweetView.DependencyProvider dependencyProvider);
+
+    private void setUpMockDependencyProvider() {
+        mockDependencyProvider = mock(TestDependencyProvider.class);
+        when(mockDependencyProvider.getImageLoader())
+                .thenReturn(TweetUi.getInstance().getImageLoader());
+        when(mockDependencyProvider.getTweetUi()).thenReturn(TweetUi.getInstance());
+        when(mockDependencyProvider.getTweetScribeClient()).thenReturn(scribeClient);
+    }
+
+    // initialization
+
+    public void testInit() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        final long tweetId = TestFixtures.TEST_TWEET.id;
+        assertEquals(tweetId, view.getTweetId());
+        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
+        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
+        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
+    }
+
+    public void testInit_withEmptyTweet() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        // recycle so we're not relying on first time defaults, fields should clear
+        view.setTweet(TestFixtures.EMPTY_TWEET);
+        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
+        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
+        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
+        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+    }
+
+    public void testInit_withNullTweet() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        // recycle so we're not relying on first time defaults, fields should clear
+        view.setTweet(null);
+        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
+        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
+        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
+        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+    }
+
+    public void testInit_inEditMode() {
+        FabricTestUtils.resetFabric();
+        try {
+            final Fabric fabric = new Fabric.Builder(getContext())
+                    .debuggable(true)
+                    .kits(new KitStub())
+                    .build();
+            FabricTestUtils.with(fabric);
+            final AbstractTweetView view = createViewInEditMode(context, TestFixtures.TEST_TWEET);
+            assertTrue(view.isInEditMode());
+            assertTrue(view.isEnabled());
+        } catch (Exception e) {
+            fail("Must start TweetUi... IllegalStateException should be caught");
+        } finally {
+            FabricTestUtils.resetFabric();
+        }
+    }
+
+    public void testIsTweetUiEnabled_withEditMode() {
+        final AbstractTweetView view = createView(getContext(), TestFixtures.TEST_TWEET);
+        assertTrue(view.isTweetUiEnabled());
+    }
+
+    public void testIsTweetUiEnabled_inEditMode() {
+        final AbstractTweetView view = createViewInEditMode(getContext(), TestFixtures.TEST_TWEET);
+        assertFalse(view.isTweetUiEnabled());
+    }
+
+    public void testIsTweetUiEnabled_tweetUiStarted() {
+        final AbstractTweetView view = new TweetView(getContext(), TestFixtures.TEST_TWEET);
+        assertTrue(view.isTweetUiEnabled());
+        assertTrue(view.isEnabled());
+    }
+
+    // Tests Date formatting reliant string, manually sets english and restores original locale
+    public void testGetContentDescription_emptyTweet() {
+        final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        view.setTweet(TestFixtures.EMPTY_TWEET);
+        assertEquals(getResources().getString(R.string.tw__loading_tweet),
+                view.getContentDescription());
+        TestUtils.setLocale(getContext(), originalLocale);
+    }
+
+    // Tests Date formatting reliant string, manually sets english and restores original locale
+    public void testGetContentDescription_fullTweet() {
+        final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
+
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        assertTrue(TweetUtils.isTweetResolvable(view.tweet));
+        assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
+
+        TestUtils.setLocale(getContext(), originalLocale);
+    }
+
+    public void testSetTweetMediaClickListener() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
+        view.setTweetMediaClickListener(new TweetMediaClickListener() {
+            @Override
+            public void onMediaEntityClick(Tweet tweet, MediaEntity entity) {
+
+            }
+        });
+
+        assertNotNull(view.tweetMediaClickListener);
+    }
+
+    public void testSetTweetLinkClickListener() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
+        final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
+        view.setTweetLinkClickListener(linkClickListener);
+
+        assertNotNull(view.tweetLinkClickListener);
+
+        view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_URL);
+        verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_LINK, TestFixtures.TEST_URL);
+    }
+
+    public void testSetTweet_defaultClickListener() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
+
+        assertNull(view.tweetLinkClickListener);
+    }
+
+    // Permalink click
+    public void testSetTweet_permalink() {
+        final AbstractTweetView view = createView(context, null);
+        view.setTweet(TestFixtures.TEST_TWEET);
+        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+    }
+
+    // permalinkUri should be null so the permalink launcher will be a NoOp
+    public void testSetTweet_nullTweetPermalink() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        view.setTweet(null);
+        assertNull(view.getPermalinkUri());
+    }
+
+    public void testSetTweet_updatePermalink() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
+        assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
+    }
+
+    public void testGetAspectRatio_withNullMediaEntity() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        final MediaEntity mediaEntity = null;
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+    }
+
+    public void testGetAspectRatio_withNullImageValue() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        final ImageValue imageValue = null;
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
+    }
+
+    public void testGetAspectRatio_mediaEntityWithNullSizes() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(null);
+
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+    }
+
+    public void testGetAspectRatio_mediaEntityWithEmptySizes() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        final MediaEntity.Sizes sizes = new MediaEntity.Sizes(null, null, null, null);
+        final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(sizes);
+
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+    }
+
+    public void testGetAspectRatio_mediaEntityWithZeroDimension() {
+        final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
+
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)));
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)));
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+                view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)));
+    }
+
+    // Scribing
+    private AbstractTweetView setUpScribeTest() {
+        return createViewWithMocks(context, null,
+                mockDependencyProvider);
+    }
+
+    public void testScribeImpression() {
+        final AbstractTweetView view = setUpScribeTest();
+        view.tweet = TestFixtures.TEST_TWEET;
+
+        view.scribeImpression();
+
+        verify(scribeClient).impression(TestFixtures.TEST_TWEET, view.getViewTypeName(), false);
+    }
+
+    public void testScribePermalinkClick() {
+        final AbstractTweetView view = setUpScribeTest();
+        view.tweet = TestFixtures.TEST_TWEET;
+
+        view.scribePermalinkClick();
+
+        verify(scribeClient).click(TestFixtures.TEST_TWEET, view.getViewTypeName());
+    }
+
+    public void testSetTweetMedia_handlesNullPicasso() {
+        when(mockDependencyProvider.getImageLoader()).thenReturn(null);
+
+        final AbstractTweetView tweetView = createViewWithMocks(context, TestFixtures.TEST_TWEET,
+                mockDependencyProvider);
+
+        try {
+            tweetView.setTweetMedia(mock(Tweet.class));
+        } catch (NullPointerException e) {
+            fail("Should have handled null error image");
+        }
+    }
+
+    public void testRender_forSinglePhotoEntity() {
+        final AbstractTweetView tweetView = createViewWithMocks(context, null);
+        tweetView.setTweet(TestFixtures.TEST_PHOTO_TWEET);
+
+        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
+        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
+        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+    }
+
+    public void testRender_forMultiplePhotoEntities() {
+        final AbstractTweetView tweetView = createViewWithMocks(context, null);
+        tweetView.setTweet(TestFixtures.TEST_MULTIPLE_PHOTO_TWEET);
+
+        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
+        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
+        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+    }
+
+    public void testRender_rendersVineCard() {
+        final AbstractTweetView view = createViewWithMocks(context, null);
+        final Card sampleVineCard = TestFixtures.sampleValidVineCard();
+        final Tweet tweetWithVineCard = TestFixtures.createTweetWithVineCard(
+                TestFixtures.TEST_TWEET_ID, TestFixtures.TEST_USER,
+                TestFixtures.TEST_STATUS, sampleVineCard);
+
+        view.setTweet(tweetWithVineCard);
+
+        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
+        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
+        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
+        assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
+        assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
+        assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
+    }
+
+    public void testClearMedia() {
+        final AbstractTweetView view = createViewWithMocks(context, null);
+        view.mediaContainer = mock(AspectRatioFrameLayout.class);
+
+        view.clearTweetMedia();
+
+        verify(view.mediaContainer).setVisibility(View.GONE);
+    }
+}
+
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
index 8c1253c2..0fc9b819 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
@@ -20,31 +20,42 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.Color;
-import android.os.Build;
 import android.view.View;
-
-import io.fabric.sdk.android.Fabric;
-import io.fabric.sdk.android.FabricTestUtils;
-import io.fabric.sdk.android.KitStub;
-import io.fabric.sdk.android.Logger;
+import android.widget.ImageView;
 
 import com.twitter.sdk.android.core.Callback;
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.ImageValue;
 import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout;
+import com.twitter.sdk.android.tweetui.internal.TweetMediaView;
 
 import org.mockito.ArgumentCaptor;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Locale;
 
-import static org.mockito.Mockito.*;
+import io.fabric.sdk.android.Fabric;
+import io.fabric.sdk.android.FabricTestUtils;
+import io.fabric.sdk.android.KitStub;
+import io.fabric.sdk.android.Logger;
+
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.doNothing;
+import static org.mockito.Mockito.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 /**
  * Tests the state of BaseTweetViews created via constructors.
  */
 public abstract class BaseTweetViewTest extends TweetUiTestCase {
-    private static final String ANY_ADVERTISING_ID = "ANY_ID";
     private static final String REQUIRED_RETWEETED_BY_TEXT = "Retweeted by Mr Retweets";
     protected static final double DELTA = 0.001f;
+    protected static final String ALT_TEXT = "ALT_TEXT";
 
     protected Context context;
     private Resources resources;
@@ -211,6 +222,35 @@ public void testGetContentDescription_fullTweet() {
         TestUtils.setLocale(getContext(), originalLocale);
     }
 
+    public void testSetTweetMediaClickListener() {
+        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
+        view.setTweetMediaClickListener(new TweetMediaClickListener() {
+            @Override
+            public void onMediaEntityClick(Tweet tweet, MediaEntity entity) {
+
+            }
+        });
+
+        assertNotNull(view.tweetMediaClickListener);
+    }
+
+    public void testSetTweetLinkClickListener() {
+        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
+        final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
+        view.setTweetLinkClickListener(linkClickListener);
+
+        assertNotNull(view.tweetLinkClickListener);
+
+        view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_URL);
+        verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_LINK, TestFixtures.TEST_URL);
+    }
+
+    public void testSetTweet_defaultClickListener() {
+        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
+
+        assertNull(view.tweetLinkClickListener);
+    }
+
     // Permalink click
     public void testSetTweet_permalink() {
         final BaseTweetView view = createView(context, null);
@@ -253,25 +293,30 @@ public void testSecondaryColorsDefault() {
     }
 
     public void testAvatarDefault() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-            final int containerColor = getResources().getColor(
-                    R.color.tw__tweet_light_container_bg_color);
-            final int color = ColorUtils.calculateOpacityTransform(
-                    BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-            assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
-        }
+        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        final int containerColor = getResources().getColor(
+                R.color.tw__tweet_light_container_bg_color);
+        final int color = ColorUtils.calculateOpacityTransform(
+                BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
+        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
 
     public void testPhotoDefault() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-            final int containerColor = getResources().getColor(
-                    R.color.tw__tweet_light_container_bg_color);
-            final int color = ColorUtils.calculateOpacityTransform(
-                    BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-            assertEquals(color, TestUtils.getDrawableColor(view.mediaView));
-        }
+        final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
+        final int containerColor = getResources().getColor(
+                R.color.tw__tweet_light_container_bg_color);
+        final int color = ColorUtils.calculateOpacityTransform(
+                BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
+
+        final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
+        final List<MediaEntity> mediaEntities = new ArrayList<>();
+        mediaEntities.add(entity);
+
+        final TweetMediaView tweetMediaView = view.tweetMediaView;
+        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
+
+        final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
+        assertEquals(color, TestUtils.getBackgroundColor(imageView));
     }
 
     public void testTweetPhotoErrorDefault() {
@@ -306,27 +351,31 @@ public void testSecondaryColorsDark() {
     }
 
     public void testAvatarDark() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
-                    R.style.tw__TweetDarkStyle);
-            final int containerColor = getResources().getColor(
-                    R.color.tw__tweet_dark_container_bg_color);
-            final int color = ColorUtils.calculateOpacityTransform(
-                    BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-            assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
-        }
+        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
+                R.style.tw__TweetDarkStyle);
+        final int containerColor = getResources().getColor(
+                R.color.tw__tweet_dark_container_bg_color);
+        final int color = ColorUtils.calculateOpacityTransform(
+                BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
+        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
 
     public void testPhotoDark() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET,
-                    R.style.tw__TweetDarkStyle);
-            final int containerColor = getResources().getColor(
-                    R.color.tw__tweet_dark_container_bg_color);
-            final int color = ColorUtils.calculateOpacityTransform(
-                    BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-            assertEquals(color, TestUtils.getDrawableColor(view.mediaView));
-        }
+        final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET,
+                R.style.tw__TweetDarkStyle);
+        final int containerColor = getResources().getColor(
+                R.color.tw__tweet_dark_container_bg_color);
+        final int color = ColorUtils.calculateOpacityTransform(
+                BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
+
+        final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
+        final List<MediaEntity> mediaEntities = new ArrayList<>();
+        mediaEntities.add(entity);
+        final TweetMediaView tweetMediaView = view.tweetMediaView;
+        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
+
+        final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
+        assertEquals(color, TestUtils.getBackgroundColor(imageView));
     }
 
     public void testTweetPhotoErrorDark() {
@@ -382,8 +431,14 @@ public void testTweetActionsDisabled() {
 
     public void testGetAspectRatio_withNullMediaEntity() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        final MediaEntity mediaEntity = null;
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+    }
 
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(null));
+    public void testGetAspectRatio_withNullImageValue() {
+        final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
+        final ImageValue imageValue = null;
+        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
     }
 
     public void testGetAspectRatio_mediaEntityWithNullSizes() {
@@ -436,18 +491,6 @@ public void testScribePermalinkClick() {
         verify(scribeClient).click(TestFixtures.TEST_TWEET, view.getViewTypeName());
     }
 
-    public void testSetErrorImage_handlesNullPicasso() {
-        when(mockDependencyProvider.getImageLoader()).thenReturn(null);
-        final BaseTweetView tweetView = createViewWithMocks(context, TestFixtures.TEST_TWEET,
-                R.style.tw__TweetDarkStyle, mockDependencyProvider);
-
-        try {
-            tweetView.setErrorImage();
-        } catch (NullPointerException e) {
-            fail("Should have handled null error image");
-        }
-    }
-
     public void testSetProfilePhotoView_handlesNullPicasso() {
         when(mockDependencyProvider.getImageLoader()).thenReturn(null);
 
@@ -468,12 +511,29 @@ public void testSetTweetMedia_handlesNullPicasso() {
                 R.style.tw__TweetDarkStyle, mockDependencyProvider);
 
         try {
-            tweetView.setTweetMedia(mock(MediaEntity.class));
+            tweetView.setTweetMedia(mock(Tweet.class));
         } catch (NullPointerException e) {
             fail("Should have handled null error image");
         }
     }
 
+    public void testRender_forSinglePhotoEntity() {
+        final BaseTweetView tweetView = createViewWithMocks(context, null);
+        tweetView.setTweet(TestFixtures.TEST_PHOTO_TWEET);
+
+        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
+        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
+        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+    }
+
+    public void testRender_forMultiplePhotoEntities() {
+        final BaseTweetView tweetView = createViewWithMocks(context, null);
+        tweetView.setTweet(TestFixtures.TEST_MULTIPLE_PHOTO_TWEET);
+
+        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
+        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
+        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());    }
+
     public void testRender_rendersRetweetedStatus() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_RETWEET);
@@ -501,4 +561,30 @@ public void testSetRetweetedBy_retweet() {
         assertEquals(View.VISIBLE, tweetView.retweetedByView.getVisibility());
         assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
     }
+
+    public void testRender_rendersVineCard() {
+        final BaseTweetView view = createViewWithMocks(context, null);
+        final Card sampleVineCard = TestFixtures.sampleValidVineCard();
+        final Tweet tweetWithVineCard = TestFixtures.createTweetWithVineCard(
+                TestFixtures.TEST_TWEET_ID, TestFixtures.TEST_USER,
+                TestFixtures.TEST_STATUS, sampleVineCard);
+
+        view.setTweet(tweetWithVineCard);
+
+        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
+        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
+        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
+        assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
+        assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
+        assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
+    }
+
+    public void testClearMedia() {
+        final BaseTweetView view = createViewWithMocks(context, null);
+        view.mediaContainer = mock(AspectRatioFrameLayout.class);
+
+        view.clearTweetMedia();
+
+        verify(view.mediaContainer).setVisibility(View.GONE);
+    }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
index 94c36920..5b8be66b 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
@@ -19,7 +19,6 @@
 
 import android.content.res.Resources;
 import android.graphics.Color;
-import android.os.Build;
 import android.view.InflateException;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -147,25 +146,12 @@ public void testSecondaryColorsDefault() {
     }
 
     public void testAvatarDefault() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            final BaseTweetView view = getView();
-            final int containerColor = getResources().getColor(
-                    R.color.tw__tweet_light_container_bg_color);
-            final int color = ColorUtils.calculateOpacityTransform(
-                    BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-            assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
-        }
-    }
-
-    public void testPhotoDefault() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            final BaseTweetView view = getView();
-            final int containerColor = getResources().getColor(
-                    R.color.tw__tweet_light_container_bg_color);
-            final int color = ColorUtils.calculateOpacityTransform(
-                    BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-            assertEquals(color, TestUtils.getDrawableColor(view.mediaView));
-        }
+        final BaseTweetView view = getView();
+        final int containerColor = getResources().getColor(
+                R.color.tw__tweet_light_container_bg_color);
+        final int color = ColorUtils.calculateOpacityTransform(
+                BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
+        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
 
     public void testPhotoErrorDefault() {
@@ -180,7 +166,6 @@ public void testRetweetIconDefault() {
     }
 
     // dark style
-
     public void testStaticColorsDark() {
         final BaseTweetView view = getViewDark();
         TweetAsserts.assertDarkColors(view, getResources());
@@ -199,25 +184,12 @@ public void testSecondaryColorsDark() {
     }
 
     public void testAvatarDark() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            final BaseTweetView view = getViewDark();
-            final int containerColor = getResources().getColor(
-                    R.color.tw__tweet_dark_container_bg_color);
-            final int color = ColorUtils.calculateOpacityTransform(
-                    BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-            assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
-        }
-    }
-
-    public void testPhotoDark() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            final BaseTweetView view = getViewDark();
-            final int containerColor = getResources().getColor(
-                    R.color.tw__tweet_dark_container_bg_color);
-            final int color = ColorUtils.calculateOpacityTransform(
-                    BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-            assertEquals(color, TestUtils.getDrawableColor(view.mediaView));
-        }
+        final BaseTweetView view = getViewDark();
+        final int containerColor = getResources().getColor(
+                R.color.tw__tweet_dark_container_bg_color);
+        final int color = ColorUtils.calculateOpacityTransform(
+                BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
+        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
 
     public void testPhotoErrorDark() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java
index 3328142f..c2801e2d 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CollectionTimelineTest.java
@@ -18,28 +18,23 @@
 package com.twitter.sdk.android.tweetui;
 
 import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.GuestCallback;
+import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
-import com.twitter.sdk.android.core.internal.TwitterCollection;
+import com.twitter.sdk.android.core.models.TwitterCollection;
 import com.twitter.sdk.android.core.models.User;
 import com.twitter.sdk.android.core.models.UserBuilder;
-import com.twitter.sdk.android.core.services.CollectionService;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
 
 public class CollectionTimelineTest extends TweetUiTestCase {
     private static final String ILLEGAL_TWEET_UI_MESSAGE = "TweetUi instance must not be null";
@@ -57,6 +52,9 @@
             = new TweetBuilder().setId(5858L).setUser(TEST_USER_1).build();
     private static final Tweet TEST_TWEET_2
             = new TweetBuilder().setId(8585L).setUser(TEST_USER_1).build();
+    private static final Tweet TEST_TWEET_QUOTE
+            = new TweetBuilder().setId(858909L).setUser(TEST_USER_1).setQuotedStatus(TEST_TWEET_2)
+            .build();
 
     private Map<Long, Tweet> testTweetMap = new HashMap<>();
     private Map<Long, User> testUserMap = new HashMap<>();
@@ -70,12 +68,17 @@ protected void setUp() throws Exception {
         testUserMap.put(TEST_USER_2.id, TEST_USER_2);
         testTweetMap.put(TEST_TWEET_1.id, TEST_TWEET_1);
         testTweetMap.put(TEST_TWEET_2.id, TEST_TWEET_2);
+        testTweetMap.put(TEST_TWEET_QUOTE.id, TEST_TWEET_QUOTE);
         // testItems order Test Tweet 1, then 2
         testItems.add(new TwitterCollection.TimelineItem(
                 new TwitterCollection.TimelineItem.TweetItem(5858L)));
         testItems.add(new TwitterCollection.TimelineItem(
                 new TwitterCollection.TimelineItem.TweetItem(8585L)));
+        testItems.add(new TwitterCollection.TimelineItem(
+                new TwitterCollection.TimelineItem.TweetItem(858909L)));
         // testItemsRev orders Test Tweet 2, then 1
+        testItemsRev.add(new TwitterCollection.TimelineItem(
+                new TwitterCollection.TimelineItem.TweetItem(858909L)));
         testItemsRev.add(new TwitterCollection.TimelineItem(
                 new TwitterCollection.TimelineItem.TweetItem(8585L)));
         testItemsRev.add(new TwitterCollection.TimelineItem(
@@ -83,58 +86,38 @@ protected void setUp() throws Exception {
     }
 
     public void testConstructor() {
-        final CollectionTimeline timeline = new CollectionTimeline(tweetUi, TEST_COLLECTION_ID,
+        final CollectionTimeline timeline = new CollectionTimeline(TEST_COLLECTION_ID,
                 TEST_ITEMS_PER_REQUEST);
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
                 timeline.collectionIdentifier);
     }
 
-    public void testConstructor_nullTweetUi() {
-        try {
-            new CollectionTimeline(null, null, null);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
     public void testNext_createsCorrectRequest() {
-        final CollectionTimeline timeline = spy(new TestCollectionTimeline(tweetUi,
+        final CollectionTimeline timeline = spy(new TestCollectionTimeline(
                 TEST_COLLECTION_ID, TEST_ITEMS_PER_REQUEST));
         timeline.next(TEST_MIN_POSITION, mock(Callback.class));
-        verify(timeline).createCollectionRequest(eq(TEST_MIN_POSITION), isNull(Long.class),
-                any(Callback.class));
-        verify(timeline).addRequest(any(Callback.class));
+        verify(timeline).createCollectionRequest(eq(TEST_MIN_POSITION), isNull(Long.class));
     }
 
     public void testPrevious_createsCorrectRequest() {
-        final CollectionTimeline timeline = spy(new TestCollectionTimeline(tweetUi,
+        final CollectionTimeline timeline = spy(new TestCollectionTimeline(
                 TEST_COLLECTION_ID, TEST_ITEMS_PER_REQUEST));
         timeline.next(TEST_MAX_POSITION, mock(Callback.class));
-        verify(timeline).createCollectionRequest(eq(TEST_MAX_POSITION), isNull(Long.class),
-                any(Callback.class));
-        verify(timeline).addRequest(any(Callback.class));
+        verify(timeline).createCollectionRequest(eq(TEST_MAX_POSITION), isNull(Long.class));
     }
 
     public void testCreateCollectionRequest() {
         // build a timeline with test params
-        final CollectionTimeline timeline = new CollectionTimeline(tweetUi, TEST_COLLECTION_ID,
+        final CollectionTimeline timeline = new CollectionTimeline(TEST_COLLECTION_ID,
                 TEST_ITEMS_PER_REQUEST);
-        // create a request (Callback<TwitterApiClient>) directly
-        final Callback<TwitterApiClient> request = timeline.createCollectionRequest(
-                TEST_MIN_POSITION, TEST_MAX_POSITION, mock(Callback.class));
-        final TwitterApiClient mockTwitterApiClient = mock(TwitterApiClient.class);
-        final CollectionService mockCollectionService = mock(CollectionService.class);
-        when(mockTwitterApiClient.getCollectionService()).thenReturn(mockCollectionService);
-        request.success(new Result<>(mockTwitterApiClient, null));
-        // assert collection service is requested once
-        verify(mockTwitterApiClient).getCollectionService();
+
+        // create a request directly
+        timeline.createCollectionRequest(TEST_MIN_POSITION, TEST_MAX_POSITION);
+
         // assert collection call is made with the correct arguments
-        verify(mockCollectionService).collection(
+        verify(TwitterCore.getInstance().getApiClient().getCollectionService()).collection(
                 eq(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID),
-                eq(TEST_ITEMS_PER_REQUEST), eq(TEST_MAX_POSITION), eq(TEST_MIN_POSITION),
-                any(GuestCallback.class));
+                eq(TEST_ITEMS_PER_REQUEST), eq(TEST_MAX_POSITION), eq(TEST_MIN_POSITION));
     }
 
     public void testGetScribeSection() {
@@ -150,9 +133,10 @@ public void testGetOrderedTweets() {
                 = new TwitterCollection.Metadata("", TEST_POSITION, testItems);
         final List<Tweet> tweets = CollectionTimeline.getOrderedTweets(
                 new TwitterCollection(contents, metadata));
-        assertEquals(2, tweets.size());
+        assertEquals(3, tweets.size());
         assertEquals(TEST_TWEET_1, tweets.get(0));
         assertEquals(TEST_TWEET_2, tweets.get(1));
+        assertEquals(TEST_TWEET_QUOTE, tweets.get(2));
     }
 
     public void testGetOrderedTweets_respectsTimelineItemsOrder() {
@@ -162,9 +146,10 @@ public void testGetOrderedTweets_respectsTimelineItemsOrder() {
                 TEST_POSITION, testItemsRev);
         final List<Tweet> tweets = CollectionTimeline.getOrderedTweets(
                 new TwitterCollection(contents, metadata));
-        assertEquals(2, tweets.size());
-        assertEquals(TEST_TWEET_2, tweets.get(0));
-        assertEquals(TEST_TWEET_1, tweets.get(1));
+        assertEquals(3, tweets.size());
+        assertEquals(TEST_TWEET_QUOTE, tweets.get(0));
+        assertEquals(TEST_TWEET_2, tweets.get(1));
+        assertEquals(TEST_TWEET_1, tweets.get(2));
     }
 
     public void testGetOrderedTweets_handlesNull() {
@@ -226,37 +211,26 @@ public void testGetTimelineCursor_handlesNull() {
     /* Builder */
 
     public void testBuilder() {
-        final CollectionTimeline timeline = new CollectionTimeline.Builder(tweetUi)
+        final CollectionTimeline timeline = new CollectionTimeline.Builder()
                 .id(TEST_COLLECTION_ID)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
                 timeline.collectionIdentifier);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
     }
 
-    public void testBuilder_nullTweetUI() {
-        try {
-            new CollectionTimeline.Builder(null);
-            fail();
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
     public void testBuilder_defaults() {
-        final CollectionTimeline timeline = new CollectionTimeline.Builder(tweetUi)
+        final CollectionTimeline timeline = new CollectionTimeline.Builder()
                 .id(TEST_COLLECTION_ID)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
                 timeline.collectionIdentifier);
         assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
     }
 
     public void testBuilder_id() {
-        final CollectionTimeline timeline = new CollectionTimeline.Builder(tweetUi)
+        final CollectionTimeline timeline = new CollectionTimeline.Builder()
                 .id(TEST_COLLECTION_ID)
                 .build();
         assertEquals(CollectionTimeline.COLLECTION_PREFIX + TEST_COLLECTION_ID,
@@ -265,7 +239,7 @@ public void testBuilder_id() {
 
     public void testBuilder_idNull() {
         try {
-            new CollectionTimeline.Builder(tweetUi).id(null).build();
+            new CollectionTimeline.Builder().id(null).build();
             fail("Expected IllegalStateException");
         } catch (IllegalStateException e) {
             assertEquals("collection id must not be null", e.getMessage());
@@ -273,7 +247,7 @@ public void testBuilder_idNull() {
     }
 
     public void testBuilder_maxItemsPerRequest() {
-        final CollectionTimeline timeline = new CollectionTimeline.Builder(tweetUi)
+        final CollectionTimeline timeline = new CollectionTimeline.Builder()
                 .id(TEST_COLLECTION_ID)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
index 40254a5b..0a2eb314 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
@@ -62,7 +62,6 @@ CompactTweetView createViewWithMocks(Context context, Tweet tweet, int styleResI
     }
 
     // Layout
-
     public void testLayout() {
         final CompactTweetView compactView = createView(context, TestFixtures.TEST_TWEET);
         assertEquals(R.layout.tw__tweet_compact, compactView.getLayout());
@@ -101,9 +100,15 @@ public void testSetTweetPhoto() {
 
         final CompactTweetView tv = createViewWithMocks(context, TestFixtures.TEST_PHOTO_TWEET,
                 R.style.tw__TweetLightStyle, mockDependencyProvider);
-        // assert 2 loads, once for profile photo and once for compact tweet photo
-        verify(mockPicasso, times(2)).load(anyString());
-        // assert fit is called once when the compact tweet photo is loaded
-        verify(mockRequestCreator, times(1)).fit();
+        // assert 1 load for profile photo, tweet photo loaded in TweetMediaView
+        verify(mockPicasso, times(1)).load(anyString());
+    }
+
+    public void testGetAspectRatioForPhotoEntity() {
+        final CompactTweetView compactView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
+        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(1));
+        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(2));
+        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(3));
+        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(4));
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
index c053b88d..54b8720c 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
@@ -26,7 +26,6 @@
 import java.util.List;
 
 public class FixedTweetTimelineTest extends TweetUiTestCase {
-    private static final String ILLEGAL_TWEET_UI_MESSAGE = "TweetUi instance must not be null";
     private static final Long ANY_ID = 1234L;
     private List<Tweet> fixedTweets = new ArrayList<>();
 
@@ -39,27 +38,18 @@ protected void setUp() throws Exception {
     }
 
     public void testConstructor() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline(tweetUi, fixedTweets);
+        final FixedTweetTimeline timeline = new FixedTweetTimeline(fixedTweets);
         assertNotNull(timeline.tweets);
         assertEquals(fixedTweets, timeline.tweets);
     }
 
     public void testConstructor_nullTweets() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline(tweetUi, null);
+        final FixedTweetTimeline timeline = new FixedTweetTimeline(null);
         assertTrue(timeline.tweets.isEmpty());
     }
 
-    public void testConstructor_nullTweetUi() {
-        try {
-            new FixedTweetTimeline(null, fixedTweets);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
     public void testNext_succeedsWithFixedTweets() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline(tweetUi, fixedTweets);
+        final FixedTweetTimeline timeline = new FixedTweetTimeline(fixedTweets);
         timeline.next(ANY_ID, new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
@@ -78,7 +68,7 @@ public void failure(TwitterException exception) {
     }
 
     public void testNext_succeedsWithEmptyTweets() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline(tweetUi, fixedTweets);
+        final FixedTweetTimeline timeline = new FixedTweetTimeline(fixedTweets);
         timeline.previous(ANY_ID, new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
@@ -98,24 +88,13 @@ public void failure(TwitterException exception) {
     /* Builder */
 
     public void testBuilder() {
-        final FixedTweetTimeline timeline = new FixedTweetTimeline.Builder(tweetUi)
+        final FixedTweetTimeline timeline = new FixedTweetTimeline.Builder()
                 .setTweets(fixedTweets).build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(fixedTweets, timeline.tweets);
     }
 
     public void testBuilder_empty() {
         final FixedTweetTimeline timeline = new FixedTweetTimeline.Builder().build();
-        assertNotNull(timeline.tweetUi);
         assertTrue(timeline.tweets.isEmpty());
     }
-
-    public void testBuilder_nullTweetUi() {
-        try {
-            new FixedTweetTimeline.Builder(null).build();
-            fail();
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockCallAnswer.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockCallAnswer.java
new file mode 100644
index 00000000..f3f29494
--- /dev/null
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockCallAnswer.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import org.mockito.Mockito;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+
+import retrofit2.Call;
+
+import static org.mockito.Mockito.mock;
+
+public class MockCallAnswer implements Answer<Object> {
+    @Override
+    public Object answer(InvocationOnMock invocation) throws Throwable {
+        if (invocation.getMethod().getReturnType().equals(Call.class)) {
+            return mock(Call.class);
+        } else {
+            return Mockito.RETURNS_DEFAULTS.answer(invocation);
+        }
+    }
+}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockUtils.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockUtils.java
index 39ac2e9c..b68604f8 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockUtils.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/MockUtils.java
@@ -22,23 +22,22 @@
 
 import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.TwitterApiClient;
+import com.twitter.sdk.android.core.services.CollectionService;
+import com.twitter.sdk.android.core.services.ListService;
+import com.twitter.sdk.android.core.services.SearchService;
 import com.twitter.sdk.android.core.services.StatusesService;
 
 import com.squareup.picasso.Picasso;
 import com.squareup.picasso.RequestCreator;
 
-import org.mockito.ArgumentCaptor;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ExecutorService;
 
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyObject;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.doNothing;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 public final class MockUtils {
@@ -49,6 +48,7 @@ public static Picasso mockPicasso(Picasso picasso, RequestCreator requestCreator
         when(picasso.load(anyString())).thenReturn(requestCreator);
         when(picasso.load(anyInt())).thenReturn(requestCreator);
         when(requestCreator.centerCrop()).thenReturn(requestCreator);
+        when(requestCreator.error(anyInt())).thenReturn(requestCreator);
         when(requestCreator.fit()).thenReturn(requestCreator);
         when(requestCreator.placeholder(any(Drawable.class)))
                 .thenReturn(requestCreator);
@@ -56,22 +56,17 @@ public static Picasso mockPicasso(Picasso picasso, RequestCreator requestCreator
         return picasso;
     }
 
-    public static void mockExecutorService(ExecutorService executorService) {
-        final ArgumentCaptor<Runnable> runableArgument =
-                ArgumentCaptor.forClass(Runnable.class);
-        when(executorService.submit(runableArgument.capture())).thenAnswer(
-                new Answer<Object>() {
-                    @Override
-                    public Object answer(InvocationOnMock invocation) throws Throwable {
-                        return null;
-                    }
-                }
-        );
-    }
+    public static void mockApiClient(TwitterApiClient apiClient) {
+        final StatusesService statusesService = mock(StatusesService.class, new MockCallAnswer());
+        final SearchService searchService = mock(SearchService.class, new MockCallAnswer());
+        final ListService listService = mock(ListService.class, new MockCallAnswer());
+        final CollectionService collectionService =
+                mock(CollectionService.class, new MockCallAnswer());
 
-    public static void mockStatusesServiceClient(TwitterApiClient apiClient,
-            StatusesService statusesService) {
         when(apiClient.getStatusesService()).thenReturn(statusesService);
+        when(apiClient.getCollectionService()).thenReturn(collectionService);
+        when(apiClient.getSearchService()).thenReturn(searchService);
+        when(apiClient.getListService()).thenReturn(listService);
     }
 
     public static void mockClients(ConcurrentHashMap<Session, TwitterApiClient> clients,
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
new file mode 100644
index 00000000..afb5a37c
--- /dev/null
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.content.Context;
+
+import com.twitter.sdk.android.core.models.Tweet;
+
+public class QuoteTweetViewTest extends AbstractTweetViewTest {
+    protected static final double DELTA = 0.001f;
+
+    @Override
+    QuoteTweetView createView(Context context, Tweet tweet) {
+        final QuoteTweetView quoteTweetView = new QuoteTweetView(context);
+        quoteTweetView.setTweet(tweet);
+        return quoteTweetView;
+    }
+
+    @Override
+    QuoteTweetView createViewInEditMode(Context context, Tweet tweet) {
+        final QuoteTweetView quoteTweetView = new QuoteTweetView(context) {
+            @Override
+            public boolean isInEditMode() {
+                return true;
+            }
+        };
+
+        return quoteTweetView;
+    }
+
+    @Override
+    QuoteTweetView createViewWithMocks(Context context, Tweet tweet) {
+        final QuoteTweetView quoteTweetView = new QuoteTweetView(context);
+        quoteTweetView.setTweet(tweet);
+        return quoteTweetView;
+    }
+
+    @Override
+    QuoteTweetView createViewWithMocks(Context context, Tweet tweet,
+                                         BaseTweetView.DependencyProvider dependencyProvider) {
+        final QuoteTweetView quoteTweetView = new QuoteTweetView(context, dependencyProvider);
+        quoteTweetView.setTweet(tweet);
+        return quoteTweetView;
+    }
+
+    public void testGetAspectRatio() {
+        final QuoteTweetView quoteTweetView = createView(context, TestFixtures.TEST_TWEET);
+
+        assertEquals(1.0, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(100, 100)), DELTA);
+        assertEquals(1.0, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(300, 400)), DELTA);
+        assertEquals(1.0, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(100, 800)), DELTA);
+        assertEquals(1.3333, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(400, 300)), DELTA);
+        assertEquals(1.6666, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(500, 300)), DELTA);
+        assertEquals(2.0, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(600, 300)), DELTA);
+        assertEquals(2.3333, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(700, 300)), DELTA);
+        assertEquals(2.6666, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(800, 300)), DELTA);
+        assertEquals(3.0, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(900, 300)), DELTA);
+        assertEquals(3.0, quoteTweetView.getAspectRatio(
+                TestFixtures.createMediaEntityWithPhoto(1000, 50)), DELTA);
+    }
+
+    public void testGetAspectRatioForPhotoEntity() {
+        final QuoteTweetView quoteTweetView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
+        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(1));
+        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(2));
+        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(3));
+        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(4));
+    }
+}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
index a34ec0a6..7223e42b 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
@@ -18,19 +18,25 @@
 package com.twitter.sdk.android.tweetui;
 
 import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.GuestCallback;
-import com.twitter.sdk.android.core.services.SearchService;
+import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.services.params.Geocode;
 
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+
 import static org.mockito.Mockito.*;
 
 public class SearchTimelineTest extends TweetUiTestCase {
-    private static final String ILLEGAL_TWEET_UI_MESSAGE = "TweetUi instance must not be null";
     private static final String TEST_QUERY = "twitterflock";
+    private static final Geocode TEST_GEOCODE =
+            new Geocode(37.7767902, -122.4164055, 1, Geocode.Distance.MILES);
     private static final String TEST_FILTER_QUERY = "from:twitter";
+    private static final String TEST_RESULT_TYPE = "popular";
     private static final String TEST_LANG = "en";
+    private static final String TEST_UNTIL_DATE = "2012-08-20";
+    private static final Date TEST_UNTIL =
+            new GregorianCalendar(2012, Calendar.AUGUST, 20).getTime();
     private static final Integer REQUIRED_DEFAULT_ITEMS_PER_REQUEST = 30;
     private static final Integer TEST_ITEMS_PER_REQUEST = 100;
     private static final Long TEST_SINCE_ID = 1000L;
@@ -39,88 +45,73 @@
 
 
     public void testConstructor() {
-        final SearchTimeline timeline = new SearchTimeline(tweetUi, TEST_QUERY, TEST_LANG,
-                TEST_ITEMS_PER_REQUEST);
-        assertEquals(tweetUi, timeline.tweetUi);
+        final SearchTimeline timeline = new SearchTimeline(TEST_QUERY, TEST_GEOCODE,
+                TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST, TEST_UNTIL_DATE);
         assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
         assertEquals(TEST_LANG, timeline.languageCode);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-    }
-
-    public void testConstructor_nullTweetUi() {
-        try {
-            new SearchTimeline(null, null, null, null);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
+        assertEquals(TEST_UNTIL_DATE, timeline.untilDate);
     }
 
     // most api arguments should default to Null to allow the backend to determine default behavior
     public void testConstructor_defaults() {
-        final SearchTimeline timeline = new SearchTimeline(tweetUi, null, null, null);
-        assertEquals(tweetUi, timeline.tweetUi);
+        final SearchTimeline timeline = new SearchTimeline(null, null, null, null, null, null);
         assertNull(timeline.query);
         assertNull(timeline.languageCode);
         assertNull(timeline.maxItemsPerRequest);
+        assertNull(timeline.untilDate);
     }
 
     // FILTER_RETWEETS modifier should be added to the end of the non-null search queries
 
     public void testFilterRetweets() {
-        final SearchTimeline timeline = new SearchTimeline(tweetUi, TEST_QUERY, null, null);
+        final SearchTimeline timeline = new SearchTimeline(TEST_QUERY, null, null, null, null,
+                null);
         assertTrue(timeline.query.endsWith(SearchTimeline.FILTER_RETWEETS));
     }
 
     public void testAddFilterRetweets() {
-        final SearchTimeline timeline = new SearchTimeline(tweetUi, TEST_FILTER_QUERY, null, null);
+        final SearchTimeline timeline = new SearchTimeline(TEST_FILTER_QUERY, null, null, null,
+                null, null);
         assertEquals("from:twitter -filter:retweets", timeline.query);
     }
 
     public void testFilterRetweets_nullQuery() {
         // handle null queries, do not append FILTER_RETWEETS
-        final SearchTimeline timeline = new SearchTimeline(tweetUi, null, null, null);
+        final SearchTimeline timeline = new SearchTimeline(null, null, null, null, null, null);
         assertNull(timeline.query);
     }
 
     public void testNext_createsCorrectRequest() {
-        final SearchTimeline timeline = spy(new TestSearchTimeline(tweetUi, TEST_QUERY, TEST_LANG,
-                TEST_ITEMS_PER_REQUEST));
+        final SearchTimeline timeline = spy(new TestSearchTimeline(TEST_QUERY, TEST_GEOCODE,
+                TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST, TEST_UNTIL_DATE));
         timeline.next(TEST_SINCE_ID, mock(Callback.class));
         verify(timeline).createSearchRequest(eq(TEST_SINCE_ID),
-                isNull(Long.class), any(Callback.class));
-        verify(timeline).addRequest(any(Callback.class));
+                isNull(Long.class));
     }
 
     public void testPrevious_createsCorrectRequest() {
-        final SearchTimeline timeline = spy(new TestSearchTimeline(tweetUi, TEST_QUERY, TEST_LANG,
-                TEST_ITEMS_PER_REQUEST));
+        final SearchTimeline timeline = spy(new TestSearchTimeline(TEST_QUERY, TEST_GEOCODE,
+                TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST, TEST_UNTIL_DATE));
         timeline.previous(TEST_MAX_ID, mock(Callback.class));
         // intentionally decrementing the maxId which is passed through to the request
         verify(timeline).createSearchRequest(isNull(Long.class),
-                eq(TEST_MAX_ID - 1), any(Callback.class));
-        verify(timeline).addRequest(any(Callback.class));
+                eq(TEST_MAX_ID - 1));
     }
 
     public void testCreateSearchRequest() {
         // build a timeline with test params
-        final SearchTimeline timeline = new SearchTimeline(tweetUi, TEST_QUERY, TEST_LANG,
-                TEST_ITEMS_PER_REQUEST);
-        // create a request (Callback<TwitterApiClient>) directly
-        final Callback<TwitterApiClient> request = timeline.createSearchRequest(TEST_SINCE_ID,
-                TEST_MAX_ID, mock(Callback.class));
-        final TwitterApiClient mockTwitterApiClient = mock(TwitterApiClient.class);
-        final SearchService mockSearchService = mock(SearchService.class);
-        when(mockTwitterApiClient.getSearchService()).thenReturn(mockSearchService);
-        // execute request with mock auth'd TwitterApiClient (auth queue tested separately)
-        request.success(new Result<>(mockTwitterApiClient, null));
-        // assert search service is requested once
-        verify(mockTwitterApiClient).getSearchService();
+        final SearchTimeline timeline = spy(new TestSearchTimeline(TEST_QUERY, null,
+                TEST_RESULT_TYPE, TEST_LANG, TEST_ITEMS_PER_REQUEST, TEST_UNTIL_DATE));
+        // create a request directly
+        timeline.createSearchRequest(TEST_SINCE_ID, TEST_MAX_ID);
+
         // assert searchTimeline call is made with the correct arguments
-        verify(mockSearchService).tweets(eq(TEST_QUERY + SearchTimeline.FILTER_RETWEETS),
+        verify(TwitterCore.getInstance().getApiClient().getSearchService())
+                .tweets(eq(TEST_QUERY + SearchTimeline.FILTER_RETWEETS),
                 isNull(Geocode.class), eq(TEST_LANG), isNull(String.class),
-                eq(SearchTimeline.RESULT_TYPE), eq(TEST_ITEMS_PER_REQUEST), isNull(String.class),
-                eq(TEST_SINCE_ID), eq(TEST_MAX_ID), eq(true), any(GuestCallback.class));
+                eq(TEST_RESULT_TYPE), eq(TEST_ITEMS_PER_REQUEST), eq(TEST_UNTIL_DATE),
+                eq(TEST_SINCE_ID), eq(TEST_MAX_ID), eq(true));
     }
 
     public void testGetScribeSection() {
@@ -131,43 +122,34 @@ public void testGetScribeSection() {
     /* Builder */
 
     public void testBuilder() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(tweetUi)
+        final SearchTimeline timeline = new SearchTimeline.Builder()
                 .query(TEST_QUERY)
+                .geocode(TEST_GEOCODE)
                 .languageCode(TEST_LANG)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
+                .resultType(SearchTimeline.ResultType.POPULAR)
+                .untilDate(TEST_UNTIL)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
+        assertEquals(TEST_RESULT_TYPE, timeline.resultType);
         assertEquals(TEST_LANG, timeline.languageCode);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
-    }
-
-    public void testBuilder_nullTweetUi() {
-        try {
-            new SearchTimeline.Builder(null);
-            fail();
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
-    public void testBuilder_empty() {
-        final SearchTimeline timeline = new SearchTimeline.Builder().query(TEST_QUERY).build();
-        assertNotNull(timeline.tweetUi);
+        assertEquals(TEST_UNTIL_DATE, timeline.untilDate);
+        assertEquals(TEST_GEOCODE, timeline.geocode);
     }
 
     // api arguments should default to Null to allow the backend to determine default behavior
     public void testBuilder_defaults() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(tweetUi)
+        final SearchTimeline timeline = new SearchTimeline.Builder()
                 .query(TEST_QUERY)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertNull(timeline.languageCode);
         assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
+        assertNull(timeline.untilDate);
     }
 
     public void testBuilder_query() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(tweetUi)
+        final SearchTimeline timeline = new SearchTimeline.Builder()
                 .query(TEST_QUERY)
                 .build();
         assertEquals(TEST_QUERY + SearchTimeline.FILTER_RETWEETS, timeline.query);
@@ -183,15 +165,23 @@ public void testBuilder_nullQuery() {
     }
 
     public void testBuilder_lang() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(tweetUi)
+        final SearchTimeline timeline = new SearchTimeline.Builder()
                 .query(TEST_QUERY)
                 .languageCode(TEST_LANG)
                 .build();
         assertEquals(TEST_LANG, timeline.languageCode);
     }
 
+    public void testBuilder_geocode() {
+        final SearchTimeline timeline = new SearchTimeline.Builder()
+                .query(TEST_QUERY)
+                .geocode(TEST_GEOCODE)
+                .build();
+        assertEquals(TEST_GEOCODE, timeline.geocode);
+    }
+
     public void testBuilder_maxItemsPerRequest() {
-        final SearchTimeline timeline = new SearchTimeline.Builder(tweetUi)
+        final SearchTimeline timeline = new SearchTimeline.Builder()
                 .query(TEST_QUERY)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
deleted file mode 100644
index 972fe022..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-
-public class TweetRepositoryTest extends TweetUiTestCase {
-
-    public void testSingleTweetCallback_callsUpdateCache() {
-        final TestTweetRepository mockRepo = mock(TestTweetRepository.class);
-        final TestTweetRepository.SingleTweetCallback callback
-                = mockRepo.new SingleTweetCallback(null);
-        callback.success(null, null);
-        verify(mockRepo, times(1)).updateCache(any(Tweet.class));
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
index df645669..767ca49e 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
@@ -20,23 +20,41 @@
 import android.view.View;
 
 import com.twitter.sdk.android.core.Callback;
+import com.twitter.sdk.android.core.Result;
+import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+import com.twitter.sdk.android.core.models.Identifiable;
 import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.tweetui.internal.TimelineDelegate;
+
+import org.mockito.ArgumentCaptor;
 
 import java.util.List;
 
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
 
 public class TweetTimelineListAdapterTest extends TweetUiTestCase {
-    private static final String NULL_CONTEXT_MESSAGE = "Context must not be null";
-    private static final String NULL_TIMELINE_MESSAGE = "Timeline must not be null";
+    static final String NULL_CONTEXT_MESSAGE = "Context must not be null";
+    static final String NULL_TIMELINE_MESSAGE = "Timeline must not be null";
+    static final int ANY_STYLE = R.style.tw__TweetLightWithActionsStyle;
     private TweetTimelineListAdapter listAdapter;
-    private static final int ANY_STYLE = R.style.tw__TweetLightWithActionsStyle;
+
+    private static final String REQUIRED_SDK_IMPRESSION_CLIENT = "android";
+    private static final String REQUIRED_SDK_IMPRESSION_PAGE = "timeline";
+    private static final String REQUIRED_SDK_IMPRESSION_COMPONENT = "initial";
+    private static final String REQUIRED_SDK_IMPRESSION_ELEMENT = "";
+    private static final String REQUIRED_TFW_CLIENT = "tfw";
+    private static final String REQUIRED_TFW_PAGE = "android";
+    private static final String REQUIRED_TFW_SECTION = "timeline";
+    private static final String REQUIRED_TFW_ELEMENT = "initial";
+    private static final String REQUIRED_IMPRESSION_ACTION = "impression";
+    private static final String TEST_SCRIBE_SECTION = "other";
 
     public void testConstructor() {
-        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TimelineDelegate.class);
+        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TestTimelineDelegate.class);
+        final TweetUi tweetUi = mock(TweetUi.class);
         listAdapter = new TweetTimelineListAdapter(getContext(), mockTimelineDelegate, ANY_STYLE,
-                null);
+                null, tweetUi);
         if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
             final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
@@ -48,10 +66,11 @@ public void testConstructor() {
     }
 
     public void testConstructor_withActionCallback() {
-        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TimelineDelegate.class);
+        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TestTimelineDelegate.class);
         final Callback<Tweet> mockCallback = mock(Callback.class);
+        final TweetUi tweetUi = mock(TweetUi.class);
         listAdapter = new TweetTimelineListAdapter(getContext(), mockTimelineDelegate, ANY_STYLE,
-                mockCallback);
+                mockCallback, tweetUi);
         // assert that
         // - developer callback wrapped in a ReplaceTweetCallback
         if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
@@ -103,6 +122,27 @@ public void testBuilder_nullTimeline() {
         }
     }
 
+    public void testBuilder_withTimelineFilter() {
+        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
+        final TimelineFilter mockTimelineFilter = mock(TimelineFilter.class);
+        listAdapter = new TweetTimelineListAdapter.Builder(getContext())
+                .setTimeline(mockTimeline)
+                .setTimelineFilter(mockTimelineFilter)
+                .build();
+
+        assertTrue(listAdapter.delegate instanceof FilterTimelineDelegate);
+    }
+
+    public void testBuilder_withNullTimelineFilter() {
+        final Timeline<Tweet> mockTimeline = mock(Timeline.class);
+        listAdapter = new TweetTimelineListAdapter.Builder(getContext())
+                .setTimeline(mockTimeline)
+                .setTimelineFilter(null)
+                .build();
+
+        assertTrue(listAdapter.delegate instanceof TimelineDelegate);
+    }
+
     /**
      * Requires TweetUi to be setup by the test class. Without TweetUi, TweetView construction
      * returns before calling setTweet to support IDE edit mode, so getTweetId would always be -1.
@@ -110,7 +150,8 @@ public void testBuilder_nullTimeline() {
     public void testGetView_getsCompactTweetView() {
         final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(10);
         final TimelineDelegate<Tweet> fakeDelegate = new TimelineDelegate<>(fakeTimeline);
-        listAdapter = new TweetTimelineListAdapter(getContext(), fakeDelegate, ANY_STYLE, null);
+        listAdapter = new TweetTimelineListAdapter(getContext(), fakeDelegate, ANY_STYLE,
+                null, tweetUi);
 
         final View view = listAdapter.getView(0, null, null);
         // assert that
@@ -139,6 +180,42 @@ public void testDefaultViewStyle_viaBuilder() {
         assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
     }
 
+    public void testConstructor_scribesImpression() {
+        final TweetUi tweetUi = mock(TestTweetUi.class);
+        final ArgumentCaptor<EventNamespace> sdkNamespaceCaptor
+                = ArgumentCaptor.forClass(EventNamespace.class);
+        final ArgumentCaptor<EventNamespace> tfwNamespaceCaptor
+                = ArgumentCaptor.forClass(EventNamespace.class);
+        final ArgumentCaptor<List<ScribeItem>> scribeItemsCaptor
+                = ArgumentCaptor.forClass((Class) List.class);
+
+        final TimelineDelegate<Tweet> mockTimelineDelegate = mock(TestTimelineDelegate.class);
+        new TweetTimelineListAdapter(getContext(), mockTimelineDelegate, ANY_STYLE,
+                null, tweetUi);
+
+        verify(tweetUi).scribe(sdkNamespaceCaptor.capture());
+        verify(tweetUi).scribe(tfwNamespaceCaptor.capture(), scribeItemsCaptor.capture());
+
+        final EventNamespace sdkNs = sdkNamespaceCaptor.getValue();
+        assertEquals(REQUIRED_SDK_IMPRESSION_CLIENT, sdkNs.client);
+        assertEquals(REQUIRED_SDK_IMPRESSION_PAGE, sdkNs.page);
+        assertEquals(TEST_SCRIBE_SECTION, sdkNs.section);
+        assertEquals(REQUIRED_SDK_IMPRESSION_COMPONENT, sdkNs.component);
+        assertEquals(REQUIRED_SDK_IMPRESSION_ELEMENT, sdkNs.element);
+        assertEquals(REQUIRED_IMPRESSION_ACTION, sdkNs.action);
+
+        final EventNamespace tfwNs = tfwNamespaceCaptor.getValue();
+        assertEquals(REQUIRED_TFW_CLIENT, tfwNs.client);
+        assertEquals(REQUIRED_TFW_PAGE, tfwNs.page);
+        assertEquals(REQUIRED_TFW_SECTION, tfwNs.section);
+        assertEquals(TEST_SCRIBE_SECTION, tfwNs.component);
+        assertEquals(REQUIRED_TFW_ELEMENT, tfwNs.element);
+        assertEquals(REQUIRED_IMPRESSION_ACTION, tfwNs.action);
+
+        final List<ScribeItem> scribeItems = scribeItemsCaptor.getValue();
+        assertNotNull(scribeItems);
+    }
+
     public void testSetViewStyle() {
         final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(10);
         listAdapter = new TweetTimelineListAdapter.Builder(getContext())
@@ -150,14 +227,14 @@ public void testSetViewStyle() {
         assertEquals(R.style.tw__TweetDarkWithActionsStyle, tv.styleResId);
     }
 
-    public static class FakeTweetTimeline implements Timeline<Tweet> {
+    static class FakeTweetTimeline implements Timeline<Tweet> {
         private long numItems;
 
         /**
          * Constructs a FakeTweetTimeline
          * @param numItems the number of Tweets to return per call to next/previous
          */
-        public FakeTweetTimeline(long numItems) {
+        FakeTweetTimeline(long numItems) {
             this.numItems = numItems;
         }
 
@@ -167,7 +244,7 @@ public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) {
             final TimelineCursor timelineCursor = new TimelineCursor(tweets);
             final TimelineResult<Tweet> timelineResult
                     = new TimelineResult<>(timelineCursor, tweets);
-            cb.success(timelineResult, null);
+            cb.success(new Result<>(timelineResult, null));
         }
 
         @Override
@@ -176,7 +253,17 @@ public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) {
             final TimelineCursor timelineCursor = new TimelineCursor(tweets);
             final TimelineResult<Tweet> timelineResult
                     = new TimelineResult<>(timelineCursor, tweets);
-            cb.success(timelineResult, null);
+            cb.success(new Result<>(timelineResult, null));
+        }
+    }
+
+    /**
+     * Makes class public so it can be mocked on ART runtime.
+     * @param <T>
+     */
+    public class TestTimelineDelegate<T extends Identifiable> extends TimelineDelegate {
+        public TestTimelineDelegate(Timeline<T> timeline) {
+            super(timeline);
         }
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
index 35e560ef..b43e838c 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
@@ -65,8 +65,4 @@ public void testRenderTweet_beforeInBackground() {
     public void testGetTweetRepository() {
         assertNotNull(TweetUi.getInstance().getTweetRepository());
     }
-
-    public void testGetGuestAuthQueue() {
-        assertNotNull(TweetUi.getInstance().getGuestAuthQueue());
-    }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
index 96056874..13f818d6 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
@@ -22,13 +22,10 @@
 import io.fabric.sdk.android.KitStub;
 import io.fabric.sdk.android.services.concurrency.UnmetDependencyException;
 
-import com.twitter.sdk.android.core.AppSession;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 
-import static org.mockito.Mockito.mock;
-
 public class TweetUiTest extends FabricAndroidTestCase {
 
     private static final String ANY_CLIENT_NAME = "client";
@@ -106,12 +103,4 @@ public void testScribe_scribeClientNull() {
             fail("should have gracefully ignored events");
         }
     }
-
-
-    public void testClearSession() {
-        final AppSession session = mock(AppSession.class);
-        TwitterCore.getInstance().getAppSessionManager().setActiveSession(session);
-        tweetUi.clearAppSession(session.getId());
-        assertEquals(null, TwitterCore.getInstance().getAppSessionManager().getActiveSession());
-    }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTestCase.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTestCase.java
index b5ca8aeb..8b84babb 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTestCase.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTestCase.java
@@ -23,11 +23,11 @@
 import com.squareup.picasso.Picasso;
 import com.squareup.picasso.RequestCreator;
 import com.twitter.sdk.android.core.Session;
+import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.TwitterCoreTestUtils;
-import com.twitter.sdk.android.core.services.StatusesService;
 
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -46,10 +46,7 @@
     protected TweetUi tweetUi;
 
     // mocks
-    protected TweetUiAuthRequestQueue guestAuthQueue;
-    protected TweetUiAuthRequestQueue userAuthQueue;
     protected Picasso picasso;
-    private StatusesService statusesService;
     protected TweetScribeClient scribeClient;
     protected Handler mainHandler;
     private TwitterApiClient apiClient;
@@ -62,7 +59,7 @@ protected void setUp() throws Exception {
 
         FabricTestUtils.resetFabric();
         final TwitterCore twitterCore = TwitterCoreTestUtils.createTwitterCore(
-                new TwitterAuthConfig("", ""), clients);
+                new TwitterAuthConfig("", ""), clients, apiClient);
 
         // Initialize Fabric with mock executor so that kit#doInBackground() will not be called
         // during kit initialization.
@@ -77,8 +74,8 @@ protected void setUp() throws Exception {
         Fabric.with(fabric);
 
         tweetUi = TweetUi.getInstance();
-        final TweetRepository tweetRepository = new TweetRepository(mainHandler, userAuthQueue,
-                guestAuthQueue);
+        final TweetRepository tweetRepository = new TweetRepository(mainHandler,
+                mock(SessionManager.class), twitterCore);
         tweetUi.setTweetRepository(tweetRepository);
         tweetUi.setImageLoader(picasso);
     }
@@ -92,16 +89,12 @@ protected void tearDown() throws Exception {
 
     private void createMocks() {
         mainHandler = mock(Handler.class);
-        guestAuthQueue = mock(TestTweetUiAuthRequestQueue.class);
-        userAuthQueue = mock(TestTweetUiAuthRequestQueue.class);
         picasso = MockUtils.mockPicasso(mock(Picasso.class), mock(RequestCreator.class));
 
-        statusesService = mock(StatusesService.class);
-
         scribeClient = mock(TweetScribeClient.class);
 
         apiClient = mock(TwitterApiClient.class);
-        MockUtils.mockStatusesServiceClient(apiClient, statusesService);
+        MockUtils.mockApiClient(apiClient);
 
         clients = mock(ConcurrentHashMap.class);
         MockUtils.mockClients(clients, apiClient);
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
index 07226a78..3ef9e265 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
@@ -23,18 +23,18 @@
 import io.fabric.sdk.android.FabricTestUtils;
 import io.fabric.sdk.android.KitStub;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.models.Card;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
+import com.twitter.sdk.android.core.models.TweetEntities;
 import com.twitter.sdk.android.core.models.UserBuilder;
 
-import static org.mockito.Mockito.*;
-
 public class TweetUtilsTest extends FabricAndroidTestCase {
-    private static final String A_FULL_PERMALINK = "https://twitter.com/jack/status/20";
+    private static final String A_FULL_PERMALINK =
+            "https://twitter.com/jack/status/20?ref_src=twsrc%5Etwitterkit";
     private static final String A_PERMALINK_WITH_NO_SCREEN_NAME
-            = "https://twitter.com/twitter_unknown/status/20";
+            = "https://twitter.com/twitter_unknown/status/20?ref_src=twsrc%5Etwitterkit";
     private static final String A_VALID_SCREEN_NAME = "jack";
     private static final int A_VALID_TWEET_ID = 20;
     private static final int AN_INVALID_TWEET_ID = 0;
@@ -43,7 +43,7 @@ public void testLoadTweet_beforeKitStart() {
         FabricTestUtils.resetFabric();
         try {
             FabricTestUtils.with(getContext(), new KitStub<TwitterCore>());
-            TweetUtils.loadTweet(TestFixtures.TEST_TWEET_ID, (Callback) null);
+            TweetUtils.loadTweet(TestFixtures.TEST_TWEET_ID, null);
             fail("IllegalStateException not thrown");
         } catch (IllegalStateException e) {
             assertEquals(TweetUi.NOT_STARTED_ERROR, e.getMessage());
@@ -58,7 +58,7 @@ public void testLoadTweets_beforeKitStart() {
         FabricTestUtils.resetFabric();
         try {
             FabricTestUtils.with(getContext(), new KitStub<TwitterCore>());
-            TweetUtils.loadTweets(TestFixtures.TWEET_IDS, (Callback) null);
+            TweetUtils.loadTweets(TestFixtures.TWEET_IDS, null);
             fail("IllegalStateException not thrown");
         } catch (IllegalStateException e) {
             assertEquals(TweetUi.NOT_STARTED_ERROR, e.getMessage());
@@ -172,4 +172,29 @@ public void testGetDisplayTweet_retweet() {
     public void testGetDisplayTweet_nonRetweet() {
         assertEquals(TestFixtures.TEST_TWEET, TweetUtils.getDisplayTweet(TestFixtures.TEST_TWEET));
     }
+
+    public void testShowQuoteTweet() {
+        final Tweet tweet = new TweetBuilder()
+                .copy(TestFixtures.TEST_TWEET)
+                .setQuotedStatus(TestFixtures.TEST_TWEET)
+                .build();
+        assertTrue(TweetUtils.showQuoteTweet(tweet));
+    }
+
+    public void testShowQuoteTweet_withCardAndQuoteTweet() {
+        final Tweet tweet = new TweetBuilder()
+                .setQuotedStatus(TestFixtures.TEST_TWEET)
+                .setCard(new Card(null, "Vine"))
+                .setEntities(new TweetEntities(null, null, null, null, null))
+                .build();
+        assertFalse(TweetUtils.showQuoteTweet(tweet));
+    }
+
+    public void testShowQuoteTweet_withMediaAndQuoteTweet() {
+        final Tweet tweet = new TweetBuilder()
+                .copy(TestFixtures.TEST_PHOTO_TWEET)
+                .setQuotedStatus(TestFixtures.TEST_TWEET)
+                .build();
+        assertFalse(TweetUtils.showQuoteTweet(tweet));
+    }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewAdapterTest.java
deleted file mode 100644
index b1d8899d..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewAdapterTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Tests the TweetViewAdapter which can accept Tweet objects and acts as a data provider to
- * ListViews.
- */
-public class TweetViewAdapterTest extends TweetUiTestCase {
-    private static final int TWEET_COUNT = 2;
-    private static final long[] TWEET_IDS = {20L, 30L};
-    private final List<Tweet> tweets = new ArrayList<>();
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        for (long tweetId: TWEET_IDS) {
-            final Tweet tweet = new TweetBuilder().setId(tweetId).build();
-            tweets.add(tweet);
-        }
-    }
-
-    @Override
-    protected void tearDown() throws Exception {
-        scrubClass(TweetViewAdapterTest.class);
-        super.tearDown();
-    }
-
-    public void testAdapter_construction() {
-        final TweetViewAdapter<CompactTweetView> adapter = new TweetViewAdapter<>(getContext());
-        assertEquals(0, adapter.getCount());
-        assertNotNull(adapter.getTweets());
-        assertTrue(adapter.getTweets().isEmpty());
-    }
-
-    public void testAdapter_constructionWithTweets() {
-        final TweetViewAdapter<CompactTweetView> adapter = new TweetViewAdapter<>(getContext(),
-                tweets);
-        BaseTweetView tweetView = (BaseTweetView) adapter.getView(0, null, null);
-        assertEquals(tweets.get(0).id, tweetView.getTweetId());
-        tweetView = (BaseTweetView) adapter.getView(1, null, null);
-        assertEquals(tweets.get(1).id, tweetView.getTweetId());
-        assertEquals(TWEET_COUNT, adapter.getCount());
-        assertNotNull(adapter.getTweets());
-        assertEquals(TWEET_COUNT, adapter.getTweets().size());
-    }
-
-    public void testAdapter_setTweets() {
-        final TweetViewAdapter<CompactTweetView> adapter = new TweetViewAdapter<>(getContext());
-        assertEquals(0, adapter.getCount());
-        adapter.setTweets(tweets);
-        assertEquals(TWEET_COUNT, adapter.getCount());
-        BaseTweetView tweetView = (BaseTweetView) adapter.getView(0, null, null);
-        assertEquals(tweets.get(0).id, tweetView.getTweetId());
-        tweetView = (BaseTweetView) adapter.getView(1, null, null);
-        assertEquals(tweets.get(1).id, tweetView.getTweetId());
-    }
-
-    public void testAdapter_setTweetsNull() {
-        final TweetViewAdapter<CompactTweetView> adapter = new TweetViewAdapter<>(getContext());
-        adapter.setTweets(null);
-        assertNotNull(adapter.getTweets());
-        assertEquals(0, adapter.getCount());
-    }
-
-    public void testAdapter_getTweets() {
-        final TweetViewAdapter<CompactTweetView> adapter = new TweetViewAdapter<>(getContext(),
-                tweets);
-        final List<Tweet> foundTweets = adapter.getTweets();
-        assertEquals(TWEET_COUNT, foundTweets.size());
-        for (int i = 0; i < foundTweets.size(); i++) {
-            assertEquals(TWEET_IDS[i], foundTweets.get(i).id);
-        }
-    }
-
-    public void testSetTweetById() {
-        final TweetViewAdapter<CompactTweetView> adapter = new TweetViewAdapter<>(getContext(),
-                tweets);
-        final Tweet tweet = adapter.getItem(0);
-        final Tweet differentTweetSameId = new TweetBuilder().setId(tweet.getId()).build();
-        adapter.setTweetById(differentTweetSameId);
-        assertEquals(tweet.getId(), adapter.getItem(0).getId());
-        assertNotSame(tweet, adapter.getItem(0));
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewFetchAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewFetchAdapterTest.java
deleted file mode 100644
index 1b285b7d..00000000
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewFetchAdapterTest.java
+++ /dev/null
@@ -1,127 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.os.Handler;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Tests the TweetViewFetchAdapter which can accept Tweet ids and retrieves the corresponding Tweet
- * objects across the network. Acts as a data provider to ListViews.
- */
-public class TweetViewFetchAdapterTest extends TweetUiTestCase {
-    private static final int TWEET_COUNT = 2;
-    private static final long[] TWEET_IDS = {20L, 30L};
-    private List<Long> tweetIds = new ArrayList<>();
-    private final List<Tweet> expectedTweets = new ArrayList<>();
-
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        for (long tweetId : TWEET_IDS) {
-            tweetIds.add(tweetId);
-            final Tweet tweet = new TweetBuilder().setId(tweetId).build();
-            expectedTweets.add(tweet);
-        }
-        final TweetRepository tweetRepository = new TestTweetRepository(mainHandler, userAuthQueue,
-                guestAuthQueue);
-        tweetUi.setTweetRepository(tweetRepository);
-    }
-
-    public void testAdapter_construction() {
-        final TweetViewFetchAdapter<CompactTweetView> adapter
-                = new TweetViewFetchAdapter<>(getContext());
-        assertEquals(0, adapter.getCount());
-        assertNotNull(adapter.getTweets());
-        assertTrue(adapter.getTweets().isEmpty());
-    }
-
-    public void testAdapter_constructionWithTweetIds() {
-        final TweetViewFetchAdapter<CompactTweetView> adapter
-                = new TweetViewFetchAdapter<>(getContext(), tweetIds);
-        assertEquals(2, adapter.getCount());
-        final BaseTweetView zerothTweet = (BaseTweetView) adapter.getView(0, null, null);
-        assertEquals(expectedTweets.get(0).id, zerothTweet.getTweetId());
-        final BaseTweetView firstTweet = (BaseTweetView) adapter.getView(1, null, null);
-        assertEquals(expectedTweets.get(1).id, firstTweet.getTweetId());
-        assertNotNull(adapter.getTweets());
-        assertEquals(TWEET_COUNT, adapter.getTweets().size());
-    }
-
-    public void testAdapter_setTweetIds() {
-        final TweetViewFetchAdapter<CompactTweetView> adapter
-                = new TweetViewFetchAdapter<>(getContext());
-        assertEquals(0, adapter.getCount());
-        adapter.setTweetIds(tweetIds);
-        assertEquals(2, adapter.getCount());
-        final BaseTweetView zerothTweet = (BaseTweetView) adapter.getView(0, null, null);
-        assertEquals(expectedTweets.get(0).id, zerothTweet.getTweetId());
-        final BaseTweetView firstTweet = (BaseTweetView) adapter.getView(1, null, null);
-        assertEquals(expectedTweets.get(1).id, firstTweet.getTweetId());
-    }
-
-    public void testAdapter_setTweetIdsNull() {
-        final TweetViewFetchAdapter<CompactTweetView> adapter
-                = new TweetViewFetchAdapter<>(getContext());
-        adapter.setTweetIds(null);
-        assertNotNull(adapter.getTweets());
-        assertEquals(0, adapter.getCount());
-    }
-
-    public void testAdapter_getTweets() {
-        final TweetViewFetchAdapter<CompactTweetView> adapter
-                = new TweetViewFetchAdapter<>(getContext(), tweetIds);
-        final List<Tweet> foundTweets = adapter.getTweets();
-        assertEquals(TWEET_COUNT, foundTweets.size());
-        for (int i = 0; i < foundTweets.size(); i++) {
-            assertEquals(TWEET_IDS[i], foundTweets.get(i).id);
-        }
-    }
-
-    /**
-     * TestTweetRepository with a loadTweets method that calls cb's success method with the
-     * requested Tweets immediately.
-     */
-    public class TestTweetRepository extends TweetRepository {
-        TestTweetRepository(Handler mainHandler, TweetUiAuthRequestQueue userAuthQueue,
-                TweetUiAuthRequestQueue guestAuthQueue) {
-            super(mainHandler, userAuthQueue, guestAuthQueue);
-        }
-
-        @Override
-        void loadTweets(List<Long> tweetIds, final Callback<List<Tweet>> cb) {
-            final List<Tweet> tweets = new ArrayList<>();
-            if (tweetIds == null) {
-                cb.success(new Result<>(tweets, null));
-                return;
-            }
-            for (long id : tweetIds) {
-                final Tweet tweet = new TweetBuilder().setId(id).build();
-                tweets.add(tweet);
-            }
-            cb.success(new Result<>(tweets, null));
-        }
-    }
-}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
index a04c6025..e454f067 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
@@ -60,23 +60,22 @@ TweetView createViewWithMocks(Context context, Tweet tweet, int styleResId,
     public void testInit() {
         super.testInit();
         final TweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(ImageView.GONE, view.mediaContainerView.getVisibility());
+        assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
     }
 
     @Override
     public void testInit_withEmptyTweet() {
         super.testInit();
         final TweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(ImageView.GONE, view.mediaContainerView.getVisibility());
+        assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
     }
 
     public void testInit_withPhotoTweet() {
         final TweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(ImageView.VISIBLE, view.mediaContainerView.getVisibility());
+        assertEquals(ImageView.VISIBLE, view.mediaContainer.getVisibility());
     }
 
     // Layout
-
     public void testLayout() {
         final TweetView tweetView = new TweetView(context, TestFixtures.TEST_TWEET);
         assertEquals(R.layout.tw__tweet, tweetView.getLayout());
@@ -92,4 +91,13 @@ public void testGetAspectRatio() {
         assertEquals(2, view.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(200, 100)), DELTA);
     }
+
+    public void testGetAspectRatioForPhotoEntity() {
+        final TweetView tweetView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
+
+        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(1));
+        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(2));
+        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(3));
+        assertEquals(1.0, tweetView.getAspectRatioForPhotoEntity(4));
+    }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java
index 041dbeaa..40e7d79e 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TwitterListTimelineTest.java
@@ -17,17 +17,12 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.GuestCallback;
-import com.twitter.sdk.android.core.services.ListService;
+import com.twitter.sdk.android.core.TwitterCore;
 
-import static org.mockito.Matchers.*;
-import static org.mockito.Mockito.*;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.verify;
 
 public class TwitterListTimelineTest extends TweetUiTestCase {
-    private static final String ILLEGAL_TWEET_UI_MESSAGE = "TweetUi instance must not be null";
     private static final Integer REQUIRED_DEFAULT_ITEMS_PER_REQUEST = 30;
     private static final Long TEST_LIST_ID = 128271137L;
     private static final String TEST_SLUG = "cool-accounts";
@@ -39,9 +34,8 @@
     private static final String REQUIRED_IMPRESSION_SECTION = "list";
 
     public void testConstructor() {
-        final TwitterListTimeline timeline = new TwitterListTimeline(tweetUi, TEST_LIST_ID,
+        final TwitterListTimeline timeline = new TwitterListTimeline(TEST_LIST_ID,
                 TEST_SLUG, TEST_OWNER_ID, TEST_OWNER_SCREEN_NAME, TEST_ITEMS_PER_REQUEST, true);
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(TEST_LIST_ID, timeline.listId);
         assertEquals(TEST_SLUG, timeline.slug);
         assertEquals(TEST_OWNER_ID, timeline.ownerId);
@@ -50,20 +44,10 @@ public void testConstructor() {
         assertTrue(timeline.includeRetweets);
     }
 
-    public void testConstructor_nullTweetUi() {
-        try {
-            new TwitterListTimeline(null, null, null, null, null, null, null);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
     // most api arguments should default to Null to allow the backend to determine default behavior
     public void testConstructor_defaults() {
-        final TwitterListTimeline timeline = new TwitterListTimeline(tweetUi, TEST_LIST_ID, null,
+        final TwitterListTimeline timeline = new TwitterListTimeline(TEST_LIST_ID, null,
                 null, null, null, null);
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(TEST_LIST_ID, timeline.listId);
         assertNull(timeline.slug);
         assertNull(timeline.ownerId);
@@ -74,22 +58,15 @@ public void testConstructor_defaults() {
 
     public void testCreateListTimelineRequest() {
         // build a timeline with test params
-        final TwitterListTimeline timeline = new TwitterListTimeline(tweetUi, TEST_LIST_ID,
+        final TwitterListTimeline timeline = new TwitterListTimeline(TEST_LIST_ID,
                 TEST_SLUG, TEST_OWNER_ID, TEST_OWNER_SCREEN_NAME, TEST_ITEMS_PER_REQUEST, true);
-        // create a request (Callback<TwitterApiClient>) directly
-        final Callback<TwitterApiClient> request = timeline.createListTimelineRequest(TEST_SINCE_ID,
-                TEST_MAX_ID, mock(Callback.class));
-        final TwitterApiClient mockTwitterApiClient = mock(TwitterApiClient.class);
-        final ListService mockListService = mock(ListService.class);
-        when(mockTwitterApiClient.getListService()).thenReturn(mockListService);
-        // execute request with mock auth'd TwitterApiClient (auth queue tested separately)
-        request.success(new Result<>(mockTwitterApiClient, null));
-        // assert list service is requested once
-        verify(mockTwitterApiClient).getListService();
+
+        timeline.createListTimelineRequest(TEST_SINCE_ID, TEST_MAX_ID);
+
         // assert twitterListTimeline call is made with the correct arguments
-        verify(mockListService).statuses(eq(TEST_LIST_ID), eq(TEST_SLUG),
-                eq(TEST_OWNER_SCREEN_NAME), eq(TEST_OWNER_ID), eq(TEST_SINCE_ID), eq(TEST_MAX_ID),
-                eq(TEST_ITEMS_PER_REQUEST), eq(true), eq(true), any(GuestCallback.class));
+        verify(TwitterCore.getInstance().getApiClient().getListService()).statuses(eq(TEST_LIST_ID),
+                eq(TEST_SLUG), eq(TEST_OWNER_SCREEN_NAME), eq(TEST_OWNER_ID), eq(TEST_SINCE_ID),
+                eq(TEST_MAX_ID), eq(TEST_ITEMS_PER_REQUEST), eq(true), eq(true));
     }
 
     public void testGetScribeSection() {
@@ -101,24 +78,22 @@ public void testGetScribeSection() {
     /* Builder */
 
     public void testBuilder_viaLlistId() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi)
+        final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .id(TEST_LIST_ID)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .includeRetweets(true)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(TEST_LIST_ID, timeline.listId);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
         assertTrue(timeline.includeRetweets);
     }
 
     public void testBuilder_viaSlugOwnerId() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi)
+        final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .slugWithOwnerId(TEST_SLUG, TEST_OWNER_ID)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .includeRetweets(true)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(TEST_SLUG, timeline.slug);
         assertEquals(TEST_OWNER_ID, timeline.ownerId);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
@@ -126,46 +101,35 @@ public void testBuilder_viaSlugOwnerId() {
     }
 
     public void testBuilder_viaSlugOwnerScreenName() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi)
+        final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .slugWithOwnerScreenName(TEST_SLUG, TEST_OWNER_SCREEN_NAME)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .includeRetweets(true)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(TEST_SLUG, timeline.slug);
         assertEquals(TEST_OWNER_SCREEN_NAME, timeline.ownerScreenName);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
         assertTrue(timeline.includeRetweets);
     }
 
-    public void testBuilder_nullTweetUi() {
-        try {
-            new TwitterListTimeline.Builder(null);
-            fail();
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
     // api arguments should default to Null to allow the backend to determine default behavior
     public void testBuilder_defaults() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi)
+        final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .id(TEST_LIST_ID)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
         assertNull(timeline.includeRetweets);
     }
 
     public void testBuilder_listId() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi)
+        final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .id(TEST_LIST_ID)
                 .build();
         assertEquals(TEST_LIST_ID, timeline.listId);
     }
 
     public void testBuilder_slugWithOwnerId() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi)
+        final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .slugWithOwnerId(TEST_SLUG, TEST_OWNER_ID)
                 .build();
         assertEquals(TEST_SLUG, timeline.slug);
@@ -173,7 +137,7 @@ public void testBuilder_slugWithOwnerId() {
     }
 
     public void testBuilder_slugWithOwnerScreenName() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi)
+        final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .slugWithOwnerScreenName(TEST_SLUG, TEST_OWNER_SCREEN_NAME)
                 .build();
         assertEquals(TEST_SLUG, timeline.slug);
@@ -181,7 +145,7 @@ public void testBuilder_slugWithOwnerScreenName() {
     }
 
     public void testBuilder_maxItemsPerRequest() {
-        final TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi)
+        final TwitterListTimeline timeline = new TwitterListTimeline.Builder()
                 .id(TEST_LIST_ID)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
@@ -189,20 +153,20 @@ public void testBuilder_maxItemsPerRequest() {
     }
 
     public void testBuilder_includeRetweets() {
-        TwitterListTimeline timeline = new TwitterListTimeline.Builder(tweetUi).id(TEST_LIST_ID)
+        TwitterListTimeline timeline = new TwitterListTimeline.Builder().id(TEST_LIST_ID)
                 .build();
         assertNull(timeline.includeRetweets);
-        timeline = new TwitterListTimeline.Builder(tweetUi).id(TEST_LIST_ID).includeRetweets(true)
+        timeline = new TwitterListTimeline.Builder().id(TEST_LIST_ID).includeRetweets(true)
             .build();
         assertTrue(timeline.includeRetweets);
-        timeline = new TwitterListTimeline.Builder(tweetUi).id(TEST_LIST_ID).includeRetweets(false)
+        timeline = new TwitterListTimeline.Builder().id(TEST_LIST_ID).includeRetweets(false)
                 .build();
         assertFalse(timeline.includeRetweets);
     }
 
     public void testBuilder_noIdOrSlugOwnerPair() {
         try {
-            new TwitterListTimeline.Builder(tweetUi).build();
+            new TwitterListTimeline.Builder().build();
             fail("Expected IllegalArgumentException to be thrown");
         } catch (IllegalStateException e) {
             assertEquals("must specify either a list id or slug/owner pair", e.getMessage());
@@ -211,7 +175,7 @@ public void testBuilder_noIdOrSlugOwnerPair() {
 
     public void testBuilder_bothIdAndSlugOwnerPair() {
         try {
-            new TwitterListTimeline.Builder(tweetUi)
+            new TwitterListTimeline.Builder()
                     .id(TEST_LIST_ID)
                     .slugWithOwnerId(TEST_SLUG, TEST_OWNER_ID)
                     .build();
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java
index 44c68c7b..74832a05 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/UserTimelineTest.java
@@ -18,15 +18,11 @@
 package com.twitter.sdk.android.tweetui;
 
 import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.GuestCallback;
-import com.twitter.sdk.android.core.services.StatusesService;
+import com.twitter.sdk.android.core.TwitterCore;
 
 import static org.mockito.Mockito.*;
 
 public class UserTimelineTest extends TweetUiTestCase {
-    private static final String ILLEGAL_TWEET_UI_MESSAGE = "TweetUi instance must not be null";
     private static final Integer REQUIRED_DEFAULT_ITEMS_PER_REQUEST = 30;
     private static final Integer TEST_ITEMS_PER_REQUEST = 100;
     private static final Long TEST_SINCE_ID = 1000L;
@@ -34,9 +30,8 @@
     private static final String REQUIRED_IMPRESSION_SECTION = "user";
 
     public void testConstructor() {
-        final UserTimeline timeline = new UserTimeline(tweetUi, TestFixtures.TEST_USER.id,
+        final UserTimeline timeline = new UserTimeline(TestFixtures.TEST_USER.id,
                 TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, true, true);
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals((Long) TestFixtures.TEST_USER.id, timeline.userId);
         assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
@@ -44,19 +39,9 @@ public void testConstructor() {
         assertTrue(timeline.includeRetweets);
     }
 
-    public void testConstructor_nullTweetUi() {
-        try {
-            new UserTimeline(null, null, null, null, null, null);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
     // most api arguments should default to Null to allow the backend to determine default behavior
     public void testConstructor_defaults() {
-        final UserTimeline timeline = new UserTimeline(tweetUi, null, null, null, null, null);
-        assertEquals(tweetUi, timeline.tweetUi);
+        final UserTimeline timeline = new UserTimeline(null, null, null, null, null);
         assertNull(timeline.userId);
         assertNull(timeline.screenName);
         assertNull(timeline.maxItemsPerRequest);
@@ -66,43 +51,36 @@ public void testConstructor_defaults() {
     }
 
     public void testNext_createsCorrectRequest() {
-        final UserTimeline timeline = spy(new TestUserTimeline(tweetUi, TestFixtures.TEST_USER.id,
+        final UserTimeline timeline = spy(new TestUserTimeline(TestFixtures.TEST_USER.id,
                 TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null));
         timeline.next(TEST_SINCE_ID, mock(Callback.class));
         verify(timeline, times(1)).createUserTimelineRequest(eq(TEST_SINCE_ID),
-                isNull(Long.class), any(Callback.class));
-        verify(timeline, times(1)).addRequest(any(Callback.class));
+                isNull(Long.class));
     }
 
     public void testPrevious_createsCorrectRequest() {
-        final UserTimeline timeline = spy(new TestUserTimeline(tweetUi, TestFixtures.TEST_USER.id,
+        final UserTimeline timeline = spy(new TestUserTimeline(TestFixtures.TEST_USER.id,
                 TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null));
         timeline.previous(TEST_MAX_ID, mock(Callback.class));
         // intentionally decrementing the maxId which is passed through to the request
         verify(timeline, times(1)).createUserTimelineRequest(isNull(Long.class),
-                eq(TEST_MAX_ID - 1), any(Callback.class));
-        verify(timeline, times(1)).addRequest(any(Callback.class));
+                eq(TEST_MAX_ID - 1));
     }
 
     public void testCreateUserTimelineRequest() {
         // build a timeline with test params
-        final UserTimeline timeline = new UserTimeline(tweetUi, TestFixtures.TEST_USER.id,
+        final UserTimeline timeline = new UserTimeline(TestFixtures.TEST_USER.id,
                 TestFixtures.TEST_USER.screenName, TEST_ITEMS_PER_REQUEST, null, null);
-        // create a request (Callback<TwitterApiClient>) directly
-        final Callback<TwitterApiClient> request = timeline.createUserTimelineRequest(TEST_SINCE_ID,
-                TEST_MAX_ID, mock(Callback.class));
-        final TwitterApiClient mockTwitterApiClient = mock(TwitterApiClient.class);
-        final StatusesService mockStatusesService = mock(StatusesService.class);
-        when(mockTwitterApiClient.getStatusesService()).thenReturn(mockStatusesService);
-        // execute request with mock auth'd TwitterApiClient (auth queue tested separately)
-        request.success(new Result<>(mockTwitterApiClient, null));
-        // assert statuses service is requested once
-        verify(mockTwitterApiClient, times(1)).getStatusesService();
+
+        // create a request directly
+        timeline.createUserTimelineRequest(TEST_SINCE_ID, TEST_MAX_ID);
+
         // assert userTimeline call is made with the correct arguments
-        verify(mockStatusesService, times(1)).userTimeline(eq(TestFixtures.TEST_USER.id),
-                eq(TestFixtures.TEST_USER.screenName), eq(TEST_ITEMS_PER_REQUEST),
-                eq(TEST_SINCE_ID), eq(TEST_MAX_ID), eq(false), eq(true), isNull(Boolean.class),
-                isNull(Boolean.class), any(GuestCallback.class));
+        verify(TwitterCore.getInstance().getApiClient().getStatusesService())
+                .userTimeline(eq(TestFixtures.TEST_USER.id),
+                        eq(TestFixtures.TEST_USER.screenName), eq(TEST_ITEMS_PER_REQUEST),
+                        eq(TEST_SINCE_ID), eq(TEST_MAX_ID), eq(false), eq(true),
+                        isNull(Boolean.class), isNull(Boolean.class));
     }
 
     public void testGetScribeSection() {
@@ -113,14 +91,13 @@ public void testGetScribeSection() {
     /* Builder */
 
     public void testBuilder() {
-        final UserTimeline timeline = new UserTimeline.Builder(tweetUi)
+        final UserTimeline timeline = new UserTimeline.Builder()
                 .userId(TestFixtures.TEST_USER.id)
                 .screenName(TestFixtures.TEST_USER.screenName)
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .includeReplies(true)
                 .includeRetweets(true)
                 .build();
-        assertEquals(tweetUi, timeline.tweetUi);
         assertEquals((Long) TestFixtures.TEST_USER.id, timeline.userId);
         assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
@@ -128,15 +105,9 @@ public void testBuilder() {
         assertTrue(timeline.includeRetweets);
     }
 
-    public void testBuilder_empty() {
-        final UserTimeline timeline = new UserTimeline.Builder().build();
-        assertNotNull(timeline.tweetUi);
-    }
-
     // api arguments should default to Null to allow the backend to determine default behavior
     public void testBuilder_defaults() {
-        final UserTimeline timeline = new UserTimeline.Builder(tweetUi).build();
-        assertEquals(tweetUi, timeline.tweetUi);
+        final UserTimeline timeline = new UserTimeline.Builder().build();
         assertNull(timeline.userId);
         assertNull(timeline.screenName);
         assertEquals(REQUIRED_DEFAULT_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
@@ -145,32 +116,23 @@ public void testBuilder_defaults() {
         assertFalse(timeline.includeReplies);
     }
 
-    public void testBuilder_nullTweetUi() {
-        try {
-            new UserTimeline.Builder(null);
-            fail();
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
     public void testBuilder_userId() {
         final Long USER_ID = TestFixtures.TEST_USER.id;
-        final UserTimeline timeline = new UserTimeline.Builder(tweetUi)
+        final UserTimeline timeline = new UserTimeline.Builder()
                 .userId(USER_ID)
                 .build();
         assertEquals(USER_ID, timeline.userId);
     }
 
     public void testBuilder_screenName() {
-        final UserTimeline timeline = new UserTimeline.Builder(tweetUi)
+        final UserTimeline timeline = new UserTimeline.Builder()
                 .screenName(TestFixtures.TEST_USER.screenName)
                 .build();
         assertEquals(TestFixtures.TEST_USER.screenName, timeline.screenName);
     }
 
     public void testBuilder_maxItemsPerRequest() {
-        final UserTimeline timeline = new UserTimeline.Builder(tweetUi)
+        final UserTimeline timeline = new UserTimeline.Builder()
                 .maxItemsPerRequest(TEST_ITEMS_PER_REQUEST)
                 .build();
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
@@ -178,20 +140,20 @@ public void testBuilder_maxItemsPerRequest() {
 
     public void testBuilder_includeReplies() {
         // null includeReplies defaults to false
-        UserTimeline timeline = new UserTimeline.Builder(tweetUi).build();
+        UserTimeline timeline = new UserTimeline.Builder().build();
         assertFalse(timeline.includeReplies);
-        timeline = new UserTimeline.Builder(tweetUi).includeReplies(true).build();
+        timeline = new UserTimeline.Builder().includeReplies(true).build();
         assertTrue(timeline.includeReplies);
-        timeline = new UserTimeline.Builder(tweetUi).includeReplies(false).build();
+        timeline = new UserTimeline.Builder().includeReplies(false).build();
         assertFalse(timeline.includeReplies);
     }
 
     public void testBuilder_includeRetweets() {
-        UserTimeline timeline = new UserTimeline.Builder(tweetUi).build();
+        UserTimeline timeline = new UserTimeline.Builder().build();
         assertNull(timeline.includeRetweets);
-        timeline = new UserTimeline.Builder(tweetUi).includeRetweets(true).build();
+        timeline = new UserTimeline.Builder().includeRetweets(true).build();
         assertTrue(timeline.includeRetweets);
-        timeline = new UserTimeline.Builder(tweetUi).includeRetweets(false).build();
+        timeline = new UserTimeline.Builder().includeRetweets(false).build();
         assertFalse(timeline.includeRetweets);
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java
index bbc421e1..e8206240 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeViewTest.java
@@ -19,6 +19,7 @@
 
 import android.view.View;
 
+import com.twitter.sdk.android.core.models.Card;
 import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.core.models.VideoInfo;
 import com.twitter.sdk.android.tweetui.TestFixtures;
@@ -33,7 +34,7 @@ public void setUp() throws Exception {
     }
 
     public void testInitialViewState() {
-        assertEquals(View.GONE, view.gifBadge.getVisibility());
+        assertEquals(View.GONE, view.badge.getVisibility());
         assertEquals(View.GONE, view.videoDuration.getVisibility());
     }
 
@@ -41,7 +42,7 @@ public void testSetMediaEntity_withAnimatedGif() {
         final MediaEntity entity = TestFixtures.createEntityWithAnimatedGif(null);
         view.setMediaEntity(entity);
 
-        assertEquals(View.VISIBLE, view.gifBadge.getVisibility());
+        assertEquals(View.VISIBLE, view.badge.getVisibility());
         assertEquals(View.GONE, view.videoDuration.getVisibility());
     }
 
@@ -50,7 +51,7 @@ public void testSetMediaEntity_withVideo() {
         final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
         view.setMediaEntity(entity);
 
-        assertEquals(View.GONE, view.gifBadge.getVisibility());
+        assertEquals(View.GONE, view.badge.getVisibility());
         assertEquals(View.VISIBLE, view.videoDuration.getVisibility());
         assertEquals("0:01", view.videoDuration.getText());
     }
@@ -59,7 +60,7 @@ public void testSetMediaEntity_withNullVideoInfo() {
         final MediaEntity entity = TestFixtures.createEntityWithVideo(null);
         view.setMediaEntity(entity);
 
-        assertEquals(View.GONE, view.gifBadge.getVisibility());
+        assertEquals(View.GONE, view.badge.getVisibility());
         assertEquals(View.VISIBLE, view.videoDuration.getVisibility());
         assertEquals("0:00", view.videoDuration.getText());
     }
@@ -68,7 +69,23 @@ public void testSetMediaEntity_withImage() {
         final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(null);
         view.setMediaEntity(entity);
 
-        assertEquals(View.GONE, view.gifBadge.getVisibility());
+        assertEquals(View.GONE, view.badge.getVisibility());
+        assertEquals(View.GONE, view.videoDuration.getVisibility());
+    }
+
+    public void testSetEntity_withVineCard() {
+        final Card vineCard = TestFixtures.sampleValidVineCard();
+        view.setCard(vineCard);
+
+        assertEquals(View.VISIBLE, view.badge.getVisibility());
+        assertEquals(View.GONE, view.videoDuration.getVisibility());
+    }
+
+    public void testSetEntity_withInvalidVineCard() {
+        final Card vineCard = TestFixtures.sampleInvalidVineCard();
+        view.setCard(vineCard);
+
+        assertEquals(View.GONE, view.badge.getVisibility());
         assertEquals(View.GONE, view.videoDuration.getVisibility());
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
index f65b7115..a264a7fd 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
@@ -88,6 +88,15 @@ public void testSetTranslate() {
         assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
     }
 
+    public void testCanBeSwiped_withScaleEqualOne() {
+        assertTrue(view.canBeSwiped());
+    }
+
+    public void testCanBeSwiped_withScaleGreaterThanOne() {
+        view.setScale(2, 0, 0);
+        assertFalse(view.canBeSwiped());
+    }
+
     static class MatrixBuilder {
         private final Matrix matrix = new Matrix();
 
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
similarity index 57%
rename from tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
rename to tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
index bbb81446..170b865e 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
@@ -30,74 +30,72 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
-public class TweetMediaViewTest extends FabricAndroidTestCase {
+public class OverlayImageViewTest extends FabricAndroidTestCase {
     public final int[] TEST_STATE = new int[]{0, 0};
     public final int TEST_HEIGHT = 2;
     public final int TEST_WIDTH = 4;
 
     public void testOnDraw() {
-        final TweetMediaView tweetMediaView = new TweetMediaView(getContext());
-        final TweetMediaView.Overlay overlay = mock(TweetMediaView.Overlay.class);
+        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
+        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
         final Canvas canvas = new Canvas();
-        tweetMediaView.overlay = overlay;
-        tweetMediaView.draw(canvas);
+        overlayImageView.overlay = overlay;
+        overlayImageView.draw(canvas);
 
         verify(overlay).draw(canvas);
     }
 
     public void testDrawableStateChanged() {
-        final TweetMediaView tweetMediaView = new TweetMediaView(getContext());
-        final TweetMediaView.Overlay overlay = mock(TweetMediaView.Overlay.class);
-        tweetMediaView.overlay = overlay;
-        tweetMediaView.drawableStateChanged();
+        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
+        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
+        overlayImageView.overlay = overlay;
+        overlayImageView.drawableStateChanged();
 
         verify(overlay).setDrawableState(any(int[].class));
     }
 
     public void testOnMeasure() {
-        final TweetMediaView tweetMediaView = new TweetMediaView(getContext());
-        final TweetMediaView.Overlay overlay = mock(TweetMediaView.Overlay.class);
-        tweetMediaView.overlay = overlay;
-        tweetMediaView.measure(0, 0);
+        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
+        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
+        overlayImageView.overlay = overlay;
+        overlayImageView.measure(0, 0);
 
         verify(overlay).setDrawableBounds(anyInt(), anyInt());
     }
 
     public void testOnSizeChanged() {
-        final TweetMediaView tweetMediaView = new TweetMediaView(getContext());
-        final TweetMediaView.Overlay overlay = mock(TweetMediaView.Overlay.class);
-        tweetMediaView.overlay = overlay;
-        tweetMediaView.onSizeChanged(TEST_WIDTH, TEST_HEIGHT, 0, 0);
+        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
+        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
+        overlayImageView.overlay = overlay;
+        overlayImageView.onSizeChanged(TEST_WIDTH, TEST_HEIGHT, 0, 0);
 
         verify(overlay).setDrawableBounds(TEST_WIDTH, TEST_HEIGHT);
     }
 
     public void testSetOverlayDrawable() {
-        final TweetMediaView tweetMediaView = new TweetMediaView(getContext());
-        final TweetMediaView.Overlay overlay = mock(TweetMediaView.Overlay.class);
-        tweetMediaView.overlay = overlay;
+        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
+        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
+        overlayImageView.overlay = overlay;
         final Drawable drawable = mock(Drawable.class);
-        tweetMediaView.setOverlayDrawable(drawable);
+        overlayImageView.setOverlayDrawable(drawable);
 
-        verify(overlay).cleanupDrawable(tweetMediaView);
-        assertNotNull(tweetMediaView.overlay);
-        assertEquals(drawable, tweetMediaView.overlay.drawable);
+        verify(overlay).cleanupDrawable(overlayImageView);
+        assertNotNull(overlayImageView.overlay);
+        assertEquals(drawable, overlayImageView.overlay.drawable);
     }
 
     public void testSetOverlayDrawable_nullDrawable() {
-        final TweetMediaView tweetMediaView = new TweetMediaView(getContext());
-        final TweetMediaView.Overlay overlay = mock(TweetMediaView.Overlay.class);
-        tweetMediaView.overlay = overlay;
-        tweetMediaView.setOverlayDrawable(null);
-
-        verify(overlay).cleanupDrawable(tweetMediaView);
-        assertNotNull(tweetMediaView.overlay);
-        assertNull(tweetMediaView.overlay.drawable);
+        final OverlayImageView overlayImageView = new OverlayImageView(getContext());
+        final OverlayImageView.Overlay overlay = mock(OverlayImageView.Overlay.class);
+        overlayImageView.overlay = overlay;
+        overlayImageView.setOverlayDrawable(null);
+
+        verifyNoMoreInteractions(overlay);
     }
 
     public void testOverlayDraw() {
         final Drawable drawable = mock(Drawable.class);
-        final TweetMediaView.Overlay overlay = new TweetMediaView.Overlay(drawable);
+        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
         final Canvas canvas = new Canvas();
         overlay.draw(canvas);
 
@@ -107,7 +105,7 @@ public void testOverlayDraw() {
     public void testOverlaySetDrawableState() {
         final Drawable drawable = mock(Drawable.class);
         when(drawable.isStateful()).thenReturn(true);
-        final TweetMediaView.Overlay overlay = new TweetMediaView.Overlay(drawable);
+        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
         overlay.setDrawableState(TEST_STATE);
 
         verify(drawable).isStateful();
@@ -117,7 +115,7 @@ public void testOverlaySetDrawableState() {
     public void testOverlaySetDrawableState_drawableNotStateful() {
         final Drawable drawable = mock(Drawable.class);
         when(drawable.isStateful()).thenReturn(false);
-        final TweetMediaView.Overlay overlay = new TweetMediaView.Overlay(drawable);
+        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
         overlay.setDrawableState(TEST_STATE);
 
         verify(drawable).isStateful();
@@ -126,7 +124,7 @@ public void testOverlaySetDrawableState_drawableNotStateful() {
 
     public void testOverlaySetDrawableBounds() {
         final Drawable drawable = mock(Drawable.class);
-        final TweetMediaView.Overlay overlay = new TweetMediaView.Overlay(drawable);
+        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
         overlay.setDrawableBounds(TEST_WIDTH, TEST_HEIGHT);
 
         verify(drawable).setBounds(0, 0, TEST_WIDTH, TEST_HEIGHT);
@@ -135,7 +133,7 @@ public void testOverlaySetDrawableBounds() {
     public void testCleanupDrawable() {
         final ImageView imageView = mock(ImageView.class);
         final Drawable drawable = mock(Drawable.class);
-        final TweetMediaView.Overlay overlay = new TweetMediaView.Overlay(drawable);
+        final OverlayImageView.Overlay overlay = new OverlayImageView.Overlay(drawable);
         overlay.cleanupDrawable(imageView);
 
         verify(imageView).unscheduleDrawable(drawable);
diff --git a/tweet-ui/src/debug/AndroidManifest.xml b/tweet-ui/src/debug/AndroidManifest.xml
index d25b26f3..c6bf5bcd 100644
--- a/tweet-ui/src/debug/AndroidManifest.xml
+++ b/tweet-ui/src/debug/AndroidManifest.xml
@@ -24,8 +24,6 @@
         android:largeHeap="true"
         tools:ignore="UnusedAttribute">
 
-        <activity android:name=".TestActivity"/>
-
         <uses-library android:name="android.test.runner" />
     </application>
 </manifest>
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestCollectionTimeline.java b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestCollectionTimeline.java
index 22914c39..ad8d2508 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestCollectionTimeline.java
+++ b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestCollectionTimeline.java
@@ -17,24 +17,18 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.models.TwitterCollection;
 
-public class TestCollectionTimeline extends CollectionTimeline {
+import retrofit2.Call;
 
-    TestCollectionTimeline(TweetUi tweetUi, Long collectionId, Integer count) {
-        super(tweetUi, collectionId, count);
-    }
+public class TestCollectionTimeline extends CollectionTimeline {
 
-    @Override
-    public void addRequest(Callback<TwitterApiClient> cb) {
-        super.addRequest(cb);
+    TestCollectionTimeline(Long collectionId, Integer count) {
+        super(collectionId, count);
     }
 
     @Override
-    public Callback<TwitterApiClient> createCollectionRequest(Long minPosition, Long maxPosition,
-            Callback<TimelineResult<Tweet>> cb) {
-        return super.createCollectionRequest(minPosition, maxPosition, cb);
+    public Call<TwitterCollection> createCollectionRequest(Long minPosition, Long maxPosition) {
+        return super.createCollectionRequest(minPosition, maxPosition);
     }
 }
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestFixtures.java b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestFixtures.java
index 7e6c802d..f442649a 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestFixtures.java
+++ b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestFixtures.java
@@ -17,6 +17,10 @@
 
 package com.twitter.sdk.android.tweetui;
 
+import com.twitter.sdk.android.core.internal.VineCardUtils;
+import com.twitter.sdk.android.core.models.BindingValues;
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.ImageValue;
 import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
@@ -24,11 +28,15 @@
 import com.twitter.sdk.android.core.models.UrlEntity;
 import com.twitter.sdk.android.core.models.User;
 import com.twitter.sdk.android.core.models.UserBuilder;
+import com.twitter.sdk.android.core.models.UserValue;
 import com.twitter.sdk.android.core.models.VideoInfo;
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 public final class TestFixtures {
     public static final String CONSUMER_KEY = "consumer_key";
@@ -72,21 +80,29 @@
     public static final String INVALID_TIMESTAMP_INPUT = "Dec 12, 2013";
 
     public static final String TEST_PHOTO_URL = "https://pbs.twimg.com/media/someimage.jpg";
+    public static final String TEST_URL = "https://twitter.com/";
+    public static final String TEST_STATUS_WITH_LINK = "A test Tweet status message. " + TEST_URL;
 
     public static final String TEST_CONTENT_DESCRIPTION
             = "Alfred Verbose Named. A test Tweet status message.. Jun 6, 2012.";
 
-    public static final String TEST_PERMALINK_ONE = "https://twitter.com/longestusername/status/1";
-    public static final String TEST_PERMALINK_TWO = "https://twitter.com/longestusername/status/2";
+    public static final String TEST_PERMALINK_ONE =
+            "https://twitter.com/longestusername/status/1?ref_src=twsrc%5Etwitterkit";
+    public static final String TEST_PERMALINK_TWO =
+            "https://twitter.com/longestusername/status/2?ref_src=twsrc%5Etwitterkit";
     public static final String TEST_PERMALINK_UNKNOWN_USER
-            = "https://twitter.com/twitter_unknown/status/1";
+            = "https://twitter.com/twitter_unknown/status/1?ref_src=twsrc%5Etwitterkit";
 
     public static final Tweet TEST_TWEET = createTweet(1L, TEST_USER, TEST_STATUS, TEST_TIMESTAMP,
             false);
+    public static final Tweet TEST_TWEET_LINK = createTweet(1L, TEST_USER, TEST_STATUS_WITH_LINK, TEST_TIMESTAMP,
+            false);
     public static final Tweet TEST_FAVORITED_TWEET = createTweet(1L, TEST_USER, TEST_STATUS,
             TEST_TIMESTAMP, true);
     public static final Tweet TEST_PHOTO_TWEET = createPhotoTweet(2L, TEST_USER, TEST_STATUS,
             TEST_TIMESTAMP, TEST_PHOTO_URL);
+    public static final Tweet TEST_MULTIPLE_PHOTO_TWEET = createMultiplePhotosTweet(4, 2L, TEST_USER, TEST_STATUS,
+            TEST_TIMESTAMP, TEST_PHOTO_URL);
     // Empty Tweet has empty string name, username, status, and timestamp fields
     public static final Tweet EMPTY_TWEET = createTweet(-1L, EMPTY_USER, EMPTY_STATUS,
             EMPTY_TIMESTAMP, false);
@@ -128,22 +144,43 @@ static Tweet createTweet(long id, User user, String text, String timestamp,
                 .setText(text)
                 .setCreatedAt(timestamp)
                 .setFavorited(isFavorited)
+                .setEntities(new TweetEntities(null, null, null, null, null))
                 .build();
     }
 
     static Tweet createPhotoTweet(long id, User user, String text, String timestamp,
             String photoUrlHttps) {
-        final MediaEntity photoEntity = new MediaEntity(null, null, null, 0, 0, 0L, null, null,
-                photoUrlHttps, createMediaEntitySizes(100, 100), 0L, null, "photo", null);
+        final MediaEntity photoEntity = new MediaEntity("", "", "", 0, 0, 0L, null, null,
+                photoUrlHttps, createMediaEntitySizes(100, 100), 0L, null, "photo", null, "");
         final ArrayList<MediaEntity> mediaEntities = new ArrayList<>();
         mediaEntities.add(photoEntity);
-        final TweetEntities entities = new TweetEntities(null, null, mediaEntities, null);
+        final TweetEntities entities = new TweetEntities(null, null, mediaEntities, null, null);
         return new TweetBuilder()
                 .setId(id)
                 .setUser(user)
                 .setText(text)
                 .setCreatedAt(timestamp)
                 .setEntities(entities)
+                .setExtendedEntities(entities)
+                .build();
+    }
+
+    static Tweet createMultiplePhotosTweet(int count, long id, User user, String text,
+                                                  String timestamp, String photoUrlHttps) {
+        final ArrayList<MediaEntity> mediaEntities = new ArrayList<>();
+        for (int x = 0; x < count; x++) {
+            final MediaEntity photoEntity = new MediaEntity("", "", "", 0, 0, 0L, null, null,
+                    photoUrlHttps, createMediaEntitySizes(100, 100), 0L, null, "photo", null, "");
+            mediaEntities.add(photoEntity);
+        }
+        final TweetEntities entities = new TweetEntities(null, null, mediaEntities, null, null);
+        return new TweetBuilder()
+                .setId(id)
+                .setUser(user)
+                .setText(text)
+                .setCreatedAt(timestamp)
+                .setEntities(entities)
+                .setExtendedEntities(entities)
                 .build();
     }
 
@@ -155,6 +192,15 @@ static Tweet createRetweet(long id, User retweeter, Tweet retweetedStatus) {
                 .build();
     }
 
+    public static Tweet createTweetWithVineCard(long id, User user, String text, Card card) {
+        return new TweetBuilder()
+                .setId(id)
+                .setCard(card)
+                .setText(text)
+                .setUser(user)
+                .build();
+    }
+
     static void addTweetsWithId(List<Tweet> tweets, List<Long> tweetIds) {
         for (long tweetId : tweetIds) {
             tweets.add(createTweet(tweetId));
@@ -166,8 +212,15 @@ public static UrlEntity newUrlEntity(int start, int end) {
     }
 
     public static MediaEntity newMediaEntity(int start, int end, String type) {
+        return newMediaEntity(start, end, type, 0);
+    }
+
+    public static MediaEntity newMediaEntity(int start, int end, String type,
+                                             int durationInMillis) {
+        final VideoInfo videoInfo =
+                new VideoInfo(Collections.EMPTY_LIST, durationInMillis, Collections.EMPTY_LIST);
         return new MediaEntity("url", "expandedUrl", "displayUrl", start, end, 0L, "0", "mediaUrl",
-                "mediaUrlHttps", null, 0L, "0", type, null);
+                "mediaUrlHttps", null, 0L, "0", type, videoInfo, "");
     }
 
     public static List<Tweet> getTweetList(long count) {
@@ -179,13 +232,22 @@ public static MediaEntity newMediaEntity(int start, int end, String type) {
         return tweets;
     }
 
+    public static List<MediaEntity> createMultipleMediaEntitiesWithPhoto(int count, int w, int h) {
+        final List<MediaEntity> mediaEntities = new ArrayList<>(count);
+        for (int i = 0; i < count; i++) {
+            final MediaEntity mediaEntityWithPhoto = createMediaEntityWithPhoto(w, h);
+            mediaEntities.add(mediaEntityWithPhoto);
+        }
+        return mediaEntities;
+    }
+
     public static MediaEntity createMediaEntityWithPhoto(int width, int height) {
         return createMediaEntityWithPhoto(createMediaEntitySizes(width, height));
     }
 
     public static MediaEntity createMediaEntityWithPhoto(MediaEntity.Sizes sizes) {
         return new MediaEntity(null, null, null, 0, 0, 0L, null, null, null, sizes, 0L, null,
-                "photo", null);
+                "photo", null, "");
     }
 
     public static MediaEntity.Sizes createMediaEntitySizes(int width, int height) {
@@ -195,15 +257,43 @@ public static MediaEntity createMediaEntityWithPhoto(MediaEntity.Sizes sizes) {
 
     public static MediaEntity createEntityWithVideo(VideoInfo videoInfo) {
         return new MediaEntity(null, null, null, 0, 0, 0L, null, null, null, null, 0L, null,
-                "video", videoInfo);
+                "video", videoInfo, "");
     }
 
     public static MediaEntity createEntityWithAnimatedGif(VideoInfo videoInfo) {
         return new MediaEntity(null, null, null, 0, 0, 0L, null, null, null, null, 0L, null,
-                "animated_gif", videoInfo);
+                "animated_gif", videoInfo, "");
     }
 
     public static VideoInfo createVideoInfoWithVariant(VideoInfo.Variant variant) {
-        return new VideoInfo(null, 0, Arrays.asList(variant));
+        return new VideoInfo(null, 0, Collections.singletonList(variant));
+    }
+
+
+    public static final BindingValues TEST_BINDING_VALUES =
+            new BindingValues(Collections.<String, Object>emptyMap());
+
+    public static Card sampleInvalidVineCard() {
+        return new Card(TEST_BINDING_VALUES, "invalid");
+    }
+
+    public static final String PLAYER_CARD_VINE = VineCardUtils.VINE_CARD;
+
+    public static final String TEST_VINE_USER_ID = "586671909";
+
+    public static Card sampleValidVineCard() {
+        return new Card(createBindingValuesForCard(), PLAYER_CARD_VINE);
+    }
+
+    public static BindingValues createBindingValuesForCard() {
+        final UserValue testUser = new UserValue(TEST_VINE_USER_ID);
+        final Map<String, Object> testValues = new HashMap<>();
+        testValues.put("site", testUser);
+
+        final ImageValue imageValue = new ImageValue(10, 10, TEST_PHOTO_URL, "");
+        testValues.put("player_image", imageValue);
+        testValues.put("player_stream_url", TEST_URL);
+
+        return new BindingValues(testValues);
     }
 }
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestSearchTimeline.java b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestSearchTimeline.java
index d2cb7673..023caf8d 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestSearchTimeline.java
+++ b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestSearchTimeline.java
@@ -17,24 +17,20 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.models.Search;
+import com.twitter.sdk.android.core.services.params.Geocode;
 
-public class TestSearchTimeline extends SearchTimeline {
+import retrofit2.Call;
 
-    TestSearchTimeline(TweetUi tweetUi, String query, String lang, Integer count) {
-        super(tweetUi, query, lang, count);
-    }
+public class TestSearchTimeline extends SearchTimeline {
 
-    @Override
-    public void addRequest(Callback<TwitterApiClient> cb) {
-        super.addRequest(cb);
+    TestSearchTimeline(String query, Geocode geocode, String resultType, String lang,
+                       Integer count, String untilDate) {
+        super(query, geocode, resultType, lang, count, untilDate);
     }
 
     @Override
-    public Callback<TwitterApiClient> createSearchRequest(Long sinceId, Long maxId,
-            Callback<TimelineResult<Tweet>> cb) {
-        return super.createSearchRequest(sinceId, maxId, cb);
+    public Call<Search> createSearchRequest(Long sinceId, Long maxId) {
+        return super.createSearchRequest(sinceId, maxId);
     }
 }
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestTweetUi.java b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestTweetUi.java
index 2445fb9c..bd4bce39 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestTweetUi.java
+++ b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestTweetUi.java
@@ -18,6 +18,9 @@
 package com.twitter.sdk.android.tweetui;
 
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+
+import java.util.List;
 
 public class TestTweetUi extends TweetUi {
 
@@ -25,4 +28,9 @@
     public void scribe(EventNamespace... namespaces) {
         super.scribe(namespaces);
     }
+
+    @Override
+    public void scribe(EventNamespace ns, List<ScribeItem> items) {
+        super.scribe(ns, items);
+    }
 }
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestUserTimeline.java b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestUserTimeline.java
index dca5cc9f..8bdffe59 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestUserTimeline.java
+++ b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestUserTimeline.java
@@ -17,25 +17,21 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.models.Tweet;
 
+import java.util.List;
+
+import retrofit2.Call;
+
 public class TestUserTimeline extends UserTimeline {
 
-    TestUserTimeline(TweetUi tweetUi, Long userId, String screenName, Integer count,
+    TestUserTimeline(Long userId, String screenName, Integer count,
                      Boolean excludeReplies, Boolean includeRetweets) {
-        super(tweetUi, userId, screenName, count, excludeReplies, includeRetweets);
-    }
-
-    @Override
-    public void addRequest(Callback<TwitterApiClient> cb) {
-        super.addRequest(cb);
+        super(userId, screenName, count, excludeReplies, includeRetweets);
     }
 
     @Override
-    public Callback<TwitterApiClient> createUserTimelineRequest(Long sinceId, Long maxId,
-            Callback<TimelineResult<Tweet>> cb) {
-        return super.createUserTimelineRequest(sinceId, maxId, cb);
+    public Call<List<Tweet>> createUserTimelineRequest(Long sinceId, Long maxId) {
+        return super.createUserTimelineRequest(sinceId, maxId);
     }
 }
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestUtils.java b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestUtils.java
index 68378b80..10fdd7f5 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestUtils.java
+++ b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestUtils.java
@@ -17,12 +17,10 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.graphics.drawable.ColorDrawable;
-import android.os.Build;
 import android.widget.ImageView;
 
 import java.util.Locale;
@@ -48,16 +46,17 @@ public static Locale setLocale(Context context, Locale locale) {
 
 
     /**
-     * Gets the color of the ImageView's ColorDrawable or 0 for API < 11.
+     * Gets the color of the ImageView's ColorDrawable or 0 for API &lt; 11.
      * @param imageView an ImageView with a ColorDrawable
      * @return int color of the ImageView
      */
-    @TargetApi(11)
     public static int getDrawableColor(ImageView imageView) {
-        if (Build.VERSION.SDK_INT >= 11) {
-            final ColorDrawable drawable = (ColorDrawable) imageView.getDrawable();
-            return drawable.getColor();
-        }
-        return 0;
+        final ColorDrawable drawable = (ColorDrawable) imageView.getDrawable();
+        return drawable.getColor();
+    }
+
+    public static int getBackgroundColor(ImageView imageView) {
+        final ColorDrawable drawable = (ColorDrawable) imageView.getBackground();
+        return drawable.getColor();
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
new file mode 100644
index 00000000..4bd9d01f
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
@@ -0,0 +1,497 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Build;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.squareup.picasso.Picasso;
+import com.twitter.sdk.android.core.IntentUtils;
+import com.twitter.sdk.android.core.internal.UserUtils;
+import com.twitter.sdk.android.core.internal.VineCardUtils;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.ImageValue;
+import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout;
+import com.twitter.sdk.android.tweetui.internal.MediaBadgeView;
+import com.twitter.sdk.android.tweetui.internal.SpanClickHandler;
+import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils;
+import com.twitter.sdk.android.tweetui.internal.TweetMediaView;
+
+import java.text.DateFormat;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+
+import io.fabric.sdk.android.Fabric;
+
+abstract class AbstractTweetView extends RelativeLayout{
+    static final String TAG = TweetUi.LOGTAG;
+    static final int DEFAULT_STYLE = R.style.tw__TweetLightStyle;
+    static final String EMPTY_STRING = "";
+    static final double DEFAULT_ASPECT_RATIO = 16.0 / 9.0;
+
+    static final double SECONDARY_TEXT_COLOR_LIGHT_OPACITY = 0.4;
+    static final double SECONDARY_TEXT_COLOR_DARK_OPACITY = 0.35;
+    static final double MEDIA_BG_LIGHT_OPACITY = 0.08;
+    static final double MEDIA_BG_DARK_OPACITY = 0.12;
+
+    static final long INVALID_ID = -1L;
+
+    // Dependency Provider
+    final DependencyProvider dependencyProvider;
+
+    // attributes
+    private LinkClickListener linkClickListener;
+    TweetLinkClickListener tweetLinkClickListener;
+    TweetMediaClickListener tweetMediaClickListener;
+    private Uri permalinkUri;
+    Tweet tweet;
+
+    // for testing
+    int styleResId;
+    boolean tweetActionsEnabled;
+
+    // layout views
+    TextView fullNameView;
+    TextView screenNameView;
+    AspectRatioFrameLayout mediaContainer;
+    TweetMediaView tweetMediaView;
+    TextView contentView;
+    MediaBadgeView mediaBadgeView;
+
+    // color values
+    int primaryTextColor;
+    int secondaryTextColor;
+    int actionColor;
+    int actionHighlightColor;
+    int mediaBgColor;
+    // resource id's
+    int photoErrorResId;
+
+    /**
+     * Performs inflation from XML and apply a class-specific base style with the given dependency
+     * provider.
+     * @param context the context of the view
+     * @param attrs the attributes of the XML tag that is inflating the TweetView
+     * @param defStyle An attribute in the current theme that contains a reference to a style
+     *                 resource to apply to this view. If 0, no default style will be applied.
+     * @param dependencyProvider the dependency provider
+     * @throws IllegalArgumentException if the Tweet id is invalid.
+     */
+    AbstractTweetView(Context context, AttributeSet attrs, int defStyle,
+                  DependencyProvider dependencyProvider) {
+        super(context, attrs, defStyle);
+
+        this.dependencyProvider = dependencyProvider;
+        inflateView(context);
+        findSubviews();
+    }
+
+    /**
+     * Inflate the TweetView using the layout that has been set.
+     * @param context The Context the view is running in.
+     */
+    private void inflateView(Context context) {
+        LayoutInflater.from(context).inflate(getLayout(), this, true);
+    }
+
+    /**
+     * Checks whether the TweetUi kit is setup and the instance is available.
+     * @return true if the instance is available and view creation can continue
+     * or false otherwise
+     */
+    boolean isTweetUiEnabled() {
+        // in edit mode, halt view creation
+        if (isInEditMode()) return false;
+        try {
+            dependencyProvider.getTweetUi();
+        } catch (IllegalStateException e) {
+            Fabric.getLogger().e(TAG, e.getMessage());
+            // TweetUi kit instance not available, halt view creation and disable
+            setEnabled(false);
+            return false;
+        }
+        return true;
+    }
+
+    /**
+     * Find and hold subview references for quick lookup.
+     */
+    void findSubviews() {
+        // Tweet attribution (avatar, name, screen name, etc.)
+        fullNameView = (TextView) findViewById(R.id.tw__tweet_author_full_name);
+        screenNameView = (TextView) findViewById(R.id.tw__tweet_author_screen_name);
+        mediaContainer =
+                (AspectRatioFrameLayout) findViewById(R.id.tw__aspect_ratio_media_container);
+        tweetMediaView = (TweetMediaView) findViewById(R.id.tweet_media_view);
+        contentView = (TextView) findViewById(R.id.tw__tweet_text);
+        mediaBadgeView = (MediaBadgeView) findViewById(R.id.tw__tweet_media_badge);
+    }
+
+    /*
+     * It's up to the extending class to determine what layout id to use
+     */
+    abstract int getLayout();
+
+    /*
+     * Gets the scribe namespace
+     */
+    abstract String getViewTypeName();
+
+    /**
+     * @return id of the Tweet of the TweetView.
+     */
+    public long getTweetId() {
+        if (tweet == null) {
+            return INVALID_ID;
+        }
+        return tweet.id;
+    }
+
+    /**
+     * Set the Tweet to be displayed and update the subviews. For any data that is missing from
+     * the Tweet, invalidate the subview value (e.g. text views set to empty string) for view
+     * recycling. Cannot be called before inflation has completed.
+     * @param tweet Tweet data
+     */
+    public void setTweet(Tweet tweet) {
+        this.tweet = tweet;
+        render();
+    }
+
+    /**
+     * @return the Tweet of the TweetView
+     */
+    public Tweet getTweet() {
+        return tweet;
+    }
+
+    /**
+     * Override the default action when media is clicked.
+     * @param tweetMediaClickListener called when media is clicked.
+     */
+    public void setTweetMediaClickListener(TweetMediaClickListener tweetMediaClickListener) {
+        this.tweetMediaClickListener = tweetMediaClickListener;
+        tweetMediaView.setTweetMediaClickListener(tweetMediaClickListener);
+    }
+
+    /**
+     * Override the default action when link is clicked.
+     * @param tweetLinkClickListener called when url is clicked.
+     */
+    public void setTweetLinkClickListener(TweetLinkClickListener tweetLinkClickListener) {
+        this.tweetLinkClickListener = tweetLinkClickListener;
+    }
+
+    /**
+     * Render the Tweet by updating the subviews. For any data that is missing from the Tweet,
+     * invalidate the subview value (e.g. text views set to empty string) for view recycling.
+     * Do not call with render true until inflation has completed.
+     */
+    void render() {
+        final Tweet displayTweet = TweetUtils.getDisplayTweet(tweet);
+        setName(displayTweet);
+        setScreenName(displayTweet);
+        setTweetMedia(displayTweet);
+        setText(displayTweet);
+        setContentDescription(displayTweet);
+
+        // set permalink if tweet id and screen name are available
+        if (TweetUtils.isTweetResolvable(tweet)) {
+            setPermalinkUri(tweet.user.screenName, getTweetId());
+        } else {
+            permalinkUri = null;
+        }
+
+        // set or update the permalink launcher with the current permalinkUri
+        setPermalinkLauncher();
+        scribeImpression();
+    }
+
+    Uri getPermalinkUri() {
+        return permalinkUri;
+    }
+
+    void setPermalinkUri(String screenName, Long tweetId) {
+        if (tweetId <= 0) return;
+        permalinkUri = TweetUtils.getPermalink(screenName, tweetId);
+    }
+
+    private void setPermalinkLauncher() {
+        final OnClickListener listener = new PermalinkClickListener();
+
+        this.setOnClickListener(listener);
+    }
+
+    void launchPermalink() {
+        final Intent intent = new Intent(Intent.ACTION_VIEW, getPermalinkUri());
+        if (!IntentUtils.safeStartActivity(getContext(), intent)) {
+            Fabric.getLogger().e(TweetUi.LOGTAG, "Activity cannot be found to open permalink URI");
+        }
+    }
+
+    void scribeImpression() {
+        if (tweet != null) {
+            dependencyProvider.getTweetScribeClient().impression(tweet, getViewTypeName(),
+                    tweetActionsEnabled);
+        }
+    }
+
+    void scribePermalinkClick() {
+        if (tweet != null) {
+            dependencyProvider.getTweetScribeClient().click(tweet, getViewTypeName());
+        }
+    }
+
+    void scribeCardImpression(Long tweetId, Card card) {
+        final ScribeItem scribeItem = ScribeItem.fromTweetCard(tweetId, card);
+        dependencyProvider.getVideoScribeClient().impression(scribeItem);
+    }
+
+    void scribeMediaEntityImpression(long tweetId, MediaEntity mediaEntity) {
+        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(tweetId, mediaEntity);
+        dependencyProvider.getVideoScribeClient().impression(scribeItem);
+    }
+
+    /**
+     * Sets the Tweet author name. If author name is unavailable, resets to empty string.
+     */
+    private void setName(Tweet displayTweet) {
+        if (displayTweet != null && displayTweet.user != null) {
+            fullNameView.setText(Utils.stringOrEmpty(displayTweet.user.name));
+        } else {
+            fullNameView.setText(EMPTY_STRING);
+        }
+    }
+
+    /**
+     * Sets the Tweet author screen name. If screen name is unavailable, resets to empty string.
+     */
+    private void setScreenName(Tweet displayTweet) {
+        if (displayTweet != null && displayTweet.user != null) {
+            screenNameView.setText(UserUtils.formatScreenName(
+                    Utils.stringOrEmpty(displayTweet.user.screenName)));
+        } else {
+            screenNameView.setText(EMPTY_STRING);
+        }
+    }
+
+    /**
+     * Sets the Tweet text. If the Tweet text is unavailable, resets to empty string.
+     */
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    private void setText(Tweet displayTweet) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            contentView.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
+        }
+        final CharSequence tweetText = Utils.charSeqOrEmpty(getLinkifiedText(displayTweet));
+        SpanClickHandler.enableClicksOnSpans(contentView);
+        if (!TextUtils.isEmpty(tweetText)) {
+            contentView.setText(tweetText);
+            contentView.setVisibility(VISIBLE);
+        } else {
+            contentView.setText(EMPTY_STRING);
+            contentView.setVisibility(GONE);
+        }
+    }
+
+    final void setTweetMedia(Tweet displayTweet) {
+        clearTweetMedia();
+
+        if (displayTweet == null) {
+            return;
+        }
+
+        if (displayTweet.card != null && VineCardUtils.isVine(displayTweet.card)) {
+            final Card card = displayTweet.card;
+            final ImageValue imageValue = VineCardUtils.getImageValue(card);
+            final String playerStreamUrl = VineCardUtils.getStreamUrl(card);
+            // Make sure we have required bindings for Vine card
+            if (imageValue != null && !TextUtils.isEmpty(playerStreamUrl)) {
+                setViewsForMedia(getAspectRatio(imageValue));
+                tweetMediaView.setVineCard(displayTweet);
+                mediaBadgeView.setVisibility(View.VISIBLE);
+                mediaBadgeView.setCard(card);
+                scribeCardImpression(displayTweet.id, card);
+            }
+        } else if (TweetMediaUtils.hasSupportedVideo(displayTweet)) {
+            final MediaEntity mediaEntity = TweetMediaUtils.getVideoEntity(displayTweet);
+            setViewsForMedia(getAspectRatio(mediaEntity));
+            tweetMediaView.setTweetMediaEntities(tweet, Collections.singletonList(mediaEntity));
+            mediaBadgeView.setVisibility(View.VISIBLE);
+            mediaBadgeView.setMediaEntity(mediaEntity);
+            scribeMediaEntityImpression(displayTweet.id, mediaEntity);
+        } else if (TweetMediaUtils.hasPhoto(displayTweet)) {
+            final List<MediaEntity> mediaEntities = TweetMediaUtils.getPhotoEntities(displayTweet);
+            setViewsForMedia(getAspectRatioForPhotoEntity(mediaEntities.size()));
+            tweetMediaView.setTweetMediaEntities(displayTweet, mediaEntities);
+            mediaBadgeView.setVisibility(View.GONE);
+        }
+    }
+
+    void setViewsForMedia(double aspectRatio) {
+        mediaContainer.setVisibility(ImageView.VISIBLE);
+        mediaContainer.setAspectRatio(aspectRatio);
+        tweetMediaView.setVisibility(View.VISIBLE);
+    }
+
+    protected double getAspectRatio(MediaEntity photoEntity) {
+        if (photoEntity == null || photoEntity.sizes == null || photoEntity.sizes.medium == null ||
+                photoEntity.sizes.medium.w == 0 || photoEntity.sizes.medium.h == 0) {
+            return DEFAULT_ASPECT_RATIO;
+        }
+
+        return (double) photoEntity.sizes.medium.w / photoEntity.sizes.medium.h;
+    }
+
+    protected double getAspectRatio(ImageValue imageValue) {
+        if (imageValue == null || imageValue.width == 0 || imageValue.height == 0) {
+            return DEFAULT_ASPECT_RATIO;
+        }
+
+        return (double) imageValue.width / imageValue.height;
+    }
+
+    abstract protected double getAspectRatioForPhotoEntity(int photoCount);
+
+    protected void clearTweetMedia() {
+        mediaContainer.setVisibility(ImageView.GONE);
+    }
+
+    /**
+     * @param displayTweet The unformatted Tweet
+     * @return The linkified text with display url's subbed for t.co links
+     */
+    protected CharSequence getLinkifiedText(Tweet displayTweet) {
+        final FormattedTweetText formattedText = dependencyProvider.getTweetUi()
+                .getTweetRepository().formatTweetText(displayTweet);
+
+        if (formattedText == null) return null;
+
+        final boolean stripVineCard = displayTweet.card != null
+                && VineCardUtils.isVine(displayTweet.card);
+
+        final boolean stripQuoteTweet = TweetUtils.showQuoteTweet(displayTweet);
+
+        return TweetTextLinkifier.linkifyUrls(formattedText, getLinkClickListener(),
+                actionColor, actionHighlightColor, stripQuoteTweet, stripVineCard);
+    }
+
+    void setContentDescription(Tweet displayTweet) {
+        if (!TweetUtils.isTweetResolvable(displayTweet)) {
+            setContentDescription(getResources().getString(R.string.tw__loading_tweet));
+            return;
+        }
+
+        final FormattedTweetText formattedTweetText = dependencyProvider.getTweetUi()
+                .getTweetRepository().formatTweetText(displayTweet);
+        String tweetText = null;
+        if (formattedTweetText != null) tweetText = formattedTweetText.text;
+
+        final long createdAt = TweetDateUtils.apiTimeToLong(displayTweet.createdAt);
+        String timestamp = null;
+        if (createdAt != TweetDateUtils.INVALID_DATE) {
+            timestamp = DateFormat.getDateInstance().format(new Date(createdAt));
+        }
+
+        setContentDescription(getResources().getString(R.string.tw__tweet_content_description,
+                Utils.stringOrEmpty(displayTweet.user.name), Utils.stringOrEmpty(tweetText),
+                Utils.stringOrEmpty(timestamp)));
+    }
+
+    protected LinkClickListener getLinkClickListener() {
+        if (linkClickListener == null) {
+            linkClickListener = new LinkClickListener() {
+                @Override
+                public void onUrlClicked(String url) {
+                    if (TextUtils.isEmpty(url)) return;
+
+                    if (tweetLinkClickListener != null) {
+                        tweetLinkClickListener.onLinkClick(tweet, url);
+                    } else {
+                        final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+                        if (!IntentUtils.safeStartActivity(getContext(), intent)) {
+                            Fabric.getLogger().e(TweetUi.LOGTAG,
+                                    "Activity cannot be found to open URL");
+                        }
+                    }
+                }
+            };
+        }
+        return linkClickListener;
+    }
+
+    class PermalinkClickListener implements OnClickListener {
+        @Override
+        public void onClick(View v) {
+            if (getPermalinkUri() == null) return;
+
+            scribePermalinkClick();
+            launchPermalink();
+        }
+    }
+
+    /**
+     * This is a mockable class that extracts our tight coupling with the TweetUi singleton.
+     */
+    static class DependencyProvider {
+        TweetScribeClient tweetScribeClient;
+        VideoScribeClient videoScribeClient;
+
+        /**
+         * Can be null in edit mode
+         */
+        TweetUi getTweetUi() {
+            return TweetUi.getInstance();
+        }
+
+        TweetScribeClient getTweetScribeClient() {
+            if (tweetScribeClient == null) {
+                tweetScribeClient = new TweetScribeClientImpl(getTweetUi());
+            }
+            return tweetScribeClient;
+        }
+
+        VideoScribeClient getVideoScribeClient() {
+            if (videoScribeClient == null) {
+                videoScribeClient = new VideoScribeClientImpl(getTweetUi());
+            }
+            return videoScribeClient;
+        }
+
+        /**
+         * Can be null if run before TweetUi#doInBackground completes
+         */
+        Picasso getImageLoader() {
+            return TweetUi.getInstance().getImageLoader();
+        }
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTimeline.java
index e38675ad..1d212a0e 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTimeline.java
@@ -19,7 +19,6 @@
 
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.models.Tweet;
 
@@ -29,25 +28,9 @@
  * BaseTimeline which handles TweetUi instance argument.
  */
 abstract class BaseTimeline {
-    protected final TweetUi tweetUi;
-
-    BaseTimeline(TweetUi tweetUi) {
-        if (tweetUi == null) {
-            throw new IllegalArgumentException("TweetUi instance must not be null");
-        }
-        this.tweetUi = tweetUi;
-        scribeImpression();
-    }
 
     abstract String getTimelineType();
 
-    private void scribeImpression() {
-        tweetUi.scribe(
-                ScribeConstants.getSyndicatedSdkTimelineNamespace(getTimelineType()),
-                ScribeConstants.getTfwClientTimelineNamespace(getTimelineType())
-        );
-    }
-
     /**
      * Returns a decremented maxId if the given id is non-null. Otherwise returns the given maxId.
      * Suitable for REST Timeline endpoints which return inclusive previous results when exclusive
@@ -57,18 +40,11 @@ static Long decrementMaxId(Long maxId) {
         return maxId == null ? null : maxId - 1;
     }
 
-    /**
-     * Adds the request to the guest AuthRequestQueue where guest auth will be setup.
-     */
-    void addRequest(final Callback<TwitterApiClient> cb) {
-        tweetUi.getGuestAuthQueue().addClientRequest(cb);
-    }
-
     /**
      * Wrapper callback which unpacks a list of Tweets into a TimelineResult (cursor and items).
      */
     static class TweetsCallback extends Callback<List<Tweet>> {
-        protected final Callback<TimelineResult<Tweet>> cb;
+        final Callback<TimelineResult<Tweet>> cb;
 
         /**
          * Constructs a TweetsCallback
@@ -84,7 +60,7 @@ public void success(Result<List<Tweet>> result) {
             final TimelineResult<Tweet> timelineResult
                     = new TimelineResult<>(new TimelineCursor(tweets), tweets);
             if (cb != null) {
-                cb.success(timelineResult, result.response);
+                cb.success(new Result<>(timelineResult, result.response));
             }
         }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
index a7887ce0..5c9488f3 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
@@ -17,98 +17,46 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import android.annotation.TargetApi;
 import android.content.Context;
-import android.content.Intent;
 import android.content.res.TypedArray;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
-import android.net.Uri;
-import android.os.Build;
-import android.text.TextUtils;
-import android.text.method.LinkMovementMethod;
 import android.util.AttributeSet;
-import android.view.LayoutInflater;
 import android.view.View;
-import android.widget.FrameLayout;
+import android.view.ViewGroup;
 import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
 import android.widget.TextView;
 
 import com.squareup.picasso.Picasso;
-import io.fabric.sdk.android.Fabric;
 
 import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.IntentUtils;
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
 import com.twitter.sdk.android.core.internal.UserUtils;
-import com.twitter.sdk.android.core.models.VideoInfo;
-import com.twitter.sdk.android.tweetui.internal.MediaBadgeView;
-import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils;
-import com.twitter.sdk.android.tweetui.internal.TweetMediaView;
-
-import java.text.DateFormat;
-import java.util.Date;
-
-@SuppressWarnings({"TooManyMethods", "TooManyFields"})
-public abstract class BaseTweetView extends LinearLayout {
-    private static final String TAG = TweetUi.LOGTAG;
-    private static final int DEFAULT_STYLE = R.style.tw__TweetLightStyle;
-    private static final String EMPTY_STRING = "";
-    static final double DEFAULT_ASPECT_RATIO = 16.0 / 9.0;
-
-    static final double SECONDARY_TEXT_COLOR_LIGHT_OPACITY = 0.4;
-    static final double SECONDARY_TEXT_COLOR_DARK_OPACITY = 0.35;
-    static final double MEDIA_BG_LIGHT_OPACITY = 0.08;
-    static final double MEDIA_BG_DARK_OPACITY = 0.12;
-
-    static final long INVALID_ID = -1L;
+import com.twitter.sdk.android.core.models.TweetBuilder;
 
-    // Dependency Provider
-    final DependencyProvider dependencyProvider;
+import java.util.Locale;
 
-    // attributes
-    private LinkClickListener linkClickListener;
-    private Uri permalinkUri;
-    Tweet tweet;
+import io.fabric.sdk.android.Fabric;
 
-    // for testing
-    int styleResId;
+public abstract class BaseTweetView extends AbstractTweetView {
 
-    // layout views
-    RelativeLayout containerView;
-    ImageView avatarView;
-    TextView fullNameView;
-    TextView screenNameView;
-    ImageView verifiedCheckView;
-    FrameLayout mediaContainerView;
-    TweetMediaView mediaView;
-    TextView contentView;
-    TextView timestampView;
-    ImageView twitterLogoView;
     TextView retweetedByView;
     TweetActionBarView tweetActionBarView;
-    MediaBadgeView mediaBadgeView;
+    ImageView twitterLogoView;
+    TextView timestampView;
+    ImageView avatarView;
+    ViewGroup quoteTweetHolder;
+    QuoteTweetView quoteTweetView;
     View bottomSeparator;
 
     // color values
     int containerBgColor;
-    int primaryTextColor;
-    int secondaryTextColor;
-    int actionColor;
-    int mediaBgColor;
-    // resource id's
-    int photoErrorResId;
     int birdLogoResId;
     int retweetIconResId;
-    boolean tweetActionsEnabled;
     // styled drawables for images
-    ColorDrawable mediaBg;
+    ColorDrawable avatarMediaBg;
 
     /**
      * Constructs a view from the given Tweet.
@@ -138,12 +86,9 @@
      */
     BaseTweetView(Context context, Tweet tweet, int styleResId,
             DependencyProvider dependencyProvider) {
-        super(context, null);
+        super(context, null, styleResId, dependencyProvider);
 
-        this.dependencyProvider = dependencyProvider;
         initAttributes(styleResId);
-        inflateView(context);
-        findSubviews();
         applyStyles();
         if (!isTweetUiEnabled()) return;
         initTweetActions();
@@ -159,21 +104,7 @@
      * @throws IllegalArgumentException if the Tweet id is invalid.
      */
     public BaseTweetView(Context context, AttributeSet attrs) {
-        this(context, attrs, new DependencyProvider());
-    }
-
-    /**
-     * Constructs a view from xml with the given dependency provider
-     * @param context the context of the view
-     * @param attrs the attributes of the XML tag that is inflating the TweetView
-     * @param dependencyProvider the dependency provider
-     * @throws java.lang.IllegalAccessError if the Tweet id is invalid
-     */
-    BaseTweetView(Context context, AttributeSet attrs, DependencyProvider dependencyProvider) {
-        super(context, attrs);
-        this.dependencyProvider = dependencyProvider;
-        initXmlAttributes(context, attrs);
-        inflateView(context);
+        this(context, attrs, 0);
     }
 
     /**
@@ -185,26 +116,10 @@ public BaseTweetView(Context context, AttributeSet attrs) {
      * @throws IllegalArgumentException if the Tweet id is invalid.
      */
     public BaseTweetView(Context context, AttributeSet attrs, int defStyle) {
-        this(context, attrs, defStyle, new DependencyProvider());
-    }
+        super(context, attrs, defStyle, new DependencyProvider());
 
-    /**
-     * Performs inflation from XML and apply a class-specific base style with the given dependency
-     * provider.
-     * @param context the context of the view
-     * @param attrs the attributes of the XML tag that is inflating the TweetView
-     * @param defStyle An attribute in the current theme that contains a reference to a style
-     *                 resource to apply to this view. If 0, no default style will be applied.
-     * @param dependencyProvider the dependency provider
-     * @throws IllegalArgumentException if the Tweet id is invalid.
-     */
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    BaseTweetView(Context context, AttributeSet attrs, int defStyle,
-            DependencyProvider dependencyProvider) {
-        super(context, attrs, defStyle);
-        this.dependencyProvider = dependencyProvider;
         initXmlAttributes(context, attrs);
-        inflateView(context);
+        applyStyles();
     }
 
     /**
@@ -274,6 +189,9 @@ private void setStyleAttributes(TypedArray a) {
         actionColor = a.getColor(
                 R.styleable.tw__TweetView_tw__action_color,
                 getResources().getColor(R.color.tw__tweet_action_color));
+        actionHighlightColor = a.getColor(
+                R.styleable.tw__TweetView_tw__action_highlight_color,
+                getResources().getColor(R.color.tw__tweet_action_light_highlight_color));
         tweetActionsEnabled =
                 a.getBoolean(R.styleable.tw__TweetView_tw__tweet_actions_enabled, false);
 
@@ -304,34 +222,39 @@ private void setStyleAttributes(TypedArray a) {
                 containerBgColor
         );
 
-        mediaBg = new ColorDrawable(mediaBgColor);
+        avatarMediaBg = new ColorDrawable(mediaBgColor);
     }
 
     /**
-     * Inflate the TweetView using the layout that has been set.
-     * @param context The Context the view is running in.
+     * LoadTweet will trigger a request to the Twitter API and hydrate the view with the result.
+     * In the event of an error it will call the listener that was provided to setOnTwitterApiError.
      */
-    private void inflateView(Context context) {
-        final LayoutInflater localInflater = LayoutInflater.from(context);
-        final View v = localInflater.inflate(getLayout(), null, false);
-        // work around a bug(?) in Android that makes it so that our inflated view doesn't
-        // pick up layout params correctly from its style
-        final LayoutParams layoutParams =
-                new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
-        v.setLayoutParams(layoutParams);
-        this.addView(v);
+    private void loadTweet() {
+        final long tweetId = getTweetId();
+        // create a callback to setTweet on the view or log a failure to load the Tweet
+        final Callback<Tweet> repoCb = new Callback<Tweet>() {
+            @Override
+            public void success(Result<Tweet> result) {
+                setTweet(result.data);
+            }
+
+            @Override
+            public void failure(TwitterException exception) {
+                Fabric.getLogger().d(TAG,
+                        String.format(Locale.ENGLISH, TweetUtils.LOAD_TWEET_DEBUG, tweetId));
+            }
+        };
+        dependencyProvider.getTweetUi().getTweetRepository().loadTweet(getTweetId(), repoCb);
     }
 
     /**
      * Finalize inflating a view from XML.
-     * @throws IllegalArgumentException
      */
     @Override
     protected void onFinishInflate() {
         super.onFinishInflate();
+
         if (!isTweetUiEnabled()) return;
-        findSubviews();
-        applyStyles();
         initTweetActions();
         loadTweet();
     }
@@ -347,85 +270,23 @@ private void initTweetActions() {
                 dependencyProvider.getTweetUi().getTweetRepository(), null));
     }
 
-    /**
-     * Checks whether the TweetUi kit is setup and the instance is available.
-     * @return true if the instance is available and view creation can continue
-     * or false otherwise
-     */
-    boolean isTweetUiEnabled() {
-        // in edit mode, halt view creation
-        if (isInEditMode()) return false;
-        try {
-            dependencyProvider.getTweetUi();
-        } catch (IllegalStateException e) {
-            Fabric.getLogger().e(TAG, e.getMessage());
-            // TweetUi kit instance not available, halt view creation and disable
-            setEnabled(false);
-            return false;
-        }
-        return true;
-    }
 
     /**
      * Find and hold subview references for quick lookup.
      */
+    @Override
     void findSubviews() {
-        // Tweet attribution (avatar, name, screen name, etc.)
-        containerView = (RelativeLayout) findViewById(R.id.tw__tweet_view);
+        super.findSubviews();
+
         avatarView = (ImageView) findViewById(R.id.tw__tweet_author_avatar);
-        fullNameView = (TextView) findViewById(R.id.tw__tweet_author_full_name);
-        screenNameView = (TextView) findViewById(R.id.tw__tweet_author_screen_name);
-        verifiedCheckView = (ImageView) findViewById(R.id.tw__tweet_author_verified);
-        mediaContainerView = (FrameLayout) findViewById(R.id.tw__tweet_media_container);
-        mediaView = (TweetMediaView) findViewById(R.id.tw__tweet_media);
-        contentView = (TextView) findViewById(R.id.tw__tweet_text);
         timestampView = (TextView) findViewById(R.id.tw__tweet_timestamp);
         twitterLogoView = (ImageView) findViewById(R.id.tw__twitter_logo);
         retweetedByView = (TextView) findViewById(R.id.tw__tweet_retweeted_by);
         tweetActionBarView = (TweetActionBarView) findViewById(R.id.tw__tweet_action_bar);
-        mediaBadgeView = (MediaBadgeView) findViewById(R.id.tw__tweet_media_badge);
+        quoteTweetHolder = (ViewGroup) findViewById(R.id.quote_tweet_holder);
         bottomSeparator = findViewById(R.id.bottom_separator);
     }
 
-    /*
-     * It's up to the extending class to determine what layout id to use
-     */
-    abstract int getLayout();
-
-    /*
-     * Gets the scribe namespace
-     */
-    abstract String getViewTypeName();
-
-    /**
-     * @return id of the Tweet of the TweetView.
-     */
-    public long getTweetId() {
-        if (tweet == null) {
-            return INVALID_ID;
-        }
-        return tweet.id;
-    }
-
-    /**
-     * Set the Tweet to be displayed and update the subviews. For any data that is missing from
-     * the Tweet, invalidate the subview value (e.g. text views set to empty string) for view
-     * recycling. Cannot be called before inflation has completed.
-     * @param tweet Tweet data
-     * @throws IllegalArgumentException
-     */
-    public void setTweet(Tweet tweet) {
-        this.tweet = tweet;
-        render();
-    }
-
-    /**
-     * @return the Tweet of the TweetView
-     */
-    public Tweet getTweet() {
-        return tweet;
-    }
-
     /**
      * Sets the callback to call when a Tweet action (favorite, unfavorite) is performed.
      * @param actionCallback called when a Tweet action is performed.
@@ -440,69 +301,34 @@ public void setOnActionCallback(Callback<Tweet> actionCallback) {
      * Render the Tweet by updating the subviews. For any data that is missing from the Tweet,
      * invalidate the subview value (e.g. text views set to empty string) for view recycling.
      * Do not call with render true until inflation has completed.
-     * @throws IllegalArgumentException
      */
+    @Override
     void render() {
+        super.render();
+
         final Tweet displayTweet = TweetUtils.getDisplayTweet(tweet);
         setProfilePhotoView(displayTweet);
-        setName(displayTweet);
-        setScreenName(displayTweet);
         setTimestamp(displayTweet);
-        setTweetMedia(displayTweet);
-        setText(displayTweet);
-        setContentDescription(displayTweet);
         setTweetActions(tweet);
         showRetweetedBy(tweet);
-
-        // set permalink if tweet id and screen name are available
-        if (TweetUtils.isTweetResolvable(tweet)) {
-            setPermalinkUri(tweet.user.screenName, getTweetId());
+        setQuoteTweet(tweet);
+    }
+
+    void setQuoteTweet(Tweet tweet) {
+        quoteTweetView = null;
+        quoteTweetHolder.removeAllViews();
+        if (tweet != null && TweetUtils.showQuoteTweet(tweet)) {
+            quoteTweetView = new QuoteTweetView(getContext());
+            quoteTweetView.setStyle(primaryTextColor, secondaryTextColor, actionColor,
+                    actionHighlightColor, mediaBgColor, photoErrorResId);
+            quoteTweetView.setTweet(tweet.quotedStatus);
+            quoteTweetView.setTweetLinkClickListener(tweetLinkClickListener);
+            quoteTweetView.setTweetMediaClickListener(tweetMediaClickListener);
+            quoteTweetHolder.setVisibility(View.VISIBLE);
+            quoteTweetHolder.addView(quoteTweetView);
         } else {
-            permalinkUri = null;
+            quoteTweetHolder.setVisibility(View.GONE);
         }
-
-        // set or update the permalink launcher with the current permalinkUri
-        setPermalinkLauncher();
-        scribeImpression();
-    }
-
-    /**
-     * LoadTweet will trigger a request to the Twitter API and hydrate the view with the result.
-     * In the event of an error it will call the listener that was provided to setOnTwitterApiError.
-     * @throws java.lang.IllegalStateException If there is no auth configured for the Twitter API
-     */
-    private void loadTweet() {
-        final long tweetId = getTweetId();
-        // create a callback to setTweet on the view or log a failure to load the Tweet
-        final Callback<Tweet> repoCb = new Callback<Tweet>() {
-            @Override
-            public void success(Result<Tweet> result) {
-                setTweet(result.data);
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                Fabric.getLogger().d(TAG, String.format(TweetUtils.LOAD_TWEET_DEBUG, tweetId));
-            }
-        };
-        dependencyProvider.getTweetUi().getTweetRepository().loadTweet(getTweetId(), repoCb);
-    }
-
-    Uri getPermalinkUri() {
-        return permalinkUri;
-    }
-
-    void setPermalinkUri(String screenName, Long tweetId) {
-        if (tweetId <= 0) return;
-        permalinkUri = TweetUtils.getPermalink(screenName, tweetId);
-    }
-
-    private void setPermalinkLauncher() {
-        final OnClickListener listener = new PermalinkClickListener();
-
-        this.setOnClickListener(listener);
-        // Set the listener on the text so just plain text will still launch the permalink
-        contentView.setOnClickListener(listener);
     }
 
     /**
@@ -519,87 +345,23 @@ void showRetweetedBy(Tweet tweet) {
         }
     }
 
-    void launchPermalink() {
-        final Intent intent = new Intent(Intent.ACTION_VIEW, getPermalinkUri());
-        if (!IntentUtils.safeStartActivity(getContext(), intent)) {
-            Fabric.getLogger().e(TweetUi.LOGTAG, "Activity cannot be found to open permalink URI");
-        }
-    }
-
-    void scribeImpression() {
-        if (tweet != null) {
-            dependencyProvider.getTweetScribeClient().impression(tweet, getViewTypeName(),
-                    tweetActionsEnabled);
-        }
-    }
-
-    void scribePermalinkClick() {
-        if (tweet != null) {
-            dependencyProvider.getTweetScribeClient().click(tweet, getViewTypeName());
-        }
-    }
-
     /**
      * Apply the style attributes to the Tweet subviews. Must be called after view inflation and
      * findSubviews.
      */
     protected void applyStyles() {
-        containerView.setBackgroundColor(containerBgColor);
-        avatarView.setImageDrawable(mediaBg);
-        mediaView.setImageDrawable(mediaBg);
+        setBackgroundColor(containerBgColor);
         fullNameView.setTextColor(primaryTextColor);
         screenNameView.setTextColor(secondaryTextColor);
         contentView.setTextColor(primaryTextColor);
+        tweetMediaView.setMediaBgColor(mediaBgColor);
+        tweetMediaView.setPhotoErrorResId(photoErrorResId);
+        avatarView.setImageDrawable(avatarMediaBg);
         timestampView.setTextColor(secondaryTextColor);
         twitterLogoView.setImageResource(birdLogoResId);
         retweetedByView.setTextColor(secondaryTextColor);
     }
 
-    /**
-     * Sets the Tweet author name. If author name is unavailable, resets to empty string.
-     */
-    private void setName(Tweet displayTweet) {
-        if (displayTweet != null && displayTweet.user != null) {
-            fullNameView.setText(Utils.stringOrEmpty(displayTweet.user.name));
-        } else {
-            fullNameView.setText(EMPTY_STRING);
-        }
-    }
-
-    /**
-     * Sets the Tweet author screen name. If screen name is unavailable, resets to empty string.
-     */
-    private void setScreenName(Tweet displayTweet) {
-        if (displayTweet != null && displayTweet.user != null) {
-            screenNameView.setText(UserUtils.formatScreenName(
-                    Utils.stringOrEmpty(displayTweet.user.screenName)));
-        } else {
-            screenNameView.setText(EMPTY_STRING);
-        }
-    }
-
-    /**
-     * Sets the Tweet text. If the Tweet text is unavailable, resets to empty string.
-     */
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    private void setText(Tweet displayTweet) {
-        contentView.setMovementMethod(LinkMovementMethod.getInstance());
-        // We need to reset the focus flags on the text view here since setting the movement
-        // method has set the flags to an undesirable state
-        contentView.setFocusable(false);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            contentView.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
-        }
-        final CharSequence tweetText = Utils.charSeqOrEmpty(getLinkifiedText(displayTweet));
-        if (!TextUtils.isEmpty(tweetText)) {
-            contentView.setText(tweetText);
-            contentView.setVisibility(VISIBLE);
-        } else {
-            contentView.setText(EMPTY_STRING);
-            contentView.setVisibility(GONE);
-        }
-    }
-
     /**
      * Set the timestamp if data from the Tweet is available. If timestamp cannot be determined,
      * set the timestamp to an empty string to handle view recycling.
@@ -640,184 +402,35 @@ void setProfilePhotoView(Tweet displayTweet) {
                     UserUtils.AvatarSize.REASONABLY_SMALL);
         }
 
-        imageLoader.load(url).placeholder(mediaBg).into(avatarView);
-    }
-
-    /**
-     * Sets the Tweet photo. If the media url is available from the Tweet, sets the photo background
-     * and attempts to load the image. If the load fails, the styled photo error image is set. If
-     * the url is not available, sets the Tweet photo visibility to gone.
-     */
-    final void setTweetMedia(Tweet displayTweet) {
-        clearMediaView();
-
-        if (displayTweet != null && TweetMediaUtils.hasVideo(displayTweet)) {
-            final MediaEntity mediaEntity = TweetMediaUtils.getVideoEntity(displayTweet);
-            // set the image view to visible before setting via picasso placeholders into so
-            // measurements are done correctly, fixes a bug where the placeholder was a small square
-            // in the corner of the view
-            mediaContainerView.setVisibility(ImageView.VISIBLE);
-            mediaView.setOverlayDrawable(getContext().getResources()
-                    .getDrawable(R.drawable.tw__player_overlay));
-            mediaBadgeView.setMediaEntity(mediaEntity);
-            setMediaLauncher(displayTweet, mediaEntity);
-            setTweetMedia(mediaEntity);
-
-            dependencyProvider.getVideoScribeClient().impression(displayTweet.id, mediaEntity);
-        } else if (displayTweet != null && TweetMediaUtils.hasPhoto(displayTweet)) {
-            final MediaEntity mediaEntity = TweetMediaUtils.getPhotoEntity(displayTweet);
-            // set the image view to visible before setting via picasso placeholders into so
-            // measurements are done correctly, fixes a bug where the placeholder was a small square
-            // in the corner of the view
-            mediaContainerView.setVisibility(ImageView.VISIBLE);
-            mediaBadgeView.setMediaEntity(mediaEntity);
-            setPhotoLauncher(displayTweet, mediaEntity);
-            setTweetMedia(mediaEntity);
-        } else {
-            mediaContainerView.setVisibility(ImageView.GONE);
-        }
-    }
-
-    private void setMediaLauncher(final Tweet displayTweet, final MediaEntity entity) {
-        mediaView.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                final VideoInfo.Variant variant = TweetMediaUtils.getSupportedVariant(entity);
-                if (variant != null) {
-                    final Intent intent = new Intent(getContext(), PlayerActivity.class);
-                    intent.putExtra(PlayerActivity.MEDIA_ENTITY, entity);
-                    intent.putExtra(PlayerActivity.TWEET_ID, displayTweet.id);
-                    IntentUtils.safeStartActivity(getContext(), intent);
-                }
-            }
-        });
-    }
-
-    private void setPhotoLauncher(final Tweet displayTweet, final MediaEntity entity) {
-        mediaView.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                final Intent intent = new Intent(getContext(), GalleryActivity.class);
-                intent.putExtra(GalleryActivity.MEDIA_ENTITY, entity);
-                intent.putExtra(GalleryActivity.TWEET_ID, displayTweet.id);
-                IntentUtils.safeStartActivity(getContext(), intent);
-            }
-        });
-    }
-
-    void setTweetMedia(MediaEntity photoEntity) {
-        final Picasso imageLoader = dependencyProvider.getImageLoader();
-
-        if (imageLoader == null) return;
-
-        // Picasso fit is a deferred call to resize(w,h) which waits until the target has a
-        // non-zero width or height and resizes the bitmap to the target's width and height.
-        // For recycled targets, which already have a width and (stale) height, reset the size
-        // target to zero so Picasso fit works correctly.
-        mediaView.resetSize();
-        mediaView.setAspectRatio(getAspectRatio(photoEntity));
-        imageLoader.load(photoEntity.mediaUrlHttps)
-                .placeholder(mediaBg)
-                .fit()
-                .centerCrop()
-                .into(mediaView, new PicassoCallback());
-    }
-
-    protected double getAspectRatio(MediaEntity photoEntity) {
-        if (photoEntity == null || photoEntity.sizes == null || photoEntity.sizes.medium == null ||
-                photoEntity.sizes.medium.w == 0 || photoEntity.sizes.medium.h == 0) {
-            return DEFAULT_ASPECT_RATIO;
-        }
-
-        return (double) photoEntity.sizes.medium.w / photoEntity.sizes.medium.h;
+        imageLoader.load(url).placeholder(avatarMediaBg).into(avatarView);
     }
 
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    protected void clearMediaView() {
-        // Clear out the background behind any potential error images that we had
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            mediaView.setBackground(null);
-        } else {
-            mediaView.setBackgroundDrawable(null);
-        }
-
-        mediaView.setOverlayDrawable(null);
-        mediaView.setOnClickListener(null);
-        mediaView.setClickable(false);
+    void setTweetActions(Tweet tweet) {
+        tweetActionBarView.setTweet(tweet);
     }
 
     /**
-     * Picasso Callback which asynchronously sets the error bitmap onError.
+     * Override the default action when media is clicked.
+     * @param tweetMediaClickListener called when media is clicked.
      */
-    class PicassoCallback implements com.squareup.picasso.Callback {
-        @Override
-        public void onSuccess() { /* intentionally blank */ }
-
-        @Override
-        public void onError() {
-            setErrorImage();
+    @Override
+    public void setTweetMediaClickListener(TweetMediaClickListener tweetMediaClickListener) {
+        super.setTweetMediaClickListener(tweetMediaClickListener);
+        if (quoteTweetView != null) {
+            quoteTweetView.setTweetMediaClickListener(tweetMediaClickListener);
         }
     }
 
-    protected void setErrorImage() {
-        // async load the error image and set the proper background color behind it once it's loaded
-        // this does incur the necessity of clearing the background on each load of an image however
-        final Picasso imageLoader = dependencyProvider.getImageLoader();
-
-        if (imageLoader == null) return;
-
-        imageLoader.load(photoErrorResId)
-                .into(mediaView, new com.squareup.picasso.Callback() {
-                    @Override
-                    public void onSuccess() {
-                        mediaView.setBackgroundColor(mediaBgColor);
-                    }
-
-                    @Override
-                    public void onError() { /* intentionally blank */ }
-                });
-    }
-
     /**
-     * @param displayTweet The unformatted Tweet
-     * @return The linkified text with display url's subbed for t.co links
+     * Override the default action when link is clicked.
+     * @param tweetLinkClickListener called when url is clicked.
      */
-    protected CharSequence getLinkifiedText(Tweet displayTweet) {
-        final FormattedTweetText formattedText = dependencyProvider.getTweetUi()
-                .getTweetRepository().formatTweetText(displayTweet);
-
-        if (formattedText == null) return null;
-
-        final boolean stripPhotoEntity = TweetMediaUtils.hasPhoto(displayTweet);
-
-        return TweetTextLinkifier.linkifyUrls(formattedText, getLinkClickListener(),
-                stripPhotoEntity, actionColor);
-    }
-
-    void setContentDescription(Tweet displayTweet) {
-        if (!TweetUtils.isTweetResolvable(displayTweet)) {
-            setContentDescription(getResources().getString(R.string.tw__loading_tweet));
-            return;
-        }
-
-        final FormattedTweetText formattedTweetText = dependencyProvider.getTweetUi()
-                .getTweetRepository().formatTweetText(displayTweet);
-        String tweetText = null;
-        if (formattedTweetText != null) tweetText = formattedTweetText.text;
-
-        final long createdAt = TweetDateUtils.apiTimeToLong(displayTweet.createdAt);
-        String timestamp = null;
-        if (createdAt != TweetDateUtils.INVALID_DATE) {
-            timestamp = DateFormat.getDateInstance().format(new Date(createdAt));
+    @Override
+    public void setTweetLinkClickListener(TweetLinkClickListener tweetLinkClickListener) {
+        super.setTweetLinkClickListener(tweetLinkClickListener);
+        if (quoteTweetView != null) {
+            quoteTweetView.setTweetLinkClickListener(tweetLinkClickListener);
         }
-
-        setContentDescription(getResources().getString(R.string.tw__tweet_content_description,
-                Utils.stringOrEmpty(displayTweet.user.name), Utils.stringOrEmpty(tweetText),
-                Utils.stringOrEmpty(timestamp)));
-    }
-
-    void setTweetActions(Tweet tweet) {
-        tweetActionBarView.setTweet(tweet);
     }
 
     /**
@@ -834,73 +447,4 @@ public void setTweetActionsEnabled(boolean enabled) {
             bottomSeparator.setVisibility(View.VISIBLE);
         }
     }
-
-    protected LinkClickListener getLinkClickListener() {
-        if (linkClickListener == null) {
-            linkClickListener = new LinkClickListener() {
-                @Override
-                public void onUrlClicked(String url) {
-                    if (TextUtils.isEmpty(url)) return;
-
-                    final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-                    if (!IntentUtils.safeStartActivity(getContext(), intent)) {
-                        Fabric.getLogger().e(TweetUi.LOGTAG,
-                                "Activity cannot be found to open URL");
-                    }
-                }
-
-                @Override
-                public void onPhotoClicked(MediaEntity mediaEntity) {
-                    // Does nothing
-                }
-            };
-        }
-        return linkClickListener;
-    }
-
-    class PermalinkClickListener implements OnClickListener {
-        @Override
-        public void onClick(View v) {
-            if (getPermalinkUri() == null) return;
-
-            scribePermalinkClick();
-            launchPermalink();
-        }
-    }
-
-    /**
-     * This is a mockable class that extracts our tight coupling with the TweetUi singleton.
-     */
-    static class DependencyProvider {
-        TweetScribeClient tweetScribeClient;
-        VideoScribeClient videoScribeClient;
-
-        /**
-         * Can be null in edit mode
-         */
-        TweetUi getTweetUi() {
-            return TweetUi.getInstance();
-        }
-
-        TweetScribeClient getTweetScribeClient() {
-            if (tweetScribeClient == null) {
-                tweetScribeClient = new TweetScribeClientImpl(getTweetUi());
-            }
-            return tweetScribeClient;
-        }
-
-        VideoScribeClient getVideoScribeClient() {
-            if (videoScribeClient == null) {
-                videoScribeClient = new VideoScribeClientImpl(getTweetUi());
-            }
-            return videoScribeClient;
-        }
-
-        /**
-         * Can be null if run before TweetUi#doInBackground completes
-         */
-        Picasso getImageLoader() {
-            return TweetUi.getInstance().getImageLoader();
-        }
-    }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java
new file mode 100644
index 00000000..2cf75a68
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BasicTimelineFilter.java
@@ -0,0 +1,229 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.text.TextUtils;
+
+import com.twitter.sdk.android.core.models.HashtagEntity;
+import com.twitter.sdk.android.core.models.MentionEntity;
+import com.twitter.sdk.android.core.models.SymbolEntity;
+import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.models.UrlEntity;
+
+import java.net.IDN;
+import java.text.BreakIterator;
+import java.text.Collator;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+import java.util.TreeSet;
+
+import okhttp3.HttpUrl;
+
+public class BasicTimelineFilter implements TimelineFilter {
+    private final BreakIterator wordIterator;
+    private final Set<String> keywordConstraints;
+    private final Set<String> hashTagConstraints;
+    private final Set<String> urlConstraints;
+    private final Set<String> handleConstraints;
+
+    public BasicTimelineFilter(FilterValues filterValues) {
+        this(filterValues, Locale.getDefault());
+    }
+
+    public BasicTimelineFilter(FilterValues filterValues, Locale locale) {
+        final Comparator<String> comparator = new IgnoreCaseComparator(locale);
+
+        wordIterator = BreakIterator.getWordInstance(locale);
+        keywordConstraints = new TreeSet<>(comparator);
+        keywordConstraints.addAll(filterValues.keywords);
+
+        hashTagConstraints = new TreeSet<>(comparator);
+        for (String hashtag : filterValues.hashtags) {
+            final String sanitizedHashtag = normalizeHashtag(hashtag);
+            hashTagConstraints.add(sanitizedHashtag);
+        }
+
+        handleConstraints = new HashSet<>(filterValues.handles.size());
+        for (String handle : filterValues.handles) {
+            final String sanitizedHandle = normalizeHandle(handle);
+            handleConstraints.add(sanitizedHandle);
+        }
+
+        urlConstraints = new HashSet<>(filterValues.urls.size());
+        for (String url : filterValues.urls) {
+            final String sanitizedUrl = normalizeUrl(url);
+            urlConstraints.add(sanitizedUrl);
+        }
+    }
+
+    @Override
+    public List<Tweet> filter(List<Tweet> tweets) {
+        final List<Tweet> filteredTweets = new ArrayList<>();
+        for (int idx = 0; idx < tweets.size(); idx++) {
+            final Tweet tweet = tweets.get(idx);
+            if (!shouldFilterTweet(tweet)) {
+                filteredTweets.add(tweet);
+            }
+        }
+
+        return Collections.unmodifiableList(filteredTweets);
+    }
+
+    @Override
+    public int totalFilters() {
+        return keywordConstraints.size() + hashTagConstraints.size()
+                + urlConstraints.size() + handleConstraints.size();
+    }
+
+    boolean shouldFilterTweet(Tweet tweet) {
+        if (tweet.user != null &&
+                containsMatchingScreenName(tweet.user.screenName)) {
+            return true;
+        }
+
+        if (tweet.entities != null &&
+                (containsMatchingHashtag(tweet.entities.hashtags) ||
+                        containsMatchingSymbol(tweet.entities.symbols) ||
+                        containsMatchingUrl(tweet.entities.urls) ||
+                        containsMatchingMention(tweet.entities.userMentions))) {
+            return true;
+        }
+
+        return containsMatchingText(tweet);
+    }
+
+    boolean containsMatchingText(Tweet tweet) {
+        wordIterator.setText(tweet.text);
+        int start = wordIterator.first();
+        for (int end = wordIterator.next();
+             end != BreakIterator.DONE;
+             start = end, end = wordIterator.next()) {
+            final String word = tweet.text.substring(start, end);
+
+            if (keywordConstraints.contains(word)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    boolean containsMatchingHashtag(List<HashtagEntity> hashtags) {
+        for (HashtagEntity entity : hashtags) {
+            if (hashTagConstraints.contains(entity.text)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    boolean containsMatchingSymbol(List<SymbolEntity> symbols) {
+        for (SymbolEntity entity : symbols) {
+            if (hashTagConstraints.contains(entity.text)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    boolean containsMatchingUrl(List<UrlEntity> urls) {
+        for (UrlEntity entity : urls) {
+            final String url = normalizeUrl(entity.expandedUrl);
+            if (urlConstraints.contains(url)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    boolean containsMatchingMention(List<MentionEntity> mentions) {
+        for (MentionEntity entity : mentions) {
+            final String name = normalizeHandle(entity.screenName);
+            if (handleConstraints.contains(name)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    boolean containsMatchingScreenName(String screenName) {
+        final String name = normalizeHandle(screenName);
+        return handleConstraints.contains(name);
+    }
+
+    static String normalizeUrl(String url) {
+        try {
+            final HttpUrl parsedUrl = HttpUrl.parse(url);
+            if (parsedUrl == null || parsedUrl.host() == null) {
+                return IDN.toASCII(url).toLowerCase(Locale.US);
+            }
+
+            return parsedUrl.host().toLowerCase(Locale.US);
+        } catch (IllegalArgumentException e) {
+            return url;
+        }
+    }
+
+    static String normalizeHashtag(String hashtag) {
+        if (TextUtils.isEmpty(hashtag)) {
+            return hashtag;
+        }
+
+        final char firstChar = hashtag.charAt(0);
+        if (firstChar == '#' || firstChar == '\uFF03' || firstChar == '$') {
+            hashtag = hashtag.substring(1, hashtag.length());
+        }
+
+        return hashtag;
+    }
+
+    static String normalizeHandle(String handle) {
+        if (TextUtils.isEmpty(handle)) {
+            return handle;
+        }
+
+        final char firstChar = handle.charAt(0);
+        if (firstChar == '@' || firstChar == '\uFF20') {
+            handle = handle.substring(1, handle.length());
+        }
+
+        return handle.toLowerCase(Locale.US);
+    }
+
+    static class IgnoreCaseComparator implements Comparator<String> {
+        private final Collator collator;
+
+        IgnoreCaseComparator(Locale locale) {
+            collator = Collator.getInstance(locale);
+            collator.setStrength(Collator.PRIMARY);
+        }
+
+        public int compare(String string1, String string2) {
+            return collator.compare(string1, string2);
+        }
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
index 12949904..2303d38d 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
@@ -18,22 +18,20 @@
 package com.twitter.sdk.android.tweetui;
 
 import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.internal.TwitterCollection;
+import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.models.TwitterCollection;
 import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
 import com.twitter.sdk.android.core.models.User;
-import com.twitter.sdk.android.core.GuestCallback;
 
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import io.fabric.sdk.android.Fabric;
+import retrofit2.Call;
 
 /**
  * CollectionTimeline provides a timeline of tweets from the collections/collection API source.
@@ -45,8 +43,7 @@
     final String collectionIdentifier;
     final Integer maxItemsPerRequest;
 
-    CollectionTimeline(TweetUi tweetUi, Long collectionId, Integer maxItemsPerRequest) {
-        super(tweetUi);
+    CollectionTimeline(Long collectionId, Integer maxItemsPerRequest) {
         // prefix the collection id with the collection prefix
         if (collectionId == null) {
             this.collectionIdentifier = null;
@@ -64,7 +61,7 @@
      */
     @Override
     public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) {
-        addRequest(createCollectionRequest(minPosition, null, cb));
+        createCollectionRequest(minPosition, null).enqueue(new CollectionCallback(cb));
     }
 
     /**
@@ -74,7 +71,7 @@ public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) {
      */
     @Override
     public void previous(Long maxPosition, Callback<TimelineResult<Tweet>> cb) {
-        addRequest(createCollectionRequest(null, maxPosition, cb));
+        createCollectionRequest(null, maxPosition).enqueue(new CollectionCallback(cb));
     }
 
     @Override
@@ -82,16 +79,10 @@ String getTimelineType() {
         return SCRIBE_SECTION;
     }
 
-    Callback<TwitterApiClient> createCollectionRequest(final Long minPosition,
-        final Long maxPosition, final Callback<TimelineResult<Tweet>> cb) {
-        return new LoggingCallback<TwitterApiClient>(cb, Fabric.getLogger()) {
-            @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getCollectionService().collection(collectionIdentifier,
-                        maxItemsPerRequest, maxPosition, minPosition,
-                        new GuestCallback<>(new CollectionCallback(cb)));
-            }
-        };
+    Call<TwitterCollection> createCollectionRequest(final Long minPosition,
+            final Long maxPosition) {
+        return TwitterCore.getInstance().getApiClient().getCollectionService()
+                .collection(collectionIdentifier, maxItemsPerRequest, maxPosition, minPosition);
     }
 
 
@@ -99,7 +90,7 @@ public void success(Result<TwitterApiClient> result) {
      * Wrapper callback which unpacks a TwitterCollection into a TimelineResult (cursor and items).
      */
     class CollectionCallback extends Callback<TwitterCollection> {
-        private final Callback<TimelineResult<Tweet>> cb;
+        final Callback<TimelineResult<Tweet>> cb;
 
         /**
          * Constructs a CollectionCallback
@@ -120,7 +111,7 @@ public void success(Result<TwitterCollection> result) {
                 timelineResult = new TimelineResult<>(null, Collections.<Tweet>emptyList());
             }
             if (cb != null) {
-                cb.success(timelineResult, result.response);
+                cb.success(new Result(timelineResult, result.response));
             }
         }
 
@@ -141,23 +132,30 @@ public void failure(TwitterException exception) {
             return Collections.emptyList();
         }
         final List<Tweet> tweets = new ArrayList<>();
-        final Map<Long, Tweet> tweetMap = new HashMap<>();
-        for (Tweet trimmedTweet: collection.contents.tweetMap.values()) {
-            // read user id from the trimmed Tweet
-            final Long userId = trimmedTweet.user.id;
-            // lookup User in the collection response's UserMap
-            final User user = collection.contents.userMap.get(userId);
-            // build the Tweet with the hydrated User
-            final Tweet tweet = new TweetBuilder().copy(trimmedTweet).setUser(user).build();
-            tweetMap.put(tweet.id, tweet);
-        }
         for (TwitterCollection.TimelineItem item: collection.metadata.timelineItems) {
-            final Tweet tweet = tweetMap.get(item.tweetItem.id);
+            final Tweet trimmedTweet =  collection.contents.tweetMap.get(item.tweetItem.id);
+            final Tweet tweet = mapTweetToUsers(trimmedTweet, collection.contents.userMap);
             tweets.add(tweet);
         }
         return tweets;
     }
 
+    static Tweet mapTweetToUsers(Tweet trimmedTweet, Map<Long, User> userMap) {
+        // read user id from the trimmed Tweet
+        final Long userId = trimmedTweet.user.id;
+        // lookup User in the collection response's UserMap
+        final User user = userMap.get(userId);
+        // build the Tweet with the User
+        final TweetBuilder builder = new TweetBuilder().copy(trimmedTweet).setUser(user);
+        // Repeat process for any quote tweets
+        if (trimmedTweet.quotedStatus != null) {
+            final Tweet quoteStatus = mapTweetToUsers(trimmedTweet.quotedStatus, userMap);
+            builder.setQuotedStatus(quoteStatus);
+        }
+
+        return builder.build();
+    }
+
     static TimelineCursor getTimelineCursor(TwitterCollection twitterCollection) {
         if (twitterCollection == null || twitterCollection.metadata == null ||
                 twitterCollection.metadata.position == null) {
@@ -172,26 +170,19 @@ static TimelineCursor getTimelineCursor(TwitterCollection twitterCollection) {
      * CollectionTimeline Builder.
      */
     public static class Builder {
-        private final TweetUi tweetUi;
         private Long collectionId;
         private Integer maxItemsPerRequest = 30;
 
         /**
          * Constructs a Builder.
          */
-        public Builder() {
-            this(TweetUi.getInstance());
-        }
+        public Builder() {}
 
         /**
-         * Constructs a Builder.
+         * @deprecated use {@link Builder#Builder()} instead
          */
-        public Builder(TweetUi tweetUi) {
-            if (tweetUi == null) {
-                throw new IllegalArgumentException("TweetUi instance must not be null");
-            }
-            this.tweetUi = tweetUi;
-        }
+        @Deprecated
+        public Builder(TweetUi tweetUi) {}
 
         /**
          * Sets the id for the CollectionTimeline.
@@ -221,7 +212,7 @@ public CollectionTimeline build() {
             if (collectionId == null) {
                 throw new IllegalStateException("collection id must not be null");
             }
-            return new CollectionTimeline(tweetUi, collectionId, maxItemsPerRequest);
+            return new CollectionTimeline(collectionId, maxItemsPerRequest);
         }
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CompactTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CompactTweetView.java
index c8684fa2..ebf19448 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CompactTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CompactTweetView.java
@@ -17,9 +17,7 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import android.annotation.TargetApi;
 import android.content.Context;
-import android.os.Build;
 import android.util.AttributeSet;
 
 import com.twitter.sdk.android.core.models.MediaEntity;
@@ -30,6 +28,7 @@
     private static final double SQUARE_ASPECT_RATIO = 1.0;
     private static final double MAX_LANDSCAPE_ASPECT_RATIO = 3.0;
     private static final double MIN_LANDSCAPE_ASPECT_RATIO = 4.0 / 3.0;
+    private static final double DEFAULT_ASPECT_RATIO_MEDIA_CONTAINER = 16.0 / 10.0;
 
     public CompactTweetView(Context context, Tweet tweet) {
         super(context, tweet);
@@ -48,7 +47,6 @@ public CompactTweetView(Context context, AttributeSet attrs) {
         super(context, attrs);
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public CompactTweetView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
     }
@@ -61,10 +59,25 @@ protected int getLayout() {
     @Override
     void render() {
         super.render();
-        // Redraw screen name on recycle
+
+        // Redraw screen name on recycle, because TextView doesn't resize when text length changes
         screenNameView.requestLayout();
     }
 
+    @Override
+    protected void applyStyles() {
+        super.applyStyles();
+
+        final int paddingTop = getResources()
+                .getDimensionPixelSize(R.dimen.tw__compact_tweet_container_padding_top);
+        setPadding(0, paddingTop, 0, 0);
+
+        final int mediaViewRadius =
+                getResources().getDimensionPixelSize(R.dimen.tw__media_view_radius);
+        tweetMediaView.setRoundedCornersRadii(mediaViewRadius, mediaViewRadius,
+                mediaViewRadius, mediaViewRadius);
+    }
+
     /**
      * Returns the desired aspect ratio of the Tweet media entity according to "sizes" metadata
      * and the aspect ratio display rules.
@@ -89,6 +102,17 @@ protected double getAspectRatio(MediaEntity photoEntity) {
         }
     }
 
+    /**
+     * Returns the desired aspect ratio for Tweet that contains photo entities
+     *
+     * @param photoCount total count of photo entities
+     * @return the target image and bitmap width to height aspect ratio
+     */
+    @Override
+    protected double getAspectRatioForPhotoEntity(int photoCount) {
+        return DEFAULT_ASPECT_RATIO_MEDIA_CONTAINER;
+    }
+
     @Override
     String getViewTypeName() {
         return VIEW_TYPE_NAME;
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
new file mode 100644
index 00000000..08614933
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
@@ -0,0 +1,159 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
+import com.twitter.sdk.android.core.Callback;
+import com.twitter.sdk.android.core.Result;
+import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.TwitterException;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+import com.twitter.sdk.android.core.models.Tweet;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+
+/**
+ * FilterTimelineDelegate manages and filters timeline data items and loads items from a Timeline.
+ */
+class FilterTimelineDelegate extends TimelineDelegate<Tweet> {
+    final TimelineFilter timelineFilter;
+    final TweetUi tweetUi;
+
+    static final String TWEETS_COUNT_JSON_PROP = "tweet_count";
+    static final String TWEETS_FILTERED_JSON_PROP = "tweets_filtered";
+    static final String TOTAL_APPLIED_FILTERS_JSON_PROP = "total_filters";
+    final Gson gson = new Gson();
+
+    /**
+     * Constructs a FilterTimelineDelegate with a timeline for requesting data and timelineFilter to
+     * filter tweets
+     * @param timeline Timeline source
+     * @param timelineFilter a timelineFilter for filtering tweets from timeline
+     * @throws java.lang.IllegalArgumentException if timeline is null
+     */
+    public FilterTimelineDelegate(Timeline<Tweet> timeline, TimelineFilter timelineFilter) {
+        super(timeline);
+        this.timelineFilter = timelineFilter;
+        this.tweetUi = TweetUi.getInstance();
+    }
+
+    @Override
+    public void refresh(Callback<TimelineResult<Tweet>> developerCb) {
+        // reset scrollStateHolder cursors to be null, loadNext will get latest items
+        timelineStateHolder.resetCursors();
+        // load latest timeline items and replace existing items
+        loadNext(timelineStateHolder.positionForNext(),
+                new TimelineFilterCallback(new RefreshCallback(developerCb, timelineStateHolder),
+                timelineFilter));
+    }
+
+    @Override
+    public void next(Callback<TimelineResult<Tweet>> developerCb) {
+        loadNext(timelineStateHolder.positionForNext(),
+            new TimelineFilterCallback(new NextCallback(developerCb, timelineStateHolder),
+                    timelineFilter));
+    }
+
+    @Override
+    public void previous() {
+        loadPrevious(timelineStateHolder.positionForPrevious(),
+                new TimelineFilterCallback(new PreviousCallback(timelineStateHolder),
+                        timelineFilter));
+    }
+
+    /**
+     * Handles filtering of tweets from the timeline, provided a given TimelineFilter
+     */
+    class TimelineFilterCallback extends Callback<TimelineResult<Tweet>> {
+        final DefaultCallback callback;
+        final TimelineFilter timelineFilter;
+        final Handler handler;
+        final ExecutorService executorService;
+
+        TimelineFilterCallback(DefaultCallback callback, TimelineFilter timelineFilter) {
+            this.callback = callback;
+            this.timelineFilter = timelineFilter;
+            this.handler = new Handler(Looper.getMainLooper());
+            this.executorService = TwitterCore.getInstance().getFabric().getExecutorService();
+        }
+
+        @Override
+        public void success(final Result<TimelineResult<Tweet>> result) {
+            final Runnable timelineFilterRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    final List<Tweet> filteredTweets = timelineFilter.filter(result.data.items);
+                    final TimelineResult<Tweet> filteredTimelineResult =
+                            buildTimelineResult(result.data.timelineCursor, filteredTweets);
+
+                    handler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            callback.success(new Result<>(filteredTimelineResult, result.response));
+                        }
+                    });
+
+                    scribeFilteredTimeline(result.data.items, filteredTweets);
+                }
+            };
+
+            executorService.execute(timelineFilterRunnable);
+        }
+
+        @Override
+        public void failure(final TwitterException ex) {
+            if (callback != null) {
+                callback.failure(ex);
+            }
+        }
+
+        TimelineResult<Tweet> buildTimelineResult(TimelineCursor timelineCursor,
+                                                  List<Tweet> filteredTweets) {
+            return new TimelineResult<>(timelineCursor, filteredTweets);
+        }
+    }
+
+    void scribeFilteredTimeline(List<Tweet> tweets, List<Tweet> filteredTweets) {
+        final int tweetCount = tweets.size();
+        final int totalTweetsFiltered = tweetCount - filteredTweets.size();
+        final int totalFilters = timelineFilter.totalFilters();
+
+        final String jsonMessage = getJsonMessage(tweetCount, totalTweetsFiltered,
+                totalFilters);
+        final ScribeItem scribeItem = ScribeItem.fromMessage(jsonMessage);
+        final List<ScribeItem> items = new ArrayList<>();
+        items.add(scribeItem);
+
+        final String timelineType = TweetTimelineListAdapter.getTimelineType(timeline);
+        tweetUi.scribe(ScribeConstants.getTfwClientFilterTimelineNamespace(timelineType), items);
+    }
+
+    private String getJsonMessage(int totalTweetsSize, int filteredTweetsSize, int totalFilters) {
+        final JsonObject message = new JsonObject();
+        message.addProperty(TWEETS_COUNT_JSON_PROP, totalTweetsSize);
+        message.addProperty(TWEETS_FILTERED_JSON_PROP, totalTweetsSize - filteredTweetsSize);
+        message.addProperty(TOTAL_APPLIED_FILTERS_JSON_PROP, totalFilters);
+        return gson.toJson(message);
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.java
new file mode 100644
index 00000000..372b48ae
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterValues.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import com.google.gson.annotations.SerializedName;
+
+import java.util.Collections;
+import java.util.List;
+
+public class FilterValues {
+
+    @SerializedName("keywords")
+    public final List<String> keywords;
+
+    @SerializedName("hashtags")
+    public final List<String> hashtags;
+
+    @SerializedName("handles")
+    public final List<String> handles;
+
+    @SerializedName("urls")
+    public final List<String> urls;
+
+    public FilterValues(List<String> keywords, List<String> hashtags,
+                        List<String> handles, List<String> urls) {
+        this.keywords = getSafeList(keywords);
+        this.hashtags = getSafeList(hashtags);
+        this.handles = getSafeList(handles);
+        this.urls = getSafeList(urls);
+    }
+
+    private <T> List<T> getSafeList(List<T> filters) {
+        // Entities may be null if Gson does not find object to parse. When that happens, make sure
+        // to return an empty list.
+        if (filters == null) {
+            return Collections.EMPTY_LIST;
+        } else {
+            return Collections.unmodifiableList(filters);
+        }
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FixedTweetTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FixedTweetTimeline.java
index 3e5ede1e..91f3af27 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FixedTweetTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FixedTweetTimeline.java
@@ -18,6 +18,7 @@
 package com.twitter.sdk.android.tweetui;
 
 import com.twitter.sdk.android.core.Callback;
+import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.models.Tweet;
 
 import java.util.ArrayList;
@@ -29,8 +30,7 @@
     private static final String SCRIBE_SECTION = "fixed";
     List<Tweet> tweets;
 
-    FixedTweetTimeline(TweetUi tweetUi, List<Tweet> tweets) {
-        super(tweetUi);
+    FixedTweetTimeline(List<Tweet> tweets) {
         this.tweets = tweets == null ? new ArrayList<Tweet>() : tweets;
     }
 
@@ -39,7 +39,7 @@ public void next(Long minPosition, Callback<TimelineResult<Tweet>> cb) {
         // always return the same fixed set of 'latest' Tweets
         final TimelineResult<Tweet> timelineResult
                 = new TimelineResult<>(new TimelineCursor(tweets), tweets);
-        cb.success(timelineResult, null);
+        cb.success(new Result(timelineResult, null));
     }
 
     @Override
@@ -47,7 +47,7 @@ public void previous(Long maxPosition, Callback<TimelineResult<Tweet>> cb) {
         final List<Tweet> empty = Collections.emptyList();
         final TimelineResult<Tweet> timelineResult = new TimelineResult<>(new TimelineCursor(empty),
                 empty);
-        cb.success(timelineResult, null);
+        cb.success(new Result(timelineResult, null));
     }
 
     @Override
@@ -59,26 +59,18 @@ String getTimelineType() {
      * FixedTweetTimeline Builder.
      */
     public static class Builder {
-        private final TweetUi tweetUi;
         private List<Tweet> tweets;
 
         /**
          * Constructs a Builder.
          */
-        public Builder() {
-            this(TweetUi.getInstance());
-        }
+        public Builder() {}
 
         /**
-         * Constructs a Builder.
-         * @param tweetUi A TweetUi instance.
+         * @deprecated use {@link Builder#Builder()} instead
          */
-        public Builder(TweetUi tweetUi) {
-            if (tweetUi == null) {
-                throw new IllegalArgumentException("TweetUi instance must not be null");
-            }
-            this.tweetUi = tweetUi;
-        }
+        @Deprecated
+        public Builder(TweetUi tweetUi) {}
 
         /**
          * Sets the Tweets to be returned by the timeline.
@@ -94,7 +86,7 @@ public Builder setTweets(List<Tweet> tweets) {
          * @return a FixedTweetTimeline.
          */
         public FixedTweetTimeline build() {
-            return new FixedTweetTimeline(tweetUi, tweets);
+            return new FixedTweetTimeline(tweets);
         }
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.java
index 21c11e88..7faf1046 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.java
@@ -24,11 +24,13 @@
     int end;
     final String displayUrl;
     final String url;
+    final String expandedUrl;
 
     FormattedUrlEntity(UrlEntity entity) {
         this.start = entity.getStart();
         this.end = entity.getEnd();
         this.displayUrl = entity.displayUrl;
         this.url = entity.url;
+        this.expandedUrl = entity.expandedUrl;
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryActivity.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryActivity.java
index 03cc1b93..ffa589e9 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryActivity.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryActivity.java
@@ -19,23 +19,140 @@
 
 import android.app.Activity;
 import android.os.Bundle;
+import android.support.v4.view.ViewPager;
 
-import com.squareup.picasso.Picasso;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
 import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.tweetui.internal.MultiTouchImageView;
+import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
+
+import java.util.Collections;
+import java.util.List;
+
+import java.io.Serializable;
 
 public class GalleryActivity extends Activity {
+    public static final String GALLERY_ITEM = "GALLERY_ITEM";
     static final String MEDIA_ENTITY = "MEDIA_ENTITY";
-    static final String TWEET_ID = "TWEET_ID";
+    GalleryItem galleryItem;
+
+    final GalleryScribeClient galleryScribeClient =
+            new GalleryScribeClientImpl(TweetUi.getInstance());
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.tw__gallery_activity);
 
+        galleryItem = getGalleryItem();
+
+        // Only scribe show event when view is first created
+        if (savedInstanceState == null) {
+            scribeShowEvent();
+        }
+
+        final GalleryAdapter adapter = new GalleryAdapter(this, getSwipeToDismissCallback());
+        adapter.addAll(galleryItem.mediaEntities);
+
+        final ViewPager viewPager = (ViewPager) findViewById(R.id.tw__view_pager);
+        final int marginPixels =
+                getResources().getDimensionPixelSize(R.dimen.tw__gallery_page_margin);
+        viewPager.setPageMargin(marginPixels);
+        viewPager.addOnPageChangeListener(getOnPageChangeListener());
+        viewPager.setAdapter(adapter);
+        viewPager.setCurrentItem(galleryItem.mediaEntityIndex);
+    }
+
+    ViewPager.OnPageChangeListener getOnPageChangeListener() {
+        return new ViewPager.OnPageChangeListener() {
+            int galleryPosition = -1;
+
+            @Override
+            public void onPageScrolled(int position, float positionOffset,
+                                       int positionOffsetPixels) {
+                // Initial on tap of entity at position 0, which is not invoked by onPageSelected()
+                if (galleryPosition == -1 && position == 0 && positionOffset == 0.0) {
+                    scribeImpressionEvent(position);
+                    galleryPosition++;
+                }
+            }
+
+            @Override
+            public void onPageSelected(int position) {
+                if (galleryPosition >= 0) {
+                    scribeNavigateEvent();
+                }
+                galleryPosition++;
+
+                scribeImpressionEvent(position);
+            }
+
+            @Override
+            public void onPageScrollStateChanged(int state) { /* intentionally blank */ }
+        };
+    }
+
+    SwipeToDismissTouchListener.Callback getSwipeToDismissCallback() {
+       return new SwipeToDismissTouchListener.Callback() {
+           @Override
+           public void onDismiss() {
+               scribeDismissEvent();
+               finish();
+               overridePendingTransition(0, R.anim.tw__slide_out);
+           }
+
+           @Override
+           public void onMove(float translationY) { /* intentionally blank */ }
+       };
+    }
+
+    // For backwards compatibility we need to support single entity or list of entities.
+    GalleryItem getGalleryItem() {
         final MediaEntity entity = (MediaEntity) getIntent().getSerializableExtra(MEDIA_ENTITY);
-        final MultiTouchImageView imageView = (MultiTouchImageView) findViewById(R.id.image_view);
+        if (entity != null) {
+            return new GalleryItem(0, Collections.singletonList(entity));
+        }
+
+        return (GalleryItem) getIntent().getSerializableExtra(GALLERY_ITEM);
+    }
+
+    @Override
+    public void onBackPressed() {
+        scribeDismissEvent();
+        super.onBackPressed();
+        overridePendingTransition(0, R.anim.tw__slide_out);
+    }
+
+    void scribeShowEvent() {
+        galleryScribeClient.show();
+    }
+
+    void scribeDismissEvent() {
+        galleryScribeClient.dismiss();
+    }
+
+    void scribeImpressionEvent(int mediaEntityPosition) {
+        final MediaEntity mediaEntity = galleryItem.mediaEntities.get(mediaEntityPosition);
+        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(galleryItem.tweetId, mediaEntity);
+        galleryScribeClient.impression(scribeItem);
+    }
+
+    void scribeNavigateEvent() {
+        galleryScribeClient.navigate();
+    }
+
+    public static class GalleryItem implements Serializable {
+        public final long tweetId;
+        public final int mediaEntityIndex;
+        public final List<MediaEntity> mediaEntities;
+
+        public GalleryItem(int mediaEntityIndex, List<MediaEntity> mediaEntities) {
+            this(0L, mediaEntityIndex, mediaEntities);
+        }
 
-        Picasso.with(this).load(entity.mediaUrlHttps).into(imageView);
+        public GalleryItem(long tweetId, int mediaEntityIndex, List<MediaEntity> mediaEntities) {
+            this.tweetId = tweetId;
+            this.mediaEntityIndex = mediaEntityIndex;
+            this.mediaEntities = mediaEntities;
+        }
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryAdapter.java
new file mode 100644
index 00000000..8dbcb965
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryAdapter.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.content.Context;
+import android.support.v4.view.PagerAdapter;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.squareup.picasso.Picasso;
+import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.tweetui.internal.GalleryImageView;
+import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class GalleryAdapter extends PagerAdapter {
+    final List<MediaEntity> items = new ArrayList<>();
+    final Context context;
+    final SwipeToDismissTouchListener.Callback callback;
+
+    GalleryAdapter(Context context, SwipeToDismissTouchListener.Callback callback) {
+        this.context = context;
+        this.callback = callback;
+    }
+
+    void addAll(List<MediaEntity> entities) {
+        items.addAll(entities);
+        notifyDataSetChanged();
+    }
+
+    @Override
+    public int getCount() {
+        return items.size();
+    }
+
+    @Override
+    public boolean isViewFromObject(View view, Object object) {
+        return view == object;
+    }
+
+    @Override
+    public Object instantiateItem(ViewGroup container, int position) {
+        final GalleryImageView root = new GalleryImageView(context);
+        root.setSwipeToDismissCallback(callback);
+
+        container.addView(root);
+
+        final MediaEntity entity = items.get(position);
+        Picasso.with(context).load(entity.mediaUrlHttps).into(root);
+
+        return root;
+    }
+
+    @Override
+    public void destroyItem(ViewGroup container, int position, Object object) {
+        container.removeView((View) object);
+    }
+}
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TestTweetUiAuthRequestQueue.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryScribeClient.java
similarity index 75%
rename from tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TestTweetUiAuthRequestQueue.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryScribeClient.java
index faedb0b8..74c6d7e0 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TestTweetUiAuthRequestQueue.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryScribeClient.java
@@ -17,9 +17,14 @@
 
 package com.twitter.sdk.android.tweetui;
 
-// Make AuthRequestQueue public so we can mock it using Mockito
-public class TestTweetUiAuthRequestQueue extends TweetUiAuthRequestQueue {
-    public TestTweetUiAuthRequestQueue() {
-        super(null, null);
-    }
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+
+public interface GalleryScribeClient {
+    void show();
+
+    void impression(ScribeItem item);
+
+    void navigate();
+
+    void dismiss();
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImpl.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImpl.java
new file mode 100644
index 00000000..1278081c
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImpl.java
@@ -0,0 +1,101 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+import com.twitter.sdk.android.core.internal.scribe.SyndicationClientEvent;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class GalleryScribeClientImpl implements GalleryScribeClient {
+
+    static final String TFW_CLIENT_EVENT_PAGE = "android";
+    static final String TFW_CLIENT_EVENT_SECTION = "gallery";
+
+    static final String SCRIBE_SHOW_ACTION = "show";
+    static final String SCRIBE_IMPRESSION_ACTION = "impression";
+    static final String SCRIBE_NAVIGATE_ACTION = "navigate";
+    static final String SCRIBE_DISMISS_ACTION = "dismiss";
+
+    final TweetUi tweetUi;
+
+    public GalleryScribeClientImpl(TweetUi tweetUi) {
+        this.tweetUi = tweetUi;
+    }
+
+    @Override
+    public void show() {
+        tweetUi.scribe(getTfwShowNamespace());
+    }
+
+    @Override
+    public void impression(ScribeItem item) {
+        final List<ScribeItem> items = new ArrayList<>();
+        items.add(item);
+
+        tweetUi.scribe(getTfwImpressionNamespace(), items);
+    }
+
+    @Override
+    public void navigate() {
+        tweetUi.scribe(getTfwNavigateNamespace());
+    }
+
+    @Override
+    public void dismiss() {
+        tweetUi.scribe(getTfwDimissNamespace());
+    }
+
+    static EventNamespace getTfwImpressionNamespace() {
+        return new EventNamespace.Builder()
+                .setClient(SyndicationClientEvent.CLIENT_NAME)
+                .setPage(TFW_CLIENT_EVENT_PAGE)
+                .setSection(TFW_CLIENT_EVENT_SECTION)
+                .setAction(SCRIBE_IMPRESSION_ACTION)
+                .builder();
+    }
+
+    static EventNamespace getTfwShowNamespace() {
+        return new EventNamespace.Builder()
+                .setClient(SyndicationClientEvent.CLIENT_NAME)
+                .setPage(TFW_CLIENT_EVENT_PAGE)
+                .setSection(TFW_CLIENT_EVENT_SECTION)
+                .setAction(SCRIBE_SHOW_ACTION)
+                .builder();
+    }
+
+    static EventNamespace getTfwNavigateNamespace() {
+        return new EventNamespace.Builder()
+                .setClient(SyndicationClientEvent.CLIENT_NAME)
+                .setPage(TFW_CLIENT_EVENT_PAGE)
+                .setSection(TFW_CLIENT_EVENT_SECTION)
+                .setAction(SCRIBE_NAVIGATE_ACTION)
+                .builder();
+    }
+
+    static EventNamespace getTfwDimissNamespace() {
+        return new EventNamespace.Builder()
+                .setClient(SyndicationClientEvent.CLIENT_NAME)
+                .setPage(TFW_CLIENT_EVENT_PAGE)
+                .setSection(TFW_CLIENT_EVENT_SECTION)
+                .setAction(SCRIBE_DISMISS_ACTION)
+                .builder();
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.java
index f765ae67..701ac560 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.java
@@ -17,8 +17,6 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import com.twitter.sdk.android.core.models.MediaEntity;
-
 /**
  * Tweet interaction listener
  */
@@ -29,10 +27,4 @@
      * @param url The source URL
      */
     void onUrlClicked(String url);
-
-    /**
-     * MediaEntity was clicked.
-     * @param mediaEntity the media entity
-     */
-    void onPhotoClicked(MediaEntity mediaEntity);
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/PlayerActivity.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/PlayerActivity.java
index c96ddc42..4aaba6fa 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/PlayerActivity.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/PlayerActivity.java
@@ -19,14 +19,21 @@
 
 import android.app.Activity;
 import android.os.Bundle;
+import android.view.View;
 
-import com.twitter.sdk.android.tweetui.internal.VideoControlView;
-import com.twitter.sdk.android.tweetui.internal.VideoView;
-import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
+
+import java.io.Serializable;
 
 public class PlayerActivity extends Activity {
-    static final String MEDIA_ENTITY = "MEDIA_ENTITY";
-    static final String TWEET_ID = "TWEET_ID";
+
+    public static final String PLAYER_ITEM = "PLAYER_ITEM";
+    public static final String SCRIBE_ITEM = "SCRIBE_ITEM";
+
+    static final VideoScribeClient videoScribeClient =
+            new VideoScribeClientImpl(TweetUi.getInstance());
+
     PlayerController playerController;
 
     @Override
@@ -34,22 +41,97 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.tw__player_activity);
 
-        final VideoView videoView = (VideoView) findViewById(R.id.video_view);
-        final VideoControlView videoControlView =
-                (VideoControlView) findViewById(R.id.video_control_view);
-        final long tweetId = getIntent().getLongExtra(TWEET_ID, 0);
-        final MediaEntity entity = (MediaEntity) getIntent().getSerializableExtra(MEDIA_ENTITY);
+        final PlayerItem item = (PlayerItem) getIntent().getSerializableExtra(PLAYER_ITEM);
+        final View rootView = findViewById(android.R.id.content);
+        playerController = new PlayerController(rootView,
+                new SwipeToDismissTouchListener.Callback(){
+
+            @Override
+            public void onDismiss() {
+                PlayerActivity.this.finish();
+                overridePendingTransition(0, R.anim.tw__slide_out);
+            }
+
+            @Override
+            public void onMove(float translationY) {
 
-        final VideoScribeClient scribeClient = new VideoScribeClientImpl(TweetUi.getInstance());
-        scribeClient.play(tweetId, entity);
+            }
+        });
+        playerController.prepare(item);
+
+        final ScribeItem scribeItem = (ScribeItem) getIntent().getSerializableExtra(SCRIBE_ITEM);
+        scribeCardPlayImpression(scribeItem);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        playerController.onResume();
+    }
 
-        playerController = new PlayerController(videoView, videoControlView);
-        playerController.prepare(entity);
+    @Override
+    protected void onPause() {
+        playerController.onPause();
+        super.onPause();
     }
 
     @Override
     public void onDestroy() {
-        playerController.cleanup();
+        playerController.onDestroy();
         super.onDestroy();
     }
+
+    @Override
+    public void onBackPressed() {
+        super.onBackPressed();
+        overridePendingTransition(0, R.anim.tw__slide_out);
+    }
+
+    private void scribeCardPlayImpression(ScribeItem scribeItem) {
+        videoScribeClient.play(scribeItem);
+    }
+
+    public static class PlayerItem implements Serializable {
+        public final String url;
+        public final boolean looping;
+        public final boolean showVideoControls;
+        public final String callToActionUrl;
+        public final String callToActionText;
+
+        /**
+         * @deprecated use  {@link PlayerItem#PlayerItem(String, boolean, boolean, String, String)}
+         * instead
+         */
+        @Deprecated
+        public PlayerItem(String url, boolean looping) {
+            this.url = url;
+            this.looping = looping;
+            this.showVideoControls = false;
+            this.callToActionUrl = null;
+            this.callToActionText = null;
+        }
+
+        /**
+         * @deprecated use  {@link PlayerItem#PlayerItem(String, boolean, boolean, String, String)}
+         * instead
+         */
+        @Deprecated
+        public PlayerItem(String url, boolean looping,
+                          String callToActionText, String callToActionUrl) {
+            this.url = url;
+            this.looping = looping;
+            this.showVideoControls = false;
+            this.callToActionText = callToActionText;
+            this.callToActionUrl = callToActionUrl;
+        }
+
+        public PlayerItem(String url, boolean looping, boolean showVideoControls,
+                          String callToActionText, String callToActionUrl) {
+            this.url = url;
+            this.looping = looping;
+            this.showVideoControls = showVideoControls;
+            this.callToActionText = callToActionText;
+            this.callToActionUrl = callToActionUrl;
+        }
+    }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/PlayerController.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/PlayerController.java
index b9635250..af766aee 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/PlayerController.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/PlayerController.java
@@ -17,12 +17,15 @@
 
 package com.twitter.sdk.android.tweetui;
 
+import android.content.Intent;
 import android.media.MediaPlayer;
 import android.net.Uri;
 import android.view.View;
+import android.widget.ProgressBar;
+import android.widget.TextView;
 
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils;
+import com.twitter.sdk.android.core.IntentUtils;
+import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
 import com.twitter.sdk.android.tweetui.internal.VideoControlView;
 import com.twitter.sdk.android.tweetui.internal.VideoView;
 
@@ -32,33 +35,90 @@
     private static final String TAG = "PlayerController";
     final VideoView videoView;
     final VideoControlView videoControlView;
+    final ProgressBar videoProgressView;
+    final TextView callToActionView;
+    View rootView;
+    int seekPosition = 0;
+    boolean isPlaying = true;
+    final SwipeToDismissTouchListener.Callback callback;
 
-    PlayerController(VideoView videoView, VideoControlView videoControlView) {
+    PlayerController(View rootView, SwipeToDismissTouchListener.Callback callback) {
+        this.rootView = rootView;
+        this.videoView = (VideoView) rootView.findViewById(R.id.video_view);
+        this.videoControlView = (VideoControlView) rootView.findViewById(R.id.video_control_view);
+        this.videoProgressView = (ProgressBar) rootView.findViewById(R.id.video_progress_view);
+        this.callToActionView = (TextView) rootView.findViewById(R.id.call_to_action_view);
+        this.callback = callback;
+    }
+
+    // Unit testing purposes
+    PlayerController(View rootView, VideoView videoView, VideoControlView videoControlView,
+            ProgressBar videoProgressView, TextView callToActionView,
+            SwipeToDismissTouchListener.Callback callback) {
+        this.rootView = rootView;
         this.videoView = videoView;
         this.videoControlView = videoControlView;
+        this.videoProgressView = videoProgressView;
+        this.callToActionView = callToActionView;
+        this.callback = callback;
     }
 
-    void prepare(MediaEntity entity) {
+    void prepare(PlayerActivity.PlayerItem item) {
         try {
-            final boolean looping = TweetMediaUtils.isLooping(entity);
-            final String url = TweetMediaUtils.getSupportedVariant(entity).url;
-            final Uri uri = Uri.parse(url);
-
-            setUpMediaControl(looping);
-            videoView.setVideoURI(uri, looping);
-            videoView.requestFocus();
+            setUpCallToAction(item);
+            setUpMediaControl(item.looping, item.showVideoControls);
+            final View.OnTouchListener listener = SwipeToDismissTouchListener
+                    .createFromView(videoView, callback);
+            videoView.setOnTouchListener(listener);
             videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
+                @Override
                 public void onPrepared(MediaPlayer mediaPlayer) {
-                    videoView.start();
+                    videoProgressView.setVisibility(View.GONE);
                 }
             });
+            videoView.setOnInfoListener(new MediaPlayer.OnInfoListener() {
+                @Override
+                public boolean onInfo(MediaPlayer mediaPlayer, int what, int extra) {
+                    if (what == MediaPlayer.MEDIA_INFO_BUFFERING_END) {
+                        videoProgressView.setVisibility(View.GONE);
+                        return true;
+                    } else if (what == MediaPlayer.MEDIA_INFO_BUFFERING_START) {
+                        videoProgressView.setVisibility(View.VISIBLE);
+                        return true;
+                    }
+                    return false;
+                }
+            });
+            final Uri uri = Uri.parse(item.url);
+            videoView.setVideoURI(uri, item.looping);
+            videoView.requestFocus();
         } catch (Exception e) {
             Fabric.getLogger().e(TAG, "Error occurred during video playback", e);
         }
     }
 
-    void setUpMediaControl(boolean looping) {
-        if (looping) {
+    void onResume() {
+        if (seekPosition != 0) {
+            videoView.seekTo(seekPosition);
+        }
+        if (isPlaying) {
+            videoView.start();
+            videoControlView.update();
+        }
+    }
+
+    void onPause() {
+        isPlaying = videoView.isPlaying();
+        seekPosition = videoView.getCurrentPosition();
+        videoView.pause();
+    }
+
+    void onDestroy() {
+        videoView.stopPlayback();
+    }
+
+    void setUpMediaControl(boolean looping, boolean showVideoControls) {
+        if (looping && !showVideoControls) {
             setUpLoopControl();
         } else {
             setUpMediaControl();
@@ -83,7 +143,38 @@ void setUpMediaControl() {
         videoView.setMediaController(videoControlView);
     }
 
-    void cleanup() {
-        videoView.stopPlayback();
+    void setUpCallToAction(PlayerActivity.PlayerItem item) {
+        if (item.callToActionText != null && item.callToActionUrl != null) {
+            callToActionView.setVisibility(View.VISIBLE);
+            callToActionView.setText(item.callToActionText);
+            setUpCallToActionListener(item.callToActionUrl);
+            setUpRootViewOnClickListener();
+        }
+    }
+
+    void setUpCallToActionListener(final String callToActionUrl) {
+        callToActionView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                final Uri uri = Uri.parse(callToActionUrl);
+                final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+                IntentUtils.safeStartActivity(callToActionView.getContext(), intent);
+            }
+        });
+    }
+
+    void setUpRootViewOnClickListener() {
+        rootView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (callToActionView.getVisibility() == View.VISIBLE) {
+                    callToActionView.setVisibility(View.GONE);
+                } else {
+                    callToActionView.setVisibility(View.VISIBLE);
+                }
+            }
+        });
     }
+
+
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/QuoteTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/QuoteTweetView.java
new file mode 100644
index 00000000..f5327c23
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/QuoteTweetView.java
@@ -0,0 +1,115 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.content.Context;
+
+import com.twitter.sdk.android.core.models.MediaEntity;
+
+public class QuoteTweetView extends AbstractTweetView {
+    private static final String VIEW_TYPE_NAME = "quote";
+    private static final double SQUARE_ASPECT_RATIO = 1.0;
+    private static final double MAX_LANDSCAPE_ASPECT_RATIO = 3.0;
+    private static final double MIN_LANDSCAPE_ASPECT_RATIO = 4.0 / 3.0;
+    private static final double DEFAULT_ASPECT_RATIO_MEDIA_CONTAINER = 16.0 / 10.0;
+
+    public QuoteTweetView(Context context) {
+        this(context, new DependencyProvider());
+    }
+
+    QuoteTweetView(Context context, DependencyProvider dependencyProvider) {
+        super(context, null, 0, dependencyProvider);
+    }
+
+    public void setStyle(int primaryTextColor, int secondaryTextColor, int actionColor,
+                         int actionHighlightColor, int mediaBgColor, int photoErrorResId) {
+        this.primaryTextColor = primaryTextColor;
+        this.secondaryTextColor = secondaryTextColor;
+        this.actionColor = actionColor;
+        this.actionHighlightColor = actionHighlightColor;
+        this.mediaBgColor = mediaBgColor;
+        this.photoErrorResId = photoErrorResId;
+
+        applyStyles();
+    }
+
+    @Override
+    protected int getLayout() {
+        return R.layout.tw__tweet_quote;
+    }
+
+    @Override
+    void render() {
+        super.render();
+        // Redraw screen name on recycle
+        screenNameView.requestLayout();
+    }
+
+    protected void applyStyles() {
+        final int mediaViewRadius =
+                getResources().getDimensionPixelSize(R.dimen.tw__media_view_radius);
+        tweetMediaView.setRoundedCornersRadii(0, 0, mediaViewRadius, mediaViewRadius);
+
+        setBackgroundResource(R.drawable.tw__quote_tweet_border);
+        fullNameView.setTextColor(primaryTextColor);
+        screenNameView.setTextColor(secondaryTextColor);
+        contentView.setTextColor(primaryTextColor);
+        tweetMediaView.setMediaBgColor(mediaBgColor);
+        tweetMediaView.setPhotoErrorResId(photoErrorResId);
+    }
+
+    /**
+     * Returns the desired aspect ratio of the Tweet media entity according to "sizes" metadata
+     * and the aspect ratio display rules.
+     * @param photoEntity the first
+     * @return the target image and bitmap width to height aspect ratio
+     */
+    @Override
+    protected double getAspectRatio(MediaEntity photoEntity) {
+        final double ratio = super.getAspectRatio(photoEntity);
+        if (ratio <= SQUARE_ASPECT_RATIO) {
+            // portrait (tall) photos should be cropped to be square aspect ratio
+            return SQUARE_ASPECT_RATIO;
+        } else if (ratio > MAX_LANDSCAPE_ASPECT_RATIO) {
+            // the widest landscape photos allowed are 3:1
+            return MAX_LANDSCAPE_ASPECT_RATIO;
+        } else if (ratio < MIN_LANDSCAPE_ASPECT_RATIO) {
+            // the tallest landscape photos allowed are 4:3
+            return MIN_LANDSCAPE_ASPECT_RATIO;
+        } else {
+            // landscape photos between 3:1 to 4:3 present the original width to height ratio
+            return ratio;
+        }
+    }
+
+    /**
+     * Returns the desired aspect ratio for Tweet that contains photo entities
+     *
+     * @param photoCount total count of photo entities
+     * @return the target image and bitmap width to height aspect ratio
+     */
+    @Override
+    protected double getAspectRatioForPhotoEntity(int photoCount) {
+        return DEFAULT_ASPECT_RATIO_MEDIA_CONTAINER;
+    }
+
+    @Override
+    String getViewTypeName() {
+        return VIEW_TYPE_NAME;
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ScribeConstants.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ScribeConstants.java
index c7808509..2a25077c 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ScribeConstants.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ScribeConstants.java
@@ -21,7 +21,7 @@
 import com.twitter.sdk.android.core.internal.scribe.SyndicatedSdkImpressionEvent;
 import com.twitter.sdk.android.core.internal.scribe.SyndicationClientEvent;
 
-public class ScribeConstants {
+final class ScribeConstants {
     private ScribeConstants() {}
 
     // tfw client event specific names
@@ -31,6 +31,7 @@ private ScribeConstants() {}
 
     // general names
     static final String SCRIBE_IMPRESSION_ACTION = "impression";
+    static final String SCRIBE_FILTER_ACTION = "filter";
     static final String SCRIBE_INITIAL_ELEMENT = "initial";
     static final String SCRIBE_TIMELINE_SECTION = "timeline";
     static final String SCRIBE_TIMELINE_PAGE = "timeline";
@@ -57,4 +58,15 @@ static EventNamespace getTfwClientTimelineNamespace(String timelineType) {
                 .setAction(SCRIBE_IMPRESSION_ACTION)
                 .builder();
     }
+
+    static EventNamespace getTfwClientFilterTimelineNamespace(String timelineType) {
+        return new EventNamespace.Builder()
+                .setClient(SyndicationClientEvent.CLIENT_NAME)
+                .setPage(TFW_CLIENT_EVENT_PAGE)
+                .setSection(SCRIBE_TIMELINE_SECTION)
+                .setComponent(timelineType)
+                .setElement(SCRIBE_INITIAL_ELEMENT)
+                .setAction(SCRIBE_FILTER_ACTION)
+                .builder();
+    }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/SearchTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/SearchTimeline.java
index 27e53113..3554a49e 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/SearchTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/SearchTimeline.java
@@ -19,34 +19,44 @@
 
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
+import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.GuestCallback;
 import com.twitter.sdk.android.core.models.Search;
 import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.services.params.Geocode;
 
+import java.text.SimpleDateFormat;
+import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 
-import io.fabric.sdk.android.Fabric;
+import retrofit2.Call;
 
 /**
  * SearchTimeline provides a timeline of tweets from the search/tweets API source.
  */
 public class SearchTimeline extends BaseTimeline implements Timeline<Tweet> {
     static final String FILTER_RETWEETS = " -filter:retweets";   // leading whitespace intentional
-    static final String RESULT_TYPE = "filtered";
     private static final String SCRIBE_SECTION = "search";
+    private static final SimpleDateFormat QUERY_DATE =
+            new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
 
     final String query;
+    final Geocode geocode;
+    final String resultType;
     final String languageCode;
     final Integer maxItemsPerRequest;
+    final String untilDate;
 
-    SearchTimeline(TweetUi tweetUi, String query, String languageCode, Integer maxItemsPerRequest) {
-        super(tweetUi);
+    SearchTimeline(String query, Geocode geocode, String resultType, String languageCode,
+            Integer maxItemsPerRequest, String untilDate) {
         this.languageCode = languageCode;
         this.maxItemsPerRequest = maxItemsPerRequest;
+        this.untilDate = untilDate;
+        this.resultType = resultType;
         // if the query is non-null append the filter Retweets modifier
         this.query = query == null ? null : query + FILTER_RETWEETS;
+        this.geocode = geocode;
     }
 
     /**
@@ -57,7 +67,7 @@
      */
     @Override
     public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) {
-        addRequest(createSearchRequest(sinceId, null, cb));
+        createSearchRequest(sinceId, null).enqueue(new SearchCallback(cb));
     }
 
     /**
@@ -70,7 +80,7 @@ public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) {
         // api quirk: search api provides results that are inclusive of the maxId iff
         // FILTER_RETWEETS is added to the query (which we currently always add), decrement the
         // maxId to get exclusive results
-        addRequest(createSearchRequest(null, decrementMaxId(maxId), cb));
+        createSearchRequest(null, decrementMaxId(maxId)).enqueue(new SearchCallback(cb));
     }
 
     @Override
@@ -78,23 +88,17 @@ String getTimelineType() {
         return SCRIBE_SECTION;
     }
 
-    Callback<TwitterApiClient> createSearchRequest(final Long sinceId, final Long maxId,
-            final Callback<TimelineResult<Tweet>> cb) {
-        return new LoggingCallback<TwitterApiClient>(cb, Fabric.getLogger()) {
-            @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getSearchService().tweets(query, null, languageCode, null, RESULT_TYPE,
-                        maxItemsPerRequest, null, sinceId, maxId, true,
-                        new GuestCallback<>(new SearchCallback(cb)));
-            }
-        };
+    Call<Search> createSearchRequest(final Long sinceId, final Long maxId) {
+        return TwitterCore.getInstance().getApiClient().getSearchService().tweets(query, geocode,
+                languageCode, null, resultType, maxItemsPerRequest, untilDate, sinceId, maxId,
+                true);
     }
 
     /**
      * Wrapper callback which unpacks a Search API result into a TimelineResult (cursor and items).
      */
     class SearchCallback extends Callback<Search> {
-        protected final Callback<TimelineResult<Tweet>> cb;
+        final Callback<TimelineResult<Tweet>> cb;
 
         /**
          * Constructs a SearchCallback
@@ -110,7 +114,7 @@ public void success(Result<Search> result) {
             final TimelineResult<Tweet> timelineResult
                     = new TimelineResult<>(new TimelineCursor(tweets), tweets);
             if (cb != null) {
-                cb.success(timelineResult, result.response);
+                cb.success(new Result<>(timelineResult, result.response));
             }
         }
 
@@ -122,33 +126,40 @@ public void failure(TwitterException exception) {
         }
     }
 
+    public enum ResultType {
+        RECENT("recent"),
+        POPULAR("popular"),
+        MIXED("mixed"),
+        FILTERED("filtered");
+
+        final String type;
+
+        ResultType(String type) {
+            this.type = type;
+        }
+    }
+
     /**
      * SearchTimeline Builder
      */
     public static class Builder {
-        private TweetUi tweetUi;
         private String query;
         private String lang;
+        private String resultType = ResultType.FILTERED.type;
         private Integer maxItemsPerRequest = 30;
+        private String untilDate;
+        private Geocode geocode;
 
         /**
          * Constructs a Builder.
          */
-        public Builder() {
-            this(TweetUi.getInstance());
-        }
+        public Builder() {}
 
         /**
-         * Constructs a Builder.
-         *
-         * @param tweetUi A TweetUi instance.
+         * @deprecated use {@link Builder#Builder()} instead
          */
-        public Builder(TweetUi tweetUi) {
-            if (tweetUi == null) {
-                throw new IllegalArgumentException("TweetUi instance must not be null");
-            }
-            this.tweetUi = tweetUi;
-        }
+        @Deprecated
+        public Builder(TweetUi tweetUi) {}
 
         /**
          * Sets the query for the SearchTimeline.
@@ -160,6 +171,27 @@ public Builder query(String query) {
             return this;
         }
 
+        /**
+         * Sets the geocode for the SearchTimeline.
+         * @param geocode Restricts query to a given geolocation
+         */
+        public Builder geocode(Geocode geocode) {
+            this.geocode = geocode;
+            return this;
+        }
+
+        /**
+         *  The result_type parameter allows one to choose if the result set will be represented by
+         *  recent or popular Tweets, or a mix of both.
+         *
+         * @param resultType possible options include recent, popular, mixed, or filtered.
+         */
+        public Builder resultType(ResultType resultType) {
+            this.resultType = resultType.type;
+            return this;
+        }
+
+
         /**
          * Sets the languageCode for the SearchTimeline.
          * @param languageCode Restricts tweets to the given language, given by an ISO 639-1 code.
@@ -180,6 +212,17 @@ public Builder maxItemsPerRequest(Integer maxItemsPerRequest) {
             return this;
         }
 
+        /**
+         * Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD.
+         * Keep in mind that the search index may not go back as far as the date you specify here.
+         *
+         * @param date Date before which the tweets were created.
+         */
+        public Builder untilDate(Date date) {
+            untilDate = QUERY_DATE.format(date);
+            return this;
+        }
+
         /**
          * Builds a SearchTimeline from the Builder parameters.
          * @return a SearchTimeline.
@@ -189,7 +232,8 @@ public SearchTimeline build() {
             if (query == null) {
                 throw new IllegalStateException("query must not be null");
             }
-            return new SearchTimeline(tweetUi, query, lang, maxItemsPerRequest);
+            return new SearchTimeline(query, geocode, resultType, lang, maxItemsPerRequest,
+                    untilDate);
         }
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TimelineDelegate.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
similarity index 97%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TimelineDelegate.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
index 932b3578..9a34c6f7 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TimelineDelegate.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
@@ -15,7 +15,7 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui.internal;
+package com.twitter.sdk.android.tweetui;
 
 import android.database.DataSetObservable;
 import android.database.DataSetObserver;
@@ -24,8 +24,6 @@
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.models.Identifiable;
-import com.twitter.sdk.android.tweetui.Timeline;
-import com.twitter.sdk.android.tweetui.TimelineResult;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -35,7 +33,7 @@
  * common to TimelineListAdapter and TimelineRecyclerAdapter.
  * @param <T> the item type
  */
-public class TimelineDelegate<T extends Identifiable> {
+class TimelineDelegate<T extends Identifiable> {
     // once capacity is exceeded, additional items will not be loaded
     static final long CAPACITY = 200L;
     // timeline that next and previous items are loaded from
@@ -109,6 +107,11 @@ public int getCount() {
         return itemList.size();
     }
 
+
+    public Timeline getTimeline() {
+        return timeline;
+    }
+
     /**
      * Gets the data item associated with the specified position in the data set.
      * @param position The position of the item within the adapter's data set.
@@ -195,8 +198,8 @@ void loadPrevious(Long maxPosition, Callback<TimelineResult<T>> cb) {
      * Subclass methods must call through to the parent method after their custom implementation.
      */
     class DefaultCallback extends Callback<TimelineResult<T>> {
-        protected final Callback<TimelineResult<T>> developerCallback;
-        protected final TimelineStateHolder timelineStateHolder;
+        final Callback<TimelineResult<T>> developerCallback;
+        final TimelineStateHolder timelineStateHolder;
 
         DefaultCallback(Callback<TimelineResult<T>> developerCb,
                         TimelineStateHolder timelineStateHolder) {
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LoadCallback.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineFilter.java
similarity index 60%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LoadCallback.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineFilter.java
index acbac380..e3615718 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LoadCallback.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineFilter.java
@@ -17,16 +17,24 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import com.twitter.sdk.android.core.TwitterException;
+import com.twitter.sdk.android.core.models.Tweet;
+
+import java.util.List;
 
 /**
- * Callback for making an API request through a load utility. Logic in
- * callbacks is executed on the main thread.
- * @param <T> type of requested item (e.g. Tweet, List<Tweet>)
- * @deprecated Use com.twitter.sdk.android.core.Callback instead.
+ * TimelineFilter used to filter tweets from a timeline.
  */
-@Deprecated
-public interface LoadCallback<T> {
-    void success(T loadedItem);
-    void failure(TwitterException exception);
+public interface TimelineFilter {
+
+    /**
+     * Filter tweets from timeline with given set of constraints.
+     *
+     * @param tweets list of tweets.
+     */
+    List<Tweet> filter(List<Tweet> tweets);
+
+    /**
+     * Total count of constraints applied to the timeline.
+     */
+    int totalFilters();
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineListAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineListAdapter.java
index e67114b6..bcc124ae 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineListAdapter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineListAdapter.java
@@ -23,7 +23,6 @@
 
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Identifiable;
-import com.twitter.sdk.android.tweetui.internal.TimelineDelegate;
 
 /**
  * TimelineListAdapter is a ListAdapter providing timeline items for ListViews.
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TimelineStateHolder.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineStateHolder.java
similarity index 95%
rename from tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TimelineStateHolder.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineStateHolder.java
index eed604aa..7d7b2cd5 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TimelineStateHolder.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineStateHolder.java
@@ -15,9 +15,7 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui.internal;
-
-import com.twitter.sdk.android.tweetui.TimelineCursor;
+package com.twitter.sdk.android.tweetui;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -25,7 +23,7 @@
  * Component which holds a TimelineAdapter's data about whether a request is in flight and the
  * scroll position TimelineCursors.
  */
-public class TimelineStateHolder {
+class TimelineStateHolder {
     // cursor for Timeline 'next' calls
     TimelineCursor nextCursor;
     // cursor for Timeline 'previous' calls
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetDateUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetDateUtils.java
index b9fec259..506a4856 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetDateUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetDateUtils.java
@@ -18,8 +18,10 @@
 package com.twitter.sdk.android.tweetui;
 
 import android.content.res.Resources;
+import android.support.v4.util.SparseArrayCompat;
 import android.text.format.DateUtils;
 
+import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
@@ -32,8 +34,7 @@
     // Sat Mar 14 02:34:20 +0000 2009
     static final SimpleDateFormat DATE_TIME_RFC822
             = new SimpleDateFormat("EEE MMM dd HH:mm:ss Z yyyy", Locale.ENGLISH);
-    static final SimpleDateFormat RELATIVE_DATE_FORMAT =
-            new SimpleDateFormat("MM/dd/yy", Locale.ENGLISH);
+    static final DateFormatter RELATIVE_DATE_FORMAT = new DateFormatter();
     static final long INVALID_DATE = -1;
 
     private TweetDateUtils() {}
@@ -55,10 +56,7 @@ static boolean isValidTimestamp(String timestamp) {
     /**
      * @return the given timestamp with a prepended "•"
      */
-    public static String dotPrefix(String timestamp) {
-        if (timestamp.charAt(0) == '•') {
-            return timestamp;
-        }
+    static String dotPrefix(String timestamp) {
         return "• " + timestamp;
     }
 
@@ -93,18 +91,45 @@ static String getRelativeTimeString(Resources res, long currentTimeMillis, long
 
                 if (now.get(Calendar.YEAR) == c.get(Calendar.YEAR)) {
                     // Same year
-                    RELATIVE_DATE_FORMAT.applyPattern(
-                            res.getString(R.string.tw__relative_date_format_short));
+                    return RELATIVE_DATE_FORMAT.formatShortDateString(res, d);
                 } else {
                     // Outside of our year
-                    RELATIVE_DATE_FORMAT.applyPattern(
-                        res.getString(R.string.tw__relative_date_format_long));
+                    return RELATIVE_DATE_FORMAT.formatLongDateString(res, d);
                 }
-                return RELATIVE_DATE_FORMAT.format(d);
             }
         }
-        RELATIVE_DATE_FORMAT.applyPattern(res.getString(
-                R.string.tw__relative_date_format_long));
-        return RELATIVE_DATE_FORMAT.format(new Date(timestamp));
+        return RELATIVE_DATE_FORMAT.formatLongDateString(res, new Date(timestamp));
+    }
+
+    static class DateFormatter {
+        private final SparseArrayCompat<SimpleDateFormat> dateFormatArray =
+                new SparseArrayCompat<>();
+        private Locale currentLocale;
+
+        synchronized String formatLongDateString(Resources res, Date date) {
+            return getDateFormat(res, R.string.tw__relative_date_format_long).format(date);
+        }
+
+        synchronized String formatShortDateString(Resources res, Date date) {
+            return getDateFormat(res, R.string.tw__relative_date_format_short).format(date);
+        }
+
+        private synchronized DateFormat getDateFormat(Resources res, int patternId) {
+
+            // Check if the locale changed, reference check for performance
+            if (currentLocale == null || currentLocale != res.getConfiguration().locale) {
+                currentLocale = res.getConfiguration().locale;
+                dateFormatArray.clear();
+            }
+
+            SimpleDateFormat format = dateFormatArray.get(patternId);
+            if (format == null) {
+                // Create format if not cached
+                final String pattern = res.getString(patternId);
+                format = new SimpleDateFormat(pattern, Locale.getDefault());
+                dateFormatArray.put(patternId, format);
+            }
+            return format;
+        }
     }
 }
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestTweetRepository.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetLinkClickListener.java
similarity index 66%
rename from tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestTweetRepository.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetLinkClickListener.java
index 1c71677e..b1ab0e6a 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestTweetRepository.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetLinkClickListener.java
@@ -17,11 +17,16 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import android.os.Handler;
+import com.twitter.sdk.android.core.models.Tweet;
 
-public class TestTweetRepository extends TweetRepository {
-    TestTweetRepository(Handler mainHandler, TweetUiAuthRequestQueue userAuthQueue,
-            TweetUiAuthRequestQueue guestAuthQueue) {
-        super(mainHandler, userAuthQueue, guestAuthQueue);
-    }
+/**
+ * Interface to be invoked when URL is clicked.
+ */
+public interface TweetLinkClickListener {
+    /**
+     * Called when URL clicked.
+     * @param tweet The Tweet that was clicked.
+     * @param url The URL that was clicked.
+     */
+    void onLinkClick(Tweet tweet, String url);
 }
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestActivity.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.java
similarity index 60%
rename from tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestActivity.java
rename to tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.java
index 8c19bdcf..9a629a3f 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TestActivity.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetMediaClickListener.java
@@ -17,14 +17,18 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.os.Bundle;
+import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.core.models.Tweet;
 
-@SuppressLint("Registered")
-public class TestActivity extends Activity {
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_tweet_view_test);
-    }
+/**
+ * Interface to be invoked when media is clicked.
+ */
+public interface TweetMediaClickListener {
+
+    /**
+     * Called when media clicked.
+     * @param tweet The Tweet that was clicked.
+     * @param entity The entity that was clicked.
+     */
+    void onMediaEntityClick(Tweet tweet, MediaEntity entity);
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
index aec30ede..a1016923 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
@@ -23,9 +23,11 @@
 
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
+import com.twitter.sdk.android.core.SessionManager;
+import com.twitter.sdk.android.core.TwitterAuthException;
+import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.GuestCallback;
+import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.models.Tweet;
 
 import java.util.List;
@@ -36,24 +38,27 @@
  * Encapsulates Tweet API access. Tweet loads are read through a thread safe LruCache.
  */
 class TweetRepository {
-    private static final String TAG = TweetUi.LOGTAG;
-    private static final String AUTH_ERROR = "Auth could not be obtained.";
     // Cache size units are in number of entries, an average Tweet is roughly 900 bytes in memory
     private static final int DEFAULT_CACHE_SIZE = 20;
 
+    private final TwitterCore twitterCore;
     private final Handler mainHandler;
-    private final TweetUiAuthRequestQueue guestAuthQueue;
-    private final TweetUiAuthRequestQueue userAuthQueue;
+    private final SessionManager<TwitterSession> userSessionManagers;
 
     // leave this package accessible for testing
     final LruCache<Long, Tweet> tweetCache;
     final LruCache<Long, FormattedTweetText> formatCache;
 
-    TweetRepository(Handler mainHandler, TweetUiAuthRequestQueue userAuthQueue,
-            TweetUiAuthRequestQueue guestAuthQueue) {
+    TweetRepository(Handler mainHandler, SessionManager<TwitterSession> userSessionManagers) {
+        this(mainHandler, userSessionManagers, TwitterCore.getInstance());
+    }
+
+    // Testing only
+    TweetRepository(Handler mainHandler, SessionManager<TwitterSession> userSessionManagers,
+            TwitterCore twitterCore) {
+        this.twitterCore = twitterCore;
         this.mainHandler = mainHandler;
-        this.userAuthQueue = userAuthQueue;
-        this.guestAuthQueue = guestAuthQueue;
+        this.userSessionManagers = userSessionManagers;
         tweetCache = new LruCache<>(DEFAULT_CACHE_SIZE);
         formatCache = new LruCache<>(DEFAULT_CACHE_SIZE);
     }
@@ -79,7 +84,7 @@ FormattedTweetText formatTweetText(final Tweet tweet) {
         return formattedTweetText;
     }
 
-    protected void updateCache(final Tweet tweet) {
+    void updateCache(final Tweet tweet) {
         tweetCache.put(tweet.id, tweet);
     }
 
@@ -99,45 +104,54 @@ public void run() {
     }
 
     void favorite(final long tweetId, final Callback<Tweet> cb) {
-        userAuthQueue.addClientRequest(new LoggingCallback<TwitterApiClient>(cb,
-                Fabric.getLogger()) {
+        getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric.getLogger()) {
             @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getFavoriteService().create(tweetId, true, cb);
+            public void success(Result<TwitterSession> result) {
+                twitterCore.getApiClient(result.data).getFavoriteService().create(tweetId, false)
+                        .enqueue(cb);
             }
         });
     }
 
     void unfavorite(final long tweetId, final Callback<Tweet> cb) {
-        userAuthQueue.addClientRequest(new LoggingCallback<TwitterApiClient>(cb,
-                Fabric.getLogger()) {
+        getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric.getLogger()) {
             @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getFavoriteService().destroy(tweetId, true, cb);
+            public void success(Result<TwitterSession> result) {
+                twitterCore.getApiClient(result.data).getFavoriteService().destroy(tweetId, false)
+                        .enqueue(cb);
             }
         });
     }
 
     void retweet(final long tweetId, final Callback<Tweet> cb) {
-        userAuthQueue.addClientRequest(new LoggingCallback<TwitterApiClient>(cb,
-                Fabric.getLogger()) {
+        getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric.getLogger()) {
             @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getStatusesService().retweet(tweetId, false, cb);
+            public void success(Result<TwitterSession> result) {
+                twitterCore.getApiClient(result.data).getStatusesService().retweet(tweetId, false)
+                        .enqueue(cb);
             }
         });
     }
 
     void unretweet(final long tweetId, final Callback<Tweet> cb) {
-        userAuthQueue.addClientRequest(new LoggingCallback<TwitterApiClient>(cb,
-                Fabric.getLogger()) {
+        getUserSession(new LoggingCallback<TwitterSession>(cb, Fabric.getLogger()) {
             @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getStatusesService().unretweet(tweetId, false, cb);
+            public void success(Result<TwitterSession> result) {
+                twitterCore.getApiClient(result.data).getStatusesService().unretweet(tweetId, false)
+                        .enqueue(cb);
             }
         });
     }
 
+    void getUserSession(final Callback<TwitterSession> cb) {
+        final TwitterSession session = userSessionManagers.getActiveSession();
+        if (session == null) {
+            cb.failure(new TwitterAuthException("User authorization required"));
+        } else {
+            cb.success(new Result<>(session, null));
+        }
+    }
+
     /**
      * Queues and loads a Tweet from the API statuses/show endpoint. Queue ensures a client with
      * at least guest auth is obtained before performing the request. Adds the the Tweet from the
@@ -153,21 +167,8 @@ void loadTweet(final long tweetId, final Callback<Tweet> cb) {
             return;
         }
 
-        guestAuthQueue.addClientRequest(new Callback<TwitterApiClient>() {
-            @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getStatusesService().show(tweetId, null, null, null,
-                        new SingleTweetCallback(cb));
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                Fabric.getLogger().e(TAG, AUTH_ERROR, exception);
-                if (cb != null) {
-                    cb.failure(exception);
-                }
-            }
-        });
+        twitterCore.getApiClient().getStatusesService()
+                .show(tweetId, null, null, null).enqueue(new SingleTweetCallback(cb));
     }
 
     /**
@@ -178,33 +179,20 @@ public void failure(TwitterException exception) {
      * @param cb callback
      */
     void loadTweets(final List<Long> tweetIds, final Callback<List<Tweet>> cb) {
-        guestAuthQueue.addClientRequest(new Callback<TwitterApiClient>() {
-
-            @Override
-            public void success(Result<TwitterApiClient> result) {
-                final String commaSepIds = TextUtils.join(",", tweetIds);
-                result.data.getStatusesService().lookup(commaSepIds, null, null, null,
-                        new MultiTweetsCallback(tweetIds, cb));
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                Fabric.getLogger().e(TAG, AUTH_ERROR, exception);
-                if (cb != null) {
-                    cb.failure(exception);
-                }
-            }
-        });
+        final String commaSepIds = TextUtils.join(",", tweetIds);
+        twitterCore.getApiClient().getStatusesService().lookup(commaSepIds, null, null, null)
+                .enqueue(new MultiTweetsCallback(tweetIds, cb));
     }
 
     /**
      * Callback updates the single Tweet cache before passing to the given callback on success.
      * Handles guest auth expired or failing tokens on failure.
      */
-    class SingleTweetCallback extends GuestCallback<Tweet> {
+    class SingleTweetCallback extends Callback<Tweet> {
+        final Callback<Tweet> cb;
 
         SingleTweetCallback(Callback<Tweet> cb) {
-            super(cb);
+            this.cb = cb;
         }
 
         @Override
@@ -215,17 +203,23 @@ public void success(Result<Tweet> result) {
                 cb.success(new Result<>(tweet, result.response));
             }
         }
+
+        @Override
+        public void failure(TwitterException exception) {
+            cb.failure(exception);
+        }
     }
 
     /**
      * Callback handles sorting Tweets before passing to the given callback on success. Handles
      * guest auto expired or failing tokens on failure.
      */
-    class MultiTweetsCallback extends GuestCallback<List<Tweet>> {
+    class MultiTweetsCallback extends Callback<List<Tweet>> {
+        final Callback<List<Tweet>> cb;
         final List<Long> tweetIds;
 
         MultiTweetsCallback(List<Long> tweetIds, Callback<List<Tweet>> cb) {
-            super(cb);
+            this.cb = cb;
             this.tweetIds = tweetIds;
         }
 
@@ -236,5 +230,10 @@ public void success(Result<List<Tweet>> result) {
                 cb.success(new Result<>(sorted, result.response));
             }
         }
+
+        @Override
+        public void failure(TwitterException exception) {
+            cb.failure(exception);
+        }
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
index 758dbb54..bd0cc87e 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
@@ -19,62 +19,79 @@
 
 import android.text.SpannableStringBuilder;
 import android.text.Spanned;
-import android.text.TextPaint;
 import android.text.TextUtils;
 import android.text.style.CharacterStyle;
-import android.text.style.ClickableSpan;
 import android.view.View;
 
+import com.twitter.sdk.android.tweetui.internal.ClickableLinkSpan;
+import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
+import java.util.regex.Pattern;
 
 final class TweetTextLinkifier {
-    private static final String PHOTO_TYPE = "photo";
+    static final Pattern QUOTED_STATUS_URL =
+            Pattern.compile("^https?://twitter\\.com(/#!)?/\\w+/status/\\d+$");
+    static final Pattern VINE_URL =
+            Pattern.compile("^https?://vine\\.co(/#!)?/v/\\w+$");
 
     private TweetTextLinkifier() {}
 
     /**
      * Returns a charSequence with the display urls substituted in place of the t.co links. It will
-     * strip off the last photo entity in the text if stripLastPhotoEntity is true. The return
+     * strip off the last photo entity, quote Tweet, and Vine card urls in the text. The return
      * value can be set directly onto a text view.
      *
      * @param tweetText             The formatted and adjusted tweet wrapper
      * @param listener              A listener to handle link clicks
-     * @param stripLastPhotoEntity  If true will strip the last photo entity from the linkified text
+     * @param linkColor             The link color
+     * @param linkHighlightColor    The link background color when pressed
+     * @param stripQuoteTweet       If true we should strip the quote Tweet URL
+     * @param stripVineCard         If true we should strip the Vine card URL
      * @return                      The Tweet text with displayUrls substituted in
      */
-    static CharSequence linkifyUrls(FormattedTweetText tweetText,
-            final LinkClickListener listener, boolean stripLastPhotoEntity, final int linkColor) {
+    static CharSequence linkifyUrls(FormattedTweetText tweetText, final LinkClickListener listener,
+                                    final int linkColor, final int linkHighlightColor,
+                                    boolean stripQuoteTweet, boolean stripVineCard) {
         if (tweetText == null) return null;
 
         if (TextUtils.isEmpty(tweetText.text)) {
             return tweetText.text;
         }
 
-        final SpannableStringBuilder spannable
-                = new SpannableStringBuilder(tweetText.text);
-
+        final SpannableStringBuilder spannable = new SpannableStringBuilder(tweetText.text);
         final List<FormattedUrlEntity> urls = tweetText.urlEntities;
-
-        final List<FormattedMediaEntity> media
-                = tweetText.mediaEntities;
-        final FormattedMediaEntity lastPhoto;
-        if (stripLastPhotoEntity) {
-            lastPhoto = getLastPhotoEntity(tweetText);
-        } else {
-            lastPhoto = null;
-        }
+        final List<FormattedMediaEntity> media = tweetText.mediaEntities;
 
         /*
          * We combine and sort the entities here so that we can correctly calculate the offsets
          * into the text.
          */
         final List<FormattedUrlEntity> combined = mergeAndSortEntities(urls, media);
+        final FormattedUrlEntity strippedEntity = getEntityToStrip(tweetText.text, combined,
+                stripQuoteTweet, stripVineCard);
+
+        addUrlEntities(spannable, combined, strippedEntity, listener, linkColor,
+                linkHighlightColor);
+
+        return trimEnd(spannable);
+    }
 
-        addUrlEntities(spannable, combined, lastPhoto, listener, linkColor);
-        return spannable;
+    /**
+     * Trim trailing whitespaces. Similar to String#trim(), but only for trailing characters.
+     */
+    static CharSequence trimEnd(CharSequence charSequence) {
+        int length = charSequence.length();
+
+        while ((length > 0) && (charSequence.charAt(length - 1) <= ' ')) {
+            length--;
+        }
+
+        // Avoid creating new object if length hasn't changed
+        return length < charSequence.length() ? charSequence.subSequence(0, length) : charSequence;
     }
 
     /**
@@ -110,16 +127,17 @@ public int compare(FormattedUrlEntity lhs, FormattedUrlEntity rhs) {
     /**
      * Swaps display urls in for t.co urls and adjusts the remaining entity indices.
      *
-     * @param spannable The final formatted text that we are building
-     * @param entities  The combined list of media and url entities
-     * @param lastPhoto If there is a final photo entity we should strip from the text
-     * @param listener  The link click listener to attach to the span
-     * @param linkColor The link color
+     * @param spannable          The final formatted text that we are building
+     * @param entities           The combined list of media and url entities
+     * @param strippedEntity     The trailing entity that we should strip from the text
+     * @param listener           The link click listener to attach to the span
+     * @param linkColor          The link color
+     * @param linkHighlightColor The link background color when pressed
      */
     private static void addUrlEntities(final SpannableStringBuilder spannable,
             final List<FormattedUrlEntity> entities,
-            final FormattedMediaEntity lastPhoto,
-            final LinkClickListener listener, final int linkColor) {
+            final FormattedUrlEntity strippedEntity,
+            final LinkClickListener listener, final int linkColor, final int linkHighlightColor) {
         if (entities == null || entities.isEmpty()) return;
 
         int offset = 0;
@@ -133,7 +151,7 @@ private static void addUrlEntities(final SpannableStringBuilder spannable,
                 // replace the last photo url with empty string, we can use the start indices as
                 // as simple check, since none of this will work anyways if we have overlapping
                 // entities
-                if (lastPhoto != null && lastPhoto.start == url.start) {
+                if (strippedEntity != null && strippedEntity.start == url.start) {
                     spannable.replace(start, end, "");
                     len = end - start;
                     end -= len;
@@ -144,18 +162,13 @@ private static void addUrlEntities(final SpannableStringBuilder spannable,
                     end -= len;
                     offset += len;
 
-                    final CharacterStyle span = new ClickableSpan() {
+                    final CharacterStyle span = new ClickableLinkSpan(linkHighlightColor,
+                            linkColor, false) {
                         @Override
                         public void onClick(View widget) {
                             if (listener == null) return;
                             listener.onUrlClicked(url.url);
                         }
-
-                        @Override
-                        public void updateDrawState(TextPaint ds) {
-                            ds.setColor(linkColor);
-                            ds.setUnderlineText(false);  // Links should not be underlined
-                        }
                     };
                     spannable.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                 }
@@ -163,21 +176,38 @@ public void updateDrawState(TextPaint ds) {
         }
     }
 
-    private static FormattedMediaEntity getLastPhotoEntity(
-            final FormattedTweetText formattedTweetText) {
-        if (formattedTweetText == null) return null;
-
-        final List<FormattedMediaEntity> mediaEntityList
-                = formattedTweetText.mediaEntities;
-        if (mediaEntityList.isEmpty()) return null;
+    static FormattedUrlEntity getEntityToStrip(String tweetText, List<FormattedUrlEntity> combined,
+                                               boolean stripQuoteTweet, boolean stripVineCard) {
+        if (combined.isEmpty()) return null;
 
-        FormattedMediaEntity entity;
-        for (int i = mediaEntityList.size() - 1; i >= 0; i--) {
-            entity = mediaEntityList.get(i);
-            if (PHOTO_TYPE.equals(entity.type)) {
-                return entity;
-            }
+        final FormattedUrlEntity urlEntity = combined.get(combined.size() - 1);
+        if (stripLtrMarker(tweetText).endsWith(urlEntity.url) && (isPhotoEntity(urlEntity) ||
+                (stripQuoteTweet && isQuotedStatus(urlEntity)) ||
+                (stripVineCard && isVineCard(urlEntity)))) {
+            return urlEntity;
         }
+
         return null;
     }
+
+    static String stripLtrMarker(String tweetText) {
+        if (tweetText.endsWith(Character.toString('\u200E'))) {
+            return tweetText.substring(0, tweetText.length() - 1);
+        }
+
+        return tweetText;
+    }
+
+    static boolean isPhotoEntity(final FormattedUrlEntity urlEntity) {
+        return urlEntity instanceof FormattedMediaEntity &&
+                TweetMediaUtils.PHOTO_TYPE.equals(((FormattedMediaEntity) urlEntity).type);
+    }
+
+    static boolean isQuotedStatus(final FormattedUrlEntity urlEntity) {
+        return QUOTED_STATUS_URL.matcher(urlEntity.expandedUrl).find();
+    }
+
+    static boolean isVineCard(final FormattedUrlEntity urlEntity) {
+        return VINE_URL.matcher(urlEntity.expandedUrl).find();
+    }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
index 1a64a293..5936564c 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
@@ -21,11 +21,16 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterException;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
 import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.tweetui.internal.TimelineDelegate;
+
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * TweetTimelineListAdapter is a ListAdapter which can provide Timeline Tweets to ListViews.
@@ -33,11 +38,16 @@
 public class TweetTimelineListAdapter extends TimelineListAdapter<Tweet> {
     protected Callback<Tweet> actionCallback;
     final protected int styleResId;
+    protected TweetUi tweetUi;
+
+    static final String TOTAL_FILTERS_JSON_PROP = "total_filters";
+    static final String DEFAULT_FILTERS_JSON_MSG = "{\"total_filters\":0}";
+    final Gson gson = new Gson();
 
     /**
      * Constructs a TweetTimelineListAdapter for the given Tweet Timeline.
      * @param context the context for row views.
-     * @param timeline a Timeline<Tweet> providing access to Tweet data items.
+     * @param timeline a Timeline&lt;Tweet&gt; providing access to Tweet data items.
      * @throws java.lang.IllegalArgumentException if timeline is null
      */
     public TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline) {
@@ -45,15 +55,18 @@ public TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline) {
     }
 
     TweetTimelineListAdapter(Context context, Timeline<Tweet> timeline, int styleResId,
-            Callback<Tweet> cb) {
-        this(context, new TimelineDelegate<>(timeline), styleResId, cb);
+                             Callback<Tweet> cb) {
+        this(context, new TimelineDelegate<>(timeline), styleResId, cb, TweetUi.getInstance());
     }
 
     TweetTimelineListAdapter(Context context, TimelineDelegate<Tweet> delegate, int styleResId,
-            Callback<Tweet> cb) {
+                             Callback<Tweet> cb, TweetUi tweetUi) {
         super(context, delegate);
         this.styleResId = styleResId;
         this.actionCallback = new ReplaceTweetCallback(delegate, cb);
+        this.tweetUi = tweetUi;
+
+        scribeTimelineImpression();
     }
 
     /**
@@ -76,6 +89,39 @@ public View getView(int position, View convertView, ViewGroup parent) {
         return rowView;
     }
 
+    private void scribeTimelineImpression() {
+        final String jsonMessage;
+        if (delegate instanceof FilterTimelineDelegate) {
+            final FilterTimelineDelegate filterTimelineDelegate = (
+                    FilterTimelineDelegate) delegate;
+            final TimelineFilter timelineFilter = filterTimelineDelegate.timelineFilter;
+            jsonMessage = getJsonMessage(timelineFilter.totalFilters());
+        } else {
+            jsonMessage = DEFAULT_FILTERS_JSON_MSG;
+        }
+
+        final ScribeItem scribeItem = ScribeItem.fromMessage(jsonMessage);
+        final List<ScribeItem> items = new ArrayList<>();
+        items.add(scribeItem);
+
+        final String timelineType = getTimelineType(delegate.getTimeline());
+        tweetUi.scribe(ScribeConstants.getSyndicatedSdkTimelineNamespace(timelineType));
+        tweetUi.scribe(ScribeConstants.getTfwClientTimelineNamespace(timelineType), items);
+    }
+
+    private String getJsonMessage(int totalFilters) {
+        final JsonObject message = new JsonObject();
+        message.addProperty(TOTAL_FILTERS_JSON_PROP, totalFilters);
+        return gson.toJson(message);
+    }
+
+    static String getTimelineType(Timeline timeline) {
+        if (timeline instanceof BaseTimeline) {
+            return ((BaseTimeline) timeline).getTimelineType();
+        }
+        return "other";
+    }
+
     /*
      * On success, sets the updated Tweet in the TimelineDelegate to replace any old copies
      * of the same Tweet by id.
@@ -112,6 +158,7 @@ public void failure(TwitterException exception) {
         private Context context;
         private Timeline<Tweet> timeline;
         private Callback<Tweet> actionCallback;
+        private TimelineFilter timelineFilter;
         private int styleResId = R.style.tw__TweetLightStyle;
 
         /**
@@ -149,12 +196,28 @@ public Builder setOnActionCallback(Callback<Tweet> actionCallback) {
             return this;
         }
 
+        /**
+         * Sets the TimelineFilter used to filter tweets from timeline.
+         * @param timelineFilter timelineFilter for timeline
+         */
+        public Builder setTimelineFilter(TimelineFilter timelineFilter) {
+            this.timelineFilter = timelineFilter;
+            return this;
+        }
+
         /**
          * Builds a TweetTimelineListAdapter from Builder parameters.
          * @return a TweetTimelineListAdpater
          */
         public TweetTimelineListAdapter build() {
-            return new TweetTimelineListAdapter(context, timeline, styleResId, actionCallback);
+            if (timelineFilter == null) {
+                return new TweetTimelineListAdapter(context, timeline, styleResId, actionCallback);
+            } else {
+                final FilterTimelineDelegate delegate =
+                        new FilterTimelineDelegate(timeline, timelineFilter);
+                return new TweetTimelineListAdapter(context, delegate, styleResId, actionCallback,
+                        TweetUi.getInstance());
+            }
         }
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUi.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUi.java
index 40c62903..510042c1 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUi.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUi.java
@@ -21,22 +21,16 @@
 import io.fabric.sdk.android.Kit;
 import io.fabric.sdk.android.services.concurrency.DependsOn;
 
-import com.google.gson.FieldNamingPolicy;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
 import com.squareup.picasso.Picasso;
-import com.twitter.sdk.android.core.Session;
+import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
-import com.twitter.sdk.android.tweetui.internal.GuestSessionProvider;
-import com.twitter.sdk.android.tweetui.internal.UserSessionProvider;
 
-import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.atomic.AtomicReference;
 
 /**
  * The TweetUi Kit provides views to render Tweets.
@@ -48,24 +42,13 @@
 
     private static final String KIT_SCRIBE_NAME = "TweetUi";
 
-    List<SessionManager<? extends Session>> userSessionManagers;
-    List<SessionManager<? extends Session>> guestSessionManagers;
-    UserSessionProvider userSessionProvider;
+    SessionManager<TwitterSession> sessionManager;
     GuestSessionProvider guestSessionProvider;
-    String advertisingId;
     DefaultScribeClient scribeClient;
 
-    private final AtomicReference<Gson> gsonRef;
     private TweetRepository tweetRepository;
-    private TweetUiAuthRequestQueue userAuthQueue;
-    private TweetUiAuthRequestQueue guestAuthQueue;
     private Picasso imageLoader;
 
-    // Singleton class, should only be created using getInstance()
-    public TweetUi() {
-        gsonRef = new AtomicReference<>();
-    }
-
     /**
      * @return the TweetUi singleton.
      * @throws IllegalStateException if the kit has not been started.
@@ -89,19 +72,11 @@ public String getVersion() {
     protected boolean onPreExecute() {
         super.onPreExecute();
         final TwitterCore twitterCore = TwitterCore.getInstance();
-        userSessionManagers = new ArrayList<>(1);
-        userSessionManagers.add(twitterCore.getSessionManager());
-        userSessionProvider = new UserSessionProvider(userSessionManagers);
-        userAuthQueue = new TweetUiAuthRequestQueue(twitterCore, userSessionProvider);
-
-        guestSessionManagers = new ArrayList<>(2);
-        guestSessionManagers.add(twitterCore.getSessionManager());
-        guestSessionManagers.add(twitterCore.getAppSessionManager());
-        guestSessionProvider = new GuestSessionProvider(twitterCore, guestSessionManagers);
-        guestAuthQueue = new TweetUiAuthRequestQueue(twitterCore, guestSessionProvider);
-
-        tweetRepository = new TweetRepository(getFabric().getMainHandler(), userAuthQueue,
-                guestAuthQueue);
+
+        sessionManager = twitterCore.getSessionManager();
+        guestSessionProvider = twitterCore.getGuestSessionProvider();
+        tweetRepository = new TweetRepository(getFabric().getMainHandler(),
+                twitterCore.getSessionManager());
         return true;
     }
 
@@ -113,15 +88,8 @@ protected Boolean doInBackground() {
          */
         imageLoader = Picasso.with(getContext());
 
-        // restore active sessions to user and guest auth queues
-        userAuthQueue.sessionRestored(userSessionProvider.getActiveSession());
-        guestAuthQueue.sessionRestored(guestSessionProvider.getActiveSession());
-
-        // ensure initialization of gson, this initialization in most cases will always
-        // happen here.
-        initGson();
         setUpScribeClient();
-        advertisingId = getIdManager().getAdvertisingId();
+
         return true;
     }
 
@@ -136,8 +104,8 @@ private static void checkInitialized() {
     }
 
     private void setUpScribeClient() {
-        scribeClient = new DefaultScribeClient(this, KIT_SCRIBE_NAME, gsonRef.get(),
-                guestSessionManagers, getIdManager());
+        scribeClient = new DefaultScribeClient(this, KIT_SCRIBE_NAME, sessionManager,
+                guestSessionProvider, getIdManager());
     }
 
     void scribe(EventNamespace... namespaces) {
@@ -154,31 +122,16 @@ void scribe(EventNamespace ns, List<ScribeItem> items) {
         scribeClient.scribe(ns, items);
     }
 
-    // idempotent init
-    void initGson() {
-        if (gsonRef.get() == null) {
-            final Gson gson = new GsonBuilder()
-                    .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
-                    .create();
-
-            gsonRef.compareAndSet(null, gson);
-        }
-    }
-
     TweetRepository getTweetRepository() {
         return tweetRepository;
     }
 
-    TweetUiAuthRequestQueue getGuestAuthQueue() {
-        return guestAuthQueue;
-    }
-
     // Testing purposes only
     void setTweetRepository(TweetRepository tweetRepository) {
         this.tweetRepository = tweetRepository;
     }
 
-    Picasso getImageLoader() {
+    public Picasso getImageLoader() {
         return imageLoader;
     }
 
@@ -186,8 +139,4 @@ Picasso getImageLoader() {
     void setImageLoader(Picasso imageLoader) {
         this.imageLoader = imageLoader;
     }
-
-    void clearAppSession(long sessionId) {
-        TwitterCore.getInstance().getAppSessionManager().clearSession(sessionId);
-    }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUiAuthRequestQueue.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUiAuthRequestQueue.java
deleted file mode 100644
index f762b7c9..00000000
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUiAuthRequestQueue.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import com.twitter.sdk.android.core.internal.AuthRequestQueue;
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.internal.SessionProvider;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-
-/*
- * Queues requests until a TwitterApiClient with a session is ready. Gets an active session from
- * the sessionProvider or requests sessionProvider perform authentication.
- */
-class TweetUiAuthRequestQueue extends AuthRequestQueue {
-    private final TwitterCore twitterCore;
-
-    TweetUiAuthRequestQueue(TwitterCore twitterCore, SessionProvider sessionProvider) {
-        super(sessionProvider);
-        this.twitterCore = twitterCore;
-    }
-
-    protected synchronized boolean addClientRequest(final Callback<TwitterApiClient> callback) {
-        return addRequest(new Callback<Session>() {
-            @Override
-            public void success(Result<Session> result) {
-                callback.success(new Result<>(twitterCore.getApiClient(result.data), null));
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                callback.failure(exception);
-            }
-        });
-    }
-}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUtils.java
index b125dff7..c51fe2f0 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetUtils.java
@@ -22,7 +22,6 @@
 
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.models.Tweet;
 
 import java.util.List;
@@ -35,8 +34,7 @@
  * sign in flow.
  */
 public final class TweetUtils {
-    private static final String TAG = TweetUi.LOGTAG;
-    private static final String PERMALINK_FORMAT = "https://twitter.com/%s/status/%d";
+    private static final String PERMALINK_FORMAT = "https://twitter.com/%s/status/%d?ref_src=twsrc%%5Etwitterkit";
     private static final String UNKNOWN_SCREEN_NAME = "twitter_unknown";
     static final String LOAD_TWEET_DEBUG = "loadTweet failure for Tweet Id %d.";
 
@@ -77,45 +75,6 @@ public void success(Result<List<Tweet>> result) {
                 });
     }
 
-    /**
-     * Loads a single Tweet by id.
-     * @param tweetId Tweet id
-     * @param loadCallback callback
-     * @deprecated Use loadTweet(long tweetId, Callback<Tweet>> cb) instead.
-     */
-    @Deprecated
-    public static void loadTweet(final long tweetId, final LoadCallback<Tweet> loadCallback) {
-        final Callback<Tweet> cb = new CallbackAdapter<>(loadCallback);
-        loadTweet(tweetId, new LoggingCallback<Tweet>(cb, Fabric.getLogger()) {
-            @Override
-            public void success(Result<Tweet> result) {
-                if (cb != null) {
-                    cb.success(result);
-                }
-            }
-        });
-    }
-
-    /**
-     * Loads a List of Tweets by id. Returns Tweets in the order requested.
-     * @param tweetIds List of Tweet ids
-     * @param loadCallback callback
-     * @deprecated Use loadTweets(List<Long> tweetIds, Callback<List<Tweet>>> cb) instead.
-     */
-    @Deprecated
-    public static void loadTweets(final List<Long> tweetIds,
-                                  final LoadCallback<List<Tweet>> loadCallback) {
-        final Callback<List<Tweet>> cb = new CallbackAdapter<>(loadCallback);
-        loadTweets(tweetIds, new LoggingCallback<List<Tweet>>(cb, Fabric.getLogger()) {
-            @Override
-            public void success(Result<List<Tweet>> result) {
-                if (cb != null) {
-                    cb.success(result);
-                }
-            }
-        });
-    }
-
     /**
      * Determines if an accurate permalink can be constructed for the Tweet
      *
@@ -141,6 +100,12 @@ static Tweet getDisplayTweet(Tweet tweet) {
         }
     }
 
+    static boolean showQuoteTweet(Tweet tweet) {
+        return tweet.quotedStatus != null &&
+                tweet.card == null &&
+                (tweet.entities.media == null || tweet.entities.media.isEmpty());
+    }
+
     /**
      * Builds a permalink url for the given screen name and Tweet id. If we don't have a
      * screen_name, use the constant UNKNOWN_SCREEN_NAME value and the app or the site will figure
@@ -165,29 +130,4 @@ static Uri getPermalink(String screenName, long tweetId) {
         }
         return Uri.parse(permalink);
     }
-
-    /**
-     * Shim to convert deprecated LoadCallback to Callback.
-     */
-    public static class CallbackAdapter<T> extends Callback<T> {
-        private LoadCallback<T> cb;
-
-        CallbackAdapter(LoadCallback<T> cb) {
-            this.cb = cb;
-        }
-
-        @Override
-        public void success(Result<T> result) {
-            if (cb != null) {
-                cb.success(result.data);
-            }
-        }
-
-        @Override
-        public void failure(TwitterException exception) {
-            if (cb != null) {
-                cb.failure(exception);
-            }
-        }
-    }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetView.java
index 6da21270..1f174db8 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetView.java
@@ -17,16 +17,15 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import android.annotation.TargetApi;
 import android.content.Context;
-import android.os.Build;
 import android.util.AttributeSet;
-import android.widget.ImageView;
 
 import com.twitter.sdk.android.core.models.Tweet;
 
 public class TweetView extends BaseTweetView {
     private static final String VIEW_TYPE_NAME = "default";
+    private static final double SQUARE_ASPECT_RATIO = 1.0;
+    private static final double DEFAULT_ASPECT_RATIO_MEDIA_CONTAINER = 3.0 / 2.0;
 
     public TweetView(Context context, Tweet tweet) {
         super(context, tweet);
@@ -44,7 +43,6 @@ public TweetView(Context context, AttributeSet attrs) {
         super(context, attrs);
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public TweetView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
     }
@@ -66,15 +64,31 @@ void render() {
         setVerifiedCheck(tweet);
     }
 
+    /**
+     * Returns the desired aspect ratio for Tweet that contains photo entities
+     *
+     * @param photoCount total count of photo entities
+     * @return the target image and bitmap width to height aspect ratio
+     */
+    @Override
+    protected double getAspectRatioForPhotoEntity(int photoCount) {
+        if (photoCount == 4) {
+            return SQUARE_ASPECT_RATIO;
+        } else {
+            return DEFAULT_ASPECT_RATIO_MEDIA_CONTAINER;
+        }
+    }
+
     /**
      * Sets the verified check if the User is verified. If the User is not verified or if the
-     * verification data is unavailable, sets the check visibility to gone.
+     * verification data is unavailable, remove the check.
      */
     private void setVerifiedCheck(Tweet tweet) {
         if (tweet != null && tweet.user != null && tweet.user.verified) {
-            verifiedCheckView.setVisibility(ImageView.VISIBLE);
+            fullNameView.setCompoundDrawablesWithIntrinsicBounds(0, 0,
+                    R.drawable.tw__ic_tweet_verified, 0);
         } else {
-            verifiedCheckView.setVisibility(ImageView.GONE);
+            fullNameView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
         }
     }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetViewAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetViewAdapter.java
deleted file mode 100644
index 7a90b246..00000000
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetViewAdapter.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.BaseAdapter;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Adapter to provide a collection of TweetViews to AdapterViews (such as ListView).
- * @deprecated Build a FixedTweetTimeline with a set of Tweets and a TweetTimelineListAdapter.
- */
-@Deprecated
-public class TweetViewAdapter<T extends BaseTweetView> extends BaseAdapter {
-    protected final Context context;
-    protected List<Tweet> tweets;
-
-    /**
-     * Constructs a TweetViewAdapter with an empty collection of Tweets.
-     * @param context the context of the views
-     */
-    public TweetViewAdapter(Context context) {
-        this.context = context;
-        tweets = new ArrayList<>();
-    }
-
-    /**
-     * Constructs a TweetViewAdapter for the given collection of Tweets.
-     * @param context the context of the views
-     * @param tweets collection of Tweets
-     */
-    public TweetViewAdapter(Context context, List<Tweet> tweets) {
-        super();
-        this.context = context;
-        this.tweets = tweets;
-    }
-
-    /**
-     * Override to customize the Tweet view that should be used in the list.
-     */
-    public T getTweetView(Context context, Tweet tweet) {
-        return (T) new CompactTweetView(context, tweet);
-    }
-
-
-    @Override
-    public int getCount() {
-        return (tweets == null) ? 0 : tweets.size();
-    }
-
-    @Override
-    public Tweet getItem(int position) {
-        return tweets.get(position);
-    }
-
-    @Override
-    public long getItemId(int position) {
-        return position;
-    }
-
-    /**
-     * Sets all Tweets with id matching the given Tweet id to the updated Tweet.
-     * @param tweet the updated Tweet to set in the list
-     */
-    public void setTweetById(Tweet tweet) {
-        for (int i = 0; i < tweets.size(); i++) {
-            if (tweet.getId() == tweets.get(i).getId()) {
-                tweets.set(i, tweet);
-            }
-        }
-        notifyDataSetChanged();
-    }
-
-    @Override
-    public View getView(int position, View convertView, ViewGroup parent) {
-        View rowView = convertView;
-        final Tweet tweet = getItem(position);
-        if (rowView == null) {
-            rowView = getTweetView(context, tweet);
-        } else {
-            ((BaseTweetView) rowView).setTweet(tweet);
-        }
-        return rowView;
-    }
-
-    /**
-     * Get the collection of Tweets.
-     */
-    public List<Tweet> getTweets() {
-        return tweets;
-    }
-
-    /**
-     * Set the collection of Tweets.
-     */
-    public void setTweets(List<Tweet> tweets) {
-        if (tweets == null) {
-            this.tweets = new ArrayList<>();
-        } else {
-            this.tweets = tweets;
-        }
-        notifyDataSetChanged();
-    }
-}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetViewFetchAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetViewFetchAdapter.java
deleted file mode 100644
index 4f926fb1..00000000
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetViewFetchAdapter.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.content.Context;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-/**
- * Adapter to provide a collection of TweetViews to AdapterViews (such as ListView) which
- * allows Tweets to be specified by id and handles fetching them from the API.
- * @deprecated Load Tweets by id with TweetUtils.loadTweets and use a FixedTweetTimeline with the
- * TweetTimelineListAdapter.
- */
-@Deprecated
-public class TweetViewFetchAdapter<T extends BaseTweetView> extends TweetViewAdapter<T> {
-
-    /**
-     * Constructs a TweetViewFetchAdapter.
-     * @param context the context of the views
-     */
-    public TweetViewFetchAdapter(Context context) {
-        super(context);
-    }
-
-    /**
-     * Constructs a TweetViewFetchAdapter with a collection of ids for Tweets to fetch.
-     * @param context the context of the views
-     * @param tweetIds Tweet ids
-     */
-    public TweetViewFetchAdapter(Context context, List<Long> tweetIds) {
-        this(context, tweetIds, null);
-    }
-
-    /**
-     * Constructs a TweetViewFetchAdapter with a collection of ids for Tweets to fetch.
-     * @param context the context of the views
-     * @param tweetIds Tweet ids
-     * @param cb callback
-     */
-    public TweetViewFetchAdapter(Context context, List<Long> tweetIds,
-            LoadCallback<List<Tweet>> cb) {
-        super(context);
-        setTweetIds(tweetIds, cb);
-    }
-
-    /**
-     * Fetches the requested Tweet ids and sets the collection of Tweets in the adapter.
-     * @param tweetIds Tweet ids
-     */
-    public void setTweetIds(final List<Long> tweetIds) {
-        setTweetIds(tweetIds, (Callback) null);
-    }
-
-    /**
-     * Fetches the requested Tweet ids and sets the collection of Tweets in the adapter. Calls
-     * the given callback's success or failure.
-     * @param tweetIds Tweet ids
-     * @param cb callback
-     */
-    public void setTweetIds(final List<Long> tweetIds, final Callback<List<Tweet>> cb) {
-        final Callback<List<Tweet>> repoCallback = new Callback<List<Tweet>>() {
-            @Override
-            public void success(Result<List<Tweet>> result) {
-                setTweets(result.data);
-                if (cb != null) {
-                    cb.success(result);
-                }
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                // purposefully not logging the failure to lookup the Tweets
-                if (cb != null) {
-                    cb.failure(exception);
-                }
-            }
-        };
-        TweetUi.getInstance().getTweetRepository().loadTweets(tweetIds, repoCallback);
-    }
-
-    /**
-     * Fetches the requested Tweet ids and sets the collection of Tweets in the adapter. Calls
-     * the given callback's success or failure.
-     * @param tweetIds Tweet ids
-     * @param loadCallback callback
-     * @deprecated Use setTweetIds(List<Long> tweetIds, Callback<List<Tweet> cb) instead.
-     */
-    @Deprecated
-    public void setTweetIds(final List<Long> tweetIds,
-            final LoadCallback<List<Tweet>> loadCallback) {
-        final Callback<List<Tweet>> cb = new TweetUtils.CallbackAdapter<>(loadCallback);
-        setTweetIds(tweetIds, cb);
-    }
-}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TwitterListTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TwitterListTimeline.java
index 6ef955e5..7ff3b4aa 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TwitterListTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TwitterListTimeline.java
@@ -18,12 +18,12 @@
 package com.twitter.sdk.android.tweetui;
 
 import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.GuestCallback;
+import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.models.Tweet;
 
-import io.fabric.sdk.android.Fabric;
+import java.util.List;
+
+import retrofit2.Call;
 
 /**
  * TwitterListTimeline provides a timeline of tweets from the lists/statuses API source.
@@ -38,9 +38,8 @@
     final Integer maxItemsPerRequest;
     final Boolean includeRetweets;
 
-    TwitterListTimeline(TweetUi tweetUi, Long listId, String slug, Long ownerId,
+    TwitterListTimeline(Long listId, String slug, Long ownerId,
         String ownerScreenName, Integer maxItemsPerRequest, Boolean includeRetweets) {
-        super(tweetUi);
         this.listId = listId;
         this.slug = slug;
         this.ownerId = ownerId;
@@ -57,7 +56,7 @@
      */
     @Override
     public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) {
-        addRequest(createListTimelineRequest(sinceId, null, cb));
+        createListTimelineRequest(sinceId, null).enqueue(new TweetsCallback(cb));
     }
 
     /**
@@ -69,19 +68,13 @@ public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) {
     public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) {
         // lists/statuses api provides results which are inclusive of the maxId, decrement the
         // maxId to get exclusive results
-        addRequest(createListTimelineRequest(null, decrementMaxId(maxId), cb));
+        createListTimelineRequest(null, decrementMaxId(maxId)).enqueue(new TweetsCallback(cb));
     }
 
-    Callback<TwitterApiClient> createListTimelineRequest(final Long sinceId, final Long maxId,
-            final Callback<TimelineResult<Tweet>> cb) {
-        return new LoggingCallback<TwitterApiClient>(cb, Fabric.getLogger()) {
-            @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getListService().statuses(listId, slug, ownerScreenName, ownerId,
-                        sinceId, maxId, maxItemsPerRequest, true, includeRetweets,
-                        new GuestCallback<>(new TweetsCallback(cb)));
-            }
-        };
+    Call<List<Tweet>> createListTimelineRequest(final Long sinceId, final Long maxId) {
+        return TwitterCore.getInstance().getApiClient().getListService().statuses(listId, slug,
+                ownerScreenName, ownerId, sinceId, maxId, maxItemsPerRequest, true,
+                includeRetweets);
     }
 
     @Override
@@ -93,7 +86,6 @@ String getTimelineType() {
      * TwitterListTimeline Builder.
      */
     public static class Builder {
-        private final TweetUi tweetUi;
         private Long listId;
         private String slug;
         private Long ownerId;
@@ -104,21 +96,13 @@ String getTimelineType() {
         /**
          * Constructs a Builder.
          */
-        public Builder() {
-            this(TweetUi.getInstance());
-        }
+        public Builder() {};
 
         /**
-         * Constructs a Builder.
-         *
-         * @param tweetUi A TweetUi instance.
+         * @deprecated use {@link Builder#Builder()} instead
          */
-        public Builder(TweetUi tweetUi) {
-            if (tweetUi == null) {
-                throw new IllegalArgumentException("TweetUi instance must not be null");
-            }
-            this.tweetUi = tweetUi;
-        }
+        @Deprecated
+        public Builder(TweetUi tweetUi) {}
 
         /**
          * Sets the id for the Twitter List to get Tweets from.
@@ -188,7 +172,7 @@ public TwitterListTimeline build() {
                         "slug/owner pair must set owner via ownerId or ownerScreenName");
             }
 
-            return new TwitterListTimeline(tweetUi, listId, slug, ownerId, ownerScreenName,
+            return new TwitterListTimeline(listId, slug, ownerId, ownerScreenName,
                     maxItemsPerRequest, includeRetweets);
         }
     }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/UserTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/UserTimeline.java
index 7610ea16..fed1fca2 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/UserTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/UserTimeline.java
@@ -18,12 +18,12 @@
 package com.twitter.sdk.android.tweetui;
 
 import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.GuestCallback;
+import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.models.Tweet;
 
-import io.fabric.sdk.android.Fabric;
+import java.util.List;
+
+import retrofit2.Call;
 
 /**
  * UserTimeline provides a timeline of tweets from the statuses/userTimeline API source.
@@ -37,9 +37,8 @@
     final Boolean includeReplies;
     final Boolean includeRetweets;
 
-    UserTimeline(TweetUi tweetUi, Long userId, String screenName, Integer maxItemsPerRequest,
+    UserTimeline(Long userId, String screenName, Integer maxItemsPerRequest,
             Boolean includeReplies, Boolean includeRetweets) {
-        super(tweetUi);
         this.userId = userId;
         this.screenName = screenName;
         this.maxItemsPerRequest = maxItemsPerRequest;
@@ -56,7 +55,7 @@
      */
     @Override
     public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) {
-        addRequest(createUserTimelineRequest(sinceId, null, cb));
+        createUserTimelineRequest(sinceId, null).enqueue(new TweetsCallback(cb));
     }
 
     /**
@@ -68,7 +67,7 @@ public void next(Long sinceId, Callback<TimelineResult<Tweet>> cb) {
     public void previous(Long maxId, Callback<TimelineResult<Tweet>> cb) {
         // user timeline api provides results which are inclusive, decrement the maxId to get
         // exclusive results
-        addRequest(createUserTimelineRequest(null, decrementMaxId(maxId), cb));
+        createUserTimelineRequest(null, decrementMaxId(maxId)).enqueue(new TweetsCallback(cb));
     }
 
     @Override
@@ -76,23 +75,16 @@ String getTimelineType() {
         return SCRIBE_SECTION;
     }
 
-    Callback<TwitterApiClient> createUserTimelineRequest(final Long sinceId,
-            final Long maxId, final Callback<TimelineResult<Tweet>> cb) {
-        return new LoggingCallback<TwitterApiClient>(cb, Fabric.getLogger()) {
-            @Override
-            public void success(Result<TwitterApiClient> result) {
-                result.data.getStatusesService().userTimeline(userId, screenName,
-                        maxItemsPerRequest, sinceId, maxId, false, !includeReplies, null,
-                        includeRetweets, new GuestCallback<>(new TweetsCallback(cb)));
-            }
-        };
+    Call<List<Tweet>> createUserTimelineRequest(final Long sinceId, final Long maxId) {
+        return TwitterCore.getInstance().getApiClient().getStatusesService().userTimeline(userId,
+                screenName, maxItemsPerRequest, sinceId, maxId, false, !includeReplies, null,
+                includeRetweets);
     }
 
     /**
      * UserTimeline Builder.
      */
     public static class Builder {
-        private final TweetUi tweetUi;
         private Long userId;
         private String screenName;
         private Integer maxItemsPerRequest = 30;
@@ -102,20 +94,13 @@ public void success(Result<TwitterApiClient> result) {
         /**
          * Constructs a Builder.
          */
-        public Builder() {
-            this(TweetUi.getInstance());
-        }
+        public Builder() {}
 
         /**
-         * Constructs a Builder.
-         * @param tweetUi A TweetUi instance.
+         * @deprecated use {@link Builder#Builder()} instead
          */
-        public Builder(TweetUi tweetUi) {
-            if (tweetUi == null) {
-                throw new IllegalArgumentException("TweetUi instance must not be null");
-            }
-            this.tweetUi = tweetUi;
-        }
+        @Deprecated
+        public Builder(TweetUi tweetUi) {}
 
         /**
          * Sets the userId for the UserTimeline.
@@ -171,7 +156,7 @@ public Builder includeRetweets(Boolean includeRetweets) {
          * @return a UserTimeline.
          */
         public UserTimeline build() {
-            return new UserTimeline(tweetUi, userId, screenName, maxItemsPerRequest, includeReplies,
+            return new UserTimeline(userId, screenName, maxItemsPerRequest, includeReplies,
                     includeRetweets);
         }
     }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/VideoScribeClient.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/VideoScribeClient.java
index d6e76ea7..74516d65 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/VideoScribeClient.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/VideoScribeClient.java
@@ -17,10 +17,10 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
 
 public interface VideoScribeClient {
-    void impression(long tweetId, MediaEntity mediaEntity);
+    void impression(ScribeItem card);
 
-    void play(long tweetId, MediaEntity mediaEntity);
+    void play(ScribeItem card);
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/VideoScribeClientImpl.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/VideoScribeClientImpl.java
index ff5e187f..2735643b 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/VideoScribeClientImpl.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/VideoScribeClientImpl.java
@@ -20,16 +20,18 @@
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
 import com.twitter.sdk.android.core.internal.scribe.SyndicationClientEvent;
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils;
 
 import java.util.ArrayList;
 import java.util.List;
 
 class VideoScribeClientImpl implements VideoScribeClient {
+
     static final String TFW_CLIENT_EVENT_PAGE = "android";
+
     static final String TFW_CLIENT_EVENT_SECTION = "video";
+
     static final String SCRIBE_IMPRESSION_ACTION = "impression";
+
     static final String SCRIBE_PLAY_ACTION = "play";
 
     final TweetUi tweetUi;
@@ -39,41 +41,21 @@
     }
 
     @Override
-    public void impression(long tweetId, MediaEntity mediaEntity) {
+    public void impression(ScribeItem scribeItem) {
         final List<ScribeItem> items = new ArrayList<>();
-        items.add(createScribeItem(tweetId, mediaEntity));
+        items.add(scribeItem);
 
         tweetUi.scribe(getTfwImpressionNamespace(), items);
     }
 
     @Override
-    public void play(long tweetId, MediaEntity mediaEntity) {
+    public void play(ScribeItem scribeItem) {
         final List<ScribeItem> items = new ArrayList<>();
-        items.add(createScribeItem(tweetId, mediaEntity));
+        items.add(scribeItem);
 
         tweetUi.scribe(getTfwPlayNamespace(), items);
     }
 
-    static ScribeItem createScribeItem(long tweetId, MediaEntity mediaEntity) {
-        return new ScribeItem.Builder()
-                .setItemType(ScribeItem.TYPE_TWEET)
-                .setId(tweetId)
-                .setMediaDetails(createMediaDetails(tweetId, mediaEntity))
-                .build();
-    }
-
-    static ScribeItem.MediaDetails createMediaDetails(long tweetId, MediaEntity mediaEntity) {
-        return new ScribeItem.MediaDetails(tweetId, getMediaType(mediaEntity), mediaEntity.id);
-    }
-
-    static int getMediaType(MediaEntity mediaEntity) {
-        if (TweetMediaUtils.GIF_TYPE.equals(mediaEntity.type)) {
-            return ScribeItem.MediaDetails.TYPE_ANIMATED_GIF;
-        } else {
-            return ScribeItem.MediaDetails.TYPE_CONSUMER;
-        }
-    }
-
     static EventNamespace getTfwImpressionNamespace() {
         return new EventNamespace.Builder()
                 .setClient(SyndicationClientEvent.CLIENT_NAME)
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/AnimationUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/AnimationUtils.java
index d915647b..65bc20c8 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/AnimationUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/AnimationUtils.java
@@ -19,13 +19,10 @@
 
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
-import android.annotation.TargetApi;
-import android.os.Build;
 import android.view.View;
 import android.view.ViewPropertyAnimator;
 
-public class AnimationUtils {
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
+class AnimationUtils {
     public static ViewPropertyAnimator fadeOut(final View from, int duration) {
         if (from.getVisibility() == View.VISIBLE) {
             from.clearAnimation();
@@ -44,7 +41,6 @@ public void onAnimationEnd(Animator animation) {
         return null;
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
     public static ViewPropertyAnimator fadeIn(View to, int duration) {
         if (to.getVisibility() != View.VISIBLE) {
             to.setAlpha(0f);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/AspectRatioFrameLayout.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/AspectRatioFrameLayout.java
new file mode 100644
index 00000000..7158e502
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/AspectRatioFrameLayout.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.FrameLayout;
+
+import com.twitter.sdk.android.tweetui.R;
+
+public class AspectRatioFrameLayout extends FrameLayout {
+
+    private static final float DEFAULT_ASPECT_RATIO = 1.0f;
+    private static final int DEFAULT_ADJUST_DIMENSION = 0;
+
+    static final int ADJUST_DIMENSION_HEIGHT = 0;
+    static final int ADJUST_DIMENSION_WIDTH = 1;
+
+    protected double aspectRatio;
+    private int dimensionToAdjust;      // ADJUST_DIMENSION_HEIGHT or ADJUST_DIMENSION_WIDTH
+
+    public AspectRatioFrameLayout(Context context) {
+        this(context, null);
+    }
+
+    public AspectRatioFrameLayout(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public AspectRatioFrameLayout(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        initAttributes(defStyle);
+    }
+
+    private void initAttributes(int styleResId) {
+        final TypedArray a = getContext().getTheme().obtainStyledAttributes(styleResId,
+                R.styleable.AspectRatioFrameLayout);
+        try {
+            aspectRatio = a.getFloat(
+                    R.styleable.AspectRatioFrameLayout_tw__frame_layout_aspect_ratio,
+                    DEFAULT_ASPECT_RATIO);
+            dimensionToAdjust = a.getInt(
+                    R.styleable.AspectRatioFrameLayout_tw__frame_layout_dimension_to_adjust,
+                    DEFAULT_ADJUST_DIMENSION);
+        } finally {
+            a.recycle();
+        }
+    }
+
+    public void setAspectRatio(final double aspectRatio) {
+        this.aspectRatio = aspectRatio;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width, height;
+        final int horizontalPadding = getPaddingLeft() + getPaddingRight();
+        final int verticalPadding = getPaddingBottom() + getPaddingTop();
+
+       if (dimensionToAdjust == ADJUST_DIMENSION_HEIGHT) {
+           if (View.MeasureSpec.getMode(widthMeasureSpec) == View.MeasureSpec.EXACTLY) {
+               width = View.MeasureSpec.getSize(widthMeasureSpec) - horizontalPadding;
+           } else {
+               super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+               width = getMeasuredWidth() - horizontalPadding;
+           }
+           height = (int) (width / aspectRatio);
+       } else {
+           if (MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.EXACTLY) {
+               height = MeasureSpec.getSize(heightMeasureSpec) - verticalPadding;
+           } else {
+               super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+               height = getMeasuredHeight() - verticalPadding;
+           }
+           width = (int) (height * aspectRatio);
+       }
+
+        super.onMeasure(
+            View.MeasureSpec.makeMeasureSpec(width + horizontalPadding, View.MeasureSpec.EXACTLY),
+            View.MeasureSpec.makeMeasureSpec(height + verticalPadding, View.MeasureSpec.EXACTLY));
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpan.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpan.java
new file mode 100644
index 00000000..24618156
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpan.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.graphics.Color;
+import android.text.TextPaint;
+import android.text.style.ClickableSpan;
+
+/**
+ * A span that can be clicked. Use with {@link SpanClickHandler}.
+ */
+public abstract class ClickableLinkSpan extends ClickableSpan implements HighlightedClickableSpan {
+
+    public final int linkColor;
+    private final int selectedColor;
+    private final boolean colored;
+    private final boolean underlined;
+    private boolean selected;
+
+    public ClickableLinkSpan(int selectedColor, int linkColor, boolean underlined) {
+        this(selectedColor, linkColor, true, underlined);
+    }
+
+    ClickableLinkSpan(int selectedColor, int linkColor, boolean colored, boolean underlined) {
+        this.selectedColor = selectedColor;
+        this.linkColor = linkColor;
+        this.colored = colored;
+        this.underlined = underlined;
+    }
+
+    @Override
+    public void updateDrawState(TextPaint ds) {
+        if (colored) {
+            ds.setColor(linkColor);
+        } else {
+            ds.setColor(ds.linkColor);
+        }
+
+        if (selected) {
+            ds.bgColor = selectedColor;
+        } else {
+            ds.bgColor = Color.TRANSPARENT;
+        }
+
+        if (underlined) {
+            ds.setUnderlineText(true);
+        }
+    }
+
+    @Override
+    public void select(boolean selected) {
+        this.selected = selected;
+    }
+
+    @Override
+    public boolean isSelected() {
+        return selected;
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/GalleryImageView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/GalleryImageView.java
new file mode 100644
index 00000000..38e4e2da
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/GalleryImageView.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ProgressBar;
+
+import com.squareup.picasso.Picasso;
+import com.squareup.picasso.Target;
+
+public class GalleryImageView extends FrameLayout implements Target {
+    final MultiTouchImageView imageView;
+    final ProgressBar progressBar;
+
+    public GalleryImageView(Context context) {
+        this(context, new MultiTouchImageView(context), new ProgressBar(context));
+    }
+
+    GalleryImageView(Context context, MultiTouchImageView imageView, ProgressBar progressBar) {
+        super(context);
+
+        this.imageView = imageView;
+        this.progressBar = progressBar;
+
+        LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT,
+                Gravity.CENTER);
+        progressBar.setLayoutParams(params);
+        addView(progressBar);
+
+        params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT,
+                Gravity.CENTER);
+        imageView.setLayoutParams(params);
+        addView(imageView);
+    }
+
+    public void setSwipeToDismissCallback(SwipeToDismissTouchListener.Callback callback) {
+        final View.OnTouchListener listener =
+                SwipeToDismissTouchListener.createFromView(imageView, callback);
+        imageView.setOnTouchListener(listener);
+    }
+
+    @Override
+    public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {
+        imageView.setImageBitmap(bitmap);
+        progressBar.setVisibility(View.GONE);
+    }
+
+    @Override
+    public void onBitmapFailed(Drawable errorDrawable) {
+
+    }
+
+    @Override
+    public void onPrepareLoad(Drawable placeHolderDrawable) {
+        imageView.setImageResource(android.R.color.transparent);
+        progressBar.setVisibility(View.VISIBLE);
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/GuestSessionProvider.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/GuestSessionProvider.java
deleted file mode 100644
index 764a58e1..00000000
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/GuestSessionProvider.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import com.twitter.sdk.android.core.AppSession;
-import com.twitter.sdk.android.core.AuthToken;
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.internal.SessionProvider;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-
-import java.util.List;
-
-/**
- * Mockable class that simplifies code that depends on sessions but is agnostic to session type.
- *
- * Note, the order of the SessionManager list is important if one type is more desirable to use
- * than another.
- */
-public class GuestSessionProvider extends SessionProvider {
-    private final TwitterCore twitterCore;
-
-    public GuestSessionProvider(TwitterCore twitterCore,
-            List<SessionManager<? extends Session>> sessionManagers) {
-        super(sessionManagers);
-        this.twitterCore = twitterCore;
-    }
-
-    @Override
-    public Session getActiveSession() {
-        final Session session = super.getActiveSession();
-        if (session == null) {
-            return null;
-        }
-        final AuthToken token = session.getAuthToken();
-        // allow only user auth and guest auth tokens, not old app auth tokens
-        if (token instanceof TwitterAuthToken || token instanceof GuestAuthToken) {
-            return session;
-        }
-        return null;
-    }
-
-    /*
-     * Requests a guest auth session.
-     */
-    public void requestAuth(Callback<Session> cb) {
-        twitterCore.logInGuest(new AppSessionCallback(cb));
-    }
-
-    /*
-     * Wrapper callback which converts the AppSession to a general Session.
-     */
-    class AppSessionCallback extends Callback<AppSession> {
-        private final Callback<Session> cb;
-
-        /*
-         * Constructs an AppSessionCallback
-         * @param cb A callback which expects a Session.
-         */
-        AppSessionCallback(Callback<Session> cb) {
-            this.cb = cb;
-        }
-
-        @Override
-        public void success(Result<AppSession> result) {
-            cb.success(new Result<Session>(result.data, result.response));
-        }
-
-        @Override
-        public void failure(TwitterException exception) {
-            cb.failure(exception);
-        }
-    }
-}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/HighlightedClickableSpan.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/HighlightedClickableSpan.java
new file mode 100644
index 00000000..3b398f16
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/HighlightedClickableSpan.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.view.View;
+
+/**
+ * An interface for spans that can be clicked and highlighted on selection. In order to respond to actions
+ * on spans that implement this interface, use {@link SpanClickHandler}.
+ */
+public interface HighlightedClickableSpan {
+    /**
+     * Triggered if the span is clicked.
+     */
+    void onClick(View view);
+
+    /**
+     * Called when the span is clicked and released.
+     */
+    void select(boolean selected);
+
+    /**
+     * Returns the selection status of the span.
+     */
+    boolean isSelected();
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeView.java
index f72e1a55..8c1b0a7b 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/MediaBadgeView.java
@@ -18,6 +18,7 @@
 package com.twitter.sdk.android.tweetui.internal;
 
 import android.content.Context;
+import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -25,12 +26,14 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import com.twitter.sdk.android.core.internal.VineCardUtils;
+import com.twitter.sdk.android.core.models.Card;
 import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.tweetui.R;
 
 public class MediaBadgeView extends FrameLayout {
     TextView videoDuration;
-    ImageView gifBadge;
+    ImageView badge;
 
     public MediaBadgeView(Context context) {
         this(context, null);
@@ -52,22 +55,44 @@ void initSubViews(Context context) {
         final View view = inflater.inflate(R.layout.tw__media_badge, this, true);
 
         videoDuration = (TextView) view.findViewById(R.id.tw__video_duration);
-        gifBadge = (ImageView) view.findViewById(R.id.tw__gif_badge);
+        badge = (ImageView) view.findViewById(R.id.tw__gif_badge);
     }
 
     public void setMediaEntity(MediaEntity entity) {
         if (TweetMediaUtils.GIF_TYPE.equals(entity.type)) {
-            gifBadge.setVisibility(View.VISIBLE);
-            videoDuration.setVisibility(View.GONE);
+            setBadge(getResources().getDrawable(R.drawable.tw__gif_badge));
         } else if (TweetMediaUtils.VIDEO_TYPE.equals(entity.type)) {
-            videoDuration.setVisibility(View.VISIBLE);
-            gifBadge.setVisibility(View.GONE);
-
             final long duration = entity.videoInfo == null ? 0 : entity.videoInfo.durationMillis;
-            videoDuration.setText(MediaTimeUtils.getPlaybackTime(duration));
+            setText(duration);
         } else {
-            videoDuration.setVisibility(View.GONE);
-            gifBadge.setVisibility(View.GONE);
+            setEmpty();
         }
     }
+
+    public void setCard(Card card) {
+        if (VineCardUtils.isVine(card)) {
+            setBadge(getResources().getDrawable(R.drawable.tw__vine_badge));
+        } else {
+            setEmpty();
+        }
+    }
+
+    void setText(long duration) {
+        videoDuration.setVisibility(View.VISIBLE);
+        badge.setVisibility(View.GONE);
+
+        videoDuration.setText(MediaTimeUtils.getPlaybackTime(duration));
+    }
+
+    void setBadge(Drawable drawable) {
+        badge.setVisibility(View.VISIBLE);
+        videoDuration.setVisibility(View.GONE);
+
+        badge.setImageDrawable(drawable);
+    }
+
+    void setEmpty() {
+        videoDuration.setVisibility(View.GONE);
+        badge.setVisibility(View.GONE);
+    }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageView.java
index f545686d..f9283996 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageView.java
@@ -18,20 +18,20 @@
 package com.twitter.sdk.android.tweetui.internal;
 
 import android.animation.ValueAnimator;
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.Matrix;
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.util.AttributeSet;
 import android.view.GestureDetector;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
+import android.view.ViewParent;
 import android.view.animation.AccelerateDecelerateInterpolator;
 import android.widget.ImageView;
 
-public class MultiTouchImageView extends ImageView {
+public class MultiTouchImageView extends ImageView
+        implements SwipeToDismissTouchListener.SwipeableViewProvider {
     private final static long SCALE_ANIMATION_DURATION = 300L;
     private final static float DOUBLE_TAP_SCALE_FACTOR = 2.0f;
     private final static float MINIMUM_SCALE_FACTOR = 1.0f;
@@ -48,6 +48,8 @@
     final RectF drawRect = new RectF();
     final float[] matrixValues = new float[9];
 
+    boolean allowIntercept = false;
+
     public MultiTouchImageView(Context context) {
         this(context, null);
     }
@@ -84,6 +86,11 @@ public void onScaleEnd(ScaleGestureDetector detector) {
             public boolean onScroll(MotionEvent e1, MotionEvent e2, float dx, float dy) {
                 setTranslate(-dx, -dy);
                 setImageMatrix();
+
+                if (allowIntercept && !scaleGestureDetector.isInProgress()) {
+                    requestDisallowInterceptTouchEvent(false);
+                }
+
                 return true;
             }
 
@@ -135,13 +142,20 @@ public boolean onTouchEvent(MotionEvent event) {
         }
 
         // Do not allow touch events to be intercepted (usually for gallery swipes) by default
-        getParent().requestDisallowInterceptTouchEvent(true);
+        requestDisallowInterceptTouchEvent(true);
 
         boolean retVal = scaleGestureDetector.onTouchEvent(event);
         retVal = gestureDetector.onTouchEvent(event) || retVal;
         return retVal || super.onTouchEvent(event);
     }
 
+    void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+        final ViewParent parent = getParent();
+        if (parent != null) {
+            parent.requestDisallowInterceptTouchEvent(disallowIntercept);
+        }
+    }
+
     void setScale(float ds, float px, float py) {
         updateMatrix.postScale(ds, ds, px, py);
     }
@@ -173,11 +187,16 @@ void updateMatrixBounds() {
         }
 
         if (rect.width() <= viewRect.width()) {
+            allowIntercept = true;
             dx = (viewRect.width() - rect.width()) / 2 - rect.left;
         } else if (rect.left > 0) {
+            allowIntercept = true;
             dx = -rect.left;
         } else if (rect.right < viewRect.width()) {
+            allowIntercept = true;
             dx = viewRect.width() - rect.right;
+        } else {
+            allowIntercept = false;
         }
 
         setTranslate(dx, dy);
@@ -207,16 +226,6 @@ void setImageMatrix() {
     }
 
     void animateScale(float start, float end, final float px, final float py) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            animateScaleHoneyComb(start, end, px, py);
-        } else {
-            setScale(end / getScale(), px, py);
-            setImageMatrix();
-        }
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    void animateScaleHoneyComb(float start, float end, final float px, final float py) {
         final ValueAnimator animator = ValueAnimator.ofFloat(start, end);
 
         animator.setDuration(SCALE_ANIMATION_DURATION);
@@ -233,4 +242,9 @@ public void onAnimationUpdate(ValueAnimator valueAnimator) {
         });
         animator.start();
     }
+
+    @Override
+    public boolean canBeSwiped() {
+        return getScale() == 1f;
+    }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/OverlayImageView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/OverlayImageView.java
new file mode 100644
index 00000000..66af7f8c
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/OverlayImageView.java
@@ -0,0 +1,128 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.widget.ImageView;
+
+/**
+ * An ImageView subclass that take a {@link android.graphics.drawable.Drawable} and draws it on top
+ * the ImageView content.
+ */
+public class OverlayImageView extends ImageView {
+    Overlay overlay = new Overlay(null);
+
+    public OverlayImageView(Context context) {
+        super(context);
+    }
+
+    public OverlayImageView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        overlay.draw(canvas);
+    }
+
+    @Override
+    protected void drawableStateChanged() {
+        super.drawableStateChanged();
+        overlay.setDrawableState(getDrawableState());
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        overlay.setDrawableBounds(getMeasuredWidth(), getMeasuredHeight());
+    }
+
+    @Override
+    protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) {
+        super.onSizeChanged(width, height, oldWidth, oldHeight);
+        overlay.setDrawableBounds(width, height);
+    }
+
+    @Override
+    public void invalidateDrawable(Drawable drawable) {
+        if (drawable == overlay.drawable) {
+            invalidate();
+        } else {
+            super.invalidateDrawable(drawable);
+        }
+    }
+
+    /*
+     * Sets the drawable to be drawn on top the ImageView content.
+     *
+     * @param drawable The drawable
+     */
+    public void setOverlayDrawable(Drawable drawable) {
+        if (drawable != overlay.drawable) {
+            overlay.cleanupDrawable(this);
+            if (drawable != null) {
+                drawable.setCallback(this);
+            }
+
+            overlay = new Overlay(drawable);
+            overlay.setDrawableState(getDrawableState());
+            requestLayout();
+        }
+    }
+
+    /**
+     * Takes a {@link android.graphics.drawable.Drawable} and draws it on top the ImageView content.
+     * The overlay drawable will respect the view's current state so a selector can be passed in.
+     */
+    static protected class Overlay {
+        final Drawable drawable;
+
+        Overlay(Drawable drawable) {
+            this.drawable = drawable;
+        }
+
+        protected void cleanupDrawable(ImageView imageView) {
+            if (drawable != null) {
+                drawable.setCallback(null);
+                imageView.unscheduleDrawable(drawable);
+            }
+        }
+
+        protected void setDrawableBounds(int width, int height) {
+            if (drawable != null) {
+                drawable.setBounds(0, 0, width, height);
+            }
+        }
+
+        protected void setDrawableState(int[] state) {
+            if (drawable != null && drawable.isStateful()) {
+                drawable.setState(state);
+            }
+        }
+
+        protected void draw(Canvas canvas) {
+            if (drawable != null) {
+                drawable.draw(canvas);
+            }
+        }
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/SpanClickHandler.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/SpanClickHandler.java
new file mode 100644
index 00000000..28754ca5
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/SpanClickHandler.java
@@ -0,0 +1,140 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.annotation.SuppressLint;
+import android.text.Layout;
+import android.text.Spanned;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.TextView;
+
+/**
+ * A helper class that enables support for clicks on spans in a the text of a
+ * {@link android.widget.TextView} or a {@link android.text.Layout}. The text in the layout must
+ * be of type Spanned, and the spans need to implement {@link HighlightedClickableSpan}.
+ */
+public class SpanClickHandler {
+    private final View view;
+    private Layout layout;
+    private float left;
+    private float top;
+
+    private HighlightedClickableSpan highlightedClickableSpan;
+
+    public static void enableClicksOnSpans(TextView textView) {
+        final SpanClickHandler helper = new SpanClickHandler(textView, null);
+        textView.setOnTouchListener(new View.OnTouchListener() {
+            @SuppressLint("ClickableViewAccessibility")
+            @Override
+            public boolean onTouch(View view, MotionEvent event) {
+                final TextView textView = (TextView) view;
+                final Layout layout = textView.getLayout();
+                if (layout != null) {
+                    helper.layout = layout;
+                    helper.left = textView.getTotalPaddingLeft() + textView.getScrollX();
+                    helper.top = textView.getTotalPaddingTop() + textView.getScrollY();
+                    return helper.handleTouchEvent(event);
+                }
+                return false;
+            }
+        });
+    }
+
+    /**
+     * Creates an instance of this helper for a layout and its containing view.
+     */
+    public SpanClickHandler(View view, Layout layout) {
+        this.view = view;
+        this.layout = layout;
+    }
+
+    /**
+     * Takes a motion event from the processing view and check for clicks on
+     * any of the clickable spans in the layout.
+     * @param event The motion event.
+     * @return true if the event has been handled.
+     */
+    public boolean handleTouchEvent(MotionEvent event) {
+        final CharSequence text = layout.getText();
+        final Spanned spannedText = text instanceof Spanned ? (Spanned) text : null;
+        if (spannedText == null) {
+            return false;
+        }
+
+        final int action = (event.getAction() & MotionEvent.ACTION_MASK);
+        final int x = (int) (event.getX() - left);
+        final int y = (int) (event.getY() - top);
+
+        if (x < 0 || x >= layout.getWidth() || y < 0 || y >= layout.getHeight()) {
+            deselectSpan();
+            return false;
+        }
+
+        // Get the clicked line and check x is within the text on this line.
+        final int line = layout.getLineForVertical(y);
+        if (x < layout.getLineLeft(line) || x > layout.getLineRight(line)) {
+            deselectSpan();
+            return false;
+        }
+
+        if (action == MotionEvent.ACTION_DOWN) {
+            final int offset = layout.getOffsetForHorizontal(line, x);
+            final HighlightedClickableSpan[] span = spannedText.getSpans(offset, offset,
+                    HighlightedClickableSpan.class);
+            if (span.length > 0) {
+                selectSpan(span[0]);
+                return true;
+            }
+        } else if (action == MotionEvent.ACTION_UP) {
+            final HighlightedClickableSpan selectedSpan = highlightedClickableSpan;
+            if (selectedSpan != null) {
+                selectedSpan.onClick(view);
+                deselectSpan();
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Selects the given span.
+     */
+    private void selectSpan(HighlightedClickableSpan span) {
+        span.select(true);
+        highlightedClickableSpan = span;
+        invalidate();
+    }
+
+    /**
+     * Deselects the currently selected link, if there is one.
+     */
+    private void deselectSpan() {
+        final HighlightedClickableSpan selectedSpan = highlightedClickableSpan;
+        if (selectedSpan != null && selectedSpan.isSelected()) {
+            selectedSpan.select(false);
+            highlightedClickableSpan = null;
+            invalidate();
+        }
+    }
+
+    private void invalidate() {
+        view.invalidate((int) left, (int) top, (int) left + layout.getWidth(),
+                (int) top + layout.getHeight());
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/SwipeToDismissTouchListener.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/SwipeToDismissTouchListener.java
new file mode 100644
index 00000000..dd234d47
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/SwipeToDismissTouchListener.java
@@ -0,0 +1,244 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.animation.ObjectAnimator;
+import android.animation.ValueAnimator;
+import android.annotation.SuppressLint;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
+
+public class SwipeToDismissTouchListener implements View.OnTouchListener {
+    private int touchSlop;
+    private float initialY;
+    private final float maxTranslate;
+    private final float closeThreshold;
+    private Callback callback;
+    private float lastX;
+    private float lastY;
+    private int pointerIndex;
+    private boolean isMoving;
+
+    public static SwipeToDismissTouchListener createFromView(View view, Callback listener) {
+        return new SwipeToDismissTouchListener(listener,
+                ViewConfiguration.get(view.getContext()).getScaledTouchSlop(),
+                view.getContext().getResources().getDisplayMetrics().heightPixels * 0.5f);
+    }
+
+    SwipeToDismissTouchListener(Callback listener, int touchSlop, float maxTranslate) {
+        // If swiping more than 20% of the max distance, trigger the dismiss listener.
+        this(listener, touchSlop, maxTranslate, maxTranslate * 0.2f);
+    }
+
+    SwipeToDismissTouchListener(Callback listener, int touchSlop, float maxTranslate,
+            float closeThreshold) {
+        setCallback(listener);
+        this.touchSlop = touchSlop;
+        this.maxTranslate = maxTranslate;
+        this.closeThreshold = closeThreshold;
+    }
+
+    @Override
+    @SuppressLint("ClickableViewAccessibility")
+    public boolean onTouch(View v, MotionEvent event) {
+        boolean viewClosed = false;
+        if (!(v instanceof SwipeableViewProvider) || ((SwipeableViewProvider) v).canBeSwiped() ||
+                isMoving()) {
+            viewClosed = handleTouchEvent(v, event);
+        }
+
+        // If the view is not being closed due to the touch event, give the touch event back to the
+        // target view in case they have their own custom touch handling
+        return viewClosed || v.onTouchEvent(event);
+    }
+
+    /**
+     * Handles the incoming motion event, possibly translating or closing the swipeable view.
+     *
+     * @param event The incoming motion event.
+     * @return true if the motion event results in the view closing, false otherwise.
+     */
+    boolean handleTouchEvent(View swipeableView, MotionEvent event) {
+        boolean viewClosed = false;
+
+        switch (event.getActionMasked()) {
+            case MotionEvent.ACTION_DOWN: {
+                lastX = event.getRawX();
+                initialY = lastY = event.getRawY();
+                isMoving = false;
+                pointerIndex = event.getPointerId(event.getPointerCount() - 1);
+                break;
+            }
+            case MotionEvent.ACTION_MOVE: {
+                final float currentX = event.getRawX();
+                final float currentY = event.getRawY();
+                final float initialDeltaY = currentY - initialY;
+                final float deltaX = currentX - lastX;
+                final float deltaY = currentY - lastY;
+                lastX = currentX;
+                lastY = currentY;
+                if (isValidPointer(event) &&
+                        (isMoving || (hasMovedEnoughInProperYDirection(initialDeltaY) &&
+                                hasMovedMoreInYDirectionThanX(deltaX, deltaY)))) {
+                    isMoving = true;
+                    moveView(swipeableView, deltaY);
+                }
+                break;
+            }
+            case MotionEvent.ACTION_POINTER_DOWN:{
+                settleView(swipeableView);
+                isMoving = false;
+                pointerIndex = -1; // invalidate pointer index until next ACTION_DOWN
+                break;
+            }
+            case MotionEvent.ACTION_UP:
+            case MotionEvent.ACTION_CANCEL: {
+                if (isValidPointer(event)) {
+                    if (isMoving) {
+                        viewClosed = settleOrCloseView(swipeableView);
+                    }
+                }
+                isMoving = false;
+                break;
+            }
+            default: {
+                break;
+            }
+        }
+
+        return viewClosed;
+    }
+
+    /**
+     * @param initialDeltaY the delta between the initial Y position and the current Y position.
+     * @return if the scroll has moved far enough in the proper direction to start tracking a swipe to dismiss.
+     */
+    boolean hasMovedEnoughInProperYDirection(float initialDeltaY) {
+        return Math.abs(initialDeltaY) > touchSlop;
+    }
+
+    /**
+     * @param deltaX the delta between the last X position and the current X position.
+     * @param deltaY the delta between the last Y position and the current Y position.
+     * @return if the swipe gesture has moved more in the Y direction than the X direction.
+     */
+    boolean hasMovedMoreInYDirectionThanX(float deltaX, float deltaY) {
+        return Math.abs(deltaY) > Math.abs(deltaX);
+    }
+
+    /**
+     * @return if we are currently tracking a swipe to dismiss gesture.
+     */
+    boolean isMoving() {
+        return isMoving;
+    }
+
+    boolean isValidPointer(MotionEvent event) {
+        return pointerIndex >= 0 && event.getPointerCount() == 1;
+    }
+
+    /**
+     * Determines whether or not to settle or close the view based on the current view translation.
+     *
+     * @return true if the view was closed, otherwise false.
+     */
+    boolean settleOrCloseView(View swipeableView) {
+        final float currentY = swipeableView.getTranslationY();
+        if (currentY > closeThreshold || currentY < -closeThreshold) {
+            if (callback != null) {
+                callback.onDismiss();
+            }
+
+            return true;
+        } else {
+            settleView(swipeableView);
+            return false;
+        }
+    }
+
+    void settleView(View swipeableView) {
+        if (swipeableView.getTranslationY() != 0) {
+            final ObjectAnimator animator =
+                    ObjectAnimator.ofFloat(swipeableView, View.TRANSLATION_Y, 0).setDuration(100);
+            animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator animation) {
+                    final float targetY = (Float) animation.getAnimatedValue();
+                    if (callback != null) {
+                        callback.onMove(targetY);
+                    }
+                }
+            });
+            animator.start();
+        }
+    }
+
+    void moveView(View swipeableView, float deltaY) {
+        final float currentY = swipeableView.getTranslationY();
+        final float deltaWithTension = (float) (deltaY * calculateTension(currentY));
+        final float targetY = bound(currentY + deltaWithTension);
+        swipeableView.setTranslationY(targetY);
+        if (callback != null) {
+            callback.onMove(targetY);
+        }
+    }
+
+    double calculateTension(float targetY) {
+        // energy = 1 / 2 * k * x^2
+        // but since we only want a coefficient from 0 to 1 we can ignore the constants.
+        final float distance = Math.abs(targetY);
+        final float maxDistance = closeThreshold * 2f;
+        final double tension = Math.pow(distance, 2);
+        final double maxTension = Math.pow(maxDistance, 2);
+        final double tensionCoeff = 1 - (tension / maxTension);
+        return tensionCoeff;
+    }
+
+    float bound(float y) {
+        if (y < -maxTranslate) {
+            return -maxTranslate;
+        } else if (y > maxTranslate) {
+            return maxTranslate;
+        }
+        return y;
+    }
+
+    public void setCallback(Callback listener) {
+        this.callback = listener;
+    }
+
+    public interface Callback {
+        void onDismiss();
+
+        void onMove(float translationY);
+    }
+
+    /**
+     * Implement this interface to allow or disallow swipe to dismiss behavior
+     */
+    public interface SwipeableViewProvider {
+        /**
+         * Determines if a view can be swiped away
+         * ATTENTION: this will be called on every touchEvent, don't do any expensive operation in this method
+         *
+         * @return true if the view can be moved/dismissed, false otherwise
+         */
+        boolean canBeSwiped();
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
index d0a8fc75..b97550d5 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
@@ -21,6 +21,7 @@
 
 import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.models.TweetEntities;
 import com.twitter.sdk.android.core.models.VideoInfo;
 
 import java.util.ArrayList;
@@ -31,7 +32,8 @@
     public static final String VIDEO_TYPE = "video";
     public static final String GIF_TYPE = "animated_gif";
     private static final String CONTENT_TYPE_MP4 = "video/mp4";
-    private static final String CONTENT_TYPE_WEBM = "video/webm";
+    private static final String CONTENT_TYPE_HLS = "application/x-mpegURL";
+    private static final int LOOP_VIDEO_IN_MILLIS = 6500;
 
     private TweetMediaUtils() {
     }
@@ -53,6 +55,30 @@ static public MediaEntity getPhotoEntity(Tweet tweet) {
         return null;
     }
 
+    /**
+     * This method gets the all the photos from the tweet, which are used to display inline
+     *
+     * @param tweet The Tweet
+     * @return Photo entities of Tweet
+     */
+    static public List<MediaEntity> getPhotoEntities(Tweet tweet) {
+        final List<MediaEntity> photoEntities = new ArrayList<>();
+        final TweetEntities extendedEntities = tweet.extendedEtities;
+
+        if (extendedEntities != null && extendedEntities.media != null
+                && extendedEntities.media.size() > 0) {
+            for (int i = 0; i <= extendedEntities.media.size() - 1; i++) {
+                final MediaEntity entity = extendedEntities.media.get(i);
+                if (entity.type != null && isPhotoType(entity)) {
+                    photoEntities.add(entity);
+                }
+            }
+            return photoEntities;
+        }
+
+        return photoEntities;
+    }
+
     /**
      * Returns true if there is a media entity with the type of "photo"
      *
@@ -81,29 +107,25 @@ static public MediaEntity getVideoEntity(Tweet tweet) {
     }
 
     /**
-     * Returns true if there is a media entity with the type of "video" or "animated_gif"
+     * Returns true if there is a media entity with the type of "video" or "animated_gif" and
+     * playback is supported.
      *
-     * @param tweet The Tweet entities
-     * @return true if there is a media entity with the type of "video" or "animated_gif"
+     * @param tweet The Tweet
+     * @return true if there is a media entity with the type of "video" or "animated_gif" and
+     * playback is supported
      */
-    static public boolean hasVideo(Tweet tweet) {
-        return getVideoEntity(tweet) != null;
+    static public boolean hasSupportedVideo(Tweet tweet) {
+        final MediaEntity entity = getVideoEntity(tweet);
+        return entity != null && getSupportedVariant(entity) != null;
     }
 
     static boolean isPhotoType(MediaEntity mediaEntity) {
-        if (PHOTO_TYPE.equals(mediaEntity.type)) {
-            return true;
-        }
+        return PHOTO_TYPE.equals(mediaEntity.type);
 
-        return false;
     }
 
     static boolean isVideoType(MediaEntity mediaEntity) {
-        if (VIDEO_TYPE.equals(mediaEntity.type) || GIF_TYPE.equals(mediaEntity.type)) {
-            return true;
-        }
-
-        return false;
+        return VIDEO_TYPE.equals(mediaEntity.type) || GIF_TYPE.equals(mediaEntity.type);
     }
 
     static public VideoInfo.Variant getSupportedVariant(MediaEntity mediaEntity) {
@@ -117,18 +139,20 @@ static boolean isVideoType(MediaEntity mediaEntity) {
     }
 
     static public boolean isLooping(MediaEntity mediaEntity) {
-        if (GIF_TYPE.equals(mediaEntity.type)) {
-            return true;
-        }
+        return GIF_TYPE.equals(mediaEntity.type) ||
+                VIDEO_TYPE.endsWith(mediaEntity.type) &&
+                mediaEntity.videoInfo.durationMillis < LOOP_VIDEO_IN_MILLIS;
+    }
 
-        return false;
+    static public boolean showVideoControls(MediaEntity mediaEntity) {
+        return !GIF_TYPE.equals(mediaEntity.type);
     }
 
     static boolean isVariantSupported(VideoInfo.Variant variant) {
-        if (CONTENT_TYPE_MP4.equals(variant.contentType)) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP &&
+                CONTENT_TYPE_HLS.equals(variant.contentType)) {
             return true;
-        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT
-                && CONTENT_TYPE_WEBM.equals(variant.contentType)) {
+        } else if (CONTENT_TYPE_MP4.equals(variant.contentType)) {
             return true;
         }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaView.java
index a4a13a56..08bedd29 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaView.java
@@ -18,111 +18,456 @@
 package com.twitter.sdk.android.tweetui.internal;
 
 import android.content.Context;
+import android.content.Intent;
 import android.graphics.Canvas;
-import android.graphics.drawable.Drawable;
+import android.graphics.Color;
+import android.graphics.Path;
+import android.graphics.RectF;
+import android.os.Build;
+import android.text.TextUtils;
 import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
 import android.widget.ImageView;
 
-import com.twitter.sdk.android.core.internal.util.AspectRatioImageView;
+import com.squareup.picasso.Picasso;
+import com.twitter.sdk.android.core.IntentUtils;
+import com.twitter.sdk.android.core.internal.VineCardUtils;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.ImageValue;
+import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.models.VideoInfo;
+import com.twitter.sdk.android.tweetui.GalleryActivity;
+import com.twitter.sdk.android.tweetui.PlayerActivity;
+import com.twitter.sdk.android.tweetui.R;
+import com.twitter.sdk.android.tweetui.TweetMediaClickListener;
+import com.twitter.sdk.android.tweetui.TweetUi;
 
-/**
- * An ImageView subclass that take a {@link android.graphics.drawable.Drawable} and draws it on top
- * the ImageView content.
- */
-public class TweetMediaView extends AspectRatioImageView {
-    Overlay overlay = new Overlay(null);
+import java.lang.ref.WeakReference;
+import java.util.Collections;
+import java.util.List;
+
+public class TweetMediaView extends ViewGroup implements View.OnClickListener {
+
+    static final int MAX_IMAGE_VIEW_COUNT = 4;
+    static final String SIZED_IMAGE_SMALL = ":small";
+
+    private final OverlayImageView[] imageViews = new OverlayImageView[MAX_IMAGE_VIEW_COUNT];
+    private List<MediaEntity> mediaEntities = Collections.emptyList();
+    private final Path path = new Path();
+    private final RectF rect = new RectF();
+    private final int mediaDividerSize;
+    private int imageCount;
+    final float [] radii = new float[8];
+    int mediaBgColor = Color.BLACK;
+    int photoErrorResId;
+    final DependencyProvider dependencyProvider;
+    boolean internalRoundedCornersEnabled;
+    TweetMediaClickListener tweetMediaClickListener;
+    Tweet tweet;
 
     public TweetMediaView(Context context) {
-        super(context);
+        this(context, null);
     }
 
     public TweetMediaView(Context context, AttributeSet attrs) {
+        this(context, attrs, new DependencyProvider());
+    }
+
+    TweetMediaView(Context context, AttributeSet attrs, DependencyProvider dependencyProvider) {
         super(context, attrs);
+
+        this.dependencyProvider =  dependencyProvider;
+        mediaDividerSize = getResources().getDimensionPixelSize
+                (R.dimen.tw__media_view_divider_size);
+        photoErrorResId = R.drawable.tw__ic_tweet_photo_error_dark;
     }
 
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-        overlay.draw(canvas);
+    public void setRoundedCornersRadii(int topLeft, int topRight, int bottomRight, int bottomLeft) {
+        radii[0] = topLeft;
+        radii[1] = topLeft;
+        radii[2] = topRight;
+        radii[3] = topRight;
+        radii[4] = bottomRight;
+        radii[5] = bottomRight;
+        radii[6] = bottomLeft;
+        radii[7] = bottomLeft;
+
+        requestLayout();
+    }
+
+    public void setMediaBgColor(int mediaBgColor) {
+        this.mediaBgColor = mediaBgColor;
+    }
+
+    public void setTweetMediaClickListener(TweetMediaClickListener tweetMediaClickListener) {
+        this.tweetMediaClickListener = tweetMediaClickListener;
+    }
+
+    public void setPhotoErrorResId(int photoErrorResId) {
+        this.photoErrorResId = photoErrorResId;
     }
 
     @Override
-    protected void drawableStateChanged() {
-        super.drawableStateChanged();
-        overlay.setDrawableState(getDrawableState());
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (imageCount > 0) {
+            layoutImages();
+        }
     }
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-        overlay.setDrawableBounds(getMeasuredWidth(), getMeasuredHeight());
+        final Size size;
+        if (imageCount > 0) {
+            size = measureImages(widthMeasureSpec, heightMeasureSpec);
+        } else {
+            size = Size.EMPTY;
+        }
+        setMeasuredDimension(size.width, size.height);
     }
 
     @Override
-    protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) {
-        super.onSizeChanged(width, height, oldWidth, oldHeight);
-        overlay.setDrawableBounds(width, height);
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+
+        path.reset();
+        rect.set(0, 0, w, h);
+        path.addRoundRect(rect, radii, Path.Direction.CW);
+        path.close();
     }
 
     @Override
-    public void invalidateDrawable(Drawable drawable) {
-        if (drawable == overlay.drawable) {
-            invalidate();
+    protected void dispatchDraw(Canvas canvas) {
+        if (internalRoundedCornersEnabled &&
+                Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+            final int saveState = canvas.save();
+            canvas.clipPath(path);
+            super.dispatchDraw(canvas);
+            canvas.restoreToCount(saveState);
         } else {
-            super.invalidateDrawable(drawable);
+            super.dispatchDraw(canvas);
         }
     }
 
-    /*
-     * Sets the drawable to be drawn on top the ImageView content.
-     *
-     * @param drawable The drawable
-     */
-    public void setOverlayDrawable(Drawable drawable) {
-        overlay.cleanupDrawable(this);
-        if (drawable != null) {
-            drawable.setCallback(this);
+    @Override
+    public void onClick(View view) {
+        final Integer mediaEntityIndex = (Integer) view.getTag(R.id.tw__entity_index);
+        if (tweetMediaClickListener != null) {
+            final MediaEntity mediaEntity;
+            if (!mediaEntities.isEmpty()) {
+                mediaEntity = mediaEntities.get(mediaEntityIndex);
+            } else {
+                mediaEntity = null;
+            }
+
+            tweetMediaClickListener.onMediaEntityClick(tweet, mediaEntity);
+        } else if (!mediaEntities.isEmpty()) {
+            final MediaEntity mediaEntity = mediaEntities.get(mediaEntityIndex);
+            if (TweetMediaUtils.isVideoType(mediaEntity)) {
+                launchVideoPlayer(mediaEntity);
+            } else if (TweetMediaUtils.isPhotoType(mediaEntity)) {
+                launchPhotoGallery(mediaEntityIndex);
+            }
+        } else {
+            launchVideoPlayer(tweet);
+        }
+    }
+
+    public void launchVideoPlayer(MediaEntity entity) {
+        final VideoInfo.Variant variant = TweetMediaUtils.getSupportedVariant(entity);
+        if (variant != null) {
+            final Intent intent = new Intent(getContext(), PlayerActivity.class);
+            final boolean looping = TweetMediaUtils.isLooping(entity);
+            final boolean showControls = TweetMediaUtils.showVideoControls(entity);
+            final String url = TweetMediaUtils.getSupportedVariant(entity).url;
+            final PlayerActivity.PlayerItem item =
+                    new PlayerActivity.PlayerItem(url, looping, showControls, null, null);
+            intent.putExtra(PlayerActivity.PLAYER_ITEM, item);
+
+            IntentUtils.safeStartActivity(getContext(), intent);
+        }
+    }
+
+    public void launchVideoPlayer(Tweet tweet) {
+        final Card card = tweet.card;
+        final Intent intent = new Intent(getContext(), PlayerActivity.class);
+        final String playerStreamUrl = VineCardUtils.getStreamUrl(card);
+
+        final PlayerActivity.PlayerItem playerItem =
+                new PlayerActivity.PlayerItem(playerStreamUrl, true, false, null, null);
+        intent.putExtra(PlayerActivity.PLAYER_ITEM, playerItem);
+
+        final ScribeItem scribeItem = ScribeItem.fromTweetCard(tweet.id, card);
+        intent.putExtra(PlayerActivity.SCRIBE_ITEM, scribeItem);
+
+        IntentUtils.safeStartActivity(getContext(), intent);
+    }
+
+    public void launchPhotoGallery(int mediaEntityIndex) {
+        final Intent intent = new Intent(getContext(), GalleryActivity.class);
+        final GalleryActivity.GalleryItem item =
+                new GalleryActivity.GalleryItem(tweet.id, mediaEntityIndex, mediaEntities);
+        intent.putExtra(GalleryActivity.GALLERY_ITEM, item);
+        IntentUtils.safeStartActivity(getContext(), intent);
+    }
+
+    public void setTweetMediaEntities(Tweet tweet, List<MediaEntity> mediaEntities) {
+        if (tweet == null || mediaEntities == null || mediaEntities.isEmpty() ||
+                mediaEntities.equals(this.mediaEntities)) {
+            return;
+        }
+
+        this.tweet = tweet;
+        this.mediaEntities = mediaEntities;
+
+        clearImageViews();
+        initializeImageViews(mediaEntities);
+
+        if (TweetMediaUtils.isPhotoType(mediaEntities.get(0))) {
+            internalRoundedCornersEnabled = true;
+        } else {
+            internalRoundedCornersEnabled = false;
         }
 
-        overlay = new Overlay(drawable);
-        overlay.setDrawableState(getDrawableState());
         requestLayout();
     }
 
+    public void setVineCard(Tweet tweet) {
+        if (tweet == null || tweet.card == null || !VineCardUtils.isVine(tweet.card)) {
+            return;
+        }
+
+        this.tweet = tweet;
+        this.mediaEntities = Collections.emptyList();;
+
+        clearImageViews();
+        initializeImageViews(tweet.card);
+
+        internalRoundedCornersEnabled = false;
+
+        requestLayout();
+    }
+
+    Size measureImages(int widthMeasureSpec, int heightMeasureSpec) {
+        final int width = MeasureSpec.getSize(widthMeasureSpec);
+        final int height = MeasureSpec.getSize(heightMeasureSpec);
+        final int halfWidth = (width - mediaDividerSize) / 2;
+        final int halfHeight = (height - mediaDividerSize) / 2;
+        switch (imageCount) {
+            case 1:
+                measureImageView(0, width, height);
+                break;
+            case 2:
+                measureImageView(0, halfWidth, height);
+                measureImageView(1, halfWidth, height);
+                break;
+            case 3:
+                measureImageView(0, halfWidth, height);
+                measureImageView(1, halfWidth, halfHeight);
+                measureImageView(2, halfWidth, halfHeight);
+                break;
+            case 4:
+                measureImageView(0, halfWidth, halfHeight);
+                measureImageView(1, halfWidth, halfHeight);
+                measureImageView(2, halfWidth, halfHeight);
+                measureImageView(3, halfWidth, halfHeight);
+                break;
+            default:
+                break;
+        }
+        return Size.fromSize(width, height);
+    }
+
+    void measureImageView(int i, int width, int height) {
+        imageViews[i].measure(
+                MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY),
+                MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY));
+    }
+
+    void layoutImages() {
+        final int width = getMeasuredWidth();
+        final int height = getMeasuredHeight();
+        final int halfWidth = (width - mediaDividerSize) / 2;
+        final int halfHeight = (height - mediaDividerSize) / 2;
+        final int middle = halfWidth + mediaDividerSize;
+        switch (imageCount) {
+            case 1:
+                layoutImage(0, 0, 0, width, height);
+                break;
+            case 2:
+                layoutImage(0, 0, 0, halfWidth, height);
+                layoutImage(1, halfWidth + mediaDividerSize, 0, width, height);
+                break;
+            case 3:
+                layoutImage(0, 0, 0, halfWidth, height);
+                layoutImage(1, middle, 0, width, halfHeight);
+                layoutImage(2, middle, halfHeight + mediaDividerSize, width, height);
+                break;
+            case 4:
+                layoutImage(0, 0, 0, halfWidth, halfHeight);
+                layoutImage(2, 0, halfHeight + mediaDividerSize, halfWidth, height);
+                layoutImage(1, middle, 0, width, halfHeight);
+                layoutImage(3, middle, halfHeight + mediaDividerSize, width, height);
+                break;
+            default:
+                break;
+        }
+    }
+
+    void layoutImage(int i, int left, int top, int right, int bottom) {
+        final ImageView view = imageViews[i];
+        if (view.getLeft() == left && view.getTop() == top && view.getRight() == right
+                && view.getBottom() == bottom) {
+            return;
+        }
+
+        view.layout(left, top, right, bottom);
+    }
+
+    void clearImageViews() {
+        for (int index = 0; index < imageCount; index++) {
+            final ImageView imageView = imageViews[index];
+            if (imageView != null) {
+                imageView.setVisibility(GONE);
+            }
+        }
+        imageCount = 0;
+    }
+
+    void initializeImageViews(List<MediaEntity> mediaEntities) {
+        imageCount = Math.min(MAX_IMAGE_VIEW_COUNT, mediaEntities.size());
+
+        for (int index = 0; index < imageCount; index++) {
+            final OverlayImageView imageView = getOrCreateImageView(index);
+
+            final MediaEntity mediaEntity = mediaEntities.get(index);
+            setAltText(imageView, mediaEntity.altText);
+            setMediaImage(imageView, getSizedImagePath(mediaEntity));
+            setOverlayImage(imageView, TweetMediaUtils.isVideoType(mediaEntity));
+        }
+    }
+
+    void initializeImageViews(Card card) {
+        imageCount = 1;
+
+        final OverlayImageView imageView = getOrCreateImageView(0);
+
+        final ImageValue imageValue = VineCardUtils.getImageValue(card);
+        setAltText(imageView, imageValue.alt);
+        setMediaImage(imageView, imageValue.url);
+        setOverlayImage(imageView, true);
+    }
+
+    OverlayImageView getOrCreateImageView(int index) {
+        OverlayImageView imageView = imageViews[index];
+        if (imageView == null) {
+            imageView = new OverlayImageView(getContext());
+            imageView.setLayoutParams(generateDefaultLayoutParams());
+            imageView.setOnClickListener(this);
+            imageViews[index] = imageView;
+            addView(imageView, index);
+        } else {
+            measureImageView(index, 0, 0);
+            layoutImage(index, 0, 0, 0, 0);
+        }
+
+        imageView.setVisibility(VISIBLE);
+        imageView.setBackgroundColor(mediaBgColor);
+        imageView.setTag(R.id.tw__entity_index, index);
+
+        return imageView;
+    }
+
+
+    String getSizedImagePath(MediaEntity mediaEntity) {
+        if (imageCount > 1) {
+           return mediaEntity.mediaUrlHttps + SIZED_IMAGE_SMALL;
+        }
+        return mediaEntity.mediaUrlHttps;   // defaults to :medium
+    }
+
+    void setAltText(ImageView imageView, String description) {
+        if (!TextUtils.isEmpty(description)) {
+            imageView.setContentDescription(description);
+        } else {
+            imageView.setContentDescription(getResources().getString(R.string.tw__tweet_media));
+        }
+    }
+
+    void setOverlayImage(OverlayImageView imageView, boolean isVideo) {
+        if (isVideo) {
+            imageView.setOverlayDrawable(getContext().getResources()
+                    .getDrawable(R.drawable.tw__player_overlay));
+        } else {
+            imageView.setOverlayDrawable(null);
+        }
+    }
+
+    void setMediaImage(ImageView imageView, String imagePath) {
+        final Picasso imageLoader = dependencyProvider.getImageLoader();
+        if (imageLoader == null) return;
+
+        imageLoader.load(imagePath)
+                .fit()
+                .centerCrop()
+                .error(photoErrorResId)
+                .into(imageView, new PicassoCallback(imageView));
+    }
+
     /**
-     * Takes a {@link android.graphics.drawable.Drawable} and draws it on top the ImageView content.
-     * The overlay drawable will respect the view's current state so a selector can be passed in.
+     * Picasso Callback which clears the ImageView's background onSuccess. This is done to reduce
+     * overdraw. A weak reference is used to avoid leaking the Activity context because the Callback
+     * will be strongly referenced by Picasso.
      */
-    static protected class Overlay {
-        final Drawable drawable;
+    static class PicassoCallback implements com.squareup.picasso.Callback {
+        final WeakReference<ImageView> imageViewWeakReference;
 
-        Overlay(Drawable drawable) {
-            this.drawable = drawable;
+        PicassoCallback(ImageView imageView) {
+            imageViewWeakReference = new WeakReference<>(imageView);
         }
 
-        protected void cleanupDrawable(ImageView imageView) {
-            if (drawable != null) {
-                drawable.setCallback(null);
-                imageView.unscheduleDrawable(drawable);
+        @Override
+        public void onSuccess() {
+            final ImageView imageView = imageViewWeakReference.get();
+            if (imageView != null) {
+                imageView.setBackgroundResource(android.R.color.transparent);
             }
         }
 
-        protected void setDrawableBounds(int width, int height) {
-            if (drawable != null) {
-                drawable.setBounds(0, 0, width, height);
-            }
+        @Override
+        public void onError() { /* intentionally blank */ }
+    }
+
+    static class Size {
+        static final Size EMPTY = new Size();
+        final int width;
+        final int height;
+
+        private Size() {
+            this(0, 0);
         }
 
-        protected void setDrawableState(int[] state) {
-            if (drawable != null && drawable.isStateful()) {
-                drawable.setState(state);
-            }
+        private Size(int width, int height) {
+            this.width = width;
+            this.height = height;
         }
 
-        protected void draw(Canvas canvas) {
-            if (drawable != null) {
-                drawable.draw(canvas);
-            }
+        static Size fromSize(int w, int h) {
+            final int boundedWidth = Math.max(w, 0);
+            final int boundedHeight = Math.max(h, 0);
+            return boundedWidth != 0 || boundedHeight != 0 ?
+                    new Size(boundedWidth, boundedHeight) : EMPTY;
+        }
+    }
+
+    static class DependencyProvider {
+        /**
+         * Can be null if run before TweetUi#doInBackground completes
+         */
+        Picasso getImageLoader() {
+            return TweetUi.getInstance().getImageLoader();
         }
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/UserSessionProvider.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/UserSessionProvider.java
deleted file mode 100644
index 9a78cec1..00000000
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/UserSessionProvider.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.internal.SessionProvider;
-
-import java.util.List;
-
-public class UserSessionProvider extends SessionProvider {
-
-    public UserSessionProvider(List<SessionManager<? extends Session>> sessionManagers) {
-        super(sessionManagers);
-    }
-
-    /*
-     * Do not launch the User Auth flow by default, fail the request to allow developers to launch
-     * the login flow.
-     */
-    public void requestAuth(Callback<Session> cb) {
-        cb.failure(new TwitterAuthException("Twitter login required."));
-    }
-}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/VideoControlView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/VideoControlView.java
index 07922058..ec1b477b 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/VideoControlView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/VideoControlView.java
@@ -19,7 +19,6 @@
 
 import android.annotation.SuppressLint;
 import android.content.Context;
-import android.os.Build;
 import android.os.Handler;
 import android.os.Message;
 import android.util.AttributeSet;
@@ -60,6 +59,9 @@ public VideoControlView(Context context, AttributeSet attrs, int defStyleAttr) {
         @Override
         public void handleMessage(Message msg) {
             if (msg.what == SHOW_PROGRESS_MSG) {
+                if (player == null) {
+                    return;
+                }
                 updateProgress();
                 updateStateControl();
                 if (isShowing() && player.isPlaying()) {
@@ -134,7 +136,6 @@ public void onStartTrackingTouch(SeekBar seekBar) {
 
             @Override
             public void onStopTrackingTouch(SeekBar seekBar) {
-                updateStateControl();
                 handler.sendEmptyMessage(SHOW_PROGRESS_MSG);
             }
         };
@@ -167,7 +168,7 @@ void setProgress(int currentTimeMillis, int durationMillis, int bufferPercentage
     void updateStateControl() {
         if (player.isPlaying()) {
             setPauseDrawable();
-        } else if (player.getCurrentPosition() >= player.getDuration() - 500) {
+        } else if (player.getCurrentPosition() > Math.max(player.getDuration() - 500, 0)) {
             setReplayDrawable();
         } else {
             setPlayDrawable();
@@ -191,27 +192,22 @@ void setReplayDrawable() {
 
     void hide() {
         handler.removeMessages(SHOW_PROGRESS_MSG);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {
-            AnimationUtils.fadeOut(this, FADE_DURATION_MS);
-        } else {
-            setVisibility(View.INVISIBLE);
-        }
+        AnimationUtils.fadeOut(this, FADE_DURATION_MS);
     }
 
     void show() {
         handler.sendEmptyMessage(SHOW_PROGRESS_MSG);
-        updateStateControl();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {
-            AnimationUtils.fadeIn(this, FADE_DURATION_MS);
-        } else {
-            setVisibility(View.VISIBLE);
-        }
+        AnimationUtils.fadeIn(this, FADE_DURATION_MS);
     }
 
     public boolean isShowing() {
         return getVisibility() == View.VISIBLE;
     }
 
+    public void update() {
+        handler.sendEmptyMessage(SHOW_PROGRESS_MSG);
+    }
+
     public interface MediaPlayerControl {
         void start();
 
@@ -221,18 +217,10 @@ public boolean isShowing() {
 
         int getCurrentPosition();
 
-        void seekTo(int var1);
+        void seekTo(int position);
 
         boolean isPlaying();
 
         int getBufferPercentage();
-
-        boolean canPause();
-
-        boolean canSeekBackward();
-
-        boolean canSeekForward();
-
-        int getAudioSessionId();
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/VideoView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/VideoView.java
index ebe30eb5..455342e0 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/VideoView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/VideoView.java
@@ -31,6 +31,7 @@
 import android.net.Uri;
 import android.util.AttributeSet;
 import android.util.Log;
+import android.view.GestureDetector;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.SurfaceHolder;
@@ -48,9 +49,7 @@
  * play position, or selected tracks.  Applications should
  * save and restore these on their own in
  * {@link android.app.Activity#onSaveInstanceState} and
- * {@link android.app.Activity#onRestoreInstanceState}.<p>
- * Also note that the audio session id (from {@link #getAudioSessionId}) may
- * change from its previously returned value when the VideoView is restored.
+ * {@link android.app.Activity#onRestoreInstanceState}.
  */
 public class VideoView extends SurfaceView
         implements VideoControlView.MediaPlayerControl {
@@ -87,9 +86,6 @@
     private OnErrorListener mOnErrorListener;
     private OnInfoListener mOnInfoListener;
     private int mSeekWhenPrepared;  // recording the seek position while preparing
-    private boolean mCanPause;
-    private boolean mCanSeekBack;
-    private boolean mCanSeekForward;
     private boolean mLooping;
 
     public VideoView(Context context) {
@@ -160,14 +156,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     height = width * mVideoHeight / mVideoWidth;
                 }
             }
-        } else {
-            // no size yet, just adopt the given spec sizes
         }
-        setMeasuredDimension(width, height);
-    }
 
-    public int resolveAdjustedSize(int desiredSize, int measureSpec) {
-        return getDefaultSize(desiredSize, measureSpec);
+        setMeasuredDimension(width, height);
     }
 
     private void initVideoView() {
@@ -177,6 +168,7 @@ private void initVideoView() {
         getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
         setFocusable(true);
         setFocusableInTouchMode(true);
+        setClickable(true);
         requestFocus();
         mCurrentState = STATE_IDLE;
         mTargetState = STATE_IDLE;
@@ -228,9 +220,9 @@ private void openVideo() {
             mMediaPlayer.setOnInfoListener(mInfoListener);
             mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);
             mCurrentBufferPercentage = 0;
+            mMediaPlayer.setLooping(mLooping);
             mMediaPlayer.setDataSource(getContext(), mUri);
             mMediaPlayer.setDisplay(mSurfaceHolder);
-            mMediaPlayer.setLooping(mLooping);
             mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
             mMediaPlayer.setScreenOnWhilePlaying(true);
             mMediaPlayer.prepareAsync();
@@ -244,7 +236,6 @@ private void openVideo() {
             mCurrentState = STATE_ERROR;
             mTargetState = STATE_ERROR;
             mErrorListener.onError(mMediaPlayer, MediaPlayer.MEDIA_ERROR_UNKNOWN, 0);
-            return;
         }
     }
 
@@ -278,7 +269,6 @@ public void onVideoSizeChanged(MediaPlayer mp, int width, int height) {
         public void onPrepared(MediaPlayer mp) {
             mCurrentState = STATE_PREPARED;
 
-            mCanPause = mCanSeekBack = mCanSeekForward = true;
             if (mOnPreparedListener != null) {
                 mOnPreparedListener.onPrepared(mMediaPlayer);
             }
@@ -367,6 +357,23 @@ public void onBufferingUpdate(MediaPlayer mp, int percent) {
                 }
             };
 
+    private GestureDetector gestureDetector = new GestureDetector(getContext(),
+            new GestureDetector.SimpleOnGestureListener() {
+        @Override
+        public boolean onSingleTapUp(MotionEvent e) {
+            if (isInPlaybackState() && mMediaController != null) {
+                toggleMediaControlsVisiblity();
+            }
+            return false;
+        }
+    });
+
+    @Override
+    public boolean onTouchEvent(MotionEvent ev) {
+        final boolean retVal = gestureDetector.onTouchEvent(ev);
+        return retVal || super.onTouchEvent(ev);
+    }
+
     /**
      * Register a callback to be invoked when the media file
      * is loaded and ready to go.
@@ -455,22 +462,6 @@ private void release(boolean cleartargetstate) {
         }
     }
 
-    @Override
-    public boolean onTouchEvent(MotionEvent ev) {
-        if (isInPlaybackState() && mMediaController != null) {
-            toggleMediaControlsVisiblity();
-        }
-        return super.onTouchEvent(ev);
-    }
-
-    @Override
-    public boolean onTrackballEvent(MotionEvent ev) {
-        if (isInPlaybackState() && mMediaController != null) {
-            toggleMediaControlsVisiblity();
-        }
-        return super.onTrackballEvent(ev);
-    }
-
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
         boolean isKeyCodeSupported = keyCode != KeyEvent.KEYCODE_BACK &&
@@ -583,29 +574,4 @@ private boolean isInPlaybackState() {
                 mCurrentState != STATE_IDLE &&
                 mCurrentState != STATE_PREPARING);
     }
-
-    @Override
-    public boolean canPause() {
-        return mCanPause;
-    }
-
-    @Override
-    public boolean canSeekBackward() {
-        return mCanSeekBack;
-    }
-
-    @Override
-    public boolean canSeekForward() {
-        return mCanSeekForward;
-    }
-
-    @Override
-    public int getAudioSessionId() {
-        if (mAudioSession == 0) {
-            MediaPlayer foo = new MediaPlayer();
-            mAudioSession = foo.getAudioSessionId();
-            foo.release();
-        }
-        return mAudioSession;
-    }
 }
\ No newline at end of file
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/util/HtmlEntities.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/util/HtmlEntities.java
index f3d3b01f..f6256801 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/util/HtmlEntities.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/util/HtmlEntities.java
@@ -19,7 +19,6 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.TreeMap;
 
 /**
  * <p>
@@ -941,48 +940,6 @@ public int value(String name) {
         }
     }
 
-    abstract static class MapIntMap implements EntityMap {
-        @SuppressWarnings("unchecked")
-        protected Map mapNameToValue;
-
-        @SuppressWarnings("unchecked")
-        protected Map mapValueToName;
-
-        @SuppressWarnings("unchecked")
-        public void add(String name, int value) {
-            mapNameToValue.put(name, value);
-            mapValueToName.put(value, name);
-        }
-
-        public String name(int value) {
-            return (String) mapValueToName.get(value);
-        }
-
-        public int value(String name) {
-            final Object value = mapNameToValue.get(name);
-            if (value == null) {
-                return -1;
-            }
-            return ((Integer) value).intValue();
-        }
-    }
-
-    static class HashEntityMap extends MapIntMap {
-        @SuppressWarnings("unchecked")
-        public HashEntityMap() {
-            mapNameToValue = new HashMap();
-            mapValueToName = new HashMap();
-        }
-    }
-
-    static class TreeEntityMap extends MapIntMap {
-        @SuppressWarnings("unchecked")
-        public TreeEntityMap() {
-            mapNameToValue = new TreeMap();
-            mapValueToName = new TreeMap();
-        }
-    }
-
     static class LookupEntityMap extends PrimitiveEntityMap {
         private static final int LOOKUP_TABLE_SIZE = 256;
 
@@ -1011,119 +968,6 @@ private void createLookupTable() {
         }
     }
 
-    static class ArrayEntityMap implements EntityMap {
-        protected int growBy = 100;
-
-        protected int size = 0;
-
-        protected String[] names;
-
-        protected int[] values;
-
-        public ArrayEntityMap() {
-            names = new String[growBy];
-            values = new int[growBy];
-        }
-
-        public ArrayEntityMap(int growBy) {
-            this.growBy = growBy;
-            names = new String[growBy];
-            values = new int[growBy];
-        }
-
-        public void add(String name, int value) {
-            ensureCapacity(size + 1);
-            names[size] = name;
-            values[size] = value;
-            size++;
-        }
-
-        protected void ensureCapacity(int capacity) {
-            if (capacity > names.length) {
-                final int newSize = Math.max(capacity, size + growBy);
-                final String[] newNames = new String[newSize];
-                System.arraycopy(names, 0, newNames, 0, size);
-                names = newNames;
-                final int[] newValues = new int[newSize];
-                System.arraycopy(values, 0, newValues, 0, size);
-                values = newValues;
-            }
-        }
-
-        public String name(int value) {
-            for (int i = 0; i < size; ++i) {
-                if (values[i] == value) {
-                    return names[i];
-                }
-            }
-            return null;
-        }
-
-        public int value(String name) {
-            for (int i = 0; i < size; ++i) {
-                if (names[i].equals(name)) {
-                    return values[i];
-                }
-            }
-            return -1;
-        }
-    }
-
-    static class BinaryEntityMap extends ArrayEntityMap {
-
-        public BinaryEntityMap() {}
-
-        public BinaryEntityMap(int growBy) {
-            super(growBy);
-        }
-
-        // based on code in java.util.Arrays
-        private int binarySearch(int key) {
-            int low = 0;
-            int high = size - 1;
-
-            while (low <= high) {
-                final int mid = (low + high) >>> 1;
-                final int midVal = values[mid];
-
-                if (midVal < key) {
-                    low = mid + 1;
-                } else if (midVal > key) {
-                    high = mid - 1;
-                } else {
-                    return mid; // key found
-                }
-            }
-            return -(low + 1); // key not found.
-        }
-
-        @Override
-        public void add(String name, int value) {
-            ensureCapacity(size + 1);
-            int insertAt = binarySearch(value);
-            if (insertAt > 0) {
-                return; // note: this means you can't insert the same value
-                // twice
-            }
-            insertAt = -(insertAt + 1); // binarySearch returns it negative and
-            // off-by-one
-            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);
-            values[insertAt] = value;
-            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);
-            names[insertAt] = name;
-            size++;
-        }
-
-        @Override
-        public String name(int value) {
-            final int index = binarySearch(value);
-            if (index < 0) {
-                return null;
-            }
-            return names[index];
-        }
-    }
-
     /**
      * The result of an unescape. Keeps an array of indices[start][end] on the original input that
      * was escaped.
@@ -1149,10 +993,6 @@ public void addEntity(String name, int value) {
         map.add(name, value);
     }
 
-    public String entityName(int value) {
-        return map.name(value);
-    }
-
     public int entityValue(String name) {
         return map.value(name);
     }
diff --git a/tweet-ui/src/main/res/values-en-rXX/const_strings.xml b/tweet-ui/src/main/res/anim/tw__accelerate_cubic.xml
similarity index 80%
rename from tweet-ui/src/main/res/values-en-rXX/const_strings.xml
rename to tweet-ui/src/main/res/anim/tw__accelerate_cubic.xml
index 692e536c..851f5bcf 100644
--- a/tweet-ui/src/main/res/values-en-rXX/const_strings.xml
+++ b/tweet-ui/src/main/res/anim/tw__accelerate_cubic.xml
@@ -16,7 +16,5 @@
   ~
   -->
 
-<resources>
-    <string name="tw__relative_date_format_long">[MM/dd/yy]</string>
-    <string name="tw__relative_date_format_short">[MMM dd]</string>
-</resources>
\ No newline at end of file
+<accelerateInterpolator xmlns:android="http://schemas.android.com/apk/res/android"
+                        android:factor="1.5"/>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/anim/tw__slide_out.xml b/tweet-ui/src/main/res/anim/tw__slide_out.xml
new file mode 100644
index 00000000..0e00d994
--- /dev/null
+++ b/tweet-ui/src/main/res/anim/tw__slide_out.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+    <translate xmlns:android="http://schemas.android.com/apk/res/android"
+               android:fromYDelta="0%"
+               android:toXDelta="100%"
+               android:interpolator="@anim/tw__accelerate_cubic"
+               android:duration="250"/>
+</set>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/drawable-hdpi/tw__ic_vine_badge.png b/tweet-ui/src/main/res/drawable-hdpi/tw__ic_vine_badge.png
new file mode 100644
index 00000000..5e50ffa3
Binary files /dev/null and b/tweet-ui/src/main/res/drawable-hdpi/tw__ic_vine_badge.png differ
diff --git a/tweet-ui/src/main/res/drawable-mdpi/tw__ic_vine_badge.png b/tweet-ui/src/main/res/drawable-mdpi/tw__ic_vine_badge.png
new file mode 100644
index 00000000..4aab0abd
Binary files /dev/null and b/tweet-ui/src/main/res/drawable-mdpi/tw__ic_vine_badge.png differ
diff --git a/tweet-ui/src/main/res/drawable-v18/tw__quote_tweet_border.xml b/tweet-ui/src/main/res/drawable-v18/tw__quote_tweet_border.xml
new file mode 100644
index 00000000..ea98d654
--- /dev/null
+++ b/tweet-ui/src/main/res/drawable-v18/tw__quote_tweet_border.xml
@@ -0,0 +1,24 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@android:color/transparent"/>
+    <stroke
+        android:width="@dimen/tw__quote_tweet_border_width"
+        android:color="@color/tw__light_gray" />
+    <corners android:radius="@dimen/tw__media_view_radius"/>
+</shape>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/drawable-xhdpi/tw__ic_vine_badge.png b/tweet-ui/src/main/res/drawable-xhdpi/tw__ic_vine_badge.png
new file mode 100644
index 00000000..09138238
Binary files /dev/null and b/tweet-ui/src/main/res/drawable-xhdpi/tw__ic_vine_badge.png differ
diff --git a/tweet-ui/src/main/res/drawable-xxhdpi/tw__ic_vine_badge.png b/tweet-ui/src/main/res/drawable-xxhdpi/tw__ic_vine_badge.png
new file mode 100644
index 00000000..9da5a5d4
Binary files /dev/null and b/tweet-ui/src/main/res/drawable-xxhdpi/tw__ic_vine_badge.png differ
diff --git a/tweet-ui/src/main/res/drawable/tw__bg_tweet.xml b/tweet-ui/src/main/res/drawable/tw__call_to_action.xml
similarity index 75%
rename from tweet-ui/src/main/res/drawable/tw__bg_tweet.xml
rename to tweet-ui/src/main/res/drawable/tw__call_to_action.xml
index 20c8afbc..8ef32796 100644
--- a/tweet-ui/src/main/res/drawable/tw__bg_tweet.xml
+++ b/tweet-ui/src/main/res/drawable/tw__call_to_action.xml
@@ -15,10 +15,12 @@
   ~
   -->
 
-<shape xmlns:android="http://schemas.android.com/apk/res/android"
-       android:shape="rectangle">
-    <solid android:color="@color/tw__tweet_light_container_bg_color"/>
+<shape xmlns:android="http://schemas.android.com/apk/res/android" >
     <stroke
-        android:width="@dimen/tw__tweet_container_width"
-        android:color="@color/tw__tweet_container_border"/>
-</shape>
\ No newline at end of file
+        android:width="@dimen/tw__cta_border_size"
+        android:color="@color/tw__cta_border_color"/>
+
+    <solid android:color="@android:color/transparent"/>
+
+    <corners android:radius="@dimen/tw__cta_radius"/>
+</shape>
diff --git a/tweet-ui/src/main/res/drawable/tw__gif_badge.xml b/tweet-ui/src/main/res/drawable/tw__gif_badge.xml
index 80b007d7..adc92885 100644
--- a/tweet-ui/src/main/res/drawable/tw__gif_badge.xml
+++ b/tweet-ui/src/main/res/drawable/tw__gif_badge.xml
@@ -18,10 +18,10 @@
 <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
     <item android:drawable="@drawable/tw__bg_media_badge"/>
     <item
-        android:left="@dimen/tw__gif_badge_padding"
-        android:bottom="@dimen/tw__gif_badge_padding"
-        android:right="@dimen/tw__gif_badge_padding"
-        android:top="@dimen/tw__gif_badge_padding">
+        android:left="@dimen/tw__badge_padding"
+        android:bottom="@dimen/tw__badge_padding"
+        android:right="@dimen/tw__badge_padding"
+        android:top="@dimen/tw__badge_padding">
         <bitmap android:src="@drawable/tw__ic_gif_badge"/>
     </item>
 </layer-list>
diff --git a/tweet-ui/src/main/res/drawable/tw__bg_tweet_compact.xml b/tweet-ui/src/main/res/drawable/tw__quote_tweet_border.xml
similarity index 78%
rename from tweet-ui/src/main/res/drawable/tw__bg_tweet_compact.xml
rename to tweet-ui/src/main/res/drawable/tw__quote_tweet_border.xml
index 337b3023..6dd55ac9 100644
--- a/tweet-ui/src/main/res/drawable/tw__bg_tweet_compact.xml
+++ b/tweet-ui/src/main/res/drawable/tw__quote_tweet_border.xml
@@ -15,7 +15,9 @@
   ~
   -->
 
-<shape xmlns:android="http://schemas.android.com/apk/res/android"
-       android:shape="rectangle">
-    <solid android:color="@color/tw__tweet_light_container_bg_color"/>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@android:color/transparent"/>
+    <stroke
+        android:width="@dimen/tw__quote_tweet_border_width"
+        android:color="@color/tw__light_gray" />
 </shape>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/drawable/tw__vine_badge.xml b/tweet-ui/src/main/res/drawable/tw__vine_badge.xml
new file mode 100644
index 00000000..ebb03414
--- /dev/null
+++ b/tweet-ui/src/main/res/drawable/tw__vine_badge.xml
@@ -0,0 +1,27 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/tw__bg_media_badge"/>
+    <item
+        android:left="@dimen/tw__badge_padding"
+        android:bottom="@dimen/tw__badge_padding"
+        android:right="@dimen/tw__badge_padding"
+        android:top="@dimen/tw__badge_padding">
+        <bitmap android:src="@drawable/tw__ic_vine_badge"/>
+    </item>
+</layer-list>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/layout/tw__action_bar.xml b/tweet-ui/src/main/res/layout/tw__action_bar.xml
index 02848f84..a88f064c 100644
--- a/tweet-ui/src/main/res/layout/tw__action_bar.xml
+++ b/tweet-ui/src/main/res/layout/tw__action_bar.xml
@@ -31,7 +31,8 @@
         android:src="@drawable/tw__like_action"
         twitter:contentDescriptionOff="@string/tw__like_tweet"
         twitter:contentDescriptionOn="@string/tw__liked_tweet"
-        android:layout_marginRight="@dimen/tw__tweet_action_button_spacing"/>
+        android:layout_marginRight="@dimen/tw__tweet_action_button_spacing"
+        android:layout_marginEnd="@dimen/tw__tweet_action_button_spacing"/>
 
     <ImageButton
         android:id="@+id/tw__tweet_share_button"
diff --git a/tweet-ui/src/main/res/layout/tw__gallery_activity.xml b/tweet-ui/src/main/res/layout/tw__gallery_activity.xml
index 7a90863c..96258908 100644
--- a/tweet-ui/src/main/res/layout/tw__gallery_activity.xml
+++ b/tweet-ui/src/main/res/layout/tw__gallery_activity.xml
@@ -19,8 +19,8 @@
        android:layout_width="match_parent"
        android:layout_height="match_parent">
 
-    <com.twitter.sdk.android.tweetui.internal.MultiTouchImageView
-        android:id="@+id/image_view"
+    <android.support.v4.view.ViewPager
+        android:id="@+id/tw__view_pager"
         android:layout_width="match_parent"
         android:layout_height="match_parent"/>
 </merge>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/layout/tw__media_badge.xml b/tweet-ui/src/main/res/layout/tw__media_badge.xml
index 4995032a..129703f7 100644
--- a/tweet-ui/src/main/res/layout/tw__media_badge.xml
+++ b/tweet-ui/src/main/res/layout/tw__media_badge.xml
@@ -22,7 +22,7 @@
     <ImageView
         tools:ignore="ContentDescription"
         android:id="@+id/tw__gif_badge"
-        style="@style/tw__Badge.Gif"/>
+        style="@style/tw__Badge"/>
 
     <TextView
         android:id="@+id/tw__video_duration"
diff --git a/tweet-ui/src/main/res/layout/tw__player_activity.xml b/tweet-ui/src/main/res/layout/tw__player_activity.xml
index b76ea192..818c782e 100644
--- a/tweet-ui/src/main/res/layout/tw__player_activity.xml
+++ b/tweet-ui/src/main/res/layout/tw__player_activity.xml
@@ -23,9 +23,27 @@
         android:layout_height="match_parent"
         android:layout_gravity="center"/>
 
+    <ProgressBar
+        android:id="@+id/video_progress_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"/>
+
     <com.twitter.sdk.android.tweetui.internal.VideoControlView
         android:id="@+id/video_control_view"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:layout_gravity="bottom"/>
+
+    <TextView
+        android:id="@+id/call_to_action_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="top|center"
+        android:padding="@dimen/tw__cta_padding"
+        android:layout_marginTop="@dimen/tw__cta_margin_top"
+        android:textSize="@dimen/tw__text_size_medium"
+        android:textColor="@color/tw__cta_text_color"
+        android:background="@drawable/tw__call_to_action"
+        android:visibility="gone"/>
 </merge>
diff --git a/tweet-ui/src/main/res/layout/tw__tweet.xml b/tweet-ui/src/main/res/layout/tw__tweet.xml
index 638b44d7..f493c16c 100644
--- a/tweet-ui/src/main/res/layout/tw__tweet.xml
+++ b/tweet-ui/src/main/res/layout/tw__tweet.xml
@@ -15,39 +15,37 @@
   ~
   -->
 
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
-    android:id="@+id/tw__tweet_view"
-    style="@style/tw__TweetContainer"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content">
+    style="@style/tw__TweetFillWidth"
+    tools:parentTag="RelativeLayout">
 
-    <FrameLayout
-        android:id="@+id/tw__tweet_media_container"
+    <com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout
+        android:id="@+id/tw__aspect_ratio_media_container"
         style="@style/tw__TweetMediaContainer">
 
         <com.twitter.sdk.android.tweetui.internal.TweetMediaView
-            android:id="@+id/tw__tweet_media"
-            style="@style/tw__TweetMedia"
-            tools:ignore="ContentDescription" />
+            android:id="@+id/tweet_media_view"
+            style="@style/tw__TweetMedia"/>
 
         <com.twitter.sdk.android.tweetui.internal.MediaBadgeView
             android:id="@+id/tw__tweet_media_badge"
             style="@style/tw__TweetBadge" />
-    </FrameLayout>
+    </com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout>
 
     <TextView
         android:id="@+id/tw__tweet_retweeted_by"
-        android:layout_below="@id/tw__tweet_media_container"
+        android:layout_below="@id/tw__aspect_ratio_media_container"
         style="@style/tw__TweetRetweetedBy"
-        tools:text="retweeted by"/>
+        tools:text="Retweeted by Jack"
+        tools:visibility="visible"/>
 
     <ImageView
         tools:ignore="ContentDescription"
         android:id="@+id/tw__tweet_author_avatar"
         style="@style/tw__TweetAvatar"
         android:layout_below="@id/tw__tweet_retweeted_by"
-        tools:background="@color/tw__tweet_media_preview_bg_color"/>
+        tools:src="#CCCCCC"/>
 
     <TextView
         android:id="@+id/tw__tweet_author_full_name"
@@ -55,18 +53,10 @@
         android:layout_below="@id/tw__tweet_retweeted_by"
         android:layout_toRightOf="@id/tw__tweet_author_avatar"
         android:layout_toEndOf="@id/tw__tweet_author_avatar"
+        tools:drawableRight="@drawable/tw__ic_tweet_verified"
+        tools:drawableEnd="@drawable/tw__ic_tweet_verified"
         tools:text="Jack"/>
 
-    <ImageView
-        tools:ignore="ContentDescription"
-        android:id="@+id/tw__tweet_author_verified"
-        style="@style/tw__TweetVerifiedCheck"
-        android:layout_toRightOf="@id/tw__tweet_author_full_name"
-        android:layout_toEndOf="@id/tw__tweet_author_full_name"
-        android:layout_alignBottom="@id/tw__tweet_author_full_name"
-        android:visibility="gone"
-        tools:visibility="visible"/>
-
     <ImageView
         tools:ignore="ContentDescription"
         android:id="@+id/tw__twitter_logo"
@@ -101,17 +91,22 @@
         tools:text="just setting up my twttr"
         tools:visibility="visible"/>
 
+    <FrameLayout
+        android:id="@+id/quote_tweet_holder"
+        style="@style/tw__QuoteTweetContainer"
+        android:layout_below="@id/tw__tweet_text"/>
+
     <include
         style="@style/tw__TweetActionButtonBar"
         layout="@layout/tw__action_bar"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_below="@id/tw__tweet_text"/>
+        android:layout_below="@id/quote_tweet_holder"/>
 
     <View
         android:id="@+id/bottom_separator"
         android:layout_width="match_parent"
         android:layout_height="@dimen/tw__tweet_container_bottom_separator"
-        android:layout_below="@id/tw__tweet_text"/>
+        android:layout_below="@id/quote_tweet_holder"/>
 
-</RelativeLayout>
+</merge>
diff --git a/tweet-ui/src/main/res/layout/tw__tweet_compact.xml b/tweet-ui/src/main/res/layout/tw__tweet_compact.xml
index 72b873c6..15eaf475 100644
--- a/tweet-ui/src/main/res/layout/tw__tweet_compact.xml
+++ b/tweet-ui/src/main/res/layout/tw__tweet_compact.xml
@@ -16,24 +16,25 @@
   -->
 
 <!--Tweet container-->
-<RelativeLayout
-    android:id="@+id/tw__tweet_view"
-    xmlns:android="http://schemas.android.com/apk/res/android"
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
-    style="@style/tw__CompactTweetContainer">
+    style="@style/tw__TweetFillWidth"
+    tools:parentTag="RelativeLayout">
 
     <TextView
         android:id="@+id/tw__tweet_retweeted_by"
         android:layout_alignLeft="@+id/tw__author_attribution"
+        android:layout_alignStart="@+id/tw__author_attribution"
         style="@style/tw__TweetRetweetedBy.Compact"
-        tools:text="retweeted by"/>
+        tools:text="Retweeted by Jack"
+        tools:visibility="visible"/>
 
     <ImageView
         tools:ignore="ContentDescription"
         android:id="@+id/tw__tweet_author_avatar"
         android:layout_below="@id/tw__tweet_retweeted_by"
         style="@style/tw__TweetAvatar.Compact"
-        tools:background="@color/tw__tweet_media_preview_bg_color"/>
+        tools:src="#CCCCCC"/>
 
     <!--Name and timestamp don't ellipsize, but @username in the middle does ellipsize-->
     <LinearLayout
@@ -68,37 +69,43 @@
         android:layout_alignParentRight="true"
         android:layout_alignParentEnd="true"/>
 
-    <FrameLayout
-        android:id="@+id/tw__tweet_media_container"
+    <com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout
+        android:id="@+id/tw__aspect_ratio_media_container"
         style="@style/tw__TweetMediaContainer.Compact"
-        android:layout_below="@id/tw__author_attribution"
-        android:layout_toEndOf="@id/tw__tweet_author_avatar"
-        android:layout_toRightOf="@id/tw__tweet_author_avatar">
+        android:layout_alignLeft="@id/tw__author_attribution"
+        android:layout_alignStart="@id/tw__author_attribution"
+        android:layout_below="@id/tw__author_attribution" >
 
         <com.twitter.sdk.android.tweetui.internal.TweetMediaView
-            android:id="@+id/tw__tweet_media"
-            style="@style/tw__TweetMedia"
-            tools:ignore="ContentDescription" />
+            android:id="@+id/tweet_media_view"
+            style="@style/tw__TweetMedia"/>
 
         <com.twitter.sdk.android.tweetui.internal.MediaBadgeView
             android:id="@+id/tw__tweet_media_badge"
             style="@style/tw__TweetBadge" />
-    </FrameLayout>
+    </com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout>
 
     <TextView
         android:id="@+id/tw__tweet_text"
         style="@style/tw__TweetText.Compact"
-        android:layout_below="@id/tw__tweet_media_container"
+        android:layout_below="@id/tw__aspect_ratio_media_container"
         android:layout_toRightOf="@id/tw__tweet_author_avatar"
         android:layout_toEndOf="@id/tw__tweet_author_avatar"
         tools:text="just setting up my twttr"/>
 
+    <FrameLayout
+        android:id="@+id/quote_tweet_holder"
+        style="@style/tw__QuoteTweetContainer.Compact"
+        android:layout_below="@id/tw__tweet_text"
+        android:layout_toEndOf="@id/tw__tweet_author_avatar"
+        android:layout_toRightOf="@id/tw__tweet_author_avatar" />
+
     <include
         style="@style/tw__TweetActionButtonBar.Compact"
         layout="@layout/tw__action_bar"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_below="@id/tw__tweet_text"
+        android:layout_below="@id/quote_tweet_holder"
         android:layout_toEndOf="@id/tw__tweet_author_avatar"
         android:layout_toRightOf="@id/tw__tweet_author_avatar"/>
 
@@ -106,6 +113,6 @@
         android:id="@+id/bottom_separator"
         android:layout_width="match_parent"
         android:layout_height="@dimen/tw__compact_tweet_container_bottom_separator"
-        android:layout_below="@id/tw__tweet_text"/>
+        android:layout_below="@id/quote_tweet_holder"/>
 
-</RelativeLayout>
+</merge>
diff --git a/tweet-ui/src/main/res/layout/tw__tweet_quote.xml b/tweet-ui/src/main/res/layout/tw__tweet_quote.xml
new file mode 100644
index 00000000..e6f75f08
--- /dev/null
+++ b/tweet-ui/src/main/res/layout/tw__tweet_quote.xml
@@ -0,0 +1,67 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<!--Tweet container-->
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    style="@style/tw__TweetFillWidth"
+    tools:parentTag="RelativeLayout">
+
+    <!--Name doesn't ellipsize, but @username does ellipsize-->
+    <LinearLayout
+        android:id="@+id/tw__author_attribution"
+        style="@style/tw__QuoteAttributionLine"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true">
+
+        <TextView
+            android:id="@+id/tw__tweet_author_full_name"
+            style="@style/tw__TweetFullName.Compact"
+            tools:text="Jack" />
+
+        <TextView
+            android:id="@+id/tw__tweet_author_screen_name"
+            style="@style/tw__TweetScreenName.Compact"
+            tools:text="\@jack" />
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/tw__tweet_text"
+        style="@style/tw__TweetText.Quote"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_below="@+id/tw__author_attribution"
+        tools:text="just setting up my twttr" />
+
+    <com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout
+        android:id="@+id/tw__aspect_ratio_media_container"
+        style="@style/tw__TweetMediaContainer.Quote"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_below="@id/tw__tweet_text">
+
+        <com.twitter.sdk.android.tweetui.internal.TweetMediaView
+            android:id="@+id/tweet_media_view"
+            style="@style/tw__TweetMedia" />
+
+        <com.twitter.sdk.android.tweetui.internal.MediaBadgeView
+            android:id="@+id/tw__tweet_media_badge"
+            style="@style/tw__TweetBadge" />
+    </com.twitter.sdk.android.tweetui.internal.AspectRatioFrameLayout>
+
+</merge>
diff --git a/tweet-ui/src/main/res/values-ar/const_strings.xml b/tweet-ui/src/main/res/values-ar/const_strings.xml
index 089cc108..ad9f5578 100644
--- a/tweet-ui/src/main/res/values-ar/const_strings.xml
+++ b/tweet-ui/src/main/res/values-ar/const_strings.xml
@@ -17,6 +17,6 @@
   -->
 
 <resources>
-    <string name="tw__relative_date_format_long">d /M /y</string>
+    <string name="tw__relative_date_format_long">d/M/y</string>
     <string name="tw__relative_date_format_short">d MMM</string>
 </resources>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/values-ar/strings.xml b/tweet-ui/src/main/res/values-ar/strings.xml
index 82666953..7bb2f945 100644
--- a/tweet-ui/src/main/res/values-ar/strings.xml
+++ b/tweet-ui/src/main/res/values-ar/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">تغريدة من %1$s (‎\@%2$s)</string>
     <string name="tw__share_tweet">مشاركة التغريدة</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">تغريدة وسائط</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-bg/plurals.xml b/tweet-ui/src/main/res/values-bg/plurals.xml
index f6e5bed5..edede39d 100644
--- a/tweet-ui/src/main/res/values-bg/plurals.xml
+++ b/tweet-ui/src/main/res/values-bg/plurals.xml
@@ -17,4 +17,17 @@
   ~
   -->
 
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2"/>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <plurals name="tw__time_hours">
+        <item quantity="one">1 ч</item>
+        <item quantity="other">%d ч</item>
+    </plurals>
+    <plurals name="tw__time_mins">
+        <item quantity="one">1 мин</item>
+        <item quantity="other">%d мин</item>
+    </plurals>
+    <plurals name="tw__time_secs">
+        <item quantity="one">1 сек</item>
+        <item quantity="other">%d сек</item>
+    </plurals>
+</resources>
diff --git a/tweet-ui/src/main/res/values-bg/strings.xml b/tweet-ui/src/main/res/values-bg/strings.xml
index 25e74350..90c17ba5 100644
--- a/tweet-ui/src/main/res/values-bg/strings.xml
+++ b/tweet-ui/src/main/res/values-bg/strings.xml
@@ -18,7 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">Харесване на туита</string>
+    <string name="tw__liked_tweet">Отмяна на харесването</string>
+    <string name="tw__loading_tweet">Туитът се зарежда</string>
     <string name="tw__pause">пауза</string>
     <string name="tw__play">пускане</string>
     <string name="tw__replay">повторение</string>
+    <string name="tw__retweeted_by_format">Ретуитнато от %1$s</string>
+    <string name="tw__share_content_format">Виж туита на \@%1$s: https://twitter.com/%1$s/status/%2$s</string>
+    <string name="tw__share_subject_format">Туит от %1$s (\@%2$s)</string>
+    <string name="tw__share_tweet">Споделяне на туита</string>
+    <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Туитване на мултимедия</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-bn/strings.xml b/tweet-ui/src/main/res/values-bn/strings.xml
index 21776e5f..fd145a02 100644
--- a/tweet-ui/src/main/res/values-bn/strings.xml
+++ b/tweet-ui/src/main/res/values-bn/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">%1$s (\@%2$s) থেকে টুইট</string>
     <string name="tw__share_tweet">টুইট ভাগ করুন</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">টুইট মিডিয়া</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-en-rXX/plurals.xml b/tweet-ui/src/main/res/values-ca/plurals.xml
similarity index 77%
rename from tweet-ui/src/main/res/values-en-rXX/plurals.xml
rename to tweet-ui/src/main/res/values-ca/plurals.xml
index 5704f427..ee8db2dc 100644
--- a/tweet-ui/src/main/res/values-en-rXX/plurals.xml
+++ b/tweet-ui/src/main/res/values-ca/plurals.xml
@@ -19,15 +19,15 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <plurals name="tw__time_hours">
-        <item quantity="one">[1h]</item>
-        <item quantity="other">[%dh]</item>
+        <item quantity="one">1 h</item>
+        <item quantity="other">%d h</item>
     </plurals>
     <plurals name="tw__time_mins">
-        <item quantity="one">[1m]</item>
-        <item quantity="other">[%dm]</item>
+        <item quantity="one">1 m</item>
+        <item quantity="other">%d m</item>
     </plurals>
     <plurals name="tw__time_secs">
-        <item quantity="one">[1s]</item>
-        <item quantity="other">[%ds]</item>
+        <item quantity="one">1 s</item>
+        <item quantity="other">%d s</item>
     </plurals>
 </resources>
diff --git a/tweet-ui/src/main/res/values-ca/strings.xml b/tweet-ui/src/main/res/values-ca/strings.xml
new file mode 100644
index 00000000..69229e5e
--- /dev/null
+++ b/tweet-ui/src/main/res/values-ca/strings.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">M\'agrada el tuit</string>
+    <string name="tw__liked_tweet">Desfés l\'agradament</string>
+    <string name="tw__loading_tweet">S\'està carregant el tuit</string>
+    <string name="tw__pause">atura temporalment</string>
+    <string name="tw__play">reprodueix</string>
+    <string name="tw__replay">torna a reproduir</string>
+    <string name="tw__retweeted_by_format">Retuitat per %1$s</string>
+    <string name="tw__share_content_format">Dóna un cop d\'ull al tuit de \@%1$s: https://twitter.com/%1$s/status/%2$s</string>
+    <string name="tw__share_subject_format">Tuit de %1$s (\@%2$s)</string>
+    <string name="tw__share_tweet">Comparteix el tuit</string>
+    <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tuit amb contingut multimèdia</string>
+</resources>
diff --git a/tweet-ui/src/main/res/values-cs/strings.xml b/tweet-ui/src/main/res/values-cs/strings.xml
index ee943bbf..d9f75a4e 100644
--- a/tweet-ui/src/main/res/values-cs/strings.xml
+++ b/tweet-ui/src/main/res/values-cs/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet od uživatele %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Sdílet tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweetnout média</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-da/strings.xml b/tweet-ui/src/main/res/values-da/strings.xml
index 474e69a1..d59d8fd6 100644
--- a/tweet-ui/src/main/res/values-da/strings.xml
+++ b/tweet-ui/src/main/res/values-da/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet fra %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Del tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweet-medie</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-de/strings.xml b/tweet-ui/src/main/res/values-de/strings.xml
index d7750181..bde0ec08 100644
--- a/tweet-ui/src/main/res/values-de/strings.xml
+++ b/tweet-ui/src/main/res/values-de/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet von %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Tweet teilen</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Medien twittern</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-el/strings.xml b/tweet-ui/src/main/res/values-el/strings.xml
index 22cc0d79..1aedcb6d 100644
--- a/tweet-ui/src/main/res/values-el/strings.xml
+++ b/tweet-ui/src/main/res/values-el/strings.xml
@@ -18,13 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">Μου αρέσει αυτό το Tweet</string>
+    <string name="tw__liked_tweet">Αναίρεση επιλογής \"Μου αρέσει\"</string>
     <string name="tw__loading_tweet">Φόρτωση Tweet</string>
     <string name="tw__pause">παύση</string>
     <string name="tw__play">αναπαραγωγή</string>
-    <string name="tw__replay">επανάληψη</string>
+    <string name="tw__replay">εκ νέου αναπαραγωγή</string>
     <string name="tw__retweeted_by_format">Έγινε Retweet από το χρήστη %1$s</string>
     <string name="tw__share_content_format">Δείτε το Tweet του χρήστη  \@%1$s https://twitter.com/%1$s/status/%2$s</string>
     <string name="tw__share_subject_format">Tweet από το χρήστη %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Κοινοποίηση Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Γράψτε ένα Tweet με πολυμέσο</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-en-rGB/strings.xml b/tweet-ui/src/main/res/values-en-rGB/strings.xml
index 0f8e3615..b87dc1fa 100644
--- a/tweet-ui/src/main/res/values-en-rGB/strings.xml
+++ b/tweet-ui/src/main/res/values-en-rGB/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet from %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Share Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweet Media</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-en-rSS/strings.xml b/tweet-ui/src/main/res/values-en-rSS/strings.xml
index f5429f18..9c6254e5 100644
--- a/tweet-ui/src/main/res/values-en-rSS/strings.xml
+++ b/tweet-ui/src/main/res/values-en-rSS/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">[[60978]] Tweet from %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">[[60976]] Share Tweet</string>
     <string name="tw__tweet_content_description">[[60975]] %1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">[[156357]] Tweet Media</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-en-rXX/strings.xml b/tweet-ui/src/main/res/values-en-rXX/strings.xml
deleted file mode 100644
index aef83cf5..00000000
--- a/tweet-ui/src/main/res/values-en-rXX/strings.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<!--
-  ~ Copyright (C) 2015 Twitter, Inc.
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  ~
-  -->
-
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="tw__like_tweet">[Lïíkéê Twéêéêt]</string>
-    <string name="tw__liked_tweet">[Undöø Lïíkéê]</string>
-    <string name="tw__loading_tweet">[Löøåädïíng Twéêéêt]</string>
-    <string name="tw__pause">[påäüséê]</string>
-    <string name="tw__play">[plåäy]</string>
-    <string name="tw__replay">[réêplåäy]</string>
-    <string name="tw__retweeted_by_format">[Réêtwéêéêtéêd by %1$s]</string>
-    <string name="tw__share_content_format">[Chéêck öøüt \@%1$s\'s Twéêéêt: https://twïíttéêr.cöøm/%1$s/ståätüs/%2$s]</string>
-    <string name="tw__share_subject_format">[Twéêéêt fröøm %1$s (\@%2$s)]</string>
-    <string name="tw__share_tweet">[Shåäréê Twéêéêt]</string>
-    <string name="tw__tweet_content_description">[%1$s. %2$s. %3$s.]</string>
-</resources>
diff --git a/tweet-ui/src/main/res/values-es/strings.xml b/tweet-ui/src/main/res/values-es/strings.xml
index e15f6b50..cca0a0de 100644
--- a/tweet-ui/src/main/res/values-es/strings.xml
+++ b/tweet-ui/src/main/res/values-es/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet de %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Compartir Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweets con contenido multimedia</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-fa/strings.xml b/tweet-ui/src/main/res/values-fa/strings.xml
index 189018d1..a92ead09 100644
--- a/tweet-ui/src/main/res/values-fa/strings.xml
+++ b/tweet-ui/src/main/res/values-fa/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">توییت‌ از %1$s (‎\@%2$s)</string>
     <string name="tw__share_tweet">به اشتراک‌گذاری توییت</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">محتوای چند رسانه‌ای توییت</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-fi/strings.xml b/tweet-ui/src/main/res/values-fi/strings.xml
index ae0462f1..3bd30782 100644
--- a/tweet-ui/src/main/res/values-fi/strings.xml
+++ b/tweet-ui/src/main/res/values-fi/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Twiitti käyttäjältä %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Jaa twiitti</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Twiitin mediasisältö</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-fr/strings.xml b/tweet-ui/src/main/res/values-fr/strings.xml
index 3c47acf2..ff3f70e9 100644
--- a/tweet-ui/src/main/res/values-fr/strings.xml
+++ b/tweet-ui/src/main/res/values-fr/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet de %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Partager le Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Média du Tweet</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-gu/plurals.xml b/tweet-ui/src/main/res/values-gu/plurals.xml
index f6e5bed5..b47e70aa 100644
--- a/tweet-ui/src/main/res/values-gu/plurals.xml
+++ b/tweet-ui/src/main/res/values-gu/plurals.xml
@@ -17,4 +17,17 @@
   ~
   -->
 
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2"/>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <plurals name="tw__time_hours">
+        <item quantity="one">1h</item>
+        <item quantity="other">%dh</item>
+    </plurals>
+    <plurals name="tw__time_mins">
+        <item quantity="one">1m</item>
+        <item quantity="other">%dm</item>
+    </plurals>
+    <plurals name="tw__time_secs">
+        <item quantity="one">1s</item>
+        <item quantity="other">%ds</item>
+    </plurals>
+</resources>
diff --git a/tweet-ui/src/main/res/values-gu/strings.xml b/tweet-ui/src/main/res/values-gu/strings.xml
index 7400b417..2e725d17 100644
--- a/tweet-ui/src/main/res/values-gu/strings.xml
+++ b/tweet-ui/src/main/res/values-gu/strings.xml
@@ -18,7 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">ટ્વીટ લાઈક કરો</string>
+    <string name="tw__liked_tweet">લાઈક પૂર્વવત કરો</string>
+    <string name="tw__loading_tweet">ટ્વીટ લોડ થઈ રહી છે</string>
     <string name="tw__pause">અટકાવો</string>
     <string name="tw__play">પ્લે કરો</string>
     <string name="tw__replay">પુન પ્લે કરો</string>
+    <string name="tw__retweeted_by_format">%1$s દ્વારા પુનટ્વીટ કરાઈ</string>
+    <string name="tw__share_content_format">\@%1$s\ની ટ્વીટ તપાસો: https://twitter.com/%1$s/status/%2$s</string>
+    <string name="tw__share_subject_format">%1$s (\@%2$s) તરફથી ટ્વીટ</string>
+    <string name="tw__share_tweet">ટ્વીટ શેર કરો</string>
+    <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">ટ્વીટ મીડિયા</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-hi/strings.xml b/tweet-ui/src/main/res/values-hi/strings.xml
index c78e8e7b..4744f289 100644
--- a/tweet-ui/src/main/res/values-hi/strings.xml
+++ b/tweet-ui/src/main/res/values-hi/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">%1$s (\@%2$s) से ट्वीट</string>
     <string name="tw__share_tweet">ट्वीट साझा करें</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">ट्वीट मीडिया</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-hr/plurals.xml b/tweet-ui/src/main/res/values-hr/plurals.xml
index f6e5bed5..27ed8331 100644
--- a/tweet-ui/src/main/res/values-hr/plurals.xml
+++ b/tweet-ui/src/main/res/values-hr/plurals.xml
@@ -17,4 +17,17 @@
   ~
   -->
 
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2"/>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <plurals name="tw__time_hours">
+        <item quantity="one">1 h</item>
+        <item quantity="other">%d h</item>
+    </plurals>
+    <plurals name="tw__time_mins">
+        <item quantity="one">1 min</item>
+        <item quantity="other">%d min</item>
+    </plurals>
+    <plurals name="tw__time_secs">
+        <item quantity="one">1 s</item>
+        <item quantity="other">%d s</item>
+    </plurals>
+</resources>
diff --git a/tweet-ui/src/main/res/values-hr/strings.xml b/tweet-ui/src/main/res/values-hr/strings.xml
index ff9a04ad..cf6033c6 100644
--- a/tweet-ui/src/main/res/values-hr/strings.xml
+++ b/tweet-ui/src/main/res/values-hr/strings.xml
@@ -18,7 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">Označi Tweet oznakom \"sviđa mi se\"</string>
+    <string name="tw__liked_tweet">Poništi oznaku \"sviđa mi se\"</string>
+    <string name="tw__loading_tweet">Učitavanje tweeta</string>
     <string name="tw__pause">pauziraj</string>
     <string name="tw__play">reproduciraj</string>
     <string name="tw__replay">ponovno reproduciraj</string>
+    <string name="tw__retweeted_by_format">%1$s je proslijedio/la Tweet</string>
+    <string name="tw__share_content_format">Pogledajte Tweet korisnika/ce \@%1$s: https://twitter.com/%1$s/status/%2$s</string>
+    <string name="tw__share_subject_format">Tweet korisnika/ce %1$s (\@%2$s)</string>
+    <string name="tw__share_tweet">Podijeli Tweet</string>
+    <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Medijski sadržaji u tweetu</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-hu/strings.xml b/tweet-ui/src/main/res/values-hu/strings.xml
index 65d5d44a..ff882a10 100644
--- a/tweet-ui/src/main/res/values-hu/strings.xml
+++ b/tweet-ui/src/main/res/values-hu/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet %1$s (\@%2$s) felhasználótól</string>
     <string name="tw__share_tweet">Tweet megosztása</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Média tweetelése</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-in/strings.xml b/tweet-ui/src/main/res/values-in/strings.xml
index 8d45115c..99bc91d0 100644
--- a/tweet-ui/src/main/res/values-in/strings.xml
+++ b/tweet-ui/src/main/res/values-in/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet dari %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Sebarkan Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Media Tweet</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-it/strings.xml b/tweet-ui/src/main/res/values-it/strings.xml
index 55e5f312..a0c7dc43 100644
--- a/tweet-ui/src/main/res/values-it/strings.xml
+++ b/tweet-ui/src/main/res/values-it/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet da %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Condividi Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Contenuti dei Tweet</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-iw/strings.xml b/tweet-ui/src/main/res/values-iw/strings.xml
index 798cd1d6..b6fb23e4 100644
--- a/tweet-ui/src/main/res/values-iw/strings.xml
+++ b/tweet-ui/src/main/res/values-iw/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">ציוץ של %1$s‏ (‎\@%2$s)</string>
     <string name="tw__share_tweet">שתף ציוץ</string>
     <string name="tw__tweet_content_description">%1$s‏. %2$s‏. %3$s</string>
+    <string name="tw__tweet_media">המדיה של הציוץ</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-ja/strings.xml b/tweet-ui/src/main/res/values-ja/strings.xml
index ae5dad5a..e77a9d1f 100644
--- a/tweet-ui/src/main/res/values-ja/strings.xml
+++ b/tweet-ui/src/main/res/values-ja/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">%1$s (\@%2$s)さんからのツイート</string>
     <string name="tw__share_tweet">ツイートを共有</string>
     <string name="tw__tweet_content_description">%1$s、 %2$s、 %3$s。</string>
+    <string name="tw__tweet_media">画像/動画を投稿</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-kn/plurals.xml b/tweet-ui/src/main/res/values-kn/plurals.xml
index f6e5bed5..8413611d 100644
--- a/tweet-ui/src/main/res/values-kn/plurals.xml
+++ b/tweet-ui/src/main/res/values-kn/plurals.xml
@@ -17,4 +17,17 @@
   ~
   -->
 
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2"/>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <plurals name="tw__time_hours">
+        <item quantity="one">1ಗಂ</item>
+        <item quantity="other">%dಗಂ</item>
+    </plurals>
+    <plurals name="tw__time_mins">
+        <item quantity="one">1ನಿ</item>
+        <item quantity="other">%dನಿ</item>
+    </plurals>
+    <plurals name="tw__time_secs">
+        <item quantity="one">1ಗಳು</item>
+        <item quantity="other">%dಗಳು</item>
+    </plurals>
+</resources>
diff --git a/tweet-ui/src/main/res/values-kn/strings.xml b/tweet-ui/src/main/res/values-kn/strings.xml
index d12fde0b..3fcdc84d 100644
--- a/tweet-ui/src/main/res/values-kn/strings.xml
+++ b/tweet-ui/src/main/res/values-kn/strings.xml
@@ -18,7 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">ಟ್ವೀಟ್ ಇಷ್ಟಪಡಿ</string>
+    <string name="tw__liked_tweet">ಇಷ್ಟಪಡಿ ರದ್ದುಮಾಡು</string>
+    <string name="tw__loading_tweet">ಟ್ವೀಟ್ ಲೋಡ್ ಮಾಡಲಾಗುತ್ತಿದೆ</string>
     <string name="tw__pause">ವಿರಾಮ</string>
     <string name="tw__play">ಪ್ಲೇ</string>
     <string name="tw__replay">ಮರುಪ್ಲೇ</string>
+    <string name="tw__retweeted_by_format">%1$s ಇಂದ ಮರುಟ್ವೀಟಿಸಲ್ಪಟ್ಟಿದೆ</string>
+    <string name="tw__share_content_format">ಪರಿಶೀಲಿಸಿ \@%1$s\'s ಟ್ವೀಟ್: https://twitter.com/%1$s/ಸ್ಥಿತಿ/%2$s</string>
+    <string name="tw__share_subject_format">%1$s (\@%2$s) ಇಂದ ಟ್ವೀಟ್</string>
+    <string name="tw__share_tweet">ಟ್ವೀಟ್ ಹಂಚಿಕೊಳ್ಳಿ</string>
+    <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">ಟ್ವೀಟ್ ಮಾಧ್ಯಮ</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-ko/strings.xml b/tweet-ui/src/main/res/values-ko/strings.xml
index 651b2d85..caaa29c0 100644
--- a/tweet-ui/src/main/res/values-ko/strings.xml
+++ b/tweet-ui/src/main/res/values-ko/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">%1$s (\@%2$s) 님의 트윗</string>
     <string name="tw__share_tweet">트윗 공유하기</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">트윗 미디어</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-mr/plurals.xml b/tweet-ui/src/main/res/values-mr/plurals.xml
index f6e5bed5..c9dbf21f 100644
--- a/tweet-ui/src/main/res/values-mr/plurals.xml
+++ b/tweet-ui/src/main/res/values-mr/plurals.xml
@@ -17,4 +17,17 @@
   ~
   -->
 
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2"/>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <plurals name="tw__time_hours">
+        <item quantity="one">1h</item>
+        <item quantity="other">%dh</item>
+    </plurals>
+    <plurals name="tw__time_mins">
+        <item quantity="one">1 m</item>
+        <item quantity="other">%dm</item>
+    </plurals>
+    <plurals name="tw__time_secs">
+        <item quantity="one">1 सेकंद</item>
+        <item quantity="other">%ds</item>
+    </plurals>
+</resources>
diff --git a/tweet-ui/src/main/res/values-mr/strings.xml b/tweet-ui/src/main/res/values-mr/strings.xml
index a8c6929c..bedcf024 100644
--- a/tweet-ui/src/main/res/values-mr/strings.xml
+++ b/tweet-ui/src/main/res/values-mr/strings.xml
@@ -18,7 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">ट्विट पसंत करा</string>
+    <string name="tw__liked_tweet">पसंती पूर्ववत करा</string>
+    <string name="tw__loading_tweet">ट्विट लोड करीत आहे</string>
     <string name="tw__pause">पॉज</string>
     <string name="tw__play">प्ले</string>
     <string name="tw__replay">रिप्ले</string>
+    <string name="tw__retweeted_by_format">%1$s द्वारे पुन्हा ट्विट केलेले</string>
+    <string name="tw__share_content_format">\@%1$s\ चे ट्विट पाहा: https://twitter.com/%1$s/स्थिती/%2$s</string>
+    <string name="tw__share_subject_format">%1$s (\@%2$s) कडील ट्विट</string>
+    <string name="tw__share_tweet">ट्विट शेअर करा</string>
+    <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">ट्विट मिडिया</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-ms/strings.xml b/tweet-ui/src/main/res/values-ms/strings.xml
index d61d6e91..ac9e6285 100644
--- a/tweet-ui/src/main/res/values-ms/strings.xml
+++ b/tweet-ui/src/main/res/values-ms/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet daripada %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Kongsi Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Media Tweet</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-nb/strings.xml b/tweet-ui/src/main/res/values-nb/strings.xml
index a57736ad..49392696 100644
--- a/tweet-ui/src/main/res/values-nb/strings.xml
+++ b/tweet-ui/src/main/res/values-nb/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet fra %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Del tweeten</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweet-medium</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-nl/strings.xml b/tweet-ui/src/main/res/values-nl/strings.xml
index 8623ab33..0479a749 100644
--- a/tweet-ui/src/main/res/values-nl/strings.xml
+++ b/tweet-ui/src/main/res/values-nl/strings.xml
@@ -20,8 +20,8 @@
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="tw__like_tweet">Tweet leuk vinden</string>
     <string name="tw__liked_tweet">Niet meer leuk</string>
-    <string name="tw__loading_tweet">Tweet laden</string>
-    <string name="tw__pause">pauze</string>
+    <string name="tw__loading_tweet">Tweet laden…</string>
+    <string name="tw__pause">pauzeren</string>
     <string name="tw__play">afspelen</string>
     <string name="tw__replay">opnieuw afspelen</string>
     <string name="tw__retweeted_by_format">Geretweet door %1$s</string>
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet van %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Tweet delen</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweetmedia</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-pl/strings.xml b/tweet-ui/src/main/res/values-pl/strings.xml
index d6104c2e..0876770d 100644
--- a/tweet-ui/src/main/res/values-pl/strings.xml
+++ b/tweet-ui/src/main/res/values-pl/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet od użytkownika %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Udostępnij tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Multimedia z Tweeta</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-pt/strings.xml b/tweet-ui/src/main/res/values-pt/strings.xml
index 5c6c5a5d..2bce9547 100644
--- a/tweet-ui/src/main/res/values-pt/strings.xml
+++ b/tweet-ui/src/main/res/values-pt/strings.xml
@@ -19,7 +19,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="tw__like_tweet">Curtir Tweet</string>
-    <string name="tw__liked_tweet">Descurtir</string>
+    <string name="tw__liked_tweet">Descurtir.</string>
     <string name="tw__loading_tweet">Carregando Tweet</string>
     <string name="tw__pause">pausar</string>
     <string name="tw__play">reproduzir</string>
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet de %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Compartilhar Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Mídia do Tweet</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-ro/strings.xml b/tweet-ui/src/main/res/values-ro/strings.xml
index 88e51430..84fb5894 100644
--- a/tweet-ui/src/main/res/values-ro/strings.xml
+++ b/tweet-ui/src/main/res/values-ro/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet de la %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Distribuie Tweetul</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweet cu conținut media</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-ru/strings.xml b/tweet-ui/src/main/res/values-ru/strings.xml
index 0144dfa8..9c33d8c7 100644
--- a/tweet-ui/src/main/res/values-ru/strings.xml
+++ b/tweet-ui/src/main/res/values-ru/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Твит от %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Поделиться твитом</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Медиафайл в твите</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-sk/plurals.xml b/tweet-ui/src/main/res/values-sk/plurals.xml
index b47e70aa..27ed8331 100644
--- a/tweet-ui/src/main/res/values-sk/plurals.xml
+++ b/tweet-ui/src/main/res/values-sk/plurals.xml
@@ -19,15 +19,15 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <plurals name="tw__time_hours">
-        <item quantity="one">1h</item>
-        <item quantity="other">%dh</item>
+        <item quantity="one">1 h</item>
+        <item quantity="other">%d h</item>
     </plurals>
     <plurals name="tw__time_mins">
-        <item quantity="one">1m</item>
-        <item quantity="other">%dm</item>
+        <item quantity="one">1 min</item>
+        <item quantity="other">%d min</item>
     </plurals>
     <plurals name="tw__time_secs">
-        <item quantity="one">1s</item>
-        <item quantity="other">%ds</item>
+        <item quantity="one">1 s</item>
+        <item quantity="other">%d s</item>
     </plurals>
 </resources>
diff --git a/tweet-ui/src/main/res/values-sk/strings.xml b/tweet-ui/src/main/res/values-sk/strings.xml
index 4c9e8bee..c799bb54 100644
--- a/tweet-ui/src/main/res/values-sk/strings.xml
+++ b/tweet-ui/src/main/res/values-sk/strings.xml
@@ -18,12 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="tw__like_tweet">Obľúbiť Tweet</string>
-    <string name="tw__loading_tweet">Tweet sa načítava</string>
+    <string name="tw__like_tweet">Obľúbiť si Tweet</string>
+    <string name="tw__liked_tweet">Zrušiť označenie Páči sa mi to</string>
+    <string name="tw__loading_tweet">Načítava sa Tweet</string>
     <string name="tw__pause">pozastaviť</string>
     <string name="tw__play">prehrať</string>
     <string name="tw__replay">prehrať znova</string>
     <string name="tw__retweeted_by_format">Retweetnuté používateľom %1$s</string>
+    <string name="tw__share_content_format">Pozrite si Tweet od používateľa \@%1$s\: https://twitter.com/%1$s/stav/%2$s</string>
+    <string name="tw__share_subject_format">Tweet od používateľa %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Zdieľať Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweetnuť médiá</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-sr/strings.xml b/tweet-ui/src/main/res/values-sr/strings.xml
index f43a6204..abd68108 100644
--- a/tweet-ui/src/main/res/values-sr/strings.xml
+++ b/tweet-ui/src/main/res/values-sr/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Твит од %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Подели твит</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Mедиј из твита</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-sv/strings.xml b/tweet-ui/src/main/res/values-sv/strings.xml
index 249fc5db..097306a5 100644
--- a/tweet-ui/src/main/res/values-sv/strings.xml
+++ b/tweet-ui/src/main/res/values-sv/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet från %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Dela tweeten</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweetmedia</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-ta/plurals.xml b/tweet-ui/src/main/res/values-ta/plurals.xml
index f6e5bed5..fd6a860b 100644
--- a/tweet-ui/src/main/res/values-ta/plurals.xml
+++ b/tweet-ui/src/main/res/values-ta/plurals.xml
@@ -17,4 +17,17 @@
   ~
   -->
 
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2"/>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <plurals name="tw__time_hours">
+        <item quantity="one">1மணி</item>
+        <item quantity="other">%dமணி</item>
+    </plurals>
+    <plurals name="tw__time_mins">
+        <item quantity="one">1நி</item>
+        <item quantity="other">%dநி</item>
+    </plurals>
+    <plurals name="tw__time_secs">
+        <item quantity="one">1நொ</item>
+        <item quantity="other">%dநொ</item>
+    </plurals>
+</resources>
diff --git a/tweet-ui/src/main/res/values-ta/strings.xml b/tweet-ui/src/main/res/values-ta/strings.xml
index f085336f..d2b314f0 100644
--- a/tweet-ui/src/main/res/values-ta/strings.xml
+++ b/tweet-ui/src/main/res/values-ta/strings.xml
@@ -18,7 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">கீச்சை விரும்பு</string>
+    <string name="tw__liked_tweet">விரும்பியதை செயல்தவிர்</string>
+    <string name="tw__loading_tweet">ட்விட்டை ஏற்றுகிறது</string>
     <string name="tw__pause">இடைநிறுத்து</string>
     <string name="tw__play">இயக்கு</string>
     <string name="tw__replay">மீண்டும் இயக்கு</string>
+    <string name="tw__retweeted_by_format">%1$s -ஆல் மறுட்விட் செய்யப்பட்டது</string>
+    <string name="tw__share_content_format">\@%1$s\ -இன் ட்விட்டைக் காணுங்கள்: https://twitter.com/%1$s/status/%2$s</string>
+    <string name="tw__share_subject_format">%1$s (\@%2$s) -இடமிருந்து ட்விட்</string>
+    <string name="tw__share_tweet">ட்விட்டைப் பகிர்</string>
+    <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">கீச்சு ஊடகம்</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-th/strings.xml b/tweet-ui/src/main/res/values-th/strings.xml
index 5ea9ab5c..016b2c2f 100644
--- a/tweet-ui/src/main/res/values-th/strings.xml
+++ b/tweet-ui/src/main/res/values-th/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">ทวีตจาก %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">แบ่งปันทวีต</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">ทวีตสื่อ</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-tl/strings.xml b/tweet-ui/src/main/res/values-tl/strings.xml
index e7a909ff..274e82a6 100644
--- a/tweet-ui/src/main/res/values-tl/strings.xml
+++ b/tweet-ui/src/main/res/values-tl/strings.xml
@@ -19,7 +19,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="tw__like_tweet">Gustuhin ang Tweet</string>
-    <string name="tw__liked_tweet">I-undo ang Nagustuhan</string>
+    <string name="tw__liked_tweet">I-undo ang Gusto</string>
     <string name="tw__loading_tweet">Naglo-load ng Tweet</string>
     <string name="tw__pause">i-pause</string>
     <string name="tw__play">i-play</string>
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet mula kay %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Ibahagi ang Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Media ng Tweet</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-tr/strings.xml b/tweet-ui/src/main/res/values-tr/strings.xml
index 80deec7e..1c04c18d 100644
--- a/tweet-ui/src/main/res/values-tr/strings.xml
+++ b/tweet-ui/src/main/res/values-tr/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet gönderen: %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Tweet Paylaş</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweet Medyası</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-uk/strings.xml b/tweet-ui/src/main/res/values-uk/strings.xml
index c3832748..9376d6c8 100644
--- a/tweet-ui/src/main/res/values-uk/strings.xml
+++ b/tweet-ui/src/main/res/values-uk/strings.xml
@@ -25,8 +25,9 @@
     <string name="tw__play">відтворити</string>
     <string name="tw__replay">повторити</string>
     <string name="tw__retweeted_by_format">Ретвітнуто користувачем(кою) %1$s</string>
-    <string name="tw__share_content_format">Перегляньте твіт користувача(ки) \@%1$s: https://twitter.com/%1$s/status/%2$s</string>
-    <string name="tw__share_subject_format">Твіт від користувача(ки) %1$s (\@%2$s)</string>
+    <string name="tw__share_content_format">Подивіться-но твіт від \@%1$s: https://twitter.com/%1$s/status/%2$s</string>
+    <string name="tw__share_subject_format">Твіт від %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Поділитися твітом</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Медіафайли твітів</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-ur/strings.xml b/tweet-ui/src/main/res/values-ur/strings.xml
index a1b2d3e2..5599e18f 100644
--- a/tweet-ui/src/main/res/values-ur/strings.xml
+++ b/tweet-ui/src/main/res/values-ur/strings.xml
@@ -18,10 +18,16 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__like_tweet">ٹویٹ پسند کریں</string>
+    <string name="tw__liked_tweet">پسند کو منسوخ کریں</string>
     <string name="tw__loading_tweet">ٹویٹ لوڈ ہو رہی ہے</string>
+    <string name="tw__pause">روکیں</string>
+    <string name="tw__play">چلائیں</string>
+    <string name="tw__replay">دوبارہ چلائیں</string>
     <string name="tw__retweeted_by_format">%1$s کی ریٹویٹ کردہ</string>
     <string name="tw__share_content_format">‎\@%1$s کی ٹویٹ دیکھیں: https://twitter.com/%1$s/status/%2$s</string>
     <string name="tw__share_subject_format">%1$s (‎\@%2$s) کی ٹویٹ</string>
     <string name="tw__share_tweet">ٹویٹ شیئر کریں</string>
     <string name="tw__tweet_content_description">%1$s۔ %2$s۔ %3$s۔</string>
+    <string name="tw__tweet_media">میڈیا ٹویٹ کریں</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-v21/tw_tweet_text_styles.xml b/tweet-ui/src/main/res/values-v21/tw_tweet_text_styles.xml
index 9e5379f0..b0c14d29 100644
--- a/tweet-ui/src/main/res/values-v21/tw_tweet_text_styles.xml
+++ b/tweet-ui/src/main/res/values-v21/tw_tweet_text_styles.xml
@@ -20,7 +20,6 @@
 
     <style name="tw__TweetFullName" parent="tw__TweetFullNameBase">
         <item name="android:fontFamily">sans-serif-medium</item>
-        <item name="android:importantForAccessibility">no</item>
     </style>
 
 </resources>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/values-vi/strings.xml b/tweet-ui/src/main/res/values-vi/strings.xml
index 8c296174..40d3cf0f 100644
--- a/tweet-ui/src/main/res/values-vi/strings.xml
+++ b/tweet-ui/src/main/res/values-vi/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">Tweet từ %1$s (\@%2$s)</string>
     <string name="tw__share_tweet">Chia sẻ Tweet</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">Tweet Phương tiện</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-zh-rCN/strings.xml b/tweet-ui/src/main/res/values-zh-rCN/strings.xml
index 960511de..f3ff2816 100644
--- a/tweet-ui/src/main/res/values-zh-rCN/strings.xml
+++ b/tweet-ui/src/main/res/values-zh-rCN/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">来自 %1$s 的推文 (\@%2$s)</string>
     <string name="tw__share_tweet">分享推文</string>
     <string name="tw__tweet_content_description">%1$s. %2$s. %3$s.</string>
+    <string name="tw__tweet_media">推文媒体</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values-zh-rTW/strings.xml b/tweet-ui/src/main/res/values-zh-rTW/strings.xml
index 27c04ace..3d90f9ad 100644
--- a/tweet-ui/src/main/res/values-zh-rTW/strings.xml
+++ b/tweet-ui/src/main/res/values-zh-rTW/strings.xml
@@ -29,4 +29,5 @@
     <string name="tw__share_subject_format">來自 %1$s (\@%2$s) 的推文</string>
     <string name="tw__share_tweet">分享推文</string>
     <string name="tw__tweet_content_description">%1$s。%2$s。%3$s。</string>
+    <string name="tw__tweet_media">推文媒體</string>
 </resources>
diff --git a/tweet-ui/src/main/res/values/attrs.xml b/tweet-ui/src/main/res/values/attrs.xml
index f8134255..1c20b730 100644
--- a/tweet-ui/src/main/res/values/attrs.xml
+++ b/tweet-ui/src/main/res/values/attrs.xml
@@ -22,6 +22,7 @@
         <attr name="tw__container_bg_color" format="color"/>
         <attr name="tw__primary_text_color" format="color"/>
         <attr name="tw__action_color" format="color"/>
+        <attr name="tw__action_highlight_color" format="color"/>
         <attr name="tw__tweet_actions_enabled" format="boolean" />
     </declare-styleable>
 
@@ -31,4 +32,12 @@
         <attr name="contentDescriptionOff" format="string"/>
         <attr name="toggleOnClick" format="boolean"/>
     </declare-styleable>
+
+    <declare-styleable name="AspectRatioFrameLayout">
+        <attr name="tw__frame_layout_aspect_ratio" format="float"/>
+        <attr name="tw__frame_layout_dimension_to_adjust" format="enum">
+            <enum name="height" value="0"/>
+            <enum name="width" value="1"/>
+        </attr>
+    </declare-styleable>
 </resources>
diff --git a/tweet-ui/src/main/res/values/colors.xml b/tweet-ui/src/main/res/values/colors.xml
index 1647fd7f..3090fb3f 100644
--- a/tweet-ui/src/main/res/values/colors.xml
+++ b/tweet-ui/src/main/res/values/colors.xml
@@ -18,7 +18,8 @@
 <!-- see go/colors -->
 <resources>
     <color name="tw__tweet_action_color">#55acee</color>
-    <color name="tw__tweet_container_border">#1a000000</color>
+    <color name="tw__tweet_action_light_highlight_color">#ebeef0</color>
+    <color name="tw__tweet_action_dark_highlight_color">#667580</color>
 
     <color name="tw__tweet_light_container_bg_color">#ffffff</color>
     <color name="tw__tweet_light_primary_text_color">#292f33</color>
@@ -26,8 +27,9 @@
     <color name="tw__tweet_dark_container_bg_color">#d9000000</color>
     <color name="tw__tweet_dark_primary_text_color">#e1ffffff</color>
 
-    <color name="tw__tweet_media_preview_bg_color">#e5e5e5</color>
-
     <color name="tw__seekbar_thumb_outer_color">#4dffffff</color>
     <color name="tw__seekbar_thumb_inner_color">#ffffffff</color>
+
+    <color name="tw__cta_border_color">@android:color/white</color>
+    <color name="tw__cta_text_color">@android:color/white</color>
 </resources>
diff --git a/tweet-ui/src/main/res/values/dimens.xml b/tweet-ui/src/main/res/values/dimens.xml
index b59e2625..f0ec258f 100644
--- a/tweet-ui/src/main/res/values/dimens.xml
+++ b/tweet-ui/src/main/res/values/dimens.xml
@@ -21,8 +21,6 @@
     <!--TweetView-->
 
     <!--Container-->
-    <dimen name="tw__tweet_container_width">1dp</dimen>
-    <dimen name="tw__tweet_container_padding_top">0dp</dimen>
     <dimen name="tw__tweet_container_bottom_separator">18dp</dimen>
     <!--Retweeted By line-->
     <dimen name="tw__tweet_retweeted_by_margin_top">10dp</dimen>
@@ -39,9 +37,9 @@
     <dimen name="tw__tweet_logo_margin_top">18dp</dimen>
     <dimen name="tw__tweet_logo_margin_right">20dp</dimen>
     <!--Tweet Author Attribution-->
+    <dimen name="tw__tweet_full_name_margin_right">36dp</dimen>
     <dimen name="tw__tweet_full_name_margin_top">15dp</dimen>
-    <dimen name="tw__tweet_verified_margin_bottom">3dp</dimen>
-    <dimen name="tw__tweet_verified_check_padding_left">3dp</dimen>
+    <dimen name="tw__tweet_full_name_drawable_padding">3dp</dimen>
     <dimen name="tw__tweet_screen_name_margin_top">-4dp</dimen>
     <dimen name="tw__tweet_screen_name_margin_bottom">1dp</dimen>
     <dimen name="tw__tweet_timestamp_margin_top">-4dp</dimen>
@@ -59,12 +57,22 @@
     <dimen name="tw__tweet_action_share_padding">14dp</dimen>
 
     <!--Tweet Media-->
-    <item name="tw__tweet_media_aspect_ratio" format="float" type="dimen">1.777777</item>
     <dimen name="tw__tweet_media_badge_margin">4dp</dimen>
-    <dimen name="tw__gif_badge_padding">4dp</dimen>
+    <dimen name="tw__badge_padding">4dp</dimen>
+    <dimen name="tw__media_view_divider_size">1dp</dimen>
+    <dimen name="tw__media_view_radius">5dp</dimen>
 
-    <!--CompactTweetView-->
+    <!-- CTA -->
+    <dimen name="tw__cta_margin_top">12dp</dimen>
+    <dimen name="tw__cta_padding">8dp</dimen>
+    <dimen name="tw__cta_border_size">1dp</dimen>
+    <dimen name="tw__cta_radius">14dp</dimen>
+
+    <!-- Quote Tweet container -->
+    <dimen name="tw__tweet_quote_tweet_margin_horizontal">20dp</dimen>
+    <dimen name="tw__tweet_quote_tweet_margin_top">8dp</dimen>
 
+    <!--CompactTweetView-->
     <!--Container-->
     <dimen name="tw__compact_tweet_container_padding_top">10.5dp</dimen>
     <dimen name="tw__compact_tweet_container_bottom_separator">13dp</dimen>
@@ -82,6 +90,7 @@
     <dimen name="tw__compact_tweet_logo_margin_top">5dp</dimen>
     <dimen name="tw__compact_tweet_logo_margin_right">12dp</dimen>
     <!--Tweet Author Attribution-->
+    <dimen name="tw__compact_tweet_full_name_margin_right">0dp</dimen>
     <dimen name="tw__compact_tweet_attribution_line_margin_right">36dp</dimen>
     <dimen name="tw__compact_tweet_full_name_margin_top">0dp</dimen>
     <dimen name="tw__compact_tweet_screen_name_layout_width">0dp</dimen>
@@ -99,25 +108,32 @@
     <dimen name="tw__compact_tweet_text_margin_right">12dp</dimen>
     <!--Tweet actions-->
     <dimen name="tw__compact_tweet_action_bar_offset_left">-12dp</dimen>
+    <!-- Quote Tweet container -->
+    <dimen name="tw__compact_tweet_quote_tweet_margin_left">0dp</dimen>
+    <dimen name="tw__compact_tweet_quote_tweet_margin_right">12dp</dimen>
 
-    <!-- Text sizes -->
-    <!--density-independent(micro 10dp, small 12dp, medium 14dp, large 16dp)-->
-    <dimen name="tw__text_size_large">16dp</dimen>
-    <dimen name="tw__text_size_medium">14dp</dimen>
-    <dimen name="tw__text_size_small">12dp</dimen>
+    <!-- Quote Tweet -->
+    <dimen name="tw__quote_tweet_media_margin_horizontal">1dp</dimen>
+    <dimen name="tw__quote_tweet_media_margin_bottom">1dp</dimen>
+    <dimen name="tw__quote_tweet_text_margin_horizontal">8dp</dimen>
+    <dimen name="tw__quote_tweet_text_margin_bottom">8dp</dimen>
+    <dimen name="tw__quote_tweet_attribution_text_margin_horizontal">8dp</dimen>
+    <dimen name="tw__quote_tweet_attribution_text_margin_top">7dp</dimen>
+    <dimen name="tw__quote_tweet_border_width">1dp</dimen>
 
-    <!-- login -->
-    <dimen name="tw__login_btn_radius">5dp</dimen>
-    <dimen name="tw__login_btn_text_size">14sp</dimen>
-    <dimen name="tw__login_btn_height">32dp</dimen>
-    <dimen name="tw__login_btn_drawable_padding">4dp</dimen>
-    <dimen name="tw__login_btn_left_padding">8dp</dimen>
-    <dimen name="tw__login_btn_right_padding">12dp</dimen>
+    <!-- Text sizes -->
+    <!--density-independent(micro 10sp, small 12sp, medium 14sp, large 16sp)-->
+    <dimen name="tw__text_size_large">16sp</dimen>
+    <dimen name="tw__text_size_medium">14sp</dimen>
+    <dimen name="tw__text_size_small">12sp</dimen>
 
+    <!-- Video controls -->
     <dimen name="tw__seekbar_thumb_size">32dp</dimen>
     <dimen name="tw__seekbar_thumb_outer_padding">7dp</dimen>
     <dimen name="tw__seekbar_thumb_inner_padding">13dp</dimen>
     <dimen name="tw__video_control_height">32dp</dimen>
     <dimen name="tw__video_control_text_size">13sp</dimen>
 
+    <!-- Gallery sizes -->
+    <dimen name="tw__gallery_page_margin">12dp</dimen>
 </resources>
diff --git a/tweet-ui/src/main/res/values-v16/tw__tweet_text_styles.xml b/tweet-ui/src/main/res/values/ids.xml
similarity index 67%
rename from tweet-ui/src/main/res/values-v16/tw__tweet_text_styles.xml
rename to tweet-ui/src/main/res/values/ids.xml
index 247e3d33..e96574d8 100644
--- a/tweet-ui/src/main/res/values-v16/tw__tweet_text_styles.xml
+++ b/tweet-ui/src/main/res/values/ids.xml
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="utf-8"?>
 <!--
   ~ Copyright (C) 2015 Twitter, Inc.
   ~
@@ -17,11 +16,5 @@
   -->
 
 <resources>
-
-    <style name="tw__TweetFullName" parent="tw__TweetFullNameBase">
-        <item name="android:textStyle">bold</item>
-        <item name="android:fontFamily">sans-serif</item>
-        <item name="android:importantForAccessibility">no</item>
-    </style>
-
-</resources>
\ No newline at end of file
+    <item name="tw__entity_index" type="id" />
+</resources>
diff --git a/tweet-ui/src/main/res/values/strings.xml b/tweet-ui/src/main/res/values/strings.xml
index adf0ae9b..d388883a 100644
--- a/tweet-ui/src/main/res/values/strings.xml
+++ b/tweet-ui/src/main/res/values/strings.xml
@@ -31,9 +31,12 @@
     <string name="tw__share_subject_format">Tweet from %1$s (@%2$s)</string>
     <string name="tw__share_content_format">Check out @%1$s\'s Tweet: https://twitter.com/%1$s/status/%2$s</string>
 
+    <!--Vine refers to the brand "Vine" and should not be translated-->
+
     <!--Video player accessibility strings-->
     <string name="tw__play">play</string>
     <string name="tw__pause">pause</string>
     <string name="tw__replay">replay</string>
+    <string name="tw__tweet_media">Tweet Media</string>
 
 </resources>
diff --git a/tweet-ui/src/main/res/values/styles.xml b/tweet-ui/src/main/res/values/styles.xml
index 86908fd7..2bc94a93 100644
--- a/tweet-ui/src/main/res/values/styles.xml
+++ b/tweet-ui/src/main/res/values/styles.xml
@@ -22,6 +22,7 @@
         <item name="tw__container_bg_color">@color/tw__tweet_light_container_bg_color</item>
         <item name="tw__primary_text_color">@color/tw__tweet_light_primary_text_color</item>
         <item name="tw__action_color">@color/tw__tweet_action_color</item>
+        <item name="tw__action_highlight_color">@color/tw__tweet_action_light_highlight_color</item>
     </style>
 
     <style name="tw__TweetLightWithActionsStyle" parent="tw__TweetLightStyle">
@@ -32,10 +33,10 @@
         <item name="tw__container_bg_color">@color/tw__tweet_dark_container_bg_color</item>
         <item name="tw__primary_text_color">@color/tw__tweet_dark_primary_text_color</item>
         <item name="tw__action_color">@color/tw__tweet_action_color</item>
+        <item name="tw__action_highlight_color">@color/tw__tweet_action_dark_highlight_color</item>
     </style>
 
     <style name="tw__TweetDarkWithActionsStyle" parent="tw__TweetDarkStyle">
         <item name="tw__tweet_actions_enabled">true</item>
     </style>
-
 </resources>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/values/tw__tweet_actions_styles.xml b/tweet-ui/src/main/res/values/tw__tweet_actions_styles.xml
index 6cdfe431..384d82ab 100644
--- a/tweet-ui/src/main/res/values/tw__tweet_actions_styles.xml
+++ b/tweet-ui/src/main/res/values/tw__tweet_actions_styles.xml
@@ -15,7 +15,9 @@
   ~
   -->
 
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
+<resources
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
 
     <style name="tw__TweetActionButton">
         <item name="android:layout_width">wrap_content</item>
@@ -33,13 +35,15 @@
         <item name="android:padding">@dimen/tw__tweet_action_share_padding</item>
     </style>
 
-    <style name="tw__TweetActionButtonBar">
+    <style name="tw__TweetActionButtonBar" tools:ignore="NewApi">
         <item name="android:layout_marginLeft">@dimen/tw__tweet_action_bar_offset_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__tweet_action_bar_offset_left</item>
         <item name="android:layout_marginBottom">@dimen/tw__tweet_action_bar_offset_bottom</item>
     </style>
 
-    <style name="tw__TweetActionButtonBar.Compact">
+    <style name="tw__TweetActionButtonBar.Compact" tools:ignore="NewApi">
         <item name="android:layout_marginLeft">@dimen/tw__compact_tweet_action_bar_offset_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__compact_tweet_action_bar_offset_left</item>
         <item name="android:layout_marginBottom">@dimen/tw__tweet_action_bar_offset_bottom</item>
     </style>
 </resources>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/values/tw__tweet_layout_styles.xml b/tweet-ui/src/main/res/values/tw__tweet_layout_styles.xml
index 2bc1bc2d..ef52bb9b 100644
--- a/tweet-ui/src/main/res/values/tw__tweet_layout_styles.xml
+++ b/tweet-ui/src/main/res/values/tw__tweet_layout_styles.xml
@@ -22,14 +22,4 @@
         <item name="android:layout_height">wrap_content</item>
     </style>
 
-    <style name="tw__TweetContainer" parent="tw__TweetFillWidth">
-        <item name="android:background">@drawable/tw__bg_tweet</item>
-        <item name="android:paddingTop">@dimen/tw__tweet_container_padding_top</item>
-    </style>
-
-    <style name="tw__CompactTweetContainer" parent="tw__TweetFillWidth">
-        <item name="android:background">@drawable/tw__bg_tweet_compact</item>
-        <item name="android:paddingTop">@dimen/tw__compact_tweet_container_padding_top</item>
-    </style>
-
 </resources>
\ No newline at end of file
diff --git a/tweet-ui/src/main/res/values/tw__tweet_media_styles.xml b/tweet-ui/src/main/res/values/tw__tweet_media_styles.xml
index ec45d29a..b045c722 100644
--- a/tweet-ui/src/main/res/values/tw__tweet_media_styles.xml
+++ b/tweet-ui/src/main/res/values/tw__tweet_media_styles.xml
@@ -16,47 +16,69 @@
   -->
 
 <resources
-    xmlns:android="http://schemas.android.com/apk/res/android">
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
 
-    <style name="tw__TweetAvatar">
+    <style name="tw__TweetAvatar" tools:ignore="NewApi">
         <item name="android:layout_width">@dimen/tw__tweet_avatar_size</item>
         <item name="android:layout_height">@dimen/tw__tweet_avatar_size</item>
         <item name="android:layout_marginTop">@dimen/tw__tweet_avatar_margin_top</item>
         <item name="android:layout_marginLeft">@dimen/tw__tweet_avatar_margin_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__tweet_avatar_margin_left</item>
         <item name="android:layout_marginRight">@dimen/tw__tweet_avatar_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__tweet_avatar_margin_right</item>
         <item name="android:focusable">false</item>
     </style>
 
-    <style name="tw__TweetVerifiedCheck">
-        <item name="android:layout_width">wrap_content</item>
-        <item name="android:layout_height">wrap_content</item>
-        <item name="android:layout_marginBottom">@dimen/tw__tweet_verified_margin_bottom</item>
-        <item name="android:paddingLeft">@dimen/tw__tweet_verified_check_padding_left</item>
-        <item name="android:src">@drawable/tw__ic_tweet_verified</item>
-        <item name="android:focusable">false</item>
-    </style>
-
-    <style name="tw__TwitterLogo">
+    <style name="tw__TwitterLogo" tools:ignore="NewApi">
         <item name="android:layout_width">wrap_content</item>
         <item name="android:layout_height">wrap_content</item>
         <item name="android:layout_marginTop">@dimen/tw__tweet_logo_margin_top</item>
         <item name="android:layout_marginRight">@dimen/tw__tweet_logo_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__tweet_logo_margin_right</item>
         <item name="android:src">@drawable/tw__ic_logo_blue</item>
         <item name="android:focusable">false</item>
     </style>
 
-    <style name="tw__TweetMedia">
+    <style name="tw__TweetMediaContainer">
         <item name="android:layout_width">match_parent</item>
         <item name="android:layout_height">wrap_content</item>
-        <item name="android:focusable">false</item>
-        <item name="tw__image_aspect_ratio">@dimen/tw__tweet_media_aspect_ratio</item>
-        <item name="tw__image_dimension_to_adjust">height</item>
+        <item name="android:visibility">gone</item>
     </style>
 
-    <style name="tw__TweetMediaContainer">
+    <style name="tw__TweetMediaContainer.Compact" tools:ignore="NewApi">
+        <item name="android:layout_marginTop">@dimen/tw__compact_tweet_media_margin_top</item>
+        <item name="android:layout_marginBottom">@dimen/tw__compact_tweet_media_margin_bottom</item>
+        <item name="android:layout_marginRight">@dimen/tw__compact_tweet_media_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__compact_tweet_media_margin_right</item>
+    </style>
+
+    <style name="tw__TweetMediaContainer.Quote">
+        <item name="android:layout_marginBottom">@dimen/tw__quote_tweet_media_margin_bottom</item>
+        <item name="android:layout_marginRight">@dimen/tw__quote_tweet_media_margin_horizontal</item>
+        <item name="android:layout_marginLeft">@dimen/tw__quote_tweet_media_margin_horizontal</item>
+    </style>
+
+    <style name="tw__QuoteTweetContainer" tools:ignore="NewApi">
         <item name="android:layout_width">match_parent</item>
         <item name="android:layout_height">wrap_content</item>
         <item name="android:visibility">gone</item>
+        <item name="android:layout_marginLeft">@dimen/tw__tweet_quote_tweet_margin_horizontal</item>
+        <item name="android:layout_marginRight">@dimen/tw__tweet_quote_tweet_margin_horizontal</item>
+        <item name="android:layout_marginTop">@dimen/tw__tweet_quote_tweet_margin_top</item>
+    </style>
+
+    <style name="tw__QuoteTweetContainer.Compact"
+        tools:ignore="NewApi">
+        <item name="android:layout_marginLeft">@dimen/tw__compact_tweet_quote_tweet_margin_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__compact_tweet_quote_tweet_margin_left</item>
+        <item name="android:layout_marginRight">@dimen/tw__compact_tweet_quote_tweet_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__compact_tweet_quote_tweet_margin_right</item>
+    </style>
+
+    <style name="tw__TweetMedia">
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:layout_height">match_parent</item>
     </style>
 
     <style name="tw__Badge">
@@ -75,43 +97,35 @@
         <item name="android:textStyle">bold</item>
     </style>
 
-    <style name="tw__Badge.Gif">
-        <item name="android:src">@drawable/tw__gif_badge</item>
-    </style>
-
-    <style name="tw__TweetBadge">
+    <style name="tw__TweetBadge" tools:ignore="NewApi">
         <item name="android:layout_width">wrap_content</item>
         <item name="android:layout_height">wrap_content</item>
-        <item name="android:layout_marginLeft">@dimen/tw__tweet_media_badge_margin</item>
-        <item name="android:layout_marginBottom">@dimen/tw__tweet_media_badge_margin</item>
+        <item name="android:layout_margin">@dimen/tw__tweet_media_badge_margin</item>
         <item name="android:layout_gravity">bottom|left</item>
     </style>
 
     <!--Compact Styles-->
 
-    <style name="tw__TweetAvatar.Compact" parent="tw__TweetAvatar">
+    <style name="tw__TweetAvatar.Compact" parent="tw__TweetAvatar"
+        tools:ignore="NewApi">
         <item name="android:layout_width">@dimen/tw__tweet_avatar_size</item>
         <item name="android:layout_height">@dimen/tw__tweet_avatar_size</item>
         <item name="android:layout_marginTop">@dimen/tw__compact_tweet_avatar_margin_top</item>
         <item name="android:layout_marginLeft">@dimen/tw__compact_tweet_avatar_margin_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__compact_tweet_avatar_margin_left</item>
         <item name="android:layout_marginRight">@dimen/tw__compact_tweet_avatar_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__compact_tweet_avatar_margin_right</item>
         <item name="android:focusable">false</item>
     </style>
 
-    <style name="tw__TwitterLogo.Compact">
+    <style name="tw__TwitterLogo.Compact"
+        tools:ignore="NewApi">
         <item name="android:layout_width">wrap_content</item>
         <item name="android:layout_height">wrap_content</item>
         <item name="android:layout_marginTop">@dimen/tw__compact_tweet_logo_margin_top</item>
         <item name="android:layout_marginRight">@dimen/tw__compact_tweet_logo_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__compact_tweet_logo_margin_right</item>
         <item name="android:src">@drawable/tw__ic_logo_blue</item>
     </style>
 
-    <style name="tw__TweetMediaContainer.Compact">
-        <item name="android:layout_width">match_parent</item>
-        <item name="android:layout_height">wrap_content</item>
-        <item name="android:layout_marginTop">@dimen/tw__compact_tweet_media_margin_top</item>
-        <item name="android:layout_marginBottom">@dimen/tw__compact_tweet_media_margin_bottom</item>
-        <item name="android:layout_marginRight">@dimen/tw__compact_tweet_media_margin_right</item>
-    </style>
-
 </resources>
diff --git a/tweet-ui/src/main/res/values/tw__tweet_text_styles.xml b/tweet-ui/src/main/res/values/tw__tweet_text_styles.xml
index 3bf2609d..8c52f926 100644
--- a/tweet-ui/src/main/res/values/tw__tweet_text_styles.xml
+++ b/tweet-ui/src/main/res/values/tw__tweet_text_styles.xml
@@ -24,8 +24,10 @@
         <item name="android:layout_height">wrap_content</item>
         <item name="android:layout_marginTop">@dimen/tw__tweet_retweeted_by_margin_top</item>
         <item name="android:layout_marginLeft">@dimen/tw__tweet_retweeted_by_margin_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__tweet_retweeted_by_margin_left</item>
         <item name="android:layout_marginBottom">@dimen/tw__tweet_retweeted_by_margin_bottom</item>
         <item name="android:drawableLeft">@drawable/tw__ic_retweet_light</item>
+        <item name="android:drawableStart">@drawable/tw__ic_retweet_light</item>
         <item name="android:drawablePadding">@dimen/tw__tweet_retweeted_by_drawable_padding</item>
         <item name="android:textSize">@dimen/tw__text_size_medium</item>
         <item name="android:fontFamily">sans-serif</item>
@@ -44,11 +46,15 @@
         <item name="android:singleLine">true</item>
     </style>
 
-    <style name="tw__TweetFullNameBase" parent="tw__AttributionText">
+    <style name="tw__TweetFullNameBase" parent="tw__AttributionText" tools:ignore="NewApi">
         <item name="android:layout_marginTop">@dimen/tw__tweet_full_name_margin_top</item>
+        <item name="android:layout_marginRight">@dimen/tw__tweet_full_name_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__tweet_full_name_margin_right</item>
         <item name="android:textSize">@dimen/tw__text_size_large</item>
         <item name="android:textColor">@color/tw__tweet_light_primary_text_color</item>
+        <item name="android:drawablePadding">@dimen/tw__tweet_full_name_drawable_padding</item>
         <item name="android:focusable">false</item>
+        <item name="android:importantForAccessibility">no</item>
     </style>
 
     <style name="tw__TweetFullName" parent="tw__TweetFullNameBase">
@@ -80,7 +86,9 @@
         <item name="android:layout_height">wrap_content</item>
         <item name="android:layout_marginTop">@dimen/tw__tweet_text_margin_top</item>
         <item name="android:layout_marginLeft">@dimen/tw__tweet_text_margin_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__tweet_text_margin_left</item>
         <item name="android:layout_marginRight">@dimen/tw__tweet_text_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__tweet_text_margin_right</item>
         <item name="android:fontFamily">sans-serif-light</item>
         <item name="android:textSize">@dimen/tw__text_size_large</item>
         <item name="android:lineSpacingExtra">2dp</item>
@@ -92,8 +100,10 @@
 
     <!--Compact Styles-->
 
-    <style name="tw__TweetRetweetedBy.Compact">
+    <style name="tw__TweetRetweetedBy.Compact"
+        tools:ignore="NewApi">
         <item name="android:layout_marginLeft">@dimen/tw__compact_tweet_retweeted_by_margin_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__compact_tweet_retweeted_by_margin_left</item>
         <item name="android:layout_marginBottom">@dimen/tw__compact_tweet_retweeted_by_margin_bottom</item>
         <item name="android:layout_marginTop">@dimen/tw__compact_tweet_retweeted_by_margin_top</item>
         <item name="android:drawablePadding">@dimen/tw__compact_tweet_retweeted_by_drawable_padding</item>
@@ -104,11 +114,15 @@
         <item name="android:layout_width">wrap_content</item>
         <item name="android:layout_height">wrap_content</item>
         <item name="android:layout_marginRight">@dimen/tw__compact_tweet_attribution_line_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__compact_tweet_attribution_line_margin_right</item>
         <item name="android:importantForAccessibility">noHideDescendants</item>
     </style>
 
-    <style name="tw__TweetFullName.Compact">
+    <style name="tw__TweetFullName.Compact"
+        tools:ignore="NewApi">
         <item name="android:layout_marginTop">@dimen/tw__compact_tweet_full_name_margin_top</item>
+        <item name="android:layout_marginRight">@dimen/tw__compact_tweet_full_name_margin_right</item>
+        <item name="android:layout_marginEnd">@dimen/tw__compact_tweet_full_name_margin_right</item>
         <item name="android:ellipsize">none</item>
     </style>
 
@@ -120,6 +134,7 @@
         <item name="android:layout_marginTop">@dimen/tw__compact_tweet_screen_name_margin_top</item>
         <item name="android:layout_marginBottom">@dimen/tw__compact_tweet_screen_name_margin_bottom</item>
         <item name="android:paddingLeft">@dimen/tw__compact_tweet_screen_name_padding_left</item>
+        <item name="android:paddingStart">@dimen/tw__compact_tweet_screen_name_padding_left</item>
         <item name="android:fontFamily">sans-serif-light</item>
         <item name="android:textSize">@dimen/tw__text_size_medium</item>
         <item name="android:ellipsize">end</item>
@@ -137,9 +152,30 @@
         tools:ignore="NewApi">
         <item name="android:layout_marginTop">@dimen/tw__compact_tweet_text_margin_top</item>
         <item name="android:layout_marginLeft">@dimen/tw__compact_tweet_text_margin_left</item>
+        <item name="android:layout_marginStart">@dimen/tw__compact_tweet_text_margin_left</item>
         <item name="android:layout_marginRight">@dimen/tw__compact_tweet_text_margin_right</item>
-        <item name="android:fontFamily">sans-serif-light</item>
-        <item name="android:textSize">@dimen/tw__text_size_large</item>
+        <item name="android:layout_marginEnd">@dimen/tw__compact_tweet_text_margin_right</item>
     </style>
 
+    <!-- Quote Tweet Styles -->
+    <style name="tw__QuoteAttributionLine"
+        tools:ignore="NewApi">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:importantForAccessibility">noHideDescendants</item>
+        <item name="android:layout_marginTop">@dimen/tw__quote_tweet_attribution_text_margin_top</item>
+        <item name="android:layout_marginLeft">@dimen/tw__quote_tweet_attribution_text_margin_horizontal</item>
+        <item name="android:layout_marginStart">@dimen/tw__quote_tweet_attribution_text_margin_horizontal</item>
+        <item name="android:layout_marginRight">@dimen/tw__quote_tweet_attribution_text_margin_horizontal</item>
+        <item name="android:layout_marginEnd">@dimen/tw__quote_tweet_attribution_text_margin_horizontal</item>
+    </style>
+
+    <style name="tw__TweetText.Quote" tools:ignore="NewApi">
+        <item name="android:layout_marginTop">@dimen/tw__compact_tweet_text_margin_top</item>
+        <item name="android:layout_marginBottom">@dimen/tw__quote_tweet_text_margin_bottom</item>
+        <item name="android:layout_marginLeft">@dimen/tw__quote_tweet_text_margin_horizontal</item>
+        <item name="android:layout_marginStart">@dimen/tw__quote_tweet_text_margin_horizontal</item>
+        <item name="android:layout_marginRight">@dimen/tw__quote_tweet_text_margin_horizontal</item>
+        <item name="android:layout_marginEnd">@dimen/tw__quote_tweet_text_margin_horizontal</item>
+    </style>
 </resources>
diff --git a/tweet-ui/src/main/resources/fabric/com.twitter.sdk.android.tweet-ui.properties b/tweet-ui/src/main/resources/fabric/com.twitter.sdk.android.tweet-ui.properties
index ce0dd36e..57582d3d 100644
--- a/tweet-ui/src/main/resources/fabric/com.twitter.sdk.android.tweet-ui.properties
+++ b/tweet-ui/src/main/resources/fabric/com.twitter.sdk.android.tweet-ui.properties
@@ -16,5 +16,5 @@
 #
 
 fabric-identifier=com.twitter.sdk.android:tweet-ui
-fabric-version=1.9.1-SNAPSHOT
+fabric-version=2.3.2-SNAPSHOT
 fabric-build-type=source
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java
index dfb7f42e..ac66a6c7 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BaseTimelineTest.java
@@ -17,79 +17,18 @@
 
 package com.twitter.sdk.android.tweetui;
 
-import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
 public class BaseTimelineTest {
-    private static final String ILLEGAL_TWEET_UI_MESSAGE = "TweetUi instance must not be null";
     private static final Long TEST_ID = 200L;
-    private static final String TEST_SCRIBE_SECTION = "test";
-    private static final String REQUIRED_SDK_IMPRESSION_CLIENT = "android";
-    private static final String REQUIRED_SDK_IMPRESSION_PAGE = "timeline";
-    private static final String REQUIRED_SDK_IMPRESSION_COMPONENT = "initial";
-    private static final String REQUIRED_SDK_IMPRESSION_ELEMENT = "";
-    private static final String REQUIRED_TFW_CLIENT = "tfw";
-    private static final String REQUIRED_TFW_PAGE = "android";
-    private static final String REQUIRED_TFW_SECTION = "timeline";
-    private static final String REQUIRED_TFW_ELEMENT = "initial";
-    private static final String REQUIRED_IMPRESSION_ACTION = "impression";
-
-    @Test
-    public void testConstructor() {
-        final TweetUi tweetUi = mock(TweetUi.class);
-        final TestBaseTimeline baseTimeline = new TestBaseTimeline(tweetUi);
-        assertEquals(tweetUi, baseTimeline.tweetUi);
-    }
-
-    @Test
-    public void testConstructor_nullTweetUi() {
-        try {
-            new TestBaseTimeline(null);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals(ILLEGAL_TWEET_UI_MESSAGE, e.getMessage());
-        }
-    }
-
-    @Test
-    public void testConstructor_scribesImpression() {
-        final TweetUi tweetUi = mock(TestTweetUi.class);
-        final ArgumentCaptor<EventNamespace> sdkNamespaceCaptor
-                = ArgumentCaptor.forClass(EventNamespace.class);
-        final ArgumentCaptor<EventNamespace> tfwNamespaceCaptor
-                = ArgumentCaptor.forClass(EventNamespace.class);
-        new TestBaseTimeline(tweetUi);
-        verify(tweetUi).scribe(sdkNamespaceCaptor.capture(), tfwNamespaceCaptor.capture());
-
-        final EventNamespace sdkNs = sdkNamespaceCaptor.getValue();
-
-        assertEquals(REQUIRED_SDK_IMPRESSION_CLIENT, sdkNs.client);
-        assertEquals(REQUIRED_SDK_IMPRESSION_PAGE, sdkNs.page);
-        assertEquals(TEST_SCRIBE_SECTION, sdkNs.section);
-        assertEquals(REQUIRED_SDK_IMPRESSION_COMPONENT, sdkNs.component);
-        assertEquals(REQUIRED_SDK_IMPRESSION_ELEMENT, sdkNs.element);
-        assertEquals(REQUIRED_IMPRESSION_ACTION, sdkNs.action);
-
-        final EventNamespace tfwNs = tfwNamespaceCaptor.getValue();
-
-        assertEquals(REQUIRED_TFW_CLIENT, tfwNs.client);
-        assertEquals(REQUIRED_TFW_PAGE, tfwNs.page);
-        assertEquals(REQUIRED_TFW_SECTION, tfwNs.section);
-        assertEquals(TEST_SCRIBE_SECTION, tfwNs.component);
-        assertEquals(REQUIRED_TFW_ELEMENT, tfwNs.element);
-        assertEquals(REQUIRED_IMPRESSION_ACTION, tfwNs.action);
-    }
 
     @Test
     public void testDecrementMaxId_positive() {
@@ -101,16 +40,4 @@ public void testDecrementMaxId_positive() {
     public void testDecrementMaxId_nullId() {
         assertNull(BaseTimeline.decrementMaxId(null));
     }
-
-    /* Extends abstract BaseTimeline for testing */
-    public class TestBaseTimeline extends BaseTimeline {
-        TestBaseTimeline(TweetUi tweetUi) {
-            super(tweetUi);
-        }
-
-        @Override
-        String getTimelineType() {
-            return TEST_SCRIBE_SECTION;
-        }
-    }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java
new file mode 100644
index 00000000..3a7da86b
--- /dev/null
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/BasicTimelineFilterTest.java
@@ -0,0 +1,282 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.annotation.SuppressLint;
+
+import com.twitter.sdk.android.core.BuildConfig;
+import com.twitter.sdk.android.core.models.HashtagEntity;
+import com.twitter.sdk.android.core.models.MentionEntity;
+import com.twitter.sdk.android.core.models.SymbolEntity;
+import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.models.TweetBuilder;
+import com.twitter.sdk.android.core.models.TweetEntities;
+import com.twitter.sdk.android.core.models.UrlEntity;
+import com.twitter.sdk.android.core.models.User;
+import com.twitter.sdk.android.core.models.UserBuilder;
+
+import junit.framework.Assert;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class BasicTimelineFilterTest {
+    static final Tweet TEST_TWEET_1 = new TweetBuilder()
+            .setText("Lorem Ipsum is simply dummy text of the printing and typesetting industry.")
+            .setLang("en")
+            .build();
+    static final Tweet TEST_TWEET_2 = new TweetBuilder()
+            .setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit.")
+            .setLang("en")
+            .build();
+    static final Tweet TEST_TWEET_3 = new TweetBuilder()
+            .setText("Donec sodales imperdiet nisi non ullamcorper. Maecenas in turpis ex.")
+            .setLang("en")
+            .build();
+
+    BasicTimelineFilter basicTimelineFilter;
+
+    @Before
+    @SuppressLint("NewApi")
+    public void setUp() throws Exception {
+        final List<String> keywords = Arrays.asList("dummy", "darn", "foobar");
+        final List<String> hashtags = Arrays.asList("cookies", "CookiesAreAwesome");
+        final List<String> handles = Arrays.asList("benward", "vam_si", "ericfrohnhoefer");
+        final List<String> urls = Arrays.asList("Cookiesareawesome.com", "beevil.net");
+        final FilterValues filterValues = new FilterValues(keywords, hashtags, handles, urls);
+
+        basicTimelineFilter = new BasicTimelineFilter(filterValues);
+    }
+
+    @Test
+    public void testFilter() {
+        final List<Tweet> tweets = new ArrayList<>();
+        tweets.add(TEST_TWEET_1);
+        tweets.add(TEST_TWEET_2);
+        tweets.add(TEST_TWEET_3);
+
+        final List<Tweet> filteredTweets = basicTimelineFilter.filter(tweets);
+
+        assertNotNull(filteredTweets);
+        assertEquals(2, filteredTweets.size());
+        assertEquals(TEST_TWEET_2, filteredTweets.get(0));
+        assertEquals(TEST_TWEET_3, filteredTweets.get(0));
+    }
+
+    @Test
+    public void testShouldFilterTweet_withNoMatch() {
+        assertFalse(basicTimelineFilter.shouldFilterTweet(TEST_TWEET_2));
+    }
+
+    @Test
+    public void testShouldFilterTweet_withTextMatch() {
+        assertTrue(basicTimelineFilter.shouldFilterTweet(TEST_TWEET_1));
+    }
+
+    @Test
+    public void testShouldFilterTweet_withEntityMatch() {
+        final UrlEntity entity =
+                new UrlEntity("beevil.net", "http://beevil.net", "beevil.net", 0, 0);
+        final TweetEntities entities =
+                new TweetEntities(Collections.singletonList(entity), null, null, null, null);
+        final Tweet tweet = new TweetBuilder().setText("").setEntities(entities).build();
+
+        assertTrue(basicTimelineFilter.shouldFilterTweet(tweet));
+    }
+
+    @Test
+    public void testShouldFilterTweet_withUserMatch() {
+        final User user = new UserBuilder().setScreenName("EricFrohnhoefer").build();
+        final Tweet tweet = new TweetBuilder().setText("").setUser(user).build();
+
+        assertTrue(basicTimelineFilter.shouldFilterTweet(tweet));
+    }
+
+    @Test
+    public void testContainsMatchingText_withNoMatch() {
+        assertFalse(basicTimelineFilter.containsMatchingText(TEST_TWEET_2));
+    }
+
+    @Test
+    public void testContainsMatchingText_withMatch() {
+        assertTrue(basicTimelineFilter.containsMatchingText(TEST_TWEET_1));
+    }
+
+    @Test
+    public void testContainsMatchingUrl_withNoMatch() {
+        final UrlEntity entity =
+                new UrlEntity("foobar.com", "http://foobar.com", "foobar.com", 0, 0);
+
+        assertFalse(basicTimelineFilter.containsMatchingUrl(Collections.singletonList(entity)));
+    }
+
+    @Test
+    public void testContainsMatchingUrl_withMatch() {
+        final UrlEntity entity = new UrlEntity("Cookiesareawesome.com",
+                "http://Cookiesareawesome.com", "Cookiesareawesome.com", 0, 0);
+
+        assertTrue(basicTimelineFilter.containsMatchingUrl(Collections.singletonList(entity)));
+    }
+
+    @Test
+    public void testContainsMatchingHashtag_withNoMatch() {
+        final HashtagEntity entity = new HashtagEntity("foobar", 0, 0);
+
+        assertFalse(basicTimelineFilter.containsMatchingHashtag(Collections.singletonList(entity)));
+    }
+
+    @Test
+    public void testContainsMatchingHashtag_withMatch() {
+        final HashtagEntity entity = new HashtagEntity("cookies", 0, 0);
+
+        assertTrue(basicTimelineFilter.containsMatchingHashtag(Collections.singletonList(entity)));
+    }
+
+    @Test
+    public void testContainsMatchingSymbol_withNoMatch() {
+        final SymbolEntity entity = new SymbolEntity("foobar", 0, 0);
+
+        assertFalse(basicTimelineFilter.containsMatchingSymbol(Collections.singletonList(entity)));
+    }
+
+    @Test
+    public void testContainsMatchingSymbol_withMatch() {
+        final SymbolEntity entity = new SymbolEntity("cookies", 0, 0);
+
+        assertTrue(basicTimelineFilter.containsMatchingSymbol(Collections.singletonList(entity)));
+    }
+
+    @Test
+    public void testContainsMatchingMention_withNoMatch() {
+        final MentionEntity entity =
+                new MentionEntity(0, "0", "Foo Bar", "FooBar", 0, 0);
+
+        assertFalse(basicTimelineFilter.containsMatchingMention(Collections.singletonList(entity)));
+    }
+
+    @Test
+    public void testContainsMatchingMention_withMatch() {
+        final MentionEntity entity =
+                new MentionEntity(0, "0", "Eric Frohnhoefer", "EricFrohnhoefer", 0, 0);
+
+        assertTrue(basicTimelineFilter.containsMatchingMention(Collections.singletonList(entity)));
+    }
+
+    @Test
+    public void testContainsMatchingScreenName_withNoMatch() {
+        assertFalse(basicTimelineFilter.containsMatchingScreenName("FooBar"));
+    }
+
+    @Test
+    public void testContainsMatchingScreenName_withMatch() {
+        assertTrue(basicTimelineFilter.containsMatchingScreenName("EricFrohnhoefer"));
+    }
+
+    @Test
+    public void testNormalizeHandle() {
+        String twitterHandle = "@twitter";
+        String normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
+        Assert.assertEquals("twitter", normalizedHandle);
+
+        twitterHandle = "＠twitter";
+        normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
+        Assert.assertEquals("twitter", normalizedHandle);
+    }
+
+    @Test
+    public void testNormalizeHandleWithoutAtSign() {
+        final String twitterHandle = "twiTTer";
+        final String normalizedHandle = BasicTimelineFilter.normalizeHandle(twitterHandle);
+        Assert.assertEquals("twitter", normalizedHandle);
+    }
+
+    @Test
+    public void testNormalizeHashtag() {
+        String hashtag = "#twitter";
+        String normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
+        Assert.assertEquals("twitter", normalizedHashtag);
+
+        hashtag = "＃twitter";
+        normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
+        Assert.assertEquals("twitter", normalizedHashtag);
+
+        hashtag = "$TWTR";
+        normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
+        Assert.assertEquals("TWTR", normalizedHashtag);
+    }
+
+    @Test
+    public void testNormalizeHashtagWithoutHashtag() {
+        final String hashtag = "TWTR";
+        final String normalizedHashtag = BasicTimelineFilter.normalizeHashtag(hashtag);
+        Assert.assertEquals(hashtag, normalizedHashtag);
+    }
+
+    @Test
+    public void testNormalizeUrl() {
+        String url = "twitter.com";
+        String normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
+        Assert.assertEquals("twitter.com", normalizedUrl);
+
+        url = "dev.twitter.com";
+        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
+        Assert.assertEquals("dev.twitter.com", normalizedUrl);
+
+        url = "http://twitter.com";
+        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
+        Assert.assertEquals("twitter.com", normalizedUrl);
+
+        url = "http://TwiTTer.com";
+        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
+        Assert.assertEquals("twitter.com", normalizedUrl);
+
+        url = "https://twitter.com/test";
+        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
+        Assert.assertEquals("twitter.com", normalizedUrl);
+
+        url = "транспорт.com";
+        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
+        Assert.assertEquals("xn--80a0addceeeh.com", normalizedUrl);
+
+        url = "https://транспорт.com/test";
+        normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
+        Assert.assertEquals("xn--80a0addceeeh.com", normalizedUrl);
+    }
+
+    @Test
+    public void testNormalizeUrl_withProhibitedCodePoint() {
+        final String url = "twitter\u180E.com";
+        final String normalizedUrl = BasicTimelineFilter.normalizeUrl(url);
+        Assert.assertEquals(url, normalizedUrl);
+    }
+}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java
new file mode 100644
index 00000000..581e4949
--- /dev/null
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryAdapterTest.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.tweetui.internal.GalleryImageView;
+import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+import java.util.Collections;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.verify;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class GalleryAdapterTest {
+    @Mock
+    SwipeToDismissTouchListener.Callback callback;
+    @Mock
+    MediaEntity entity;
+    @Mock
+    View view;
+    @Mock
+    ViewGroup container;
+    GalleryAdapter subject;
+
+    @Before
+    public void setUp() {
+        MockitoAnnotations.initMocks(this);
+
+        subject = new GalleryAdapter(RuntimeEnvironment.application, callback);
+    }
+
+    @Test
+    public void testGetCount_withZeroItems() {
+        assertEquals(0, subject.getCount());
+    }
+
+    @Test
+    public void testGetCount_withOneItems() {
+        subject.addAll(Collections.singletonList(entity));
+        assertEquals(1, subject.getCount());
+    }
+
+    @Test
+    public void testIsViewFromObject_withSameObject() {
+        assertTrue(subject.isViewFromObject(view, view));
+    }
+
+    @Test
+    public void testIsViewFromObject_withDifferentObject() {
+        assertFalse(subject.isViewFromObject(view, entity));
+    }
+
+    @Test
+    public void testInstantiateItem() {
+        subject.addAll(Collections.singletonList(entity));
+        final GalleryImageView result = (GalleryImageView) subject.instantiateItem(container, 0);
+
+        assertNotNull(result);
+        verify(container).addView(result);
+    }
+
+    @Test
+    public void testDestroyItem() {
+        subject.destroyItem(container, 0, view);
+
+        verify(container).removeView(view);
+    }
+}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImplTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImplTest.java
new file mode 100644
index 00000000..73b237f7
--- /dev/null
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/GalleryScribeClientImplTest.java
@@ -0,0 +1,141 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui;
+
+import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
+import com.twitter.sdk.android.core.internal.scribe.SyndicationClientEvent;
+import com.twitter.sdk.android.core.models.MediaEntity;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.mockito.Mockito.verify;
+
+public class GalleryScribeClientImplTest {
+
+    static final long TEST_MEDIA_ID = 123456789L;
+    static final String TEST_TFW_CLIENT_EVENT_PAGE = "android";
+    static final String TEST_TFW_CLIENT_EVENT_SECTION = "gallery";
+
+    static final String TEST_SCRIBE_SHOW_ACTION = "show";
+    static final String TEST_SCRIBE_IMPRESSION_ACTION = "impression";
+    static final String TEST_SCRIBE_NAVIGATE_ACTION = "navigate";
+    static final String TEST_SCRIBE_DISMISS_ACTION = "dismiss";
+
+    static final int TEST_TYPE_CONSUMER_ID = 1;
+
+    private GalleryScribeClient galleryScribeClient;
+    @Mock
+    private TweetUi tweetUi;
+    @Captor
+    private ArgumentCaptor<List<ScribeItem>> itemsArgumentCaptor;
+    @Captor
+    private ArgumentCaptor<EventNamespace> namespaceArgumentCaptor;
+
+    @Before
+    public void setUp() {
+        MockitoAnnotations.initMocks(this);
+        galleryScribeClient = new GalleryScribeClientImpl(tweetUi);
+    }
+
+    @Test
+    public void testShow() {
+        galleryScribeClient.show();
+        verify(tweetUi).scribe(namespaceArgumentCaptor.capture());
+
+        final EventNamespace ns = namespaceArgumentCaptor.getValue();
+        assertBaseNamespace(ns);
+        assertEquals(TEST_SCRIBE_SHOW_ACTION, ns.action);
+    }
+
+    @Test
+    public void testImpression() {
+        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
+                createTestEntity());
+        galleryScribeClient.impression(scribeItem);
+        verify(tweetUi).scribe(namespaceArgumentCaptor.capture(), itemsArgumentCaptor.capture());
+
+        final EventNamespace ns = namespaceArgumentCaptor.getValue();
+        assertBaseNamespace(ns);
+        assertEquals(TEST_SCRIBE_IMPRESSION_ACTION, ns.action);
+
+        final List<ScribeItem> items = itemsArgumentCaptor.getValue();
+        assertItems(items);
+    }
+
+    @Test
+    public void testNavigate() {
+        galleryScribeClient.navigate();
+        verify(tweetUi).scribe(namespaceArgumentCaptor.capture());
+
+        final EventNamespace ns = namespaceArgumentCaptor.getValue();
+        assertBaseNamespace(ns);
+        assertEquals(TEST_SCRIBE_NAVIGATE_ACTION, ns.action);
+    }
+
+    @Test
+    public void testDismiss() {
+        galleryScribeClient.dismiss();
+        verify(tweetUi).scribe(namespaceArgumentCaptor.capture());
+
+        final EventNamespace ns = namespaceArgumentCaptor.getValue();
+        assertBaseNamespace(ns);
+        assertEquals(TEST_SCRIBE_DISMISS_ACTION, ns.action);
+    }
+
+
+    static void assertItems(List<ScribeItem> items) {
+        assertNotNull(items);
+        assertEquals(1, items.size());
+        assertEquals(TestFixtures.TEST_TWEET_ID, items.get(0).id.longValue());
+        assertEquals(ScribeItem.TYPE_TWEET, items.get(0).itemType.intValue());
+
+        assertMediaDetails(items.get(0).mediaDetails, TEST_TYPE_CONSUMER_ID);
+    }
+
+    static void assertMediaDetails(ScribeItem.MediaDetails mediaDetails, int type) {
+        assertNotNull(mediaDetails);
+        assertEquals(TestFixtures.TEST_TWEET_ID, mediaDetails.contentId);
+        assertEquals(type, mediaDetails.mediaType);
+        assertEquals(TEST_MEDIA_ID, mediaDetails.publisherId);
+    }
+
+
+    static void assertBaseNamespace(EventNamespace ns) {
+        assertEquals(SyndicationClientEvent.CLIENT_NAME, ns.client);
+        assertEquals(TEST_TFW_CLIENT_EVENT_PAGE, ns.page);
+        assertEquals(TEST_TFW_CLIENT_EVENT_SECTION, ns.section);
+        assertNull(ns.element);
+        assertNull(ns.component);
+    }
+
+    private MediaEntity createTestEntity() {
+        return new MediaEntity(null, null, null, 0, 0, TEST_MEDIA_ID, null, null, null, null, 0,
+                null, "photo", null, "");
+    }
+}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java
index f8a0fe22..34d026d0 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/PlayerControllerTest.java
@@ -20,9 +20,10 @@
 import android.media.MediaPlayer;
 import android.net.Uri;
 import android.view.View;
+import android.widget.ProgressBar;
+import android.widget.TextView;
 
-import com.twitter.sdk.android.core.models.MediaEntity;
-import com.twitter.sdk.android.core.models.VideoInfo;
+import com.twitter.sdk.android.tweetui.internal.SwipeToDismissTouchListener;
 import com.twitter.sdk.android.tweetui.internal.VideoControlView;
 import com.twitter.sdk.android.tweetui.internal.VideoView;
 
@@ -34,9 +35,11 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
-import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
@@ -45,77 +48,146 @@
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
 public class PlayerControllerTest {
-    private static final String TEST_CONTENT_TYPE_MP4 = "video/mp4";
     private static final String TEST_CONTENT_URL = "https://example.com";
+    private static final String TEST_CALL_TO_ACTION_URL = "https://example.com";
+    private static final String TEST_CALL_TO_ACTION_TEXT = "Open in";
+    private static final int TEST_SEEK_POSITION = 1000;
+    private static final Uri TEST_URI = Uri.parse(TEST_CONTENT_URL);
+
     @Mock
     VideoView videoView;
     @Mock
     VideoControlView videoControlView;
+    @Mock
+    ProgressBar videoProgressView;
+    @Mock
+    TextView callToActionView;
+    @Mock
+    View rootView;
+    @Mock
+    SwipeToDismissTouchListener.Callback callback;
     @Captor
     private ArgumentCaptor<View.OnClickListener> clickListenerCaptor;
     @Captor
-    private ArgumentCaptor<MediaPlayer.OnPreparedListener> preparedListenerCaptor;
+    private ArgumentCaptor<MediaPlayer.OnPreparedListener> prepareListenerCaptor;
+    @Captor
+    private ArgumentCaptor<MediaPlayer.OnInfoListener> infoListenerCaptor;
+
+    PlayerController subject;
+    PlayerActivity.PlayerItem playerItem;
 
     @Before
     public void setUp() {
         MockitoAnnotations.initMocks(this);
+        when(videoView.getContext()).thenReturn(RuntimeEnvironment.application);
+        subject = spy(new PlayerController(rootView, videoView, videoControlView,
+                videoProgressView, callToActionView, callback));
+        playerItem = new PlayerActivity.PlayerItem(TEST_CONTENT_URL, false, true, null, null);
     }
 
     @Test
     public void testPrepare() {
-        final Uri testUri = Uri.parse(TEST_CONTENT_URL);
-        final VideoInfo.Variant variant =
-                new VideoInfo.Variant(0, TEST_CONTENT_TYPE_MP4, testUri.toString());
-        final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
-        final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
-
-        final PlayerController playerController =
-                spy(new PlayerController(videoView, videoControlView));
-        doNothing().when(playerController).setUpMediaControl();
-        playerController.prepare(entity);
-
-        verify(playerController).setUpMediaControl(false);
-        verify(videoView).setVideoURI(testUri, false);
+        doNothing().when(subject).setUpMediaControl();
+        subject.prepare(playerItem);
+
+        verify(subject).setUpMediaControl(false, true);
+        verify(videoView).setOnTouchListener(any(View.OnTouchListener.class));
+        verify(videoView).setVideoURI(TEST_URI, false);
         verify(videoView).requestFocus();
-        verify(videoView).setOnPreparedListener(preparedListenerCaptor.capture());
+        verify(videoView).setOnPreparedListener(any(MediaPlayer.OnPreparedListener.class));
+        verify(videoView).setOnInfoListener(any(MediaPlayer.OnInfoListener.class));
+    }
+
+    @Test
+    public void testPrepare_verifyOnPreparedListener() {
+        doNothing().when(subject).setUpMediaControl();
+        subject.prepare(playerItem);
 
-        final MediaPlayer.OnPreparedListener listener = preparedListenerCaptor.getValue();
-        assertNotNull(listener);
+        verify(subject).setUpMediaControl(false, true);
+        verify(videoView).setVideoURI(TEST_URI, false);
+        verify(videoView).requestFocus();
+        verify(videoView).setOnPreparedListener(prepareListenerCaptor.capture());
+        verify(videoView).setOnInfoListener(any(MediaPlayer.OnInfoListener.class));
+        verifyOnPreparedListener(prepareListenerCaptor.getValue());
+    }
+
+    @Test
+    public void testPrepare_setUpCallToActionListener() {
+        doNothing().when(subject).setUpMediaControl();
+
+        final PlayerActivity.PlayerItem itemWithCallToActionUrl =
+                new PlayerActivity.PlayerItem(TEST_CONTENT_URL, false, false,
+                        TEST_CALL_TO_ACTION_TEXT, TEST_CALL_TO_ACTION_URL);
+        subject.prepare(itemWithCallToActionUrl);
+
+        verify(subject).setUpMediaControl(false, false);
+        verify(videoView).setVideoURI(TEST_URI, false);
+        verify(videoView).requestFocus();
+        verify(videoView).setOnPreparedListener(any(MediaPlayer.OnPreparedListener.class));
+        verify(videoView).setOnInfoListener(any(MediaPlayer.OnInfoListener.class));
+
+        verify(callToActionView).setVisibility(View.VISIBLE);
+        verify(callToActionView).setText(TEST_CALL_TO_ACTION_TEXT);
+        verify(callToActionView).setOnClickListener(any(View.OnClickListener.class));
+        verify(rootView).setOnClickListener(any(View.OnClickListener.class));
+    }
+
+    private void verifyOnPreparedListener(MediaPlayer.OnPreparedListener listener) {
         listener.onPrepared(null);
-        verify(videoView).start();
+        verify(videoProgressView).setVisibility(View.GONE);
+    }
+
+    @Test
+    public void testPrepare_verifyOnInfoListener() {
+        doNothing().when(subject).setUpMediaControl();
+        subject.prepare(playerItem);
+
+        verify(subject).setUpMediaControl(false, true);
+        verify(videoView).setVideoURI(TEST_URI, false);
+        verify(videoView).requestFocus();
+        verify(videoView).setOnPreparedListener(any(MediaPlayer.OnPreparedListener.class));
+        verify(videoView).setOnInfoListener(infoListenerCaptor.capture());
+        verifyOnInfoListener(infoListenerCaptor.getValue());
+    }
+
+    private void verifyOnInfoListener(MediaPlayer.OnInfoListener listener) {
+        listener.onInfo(null, MediaPlayer.MEDIA_INFO_BUFFERING_START, 0);
+        verify(videoProgressView).setVisibility(View.VISIBLE);
+        listener.onInfo(null, MediaPlayer.MEDIA_INFO_BUFFERING_END, 0);
+        verify(videoProgressView).setVisibility(View.GONE);
     }
 
     @Test
     public void testPrepare_withNullEntity() {
-        final PlayerController playerController =
-                spy(new PlayerController(videoView, videoControlView));
-        doNothing().when(playerController).setUpMediaControl();
-        playerController.prepare(null);
+        doNothing().when(subject).setUpMediaControl();
+        subject.prepare(null);
     }
 
     @Test
     public void testSetUpMediaControl_withLooping() {
-        final PlayerController playerController =
-                spy(new PlayerController(videoView, videoControlView));
-        playerController.setUpMediaControl(true);
+        subject.setUpMediaControl(true, false);
+
+        verify(subject).setUpLoopControl();
+    }
 
-        verify(playerController).setUpLoopControl();
+    @Test
+    public void testSetUpMediaControl_withLoopingAndControls() {
+        subject.setUpMediaControl(true, true);
+
+        verify(subject).setUpMediaControl();
     }
 
     @Test
     public void testSetUpMediaControl_withOutLooping() {
-        final PlayerController playerController =
-                spy(new PlayerController(videoView, videoControlView));
-        doNothing().when(playerController).setUpMediaControl();
-        playerController.setUpMediaControl(false);
+        doNothing().when(subject).setUpMediaControl();
+        subject.setUpMediaControl(false, true);
 
-        verify(playerController).setUpMediaControl();
+        verify(subject).setUpMediaControl();
     }
 
     @Test
     public void testSetUpLoopControl() {
-        final PlayerController playerController = new PlayerController(videoView, videoControlView);
-        playerController.setUpLoopControl();
+        subject.setUpLoopControl();
 
         verify(videoView).setOnClickListener(clickListenerCaptor.capture());
         final View.OnClickListener listener = clickListenerCaptor.getValue();
@@ -130,10 +202,41 @@ public void testSetUpLoopControl() {
     }
 
     @Test
-    public void testCleanup() {
-        final PlayerController playerController = new PlayerController(videoView, videoControlView);
-        playerController.cleanup();
+    public void testOnDestroy() {
+        subject.onDestroy();
 
         verify(videoView).stopPlayback();
     }
+
+    @Test
+    public void testOnPause() {
+        when(videoView.getCurrentPosition()).thenReturn(TEST_SEEK_POSITION);
+        when(videoView.isPlaying()).thenReturn(true);
+
+        subject.onPause();
+
+        verify(videoView).getCurrentPosition();
+        verify(videoView).isPlaying();
+        assertEquals(true, subject.isPlaying);
+        assertEquals(TEST_SEEK_POSITION, subject.seekPosition);
+    }
+
+    @Test
+    public void testOnResume() {
+        subject.isPlaying = true;
+        subject.seekPosition = TEST_SEEK_POSITION;
+        subject.onResume();
+
+        verify(videoView).start();
+    }
+
+    @Test
+    public void testOnResume_withSeeekPosition() {
+        subject.isPlaying = true;
+        subject.seekPosition = TEST_SEEK_POSITION;
+        subject.onResume();
+
+        verify(videoView).seekTo(TEST_SEEK_POSITION);
+        verify(videoView).start();
+    }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ReplaceTweetCallbackTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ReplaceTweetCallbackTest.java
index c814d89e..6758dfba 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ReplaceTweetCallbackTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/ReplaceTweetCallbackTest.java
@@ -21,7 +21,6 @@
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.tweetui.internal.TimelineDelegate;
 
 import junit.framework.Assert;
 
@@ -31,7 +30,6 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
-import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TimelineDelegateTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
similarity index 98%
rename from tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TimelineDelegateTest.java
rename to tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
index 47ef3c26..54036801 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TimelineDelegateTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
@@ -15,7 +15,7 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui.internal;
+package com.twitter.sdk.android.tweetui;
 
 import android.database.DataSetObservable;
 import android.database.DataSetObserver;
@@ -23,11 +23,6 @@
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.tweetui.BuildConfig;
-import com.twitter.sdk.android.tweetui.TestItem;
-import com.twitter.sdk.android.tweetui.Timeline;
-import com.twitter.sdk.android.tweetui.TimelineCursor;
-import com.twitter.sdk.android.tweetui.TimelineResult;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -668,7 +663,7 @@ public void next(Long sinceId, Callback<TimelineResult<TestItem>> cb) {
             TestItem.populateList(testItems, numItems);
             final TimelineResult<TestItem> timelineResult
                     = new TimelineResult<>(new TimelineCursor(minPosition, maxPosition), testItems);
-            cb.success(timelineResult, null);
+            cb.success(new Result<>(timelineResult, null));
         }
 
         @Override
@@ -677,7 +672,7 @@ public void previous(Long maxId, Callback<TimelineResult<TestItem>> cb) {
             TestItem.populateList(testItems, numItems);
             final TimelineResult<TestItem> timelineResult
                     = new TimelineResult<>(new TimelineCursor(minPosition, maxPosition), testItems);
-            cb.success(timelineResult, null);
+            cb.success(new Result<>(timelineResult, null));
         }
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java
index 2a874efa..0c96f3e4 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineListAdapterTest.java
@@ -24,7 +24,6 @@
 
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Identifiable;
-import com.twitter.sdk.android.tweetui.internal.TimelineDelegate;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -150,7 +149,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
      * Makes class public so it can be mocked on ART runtime.
      * @param <T>
      */
-    public class TestTimelineDelegate<T extends Identifiable> extends TimelineDelegate {
+    class TestTimelineDelegate<T extends Identifiable> extends TimelineDelegate {
         public TestTimelineDelegate(Timeline<T> timeline) {
             super(timeline);
         }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TimelineStateHolderTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java
similarity index 97%
rename from tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TimelineStateHolderTest.java
rename to tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java
index 07d1696a..f9d652f4 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TimelineStateHolderTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineStateHolderTest.java
@@ -15,10 +15,7 @@
  *
  */
 
-package com.twitter.sdk.android.tweetui.internal;
-
-import com.twitter.sdk.android.tweetui.BuildConfig;
-import com.twitter.sdk.android.tweetui.TimelineCursor;
+package com.twitter.sdk.android.tweetui;
 
 import org.junit.Before;
 import org.junit.Test;
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
index 3539d170..493e0582 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
@@ -51,7 +51,6 @@ public void setUp() throws Exception {
         // was in order to not interfere with other tests
         realDefaultTimeZone = TimeZone.getDefault();
         TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
-        TweetDateUtils.RELATIVE_DATE_FORMAT.setTimeZone(TimeZone.getDefault());
         TweetDateUtils.DATE_TIME_RFC822.setTimeZone(TimeZone.getDefault());
     }
 
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
index afe1abad..b8d84443 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetRepositoryTest.java
@@ -20,9 +20,19 @@
 import android.os.Handler;
 
 import com.twitter.sdk.android.core.Callback;
+import com.twitter.sdk.android.core.Result;
+import com.twitter.sdk.android.core.SessionManager;
+import com.twitter.sdk.android.core.TwitterApiClient;
+import com.twitter.sdk.android.core.TwitterAuthException;
+import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.TwitterSession;
+import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.core.services.FavoriteService;
+import com.twitter.sdk.android.core.services.StatusesService;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
@@ -36,60 +46,92 @@
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
 public class TweetRepositoryTest {
-    private static final Long anyId = 1L;
-    private static final List<Long> anyIds = new ArrayList<Long>();
-    private TweetUiAuthRequestQueue mockUserAuthQueue;
-    private TweetUiAuthRequestQueue mockGuestAuthQueue;
+    private static final Long anyId = 123L;
+    private static final List<Long> anyIds = new ArrayList<>();
+    private TwitterCore mockTwitterCore;
+    private TwitterApiClient mockApiClient;
+    private FavoriteService mockFavoriteService;
+    private StatusesService mockStatusesService;
+    private SessionManager<TwitterSession> mockSessionManager;
+    private Handler mockHandler;
     private TweetRepository tweetRepository;
 
     @Before
     public void setUp() throws Exception {
         anyIds.add(anyId);
-        mockUserAuthQueue = mock(TweetUiAuthRequestQueue.class);
-        mockGuestAuthQueue = mock(TweetUiAuthRequestQueue.class);
-        tweetRepository = new TweetRepository(mock(Handler.class), mockUserAuthQueue,
-                mockGuestAuthQueue);
+        mockTwitterCore = mock(TwitterCore.class);
+        mockApiClient = mock(TwitterApiClient.class);
+        mockStatusesService = mock(StatusesService.class, Mockito.RETURNS_MOCKS);
+        when(mockApiClient.getStatusesService()).thenReturn(mockStatusesService);
+        mockFavoriteService = mock(FavoriteService.class, Mockito.RETURNS_MOCKS);
+        when(mockApiClient.getFavoriteService()).thenReturn(mockFavoriteService);
+        when(mockTwitterCore.getApiClient(any(TwitterSession.class))).thenReturn(mockApiClient);
+        when(mockTwitterCore.getApiClient()).thenReturn(mockApiClient);
+        mockSessionManager = mock(SessionManager.class);
+        when(mockSessionManager.getActiveSession()).thenReturn(mock(TwitterSession.class));
+        mockHandler = mock(Handler.class);
+        tweetRepository = new TweetRepository(mockHandler, mockSessionManager, mockTwitterCore);
     }
 
     @Test
     public void testFavoriteDelegation() {
         tweetRepository.favorite(anyId, mock(Callback.class));
-        verify(mockUserAuthQueue, times(1)).addClientRequest(any(Callback.class));
-        verifyZeroInteractions(mockGuestAuthQueue);
+        verify(mockFavoriteService).create(anyId, false);
     }
 
     @Test
     public void testUnfavoriteDelegation() {
         tweetRepository.unfavorite(anyId, mock(Callback.class));
-        verify(mockUserAuthQueue, times(1)).addClientRequest(any(Callback.class));
-        verifyZeroInteractions(mockGuestAuthQueue);
+        verify(mockFavoriteService).destroy(anyId, false);
     }
 
     @Test
     public void testRetweetDelegation() {
         tweetRepository.retweet(anyId, mock(Callback.class));
-        verify(mockUserAuthQueue, times(1)).addClientRequest(any(Callback.class));
-        verifyZeroInteractions(mockGuestAuthQueue);
+        verify(mockStatusesService).retweet(anyId, false);
     }
 
     @Test
     public void testUnretweetDelegation() {
         tweetRepository.unretweet(anyId, mock(Callback.class));
-        verify(mockUserAuthQueue, times(1)).addClientRequest(any(Callback.class));
-        verifyZeroInteractions(mockGuestAuthQueue);
+        verify(mockStatusesService).unretweet(anyId, false);
     }
 
     @Test
     public void testLoadTweetDelegation() {
         tweetRepository.loadTweet(anyId, mock(Callback.class));
-        verifyZeroInteractions(mockUserAuthQueue);
-        verify(mockGuestAuthQueue, times(1)).addClientRequest(any(Callback.class));
+        verify(mockStatusesService).show(anyId, null, null, null);
     }
 
     @Test
     public void testLoadTweetsDelegation() {
         tweetRepository.loadTweets(anyIds, mock(Callback.class));
-        verifyZeroInteractions(mockUserAuthQueue);
-        verify(mockGuestAuthQueue, times(1)).addClientRequest(any(Callback.class));
+        verify(mockStatusesService).lookup(anyId.toString(), null, null, null);
+    }
+
+    @Test
+    public void testGetUserSession_withActiveUserSession() {
+        final Callback<TwitterSession> cb = mock(Callback.class);
+        tweetRepository.getUserSession(cb);
+
+        verify(cb).success(any(Result.class));
+    }
+
+    @Test
+    public void testGetUserSession_withNoActiveUserSession() {
+        final Callback<TwitterSession> cb = mock(Callback.class);
+        when(mockSessionManager.getActiveSession()).thenReturn(null);
+        tweetRepository.getUserSession(cb);
+
+        verify(cb).failure(any(TwitterAuthException.class));
+    }
+
+    @Test
+    public void testSingleTweetCallback_callsUpdateCache() {
+        final TweetRepository mockRepo = mock(TweetRepository.class);
+        final TweetRepository.SingleTweetCallback callback
+                = mockRepo.new SingleTweetCallback(null);
+        callback.success(new Result<Tweet>(null, null));
+        verify(mockRepo, times(1)).updateCache(any(Tweet.class));
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
index 977c8505..fc1ded9d 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
@@ -38,12 +38,12 @@
 @Config(constants = BuildConfig.class, sdk = 21)
 public class TweetTextLinkifierTest {
     static final String BASE_TEXT = "just setting up my twttr";
-    static final EntityFactory entityFactory = new EntityFactory();
+    static final String TEST_RLT_STRING = "ייִדיש משלי https://t.co/sfb4Id7esk\u200E";
 
     @Test
     public void testLinkifyUrls_nullFormattedTweetText() {
         try {
-            TweetTextLinkifier.linkifyUrls(null, null, false, 0);
+            TweetTextLinkifier.linkifyUrls(null, null, 0, 0, true, true);
         } catch (Exception e) {
             fail("threw unexpected exception");
         }
@@ -52,7 +52,7 @@ public void testLinkifyUrls_nullFormattedTweetText() {
     @Test
     public void testLinkifyUrls_newFormattedTweetText() {
         try {
-            TweetTextLinkifier.linkifyUrls(new FormattedTweetText(), null, false, 0);
+            TweetTextLinkifier.linkifyUrls(new FormattedTweetText(), null, 0, 0, true, true);
         } catch (Exception e) {
             fail("threw unexpected exception");
         }
@@ -71,7 +71,7 @@ public void testLinkifyUrls_oneUrlEntity() {
         formattedText.urlEntities.add(new FormattedUrlEntity(urlEntity));
 
         final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, false, 0);
+                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
         final String displayUrlFromEntity =
                 linkifiedText.subSequence(urlEntity.getStart(), urlEntity.getEnd()).toString();
         assertEquals(urlEntity.displayUrl, displayUrlFromEntity);
@@ -86,7 +86,7 @@ public void testLinkifyUrls_oneInvalidUrlEntity() {
         formattedText.urlEntities.add(new FormattedUrlEntity(urlEntity));
 
         final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, false, 0);
+                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
         assertEquals("", linkifiedText.toString());
     }
 
@@ -105,7 +105,7 @@ public void testLinkifyUrls_linkClickListener() {
         formattedText.urlEntities.add(new FormattedUrlEntity(urlEntity));
 
         final SpannableStringBuilder linkifiedText = (SpannableStringBuilder)
-                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, false, 0);
+                TweetTextLinkifier.linkifyUrls(formattedText, mockClickListener, 0, 0, true, true);
         final ClickableSpan[] clickables =
                 linkifiedText.getSpans(urlEntity.getStart(), urlEntity.getEnd(),
                         ClickableSpan.class);
@@ -113,30 +113,62 @@ public void testLinkifyUrls_linkClickListener() {
     }
 
     @Test
-    public void testLinkifyUrls_stripPhotoUrlTrue() {
+    public void testLinkifyUrls_verifyPhotoOnlyStrippedFromEnd() {
         final FormattedTweetText formattedText = setupPicTwitterEntities();
         final FormattedMediaEntity lastPhotoUrl = formattedText.mediaEntities.get(0);
         final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, true, 0);
+                = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
 
         // make sure we are stripping out a photo entity since it is the only media entity
         // that we can render inline
         assertEquals("photo", lastPhotoUrl.type);
         // assert that we do not strip it here and display it in the middle
-        assertTrue(!linkifiedText.toString().contains(lastPhotoUrl.displayUrl));
+        assertTrue(linkifiedText.toString().contains(lastPhotoUrl.displayUrl));
     }
 
     @Test
-    public void testLinkifyUrls_stripPhotoUrlFalse() {
-        final FormattedTweetText formattedText = setupPicTwitterEntities();
-        final FormattedMediaEntity lastPhotoUrl = formattedText.mediaEntities.get(0);
-        final CharSequence linkifiedText
-                = TweetTextLinkifier.linkifyUrls(formattedText, null, false, 0);
+    public void testGetEntityToStrip_withLtrMarker() {
+        final String result = TweetTextLinkifier.stripLtrMarker(TEST_RLT_STRING);
 
-        // make sure we are making assertions about the photo entity
-        assertEquals("photo", lastPhotoUrl.type);
-        // assert that we do not strip it here and display it in the middle
-        assertTrue(linkifiedText.toString().contains(lastPhotoUrl.displayUrl));
+        assertNotEquals(TEST_RLT_STRING, result);
+        assertFalse(result.endsWith(Character.toString('\u200E')));
+    }
+
+    @Test
+    public void testGetEntityToStrip_withoutLtrMarker() {
+        final String result = TweetTextLinkifier.stripLtrMarker(BASE_TEXT);
+
+        assertEquals(BASE_TEXT, result);
+        assertFalse(result.endsWith(Character.toString('\u200E')));
+    }
+
+    @Test
+    public void testIsPhotoEntity_withPhotoUrl() {
+        final MediaEntity mediaEntity = new MediaEntity("http://t.co/PFHCdlr4i0", null,
+                "pic.twitter.com/abc", 27, 49, 0L, null, null, null, null, 0L, null, "photo", null,
+                "");
+        final FormattedUrlEntity formattedUrlEntity = new FormattedMediaEntity(mediaEntity);
+
+        assertTrue(TweetTextLinkifier.isPhotoEntity(formattedUrlEntity));
+    }
+
+    @Test
+    public void testIsQuotedStatus_withQuotedStatusUrl() {
+        final UrlEntity urlEntity = new UrlEntity("https://t.co/kMXdOEnVMg",
+                "https://twitter.com/nasajpl/status/634475698174865408",
+                "twitter.com/nasajpl/status\u2026", 50, 72);
+        final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(urlEntity);
+
+        assertTrue(TweetTextLinkifier.isQuotedStatus(formattedUrlEntity));
+    }
+
+    @Test
+    public void testIsVineCard_withVineUrl() {
+        final UrlEntity urlEntity = new UrlEntity("https://t.co/NdpqweoNbi",
+                "https://vine.co/v/eVmZVXbeDK1", "vine.co/v/eVmZVXbeDK1", 1, 23);
+        final FormattedUrlEntity formattedUrlEntity = new FormattedUrlEntity(urlEntity);
+
+        assertTrue(TweetTextLinkifier.isVineCard(formattedUrlEntity));
     }
 
     private FormattedTweetText setupPicTwitterEntities() {
@@ -144,9 +176,10 @@ private FormattedTweetText setupPicTwitterEntities() {
                 "http://t.co/V3hLRdFdeN final text";
 
         final MediaEntity mediaEntity = new MediaEntity("http://t.co/PFHCdlr4i0", null,
-                "pic.twitter.com/abc", 27, 49, 0L, null, null, null, null, 0L, null, "photo", null);
+                "pic.twitter.com/abc", 27, 49, 0L, null, null, null, null, 0L, null, "photo", null,
+                "");
 
-        final UrlEntity urlEntity = new UrlEntity("http://t.co/PFHCdlr4i0", null, "example.com", 50,
+        final UrlEntity urlEntity = new UrlEntity("http://t.co/V3hLRdFdeN", null, "example.com", 50,
                 72);
 
         final FormattedTweetText formattedText = new FormattedTweetText();
@@ -157,6 +190,18 @@ private FormattedTweetText setupPicTwitterEntities() {
         return formattedText;
     }
 
+    @Test
+    public void testTrimEnd_withoutTrailingSpace() {
+        assertSame(BASE_TEXT, TweetTextLinkifier.trimEnd(BASE_TEXT));
+    }
+
+    @Test
+    public void testTrimEnd_withTrailingSpace() {
+        final CharSequence result = TweetTextLinkifier.trimEnd(BASE_TEXT + "\n\r\t ");
+        assertEquals(BASE_TEXT, result);
+        assertNotSame(BASE_TEXT, result);
+    }
+
     /*
      * mergeAndSortEntities method
      */
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserSessionProviderTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserSessionProviderTest.java
deleted file mode 100644
index c998db84..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/UserSessionProviderTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.internal.SessionProvider;
-import com.twitter.sdk.android.tweetui.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.*;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class UserSessionProviderTest {
-    private SessionProvider sessionProvider;
-
-    @Before
-    public void setUp() throws Exception {
-        sessionProvider = new UserSessionProvider(mock(List.class));
-    }
-
-    @Test
-    public void testRequestAuth_failureWithAuthorizeFailed() {
-        final Callback<Session> mockCallback = mock(Callback.class);
-        sessionProvider.requestAuth(mockCallback);
-        final ArgumentCaptor<TwitterAuthException> exceptionCaptor
-                = ArgumentCaptor.forClass(TwitterAuthException.class);
-        verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals("Twitter login required.", exceptionCaptor.getValue().getMessage());
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/VideoScribeClientImplTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/VideoScribeClientImplTest.java
index 89d72dfa..9d64f1ab 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/VideoScribeClientImplTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/VideoScribeClientImplTest.java
@@ -38,15 +38,14 @@
 
 public class VideoScribeClientImplTest {
     static final long TEST_MEDIA_ID = 123456789L;
-    static final String TEST_TYPE_CONSUMER = "video";
-    static final int TEST_TYPE_CONSUMER_ID = 1;
-    static final String TEST_TYPE_ANIMATED_GIF = "animated_gif";
-    static final int TEST_TYPE_ANIMATED_GIF_ID = 3;
     static final String TEST_TFW_CLIENT_EVENT_PAGE = "android";
     static final String TEST_TFW_CLIENT_EVENT_SECTION = "video";
     static final String TEST_SCRIBE_IMPRESSION_ACTION = "impression";
     static final String TEST_SCRIBE_PLAY_ACTION = "play";
 
+    static final String TEST_TYPE_ANIMATED_GIF = "animated_gif";
+    static final int TEST_TYPE_ANIMATED_GIF_ID = 3;
+
     private VideoScribeClientImpl scribeClient;
     @Mock
     private TweetUi tweetUi;
@@ -64,8 +63,9 @@ public void setUp() {
 
     @Test
     public void testImpression() {
-        scribeClient.impression(TestFixtures.TEST_TWEET_ID,
+        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
                 createTestEntity(TEST_TYPE_ANIMATED_GIF));
+        scribeClient.impression(scribeItem);
 
         verify(tweetUi).scribe(namespaceArgumentCaptor.capture(), itemsArgumentCaptor.capture());
 
@@ -79,8 +79,9 @@ public void testImpression() {
 
     @Test
     public void testPlay() {
-        scribeClient.play(TestFixtures.TEST_TWEET_ID,
+        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TestFixtures.TEST_TWEET_ID,
                 createTestEntity(TEST_TYPE_ANIMATED_GIF));
+        scribeClient.play(scribeItem);
 
         verify(tweetUi).scribe(namespaceArgumentCaptor.capture(), itemsArgumentCaptor.capture());
 
@@ -92,22 +93,6 @@ public void testPlay() {
         assertItems(items);
     }
 
-    @Test
-    public void testCreateScribeItem_withAnimatedGif() {
-        final ScribeItem.MediaDetails mediaDetails = scribeClient.createMediaDetails(
-                TestFixtures.TEST_TWEET_ID, createTestEntity(TEST_TYPE_ANIMATED_GIF));
-
-        assertMediaDetails(mediaDetails, TEST_TYPE_ANIMATED_GIF_ID);
-    }
-
-    @Test
-    public void testCreateScribeItem_withConsumerVideo() {
-        final ScribeItem.MediaDetails mediaDetails = scribeClient.createMediaDetails(
-                TestFixtures.TEST_TWEET_ID, createTestEntity(TEST_TYPE_CONSUMER));
-
-        assertMediaDetails(mediaDetails, TEST_TYPE_CONSUMER_ID);
-    }
-
     static void assertItems(List<ScribeItem> items) {
         assertNotNull(items);
         assertEquals(1, items.size());
@@ -124,6 +109,7 @@ static void assertMediaDetails(ScribeItem.MediaDetails mediaDetails, int type) {
         assertEquals(TEST_MEDIA_ID, mediaDetails.publisherId);
     }
 
+
     static void assertBaseNamespace(EventNamespace ns) {
         assertEquals(SyndicationClientEvent.CLIENT_NAME, ns.client);
         assertEquals(TEST_TFW_CLIENT_EVENT_PAGE, ns.page);
@@ -134,6 +120,6 @@ static void assertBaseNamespace(EventNamespace ns) {
 
     private MediaEntity createTestEntity(String type) {
         return new MediaEntity(null, null, null, 0, 0, TEST_MEDIA_ID, null, null, null, null, 0,
-                null, type, null);
+                null, type, null, "");
     }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java
new file mode 100644
index 00000000..944b3551
--- /dev/null
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/ClickableLinkSpanTest.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.graphics.Color;
+import android.text.TextPaint;
+import android.view.View;
+
+import com.twitter.sdk.android.tweetui.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.verify;
+import static org.mockito.MockitoAnnotations.initMocks;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class ClickableLinkSpanTest {
+
+    private static final int SELECTED_COLOR = 1;
+    private static final int LINK_COLOR = 2;
+
+    @Mock
+    private TextPaint textPaint;
+
+    private ClickableLinkSpan clickableLinkSpan;
+
+    @Before
+    public void before() {
+        initMocks(this);
+    }
+
+    @Test
+    public void testUpdateDrawState_shouldSetTextPaintDefaultColor() {
+        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR);
+        clickableLinkSpan.updateDrawState(textPaint);
+        verify(textPaint).setColor(textPaint.linkColor);
+        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
+    }
+
+    @Test
+    public void testUpdateDrawState_shouldSetTextPaintProvidedColor() {
+        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, false);
+        clickableLinkSpan.updateDrawState(textPaint);
+        verify(textPaint).setColor(LINK_COLOR);
+        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
+    }
+
+    @Test
+    public void testUpdateDrawState_shouldSetTextPaintUnderlined() {
+        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
+        clickableLinkSpan.updateDrawState(textPaint);
+        verify(textPaint).setUnderlineText(true);
+        assertEquals(Color.TRANSPARENT, textPaint.bgColor);
+    }
+
+    @Test
+    public void testUpdateDrawState_shouldSetTextPaintBackground() {
+        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
+        clickableLinkSpan.select(true);
+        clickableLinkSpan.updateDrawState(textPaint);
+        verify(textPaint).setUnderlineText(true);
+        assertEquals(SELECTED_COLOR, textPaint.bgColor);
+    }
+
+    @Test
+    public void testSelect_shouldSetIsSelectedTrue() {
+        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
+        clickableLinkSpan.select(true);
+        assertTrue(clickableLinkSpan.isSelected());
+    }
+
+    @Test
+    public void testSelect_shouldSetIsSelectedFalse() {
+        clickableLinkSpan = new TestClickableLinkSpan(SELECTED_COLOR, LINK_COLOR, true);
+        clickableLinkSpan.select(false);
+        assertFalse(clickableLinkSpan.isSelected());
+    }
+
+    private static class TestClickableLinkSpan extends ClickableLinkSpan {
+        public TestClickableLinkSpan(int selectedColor) {
+            super(selectedColor, 0, false, false);
+        }
+
+        public TestClickableLinkSpan(int selectedColor, int linkColor, boolean underlined) {
+            super(selectedColor, linkColor, true, underlined);
+        }
+
+        @Override
+        public void onClick(View widget) {
+        }
+    }
+}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java
new file mode 100644
index 00000000..5fdc9a58
--- /dev/null
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GalleryImageViewTest.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.ProgressBar;
+
+import com.twitter.sdk.android.tweetui.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class GalleryImageViewTest {
+    @Mock
+    SwipeToDismissTouchListener.Callback callback;
+    @Mock
+    Drawable drawable;
+    MultiTouchImageView imageView;
+    ProgressBar progressBar;
+    Bitmap bitmap;
+    GalleryImageView subject;
+
+    @Before
+    public void setUp() {
+        MockitoAnnotations.initMocks(this);
+
+        imageView = spy(new MultiTouchImageView(RuntimeEnvironment.application));
+        progressBar = spy(new ProgressBar(RuntimeEnvironment.application));
+        bitmap = Bitmap.createBitmap(10, 10, null);
+        subject = new GalleryImageView(RuntimeEnvironment.application, imageView, progressBar);
+    }
+
+    @Test
+    public void testConstructor() {
+        assertNotNull(subject.imageView);
+        assertNotNull(subject.progressBar);
+
+        FrameLayout.LayoutParams params;
+        params = (FrameLayout.LayoutParams) subject.imageView.getLayoutParams();
+        assertEquals(FrameLayout.LayoutParams.MATCH_PARENT, params.height);
+        assertEquals(FrameLayout.LayoutParams.MATCH_PARENT, params.width);
+        assertEquals(Gravity.CENTER, params.gravity);
+
+        params = (FrameLayout.LayoutParams) subject.progressBar.getLayoutParams();
+        assertEquals(FrameLayout.LayoutParams.WRAP_CONTENT, params.height);
+        assertEquals(FrameLayout.LayoutParams.WRAP_CONTENT, params.width);
+        assertEquals(Gravity.CENTER, params.gravity);
+    }
+
+    @Test
+    public void testSetSwipeToDismissCallback() {
+        subject.setSwipeToDismissCallback(callback);
+
+        verify(subject.imageView).setOnTouchListener(any(View.OnTouchListener.class));
+    }
+
+    @Test
+    public void testOnBitmapLoaded() {
+        subject.onBitmapLoaded(bitmap, null);
+
+        verify(subject.imageView).setImageBitmap(bitmap);
+        verify(subject.progressBar).setVisibility(View.GONE);
+    }
+
+    @Test
+    public void testOnBitmapFailed() {
+        reset(subject.imageView, subject.progressBar);
+
+        subject.onBitmapFailed(drawable);
+
+        verifyZeroInteractions(subject.imageView, subject.progressBar);
+    }
+
+    @Test
+    public void testOnPrepareLoad() {
+        subject.onPrepareLoad(drawable);
+
+        verify(subject.imageView).setImageResource(android.R.color.transparent);
+        verify(subject.progressBar).setVisibility(View.VISIBLE);
+    }
+}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GuestSessionProviderTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GuestSessionProviderTest.java
deleted file mode 100644
index 4f2aa435..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/GuestSessionProviderTest.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.internal.SessionProvider;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.AppSession;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.internal.oauth.AppAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.tweetui.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.*;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class GuestSessionProviderTest {
-    private TwitterCore mockTwitterCore;
-    private SessionProvider sessionProvider;
-    private List<SessionManager<? extends Session>> sessionManagers;
-    private SessionManager<TwitterSession> mockSessionManager;
-    private SessionManager<AppSession> mockAppSessionManager;
-
-    @Before
-    public void setUp() throws Exception {
-        mockTwitterCore = mock(TwitterCore.class);
-        sessionManagers = new ArrayList<>();
-        mockSessionManager = mock(SessionManager.class);
-        mockAppSessionManager = mock(SessionManager.class);
-    }
-
-    @Test
-    public void testRequestAuth_callsLogInGuest() {
-        sessionProvider = new GuestSessionProvider(mockTwitterCore, mock(List.class));
-        sessionProvider.requestAuth(mock(Callback.class));
-        verify(mockTwitterCore).logInGuest(any(GuestSessionProvider.AppSessionCallback.class));
-    }
-
-    @Test
-    public void testGetActionSession_userAuthTokenSessionAllowed() {
-        final TwitterAuthToken userAuthToken = mock(TwitterAuthToken.class);
-        final TwitterSession twitterSession = mock(TwitterSession.class);
-        when(twitterSession.getAuthToken()).thenReturn(userAuthToken);
-        when(mockSessionManager.getActiveSession()).thenReturn(twitterSession);
-        sessionManagers.add(mockSessionManager);
-        sessionProvider = new GuestSessionProvider(mockTwitterCore, sessionManagers);
-        assertEquals(twitterSession, sessionProvider.getActiveSession());
-    }
-
-    @Test
-    public void testGetActionSession_guestAuthTokenSessionAllowed() {
-        final GuestAuthToken guestAuthToken = mock(GuestAuthToken.class);
-        final AppSession guestSession = mock(AppSession.class);
-        when(guestSession.getAuthToken()).thenReturn(guestAuthToken);
-        when(mockAppSessionManager.getActiveSession()).thenReturn(guestSession);
-        sessionManagers.add(mockAppSessionManager);
-        sessionProvider = new GuestSessionProvider(mockTwitterCore, sessionManagers);
-        assertEquals(guestSession, sessionProvider.getActiveSession());
-    }
-
-    @Test
-    public void testGetActionSession_appAuthTokenSessionReturnsNull() {
-        final AppAuthToken appAuthToken = mock(AppAuthToken.class);
-        final AppSession appSession = mock(AppSession.class);
-        when(appSession.getAuthToken()).thenReturn(appAuthToken);
-        when(mockAppSessionManager.getActiveSession()).thenReturn(appSession);
-        sessionManagers.add(mockAppSessionManager);
-        sessionProvider = new GuestSessionProvider(mockTwitterCore, sessionManagers);
-        assertNull(sessionProvider.getActiveSession());
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/SessionProviderTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/SessionProviderTest.java
deleted file mode 100644
index 369065aa..00000000
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/SessionProviderTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui.internal;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.internal.SessionProvider;
-import com.twitter.sdk.android.core.AppSession;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.tweetui.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertSame;
-import static org.mockito.Mockito.*;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class SessionProviderTest {
-    private List<SessionManager<? extends Session>> sessionManagers;
-    private SessionManager<TwitterSession> mockTwitterSessionManager;
-    private SessionManager<AppSession> mockAppSessionManager;
-    private SessionProvider sessionProvider;
-
-    @Before
-    public void setUp() throws Exception {
-        sessionManagers = new ArrayList<>();
-        mockTwitterSessionManager = mock(SessionManager.class);
-        mockAppSessionManager = mock(SessionManager.class);
-        sessionManagers.add(mockTwitterSessionManager);
-        sessionManagers.add(mockAppSessionManager);
-        sessionProvider = new TestSessionProvider(sessionManagers);
-    }
-
-    @Test
-    public void testGetActiveSession_activeSessionDoesNotExist() {
-        assertNull(sessionProvider.getActiveSession());
-    }
-
-    @Test
-    public void testGetActiveSession_activeSessionFirstManager() {
-        final TwitterSession mockSession = mock(TwitterSession.class);
-        when(mockTwitterSessionManager.getActiveSession()).thenReturn(mockSession);
-        assertSame(mockSession, sessionProvider.getActiveSession());
-        // Verify that we exited the loop early.
-        verifyZeroInteractions(mockAppSessionManager);
-    }
-
-    @Test
-    public void testGetActiveSession_activeSessionSecondManager() {
-        final AppSession mockSession = mock(AppSession.class);
-        when(mockAppSessionManager.getActiveSession()).thenReturn(mockSession);
-        assertSame(mockSession, sessionProvider.getActiveSession());
-    }
-
-    // testing purposes
-    class TestSessionProvider extends SessionProvider {
-        public TestSessionProvider(List<SessionManager<? extends Session>> sessionManagers) {
-            super(sessionManagers);
-        }
-
-        @Override
-        public void requestAuth(Callback<Session> cb) {
-            // tested in concrete SessionProvider's
-        }
-    }
-}
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
index d77410c1..c214d9ad 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
@@ -31,6 +31,7 @@
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 
 import static org.junit.Assert.*;
 
@@ -43,6 +44,7 @@
     private static final String TEST_MEDIA_TYPE_VIDEO = "video";
     private static final String TEST_MEDIA_TYPE_ANIMATED_GIF = "animated_gif";
     private static final String TEST_CONTENT_TYPE_MP4 = "video/mp4";
+    private static final String TEST_CONTENT_TYPE_HLS = "application/x-mpegURL";
     private static final String TEST_CONTENT_TYPE_DASH = "video/dash+xml";
 
     @Test
@@ -53,7 +55,7 @@ public void testGetPhotoEntity_nullEntities() {
 
     @Test
     public void testGetPhotoEntity_nullMedia() {
-        final TweetEntities entities = new TweetEntities(null, null, null, null);
+        final TweetEntities entities = new TweetEntities(null, null, null, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
         assertNull(TweetMediaUtils.getPhotoEntity(tweet));
     }
@@ -61,7 +63,7 @@ public void testGetPhotoEntity_nullMedia() {
     @Test
     public void testGetPhotoEntity_emptyMedia() {
         final TweetEntities entities = new TweetEntities(null, null, new ArrayList<MediaEntity>(),
-                null);
+                null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
         assertNull(TweetMediaUtils.getPhotoEntity(tweet));
     }
@@ -72,7 +74,7 @@ public void testGetPhotoEntity_hasFinalPhotoEntity() {
                 TEST_MEDIA_TYPE_PHOTO);
         final ArrayList<MediaEntity> media = new ArrayList<>();
         media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null);
+        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
 
         assertEquals(entity, TweetMediaUtils.getPhotoEntity(tweet));
@@ -84,7 +86,7 @@ public void testGetPhotoEntity_nonPhotoMedia() {
                 TEST_MEDIA_TYPE_VIDEO);
         final ArrayList<MediaEntity> media = new ArrayList<>();
         media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null);
+        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
 
         assertNull(TweetMediaUtils.getPhotoEntity(tweet));
@@ -96,7 +98,7 @@ public void testHasPhoto_hasPhotoEntity() {
                 TEST_MEDIA_TYPE_PHOTO);
         final ArrayList<MediaEntity> media = new ArrayList<>();
         media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null);
+        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
 
         assertTrue(TweetMediaUtils.hasPhoto(tweet));
@@ -108,7 +110,7 @@ public void testHasPhoto_noPhotoEntity() {
                 TEST_MEDIA_TYPE_VIDEO);
         final ArrayList<MediaEntity> media = new ArrayList<>();
         media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null);
+        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
 
         assertFalse(TweetMediaUtils.hasPhoto(tweet));
@@ -116,7 +118,7 @@ public void testHasPhoto_noPhotoEntity() {
 
     @Test
     public void testHasPhoto_uninitializedMediaEntities() {
-        final TweetEntities entities = new TweetEntities(null, null, null, null);
+        final TweetEntities entities = new TweetEntities(null, null, null, null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
         assertFalse(TweetMediaUtils.hasPhoto(tweet));
     }
@@ -135,7 +137,7 @@ public void testGetVideoEntity_nullEntities() {
 
     @Test
     public void testGetVideoEntity_nullMedia() {
-        final TweetEntities entities = new TweetEntities(null, null, null, null);
+        final TweetEntities entities = new TweetEntities(null, null, null, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
         assertNull(TweetMediaUtils.getVideoEntity(tweet));
     }
@@ -143,7 +145,7 @@ public void testGetVideoEntity_nullMedia() {
     @Test
     public void testGetVideoEntity_emptyMedia() {
         final TweetEntities entities = new TweetEntities(null, null, new ArrayList<MediaEntity>(),
-                null);
+                null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
         assertNull(TweetMediaUtils.getVideoEntity(tweet));
     }
@@ -154,7 +156,7 @@ public void testGetVideoEntity_hasVideoEntity() {
                 TEST_MEDIA_TYPE_VIDEO);
         final ArrayList<MediaEntity> media = new ArrayList<>();
         media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null);
+        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
         assertEquals(entity, TweetMediaUtils.getVideoEntity(tweet));
@@ -166,47 +168,61 @@ public void testGetVideoEntity_nonVideoMedia() {
                 TEST_MEDIA_TYPE_PHOTO);
         final ArrayList<MediaEntity> media = new ArrayList<>();
         media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null);
+        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
         assertNull(TweetMediaUtils.getVideoEntity(tweet));
     }
 
     @Test
-    public void testHasVideo_hasVideoEntity() {
-        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO);
-        final ArrayList<MediaEntity> media = new ArrayList<>();
-        media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null);
+    public void testHasSupportedVideo_hasUnsupportedVideoEntity() {
+        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_DASH, null);
+        final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
+        final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
+
+        final TweetEntities entities = new TweetEntities(null, null, Arrays.asList(entity), null,
+                null);
+        final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
+
+        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
+    }
+
+    @Test
+    public void testHasSupportedVideo_hasSupportedVideoEntity() {
+        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_MP4, null);
+        final VideoInfo videoInfo = TestFixtures.createVideoInfoWithVariant(variant);
+        final MediaEntity entity = TestFixtures.createEntityWithVideo(videoInfo);
+
+        final TweetEntities entities = new TweetEntities(null, null, Arrays.asList(entity), null,
+                null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
-        assertTrue(TweetMediaUtils.hasVideo(tweet));
+        assertTrue(TweetMediaUtils.hasSupportedVideo(tweet));
     }
 
     @Test
-    public void testHasVideo_noVideoEntity() {
+    public void testHasSupportedVideo_noVideoEntity() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_PHOTO);
         final ArrayList<MediaEntity> media = new ArrayList<>();
         media.add(entity);
-        final TweetEntities entities = new TweetEntities(null, null, media, null);
+        final TweetEntities entities = new TweetEntities(null, null, media, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
 
-        assertFalse(TweetMediaUtils.hasVideo(tweet));
+        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
     }
 
     @Test
-    public void testHasVideo_uninitializedMediaEntities() {
-        final TweetEntities entities = new TweetEntities(null, null, null, null);
+    public void testHasSupportedVideo_uninitializedMediaEntities() {
+        final TweetEntities entities = new TweetEntities(null, null, null, null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
-        assertFalse(TweetMediaUtils.hasVideo(tweet));
+        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
     }
 
     @Test
-    public void testHasVideo_nullEntities() {
+    public void testHasSupportedVideo_nullEntities() {
         final Tweet tweet = new TweetBuilder().setExtendedEntities(null).build();
-        assertFalse(TweetMediaUtils.hasVideo(tweet));
+        assertFalse(TweetMediaUtils.hasSupportedVideo(tweet));
     }
 
     @Test
@@ -271,34 +287,61 @@ public void testGetSupportedVariant_unsupportedContentType() {
     }
 
     @Test
-    public void testIsVariantSupported() {
+    public void testIsVariantSupported_withMP4() {
         final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_MP4, null);
         assertTrue(TweetMediaUtils.isVariantSupported(variant));
     }
 
     @Test
-    public void testIsVariantSupported_nullContentType() {
+    public void testIsVariantSupported_withHLS() {
+        final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_HLS, null);
+        assertTrue(TweetMediaUtils.isVariantSupported(variant));
+    }
+
+    @Test
+    public void testIsVariantSupported_withNullContentType() {
         final VideoInfo.Variant variant = new VideoInfo.Variant(0, null, null);
         assertFalse(TweetMediaUtils.isVariantSupported(variant));
     }
 
     @Test
-    public void testIsVariantSupported_unsupportedContentType() {
+    public void testIsVariantSupported_withUnsupportedContentType() {
         final VideoInfo.Variant variant = new VideoInfo.Variant(0, TEST_CONTENT_TYPE_DASH, null);
         assertFalse(TweetMediaUtils.isVariantSupported(variant));
     }
 
     @Test
-    public void testIsLooping_withVideo() {
+    public void testIsLooping_withVideoOverSevenSeconds() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
-                TEST_MEDIA_TYPE_VIDEO);
+                TEST_MEDIA_TYPE_VIDEO, 7000);
         assertFalse(TweetMediaUtils.isLooping(entity));
     }
 
+    @Test
+    public void testIsLooping_withVideoUnderSevenSeconds() {
+        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
+                TEST_MEDIA_TYPE_VIDEO, 6000);
+        assertTrue(TweetMediaUtils.isLooping(entity));
+    }
+
     @Test
     public void testIsLooping_withAnimatedGif() {
         final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
                 TEST_MEDIA_TYPE_ANIMATED_GIF);
         assertTrue(TweetMediaUtils.isLooping(entity));
     }
+
+    @Test
+    public void showVideoControlsWithVideo() {
+        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
+                TEST_MEDIA_TYPE_VIDEO);
+        assertTrue(TweetMediaUtils.showVideoControls(entity));
+    }
+
+    @Test
+    public void showVideoControlsWithAnimatedGif() {
+        final MediaEntity entity = TestFixtures.newMediaEntity(TEST_INDICES_START, TEST_INDICES_END,
+                TEST_MEDIA_TYPE_ANIMATED_GIF);
+        assertFalse(TweetMediaUtils.showVideoControls(entity));
+    }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
new file mode 100644
index 00000000..4b89b338
--- /dev/null
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
@@ -0,0 +1,194 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui.internal;
+
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+import android.widget.ImageView;
+
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.MediaEntity;
+import com.twitter.sdk.android.core.models.Tweet;
+import com.twitter.sdk.android.tweetui.BuildConfig;
+import com.twitter.sdk.android.tweetui.R;
+import com.twitter.sdk.android.tweetui.TestFixtures;
+
+import junit.framework.Assert;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.isNull;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class TweetMediaViewTest {
+    static final String TEST_ALT_TEXT = "alt text";
+    static final int TEST_ERROR_RES_ID = 123456789;
+
+    private TweetMediaView tweetMediaView;
+    private CharSequence contentDefaultDescription;
+
+    @Before
+    public void setUp() throws Exception {
+        tweetMediaView = new TweetMediaView(RuntimeEnvironment.application, null,
+                mock(TweetMediaView.DependencyProvider.class));
+        contentDefaultDescription = RuntimeEnvironment.application.getResources()
+                .getString(R.string.tw__tweet_media);
+    }
+
+    @Test
+    public void testInitialViewState() {
+        for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
+            final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
+            Assert.assertNull(imageView);
+        }
+
+        assertArrayEquals(new float[]{0, 0, 0, 0, 0, 0, 0, 0}, tweetMediaView.radii, 0);
+    }
+
+    public void testSetMediaBgColor() {
+        tweetMediaView.setMediaBgColor(Color.BLUE);
+        assertEquals(Color.BLUE, tweetMediaView.mediaBgColor);
+    }
+
+    public void testSetPhotoErrorResId() {
+        tweetMediaView.setPhotoErrorResId(TEST_ERROR_RES_ID);
+        assertEquals(TEST_ERROR_RES_ID, tweetMediaView.photoErrorResId);
+    }
+
+    @Test
+    public void testSetTweetMediaEntities_withEmptyList() {
+        final List<MediaEntity> emptyMediaEntities = Collections.EMPTY_LIST;
+        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, emptyMediaEntities);
+
+        for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
+            final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
+            Assert.assertNull(imageView);
+        }
+    }
+
+    @Test
+    public void testSetTweetMediaEntities_withSingleEntity() {
+        final MediaEntity entity = TestFixtures.createMediaEntityWithPhoto(100, 100);
+        final List<MediaEntity> mediaEntities = new ArrayList<>();
+        mediaEntities.add(entity);
+        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
+
+        final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
+        Assert.assertEquals(View.VISIBLE, imageView.getVisibility());
+        Assert.assertNull(tweetMediaView.getChildAt(1));
+        Assert.assertNull(tweetMediaView.getChildAt(2));
+        Assert.assertNull(tweetMediaView.getChildAt(3));
+    }
+
+    @Test
+    public void testSetTweetMediaEntities_withMultipleEntities() {
+        final List<MediaEntity> mediaEntities = TestFixtures.createMultipleMediaEntitiesWithPhoto
+                (TweetMediaView.MAX_IMAGE_VIEW_COUNT, 100, 100);
+        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
+
+        for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
+            final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
+            Assert.assertEquals(View.VISIBLE, imageView.getVisibility());
+            Assert.assertEquals(index, imageView.getTag(R.id.tw__entity_index));
+            Assert.assertEquals(contentDefaultDescription, imageView.getContentDescription());
+        }
+    }
+
+    @Test
+    public void testSetTweetMediaEntities_withVine() {
+        final Card sampleVineCard = TestFixtures.sampleValidVineCard();
+        final Tweet tweetWithVineCard = TestFixtures.createTweetWithVineCard(
+                TestFixtures.TEST_TWEET_ID, TestFixtures.TEST_USER,
+                TestFixtures.TEST_STATUS, sampleVineCard);
+
+        tweetMediaView.setVineCard(tweetWithVineCard);
+
+        final OverlayImageView imageView = (OverlayImageView) tweetMediaView.getChildAt(0);
+        Assert.assertEquals(View.VISIBLE, imageView.getVisibility());
+        Assert.assertNotNull(imageView.overlay.drawable);
+        Assert.assertNull(tweetMediaView.getChildAt(1));
+        Assert.assertNull(tweetMediaView.getChildAt(2));
+        Assert.assertNull(tweetMediaView.getChildAt(3));
+    }
+
+    @Test
+    public void testSetRoundedCornersRadii() {
+        tweetMediaView.setRoundedCornersRadii(1, 2, 3, 4);
+        assertArrayEquals(new float[]{1, 1, 2, 2, 3, 3, 4, 4}, tweetMediaView.radii, 0);
+    }
+
+    @Test
+    public void testSetAltText_withEmptyString() {
+        final OverlayImageView imageView = mock(OverlayImageView.class);
+        tweetMediaView.setAltText(imageView, "");
+
+        verify(imageView).setContentDescription(contentDefaultDescription);
+    }
+
+    @Test
+    public void testSetAltText_withAtlText() {
+        final OverlayImageView imageView = mock(OverlayImageView.class);
+        tweetMediaView.setAltText(imageView, TEST_ALT_TEXT);
+
+        verify(imageView).setContentDescription(TEST_ALT_TEXT);
+    }
+
+    @Test
+    public void testSetOverlayImage_isVideoTrue() {
+        final OverlayImageView imageView = mock(OverlayImageView.class);
+        tweetMediaView.setOverlayImage(imageView, true);
+
+        verify(imageView).setOverlayDrawable(any(Drawable.class));
+    }
+
+    @Test
+    public void testSetOverlayImage_isVideoFalse() {
+        final OverlayImageView imageView = mock(OverlayImageView.class);
+        tweetMediaView.setOverlayImage(imageView, false);
+
+        verify(imageView).setOverlayDrawable(isNull(Drawable.class));
+    }
+
+    @Test
+    public void testClearImageViews() {
+        final List<MediaEntity> mediaEntities = TestFixtures.createMultipleMediaEntitiesWithPhoto
+                (TweetMediaView.MAX_IMAGE_VIEW_COUNT, 100, 100);
+        tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
+        tweetMediaView.clearImageViews();
+        for (int index = 0; index < TweetMediaView.MAX_IMAGE_VIEW_COUNT; index++) {
+            final ImageView imageView = (ImageView) tweetMediaView.getChildAt(index);
+            Assert.assertEquals(View.GONE, imageView.getVisibility());
+        }
+    }
+}
diff --git a/twitter-core/build.gradle b/twitter-core/build.gradle
index edd3d9fb..8abc4f35 100644
--- a/twitter-core/build.gradle
+++ b/twitter-core/build.gradle
@@ -15,12 +15,8 @@
  *
  */
 
-
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 
-apply from: rootProject.commonPlugins
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -28,7 +24,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
         consumerProguardFiles 'proguard.txt'
     }
 
@@ -72,45 +68,34 @@ android {
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
-    }
-}
-
-internal {
-    dexMethodCount {
-        packageFilter = "com.twitter.sdk.android.core"
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 }
 
 dependencies {
-    compile rootProject.fabric
-    compile rootProject.retrofit
-    compile rootProject.gson
-
-    debugCompile rootProject.fabricTest
-
-    //Will use the provided packages if they are available in the app developers workspace.
-    provided rootProject.okHttp
-    provided rootProject.okHttpUrlConnection
-
-    androidTestCompile (rootProject.junitAddons) {
+    compile dependency.fabric
+    compile dependency.retrofit
+    compile dependency.retrofitGsonConverter
+    compile dependency.gson
+    compile dependency.okHttp
+
+    androidTestCompile dependency.mockito
+    androidTestCompile dependency.dexmakerMockito
+    androidTestCompile dependency.fabricTest
+    androidTestCompile (dependency.junitAddons) {
         transitive = false
     }
 
-    androidTestCompile rootProject.mockito
-    androidTestCompile rootProject.dexmakerMockito
-    androidTestCompile rootProject.fabricTest
-
-    testCompile rootProject.fabricTest
-    testCompile rootProject.mockito
-    testCompile rootProject.junit
-    testCompile rootProject.mavenAntTasks
-    testCompile(rootProject.robolectric) {
+    testCompile dependency.fabricTest
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile dependency.retrofitMock
+    testCompile(dependency.robolectric) {
         exclude group: 'commons-logging', module: 'commons-logging'
         exclude group: 'org.apache.httpcomponents', module: 'httpclient'
     }
-    testCompile (rootProject.junitAddons) {
+    testCompile (dependency.junitAddons) {
         transitive = false
     }
 }
diff --git a/twitter-core/changelog.md b/twitter-core/changelog.md
index 6ba20b6f..419b89d4 100644
--- a/twitter-core/changelog.md
+++ b/twitter-core/changelog.md
@@ -3,6 +3,63 @@
 
 ## Unreleased
 
+## v2.3.1
+
+* Removed unused Vine utility method.
+
+## v2.3.0
+
+* Normalized user-agent to avoid errors with non-ascii characters.
+* Added symbols to Tweet entities.
+
+## v2.2.0
+
+* Added support for user defined OkHttpClient.
+
+## v2.1.0
+
+* Fixed IllegalArgumentException in GuestAuthenticator.
+
+## v2.0.1
+
+* Updated proguard rules for Okhttp3 and Retrofit2.
+* Removed pseudo locales from translations.
+* Moved TwitterCollection from internal package to models.
+* Minor bug fixes.
+
+## v2.0.0
+
+* Dropped support for API versions before API 14 (ICS).
+* Migrated to Retrofit 2.0 and OkHttp 3.2.
+* TwitterApiClient now automatically refreshes expired guest tokens.
+* Removed previously deprecated methods and classes.
+* Removed all public reference to Application Authentication.
+* Fixed issue parsing withheldInCountries field in User object.
+* Added altText field to MediaEntity object.
+* Added Quote Tweet to Tweet object.
+
+## v1.7.0
+
+* Added support for Vine in Tweets
+* Enabled extended Tweet display
+
+## v1.6.8
+
+* Fixed Fake ID exploit
+
+## v1.6.7
+
+* Updated Fabric Base dependency
+
+## v1.6.6
+
+* Fixed security issue where certificate pinning wasn't happening for some requests.
+
+## v1.6.5
+
+ * Removed Verisign Class 3 Certificate from pinning list.
+ * Fixed JavaDocs.
+
 ## v1.6.4
 
 * Fixed retrieving auth token when using OkHttp 2.3+.
diff --git a/twitter-core/gradle.properties b/twitter-core/gradle.properties
index d6aa2d2d..351abff4 100644
--- a/twitter-core/gradle.properties
+++ b/twitter-core/gradle.properties
@@ -17,7 +17,7 @@
 
 // The to be released version. When releasing, drop -SNAPSHOT. After releasing, bump version
 // number and add back -SNAPSHOT
-version=1.6.4-SNAPSHOT
+version=2.3.1-SNAPSHOT
 version_code=1
 
 pom_name=Android SDK Twitter Core
diff --git a/twitter-core/internal-build.gradle b/twitter-core/internal-build.gradle
index 97dae818..0776989e 100644
--- a/twitter-core/internal-build.gradle
+++ b/twitter-core/internal-build.gradle
@@ -15,7 +15,6 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 apply from: rootProject.qualityScript
 apply from: rootProject.deployScript
@@ -30,7 +29,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
         consumerProguardFiles 'proguard.txt'
     }
 
@@ -83,43 +82,34 @@ android {
     publishNonDefault true
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 }
 
-ext.projectDependencies = [
-        ':sdk:fabric:fabric' : 'io.fabric.sdk.android:fabric:+@aar'
-]
-
 dependencies {
-    projectDependencies.each { path, binary ->
-        debugCompile project(path: path, configuration: 'debug')
-        releaseCompile projectOrBinary(path: path, configuration: 'release', binary: binary)
-    }
-
-    compile rootProject.retrofit
-    compile rootProject.gson
-
-    // Will use the provided packages if they are available in the app developers workspace.
-    provided rootProject.okHttp
-    provided rootProject.okHttpUrlConnection
-
-    androidTestCompile rootProject.mockito
-    androidTestCompile rootProject.dexmakerMockito
-    androidTestCompile (rootProject.junitAddons) {
+    compile dependency.retrofit
+    compile dependency.retrofitGsonConverter
+    compile dependency.gson
+    compile dependency.okHttp
+    compile dependency.fabric
+
+    androidTestCompile dependency.mockito
+    androidTestCompile dependency.dexmakerMockito
+    androidTestCompile dependency.fabricTest
+    androidTestCompile (dependency.junitAddons) {
         transitive = false
     }
 
-    testCompile rootProject.fabricTest
-    testCompile rootProject.mockito
-    testCompile rootProject.junit
-    testCompile rootProject.mavenAntTasks
-    testCompile(rootProject.robolectric) {
+    testCompile dependency.fabricTest
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile dependency.retrofitMock
+    testCompile(dependency.robolectric) {
         exclude group: 'commons-logging', module: 'commons-logging'
         exclude group: 'org.apache.httpcomponents', module: 'httpclient'
     }
-    testCompile (rootProject.junitAddons) {
+    testCompile (dependency.junitAddons) {
         transitive = false
     }
 }
diff --git a/twitter-core/lint.xml b/twitter-core/lint.xml
index 15e9df60..3b48abfe 100644
--- a/twitter-core/lint.xml
+++ b/twitter-core/lint.xml
@@ -28,12 +28,12 @@
             path="src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.java"/>
     </issue>
     <issue id="TrulyRandom" severity="ignore" />
-
-    <!--Tempoarily needed for OKHTTP/OKIO https://github.com/square/okio/issues/58-->
-    <issue id="InvalidPackage" severity="ignore">
-        <ignore regexp="okio-1.0.0.jar"/>
+    <issue id="PackageManagerGetSignatures" severity="ignore"/>
+    <issue id="ParcelCreator" severity="error">
+        <ignore
+            path="src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java"/>
+        <ignore
+            path="src/main/java/com/twitter/sdk/android/core/identity/ShareEmailResultReceiver.java"/>
     </issue>
-    <!-- TODO: Update to 'com.google.code.gson:gson:2.3 in next commit'-->
-    <issue id="GradleDependency" severity="ignore"/>
-    <issue id="WrongRegion" severity="ignore" />
+    <issue id="InvalidPackage" severity="ignore"/>
 </lint>
diff --git a/twitter-core/proguard.txt b/twitter-core/proguard.txt
index c5e513ff..0e996435 100644
--- a/twitter-core/proguard.txt
+++ b/twitter-core/proguard.txt
@@ -1,13 +1,23 @@
-#Retrofit Proguard Config https://github.com/square/retrofit
--dontwarn com.squareup.okhttp.**
--dontwarn com.google.appengine.api.urlfetch.**
--dontwarn rx.**
--dontwarn retrofit.**
--keepattributes Signature
+#GSON
+# Retain Annotations for model objects
 -keepattributes *Annotation*
--keep class com.squareup.okhttp.** { *; }
--keep interface com.squareup.okhttp.** { *; }
--keep class retrofit.** { *; }
+
+#Okio
+-dontwarn java.nio.file.**
+-dontwarn org.codehaus.mojo.animal_sniffer.**
+
+#Retrofit 2
+# Platform calls Class.forName on types which do not exist on Android to determine platform.
+-dontnote retrofit2.Platform
+# Platform used when running on RoboVM on iOS. Will not be used at runtime.
+-dontnote retrofit2.Platform$IOS$MainThreadExecutor
+# Platform used when running on Java 8 VMs. Will not be used at runtime.
+-dontwarn retrofit2.Platform$Java8
+# Retain generic type information for use by reflection by converters and adapters.
+-keepattributes Signature
+# Retain declared checked exceptions for use by a Proxy instance.
+-keepattributes Exceptions
+# Retain class members for annotations
 -keepclasseswithmembers class * {
-    @retrofit.http.* <methods>;
-}
+  @retrofit2.http.* <methods>;
+}
\ No newline at end of file
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/ParallelCallableExecutorTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/ParallelCallableExecutorTest.java
deleted file mode 100644
index f18bfad1..00000000
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/ParallelCallableExecutorTest.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.test.AndroidTestCase;
-
-import java.util.List;
-import java.util.concurrent.Callable;
-
-public class ParallelCallableExecutorTest extends AndroidTestCase {
-
-    public void testGetAllValues_raceCondition() throws Exception {
-        final Factory raceConditionFactory = new NonSynchronizedFactory();
-        final ParallelCallableExecutor<Object> executor =
-                new ParallelCallableExecutor<>(
-                        new FactoryCallable(raceConditionFactory),
-                        new FactoryCallable(raceConditionFactory));
-
-        final List<Object> results = executor.getAllValues();
-        assertNotSame(results.get(0), results.get(1));
-    }
-
-    public void testGetAllValues_threadSafe() throws Exception {
-        final Factory raceConditionFactory = new SynchronizedFactory();
-        final ParallelCallableExecutor<Object> executor =
-                new ParallelCallableExecutor<>(
-                        new FactoryCallable(raceConditionFactory),
-                        new FactoryCallable(raceConditionFactory));
-
-        final List<Object> results = executor.getAllValues();
-        assertSame(results.get(0), results.get(1));
-    }
-
-    private static class FactoryCallable implements Callable<Object> {
-        private Factory factory;
-
-        protected FactoryCallable(Factory factory) {
-            this.factory = factory;
-        }
-
-        @Override
-        public Object call() throws Exception {
-            return factory.getObject();
-        }
-    }
-
-    private interface Factory {
-        public Object getObject();
-    }
-
-    private static class NonSynchronizedFactory implements Factory {
-        private Object object;
-
-        @Override
-        public Object getObject() {
-            if (object == null) {
-                try {
-                    Thread.sleep(10); // pretend to do work
-                } catch (InterruptedException ie) {
-                }
-                object = new Object();
-            }
-            return object;
-        }
-    }
-
-    private static class SynchronizedFactory implements Factory {
-        private volatile Object object;
-
-        @Override
-        public Object getObject() {
-            if (object == null) {
-                createObject();
-            }
-            return object;
-        }
-
-        private synchronized void createObject() {
-            if (object == null) {
-                try {
-                    Thread.sleep(1); // pretend to do work
-                } catch (InterruptedException ie) {
-                }
-                object = new Object();
-            }
-        }
-    }
-}
-
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
index 6f74fcf3..ea6bcb88 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
@@ -17,25 +17,37 @@
 
 package com.twitter.sdk.android.core;
 
-import io.fabric.sdk.android.FabricAndroidTestCase;
-import io.fabric.sdk.android.FabricTestUtils;
-
 import com.twitter.sdk.android.core.internal.TwitterApi;
 import com.twitter.sdk.android.core.services.FavoriteService;
 import com.twitter.sdk.android.core.services.StatusesService;
 
-import java.util.concurrent.ExecutorService;
-
-import javax.net.ssl.SSLSocketFactory;
+import io.fabric.sdk.android.FabricAndroidTestCase;
+import io.fabric.sdk.android.FabricTestUtils;
+import okhttp3.OkHttpClient;
 
 import static org.mockito.Mockito.mock;
 
 public class TwitterApiClientTest extends FabricAndroidTestCase {
 
+    private TwitterCore twitterCore;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        twitterCore = new TwitterCore(new TwitterAuthConfig("", ""));
+        FabricTestUtils.with(getContext(), twitterCore);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        super.tearDown();
+        FabricTestUtils.resetFabric();
+    }
+
     public void testGetService_sdkNotStarted() {
         try {
             FabricTestUtils.resetFabric();
-            new TwitterApiClient(mock(Session.class));
+            new TwitterApiClient(mock(TwitterSession.class));
             fail();
         } catch (IllegalStateException ise) {
             assertEquals("Must Initialize Fabric before using singleton()", ise.getMessage());
@@ -44,15 +56,10 @@ public void testGetService_sdkNotStarted() {
 
     public void testConstructor_noSession() throws Exception {
         try {
-            final TwitterCore twitterCore = TwitterTestUtils.createTwitter(
-                    new TwitterAuthConfig("", ""), null);
-            FabricTestUtils.with(getContext(), twitterCore);
-            new TwitterApiClient(null);
+            new TwitterApiClient((TwitterSession) null);
             fail();
         } catch (IllegalArgumentException ie) {
             assertEquals("Session must not be null.", ie.getMessage());
-        } finally {
-            FabricTestUtils.resetFabric();
         }
     }
 
@@ -68,8 +75,27 @@ public void testGetService_differentServices() throws Exception {
         assertNotSame(service, client.getService(StatusesService.class));
     }
 
+    public void testApiClient_cachedGuestAuthClient() throws Exception {
+        final TwitterApiClient customApiClient = new TwitterApiClient(newOkHttpClient());
+        TwitterCore.getInstance().addGuestApiClient(customApiClient);
+
+        assertEquals(customApiClient, TwitterCore.getInstance().getGuestApiClient());
+    }
+
+    public void testApiClient_cachedUserAuthApiClient() throws Exception {
+        final TwitterSession mockUserSession = mock(TwitterSession.class);
+        final TwitterApiClient customApiClient =
+                new TwitterApiClient(mockUserSession, newOkHttpClient());
+        TwitterCore.getInstance().addApiClient(mockUserSession, customApiClient);
+
+        assertEquals(customApiClient, TwitterCore.getInstance().getApiClient(mockUserSession));
+    }
+
     private TwitterApiClient newTwitterApiClient() {
-        return new TwitterApiClient(mock(TwitterAuthConfig.class), mock(Session.class),
-                new TwitterApi(), mock(SSLSocketFactory.class), mock(ExecutorService.class));
+        return new TwitterApiClient(mock(OkHttpClient.class), new TwitterApi());
+    }
+
+    private OkHttpClient newOkHttpClient() {
+        return new OkHttpClient.Builder().build();
     }
 }
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java
index 864ad08d..8d9d1c09 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterAuthConfigTest.java
@@ -20,13 +20,6 @@
 import android.os.Parcel;
 
 import io.fabric.sdk.android.FabricAndroidTestCase;
-import io.fabric.sdk.android.services.network.HttpRequest;
-
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Map;
 
 public class TwitterAuthConfigTest extends FabricAndroidTestCase {
     private static final String NO_PARAM_ERROR_MSG =
@@ -51,50 +44,6 @@ public void testParcelable() {
         assertEquals(TestFixtures.SECRET, parceledAuthConfig.getConsumerSecret());
     }
 
-    public void testSignRequest() throws IOException {
-        final TwitterAuthToken accessToken = new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET);
-        HttpURLConnection connection = null;
-        try {
-            connection = setupSignRequestTest(
-                    "https://api.twitter.com/1.1/statuses/home_timeline.json", "GET");
-            authConfig.signRequest(accessToken, connection);
-            // Verify that request contains authorization header.
-            assertNotNull(connection.getRequestProperty(HttpRequest.HEADER_AUTHORIZATION));
-        } finally {
-            if (connection != null) {
-                connection.disconnect();
-            }
-        }
-    }
-
-    public void testSignRequest_postParameters() throws IOException {
-        final TwitterAuthToken accessToken = new TwitterAuthToken(TestFixtures.TOKEN,
-                TestFixtures.SECRET);
-        HttpURLConnection connection = null;
-        try {
-            connection = setupSignRequestTest("https://api.twitter.com/1/statuses/update.json",
-                    "POST");
-            final Map<String, String> postParams = new HashMap<>();
-            postParams.put("status", "testSignRequest_postParameters");
-            authConfig.signRequest(accessToken, connection, postParams);
-            // Verify that request contains authorization header.
-            assertNotNull(connection.getRequestProperty(HttpRequest.HEADER_AUTHORIZATION));
-        } finally {
-            if (connection != null) {
-                connection.disconnect();
-            }
-        }
-    }
-
-    private HttpURLConnection setupSignRequestTest(String urlStr, String method)
-            throws IOException {
-        final URL url = new URL(urlStr);
-        final HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-        connection.setRequestMethod(method);
-        return connection;
-    }
-
     public void testGetRequestCode() {
         assertEquals(TwitterAuthConfig.DEFAULT_AUTH_REQUEST_CODE, authConfig.getRequestCode());
     }
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
index 5a0002b8..34110170 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
@@ -24,8 +24,12 @@
 import io.fabric.sdk.android.FabricTestUtils;
 import io.fabric.sdk.android.KitStub;
 
+import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 
 import javax.net.ssl.SSLSocketFactory;
 
@@ -91,22 +95,19 @@ public void testLogIn_sdkStartNoTwitterKit() throws Exception {
         }
     }
 
-    public void testLogInGuest_noSdkStart() {
-        final Callback<AppSession> mockCallback = mock(Callback.class);
+    public void testGuestSessionManager_noSdkStart() {
         try {
-            TwitterCore.getInstance().logInGuest(mockCallback);
+            TwitterCore.getInstance().getGuestSessionProvider();
             fail("Should fail if Fabric is not instantiated.");
         } catch (IllegalStateException ie) {
             assertEquals(FABRIC_NOT_INIT_ERROR_MSG, ie.getMessage());
         }
     }
 
-    public void testLogInGuest_sdkStartNoTwitterKit() throws Exception {
+    public void testGuestSessionManager_sdkStartNoTwitterKit() throws Exception {
         FabricTestUtils.with(getContext(), new KitStub<Result>());
-        final Callback<AppSession> mockCallback = mock(Callback.class);
-
         try {
-            TwitterCore.getInstance().logInGuest(mockCallback);
+            TwitterCore.getInstance().getGuestSessionProvider();
             fail("Should fail if Twitter is not instantiated with Fabric.");
         } catch (IllegalStateException ie) {
             assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage());
@@ -154,13 +155,13 @@ public void testGetSessionManager_twitterNotInitialized() throws Exception {
 
     public void testGetAppSessionManager() throws Exception {
         FabricTestUtils.with(getContext(), twitterCore);
-        assertNotNull(twitterCore.getAppSessionManager());
+        assertNotNull(twitterCore.getGuestSessionProvider());
     }
 
     public void testGetAppSessionManager_twitterNotInitialized() throws Exception {
         FabricTestUtils.with(getContext(), new KitStub());
         try {
-            twitterCore.getAppSessionManager();
+            twitterCore.getGuestSessionProvider();
             fail("Should fail if Twitter is not instantiated with Fabric.");
         } catch (IllegalStateException ex) {
             assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
@@ -173,17 +174,6 @@ public void testGetApiClient_activeSessionExists() throws Exception {
         assertNotNull(twitterCore.getApiClient());
     }
 
-    public void testGetApiClient_activeSessionDoesNotExist() throws Exception {
-        FabricTestUtils.with(getContext(), twitterCore);
-        try {
-            twitterCore.getApiClient();
-            fail("Should fail when there are no active sessions");
-        } catch (IllegalStateException e) {
-            assertEquals("Must have valid session. Did you authenticate with Twitter?",
-                    e.getMessage());
-        }
-    }
-
     public void testGetApiClient_twitterNotInitialized() throws Exception {
         FabricTestUtils.with(getContext(), new KitStub<Result>());
         try {
@@ -196,13 +186,23 @@ public void testGetApiClient_twitterNotInitialized() throws Exception {
 
     public void testGetApiClient_withSession() throws Exception {
         FabricTestUtils.with(getContext(), twitterCore);
-        assertNotNull(twitterCore.getApiClient(mock(Session.class)));
+        assertNotNull(twitterCore.getApiClient(mock(TwitterSession.class)));
     }
 
     public void testGetApiClient_withSessionTwitterNotInitialized() throws Exception {
         FabricTestUtils.with(getContext(), new KitStub<Result>());
         try {
-            twitterCore.getApiClient(mock(Session.class));
+            twitterCore.getApiClient(mock(TwitterSession.class));
+            fail("Should fail if Twitter is not instantiated with Fabric.");
+        } catch (IllegalStateException ex) {
+            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
+        }
+    }
+
+    public void testGetGuestApiClient_twitterNotInitialized() throws Exception {
+        FabricTestUtils.with(getContext(), new KitStub<Result>());
+        try {
+            twitterCore.getGuestApiClient();
             fail("Should fail if Twitter is not instantiated with Fabric.");
         } catch (IllegalStateException ex) {
             assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
@@ -219,13 +219,15 @@ public void testGetSSLSocketFactory_contention() throws Exception {
         // We don't want to use FabricTestUtils here because we want to test
         // this when onBackground is also running
         Fabric.with(getContext(), twitterCore);
-        final ParallelCallableExecutor<SSLSocketFactory> executor =
-                new ParallelCallableExecutor<>(
-                        new SSLSocketFactoryCallable(twitterCore),
-                        new SSLSocketFactoryCallable(twitterCore));
-        final List<SSLSocketFactory> sslSocketFactories = executor.getAllValues();
-        assertNotNull(sslSocketFactories.get(0));
-        assertSame(sslSocketFactories.get(0), sslSocketFactories.get(1));
+        final List<SSLSocketFactoryCallable> callables = Arrays.asList(
+                new SSLSocketFactoryCallable(twitterCore),
+                new SSLSocketFactoryCallable(twitterCore));
+        final ExecutorService executorService = Executors.newFixedThreadPool(callables.size());
+        final List<Future<SSLSocketFactory>> socketFactories = executorService.invokeAll(callables);
+
+        assertNotNull(socketFactories.get(0).get());
+        assertNotNull(socketFactories.get(1).get());
+        assertSame(socketFactories.get(0).get(), socketFactories.get(1).get());
     }
 
     private static class SSLSocketFactoryCallable implements Callable<SSLSocketFactory> {
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/ShareEmailClientTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/ShareEmailClientTest.java
index ae21e66d..9da9dd41 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/ShareEmailClientTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/ShareEmailClientTest.java
@@ -19,6 +19,7 @@
 
 import io.fabric.sdk.android.FabricAndroidTestCase;
 import io.fabric.sdk.android.FabricTestUtils;
+import retrofit2.Call;
 
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.TestFixtures;
@@ -27,9 +28,11 @@
 import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.models.User;
 
+import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class ShareEmailClientTest extends FabricAndroidTestCase {
 
@@ -44,6 +47,8 @@ public void setUp() throws Exception {
                 new TwitterCore(new TwitterAuthConfig(TestFixtures.KEY, TestFixtures.SECRET)));
 
         mockEmailService = mock(ShareEmailClient.EmailService.class);
+        when(mockEmailService.verifyCredentials(anyBoolean(), anyBoolean()))
+                .thenReturn(mock(Call.class));
         shareEmailClient = new ShareEmailClient(mock(TwitterSession.class)) {
 
             @Override
@@ -67,6 +72,6 @@ public void testGetEmail() throws Exception {
         final Callback<User> mockCallback = mock(Callback.class);
         shareEmailClient.getEmail(mockCallback);
 
-        verify(mockEmailService).verifyCredentials(eq(true), eq(true), eq(mockCallback));
+        verify(mockEmailService).verifyCredentials(eq(true), eq(true));
     }
 }
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
new file mode 100644
index 00000000..0636d672
--- /dev/null
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal;
+
+import com.twitter.sdk.android.core.GuestSessionProvider;
+import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.TwitterSession;
+import com.twitter.sdk.android.core.internal.network.OkHttpClientHelper;
+
+import java.util.List;
+
+import io.fabric.sdk.android.FabricAndroidTestCase;
+import io.fabric.sdk.android.FabricTestUtils;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+
+import static org.mockito.Mockito.mock;
+
+public class OkHttpClientHelperTest extends FabricAndroidTestCase {
+
+    private TwitterCore twitterCore;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        twitterCore = new TwitterCore(new TwitterAuthConfig("", ""));
+        FabricTestUtils.with(getContext(), twitterCore);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        super.tearDown();
+        FabricTestUtils.resetFabric();
+    }
+
+    public void testGetCustomOkHttpClient_guestAuth() throws Exception {
+        final Interceptor mockInterceptor = mock(Interceptor.class);
+        final OkHttpClient customHttpClient = new OkHttpClient.Builder()
+                .addInterceptor(mockInterceptor).build();
+
+        final GuestSessionProvider sessionProvider = mock(GuestSessionProvider.class);
+        final OkHttpClient guestAuthHttpClient = OkHttpClientHelper.getCustomOkHttpClient(
+                customHttpClient,
+                sessionProvider,
+                twitterCore.getSSLSocketFactory());
+
+        final List<Interceptor> interceptors = guestAuthHttpClient.interceptors();
+        assertTrue(interceptors.contains(mockInterceptor));
+    }
+
+    public void testGetCustomOkHttpClient_userAuth() throws Exception {
+        final Interceptor mockInterceptor = mock(Interceptor.class);
+        final OkHttpClient customHttpClient = new OkHttpClient.Builder()
+                .addInterceptor(mockInterceptor).build();
+
+        final TwitterSession mockSession = mock(TwitterSession.class);
+        final OkHttpClient guestAuthHttpClient = OkHttpClientHelper.getCustomOkHttpClient(
+                customHttpClient,
+                mockSession,
+                new TwitterAuthConfig("", ""),
+                twitterCore.getSSLSocketFactory());
+
+        final List<Interceptor> interceptors = guestAuthHttpClient.interceptors();
+        assertTrue(interceptors.contains(mockInterceptor));
+    }
+}
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClientTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClientTest.java
index fedbd7b4..502878c4 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClientTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClientTest.java
@@ -29,21 +29,17 @@
 import io.fabric.sdk.android.services.settings.SettingsData;
 import io.fabric.sdk.android.services.settings.TestSettingsController;
 
-import com.twitter.sdk.android.core.AppSession;
 import com.twitter.sdk.android.core.BuildConfig;
+import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.TwitterSession;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 
 public class DefaultScribeClientTest extends FabricAndroidTestCase {
@@ -65,7 +61,8 @@
 
     private ExampleKit testKit;
     private DefaultScribeClient scribeClient;
-    private List<SessionManager<? extends Session>> sessionManagers;
+    private SessionManager<TwitterSession> mockTwitterSessionManager;
+    private GuestSessionProvider mockGuestSessionProvider;
 
     @Override
     public void setUp() throws Exception {
@@ -76,16 +73,11 @@ public void setUp() throws Exception {
         Fabric.with(getContext(), new TwitterCore(new TwitterAuthConfig("", "")), new ExampleKit());
         testKit = Fabric.getKit(ExampleKit.class);
 
-        final SessionManager<AppSession> mockAppSessionManager = mock(SessionManager.class);
-        final SessionManager<TwitterSession> mockTwitterSessionManager
-                = mock(SessionManager.class);
+        mockTwitterSessionManager = mock(SessionManager.class);
+        mockGuestSessionProvider = mock(GuestSessionProvider.class);
 
-        sessionManagers = new ArrayList<>();
-        sessionManagers.add(mockTwitterSessionManager);
-        sessionManagers.add(mockAppSessionManager);
-
-        scribeClient = new DefaultScribeClient(testKit,
-                TEST_SCRIBE_KIT_NAME, sessionManagers, mock(IdManager.class));
+        scribeClient = new DefaultScribeClient(testKit, TEST_SCRIBE_KIT_NAME,
+                mockTwitterSessionManager, mockGuestSessionProvider, mock(IdManager.class));
     }
 
     @Override
@@ -185,16 +177,8 @@ public void testGetActiveSession_activeSessionDoesNotExist() {
     public void testGetActiveSession_activeSessionFirstManager() {
         final TwitterSession mockSession = mock(TwitterSession.class);
 
-        when(sessionManagers.get(0).getActiveSession()).thenReturn(mockSession);
-
-        assertSame(mockSession, scribeClient.getActiveSession());
-        // Verify that we exited the loop early.
-        verifyZeroInteractions(sessionManagers.get(1));
-    }
+        when(mockTwitterSessionManager.getActiveSession()).thenReturn(mockSession);
 
-    public void testGetActiveSession_activeSessionSecondManager() {
-        final AppSession mockSession = mock(AppSession.class);
-        when(sessionManagers.get(1).getActiveSession()).thenReturn(mockSession);
         assertSame(mockSession, scribeClient.getActiveSession());
     }
 
@@ -204,7 +188,8 @@ public void testGetScribeSessionId_nullSession() {
 
     public void testGetScribeSessionId_activeSession() {
         final DefaultScribeClient scribeClient = new DefaultScribeClient(testKit,
-                TEST_SCRIBE_KIT_NAME, Collections.EMPTY_LIST, mock(IdManager.class));
+                TEST_SCRIBE_KIT_NAME, mockTwitterSessionManager, mockGuestSessionProvider,
+                mock(IdManager.class));
         final Session mockSession = mock(Session.class);
         when(mockSession.getId()).thenReturn(TEST_ACTIVE_SESSION_ID);
 
diff --git a/twitter-core/src/debug/java/com/twitter/sdk/android/core/ParallelCallableExecutor.java b/twitter-core/src/debug/java/com/twitter/sdk/android/core/ParallelCallableExecutor.java
deleted file mode 100644
index cf67a931..00000000
--- a/twitter-core/src/debug/java/com/twitter/sdk/android/core/ParallelCallableExecutor.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.Callable;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-
-public class ParallelCallableExecutor<Value> {
-
-    private final CountDownLatch latch;
-
-    private final List<Future<Value>> tasks = new ArrayList<>();
-    private final ExecutorService executorService;
-
-    public ParallelCallableExecutor(Callable<Value>... callables) {
-        // The countdown will complete when all callables have "countdown" and
-        // plus the getAllValues() have been called.
-        this.latch = new CountDownLatch(callables.length + 1);
-        executorService = Executors.newFixedThreadPool(callables.length);
-        Future<Value> futureTask;
-        for (Callable callable : callables) {
-            futureTask = executorService.submit(new SynchronizedCallable<Value>(latch, callable));
-            tasks.add(futureTask);
-        }
-    }
-
-    public List<Value> getAllValues() throws Exception {
-        final List<Value> values = new ArrayList<Value>();
-        // This should be the last countdown that will initiate the calls.
-        latch.countDown();
-        for (Future<Value> task : tasks) {
-            values.add(task.get());
-        }
-        executorService.shutdown();
-        return values;
-    }
-
-    private static class SynchronizedCallable<Value> implements Callable<Value> {
-        private final Callable<Value> callable;
-        private final CountDownLatch latch;
-
-        protected SynchronizedCallable(CountDownLatch latch, Callable<Value> callable) {
-            this.callable = callable;
-            this.latch = latch;
-        }
-
-        @Override
-        public Value call() throws Exception {
-            latch.countDown();
-            latch.await();
-            return callable.call();
-        }
-    }
-}
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java b/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java
similarity index 84%
rename from tweet-ui/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java
rename to twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java
index 80ce9666..5472dbea 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java
+++ b/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java
@@ -24,7 +24,7 @@
     private TwitterCoreTestUtils() {}
 
     public static TwitterCore createTwitterCore(TwitterAuthConfig authConfig,
-                                     ConcurrentHashMap<Session, TwitterApiClient> clients) {
-        return new TwitterCore(authConfig, clients);
+            ConcurrentHashMap<Session, TwitterApiClient> clients, TwitterApiClient guestClient) {
+        return new TwitterCore(authConfig, clients, guestClient);
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java
index 4db6af32..8f83c7fa 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java
@@ -18,12 +18,11 @@
 package com.twitter.sdk.android.core;
 
 import com.google.gson.annotations.SerializedName;
-import com.twitter.sdk.android.core.internal.oauth.AuthHeaders;
 
 /**
  * Base class for authentication tokens.
  */
-public abstract class AuthToken implements AuthHeaders {
+public abstract class AuthToken {
 
     /**
      * Unit time or epoch time when the token was created (always in UTC). The
@@ -33,7 +32,7 @@
     protected final long createdAt;
 
     public AuthToken() {
-        createdAt = System.currentTimeMillis();
+        this(System.currentTimeMillis());
     }
 
     protected AuthToken(long createdAt) {
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthTokenAdapter.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthTokenAdapter.java
index e315d0f4..2dde8693 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthTokenAdapter.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthTokenAdapter.java
@@ -26,7 +26,6 @@
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
-import com.twitter.sdk.android.core.internal.oauth.AppAuthToken;
 import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
 import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
 
@@ -49,7 +48,6 @@
         authTypeRegistry.put("oauth1a", TwitterAuthToken.class);
         authTypeRegistry.put("oauth2", OAuth2Token.class);
         authTypeRegistry.put("guest", GuestAuthToken.class);
-        authTypeRegistry.put("app", AppAuthToken.class);
     }
 
     private final Gson gson;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthenticatedClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthenticatedClient.java
deleted file mode 100644
index 47aabcea..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthenticatedClient.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.TwitterRequestHeaders;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.net.URLDecoder;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Scanner;
-import java.util.TreeMap;
-
-import javax.net.ssl.SSLSocketFactory;
-
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.mime.FormUrlEncodedTypedOutput;
-import retrofit.mime.TypedOutput;
-
-/**
- * Provides all functionality of {@link DefaultClient} and
- * additionally adds header signing via {@link com.twitter.sdk.android.core.Session}
- */
-public class AuthenticatedClient extends DefaultClient {
-    private final Session session;
-    private final TwitterAuthConfig authConfig;
-
-    public AuthenticatedClient(TwitterAuthConfig config, Session session,
-            SSLSocketFactory sslSocketFactory) {
-        super(sslSocketFactory);
-        authConfig = config;
-        this.session = session;
-    }
-
-    @Override
-    public Response execute(Request request) throws IOException {
-        request = new Request(request.getMethod(), request.getUrl(),
-                getAuthHeaders(request), request.getBody());
-
-
-        final Response response = wrappedClient.execute(request);
-        return response;
-    }
-
-    protected List<Header> getAuthHeaders(Request request) throws IOException {
-        final TwitterRequestHeaders authHeaders = new TwitterRequestHeaders(request.getMethod(),
-                request.getUrl(), authConfig, session, null, getPostParams(request));
-
-        // Copies the headers from the original list
-        final List<Header> headers = new ArrayList<>(request.getHeaders());
-        for (Map.Entry<String, String> header : authHeaders.getHeaders().entrySet()) {
-            headers.add(new Header(header.getKey(), header.getValue()));
-        }
-        return headers;
-    }
-
-    /**
-     * Parse the {@link retrofit.mime.FormUrlEncodedTypedOutput} Body from a request into a
-     * temporary Uri and use the available URI methods to extract the body parameters into a Map.
-     */
-    protected Map<String, String> getPostParams(Request request) throws IOException {
-        final Map<String, String> params = new TreeMap<>();
-        if ("POST".equals(request.getMethod().toUpperCase(Locale.US))) {
-            final TypedOutput output = request.getBody();
-            if (output instanceof FormUrlEncodedTypedOutput) {
-                final ByteArrayOutputStream os = new ByteArrayOutputStream();
-                output.writeTo(os);
-                final String val = os.toString("UTF-8");
-                if (val.length() > 0) {
-                    params.putAll(getParameters(val));
-                }
-            }
-        }
-        return params;
-    }
-
-    /**
-     * Returns a map of parameters from a {@code application/x-www-form-urlencoded} encoded string
-     * @param input {@code application/x-www-form-urlencoded} encoded string
-     * @return map of parameters
-     */
-    protected Map<String, String> getParameters(String input) {
-        final Map<String, String> parameters = new HashMap<>();
-        final Scanner scanner = new Scanner(input).useDelimiter("&");
-
-        while (scanner.hasNext()) {
-            final String[] param = scanner.next().split("=");
-            if (param.length == 0 || param.length > 2) {
-                throw new IllegalArgumentException("bad parameter");
-            }
-
-            final String name = decode(param[0], "UTF-8");
-            String value = "";
-            if (param.length == 2) {
-                value = decode(param[1], "UTF-8");
-            }
-
-            parameters.put(name, value);
-        }
-
-        return Collections.unmodifiableMap(parameters);
-    }
-
-    protected String decode(String value, String encoding) {
-        try {
-            return URLDecoder.decode(value, encoding);
-        } catch (UnsupportedEncodingException e) {
-            throw new IllegalArgumentException("bad parameter encoding");
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.java
index c629573d..b9510a49 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.java
@@ -17,32 +17,35 @@
 
 package com.twitter.sdk.android.core;
 
-import retrofit.RetrofitError;
-import retrofit.client.Response;
+import retrofit2.Call;
+import retrofit2.Response;
 
 /**
  * Communicates responses from a server or offline requests. One and only one method will be
  * invoked in response to a given request.
  * <p>
- * Callback methods are executed using the {@link retrofit.RestAdapter} callback executor. When none is
+ * Callback methods are executed using the {@link retrofit2.Retrofit} callback executor. When none is
  * specified, the following defaults are used:
  * <ul>
  * <li>Callbacks are executed on the application's main (UI) thread.</li>
  * </ul>
  *
  * @param <T> expected response type
- * @see retrofit.RestAdapter.Builder#setExecutors
  */
-public abstract class Callback<T> implements retrofit.Callback<T> {
+public abstract class Callback<T> implements retrofit2.Callback<T> {
 
     @Override
-    public final void success(T t, Response response) {
-        success(new Result<>(t, response));
+    public final void onResponse(Call<T> call, Response<T> response){
+        if (response.isSuccessful()) {
+            success(new Result<>(response.body(), response));
+        } else {
+            failure(new TwitterApiException(response));
+        }
     }
 
     @Override
-    public final void failure(RetrofitError error) {
-        failure(TwitterApiException.convert(error));
+    public final void onFailure(Call<T> call, Throwable t) {
+        failure(new TwitterException("Request Failure", t));
     }
 
     /**
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultClient.java
deleted file mode 100644
index 3fd9288f..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultClient.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import io.fabric.sdk.android.Fabric;
-
-import java.io.IOException;
-import java.net.HttpURLConnection;
-
-import javax.net.ssl.HttpsURLConnection;
-import javax.net.ssl.SSLSocketFactory;
-
-import retrofit.client.Client;
-import retrofit.client.OkClient;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.client.UrlConnectionClient;
-
-/**
- * Provider of the Retrofit {@link retrofit.client.Client} that is used for API requests.
- * Uses OkHTTP if available, otherwise uses HttpUrlConnection.
- * Pins SSL Certs for requests
- */
-public class DefaultClient implements Client {
-
-    final Client wrappedClient;
-    final SSLSocketFactory sslSocketFactory;
-
-    public DefaultClient(SSLSocketFactory sslSocketFactory) {
-        this.sslSocketFactory = sslSocketFactory;
-        if (hasOkHttpOnClasspath()) {
-            wrappedClient = new OkClient() {
-                @Override
-                protected HttpURLConnection openConnection(Request request) throws IOException {
-                    return openSslConnection(super.openConnection(request));
-                }
-            };
-        } else {
-            wrappedClient = new UrlConnectionClient() {
-                @Override
-                protected HttpURLConnection openConnection(Request request) throws IOException {
-                    return openSslConnection(super.openConnection(request));
-                }
-            };
-        }
-    }
-
-    @Override
-    public Response execute(Request request) throws IOException {
-        return wrappedClient.execute(request);
-    }
-
-
-    /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */
-    private boolean hasOkHttpOnClasspath() {
-        boolean okUrlFactory = false;
-        try {
-            Class.forName("com.squareup.okhttp.OkUrlFactory");
-            okUrlFactory = true;
-        } catch (ClassNotFoundException e) {
-        }
-
-        boolean okHttpClient = false;
-        try {
-            Class.forName("com.squareup.okhttp.OkHttpClient");
-            okHttpClient = true;
-        } catch (ClassNotFoundException e) {
-        }
-
-        if (okHttpClient != okUrlFactory) {
-            Fabric.getLogger().d(TwitterCore.TAG,
-                    "Retrofit detected an unsupported OkHttp on the classpath.\n"
-                    + "To use OkHttp with this version of Retrofit, you'll need:\n"
-                    + "1. com.squareup.okhttp:okhttp:1.6.0 (or newer)\n"
-                    + "2. com.squareup.okhttp:okhttp-urlconnection:1.6.0 (or newer)\n"
-                    + "Note that OkHttp 2.0.0+ is supported!");
-            return false;
-        }
-
-        return okHttpClient;
-    }
-
-    HttpURLConnection openSslConnection(final HttpURLConnection connection) {
-        if (sslSocketFactory != null && connection instanceof HttpsURLConnection) {
-            ((HttpsURLConnection) connection).setSSLSocketFactory(sslSocketFactory);
-        }
-        return connection;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestAuthClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestAuthClient.java
deleted file mode 100644
index e859b1c4..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestAuthClient.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-
-/**
- * Client for requesting guest auth.
- */
-class GuestAuthClient {
-    private final OAuth2Service service;
-
-    /**
-     * Constructor.
-     * @param service a OAuth2Service instance for obtaining guest or app auth
-     * @throws java.lang.IllegalArgumentException if service is null
-     */
-    GuestAuthClient(OAuth2Service service) {
-        if (service == null) {
-            throw new IllegalArgumentException("OAuth2Service must not be null");
-        }
-        this.service = service;
-    }
-
-    /**
-     * Request guest authentication token be set on the app session manager via the OAuth2Service.
-     * @param callback callback receiving an AppSession on success
-     * @throws java.lang.IllegalArgumentException if appSessionManager is null
-     */
-    void authorize(SessionManager<AppSession> appSessionManager, Callback<AppSession> callback) {
-        if (appSessionManager == null) {
-            throw new IllegalArgumentException("SessionManager must not be null");
-        }
-        service.requestGuestAuthToken(new CallbackWrapper(appSessionManager, callback));
-    }
-
-    /**
-     * Callback to OAuth2Service wrapping a developer's logInGuest callback
-     */
-    class CallbackWrapper extends Callback<OAuth2Token> {
-        private final SessionManager<AppSession> appSessionManager;
-        private final Callback<AppSession> callback;
-
-        CallbackWrapper(SessionManager<AppSession> appSessionManager,
-                Callback<AppSession> callback) {
-            this.appSessionManager = appSessionManager;
-            this.callback = callback;
-        }
-
-        @Override
-        public void success(Result<OAuth2Token> result) {
-            final AppSession session = new AppSession(result.data);
-            // set session in manager, manager makes session active if there is no active session
-            appSessionManager.setSession(session.getId(), session);
-            if (callback != null) {
-                callback.success(new Result<>(session, result.response));
-            }
-        }
-
-        @Override
-        public void failure(TwitterException exception) {
-            if (callback != null) {
-                callback.failure(exception);
-            }
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestCallback.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestCallback.java
deleted file mode 100644
index 58f7a87c..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestCallback.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.TwitterApiConstants;
-
-import io.fabric.sdk.android.Fabric;
-
-/**
- * GuestCallback is a wrapper callback which clears the AppSession on app or guest auth token
- * errors. GuestCallback should be used when making requests using guest auth.
- * @param <T> success result type (e.g. Tweet, List<Tweet>, etc.)
- */
-public class GuestCallback<T> extends Callback<T> {
-    protected SessionManager<AppSession> appSessionManager;
-    protected Callback<T> cb;
-
-    /**
-     * Constructs a wrapper callback which clears the AppSession on failures due to token
-     * exceptions.
-     * @param cb Callback to be wrapped.
-     */
-    public GuestCallback(Callback<T> cb) {
-        this(TwitterCore.getInstance(), cb);
-    }
-
-    GuestCallback(TwitterCore twitterCore, Callback<T> cb) {
-        this(twitterCore.getAppSessionManager(), cb);
-    }
-
-    GuestCallback(SessionManager<AppSession> sessionManager, Callback<T> cb) {
-        this.appSessionManager = sessionManager;
-        this.cb = cb;
-    }
-
-    /**
-     * Calls through to the wrapped callback.
-     * @param result the parsed result.
-     */
-    @Override
-    public void success(Result<T> result) {
-        if (cb != null) {
-            cb.success(result);
-        }
-    }
-
-    /**
-     * Checks the exception and handles token expiration errors by clearing the AppSession from the
-     * TwitterCore AppSessionManager.
-     * Derived classes should call through to the base implementation.
-     * @param exception A Twitter Error.
-     */
-    @Override
-    public void failure(TwitterException exception) {
-        if (exception instanceof TwitterApiException) {
-            final TwitterApiException apiException = (TwitterApiException) exception;
-            final int errorCode = apiException.getErrorCode();
-            Fabric.getLogger().e(TwitterCore.TAG, "API call failure.", apiException);
-
-            // clear session if guest auth token or app auth token invalid
-            if (errorCode == TwitterApiConstants.Errors.APP_AUTH_ERROR_CODE ||
-                    errorCode == TwitterApiConstants.Errors.GUEST_AUTH_ERROR_CODE) {
-                if (appSessionManager != null) {
-                    appSessionManager.clearSession(TwitterSession.LOGGED_OUT_USER_ID);
-                }
-            }
-        }
-        if (cb != null) {
-            cb.failure(exception);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/AppSession.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSession.java
similarity index 71%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/AppSession.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSession.java
index 84abbdc1..85952291 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/AppSession.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSession.java
@@ -22,33 +22,34 @@
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
 
 import io.fabric.sdk.android.Fabric;
 import io.fabric.sdk.android.services.persistence.SerializationStrategy;
 
-public class AppSession extends Session<OAuth2Token> {
+public class GuestSession extends Session<GuestAuthToken> {
+    public static final long LOGGED_OUT_USER_ID = 0L;
 
-    AppSession(OAuth2Token authToken) {
-        super(authToken, TwitterSession.LOGGED_OUT_USER_ID);
+    /**
+     * @param authToken Auth token
+     *
+     * @throws java.lang.IllegalArgumentException if token argument is null
+     */
+    public GuestSession(GuestAuthToken authToken) {
+        super(authToken, LOGGED_OUT_USER_ID);
     }
 
-    AppSession(GuestAuthToken authToken) {
-        super(authToken, TwitterSession.LOGGED_OUT_USER_ID);
-    }
-
-    static class Serializer implements SerializationStrategy<AppSession> {
+    static public class Serializer implements SerializationStrategy<GuestSession> {
 
         private final Gson gson;
 
         public Serializer() {
             this.gson = new GsonBuilder()
-                    .registerTypeAdapter(OAuth2Token.class, new AuthTokenAdapter())
+                    .registerTypeAdapter(GuestAuthToken.class, new AuthTokenAdapter())
                     .create();
         }
 
         @Override
-        public String serialize(AppSession session) {
+        public String serialize(GuestSession session) {
             if (session != null && session.getAuthToken() != null) {
                 try {
                     return gson.toJson(session);
@@ -61,10 +62,10 @@ public String serialize(AppSession session) {
         }
 
         @Override
-        public AppSession deserialize(String serializedSession) {
+        public GuestSession deserialize(String serializedSession) {
             if (!TextUtils.isEmpty(serializedSession)) {
                 try {
-                    return gson.fromJson(serializedSession, AppSession.class);
+                    return gson.fromJson(serializedSession, GuestSession.class);
                 } catch (Exception e) {
                     Fabric.getLogger().d(TwitterCore.TAG,
                             "Failed to deserialize session " + e.getMessage());
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java
new file mode 100644
index 00000000..92ca8e0b
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core;
+
+import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
+import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;
+
+import java.util.concurrent.CountDownLatch;
+
+import io.fabric.sdk.android.Fabric;
+
+public class GuestSessionProvider {
+    private final OAuth2Service oAuth2Service;
+    private final SessionManager<GuestSession> sessionManager;
+
+    public GuestSessionProvider(OAuth2Service oAuth2Service,
+            SessionManager<GuestSession> sessionManager) {
+        this.oAuth2Service = oAuth2Service;
+        this.sessionManager = sessionManager;
+    }
+
+    public synchronized GuestSession getCurrentSession() {
+        final GuestSession session = sessionManager.getActiveSession();
+        if (isSessionValid(session)) {
+            return session;
+        }
+
+        refreshToken();
+
+        return sessionManager.getActiveSession();
+    }
+
+    public synchronized GuestSession refreshCurrentSession(GuestSession expiredSession) {
+        final GuestSession session = sessionManager.getActiveSession();
+        if (expiredSession != null && expiredSession.equals(session)) {
+            refreshToken();
+        }
+
+        return sessionManager.getActiveSession();
+    }
+
+    void refreshToken() {
+        Fabric.getLogger().d("GuestSessionProvider", "Refreshing expired guest session.");
+        final CountDownLatch latch = new CountDownLatch(1);
+        oAuth2Service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
+            @Override
+            public void success(Result<GuestAuthToken> result) {
+                sessionManager.setActiveSession(new GuestSession(result.data));
+                latch.countDown();
+            }
+
+            @Override
+            public void failure(TwitterException exception) {
+                sessionManager.clearSession(GuestSession.LOGGED_OUT_USER_ID);
+                latch.countDown();
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException e) {
+            sessionManager.clearSession(GuestSession.LOGGED_OUT_USER_ID);
+        }
+    }
+
+    boolean isSessionValid(GuestSession session) {
+        return session != null
+                && session.getAuthToken() != null
+                && !session.getAuthToken().isExpired();
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthSigning.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthSigning.java
index d4e8689f..18dd1ce8 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthSigning.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthSigning.java
@@ -25,15 +25,15 @@
 import java.util.Map;
 
 /**
- * Provides convenience methods for generating OAuth Headers for Twitter
+ * Provides convenience methods for generating OAuth headers for Twitter
  **/
 public class OAuthSigning {
     static final String VERIFY_CREDENTIALS_URL = TwitterApi.BASE_HOST_URL +
             "/1.1/account/verify_credentials.json";
 
-    protected final TwitterAuthConfig authConfig;
-    protected final TwitterAuthToken authToken;
-    protected final OAuth1aHeaders oAuth1aHeaders;
+    final TwitterAuthConfig authConfig;
+    final TwitterAuthToken authToken;
+    final OAuth1aHeaders oAuth1aHeaders;
 
     /**
      * Constructs OAuthSigning with TwitterAuthConfig and TwitterAuthToken
@@ -45,7 +45,7 @@ public OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken) {
         this(authConfig, authToken, new OAuth1aHeaders());
     }
 
-    public OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken,
+    OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken,
             OAuth1aHeaders oAuth1aHeaders) {
         if (authConfig == null) {
             throw new IllegalArgumentException("authConfig must not be null");
@@ -59,6 +59,19 @@ public OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken,
         this.oAuth1aHeaders = oAuth1aHeaders;
     }
 
+    /**
+     * Gets authorization header for inclusion in HTTP request headers.
+     *
+     * @param method The HTTP method.
+     * @param url The url.
+     * @param postParams The post parameters.
+     */
+    public String getAuthorizationHeader(String method, String url,
+            Map<String, String> postParams) {
+        return oAuth1aHeaders.getAuthorizationHeader(authConfig, authToken, null, method, url,
+                postParams);
+    }
+
     /**
      * Returns OAuth Echo header using given parameters.
      *
@@ -83,7 +96,7 @@ public OAuthSigning(TwitterAuthConfig authConfig, TwitterAuthToken authToken,
      * Returns OAuth Echo header for <a href="https://dev.twitter.com/rest/reference/get/account/verify_credentials">verify_credentials</a> endpoint.
      *
      * @return A map of OAuth Echo headers
-     * @see {@link #getOAuthEchoHeaders(String, String, java.util.Map)}
+     * @see #getOAuthEchoHeaders(String, String, java.util.Map)
      */
     public Map<String, String> getOAuthEchoHeadersForVerifyCredentials() {
         return oAuth1aHeaders.getOAuthEchoHeaders(authConfig, authToken, null,
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java
index 82031b7b..fb2caaa7 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java
@@ -17,7 +17,7 @@
 
 package com.twitter.sdk.android.core;
 
-import retrofit.client.Response;
+import retrofit2.Response;
 
 /**
  * Encapsulates parsed result for delivery.
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java
index 96ab52a0..9935bbd6 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java
@@ -23,7 +23,6 @@
  * Base class for session associated with {@link com.twitter.sdk.android.core.AuthToken}.
  */
 public class Session<T extends AuthToken> {
-
     @SerializedName("auth_token")
     private final T authToken;
 
@@ -31,6 +30,10 @@
     private final long id;
 
     public Session(T authToken, long id) {
+        if (authToken == null) {
+            throw new IllegalArgumentException("AuthToken must not be null.");
+        }
+
         this.authToken = authToken;
         this.id = id;
     }
@@ -51,11 +54,7 @@ public boolean equals(Object o) {
         final Session session = (Session) o;
 
         if (id != session.id) return false;
-        if (authToken != null ? !authToken.equals(session.authToken) : session.authToken != null) {
-            return false;
-        }
-
-        return true;
+        return authToken != null ? authToken.equals(session.authToken) : session.authToken == null;
     }
 
     @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java
index 169098dd..40b2e260 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java
@@ -17,7 +17,12 @@
 
 package com.twitter.sdk.android.core;
 
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
 import com.twitter.sdk.android.core.internal.TwitterApi;
+import com.twitter.sdk.android.core.internal.network.OkHttpClientHelper;
+import com.twitter.sdk.android.core.models.BindingValues;
+import com.twitter.sdk.android.core.models.BindingValuesAdapter;
 import com.twitter.sdk.android.core.models.SafeListAdapter;
 import com.twitter.sdk.android.core.models.SafeMapAdapter;
 import com.twitter.sdk.android.core.services.AccountService;
@@ -29,17 +34,11 @@
 import com.twitter.sdk.android.core.services.SearchService;
 import com.twitter.sdk.android.core.services.StatusesService;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ExecutorService;
-
-import javax.net.ssl.SSLSocketFactory;
 
-import retrofit.RestAdapter;
-import retrofit.android.MainThreadExecutor;
-import retrofit.converter.GsonConverter;
+import okhttp3.OkHttpClient;
+import retrofit2.Retrofit;
+import retrofit2.converter.gson.GsonConverterFactory;
 
 /**
  * A class to allow authenticated access to Twitter API endpoints.
@@ -47,54 +46,82 @@
  * interfaces to {@link com.twitter.sdk.android.core.TwitterApiClient#getService(Class)}
  */
 public class TwitterApiClient {
-    private static final String UPLOAD_ENDPOINT = "https://upload.twitter.com";
     final ConcurrentHashMap<Class, Object> services;
-    final RestAdapter apiAdapter;
-    final RestAdapter uploadAdapter;
+    final Retrofit retrofit;
 
-    TwitterApiClient(TwitterAuthConfig authConfig,
-                     Session session,
-                     TwitterApi twitterApi,
-                     SSLSocketFactory sslSocketFactory, ExecutorService executorService) {
+    /**
+     * Constructs Guest Session based TwitterApiClient.
+     */
+    public TwitterApiClient() {
+        this(OkHttpClientHelper.getOkHttpClient(
+                TwitterCore.getInstance().getGuestSessionProvider(),
+                TwitterCore.getInstance().getSSLSocketFactory()),
+            new TwitterApi());
+    }
 
-        if (session == null) {
-            throw new IllegalArgumentException("Session must not be null.");
-        }
+    /**
+     * Constructs Guest Session based TwitterApiClient, with custom http client.
+     *
+     * The custom http client can be constructed with {@link okhttp3.Interceptor}, and other
+     * optional params provided in {@link okhttp3.OkHttpClient}.
+     */
+    public TwitterApiClient(OkHttpClient client) {
+        this(OkHttpClientHelper.getCustomOkHttpClient(
+                client,
+                TwitterCore.getInstance().getGuestSessionProvider(),
+                TwitterCore.getInstance().getSSLSocketFactory()),
+            new TwitterApi());
+    }
 
-        this.services = new ConcurrentHashMap<>();
+    /**
+     * Constructs User Session based TwitterApiClient.
+     */
+    public TwitterApiClient(TwitterSession session) {
+        this(OkHttpClientHelper.getOkHttpClient(
+                session,
+                TwitterCore.getInstance().getAuthConfig(),
+                TwitterCore.getInstance().getSSLSocketFactory()),
+            new TwitterApi());
+    }
 
-        final Gson gson = new GsonBuilder()
-                .registerTypeAdapterFactory(new SafeListAdapter())
-                .registerTypeAdapterFactory(new SafeMapAdapter())
-                .create();
+    /**
+     * Constructs User Session based TwitterApiClient, with custom http client.
+     *
+     * The custom http client can be constructed with {@link okhttp3.Interceptor}, and other
+     * optional params provided in {@link okhttp3.OkHttpClient}.
+     */
+    public TwitterApiClient(TwitterSession session, OkHttpClient client) {
+        this(OkHttpClientHelper.getCustomOkHttpClient(
+                client,
+                session,
+                TwitterCore.getInstance().getAuthConfig(),
+                TwitterCore.getInstance().getSSLSocketFactory()),
+            new TwitterApi());
+    }
 
-        apiAdapter = new RestAdapter.Builder()
-                .setClient(new AuthenticatedClient(authConfig, session, sslSocketFactory))
-                .setEndpoint(twitterApi.getBaseHostUrl())
-                .setConverter(new GsonConverter(gson))
-                .setExecutors(executorService, new MainThreadExecutor())
-                .build();
+    TwitterApiClient(OkHttpClient client, TwitterApi twitterApi) {
+        this.services = buildConcurrentMap();
+        this.retrofit = buildRetrofit(client, twitterApi);
+    }
 
-        uploadAdapter = new RestAdapter.Builder()
-                .setClient(new AuthenticatedClient(authConfig, session, sslSocketFactory))
-                .setEndpoint(UPLOAD_ENDPOINT)
-                .setConverter(new GsonConverter(gson))
-                .setExecutors(executorService, new MainThreadExecutor())
+    private Retrofit buildRetrofit(OkHttpClient httpClient, TwitterApi twitterApi) {
+        return new Retrofit.Builder()
+                .client(httpClient)
+                .baseUrl(twitterApi.getBaseHostUrl())
+                .addConverterFactory(GsonConverterFactory.create(buildGson()))
                 .build();
     }
 
-    /**
-     * Must be instantiated after {@link com.twitter.sdk.android.core.TwitterCore} has been
-     * initialized via {@link io.fabric.sdk.android.Fabric#with(android.content.Context, io.fabric.sdk.android.Kit[])}.
-     *
-     * @param session Session to be used to create the API calls.
-     *
-     * @throws @{link java.lang.IllegalArgumentException} if TwitterSession argument is null
-     */
-    public TwitterApiClient(Session session) {
-        this(TwitterCore.getInstance().getAuthConfig(), session, new TwitterApi(),
-                TwitterCore.getInstance().getSSLSocketFactory(),
-                TwitterCore.getInstance().getFabric().getExecutorService());
+    private Gson buildGson() {
+        return new GsonBuilder()
+                .registerTypeAdapterFactory(new SafeListAdapter())
+                .registerTypeAdapterFactory(new SafeMapAdapter())
+                .registerTypeAdapter(BindingValues.class, new BindingValuesAdapter())
+                .create();
+    }
+
+    private ConcurrentHashMap buildConcurrentMap() {
+        return new ConcurrentHashMap<>();
     }
 
     /**
@@ -152,7 +179,7 @@ public ConfigurationService getConfigurationService() {
      * upload endpoints.
      */
     public MediaService getMediaService() {
-        return getAdapterService(uploadAdapter, MediaService.class);
+        return getService(MediaService.class);
     }
 
     /**
@@ -163,19 +190,8 @@ public MediaService getMediaService() {
      */
     @SuppressWarnings("unchecked")
     protected <T> T getService(Class<T> cls) {
-        return getAdapterService(apiAdapter, cls);
-    }
-
-    /**
-     * Converts a Retrofit style interfaces into an instance using the given RestAdapter.
-     * @param adapter the retrofit RestAdapter to use to generate a service instance
-     * @param cls Retrofit style service interface
-     * @return instance of cls
-     */
-    @SuppressWarnings("unchecked")
-    protected <T> T getAdapterService(RestAdapter adapter, Class<T> cls) {
         if (!services.contains(cls)) {
-            services.putIfAbsent(cls, adapter.create(cls));
+            services.putIfAbsent(cls, retrofit.create(cls));
         }
         return (T) services.get(cls);
     }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiErrorConstants.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiErrorConstants.java
index 1ce12055..6deea80f 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiErrorConstants.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiErrorConstants.java
@@ -24,12 +24,24 @@
 public class TwitterApiErrorConstants {
     //phone normalization errors
     public static final int DEVICE_REGISTRATION_INVALID_INPUT = 44;
+
     public static final int REGISTRATION_INVALID_INPUT = 300;
     public static final int REGISTRATION_PHONE_NORMALIZATION_FAILED = 303;
+
+    //Incorrect challenge errors
+    //1. account creation
+    public final static int CREATE_ACCOUNT_INVALID_NUMERIC_PIN_PARAMETER = 44;
+    //2. login
+    public final static int LOGIN_INCORRECT_CHALLENGE_RESPONSE = 236;
+
     //device already registered by other user
     public static final int DEVICE_ALREADY_REGISTERED = 285;
     //rate limit for sms exceeded
     public static final int RATE_LIMIT_EXCEEDED = 88;
+
+    //rate limited for login attempts
+    public static final int OVER_LIMIT_LOGIN_VERIFICATION_START = 245;
+
     //registration general error
     public static final int REGISTRATION_GENERAL_ERROR = 284;
     public static final int REGISTRATION_OPERATION_FAILED = 302;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiException.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiException.java
index dca44f12..cc2f7465 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiException.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiException.java
@@ -17,62 +17,44 @@
 
 package com.twitter.sdk.android.core;
 
+import android.text.TextUtils;
+
 import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParser;
+import com.google.gson.GsonBuilder;
 import com.google.gson.JsonSyntaxException;
-import io.fabric.sdk.android.Fabric;
-import com.twitter.sdk.android.core.internal.TwitterApiConstants;
 import com.twitter.sdk.android.core.models.ApiError;
+import com.twitter.sdk.android.core.models.ApiErrors;
+import com.twitter.sdk.android.core.models.SafeListAdapter;
+import com.twitter.sdk.android.core.models.SafeMapAdapter;
 
-import java.io.UnsupportedEncodingException;
-
-import retrofit.RetrofitError;
-import retrofit.mime.TypedByteArray;
+import io.fabric.sdk.android.Fabric;
+import retrofit2.Response;
 
 /**
  * Represents a Twitter API error.
  */
 public class TwitterApiException extends TwitterException {
     public static final int DEFAULT_ERROR_CODE = 0;
-
-    private final RetrofitError retrofitError;
-    private final TwitterRateLimit twitterRateLimit;
     private final ApiError apiError;
+    private final TwitterRateLimit twitterRateLimit;
+    private final int code;
+    private final Response response;
 
-    TwitterApiException(ApiError apiError, TwitterRateLimit twitterRateLimit,
-                        RetrofitError retrofitError) {
-        super(retrofitError.getMessage());
-        this.retrofitError = retrofitError;
-        this.apiError = apiError;
-        this.twitterRateLimit = twitterRateLimit;
-    }
-
-    TwitterApiException(RetrofitError retrofitError) {
-
-        super(createExceptionMessage(retrofitError));
-        setStackTrace(retrofitError.getStackTrace());
-
-        this.retrofitError = retrofitError;
-        twitterRateLimit = createRateLimit(retrofitError);
-        apiError = readApiError(retrofitError);
+    public TwitterApiException(Response response) {
+        this(response, readApiError(response), readApiRateLimit(response), response.code());
     }
 
-    private static String createExceptionMessage(RetrofitError retrofitError) {
-        if (retrofitError.getMessage() != null) {
-            return retrofitError.getMessage();
-        }
-        if (retrofitError.getResponse() != null) {
-            return "Status: " + retrofitError.getResponse().getStatus();
-        }
-        return "unknown error";
+    TwitterApiException(Response response, ApiError apiError, TwitterRateLimit twitterRateLimit,
+            int code) {
+        super(createExceptionMessage(code));
+        this.apiError = apiError;
+        this.twitterRateLimit = twitterRateLimit;
+        this.code = code;
+        this.response = response;
     }
 
-    private static TwitterRateLimit createRateLimit(RetrofitError retrofitError) {
-        if (retrofitError.getResponse() != null) {
-            return new TwitterRateLimit(retrofitError.getResponse().getHeaders());
-        }
-        return null;
+    public int getStatusCode() {
+        return code;
     }
 
     /**
@@ -81,7 +63,7 @@ private static TwitterRateLimit createRateLimit(RetrofitError retrofitError) {
      * @return API error code
      */
     public int getErrorCode() {
-        return apiError == null ? DEFAULT_ERROR_CODE : apiError.getCode();
+        return apiError == null ? DEFAULT_ERROR_CODE : apiError.code;
     }
 
     /**
@@ -90,63 +72,53 @@ public int getErrorCode() {
      * @return API error message
      */
     public String getErrorMessage() {
-        return apiError == null ? null : apiError.getMessage();
-    }
-
-    public boolean canRetry() {
-        final int status = retrofitError.getResponse().getStatus();
-        return status < 400 || status > 499;
-    }
-
-    public RetrofitError getRetrofitError() {
-        return retrofitError;
+        return apiError == null ? null : apiError.message;
     }
 
     public TwitterRateLimit getTwitterRateLimit() {
         return twitterRateLimit;
     }
 
-    public static final TwitterApiException convert(RetrofitError retrofitError) {
-        return new TwitterApiException(retrofitError);
+    public Response getResponse() {
+        return response;
     }
 
-    public static ApiError readApiError(RetrofitError retrofitError) {
-        if (retrofitError == null || retrofitError.getResponse() == null ||
-                retrofitError.getResponse().getBody() == null) {
-            return null;
-        }
-        final byte[] responseBytes = ((TypedByteArray) retrofitError.getResponse().getBody())
-                .getBytes();
+    public static TwitterRateLimit readApiRateLimit(Response response) {
+        return new TwitterRateLimit(response.headers());
+    }
 
-        if (responseBytes == null) return null;
-        final String response;
+    public static ApiError readApiError(Response response) {
         try {
-            response = new String(responseBytes, "UTF-8");
-            return parseApiError(response);
-        } catch (UnsupportedEncodingException e) {
-            Fabric.getLogger().e(TwitterCore.TAG, "Failed to convert to string", e);
+            // The response buffer can only be read once, so we clone the underlying buffer so the
+            // response can be consumed down stream if necessary.
+            final String body = response.errorBody().source().buffer().clone().readUtf8();
+            if (!TextUtils.isEmpty(body)) {
+                return parseApiError(body);
+            }
+        } catch (Exception e) {
+            Fabric.getLogger().e(TwitterCore.TAG, "Unexpected response", e);
         }
+
         return null;
     }
 
-    static ApiError parseApiError(String response) {
-        final Gson gson = new Gson();
+    static ApiError parseApiError(String body) {
+        final Gson gson = new GsonBuilder()
+                .registerTypeAdapterFactory(new SafeListAdapter())
+                .registerTypeAdapterFactory(new SafeMapAdapter())
+                .create();
         try {
-            // Get the "errors" object
-            final JsonObject responseObj = new JsonParser().parse(response).getAsJsonObject();
-            final ApiError[] apiErrors = gson.fromJson(
-                    responseObj.get(TwitterApiConstants.Errors.ERRORS), ApiError[].class);
-            if (apiErrors.length == 0) {
-                return null;
-            } else {
-                // return the first api error.
-                return apiErrors[0];
+            final ApiErrors apiErrors = gson.fromJson(body, ApiErrors.class);
+            if (!apiErrors.errors.isEmpty()) {
+                return apiErrors.errors.get(0);
             }
         } catch (JsonSyntaxException e) {
-            Fabric.getLogger().e(TwitterCore.TAG, "Invalid json: " + response, e);
-        } catch (Exception e) {
-            Fabric.getLogger().e(TwitterCore.TAG, "Unexpected response: " + response, e);
+            Fabric.getLogger().e(TwitterCore.TAG, "Invalid json: " + body, e);
         }
         return null;
     }
+
+    static String createExceptionMessage(int code) {
+        return "HTTP request failed, Status: " + code;
+    }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.java
index 276aeac0..56a8e109 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.java
@@ -20,11 +20,6 @@
 import android.os.Parcel;
 import android.os.Parcelable;
 
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aService;
-
-import java.net.HttpURLConnection;
-import java.util.Map;
-
 /**
  * Authorization configuration details.
  */
@@ -54,7 +49,7 @@ public TwitterAuthConfig createFromParcel(Parcel in) {
      * @param consumerKey    The consumer key.
      * @param consumerSecret The consumer secret.
      *
-     * @throws {@link java.lang.IllegalArgumentException} if consumer key or consumer secret is null.
+     * @throws java.lang.IllegalArgumentException if consumer key or consumer secret is null.
      */
     public TwitterAuthConfig(String consumerKey, String consumerSecret) {
         if (consumerKey == null || consumerSecret == null) {
@@ -70,28 +65,6 @@ private TwitterAuthConfig(Parcel in) {
         consumerSecret = in.readString();
     }
 
-    /**
-     * Signs the {@code HttpURLConnection} request using the specified access token.
-     *
-     * @param accessToken The access token to use to sign the request.
-     * @param request The request to sign.
-     */
-    public void signRequest(TwitterAuthToken accessToken, HttpURLConnection request) {
-        OAuth1aService.signRequest(this, accessToken, request, null);
-    }
-
-    /**
-     * Signs the {@code HttpURLConnection} request using the specified access token.
-     *
-     * @param accessToken The access token to use to sign the request.
-     * @param request The request to sign.
-     * @param postParams The post parameters for the request.
-     */
-    public void signRequest(TwitterAuthToken accessToken, HttpURLConnection request,
-            Map<String, String> postParams) {
-        OAuth1aService.signRequest(this, accessToken, request, postParams);
-    }
-
     /**
      * @return the consumer key
      */
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
index df5341c6..1c5e1922 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
@@ -20,13 +20,8 @@
 import android.os.Parcel;
 import android.os.Parcelable;
 
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;
-
 import com.google.gson.annotations.SerializedName;
 
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Represents an authorization token and its secret.
  */
@@ -74,17 +69,6 @@ public boolean isExpired() {
         return false;
     }
 
-    @Override
-    public Map<String, String> getAuthHeaders(TwitterAuthConfig authConfig,
-            String method, String url, Map<String, String> postParams) {
-        final Map<String, String> headers = new HashMap<>(1);
-        final String authorizationHeader =
-                new OAuth1aHeaders().getAuthorizationHeader(authConfig, this, null, method, url,
-                        postParams);
-        headers.put(HEADER_AUTHORIZATION, authorizationHeader);
-        return headers;
-    }
-
     @Override
     public String toString() {
         final StringBuilder sb = new StringBuilder()
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java
index 49cd0b8e..eaa2a456 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java
@@ -32,8 +32,6 @@
 import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;
 import com.twitter.sdk.android.core.internal.scribe.TwitterCoreScribeClientHolder;
 
-import java.util.ArrayList;
-import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
 import javax.net.ssl.SSLSocketFactory;
@@ -47,27 +45,31 @@
 
     static final String PREF_KEY_ACTIVE_TWITTER_SESSION = "active_twittersession";
     static final String PREF_KEY_TWITTER_SESSION = "twittersession";
-    static final String PREF_KEY_ACTIVE_APP_SESSION = "active_appsession";
-    static final String PREF_KEY_APP_SESSION = "appsession";
+    static final String PREF_KEY_ACTIVE_GUEST_SESSION = "active_guestsession";
+    static final String PREF_KEY_GUEST_SESSION = "guestsession";
     static final String SESSION_PREF_FILE_NAME = "session_store";
 
     SessionManager<TwitterSession> twitterSessionManager;
-    SessionManager<AppSession> appSessionManager;
+    SessionManager<GuestSession> guestSessionManager;
     SessionMonitor<TwitterSession> sessionMonitor;
 
     private final TwitterAuthConfig authConfig;
     private final ConcurrentHashMap<Session, TwitterApiClient> apiClients;
+    private volatile TwitterApiClient guestClient;
+    private volatile GuestSessionProvider guestSessionProvider;
     private volatile SSLSocketFactory sslSocketFactory;
 
     public TwitterCore(TwitterAuthConfig authConfig) {
-        this.authConfig = authConfig;
-        apiClients = new ConcurrentHashMap<>();
+        this(authConfig, new ConcurrentHashMap<Session, TwitterApiClient>(), null);
     }
 
+    // Testing only
     TwitterCore(TwitterAuthConfig authConfig,
-                ConcurrentHashMap<Session, TwitterApiClient> apiClients) {
+                ConcurrentHashMap<Session, TwitterApiClient> apiClients,
+                TwitterApiClient guestClient) {
         this.authConfig = authConfig;
         this.apiClients = apiClients;
+        this.guestClient = guestClient;
     }
 
     public static TwitterCore getInstance() {
@@ -123,13 +125,14 @@ protected boolean onPreExecute() {
                 new TwitterSession.Serializer(), PREF_KEY_ACTIVE_TWITTER_SESSION,
                 PREF_KEY_TWITTER_SESSION);
 
+        guestSessionManager = new PersistedSessionManager<>(
+                new PreferenceStoreImpl(getContext(), SESSION_PREF_FILE_NAME),
+                new GuestSession.Serializer(), PREF_KEY_ACTIVE_GUEST_SESSION,
+                PREF_KEY_GUEST_SESSION);
+
         sessionMonitor = new SessionMonitor<>(twitterSessionManager,
                 getFabric().getExecutorService(), new TwitterSessionVerifier());
 
-        appSessionManager = new PersistedSessionManager<>(
-                new PreferenceStoreImpl(getContext(), SESSION_PREF_FILE_NAME),
-                new AppSession.Serializer(), PREF_KEY_ACTIVE_APP_SESSION, PREF_KEY_APP_SESSION);
-
         return true;
     }
 
@@ -137,8 +140,9 @@ protected boolean onPreExecute() {
     protected Boolean doInBackground() {
         // Trigger restoration of session
         twitterSessionManager.getActiveSession();
-        appSessionManager.getActiveSession();
+        guestSessionManager.getActiveSession();
         getSSLSocketFactory();
+        getGuestSessionProvider();
         initializeScribeClient();
         // Monitor activity lifecycle after sessions have been restored. Otherwise we would not
         // have any sessions to monitor anyways.
@@ -158,10 +162,8 @@ private static void checkInitialized() {
     }
 
     private void initializeScribeClient() {
-        final List<SessionManager<? extends Session>> sessionManagers = new ArrayList<>();
-        sessionManagers.add(twitterSessionManager);
-        sessionManagers.add(appSessionManager);
-        TwitterCoreScribeClientHolder.initialize(this, sessionManagers, getIdManager());
+        TwitterCoreScribeClientHolder.initialize(this, getSessionManager(),
+                getGuestSessionProvider(), getIdManager());
     }
 
     /**********************************************************************************************
@@ -182,20 +184,6 @@ public void logIn(Activity activity, Callback<TwitterSession> callback) {
         new TwitterAuthClient().authorize(activity, callback);
     }
 
-    /**
-     * Performs guest login.
-     *
-     * @param callback The callback interface to invoke when guest login completes.
-     *
-     * @throws java.lang.IllegalStateException if {@link io.fabric.sdk.android.Fabric}
-     *          or {@link TwitterCore} has not been initialized.
-     */
-    public void logInGuest(final Callback<AppSession> callback) {
-        checkInitialized();
-        final OAuth2Service service = new OAuth2Service(this, null, new TwitterApi());
-        new GuestAuthClient(service).authorize(appSessionManager, callback);
-    }
-
     /**
      * Logs out the user, clearing user session. This will not make a network request to invalidate
      * the session.
@@ -222,29 +210,25 @@ public void logOut() {
         return twitterSessionManager;
     }
 
-    /**
-     * @return the {@link com.twitter.sdk.android.core.SessionManager} for app sessions.
-     *
-     * @throws java.lang.IllegalStateException if {@link io.fabric.sdk.android.Fabric}
-     *          or {@link TwitterCore} has not been initialized.
-     */
-    public SessionManager<AppSession> getAppSessionManager() {
+    public GuestSessionProvider getGuestSessionProvider() {
         checkInitialized();
-        return appSessionManager;
+        if (guestSessionProvider == null) {
+            createGuestSessionProvider();
+        }
+        return guestSessionProvider;
     }
 
-    private Session getActiveSession() {
-        // Prefer user session over app session.
-        Session session = twitterSessionManager.getActiveSession();
-        if (session == null) {
-            session = appSessionManager.getActiveSession();
+    private synchronized void createGuestSessionProvider() {
+        if (guestSessionProvider == null) {
+            final OAuth2Service service =
+                    new OAuth2Service(this, getSSLSocketFactory(), new TwitterApi());
+            guestSessionProvider = new GuestSessionProvider(service, guestSessionManager);
         }
-        return session;
     }
 
     /**
      * Creates {@link com.twitter.sdk.android.core.TwitterApiClient} from default
-     * {@link com.twitter.sdk.android.core.Session} retrieved from {@link com.twitter.sdk.android.core.SessionManager}.
+     * {@link com.twitter.sdk.android.core.Session}.
      *
      * Caches internally for efficient access.
      *
@@ -253,10 +237,9 @@ private Session getActiveSession() {
      */
     public TwitterApiClient getApiClient() {
         checkInitialized();
-        final Session session = getActiveSession();
+        final TwitterSession session = twitterSessionManager.getActiveSession();
         if (session == null) {
-            throw new IllegalStateException("Must have valid session."
-                    + " Did you authenticate with Twitter?");
+            return getGuestApiClient();
         }
 
         return getApiClient(session);
@@ -272,11 +255,78 @@ public TwitterApiClient getApiClient() {
      * @throws java.lang.IllegalStateException if {@link io.fabric.sdk.android.Fabric}
      *          or {@link TwitterCore} has not been initialized.
      */
-    public TwitterApiClient getApiClient(Session session) {
+    public TwitterApiClient getApiClient(TwitterSession session) {
         checkInitialized();
         if (!apiClients.containsKey(session)) {
             apiClients.putIfAbsent(session, new TwitterApiClient(session));
         }
         return apiClients.get(session);
     }
+
+    /**
+     * Add custom {@link com.twitter.sdk.android.core.TwitterApiClient} for guest auth access.
+     *
+     * Only adds guest auth client if it's not already defined. Caches internally for efficient
+     * access and storing it in TwitterCore's singleton.
+     *
+     * @param customTwitterApiClient the custom twitter api client
+     *
+     * @throws java.lang.IllegalStateException if {@link io.fabric.sdk.android.Fabric}
+     *          or {@link TwitterCore} has not been initialized.
+     */
+    public void addGuestApiClient(TwitterApiClient customTwitterApiClient) {
+        checkInitialized();
+        if (guestClient == null) {
+            createGuestClient(customTwitterApiClient);
+        }
+    }
+
+    /**
+     * Add custom {@link com.twitter.sdk.android.core.TwitterApiClient} for authenticated
+     * {@link com.twitter.sdk.android.core.Session} access.
+     *
+     * Only adds session auth client if it's not already defined. Caches internally for efficient
+     * access and storing it in TwitterCore's singleton.
+     *
+     * @param session the session
+     * @param customTwitterApiClient the custom twitter api client
+     *
+     * @throws java.lang.IllegalStateException if {@link io.fabric.sdk.android.Fabric}
+     *          or {@link TwitterCore} has not been initialized.
+     */
+    public void addApiClient(TwitterSession session, TwitterApiClient customTwitterApiClient) {
+        checkInitialized();
+        if (!apiClients.containsKey(session)) {
+            apiClients.putIfAbsent(session, customTwitterApiClient);
+        }
+    }
+
+    /**
+     * Creates {@link com.twitter.sdk.android.core.TwitterApiClient} using guest authentication.
+     *
+     * Caches internally for efficient access.
+     *
+     * @throws java.lang.IllegalStateException if {@link io.fabric.sdk.android.Fabric}
+     *          or {@link TwitterCore} has not been initialized.
+     */
+    public TwitterApiClient getGuestApiClient() {
+        checkInitialized();
+        if (guestClient == null) {
+            createGuestClient();
+        }
+
+        return guestClient;
+    }
+
+    private synchronized void createGuestClient() {
+        if (guestClient == null) {
+            guestClient = new TwitterApiClient();
+        }
+    }
+
+    private synchronized void createGuestClient(TwitterApiClient twitterApiClient) {
+        if (guestClient == null) {
+            guestClient = twitterApiClient;
+        }
+    }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterPinningInfoProvider.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterPinningInfoProvider.java
index 9284f5fc..5e936b26 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterPinningInfoProvider.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterPinningInfoProvider.java
@@ -35,7 +35,6 @@
         pinMap.put("VERISIGN_CLASS1_G3", "5519b278acb281d7eda7abc18399c3bb690424b5");
         pinMap.put("VERISIGN_CLASS2_G2", "1237ba4517eead2926fdc1cdfebeedf2ded9145c");
         pinMap.put("VERISIGN_CLASS2_G3", "5abec575dcaef3b08e271943fc7f250c3df661e3");
-        pinMap.put("VERISIGN_CLASS3", "e27f7bd877d5df9e0a3f9eb4cb0e2ea9efdb6977");
         pinMap.put("VERISIGN_CLASS3_G2", "1a21b4952b6293ce18b365ec9c0e934cb381e6d4");
         pinMap.put("VERISIGN_CLASS3_G3", "22f19e2ec6eaccfc5d2346f4c2e8f6c554dd5e07");
         pinMap.put("VERISIGN_CLASS3_G4", "ed663135d31bd4eca614c429e319069f94c12650");
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterRateLimit.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterRateLimit.java
index af48aafa..d4d046b6 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterRateLimit.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterRateLimit.java
@@ -17,44 +17,34 @@
 
 package com.twitter.sdk.android.core;
 
-import java.util.List;
-
-import io.fabric.sdk.android.services.common.CurrentTimeProvider;
-import io.fabric.sdk.android.services.common.SystemCurrentTimeProvider;
-import retrofit.client.Header;
+import okhttp3.Headers;
 
 /**
  * Represents the rate limit data returned on the headers of a request
  *
  * @see <a href="https://dev.twitter.com/rest/public/rate-limiting">Rate Limiting</a>
  */
-class TwitterRateLimit  {
+public class TwitterRateLimit  {
 
     private final static String LIMIT_KEY = "x-rate-limit-limit";
     private final static String REMAINING_KEY = "x-rate-limit-remaining";
     private final static String RESET_KEY = "x-rate-limit-reset";
 
-    private final long epochSeconds;
     private int requestLimit;
     private int remainingRequest;
     private long resetSeconds;
 
-    TwitterRateLimit(final List<Header> headers) {
-        this(headers, new SystemCurrentTimeProvider());
-    }
-
-    TwitterRateLimit(final List<Header> headers, CurrentTimeProvider timeProvider) {
+    TwitterRateLimit(final Headers headers) {
         if (headers == null) {
             throw new IllegalArgumentException("headers must not be null");
         }
-        this.epochSeconds = timeProvider.getCurrentTimeMillis() / 1000L;
-        for (Header header : headers) {
-            if (LIMIT_KEY.equals(header.getName())) {
-                requestLimit = Integer.valueOf(header.getValue());
-            } else if (REMAINING_KEY.equals(header.getName())) {
-                remainingRequest = Integer.valueOf(header.getValue());
-            } else if (RESET_KEY.equals(header.getName())) {
-                resetSeconds = Long.valueOf(header.getValue());
+        for (int i = 0; i < headers.size(); i++) {
+            if (LIMIT_KEY.equals(headers.name(i))) {
+                requestLimit = Integer.valueOf(headers.value(i));
+            } else if (REMAINING_KEY.equals(headers.name(i))) {
+                remainingRequest = Integer.valueOf(headers.value(i));
+            } else if (RESET_KEY.equals(headers.name(i))) {
+                resetSeconds = Long.valueOf(headers.value(i));
             }
         }
     }
@@ -79,22 +69,4 @@ public int getRemaining() {
     public long getReset() {
         return resetSeconds;
     }
-
-    /**
-     * Returns epoch time that request was made.
-     */
-    public long getRequestedTime() {
-        return epochSeconds;
-    }
-
-    /**
-     * Returns epoch time remaining in rate limit window.
-     */
-    public long getRemainingTime() {
-        if (epochSeconds > resetSeconds) {
-            return 0;
-        } else {
-            return resetSeconds - epochSeconds;
-        }
-    }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterSession.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterSession.java
index 1232783a..28fe84f5 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterSession.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterSession.java
@@ -29,29 +29,21 @@
  * Represents a Twitter session that is associated with a {@link com.twitter.sdk.android.core.TwitterAuthToken}.
  */
 public class TwitterSession extends Session<TwitterAuthToken> {
-
     public static final long UNKNOWN_USER_ID = -1L;
     public static final String UNKNOWN_USER_NAME = "";
 
-    public static final long LOGGED_OUT_USER_ID = 0L;
-
     @SerializedName("user_name")
     private final String userName;
 
     /**
-     * @param token     Auth token
+     * @param authToken Auth token
      * @param userId    User ID
      * @param userName  User Name
      *
-     * @throws {@link java.lang.IllegalArgumentException} if token argument is null
+     * @throws java.lang.IllegalArgumentException if token argument is null
      */
-    public TwitterSession(TwitterAuthToken token, long userId, String userName) {
-        super(token, userId);
-
-        if (token == null) {
-            throw new IllegalArgumentException("AuthToken must not be null.");
-        }
-
+    public TwitterSession(TwitterAuthToken authToken, long userId, String userName) {
+        super(authToken, userId);
         this.userName = userName;
     }
 
@@ -71,10 +63,8 @@ public boolean equals(Object o) {
 
         final TwitterSession that = (TwitterSession) o;
 
-        if (userName != null ? !userName.equals(that.userName) : that.userName != null)
-            return false;
+        return userName != null ? userName.equals(that.userName) : that.userName == null;
 
-        return true;
     }
 
     @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.java
index 0b62d457..b4f29407 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.java
@@ -21,6 +21,7 @@
 import android.content.Intent;
 
 import com.twitter.sdk.android.core.Callback;
+import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterAuthException;
 import com.twitter.sdk.android.core.TwitterAuthToken;
@@ -88,8 +89,8 @@ public boolean handleOnActivityResult(int requestCode, int resultCode, Intent da
                 final String tokenSecret = data.getStringExtra(EXTRA_TOKEN_SECRET);
                 final String screenName = data.getStringExtra(EXTRA_SCREEN_NAME);
                 final long userId = data.getLongExtra(EXTRA_USER_ID, 0L);
-                callback.success(new TwitterSession(
-                        new TwitterAuthToken(token, tokenSecret), userId, screenName), null);
+                callback.success(new Result<>(new TwitterSession(
+                        new TwitterAuthToken(token, tokenSecret), userId, screenName), null));
             } else if (data != null && data.hasExtra(EXTRA_AUTH_ERROR)) {
                 callback.failure(
                         (TwitterAuthException) data.getSerializableExtra(EXTRA_AUTH_ERROR));
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.java
index 3be012bc..e757bc68 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.java
@@ -163,10 +163,10 @@ private static boolean checkAppSignature(PackageManager pm, String packageName,
             return false;
         }
         for (Signature s : p.signatures) {
-            if (requiredSignature.equals(s.toCharsString())) {
-                return true;
+            if (!requiredSignature.equals(s.toCharsString())) {
+                return false;
             }
         }
-        return false;
+        return true;
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/ShareEmailClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/ShareEmailClient.java
index 5ebf00e1..453c56ac 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/ShareEmailClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/ShareEmailClient.java
@@ -24,8 +24,9 @@
 import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.models.User;
 
-import retrofit.http.GET;
-import retrofit.http.Query;
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
 
 class ShareEmailClient extends TwitterApiClient {
     static final int RESULT_CODE_CANCELED = Activity.RESULT_CANCELED;
@@ -46,14 +47,13 @@
      * @param callback The callback to invoke when the request completes.
      */
     protected void getEmail(Callback<User> callback) {
-        getService(EmailService.class).verifyCredentials(true, true, callback);
+        getService(EmailService.class).verifyCredentials(true, true).enqueue(callback);
     }
 
     interface EmailService {
         @GET("/1.1/account/verify_credentials.json?include_email=true")
-        void verifyCredentials(
+        Call<User> verifyCredentials(
                 @Query("include_entities") Boolean includeEntities,
-                @Query("skip_status") Boolean skipStatus,
-                Callback<User> cb);
+                @Query("skip_status") Boolean skipStatus);
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
index bd75b197..ba6edce3 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
@@ -236,5 +236,5 @@ public void failure(TwitterException exception) {
                     exception);
             callback.failure(exception);
         }
-    };
+    }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AuthRequestQueue.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AuthRequestQueue.java
deleted file mode 100644
index 37978d25..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AuthRequestQueue.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.TwitterException;
-
-import java.util.Queue;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/*
- * Queues requests until a session is ready. Gets an active session from the sessionProvider or
- * requests sessionProvider perform authentication.
- *
- * In order to solve concurrent access problems we have put synchronized around the public methods
- * in order to lock queue access so that we can avoid orphaning requests in the queue
- */
-public class AuthRequestQueue {
-    final Queue<Callback<Session>> queue;
-    // We use this to flag to mark that a session is either being restored from file or
-    // requested from the server
-    final AtomicBoolean awaitingSession;
-
-    private final SessionProvider sessionProvider;
-
-    public AuthRequestQueue(SessionProvider sessionProvider) {
-        this.sessionProvider = sessionProvider;
-        queue = new ConcurrentLinkedQueue<>();
-        awaitingSession = new AtomicBoolean(true);
-    }
-
-    /*
-     * addRequest has 3 different branches
-     * 1: if we are not waiting for a session (from file restoration or from network request)
-     *    and there is an active session and an authConfig it will simply pass the request
-     *    off to the network layer
-     * 2: if we have already kicked off a request to get a session or otherwise just
-     *    don't have an auth config in the form of an oauth2service (provided once TweetUi
-     *    has been given a client id and secret we will queue the request
-     * 3: otherwise we queue the request and start a request to the twitter api to get a session.
-     *    We set the request flag to be active so that we don't end up kicking off duplicate
-     *    requests.
-     */
-    public synchronized boolean addRequest(Callback<Session> callback) {
-        if (callback == null) return false;
-
-        // awaitingSession will be true until session restoration completes in the background.
-        if (!awaitingSession.get()) {
-            final Session session = getValidSession();
-            if (session != null) {
-                callback.success(new Result<>(session, null));
-            } else {
-                queue.add(callback);
-                awaitingSession.set(true);
-                requestAuth();
-            }
-        } else {
-            queue.add(callback);
-        }
-        return true;
-    }
-
-    /*
-     * We have 3 different outcomes:
-     * 1. Valid session is restored, we need to flush requests
-     * 2. No valid session and, there are pending requests, we need to initiate AuthRequest
-     * 3. No valid session and nothing awaiting in the queue. We only need to remove the flag,
-     * first request will trigger AuthRequest.
-     */
-    public synchronized void sessionRestored(Session session) {
-        if (session != null) {
-            flushQueueOnSuccess(session);
-        } else if (queue.size() > 0) {
-            requestAuth();
-        } else {
-            // We can not find any session on the disk, future requests for Session
-            awaitingSession.set(false);
-        }
-    }
-
-    void requestAuth() {
-        sessionProvider.requestAuth(new Callback<Session>() {
-            @Override
-            public void success(Result<Session> result) {
-                flushQueueOnSuccess(result.data);
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                flushQueueOnError(exception);
-            }
-        });
-    }
-
-    /*
-     * Clears the request queue using the given session.
-     */
-    synchronized void flushQueueOnSuccess(Session session) {
-        awaitingSession.set(false);
-
-        while (!queue.isEmpty()) {
-            final Callback<Session> request = queue.poll();
-            request.success(new Result<>(session, null));
-        }
-    }
-
-    /*
-     * If we weren't able to get a session we can't make these requests so we just call back to the
-     * configured listener with an error.
-     */
-    synchronized void flushQueueOnError(TwitterException error) {
-        awaitingSession.set(false);
-
-        while (!queue.isEmpty()) {
-            final Callback request = queue.poll();
-            request.failure(error);
-        }
-    }
-
-    // not synchronized, only package protected for testing
-    Session getValidSession() {
-        final Session session = sessionProvider.getActiveSession();
-        // Only use session if it has auth token.
-        if (session != null && session.getAuthToken() != null &&
-                !session.getAuthToken().isExpired()) {
-            return session;
-        } else {
-            return null;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/MigrationHelper.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/MigrationHelper.java
index 42848db7..1e3345e2 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/MigrationHelper.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/MigrationHelper.java
@@ -74,11 +74,7 @@ public PrefixFileNameFilter(String prefix) {
 
         @Override
         public boolean accept(File file, String filename) {
-            if (filename.startsWith(prefix)) {
-                return true;
-            }
-
-            return false;
+            return filename.startsWith(prefix);
         }
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java
index b734c91e..aff53d08 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java
@@ -47,7 +47,7 @@
      * @param executorService used to
      */
     public SessionMonitor(SessionManager<T> sessionManager, ExecutorService executorService,
-            SessionVerifier sessionVerifier) {
+            SessionVerifier<T> sessionVerifier) {
         this(sessionManager, new SystemCurrentTimeProvider(),
                 executorService, new MonitorState(), sessionVerifier);
     }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionProvider.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionProvider.java
deleted file mode 100644
index 966cc78a..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionProvider.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.SessionManager;
-
-import java.util.List;
-
-public abstract class SessionProvider {
-    private final List<SessionManager<? extends  Session>> sessionManagers;
-
-    public SessionProvider(List<SessionManager<? extends Session>> sessionManagers) {
-        this.sessionManagers = sessionManagers;
-    }
-
-    public Session getActiveSession() {
-        Session session = null;
-        for (SessionManager<? extends Session> sessionManager : sessionManagers) {
-            session = sessionManager.getActiveSession();
-            if (session != null) {
-                break;
-            }
-        }
-        return session;
-    }
-
-    public abstract void requestAuth(Callback<Session> cb);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionVerifier.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionVerifier.java
index 39b64496..1b08de47 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionVerifier.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionVerifier.java
@@ -19,6 +19,6 @@
 
 import com.twitter.sdk.android.core.Session;
 
-public interface SessionVerifier {
-    void verifySession(Session session);
+public interface SessionVerifier<T extends Session> {
+    void verifySession(T session);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.java
index eece304e..d37201f0 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.java
@@ -20,6 +20,8 @@
 import android.net.Uri;
 import android.os.Build;
 
+import java.text.Normalizer;
+
 public class TwitterApi {
 
     public static final String BASE_HOST = "api.twitter.com";
@@ -76,6 +78,23 @@ public static String buildUserAgent(String clientName, String version) {
                 .append(Build.PRODUCT)
                         // NOTE: We do not add client_source, preload, or wifi information.
                 .append(')');
-        return ua.toString();
+        return normalizeString(ua.toString());
+    }
+
+    static String normalizeString(String str) {
+        final String normalizedString = Normalizer.normalize(str, Normalizer.Form.NFD);
+        return stripNonAscii(normalizedString);
+    }
+
+    static String stripNonAscii(String str) {
+        final StringBuilder sb = new StringBuilder(str.length());
+        for (int i = 0; i < str.length(); i++) {
+            final char c = str.charAt(i);
+            if (c > '\u001f' && c < '\u007f') {
+                sb.append(c);
+            }
+        }
+
+        return sb.toString();
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApiConstants.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApiConstants.java
index b27b8147..608d9f88 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApiConstants.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApiConstants.java
@@ -17,17 +17,10 @@
 
 package com.twitter.sdk.android.core.internal;
 
-
 public class TwitterApiConstants {
     public static final int MAX_TWEET_CHARS = 140;
 
-    public static class Base {
-        public static final String PARAM_ID = "id";
-        public static final String FIELD_ID = "id";
-    }
-
-    public static class Errors extends Base {
-        public static final String ERRORS = "errors";
+    public static class Errors {
 
         // error when app auth token not recognized (such as when expired)
         public static final int APP_AUTH_ERROR_CODE = 89;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterRequestHeaders.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterRequestHeaders.java
deleted file mode 100644
index d1a66f33..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterRequestHeaders.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.text.TextUtils;
-
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-public class TwitterRequestHeaders {
-
-    public static final String HEADER_USER_AGENT = "User-Agent";
-
-    private final String method;
-    private final String url;
-    private final Map<String, String> postParams;
-    private final TwitterAuthConfig authConfig;
-    private final Session session;
-    private final String userAgent;
-
-    public TwitterRequestHeaders(String method, String url, TwitterAuthConfig authConfig,
-            Session session, String userAgent, Map<String, String> postParams) {
-        this.method = method;
-        this.url = url;
-        this.authConfig = authConfig;
-        this.session = session;
-        this.userAgent = userAgent;
-        this.postParams = postParams;
-    }
-
-    public final Map<String, String> getHeaders() {
-        final HashMap<String, String> headers = new HashMap<>();
-        headers.putAll(getExtraHeaders());
-        if (!TextUtils.isEmpty(userAgent)) {
-            headers.put(HEADER_USER_AGENT, userAgent);
-        }
-        headers.putAll(getAuthHeaders());
-        return headers;
-    }
-
-    /**
-     * Returns a list of extra HTTP headers (besides Authorization and User-Agent) to go along with
-     * this request
-     */
-    protected Map<String, String> getExtraHeaders() {
-        return Collections.emptyMap();
-    }
-
-    /**
-     * @return a map of auth headers to go along with this request. Override this method if you
-     * need to provide a special Authorization header.
-     */
-    public Map<String, String> getAuthHeaders() {
-        if (session != null && session.getAuthToken() != null) {
-            return session.getAuthToken().getAuthHeaders(authConfig, getMethod(), url,
-                    getPostParams());
-        }
-        return Collections.emptyMap();
-    }
-
-    protected String getMethod() {
-        return method;
-    }
-
-    protected Map<String, String> getPostParams() {
-        return postParams;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifier.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifier.java
index fb58b1b9..d1377537 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifier.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifier.java
@@ -17,16 +17,16 @@
 
 package com.twitter.sdk.android.core.internal;
 
-import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.TwitterApiClient;
+import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.internal.scribe.TwitterCoreScribeClientHolder;
 import com.twitter.sdk.android.core.services.AccountService;
 
-import retrofit.RetrofitError;
+import java.io.IOException;
 
-public class TwitterSessionVerifier implements SessionVerifier {
+public class TwitterSessionVerifier implements SessionVerifier<TwitterSession> {
     static final String SCRIBE_CLIENT = "android";
     static final String SCRIBE_PAGE = "credentials";
     static final String SCRIBE_SECTION = ""; // intentionally blank
@@ -52,12 +52,12 @@ public TwitterSessionVerifier() {
      *
      * @param session
      */
-    public void verifySession(final Session session) {
+    public void verifySession(final TwitterSession session) {
         final AccountService accountService = accountServiceProvider.getAccountService(session);
         try {
             scribeVerifySession();
-            accountService.verifyCredentials(true, false);
-        } catch (RetrofitError e) {
+            accountService.verifyCredentials(true, false).execute();
+        } catch (IOException | RuntimeException e) {
             // We ignore failures since we will attempt the verification again the next time
             // the verification period comes up. This has the potential to lose events, but we
             // are not aiming towards 100% capture rate.
@@ -84,7 +84,7 @@ private void scribeVerifySession() {
      * SessionMonitor
      */
     protected static class AccountServiceProvider {
-        public AccountService getAccountService(Session session) {
+        public AccountService getAccountService(TwitterSession session) {
             return new TwitterApiClient(session).getAccountService();
         }
     }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java
new file mode 100644
index 00000000..a8ef5116
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal;
+
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.ImageValue;
+import com.twitter.sdk.android.core.models.UserValue;
+
+public class VineCardUtils {
+    public static final String PLAYER_CARD = "player";
+    public static final String VINE_CARD = "vine";
+    public static final long VINE_USER_ID = 586671909;
+
+    private VineCardUtils() {}
+
+    public static boolean isVine(Card card) {
+        return (PLAYER_CARD.equals(card.name) || VINE_CARD.equals(card.name)) && isVineUser(card);
+    }
+
+    private static boolean isVineUser(Card card) {
+        final UserValue user = card.bindingValues.get("site");
+        try {
+            if (user != null && Long.parseLong(user.idStr) == VINE_USER_ID) {
+                return true;
+            }
+        } catch (NumberFormatException ex) {
+            return false;
+        }
+
+        return false;
+    }
+
+    public static String getPublisherId(Card card) {
+        final UserValue user_value = card.bindingValues.get("site");
+        return user_value.idStr;
+    }
+
+    public static String getStreamUrl(Card card) {
+        return card.bindingValues.get("player_stream_url");
+    }
+
+    public static ImageValue getImageValue(Card card) {
+        return card.bindingValues.get("player_image");
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptor.java
new file mode 100644
index 00000000..624569c3
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptor.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import com.twitter.sdk.android.core.GuestSession;
+import com.twitter.sdk.android.core.GuestSessionProvider;
+import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
+import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
+
+import java.io.IOException;
+
+import okhttp3.Interceptor;
+import okhttp3.Request;
+import okhttp3.Response;
+
+/**
+ * Signs requests with OAuth2 signature.
+ */
+public class GuestAuthInterceptor implements Interceptor {
+    final GuestSessionProvider guestSessionProvider;
+
+    public GuestAuthInterceptor(GuestSessionProvider guestSessionProvider) {
+        this.guestSessionProvider = guestSessionProvider;
+    }
+
+    @Override
+    public Response intercept(Chain chain) throws IOException {
+        final Request request = chain.request();
+
+        final GuestSession session = guestSessionProvider.getCurrentSession();
+        final GuestAuthToken token = session == null ? null : session.getAuthToken();
+        if (token != null) {
+            final Request.Builder builder = request.newBuilder();
+            addAuthHeaders(builder, token);
+            return chain.proceed(builder.build());
+        }
+
+        return chain.proceed(request);
+    }
+
+    static void addAuthHeaders(Request.Builder builder, GuestAuthToken token) {
+        final String authHeader = token.getTokenType() + " " + token.getAccessToken();
+
+        builder.header(OAuthConstants.HEADER_AUTHORIZATION, authHeader);
+        builder.header(OAuthConstants.HEADER_GUEST_TOKEN, token.getGuestToken());
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptor.java
new file mode 100644
index 00000000..f1077c2a
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptor.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import java.io.IOException;
+
+import okhttp3.Interceptor;
+import okhttp3.Response;
+
+/**
+ * The Twitter API uses HTTP status code of 403 to indicate guest session needs to be refreshed.
+ * However, the OkHttp Authenticator that refreshes guest sessions only responds to 401. So we map
+ * all 403 to 401 responses.
+ */
+public class GuestAuthNetworkInterceptor implements Interceptor {
+    @Override
+    public Response intercept(Chain chain) throws IOException {
+        Response response = chain.proceed(chain.request());
+        if (response.code() == 403) {
+            response = response.newBuilder().code(401).build();
+        }
+        return response;
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java
new file mode 100644
index 00000000..fc73e658
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import com.twitter.sdk.android.core.GuestSession;
+import com.twitter.sdk.android.core.GuestSessionProvider;
+import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
+import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
+
+import java.io.IOException;
+
+import okhttp3.Authenticator;
+import okhttp3.Headers;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.Route;
+
+/**
+ * Refreshes guest auth session when server indicates session is expired.
+ */
+public class GuestAuthenticator implements Authenticator {
+    static final int MAX_RETRIES = 2;
+    final GuestSessionProvider guestSessionProvider;
+
+    public GuestAuthenticator(GuestSessionProvider guestSessionProvider) {
+        this.guestSessionProvider = guestSessionProvider;
+    }
+
+    @Override
+    public Request authenticate(Route route, Response response) throws IOException {
+        return reauth(response);
+    }
+
+    Request reauth(Response response) {
+        if (canRetry(response)) {
+            final GuestSession session = guestSessionProvider
+                    .refreshCurrentSession(getExpiredSession(response));
+            final GuestAuthToken token = session == null ? null : session.getAuthToken();
+            if (token != null) {
+                return resign(response.request(), token);
+            }
+        }
+
+        return null;
+    }
+
+    GuestSession getExpiredSession(Response response) {
+        final Headers headers = response.request().headers();
+        final String auth = headers.get(OAuthConstants.HEADER_AUTHORIZATION);
+        final String guest = headers.get(OAuthConstants.HEADER_GUEST_TOKEN);
+
+        if (auth != null && guest != null) {
+            final GuestAuthToken token =
+                    new GuestAuthToken("bearer", auth.replace("bearer ", ""), guest);
+            return new GuestSession(token);
+        }
+
+        return null;
+    }
+
+    Request resign(Request request, GuestAuthToken token) {
+        final Request.Builder builder = request.newBuilder();
+        GuestAuthInterceptor.addAuthHeaders(builder, token);
+        return builder.build();
+    }
+
+    boolean canRetry(Response response) {
+        int responseCount = 1;
+        while ((response = response.priorResponse()) != null) {
+            responseCount++;
+        }
+
+        return responseCount < MAX_RETRIES;
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java
new file mode 100644
index 00000000..456386b9
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import com.twitter.sdk.android.core.Session;
+import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.twitter.sdk.android.core.TwitterAuthToken;
+import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;
+import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+
+import io.fabric.sdk.android.services.network.UrlUtils;
+import okhttp3.FormBody;
+import okhttp3.HttpUrl;
+import okhttp3.Interceptor;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
+/**
+ * Signs requests with OAuth1a signature
+ */
+public class OAuth1aInterceptor implements Interceptor {
+    final Session<? extends TwitterAuthToken> session;
+    final TwitterAuthConfig authConfig;
+
+    public OAuth1aInterceptor(Session<? extends TwitterAuthToken> session,
+            TwitterAuthConfig authConfig) {
+        this.session = session;
+        this.authConfig = authConfig;
+    }
+
+    @Override
+    public Response intercept(Chain chain) throws IOException {
+        final Request request = chain.request();
+        final Request hackRequest = request.newBuilder()
+                .url(urlWorkaround(request.url()))
+                .build();
+
+        final Request newRequest = hackRequest
+                .newBuilder()
+                .header(OAuthConstants.HEADER_AUTHORIZATION, getAuthorizationHeader(hackRequest))
+                .build();
+
+        return chain.proceed(newRequest);
+    }
+
+    HttpUrl urlWorkaround(HttpUrl url) {
+        final HttpUrl.Builder builder = url.newBuilder().query(null);
+
+        final int size = url.querySize();
+        for (int i = 0; i < size; i++) {
+            builder.addEncodedQueryParameter(UrlUtils.percentEncode(url.queryParameterName(i)),
+                    UrlUtils.percentEncode(url.queryParameterValue(i)));
+        }
+
+        return builder.build();
+    }
+
+    String getAuthorizationHeader(Request request) throws IOException {
+        return new OAuth1aHeaders().getAuthorizationHeader(authConfig,
+                session.getAuthToken(), null, request.method(), request.url().toString(),
+                getPostParams(request));
+    }
+
+    Map<String, String> getPostParams(Request request) throws IOException {
+        final Map<String, String> params = new HashMap<>();
+        if ("POST".equals(request.method().toUpperCase(Locale.US))) {
+            final RequestBody output = request.body();
+            if (output instanceof FormBody) {
+                final FormBody body = (FormBody) output;
+                for (int i = 0; i < body.size(); i++) {
+                    params.put(body.encodedName(i), body.value(i));
+                }
+            }
+        }
+        return params;
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OkHttpClientHelper.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OkHttpClientHelper.java
new file mode 100644
index 00000000..d3ed9717
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OkHttpClientHelper.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import com.twitter.sdk.android.core.GuestSessionProvider;
+import com.twitter.sdk.android.core.Session;
+import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.twitter.sdk.android.core.TwitterAuthToken;
+
+import javax.net.ssl.SSLSocketFactory;
+
+import okhttp3.OkHttpClient;
+
+public class OkHttpClientHelper {
+    public static OkHttpClient getOkHttpClient(GuestSessionProvider guestSessionProvider,
+            SSLSocketFactory sslSocketFactory) {
+        return getOkHttpClientBuilder(guestSessionProvider, sslSocketFactory).build();
+    }
+
+    public static OkHttpClient.Builder getOkHttpClientBuilder(
+            GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory) {
+        return addGuestAuth(new OkHttpClient.Builder(), guestSessionProvider, sslSocketFactory);
+    }
+
+    public static OkHttpClient getOkHttpClient(Session<? extends TwitterAuthToken> session,
+            TwitterAuthConfig authConfig, SSLSocketFactory sslSocketFactory) {
+        return getOkHttpClientBuilder(session, authConfig, sslSocketFactory).build();
+    }
+
+    public static OkHttpClient.Builder getOkHttpClientBuilder(
+            Session<? extends TwitterAuthToken> session, TwitterAuthConfig authConfig,
+            SSLSocketFactory sslSocketFactory) {
+        if (session == null) {
+            throw new IllegalArgumentException("Session must not be null.");
+        }
+
+        return addSessionAuth(new OkHttpClient.Builder(), session, authConfig, sslSocketFactory);
+    }
+
+    public static OkHttpClient getCustomOkHttpClient(OkHttpClient httpClient,
+            GuestSessionProvider guestSessionProvider,
+            SSLSocketFactory sslSocketFactory) {
+        if (httpClient == null) {
+            throw new IllegalArgumentException("HttpClient must not be null.");
+        }
+
+        return addGuestAuth(httpClient.newBuilder(), guestSessionProvider, sslSocketFactory)
+                .build();
+    }
+
+    public static OkHttpClient getCustomOkHttpClient(
+            OkHttpClient httpClient,
+            Session<? extends TwitterAuthToken> session,
+            TwitterAuthConfig authConfig,
+            SSLSocketFactory sslSocketFactory) {
+        if (session == null) {
+            throw new IllegalArgumentException("Session must not be null.");
+        }
+
+        if (httpClient == null) {
+            throw new IllegalArgumentException("HttpClient must not be null.");
+        }
+
+        return addSessionAuth(httpClient.newBuilder(), session, authConfig, sslSocketFactory)
+                .build();
+    }
+
+    static OkHttpClient.Builder addGuestAuth(OkHttpClient.Builder builder,
+                                             GuestSessionProvider guestSessionProvider,
+                                             SSLSocketFactory sslSocketFactory) {
+        return builder.sslSocketFactory(sslSocketFactory)
+                .authenticator(new GuestAuthenticator(guestSessionProvider))
+                .addInterceptor(new GuestAuthInterceptor(guestSessionProvider))
+                .addNetworkInterceptor(new GuestAuthNetworkInterceptor());
+    }
+
+    static OkHttpClient.Builder addSessionAuth(OkHttpClient.Builder builder,
+                                               Session<? extends TwitterAuthToken> session,
+                                               TwitterAuthConfig authConfig,
+                                               SSLSocketFactory sslSocketFactory) {
+        return builder.sslSocketFactory(sslSocketFactory)
+                .addInterceptor(new OAuth1aInterceptor(session, authConfig));
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
index 8ee72d07..352c0def 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
@@ -20,9 +20,6 @@
 import android.text.format.DateUtils;
 
 import com.google.gson.annotations.SerializedName;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-
-import java.util.Map;
 
 public class GuestAuthToken extends OAuth2Token {
     public static final String HEADER_GUEST_TOKEN = "x-guest-token";
@@ -58,15 +55,6 @@ public boolean isExpired() {
         return System.currentTimeMillis() >= this.createdAt + EXPIRES_IN_MS;
     }
 
-    @Override
-    public Map<String, String> getAuthHeaders(TwitterAuthConfig authConfig, String method,
-            String url, Map<String, String> postParams) {
-        final Map<String, String> headers = super.getAuthHeaders(authConfig, method, url,
-                postParams);
-        headers.put(HEADER_GUEST_TOKEN, getGuestToken());
-        return headers;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
index 3d9cd0fd..c5c0a397 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
@@ -19,7 +19,6 @@
 
 import android.net.Uri;
 
-import io.fabric.sdk.android.services.network.HttpMethod;
 import io.fabric.sdk.android.services.network.UrlUtils;
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
@@ -33,17 +32,15 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.net.HttpURLConnection;
-import java.util.Map;
 import java.util.TreeMap;
 
 import javax.net.ssl.SSLSocketFactory;
 
-import retrofit.client.Response;
-import retrofit.http.Body;
-import retrofit.http.Header;
-import retrofit.http.POST;
-import retrofit.http.Query;
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.http.Header;
+import retrofit2.http.POST;
+import retrofit2.http.Query;
 
 /**
  * OAuth1.0a service. Provides methods for requesting request tokens, access tokens, and signing
@@ -53,13 +50,11 @@
 
     interface OAuthApi {
         @POST("/oauth/request_token")
-        void getTempToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                @Body String dummy, Callback<Response> cb);
+        Call<ResponseBody> getTempToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth);
 
         @POST("/oauth/access_token")
-        void getAccessToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                @Query(OAuthConstants.PARAM_VERIFIER) String verifier, @Body String dummy,
-                Callback<Response> cb);
+        Call<ResponseBody> getAccessToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
+                                          @Query(OAuthConstants.PARAM_VERIFIER) String verifier);
     }
 
     private static final String RESOURCE_OAUTH = "oauth";
@@ -72,7 +67,7 @@ void getAccessToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
     public OAuth1aService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory,
                           TwitterApi api) {
         super(twitterCore, sslSocketFactory, api);
-        this.api = getApiAdapter().create(OAuthApi.class);
+        this.api = getRetrofit().create(OAuthApi.class);
     }
 
     /**
@@ -85,7 +80,7 @@ public void requestTempToken(final Callback<OAuthResponse> callback) {
         final String url = getTempTokenUrl();
 
         api.getTempToken(new OAuth1aHeaders().getAuthorizationHeader(config, null,
-                buildCallbackUrl(config), "POST", url, null), "", getCallbackWrapper(callback));
+                buildCallbackUrl(config), "POST", url, null)).enqueue(getCallbackWrapper(callback));
     }
 
     String getTempTokenUrl() {
@@ -118,7 +113,7 @@ public void requestAccessToken(final Callback<OAuthResponse> callback,
         final String authHeader = new OAuth1aHeaders().getAuthorizationHeader(getTwitterCore()
                         .getAuthConfig(), requestToken, null, "POST", url, null);
 
-        api.getAccessToken(authHeader, verifier, "", getCallbackWrapper(callback));
+        api.getAccessToken(authHeader, verifier).enqueue(getCallbackWrapper(callback));
     }
 
     String getAccessTokenUrl() {
@@ -137,20 +132,6 @@ public String getAuthorizeUrl(TwitterAuthToken requestToken) {
                 .toString();
     }
 
-    /**
-     * Signs the {@code HttpURLConnection} request using the specified access token.
-     *
-     * @param accessToken The access token to use to sign the request.
-     * @param request The request to sign.
-     */
-    public static void signRequest(TwitterAuthConfig config, TwitterAuthToken accessToken,
-            HttpURLConnection request, Map<String, String> postParams) {
-        final String authHeader = new OAuth1aHeaders().getAuthorizationHeader(config, accessToken,
-                null, HttpMethod.valueOf(request.getRequestMethod()).name(),
-                request.getURL().toString(), postParams);
-        request.setRequestProperty(AuthHeaders.HEADER_AUTHORIZATION, authHeader);
-    }
-
     /**
      * @return  {@link OAuthResponse} parsed from the
      * response, may be {@code null} if the response does not contain an auth token and secret.
@@ -173,18 +154,18 @@ public static OAuthResponse parseAuthResponse(String response) {
         }
     }
 
-    Callback<Response> getCallbackWrapper(final Callback<OAuthResponse> callback) {
-        return new Callback<Response>() {
+    Callback<ResponseBody> getCallbackWrapper(final Callback<OAuthResponse> callback) {
+        return new Callback<ResponseBody>() {
 
             @Override
-            public void success(Result<Response> result) {
+            public void success(Result<ResponseBody> result) {
                 //Try to get response body
                 BufferedReader reader = null;
                 final StringBuilder sb = new StringBuilder();
                 try {
                     try {
                         reader = new BufferedReader(
-                                new InputStreamReader(result.data.getBody().in()));
+                                new InputStreamReader(result.data.byteStream()));
                         String line;
 
                         while ((line = reader.readLine()) != null) {
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java
index 89bef6fe..7b516e8e 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java
@@ -29,46 +29,45 @@
 
 import javax.net.ssl.SSLSocketFactory;
 
-import retrofit.http.Body;
-import retrofit.http.Field;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.Header;
-import retrofit.http.Headers;
-import retrofit.http.POST;
+import retrofit2.Call;
+import retrofit2.http.Field;
+import retrofit2.http.FormUrlEncoded;
+import retrofit2.http.Header;
+import retrofit2.http.Headers;
+import retrofit2.http.POST;
 
 /**
- * OAuth2.0 service. Provides methods for requesting guest and application-only auth tokens.
+ * OAuth2.0 service. Provides methods for requesting guest auth tokens.
  */
 public class OAuth2Service extends OAuthService {
     OAuth2Api api;
 
     interface OAuth2Api {
         @POST("/1.1/guest/activate.json")
-        void getGuestToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                @Body String dummy, Callback<GuestTokenResponse> cb);
+        Call<GuestTokenResponse> getGuestToken(
+                @Header(OAuthConstants.HEADER_AUTHORIZATION) String auth);
 
         @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8")
         @FormUrlEncoded
         @POST("/oauth2/token")
-        void getAppAuthToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType,
-                Callback<AppAuthToken> cb);
+        Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
+                                          @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType);
     }
 
     public OAuth2Service(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory,
                          TwitterApi api) {
         super(twitterCore, sslSocketFactory, api);
-        this.api = getApiAdapter().create(OAuth2Api.class);
+        this.api = getRetrofit().create(OAuth2Api.class);
     }
 
     /**
      * Requests a guest auth token.
      * @param callback The callback interface to invoke when when the request completes.
      */
-    public void requestGuestAuthToken(final Callback<OAuth2Token> callback) {
-        final Callback<AppAuthToken> appAuthCallback = new Callback<AppAuthToken>() {
+    public void requestGuestAuthToken(final Callback<GuestAuthToken> callback) {
+        final Callback<OAuth2Token> appAuthCallback = new Callback<OAuth2Token>() {
             @Override
-            public void success(Result<AppAuthToken> result) {
+            public void success(Result<OAuth2Token> result) {
                 final OAuth2Token appAuthToken = result.data;
                 // Got back an app auth token, now request a guest auth token.
                 final Callback<GuestTokenResponse> guestTokenCallback
@@ -79,7 +78,7 @@ public void success(Result<GuestTokenResponse> result) {
                         final GuestAuthToken guestAuthToken = new GuestAuthToken(
                                 appAuthToken.getTokenType(), appAuthToken.getAccessToken(),
                                 result.data.guestToken);
-                        callback.success(new Result<OAuth2Token>(guestAuthToken, null));
+                        callback.success(new Result<>(guestAuthToken, null));
                     }
 
                     @Override
@@ -109,9 +108,9 @@ public void failure(TwitterException error) {
      *
      * @param callback The callback interface to invoke when when the request completes.
      */
-    public void requestAppAuthToken(final Callback<AppAuthToken> callback) {
-        api.getAppAuthToken(getAuthHeader(), OAuthConstants.GRANT_TYPE_CLIENT_CREDENTIALS,
-                callback);
+    void requestAppAuthToken(final Callback<OAuth2Token> callback) {
+        api.getAppAuthToken(getAuthHeader(), OAuthConstants.GRANT_TYPE_CLIENT_CREDENTIALS)
+                .enqueue(callback);
     }
 
     /**
@@ -120,15 +119,15 @@ public void requestAppAuthToken(final Callback<AppAuthToken> callback) {
      * @param callback The callback interface to invoke when when the request completes.
      * @param appAuthToken The application-only auth token.
      */
-    public void requestGuestToken(final Callback<GuestTokenResponse> callback,
+    void requestGuestToken(final Callback<GuestTokenResponse> callback,
             OAuth2Token appAuthToken) {
-        api.getGuestToken(getAuthorizationHeader(appAuthToken), "", callback);
+        api.getGuestToken(getAuthorizationHeader(appAuthToken)).enqueue(callback);
     }
 
     /**
      * Gets authorization header for inclusion in HTTP request headers.
      */
-    public static String getAuthorizationHeader(OAuth2Token token) {
+    private String getAuthorizationHeader(OAuth2Token token) {
         return OAuthConstants.AUTHORIZATION_BEARER + " " + token.getAccessToken();
     }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java
index 18a8c534..bcbd56a9 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java
@@ -22,10 +22,6 @@
 
 import com.google.gson.annotations.SerializedName;
 import com.twitter.sdk.android.core.AuthToken;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-
-import java.util.HashMap;
-import java.util.Map;
 
 /**
  * OAuth2.0 token.
@@ -84,15 +80,6 @@ public boolean isExpired() {
         return false;
     }
 
-    @Override
-    public Map<String, String> getAuthHeaders(TwitterAuthConfig authConfig, String method,
-            String url, Map<String, String> postParams) {
-        final Map<String, String> headers = new HashMap<>();
-        final String authorizationHeader = OAuth2Service.getAuthorizationHeader(this);
-        headers.put(HEADER_AUTHORIZATION, authorizationHeader);
-        return headers;
-    }
-
     @Override
     public int describeContents() {
         return 0;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.java
index 03c6e552..325dbb9a 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.java
@@ -18,6 +18,8 @@
 package com.twitter.sdk.android.core.internal.oauth;
 
 public class OAuthConstants {
+    public static final String HEADER_AUTHORIZATION = "Authorization";
+    public static final String HEADER_GUEST_TOKEN = "x-guest-token";
 
     // OAuth1.0a parameter constants.
     public static final String PARAM_CALLBACK = "oauth_callback";
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthService.java
index 00c199be..0905097f 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthService.java
@@ -17,14 +17,19 @@
 
 package com.twitter.sdk.android.core.internal.oauth;
 
-import com.twitter.sdk.android.core.DefaultClient;
 import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.internal.TwitterApi;
 
+import java.io.IOException;
+
 import javax.net.ssl.SSLSocketFactory;
 
-import retrofit.RequestInterceptor;
-import retrofit.RestAdapter;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import retrofit2.Retrofit;
+import retrofit2.converter.gson.GsonConverterFactory;
 
 /**
  * Base class for OAuth service.
@@ -34,39 +39,44 @@
     private static final String CLIENT_NAME = "TwitterAndroidSDK";
 
     private final TwitterCore twitterCore;
-    private final SSLSocketFactory sslSocketFactory;
     private final TwitterApi api;
     private final String userAgent;
-    private final RestAdapter apiAdapter;
+    private final Retrofit retrofit;
 
-    public OAuthService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory,
+    OAuthService(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory,
             TwitterApi api) {
         this.twitterCore = twitterCore;
-        this.sslSocketFactory = sslSocketFactory;
         this.api = api;
         userAgent = TwitterApi.buildUserAgent(CLIENT_NAME, twitterCore.getVersion());
 
+        if (sslSocketFactory == null) {
+            throw new IllegalArgumentException("sslSocketFactory must not be null");
+        }
 
-        apiAdapter = new RestAdapter.Builder()
-                .setEndpoint(getApi().getBaseHostUrl())
-                .setClient(new DefaultClient(this.sslSocketFactory))
-                .setRequestInterceptor(new RequestInterceptor() {
+        final OkHttpClient client = new OkHttpClient.Builder()
+                .sslSocketFactory(sslSocketFactory)
+                .addInterceptor(new Interceptor() {
                     @Override
-                    public void intercept(RequestFacade request) {
-                        request.addHeader("User-Agent", getUserAgent());
+                    public Response intercept(Chain chain) throws IOException {
+                        final Request request = chain.request().newBuilder()
+                                .header("User-Agent", getUserAgent())
+                                .build();
+                        return chain.proceed(request);
                     }
                 })
                 .build();
+
+        retrofit = new Retrofit.Builder()
+                .baseUrl(getApi().getBaseHostUrl())
+                .client(client)
+                .addConverterFactory(GsonConverterFactory.create())
+                .build();
     }
 
     protected TwitterCore getTwitterCore() {
         return twitterCore;
     }
 
-    protected SSLSocketFactory getSSLSocketFactory() {
-        return sslSocketFactory;
-    }
-
     protected TwitterApi getApi() {
         return api;
     }
@@ -75,7 +85,7 @@ protected String getUserAgent() {
         return userAgent;
     }
 
-    protected RestAdapter getApiAdapter() {
-        return apiAdapter;
+    protected Retrofit getRetrofit() {
+        return retrofit;
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClient.java
index de0ff942..bc81f50f 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/DefaultScribeClient.java
@@ -24,10 +24,12 @@
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.twitter.sdk.android.core.BuildConfig;
+import com.twitter.sdk.android.core.GuestSession;
+import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.SessionManager;
+import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterSession;
 
 import java.util.Collections;
 import java.util.List;
@@ -56,26 +58,24 @@
     private static volatile ScheduledExecutorService executor;
 
     private final Kit kit;
-    private final List<SessionManager<? extends Session>> sessionManagers;
+    private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager;
     private final String advertisingId;
 
     public DefaultScribeClient(Kit kit, String kitName,
-                               List<SessionManager<? extends Session>> sessionManagers,
-                               IdManager idManager) {
-        this(kit, kitName, getGson(), sessionManagers, idManager);
+            SessionManager<? extends Session<TwitterAuthToken>> sessionManager,
+            GuestSessionProvider guestSessionProvider, IdManager idManager) {
+        this(kit, kitName, getGson(), sessionManager, guestSessionProvider, idManager);
     }
 
-    public DefaultScribeClient(Kit kit, String kitName, Gson gson,
-            List<SessionManager<? extends Session>> sessionManagers, IdManager idManager) {
-        super(kit, getExecutor(),
-                getScribeConfig(Settings.getInstance().awaitSettingsData(),
-                        getUserAgent(kitName, kit)),
-                new ScribeEvent.Transform(gson),
-                TwitterCore.getInstance().getAuthConfig(),
-                sessionManagers, TwitterCore.getInstance().getSSLSocketFactory(),
-                idManager);
-
-        this.sessionManagers = sessionManagers;
+    DefaultScribeClient(Kit kit, String kitName, Gson gson,
+            SessionManager<? extends Session<TwitterAuthToken>> sessionManager,
+            GuestSessionProvider guestSessionProvider, IdManager idManager) {
+        super(kit, getExecutor(), getScribeConfig(Settings.getInstance().awaitSettingsData(),
+                getUserAgent(kitName, kit)), new ScribeEvent.Transform(gson),
+                TwitterCore.getInstance().getAuthConfig(), sessionManager, guestSessionProvider,
+                TwitterCore.getInstance().getSSLSocketFactory(), idManager);
+
+        this.sessionManager = sessionManager;
         this.kit = kit;
         this.advertisingId = idManager.getAdvertisingId();
     }
@@ -87,19 +87,14 @@ public void scribe(EventNamespace... namespaces) {
     }
 
     public void scribe(EventNamespace namespace, List<ScribeItem> items) {
-        final String language;
-        if (kit.getContext() != null) {
-            language = kit.getContext().getResources().getConfiguration().locale.getLanguage();
-        } else {
-            language = "";
-        }
+        final String language = getLanguageFromKit();
         final long timestamp = System.currentTimeMillis();
         /*
          * The advertising ID may be null if this method is called before doInBackground completes.
          * It also may be null depending on the users preferences and if Google Play Services has
          * been installed on the device.
          */
-        scribe(ScribeEventFactory.newScribeEvent(namespace, timestamp, language, advertisingId,
+        scribe(ScribeEventFactory.newScribeEvent(namespace, "", timestamp, language, advertisingId,
                 items));
     }
 
@@ -107,16 +102,21 @@ public void scribe(ScribeEvent event) {
         super.scribe(event, getScribeSessionId(getActiveSession()));
     }
 
+    public void scribe(EventNamespace namespace, String eventInfo) {
+        final String language = getLanguageFromKit();
+        final long timestamp = System.currentTimeMillis();
+        /*
+         * The advertising ID may be null if this method is called before doInBackground completes.
+         * It also may be null depending on the users preferences and if Google Play Services has
+         * been installed on the device.
+         */
+        scribe(ScribeEventFactory.newScribeEvent(namespace, eventInfo, timestamp, language,
+                advertisingId, Collections.<ScribeItem>emptyList()));
+    }
+
     // visible for tests
     Session getActiveSession() {
-        Session session = null;
-        for (SessionManager<? extends Session> sessionManager : sessionManagers) {
-            session = sessionManager.getActiveSession();
-            if (session != null) {
-                break;
-            }
-        }
-        return session;
+        return sessionManager.getActiveSession();
     }
 
     // visible for tests
@@ -128,11 +128,21 @@ long getScribeSessionId(Session activeSession) {
             // It's possible that we're attempting to load a tweet before we have a valid
             // session. Store the scribe event locally with the logged out user id so that we can
             // send it up at a later time with the logged out session.
-            scribeSessionId = TwitterSession.LOGGED_OUT_USER_ID;
+            scribeSessionId = GuestSession.LOGGED_OUT_USER_ID;
         }
         return scribeSessionId;
     }
 
+    private String getLanguageFromKit(){
+        final String language;
+        if (kit.getContext() != null) {
+            language = kit.getContext().getResources().getConfiguration().locale.getLanguage();
+        } else {
+            language = "";
+        }
+        return language;
+    }
+
     private static Gson getGson() {
         return new GsonBuilder()
                 .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeClient.java
index 90b9f9bd..ad932a2c 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeClient.java
@@ -28,12 +28,13 @@
 import io.fabric.sdk.android.services.events.QueueFileEventStorage;
 import io.fabric.sdk.android.services.persistence.FileStoreImpl;
 
+import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.twitter.sdk.android.core.TwitterAuthToken;
 
 import java.io.IOException;
-import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ScheduledExecutorService;
 
@@ -78,7 +79,8 @@
     private final ScribeEvent.Transform transform;
 
     private final TwitterAuthConfig authConfig;
-    private final List<SessionManager<? extends Session>> sessionManagers;
+    private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager;
+    private final GuestSessionProvider guestSessionProvider;
     private final SSLSocketFactory sslSocketFactory;
     private final IdManager idManager;
 
@@ -91,20 +93,22 @@
      * @param transform the scribe event transform for serializing and deserializing scribe events
      * flush of all queued events as long as a network connection is available.
      * @param authConfig the auth configuration
-     * @param sessionManagers the session manager
+     * @param sessionManager the session manager
      * @param sslSocketFactory the SSL socket factory
      * @param idManager the id manager used to provide the device id
      */
     public ScribeClient(Kit kit, ScheduledExecutorService executor, ScribeConfig scribeConfig,
             ScribeEvent.Transform transform, TwitterAuthConfig authConfig,
-            List<SessionManager<? extends Session>> sessionManagers,
-            SSLSocketFactory sslSocketFactory, IdManager idManager) {
+            SessionManager<? extends Session<TwitterAuthToken>> sessionManager,
+            GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory,
+            IdManager idManager) {
         this.kit = kit;
         this.executor = executor;
         this.scribeConfig = scribeConfig;
         this.transform = transform;
         this.authConfig = authConfig;
-        this.sessionManagers = sessionManagers;
+        this.sessionManager = sessionManager;
+        this.guestSessionProvider = guestSessionProvider;
         this.sslSocketFactory = sslSocketFactory;
         this.idManager = idManager;
 
@@ -162,7 +166,8 @@ private ScribeHandler newScribeHandler(long ownerId) throws IOException {
             CommonUtils.logControlled(context, "Scribe enabled");
             return new EnabledScribeStrategy(context, executor, filesManager, scribeConfig,
                     new ScribeFilesSender(context, scribeConfig, ownerId, authConfig,
-                            sessionManagers, sslSocketFactory, executor, idManager));
+                            sessionManager, guestSessionProvider, sslSocketFactory, executor,
+                            idManager));
         } else {
             CommonUtils.logControlled(context, "Scribe disabled");
             return new DisabledEventsStrategy<>();
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactory.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactory.java
index de88037a..d287fa73 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactory.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactory.java
@@ -24,15 +24,17 @@
 
     public static ScribeEvent newScribeEvent(EventNamespace ns, long timestamp, String language,
             String advertisingId) {
-        return newScribeEvent(ns, timestamp, language, advertisingId,
+        return newScribeEvent(ns, "", timestamp, language, advertisingId,
                 Collections.<ScribeItem>emptyList());
     }
 
-    public static ScribeEvent newScribeEvent(EventNamespace ns, long timestamp, String language,
-                                             String advertisingId, List<ScribeItem> items) {
+    public static ScribeEvent newScribeEvent(EventNamespace ns, String eventInfo, long timestamp,
+                                             String language, String advertisingId,
+                                             List<ScribeItem> items) {
         switch (ns.client) {
             case SyndicationClientEvent.CLIENT_NAME:
-                return new SyndicationClientEvent(ns, timestamp, language, advertisingId, items);
+                return new SyndicationClientEvent(ns, eventInfo, timestamp, language, advertisingId,
+                        items);
             default:
                 return new SyndicatedSdkImpressionEvent(ns, timestamp, language, advertisingId,
                         items);
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSender.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSender.java
index 00c9b46e..c78e4fb5 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSender.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSender.java
@@ -24,10 +24,14 @@
 import io.fabric.sdk.android.services.common.IdManager;
 import io.fabric.sdk.android.services.common.QueueFile;
 import io.fabric.sdk.android.services.events.FilesSender;
-import com.twitter.sdk.android.core.AuthenticatedClient;
+
+import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.twitter.sdk.android.core.TwitterAuthToken;
+import com.twitter.sdk.android.core.internal.network.GuestAuthInterceptor;
+import com.twitter.sdk.android.core.internal.network.OAuth1aInterceptor;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -40,16 +44,18 @@
 
 import javax.net.ssl.SSLSocketFactory;
 
-import retrofit.RequestInterceptor;
-import retrofit.RestAdapter;
-import retrofit.RetrofitError;
-import retrofit.android.MainThreadExecutor;
-import retrofit.client.Response;
-import retrofit.http.Field;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.Headers;
-import retrofit.http.POST;
-import retrofit.http.Path;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.Retrofit;
+import retrofit2.http.Field;
+import retrofit2.http.FormUrlEncoded;
+import retrofit2.http.Headers;
+import retrofit2.http.POST;
+import retrofit2.http.Path;
 
 class ScribeFilesSender implements FilesSender {
 
@@ -71,25 +77,28 @@
     private final ScribeConfig scribeConfig;
     private final long ownerId;
     private final TwitterAuthConfig authConfig;
-    private final List<SessionManager<? extends Session>> sessionManagers;
+    private final SessionManager<? extends Session<TwitterAuthToken>> sessionManager;
+    private final GuestSessionProvider guestSessionProvider;
     private final SSLSocketFactory sslSocketFactory;
-    private final AtomicReference<RestAdapter> apiAdapter;
+    private final AtomicReference<ScribeService> scribeService;
     private final ExecutorService executorService;
     private final IdManager idManager;
 
     public ScribeFilesSender(Context context, ScribeConfig scribeConfig, long ownerId,
-            TwitterAuthConfig authConfig, List<SessionManager<? extends Session>> sessionManagers,
-            SSLSocketFactory sslSocketFactory, ExecutorService executorService,
-            IdManager idManager) {
+            TwitterAuthConfig authConfig,
+            SessionManager<? extends Session<TwitterAuthToken>> sessionManager,
+            GuestSessionProvider guestSessionProvider, SSLSocketFactory sslSocketFactory,
+            ExecutorService executorService, IdManager idManager) {
         this.context = context;
         this.scribeConfig = scribeConfig;
         this.ownerId = ownerId;
         this.authConfig = authConfig;
-        this.sessionManagers = sessionManagers;
+        this.sessionManager = sessionManager;
+        this.guestSessionProvider = guestSessionProvider;
         this.sslSocketFactory = sslSocketFactory;
         this.executorService = executorService;
         this.idManager = idManager;
-        this.apiAdapter = new AtomicReference<>();
+        this.scribeService = new AtomicReference<>();
     }
 
     @Override
@@ -99,20 +108,17 @@ public boolean send(List<File> files) {
                 final String scribeEvents = getScribeEventsAsJsonArrayString(files);
                 CommonUtils.logControlled(context, scribeEvents);
 
-                final Response response = upload(scribeEvents);
-                if (response.getStatus() == HttpURLConnection.HTTP_OK) {
+                final Response<ResponseBody> response = upload(scribeEvents);
+                if (response.code() == HttpURLConnection.HTTP_OK) {
                     return true;
                 } else {
                     CommonUtils.logControlledError(context, SEND_FILE_FAILURE_ERROR, null);
+                    if (response.code() == HttpURLConnection.HTTP_INTERNAL_ERROR ||
+                            response.code() == HttpURLConnection.HTTP_BAD_REQUEST) {
+                        return true;
+                    }
                 }
-            } catch (RetrofitError e) {
-                CommonUtils.logControlledError(context, SEND_FILE_FAILURE_ERROR, e);
-                if (e.getResponse() != null &&
-                        (e.getResponse().getStatus() == HttpURLConnection.HTTP_INTERNAL_ERROR ||
-                         e.getResponse().getStatus() == HttpURLConnection.HTTP_BAD_REQUEST)) {
-                    return true;
-                }
-            } catch (IOException e) {
+            } catch (Exception e) {
                 CommonUtils.logControlledError(context, SEND_FILE_FAILURE_ERROR, e);
             }
         } else {
@@ -157,50 +163,50 @@ public void read(InputStream in, int length) throws IOException {
      * @return true if we have an api adapter for uploading
      */
     private boolean hasApiAdapter() {
-        return getApiAdapter() != null;
+        return getScribeService() != null;
     }
 
     /**
      * For testing purposes only.
      */
-    void setApiAdapter(RestAdapter restAdapter) {
-        apiAdapter.set(restAdapter);
+    void setScribeService(ScribeService restAdapter) {
+        scribeService.set(restAdapter);
     }
 
     /**
      * @return the api adapter, may be {@code null}
      */
-    synchronized RestAdapter getApiAdapter() {
-        if (apiAdapter.get() == null) {
+    synchronized ScribeService getScribeService() {
+        if (scribeService.get() == null) {
             final Session session = getSession(ownerId);
-            final RequestInterceptor interceptor
-                    = new ConfigRequestInterceptor(scribeConfig, idManager);
+            OkHttpClient client;
             if (isValidSession(session)) {
-                apiAdapter.compareAndSet(null,
-                        new RestAdapter.Builder()
-                                .setEndpoint(scribeConfig.baseUrl)
-                                .setExecutors(executorService, new MainThreadExecutor())
-                                .setRequestInterceptor(interceptor)
-                                .setClient(new AuthenticatedClient(authConfig, session,
-                                        sslSocketFactory))
-                                .build()
-                );
+                client = new OkHttpClient.Builder()
+                        .sslSocketFactory(sslSocketFactory)
+                        .addInterceptor(new ConfigRequestInterceptor(scribeConfig, idManager))
+                        .addInterceptor(new OAuth1aInterceptor(session, authConfig))
+                        .build();
             } else {
-                CommonUtils.logControlled(context, "No valid session at this time");
+                client = new OkHttpClient.Builder()
+                        .sslSocketFactory(sslSocketFactory)
+                        .addInterceptor(new ConfigRequestInterceptor(scribeConfig, idManager))
+                        .addInterceptor(new GuestAuthInterceptor(guestSessionProvider))
+                        .build();
             }
+
+            final Retrofit retrofit = new Retrofit.Builder()
+                    .baseUrl(scribeConfig.baseUrl)
+                    .client(client)
+                    .build();
+
+            scribeService.compareAndSet(null, retrofit.create(ScribeService.class));
         }
-        return apiAdapter.get();
+
+        return scribeService.get();
     }
 
     private Session getSession(long ownerId) {
-        Session sessionToReturn = null;
-        for (SessionManager<? extends Session> sessionManager : sessionManagers) {
-            sessionToReturn = sessionManager.getSession(ownerId);
-            if (sessionToReturn != null) {
-                break;
-            }
-        }
-        return sessionToReturn;
+        return sessionManager.getSession(ownerId);
     }
 
     private boolean isValidSession(Session session) {
@@ -208,14 +214,15 @@ private boolean isValidSession(Session session) {
     }
 
     /**
-     * Uploads scribe events. Requires valid apiAdapter.
+     * Uploads scribe events. Requires valid scribeService.
      */
-    Response upload(String scribeEvents) {
-        final ScribeService service = apiAdapter.get().create(ScribeService.class);
+    Response<ResponseBody> upload(String scribeEvents) throws IOException {
+        final ScribeService service = getScribeService();
         if (!TextUtils.isEmpty(scribeConfig.sequence)) {
-            return service.uploadSequence(scribeConfig.sequence, scribeEvents);
+            return service.uploadSequence(scribeConfig.sequence, scribeEvents).execute();
         } else {
-            return service.upload(scribeConfig.pathVersion, scribeConfig.pathType, scribeEvents);
+            return service.upload(scribeConfig.pathVersion, scribeConfig.pathType, scribeEvents)
+                    .execute();
         }
     }
 
@@ -224,18 +231,20 @@ Response upload(String scribeEvents) {
         @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8")
         @FormUrlEncoded
         @POST("/{version}/jot/{type}")
-        Response upload(@Path("version") String version, @Path("type") String type,
-                        @Field("log[]") String logs);
+        Call<ResponseBody> upload(@Path("version") String version,
+                                  @Path("type") String type,
+                                  @Field("log[]") String logs);
 
         @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8")
         @FormUrlEncoded
         @POST("/scribe/{sequence}")
-        Response uploadSequence(@Path("sequence") String sequence, @Field("log[]") String logs);
+        Call<ResponseBody> uploadSequence(@Path("sequence") String sequence,
+                                          @Field("log[]") String logs);
     }
 
     // At a certain point we might need to allow either a custom RequestInterceptor to be set
     // by the user of the ScribeClient or a custom map of headers to be supplied.
-    static class ConfigRequestInterceptor implements RequestInterceptor {
+    static class ConfigRequestInterceptor implements Interceptor {
         private static final String USER_AGENT_HEADER = "User-Agent";
         private static final String CLIENT_UUID_HEADER = "X-Client-UUID";
         private static final String POLLING_HEADER = "X-Twitter-Polling";
@@ -250,9 +259,10 @@ Response upload(@Path("version") String version, @Path("type") String type,
         }
 
         @Override
-        public void intercept(RequestFacade request) {
+        public okhttp3.Response intercept(Chain chain) throws IOException {
+            final Request.Builder builder = chain.request().newBuilder();
             if (!TextUtils.isEmpty(scribeConfig.userAgent)) {
-                request.addHeader(USER_AGENT_HEADER, scribeConfig.userAgent);
+                builder.header(USER_AGENT_HEADER, scribeConfig.userAgent);
             }
 
             /**
@@ -266,7 +276,7 @@ public void intercept(RequestFacade request) {
              * Scribelib in turn is used by Rufous to marshall the data into the scribe structure.
              */
             if (!TextUtils.isEmpty(idManager.getDeviceUUID())) {
-                request.addHeader(CLIENT_UUID_HEADER, idManager.getDeviceUUID());
+                builder.header(CLIENT_UUID_HEADER, idManager.getDeviceUUID());
             }
 
             /**
@@ -275,7 +285,9 @@ public void intercept(RequestFacade request) {
              *
              * See: https://confluence.twitter.biz/display/PIE/Identifying+API+calls+associated+with+background+polling+events
              */
-            request.addHeader(POLLING_HEADER, POLLING_HEADER_VALUE);
+            builder.header(POLLING_HEADER, POLLING_HEADER_VALUE);
+
+            return chain.proceed(builder.build());
         }
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.java
index dd81e2e4..88eef61c 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeItem.java
@@ -18,10 +18,15 @@
 package com.twitter.sdk.android.core.internal.scribe;
 
 import com.google.gson.annotations.SerializedName;
+import com.twitter.sdk.android.core.internal.VineCardUtils;
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.User;
 
-public class ScribeItem {
+import java.io.Serializable;
+
+public class ScribeItem implements Serializable {
     /**
      * Scribe item types. See ItemType in
      * See: source/tree/science/src/thrift/com/twitter/clientapp/gen/client_app.thrift
@@ -95,6 +100,40 @@ public static ScribeItem fromMessage(String message) {
                 .build();
     }
 
+    public static ScribeItem fromTweetCard(long tweetId, Card card) {
+        return new ScribeItem.Builder()
+                .setItemType(ScribeItem.TYPE_TWEET)
+                .setId(tweetId)
+                .setMediaDetails(createCardDetails(tweetId, card))
+                .build();
+    }
+
+    public static ScribeItem fromMediaEntity(long tweetId, MediaEntity mediaEntity) {
+        return new ScribeItem.Builder()
+                .setItemType(ScribeItem.TYPE_TWEET)
+                .setId(tweetId)
+                .setMediaDetails(createMediaDetails(tweetId, mediaEntity))
+                .build();
+    }
+
+    static ScribeItem.MediaDetails createMediaDetails(long tweetId,
+                                                             MediaEntity mediaEntity) {
+        return new ScribeItem.MediaDetails(tweetId, getMediaType(mediaEntity), mediaEntity.id);
+    }
+
+    static ScribeItem.MediaDetails createCardDetails(long tweetId, Card card) {
+        return new ScribeItem.MediaDetails(tweetId, MediaDetails.TYPE_VINE,
+                Long.valueOf(VineCardUtils.getPublisherId(card)));
+    }
+
+    static int getMediaType(MediaEntity mediaEntity) {
+        if (MediaDetails.GIF_TYPE.equals(mediaEntity.type)) {
+            return ScribeItem.MediaDetails.TYPE_ANIMATED_GIF;
+        } else {
+            return ScribeItem.MediaDetails.TYPE_CONSUMER;
+        }
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
@@ -126,7 +165,7 @@ public int hashCode() {
     /**
      * Card event.
      */
-    public static class CardEvent {
+    public static class CardEvent implements Serializable {
         public CardEvent(int cardType) {
             promotionCardType = cardType;
         }
@@ -151,12 +190,14 @@ public int hashCode() {
     /**
      * Media details.
      */
-    public static class MediaDetails {
+    public static class MediaDetails implements Serializable {
         public static final int TYPE_CONSUMER = 1;
         public static final int TYPE_AMPLIFY = 2;
         public static final int TYPE_ANIMATED_GIF = 3;
         public static final int TYPE_VINE = 4;
 
+        public static final String GIF_TYPE = "animated_gif";
+
         @SerializedName("content_id")
         public final long contentId;
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/SyndicationClientEvent.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/SyndicationClientEvent.java
index 969cf1c2..a4a81f36 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/SyndicationClientEvent.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/SyndicationClientEvent.java
@@ -19,7 +19,6 @@
 
 import com.google.gson.annotations.SerializedName;
 
-import java.util.Collections;
 import java.util.List;
 
 /**
@@ -37,6 +36,12 @@
     @SerializedName("language")
     public final String language;
 
+    /**
+     * Can be set to a free form String. Typically used by clients to record api errors.
+     */
+    @SerializedName("event_info")
+    public final String eventInfo;
+
     /**
      * External Ids can contain other external ids (e.g. Facebook) but in our case we will only
      * scribe the advertising id.
@@ -45,15 +50,11 @@
     @SerializedName("external_ids")
     public final ExternalIds externalIds;
 
-    public SyndicationClientEvent(EventNamespace eventNamespace, long timestamp, String language,
-                           String adId) {
-        this(eventNamespace, timestamp, language, adId, Collections.<ScribeItem>emptyList());
-    }
-
-    public SyndicationClientEvent(EventNamespace eventNamespace, long timestamp, String language,
-            String adId, List<ScribeItem> items) {
+    public SyndicationClientEvent(EventNamespace eventNamespace,  String eventInfo, long timestamp,
+                                  String language, String adId, List<ScribeItem> items) {
         super(SCRIBE_CATEGORY, eventNamespace, timestamp, items);
         this.language = language;
+        this.eventInfo = eventInfo;
         externalIds = new ExternalIds(adId);
     }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/TwitterCoreScribeClientHolder.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/TwitterCoreScribeClientHolder.java
index 42d0eddc..3a92a534 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/TwitterCoreScribeClientHolder.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/TwitterCoreScribeClientHolder.java
@@ -17,12 +17,12 @@
 
 package com.twitter.sdk.android.core.internal.scribe;
 
+import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.SessionManager;
+import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterCore;
 
-import java.util.List;
-
 import io.fabric.sdk.android.services.common.IdManager;
 
 public class TwitterCoreScribeClientHolder {
@@ -42,7 +42,9 @@ public static DefaultScribeClient getScribeClient() {
      * Must be called on background thread
      */
     public static void initialize(TwitterCore kit,
-            List<SessionManager<? extends Session>> sessionManagers, IdManager idManager) {
-        instance = new DefaultScribeClient(kit, KIT_NAME, sessionManagers, idManager);
+            SessionManager<? extends Session<TwitterAuthToken>> sessionManagers,
+            GuestSessionProvider guestSessionProvider, IdManager idManager) {
+        instance = new DefaultScribeClient(kit, KIT_NAME, sessionManagers, guestSessionProvider,
+                idManager);
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/util/AspectRatioImageView.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/util/AspectRatioImageView.java
index 70b848ea..813a124f 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/util/AspectRatioImageView.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/util/AspectRatioImageView.java
@@ -74,18 +74,6 @@ public void setAspectRatio(final double aspectRatio) {
         this.aspectRatio = aspectRatio;
     }
 
-    /**
-     * Resets the size to 0.
-     */
-    public void resetSize() {
-        if (getMeasuredWidth() == 0 && getMeasuredHeight() == 0) {
-            return;
-        }
-        measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.EXACTLY),
-                MeasureSpec.makeMeasureSpec(0, MeasureSpec.EXACTLY));
-        layout(0, 0, 0, 0);
-    }
-
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         super.onMeasure(widthMeasureSpec, heightMeasureSpec);
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiError.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiError.java
index ef214e7a..c6b9238d 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiError.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiError.java
@@ -26,21 +26,13 @@
 public class ApiError {
 
     @SerializedName("message")
-    private final String message;
+    public final String message;
 
     @SerializedName("code")
-    private final int code;
+    public final int code;
 
     public ApiError(String message, int code) {
         this.message = message;
         this.code = code;
     }
-
-    public String getMessage() {
-        return message;
-    }
-
-    public int getCode() {
-        return code;
-    }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/AuthHeaders.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiErrors.java
similarity index 63%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/AuthHeaders.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiErrors.java
index 6651d339..3818f728 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/AuthHeaders.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiErrors.java
@@ -15,15 +15,17 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal.oauth;
+package com.twitter.sdk.android.core.models;
 
-import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.google.gson.annotations.SerializedName;
 
-import java.util.Map;
+import java.util.List;
 
-public interface AuthHeaders {
-    String HEADER_AUTHORIZATION = "Authorization";
+public class ApiErrors {
+    @SerializedName("errors")
+    public final List<ApiError> errors;
 
-    Map<String, String> getAuthHeaders(TwitterAuthConfig authConfig, String method, String url,
-            Map<String, String> postParams);
+    public ApiErrors(List<ApiError> errors) {
+        this.errors = errors;
+    }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValues.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValues.java
new file mode 100644
index 00000000..9db11557
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValues.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models;
+
+import java.util.Collections;
+import java.util.Map;
+
+/**
+ * Map of key/value pairs representing card data.
+ */
+public class BindingValues {
+
+    private final Map<String, Object> bindingValues;
+
+    public BindingValues() {
+        this(Collections.EMPTY_MAP);
+    }
+
+    public BindingValues(Map<String, Object> bindingValues) {
+        this.bindingValues = Collections.unmodifiableMap(bindingValues);
+    }
+
+    /**
+     * Returns {@code true} if specified key exists.
+     */
+    public boolean containsKey(String key) {
+        return bindingValues.containsKey(key);
+    }
+
+    /**
+     * Returns the value for the specified key. Returns {@code null} if key does not exist, or
+     * object cannot be cast to return type.
+     */
+    public <T> T get(String key) {
+        try {
+            return (T) bindingValues.get(key);
+        } catch (ClassCastException ex){
+            return null;
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java
new file mode 100644
index 00000000..a18a1264
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models;
+
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+public class BindingValuesAdapter implements JsonSerializer<BindingValues>,
+        JsonDeserializer<BindingValues> {
+    private static final String STRING_TYPE = "STRING";
+    private static final String IMAGE_TYPE = "IMAGE";
+    private static final String USER_TYPE = "USER";
+    private static final String BOOLEAN_TYPE = "BOOLEAN";
+
+    private static final String TYPE_MEMBER = "type";
+    private static final String TYPE_VALUE_MEMBER = "string_value";
+    private static final String IMAGE_VALUE_MEMBER = "image_value";
+    private static final String USER_VALUE_MEMBER = "user_value";
+    private static final String BOOLEAN_MEMBER = "boolean_value";
+
+    @Override
+    public JsonElement serialize(BindingValues src, Type typeOfSrc,
+            JsonSerializationContext context) {
+        return null;
+    }
+
+    @Override
+    public BindingValues deserialize(JsonElement json, Type typeOfT,
+            JsonDeserializationContext context) throws JsonParseException {
+        if (!json.isJsonObject()) {
+            return new BindingValues();
+        }
+
+        final JsonObject obj = json.getAsJsonObject();
+        final Set<Map.Entry<String, JsonElement>> members = obj.entrySet();
+
+        final Map<String, Object> bindingHash = new HashMap<>(32);
+        for (Map.Entry<String, JsonElement> member : members) {
+            final String key = member.getKey();
+            final JsonObject memberObj = member.getValue().getAsJsonObject();
+            final Object value = getValue(memberObj, context);
+
+            bindingHash.put(key, value);
+        }
+
+        return new BindingValues(bindingHash);
+    }
+
+    Object getValue(JsonObject obj, JsonDeserializationContext context) {
+        final JsonElement typeObj = obj.get(TYPE_MEMBER);
+        if (typeObj == null || !typeObj.isJsonPrimitive()) {
+            return null;
+        }
+
+        switch (typeObj.getAsString()) {
+            case STRING_TYPE:
+                return context.deserialize(obj.get(TYPE_VALUE_MEMBER), String.class);
+            case IMAGE_TYPE:
+                return context.deserialize(obj.get(IMAGE_VALUE_MEMBER), ImageValue.class);
+            case USER_TYPE:
+                return context.deserialize(obj.get(USER_VALUE_MEMBER), UserValue.class);
+            case BOOLEAN_TYPE:
+                return context.deserialize(obj.get(BOOLEAN_MEMBER), Boolean.class);
+            default:
+                return null;
+        }
+    }
+}
diff --git a/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterTestUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java
similarity index 61%
rename from twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterTestUtils.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java
index 0882dd0e..eee87763 100644
--- a/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterTestUtils.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java
@@ -15,16 +15,20 @@
  *
  */
 
-package com.twitter.sdk.android.core;
+package com.twitter.sdk.android.core.models;
 
-import java.util.concurrent.ConcurrentHashMap;
+import com.google.gson.annotations.SerializedName;
 
-public final class TwitterTestUtils {
+public class Card {
 
-    private TwitterTestUtils() {}
+    @SerializedName("binding_values")
+    public final BindingValues bindingValues;
 
-    public static TwitterCore createTwitter(TwitterAuthConfig authConfig,
-                                     ConcurrentHashMap<Session, TwitterApiClient> clients) {
-        return new TwitterCore(authConfig, clients);
+    @SerializedName("name")
+    public final String name;
+
+    public Card(BindingValues bindingValues, String name) {
+        this.bindingValues = bindingValues;
+        this.name = name;
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Coordinates.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Coordinates.java
index 079ce372..d66cd745 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Coordinates.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Coordinates.java
@@ -31,14 +31,14 @@
     public static final int INDEX_LATITUDE = 1;
 
     /**
-     * The longitude and latitude of the Tweet’s location, as an collection in the form of
+     * The longitude and latitude of the Tweet's location, as an collection in the form of
      * [longitude, latitude].
      */
     @SerializedName("coordinates")
     public final List<Double> coordinates;
 
     /**
-     * The type of data encoded in the coordinates property. This will be “Point” for Tweet
+     * The type of data encoded in the coordinates property. This will be "Point" for Tweet
      * coordinates fields.
      */
     @SerializedName("type")
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/HashtagEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/HashtagEntity.java
index 70ba4b38..61e5b81b 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/HashtagEntity.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/HashtagEntity.java
@@ -25,7 +25,7 @@
 public class HashtagEntity extends Entity {
 
     /**
-     * Name of the hashtag, minus the leading ‘#’ character.
+     * Name of the hashtag, minus the leading '#' character.
      */
     @SerializedName("text")
     public final String text;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ImageValue.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ImageValue.java
new file mode 100644
index 00000000..d51c57ef
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ImageValue.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models;
+
+import com.google.gson.annotations.SerializedName;
+
+public class ImageValue {
+
+    @SerializedName("height")
+    public final int height;
+
+    @SerializedName("width")
+    public final int width;
+
+    @SerializedName("url")
+    public final String url;
+
+    @SerializedName("alt")
+    public final String alt;
+
+    public ImageValue(int height, int width, String url, String alt) {
+        this.height = height;
+        this.width = width;
+        this.url = url;
+        this.alt = alt;
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java
index ecd317c0..3357b6e8 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java
@@ -42,7 +42,7 @@
      * A http:// URL pointing directly to the uploaded media file.
      *
      * For media in direct messages, media_url is the same https URL as media_url_https and must be
-     * accessed via an authenticated twitter.com session or by signing a request with the user’s
+     * accessed via an authenticated twitter.com session or by signing a request with the user's
      * access token using OAuth 1.0A. It is not possible to directly embed these images in a web
      * page.
      */
@@ -53,7 +53,7 @@
      * A https:// URL pointing directly to the uploaded media file, for embedding on https pages.
      *
      * For media in direct messages, media_url_https must be accessed via an authenticated
-     * twitter.com session or by signing a request with the user’s access token using OAuth 1.0A.
+     * twitter.com session or by signing a request with the user's access token using OAuth 1.0A.
      * It is not possible to directly embed these images in a web page.
      */
     @SerializedName("media_url_https")
@@ -92,21 +92,13 @@
     @SerializedName("video_info")
     public final VideoInfo videoInfo;
 
-    /**
-     * @deprecated use {@link MediaEntity#MediaEntity(String, String, String, int, int, long,
-     * String, String, String, Sizes, long, String, String, VideoInfo)} instead
-     */
-    @Deprecated
-    public MediaEntity(String url, String expandedUrl, String displayUrl, int start, int end,
-            long id, String idStr, String mediaUrl, String mediaUrlHttps, Sizes sizes,
-            long sourceStatusId, String sourceStatusIdStr, String type) {
-        this(url, expandedUrl, displayUrl, start, end, id, idStr, mediaUrl, mediaUrlHttps, sizes,
-                sourceStatusId, sourceStatusIdStr, type, null);
-    }
+    @SerializedName("ext_alt_text")
+    public final String altText;
 
     public MediaEntity(String url, String expandedUrl, String displayUrl, int start, int end,
             long id, String idStr, String mediaUrl, String mediaUrlHttps, Sizes sizes,
-            long sourceStatusId, String sourceStatusIdStr, String type, VideoInfo videoInfo) {
+            long sourceStatusId, String sourceStatusIdStr, String type, VideoInfo videoInfo,
+            String altText) {
         super(url, expandedUrl, displayUrl, start, end);
         this.id = id;
         this.idStr = idStr;
@@ -117,6 +109,7 @@ public MediaEntity(String url, String expandedUrl, String displayUrl, int start,
         this.sourceStatusIdStr = sourceStatusIdStr;
         this.type = type;
         this.videoInfo = videoInfo;
+        this.altText = altText;
     }
 
     public static class Sizes implements Serializable {
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Place.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Place.java
index 77424e9b..597bf467 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Place.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Place.java
@@ -53,7 +53,7 @@
     public final String countryCode;
 
     /**
-     * Full human-readable representation of the place’s name.
+     * Full human-readable representation of the place's name.
      */
     @SerializedName("full_name")
     public final String fullName;
@@ -65,7 +65,7 @@
     public final String id;
 
     /**
-     * Short human-readable representation of the place’s name.
+     * Short human-readable representation of the place's name.
      */
     @SerializedName("name")
     public final String name;
@@ -107,7 +107,7 @@ public Place(Map<String, String> attributes, BoundingBox boundingBox, String cou
         public final List<List<List<Double>>> coordinates;
 
         /**
-         * The type of data encoded in the coordinates property. This will be “Polygon” for bounding
+         * The type of data encoded in the coordinates property. This will be "Polygon" for bounding
          * boxes.
          */
         @SerializedName("type")
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/AppAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SymbolEntity.java
similarity index 57%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/AppAuthToken.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/SymbolEntity.java
index 0f1b86e7..0cd48d16 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/AppAuthToken.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SymbolEntity.java
@@ -15,18 +15,24 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal.oauth;
+package com.twitter.sdk.android.core.models;
+
+import com.google.gson.annotations.SerializedName;
 
 /**
- * Application-only auth.
+ * Represents symbols which have been parsed out of the Tweet text.
  */
-public class AppAuthToken extends OAuth2Token {
 
-    public AppAuthToken(String tokenType, String accessToken) {
-        super(tokenType, accessToken);
-    }
+public class SymbolEntity extends Entity {
+
+    /**
+     * Name of the symbol, minus the leading '$' character.
+     */
+    @SerializedName("text")
+    public final String text;
 
-    public AppAuthToken(String tokenType, String accessToken, long createdAt) {
-        super(tokenType, accessToken, createdAt);
+    public SymbolEntity(String text, int start, int end) {
+        super(start, end);
+        this.text = text;
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java
index f9e93322..d90d56a0 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java
@@ -23,7 +23,7 @@
 
 /**
  * A Tweet is the basic atomic building block of all things Twitter. Tweets, also known more
- * generically as “status updates.” Tweets can be embedded, replied to, favorited, unfavorited and
+ * generically as "status updates." Tweets can be embedded, replied to, favorited, unfavorited and
  * deleted.
  */
 public class Tweet implements Identifiable {
@@ -46,7 +46,7 @@
 
     /**
      * Perspectival. Only surfaces on methods supporting the include_my_retweet parameter, when set
-     * to true. Details the Tweet ID of the user’s own retweet (if existent) of this Tweet.
+     * to true. Details the Tweet ID of the user's own retweet (if existent) of this Tweet.
      */
     @SerializedName("current_user_retweet")
     public final Object currentUserRetweet;
@@ -64,7 +64,7 @@
     public final TweetEntities extendedEtities;
 
     /**
-     * Nullable. Indicates approximately how many times this Tweet has been “favorited” by Twitter
+     * Nullable. Indicates approximately how many times this Tweet has been "favorited" by Twitter
      * users.
      */
     @SerializedName("favorite_count")
@@ -103,28 +103,28 @@
 
     /**
      * Nullable. If the represented Tweet is a reply, this field will contain the screen name of
-     * the original Tweet’s author.
+     * the original Tweet's author.
      */
     @SerializedName("in_reply_to_screen_name")
     public final String inReplyToScreenName;
 
     /**
      * Nullable. If the represented Tweet is a reply, this field will contain the integer
-     * representation of the original Tweet’s ID.
+     * representation of the original Tweet's ID.
      */
     @SerializedName("in_reply_to_status_id")
     public final long inReplyToStatusId;
 
     /**
      * Nullable. If the represented Tweet is a reply, this field will contain the string
-     * representation of the original Tweet’s ID.
+     * representation of the original Tweet's ID.
      */
     @SerializedName("in_reply_to_status_id_str")
     public final String inReplyToStatusIdStr;
 
     /**
      * Nullable. If the represented Tweet is a reply, this field will contain the integer
-     * representation of the original Tweet’s author ID. This will not necessarily always be the
+     * representation of the original Tweet's author ID. This will not necessarily always be the
      * user directly mentioned in the Tweet.
      */
     @SerializedName("in_reply_to_user_id")
@@ -132,7 +132,7 @@
 
     /**
      * Nullable. If the represented Tweet is a reply, this field will contain the string
-     * representation of the original Tweet’s author ID. This will not necessarily always be the
+     * representation of the original Tweet's author ID. This will not necessarily always be the
      * user directly mentioned in the Tweet.
      */
     @SerializedName("in_reply_to_user_id_str")
@@ -140,7 +140,7 @@
 
     /**
      * Nullable. When present, indicates a BCP 47 language identifier corresponding to the
-     * machine-detected language of the Tweet text, or “und” if no language could be detected.
+     * machine-detected language of the Tweet text, or "und" if no language could be detected.
      */
     @SerializedName("lang")
     public final String lang;
@@ -154,7 +154,7 @@
 
     /**
      * Nullable. This field only surfaces when a tweet contains a link. The meaning of the field
-     * doesn’t pertain to the tweet content itself, but instead it is an indicator that the URL
+     * doesn't pertain to the tweet content itself, but instead it is an indicator that the URL
      * contained in the tweet may contain content or media identified as sensitive content.
      */
     @SerializedName("possibly_sensitive")
@@ -162,14 +162,35 @@
 
     /**
      * A set of key-value pairs indicating the intended contextual delivery of the containing Tweet.
-     * Currently used by Twitter’s Promoted Products.
+     * Currently used by Twitter's Promoted Products.
      */
     @SerializedName("scopes")
     public final Object scopes;
 
+    /**
+     * This field only surfaces when the Tweet is a quote Tweet. This field contains the
+     * integer value Tweet ID of the quoted Tweet.
+     */
+    @SerializedName("quoted_status_id")
+    public final long quotedStatusId;
+
+    /**
+     * This field only surfaces when the Tweet is a quote Tweet. This is the string representation
+     * Tweet ID of the quoted Tweet.
+     */
+    @SerializedName("quoted_status_id_str")
+    public final String quotedStatusIdStr;
+
+    /**
+     * This field only surfaces when the Tweet is a quote Tweet. This attribute contains the
+     * Tweet object of the original Tweet that was quoted.
+     */
+    @SerializedName("quoted_status")
+    public final Tweet quotedStatus;
+
     /**
      * Number of times this Tweet has been retweeted. This field is no longer capped at 99 and will
-     * not turn into a String for “100+”
+     * not turn into a String for "100+"
      */
     @SerializedName("retweet_count")
     public final int retweetCount;
@@ -188,7 +209,6 @@
      * original tweet. (Users can also unretweet a retweet they created by deleting their retweet.)
      */
     @SerializedName("retweeted_status")
-
     public final Tweet retweetedStatus;
 
     /**
@@ -202,9 +222,17 @@
      * The actual UTF-8 text of the status update. See twitter-text for details on what is currently
      * considered valid characters.
      */
-    @SerializedName("text")
+    @SerializedName(value = "text", alternate = {"full_text"})
     public final String text;
 
+
+    /**
+     * An array of two unicode code point indices, identifying the inclusive start and exclusive end
+     * of the displayable content of the Tweet.
+     */
+    @SerializedName("display_text_range")
+    public final List<Integer> displayTextRange;
+
     /**
      * Indicates whether the value of the text parameter was truncated, for example, as a result of
      * a retweet exceeding the 140 character Tweet length. Truncated text will end in ellipsis, like
@@ -225,7 +253,7 @@
     public final User user;
 
     /**
-     * When present and set to “true”, it indicates that this piece of content has been withheld due
+     * When present and set to "true", it indicates that this piece of content has been withheld due
      * to a DMCA complaint.
      */
     @SerializedName("withheld_copyright")
@@ -234,45 +262,34 @@
     /**
      * When present, indicates a list of uppercase two-letter country codes this content is withheld
      * from. Twitter supports the following non-country values for this field:
-     * “XX” - Content is withheld in all countries
-     * “XY” - Content is withheld due to a DMCA request.
+     * "XX" - Content is withheld in all countries
+     * "XY" - Content is withheld due to a DMCA request.
      */
     @SerializedName("withheld_in_countries")
     public final List<String> withheldInCountries;
 
     /**
-     * When present, indicates whether the content being withheld is the “status” or a “user.”
+     * When present, indicates whether the content being withheld is the "status" or a "user."
      */
     @SerializedName("withheld_scope")
     public final String withheldScope;
 
     /**
-     * @deprecated use {@link TweetBuilder} instead.
+     * Nullable. Card data used to attach rich photos, videos and media experience to Tweets.
      */
-    @Deprecated
-    public Tweet(Coordinates coordinates, String createdAt, Object currentUserRetweet,
-            TweetEntities entities, Integer favoriteCount,
-            boolean favorited, String filterLevel, long id, String idStr,
-            String inReplyToScreenName, long inReplyToStatusId, String inReplyToStatusIdStr,
-            long inReplyToUserId, String inReplyToUserIdStr, String lang, Place place,
-            boolean possiblySensitive, Object scopes, int retweetCount, boolean retweeted,
-            Tweet retweetedStatus, String source, String text, boolean truncated, User user,
-            boolean withheldCopyright, List<String> withheldInCountries, String withheldScope) {
-        this(coordinates, createdAt, currentUserRetweet, entities, null, favoriteCount,
-                favorited, filterLevel, id, idStr, inReplyToScreenName, inReplyToStatusId,
-                inReplyToStatusIdStr, inReplyToUserId, inReplyToUserIdStr, lang, place,
-                possiblySensitive, scopes, retweetCount, retweeted, retweetedStatus, source,
-                text, truncated, user, withheldCopyright, withheldInCountries, withheldScope);
-    }
+    @SerializedName("card")
+    public final Card card;
 
     public Tweet(Coordinates coordinates, String createdAt, Object currentUserRetweet,
             TweetEntities entities, TweetEntities extendedEtities, Integer favoriteCount,
             boolean favorited, String filterLevel, long id, String idStr,
             String inReplyToScreenName, long inReplyToStatusId, String inReplyToStatusIdStr,
             long inReplyToUserId, String inReplyToUserIdStr, String lang, Place place,
-            boolean possiblySensitive, Object scopes, int retweetCount, boolean retweeted,
-            Tweet retweetedStatus, String source, String text, boolean truncated, User user,
-            boolean withheldCopyright, List<String> withheldInCountries, String withheldScope) {
+            boolean possiblySensitive, Object scopes, long quotedStatusId, String quotedStatusIdStr,
+            Tweet quotedStatus, int retweetCount, boolean retweeted, Tweet retweetedStatus,
+            String source, String text, List<Integer> displayTextRange, boolean truncated,
+            User user, boolean withheldCopyright, List<String> withheldInCountries,
+            String withheldScope, Card card) {
         this.coordinates = coordinates;
         this.createdAt = createdAt;
         this.currentUserRetweet = currentUserRetweet;
@@ -292,16 +309,21 @@ public Tweet(Coordinates coordinates, String createdAt, Object currentUserRetwee
         this.place = place;
         this.possiblySensitive = possiblySensitive;
         this.scopes = scopes;
+        this.quotedStatusId = quotedStatusId;
+        this.quotedStatusIdStr = quotedStatusIdStr;
+        this.quotedStatus = quotedStatus;
         this.retweetCount = retweetCount;
         this.retweeted = retweeted;
         this.retweetedStatus = retweetedStatus;
         this.source = source;
         this.text = text;
+        this.displayTextRange = displayTextRange;
         this.truncated = truncated;
         this.user = user;
         this.withheldCopyright = withheldCopyright;
         this.withheldInCountries = withheldInCountries;
         this.withheldScope = withheldScope;
+        this.card = card;
     }
 
     @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java
index 0ee46543..bf414e15 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java
@@ -17,6 +17,7 @@
 
 package com.twitter.sdk.android.core.models;
 
+import java.util.Collections;
 import java.util.List;
 
 public class TweetBuilder {
@@ -39,16 +40,21 @@
     private Place place;
     private boolean possiblySensitive;
     private Object scopes;
+    private long quotedStatusId;
+    private String quotedStatusIdStr;
+    private Tweet quotedStatus;
     private int retweetCount;
     private boolean retweeted;
     private Tweet retweetedStatus;
     private String source;
     private String text;
+    private List<Integer> displayTextRange = Collections.EMPTY_LIST;
     private boolean truncated;
     private User user;
     private boolean withheldCopyright;
-    private List<String> withheldInCountries;
+    private List<String> withheldInCountries = Collections.EMPTY_LIST;
     private String withheldScope;
+    private Card card;
 
     public TweetBuilder setCoordinates(Coordinates coordinates) {
         this.coordinates = coordinates;
@@ -145,6 +151,21 @@ public TweetBuilder setScopes(Object scopes) {
         return this;
     }
 
+    public TweetBuilder setQuotedStatusId(long quotedStatusId) {
+        this.quotedStatusId = quotedStatusId;
+        return this;
+    }
+
+    public TweetBuilder setQuotedStatusIdStr(String quotedStatusIdStr) {
+        this.quotedStatusIdStr = quotedStatusIdStr;
+        return this;
+    }
+
+    public TweetBuilder setQuotedStatus(Tweet quotedStatus) {
+        this.quotedStatus = quotedStatus;
+        return this;
+    }
+
     public TweetBuilder setRetweetCount(int retweetCount) {
         this.retweetCount = retweetCount;
         return this;
@@ -170,6 +191,11 @@ public TweetBuilder setText(String text) {
         return this;
     }
 
+    public TweetBuilder setDisplayTextRange(List<Integer> displayTextRange) {
+        this.displayTextRange = displayTextRange;
+        return this;
+    }
+
     public TweetBuilder setTruncated(boolean truncated) {
         this.truncated = truncated;
         return this;
@@ -195,6 +221,11 @@ public TweetBuilder setWithheldScope(String withheldScope) {
         return this;
     }
 
+    public TweetBuilder setCard(Card card) {
+        this.card = card;
+        return this;
+    }
+
     public TweetBuilder copy(Tweet tweet) {
         this.coordinates = tweet.coordinates;
         this.createdAt = tweet.createdAt;
@@ -215,16 +246,21 @@ public TweetBuilder copy(Tweet tweet) {
         this.place = tweet.place;
         this.possiblySensitive = tweet.possiblySensitive;
         this.scopes = tweet.scopes;
+        this.quotedStatusId = tweet.quotedStatusId;
+        this.quotedStatusIdStr = tweet.quotedStatusIdStr;
+        this.quotedStatus = tweet.quotedStatus;
         this.retweetCount = tweet.retweetCount;
         this.retweeted = tweet.retweeted;
         this.retweetedStatus = tweet.retweetedStatus;
         this.source = tweet.source;
         this.text = tweet.text;
+        this.displayTextRange = tweet.displayTextRange;
         this.truncated = tweet.truncated;
         this.user = tweet.user;
         this.withheldCopyright = tweet.withheldCopyright;
         this.withheldInCountries = tweet.withheldInCountries;
         this.withheldScope = tweet.withheldScope;
+        this.card = tweet.card;
         return this;
     }
 
@@ -232,8 +268,9 @@ public Tweet build() {
         return new Tweet(coordinates, createdAt, currentUserRetweet, entities, extendedEtities,
                 favoriteCount, favorited, filterLevel, id, idStr, inReplyToScreenName,
                 inReplyToStatusId, inReplyToStatusIdStr, inReplyToUserId, inReplyToUserIdStr,
-                lang, place, possiblySensitive, scopes, retweetCount, retweeted,
-                retweetedStatus, source, text, truncated, user, withheldCopyright,
-                withheldInCountries, withheldScope);
+                lang, place, possiblySensitive, scopes, quotedStatusId, quotedStatusIdStr,
+                quotedStatus, retweetCount, retweeted, retweetedStatus, source, text,
+                displayTextRange, truncated, user, withheldCopyright, withheldInCountries,
+                withheldScope, card);
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java
index 6dbeebd0..76340eba 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java
@@ -51,12 +51,28 @@
     @SerializedName("hashtags")
     public final List<HashtagEntity> hashtags;
 
+    /**
+     * Represents symbols which have been parsed out of the Tweet text.
+     */
+    @SerializedName("symbols")
+    public final List<SymbolEntity> symbols;
+
+    /**
+     * @deprecated use {@link TweetEntities#TweetEntities(List, List, List, List, List)} instead
+     */
+    @Deprecated
+    public TweetEntities(List<UrlEntity> urls, List<MentionEntity> userMentions,
+                         List<MediaEntity> media, List<HashtagEntity> hashtags) {
+        this(urls, userMentions, media, hashtags, null);
+    }
+
     public TweetEntities(List<UrlEntity> urls, List<MentionEntity> userMentions,
-            List<MediaEntity> media, List<HashtagEntity> hashtags) {
+            List<MediaEntity> media, List<HashtagEntity> hashtags, List<SymbolEntity> symbols) {
         this.urls = getSafeList(urls);
         this.userMentions = getSafeList(userMentions);
         this.media = getSafeList(media);
         this.hashtags = getSafeList(hashtags);
+        this.symbols = getSafeList(symbols);
     }
 
     private <T> List<T> getSafeList(List<T> entities) {
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterCollection.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TwitterCollection.java
similarity index 96%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterCollection.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/TwitterCollection.java
index fcf22867..ecb9bd4c 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterCollection.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TwitterCollection.java
@@ -15,11 +15,9 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal;
+package com.twitter.sdk.android.core.models;
 
 import com.google.gson.annotations.SerializedName;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.User;
 
 import java.util.List;
 import java.util.Map;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
index 30d55ecc..5ee60582 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
@@ -20,6 +20,7 @@
 import com.google.gson.annotations.SerializedName;
 
 import java.io.Serializable;
+import java.util.List;
 
 /**
  * Users can be anyone or anything. They tweet, follow, create lists, have a home_timeline, can be
@@ -30,7 +31,7 @@
     public static final long INVALID_ID = -1L;
 
     /**
-     * Indicates that the user has an account with “contributor mode” enabled, allowing for Tweets
+     * Indicates that the user has an account with "contributor mode" enabled, allowing for Tweets
      * issued by the user to be co-authored by another account. Rarely true.
      */
     @SerializedName("contributors_enabled")
@@ -77,7 +78,7 @@
     public final UserEntities entities;
 
     /**
-     * The number of tweets this user has favorited in the account’s lifetime. British spelling used
+     * The number of tweets this user has favorited in the account's lifetime. British spelling used
      * in the field name for historical reasons.
      */
     @SerializedName("favourites_count")
@@ -92,14 +93,14 @@
 
     /**
      * The number of followers this account currently has. Under certain conditions of duress, this
-     * field will temporarily indicate “0.”
+     * field will temporarily indicate "0."
      */
     @SerializedName("followers_count")
     public final int followersCount;
 
     /**
-     * The number of users this account is following (AKA their “followings”). Under certain
-     * conditions of duress, this field will temporarily indicate “0.”
+     * The number of users this account is following (AKA their "followings"). Under certain
+     * conditions of duress, this field will temporarily indicate "0."
      */
     @SerializedName("friends_count")
     public final int friendsCount;
@@ -130,13 +131,13 @@
     public final String idStr;
 
     /**
-     * When true, indicates that the user is a participant in Twitter’s translator community.
+     * When true, indicates that the user is a participant in Twitter's translator community.
      */
     @SerializedName("is_translator")
     public final boolean isTranslator;
 
     /**
-     * The BCP 47 code for the user’s self-declared user interface language. May or may not have
+     * The BCP 47 code for the user's self-declared user interface language. May or may not have
      * anything to do with the content of their Tweets.
      */
     @SerializedName("lang")
@@ -149,14 +150,14 @@
     public final int listedCount;
 
     /**
-     * Nullable. The user-defined location for this account’s profile. Not necessarily a location
+     * Nullable. The user-defined location for this account's profile. Not necessarily a location
      * nor parseable. This field will occasionally be fuzzily interpreted by the Search service.
      */
     @SerializedName("location")
     public final String location;
 
     /**
-     * The name of the user, as they’ve defined it. Not necessarily a person’s name. Typically
+     * The name of the user, as they've defined it. Not necessarily a person's name. Typically
      * capped at 20 characters, but subject to change.
      */
     @SerializedName("name")
@@ -181,14 +182,14 @@
     public final String profileBackgroundImageUrlHttps;
 
     /**
-     * When true, indicates that the user’s profile_background_image_url should be tiled when
+     * When true, indicates that the user's profile_background_image_url should be tiled when
      * displayed.
      */
     @SerializedName("profile_background_tile")
     public final boolean profileBackgroundTile;
 
     /**
-     * The HTTPS-based URL pointing to the standard web representation of the user’s uploaded
+     * The HTTPS-based URL pointing to the standard web representation of the user's uploaded
      * profile banner. By adding a final path element of the URL, you can obtain different image
      * sizes optimized for specific displays. In the future, an API method will be provided to serve
      * these URLs so that you need not modify the original URL. For size variations, please see
@@ -198,13 +199,13 @@
     public final String profileBannerUrl;
 
     /**
-     * A HTTP-based URL pointing to the user’s avatar image. See User Profile Images and Banners.
+     * A HTTP-based URL pointing to the user's avatar image. See User Profile Images and Banners.
      */
     @SerializedName("profile_image_url")
     public final String profileImageUrl;
 
     /**
-     * A HTTPS-based URL pointing to the user’s avatar image.
+     * A HTTPS-based URL pointing to the user's avatar image.
      */
     @SerializedName("profile_image_url_https")
     public final String profileImageUrlHttps;
@@ -263,7 +264,7 @@
     public final boolean showAllInlineMedia;
 
     /**
-     * Nullable. If possible, the user’s most recent tweet or retweet. In some circumstances, this
+     * Nullable. If possible, the user's most recent tweet or retweet. In some circumstances, this
      * data cannot be provided and this field will be omitted, null, or empty. Perspectival
      * attributes within tweets embedded within users cannot always be relied upon. See Why are
      * embedded objects stale or inaccurate?.
@@ -306,10 +307,10 @@
      * withheld from.
      */
     @SerializedName("withheld_in_countries")
-    public final String withheldInCountries;
+    public final List<String> withheldInCountries;
 
     /**
-     * When present, indicates whether the content being withheld is the “status” or a “user.”
+     * When present, indicates whether the content being withheld is the "status" or a "user."
      */
     @SerializedName("withheld_scope")
     public final String withheldScope;
@@ -326,7 +327,7 @@ public User(boolean contributorsEnabled, String createdAt, boolean defaultProfil
             String profileSidebarFillColor, String profileTextColor,
             boolean profileUseBackgroundImage, boolean protectedUser, String screenName,
             boolean showAllInlineMedia, Tweet status, int statusesCount, String timeZone,
-            String url, int utcOffset, boolean verified, String withheldInCountries,
+            String url, int utcOffset, boolean verified, List<String> withheldInCountries,
             String withheldScope) {
         this.contributorsEnabled = contributorsEnabled;
         this.createdAt = createdAt;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
index 3af5c402..3483f945 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
@@ -17,6 +17,8 @@
 
 package com.twitter.sdk.android.core.models;
 
+import java.util.List;
+
 public class UserBuilder {
     private boolean contributorsEnabled;
     private String createdAt;
@@ -58,7 +60,7 @@
     private String url;
     private int utcOffset;
     private boolean verified;
-    private String withheldInCountries;
+    private List<String> withheldInCountries;
     private String withheldScope;
 
     public UserBuilder setContributorsEnabled(boolean contributorsEnabled) {
@@ -261,7 +263,7 @@ public UserBuilder setVerified(boolean verified) {
         return this;
     }
 
-    public UserBuilder setWithheldInCountries(String withheldInCountries) {
+    public UserBuilder setWithheldInCountries(List<String> withheldInCountries) {
         this.withheldInCountries = withheldInCountries;
         return this;
     }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeConstants.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java
similarity index 70%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeConstants.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java
index 5fa5a8d6..0f017e71 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeConstants.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java
@@ -15,11 +15,17 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal.scribe;
+package com.twitter.sdk.android.core.models;
 
-import com.twitter.sdk.android.core.TwitterSession;
+import com.google.gson.annotations.SerializedName;
 
-public class ScribeConstants {
+public class UserValue {
 
-    public static final long LOGGED_OUT_USER_ID = TwitterSession.LOGGED_OUT_USER_ID;
+    @SerializedName("id_str")
+    public final String idStr;
+
+    public UserValue(String idStr) {
+        this.idStr = idStr;
+    }
 }
+
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java
index 10322448..15289066 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java
@@ -17,11 +17,11 @@
 
 package com.twitter.sdk.android.core.services;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.User;
 
-import retrofit.http.GET;
-import retrofit.http.Query;
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
 
 public interface AccountService {
 
@@ -33,27 +33,8 @@
      * @param includeEntities (optional) The entities node will not be included when set to false.
      * @param skipStatus (optional) When set to either true, t or 1 statuses will not be included in
      *                   the returned user objects.
-     * @param cb The callback to invoke when the request completes.
      */
     @GET("/1.1/account/verify_credentials.json")
-    void verifyCredentials(@Query("include_entities") Boolean includeEntities,
-            @Query("skip_status") Boolean skipStatus,
-            Callback<User> cb);
-
-    /**
-     * Synchronous version of the verify credentials API.
-     *
-     * Returns an HTTP 200 OK response code and a representation of the requesting user if
-     * authentication was successful; returns a 401 status code and an error message if not. Use
-     * this method to test if supplied user credentials are valid.
-     *
-     * @param includeEntities (optional) The entities node will not be included when set to false.
-     * @param skipStatus (optional) When set to either true, t or 1 statuses will not be included in
-     *                   the returned user objects.
-     * @return the User Object
-     */
-    @GET("/1.1/account/verify_credentials.json")
-    User verifyCredentials(@Query("include_entities") Boolean includeEntities,
-            @Query("skip_status") Boolean skipStatus);
-
+    Call<User> verifyCredentials(@Query("include_entities") Boolean includeEntities,
+                                 @Query("skip_status") Boolean skipStatus);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java
index dd092f7a..e75b05ab 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java
@@ -17,11 +17,11 @@
 
 package com.twitter.sdk.android.core.services;
 
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.internal.TwitterCollection;
+import com.twitter.sdk.android.core.models.TwitterCollection;
 
-import retrofit.http.GET;
-import retrofit.http.Query;
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
 
 public interface CollectionService {
 
@@ -34,18 +34,17 @@
      * exist in the collection outside of what was in range of the current request.
      * @param id The identifier of the Collection to return results for (e.g. "custom-5394878324")
      * @param count Specifies the number of Tweets to try and retrieve, up to a maximum of 200 per
-     *              distinct request. The value of count is best thought of as an “up to” parameter;
+     *              distinct request. The value of count is best thought of as an "up to" parameter;
      *              receiving less results than the specified count does not necessarily mean there
-     *              aren’t remaining results to fetch.
+     *              aren't remaining results to fetch.
      * @param maxPosition Returns results with a position value less than or equal to the specified
      *                    position.
      * @param minPosition Returns results with a position greater than the specified position.
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/collections/entries.json")
-    void collection(@Query("id") String id,
-                    @Query("count") Integer count,
-                    @Query("max_position") Long maxPosition,
-                    @Query("min_position") Long minPosition,
-                    Callback<TwitterCollection> cb);
+    @GET("/1.1/collections/entries.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<TwitterCollection> collection(@Query("id") String id,
+                                       @Query("count") Integer count,
+                                       @Query("max_position") Long maxPosition,
+                                       @Query("min_position") Long minPosition);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java
index aa08045c..aeb4e0e8 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java
@@ -17,18 +17,16 @@
 
 package com.twitter.sdk.android.core.services;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Configuration;
 
-import retrofit.http.GET;
+import retrofit2.Call;
+import retrofit2.http.GET;
 
 public interface ConfigurationService {
     /**
      * Returns the current configuration used by Twitter including twitter.com slugs which are not
      * user names, maximum photo resolutions, and t.co URL lengths.
-     *
-     * @param cb The callback to invoke when the request completes.
      */
     @GET("/1.1/help/configuration.json")
-    void configuration(Callback<Configuration> cb);
+    Call<Configuration> configuration();
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java
index 969ba057..97d55a4c 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java
@@ -17,16 +17,16 @@
 
 package com.twitter.sdk.android.core.services;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Tweet;
 
 import java.util.List;
 
-import retrofit.http.Field;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.GET;
-import retrofit.http.POST;
-import retrofit.http.Query;
+import retrofit2.Call;
+import retrofit2.http.Field;
+import retrofit2.http.FormUrlEncoded;
+import retrofit2.http.GET;
+import retrofit2.http.POST;
+import retrofit2.http.Query;
 
 public interface FavoriteService {
 
@@ -45,17 +45,15 @@
      * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
      *              to the specified ID.
      * @param includeEntities (optional) The entities node will be omitted when set to false.
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/favorites/list.json")
-    void list(@Query("user_id") Long userId,
-            @Query("screen_name") String screenName,
-            @Query("count") Integer count,
-            @Query("since_id") String sinceId,
-            @Query("max_id") String maxId,
-            @Query("include_entities") Boolean includeEntities,
-            Callback<List<Tweet>> cb);
-
+    @GET("/1.1/favorites/list.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<List<Tweet>> list(@Query("user_id") Long userId,
+                           @Query("screen_name") String screenName,
+                           @Query("count") Integer count,
+                           @Query("since_id") String sinceId,
+                           @Query("max_id") String maxId,
+                           @Query("include_entities") Boolean includeEntities);
 
     /**
      * Un-favorites the status specified in the ID parameter as the authenticating user. Returns the
@@ -67,13 +65,12 @@ void list(@Query("user_id") Long userId,
      *
      * @param id (required) The numerical ID of the desired status.
      * @param includeEntities (optional) The entities node will be omitted when set to false.
-     * @param cb The callback to invoke when the request completes.
      */
     @FormUrlEncoded
-    @POST("/1.1/favorites/destroy.json")
-    void destroy(@Field("id") Long id,
-            @Field("include_entities") Boolean includeEntities,
-            Callback<Tweet> cb);
+    @POST("/1.1/favorites/destroy.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<Tweet> destroy(@Field("id") Long id,
+                        @Field("include_entities") Boolean includeEntities);
 
     /**
      * Favorites the status specified in the ID parameter as the authenticating user. Returns the
@@ -85,11 +82,10 @@ void destroy(@Field("id") Long id,
      *
      * @param id (required) The numerical ID of the desired status.
      * @param includeEntities (optional) The entities node will be omitted when set to false.
-     * @param cb The callback to invoke when the request completes.
      */
     @FormUrlEncoded
-    @POST("/1.1/favorites/create.json")
-    void create(@Field("id") Long id,
-            @Field("include_entities") Boolean includeEntities,
-            Callback<Tweet> cb);
+    @POST("/1.1/favorites/create.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<Tweet> create(@Field("id") Long id,
+                       @Field("include_entities") Boolean includeEntities);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java
index c1a4c147..aa30ed87 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java
@@ -17,13 +17,13 @@
 
 package com.twitter.sdk.android.core.services;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Tweet;
 
 import java.util.List;
 
-import retrofit.http.GET;
-import retrofit.http.Query;
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
 
 public interface ListService {
 
@@ -32,7 +32,7 @@
      * by default.
      * @param listId The numerical id of the list.
      * @param slug You can identify a list by its slug instead of its numerical id. If you decide to
-     *             do so, note that you’ll also have to specify the list owner using the owner_id or
+     *             do so, note that you'll also have to specify the list owner using the owner_id or
      *             owner_screen_name parameters.
      * @param ownerScreenName The screen name of the user who owns the list being requested by a
      *                        slug.
@@ -43,26 +43,25 @@
      *                since_id will be forced to the oldest ID available.
      * @param maxId Returns results with an ID less than (that is, older than) or equal to the
      *              specified ID.
-     * @param count Specifies the number of results to retrieve per “page.”
+     * @param count Specifies the number of results to retrieve per "page."
      * @param includeEntities Entities are ON by default in API 1.1, each Tweet includes a node
-     *                        called “entities”. This node offers a variety of metadata about the
+     *                        called "entities." This node offers a variety of metadata about the
      *                        Tweet in a discrete structure, including: user_mentions, urls, and
      *                        hashtags.
      * @param includeRetweets When set to either true, t or 1, the list timeline will contain native
      *                        retweets (if they exist) in addition to the standard stream of tweets.
      *                        The output format of retweeted tweets is identical to the
      *                        representation you see in home_timeline.
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/lists/statuses.json")
-    void statuses(@Query("list_id") Long listId,
-                  @Query("slug") String slug,
-                  @Query("owner_screen_name") String ownerScreenName,
-                  @Query("owner_id") Long ownerId,
-                  @Query("since_id") Long sinceId,
-                  @Query("max_id") Long maxId,
-                  @Query("count") Integer count,
-                  @Query("include_entities") Boolean includeEntities,
-                  @Query("include_rts") Boolean includeRetweets,
-                  Callback<List<Tweet>> cb);
+    @GET("/1.1/lists/statuses.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<List<Tweet>> statuses(@Query("list_id") Long listId,
+                               @Query("slug") String slug,
+                               @Query("owner_screen_name") String ownerScreenName,
+                               @Query("owner_id") Long ownerId,
+                               @Query("since_id") Long sinceId,
+                               @Query("max_id") Long maxId,
+                               @Query("count") Integer count,
+                               @Query("include_entities") Boolean includeEntities,
+                               @Query("include_rts") Boolean includeRetweets);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java
index 0806f67f..844cfdea 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java
@@ -17,14 +17,13 @@
 
 package com.twitter.sdk.android.core.services;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Media;
 
-import retrofit.http.Multipart;
-import retrofit.http.POST;
-import retrofit.http.Part;
-import retrofit.mime.TypedFile;
-import retrofit.mime.TypedString;
+import okhttp3.RequestBody;
+import retrofit2.Call;
+import retrofit2.http.Multipart;
+import retrofit2.http.POST;
+import retrofit2.http.Part;
 
 public interface MediaService {
 
@@ -38,12 +37,10 @@
      *              parameter.
      * @param mediaData the base64-encoded file content to upload. Cannot be used with the media
      *                  parameter
-     * @param cb The callback to invoke when the request completes.
      */
     @Multipart
-    @POST("/1.1/media/upload.json")
-    void upload(@Part("media") TypedFile media,
-                @Part("media_data") TypedFile mediaData,
-                @Part("additional_owners") TypedString additionalOwners,
-                Callback<Media> cb);
+    @POST("https://upload.twitter.com/1.1/media/upload.json")
+    Call<Media> upload(@Part("media") RequestBody media,
+                @Part("media_data") RequestBody mediaData,
+                @Part("additional_owners") RequestBody additionalOwners);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java
index a339f27f..c010e800 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java
@@ -17,12 +17,12 @@
 
 package com.twitter.sdk.android.core.services;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.services.params.Geocode;
 import com.twitter.sdk.android.core.models.Search;
-import retrofit.http.EncodedQuery;
-import retrofit.http.GET;
-import retrofit.http.Query;
+
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
 
 public interface SearchService {
 
@@ -74,18 +74,18 @@
      * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
      *              to the specified ID.
      * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     * @param cb (required) Callback to be executed with result
      */
-    @GET("/1.1/search/tweets.json")
-    void tweets(@Query("q") String query,
-                @EncodedQuery("geocode") Geocode geocode, //EncodedQuery protects commas from encode
-                @Query("lang") String lang,
-                @Query("locale") String locale,
-                @Query("result_type") String resultType,
-                @Query("count") Integer count,
-                @Query("until") String until,
-                @Query("since_id") Long sinceId,
-                @Query("max_id") Long maxId,
-                @Query("include_entities") Boolean includeEntities,
-                Callback<Search> cb);
+    @GET("/1.1/search/tweets.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<Search> tweets(@Query("q") String query,
+                        //EncodedQuery protects commas from encode
+                        @Query(value = "geocode", encoded = true) Geocode geocode,
+                        @Query("lang") String lang,
+                        @Query("locale") String locale,
+                        @Query("result_type") String resultType,
+                        @Query("count") Integer count,
+                        @Query("until") String until,
+                        @Query("since_id") Long sinceId,
+                        @Query("max_id") Long maxId,
+                        @Query("include_entities") Boolean includeEntities);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java
index 9e3b011b..f4362a3a 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java
@@ -17,17 +17,17 @@
 
 package com.twitter.sdk.android.core.services;
 
-import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.models.Tweet;
 
 import java.util.List;
 
-import retrofit.http.Field;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.GET;
-import retrofit.http.POST;
-import retrofit.http.Path;
-import retrofit.http.Query;
+import retrofit2.Call;
+import retrofit2.http.Field;
+import retrofit2.http.FormUrlEncoded;
+import retrofit2.http.GET;
+import retrofit2.http.POST;
+import retrofit2.http.Path;
+import retrofit2.http.Query;
 
 public interface StatusesService {
 
@@ -59,16 +59,15 @@
      *                          status response to include the screen_name of the contributor. By
      *                          default only the user_id of the contributor is included.
      * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/statuses/mentions_timeline.json")
-    void mentionsTimeline(@Query("count") Integer count,
-                          @Query("since_id") Long sinceId,
-                          @Query("max_id") Long maxId,
-                          @Query("trim_user") Boolean trimUser,
-                          @Query("contributor_details") Boolean contributeDetails,
-                          @Query("include_entities") Boolean includeEntities,
-                          Callback<List<Tweet>> cb);
+    @GET("/1.1/statuses/mentions_timeline.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<List<Tweet>> mentionsTimeline(@Query("count") Integer count,
+                                       @Query("since_id") Long sinceId,
+                                       @Query("max_id") Long maxId,
+                                       @Query("trim_user") Boolean trimUser,
+                                       @Query("contributor_details") Boolean contributeDetails,
+                                       @Query("include_entities") Boolean includeEntities);
 
     /**
      * Returns a collection of the most recent tweets posted by the user indicated by the
@@ -116,19 +115,18 @@ void mentionsTimeline(@Query("count") Integer count,
      *                        of the timeline and the slice selected by the count parameter).
      *                        Note: If you're using the trim_user parameter in conjunction with
      *                        include_rts, the retweets will still contain a full user object.
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/statuses/user_timeline.json")
-    void userTimeline(@Query("user_id") Long userId,
-                      @Query("screen_name") String screenName,
-                      @Query("count") Integer count,
-                      @Query("since_id") Long sinceId,
-                      @Query("max_id") Long maxId,
-                      @Query("trim_user") Boolean trimUser,
-                      @Query("exclude_replies") Boolean excludeReplies,
-                      @Query("contributor_details") Boolean contributeDetails,
-                      @Query("include_rts") Boolean includeRetweets,
-                      Callback<List<Tweet>> cb);
+    @GET("/1.1/statuses/user_timeline.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<List<Tweet>> userTimeline(@Query("user_id") Long userId,
+                                   @Query("screen_name") String screenName,
+                                   @Query("count") Integer count,
+                                   @Query("since_id") Long sinceId,
+                                   @Query("max_id") Long maxId,
+                                   @Query("trim_user") Boolean trimUser,
+                                   @Query("exclude_replies") Boolean excludeReplies,
+                                   @Query("contributor_details") Boolean contributeDetails,
+                                   @Query("include_rts") Boolean includeRetweets);
 
     /**
      * Returns a collection of the most recent Tweets and retweets posted by the authenticating user
@@ -162,17 +160,16 @@ void userTimeline(@Query("user_id") Long userId,
      *                          status response to include the screen_name of the contributor. By
      *                          default only the user_id of the contributor is included.
      * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/statuses/home_timeline.json")
-    void homeTimeline(@Query("count") Integer count,
-                      @Query("since_id") Long sinceId,
-                      @Query("max_id") Long maxId,
-                      @Query("trim_user") Boolean trimUser,
-                      @Query("exclude_replies") Boolean excludeReplies,
-                      @Query("contributor_details") Boolean contributeDetails,
-                      @Query("include_entities") Boolean includeEntities,
-                      Callback<List<Tweet>> cb);
+    @GET("/1.1/statuses/home_timeline.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<List<Tweet>> homeTimeline(@Query("count") Integer count,
+                                   @Query("since_id") Long sinceId,
+                                   @Query("max_id") Long maxId,
+                                   @Query("trim_user") Boolean trimUser,
+                                   @Query("exclude_replies") Boolean excludeReplies,
+                                   @Query("contributor_details") Boolean contributeDetails,
+                                   @Query("include_entities") Boolean includeEntities);
 
     /**
      * Returns the most recent tweets authored by the authenticating user that have been retweeted
@@ -196,16 +193,15 @@ void homeTimeline(@Query("count") Integer count,
      * @param includeEntities (optional) The entities node will be disincluded when set to false.
      * @param includeUserEntities (optional) The user entities node will not be included when set to
      *                            false.
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/statuses/retweets_of_me.json")
-    void retweetsOfMe(@Query("count") Integer count,
-                      @Query("since_id") Long sinceId,
-                      @Query("max_id") Long maxId,
-                      @Query("trim_user") Boolean trimUser,
-                      @Query("include_entities") Boolean includeEntities,
-                      @Query("include_user_entities") Boolean includeUserEntities,
-                      Callback<List<Tweet>> cb);
+    @GET("/1.1/statuses/retweets_of_me.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<List<Tweet>> retweetsOfMe(@Query("count") Integer count,
+                                   @Query("since_id") Long sinceId,
+                                   @Query("max_id") Long maxId,
+                                   @Query("trim_user") Boolean trimUser,
+                                   @Query("include_entities") Boolean includeEntities,
+                                   @Query("include_user_entities") Boolean includeUserEntities);
 
     /**
      * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be
@@ -220,14 +216,13 @@ void retweetsOfMe(@Query("count") Integer count,
      *                         additional current_user_retweet node, containing the ID of the source
      *                         status for the retweet.
      * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/statuses/show.json")
-    void show(@Query("id") Long id,
-              @Query("trim_user") Boolean trimUser,
-              @Query("include_my_retweet") Boolean includeMyRetweet,
-              @Query("include_entities") Boolean includeEntities,
-              Callback<Tweet> cb);
+    @GET("/1.1/statuses/show.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<Tweet> show(@Query("id") Long id,
+                     @Query("trim_user") Boolean trimUser,
+                     @Query("include_my_retweet") Boolean includeMyRetweet,
+                     @Query("include_entities") Boolean includeEntities);
 
     /**
      * Returns fully-hydrated Tweet objects for up to 100 tweets per request, as specified by
@@ -238,6 +233,7 @@ void show(@Query("id") Long id,
      * GET statuses / show / :id is used to retrieve a single Tweet object.
      * <p>
      * There are a few things to note when using this method.
+     * <ul>
      * <li>You must be following a protected user to be able to see their most recent tweets. If you
      * don't follow a protected user their status will be removed.</li>
      * <li>The order of Tweet IDs may not match the order of tweets in the returned array.</li>
@@ -247,6 +243,7 @@ void show(@Query("id") Long id,
      * <li>If none of your lookup criteria matches valid Tweet IDs an empty array will be returned
      * for map=false.</li>
      * <li>You are strongly encouraged to use a POST for larger requests.</li>
+     * </ul>
      *
      * @param id (required) The comma separated ids of the desired Tweets as a string.
      * @param includeEntities (optional) The entities node will be disincluded when set to false.
@@ -256,71 +253,13 @@ void show(@Query("id") Long id,
      * @param map (optional) When using the map parameter, tweets that do not exist or cannot be
      *            viewed by the current user will still have their key represented but with an
      *            explicitly null value paired with it
-     * @param cb The callback to invoke when the request completes.
      */
-    @GET("/1.1/statuses/lookup.json")
-    void lookup(@Query("id") String id,
-                @Query("include_entities") Boolean includeEntities,
-                @Query("trim_user") Boolean trimUser,
-                @Query("map") Boolean map,
-                Callback<List<Tweet>> cb);
-
-    /**
-     * Updates the authenticating user's current status, also known as tweeting.
-     * <p>
-     * For each update attempt, the update text is compared with the authenticating user's recent
-     * tweets. Any attempt that would result in duplication will be blocked, resulting in a 403
-     * error. Therefore, a user cannot submit the same status twice in a row.
-     * <p>
-     * While not rate limited by the API a user is limited in the number of tweets they can create
-     * at a time. If the number of updates posted by the user reaches the current allowed limit this
-     * method will return an HTTP 403 error.
-     *
-     * @param status (required) The text of your status update, typically up to 140 characters. URL
-     *               encode as necessary. [node:840,title="t.co link wrapping"] may effect character
-     *               counts. There are some special commands in this field to be aware of. For
-     *               instance, preceding a message with "D " or "M " and following it with a screen
-     *               name can create a direct message to that user if the relationship allows for
-     *               it.
-     * @param inReplyToStatusId (optional) The ID of an existing status that the update is in reply
-     *                          to. Note:: This parameter will be ignored unless the author of the
-     *                          Tweet this parameter references is mentioned within the status text.
-     *                          Therefore, you must include @username, where username is the author
-     *                          of the referenced Tweet, within the update.
-     * @param possiblySensitive (optional) If you upload Tweet media that might be considered
-     *                          sensitive content such as nudity, violence, or medical procedures,
-     *                          you should set this value to true. See Media setting and best
-     *                          practices for more context. Defaults to false.
-     * @param latitude (optional) The latitude of the location this Tweet refers to. This parameter
-     *                 will be ignored unless it is inside the range -90.0 to +90.0 (North is
-     *                 positive) inclusive. It will also be ignored if there isn't a corresponding
-     *                 long parameter.
-     * @param longitude (optional) The longitude of the location this Tweet refers to. The valid
-     *                  ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This
-     *                  parameter will be ignored if outside that range, if it is not a number, if
-     *                  geo_enabled is disabled, or if there not a corresponding lat parameter.
-     * @param placeId (optional) A place in the world. These IDs can be retrieved from [node:29].
-     * @param displayCoordinates (optional) Whether or not to put a pin on the exact coordinates a
-     *                           Tweet has been sent from.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param cb The callback to invoke when the request completes.
-     * @deprecated Use StatusesService#update which accepts a mediaIds comma separated string. To
-     * post a Tweet without media, pass null for mediaIds.
-     */
-    @Deprecated
-    @FormUrlEncoded
-    @POST("/1.1/statuses/update.json")
-    void update(@Field("status") String status,
-           @Field("in_reply_to_status_id") Long inReplyToStatusId,
-           @Field("possibly_sensitive") Boolean possiblySensitive,
-           @Field("lat") Double latitude,
-           @Field("long") Double longitude,
-           @Field("place_id") String placeId,
-           @Field("display_cooridnates") Boolean displayCoordinates,
-           @Field("trim_user") Boolean trimUser,
-           Callback<Tweet> cb);
+    @GET("/1.1/statuses/lookup.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<List<Tweet>> lookup(@Query("id") String id,
+                             @Query("include_entities") Boolean includeEntities,
+                             @Query("trim_user") Boolean trimUser,
+                             @Query("map") Boolean map);
 
     /**
      * Updates the authenticating user's current status, also known as tweeting.
@@ -364,20 +303,19 @@ void update(@Field("status") String status,
      *                 Omit this parameter to receive the complete user object.
      * @param mediaIds A comma separated media ids as a string for uploaded media to associate
      *                 with a Tweet. You may include up to 4 photos in a Tweet.
-     * @param cb The callback to invoke when the request completes.
      */
     @FormUrlEncoded
-    @POST("/1.1/statuses/update.json")
-    void update(@Field("status") String status,
-                @Field("in_reply_to_status_id") Long inReplyToStatusId,
-                @Field("possibly_sensitive") Boolean possiblySensitive,
-                @Field("lat") Double latitude,
-                @Field("long") Double longitude,
-                @Field("place_id") String placeId,
-                @Field("display_cooridnates") Boolean displayCoordinates,
-                @Field("trim_user") Boolean trimUser,
-                @Field("media_ids") String mediaIds,
-                Callback<Tweet> cb);
+    @POST("/1.1/statuses/update.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<Tweet> update(@Field("status") String status,
+                       @Field("in_reply_to_status_id") Long inReplyToStatusId,
+                       @Field("possibly_sensitive") Boolean possiblySensitive,
+                       @Field("lat") Double latitude,
+                       @Field("long") Double longitude,
+                       @Field("place_id") String placeId,
+                       @Field("display_cooridnates") Boolean displayCoordinates,
+                       @Field("trim_user") Boolean trimUser,
+                       @Field("media_ids") String mediaIds);
 
     /**
      * Retweets a Tweet. Returns the original Tweet with retweet details embedded.
@@ -386,13 +324,12 @@ void update(@Field("status") String status,
      * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
      *                 will include a user object including only the status authors numerical ID.
      *                 Omit this parameter to receive the complete user object.
-     * @param cb The callback to invoke when the request completes.
      */
     @FormUrlEncoded
-    @POST("/1.1/statuses/retweet/{id}.json")
-    void retweet(@Path("id") Long id,
-                 @Field("trim_user") Boolean trimUser,
-                 Callback<Tweet> cb);
+    @POST("/1.1/statuses/retweet/{id}.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<Tweet> retweet(@Path("id") Long id,
+                        @Field("trim_user") Boolean trimUser);
 
     /**
      * Destroys the status specified by the required ID parameter. The authenticating user must be
@@ -402,13 +339,12 @@ void retweet(@Path("id") Long id,
      * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
      *                 will include a user object including only the status authors numerical ID.
      *                 Omit this parameter to receive the complete user object.
-     * @param cb The callback to invoke when the request completes.
      */
     @FormUrlEncoded
-    @POST("/1.1/statuses/destroy/{id}.json")
-    void destroy(@Path("id") Long id,
-                 @Field("trim_user") Boolean trimUser,
-                 Callback<Tweet> cb);
+    @POST("/1.1/statuses/destroy/{id}.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<Tweet> destroy(@Path("id") Long id,
+                        @Field("trim_user") Boolean trimUser);
 
     /**
      * Destroys the retweet specified by the required source Tweet's ID parameter. Returns the
@@ -418,11 +354,10 @@ void destroy(@Path("id") Long id,
      * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
      *                 will include a user object including only the status authors numerical ID.
      *                 Omit this parameter to receive the complete user object.
-     * @param cb The callback to invoke when the request completes.
      */
     @FormUrlEncoded
-    @POST("/1.1/statuses/unretweet/{id}.json")
-    void unretweet(@Path("id") Long id,
-            @Field("trim_user") Boolean trimUser,
-            Callback<Tweet> cb);
+    @POST("/1.1/statuses/unretweet/{id}.json?" +
+            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    Call<Tweet> unretweet(@Path("id") Long id,
+                          @Field("trim_user") Boolean trimUser);
 }
diff --git a/twitter-core/src/main/res/values-bg/strings.xml b/twitter-core/src/main/res/values-bg/strings.xml
index 66555618..9c235aa4 100644
--- a/twitter-core/src/main/res/values-bg/strings.xml
+++ b/twitter-core/src/main/res/values-bg/strings.xml
@@ -18,5 +18,9 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="tw__share_email_desc">Разреши на %1$s достъп до имейл адреса свързан с профила ти в Twitter  \@%2$s, така че %1$s да го използва съгласно своята Политика на поверителност. Например, %1$s ще може да ти изпраща актуализации и друга информация на този адрес.</string>
+    <string name="tw__allow_btn_txt">Разрешаване</string>
+    <string name="tw__login_btn_txt">Вход с Twitter</string>
+    <string name="tw__not_now_btn_txt">Не сега</string>
+    <string name="tw__share_email_desc">Разреши на %1$s достъп до имейл адреса, свързан с профила ти в Twitter \@%2$s, така че %1$s да може да го използва съгласно своята политика за поверителност. Например %1$s може да ти изпраща обновявания и друга информация на този адрес.</string>
+    <string name="tw__share_email_title">Споделяне на имейл адреса ти</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-ca/strings.xml b/twitter-core/src/main/res/values-ca/strings.xml
new file mode 100644
index 00000000..1fff3e51
--- /dev/null
+++ b/twitter-core/src/main/res/values-ca/strings.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__allow_btn_txt">Permet-ho</string>
+    <string name="tw__login_btn_txt">Inicia sessió amb Twitter</string>
+    <string name="tw__not_now_btn_txt">Ara no</string>
+    <string name="tw__share_email_desc">Permet que %1$s accedeixi a l\'adreça electrònica associada al compte de Twitter \@%2$s perquè %1$s la pugui utilitzar d\'acord amb la seva política de privacitat. Per exemple, %1$s et podria enviar  actualitzacions i altres dades a aquesta adreça.</string>
+    <string name="tw__share_email_title">Comparteix l\'adreça electrònica</string>
+</resources>
diff --git a/twitter-core/src/main/res/values-el/strings.xml b/twitter-core/src/main/res/values-el/strings.xml
index 3ba18900..e5a99b54 100644
--- a/twitter-core/src/main/res/values-el/strings.xml
+++ b/twitter-core/src/main/res/values-el/strings.xml
@@ -18,6 +18,9 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__allow_btn_txt">Να επιτρέπεται</string>
+    <string name="tw__login_btn_txt">Είσοδος με το Twitter</string>
     <string name="tw__not_now_btn_txt">Όχι τώρα</string>
-    <string name="tw__share_email_desc">Να επιτρέπεται στο %1$s να έχει πρόσβαση στη διεύθυνση ηλεκτρονικού ταχυδρομείου που σχετίζεται με το λογαριασμό σας στο Twitter \@%2$s έτσι ώστε να μπορεί το %1$s να το χρησιμοποιήσει σύμφωνα με την πολιτική προστασίας προσωπικών δεδομένων. Για παράδειγμα, το %1$s μπορεί να σας στείλει ενημερώσεις και άλλες πληροφορίες σε αυτήν τη διεύθυνση.</string>
+    <string name="tw__share_email_desc">Να επιτρέπεται στο %1$s να έχει πρόσβαση στη διεύθυνση ηλεκτρονικού ταχυδρομείου που σχετίζεται με το λογαριασμό σας στο Twitter \@%2$s, ώστε το %1$s να μπορεί να τη χρησιμοποιήσει σύμφωνα με την πολιτική προστασίας προσωπικών δεδομένων του. Για παράδειγμα, το %1$s μπορεί να σας στείλει ενημερώσεις και άλλες πληροφορίες σε αυτήν τη διεύθυνση.</string>
+    <string name="tw__share_email_title">Κοινοποίηση της διεύθυνσης ηλεκτρονικού ταχυδρομείου σας</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-en-rXX/strings.xml b/twitter-core/src/main/res/values-en-rXX/strings.xml
deleted file mode 100644
index 31b5aec5..00000000
--- a/twitter-core/src/main/res/values-en-rXX/strings.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<!--
-  ~ Copyright (C) 2015 Twitter, Inc.
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  ~
-  -->
-
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="tw__allow_btn_txt">[Allöøw]</string>
-    <string name="tw__login_btn_txt">[Löøg ïín wïíth Twïíttéêr]</string>
-    <string name="tw__not_now_btn_txt">[Nöøt nöøw]</string>
-    <string name="tw__share_email_desc">[Allöøw %1$s töø åäccéêss théê éêmåäïíl åäddréêss åässöøcïíåätéêd wïíth yöøür Twïíttéêr åäccöøünt \@%2$s söø thåät %1$s cåän üséê ïít åäccöørdïíng töø ïíts prïívåäcy pöølïícy. Föør éêxåämpléê, %1$s cöøüld séênd yöøü üpdåätéês åänd öøthéêr ïínföørmåätïíöøn åät thåät åäddréêss.]</string>
-    <string name="tw__share_email_title">[Shåäréê yöøür éêmåäïíl åäddréêss]</string>
-</resources>
diff --git a/twitter-core/src/main/res/values-fr/strings.xml b/twitter-core/src/main/res/values-fr/strings.xml
index c0649794..ed002986 100644
--- a/twitter-core/src/main/res/values-fr/strings.xml
+++ b/twitter-core/src/main/res/values-fr/strings.xml
@@ -20,7 +20,7 @@
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="tw__allow_btn_txt">Autoriser</string>
     <string name="tw__login_btn_txt">Se connecter avec Twitter</string>
-    <string name="tw__not_now_btn_txt">Pas maintenant</string>
+    <string name="tw__not_now_btn_txt">Plus tard</string>
     <string name="tw__share_email_desc">Autoriser %1$s à accéder à l\'adresse email associée à votre compte Twitter \@%2$s afin que %1$s puisse  l\'utiliser conformément à la politique de confidentialité. Par exemple, %1$s pourra vous envoyer des actualités et d\'autres informations à cette adresse.</string>
     <string name="tw__share_email_title">Partagez votre adresse email</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-gu/strings.xml b/twitter-core/src/main/res/values-gu/strings.xml
index 7302f6c3..ec54ce57 100644
--- a/twitter-core/src/main/res/values-gu/strings.xml
+++ b/twitter-core/src/main/res/values-gu/strings.xml
@@ -18,5 +18,9 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__allow_btn_txt">પરવાનગી આપે છે</string>
+    <string name="tw__login_btn_txt">Twitter સાથે લોગીન કરો</string>
+    <string name="tw__not_now_btn_txt">હમણાં નહીં</string>
     <string name="tw__share_email_desc">%1$sને તમારા Twitter એકાઉન્ટ \@%2$s સાથે સંકળાયેલા ઈમેલ એડ્રેસનો ઉપયોગ કરવાની મંજૂરી આપો જેથી %1$s તેનો ઉપયોગ તેની ગોપનીયતા નીતિ પ્રમાણે કરી શકે. ઉદા તરીકે, %1$s તે એડ્રેસ પર તમને અપડેટ્સ અને અન્ય માહિતી મોકલી શકે.</string>
+    <string name="tw__share_email_title">તમારું ઈમેલ એડ્રેસ શેર કરો</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-hr/strings.xml b/twitter-core/src/main/res/values-hr/strings.xml
index 9484d1e4..03a09795 100644
--- a/twitter-core/src/main/res/values-hr/strings.xml
+++ b/twitter-core/src/main/res/values-hr/strings.xml
@@ -18,5 +18,9 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="tw__share_email_desc">Korisniku/ci %1$s dopustite pristup adresi e-pošte povezanoj s vašim računom za Twitter \@%2$s da bi je %1$s mogao/la koristiti u skladu s pravilima o zaštiti privatnosti. %1$s bi vam na tu adresu, primjerice, mogao/la slati novosti i ostale obavijesti.</string>
+    <string name="tw__allow_btn_txt">Dopusti</string>
+    <string name="tw__login_btn_txt">Prijavite se putem Twittera</string>
+    <string name="tw__not_now_btn_txt">Ne sada</string>
+    <string name="tw__share_email_desc">Servisu %1$s dopustite pristup adresi e-pošte povezanoj s vašim računom za Twitter \@%2$s da bi je %1$s mogao koristiti u skladu sa svojim pravilima o privatnosti. %1$s bi vam na tu adresu, primjerice, mogao slati novosti i ostale obavijesti.</string>
+    <string name="tw__share_email_title">Dijelite svoju adresu e-pošte</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-in/strings.xml b/twitter-core/src/main/res/values-in/strings.xml
index 6085b0d2..d17a3f46 100644
--- a/twitter-core/src/main/res/values-in/strings.xml
+++ b/twitter-core/src/main/res/values-in/strings.xml
@@ -21,6 +21,9 @@
     <string name="tw__allow_btn_txt">Izinkan</string>
     <string name="tw__login_btn_txt">Masuk dengan Twitter</string>
     <string name="tw__not_now_btn_txt">Jangan sekarang</string>
-    <string name="tw__share_email_desc">Izinkan %1$s mengakses alamat email yang terkait dengan akun Twitter Anda \@%2$s sehingga %1$s dapat menggunakannya sesuai dengan kebijakan privasi. Sebagai contoh, %1$s dapat mengirimi Anda  pembaruan dan informasi lainnya dari alamat tersebut.</string>
+    <string name="tw__share_email_desc">Izinkan %1$s mengakses alamat email yang terkait dengan akun Twitter Anda \@%2$s \
+sehingga %1$s dapat menggunakannya sesuai dengan kebijakan privasi. \
+Sebagai contoh, %1$s dapat mengirimi Anda  pembaruan dan informasi lainnya\
+ dari alamat tersebut.</string>
     <string name="tw__share_email_title">Sebarkan alamat email Anda</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-kn/strings.xml b/twitter-core/src/main/res/values-kn/strings.xml
index 0d270dde..8a998909 100644
--- a/twitter-core/src/main/res/values-kn/strings.xml
+++ b/twitter-core/src/main/res/values-kn/strings.xml
@@ -18,5 +18,9 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__allow_btn_txt">ಅನುಮತಿಸು</string>
+    <string name="tw__login_btn_txt">Twitter ಜೊತೆಗೆ ಲಾಗ್ ಇನ್ ಆಗಿ</string>
+    <string name="tw__not_now_btn_txt">ಈಗ ಅಲ್ಲ</string>
     <string name="tw__share_email_desc">ನಿಮ್ಮ Twitter ಖಾತೆಯ ಜೊತೆಗೆ ಸಂಯೋಜಿತವಾಗಿರುವ ಇಮೇಲ್ ವಿಳಾಸವನ್ನು ಪ್ರವೇಶಿಸಲು %1$s ಗೆ ಅನುಮತಿಸಿ \@%2$s ಇದರಿಂದ %1$s ಅದನ್ನು ಅದರ ಗೌಪ್ಯತಾ ನೀತಿ ಪ್ರಕಾರ ಬಳಸಬಹುದು. ಉದಾಹರಣೆಗೆ, %1$s ನಿಮಗೆ ನವೀಕರಣಗಳನ್ನು ಮತ್ತು ಇತರ ಮಾಹಿತಿಯನ್ನು ಆ ವಿಳಾಸದಲ್ಲಿ ಕಳುಹಿಸಬಹುದು.</string>
+    <string name="tw__share_email_title">ನಿಮ್ಮ ಇಮೇಲ್ ವಿಳಾಸವನ್ನು ಹಂಚಿಕೊಳ್ಳಿ</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-mr/strings.xml b/twitter-core/src/main/res/values-mr/strings.xml
index 31277efa..fb1c8010 100644
--- a/twitter-core/src/main/res/values-mr/strings.xml
+++ b/twitter-core/src/main/res/values-mr/strings.xml
@@ -18,5 +18,9 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string name="tw__share_email_desc">%1$s यांना आपले ट्विटर खाते \@%2$s शी निगडीत ई-मेल पत्ता घेण्याची परवानगी द्या जेणेकरुन %1$s आपल्या गोपनीयता धोरणानुसार त्याचा वापर करु शकतील. उदाहरणार्थ, %1$s आपल्याला त्या पत्त्यावर अपडेट्स आणि अन्य माहिती पाठवू शकतील.</string>
+    <string name="tw__allow_btn_txt">अनुमती द्या</string>
+    <string name="tw__login_btn_txt">Twitter वर लॉग इन करा</string>
+    <string name="tw__not_now_btn_txt">आत्ता नको</string>
+    <string name="tw__share_email_desc">%1$s यांना आपल्या Twitter खात्याशी \@%2$s निगडीत ई-मेल पत्ता ऍक्सेस करण्याची परवानगी द्या जेणेकरुन %1$s आपल्या गोपनीयता धोरणानुसार त्याचा वापर करु शकतील. उदाहरणार्थ, %1$s आपल्याला त्या पत्त्यावर अपडेट्स आणि अन्य माहिती पाठवू शकतील.</string>
+    <string name="tw__share_email_title">आपला ई-मेल पत्ता शेअर करा</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-sk/strings.xml b/twitter-core/src/main/res/values-sk/strings.xml
index acc293a0..21ff5ded 100644
--- a/twitter-core/src/main/res/values-sk/strings.xml
+++ b/twitter-core/src/main/res/values-sk/strings.xml
@@ -21,6 +21,6 @@
     <string name="tw__allow_btn_txt">Povoliť</string>
     <string name="tw__login_btn_txt">Prihlásiť sa na Twitter</string>
     <string name="tw__not_now_btn_txt">Teraz nie</string>
-    <string name="tw__share_email_desc">Udeľte %1$s prístup k e-mailovej adrese priradenej k vášmu Twitter účtom \@%2$s, aby ju %1$s mohol použiť v súlade so svojimi zásadami ochrany súkromia. %1$s vám na túto adresu bude môcť posielať napríklad aktualizácie či iné informácie.</string>
-    <string name="tw__share_email_title">Zdieľajte vašu e-mailovú adresu</string>
+    <string name="tw__share_email_desc">Povoľte aplikácii %1$s prístup k e-mailovej adrese priradenej k vášmu účtu na Twitteri \@%2$s, aby ju aplikácia %1$s mohla použiť v súlade so svojimi zásadami ochrany súkromia. %1$s vám na túto adresu bude môcť napríklad odosielať aktualizácie a iné informácie.</string>
+    <string name="tw__share_email_title">Zdieľajte svoju e-mailovú adresu</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-ta/strings.xml b/twitter-core/src/main/res/values-ta/strings.xml
index 2d5bfff3..6f0f1900 100644
--- a/twitter-core/src/main/res/values-ta/strings.xml
+++ b/twitter-core/src/main/res/values-ta/strings.xml
@@ -18,5 +18,9 @@
   -->
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__allow_btn_txt">அனுமதி</string>
+    <string name="tw__login_btn_txt">Twitter -இல் உள்நுழையவும்</string>
+    <string name="tw__not_now_btn_txt">இப்பொழுது வேண்டாம்</string>
     <string name="tw__share_email_desc">%1$s அதன் தனியுரிமைக் கொள்கைக்கு இணங்க உங்கள் Twitter  கணக்கு \@%2$s-ஐப் பயன்படுத்தக் கூடிய வகையில் அந்தக் கணக்குடன் இணைக்கப்பட்டுள்ள மின்னஞ்சல் முகவரியை அணுக %1$s-ஐ அனுமதியுங்கள். எடுத்துக்காட்டாக, %1$s அந்த முகவரியில் புதுப்பிப்புகளையும் பிற தகவல்களையும் அனுப்பலாம்.</string>
+    <string name="tw__share_email_title">உங்கள் மின்னஞ்சல் முகவரியைப் பகிரவும்</string>
 </resources>
diff --git a/twitter-core/src/main/res/values-ur/strings.xml b/twitter-core/src/main/res/values-ur/strings.xml
index 89a02e3a..8e316282 100644
--- a/twitter-core/src/main/res/values-ur/strings.xml
+++ b/twitter-core/src/main/res/values-ur/strings.xml
@@ -21,5 +21,6 @@
     <string name="tw__allow_btn_txt">اجازت دیں</string>
     <string name="tw__login_btn_txt">ٹوئٹر سے لاگ ان کریں</string>
     <string name="tw__not_now_btn_txt">ابھی نہیں</string>
+    <string name="tw__share_email_desc">%1$s کو اپنے ٹوئٹر اکاؤنٹ ‎\@%2$s کے ساتھ منسلک شدہ ای میل ایڈریس تک رسائی حاصل کرنے کی اجازت دیں تاکہ %1$s اسے اس کی پرائیویسی پالیسی کے مطابق استعمال کر سکے۔ مثال کے طور پر، %1$s اس ایڈریس پر آپ کو اپ ڈیٹس اور دیگر معلومات بھیج سکتے ہیں۔</string>
     <string name="tw__share_email_title">اپنا ای میل ایڈریس شیئر کریں</string>
 </resources>
diff --git a/twitter-core/src/main/res/values/colors.xml b/twitter-core/src/main/res/values/colors.xml
index 4dcfa94f..60c31764 100644
--- a/twitter-core/src/main/res/values/colors.xml
+++ b/twitter-core/src/main/res/values/colors.xml
@@ -22,7 +22,5 @@
     <color name="tw__blue_pressed">#FF4186C8</color>
     <color name="tw__blue_pressed_light">#ffe1e8ed</color>
     <color name="tw__solid_white">#FFFFFFFF</color>
-    <!--suppress UnusedResources -->
-    <color name="tw__medium_gray">#8899a6</color>
     <color name="tw__light_gray">#ccd6dd</color>
 </resources>
diff --git a/twitter-core/src/main/resources/fabric/com.twitter.sdk.android.twitter-core.properties b/twitter-core/src/main/resources/fabric/com.twitter.sdk.android.twitter-core.properties
index f40603c9..77fb2291 100644
--- a/twitter-core/src/main/resources/fabric/com.twitter.sdk.android.twitter-core.properties
+++ b/twitter-core/src/main/resources/fabric/com.twitter.sdk.android.twitter-core.properties
@@ -16,5 +16,5 @@
 #
 
 fabric-identifier=com.twitter.sdk.android:twitter-core
-fabric-version=1.6.4-SNAPSHOT
+fabric-version=2.3.1-SNAPSHOT
 fabric-build-type=source
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
index f95b9d71..4e7f023d 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
@@ -17,7 +17,6 @@
 
 package com.twitter.sdk.android.core;
 
-import com.twitter.sdk.android.core.internal.oauth.AppAuthToken;
 import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
 import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
 import com.twitter.sdk.android.core.internal.oauth.OAuthUtils;
@@ -31,8 +30,6 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
-import java.util.Map;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
@@ -126,14 +123,6 @@ public void testSerialize_guestAuthToken() {
         assertEquals(json, JSON_GUEST_AUTH_TOKEN, json);
     }
 
-    @Test
-    public void testSerialize_appAuthToken() {
-        final AuthTokenWrapper test = new AuthTokenWrapper(
-                new AppAuthToken(TOKEN_TYPE, ACCESS_TOKEN, CREATED_AT));
-        final String json = gson.toJson(test);
-        assertEquals(json, JSON_APP_AUTH_TOKEN, json);
-    }
-
     @Test
     public void testDeserialize_oauth1aToken() {
         final AuthTokenWrapper authTokenWrapper = gson.fromJson(JSON_OAUTH1A_TOKEN,
@@ -165,16 +154,6 @@ public void testDeserialize_guestAuthToken() {
         assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
     }
 
-    @Test
-    public void testDeserialize_appAuthToken() {
-        final AuthTokenWrapper authTokenWrapper = gson.fromJson(JSON_APP_AUTH_TOKEN,
-                AuthTokenWrapper.class);
-        assertTrue(authTokenWrapper.authToken instanceof AppAuthToken);
-        final AppAuthToken authToken = (AppAuthToken) authTokenWrapper.authToken;
-        assertEquals(TOKEN_TYPE, authToken.getTokenType());
-        assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-    }
-
     @Test
     public void testDeserialize_oauth1aTokenMissingCreatedAt() {
         final AuthTokenWrapper authTokenWrapper = gson.fromJson(
@@ -219,12 +198,6 @@ public AuthTokenWrapper(AuthToken authToken) {
 
     private static class TestAuthToken extends AuthToken {
 
-        @Override
-        public Map<String, String> getAuthHeaders(TwitterAuthConfig authConfig, String method,
-                String url, Map<String, String> postParams) {
-            return null;
-        }
-
         @Override
         public boolean isExpired() {
             return false;
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthenticatedClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthenticatedClientTest.java
deleted file mode 100644
index edaaa99c..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthenticatedClientTest.java
+++ /dev/null
@@ -1,168 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.mime.FormUrlEncodedTypedOutput;
-import retrofit.mime.TypedByteArray;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class AuthenticatedClientTest  {
-    static final String POST_VERB = "POST";
-    static final String POST_KEY = "test";
-    static final String POST_KEY_2 = "test2%21";
-    static final String POST_KEY_2_DECODED = "test2!";
-    static final String POST_VALUE = "value";
-    static final String POST_VALUE_2 = "value%202%21";
-    static final String POST_VALUE_2_DECODED = "value 2!";
-    static final String ANY_URL = "testurl";
-    static final String BAD_CHAR_ENCODING = "UTF-811";
-    static final String BAD_URL_ENCODING = "value %3f";
-    static final String QUERY_NO_VALUE = POST_KEY + "&" + POST_KEY_2;
-    static final String QUERY_WITH_VALUE = POST_KEY + "=" + POST_VALUE + "&" +
-            POST_KEY_2 + "=" + POST_VALUE_2;
-    static final String QUERY_BAD_PARAM = POST_KEY + "=" + POST_VALUE + "=" + POST_VALUE;
-    static final Header TEST_HEADER = new Header("test", "test");
-
-    private AuthenticatedClient client;
-
-    @Before
-    public void setUp() throws Exception {
-
-
-        final TwitterAuthConfig config = mock(TwitterAuthConfig.class);
-        final TwitterSession session = mock(TwitterSession.class);
-        client = new AuthenticatedClient(config, session, null);
-    }
-
-    @Test
-    public void testGetAuthHeaders_preservesOriginalHeaders() throws IOException {
-        final List<Header> headers = new ArrayList<>();
-        headers.add(TEST_HEADER);
-        final Request request = new Request(POST_VERB, ANY_URL, headers, null);
-        final List<Header> modifiedHeaders = client.getAuthHeaders(request);
-        assertNotNull(modifiedHeaders);
-        assertFalse(modifiedHeaders.isEmpty());
-        assertTrue(modifiedHeaders.contains(TEST_HEADER));
-    }
-
-    /**
-     * Sign body's made of test=value type (FormUrlEncoded)
-     */
-    @Test
-    public void testGetPostParameters_formFieldPostSingleParams() throws IOException {
-
-        final FormUrlEncodedTypedOutput output = new FormUrlEncodedTypedOutput();
-        output.addField(POST_KEY, POST_VALUE);
-
-        final Request request = new Request(POST_VERB, ANY_URL, null, output);
-        final Map<String, String> params = client.getPostParams(request);
-
-        assertEquals(POST_VALUE, params.get(POST_KEY));
-    }
-
-    /**
-     * Sign body's made of test=value&test2=value type (FormUrlEncoded)
-     */
-    @Test
-    public void testGetPostParameters_formFieldPostMultipleParams() throws IOException {
-
-        final FormUrlEncodedTypedOutput output = new FormUrlEncodedTypedOutput();
-        output.addField(POST_KEY, POST_VALUE);
-        output.addField(POST_KEY_2, POST_VALUE);
-
-        final Request request = new Request(POST_VERB, ANY_URL, null, output);
-        final Map<String, String> params = client.getPostParams(request);
-
-        assertEquals(POST_VALUE, params.get(POST_KEY));
-        assertEquals(POST_VALUE, params.get(POST_KEY_2));
-    }
-
-    /**
-     * Do not sign JSON Body Posts (Twitter API and sig doesn't support this anyway)
-     * Shouldn't fail though
-     */
-    @Test
-    public void testGetPostParameters_bodyPost() throws IOException {
-        final Request request =
-                new Request(POST_VERB, ANY_URL, null, new TypedByteArray(null, new byte[0]));
-
-        final Map<String, String> params = client.getPostParams(request);
-        assertTrue(params.isEmpty());
-    }
-
-    @Test
-    public void testGetQueryParameters_emptyValue() throws IOException {
-        final Map<String, String> params = client.getParameters(QUERY_NO_VALUE);
-
-        assertTrue(params.containsKey(POST_KEY));
-        assertEquals("", params.get(POST_KEY));
-        assertTrue(params.containsKey(POST_KEY_2_DECODED));
-        assertEquals("", params.get(POST_KEY_2_DECODED));
-    }
-
-    @Test
-    public void testGetQueryParameters_withValue() throws IOException {
-        final Map<String, String> params = client.getParameters(QUERY_WITH_VALUE);
-
-        assertTrue(params.containsKey(POST_KEY));
-        assertEquals(POST_VALUE, params.get(POST_KEY));
-        assertTrue(params.containsKey(POST_KEY_2_DECODED));
-        assertEquals(POST_VALUE_2_DECODED, params.get(POST_KEY_2_DECODED));
-    }
-
-    @Test
-    public void testGetQueryParameters_withBadParam() throws IOException {
-        try {
-            client.getParameters(QUERY_BAD_PARAM);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertEquals("bad parameter", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testDecode_withBadEncoding() throws IOException {
-        try {
-            client.decode(BAD_URL_ENCODING, BAD_CHAR_ENCODING);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            assertEquals("bad parameter encoding", e.getMessage());
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/DefaultClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/DefaultClientTest.java
deleted file mode 100644
index 37ea7ff5..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/DefaultClientTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import io.fabric.sdk.android.services.network.NetworkUtils;
-
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.security.KeyManagementException;
-import java.security.NoSuchAlgorithmException;
-
-import javax.net.ssl.HttpsURLConnection;
-import javax.net.ssl.SSLSocketFactory;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class DefaultClientTest {
-    SSLSocketFactory sslSocketFactory;
-    DefaultClient client;
-
-    @Before
-    public void setUp() throws Exception {
-        sslSocketFactory = NetworkUtils.getSSLSocketFactory(
-                new TwitterPinningInfoProvider(RuntimeEnvironment.application));
-
-        client = new DefaultClient(sslSocketFactory);
-    }
-
-    @Test
-    public void testOpenSslConnection_https() throws NoSuchAlgorithmException,
-            KeyManagementException, IOException {
-        final URL httpsUrl = new URL("https://example.com");
-
-        final HttpsURLConnection connection = (HttpsURLConnection) httpsUrl.openConnection();
-        client.openSslConnection(connection);
-
-        assertEquals(sslSocketFactory, connection.getSSLSocketFactory());
-    }
-
-    @Test
-    public void testOpenSslConnection_http() throws NoSuchAlgorithmException,
-            KeyManagementException, IOException {
-        final URL httpUrl = new URL("http://example.com");
-
-        final HttpURLConnection connection = (HttpURLConnection) httpUrl.openConnection();
-        client.openSslConnection(connection);
-
-        assertFalse(connection instanceof HttpsURLConnection);
-    }
-
-    @Test
-    public void testOpenSslConnection_nullSslSocketFactory() throws IOException {
-        final DefaultClient client = new DefaultClient(null);
-
-        final URL httpsUrl = new URL("https://example.com");
-
-        final HttpsURLConnection connection = (HttpsURLConnection) httpsUrl.openConnection();
-        client.openSslConnection(connection);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestAuthClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestAuthClientTest.java
deleted file mode 100644
index 9eef8ed9..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestAuthClientTest.java
+++ /dev/null
@@ -1,158 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import javax.net.ssl.SSLSocketFactory;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class GuestAuthClientTest  {
-    private TwitterCore mockTwitterCore;
-    private TwitterApi mockTwitterApi;
-    private OAuth2Service fakeOAuth2Service;
-    private SessionManager<AppSession> appSessionManager;
-    private GuestAuthClient guestAuthClient;
-    private Callback<AppSession> mockCallback;
-
-    @Before
-    public void setUp() throws Exception {
-
-        mockTwitterCore = mock(TwitterCore.class);
-        mockTwitterApi = new TwitterApi();
-        appSessionManager = new SimpleSessionManager<>();
-        mockCallback = mock(Callback.class);
-    }
-
-    @Test
-    public void testConstructor_nullService() {
-        try {
-            guestAuthClient = new GuestAuthClient(null);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals("OAuth2Service must not be null", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testAuthorize_nullAppSessionManager() {
-        fakeOAuth2Service = new FakeSuccessOAuth2Service(mockTwitterCore, null, mockTwitterApi);
-        guestAuthClient = new GuestAuthClient(fakeOAuth2Service);
-        try {
-            guestAuthClient.authorize(null, mockCallback);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertEquals("SessionManager must not be null", e.getMessage());
-        }
-    }
-
-    @Test
-    public void testAuthorize_serviceSuccess() {
-        fakeOAuth2Service = new FakeSuccessOAuth2Service(mockTwitterCore, null, mockTwitterApi);
-        guestAuthClient = new GuestAuthClient(fakeOAuth2Service);
-        assertNull(appSessionManager.getActiveSession());
-        guestAuthClient.authorize(appSessionManager, mockCallback);
-        // assert an AppSession was set in the AppSessionManager and made primary
-        assertNotNull(appSessionManager.getActiveSession());
-        // assert that GuestAuthClient invokes the success callback with a Result
-        verify(mockCallback, times(1)).success(any(Result.class));
-    }
-
-    @Test
-    public void testAuthorize_serviceSuccessNullCallback() {
-        fakeOAuth2Service = new FakeSuccessOAuth2Service(mockTwitterCore, null, mockTwitterApi);
-        guestAuthClient = new GuestAuthClient(fakeOAuth2Service);
-        assertNull(appSessionManager.getActiveSession());
-        guestAuthClient.authorize(appSessionManager, null);
-        // assert an AppSession was set in the AppSessionManager and made primary
-        assertNotNull(appSessionManager.getActiveSession());
-        // assert that GuestAuthClient does NOT call the success method on a null callback
-        verifyZeroInteractions(mockCallback);
-    }
-
-    @Test
-    public void testAuthorize_serviceFailure() {
-        fakeOAuth2Service = new FakeFailureOAuth2Service(mockTwitterCore, null, mockTwitterApi);
-        guestAuthClient = new GuestAuthClient(fakeOAuth2Service);
-        guestAuthClient.authorize(appSessionManager, mockCallback);
-        // assert that GuestAuthClient invokes the failure callback when service fails to get auth
-        verify(mockCallback, times(1)).failure(any(TwitterException.class));
-    }
-
-    @Test
-    public void testAuthorize_serviceFailureNullCallback() {
-        fakeOAuth2Service = new FakeFailureOAuth2Service(mockTwitterCore, null, mockTwitterApi);
-        guestAuthClient = new GuestAuthClient(fakeOAuth2Service);
-        guestAuthClient.authorize(appSessionManager, null);
-        // assert that GuestAuthClient does NOT call the failure method on a null callback
-        verifyZeroInteractions(mockCallback);
-    }
-
-    /**
-     * Fakes an OAuth2Service where network requests for guest auth tokens succeed.
-     */
-    class FakeSuccessOAuth2Service extends OAuth2Service {
-
-        FakeSuccessOAuth2Service(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory,
-                          TwitterApi api) {
-            super(twitterCore, sslSocketFactory, api);
-        }
-
-        @Override
-        public void requestGuestAuthToken(Callback<OAuth2Token> callback) {
-            final GuestAuthToken guestAuthToken = mock(GuestAuthToken.class);
-            callback.success(new Result<OAuth2Token>(guestAuthToken, null));
-        }
-    }
-
-    /**
-     * Fakes an OAuth2Service where network requests for guest auth tokens fail.
-     */
-    class FakeFailureOAuth2Service extends OAuth2Service {
-
-        FakeFailureOAuth2Service(TwitterCore twitterCore, SSLSocketFactory sslSocketFactory,
-            TwitterApi api) {
-            super(twitterCore, sslSocketFactory, api);
-        }
-
-        @Override
-        public void requestGuestAuthToken(Callback<OAuth2Token> callback) {
-            callback.failure(new TwitterException("fake exception"));
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestCallbackTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestCallbackTest.java
deleted file mode 100644
index b3c769ee..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestCallbackTest.java
+++ /dev/null
@@ -1,139 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.TwitterApiConstants;
-import com.twitter.sdk.android.core.models.Tweet;
-
-import junit.framework.Assert;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Matchers.*;
-import static org.mockito.Mockito.*;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class GuestCallbackTest  {
-
-    SessionManager<AppSession> mockAppSessionManager;
-
-    @Before
-    public void setUp() throws Exception {
-        mockAppSessionManager = mock(SessionManager.class);
-    }
-
-    @Test
-    public void testSuccess_callsCallback() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<>(mockAppSessionManager,
-                developerCallback);
-        guestCallback.success(mock(Result.class));
-        verify(developerCallback).success(any(Result.class));
-    }
-
-    @Test
-    public void testSuccess_handlesNullCallback() {
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<>(mockAppSessionManager, null);
-        try {
-            guestCallback.success(mock(Result.class));
-        } catch (NullPointerException e) {
-            Assert.fail("Should have handled null callback");
-        }
-    }
-
-    @Test
-    public void testFailure_callsCallback() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<>(mockAppSessionManager,
-                developerCallback);
-        guestCallback.failure(mock(TwitterApiException.class));
-        verify(developerCallback).failure(any(TwitterApiException.class));
-    }
-
-    @Test
-    public void testFailure_handlesNullCallback() {
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<>(mockAppSessionManager, null);
-        try {
-            guestCallback.failure(mock(TwitterApiException.class));
-        } catch (NullPointerException e) {
-            Assert.fail("Should have handled null callback");
-        }
-    }
-
-    @Test
-    public void testGuestAuthFailure_clearsAppSession() {
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<Tweet>(mockAppSessionManager,
-                mock(Callback.class));
-        final TwitterApiException guestAuthException = mock(TwitterApiException.class);
-        when(guestAuthException.getErrorCode()).thenReturn(
-                TwitterApiConstants.Errors.GUEST_AUTH_ERROR_CODE);
-        guestCallback.failure(guestAuthException);
-        verify(mockAppSessionManager).clearSession(TwitterSession.LOGGED_OUT_USER_ID);
-    }
-
-    @Test
-    public void testAppAuthFailure_clearsAppSession() {
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<Tweet>(mockAppSessionManager,
-                mock(Callback.class));
-        final TwitterApiException appAuthException = mock(TwitterApiException.class);
-        when(appAuthException.getErrorCode()).thenReturn(
-                TwitterApiConstants.Errors.APP_AUTH_ERROR_CODE);
-        guestCallback.failure(appAuthException);
-        verify(mockAppSessionManager).clearSession(TwitterSession.LOGGED_OUT_USER_ID);
-    }
-
-    @Test
-    public void testOtherFailure_doesNotClearAppSession() {
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<Tweet>(mockAppSessionManager,
-                mock(Callback.class));
-        final TwitterApiException otherApiException = mock(TwitterApiException.class);
-        when(otherApiException.getErrorCode()).thenReturn(
-                TwitterApiConstants.Errors.LEGACY_ERROR);
-        guestCallback.failure(otherApiException);
-        verifyZeroInteractions(mockAppSessionManager);
-    }
-
-    // should handle TwitterExceptions that are not TwitterApiExceptions
-    @Test
-    public void testFailure_handleTwitterException() {
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<Tweet>(mockAppSessionManager,
-                mock(Callback.class));
-        final TwitterException twitterException = mock(TwitterException.class);
-        try {
-            guestCallback.failure(twitterException);
-            verifyZeroInteractions(mockAppSessionManager);
-        } catch (ClassCastException e) {
-            Assert.fail("Should have handled TwitterException which is not a TwitterApiException");
-        }
-    }
-
-    @Test
-    public void testFailure_callsCallbackOnTwitterException() {
-        final Callback<Tweet> developerCallback = mock(Callback.class);
-        final GuestCallback<Tweet> guestCallback = new GuestCallback<>(mockAppSessionManager,
-                developerCallback);
-        final TwitterException twitterException = mock(TwitterException.class);
-        guestCallback.failure(twitterException);
-        verify(developerCallback).failure(twitterException);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/AppSessionSerializerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
similarity index 66%
rename from twitter-core/src/test/java/com/twitter/sdk/android/core/AppSessionSerializerTest.java
rename to twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
index 8400afce..cc6bdfca 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/AppSessionSerializerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.core;
 
 import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -31,12 +30,9 @@
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
-public class AppSessionSerializerTest  {
+public class GuestSessionSerializerTest {
     private static final long CREATED_AT = 1414450780L;
 
-    private static final String JSON_SESSION_APP = "{\"auth_token\":{\"auth_type\":\"oauth2\","
-            + "\"auth_token\":{\"token_type\":\"tokenType\",\"access_token\":\"accessToken\","
-            + "\"created_at\":1414450780}},\"id\":0}";
     private static final String JSON_SESSION_GUEST = "{\"auth_token\":{\"auth_type\":\"guest\","
             + "\"auth_token\":{\"guest_token\":\"guestToken\",\"token_type\":\"tokenType\","
             + "\"access_token\":\"accessToken\",\"created_at\":1414450780}},\"id\":0}";
@@ -49,12 +45,12 @@
     private static final String TEST_ACCESS_TOKEN = "accessToken";
     private static final String TEST_GUEST_TOKEN = "guestToken";
 
-    private AppSession.Serializer serializer;
+    private GuestSession.Serializer serializer;
 
     @Before
     public void setUp() throws Exception {
 
-        serializer = new AppSession.Serializer();
+        serializer = new GuestSession.Serializer();
     }
 
     @Test
@@ -62,16 +58,9 @@ public void testSerialize_sessionNull() {
         assertEquals("", serializer.serialize(null));
     }
 
-    @Test
-    public void testSerialize_sessionAuthTokenIsOAuth2Token() {
-        final AppSession session = new AppSession(new OAuth2Token(TEST_TOKEN_TYPE,
-                TEST_ACCESS_TOKEN, CREATED_AT));
-        assertEquals(JSON_SESSION_APP, serializer.serialize(session));
-    }
-
     @Test
     public void testSerialze_sessionAuthTokenIsGuestAuthToken() {
-        final AppSession session = new AppSession(new GuestAuthToken(TEST_TOKEN_TYPE,
+        final GuestSession session = new GuestSession(new GuestAuthToken(TEST_TOKEN_TYPE,
                 TEST_ACCESS_TOKEN, TEST_GUEST_TOKEN, CREATED_AT));
         assertEquals(JSON_SESSION_GUEST, serializer.serialize(session));
     }
@@ -86,26 +75,18 @@ public void testDeserialize_serializedStringEmpty() {
         assertEquals(null, serializer.deserialize(""));
     }
 
-    @Test
-    public void testDeserialize_serializedStringAuthTokenIsOAuth2Token() {
-        final AppSession session = serializer.deserialize(JSON_SESSION_APP);
-        assertEquals(OAuth2Token.class, session.getAuthToken().getClass());
-        assertEquals(TEST_TOKEN_TYPE, session.getAuthToken().getTokenType());
-        assertEquals(TEST_ACCESS_TOKEN, session.getAuthToken().getAccessToken());
-    }
-
     @Test
     public void testDeserialize_serializedStringAuthTokenIsGuestAuthToken() {
-        final AppSession session = serializer.deserialize(JSON_SESSION_GUEST);
+        final GuestSession session = serializer.deserialize(JSON_SESSION_GUEST);
         assertEquals(GuestAuthToken.class, session.getAuthToken().getClass());
         assertEquals(TEST_TOKEN_TYPE, session.getAuthToken().getTokenType());
         assertEquals(TEST_ACCESS_TOKEN, session.getAuthToken().getAccessToken());
-        assertEquals(TEST_GUEST_TOKEN, ((GuestAuthToken) session.getAuthToken()).getGuestToken());
+        assertEquals(TEST_GUEST_TOKEN, session.getAuthToken().getGuestToken());
     }
 
     @Test
     public void testDeserialize_serializedStringAuthTokenIsInvalid() {
-        final AppSession session = serializer.deserialize(JSON_SESSION_INVALID_AUTH_TYPE);
+        final GuestSession session = serializer.deserialize(JSON_SESSION_INVALID_AUTH_TYPE);
         assertNull(session);
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java
index feb935ec..4c53de4f 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/OAuthSigningTests.java
@@ -76,6 +76,15 @@ public void testConstructor_nullAuthToken() {
         }
     }
 
+    @Test
+    public void testGetAuthorizationHeader() {
+        authSigning.getAuthorizationHeader(HttpMethod.POST.name(),
+                VERIFY_CREDENTIALS_URL, null);
+
+        verify(oAuthHeaders).getAuthorizationHeader(authConfig, authToken, null,
+                HttpMethod.POST.name(), VERIFY_CREDENTIALS_URL, null);
+    }
+
     @Test
     public void testGetOAuthEchoHeaders() {
         authSigning.getOAuthEchoHeaders(HttpMethod.POST.name(),
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java
index 57203e5d..33364f15 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TestFixtures.java
@@ -18,7 +18,14 @@
 package com.twitter.sdk.android.core;
 
 import com.twitter.sdk.android.core.internal.TwitterApiConstants;
+import com.twitter.sdk.android.core.internal.VineCardUtils;
 import com.twitter.sdk.android.core.models.ApiError;
+import com.twitter.sdk.android.core.models.BindingValues;
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.UserValue;
+
+import java.util.HashMap;
+import java.util.Map;
 
 public final class TestFixtures {
 
@@ -35,4 +42,21 @@
             TwitterApiConstants.Errors.GUEST_AUTH_ERROR_CODE);
     public static final ApiError TEST_LEGACY_ERROR = new ApiError("legacy error",
             TwitterApiConstants.Errors.LEGACY_ERROR);
+
+    public static final String PLAYER_CARD_VINE = VineCardUtils.VINE_CARD;
+
+    public static final String TEST_VINE_USER_ID = "586671909";
+
+    public static Card sampleValidVineCard() {
+        return new Card(createBindingValuesForCard(), PLAYER_CARD_VINE);
+    }
+
+    public static BindingValues createBindingValuesForCard() {
+        final UserValue testUser = new UserValue(TEST_VINE_USER_ID);
+        final Map<String, Object> testValues = new HashMap<>();
+        testValues.put("site", testUser);
+
+        final BindingValues bindingValues = new BindingValues(testValues);
+        return bindingValues;
+    }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
index 67d358f6..8f70fb8b 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
@@ -40,19 +40,15 @@
             "\"code\":239}]}\n";
     private static final String API_ERROR_NO_ERROR_CODE = "{\"errors\":[{\"message\":\"Bad " +
             "guest token\"}]}\n";
+    private static final String API_ERROR_NO_ERRORS = "{\"errors\": null}\n";
     private static final String API_ERROR_NO_ERROR_MESSAGE = "{\"errors\":[{\"code\":239}]}\n";
     private static final String API_ERROR_NON_JSON = "not a json";
 
     @Test
     public void testParseErrorCode() throws IOException {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_JSON);
-        assertEquals(API_ERROR_CODE, apiError.getCode());
-        assertEquals(API_ERROR_MESSAGE, apiError.getMessage());
-    }
-
-    @Test
-    public void testParseError_null() throws Exception {
-        assertNull(TwitterApiException.parseApiError(null));
+        assertEquals(API_ERROR_CODE, apiError.code);
+        assertEquals(API_ERROR_MESSAGE, apiError.message);
     }
 
     @Test
@@ -63,15 +59,21 @@ public void testParseError_nonJSON() throws Exception {
     @Test
     public void testParseError_noErrorCode() throws Exception {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERROR_CODE);
-        assertEquals(DEFAULT_ERROR_CODE, apiError.getCode());
-        assertEquals(API_ERROR_MESSAGE, apiError.getMessage());
+        assertEquals(DEFAULT_ERROR_CODE, apiError.code);
+        assertEquals(API_ERROR_MESSAGE, apiError.message);
+    }
+
+    @Test
+    public void testParseError_noErrors() throws Exception {
+        final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERRORS);
+        assertNull(apiError);
     }
 
     @Test
     public void testParseError_noMessage() throws Exception {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERROR_MESSAGE);
-        assertEquals(API_ERROR_CODE, apiError.getCode());
-        assertEquals(null, apiError.getMessage());
+        assertEquals(API_ERROR_CODE, apiError.code);
+        assertEquals(null, apiError.message);
     }
 
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java
index f43fd0d6..93333caa 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterRateLimitTest.java
@@ -24,14 +24,12 @@
 import org.robolectric.annotation.Config;
 
 import java.lang.reflect.Constructor;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.HashMap;
+import java.util.Map;
 
-import io.fabric.sdk.android.services.common.CurrentTimeProvider;
-import retrofit.client.Header;
+import okhttp3.Headers;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
@@ -41,12 +39,11 @@
     public static final String X_RATE_LIMIT_REMAINING = "x-rate-limit-remaining";
     public static final String X_RATE_LIMIT_RESET = "x-rate-limit-reset";
 
-    private List<Header> headers;
+    private Map<String, String> headers;
 
     @Before
     public void setUp() throws Exception {
-
-        headers = new ArrayList<>();
+        headers = new HashMap<>();
     }
 
     @Test
@@ -61,11 +58,11 @@ public void testCreator_populatedHeader() {
         final String limit = "10";
         final String remaining = "20";
         final String reset = "30";
-        headers.add(new Header(X_RATE_LIMIT_LIMIT, limit));
-        headers.add(new Header(X_RATE_LIMIT_REMAINING, remaining));
-        headers.add(new Header(X_RATE_LIMIT_RESET, reset));
+        headers.put(X_RATE_LIMIT_LIMIT, limit);
+        headers.put(X_RATE_LIMIT_REMAINING, remaining);
+        headers.put(X_RATE_LIMIT_RESET, reset);
 
-        final TwitterRateLimit rateLimit = new TwitterRateLimit(headers);
+        final TwitterRateLimit rateLimit = new TwitterRateLimit(Headers.of(headers));
         assertEquals(10, rateLimit.getLimit());
         assertEquals(20, rateLimit.getRemaining());
         assertEquals(30L, rateLimit.getReset());
@@ -73,32 +70,9 @@ public void testCreator_populatedHeader() {
 
     @Test
     public void testCreator_emptyHeader() {
-        final List<Header> headers = new ArrayList<>();
-        final TwitterRateLimit rateLimit = new TwitterRateLimit(headers);
+        final TwitterRateLimit rateLimit = new TwitterRateLimit(Headers.of(headers));
         assertEquals(0, rateLimit.getLimit());
         assertEquals(0, rateLimit.getRemaining());
         assertEquals(0, rateLimit.getReset());
     }
-
-    @Test
-    public void testRemainingTime_resetInFuture() {
-        final String reset = "1500";
-        headers.add(new Header(X_RATE_LIMIT_RESET, reset));
-        final CurrentTimeProvider mockCurrentTimeProvider
-                = mock(CurrentTimeProvider.class);
-        when(mockCurrentTimeProvider.getCurrentTimeMillis()).thenReturn(1000000L);
-        final TwitterRateLimit rateLimit = new TwitterRateLimit(headers, mockCurrentTimeProvider);
-        assertEquals(500L, rateLimit.getRemainingTime());
-    }
-
-    @Test
-    public void testRemainingTime_resetInPast() {
-        final String reset = "500";
-        headers.add(new Header(X_RATE_LIMIT_RESET, reset));
-        final CurrentTimeProvider mockCurrentTimeProvider
-                = mock(CurrentTimeProvider.class);
-        when(mockCurrentTimeProvider.getCurrentTimeMillis()).thenReturn(1000000L);
-        final TwitterRateLimit rateLimit = new TwitterRateLimit(headers, mockCurrentTimeProvider);
-        assertEquals(0L, rateLimit.getRemainingTime());
-    }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java
index c5a4fcf8..51383408 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/SSOAuthHandlerTest.java
@@ -74,6 +74,15 @@ public void testIsAvailable_twitterInstalledInvalidSignature()
         assertFalse(SSOAuthHandler.isAvailable(mockContext));
     }
 
+    @Test
+    public void testIsAvailable_twitterInstalledWithValidAndInvalidSignature()
+            throws PackageManager.NameNotFoundException {
+        final Context mockContext = mock(Context.class);
+        TestUtils.setupTwitterInstalled(mockContext, SSOAuthHandler.TWITTER_SIGNATURE,
+                INVALID_SIGNATURE);
+        assertFalse(SSOAuthHandler.isAvailable(mockContext));
+    }
+
     @Test
     public void testIsAvailable_twitterDogfoodInstalled()
             throws PackageManager.NameNotFoundException {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TestUtils.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TestUtils.java
index fa372987..8e6dded4 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TestUtils.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TestUtils.java
@@ -37,13 +37,16 @@ private TestUtils() {
         // Private constructor
     }
 
-    public static void setupTwitterInstalled(Context mockContext, String signature)
+    public static void setupTwitterInstalled(Context mockContext, String... signatures)
             throws PackageManager.NameNotFoundException {
         final PackageManager mockPm = mock(PackageManager.class);
         final PackageInfo mockPackageInfo = mock(PackageInfo.class);
-        mockPackageInfo.signatures = new Signature[] {
-                new Signature(signature)
-        };
+        mockPackageInfo.signatures = new Signature[signatures.length];
+
+        for (int i = 0; i < signatures.length; i++) {
+            mockPackageInfo.signatures[i] = new Signature(signatures[i]);
+        }
+
         when(mockContext.getPackageManager()).thenReturn(mockPm);
         when(mockPm.getPackageInfo(SSOAuthHandler.TWITTER_PACKAGE_NAME,
             PackageManager.GET_SIGNATURES)).thenReturn(mockPackageInfo);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/AuthRequestQueueTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/AuthRequestQueueTest.java
deleted file mode 100644
index d001134b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/AuthRequestQueueTest.java
+++ /dev/null
@@ -1,278 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.AppSession;
-import com.twitter.sdk.android.core.BuildConfig;
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.*;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class AuthRequestQueueTest {
-    private SessionProvider mockSessionProvider;
-    private GuestAuthToken mockGuestAuthToken;
-    private OAuth2Token mockAppAuthToken;
-    private Callback<Session> mockRequest;
-    private Session mockSession;
-
-    @Before
-    public void setUp() throws Exception {
-        mockSessionProvider = mock(SessionProvider.class);
-        doNothing().when(mockSessionProvider).requestAuth(any(Callback.class));
-
-        mockGuestAuthToken = mock(GuestAuthToken.class);
-        mockAppAuthToken = mock(OAuth2Token.class);
-        mockRequest = mock(Callback.class);
-        mockSession = mock(Session.class);
-    }
-
-    // constructs an AuthRequestQueue with mocks, whose session provider returns the given
-    // active session
-    private AuthRequestQueue setupQueue(Session session) {
-        when(mockSessionProvider.getActiveSession()).thenReturn(session);
-        return new AuthRequestQueue(mockSessionProvider);
-    }
-
-    @Test
-    public void testConstructor_awaitingSessionTrue() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        assertTrue(authRequestQueue.awaitingSession.get());
-    }
-
-    /*
-     * test addRequest queues request and does not requestAuth
-     */
-    @Test
-    public void testAddRequest_addsToQueueAndNoCallToRequestAuth() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        authRequestQueue.addRequest(mockRequest);
-        assertEquals(1, authRequestQueue.queue.size());
-        verify(mockSessionProvider, times(0)).requestAuth(any(Callback.class));
-    }
-
-    /*
-     * test addRequest with no Session
-     */
-    @Test
-    public void testAddRequest_notAwaitingSessionNoSession() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        authRequestQueue.awaitingSession.set(false);
-        authRequestQueue.addRequest(mockRequest);
-        // asserts that:
-        // - we added the request to the queue until a token is obtained
-        // - we called requestAuth to get a session
-        // - we set the awaitingSession flag to true
-        assertEquals(1, authRequestQueue.queue.size());
-        verify(mockSessionProvider, times(1)).requestAuth(any(Callback.class));
-        assertTrue(authRequestQueue.awaitingSession.get());
-    }
-
-    /*
-     * test addRequest with session that has no Auth Token
-     */
-    @Test
-    public void testAddRequest_notAwaitingSessionHasSessionNoToken() {
-        final AuthRequestQueue authRequestQueue = setupQueue(mock(AppSession.class));
-        authRequestQueue.awaitingSession.set(false);
-        authRequestQueue.addRequest(mockRequest);
-        // asserts that:
-        // - we added the request to the queue until a token is obtained
-        // - we called requestAuth to get a session
-        // - we set the awaitingSession flag to true
-        assertEquals(1, authRequestQueue.queue.size());
-        verify(mockSessionProvider, times(1)).requestAuth(any(Callback.class));
-        assertTrue(authRequestQueue.awaitingSession.get());
-    }
-
-
-    @Test
-    public void testAddRequest_awaitingSession() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        authRequestQueue.addRequest(mockRequest);
-        // asserts that
-        // - we added the request to the queue until a token is obtained
-        // - we did NOT call requestAuth, since an auth request is in-flight
-        // - awaitingSession flag sanity check
-        assertEquals(1, authRequestQueue.queue.size());
-        verify(mockSessionProvider, times(0)).requestAuth(any(Callback.class));
-        assertTrue(authRequestQueue.awaitingSession.get());
-    }
-
-    /*
-     * test addRequest with OAuth2Service and guest auth token
-     */
-    @Test
-    public void testAddRequest_withAuth() {
-        final AppSession appSession = mock(AppSession.class);
-        when(appSession.getAuthToken()).thenReturn(mockGuestAuthToken);
-        final AuthRequestQueue authRequestQueue = setupQueue(appSession);
-        authRequestQueue.flushQueueOnSuccess(mockSession);
-        authRequestQueue.addRequest(mockRequest);
-        // asserts that we skip the queue and add it straight to the net
-        assertEquals(0, authRequestQueue.queue.size());
-        verify(mockRequest, times(1)).success(any(Result.class));
-    }
-
-    /*
-     * Test flushQueueOnSuccess
-     */
-    @Test
-    public void testFlushQueueOnSuccess_drainsQueue() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        authRequestQueue.addRequest(mockRequest);
-        authRequestQueue.addRequest(mockRequest);
-        assertEquals(2, authRequestQueue.queue.size());
-        authRequestQueue.flushQueueOnSuccess(mockSession);
-        assertEquals(0, authRequestQueue.queue.size());
-    }
-
-    @Test
-    public void testFlushQueueOnSuccess_setsAwaitingSessionToFalse() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        authRequestQueue.awaitingSession.set(true);
-        authRequestQueue.flushQueueOnSuccess(mockSession);
-        assertFalse(authRequestQueue.awaitingSession.get());
-    }
-
-    /*
-     * Test flushQueueOnError
-     */
-    @Test
-    public void testFlushQueueOnError_drainsQueue() {
-        final TwitterAuthException exception = mock(TwitterAuthException.class);
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        authRequestQueue.addRequest(mockRequest);
-        authRequestQueue.addRequest(mockRequest);
-        assertEquals(2, authRequestQueue.queue.size());
-        authRequestQueue.flushQueueOnError(exception);
-        assertEquals(0, authRequestQueue.queue.size());
-        verify(mockRequest, times(2)).failure(any(TwitterException.class));
-    }
-
-    @Test
-    public void testFlushQueueOnError_setsActiveFlagToFalse() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        authRequestQueue.awaitingSession.set(true);
-        authRequestQueue.flushQueueOnError(null);
-        assertFalse(authRequestQueue.awaitingSession.get());
-    }
-
-    /*
-     * Test hasValidSession
-     */
-    @Test
-    public void testHasValidSession_noAppSession() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        assertNull(authRequestQueue.getValidSession());
-    }
-
-    @Test
-    public void testHasValidSession_hasAppSessionNoAuthToken() {
-        final AuthRequestQueue authRequestQueue = setupQueue(mock(AppSession.class));
-        assertNull(authRequestQueue.getValidSession());
-    }
-
-    @Test
-    public void testHasValidSession_hasAppAuthToken() {
-        final AppSession session = mock(AppSession.class);
-        when(session.getAuthToken()).thenReturn(mockAppAuthToken);
-        final AuthRequestQueue authRequestQueue = setupQueue(session);
-        assertNotNull(authRequestQueue.getValidSession());
-    }
-
-    @Test
-    public void testHasValidSession_hasGuestAuthToken() {
-        final AppSession session = mock(AppSession.class);
-        when(session.getAuthToken()).thenReturn(mockGuestAuthToken);
-        final AuthRequestQueue authRequestQueue = setupQueue(session);
-        assertNotNull(authRequestQueue.getValidSession());
-    }
-
-    @Test
-    public void testHasValidSession_hasUserAuthToken() {
-        final TwitterSession session = mock(TwitterSession.class);
-        when(session.getAuthToken()).thenReturn(mock(TwitterAuthToken.class));
-        final AuthRequestQueue authRequestQueue = setupQueue(session);
-        assertNotNull(authRequestQueue.getValidSession());
-    }
-
-    @Test
-    public void testSessionRestored_validSessionQueueNotEmpty() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        final AppSession session = mock(AppSession.class);
-        when(session.getAuthToken()).thenReturn(mockGuestAuthToken);
-        final Callback mockCallback = mock(Callback.class);
-        authRequestQueue.addRequest(mockCallback);
-
-        authRequestQueue.sessionRestored(session);
-
-        assertFalse(authRequestQueue.awaitingSession.get());
-        verify(mockCallback).success(any(Result.class));
-        verify(mockSessionProvider, times(0)).requestAuth(any(Callback.class));
-    }
-
-    @Test
-    public void testSessionRestored_validSessionQueueEmpty() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        final AppSession session = mock(AppSession.class);
-        when(session.getAuthToken()).thenReturn(mockGuestAuthToken);
-
-        authRequestQueue.sessionRestored(session);
-
-        assertFalse(authRequestQueue.awaitingSession.get());
-        verify(mockSessionProvider, times(0)).requestAuth(any(Callback.class));
-    }
-
-    @Test
-    public void testSessionRestored_noSessionQueueEmpty() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-
-        authRequestQueue.sessionRestored(null);
-
-        assertFalse(authRequestQueue.awaitingSession.get());
-        verify(mockSessionProvider, times(0)).requestAuth(any(Callback.class));
-    }
-
-    @Test
-    public void testSessionRestored_noSessionQueueNotEmpty() {
-        final AuthRequestQueue authRequestQueue = setupQueue(null);
-        final Callback mockCallback = mock(Callback.class);
-        authRequestQueue.addRequest(mockCallback);
-        authRequestQueue.sessionRestored(null);
-        verify(mockSessionProvider, times(1)).requestAuth(any(Callback.class));
-        verifyZeroInteractions(mockCallback);
-        assertTrue(authRequestQueue.awaitingSession.get());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java
index 10db2d2c..62eca7b3 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/SessionMonitorTest.java
@@ -77,7 +77,8 @@ public void setUp() throws Exception {
         sessionMonitor = new SessionMonitor<>(mockSessionManager, mockSystemCurrentTimeProvider,
                 mockExecutorService, mockMonitorState, mockSessionVerifier);
         monitorState = new SessionMonitor.MonitorState();
-        final Session testSession = new Session(null, 1L);
+        final Session testSession = mock(Session.class);
+        when(testSession.getId()).thenReturn(1L);
         sessionMap = new HashMap<>();
         sessionMap.put(1L, testSession);
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java
index 461456e4..063dda61 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterApiTest.java
@@ -61,4 +61,9 @@ public void testBuildUserAgent() {
                         Build.MODEL, Build.BRAND, Build.PRODUCT),
                 userAgent);
     }
+
+    @Test
+    public void testNormalizeString() {
+        assertEquals("Twitter", TwitterApi.normalizeString("Tw" + '\u00ED' + "tter\r\n\t"));
+    }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterRequestHeadersTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterRequestHeadersTest.java
deleted file mode 100644
index a5ae2b9b..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterRequestHeadersTest.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.AppSession;
-import com.twitter.sdk.android.core.AuthToken;
-import com.twitter.sdk.android.core.BuildConfig;
-import com.twitter.sdk.android.core.TestFixtures;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-public class TwitterRequestHeadersTest  {
-
-    private static final String GET = "GET";
-    private static final String TEST_URL = "http://testurl";
-    private static final String ACCESS_TOKEN = "accessToken";
-    private static final String GUEST_TOKEN = "guestToken";
-
-    private final TwitterAuthConfig authConfig = new TwitterAuthConfig("consumerKey",
-            "consumerSecret");
-    private final TwitterAuthToken authToken = new TwitterAuthToken("token", "secret");
-    private final TwitterSession session = new TwitterSession(authToken, TestFixtures.USER_ID,
-            TestFixtures.SCREEN_NAME);
-    private final String userAgent = "TwitterRequestHeadersTest";
-
-    @Test
-    public void testGetHeaders() {
-        final TwitterRequestHeaders requestHeaders = new TwitterRequestHeaders(GET,
-                TEST_URL, authConfig, session, userAgent, null);
-        assertMinimumHeaders(requestHeaders.getHeaders());
-    }
-
-    private void assertMinimumHeaders(Map<String, String> headers) {
-        assertNotNull(headers);
-        assertNotNull(headers.get(AuthToken.HEADER_AUTHORIZATION));
-        assertEquals(userAgent, headers.get(TwitterRequestHeaders.HEADER_USER_AGENT));
-    }
-
-    @Test
-    public void testGetHeaders_appAuthToken() {
-        final AppSession sessionAppAuthToken = mock(AppSession.class);
-         when(sessionAppAuthToken.getAuthToken()).thenReturn(new OAuth2Token(null, ACCESS_TOKEN));
-
-        final TwitterRequestHeaders requestHeaders = new TwitterRequestHeaders(GET,
-                TEST_URL, authConfig, sessionAppAuthToken, userAgent, null);
-        final Map<String, String> headers = requestHeaders.getHeaders();
-        assertMinimumHeaders(headers);
-        assertEquals(OAuth2Service.getAuthorizationHeader(sessionAppAuthToken.getAuthToken()),
-                headers.get(OAuth2Token.HEADER_AUTHORIZATION));
-    }
-
-    @Test
-    public void testGetHeaders_guestAuthToken() {
-        final AppSession sessionGuestAuthToken = mock(AppSession.class);
-        when(sessionGuestAuthToken.getAuthToken())
-                .thenReturn(new GuestAuthToken(null, ACCESS_TOKEN, GUEST_TOKEN));
-        final TwitterRequestHeaders requestHeaders = new TwitterRequestHeaders(GET,
-                TEST_URL, authConfig, sessionGuestAuthToken, userAgent, null);
-        final Map<String, String> headers = requestHeaders.getHeaders();
-        assertMinimumHeaders(headers);
-        assertEquals(OAuth2Service.getAuthorizationHeader(sessionGuestAuthToken.getAuthToken()),
-                headers.get(GuestAuthToken.HEADER_AUTHORIZATION)
-        );
-        assertEquals(GUEST_TOKEN, headers.get(GuestAuthToken.HEADER_GUEST_TOKEN));
-    }
-
-    @Test
-    public void testGetHeaders_withNullSession()  {
-        final TwitterRequestHeaders requestHeaders = new TwitterRequestHeaders(GET,
-                TEST_URL, authConfig, null, userAgent, null);
-        final Map<String, String> headerMap = requestHeaders.getHeaders();
-        assertHeadersWhenNoAuth(headerMap);
-    }
-
-    private void assertHeadersWhenNoAuth(Map<String, String> headers) {
-        assertEquals(1, headers.size());
-        assertEquals(userAgent, headers.get(TwitterRequestHeaders.HEADER_USER_AGENT));
-    }
-
-    @Test
-    public void testGetHeaders_extraHeaders() {
-        final String extraHeader = "Extra header";
-        final String extraHeaderValue = "Extra header value";
-        final TwitterRequestHeaders requestHeaders = new TwitterRequestHeaders(GET,
-                TEST_URL, authConfig, session, userAgent, null) {
-            @Override
-            protected Map<String, String> getExtraHeaders() {
-                final Map<String, String> extras = new HashMap<>(1);
-                extras.put(extraHeader, extraHeaderValue);
-                return extras;
-            }
-        };
-        final Map<String, String> headerMap = requestHeaders.getHeaders();
-        assertMinimumHeaders(headerMap);
-        assertTrue(headerMap.containsKey(extraHeader));
-        assertEquals(extraHeaderValue, headerMap.get(extraHeader));
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
index cb242e83..32ac2e80 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
@@ -18,8 +18,8 @@
 package com.twitter.sdk.android.core.internal;
 
 import com.twitter.sdk.android.core.BuildConfig;
-import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.TestFixtures;
+import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.internal.TwitterSessionVerifier.AccountServiceProvider;
 import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
@@ -32,12 +32,14 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
-import retrofit.RetrofitError;
+import java.io.IOException;
+
+import retrofit2.mock.Calls;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -55,16 +57,17 @@
     private AccountServiceProvider mockAccountServiceProvider;
     private TwitterSessionVerifier verifier;
     private AccountService mockAccountService;
-    private Session session;
+    private TwitterSession session;
 
     @Before
     public void setUp() throws Exception {
         mockAccountServiceProvider = mock(AccountServiceProvider.class);
         mockScribeClient = mock(DefaultScribeClient.class);
         mockAccountService = mock(AccountService.class);
-        when(mockAccountServiceProvider.getAccountService(any(Session.class))).thenReturn
+        when(mockAccountServiceProvider.getAccountService(any(TwitterSession.class))).thenReturn
                 (mockAccountService);
-        session = new Session(null, TestFixtures.USER_ID);
+        session = mock(TwitterSession.class);
+        when(session.getId()).thenReturn(TestFixtures.USER_ID);
         verifier = new TwitterSessionVerifier(mockAccountServiceProvider,
                 mockScribeClient);
     }
@@ -94,7 +97,7 @@ public void testVerifySession_scribeHandlesNullClient() {
                 (mockAccountServiceProvider,
                 null);
         try {
-            verifier.verifySession(mock(Session.class));
+            verifier.verifySession(session);
         } catch (NullPointerException e) {
             fail("should handle a null scribe client");
         }
@@ -102,12 +105,12 @@ public void testVerifySession_scribeHandlesNullClient() {
 
     @Test
     public void testVerifySession_catchesRetrofitExceptionsAndFinishesVerification() {
-        doThrow(mock(RetrofitError.class)).when(mockAccountService).verifyCredentials(true, false);
+        doReturn(Calls.failure(new IOException()))
+                .when(mockAccountService).verifyCredentials(true, false);
 
-        verifier.verifySession(mock(Session.class));
+        verifier.verifySession(session);
 
         verify(mockAccountService).verifyCredentials(true, false);
         // success, we caught the exception
     }
-
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
new file mode 100644
index 00000000..8bf5f2af
--- /dev/null
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
@@ -0,0 +1,135 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import com.twitter.sdk.android.core.BuildConfig;
+import com.twitter.sdk.android.core.GuestSession;
+import com.twitter.sdk.android.core.GuestSessionProvider;
+import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
+import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
+import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import okhttp3.Interceptor;
+import okhttp3.Request;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class GuestAuthInterceptorTest {
+    static final String TEST_GUEST_TOKEN = "139854932048";
+    static final String TEST_ACCESS_TOKEN = "AjhdlsjreurWfjdiskdjieidfkdjshrow";
+    static final String TEST_HEADER_AUTHORIZATION = OAuth2Token.TOKEN_TYPE_BEARER
+            + " " + TEST_ACCESS_TOKEN;
+    static final String TEST_URL = "https://api.twitter.com";
+    static final String TEST_HEADER = "TEST_HEADER";
+
+    @Mock
+    GuestSessionProvider mockGuestSessionProvider;
+    @Mock
+    GuestSession mockGuestSession;
+    @Mock
+    GuestAuthToken mockAuthToken;
+    @Mock
+    Interceptor.Chain mockChain;
+    @Captor
+    ArgumentCaptor<Request> requestCaptor;
+    GuestAuthInterceptor interceptor;
+
+    @Before
+    public void setUp() throws Exception {
+        MockitoAnnotations.initMocks(this);
+
+        when(mockAuthToken.getGuestToken()).thenReturn(TEST_GUEST_TOKEN);
+        when(mockAuthToken.getAccessToken()).thenReturn(TEST_ACCESS_TOKEN);
+        when(mockAuthToken.getTokenType()).thenReturn(OAuth2Token.TOKEN_TYPE_BEARER);
+
+        when(mockGuestSession.getAuthToken()).thenReturn(mockAuthToken);
+
+        when(mockGuestSessionProvider.getCurrentSession()).thenReturn(mockGuestSession);
+
+        interceptor = new GuestAuthInterceptor(mockGuestSessionProvider);
+    }
+
+    @Test
+    public void testIntercept() throws Exception {
+        final Request request = new Request.Builder().url(TEST_URL).build();
+        when(mockChain.request()).thenReturn(request);
+
+        interceptor.intercept(mockChain);
+
+        verify(mockChain).proceed(requestCaptor.capture());
+
+        final Request signedRequest = requestCaptor.getValue();
+        assertEquals(TEST_HEADER_AUTHORIZATION,
+                signedRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
+        assertEquals(TEST_GUEST_TOKEN, signedRequest.header(OAuthConstants.HEADER_GUEST_TOKEN));
+    }
+
+    @Test
+    public void testIntercept_nullSessionFromProvider() throws Exception {
+        final Request request = new Request.Builder().url(TEST_URL).build();
+        when(mockChain.request()).thenReturn(request);
+        when(mockGuestSessionProvider.getCurrentSession()).thenReturn(null);
+
+        interceptor.intercept(mockChain);
+
+        verify(mockChain).proceed(requestCaptor.capture());
+
+        final Request unsignedRequest = requestCaptor.getValue();
+        assertEquals(request, unsignedRequest);
+    }
+
+    @Test
+    public void testAddAuthHeaders() {
+        final Request.Builder builder = new Request.Builder().url(TEST_URL);
+        GuestAuthInterceptor.addAuthHeaders(builder, mockAuthToken);
+        final Request request = builder.build();
+
+        assertEquals(TEST_HEADER_AUTHORIZATION,
+                request.header(OAuthConstants.HEADER_AUTHORIZATION));
+        assertEquals(TEST_GUEST_TOKEN, request.header(OAuthConstants.HEADER_GUEST_TOKEN));
+    }
+
+    @Test
+    public void testAddAuthHeaders_removesOldHeaders() {
+        final Request.Builder builder = new Request.Builder().url(TEST_URL);
+        builder.header(OAuthConstants.HEADER_AUTHORIZATION, "23233");
+        builder.header(OAuthConstants.HEADER_GUEST_TOKEN, "djfhjASEfjvncdjfhdkjASjshdj");
+        builder.header(TEST_HEADER, TEST_HEADER);
+        GuestAuthInterceptor.addAuthHeaders(builder, mockAuthToken);
+        final Request request = builder.build();
+
+        assertEquals(TEST_HEADER_AUTHORIZATION,
+                request.header(OAuthConstants.HEADER_AUTHORIZATION));
+        assertEquals(TEST_GUEST_TOKEN, request.header(OAuthConstants.HEADER_GUEST_TOKEN));
+        assertEquals(TEST_HEADER, request.header(TEST_HEADER));
+    }
+}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java
new file mode 100644
index 00000000..c1cbd299
--- /dev/null
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptorTest.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import com.twitter.sdk.android.core.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import okhttp3.Interceptor;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.mockito.Mockito.when;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class GuestAuthNetworkInterceptorTest {
+    static final String TEST_URL = "https://api.twitter.com";
+
+    @Mock
+    Interceptor.Chain mockChain;
+    Request request;
+    GuestAuthNetworkInterceptor interceptor;
+
+    @Before
+    public void setUp() throws Exception {
+        MockitoAnnotations.initMocks(this);
+
+        request = new Request.Builder().url(TEST_URL).build();
+        interceptor = new GuestAuthNetworkInterceptor();
+    }
+
+    @Test
+    public void testIntercept_with403() throws Exception {
+        final Response response = new Response.Builder()
+                .protocol(Protocol.HTTP_1_1)
+                .request(request)
+                .code(403)
+                .build();
+
+        when(mockChain.request()).thenReturn(request);
+        when(mockChain.proceed(request)).thenReturn(response);
+
+        final Response modifiedResponse = interceptor.intercept(mockChain);
+
+        assertFalse(response == modifiedResponse);
+        assertEquals(401, modifiedResponse.code());
+    }
+
+    @Test
+    public void testIntercept_with400() throws Exception {
+        final Response response = new Response.Builder()
+                .protocol(Protocol.HTTP_1_1)
+                .request(request)
+                .code(400)
+                .build();
+
+        when(mockChain.request()).thenReturn(request);
+        when(mockChain.proceed(request)).thenReturn(response);
+
+        final Response unmodifiedResponse = interceptor.intercept(mockChain);
+
+        assertTrue(response == unmodifiedResponse);
+        assertEquals(400, unmodifiedResponse.code());
+    }
+}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java
new file mode 100644
index 00000000..db5c14c6
--- /dev/null
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticatorTest.java
@@ -0,0 +1,156 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import com.twitter.sdk.android.core.BuildConfig;
+import com.twitter.sdk.android.core.GuestSession;
+import com.twitter.sdk.android.core.GuestSessionProvider;
+import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
+import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
+import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertNull;
+import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.mockito.Mockito.when;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class GuestAuthenticatorTest {
+    static final String TEST_GUEST_TOKEN = "139854932048";
+    static final String TEST_ACCESS_TOKEN = "AjhdlsjreurWfjdiskdjieidfkdjshrow";
+    static final String TEST_GUEST_TOKEN_2 = "13985434545048";
+    static final String TEST_ACCESS_TOKEN_2 = "ldsjfljsdhfjhuYSGYYSuagshjhags";
+    static final String TEST_HEADER_AUTHORIZATION = OAuth2Token.TOKEN_TYPE_BEARER
+            + " " + TEST_ACCESS_TOKEN;
+    static final String TEST_HEADER_AUTHORIZATION_2 = OAuth2Token.TOKEN_TYPE_BEARER
+            + " " + TEST_ACCESS_TOKEN_2;
+    static final String TEST_URL = "https://api.twitter.com";
+
+    @Mock
+    GuestSessionProvider mockGuestSessionProvider;
+    @Mock
+    GuestAuthToken mockAuthToken;
+    Request request;
+    Response response;
+    GuestAuthenticator authenticator;
+
+    @Before
+    public void setUp() throws Exception {
+        MockitoAnnotations.initMocks(this);
+
+        when(mockAuthToken.getGuestToken()).thenReturn(TEST_GUEST_TOKEN_2);
+        when(mockAuthToken.getAccessToken()).thenReturn(TEST_ACCESS_TOKEN_2);
+        when(mockAuthToken.getTokenType()).thenReturn(OAuth2Token.TOKEN_TYPE_BEARER);
+
+        request = new Request.Builder()
+                .url(TEST_URL)
+                .header(OAuthConstants.HEADER_AUTHORIZATION, TEST_HEADER_AUTHORIZATION)
+                .header(OAuthConstants.HEADER_GUEST_TOKEN, TEST_GUEST_TOKEN)
+                .build();
+
+        response = new Response.Builder()
+                .code(401)
+                .protocol(Protocol.HTTP_1_1)
+                .request(request)
+                .build();
+
+        authenticator = new GuestAuthenticator(mockGuestSessionProvider);
+    }
+
+    @Test
+    public void testGetExpiredToken() {
+        final GuestSession session = authenticator.getExpiredSession(response);
+
+        final GuestAuthToken token = session.getAuthToken();
+        assertEquals(TEST_GUEST_TOKEN, token.getGuestToken());
+        assertEquals(TEST_ACCESS_TOKEN, token.getAccessToken());
+    }
+
+    @Test
+    public void testGetExpiredToken_emptyHeaders() {
+        request = new Request.Builder()
+                .url(TEST_URL)
+                .build();
+
+        response = new Response.Builder()
+                .code(401)
+                .protocol(Protocol.HTTP_1_1)
+                .request(request)
+                .build();
+
+        final GuestSession session = authenticator.getExpiredSession(response);
+
+        assertNull(session);
+    }
+
+    @Test
+    public void testReauth_emptyHeaders() {
+        request = new Request.Builder()
+                .url(TEST_URL)
+                .build();
+
+        response = new Response.Builder()
+                .code(401)
+                .protocol(Protocol.HTTP_1_1)
+                .request(request)
+                .build();
+
+        final Request request = authenticator.reauth(response);
+        assertNull(request);
+    }
+
+    @Test
+    public void testResign() {
+        final Request newRequest = authenticator.resign(request, mockAuthToken);
+
+        assertEquals(TEST_HEADER_AUTHORIZATION_2,
+                newRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
+        assertEquals(TEST_GUEST_TOKEN_2, newRequest.header(OAuthConstants.HEADER_GUEST_TOKEN));
+    }
+
+    @Test
+    public void testCanRetry_firstRetry() {
+        assertTrue(authenticator.canRetry(response));
+    }
+
+    @Test
+    public void testCanRetry_secondRetry() {
+        final Response failedResponse = new Response.Builder()
+                .code(401)
+                .protocol(Protocol.HTTP_1_1)
+                .request(request)
+                .priorResponse(response)
+                .build();
+
+        assertFalse(authenticator.canRetry(failedResponse));
+    }
+}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java
new file mode 100644
index 00000000..5f74dcfb
--- /dev/null
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptorTest.java
@@ -0,0 +1,151 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network;
+
+import com.twitter.sdk.android.core.BuildConfig;
+import com.twitter.sdk.android.core.TestFixtures;
+import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.twitter.sdk.android.core.TwitterAuthToken;
+import com.twitter.sdk.android.core.TwitterSession;
+import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.io.IOException;
+import java.util.Map;
+
+import okhttp3.FormBody;
+import okhttp3.Interceptor;
+import okhttp3.Request;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class OAuth1aInterceptorTest {
+    static final String POST_KEY = "test";
+    static final String POST_KEY_2 = "test 2!";
+    static final String POST_KEY_2_ENCODED = "test%202%21";
+    static final String POST_VALUE = "value";
+    static final String POST_VALUE_2 = "value 2!";
+    static final String TEST_URL = "https://api.twitter.com";
+    static final String TEST_HEADER = "TEST_HEADER";
+
+    @Mock
+    TwitterSession mockTwitterSession;
+    @Mock
+    TwitterAuthToken mockAuthToken;
+    @Mock
+    TwitterAuthConfig mockAuthConfig;
+    @Mock
+    Interceptor.Chain mockChain;
+    @Captor
+    ArgumentCaptor<Request> requestCaptor;
+    OAuth1aInterceptor interceptor;
+
+    @Before
+    public void setUp() throws Exception {
+        MockitoAnnotations.initMocks(this);
+
+        when(mockAuthConfig.getConsumerKey()).thenReturn(TestFixtures.KEY);
+        when(mockAuthConfig.getConsumerSecret()).thenReturn(TestFixtures.SECRET);
+
+        when(mockTwitterSession.getAuthToken()).thenReturn(mockAuthToken);
+
+        interceptor = new OAuth1aInterceptor(mockTwitterSession, mockAuthConfig);
+    }
+
+    @Test
+    public void testIntercept() throws Exception {
+        final Request request = new Request.Builder()
+                .url(TEST_URL)
+                .header(TEST_HEADER, TEST_HEADER)
+                .build();
+        when(mockChain.request()).thenReturn(request);
+
+        interceptor.intercept(mockChain);
+
+        verify(mockChain).proceed(requestCaptor.capture());
+
+        final Request signedRequest = requestCaptor.getValue();
+        assertNotNull(signedRequest.header(OAuthConstants.HEADER_AUTHORIZATION));
+        assertEquals(TEST_HEADER, signedRequest.header(TEST_HEADER));
+    }
+
+    @Test
+    public void testGetAuthHeaders() throws IOException {
+        final Request request = new Request.Builder().url(TEST_URL).build();
+
+        final String header = interceptor.getAuthorizationHeader(request);
+
+        assertNotNull(header);
+    }
+
+    @Test
+    public void testGetPostParameters_bodyWithMultipleParams() throws IOException {
+        final FormBody formBody = new FormBody.Builder()
+                .add(POST_KEY, POST_VALUE)
+                .add(POST_KEY_2, POST_VALUE_2)
+                .build();
+
+        final Request request = new Request.Builder()
+                .url(TEST_URL)
+                .post(formBody)
+                .build();
+
+        final Map<String, String> params = interceptor.getPostParams(request);
+
+        assertEquals(2, params.size());
+        assertEquals(POST_VALUE, params.get(POST_KEY));
+        assertEquals(POST_VALUE_2, params.get(POST_KEY_2_ENCODED));
+    }
+
+    @Test
+    public void testGetPostParameters_withZeroParams() throws IOException {
+        final FormBody formBody = new FormBody.Builder().build();
+
+        final Request request = new Request.Builder()
+                .url(TEST_URL)
+                .post(formBody)
+                .build();
+
+        final Map<String, String> params = interceptor.getPostParams(request);
+
+        assertEquals(0, params.size());
+    }
+
+    @Test
+    public void testGetPostParameters_withGetRequest() throws IOException {
+        final Request request = new Request.Builder().url(TEST_URL).build();
+
+        final Map<String, String> params = interceptor.getPostParams(request);
+
+        assertEquals(0, params.size());
+    }
+}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java
index b03d1e35..1d5308bf 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthTokenTest.java
@@ -24,9 +24,6 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
@@ -41,16 +38,6 @@
     private static final long ONE_HOUR_AGE = System.currentTimeMillis() - (3600 * 1000);
     private static final long THREE_HOURS_AGO = System.currentTimeMillis() - (3600 * 3 * 1000);
 
-    @Test
-    public void testGetAuthHeaders() {
-        final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN);
-        final Map<String, String> headers = token.getAuthHeaders(null, null, null, null);
-        assertEquals(HEADERS_COUNT, headers.size());
-        assertEquals(OAuth2Service.getAuthorizationHeader(token),
-                headers.get(GuestAuthToken.HEADER_AUTHORIZATION));
-        assertEquals(GUEST_TOKEN, headers.get(GuestAuthToken.HEADER_GUEST_TOKEN));
-    }
-
     @Test
     public void testIsExpired_newToken() {
         final GuestAuthToken token = new GuestAuthToken(TOKEN_TYPE, ACCESS_TOKEN, GUEST_TOKEN);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
index 144f1a0a..0a8a8add 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
@@ -17,9 +17,6 @@
 
 package com.twitter.sdk.android.core.internal.oauth;
 
-import io.fabric.sdk.android.services.common.CommonUtils;
-import io.fabric.sdk.android.services.network.HttpRequest;
-
 import com.twitter.sdk.android.core.BuildConfig;
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.Result;
@@ -35,19 +32,17 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.ArrayList;
-
-import retrofit.client.Response;
-import retrofit.http.Body;
-import retrofit.http.Header;
-import retrofit.http.Query;
-import retrofit.mime.TypedInput;
+
+import javax.net.ssl.SSLSocketFactory;
+
+import okhttp3.MediaType;
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.http.Header;
+import retrofit2.http.Query;
+import retrofit2.mock.Calls;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -58,17 +53,22 @@
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
+@SuppressWarnings("checkstyle:linelength")
 public class OAuth1aServiceTest {
 
     private TwitterAuthConfig authConfig;
     private TwitterCore twitterCore;
     private OAuth1aService service;
+    private SSLSocketFactory sslSocketFactory;
+    private TwitterApi twitterApi;
 
     @Before
     public void setUp() throws Exception {
         authConfig = new TwitterAuthConfig("key", "secret");
         twitterCore = new TwitterCore(authConfig);
-        service = new OAuth1aService(twitterCore, null , new TwitterApi());
+        sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
+        twitterApi = new TwitterApi();
+        service = new OAuth1aService(twitterCore, sslSocketFactory, twitterApi);
     }
 
     @Test
@@ -81,33 +81,16 @@ public void testGetAccessTokenUrl() throws NoSuchMethodException {
         assertEquals("https://api.twitter.com/oauth/access_token", service.getAccessTokenUrl());
     }
 
-    @Test
-    public void testSignRequest() throws MalformedURLException {
-        final TwitterAuthConfig config = new TwitterAuthConfig("consumerKey", "consumerSecret");
-        final TwitterAuthToken accessToken = new TwitterAuthToken("token", "tokenSecret");
-
-        final HttpURLConnection connection = mock(HttpURLConnection.class);
-        when(connection.getRequestMethod()).thenReturn("GET");
-        when(connection.getURL())
-                .thenReturn(new URL("https://api.twitter.com/1.1/statuses/home_timeline.json"));
-
-        OAuth1aService.signRequest(config, accessToken, connection, null);
-        verify(connection)
-                .setRequestProperty(eq(HttpRequest.HEADER_AUTHORIZATION), any(String.class));
-
-        // TODO: Make it so that nonce and timestamp can be specified for testing puproses?
-    }
-
     @Test
     public void testRequestTempToken() {
         service.api = new MockOAuth1aService() {
             @Override
-            public void getTempToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                                     @Body String dummy, Callback<Response> cb) {
+            public Call<ResponseBody> getTempToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
                 assertTrue(auth.contains(OAuthConstants.PARAM_CALLBACK));
+                return super.getTempToken(auth);
             }
         };
-        service.requestTempToken(null);
+        service.requestTempToken(mock(Callback.class));
     }
 
     @Test
@@ -116,23 +99,22 @@ public void testRequestAccessToken() {
         final String verifier = "verifier";
         service.api = new MockOAuth1aService() {
             @Override
-            public void getAccessToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                                       @Query(OAuthConstants.PARAM_VERIFIER) String innerVerifier,
-                                       @Body String dummy, Callback<Response> cb) {
+            public Call<ResponseBody> getAccessToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
+                                                     @Query(OAuthConstants.PARAM_VERIFIER) String innerVerifier) {
 
                 assertEquals(verifier, innerVerifier);
                 assertNotNull(auth);
                 assertTrue(auth.contains(token.token));
+
+                return super.getAccessToken(auth, innerVerifier);
             }
         };
-        service.requestAccessToken(null, token, verifier);
+        service.requestAccessToken(mock(Callback.class), token, verifier);
     }
 
     @Test
     public void testApiHost() {
-        final TwitterApi api = new TwitterApi();
-        final OAuth1aService localService = new OAuth1aService(twitterCore, null, api);
-        assertEquals(api, localService.getApi());
+        assertEquals(twitterApi, service.getApi());
     }
 
     @Test
@@ -245,19 +227,12 @@ public void failure(TwitterException exception) {
     }
 
     private void setupCallbackWrapperTest(String responseStr,
-            Callback<OAuthResponse> authResponseCallback) throws IOException {
-        final Callback<Response> callbackWrapper = service.getCallbackWrapper(authResponseCallback);
-        final TypedInput mockValue = mock(TypedInput.class);
-        final Response mockResponse = new Response("url", HttpURLConnection.HTTP_OK, "reason",
-                new ArrayList<retrofit.client.Header>(), mockValue);
-        InputStream inputStream = null;
-        try {
-            inputStream = new ByteArrayInputStream(responseStr.getBytes("UTF-8"));
-            when(mockValue.in()).thenReturn(inputStream);
-            callbackWrapper.success(new Result<>(mockResponse, mockResponse));
-        } finally {
-            CommonUtils.closeQuietly(inputStream);
-        }
+                                          Callback<OAuthResponse> authResponseCallback) throws IOException {
+        final Callback<ResponseBody> callbackWrapper = service.getCallbackWrapper(authResponseCallback);
+        final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), responseStr);
+        final Response<ResponseBody> response = Response.success(responseBody);
+
+        callbackWrapper.success(new Result<>(responseBody, response));
     }
 
     @Test
@@ -291,18 +266,15 @@ public void failure(TwitterException exception) {
                 assertNotNull(exception);
             }
         };
-        final Callback<Response> callbackWrapper = service.getCallbackWrapper(callback);
-        final TypedInput mockValue = mock(TypedInput.class);
-        final Response mockResponse = new Response("url", HttpURLConnection.HTTP_OK, "reason",
-                new ArrayList<retrofit.client.Header>(), mockValue);
-        when(mockValue.in()).thenThrow(mock(IOException.class));
-        callbackWrapper.success(new Result<>(mockResponse, mockResponse));
+        final Callback<ResponseBody> callbackWrapper = service.getCallbackWrapper(callback);
+        final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), "");
+        callbackWrapper.success(new Result<>(responseBody, Response.success(responseBody)));
     }
 
     @Test
     public void testCallbackWrapperFailure() {
         final Callback<OAuthResponse> authResponseCallback = mock(Callback.class);
-        final Callback<Response> callbackWrapper = service.getCallbackWrapper(authResponseCallback);
+        final Callback<ResponseBody> callbackWrapper = service.getCallbackWrapper(authResponseCallback);
         final TwitterException mockException = mock(TwitterException.class);
         callbackWrapper.failure(mockException);
         verify(authResponseCallback).failure(eq(mockException));
@@ -311,16 +283,16 @@ public void testCallbackWrapperFailure() {
     private static class MockOAuth1aService implements OAuth1aService.OAuthApi {
 
         @Override
-        public void getTempToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                @Body String dummy, Callback<Response> cb) {
-            // Does nothing
+        public Call<ResponseBody> getTempToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
+            final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), "");
+            return Calls.response(Response.success(responseBody));
         }
 
         @Override
-        public void getAccessToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                @Query(OAuthConstants.PARAM_VERIFIER) String verifier, @Body String dummy,
-                Callback<Response> cb) {
-            // Does nothing
+        public Call<ResponseBody> getAccessToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
+                @Query(OAuthConstants.PARAM_VERIFIER) String verifier) {
+            final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), "");
+            return Calls.response(Response.success(responseBody));
         }
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
index 46f49426..dff9b7e9 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
@@ -25,6 +25,7 @@
 import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.internal.TwitterApi;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricGradleTestRunner;
@@ -32,16 +33,23 @@
 
 import java.lang.reflect.Method;
 
-import retrofit.http.Body;
-import retrofit.http.Field;
-import retrofit.http.Header;
-import retrofit.http.Headers;
-import retrofit.http.POST;
+import javax.net.ssl.SSLSocketFactory;
+
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.http.Field;
+import retrofit2.http.Header;
+import retrofit2.http.Headers;
+import retrofit2.http.POST;
+import retrofit2.mock.Calls;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
@@ -52,42 +60,57 @@
      * Example consumer key and consumer secret values provided by:
      * https://dev.twitter.com/oauth/application-only
      */
-    private static final String CONSUMER_KEY = "xvz1evFS4wEEPTGEFPHBog";
-    private static final String CONSUMER_SECRET = "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg";
-    private static final AppAuthToken APP_TOKEN = new AppAuthToken("type", "access");
-    private static final GuestAuthToken GUEST_TOKEN = new GuestAuthToken("type", "access", "guest");
-    private static final GuestTokenResponse GUEST_RESPONSE = new GuestTokenResponse("guest");
-
-    private final TwitterAuthConfig authConfig;
-    private final TwitterCore twitterCore;
-    private final OAuth2Service service;
-
-    public OAuth2ServiceTest() {
-        authConfig = new TwitterAuthConfig(CONSUMER_KEY, CONSUMER_SECRET);
-        twitterCore = new TwitterCore(authConfig);
-        service = new OAuth2Service(twitterCore, null , new TwitterApi());
+    static final String CONSUMER_KEY = "xvz1evFS4wEEPTGEFPHBog";
+    static final String CONSUMER_SECRET = "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg";
+    static final TwitterAuthConfig AUTH_CONFIG = new TwitterAuthConfig(CONSUMER_KEY, CONSUMER_SECRET);
+    static final String EXPECTED_BASIC_AUTH = "Basic eHZ6MWV2RlM0d0VFUFRHRUZQSEJvZzpMOHFxOVBaeVJnNmllS0dFS2hab2xHQzB2SldMdzhpRUo4OERSZHlPZw==";
+    static final OAuth2Token APP_TOKEN = new OAuth2Token("type", "access");
+    static final GuestAuthToken GUEST_TOKEN = new GuestAuthToken("type", "access", "guest");
+    static final GuestTokenResponse GUEST_RESPONSE = new GuestTokenResponse("guest");
+
+    private TwitterCore twitterCore;
+    private SSLSocketFactory sslSocketFactory;
+    private TwitterApi twitterApi;
+    private OAuth2Service service;
+
+    @Before
+    public void setUp() {
+        twitterCore = mock(TwitterCore.class);
+        when(twitterCore.getAuthConfig()).thenReturn(AUTH_CONFIG);
+
+        sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
+        twitterApi = new TwitterApi();
+        service = new OAuth2Service(twitterCore, sslSocketFactory, twitterApi);
     }
 
-    private class MockOAuth2Api implements OAuth2Service.OAuth2Api {
+    public class MockOAuth2Api implements OAuth2Service.OAuth2Api {
 
         @Override
-        public void getGuestToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                @Body String dummy, Callback<GuestTokenResponse> cb) {
-            // Does nothing
+        public Call<GuestTokenResponse> getGuestToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
+            return Calls.response(Response.success(GUEST_RESPONSE));
         }
 
         @Override
-        public void getAppAuthToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType,
-                Callback<AppAuthToken> cb) {
-            // Does nothing
+        public Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
+                                                 @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType) {
+            return Calls.response(Response.success(APP_TOKEN));
+        }
+    }
+
+    @Test
+    public void testConstructor_withNullSSLSocketFactory() {
+        try {
+            new OAuth2Service(twitterCore, null, twitterApi);
+            fail("Expected IllegalArgumentException");
+        } catch (IllegalArgumentException e) {
+            assertEquals("sslSocketFactory must not be null", e.getMessage());
         }
     }
 
     @Test
     public void testGetGuestToken_url() throws NoSuchMethodException {
         final Method method = OAuth2Service.OAuth2Api.class
-                .getDeclaredMethod("getGuestToken", String.class, String.class, Callback.class);
+                .getDeclaredMethod("getGuestToken", String.class);
         final POST post = method.getAnnotation(POST.class);
         assertEquals("/1.1/guest/activate.json", post.value());
     }
@@ -95,7 +118,7 @@ public void testGetGuestToken_url() throws NoSuchMethodException {
     @Test
     public void testGetAppAuthToken_url() throws NoSuchMethodException {
         final Method method = OAuth2Service.OAuth2Api.class
-                .getDeclaredMethod("getAppAuthToken", String.class, String.class, Callback.class);
+                .getDeclaredMethod("getAppAuthToken", String.class, String.class);
         final POST post = method.getAnnotation(POST.class);
         assertEquals("/oauth2/token", post.value());
     }
@@ -103,7 +126,7 @@ public void testGetAppAuthToken_url() throws NoSuchMethodException {
     @Test
     public void testGetAppAuthToken_contentType() throws NoSuchMethodException {
         final Method method = OAuth2Service.OAuth2Api.class
-                .getDeclaredMethod("getAppAuthToken", String.class, String.class, Callback.class);
+                .getDeclaredMethod("getAppAuthToken", String.class, String.class);
         final Headers header = method.getAnnotation(Headers.class);
         assertEquals("Content-Type: application/x-www-form-urlencoded;charset=UTF-8",
                 header.value()[0]);
@@ -111,15 +134,11 @@ public void testGetAppAuthToken_contentType() throws NoSuchMethodException {
 
     @Test
     public void testApiHost() {
-        final TwitterApi api = new TwitterApi();
-        final OAuth2Service service = new OAuth2Service(twitterCore, null, api);
-        assertEquals(api, service.getApi());
+        assertEquals(twitterApi, service.getApi());
     }
 
     @Test
     public void testGetUserAgent() {
-        final TwitterApi api = new TwitterApi();
-        final OAuth2Service service = new OAuth2Service(twitterCore, null, api);
         final String userAgent
                 = TwitterApi.buildUserAgent("TwitterAndroidSDK", twitterCore.getVersion());
         assertEquals(userAgent, service.getUserAgent());
@@ -127,18 +146,11 @@ public void testGetUserAgent() {
 
     @Test
     public void testRequestAppAuthToken() {
-        service.api = new MockOAuth2Api() {
-            @Override
-            public void getAppAuthToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                                        @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType,
-                                        Callback<AppAuthToken> cb) {
-                assertEquals("Basic eHZ6MWV2RlM0d0VFUFRHRUZQSEJvZzpMOHFxOVBaeVJnNmllS0dFS2hab2xH" +
-                                "QzB2SldMdzhpRUo4OERSZHlPZw==",
-                        auth);
-                assertEquals(OAuthConstants.GRANT_TYPE_CLIENT_CREDENTIALS, grantType);
-            }
-        };
-        service.requestAppAuthToken(null);
+        service.api = spy(new MockOAuth2Api());
+        service.requestAppAuthToken(mock(Callback.class));
+
+        verify(service.api).getAppAuthToken(EXPECTED_BASIC_AUTH,
+                OAuthConstants.GRANT_TYPE_CLIENT_CREDENTIALS);
     }
 
     @Test
@@ -147,38 +159,19 @@ public void testRequestGuestToken() {
         final String bearerAuth = OAuthConstants.AUTHORIZATION_BEARER + " "
                 + token.getAccessToken();
 
-        service.api = new MockOAuth2Api() {
-            @Override
-            public void getGuestToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                    @Body String dummy, Callback<GuestTokenResponse> cb) {
-                assertEquals(bearerAuth, auth);
-            }
-        };
+        service.api = spy(new MockOAuth2Api());
+        service.requestGuestToken(mock(Callback.class), token);
 
-        service.requestGuestToken(null, token);
+        verify(service.api).getGuestToken(bearerAuth);
     }
 
     @Test
     public void testRequestGuestAuthToken_guestAuthSuccess() {
 
-        service.api = new MockOAuth2Api() {
+        service.api = new MockOAuth2Api();
+        service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
             @Override
-            public void getGuestToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                    @Body String dummy, Callback<GuestTokenResponse> cb) {
-                cb.success(new Result<>(GUEST_RESPONSE, null));
-            }
-
-            @Override
-            public void getAppAuthToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                                        @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType,
-                                        Callback<AppAuthToken> cb) {
-                cb.success(new Result<>(APP_TOKEN, null));
-            }
-        };
-
-        service.requestGuestAuthToken(new Callback<OAuth2Token>() {
-            @Override
-            public void success(Result<OAuth2Token> result) {
+            public void success(Result<GuestAuthToken> result) {
                 assertEquals(GUEST_TOKEN, result.data);
             }
 
@@ -194,22 +187,14 @@ public void testRequestGuestAuthToken_guestFailure() {
 
         service.api = new MockOAuth2Api() {
             @Override
-            public void getGuestToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                    @Body String dummy, Callback<GuestTokenResponse> cb) {
-                cb.failure(mock(TwitterException.class));
-            }
-
-            @Override
-            public void getAppAuthToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                                        @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType,
-                                        Callback<AppAuthToken> cb) {
-                cb.success(new Result<>(APP_TOKEN, null));
+            public Call<GuestTokenResponse> getGuestToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth) {
+                return Calls.failure(null);
             }
         };
 
-        service.requestGuestAuthToken(new Callback<OAuth2Token>() {
+        service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
             @Override
-            public void success(Result<OAuth2Token> result) {
+            public void success(Result<GuestAuthToken> result) {
                 fail();
             }
 
@@ -225,24 +210,15 @@ public void testRequestGuestAuthToken_appAuthFailure() {
 
         service.api = new MockOAuth2Api() {
             @Override
-            public void getGuestToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                    @Body String dummy, Callback<GuestTokenResponse> cb) {
-                // We should never get here, since app auth failure would prevent us from making the
-                // guest token request.
-                fail();
-            }
-
-            @Override
-            public void getAppAuthToken(@Header(AuthHeaders.HEADER_AUTHORIZATION) String auth,
-                    @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType,
-                    Callback<AppAuthToken> cb) {
-                cb.failure(mock(TwitterException.class));
+            public Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
+                    @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType) {
+                return Calls.failure(null);
             }
         };
 
-        service.requestGuestAuthToken(new Callback<OAuth2Token>() {
+        service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
             @Override
-            public void success(Result<OAuth2Token> result) {
+            public void success(Result<GuestAuthToken> result) {
                 fail();
             }
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java
index be5c88c7..27f45a80 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2TokenTest.java
@@ -26,8 +26,6 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
-import java.util.Map;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 
@@ -35,7 +33,6 @@
 @Config(constants = BuildConfig.class, sdk = 21)
 public class OAuth2TokenTest  {
 
-    private static final int HEADERS_COUNT = 1;
     private static final String TOKEN_TYPE = "tokenType";
     private static final String ACCESS_TOKEN = "accessToken";
 
@@ -50,15 +47,6 @@ public void testParcelable() {
         assertEquals(authToken, parceledAuthToken);
     }
 
-    @Test
-    public void testGetAuthHeaders() {
-        final OAuth2Token token = new OAuth2Token(TOKEN_TYPE, ACCESS_TOKEN);
-        final Map<String, String> headers = token.getAuthHeaders(null, null, null, null);
-        assertEquals(HEADERS_COUNT, headers.size());
-        assertEquals(OAuth2Service.getAuthorizationHeader(token),
-                headers.get(GuestAuthToken.HEADER_AUTHORIZATION));
-    }
-
     @Test
     public void testIsExpired() {
         final OAuth2Token token = new OAuth2Token(TOKEN_TYPE, ACCESS_TOKEN);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeClientTest.java
index 73054692..0acf33eb 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeClientTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeClientTest.java
@@ -24,6 +24,9 @@
 import io.fabric.sdk.android.services.events.EventsStrategy;
 
 import com.twitter.sdk.android.core.BuildConfig;
+import com.twitter.sdk.android.core.GuestSession;
+import com.twitter.sdk.android.core.GuestSessionProvider;
+import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 
 import org.junit.Before;
@@ -34,7 +37,6 @@
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;
-import java.util.List;
 import java.util.concurrent.ScheduledExecutorService;
 
 import javax.net.ssl.SSLSocketFactory;
@@ -64,8 +66,9 @@ public void setUp() throws Exception {
 
         scribeClient = new ScribeClient(kitStub, mock(ScheduledExecutorService.class),
                 mock(ScribeConfig.class), mock(ScribeEvent.Transform.class),
-                mock(TwitterAuthConfig.class), mock(List.class),
-                mock(SSLSocketFactory.class), mock(IdManager.class));
+                mock(TwitterAuthConfig.class), mock(SessionManager.class),
+                mock(GuestSessionProvider.class), mock(SSLSocketFactory.class),
+                mock(IdManager.class));
     }
 
     @Test
@@ -73,8 +76,8 @@ public void testScribe() {
         final ScribeHandler mockHandler = mock(ScribeHandler.class);
         final ScribeEvent mockScribeEvent = mock(ScribeEvent.class);
 
-        scribeClient.scribeHandlers.put(ScribeConstants.LOGGED_OUT_USER_ID, mockHandler);
-        scribeClient.scribe(mockScribeEvent, ScribeConstants.LOGGED_OUT_USER_ID);
+        scribeClient.scribeHandlers.put(GuestSession.LOGGED_OUT_USER_ID, mockHandler);
+        scribeClient.scribe(mockScribeEvent, GuestSession.LOGGED_OUT_USER_ID);
 
         verify(mockHandler).scribe(mockScribeEvent);
     }
@@ -84,8 +87,8 @@ public void testScribeAndFlush() {
         final ScribeHandler mockHandler = mock(ScribeHandler.class);
         final ScribeEvent mockScribeEvent = mock(ScribeEvent.class);
 
-        scribeClient.scribeHandlers.put(ScribeConstants.LOGGED_OUT_USER_ID, mockHandler);
-        scribeClient.scribeAndFlush(mockScribeEvent, ScribeConstants.LOGGED_OUT_USER_ID);
+        scribeClient.scribeHandlers.put(GuestSession.LOGGED_OUT_USER_ID, mockHandler);
+        scribeClient.scribeAndFlush(mockScribeEvent, GuestSession.LOGGED_OUT_USER_ID);
 
         verify(mockHandler).scribeAndFlush(mockScribeEvent);
     }
@@ -93,12 +96,12 @@ public void testScribeAndFlush() {
     @Test
     public void testGetScribeHandler() throws IOException {
         final ScribeHandler loggedOutScribeHandler
-                = scribeClient.getScribeHandler(ScribeConstants.LOGGED_OUT_USER_ID);
+                = scribeClient.getScribeHandler(GuestSession.LOGGED_OUT_USER_ID);
         assertNotNull(loggedOutScribeHandler);
         // Verify that asking for a scribe handler for the same owner id results in the same one
         // being returned.
         assertEquals(loggedOutScribeHandler,
-                scribeClient.getScribeHandler(ScribeConstants.LOGGED_OUT_USER_ID));
+                scribeClient.getScribeHandler(GuestSession.LOGGED_OUT_USER_ID));
 
         // Verify that different scribe handlers are returned for the different user ids.
         final ScribeHandler testUserScribeHandler
@@ -114,10 +117,11 @@ public void testGetScribeStrategy_scribeEnabled() {
                 ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS);
         scribeClient = new ScribeClient(mock(Kit.class), mock(ScheduledExecutorService.class),
                 config, mock(ScribeEvent.Transform.class), mock(TwitterAuthConfig.class),
-                mock(List.class), mock(SSLSocketFactory.class), mock(IdManager.class));
+                mock(SessionManager.class), mock(GuestSessionProvider.class),
+                mock(SSLSocketFactory.class), mock(IdManager.class));
 
         final EventsStrategy<ScribeEvent> scribeStrategy
-                = scribeClient.getScribeStrategy(ScribeConstants.LOGGED_OUT_USER_ID, null);
+                = scribeClient.getScribeStrategy(GuestSession.LOGGED_OUT_USER_ID, null);
         assertTrue(scribeStrategy instanceof EnabledScribeStrategy);
     }
 
@@ -128,17 +132,18 @@ public void testGetScribeStrategy_scribeDisabled() {
                 ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS);
         scribeClient = new ScribeClient(mock(Kit.class), mock(ScheduledExecutorService.class),
                 config, mock(ScribeEvent.Transform.class), mock(TwitterAuthConfig.class),
-                mock(List.class), mock(SSLSocketFactory.class), mock(IdManager.class));
+                mock(SessionManager.class), mock(GuestSessionProvider.class),
+                mock(SSLSocketFactory.class), mock(IdManager.class));
 
         final EventsStrategy<ScribeEvent> scribeStrategy
-                = scribeClient.getScribeStrategy(ScribeConstants.LOGGED_OUT_USER_ID, null);
+                = scribeClient.getScribeStrategy(GuestSession.LOGGED_OUT_USER_ID, null);
         assertTrue(scribeStrategy instanceof DisabledEventsStrategy);
     }
 
     @Test
     public void testGetWorkingFileNameForOwner() {
-        assertTrue(scribeClient.getWorkingFileNameForOwner(ScribeConstants.LOGGED_OUT_USER_ID)
-                .startsWith(Long.toString(ScribeConstants.LOGGED_OUT_USER_ID)));
+        assertTrue(scribeClient.getWorkingFileNameForOwner(GuestSession.LOGGED_OUT_USER_ID)
+                .startsWith(Long.toString(GuestSession.LOGGED_OUT_USER_ID)));
 
         assertTrue(scribeClient.getWorkingFileNameForOwner(TEST_USER_ID)
                 .startsWith(Long.toString(TEST_USER_ID)));
@@ -146,8 +151,8 @@ public void testGetWorkingFileNameForOwner() {
 
     @Test
     public void testGetStorageDirForOwner() {
-        assertTrue(scribeClient.getStorageDirForOwner(ScribeConstants.LOGGED_OUT_USER_ID)
-                .startsWith(Long.toString(ScribeConstants.LOGGED_OUT_USER_ID)));
+        assertTrue(scribeClient.getStorageDirForOwner(GuestSession.LOGGED_OUT_USER_ID)
+                .startsWith(Long.toString(GuestSession.LOGGED_OUT_USER_ID)));
 
         assertTrue(scribeClient.getStorageDirForOwner(TEST_USER_ID)
                 .startsWith(Long.toString(TEST_USER_ID)));
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
index 3bae8244..15f35e7f 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
@@ -24,6 +24,8 @@
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.annotation.Config;
 
+import java.util.Collections;
+
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricGradleTestRunner.class)
@@ -63,4 +65,14 @@ public void testNewScribeEvent_otherEvent() {
                 ANY_LANGUAGE, ANY_ADVERTISING_ID);
         assertEquals(SyndicatedSdkImpressionEvent.class, event.getClass());
     }
+
+    @Test
+    public void testNewScribeEvent_withEventInfo() {
+        final EventNamespace ns
+                = new EventNamespace.Builder().setClient(OTHER_CLIENT_NAME).builder();
+        final String eventInfo = "any info";
+        final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, eventInfo, ANY_TIMESTAMP,
+                ANY_LANGUAGE, ANY_ADVERTISING_ID, Collections.<ScribeItem>emptyList());
+        assertEquals(SyndicatedSdkImpressionEvent.class, event.getClass());
+    }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
index f5f45773..3156b2d6 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
@@ -22,12 +22,23 @@
 import io.fabric.sdk.android.services.common.CommonUtils;
 import io.fabric.sdk.android.services.common.IdManager;
 
+import okhttp3.Interceptor;
+import okhttp3.MediaType;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.mock.Calls;
+
 import com.twitter.sdk.android.core.BuildConfig;
-import com.twitter.sdk.android.core.Session;
+import com.twitter.sdk.android.core.GuestSession;
+import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterAuthToken;
+import com.twitter.sdk.android.core.TwitterSession;
 
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -36,6 +47,9 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
@@ -52,12 +66,6 @@
 
 import javax.net.ssl.SSLSocketFactory;
 
-import retrofit.RequestInterceptor;
-import retrofit.RestAdapter;
-import retrofit.RetrofitError;
-import retrofit.client.Header;
-import retrofit.client.Response;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -82,10 +90,9 @@
     private static final String TWITTER_POLLING_HEADER = "X-Twitter-Polling";
     private static final String REQUIRED_TWITTER_POLLING_HEADER_VALUE = "true";
 
-    private List<SessionManager<? extends Session>> sessionManagers;
-    private SessionManager<Session> mockSessionMgr;
-    private Session mockSession;
-    private RestAdapter mockAdapter;
+    private SessionManager<TwitterSession> mockSessionMgr;
+    private GuestSessionProvider mockGuestSessionProvider;
+    private TwitterSession mockSession;
     private ScribeFilesSender.ScribeService mockService;
     private IdManager mockIdManager;
     private Context context;
@@ -102,25 +109,23 @@ public void setUp() throws Exception {
 
         context = RuntimeEnvironment.application;
         mockSessionMgr = mock(SessionManager.class);
-        mockSession = mock(Session.class);
+        mockGuestSessionProvider = mock(GuestSessionProvider.class);
+        mockSession = mock(TwitterSession.class);
         when(mockSessionMgr.getSession(anyLong())).thenReturn(mockSession);
         when(mockSession.getAuthToken()).thenReturn(mock(TwitterAuthToken.class));
 
-        mockAdapter = mock(RestAdapter.class);
         mockService = mock(ScribeFilesSender.ScribeService.class);
-        when(mockAdapter.create(ScribeFilesSender.ScribeService.class)).thenReturn(mockService);
 
         mockIdManager = mock(IdManager.class);
 
         final ScribeConfig scribeConfig = new ScribeConfig(true, ANY_URL, ANY_SCRIBE_PATH_VERSION,
                 ANY_SCRIBE_PATH_TYPE, null, ANY_USER_AGENT, ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP,
                 ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS);
-        sessionManagers = new ArrayList<>();
-        sessionManagers.add(mockSessionMgr);
         filesSender = new ScribeFilesSender(context, scribeConfig,
-                ScribeConstants.LOGGED_OUT_USER_ID, mock(TwitterAuthConfig.class), sessionManagers,
-                mock(SSLSocketFactory.class), mock(ExecutorService.class), mockIdManager);
-        filesSender.setApiAdapter(mockAdapter);
+                GuestSession.LOGGED_OUT_USER_ID, mock(TwitterAuthConfig.class), mockSessionMgr,
+                mockGuestSessionProvider, (SSLSocketFactory) SSLSocketFactory.getDefault(),
+                mock(ExecutorService.class), mockIdManager);
+        filesSender.setScribeService(mockService);
 
         filenames = new String[] {
                 "se_c9666213-d768-45a1-a3ca-5941e4c35f26_1404423214376.tap",
@@ -156,16 +161,11 @@ public void tearDown() throws Exception {
         }
     }
 
-    private void setUpMockServiceResponse(Response response) {
-        when(mockService.upload(anyString(), anyString(), anyString())).thenReturn(response);
-        when(mockService.uploadSequence(anyString(), anyString())).thenReturn(response);
-    }
-
-    private void setUpMockServiceErrorResponse(Response response) {
-        final RetrofitError error = mock(RetrofitError.class);
-        when(error.getResponse()).thenReturn(response);
-
-        when(mockService.upload(anyString(), anyString(), anyString())).thenThrow(error);
+    private void setUpMockServiceResponse(Call<ResponseBody> response) {
+        when(mockService.upload(anyString(), anyString(), anyString()))
+                .thenReturn(response);
+        when(mockService.uploadSequence(anyString(), anyString()))
+                .thenReturn(response);
     }
 
     private void setUpScribeSequence(String sequence) {
@@ -174,13 +174,20 @@ private void setUpScribeSequence(String sequence) {
                 ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS);
 
         filesSender = new ScribeFilesSender(context, config,
-                ScribeConstants.LOGGED_OUT_USER_ID, mock(TwitterAuthConfig.class), sessionManagers,
-                mock(SSLSocketFactory.class), mock(ExecutorService.class), mock(IdManager.class));
-        filesSender.setApiAdapter(mockAdapter);
+                GuestSession.LOGGED_OUT_USER_ID, mock(TwitterAuthConfig.class), mockSessionMgr,
+                mockGuestSessionProvider, mock(SSLSocketFactory.class), mock(ExecutorService.class),
+                mock(IdManager.class));
+        filesSender.setScribeService(mockService);
     }
 
-    private Response newResponse(int statusCode) {
-        return new Response(ANY_URL, statusCode, ANY_REASON, new ArrayList<Header>(), null);
+    private Call<ResponseBody> successResponse() {
+        final ResponseBody body = ResponseBody.create(MediaType.parse("application/json"), "");
+        return Calls.response(body);
+    }
+
+    private Call<ResponseBody> errorResponse(int statusCode) {
+        final ResponseBody body = ResponseBody.create(MediaType.parse("application/json"), "");
+        return Calls.response(Response.<ResponseBody>error(statusCode, body));
     }
 
     // tests follow
@@ -195,37 +202,39 @@ public void testGetScribeEventsAsJsonArrayString() throws IOException, JSONExcep
     }
 
     @Test
-    public void testGetApiAdapter_nullSession() {
-        filesSender.setApiAdapter(null); // set api adapter to null since we pre-set it in setUp
+    public void testGetApiAdapter_nullUserSession() {
+        filesSender.setScribeService(null); // set api adapter to null since we pre-set it in setUp
         when(mockSessionMgr.getSession(anyLong())).thenReturn(null);
-        assertNull(filesSender.getApiAdapter());
+        assertNotNull(filesSender.getScribeService());
     }
 
     @Test
     public void testGetApiAdapter_validSession() {
         when(mockSessionMgr.getSession(anyLong())).thenReturn(mockSession);
-        assertNotNull(filesSender.getApiAdapter());
+        assertNotNull(filesSender.getScribeService());
     }
 
     @Test
     public void testGetApiAdapter_multipleCalls() {
         when(mockSessionMgr.getSession(anyLong())).thenReturn(mockSession);
-        final RestAdapter apiAdapter = filesSender.getApiAdapter();
-        assertEquals(apiAdapter, filesSender.getApiAdapter());
+        final ScribeFilesSender.ScribeService service = filesSender.getScribeService();
+        assertEquals(service, filesSender.getScribeService());
     }
 
     @Test
-    public void testUpload_noSequence() {
+    public void testUpload_noSequence() throws IOException{
         final String logs = TEST_LOGS;
+        setUpMockServiceResponse(successResponse());
         setUpScribeSequence(null);
         filesSender.upload(logs);
         verify(mockService).upload(ANY_SCRIBE_PATH_VERSION, ANY_SCRIBE_PATH_TYPE, logs);
     }
 
     @Test
-    public void testUpload_withSequence() {
+    public void testUpload_withSequence() throws IOException {
         final String sequence = "1";
         final String logs = TEST_LOGS;
+        setUpMockServiceResponse(successResponse());
         setUpScribeSequence(sequence);
         filesSender.upload(logs);
         verify(mockService).uploadSequence(sequence, logs);
@@ -234,96 +243,113 @@ public void testUpload_withSequence() {
     @Test
     public void testSend_nullSession() {
         // Send should fail when we don't have a valid session.
-        filesSender.setApiAdapter(null); // set api adapter to null since we pre-set it in setUp
+        filesSender.setScribeService(null); // set api adapter to null since we pre-set it in setUp
         when(mockSessionMgr.getSession(anyLong())).thenReturn(null);
         assertFalse(filesSender.send(tempFiles));
-        verifyZeroInteractions(mockAdapter);
+        verifyZeroInteractions(mockService);
     }
 
     @Test
     public void testSend_uploadSucceeds() {
-        setUpMockServiceResponse(newResponse(HttpURLConnection.HTTP_OK));
+        setUpMockServiceResponse(successResponse());
         assertTrue(filesSender.send(tempFiles));
     }
 
     @Test
     public void testSend_uploadFailsInternalServerError() {
-        setUpMockServiceErrorResponse(newResponse(HttpURLConnection.HTTP_INTERNAL_ERROR));
+        setUpMockServiceResponse(errorResponse(HttpURLConnection.HTTP_INTERNAL_ERROR));
         assertTrue(filesSender.send(tempFiles));
         verify(mockService, times(1)).upload(anyString(), anyString(), anyString());
     }
 
     @Test
     public void testSend_uploadFailsBadRequest() {
-        setUpMockServiceErrorResponse(newResponse(HttpURLConnection.HTTP_BAD_REQUEST));
+        setUpMockServiceResponse(errorResponse(HttpURLConnection.HTTP_BAD_REQUEST));
         assertTrue(filesSender.send(tempFiles));
         verify(mockService, times(1)).upload(anyString(), anyString(), anyString());
     }
 
     @Test
     public void testSend_uploadFailsForbidden() {
-        setUpMockServiceErrorResponse(newResponse(HttpURLConnection.HTTP_FORBIDDEN));
+        setUpMockServiceResponse(errorResponse(HttpURLConnection.HTTP_FORBIDDEN));
         assertFalse(filesSender.send(tempFiles));
     }
 
+    public Interceptor.Chain createMockChain() throws IOException{
+        final Request request = new Request.Builder().url("https://dummy.com").build();
+        final Interceptor.Chain chain  = mock(Interceptor.Chain.class);
+        when(chain.request()).thenReturn(request);
+        when(chain.proceed(any(Request.class))).thenAnswer(new Answer<okhttp3.Response>() {
+            @Override
+            public okhttp3.Response answer(InvocationOnMock invocation) throws Throwable {
+                final Object[] args = invocation.getArguments();
+                return new okhttp3.Response.Builder()
+                        .protocol(Protocol.HTTP_1_1)
+                        .code(HttpURLConnection.HTTP_OK)
+                        .request((Request) args[0])
+                        .build();
+            }
+        });
+        return chain;
+    }
+
     @Test
-    public void testConfigRequestInterceptor_addsPollingHeader() {
+    public void testConfigRequestInterceptor_addsPollingHeader() throws IOException {
         final ScribeConfig config = mock(ScribeConfig.class);
-        final RequestInterceptor.RequestFacade facade
-                = mock(RequestInterceptor.RequestFacade.class);
-        final RequestInterceptor interceptor
+        final Interceptor interceptor
                 = new ScribeFilesSender.ConfigRequestInterceptor(config, mockIdManager);
-        interceptor.intercept(facade);
-        verify(facade, times(1)).addHeader(TWITTER_POLLING_HEADER,
-                REQUIRED_TWITTER_POLLING_HEADER_VALUE);
+
+        final Request request = interceptor.intercept(createMockChain()).request();
+
+        assertEquals(REQUIRED_TWITTER_POLLING_HEADER_VALUE, request.header(TWITTER_POLLING_HEADER));
     }
 
     @Test
-    public void testConfigRequestInterceptor_nullUserAgent() {
+    public void testConfigRequestInterceptor_nullUserAgent() throws IOException {
         final ScribeConfig config = new ScribeConfig(true, ScribeConfig.BASE_URL,
                 ANY_SCRIBE_PATH_VERSION, ANY_SCRIBE_PATH_TYPE, null, null,
                 ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS);
-        final RequestInterceptor.RequestFacade facade
-                = mock(RequestInterceptor.RequestFacade.class);
-        final RequestInterceptor interceptor
+        final Interceptor interceptor
                 = new ScribeFilesSender.ConfigRequestInterceptor(config, mockIdManager);
-        interceptor.intercept(facade);
-        verify(facade, times(0)).addHeader(eq(USER_AGENT_HEADER), anyString());
+
+        final Request request = interceptor.intercept(createMockChain()).request();
+
+        assertNull(request.header(USER_AGENT_HEADER));
     }
 
     @Test
-    public void testConfigRequestInterceptor_anUserAgent() {
+    public void testConfigRequestInterceptor_anUserAgent() throws IOException {
         final ScribeConfig config = new ScribeConfig(true, ScribeConfig.BASE_URL,
                 ANY_SCRIBE_PATH_VERSION, ANY_SCRIBE_PATH_TYPE, null, ANY_USER_AGENT,
                 ScribeConfig.DEFAULT_MAX_FILES_TO_KEEP, ScribeConfig.DEFAULT_SEND_INTERVAL_SECONDS);
-        final RequestInterceptor.RequestFacade facade
-                = mock(RequestInterceptor.RequestFacade.class);
-        final RequestInterceptor interceptor
+        final Interceptor interceptor
                 = new ScribeFilesSender.ConfigRequestInterceptor(config, mockIdManager);
-        interceptor.intercept(facade);
-        verify(facade, times(1)).addHeader(USER_AGENT_HEADER, ANY_USER_AGENT);
+
+        final Request request = interceptor.intercept(createMockChain()).request();
+
+        assertEquals(ANY_USER_AGENT, request.header(USER_AGENT_HEADER));
     }
 
     @Test
-    public void testConfigRequestInterceptor_nullIdManager() {
+    public void testConfigRequestInterceptor_nullIdManager() throws IOException {
         final ScribeConfig config = mock(ScribeConfig.class);
-        final RequestInterceptor.RequestFacade facade
-                = mock(RequestInterceptor.RequestFacade.class);
-        final RequestInterceptor interceptor
+        final Interceptor interceptor
                 = new ScribeFilesSender.ConfigRequestInterceptor(config, mockIdManager);
-        interceptor.intercept(facade);
-        verify(facade, times(0)).addHeader(eq(DEVICE_ID_HEADER) , anyString());
+
+        final Request request = interceptor.intercept(createMockChain()).request();
+
+        assertNull(request.header(DEVICE_ID_HEADER));
     }
 
     @Test
-    public void testConfigRequestInterceptor_anIdManager() {
+    public void testConfigRequestInterceptor_anIdManager() throws IOException {
         final ScribeConfig config = mock(ScribeConfig.class);
-        final RequestInterceptor.RequestFacade facade
-                = mock(RequestInterceptor.RequestFacade.class);
-        when(mockIdManager.getDeviceUUID()).thenReturn(ANY_DEVICE_ID);
-        final RequestInterceptor interceptor
+        final Interceptor interceptor
                 = new ScribeFilesSender.ConfigRequestInterceptor(config, mockIdManager);
-        interceptor.intercept(facade);
-        verify(facade, times(1)).addHeader(DEVICE_ID_HEADER, ANY_DEVICE_ID);
+        when(mockIdManager.getDeviceUUID()).thenReturn(ANY_DEVICE_ID);
+
+        final Request request = interceptor.intercept(createMockChain()).request();
+
+        assertEquals(ANY_DEVICE_ID, request.header(DEVICE_ID_HEADER));
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeItemTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeItemTest.java
index aae00824..d19186a5 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeItemTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeItemTest.java
@@ -18,6 +18,9 @@
 package com.twitter.sdk.android.core.internal.scribe;
 
 import com.twitter.sdk.android.core.BuildConfig;
+import com.twitter.sdk.android.core.TestFixtures;
+import com.twitter.sdk.android.core.models.Card;
+import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
 import com.twitter.sdk.android.core.models.User;
@@ -29,16 +32,24 @@
 import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
 public class ScribeItemTest {
     static final long TEST_ID = 123;
+    static final long TEST_MEDIA_ID = 586671909L;
     static final String TEST_MESSAGE = "test message";
     static final ScribeItem.CardEvent TEST_CARD_EVENT = new ScribeItem.CardEvent(1);
     static final ScribeItem.MediaDetails TEST_MEDIA_DETAILS = new ScribeItem.MediaDetails(1, 2, 3);
 
+    static final String TEST_TYPE_ANIMATED_GIF = "animated_gif";
+    static final String TEST_TYPE_CONSUMER = "video";
+    static final int TEST_TYPE_CONSUMER_ID = 1;
+    static final int TEST_TYPE_ANIMATED_GIF_ID = 3;
+    static final int TEST_TYPE_VINE_ID = 4;
+
     @Test
     public void testFromTweet() {
         final Tweet tweet = new TweetBuilder().setId(TEST_ID).build();
@@ -59,6 +70,37 @@ public void testFromUser() {
         assertNull(item.description);
     }
 
+    @Test
+    public void testFromMediaEntity_withAnimatedGif() {
+        final MediaEntity animatedGif = createTestEntity(TEST_TYPE_ANIMATED_GIF);
+        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TEST_ID, animatedGif);
+
+        assertEquals(Long.valueOf(TEST_ID), scribeItem.id);
+        assertEquals(Integer.valueOf(ScribeItem.TYPE_TWEET), scribeItem.itemType);
+        assertMediaDetails(scribeItem.mediaDetails, TEST_TYPE_ANIMATED_GIF_ID);
+    }
+
+    @Test
+    public void testFromMediaEntity_withConsumerVideo() {
+        final MediaEntity videoEntity = createTestEntity(TEST_TYPE_CONSUMER);
+        final ScribeItem scribeItem = ScribeItem.fromMediaEntity(TEST_ID, videoEntity);
+
+        assertEquals(Long.valueOf(TEST_ID), scribeItem.id);
+        assertEquals(Integer.valueOf(ScribeItem.TYPE_TWEET), scribeItem.itemType);
+        assertMediaDetails(scribeItem.mediaDetails, TEST_TYPE_CONSUMER_ID);
+    }
+
+    @Test
+    public void testFromTweetCard() {
+        final long tweetId = TEST_ID;
+        final Card vineCard = TestFixtures.sampleValidVineCard();
+        final ScribeItem scribeItem = ScribeItem.fromTweetCard(tweetId, vineCard);
+
+        assertEquals(Long.valueOf(TEST_ID), scribeItem.id);
+        assertEquals(Integer.valueOf(ScribeItem.TYPE_TWEET), scribeItem.itemType);
+        assertMediaDetails(scribeItem.mediaDetails, TEST_TYPE_VINE_ID);
+    }
+
     @Test
     public void testFromMessage() {
         final ScribeItem item = ScribeItem.fromMessage(TEST_MESSAGE);
@@ -95,4 +137,17 @@ public void testBuilder_empty() {
         assertNull(item.cardEvent);
         assertNull(item.mediaDetails);
     }
+
+
+    static void assertMediaDetails(ScribeItem.MediaDetails mediaDetails, int type) {
+        assertNotNull(mediaDetails);
+        assertEquals(TEST_ID, mediaDetails.contentId);
+        assertEquals(type, mediaDetails.mediaType);
+        assertEquals(TEST_MEDIA_ID, mediaDetails.publisherId);
+    }
+
+    private MediaEntity createTestEntity(String type) {
+        return new MediaEntity(null, null, null, 0, 0, TEST_MEDIA_ID, null, null, null, null, 0,
+                null, type, null, "");
+    }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
new file mode 100644
index 00000000..c7e63928
--- /dev/null
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
@@ -0,0 +1,143 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.stream.JsonReader;
+import com.twitter.sdk.android.core.TestResources;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+
+import java.io.InputStreamReader;
+
+import static org.junit.Assert.*;
+
+public class BindingValuesAdapterTest {
+    Gson gson;
+
+    @Rule
+    public final TestResources testResources = new TestResources();
+
+    @Before
+    public void setUp() {
+        gson = new GsonBuilder()
+                .registerTypeAdapter(BindingValues.class, new BindingValuesAdapter())
+                .create();
+    }
+
+    @Test
+    public void testDeserialize_withValidBindingValues() {
+        final JsonReader reader = new JsonReader(new InputStreamReader(testResources
+                .getAsStream("model_card.json")));
+        final Card card = gson.fromJson(reader, Card.class);
+
+        assertNotNull(card.bindingValues);
+        assertTrue(card.bindingValues.containsKey("app_id"));
+        assertEquals("co.vine.android", card.bindingValues.get("app_id"));
+        assertTrue(card.bindingValues.containsKey("app_is_free"));
+        assertEquals("true", card.bindingValues.get("app_is_free"));
+        assertTrue(card.bindingValues.containsKey("app_name"));
+        assertEquals("Vine - video entertainment", card.bindingValues.get("app_name"));
+        assertTrue(card.bindingValues.containsKey("app_num_ratings"));
+        assertEquals("1,080,460", card.bindingValues.get("app_num_ratings"));
+        assertTrue(card.bindingValues.containsKey("app_price_amount"));
+        assertEquals("0.0", card.bindingValues.get("app_price_amount"));
+        assertTrue(card.bindingValues.containsKey("app_price_currency"));
+        assertEquals("USD", card.bindingValues.get("app_price_currency"));
+        assertTrue(card.bindingValues.containsKey("app_star_rating"));
+        assertEquals("4.2", card.bindingValues.get("app_star_rating"));
+        assertTrue(card.bindingValues.containsKey("app_url"));
+        assertTrue(card.bindingValues.containsKey("app_url_resolved"));
+        assertTrue(card.bindingValues.containsKey("card_url"));
+        assertTrue(card.bindingValues.containsKey("description"));
+        assertEquals("Vine by Krystaalized", card.bindingValues.get("description"));
+        assertTrue(card.bindingValues.containsKey("domain"));
+        assertEquals("vine.co", card.bindingValues.get("domain"));
+        assertTrue(card.bindingValues.containsKey("player_height"));
+        assertEquals("535", card.bindingValues.get("player_height"));
+        assertTrue(card.bindingValues.containsKey("player_image"));
+        final ImageValue imageValue = card.bindingValues.get("player_image");
+        assertNotNull(imageValue);
+        assertEquals(480, imageValue.height);
+        assertEquals(480, imageValue.width);
+        assertEquals("https://o.twimg.com/qwhjddd", imageValue.url);
+        assertTrue(card.bindingValues.containsKey("player_stream_content_type"));
+        assertTrue(card.bindingValues.containsKey("player_stream_url"));
+        assertTrue(card.bindingValues.containsKey("player_url"));
+        assertTrue(card.bindingValues.containsKey("player_width"));
+        assertEquals("535", card.bindingValues.get("player_width"));
+        assertTrue(card.bindingValues.containsKey("site"));
+        assertNotNull(card.bindingValues.get("site"));
+        assertEquals("586671909", ((UserValue) card.bindingValues.get("site")).idStr);
+        assertTrue(card.bindingValues.containsKey("title"));
+        assertTrue(card.bindingValues.containsKey("vanity_url"));
+        assertEquals("vine.co", card.bindingValues.get("vanity_url"));
+        assertFalse(card.bindingValues.containsKey("foo"));
+        assertFalse(card.bindingValues.containsKey(null));
+    }
+
+    @Test
+    public void testDeserialize_withEmptyBindingValues() {
+        final BindingValues bindingValues = gson.fromJson("{}", BindingValues.class);
+
+        assertNotNull(bindingValues);
+    }
+
+    @Test
+    public void testDeserialize_withNoType() {
+        final String testString = "{\"app_id\": {}}";
+        final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
+
+        assertNotNull(bindingValues);
+        assertTrue(bindingValues.containsKey("app_id"));
+        assertNull(bindingValues.get("app_id"));
+    }
+
+    @Test
+    public void testDeserialize_withUnsupportedType() {
+        final String testString = "{\"app_id\": {\"type\": \"FOOBAR\"}}";
+        final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
+
+        assertNotNull(bindingValues);
+        assertTrue(bindingValues.containsKey("app_id"));
+        assertNull(bindingValues.get("app_id"));
+    }
+
+    @Test
+    public void testDeserialize_withNonPrimitiveType() {
+        final String testString = "{\"app_id\": {\"type\": {}}}";
+        final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
+
+        assertNotNull(bindingValues);
+        assertTrue(bindingValues.containsKey("app_id"));
+        assertNull(bindingValues.get("app_id"));
+    }
+
+    @Test
+    public void testDeserialize_withNoValue() {
+        final String testString = "{\"app_id\": {\"type\": \"STRING\"}}";
+        final BindingValues bindingValues = gson.fromJson(testString, BindingValues.class);
+
+        assertNotNull(bindingValues);
+        assertTrue(bindingValues.containsKey("app_id"));
+        assertNull(bindingValues.get("app_id"));
+    }
+}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
index 73304511..ec4481ba 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
@@ -64,6 +64,7 @@
     private static final int TEST_ASPECT_HEIGHT = 9;
     private static final long TEST_DURATION = 30024;
     private static final int TEST_TOTAL_VARIANTS = 2;
+    private static final String TEST_ALT_TEXT = "A Twitter employee";
     private static final String TEST_URL_0 = "https://video.twimg.com/ext_tw_video/606527664086781952/pu/vid/640x360/jdAs88NgP4N3Iqtu.mp4";
     private static final VideoInfo.Variant TEST_VARIANT_0 =
             new VideoInfo.Variant(832000, "video/mp4", TEST_URL_0);
@@ -111,6 +112,7 @@ public void testDeserialization() throws IOException {
             assertEquals(TEST_TOTAL_VARIANTS, entity.videoInfo.variants.size());
             assertVariantEquals(TEST_VARIANT_0, entity.videoInfo.variants.get(0));
             assertVariantEquals(TEST_VARIANT_1, entity.videoInfo.variants.get(1));
+            assertEquals(TEST_ALT_TEXT, entity.altText);
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
new file mode 100644
index 00000000..62ec226c
--- /dev/null
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models;
+
+import com.google.gson.Gson;
+import com.twitter.sdk.android.core.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.io.IOException;
+
+import static org.junit.Assert.assertEquals;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class SymbolEntityTest  {
+
+    private static final String TEST_JSON = "{\"indices\":[32,36],\"text\":\"TWTR\"}";
+    private static final int TEST_INDICES_START = 32;
+    private static final int TEST_INDICES_END = 36;
+    private static final String TEST_TEXT = "TWTR";
+
+    private Gson gson;
+
+    @Before
+    public void setUp() throws Exception {
+        gson = new Gson();
+    }
+
+    @Test
+    public void testDeserialization() throws IOException {
+        final SymbolEntity entity = gson.fromJson(TEST_JSON, SymbolEntity.class);
+        assertEquals(TEST_INDICES_START, entity.getStart());
+        assertEquals(TEST_INDICES_END, entity.getEnd());
+        assertEquals(TEST_TEXT, entity.text);
+    }
+}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
index 217746bc..5b390d25 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
@@ -46,6 +46,7 @@
     private static final int EXPECTED_USER_MENTIONS_SIZE = 1;
     private static final int EXPECTED_MEDIA_SIZE = 1;
     private static final int EXPECTED_HASHTAGS_SIZE = 1;
+    private static final int EXPECTED_SYMBOLS_SIZE = 1;
 
     @Rule
     public final TestResources testResources = new TestResources();
@@ -60,7 +61,7 @@ public void setUp() throws Exception {
     @Test
     public void testConstructor_nullParameters() {
         try {
-            final TweetEntities entities = new TweetEntities(null, null, null, null);
+            final TweetEntities entities = new TweetEntities(null, null, null, null, null);
             assertEquals(Collections.EMPTY_LIST, entities.urls);
             assertEquals(Collections.EMPTY_LIST, entities.userMentions);
             assertEquals(Collections.EMPTY_LIST, entities.media);
@@ -83,6 +84,7 @@ public void testDeserialization() throws IOException {
             assertEquals(EXPECTED_USER_MENTIONS_SIZE, tweetEntities.userMentions.size());
             assertEquals(EXPECTED_MEDIA_SIZE, tweetEntities.media.size());
             assertEquals(EXPECTED_HASHTAGS_SIZE, tweetEntities.hashtags.size());
+            assertEquals(EXPECTED_SYMBOLS_SIZE, tweetEntities.symbols.size());
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
index 7ed55e88..8bd03ca7 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
@@ -34,8 +34,11 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
@@ -44,6 +47,9 @@
     private static final String EXPECTED_CREATED_AT = "Wed Jun 06 20:07:10 +0000 2012";
     private static final long EXPECTED_ID = 210462857140252672L;
     private static final String EXPECTED_TEXT = "Along with our new #Twitterbird, we've also updated our Display Guidelines: https://t.co/Ed4omjYs  ^JC";
+    private static final Integer[] EXPECTED_DISPLAY_TEXT_RANGE = {0, 102};
+    private static final String EXPECTED_WITHHELD_IN_COUNTRIES = "XY";
+    private static final long EXPECTED_QUOTED_STATUS_ID = 745634624466911232L;
 
     @Rule
     public final TestResources testResources = new TestResources();
@@ -66,10 +72,33 @@ public void testDeserialization() throws IOException {
             // verify parsing of the individual objects.
             assertEquals(EXPECTED_CREATED_AT, tweet.createdAt);
             assertNotNull(tweet.entities);
+            assertNotNull(tweet.user);
+            assertTrue(tweet.retweeted);
             assertEquals(EXPECTED_ID, tweet.id);
             assertEquals(EXPECTED_ID, tweet.getId());
+            assertNotNull(tweet.text);
             assertEquals(EXPECTED_TEXT, tweet.text);
-            assertNotNull(tweet.user);
+            assertNotNull(tweet.displayTextRange);
+            assertFalse(tweet.truncated);
+            assertArrayEquals(EXPECTED_DISPLAY_TEXT_RANGE, tweet.displayTextRange.toArray());
+            assertNotNull(tweet.withheldInCountries);
+            assertEquals(1, tweet.withheldInCountries.size());
+            assertEquals(EXPECTED_WITHHELD_IN_COUNTRIES, tweet.withheldInCountries.get(0));
+        } finally {
+            CommonUtils.closeQuietly(reader);
+        }
+    }
+
+    @Test
+    public void testQuotedTweetDeserialization() throws IOException {
+        JsonReader reader = null;
+        try {
+            reader = new JsonReader(new InputStreamReader(testResources
+                .getAsStream("model_quoted_tweet.json")));
+            final Tweet tweet = gson.fromJson(reader, Tweet.class);
+            assertEquals(EXPECTED_QUOTED_STATUS_ID, tweet.quotedStatusId);
+            assertEquals(String.valueOf(EXPECTED_QUOTED_STATUS_ID), tweet.quotedStatusIdStr);
+            assertNotNull(tweet.quotedStatus);
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterCollectionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
similarity index 98%
rename from twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterCollectionTest.java
rename to twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
index 4ebce04a..ba874753 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterCollectionTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
@@ -15,7 +15,7 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal;
+package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
 import com.google.gson.stream.JsonReader;
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
index f0884f3c..19067b5b 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
@@ -48,6 +48,7 @@
     private static final String EXPECTED_PROFILE_IMAGE_URL_HTTPS
             = "https://si0.twimg.com/profile_images/1777569006/image1327396628_normal.png";
     private static final boolean EXPECTED_VERIFIED = false;
+    private static final String EXPECTED_WITHHELD_IN_COUNTRIES = "XY";
 
     @Rule
     public final TestResources testResources = new TestResources();
@@ -77,6 +78,9 @@ public void testDeserialization() throws IOException {
             assertEquals(EXPECTED_PROFILE_IMAGE_URL_HTTPS, user.profileImageUrlHttps);
             assertEquals(EXPECTED_VERIFIED, user.verified);
             assertNotNull(user.status);
+            assertNotNull(user.withheldInCountries);
+            assertEquals(1, user.withheldInCountries.size());
+            assertEquals(EXPECTED_WITHHELD_IN_COUNTRIES, user.withheldInCountries.get(0));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/resources/model_card.json b/twitter-core/src/test/resources/model_card.json
new file mode 100644
index 00000000..5d84e8cf
--- /dev/null
+++ b/twitter-core/src/test/resources/model_card.json
@@ -0,0 +1,102 @@
+{
+  "binding_values": {
+    "app_id": {
+      "scribe_key": "publisher_app_id",
+      "string_value": "co.vine.android",
+      "type": "STRING"
+    },
+    "app_is_free": {
+      "string_value": "true",
+      "type": "STRING"
+    },
+    "app_name": {
+      "string_value": "Vine - video entertainment",
+      "type": "STRING"
+    },
+    "app_num_ratings": {
+      "string_value": "1,080,460",
+      "type": "STRING"
+    },
+    "app_price_amount": {
+      "string_value": "0.0",
+      "type": "STRING"
+    },
+    "app_price_currency": {
+      "string_value": "USD",
+      "type": "STRING"
+    },
+    "app_star_rating": {
+      "string_value": "4.2",
+      "type": "STRING"
+    },
+    "app_url": {
+      "string_value": "http://t.co/redirect?url=https%3A%2F%2Fvine.co%2Fv%2FeYqdg0ZQq11&sig=3f926515488a274a5ad490fe5c178f9a11366682&ssr=true&slug=u9fFPye5uF",
+      "type": "STRING"
+    },
+    "app_url_resolved": {
+      "string_value": "https://vine.co/v/eYqdg0ZQq11",
+      "type": "STRING"
+    },
+    "card_url": {
+      "scribe_key": "card_url",
+      "string_value": "https://t.co/u9fFPye5uF",
+      "type": "STRING"
+    },
+    "description": {
+      "string_value": "Vine by Krystaalized",
+      "type": "STRING"
+    },
+    "domain": {
+      "string_value": "vine.co",
+      "type": "STRING"
+    },
+    "player_height": {
+      "string_value": "535",
+      "type": "STRING"
+    },
+    "player_image": {
+      "image_value": {
+        "alt": null,
+        "height": 480,
+        "url": "https://o.twimg.com/qwhjddd",
+        "width": 480
+      },
+      "type": "IMAGE"
+    },
+    "player_stream_content_type": {
+      "string_value": "video/mp4; codecs=avc1.42E01E, mp4a.40.2",
+      "type": "STRING"
+    },
+    "player_stream_url": {
+      "string_value": "https://v.cdn.vine.co/r/videos/A37DAF7D721270513540440653824_41d075d38e8.2.0.5737545349973686981.mp4?versionId=EGjtEcEvZBhzj4QrceZJsPKNQ0hKDp1E",
+      "type": "STRING"
+    },
+    "player_url": {
+      "string_value": "https://vine.co/v/eYqdg0ZQq11/card",
+      "type": "STRING"
+    },
+    "player_width": {
+      "string_value": "535",
+      "type": "STRING"
+    },
+    "site": {
+      "scribe_key": "publisher_id",
+      "type": "USER",
+      "user_value": {
+        "id_str": "586671909",
+        "path": []
+      }
+    },
+    "title": {
+      "string_value": "The Irish Riverdance \ud83c\udf40 #TraditionalDanceWeek #Represent",
+      "type": "STRING"
+    },
+    "vanity_url": {
+      "scribe_key": "vanity_url",
+      "string_value": "vine.co",
+      "type": "STRING"
+    }
+  },
+  "name": "player",
+  "url": "https://t.co/u9fFPye5uF"
+}
\ No newline at end of file
diff --git a/twitter-core/src/test/resources/model_media_entity.json b/twitter-core/src/test/resources/model_media_entity.json
index 1342528d..29c5b783 100644
--- a/twitter-core/src/test/resources/model_media_entity.json
+++ b/twitter-core/src/test/resources/model_media_entity.json
@@ -1,6 +1,7 @@
 {
   "display_url": "pic.twitter.com/lvYVFjAbzz",
   "expanded_url": "http://twitter.com/jbulava/status/606528031289655296/video/1",
+  "ext_alt_text": "A Twitter employee",
   "id": 606527664086781952,
   "id_str": "606527664086781952",
   "indices": [
diff --git a/twitter-core/src/test/resources/model_quoted_tweet.json b/twitter-core/src/test/resources/model_quoted_tweet.json
new file mode 100644
index 00000000..f8c24684
--- /dev/null
+++ b/twitter-core/src/test/resources/model_quoted_tweet.json
@@ -0,0 +1,284 @@
+{
+  "contributors": null,
+  "coordinates": null,
+  "created_at": "Wed Jun 22 19:00:06 +0000 2016",
+  "entities": {
+    "hashtags": [
+      {
+        "indices": [
+          77,
+          88
+        ],
+        "text": "HelloWorld"
+      }
+    ],
+    "symbols": [],
+    "urls": [
+      {
+        "display_url": "twitter.com/krausefx/statu\u2026",
+        "expanded_url": "https://twitter.com/krausefx/status/745634624466911232",
+        "indices": [
+          90,
+          113
+        ],
+        "url": "https://t.co/V1xjPPBkML"
+      }
+    ],
+    "user_mentions": [
+      {
+        "id": 50055757,
+        "id_str": "50055757",
+        "indices": [
+          10,
+          19
+        ],
+        "name": "Felix Krause",
+        "screen_name": "KrauseFx"
+      },
+      {
+        "id": 3065602373,
+        "id_str": "3065602373",
+        "indices": [
+          54,
+          66
+        ],
+        "name": "swift.berlin",
+        "screen_name": "swiftberlin"
+      }
+    ]
+  },
+  "favorite_count": 8,
+  "favorited": false,
+  "geo": null,
+  "id": 745692860763148288,
+  "id_str": "745692860763148288",
+  "in_reply_to_screen_name": null,
+  "in_reply_to_status_id": null,
+  "in_reply_to_status_id_str": null,
+  "in_reply_to_user_id": null,
+  "in_reply_to_user_id_str": null,
+  "is_quote_status": true,
+  "lang": "en",
+  "place": null,
+  "possibly_sensitive": false,
+  "possibly_sensitive_appealable": false,
+  "quoted_status": {
+    "contributors": null,
+    "coordinates": null,
+    "created_at": "Wed Jun 22 15:08:42 +0000 2016",
+    "entities": {
+      "hashtags": [
+        {
+          "indices": [
+            77,
+            88
+          ],
+          "text": "HelloWorld"
+        }
+      ],
+      "symbols": [],
+      "urls": [
+        {
+          "display_url": "meetup.com/swift-berlin/e\u2026",
+          "expanded_url": "http://www.meetup.com/swift-berlin/events/231935850/",
+          "indices": [
+            53,
+            76
+          ],
+          "url": "https://t.co/T1trfUOhr8"
+        }
+      ],
+      "user_mentions": []
+    },
+    "favorite_count": 26,
+    "favorited": false,
+    "geo": null,
+    "id": 745634624466911232,
+    "id_str": "745634624466911232",
+    "in_reply_to_screen_name": null,
+    "in_reply_to_status_id": null,
+    "in_reply_to_status_id_str": null,
+    "in_reply_to_user_id": null,
+    "in_reply_to_user_id_str": null,
+    "is_quote_status": false,
+    "lang": "en",
+    "place": {
+      "attributes": {},
+      "bounding_box": {
+        "coordinates": [
+          [
+            [
+              -122.42284884,
+              37.76893497
+            ],
+            [
+              -122.3964,
+              37.76893497
+            ],
+            [
+              -122.3964,
+              37.78752897
+            ],
+            [
+              -122.42284884,
+              37.78752897
+            ]
+          ]
+        ],
+        "type": "Polygon"
+      },
+      "contained_within": [],
+      "country": "United States",
+      "country_code": "US",
+      "full_name": "SoMa, San Francisco",
+      "id": "2b6ff8c22edd9576",
+      "name": "SoMa",
+      "place_type": "neighborhood",
+      "url": "https://api.twitter.com/1.1/geo/id/2b6ff8c22edd9576.json"
+    },
+    "possibly_sensitive": false,
+    "possibly_sensitive_appealable": false,
+    "retweet_count": 3,
+    "retweeted": false,
+    "source": "<a href=\"http://tapbots.com/tweetbot\" rel=\"nofollow\">Tweetbot for i\u039fS</a>",
+    "text": "I'll be speaking in Berlin next week, come join us \ud83c\udf89 https://t.co/T1trfUOhr8 #HelloWorld",
+    "truncated": false,
+    "user": {
+      "contributors_enabled": false,
+      "created_at": "Tue Jun 23 18:24:14 +0000 2009",
+      "default_profile": true,
+      "default_profile_image": false,
+      "description": "Professional iOS Code Signing Issue Resolver -\nDeveloper of https://t.co/k5gVM2dNjD @twitter",
+      "entities": {
+        "description": {
+          "urls": [
+            {
+              "display_url": "fastlane.tools",
+              "expanded_url": "http://fastlane.tools",
+              "indices": [
+                60,
+                83
+              ],
+              "url": "https://t.co/k5gVM2dNjD"
+            }
+          ]
+        },
+        "url": {
+          "urls": [
+            {
+              "display_url": "krausefx.com",
+              "expanded_url": "https://krausefx.com",
+              "indices": [
+                0,
+                23
+              ],
+              "url": "https://t.co/fiyZ0Bpisl"
+            }
+          ]
+        }
+      },
+      "favourites_count": 4369,
+      "follow_request_sent": false,
+      "followers_count": 8699,
+      "following": false,
+      "friends_count": 612,
+      "geo_enabled": true,
+      "has_extended_profile": false,
+      "id": 50055757,
+      "id_str": "50055757",
+      "is_translation_enabled": false,
+      "is_translator": false,
+      "lang": "en",
+      "listed_count": 353,
+      "location": "San Francisco",
+      "name": "Felix Krause",
+      "notifications": false,
+      "profile_background_color": "C0DEED",
+      "profile_background_image_url": "http://abs.twimg.com/images/themes/theme1/bg.png",
+      "profile_background_image_url_https": "https://abs.twimg.com/images/themes/theme1/bg.png",
+      "profile_background_tile": false,
+      "profile_banner_url": "https://pbs.twimg.com/profile_banners/50055757/1446216297",
+      "profile_image_url": "http://pbs.twimg.com/profile_images/544860475218227200/hNv93t_P_normal.jpeg",
+      "profile_image_url_https": "https://pbs.twimg.com/profile_images/544860475218227200/hNv93t_P_normal.jpeg",
+      "profile_link_color": "0084B4",
+      "profile_sidebar_border_color": "C0DEED",
+      "profile_sidebar_fill_color": "DDEEF6",
+      "profile_text_color": "333333",
+      "profile_use_background_image": true,
+      "protected": false,
+      "screen_name": "KrauseFx",
+      "statuses_count": 14423,
+      "time_zone": "Pacific Time (US & Canada)",
+      "url": "https://t.co/fiyZ0Bpisl",
+      "utc_offset": -25200,
+      "verified": false
+    }
+  },
+  "quoted_status_id": 745634624466911232,
+  "quoted_status_id_str": "745634624466911232",
+  "retweet_count": 2,
+  "retweeted": false,
+  "source": "<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>",
+  "text": "Come join @KrauseFx and our International DevRel team @swiftberlin next week!#HelloWorld  https://t.co/V1xjPPBkML",
+  "truncated": false,
+  "user": {
+    "contributors_enabled": false,
+    "created_at": "Sat Dec 14 04:35:55 +0000 2013",
+    "default_profile": false,
+    "default_profile_image": false,
+    "description": "Developer and Platform Relations @Twitter. We are developer advocates. We can't answer all your questions, but we listen to all of them!",
+    "entities": {
+      "description": {
+        "urls": []
+      },
+      "url": {
+        "urls": [
+          {
+            "display_url": "dev.twitter.com",
+            "expanded_url": "https://dev.twitter.com/",
+            "indices": [
+              0,
+              23
+            ],
+            "url": "https://t.co/66w26cua1O"
+          }
+        ]
+      }
+    },
+    "favourites_count": 1636,
+    "follow_request_sent": false,
+    "followers_count": 423978,
+    "following": false,
+    "friends_count": 1532,
+    "geo_enabled": true,
+    "has_extended_profile": false,
+    "id": 2244994945,
+    "id_str": "2244994945",
+    "is_translation_enabled": false,
+    "is_translator": false,
+    "lang": "en",
+    "listed_count": 931,
+    "location": "Internet",
+    "name": "TwitterDev",
+    "notifications": false,
+    "profile_background_color": "FFFFFF",
+    "profile_background_image_url": "http://abs.twimg.com/images/themes/theme1/bg.png",
+    "profile_background_image_url_https": "https://abs.twimg.com/images/themes/theme1/bg.png",
+    "profile_background_tile": false,
+    "profile_banner_url": "https://pbs.twimg.com/profile_banners/2244994945/1396995246",
+    "profile_image_url": "http://pbs.twimg.com/profile_images/530814764687949824/npQQVkq8_normal.png",
+    "profile_image_url_https": "https://pbs.twimg.com/profile_images/530814764687949824/npQQVkq8_normal.png",
+    "profile_link_color": "0084B4",
+    "profile_sidebar_border_color": "FFFFFF",
+    "profile_sidebar_fill_color": "DDEEF6",
+    "profile_text_color": "333333",
+    "profile_use_background_image": false,
+    "protected": false,
+    "screen_name": "TwitterDev",
+    "statuses_count": 2437,
+    "time_zone": "Pacific Time (US & Canada)",
+    "url": "https://t.co/66w26cua1O",
+    "utc_offset": -25200,
+    "verified": true
+  }
+}
\ No newline at end of file
diff --git a/twitter-core/src/test/resources/model_tweet.json b/twitter-core/src/test/resources/model_tweet.json
index 93d16ee1..f5061a3a 100644
--- a/twitter-core/src/test/resources/model_tweet.json
+++ b/twitter-core/src/test/resources/model_tweet.json
@@ -33,7 +33,11 @@
   "contributors": [
     14927800
   ],
-  "text": "Along with our new #Twitterbird, we've also updated our Display Guidelines: https://t.co/Ed4omjYs  ^JC",
+  "full_text": "Along with our new #Twitterbird, we've also updated our Display Guidelines: https://t.co/Ed4omjYs  ^JC",
+  "display_text_range": [
+    0,
+    102
+  ],
   "retweet_count": 66,
   "in_reply_to_status_id_str": null,
   "id": 210462857140252672,
@@ -103,5 +107,10 @@
   },
   "in_reply_to_screen_name": null,
   "source": "web",
-  "in_reply_to_status_id": null
+  "in_reply_to_status_id": null,
+  "withheld_copyright": true,
+  "withheld_in_countries": [
+    "XY"
+  ],
+  "withheld_scope": "status"
 }
diff --git a/twitter-core/src/test/resources/model_tweetentities.json b/twitter-core/src/test/resources/model_tweetentities.json
index 0cee3a2f..11a44fc2 100644
--- a/twitter-core/src/test/resources/model_tweetentities.json
+++ b/twitter-core/src/test/resources/model_tweetentities.json
@@ -8,6 +8,15 @@
       "text": "lol"
     }
   ],
+  "symbols": [
+    {
+      "indices": [
+        0,
+        5
+      ],
+      "text": "TWTR"
+    }
+  ],
   "media": [
     {
       "type": "photo",
diff --git a/twitter-core/src/test/resources/model_user.json b/twitter-core/src/test/resources/model_user.json
index 7ffbc744..614a6e90 100644
--- a/twitter-core/src/test/resources/model_user.json
+++ b/twitter-core/src/test/resources/model_user.json
@@ -143,5 +143,8 @@
         "description": {
             "urls": []
         }
-    }
+    },
+  "withheld_in_countries": [
+    "XY"
+  ]
 }
diff --git a/twitter-mopub/build.gradle b/twitter-mopub/build.gradle
new file mode 100644
index 00000000..b2e5a3e0
--- /dev/null
+++ b/twitter-mopub/build.gradle
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion rootProject.compileSdkVersion
+    buildToolsVersion rootProject.buildToolsVersion
+
+    defaultConfig {
+        versionCode 1
+        versionName version
+        minSdkVersion rootProject.minSdkVersion.twitter
+        consumerProguardFiles 'proguard.txt'
+    }
+
+    buildTypes {
+        debug {
+            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
+            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
+            buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
+            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
+
+            testCoverageEnabled enableTestCodeCoverage
+        }
+        release {
+            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
+            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
+            buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
+            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
+        }
+    }
+
+    lintOptions {
+        warningsAsErrors true
+    }
+
+    compileOptions {
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
+    }
+
+    // Forcibly add debug and the generated "R" files onto the test classpath
+    sourceSets {
+        test.java.srcDirs += "build/generated/source/r/debug"
+        test.java.srcDirs += "src/debug"
+    }
+
+    testOptions {
+        unitTests.returnDefaultValues = true
+    }
+}
+
+dependencies {
+
+    compile (dependency.mopub) {
+        transitive = true;
+    }
+
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile(dependency.robolectric) {
+        exclude group: 'commons-logging', module: 'commons-logging'
+        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
+    }
+    testCompile (dependency.junitAddons) {
+        transitive = false
+    }
+}
\ No newline at end of file
diff --git a/twitter-mopub/changelog.md b/twitter-mopub/changelog.md
new file mode 100644
index 00000000..6ed86f3e
--- /dev/null
+++ b/twitter-mopub/changelog.md
@@ -0,0 +1,12 @@
+# Twitter MoPub Android SDK changelog
+*Non-trivial pull requests should include an entry below. Entries must be suitable for inclusion in public-facing materials such as release notes and blog posts. Keep them short, sweet, and in the past tense. New entries go on top. When merging to deploy, add the version number and date.*
+
+## Unreleased
+
+## v2.0.0
+
+* Dropped support for API versions before API 14 (ICS).
+
+## v1.0.0
+
+ * Initial release.
diff --git a/twitter-mopub/gradle.properties b/twitter-mopub/gradle.properties
new file mode 100644
index 00000000..e1796405
--- /dev/null
+++ b/twitter-mopub/gradle.properties
@@ -0,0 +1,32 @@
+#
+# Copyright (C) 2015 Twitter, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+#
+
+// The to be released version. When releasing, drop -SNAPSHOT. After releasing, bump version
+// number and add back -SNAPSHOT
+version=2.0.1-SNAPSHOT
+version_code=1
+
+pom_name=Android SDK Twitter MoPub
+pom_group_id=com.twitter.sdk.android
+pom_artifact_id=twitter-mopub
+fabric-identifier=com.twitter.sdk.android:twitter-mopub
+pom_packaging=aar
+
+pom_licence_name=TwitterKit Agreement
+pom_licence_url=https://fabric.io/terms/twitter
+
+fabric-properties-header=twitter-license
diff --git a/twitter-mopub/internal-build.gradle b/twitter-mopub/internal-build.gradle
new file mode 100644
index 00000000..7926131c
--- /dev/null
+++ b/twitter-mopub/internal-build.gradle
@@ -0,0 +1,97 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+apply plugin: 'com.android.library'
+apply from: rootProject.qualityScript
+apply from: rootProject.deployScript
+apply plugin: io.fabric.gradle.weaving.ArtifactSizePlugin
+apply plugin: io.fabric.gradle.weaving.FabricPropertiesPlugin
+apply plugin: io.fabric.gradle.weaving.DexMethodCountPlugin
+
+android {
+    compileSdkVersion rootProject.compileSdkVersion
+    buildToolsVersion rootProject.buildToolsVersion
+
+    defaultConfig {
+        versionCode 1
+        versionName version
+        minSdkVersion rootProject.minSdkVersion.twitter
+        consumerProguardFiles 'proguard.txt'
+    }
+
+    buildTypes {
+        debug {
+            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
+            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
+            buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
+            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
+
+            testCoverageEnabled enableTestCodeCoverage
+        }
+        release {
+            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
+            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
+            buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
+            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
+        }
+    }
+
+    lintOptions {
+        warningsAsErrors true
+    }
+
+    dexMethodCount {
+        packageFilter = "com.twitter.sdk.android.mopub"
+    }
+
+    //Gradle publishes only release by default for multi module projects
+    //This will publish all build variants and we can specifically choose them
+    defaultPublishConfig 'release'
+    publishNonDefault true
+
+    compileOptions {
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
+    }
+
+    testOptions {
+        unitTests.returnDefaultValues = true
+    }
+}
+
+ext.projectDependencies = []
+
+dependencies {
+    projectDependencies.each { path, binary ->
+        debugCompile project(path: path, configuration: 'debug')
+        releaseCompile projectOrBinary(path: path, configuration: 'release', binary: binary)
+    }
+
+    compile (dependency.mopub) {
+        transitive = true;
+    }
+
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile(dependency.robolectric) {
+        exclude group: 'commons-logging', module: 'commons-logging'
+        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
+    }
+    testCompile (dependency.junitAddons) {
+        transitive = false
+    }
+}
\ No newline at end of file
diff --git a/twitter-mopub/lint.xml b/twitter-mopub/lint.xml
new file mode 100644
index 00000000..de80308e
--- /dev/null
+++ b/twitter-mopub/lint.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<lint/>
diff --git a/twitter-mopub/proguard.txt b/twitter-mopub/proguard.txt
new file mode 100644
index 00000000..a7bc4c33
--- /dev/null
+++ b/twitter-mopub/proguard.txt
@@ -0,0 +1 @@
+# Proguard config for Twitter MoPub
diff --git a/twitter-mopub/src/main/AndroidManifest.xml b/twitter-mopub/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..15960c86
--- /dev/null
+++ b/twitter-mopub/src/main/AndroidManifest.xml
@@ -0,0 +1,38 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<manifest
+    package="com.twitter.sdk.android.mopub"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+
+    <application>
+        <activity
+            android:name="com.mopub.mobileads.MoPubActivity"
+            android:configChanges="keyboardHidden|orientation|screenSize"/>
+        <activity
+            android:name="com.mopub.mobileads.MraidActivity"
+            android:configChanges="keyboardHidden|orientation|screenSize"/>
+        <activity
+            android:name="com.mopub.common.MoPubBrowser"
+            android:configChanges="keyboardHidden|orientation|screenSize"/>
+        <activity
+            android:name="com.mopub.mobileads.MraidVideoPlayerActivity"
+            android:configChanges="keyboardHidden|orientation|screenSize"/>
+    </application>
+</manifest>
\ No newline at end of file
diff --git a/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/ColorUtils.java b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/ColorUtils.java
new file mode 100644
index 00000000..a258d5a6
--- /dev/null
+++ b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/ColorUtils.java
@@ -0,0 +1,132 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.mopub;
+
+import android.graphics.Color;
+
+final class ColorUtils {
+    private ColorUtils() {}
+
+    private static final int RGB_TOTAL_COLORS = 256;
+
+    private static final float DEFAULT_LIGHTNESS_THRESHOLD = .6f;
+    private static final float ON_TAP_LIGHTNESS_THRESHOLD = .3f;
+
+    private static final float CTA_ON_TAP_DARKNESS_FACTOR = 0.1f;
+    private static final float CTA_ON_TAP_LIGHTNESS_FACTOR = 0.2f;
+    private static final float CTA_TEXT_LIGHTNESS_FACTOR = .6f;
+
+    private static final int OPAQUE_ALPHA = Math.round(255 * 1.0f);
+    private static final int TRANSPARENT_ALPHA = Math.round(255 * 0.9f);
+    private static final int COLOR_FULLY_WHITE = Math.round(255 * 1.0f);
+    private static final int COLOR_PARTIALLY_BLACK = Math.round(255 * 0.4f);
+
+    public static int calculateCtaTextColor(final int ctaBackgroundColor) {
+        if (isLightColor(ctaBackgroundColor)) {
+            return calculateDarkerColor(ctaBackgroundColor, CTA_TEXT_LIGHTNESS_FACTOR);
+        } else {
+            return Color.WHITE;
+        }
+    }
+
+    public static int calculateCtaOnTapColor(final int ctaBackgroundColor) {
+        if (isLightColor(ctaBackgroundColor, ON_TAP_LIGHTNESS_THRESHOLD)) {
+            return calculateDarkerColor(ctaBackgroundColor, CTA_ON_TAP_DARKNESS_FACTOR);
+        } else {
+            return calculateLighterColor(ctaBackgroundColor, CTA_ON_TAP_LIGHTNESS_FACTOR);
+        }
+    }
+
+    public static boolean isLightColor(final int color) {
+        return isLightColor(color, DEFAULT_LIGHTNESS_THRESHOLD);
+    }
+
+    /**
+     * This method calculates a darker color provided a factor of reduction in lightness.
+     *
+     * @param color The original color value
+     * @param factor Factor of lightness reduction, range can be between 0 - 1.0
+     * @return  The calculated darker color
+     */
+    public static int calculateDarkerColor(final int color, final float factor) {
+        final int a = Color.alpha(color);
+        final int r = Color.red(color);
+        final int g = Color.green(color);
+        final int b = Color.blue(color);
+
+        final int lightnessLevel = Math.round(RGB_TOTAL_COLORS * factor);
+
+        return Color.argb(a,
+                Math.max(r - lightnessLevel, 0),
+                Math.max(g - lightnessLevel, 0),
+                Math.max(b - lightnessLevel, 0));
+    }
+
+    /**
+     * This method calculates a lighter color provided a factor of increase in lightness.
+     *
+     * @param color A color value
+     * @param factor Factor of increase in lightness, range can be between 0 - 1.0
+     * @return  The calculated darker color
+     */
+    public static int calculateLighterColor(final int color, final float factor) {
+        final int a = Color.alpha(color);
+        final int r = Color.red(color);
+        final int g = Color.green(color);
+        final int b = Color.blue(color);
+
+        final int lightnessLevel = Math.round(RGB_TOTAL_COLORS * factor);
+
+        return Color.argb(a,
+                Math.min(r + lightnessLevel, 255),
+                Math.min(g + lightnessLevel, 255),
+                Math.min(b + lightnessLevel, 255));
+    }
+
+    /**
+     * This method calculates the suitable contrasting color that is viewable.
+     *
+     * @param color A color value.
+     * @return  The calculated contrasting color that is viewable.
+     */
+    public static int calculateContrastingColor(final int color) {
+        final boolean isLightColor = isLightColor(color);
+        final int alpha = isLightColor ? OPAQUE_ALPHA : TRANSPARENT_ALPHA;
+        final int rgbColor = isLightColor ? COLOR_PARTIALLY_BLACK : COLOR_FULLY_WHITE;
+        return Color.argb(alpha, rgbColor, rgbColor, rgbColor);
+    }
+
+    /**
+     * This method uses HSL to determine in a human eyesight terms if a color is light or not.
+     * See: http://en.wikipedia.org/wiki/HSL_and_HSV. The threshold values are from ITU Rec. 709
+     * http://en.wikipedia.org/wiki/Rec._709#Luma_coefficients
+     *
+     *
+     * @param  color A color value
+     * @param  factor A factor of lightness measured between 0-1.0
+     * @return Whether or not the color is considered light
+     */
+    public static boolean isLightColor(final int color, final float factor) {
+        final int r = Color.red(color);
+        final int g = Color.green(color);
+        final int b = Color.blue(color);
+
+        final double threshold = 0.21 * r + 0.72 * g + 0.07 * b;
+        return threshold > (RGB_TOTAL_COLORS * factor);
+    }
+}
diff --git a/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterMoPubAdAdapter.java b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterMoPubAdAdapter.java
new file mode 100644
index 00000000..00411259
--- /dev/null
+++ b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterMoPubAdAdapter.java
@@ -0,0 +1,94 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.mopub;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.widget.Adapter;
+
+import com.mopub.nativeads.MoPubAdAdapter;
+import com.mopub.nativeads.MoPubNativeAdPositioning;
+import com.mopub.nativeads.RequestParameters;
+
+public class TwitterMoPubAdAdapter extends MoPubAdAdapter{
+    private final static String TWITTERKIT_KEYWORD = "src:twitterkit";
+
+    /**
+     * Creates a new TwitterMoPubAdAdapter object.
+     *
+     * By default, the adapter will contact the server to determine ad positions. If you
+     * wish to hard-code positions in your app, see {@link TwitterMoPubAdAdapter( Activity,
+     * MoPubNativeAdPositioning.MoPubClientPositioning )}.
+     *
+     * @param activity The activity.
+     * @param originalAdapter Your original adapter.
+     */
+    public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter) {
+        super(activity, originalAdapter);
+    }
+
+    /**
+     * Creates a new TwitterMoPubAdAdapter object, using server positioning.
+     *
+     * @param activity The activity.
+     * @param originalAdapter Your original adapter.
+     * @param adPositioning A positioning object for specifying where ads will be placed in your
+     * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
+     */
+    public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter,
+            MoPubNativeAdPositioning.MoPubServerPositioning adPositioning) {
+        super(activity, originalAdapter, adPositioning);
+    }
+
+    /**
+     * Creates a new TwitterMoPubAdAdapter object, using client positioning.
+     *
+     * @param activity The activity.
+     * @param originalAdapter Your original adapter.
+     * @param adPositioning A positioning object for specifying where ads will be placed in your
+     * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
+     */
+    public TwitterMoPubAdAdapter(Activity activity, Adapter originalAdapter,
+            MoPubNativeAdPositioning.MoPubClientPositioning adPositioning) {
+        super(activity, originalAdapter, adPositioning);
+    }
+
+    @Override
+    public void loadAds(@NonNull final String adUnitId) {
+        loadAds(adUnitId, null);
+    }
+
+    @Override
+    public void loadAds(@NonNull final String adUnitId,
+            @Nullable final RequestParameters requestParams) {
+
+        final RequestParameters.Builder builder = new RequestParameters.Builder();
+        if (requestParams != null) {
+            final String keywords = TextUtils.isEmpty(requestParams.getKeywords())
+                    ? TWITTERKIT_KEYWORD : requestParams.getKeywords() + "," + TWITTERKIT_KEYWORD;
+            builder.keywords(keywords);
+            builder.location(requestParams.getLocation());
+        } else {
+            builder.keywords(TWITTERKIT_KEYWORD);
+        }
+
+        super.loadAds(adUnitId, builder.build());
+    }
+}
diff --git a/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAd.java b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAd.java
new file mode 100644
index 00000000..3eb9fe84
--- /dev/null
+++ b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAd.java
@@ -0,0 +1,188 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.mopub;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.graphics.drawable.ShapeDrawable;
+import android.graphics.drawable.StateListDrawable;
+import android.graphics.drawable.shapes.RectShape;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.twitter.sdk.android.mopub.internal.RoundedImageView;
+
+public class TwitterStaticNativeAd extends FrameLayout {
+    LinearLayout containerLayout;
+    RoundedImageView mainImageView;
+    RelativeLayout cardLayout;
+    ImageView adIconView;
+    TextView adTitleView;
+    TextView adTextView;
+    TextView callToActionView;
+    ImageView privacyInfoView;
+
+    // style colors
+    int containerBackgroundColor;
+    int cardBackgroundColor;
+    int primaryTextColor;
+    int ctaBackgroundColor;
+    int cardBorderColor;
+
+    private static final int DEFAULT_AD_STYLE = R.style.tw__ad_LightStyle;
+
+    public TwitterStaticNativeAd(Context context) {
+        this(context, null);
+    }
+
+    public TwitterStaticNativeAd(Context context, AttributeSet attrs) {
+        this(context, attrs, DEFAULT_AD_STYLE);
+    }
+
+    public TwitterStaticNativeAd(Context context, AttributeSet attrs, int styleResId) {
+        super(context, attrs);
+        findSubviews();
+        initAttributes(styleResId);
+        setStyleAttributes();
+    }
+
+    private void findSubviews() {
+        LayoutInflater.from(getContext()).inflate(R.layout.tw__native_ad, this, true);
+        containerLayout = (LinearLayout) findViewById(R.id.tw__ad_mopub_layout);
+        mainImageView = (RoundedImageView) findViewById(R.id.native_ad_main_image);
+        cardLayout = (RelativeLayout) findViewById(R.id.native_ad_card);
+        adIconView = (ImageView) findViewById(R.id.native_ad_icon_image);
+        adTitleView = (TextView) findViewById(R.id.native_ad_title);
+        adTextView = (TextView) findViewById(R.id.native_ad_text);
+        callToActionView = (TextView) findViewById(R.id.native_ad_cta);
+        privacyInfoView = (ImageView) findViewById(R.id.native_ad_privacy_info_icon_image);
+    }
+
+    private void initAttributes(int styleResId) {
+        final TypedArray a = getContext().getTheme().obtainStyledAttributes(styleResId,
+                R.styleable.tw__native_ad);
+        try {
+            readStyleAttributes(a);
+        } finally {
+            a.recycle();
+        }
+    }
+
+    private void readStyleAttributes(TypedArray typedArray) {
+        containerBackgroundColor = typedArray.getColor(
+                R.styleable.tw__native_ad_tw__ad_container_bg_color,
+                getResources().getColor(R.color.tw__ad_light_container_bg_color));
+
+        cardBackgroundColor = typedArray.getColor(R.styleable.tw__native_ad_tw__ad_card_bg_color,
+                getResources().getColor(R.color.tw__ad_light_card_bg_color));
+
+        primaryTextColor = typedArray.getColor(
+                R.styleable.tw__native_ad_tw__ad_text_primary_color,
+                getResources().getColor(R.color.tw__ad_light_text_primary_color));
+
+        ctaBackgroundColor = typedArray.getColor(
+                R.styleable.tw__native_ad_tw__ad_cta_button_color,
+                getResources().getColor(R.color.tw__ad_cta_default));
+    }
+
+    private void setStyleAttributes() {
+        containerLayout.setBackgroundColor(containerBackgroundColor);
+        adTitleView.setTextColor(primaryTextColor);
+        adTextView.setTextColor(primaryTextColor);
+        final int adViewRadius = (int) getResources().getDimension(R.dimen.tw__ad_view_radius);
+        mainImageView.setCornerRadii(adViewRadius, adViewRadius, 0, 0);
+
+        final TextView privacyTextView = (TextView) findViewById(R.id.native_ad_privacy_text);
+        privacyTextView.setTextColor(
+                ColorUtils.calculateContrastingColor(containerBackgroundColor));
+
+        setCardStyling();
+        setCallToActionStyling();
+    }
+
+    private void setCardStyling() {
+        final boolean isLightBg = ColorUtils.isLightColor(containerBackgroundColor);
+        if (isLightBg) {
+            cardBorderColor = getResources().getColor(R.color.tw__ad_light_card_border_color);
+        } else {
+            cardBorderColor = getResources().getColor(R.color.tw__ad_dark_card_border_color);
+        }
+
+        final ShapeDrawable bgDrawable = new ShapeDrawable(new RectShape());
+        bgDrawable.getPaint().setColor(cardBackgroundColor);
+        final ShapeDrawable borderDrawable = new ShapeDrawable(new RectShape());
+        borderDrawable.getPaint().setColor(cardBorderColor);
+
+        final Drawable[] layers = new Drawable[2];
+        layers[0] = borderDrawable;
+        layers[1] = bgDrawable;
+
+        final LayerDrawable layerDrawable = new LayerDrawable(layers);
+        layerDrawable.setLayerInset(0, 0, 0, 0, 0);
+        layerDrawable.setLayerInset(1, 1, 0, 1, 0);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            cardLayout.setBackground(layerDrawable);
+        } else {
+            cardLayout.setBackgroundDrawable(layerDrawable);
+        }
+    }
+
+    private void setCallToActionStyling() {
+        final int calculatedCTATextColor = ColorUtils.calculateCtaTextColor(ctaBackgroundColor);
+        callToActionView.setTextColor(calculatedCTATextColor);
+
+        // Setup StateListDrawable obj with two gradient drawables:
+        // First is the selected item with lighter/darker bg color of original
+        // Second is unselected item with the call to action background color
+        // Also set the default ad view radius for bottomLeft and bottomRight corners
+        final StateListDrawable stateListDrawable = new StateListDrawable();
+        final int adViewRadius = (int) getResources().getDimension(R.dimen.tw__ad_view_radius);
+        final float[] ctaViewRadii = new float[]{
+                0, 0,
+                0, 0,
+                adViewRadius, adViewRadius,
+                adViewRadius, adViewRadius};
+
+        final GradientDrawable selectedItem = new GradientDrawable();
+        selectedItem.setCornerRadii(ctaViewRadii);
+        final int ctaPressedBgColor = ColorUtils.calculateCtaOnTapColor(ctaBackgroundColor);
+        selectedItem.setColor(ctaPressedBgColor);
+        stateListDrawable.addState(new int[]{android.R.attr.state_pressed}, selectedItem);
+
+        final GradientDrawable unselectedItem = new GradientDrawable();
+        unselectedItem.setCornerRadii(ctaViewRadii);
+        unselectedItem.setColor(ctaBackgroundColor);
+        stateListDrawable.addState(new int[]{}, unselectedItem);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            callToActionView.setBackground(stateListDrawable);
+        } else {
+            callToActionView.setBackgroundDrawable(stateListDrawable);
+        }
+    }
+}
diff --git a/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRenderer.java b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRenderer.java
new file mode 100644
index 00000000..1346cb7b
--- /dev/null
+++ b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRenderer.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.mopub;
+
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.nativeads.BaseNativeAd;
+import com.mopub.nativeads.MoPubAdRenderer;
+import com.mopub.nativeads.NativeImageHelper;
+import com.mopub.nativeads.NativeRendererHelper;
+import com.mopub.nativeads.StaticNativeAd;
+
+public class TwitterStaticNativeAdRenderer implements MoPubAdRenderer<StaticNativeAd> {
+    private static final int DEFAULT_STYLE = R.style.tw__ad_LightStyle;
+
+    private final int styleResId;
+
+    public TwitterStaticNativeAdRenderer() {
+        this.styleResId = DEFAULT_STYLE;
+    }
+
+    public TwitterStaticNativeAdRenderer(int styleResId) {
+        this.styleResId = styleResId;
+    }
+
+    @Override
+    public View createAdView(final Activity activity, final ViewGroup parent) {
+        return new TwitterStaticNativeAd(activity, null, styleResId);
+    }
+
+    @Override
+    public void renderAdView(final View view, final StaticNativeAd staticNativeAd) {
+        update((TwitterStaticNativeAd) view, staticNativeAd);
+    }
+
+    @Override
+    public boolean supports(final BaseNativeAd nativeAd) {
+        return nativeAd instanceof StaticNativeAd;
+    }
+
+    private void update(final TwitterStaticNativeAd staticNativeView,
+            final StaticNativeAd staticNativeAd) {
+        NativeRendererHelper.addTextView(staticNativeView.adTitleView,
+                staticNativeAd.getTitle());
+        NativeRendererHelper.addTextView(staticNativeView.adTextView, staticNativeAd.getText());
+        NativeRendererHelper.addTextView(staticNativeView.callToActionView,
+                staticNativeAd.getCallToAction());
+        NativeImageHelper.loadImageView(staticNativeAd.getMainImageUrl(),
+                staticNativeView.mainImageView);
+        NativeImageHelper.loadImageView(staticNativeAd.getIconImageUrl(),
+                staticNativeView.adIconView);
+        NativeRendererHelper.addPrivacyInformationIcon(
+                staticNativeView.privacyInfoView,
+                staticNativeAd.getPrivacyInformationIconImageUrl(),
+                staticNativeAd.getPrivacyInformationIconClickThroughUrl());
+    }
+}
diff --git a/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/internal/RoundedImageView.java b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/internal/RoundedImageView.java
new file mode 100644
index 00000000..e600cf16
--- /dev/null
+++ b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/internal/RoundedImageView.java
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.mopub.internal;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapShader;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.graphics.drawable.BitmapDrawable;
+import android.util.AttributeSet;
+import android.widget.ImageView;
+
+import static android.graphics.Bitmap.createBitmap;
+
+public class RoundedImageView extends ImageView {
+    private float[] roundedCornerRadii;
+
+    public RoundedImageView(Context context, AttributeSet attrs) {
+        super(context, attrs, 0);
+        setDefaultCornerRadii();
+    }
+
+    public RoundedImageView(Context context, AttributeSet attrs, int styleResId) {
+        super(context, attrs, styleResId);
+        setDefaultCornerRadii();
+    }
+
+    private void setDefaultCornerRadii() {
+        setCornerRadii(0, 0, 0, 0);
+    }
+
+    /**
+     * Set radius for each corner and override default behavior of no rounded corners.
+     *
+     * @param topLeftRadius     top left radius of view
+     * @param topRightRadius    top right radius of view
+     * @param bottomLeftRadius  bottom left radius of view
+     * @param bottomRightRadius bottom right radius of view
+     */
+    public void setCornerRadii(int topLeftRadius, int topRightRadius,
+                                        int bottomLeftRadius, int bottomRightRadius) {
+        if (topLeftRadius < 0 || topRightRadius < 0 ||
+                bottomRightRadius < 0 || bottomLeftRadius < 0) {
+            throw new IllegalStateException("Radius must not be negative");
+        }
+
+        roundedCornerRadii = new float[]{
+                topLeftRadius, topLeftRadius,
+                topRightRadius, topRightRadius,
+                bottomLeftRadius, bottomLeftRadius,
+                bottomRightRadius, bottomRightRadius};
+    }
+
+    @Override
+    public void setImageBitmap(Bitmap bitmap) {
+        setImageDrawable(new BitmapDrawable(getResources(), transform(bitmap)));
+    }
+
+    private Bitmap transform(Bitmap source) {
+        final RectF rect = new RectF(0, 0, source.getWidth(), source.getHeight());
+        final Bitmap result = createBitmap(source.getWidth(), source.getHeight(),
+                source.getConfig());
+        final BitmapShader bitmapShader = new BitmapShader(source, Shader.TileMode.CLAMP,
+                Shader.TileMode.CLAMP);
+
+        final Paint paint = new Paint();
+        paint.setAntiAlias(true);
+        paint.setShader(bitmapShader);
+
+        final Path path = new Path();
+        path.addRoundRect(rect, roundedCornerRadii, Path.Direction.CCW);
+
+        final Canvas canvas = new Canvas(result);
+        canvas.drawPath(path, paint);
+        return result;
+    }
+}
diff --git a/twitter-mopub/src/main/res/layout/tw__native_ad.xml b/twitter-mopub/src/main/res/layout/tw__native_ad.xml
new file mode 100644
index 00000000..f387f5d0
--- /dev/null
+++ b/twitter-mopub/src/main/res/layout/tw__native_ad.xml
@@ -0,0 +1,102 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<LinearLayout
+    android:id="@+id/tw__ad_mopub_layout"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    style="@style/tw__ad_container">
+
+    <com.twitter.sdk.android.mopub.internal.RoundedImageView
+        android:id="@+id/native_ad_main_image"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:adjustViewBounds="true"
+        tools:ignore="ContentDescription"/>
+
+    <RelativeLayout
+        android:id="@+id/native_ad_card"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:padding="@dimen/tw__ad_space_padding">
+
+        <ImageView
+            android:id="@+id/native_ad_icon_image"
+            android:layout_width="@dimen/tw__ad_icon_size"
+            android:layout_height="@dimen/tw__ad_icon_size"
+            android:layout_alignParentLeft="true"
+            android:layout_marginLeft="@dimen/tw__ad_icon_margin_left"
+            android:layout_marginRight="@dimen/tw__ad_icon_margin_right"
+            tools:ignore="ContentDescription"/>
+
+        <TextView
+            android:id="@+id/native_ad_title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_toRightOf="@id/native_ad_icon_image"
+            android:layout_marginLeft="@dimen/tw__ad_title_margin_left"
+            android:focusable="false"
+            android:textColor="@color/tw__ad_light_text_primary_color"
+            android:textSize="@dimen/tw__ad_text_size_large"
+            android:textStyle="bold"
+            tools:text="MoPub Native Ad"/>
+
+        <TextView
+            android:id="@+id/native_ad_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/native_ad_title"
+            android:layout_alignLeft="@id/native_ad_title"
+            android:textColor="@color/tw__ad_light_text_primary_color"
+            android:textSize="@dimen/tw__ad_text_size_medium"
+            tools:text="Welcome to Native MoPub Ads. Native ads blend seamlessly into your
+            content."/>
+    </RelativeLayout>
+
+    <Button
+        android:id="@+id/native_ad_cta"
+        android:textAllCaps="false"
+        android:stateListAnimator="@null"
+        tools:text="Buy now"
+        tools:ignore="UnusedAttribute"
+        style="@style/tw__ad_cta_button"/>
+
+    <RelativeLayout
+        android:id="@+id/native_ad_privacy"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="@dimen/tw__ad_privacy_margin_left">
+
+        <ImageView
+            android:id="@+id/native_ad_privacy_info_icon_image"
+            android:layout_width="@dimen/tw__ad_privacy_icon_size"
+            android:layout_height="@dimen/tw__ad_privacy_icon_size"
+            android:background="@null"
+            android:padding="@dimen/tw__ad_privacy_icon_padding"
+            android:contentDescription="@string/tw__privacy_icon_content_desc"/>
+
+        <TextView
+            android:id="@+id/native_ad_privacy_text"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:layout_toEndOf="@id/native_ad_privacy_info_icon_image"
+            android:layout_marginLeft="@dimen/tw__ad_privacy_text_margin_left"
+            android:text="@string/tw__sponsored"
+            android:textSize="@dimen/tw__ad_text_size_small"/>
+    </RelativeLayout>
+</LinearLayout>
diff --git a/twitter-mopub/src/main/res/values-ar/strings.xml b/twitter-mopub/src/main/res/values-ar/strings.xml
new file mode 100644
index 00000000..f9c84e84
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ar/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">أيقونة الخصوصيّة</string>
+    <string name="tw__sponsored">هذا إعلان مدفوع</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-bg/strings.xml b/twitter-mopub/src/main/res/values-bg/strings.xml
new file mode 100644
index 00000000..5188eb6b
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-bg/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Икона за поверителност</string>
+    <string name="tw__sponsored">Това е платена реклама</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-bn/strings.xml b/twitter-mopub/src/main/res/values-bn/strings.xml
new file mode 100644
index 00000000..53358cf1
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-bn/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">গোপনীয়তা আইকন</string>
+    <string name="tw__sponsored">এটি একটি প্রযোজিত বিজ্ঞাপন</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-ca/strings.xml b/twitter-mopub/src/main/res/values-ca/strings.xml
new file mode 100644
index 00000000..a7306563
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ca/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Icona de privacitat</string>
+    <string name="tw__sponsored">Aquest anunci està patrocinat</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-cs/strings.xml b/twitter-mopub/src/main/res/values-cs/strings.xml
new file mode 100644
index 00000000..61b24865
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-cs/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Ikona Soukromí</string>
+    <string name="tw__sponsored">Toto je sponzorovaná reklama.</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-da/strings.xml b/twitter-mopub/src/main/res/values-da/strings.xml
new file mode 100644
index 00000000..66e117c4
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-da/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Privatlivs-ikon</string>
+    <string name="tw__sponsored">Dette er en sponsoreret annonce</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-de/strings.xml b/twitter-mopub/src/main/res/values-de/strings.xml
new file mode 100644
index 00000000..21b1602b
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-de/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Datenschutzsymbol</string>
+    <string name="tw__sponsored">Dies ist eine gesponserte Anzeige</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-el/strings.xml b/twitter-mopub/src/main/res/values-el/strings.xml
new file mode 100644
index 00000000..ed03bfe7
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-el/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Εικονίδιο απορρήτου</string>
+    <string name="tw__sponsored">Αυτή είναι μια χορηγούμενη διαφήμιση</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-en-rGB/strings.xml b/twitter-mopub/src/main/res/values-en-rGB/strings.xml
new file mode 100644
index 00000000..b97a24fd
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-en-rGB/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Privacy Icon</string>
+    <string name="tw__sponsored">This is a sponsored ad</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-en-rSS/strings.xml b/twitter-mopub/src/main/res/values-en-rSS/strings.xml
new file mode 100644
index 00000000..996c7c73
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-en-rSS/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">[[153332]] Privacy Icon</string>
+    <string name="tw__sponsored">[[153331]] This is a sponsored ad</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-es/strings.xml b/twitter-mopub/src/main/res/values-es/strings.xml
new file mode 100644
index 00000000..c7b534e6
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-es/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Ícono de privacidad</string>
+    <string name="tw__sponsored">Anuncio patrocinado</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-fa/strings.xml b/twitter-mopub/src/main/res/values-fa/strings.xml
new file mode 100644
index 00000000..615acea7
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-fa/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">نماد حریم خصوصی</string>
+    <string name="tw__sponsored">این تبلیغ دارای پشتیبان مالی است</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-fi/strings.xml b/twitter-mopub/src/main/res/values-fi/strings.xml
new file mode 100644
index 00000000..686c3fa4
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-fi/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Yksityisyyskuvake</string>
+    <string name="tw__sponsored">Tämä on sponsoroitu mainos</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-fr/strings.xml b/twitter-mopub/src/main/res/values-fr/strings.xml
new file mode 100644
index 00000000..b59044c2
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-fr/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Icône  de Confidentialité</string>
+    <string name="tw__sponsored">Ceci est une publicité sponsorisée</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-gu/strings.xml b/twitter-mopub/src/main/res/values-gu/strings.xml
new file mode 100644
index 00000000..16c39ecb
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-gu/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">ગોપનીયતા ચિહ્ન</string>
+    <string name="tw__sponsored">આ સ્પોન્સર્ડ જાહેરાત છે</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-hi/strings.xml b/twitter-mopub/src/main/res/values-hi/strings.xml
new file mode 100644
index 00000000..5c930204
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-hi/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">गोपनीयता आइकन</string>
+    <string name="tw__sponsored">यह एक प्रायोजित विज्ञापन है</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-hr/strings.xml b/twitter-mopub/src/main/res/values-hr/strings.xml
new file mode 100644
index 00000000..bf7c5544
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-hr/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Ikona zaštite privatnosti</string>
+    <string name="tw__sponsored">Ovo je plaćeni oglas</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-hu/strings.xml b/twitter-mopub/src/main/res/values-hu/strings.xml
new file mode 100644
index 00000000..9050e6f9
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-hu/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Adatvédelmi ikon</string>
+    <string name="tw__sponsored">A hirdetés szponzorált</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-in/strings.xml b/twitter-mopub/src/main/res/values-in/strings.xml
new file mode 100644
index 00000000..35f07e92
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-in/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Ikon Privasi</string>
+    <string name="tw__sponsored">Ini adalah iklan bersponsor</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-it/strings.xml b/twitter-mopub/src/main/res/values-it/strings.xml
new file mode 100644
index 00000000..d7b4e7c6
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-it/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Icona della privacy</string>
+    <string name="tw__sponsored">Questo è un annuncio sponsorizzato</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-iw/strings.xml b/twitter-mopub/src/main/res/values-iw/strings.xml
new file mode 100644
index 00000000..33fbbd43
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-iw/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">סמל פרטיות</string>
+    <string name="tw__sponsored">זוהי מודעה ממומנת</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-ja/strings.xml b/twitter-mopub/src/main/res/values-ja/strings.xml
new file mode 100644
index 00000000..20af95b0
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ja/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">プライバシーアイコン</string>
+    <string name="tw__sponsored">スポンサー広告</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-kn/strings.xml b/twitter-mopub/src/main/res/values-kn/strings.xml
new file mode 100644
index 00000000..3c6c1602
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-kn/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">ಗೌಪ್ಯತೆ ಐಕಾನ್</string>
+    <string name="tw__sponsored">ಇಉ ಒಂದು ಪ್ರಾಯೋಜಿತ ಜಾಹೀರಾತು</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-ko/strings.xml b/twitter-mopub/src/main/res/values-ko/strings.xml
new file mode 100644
index 00000000..e5f528bc
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ko/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">개인정보 공개 설정 아이콘</string>
+    <string name="tw__sponsored">스폰서 광고입니다</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-mr/strings.xml b/twitter-mopub/src/main/res/values-mr/strings.xml
new file mode 100644
index 00000000..a1bfaf05
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-mr/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">गोपनीयता चिन्ह</string>
+    <string name="tw__sponsored">ही प्रायोजित जाहिरात आहे</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-ms/strings.xml b/twitter-mopub/src/main/res/values-ms/strings.xml
new file mode 100644
index 00000000..dafe96c4
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ms/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Ikon Privasi</string>
+    <string name="tw__sponsored">Ini ialah iklan yang ditaja</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-nb/strings.xml b/twitter-mopub/src/main/res/values-nb/strings.xml
new file mode 100644
index 00000000..b7d236b9
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-nb/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Personvern-ikon</string>
+    <string name="tw__sponsored">Dette er en sponset reklame</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-nl/strings.xml b/twitter-mopub/src/main/res/values-nl/strings.xml
new file mode 100644
index 00000000..8e13a3b3
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-nl/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Privacy-pictogram</string>
+    <string name="tw__sponsored">Dit is een gesponsorde advertentie</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-pl/strings.xml b/twitter-mopub/src/main/res/values-pl/strings.xml
new file mode 100644
index 00000000..e50e4421
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-pl/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Ikona prywatności</string>
+    <string name="tw__sponsored">To jest reklama sponsorowana</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-pt/strings.xml b/twitter-mopub/src/main/res/values-pt/strings.xml
new file mode 100644
index 00000000..1b43f4fd
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-pt/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Ícone de Privacidade</string>
+    <string name="tw__sponsored">Este anúncio é patrocinado</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-ro/strings.xml b/twitter-mopub/src/main/res/values-ro/strings.xml
new file mode 100644
index 00000000..fc2439fe
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ro/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Pictograma Confidențialitate</string>
+    <string name="tw__sponsored">Aceasta este o reclamă sponsorizată</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-ru/strings.xml b/twitter-mopub/src/main/res/values-ru/strings.xml
new file mode 100644
index 00000000..dbeae555
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ru/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Значок конфиденциальности</string>
+    <string name="tw__sponsored">Это рекламное объявление</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-sk/strings.xml b/twitter-mopub/src/main/res/values-sk/strings.xml
new file mode 100644
index 00000000..58a86276
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-sk/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Ikona súkromia</string>
+    <string name="tw__sponsored">Toto je sponzorovaná reklama</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-sr/strings.xml b/twitter-mopub/src/main/res/values-sr/strings.xml
new file mode 100644
index 00000000..645ece4c
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-sr/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Иконица приватности</string>
+    <string name="tw__sponsored">Ово је спонзорисани оглас</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-sv/strings.xml b/twitter-mopub/src/main/res/values-sv/strings.xml
new file mode 100644
index 00000000..091788aa
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-sv/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Integritet Ikon</string>
+    <string name="tw__sponsored">Detta är en sponsrad annons</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-ta/strings.xml b/twitter-mopub/src/main/res/values-ta/strings.xml
new file mode 100644
index 00000000..efb0ee07
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ta/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">தனியுரிமைப் படவுரு</string>
+    <string name="tw__sponsored">இது ஸ்பான்சர் செய்யப்பட்ட விளம்பரம்</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-th/strings.xml b/twitter-mopub/src/main/res/values-th/strings.xml
new file mode 100644
index 00000000..8db7312b
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-th/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">ไอคอนความเป็นส่วนตัว</string>
+    <string name="tw__sponsored">นี่คือโฆษณาที่ได้รับการสนับสนุน</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-tl/strings.xml b/twitter-mopub/src/main/res/values-tl/strings.xml
new file mode 100644
index 00000000..f1df3bb5
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-tl/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Icon ng Pagkapribado</string>
+    <string name="tw__sponsored">Ito ay isang sponsored ad</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-tr/strings.xml b/twitter-mopub/src/main/res/values-tr/strings.xml
new file mode 100644
index 00000000..8baf1f6b
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-tr/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Gizlilik Simgesi</string>
+    <string name="tw__sponsored">Bu sponsorlu bir reklamdır</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-uk/strings.xml b/twitter-mopub/src/main/res/values-uk/strings.xml
new file mode 100644
index 00000000..31f83f64
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-uk/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Значок конфіденційності</string>
+    <string name="tw__sponsored">Це рекламне оголошення</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-ur/strings.xml b/twitter-mopub/src/main/res/values-ur/strings.xml
new file mode 100644
index 00000000..bafd7eee
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-ur/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">پرائیویسی آئیکن</string>
+    <string name="tw__sponsored">یہ اسپانسرشدہ اشتہار ہے</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-vi/strings.xml b/twitter-mopub/src/main/res/values-vi/strings.xml
new file mode 100644
index 00000000..2d07ac1e
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-vi/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">Biểu tượng Quyền riêng tư</string>
+    <string name="tw__sponsored">Đây là một quảng cáo có tài trợ</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-zh-rCN/strings.xml b/twitter-mopub/src/main/res/values-zh-rCN/strings.xml
new file mode 100644
index 00000000..96d9a3ad
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-zh-rCN/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">隐私图标</string>
+    <string name="tw__sponsored">这是一则赞助广告</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values-zh-rTW/strings.xml b/twitter-mopub/src/main/res/values-zh-rTW/strings.xml
new file mode 100644
index 00000000..4d1fe9af
--- /dev/null
+++ b/twitter-mopub/src/main/res/values-zh-rTW/strings.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <string name="tw__privacy_icon_content_desc">隱私權圖示</string>
+    <string name="tw__sponsored">這是贊助廣告</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values/attrs.xml b/twitter-mopub/src/main/res/values/attrs.xml
new file mode 100644
index 00000000..c0bc763d
--- /dev/null
+++ b/twitter-mopub/src/main/res/values/attrs.xml
@@ -0,0 +1,25 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources>
+    <declare-styleable name="tw__native_ad">
+        <attr name="tw__ad_container_bg_color" format="color"/>
+        <attr name="tw__ad_card_bg_color" format="color"/>
+        <attr name="tw__ad_text_primary_color" format="color"/>
+        <attr name="tw__ad_cta_button_color" format="color"/>
+    </declare-styleable>
+</resources>
diff --git a/twitter-mopub/src/main/res/values/colors.xml b/twitter-mopub/src/main/res/values/colors.xml
new file mode 100644
index 00000000..a59399cc
--- /dev/null
+++ b/twitter-mopub/src/main/res/values/colors.xml
@@ -0,0 +1,30 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources>
+    <color name="tw__ad_light_container_bg_color">#F5F8FA</color>
+    <color name="tw__ad_light_card_bg_color">@android:color/white</color>
+    <color name="tw__ad_light_card_border_color">#E1E8ED</color>
+    <color name="tw__ad_light_text_primary_color">#292F33</color>
+
+    <color name="tw__ad_dark_container_bg_color">#000000</color>
+    <color name="tw__ad_dark_card_bg_color">#292F33</color>
+    <color name="tw__ad_dark_card_border_color">#8899A6</color>
+    <color name="tw__ad_dark_text_primary_color">#F5F8FA</color>
+
+    <color name="tw__ad_cta_default">#1B95E0</color>
+</resources>
diff --git a/twitter-mopub/src/main/res/values/dimens.xml b/twitter-mopub/src/main/res/values/dimens.xml
new file mode 100644
index 00000000..78dd8764
--- /dev/null
+++ b/twitter-mopub/src/main/res/values/dimens.xml
@@ -0,0 +1,41 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources>
+    <!-- Root layout -->
+    <dimen name="tw__ad_layout_padding">14dp</dimen>
+    <dimen name="tw__ad_layout_padding_bottom">0dp</dimen>
+
+    <!-- Ad space: image, icon and text -->
+    <dimen name="tw__ad_view_radius">5dp</dimen>
+    <dimen name="tw__ad_space_padding">12dp</dimen>
+    <dimen name="tw__ad_icon_margin_left">2dp</dimen>
+    <dimen name="tw__ad_icon_margin_right">2dp</dimen>
+    <dimen name="tw__ad_icon_size">40dp</dimen>
+    <dimen name="tw__ad_title_margin_left">8dp</dimen>
+
+    <!-- Privacy -->
+    <dimen name="tw__ad_privacy_margin_left">-10dp</dimen>
+    <dimen name="tw__ad_privacy_icon_size">40dp</dimen>
+    <dimen name="tw__ad_privacy_icon_padding">10dp</dimen>
+    <dimen name="tw__ad_privacy_text_margin_left">-5dp</dimen>
+
+    <!--density-independent(micro 10sp, small 12sp, medium 14sp, large 16sp)-->
+    <dimen name="tw__ad_text_size_large">16sp</dimen>
+    <dimen name="tw__ad_text_size_medium">14sp</dimen>
+    <dimen name="tw__ad_text_size_small">12sp</dimen>
+</resources>
\ No newline at end of file
diff --git a/twitter-mopub/src/main/res/values/public.xml b/twitter-mopub/src/main/res/values/public.xml
new file mode 100644
index 00000000..67e3b769
--- /dev/null
+++ b/twitter-mopub/src/main/res/values/public.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!--suppress UnusedResources -->
+    <public type="style" name="tw__ad_LightStyle"/>
+    <!--suppress UnusedResources -->
+    <public type="style" name="tw__ad_DarkStyle"/>
+</resources>
\ No newline at end of file
diff --git a/twitter-mopub/src/main/res/values/strings.xml b/twitter-mopub/src/main/res/values/strings.xml
new file mode 100644
index 00000000..9d93e13f
--- /dev/null
+++ b/twitter-mopub/src/main/res/values/strings.xml
@@ -0,0 +1,21 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources>
+  <string name="tw__sponsored">This is a sponsored ad</string>
+  <string name="tw__privacy_icon_content_desc">Privacy Icon</string>
+</resources>
diff --git a/twitter-mopub/src/main/res/values/styles.xml b/twitter-mopub/src/main/res/values/styles.xml
new file mode 100644
index 00000000..b8cf720d
--- /dev/null
+++ b/twitter-mopub/src/main/res/values/styles.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources>
+    <style name="tw_ad_BaseStyle">
+        <item name="tw__ad_cta_button_color">@color/tw__ad_cta_default</item>
+    </style>
+
+    <style name="tw__ad_LightStyle" parent="tw_ad_BaseStyle">
+        <item name="tw__ad_container_bg_color">@color/tw__ad_light_container_bg_color</item>
+        <item name="tw__ad_card_bg_color">@color/tw__ad_light_card_bg_color</item>
+        <item name="tw__ad_text_primary_color">@color/tw__ad_light_text_primary_color</item>
+    </style>
+
+    <style name="tw__ad_DarkStyle" parent="tw_ad_BaseStyle">
+        <item name="tw__ad_container_bg_color">@color/tw__ad_dark_container_bg_color</item>
+        <item name="tw__ad_card_bg_color">@color/tw__ad_dark_card_bg_color</item>
+        <item name="tw__ad_text_primary_color">@color/tw__ad_dark_text_primary_color</item>
+    </style>
+</resources>
diff --git a/twitter-mopub/src/main/res/values/tw__native_ad_styles.xml b/twitter-mopub/src/main/res/values/tw__native_ad_styles.xml
new file mode 100644
index 00000000..6bbab88f
--- /dev/null
+++ b/twitter-mopub/src/main/res/values/tw__native_ad_styles.xml
@@ -0,0 +1,35 @@
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <style name="tw__ad_container">
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:orientation">vertical</item>
+        <item name="android:paddingTop">@dimen/tw__ad_layout_padding</item>
+        <item name="android:paddingLeft">@dimen/tw__ad_layout_padding</item>
+        <item name="android:paddingRight">@dimen/tw__ad_layout_padding</item>
+        <item name="android:paddingBottom">@dimen/tw__ad_layout_padding_bottom</item>
+    </style>
+
+    <style name="tw__ad_cta_button">
+        <item name="android:layout_width">fill_parent</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:textSize">@dimen/tw__ad_text_size_medium</item>
+        <item name="android:gravity">center</item>
+    </style>
+</resources>
\ No newline at end of file
diff --git a/twitter-mopub/src/main/resources/fabric/com.twitter.sdk.android.twitter-mopub.properties b/twitter-mopub/src/main/resources/fabric/com.twitter.sdk.android.twitter-mopub.properties
new file mode 100644
index 00000000..c3d04d92
--- /dev/null
+++ b/twitter-mopub/src/main/resources/fabric/com.twitter.sdk.android.twitter-mopub.properties
@@ -0,0 +1,20 @@
+#
+# Copyright (C) 2015 Twitter, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+#
+
+fabric-identifier=com.twitter.sdk.android:twitter-mopub
+fabric-version=2.0.1-SNAPSHOT
+fabric-build-type=source
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/ColorUtilsTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/ColorUtilsTest.java
new file mode 100644
index 00000000..c5588d42
--- /dev/null
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/ColorUtilsTest.java
@@ -0,0 +1,110 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.mopub;
+
+import android.graphics.Color;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class ColorUtilsTest {
+
+    @Test
+    public void testIsLightColor_black() {
+        assertFalse(ColorUtils.isLightColor(Color.BLACK));
+    }
+
+    @Test
+    public void testIsLightColor_white() {
+        assertTrue(ColorUtils.isLightColor(Color.WHITE));
+    }
+
+    @Test
+    public void testDefaultCtaButtonIsDarkColor() {
+        assertFalse(ColorUtils.isLightColor(R.color.tw__ad_cta_default));
+    }
+
+    @Test
+    public void testCtaTextColorIsLightForDarkBgColor() {
+        assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(R.color.tw__ad_cta_default));
+        assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(Color.BLACK));
+        assertEquals(Color.WHITE, ColorUtils.calculateCtaTextColor(Color.DKGRAY));
+    }
+
+    @Test
+    public void testCtaTextColorIsDarkForLightBgColor() {
+        assertTrue(Color.WHITE != ColorUtils.calculateCtaTextColor(Color.WHITE));
+        assertTrue(Color.WHITE != ColorUtils.calculateCtaTextColor(Color.LTGRAY));
+    }
+
+    @Test
+    public void testCTAOnTapColorIsLighterForDarkBgColor() {
+        final int darkColor = Color.BLACK;
+        final int originalRed = Color.red(darkColor);
+        final int originalGreen = Color.green(darkColor);
+        final int originalBlue = Color.blue(darkColor);
+
+        final int lighterColor = ColorUtils.calculateCtaOnTapColor(darkColor);
+        final int lighterRed = Color.red(lighterColor);
+        final int lighterGreen = Color.green(lighterColor);
+        final int lighterBlue = Color.blue(lighterColor);
+
+        assertTrue(lighterRed > originalRed
+                && lighterGreen > originalGreen
+                && lighterBlue > originalBlue);
+    }
+
+    @Test
+    public void testCTAOnTapColorIsDarkerForLightBgColor() {
+        final int lightColor = Color.WHITE;
+        final int originalRed = Color.red(lightColor);
+        final int originalGreen = Color.green(lightColor);
+        final int originalBlue = Color.blue(lightColor);
+
+        final int darkerColor = ColorUtils.calculateCtaOnTapColor(lightColor);
+        final int darkerRed = Color.red(darkerColor);
+        final int darkerGreen = Color.green(darkerColor);
+        final int darkerBlue = Color.blue(darkerColor);
+
+        assertTrue(originalRed > darkerRed
+                && originalGreen > darkerGreen
+                && originalBlue > darkerBlue);
+    }
+
+    @Test
+    public void testContrastColorForDarkColor() {
+        final int darkColor = Color.BLACK;
+        final int contrastingLightColor = ColorUtils.calculateContrastingColor(darkColor);
+        assertTrue(ColorUtils.isLightColor(contrastingLightColor));
+    }
+
+    @Test
+    public void testContrastColorForLightColor() {
+        final int lightColor = Color.WHITE;
+        final int contrastingDarkColor = ColorUtils.calculateContrastingColor(lightColor);
+        assertFalse(ColorUtils.isLightColor(contrastingDarkColor));
+    }
+}
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
new file mode 100644
index 00000000..7601dc2a
--- /dev/null
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
@@ -0,0 +1,151 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.mopub;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.mopub.nativeads.BaseNativeAd;
+import com.mopub.nativeads.MoPubCustomEventVideoNative;
+import com.mopub.nativeads.StaticNativeAd;
+import com.mopub.network.MaxWidthImageLoader;
+import com.mopub.network.Networking;
+import com.mopub.volley.toolbox.ImageLoader;
+import com.twitter.sdk.android.mopub.internal.RoundedImageView;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.doReturn;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class TwitterStaticNativeAdRendererTest {
+    private static final String TEST_TITLE = "title";
+    private static final String TEST_TEXT = "text";
+    private static final String TEST_CTA = "cta";
+    private static final String TEST_URL = "https://twitter.com";
+
+    private TwitterStaticNativeAdRenderer twitterStaticNativeAdRenderer;
+    private StaticNativeAd staticNativeAd;
+    private TwitterStaticNativeAd twitterStaticNativeAd;
+    @Mock
+    private ViewGroup viewGroup;
+    @Mock
+    private MaxWidthImageLoader mockImageLoader;
+    @Mock
+    private ImageLoader.ImageContainer mockImageContainer;
+    @Mock
+    private Bitmap mockBitmap;
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
+    @Before
+    public void setUp() throws Exception {
+        MockitoAnnotations.initMocks(this);
+
+        Networking.setImageLoaderForTesting(mockImageLoader);
+        doReturn(mockBitmap).when(mockImageContainer).getBitmap();
+
+        doAnswer(new Answer<Void>() {
+            @Override
+            public Void answer(InvocationOnMock invocation) throws Throwable {
+                final Object[] args = invocation.getArguments();
+                ((ImageLoader.ImageListener) args[1]).onResponse(mockImageContainer, true);
+                return null;
+            }
+        }).when(mockImageLoader).get(anyString(), any(ImageLoader.ImageListener.class));
+
+        twitterStaticNativeAdRenderer = new TwitterStaticNativeAdRenderer();
+
+        twitterStaticNativeAd = new TwitterStaticNativeAd(RuntimeEnvironment.application);
+        twitterStaticNativeAd.adTextView = mock(TextView.class);
+        twitterStaticNativeAd.adTitleView = mock(TextView.class);
+        twitterStaticNativeAd.callToActionView = mock(TextView.class);
+        twitterStaticNativeAd.mainImageView = mock(RoundedImageView.class);
+        twitterStaticNativeAd.adIconView = mock(ImageView.class);
+        twitterStaticNativeAd.privacyInfoView = mock(ImageView.class);
+
+        staticNativeAd = new StaticNativeAd() { };
+        staticNativeAd.setTitle(TEST_TITLE);
+        staticNativeAd.setText(TEST_TEXT);
+        staticNativeAd.setCallToAction(TEST_CTA);
+        staticNativeAd.setClickDestinationUrl(TEST_URL);
+        staticNativeAd.setMainImageUrl(TEST_URL);
+        staticNativeAd.setIconImageUrl(TEST_URL);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void testCreateAdView_withNullContext_shouldThrowNPE() {
+        twitterStaticNativeAdRenderer.createAdView(null, viewGroup);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void testRenderAdView_withNullView_shouldThrowNPE() {
+        twitterStaticNativeAdRenderer.renderAdView(null, staticNativeAd);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void testRenderAdView_withNullNativeAd_shouldThrowNPE() {
+        twitterStaticNativeAdRenderer.renderAdView(twitterStaticNativeAd, null);
+    }
+
+    @Test
+    public void testRenderAdView_shouldReturnPopulatedView() {
+        twitterStaticNativeAdRenderer.renderAdView(twitterStaticNativeAd, staticNativeAd);
+
+        verify(twitterStaticNativeAd.adTitleView).setText(TEST_TITLE);
+        verify(twitterStaticNativeAd.adTextView).setText(TEST_TEXT);
+        verify(twitterStaticNativeAd.callToActionView).setText(TEST_CTA);
+        verify(twitterStaticNativeAd.mainImageView).setImageBitmap(mockBitmap);
+        verify(twitterStaticNativeAd.adIconView).setImageBitmap(mockBitmap);
+        verify(twitterStaticNativeAd.privacyInfoView)
+                .setImageDrawable(any(Drawable.class));
+        verify(twitterStaticNativeAd.privacyInfoView)
+                .setOnClickListener(any(View.OnClickListener.class));
+    }
+
+    @Test
+    public void testSupports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception {
+        assertTrue(twitterStaticNativeAdRenderer.supports(new StaticNativeAd() {}));
+        assertFalse(twitterStaticNativeAdRenderer.supports(mock(BaseNativeAd.class)));
+        assertFalse(twitterStaticNativeAdRenderer
+                .supports(mock(MoPubCustomEventVideoNative.MoPubVideoNativeAd.class)));
+    }
+}
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java
new file mode 100644
index 00000000..6f8a3fcc
--- /dev/null
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.mopub;
+
+import android.test.AndroidTestCase;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+
+@RunWith(RobolectricGradleTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+public class TwitterStaticNativeAdTest extends AndroidTestCase {
+
+    @Test
+    public void testStyleAttrsForDefaultTheme() {
+        final TwitterStaticNativeAd nativeAd =
+                new TwitterStaticNativeAd(RuntimeEnvironment.application);
+        final int expectedContainerBgColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_light_container_bg_color);
+        final int expectedCardBgColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_light_card_bg_color);
+        final int expectedPrimaryTextColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_light_text_primary_color);
+        final int ctaBackgroundColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_cta_default);
+        final int cardBorderColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_light_card_border_color);
+
+        assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor);
+        assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor);
+        assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor);
+        assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor);
+        assertEquals(cardBorderColor, nativeAd.cardBorderColor);
+    }
+
+    @Test
+    public void testStyleAttrsForDarkTheme() {
+        final TwitterStaticNativeAd nativeAd =
+                new TwitterStaticNativeAd(RuntimeEnvironment.application, null,
+                        R.style.tw__ad_DarkStyle);
+
+        final int expectedContainerBgColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_dark_container_bg_color);
+        final int expectedCardBgColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_dark_card_bg_color);
+        final int expectedPrimaryTextColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_dark_text_primary_color);
+        final int ctaBackgroundColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_cta_default);
+        final int cardBorderColor =
+                nativeAd.getResources().getColor(R.color.tw__ad_dark_card_border_color);
+
+        assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor);
+        assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor);
+        assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor);
+        assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor);
+        assertEquals(cardBorderColor, nativeAd.cardBorderColor);
+    }
+}
diff --git a/twitter-unity/build.gradle b/twitter-unity/build.gradle
index d6ca6d5e..17b5ca42 100644
--- a/twitter-unity/build.gradle
+++ b/twitter-unity/build.gradle
@@ -15,10 +15,7 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
-
-apply from: rootProject.commonPlugins
 apply plugin: 'io.fabric.gradle.unity'
 
 android {
@@ -28,7 +25,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
         consumerProguardFiles 'proguard.txt'
     }
 
@@ -54,8 +51,8 @@ android {
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 
     // Forcibly add debug and the generated "R" files onto the test classpath
@@ -69,22 +66,10 @@ android {
     }
 }
 
-internal {
-    dexMethodCount {
-        packageFilter = "com.twitter.sdk.android.unity"
-    }
-}
-
-ext.projectDependencies = [
-        ':twitter-core' : 'com.twitter.sdk.android:twitter-core:+@aar',
-        ':tweet-composer' : 'com.twitter.sdk.android:tweet-composer:+@aar'
-]
-
 dependencies {
     provided fileTree(dir: 'libs', include: ['unity.jar'])
-    projectDependencies.each { path, binary ->
-        compile projectOrBinary(path: path, binary: binary)
-    }
+    compile project(':twitter-core')
+    compile project(':tweet-composer')
 
-    compile rootProject.fabric
+    compile dependency.fabric
 }
\ No newline at end of file
diff --git a/twitter-unity/gradle.properties b/twitter-unity/gradle.properties
index 2cc8a2de..9740a2d3 100644
--- a/twitter-unity/gradle.properties
+++ b/twitter-unity/gradle.properties
@@ -17,7 +17,7 @@
 
 // The to be released version. When releasing, drop -SNAPSHOT. After releasing, bump version
 // number and add back -SNAPSHOT
-version=0.1.0-SNAPSHOT
+version=2.0.0-SNAPSHOT
 version_code=1
 
 pom_name=Android SDK Twitter Unity
diff --git a/twitter-unity/internal-build.gradle b/twitter-unity/internal-build.gradle
index a0ba4133..85c4e722 100644
--- a/twitter-unity/internal-build.gradle
+++ b/twitter-unity/internal-build.gradle
@@ -15,7 +15,6 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 apply from: rootProject.qualityScript
 apply from: rootProject.deployScript
@@ -24,11 +23,6 @@ apply plugin: io.fabric.gradle.weaving.ArtifactSizePlugin
 apply plugin: io.fabric.gradle.weaving.FabricPropertiesPlugin
 apply plugin: io.fabric.gradle.weaving.DexMethodCountPlugin
 
-repositories {
-    mavenLocal()
-    maven { url 'https://maven.fabric.io/public' }
-}
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -36,7 +30,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
         consumerProguardFiles 'proguard.txt'
     }
 
@@ -71,14 +65,8 @@ android {
     publishNonDefault true
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
-    }
-
-    // Forcibly add debug and the generated "R" files onto the test classpath
-    sourceSets {
-        test.java.srcDirs += "build/generated/source/r/debug"
-        test.java.srcDirs += "src/debug"
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 
     testOptions {
@@ -87,7 +75,6 @@ android {
 }
 
 ext.projectDependencies = [
-        ':sdk:fabric:fabric' : 'io.fabric.sdk.android:fabric:+@aar',
         ':sdk:twitter:twitter-core' : 'com.twitter.sdk.android:twitter-core:+@aar',
         ':sdk:twitter:tweet-composer' : 'com.twitter.sdk.android:tweet-composer:+@aar'
 ]
diff --git a/twitter-unity/lint.xml b/twitter-unity/lint.xml
new file mode 100644
index 00000000..e7e65f76
--- /dev/null
+++ b/twitter-unity/lint.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+<lint>
+    <issue id="InvalidPackage" severity="ignore"/>
+</lint>
\ No newline at end of file
diff --git a/twitter-unity/src/main/java/com/twitter/sdk/android/unity/TwitterKit.java b/twitter-unity/src/main/java/com/twitter/sdk/android/unity/TwitterKit.java
index d9a5ce40..77236c77 100644
--- a/twitter-unity/src/main/java/com/twitter/sdk/android/unity/TwitterKit.java
+++ b/twitter-unity/src/main/java/com/twitter/sdk/android/unity/TwitterKit.java
@@ -76,7 +76,7 @@ public static String session() {
      * @param session the user session
      * @param config card settings
      */
-    public static void compose(String session, String config) {
+    public static void compose(String session, String config, String[] hashtags) {
         final Activity currentActivity = UnityPlayer.currentActivity;
         final CardConfig cardConfig = new Gson().fromJson(config, CardConfig.class);
         final Card card = new Card.AppCardBuilder(currentActivity)
@@ -89,6 +89,7 @@ public static void compose(String session, String config) {
         final Intent intent = new ComposerActivity.Builder(currentActivity)
                 .session(TwitterSessionHelper.deserialize(session))
                 .card(card)
+                .hashtags(hashtags)
                 .createIntent();
         currentActivity.startActivity(intent);
     }
diff --git a/twitter-unity/src/main/resources/fabric/com.twitter.sdk.android.twitter-unity.properties b/twitter-unity/src/main/resources/fabric/com.twitter.sdk.android.twitter-unity.properties
index bec060e5..844f297a 100644
--- a/twitter-unity/src/main/resources/fabric/com.twitter.sdk.android.twitter-unity.properties
+++ b/twitter-unity/src/main/resources/fabric/com.twitter.sdk.android.twitter-unity.properties
@@ -16,5 +16,5 @@
 #
 
 fabric-identifier=com.twitter.sdk.android:twitter-unity
-fabric-version=0.1.0-SNAPSHOT
+fabric-version=2.0.0-SNAPSHOT
 fabric-build-type=source
diff --git a/twitter/build.gradle b/twitter/build.gradle
index f5bbdbdd..fb29acd4 100644
--- a/twitter/build.gradle
+++ b/twitter/build.gradle
@@ -15,15 +15,8 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 
-apply plugin: 'io.fabric.gradle.release.kit-release'
-applyInternal from: rootProject.qualityScript
-applyInternal from: rootProject.deployScript
-applyInternal plugin: 'io.fabric.gradle.weaving.ArtifactSizePlugin'
-applyInternal plugin: 'io.fabric.gradle.weaving.FabricPropertiesPlugin'
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -31,7 +24,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
     }
 
     lintOptions {
@@ -53,8 +46,8 @@ android {
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 
     testOptions {
@@ -69,61 +62,16 @@ ext.projectDependencies = [
 ]
 
 dependencies {
-    projectDependencies.each { path, binary ->
-        compile projectOrBinary(path: path, binary: binary)
-    }
+    compile project(':twitter-core')
+    compile project(':tweet-composer')
+    compile project(':tweet-ui')
 
-    compile rootProject.digits
-    compile rootProject.fabric
+    compile dependency.fabric
 
-    testCompile rootProject.mockito
-    testCompile rootProject.junit
-    testCompile rootProject.mavenAntTasks
-    testCompile(rootProject.robolectric) {
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile(dependency.robolectric) {
         exclude group: 'commons-logging', module: 'commons-logging'
         exclude group: 'org.apache.httpcomponents', module: 'httpclient'
     }
-}
-
-internal {
-    fabricKitRelease {
-        apiKey = project.hasProperty('TWITTER_KIT_API_KEY') ? Project.TWITTER_KIT_API_KEY : ""
-        friendlyName = "Twitter"
-        name = "${project.pom_group_id}.${project.pom_artifact_id}"
-        description = "Integrate Log in with Twitter, embed Tweets, and leverage the Twitter API."
-        version = project.version
-        artifactUrl = "https://maven.fabric.io/repo/com/twitter/sdk/android/twitter/${project.version}/twitter-${project.version}.pom"
-        releaseNotesUrl = "https://s3.amazonaws.com/kits-crashlytics-com/android/com/twitter/sdk/android/twitter/${project.version}/twitter-${project.version}-release-notes.html"
-        learnMoreUrl = "http://docs.fabric.io/android/twitter/index.html"
-        price {
-            plan = "free"
-        }
-        license {
-            name = "Twitter"
-            url = "https://twitter.com/tos"
-        }
-        releaseChannel = "public"
-        minBuild = 0
-        maxBuild = Integer.MAX_VALUE
-        minPlatformVersion {
-            apiVersion "8"
-        }
-        docsUrl = "https://docs.fabric.io/javadocs/twitter-core/${project.version}/index.html"
-        twitterHandle = "@twitterdev"
-        websiteUrl = "https://docs.fabric.io/android/twitter/index.html"
-    }
-
-    task uploadFabricReleaseNotes(group: 'Release',
-            description: 'Upload Release Notes to S3 bucket kits-crashlytics-com',
-            type: io.fabric.gradle.release.FileUploadS3Task) {
-        enabled = rootProject.ext.kitsForRelease.get(project.path)
-        accessKey = System.properties['AWS_ACCESS_KEY_ID']
-        secretKey = System.properties['AWS_SECRET_ACCESS_KEY']
-        bucketName = System.properties['AWS_BUCKET']
-        destination = "android/com/twitter/sdk/android/twitter/${project.version}/twitter-${project.version}-release-notes.html"
-        srcFile = new File("${project.projectDir}/release-notes.html")
-    }
-}
-
-project.tasks.getByName('fabricKitRelease').enabled = rootProject.ext.kitsForRelease.get(project.path)
-
+}
\ No newline at end of file
diff --git a/twitter/gradle.properties b/twitter/gradle.properties
index b0ae485d..539334e8 100644
--- a/twitter/gradle.properties
+++ b/twitter/gradle.properties
@@ -17,7 +17,7 @@
 
 // The to be released version. When releasing, drop -SNAPSHOT. After releasing, bump version
 // number and add back -SNAPSHOT
-version=1.12.1-SNAPSHOT
+version=2.3.2-SNAPSHOT
 version_code=1
 
 pom_name=Android SDK Twitter
diff --git a/twitter/internal-build.gradle b/twitter/internal-build.gradle
index 987b1582..f986925b 100644
--- a/twitter/internal-build.gradle
+++ b/twitter/internal-build.gradle
@@ -15,7 +15,6 @@
  *
  */
 
-apply plugin: 'android-sdk-manager'
 apply plugin: 'com.android.library'
 apply from: rootProject.qualityScript
 apply from: rootProject.deployScript
@@ -23,10 +22,6 @@ apply plugin: io.fabric.gradle.weaving.ArtifactSizePlugin
 apply plugin: io.fabric.gradle.weaving.FabricPropertiesPlugin
 apply plugin: io.fabric.gradle.release.FabricKitReleasePlugin
 
-repositories {
-    maven { url 'https://maven.fabric.io/public' }
-}
-
 android {
     compileSdkVersion rootProject.compileSdkVersion
     buildToolsVersion rootProject.buildToolsVersion
@@ -34,7 +29,7 @@ android {
     defaultConfig {
         versionCode 1
         versionName version
-        minSdkVersion 9
+        minSdkVersion rootProject.minSdkVersion.twitter
     }
 
     lintOptions {
@@ -63,8 +58,8 @@ android {
     publishNonDefault true
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility rootProject.sourceCompatibilityVersion
+        targetCompatibility rootProject.targetCompatibilityVersion
     }
 
     testOptions {
@@ -75,9 +70,7 @@ android {
 ext.projectDependencies = [
         ':sdk:twitter:twitter-core' : 'com.twitter.sdk.android:twitter-core:+@aar',
         ':sdk:twitter:tweet-ui' : 'com.twitter.sdk.android:tweet-ui:+@aar',
-        ':sdk:twitter:tweet-composer' : 'com.twitter.sdk.android:tweet-composer:+@aar',
-        ':sdk:digits:digits' : 'com.digits.sdk.android:digits:+@aar',
-        ':sdk:fabric:fabric' : 'io.fabric.sdk.android:fabric:+@aar'
+        ':sdk:twitter:tweet-composer' : 'com.twitter.sdk.android:tweet-composer:+@aar'
 ]
 
 dependencies {
@@ -86,10 +79,9 @@ dependencies {
         releaseCompile projectOrBinary(path: path, configuration: 'release', binary: binary)
     }
 
-    testCompile rootProject.mockito
-    testCompile rootProject.junit
-    testCompile rootProject.mavenAntTasks
-    testCompile(rootProject.robolectric) {
+    testCompile dependency.mockito
+    testCompile dependency.junit
+    testCompile(dependency.robolectric) {
         exclude group: 'commons-logging', module: 'commons-logging'
         exclude group: 'org.apache.httpcomponents', module: 'httpclient'
     }
@@ -101,7 +93,11 @@ fabricKitRelease {
     name = "${project.pom_group_id}.${project.pom_artifact_id}"
     description = "Integrate Log in with Twitter, embed Tweets, and leverage the Twitter API."
     version = project.version
-    artifactUrl = "https://maven.fabric.io/repo/com/twitter/sdk/android/twitter/${project.version}/twitter-${project.version}.pom"
+    artifactUrl {
+        repository = "https://maven.fabric.io/public"
+        groupId = project.pom_group_id
+        artifactId = project.pom_artifact_id
+    }
     releaseNotesUrl = "https://s3.amazonaws.com/kits-crashlytics-com/android/com/twitter/sdk/android/twitter/${project.version}/twitter-${project.version}-release-notes.html"
     learnMoreUrl = "http://docs.fabric.io/android/twitter/index.html"
     price {
@@ -115,7 +111,7 @@ fabricKitRelease {
     minBuild = 0
     maxBuild = Integer.MAX_VALUE
     minPlatformVersion {
-        apiVersion "8"
+        apiVersion "14"
     }
     docsUrl = "https://docs.fabric.io/javadocs/twitter-core/${project.version}/index.html"
     twitterHandle = "@twitterdev"
diff --git a/twitter/lint.xml b/twitter/lint.xml
new file mode 100644
index 00000000..1e8076c0
--- /dev/null
+++ b/twitter/lint.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  ~ Copyright (C) 2015 Twitter, Inc.
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  ~
+  -->
+
+<lint>
+    <issue id="InvalidPackage" severity="ignore"/>
+</lint>
\ No newline at end of file
diff --git a/twitter/release-notes.html b/twitter/release-notes.html
index 33a6ec4f..bc1d8d6e 100644
--- a/twitter/release-notes.html
+++ b/twitter/release-notes.html
@@ -1,4 +1,79 @@
 <h2>Twitter</h2>
+
+<h3>2.3.2</h3>
+- Videos less than 6.5 seconds now loop.<br/>
+- Fixed issue where quote Tweets with media showed both media and quote Tweet. Only media should be shown if both are included.<br/>
+- Added ability to set geocode for SearchTimeline builder.<br/>
+- Updated Tweet UI and Twitter Core dependencies.<br/>
+
+<h3>2.3.1</h3>
+- Restricted Broadcast Intents to current application to avoid leaking sensitive information. <br/>
+- Improved RTL mirroring for Tweet views. <br/>
+- Dates are now properly localized for non-English locales. <br/>
+- Updated Tweet UI and Twitter Core dependencies. <br/>
+
+<h3>2.3.0</h3>
+- Added support for timeline filtering. <br/>
+- Normalized user-agent to avoid errors with non-ascii characters. <br/>
+- Added symbols to Tweet entities. <br/>
+
+<h3>2.2.0</h3>
+- Added support for quote Tweet display. <br/>
+- Added support for user defined OkHttpClient. <br/>
+- Updated Twitter UI and Twitter Core dependencies. <br/>
+
+<h3>2.1.1</h3>
+- Fixed UnsupportedOperationException when rendering multiple photos API 17 and below.<br/>
+- Updated Tweet UI dependency to version 2.1.1.<br/>
+
+<h3>2.1.0</h3>
+- Added multi-photo support for inline views and the fullscreen gallery view.<br/>
+- Fixed IllegalArgumentException in GuestAuthenticator.<br/>
+- Updated Twitter Core dependency to version 2.1.0.<br/>
+
+<h3>2.0.1</h3>
+- Updated proguard rules for Okhttp3 and Retrofit2.<br/>
+- Added translations for Twitter Composer.<br/>
+- Removed pseudo locales from translations.<br/>
+- Moved TwitterCollection from internal package to models.<br/>
+- Minor bug fixes.<br/>
+
+<h3>2.0.0</h3>
+- Dropped support for API versions before API 14 (ICS).<br/>
+- Migrated to Retrofit 2.0 and OkHttp 3.2.<br/>
+- TwitterApiClient now automatically refreshes expired guest tokens.<br/>
+- Removed previously deprecated methods and classes.<br/>
+- Removed all public reference to Application Authentication.<br/>
+- Fixed issue parsing withheldInCountries field in User object.<br/>
+- Added altText field to MediaEntity object.<br/>
+- Added contentDescription for media based on altText field.<br/>
+- Added Quote Tweet to Tweet object.<br/>
+
+<h3>1.14.1</h3>
+- Bump Digits and tweet-ui dependencies
+
+<h3>1.14.0</h3>
+- Added support for Vine in Tweets<br/>
+- Enabled extended Tweet display<br/>
+
+<h3>1.13.3</h3>
+- Fixed Fake ID exploit<br/>
+- Updated Twitter Core Dependency<br/>
+
+<h3>1.13.2</h3>
+- Allow #hashtags to be pre-filled in Composer<br/>
+- Updated Fabric Dependency<br/>
+
+<h3>1.13.1</h3>
+- Fixed security issue where certificate pinning wasn't happening for some requests.<br/>
+- Added HLS playback support. Removed WebM playback support.<br/>
+- Added loading and buffering spinners to video player.<br/>
+
+<h3>1.13.0</h3>
+- Added click listeners on Tweet views for URL and media clicks.<br/>
+- Fixed JavaDocs.<br/>
+- Removed Verisign Class 3 Certificate from pinning list.<br/>
+
 <h3>1.12.1</h3>
 - Fixed retrieving auth token when using OkHttp 2.3+.<br/>
 - Added gif or duration badge to media view.<br/>
diff --git a/twitter/src/main/java/com/twitter/sdk/android/Twitter.java b/twitter/src/main/java/com/twitter/sdk/android/Twitter.java
index 04fda8f5..be46556a 100644
--- a/twitter/src/main/java/com/twitter/sdk/android/Twitter.java
+++ b/twitter/src/main/java/com/twitter/sdk/android/Twitter.java
@@ -19,9 +19,7 @@
 
 import android.app.Activity;
 
-import com.digits.sdk.android.Digits;
 import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Session;
 import com.twitter.sdk.android.core.SessionManager;
 import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterSession;
@@ -48,7 +46,6 @@
     public final TwitterCore core;
     public final TweetUi tweetUi;
     public final TweetComposer tweetComposer;
-    public final Digits digits;
     public final Collection<? extends Kit> kits;
 
     public static Twitter getInstance() {
@@ -65,9 +62,7 @@ public Twitter(TwitterAuthConfig config) {
         core = new TwitterCore(config);
         tweetUi = new TweetUi();
         tweetComposer = new TweetComposer();
-        digits = new Digits();
-        kits = Collections.unmodifiableCollection(Arrays.asList(core, tweetUi, tweetComposer,
-                digits));
+        kits = Collections.unmodifiableCollection(Arrays.asList(core, tweetUi, tweetComposer));
     }
 
     @Override
@@ -152,7 +147,7 @@ public static TwitterApiClient getApiClient() {
      * @throws java.lang.IllegalStateException if {@link io.fabric.sdk.android.Fabric}
      *          or {@link Twitter} has not been initialized.
      */
-    public static TwitterApiClient getApiClient(Session session) {
+    public static TwitterApiClient getApiClient(TwitterSession session) {
         checkInitialized();
         return getInstance().core.getApiClient(session);
     }
diff --git a/twitter/src/main/resources/fabric/com.twitter.sdk.android.twitter.properties b/twitter/src/main/resources/fabric/com.twitter.sdk.android.twitter.properties
index 0861fed6..a4c41cbd 100644
--- a/twitter/src/main/resources/fabric/com.twitter.sdk.android.twitter.properties
+++ b/twitter/src/main/resources/fabric/com.twitter.sdk.android.twitter.properties
@@ -16,5 +16,5 @@
 #
 
 fabric-identifier=com.twitter.sdk.android:twitter
-fabric-version=1.12.1-SNAPSHOT
+fabric-version=2.3.2-SNAPSHOT
 fabric-build-type=source
diff --git a/twitter/src/test/java/com/twitter/sdk/android/TwitterTest.java b/twitter/src/test/java/com/twitter/sdk/android/TwitterTest.java
index f1aaf36d..0a3b8758 100644
--- a/twitter/src/test/java/com/twitter/sdk/android/TwitterTest.java
+++ b/twitter/src/test/java/com/twitter/sdk/android/TwitterTest.java
@@ -29,7 +29,7 @@
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)
 public class TwitterTest extends AndroidTestCase {
-    private static final int KIT_COUNT = 4;
+    private static final int KIT_COUNT = 3;
 
     private Twitter twitter;
 
@@ -61,11 +61,6 @@ public void testTweetComposer() {
         assertNotNull(twitter.tweetComposer);
     }
 
-    @Test
-    public void testDigits() {
-        assertNotNull(twitter.digits);
-    }
-
     @Test
     public void testGetKits_notNull() {
         assertNotNull(twitter.getKits());
@@ -90,9 +85,4 @@ public void testGetKits_containsTweetUi() {
     public void testGetKits_containsTweetComposer() {
         assertTrue(twitter.getKits().contains(twitter.tweetComposer));
     }
-
-    @Test
-    public void testGetKits_containsDigits() {
-        assertTrue(twitter.getKits().contains(twitter.digits));
-    }
 }
