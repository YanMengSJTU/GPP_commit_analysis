diff --git a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
index 49b05201..a315e424 100644
--- a/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
+++ b/samples/app/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
@@ -21,30 +21,21 @@
 import android.support.test.espresso.matcher.BoundedMatcher;
 import android.view.View;
 import android.widget.TextView;
-
 import com.example.app.R;
-
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 
-import java.lang.SuppressWarnings;
 import java.util.Locale;
 
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
-import static android.support.test.espresso.matcher.ViewMatchers.hasContentDescription;
-import static android.support.test.espresso.matcher.ViewMatchers.isClickable;
-import static android.support.test.espresso.matcher.ViewMatchers.isDescendantOfA;
-import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
-import static android.support.test.espresso.matcher.ViewMatchers.isFocusable;
-import static android.support.test.espresso.matcher.ViewMatchers.withId;
-import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static android.support.test.espresso.matcher.ViewMatchers.*;
 import static org.hamcrest.Matchers.allOf;
 import static org.hamcrest.Matchers.not;
 
 public abstract class TweetAsserts {
     @SuppressWarnings("PrivateResource")
-    public static void assertTweetText(int tweetResId, String expected) throws Exception {
+    public static void assertTweetText(int tweetResId, String expected) {
         onView(allOf(withId(R.id.tw__tweet_text),
                 isDescendantOfA(withId(tweetResId))))
                 .check(matches(isDisplayed()))
@@ -52,7 +43,7 @@ public static void assertTweetText(int tweetResId, String expected) throws Excep
     }
 
     @SuppressWarnings("PrivateResource")
-    public static void assertTweetTimestamp(int tweetResId, String expected) throws Exception {
+    public static void assertTweetTimestamp(int tweetResId, String expected) {
         onView(allOf(withId(R.id.tw__tweet_timestamp),
                 isDescendantOfA(withId(tweetResId))))
                 .check(matches(isDisplayed()))
@@ -127,11 +118,7 @@ public boolean matchesSafely(TextView view) {
                 if (drawables[2] != null && end == 0) {
                     return false;
                 }
-                if (drawables[3] != null && bottom == 0) {
-                    return false;
-                }
-
-                return true;
+                return drawables[3] == null || bottom != 0;
             }
         };
     }
diff --git a/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java b/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
index eb95e2e4..29b71864 100644
--- a/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
+++ b/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.tweetcomposer;
 
 import android.test.AndroidTestCase;
-
 import com.twitter.sdk.android.core.Twitter;
 import com.twitter.sdk.android.core.TwitterConfig;
 import com.twitter.sdk.android.core.TwitterCoreTestUtils;
@@ -39,13 +38,13 @@ public void setUp() throws Exception {
                 .executorService(mock(ThreadPoolExecutor.class))
                 .build());
         tweetComposer = new TweetComposer();
-        tweetComposer.instance = tweetComposer;
+        TweetComposer.instance = tweetComposer;
     }
 
     public void tearDown()  throws Exception {
         TwitterTestUtils.resetTwitter();
         TwitterCoreTestUtils.resetTwitterCore();
-        tweetComposer.instance = null;
+        TweetComposer.instance = null;
 
         super.tearDown();
     }
@@ -60,11 +59,11 @@ public void testGetIdentifier() {
         assertEquals(identifier, tweetComposer.getIdentifier());
     }
 
-    public void testGetInstance_twitterNotInitialized() throws Exception {
+    public void testGetInstance_twitterNotInitialized() {
         try {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
-            tweetComposer.instance = null;
+            TweetComposer.instance = null;
 
             TweetComposer.getInstance();
             fail("Should fail if Twitter is not initialized");
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
index be5b9f9b..e44a0489 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerActivityTest.java
@@ -20,22 +20,15 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
-
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterSession;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class ComposerActivityTest {
@@ -141,7 +134,7 @@ public void testBuilderText() {
     public void testBuilder_emptyArray() {
         final Intent intent = new ComposerActivity.Builder(mockContext)
                 .session(mockSession)
-                .hashtags(new String[0])
+                .hashtags()
                 .createIntent();
 
         assertNull(intent.getStringExtra(ComposerActivity.EXTRA_HASHTAGS));
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
index 40bcf5e6..a0ac8ec3 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
@@ -20,31 +20,23 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
-
 import com.twitter.Validator;
 import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.services.AccountService;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricTestRunner;
-
 import retrofit2.Call;
 
 import static com.twitter.sdk.android.tweetcomposer.TweetUploadService.TWEET_COMPOSE_CANCEL;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class ComposerControllerTest {
@@ -64,7 +56,7 @@
     private ComposerController.DependencyProvider mockDependencyProvider;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         mockComposerView = mock(ComposerView.class);
         mockContext = mock(Context.class);
         when(mockComposerView.getContext()).thenReturn(mockContext);
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClientTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClientTest.java
index 907011ec..4f8961b1 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClientTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClientTest.java
@@ -18,7 +18,6 @@
 
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -31,9 +30,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
@@ -50,19 +47,19 @@
     private ArgumentCaptor<List<ScribeItem>> scribeItemsCaptor;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         MockitoAnnotations.initMocks(this);
         composerScribeClient = new ComposerScribeClientImpl(mockClient);
     }
 
     @Test
-    public void testConstructor() throws Exception {
+    public void testConstructor() {
         composerScribeClient = new ComposerScribeClientImpl(mockClient);
         assertNotNull(composerScribeClient);
     }
 
     @Test
-    public void testConstructor_null() throws Exception {
+    public void testConstructor_null() {
         try {
             new ComposerScribeClientImpl(null);
             fail("expected scribeClient NullPointerException");
@@ -72,7 +69,7 @@ public void testConstructor_null() throws Exception {
     }
 
     @Test
-    public void testImpression() throws Exception {
+    public void testImpression() {
         composerScribeClient.impression();
         verify(mockClient).scribe(eventNamespaceCaptor.capture(), scribeItemsCaptor.capture());
         final EventNamespace eventNamespace = eventNamespaceCaptor.getValue();
@@ -81,7 +78,7 @@ public void testImpression() throws Exception {
     }
 
     @Test
-    public void testTweetClick() throws Exception {
+    public void testTweetClick() {
         composerScribeClient.click(ScribeConstants.SCRIBE_TWEET_ELEMENT);
         verify(mockClient).scribe(eventNamespaceCaptor.capture(), scribeItemsCaptor.capture());
         final EventNamespace eventNamespace = eventNamespaceCaptor.getValue();
@@ -90,7 +87,7 @@ public void testTweetClick() throws Exception {
     }
 
     @Test
-    public void testCancelClick() throws Exception {
+    public void testCancelClick() {
         composerScribeClient.click(ScribeConstants.SCRIBE_CANCEL_ELEMENT);
         verify(mockClient).scribe(eventNamespaceCaptor.capture(), scribeItemsCaptor.capture());
         final EventNamespace eventNamespace = eventNamespaceCaptor.getValue();
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImplTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImplTest.java
index 423fc63f..c24a5736 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImplTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImplTest.java
@@ -20,7 +20,6 @@
 import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -39,12 +38,12 @@
     private DefaultScribeClient mockDefaultScribeClient;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         MockitoAnnotations.initMocks(this);
     }
 
     @Test
-    public void testScribe() throws Exception {
+    public void testScribe() {
         final ScribeClient scribeClient = new ScribeClientImpl(mockDefaultScribeClient);
         final EventNamespace mockEventNamespace = mock(EventNamespace.class);
         final List<ScribeItem> mockItems = mock(List.class);
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
index 59418ae9..6d67e0b3 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
@@ -20,7 +20,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
-
 import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterException;
@@ -29,7 +28,7 @@
 import com.twitter.sdk.android.core.models.TweetBuilder;
 import com.twitter.sdk.android.core.services.MediaService;
 import com.twitter.sdk.android.core.services.StatusesService;
-
+import okhttp3.RequestBody;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -37,24 +36,18 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-
-import java.io.IOException;
-
-import okhttp3.RequestBody;
 import retrofit2.Call;
 import retrofit2.mock.Calls;
 
+import java.io.IOException;
+
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyLong;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TweetUploadServiceTest {
@@ -69,7 +62,7 @@
     private Tweet tweet;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         context = RuntimeEnvironment.application;
         mockMediaService = mock(MediaService.class);
         mockStatusesService = mock(StatusesService.class);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
index 0e2d7a8b..f0eb95d9 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
@@ -25,14 +25,13 @@
 import com.twitter.sdk.android.core.models.TweetBuilder;
 import com.twitter.sdk.android.core.models.TwitterCollection;
 import com.twitter.sdk.android.core.models.User;
+import retrofit2.Call;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
-import retrofit2.Call;
-
 /**
  * CollectionTimeline provides a timeline of tweets from the collections/collection API source.
  */
@@ -110,7 +109,7 @@ public void success(Result<TwitterCollection> result) {
             if (timelineCursor != null) {
                 timelineResult = new TimelineResult<>(timelineCursor, tweets);
             } else {
-                timelineResult = new TimelineResult<>(null, Collections.<Tweet>emptyList());
+                timelineResult = new TimelineResult<>(null, Collections.emptyList());
             }
             if (cb != null) {
                 cb.success(new Result(timelineResult, result.response));
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TwitterListTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TwitterListTimeline.java
index 12af812c..7f9329f7 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TwitterListTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TwitterListTimeline.java
@@ -20,11 +20,10 @@
 import com.twitter.sdk.android.core.Callback;
 import com.twitter.sdk.android.core.TwitterCore;
 import com.twitter.sdk.android.core.models.Tweet;
+import retrofit2.Call;
 
 import java.util.List;
 
-import retrofit2.Call;
-
 /**
  * TwitterListTimeline provides a timeline of tweets from the lists/statuses API source.
  */
@@ -166,7 +165,7 @@ public Builder includeRetweets(Boolean includeRetweets) {
          */
         public TwitterListTimeline build() {
             // user must provide either an id or slug, not both
-            if (!(listId == null ^ slug == null)) {
+            if ((listId == null) == (slug == null)) {
                 throw new IllegalStateException("must specify either a list id or slug/owner pair");
             }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
index b081f679..0a6fe7e2 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtils.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.tweetui.internal;
 
 import android.os.Build;
-
 import com.twitter.sdk.android.core.models.MediaEntity;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetEntities;
@@ -152,11 +151,8 @@ static boolean isVariantSupported(VideoInfo.Variant variant) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP &&
                 CONTENT_TYPE_HLS.equals(variant.contentType)) {
             return true;
-        } else if (CONTENT_TYPE_MP4.equals(variant.contentType)) {
-            return true;
-        }
+        } else return CONTENT_TYPE_MP4.equals(variant.contentType);
 
-        return false;
     }
 
     static List<MediaEntity> getAllMediaEntities(Tweet tweet) {
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
index 34bc8c6a..a5430d28 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetDateUtilsTest.java
@@ -19,7 +19,6 @@
 
 import android.content.res.Resources;
 import android.text.format.DateUtils;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -53,7 +52,7 @@ public void setUp() throws Exception {
     }
 
     @After
-    public void tearDown() throws Exception {
+    public void tearDown() {
         TimeZone.setDefault(realDefaultTimeZone);
     }
 
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
index ec0aa8a3..dc2250ff 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
@@ -18,15 +18,13 @@
 package com.twitter.sdk.android.core;
 
 import android.test.AndroidTestCase;
-
 import com.twitter.sdk.android.core.internal.TwitterApi;
 import com.twitter.sdk.android.core.services.FavoriteService;
 import com.twitter.sdk.android.core.services.StatusesService;
+import okhttp3.OkHttpClient;
 
 import java.util.concurrent.ExecutorService;
 
-import okhttp3.OkHttpClient;
-
 import static org.mockito.Mockito.mock;
 
 public class TwitterApiClientTest extends AndroidTestCase {
@@ -57,7 +55,7 @@ public void testGetService_sdkNotStarted() {
         }
     }
 
-    public void testConstructor_noSession() throws Exception {
+    public void testConstructor_noSession() {
         try {
             new TwitterApiClient((TwitterSession) null);
             fail();
@@ -66,26 +64,26 @@ public void testConstructor_noSession() throws Exception {
         }
     }
 
-    public void testGetService_cachedService() throws Exception {
+    public void testGetService_cachedService() {
         final TwitterApiClient client = newTwitterApiClient();
         final StatusesService service = client.getService(StatusesService.class);
         assertSame(service, client.getService(StatusesService.class));
     }
 
-    public void testGetService_differentServices() throws Exception {
+    public void testGetService_differentServices() {
         final TwitterApiClient client = newTwitterApiClient();
         final FavoriteService service = client.getService(FavoriteService.class);
         assertNotSame(service, client.getService(StatusesService.class));
     }
 
-    public void testApiClient_cachedGuestAuthClient() throws Exception {
+    public void testApiClient_cachedGuestAuthClient() {
         final TwitterApiClient customApiClient = new TwitterApiClient(newOkHttpClient());
         TwitterCore.getInstance().addGuestApiClient(customApiClient);
 
         assertEquals(customApiClient, TwitterCore.getInstance().getGuestApiClient());
     }
 
-    public void testApiClient_cachedUserAuthApiClient() throws Exception {
+    public void testApiClient_cachedUserAuthApiClient() {
         final TwitterSession mockUserSession = mock(TwitterSession.class);
         final TwitterApiClient customApiClient =
                 new TwitterApiClient(mockUserSession, newOkHttpClient());
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
index 47acc2de..535f866d 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
@@ -57,7 +57,7 @@ public void testGuestSessionManager_noSdkStart() {
         }
     }
 
-    public void testGuestSessionManager_sdkStartNoTwitterKit() throws Exception {
+    public void testGuestSessionManager_sdkStartNoTwitterKit() {
         try {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
@@ -73,11 +73,11 @@ public void testGetIdentifier() {
         assertEquals(identifier, twitterCore.getIdentifier());
     }
 
-    public void testGetSessionManager() throws Exception {
+    public void testGetSessionManager() {
         assertNotNull(twitterCore.getSessionManager());
     }
 
-    public void testGetSessionManager_twitterNotInitialized() throws Exception {
+    public void testGetSessionManager_twitterNotInitialized() {
         try {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
@@ -88,11 +88,11 @@ public void testGetSessionManager_twitterNotInitialized() throws Exception {
         }
     }
 
-    public void testGetAppSessionManager() throws Exception {
+    public void testGetAppSessionManager() {
         assertNotNull(twitterCore.getGuestSessionProvider());
     }
 
-    public void testGetAppSessionManager_twitterNotInitialized() throws Exception {
+    public void testGetAppSessionManager_twitterNotInitialized() {
         try {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
@@ -103,12 +103,12 @@ public void testGetAppSessionManager_twitterNotInitialized() throws Exception {
         }
     }
 
-    public void testGetApiClient_activeSessionExists() throws Exception {
+    public void testGetApiClient_activeSessionExists() {
         twitterCore.twitterSessionManager = setUpSessionManager(mock(TwitterSession.class));
         assertNotNull(twitterCore.getApiClient());
     }
 
-    public void testGetApiClient_twitterNotInitialized() throws Exception {
+    public void testGetApiClient_twitterNotInitialized() {
         try {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
@@ -119,11 +119,11 @@ public void testGetApiClient_twitterNotInitialized() throws Exception {
         }
     }
 
-    public void testGetApiClient_withSession() throws Exception {
+    public void testGetApiClient_withSession() {
         assertNotNull(twitterCore.getApiClient(mock(TwitterSession.class)));
     }
 
-    public void testGetApiClient_withSessionTwitterNotInitialized() throws Exception {
+    public void testGetApiClient_withSessionTwitterNotInitialized() {
         try {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
@@ -134,7 +134,7 @@ public void testGetApiClient_withSessionTwitterNotInitialized() throws Exception
         }
     }
 
-    public void testGetGuestApiClient_twitterNotInitialized() throws Exception {
+    public void testGetGuestApiClient_twitterNotInitialized() {
         try {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java
index 916d5c75..d118fb53 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java
@@ -22,30 +22,12 @@
 import android.test.AndroidTestCase;
 import android.util.Log;
 import android.view.View;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Logger;
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterConfig;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterCoreTestUtils;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.TwitterTestUtils;
-
+import com.twitter.sdk.android.core.*;
 import org.mockito.ArgumentCaptor;
 
 import java.util.concurrent.ExecutorService;
 
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyInt;
-import static org.mockito.Mockito.anyString;
-import static org.mockito.Mockito.doNothing;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.*;
 
 public class TwitterLoginButtonTest extends AndroidTestCase {
 
@@ -109,7 +91,7 @@ protected Activity getActivity() {
         assertNull(button.authClient);
     }
 
-    public void testConstructor_editMode() throws Exception {
+    public void testConstructor_editMode() {
             final TwitterLoginButton button = new TwitterLoginButton(getContext()) {
                 @Override
                 protected Activity getActivity() {
@@ -124,7 +106,7 @@ public boolean isInEditMode() {
             assertTrue(button.isEnabled());
     }
 
-    public void testConstructor_twitterNotStarted() throws Exception {
+    public void testConstructor_twitterNotStarted() {
         try {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
@@ -142,7 +124,7 @@ protected Activity getActivity() {
         }
     }
 
-    public void testConstructor_twitterStarted() throws Exception {
+    public void testConstructor_twitterStarted() {
         try {
             Twitter.initialize(setUpLogTest());
 
@@ -192,7 +174,7 @@ public void testOnClick_withOnClickListener() {
         verify(mockViewClickListener).onClick(eq(loginButton));
     }
 
-    public void testOnClick_callbackNullDebuggableTrue() throws Exception {
+    public void testOnClick_callbackNullDebuggableTrue() {
         Twitter.initialize(new TwitterConfig.Builder(getContext())
                 .executorService(mock(ExecutorService.class))
                 .debug(true)
@@ -208,7 +190,7 @@ public void testOnClick_callbackNullDebuggableTrue() throws Exception {
         }
     }
 
-    public void testOnClick_callbackNullDebuggableFalse() throws Exception {
+    public void testOnClick_callbackNullDebuggableFalse() {
         Twitter.initialize(setUpLogTest());
         try {
             loginButton.performClick();
@@ -219,7 +201,7 @@ public void testOnClick_callbackNullDebuggableFalse() throws Exception {
         }
     }
 
-    public void testOnClick_activityNullDebuggableTrue() throws Exception {
+    public void testOnClick_activityNullDebuggableTrue() {
         Twitter.initialize(new TwitterConfig.Builder(getContext())
                 .executorService(mock(ExecutorService.class))
                 .debug(true)
@@ -245,7 +227,7 @@ protected Activity getActivity() {
         }
     }
 
-    public void testOnClick_activityNullDebuggableFalse() throws Exception {
+    public void testOnClick_activityNullDebuggableFalse() {
         Twitter.initialize(setUpLogTest());
         loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) {
             // This is to allow us to test TwitterLoginButton without having to set up a real
@@ -266,7 +248,7 @@ protected Activity getActivity() {
         }
     }
 
-    public void testOnClick_activityFinishingDebuggableFalse() throws Exception {
+    public void testOnClick_activityFinishingDebuggableFalse() {
         Twitter.initialize(setUpLogTest());
         loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient) {
             // This is to allow us to test TwitterLoginButton without having to set up a real
@@ -325,7 +307,7 @@ public void testOnActivityResult_requestCodeDoesNotMatch() {
         verifyNoMoreInteractions(mockAuthClient);
     }
 
-    public void testGetTwitterAuthClient() throws Exception {
+    public void testGetTwitterAuthClient() {
         try {
             Twitter.initialize(new TwitterConfig.Builder(getContext())
                     .executorService(mock(ExecutorService.class))
@@ -346,7 +328,7 @@ protected Activity getActivity() {
         }
     }
 
-    public void testGetTwitterAuthClient_duplicateCalls() throws Exception {
+    public void testGetTwitterAuthClient_duplicateCalls() {
         try {
             Twitter.initialize(new TwitterConfig.Builder(getContext())
                     .executorService(mock(ExecutorService.class))
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
index 1c5e1922..ce43ec59 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
@@ -19,7 +19,6 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-
 import com.google.gson.annotations.SerializedName;
 
 /**
@@ -96,9 +95,7 @@ public boolean equals(Object o) {
         final TwitterAuthToken that = (TwitterAuthToken) o;
 
         if (secret != null ? !secret.equals(that.secret) : that.secret != null) return false;
-        if (token != null ? !token.equals(that.token) : that.token != null) return false;
-
-        return true;
+        return token != null ? token.equals(that.token) : that.token == null;
     }
 
     @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.java
index 86e64988..4ecd3738 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.java
@@ -19,7 +19,6 @@
 
 import android.content.Context;
 import android.content.res.Resources;
-
 import com.twitter.sdk.android.core.Twitter;
 
 import java.io.Closeable;
@@ -33,7 +32,7 @@
     static final boolean TRACE_ENABLED_DEFAULT = false;
     private static Boolean clsTrace;
 
-    public static String streamToString(InputStream is) throws IOException {
+    public static String streamToString(InputStream is) {
         // Previous code was running into this: http://code.google.com/p/android/issues/detail?id=14562
         // on Android 2.3.3. The below code, cribbed from: http://weblogs.java.net/blog/pat/archive/2004/10/stupid_scanner_1.html
         // does not exhibit that problem.
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java
index fc73e658..eff93bad 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java
@@ -21,14 +21,7 @@
 import com.twitter.sdk.android.core.GuestSessionProvider;
 import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
 import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-
-import java.io.IOException;
-
-import okhttp3.Authenticator;
-import okhttp3.Headers;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.Route;
+import okhttp3.*;
 
 /**
  * Refreshes guest auth session when server indicates session is expired.
@@ -42,7 +35,7 @@ public GuestAuthenticator(GuestSessionProvider guestSessionProvider) {
     }
 
     @Override
-    public Request authenticate(Route route, Response response) throws IOException {
+    public Request authenticate(Route route, Response response) {
         return reauth(response);
     }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java
index 74a654bd..60f62237 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java
@@ -22,19 +22,13 @@
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;
 import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
+import okhttp3.*;
 
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 
-import okhttp3.FormBody;
-import okhttp3.HttpUrl;
-import okhttp3.Interceptor;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
 /**
  * Signs requests with OAuth1a signature
  */
@@ -75,13 +69,13 @@ HttpUrl urlWorkaround(HttpUrl url) {
         return builder.build();
     }
 
-    String getAuthorizationHeader(Request request) throws IOException {
+    String getAuthorizationHeader(Request request) {
         return new OAuth1aHeaders().getAuthorizationHeader(authConfig,
                 session.getAuthToken(), null, request.method(), request.url().toString(),
                 getPostParams(request));
     }
 
-    Map<String, String> getPostParams(Request request) throws IOException {
+    Map<String, String> getPostParams(Request request) {
         final Map<String, String> params = new HashMap<>();
         if ("POST".equals(request.method().toUpperCase(Locale.US))) {
             final RequestBody output = request.body();
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
index 352c0def..e33f33b5 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.core.internal.oauth;
 
 import android.text.format.DateUtils;
-
 import com.google.gson.annotations.SerializedName;
 
 public class GuestAuthToken extends OAuth2Token {
@@ -63,10 +62,7 @@ public boolean equals(Object o) {
 
         final GuestAuthToken that = (GuestAuthToken) o;
 
-        if (guestToken != null ? !guestToken.equals(that.guestToken) : that.guestToken != null)
-            return false;
-
-        return true;
+        return guestToken != null ? guestToken.equals(that.guestToken) : that.guestToken == null;
     }
 
     @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java
index bcbd56a9..eaa631ef 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java
@@ -19,7 +19,6 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-
 import com.google.gson.annotations.SerializedName;
 import com.twitter.sdk.android.core.AuthToken;
 
@@ -100,10 +99,7 @@ public boolean equals(Object o) {
 
         if (accessToken != null ? !accessToken.equals(that.accessToken) : that.accessToken != null)
             return false;
-        if (tokenType != null ? !tokenType.equals(that.tokenType) : that.tokenType != null)
-            return false;
-
-        return true;
+        return tokenType != null ? tokenType.equals(that.tokenType) : that.tokenType == null;
     }
 
     @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/EventNamespace.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/EventNamespace.java
index 5de1a7c8..4359536e 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/EventNamespace.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/EventNamespace.java
@@ -77,11 +77,7 @@ public boolean equals(Object o) {
             return false;
         }
         if (page != null ? !page.equals(that.page) : that.page != null) return false;
-        if (section != null ? !section.equals(that.section) : that.section != null) {
-            return false;
-        }
-
-        return true;
+        return section != null ? section.equals(that.section) : that.section == null;
     }
 
     @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManager.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManager.java
index a4a9bfd7..6ee8666b 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManager.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManager.java
@@ -19,7 +19,6 @@
 
 import android.content.Context;
 import android.util.Log;
-
 import com.twitter.sdk.android.core.Twitter;
 import com.twitter.sdk.android.core.internal.CommonUtils;
 import com.twitter.sdk.android.core.internal.CurrentTimeProvider;
@@ -63,12 +62,10 @@
      *                              on device. This is useful for providing a constant maximum, or
      *                              a default value that varies based on overriding
      *                              {@link #getMaxFilesToKeep()}
-     * @throws IOException
      */
     EventsFilesManager(Context context, EventTransform<T> transform,
-            CurrentTimeProvider currentTimeProvider, EventsStorage eventStorage,
-            int defaultMaxFilesToKeep)
-            throws IOException {
+                       CurrentTimeProvider currentTimeProvider, EventsStorage eventStorage,
+                       int defaultMaxFilesToKeep) {
         this.context = context.getApplicationContext();
         this.transform = transform;
         this.eventStorage = eventStorage;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/QueueFile.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/QueueFile.java
index dd2ff8f8..1251b1b5 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/QueueFile.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/QueueFile.java
@@ -37,12 +37,7 @@
  */
 package com.twitter.sdk.android.core.internal.scribe;
 
-import java.io.Closeable;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.RandomAccessFile;
+import java.io.*;
 import java.nio.channels.FileChannel;
 import java.util.NoSuchElementException;
 import java.util.logging.Level;
@@ -564,7 +559,7 @@ public String toString() {
                 boolean first = true;
 
                 @Override
-                public void read(InputStream in, int length) throws IOException {
+                public void read(InputStream in, int length) {
                     if (first) {
                         first = false;
                     } else {
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeEvent.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeEvent.java
index 57fa45ff..81bc6ef1 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeEvent.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/ScribeEvent.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.core.internal.scribe;
 
 import android.text.TextUtils;
-
 import com.google.gson.Gson;
 import com.google.gson.annotations.SerializedName;
 
@@ -107,11 +106,7 @@ public boolean equals(Object o) {
             return false;
         }
 
-        if (items != null ? !items.equals(that.items) : that.items != null) {
-            return false;
-        }
-
-        return true;
+        return items != null ? items.equals(that.items) : that.items == null;
     }
 
     @Override
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
index 8000dc6f..5d1dadb7 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
@@ -25,16 +25,14 @@
 import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
-
-import org.junit.Test;
-
 import nl.jqno.equalsverifier.EqualsVerifier;
 import nl.jqno.equalsverifier.Warning;
+import org.junit.Test;
 
 public class EqualsHashCodeTest {
 
     @Test
-    public void testTwitterAuthToken() throws Exception {
+    public void testTwitterAuthToken() {
         EqualsVerifier.forClass(TwitterAuthToken.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .withIgnoredFields("createdAt")
@@ -42,7 +40,7 @@ public void testTwitterAuthToken() throws Exception {
     }
 
     @Test
-    public void testOAuth2Token() throws Exception {
+    public void testOAuth2Token() {
         EqualsVerifier.forClass(OAuth2Token.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .withIgnoredFields("createdAt")
@@ -51,7 +49,7 @@ public void testOAuth2Token() throws Exception {
     }
 
     @Test
-    public void testGuestAuthToken() throws Exception {
+    public void testGuestAuthToken() {
         EqualsVerifier.forClass(GuestAuthToken.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .withIgnoredFields("createdAt")
@@ -60,7 +58,7 @@ public void testGuestAuthToken() throws Exception {
     }
 
     @Test
-    public void testSession() throws Exception {
+    public void testSession() {
         EqualsVerifier.forClass(Session.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .usingGetClass()
@@ -68,7 +66,7 @@ public void testSession() throws Exception {
     }
 
     @Test
-    public void testGuestSession() throws Exception {
+    public void testGuestSession() {
         EqualsVerifier.forClass(GuestSession.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .usingGetClass()
@@ -76,7 +74,7 @@ public void testGuestSession() throws Exception {
     }
 
     @Test
-    public void testTwitterSession() throws Exception {
+    public void testTwitterSession() {
         EqualsVerifier.forClass(TwitterSession.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .usingGetClass()
@@ -84,7 +82,7 @@ public void testTwitterSession() throws Exception {
     }
 
     @Test
-    public void testEventNamespace() throws Exception {
+    public void testEventNamespace() {
         EqualsVerifier.forClass(EventNamespace.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .usingGetClass()
@@ -92,7 +90,7 @@ public void testEventNamespace() throws Exception {
     }
 
     @Test
-    public void testScribeEvent() throws Exception {
+    public void testScribeEvent() {
         EqualsVerifier.forClass(ScribeEvent.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .usingGetClass()
@@ -100,7 +98,7 @@ public void testScribeEvent() throws Exception {
     }
 
     @Test
-    public void testScribeItem() throws Exception {
+    public void testScribeItem() {
         EqualsVerifier.forClass(ScribeItem.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .usingGetClass()
@@ -108,7 +106,7 @@ public void testScribeItem() throws Exception {
     }
 
     @Test
-    public void testMediaDetails() throws Exception {
+    public void testMediaDetails() {
         EqualsVerifier.forClass(ScribeItem.MediaDetails.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .usingGetClass()
@@ -116,7 +114,7 @@ public void testMediaDetails() throws Exception {
     }
 
     @Test
-    public void testCardEvent() throws Exception {
+    public void testCardEvent() {
         EqualsVerifier.forClass(ScribeItem.CardEvent.class)
                 .suppress(Warning.STRICT_INHERITANCE)
                 .usingGetClass()
@@ -124,7 +122,7 @@ public void testCardEvent() throws Exception {
     }
 
     @Test
-    public void testTweet() throws Exception {
+    public void testTweet() {
         final Tweet tweet01 = new TweetBuilder().setId(123456).build();
         final Tweet tweet02 = new TweetBuilder().setId(654321).build();
         EqualsVerifier.forClass(Tweet.class)
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
index ac8c481a..14d7a595 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
@@ -18,12 +18,10 @@
 package com.twitter.sdk.android.core;
 
 import android.content.SharedPreferences;
-
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStore;
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreImpl;
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreStrategy;
 import com.twitter.sdk.android.core.internal.persistence.SerializationStrategy;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -35,15 +33,8 @@
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class PersistedSessionManagerTest {
@@ -74,7 +65,7 @@ public void setUp() throws Exception {
     }
 
     @After
-    public void tearDown() throws Exception {
+    public void tearDown() {
         preferenceStore.edit().clear().commit();
     }
 
@@ -143,7 +134,7 @@ public void testRestoreSession_invalidPreferenceKey() {
     }
 
     @Test
-    public void testRestoreSession_multipleRestoreCalls() throws Exception {
+    public void testRestoreSession_multipleRestoreCalls() {
         final TwitterSession mockSession = mock(TwitterSession.class);
         when(mockActiveSessionStorage.restore()).thenReturn(mockSession);
 
@@ -155,7 +146,7 @@ public void testRestoreSession_multipleRestoreCalls() throws Exception {
     }
 
     @Test
-    public void testRestoreSession_afterActiveSessionSetExternally() throws Exception {
+    public void testRestoreSession_afterActiveSessionSetExternally() {
         final TwitterSession mockRestoredSession = mock(TwitterSession.class);
         when(mockActiveSessionStorage.restore()).thenReturn(mockRestoredSession);
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java
index bc51f745..4e68c6c3 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/PreferenceStoreStrategyTest.java
@@ -20,7 +20,6 @@
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStore;
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreImpl;
 import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreStrategy;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -43,24 +42,24 @@ public void setUp() throws Exception {
     }
 
     @After
-    public void tearDown() throws Exception {
+    public void tearDown() {
         preferenceStrategy.clear();
     }
 
     @Test
-    public void testRestore_emptyStore() throws Exception {
+    public void testRestore_emptyStore() {
         assertEquals(null, preferenceStrategy.restore());
     }
 
     @Test
-    public void testSaveAndRestore_nullSession() throws Exception {
+    public void testSaveAndRestore_nullSession() {
         preferenceStrategy.save(null);
         final TwitterSession restoredSession = preferenceStrategy.restore();
         assertEquals(null, restoredSession);
     }
 
     @Test
-    public void testSaveAndRestore_session() throws Exception {
+    public void testSaveAndRestore_session() {
         final TwitterSession session = new TwitterSession(new TwitterAuthToken
                 (TestFixtures.TOKEN, TestFixtures.SECRET), TwitterSession.UNKNOWN_USER_ID,
                 TwitterSession.UNKNOWN_USER_NAME);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
index 1eac7c8a..638e0de5 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterApiExceptionTest.java
@@ -18,13 +18,10 @@
 package com.twitter.sdk.android.core;
 
 import com.twitter.sdk.android.core.models.ApiError;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
@@ -43,32 +40,32 @@
     private static final String API_ERROR_NON_JSON = "not a json";
 
     @Test
-    public void testParseErrorCode() throws IOException {
+    public void testParseErrorCode() {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_JSON);
         assertEquals(API_ERROR_CODE, apiError.code);
         assertEquals(API_ERROR_MESSAGE, apiError.message);
     }
 
     @Test
-    public void testParseError_nonJSON() throws Exception {
+    public void testParseError_nonJSON() {
         assertNull(TwitterApiException.parseApiError(API_ERROR_NON_JSON));
     }
 
     @Test
-    public void testParseError_noErrorCode() throws Exception {
+    public void testParseError_noErrorCode() {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERROR_CODE);
         assertEquals(DEFAULT_ERROR_CODE, apiError.code);
         assertEquals(API_ERROR_MESSAGE, apiError.message);
     }
 
     @Test
-    public void testParseError_noErrors() throws Exception {
+    public void testParseError_noErrors() {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERRORS);
         assertNull(apiError);
     }
 
     @Test
-    public void testParseError_noMessage() throws Exception {
+    public void testParseError_noMessage() {
         final ApiError apiError = TwitterApiException.parseApiError(API_ERROR_NO_ERROR_MESSAGE);
         assertEquals(API_ERROR_CODE, apiError.code);
         assertEquals(null, apiError.message);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java
index b2396fde..0caeb6d1 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionSerializerTest.java
@@ -58,7 +58,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialize_sessionWithAuthToken() throws Exception {
+    public void testDeserialize_sessionWithAuthToken() {
         final TwitterSession session = serializer.deserialize(SESSION_JSON);
         final TwitterSession newSession = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
@@ -67,7 +67,7 @@ public void testDeserialize_sessionWithAuthToken() throws Exception {
     }
 
     @Test
-    public void testDeserialize_session() throws Exception {
+    public void testDeserialize_session() {
         final TwitterSession session = serializer.deserialize(FULL_SESSION_JSON);
         assertEquals(new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN,
                 TestFixtures.SECRET, CREATED_AT), TestFixtures.USER_ID, TestFixtures.SCREEN_NAME),
@@ -75,20 +75,20 @@ public void testDeserialize_session() throws Exception {
     }
 
     @Test
-    public void testDeserialize_sessionWithNullUserName() throws Exception {
+    public void testDeserialize_sessionWithNullUserName() {
         final TwitterSession session = serializer.deserialize(SESSION_JSON_NULL_USERNAME);
         assertEquals(new TwitterSession(new TwitterAuthToken(TestFixtures.TOKEN,
                 TestFixtures.SECRET, CREATED_AT), TestFixtures.USER_ID, null), session);
     }
 
     @Test
-    public void testDeserialize_nullSerializedSession() throws Exception {
+    public void testDeserialize_nullSerializedSession() {
         final TwitterSession session = serializer.deserialize(null);
         assertNull(session);
     }
 
     @Test
-    public void testSerialize_sessionWithAuthToken() throws Exception {
+    public void testSerialize_sessionWithAuthToken() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
                 TwitterSession.UNKNOWN_USER_ID, TwitterSession.UNKNOWN_USER_NAME);
@@ -96,7 +96,7 @@ public void testSerialize_sessionWithAuthToken() throws Exception {
     }
 
     @Test
-    public void testSerialize_session() throws Exception {
+    public void testSerialize_session() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
                 TestFixtures.USER_ID, TestFixtures.SCREEN_NAME);
@@ -104,7 +104,7 @@ public void testSerialize_session() throws Exception {
     }
 
     @Test
-    public void testSerialize_sessionWithNullUserName() throws Exception {
+    public void testSerialize_sessionWithNullUserName() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET, CREATED_AT),
                 TestFixtures.USER_ID, null);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java
index 9dcba18d..f7cf3e01 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterSessionTest.java
@@ -21,15 +21,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.fail;
+import static org.junit.Assert.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TwitterSessionTest  {
 
     @Test
-    public void testConstructor_noAuthToken() throws Exception {
+    public void testConstructor_noAuthToken() {
         try {
             final TwitterSession session = new TwitterSession(null, TwitterSession.UNKNOWN_USER_ID,
                     TwitterSession.UNKNOWN_USER_NAME);
@@ -40,7 +38,7 @@ public void testConstructor_noAuthToken() throws Exception {
     }
 
     @Test
-    public void testEquals_sameObjects() throws Exception {
+    public void testEquals_sameObjects() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
                 TestFixtures.SCREEN_NAME);
@@ -52,7 +50,7 @@ public void testEquals_sameObjects() throws Exception {
     }
 
     @Test
-    public void testEquals_sameObjectsWithNullUserName() throws Exception {
+    public void testEquals_sameObjectsWithNullUserName() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
                 null);
@@ -64,7 +62,7 @@ public void testEquals_sameObjectsWithNullUserName() throws Exception {
     }
 
     @Test
-    public void testEquals_diffObjects() throws Exception {
+    public void testEquals_diffObjects() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
                 TestFixtures.SCREEN_NAME);
@@ -76,7 +74,7 @@ public void testEquals_diffObjects() throws Exception {
     }
 
     @Test
-    public void testEquals_diffObjectsWithNullUserName() throws Exception {
+    public void testEquals_diffObjectsWithNullUserName() {
         final TwitterSession session = new TwitterSession(
                 new TwitterAuthToken(TestFixtures.TOKEN, TestFixtures.SECRET), TestFixtures.USER_ID,
                 null);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClientTest.java
index 7e678ed6..527c76d1 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClientTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClientTest.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.core.identity;
 
 import android.webkit.ConsoleMessage;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -38,7 +37,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testOnConsoleMessage() throws Exception {
+    public void testOnConsoleMessage() {
         final ConsoleMessage message = mock(ConsoleMessage.class);
         client.onConsoleMessage(message);
         verifyZeroInteractions(message);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java
index 4ed049f7..cc0a5504 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/ExecutorUtilsTest.java
@@ -48,12 +48,12 @@ public void testBuildThreadScheduledExecutorService() throws Exception {
     }
 
     @Test
-    public void testGetNamedThreadFactory() throws Exception {
+    public void testGetNamedThreadFactory() {
         verifyGetNamedThreadFactory(THREAD_FACTORY_NAME);
     }
 
     @Test
-    public void testGetNamedThreadFactory_nullName() throws Exception {
+    public void testGetNamedThreadFactory_nullName() {
         verifyGetNamedThreadFactory(null);
     }
 
@@ -70,7 +70,7 @@ private void verifyGetNamedThreadFactory(String threadFactorName) {
 
     private static class ThreadNameCallable implements Callable<String> {
         @Override
-        public String call() throws Exception {
+        public String call() {
             return Thread.currentThread().getName();
         }
     }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
index 86c670ae..d109f34f 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/OkHttpClientHelperTest.java
@@ -21,16 +21,14 @@
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.internal.network.OkHttpClientHelper;
-
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
 import java.util.List;
 
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 
@@ -38,7 +36,7 @@
 public class OkHttpClientHelperTest {
 
     @Test
-    public void testGetCustomOkHttpClient_guestAuth() throws Exception {
+    public void testGetCustomOkHttpClient_guestAuth() {
         final Interceptor mockInterceptor = mock(Interceptor.class);
         final OkHttpClient customHttpClient = new OkHttpClient.Builder()
                 .addInterceptor(mockInterceptor).build();
@@ -53,7 +51,7 @@ public void testGetCustomOkHttpClient_guestAuth() throws Exception {
     }
 
     @Test
-    public void testGetCustomOkHttpClient_userAuth() throws Exception {
+    public void testGetCustomOkHttpClient_userAuth() {
         final Interceptor mockInterceptor = mock(Interceptor.class);
         final OkHttpClient customHttpClient = new OkHttpClient.Builder()
                 .addInterceptor(mockInterceptor).build();
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
index d2ebf792..7a89ce69 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
@@ -23,24 +23,19 @@
 import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.services.AccountService;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricTestRunner;
+import retrofit2.mock.Calls;
 
 import java.io.IOException;
 
-import retrofit2.mock.Calls;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TwitterSessionVerifierTest {
@@ -70,7 +65,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testVerifySession() throws Exception {
+    public void testVerifySession() {
 
         final ArgumentCaptor<EventNamespace> namespaceCaptor
                 = ArgumentCaptor.forClass(EventNamespace.class);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java
index cd08d802..99c13109 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeadersTest.java
@@ -20,7 +20,6 @@
 
 import com.twitter.sdk.android.core.TwitterAuthConfig;
 import com.twitter.sdk.android.core.TwitterAuthToken;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -46,7 +45,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testGetOAuthEchoHeaders() throws Exception {
+    public void testGetOAuthEchoHeaders() {
         final TwitterAuthConfig config = mock(TwitterAuthConfig.class);
         final TwitterAuthToken token = mock(TwitterAuthToken.class);
 
@@ -59,7 +58,7 @@ public void testGetOAuthEchoHeaders() throws Exception {
     }
 
     @Test
-    public void testGetAuthorizationHeader() throws Exception {
+    public void testGetAuthorizationHeader() {
         final TwitterAuthConfig config = mock(TwitterAuthConfig.class);
         final TwitterAuthToken token = mock(TwitterAuthToken.class);
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
index d0a896f0..311736b3 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
@@ -17,38 +17,22 @@
 
 package com.twitter.sdk.android.core.internal.oauth;
 
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
+import com.twitter.sdk.android.core.*;
 import com.twitter.sdk.android.core.internal.TwitterApi;
-
+import okhttp3.MediaType;
+import okhttp3.ResponseBody;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import okhttp3.MediaType;
-import okhttp3.ResponseBody;
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.http.Header;
 import retrofit2.http.Query;
 import retrofit2.mock.Calls;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 @SuppressWarnings("checkstyle:linelength")
@@ -74,7 +58,7 @@ public void testGetTempTokenUrl() {
     }
 
     @Test
-    public void testGetAccessTokenUrl() throws NoSuchMethodException {
+    public void testGetAccessTokenUrl() {
         assertEquals("https://api.twitter.com/oauth/access_token", service.getAccessTokenUrl());
     }
 
@@ -199,7 +183,7 @@ public void testParseAuthResponse_noUserId() {
     }
 
     @Test
-    public void testCallbackWrapperSuccess() throws IOException {
+    public void testCallbackWrapperSuccess() {
         final String response = "oauth_token=7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4&"
                 + "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
                 + "screen_name=test&user_id=1";
@@ -224,7 +208,7 @@ public void failure(TwitterException exception) {
     }
 
     private void setupCallbackWrapperTest(String responseStr,
-                                          Callback<OAuthResponse> authResponseCallback) throws IOException {
+                                          Callback<OAuthResponse> authResponseCallback) {
         final Callback<ResponseBody> callbackWrapper = service.getCallbackWrapper(authResponseCallback);
         final ResponseBody responseBody = ResponseBody.create(MediaType.parse("application/json"), responseStr);
         final Response<ResponseBody> response = Response.success(responseBody);
@@ -233,7 +217,7 @@ private void setupCallbackWrapperTest(String responseStr,
     }
 
     @Test
-    public void testCallbackWrapperSuccess_noToken() throws IOException {
+    public void testCallbackWrapperSuccess_noToken() {
         final String response = "oauth_token_secret=PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo&"
                 + "screen_name=test&user_id=1";
         final Callback<OAuthResponse> callback = new Callback<OAuthResponse>() {
@@ -251,7 +235,7 @@ public void failure(TwitterException exception) {
     }
 
     @Test
-    public void testCallbackWrapperSuccess_iOException() throws IOException {
+    public void testCallbackWrapperSuccess_iOException() {
         final Callback<OAuthResponse> callback = new Callback<OAuthResponse>() {
             @Override
             public void success(Result<OAuthResponse> result) {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledEventsStrategyTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledEventsStrategyTest.java
index ffedf7cb..4e0d5b62 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledEventsStrategyTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EnabledEventsStrategyTest.java
@@ -32,19 +32,8 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class EnabledEventsStrategyTest {
@@ -64,7 +53,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testScheduleTimeBasedRollOverIfNeeded() throws Exception {
+    public void testScheduleTimeBasedRollOverIfNeeded() {
         final int rollover = 10;
         eventsStrategy.rolloverIntervalSeconds = rollover;
         eventsStrategy.scheduleTimeBasedRollOverIfNeeded();
@@ -72,13 +61,13 @@ public void testScheduleTimeBasedRollOverIfNeeded() throws Exception {
     }
 
     @Test
-    public void testScheduleTimeBasedRollOverIfNeeded_noRollOverInterval() throws Exception {
+    public void testScheduleTimeBasedRollOverIfNeeded_noRollOverInterval() {
         eventsStrategy.scheduleTimeBasedRollOverIfNeeded();
         verifyZeroInteractions(mockExecutor);
     }
 
     @Test
-    public void testCancelTimeBasedFileRollOver() throws Exception {
+    public void testCancelTimeBasedFileRollOver() {
         final ScheduledFuture mockFuture = mock(ScheduledFuture.class);
         eventsStrategy.scheduledRolloverFutureRef.set(mockFuture);
 
@@ -89,7 +78,7 @@ public void testCancelTimeBasedFileRollOver() throws Exception {
     }
 
     @Test
-    public void testDeleteAllEvents() throws Exception {
+    public void testDeleteAllEvents() {
         eventsStrategy.deleteAllEvents();
         verify(mockFilesManager).deleteAllEventsFiles();
     }
@@ -123,7 +112,7 @@ public void testRollFileOver_exception() throws Exception {
     }
 
     @Test
-    public void testConfigureRollover() throws Exception {
+    public void testConfigureRollover() {
         final int rollover = 10;
         eventsStrategy.configureRollover(rollover);
         assertEquals(rollover, eventsStrategy.rolloverIntervalSeconds);
@@ -131,7 +120,7 @@ public void testConfigureRollover() throws Exception {
     }
 
     @Test
-    public void testScheduleTimeBasedFileRollOver() throws Exception {
+    public void testScheduleTimeBasedFileRollOver() {
         final long initialDelay = 10L;
         final long frequency = 20L;
         final ScheduledFuture<?> mockFuture = mock(ScheduledFuture.class);
@@ -146,7 +135,7 @@ public void testScheduleTimeBasedFileRollOver() throws Exception {
     }
 
     @Test
-    public void testScheduleTimeBasedRollOver_rollOverScheduled() throws Exception {
+    public void testScheduleTimeBasedRollOver_rollOverScheduled() {
         final long initialDelay = 10L;
         final long frequency = 20L;
         final ScheduledFuture<?> mockFuture = mock(ScheduledFuture.class);
@@ -157,7 +146,7 @@ public void testScheduleTimeBasedRollOver_rollOverScheduled() throws Exception {
     }
 
     @Test
-    public void testSendAndCleanUpIfSuccess() throws Exception {
+    public void testSendAndCleanUpIfSuccess() {
         final List<File> fileList = new ArrayList<>();
         fileList.add(new File("file-1"));
         fileList.add(new File("file-2"));
@@ -174,14 +163,14 @@ public void testSendAndCleanUpIfSuccess() throws Exception {
     }
 
     @Test
-    public void testSendAndCleanUpIfSuccess_doNothing() throws Exception {
+    public void testSendAndCleanUpIfSuccess_doNothing() {
         eventsStrategy.filesSender = null;
         eventsStrategy.sendAndCleanUpIfSuccess();
         verifyZeroInteractions(mockFilesManager);
     }
 
     @Test
-    public void testSendAndCleanUpIfSuccess_noFilesToSend() throws Exception {
+    public void testSendAndCleanUpIfSuccess_noFilesToSend() {
         doReturn(Collections.emptyList()).when(mockFilesManager).getBatchOfFilesToSend();
         eventsStrategy.sendAndCleanUpIfSuccess();
         verify(mockFilesManager).getBatchOfFilesToSend();
@@ -190,7 +179,7 @@ public void testSendAndCleanUpIfSuccess_noFilesToSend() throws Exception {
     }
 
     @Test
-    public void testSendAndCleanUpIfSuccess_failedToSendFirstFile() throws Exception {
+    public void testSendAndCleanUpIfSuccess_failedToSendFirstFile() {
         final List<File> fileList = new ArrayList<>();
         fileList.add(new File("file-1"));
         fileList.add(new File("file-2"));
@@ -206,7 +195,7 @@ public void testSendAndCleanUpIfSuccess_failedToSendFirstFile() throws Exception
     }
 
     @Test
-    public void testSendAndCleanUpIfSuccess_failedToSendFile() throws Exception {
+    public void testSendAndCleanUpIfSuccess_failedToSendFile() {
         final List<File> fileList1 = new ArrayList<>();
         fileList1.add(new File("file-1"));
         fileList1.add(new File("file-2"));
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
index 0bf1dccc..3f0303f9 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
@@ -20,7 +20,6 @@
 import com.twitter.sdk.android.core.internal.CommonUtils;
 import com.twitter.sdk.android.core.internal.CurrentTimeProvider;
 import com.twitter.sdk.android.core.internal.SystemCurrentTimeProvider;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -38,10 +37,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class EventsFilesManagerTest {
@@ -159,7 +155,7 @@ public boolean isWorkingFileEmpty() {
                 }
 
                 @Override
-                public void rollOver(String targetName) throws IOException {
+                public void rollOver(String targetName) {
                     // Does nothing
                 }
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsHandlerTest.java
index 64a7364f..8026e7c3 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsHandlerTest.java
@@ -18,7 +18,6 @@
 package com.twitter.sdk.android.core.internal.scribe;
 
 import android.content.Context;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -29,9 +28,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 
 import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class EventsHandlerTest {
@@ -78,7 +75,7 @@ public void testRecordEventAsync_sendImmediately() throws Exception {
     }
 
     @Test
-    public void testRecordEventSync() throws Exception {
+    public void testRecordEventSync() {
         final Object object = new Object();
         eventsHandler.recordEventSync(object);
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
index 425c3471..5fb527ef 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeFilesSenderTest.java
@@ -18,17 +18,10 @@
 package com.twitter.sdk.android.core.internal.scribe;
 
 import android.content.Context;
-
-import com.twitter.sdk.android.core.GuestSession;
-import com.twitter.sdk.android.core.GuestSessionProvider;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterSession;
+import com.twitter.sdk.android.core.*;
 import com.twitter.sdk.android.core.internal.CommonUtils;
 import com.twitter.sdk.android.core.internal.IdManager;
-
+import okhttp3.*;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.junit.After;
@@ -38,38 +31,18 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.mock.Calls;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
+import java.io.*;
 import java.net.HttpURLConnection;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 
-import okhttp3.Interceptor;
-import okhttp3.MediaType;
-import okhttp3.Protocol;
-import okhttp3.Request;
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.Response;
-import retrofit2.mock.Calls;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyLong;
-import static org.mockito.Mockito.anyString;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class ScribeFilesSenderTest {
@@ -151,7 +124,7 @@ public void setUp() throws Exception {
     }
 
     @After
-    public void tearDown() throws Exception {
+    public void tearDown() {
         for (File f : tempFiles) {
             f.delete();
         }
@@ -182,7 +155,7 @@ private void setUpScribeSequence(String sequence) {
 
     private Call<ResponseBody> errorResponse(int statusCode) {
         final ResponseBody body = ResponseBody.create(MediaType.parse("application/json"), "");
-        return Calls.response(Response.<ResponseBody>error(statusCode, body));
+        return Calls.response(Response.error(statusCode, body));
     }
 
     // tests follow
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/TestEvent.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/TestEvent.java
index a3970e02..c769f31c 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/TestEvent.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/TestEvent.java
@@ -35,9 +35,7 @@ public boolean equals(Object o) {
         final TestEvent testEvent = (TestEvent) o;
 
         if (id != null ? !id.equals(testEvent.id) : testEvent.id != null) return false;
-        if (msg != null ? !msg.equals(testEvent.msg) : testEvent.msg != null) return false;
-
-        return true;
+        return msg != null ? msg.equals(testEvent.msg) : testEvent.msg == null;
     }
 
     @Override
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
index c280f6e5..2c4af5b6 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
@@ -21,13 +21,11 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
-
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
 import java.io.InputStreamReader;
 
 import static org.junit.Assert.assertEquals;
@@ -48,7 +46,7 @@
     private static final MediaEntity.Size TEST_SIZE_LARGE = new MediaEntity.Size(1024, 2048, "fit");
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
index 7a823fe4..36e73415 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
@@ -18,14 +18,11 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
-
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
@@ -52,7 +49,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         final Coordinates coordinates = gson.fromJson(TEST_JSON, Coordinates.class);
         assertEquals(TEST_COORDINATES_LONGITUDE, coordinates.getLongitude());
         assertEquals(TEST_COORDINATES_LATITUDE, coordinates.getLatitude());
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java
index 87596c53..d14974eb 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/EntityTest.java
@@ -18,14 +18,11 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
-
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
@@ -44,7 +41,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         final Entity entity = gson.fromJson(TEST_JSON, Entity.class);
         assertEquals(TEST_INDICES_START, entity.getStart());
         assertEquals(TEST_INDICES_END, entity.getEnd());
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
index 94216d70..968b24fe 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
@@ -18,14 +18,11 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
-
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
@@ -45,7 +42,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         final HashtagEntity entity = gson.fromJson(TEST_JSON, HashtagEntity.class);
         assertEquals(TEST_INDICES_START, entity.getStart());
         assertEquals(TEST_INDICES_END, entity.getEnd());
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
index 6daa41bb..0a55b848 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
@@ -21,7 +21,6 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
-
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -29,7 +28,6 @@
 import org.robolectric.RobolectricTestRunner;
 
 import java.io.ByteArrayOutputStream;
-import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.NotSerializableException;
 import java.io.ObjectOutputStream;
@@ -78,7 +76,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
index 39718e34..2c2ea514 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
@@ -18,14 +18,11 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
-
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
@@ -50,7 +47,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         final MentionEntity entity = gson.fromJson(TEST_JSON, MentionEntity.class);
         assertEquals(TEST_INDICES_START, entity.getStart());
         assertEquals(TEST_INDICES_END, entity.getEnd());
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
index 85adec80..bcb96cf7 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
@@ -21,14 +21,12 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
-
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.List;
 import java.util.Map;
@@ -68,7 +66,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
index bcdee62d..a74f8d11 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
@@ -18,14 +18,11 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
-
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
@@ -44,7 +41,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         final SymbolEntity entity = gson.fromJson(TEST_JSON, SymbolEntity.class);
         assertEquals(TEST_INDICES_START, entity.getStart());
         assertEquals(TEST_INDICES_END, entity.getEnd());
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
index cf32cc34..8f83f369 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
@@ -21,20 +21,16 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
-
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.Collections;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
+import static org.junit.Assert.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TweetEntitiesTest {
@@ -69,7 +65,7 @@ public void testConstructor_nullParameters() {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
@@ -88,7 +84,7 @@ public void testDeserialization() throws IOException {
     }
 
     @Test
-    public void testDeserialization_noEntities() throws IOException {
+    public void testDeserialization_noEntities() {
         final TweetEntities tweetEntities = gson.fromJson("{\"urls\":[]}", TweetEntities.class);
         // We simply assert that we parsed it successfully and rely on our other unit tests to
         // verify parsing of the individual objects.
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
index 3f272950..f73860d3 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
@@ -21,21 +21,15 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
-
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
 import java.io.InputStreamReader;
 
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TweetTest {
@@ -58,7 +52,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
@@ -91,7 +85,7 @@ public void testDeserialization() throws IOException {
     }
 
     @Test
-    public void testQuotedTweetDeserialization() throws IOException {
+    public void testQuotedTweetDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
index 5b97932a..135220d1 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TwitterCollectionTest.java
@@ -21,14 +21,12 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
-
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
 import java.io.InputStreamReader;
 
 import static org.junit.Assert.assertEquals;
@@ -58,7 +56,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java
index 59ac6de4..93ac1cd0 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UrlEntityTest.java
@@ -18,14 +18,11 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
-
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
@@ -50,7 +47,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         final UrlEntity entity = gson.fromJson(TEST_JSON, UrlEntity.class);
         assertEquals(TEST_INDICES_START, entity.getStart());
         assertEquals(TEST_INDICES_END, entity.getEnd());
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java
index bc1d259f..615bf424 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserEntitiesTest.java
@@ -21,20 +21,16 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
-
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.Collections;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class UserEntitiesTest {
@@ -50,7 +46,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
index 733205f4..3a65251a 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
@@ -21,19 +21,15 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
-
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import java.io.IOException;
 import java.io.InputStreamReader;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class UserTest {
@@ -57,7 +53,7 @@ public void setUp() throws Exception {
     }
 
     @Test
-    public void testDeserialization() throws IOException {
+    public void testDeserialization() {
         JsonReader reader = null;
         try {
             reader = new JsonReader(new InputStreamReader(testResources
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
index b8b087ea..ff3c7102 100644
--- a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
@@ -23,14 +23,12 @@
 import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.TextView;
-
 import com.mopub.nativeads.BaseNativeAd;
 import com.mopub.nativeads.StaticNativeAd;
 import com.mopub.network.MaxWidthImageLoader;
 import com.mopub.network.Networking;
 import com.mopub.volley.toolbox.ImageLoader;
 import com.twitter.sdk.android.mopub.internal.RoundedImageView;
-
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -45,11 +43,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.*;
 
 @RunWith(RobolectricTestRunner.class)
 public class TwitterStaticNativeAdRendererTest {
@@ -73,7 +67,7 @@
     public ExpectedException thrown = ExpectedException.none();
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         MockitoAnnotations.initMocks(this);
 
         Networking.setImageLoaderForTesting(mockImageLoader);
@@ -137,7 +131,7 @@ public void testRenderAdView_shouldReturnPopulatedView() {
     }
 
     @Test
-    public void testSupports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception {
+    public void testSupports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() {
         assertTrue(twitterStaticNativeAdRenderer.supports(new StaticNativeAd() {}));
         assertFalse(twitterStaticNativeAdRenderer.supports(mock(BaseNativeAd.class)));
     }
