diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.kt
similarity index 86%
rename from tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.java
rename to tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.kt
index 984c132e..cc244b31 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.kt
@@ -15,22 +15,22 @@
  *
  */
 
-package com.twitter.sdk.android.tweetcomposer;
+package com.twitter.sdk.android.tweetcomposer
 
 /**
  * ComposerScribeClient represents scribe events of Tweet Composer components.
  */
-interface ComposerScribeClient {
+internal interface ComposerScribeClient {
 
 
     /**
      * Scribes an impression of the Tweet Composer.
      */
-    void impression();
+    fun impression()
 
 
     /**
      * Scribes a click on the Tweet Composer 'Tweet' or 'Cancel' button element.
      */
-    void click(String element);
+    fun click(element: String)
 }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.kt
similarity index 75%
rename from tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.java
rename to tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.kt
index dc57811e..09e6036e 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClient.kt
@@ -15,16 +15,14 @@
  *
  */
 
-package com.twitter.sdk.android.tweetcomposer;
+package com.twitter.sdk.android.tweetcomposer
 
-import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
-import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
-
-import java.util.List;
+import com.twitter.sdk.android.core.internal.scribe.EventNamespace
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem
 
 /**
  * ScribeClient writes tweet-composer scribe events.
  */
-interface ScribeClient {
-    void scribe(EventNamespace eventNamespace, List<ScribeItem> items);
+internal interface ScribeClient {
+    fun scribe(eventNamespace: EventNamespace, items: List<ScribeItem>)
 }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.kt
similarity index 60%
rename from tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.java
rename to tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.kt
index dcbbb4ac..3b3d5ac5 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ScribeClientImpl.kt
@@ -15,28 +15,18 @@
  *
  */
 
-package com.twitter.sdk.android.tweetcomposer;
+package com.twitter.sdk.android.tweetcomposer
 
-import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;
-import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
-import com.twitter.sdk.android.core.internal.scribe.ScribeItem;
-
-import java.util.List;
+import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient
+import com.twitter.sdk.android.core.internal.scribe.EventNamespace
+import com.twitter.sdk.android.core.internal.scribe.ScribeItem
 
 /**
  * ScribeClientImpl is a ScribeClient that writes scribes using a twitter-core DefaultScribeClient.
  */
-class ScribeClientImpl implements ScribeClient {
-    private final DefaultScribeClient scribeClient;
-
-    ScribeClientImpl(DefaultScribeClient scribeClient) {
-        this.scribeClient = scribeClient;
-    }
+internal class ScribeClientImpl(private val scribeClient: DefaultScribeClient?) : ScribeClient {
 
-    @Override
-    public void scribe(EventNamespace eventNamespace, List<ScribeItem> items) {
-        if (scribeClient != null) {
-            scribeClient.scribe(eventNamespace, items);
-        }
+    override fun scribe(eventNamespace: EventNamespace, items: List<ScribeItem>) {
+        scribeClient?.scribe(eventNamespace, items)
     }
 }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.java
deleted file mode 100644
index bd4aa07f..00000000
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetcomposer.internal.util;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.os.Build;
-import android.util.AttributeSet;
-import android.widget.ScrollView;
-
-public class ObservableScrollView extends ScrollView {
-    ScrollViewListener scrollViewListener;
-
-    public ObservableScrollView(Context context) {
-        super(context);
-    }
-
-    public ObservableScrollView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public ObservableScrollView(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-    }
-
-    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
-    public ObservableScrollView(Context context, AttributeSet attrs, int defStyleAttr, int
-            defStyleRes) {
-        super(context, attrs, defStyleAttr, defStyleRes);
-    }
-
-    @Override
-    protected void onScrollChanged(int currentX, int currentY, int oldX, int oldY) {
-        super.onScrollChanged(currentX, currentY, oldX, oldY);
-        if (scrollViewListener != null) {
-            scrollViewListener.onScrollChanged(currentY);
-        }
-    }
-
-    public void setScrollViewListener(ScrollViewListener scrollViewListener) {
-        this.scrollViewListener = scrollViewListener;
-    }
-
-    public interface ScrollViewListener {
-        void onScrollChanged(int scrollY);
-    }
-}
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.kt b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.kt
new file mode 100644
index 00000000..12d39a4d
--- /dev/null
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollView.kt
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetcomposer.internal.util
+
+import android.content.Context
+import android.util.AttributeSet
+import android.widget.ScrollView
+
+class ObservableScrollView : ScrollView {
+    private var scrollViewListener: ScrollViewListener? = null
+
+    constructor(context: Context) : super(context)
+
+    constructor(context: Context, attrs: AttributeSet) : super(context, attrs)
+
+    constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int) : super(context, attrs, defStyleAttr)
+
+    public override fun onScrollChanged(currentX: Int, currentY: Int, oldX: Int, oldY: Int) {
+        super.onScrollChanged(currentX, currentY, oldX, oldY)
+        scrollViewListener?.onScrollChanged(currentY)
+    }
+
+    fun setScrollViewListener(scrollViewListener: ScrollViewListener) {
+        this.scrollViewListener = scrollViewListener
+    }
+}
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ScrollViewListener.kt b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ScrollViewListener.kt
new file mode 100644
index 00000000..3f9b2712
--- /dev/null
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/internal/util/ScrollViewListener.kt
@@ -0,0 +1,5 @@
+package com.twitter.sdk.android.tweetcomposer.internal.util
+
+interface ScrollViewListener {
+    fun onScrollChanged(scrollY: Int)
+}
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollViewTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollViewTest.java
index dc0ebbe9..03ac1530 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollViewTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/internal/util/ObservableScrollViewTest.java
@@ -33,8 +33,8 @@
     public void testOnScrollChanged() {
         final ObservableScrollView scrollView =
                 new ObservableScrollView(RuntimeEnvironment.application);
-        final ObservableScrollView.ScrollViewListener listener =
-                mock(ObservableScrollView.ScrollViewListener.class);
+        final ScrollViewListener listener =
+                mock(ScrollViewListener.class);
         scrollView.setScrollViewListener(listener);
 
         scrollView.onScrollChanged(0, TEST_SCROLL_X, 0, 0);
