diff --git a/samples/app/src/main/java/com/example/app/tweetui/FixedTimelineActivity.java b/samples/app/src/main/java/com/example/app/tweetui/FixedTimelineActivity.java
index f1b7a4e7..c755603c 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/FixedTimelineActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/FixedTimelineActivity.java
@@ -84,7 +84,7 @@ public void onCreate(Bundle savedInstanceState) {
                 @Override
                 public void success(Result<List<Tweet>> result) {
                     final FixedTweetTimeline fixedTimeline = new FixedTweetTimeline.Builder()
-                            .setTweets(result.data).build();
+                            .setTweets(result.getData()).build();
                     final TweetTimelineListAdapter adapter = new TweetTimelineListAdapter(getActivity(),
                             fixedTimeline);
                     setListAdapter(adapter);
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TweetActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TweetActivity.java
index cfca9983..d3d4f579 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TweetActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TweetActivity.java
@@ -113,7 +113,7 @@ private void loadTweet(long tweetId, final ViewGroup container, final int viewId
                 public void success(Result<Tweet> result) {
                     final Context context = getActivity();
                     if (context == null) return;
-                    final Tweet tweet = result.data;
+                    final Tweet tweet = result.getData();
                     final BaseTweetView tv = new TweetView(context, tweet,
                             R.style.tw__TweetLightWithActionsStyle);
                     tv.setOnActionCallback(actionCallback);
@@ -140,8 +140,8 @@ private void loadTweets(final List<Long> tweetIds, final ViewGroup container,
                 public void success(Result<List<Tweet>> result) {
                     final Context context = getActivity();
                     if (context == null) return;
-                    for (int i = 0; i < result.data.size(); i++) {
-                        final BaseTweetView tv = new CompactTweetView(context, result.data.get(i),
+                    for (int i = 0; i < result.getData().size(); i++) {
+                        final BaseTweetView tv = new CompactTweetView(context, result.getData().get(i),
                                 R.style.tw__TweetDarkWithActionsStyle);
                         tv.setOnActionCallback(actionCallback);
                         tv.setId(viewIds.get(i));
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TweetPreviewActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TweetPreviewActivity.java
index 83b74a13..66cf3de1 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TweetPreviewActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TweetPreviewActivity.java
@@ -112,7 +112,7 @@ public void success(Result<Tweet> result) {
                     final Context context = getActivity();
                     if (context == null) return;
 
-                    final Tweet tweet = result.data;
+                    final Tweet tweet = result.getData();
                     final CompactTweetView cv = new CompactTweetView(context, tweet, style);
                     container.addView(cv);
 
diff --git a/samples/app/src/main/java/com/example/app/twittercore/TwitterCoreMainActivity.java b/samples/app/src/main/java/com/example/app/twittercore/TwitterCoreMainActivity.java
index 3f589b50..15f73e18 100644
--- a/samples/app/src/main/java/com/example/app/twittercore/TwitterCoreMainActivity.java
+++ b/samples/app/src/main/java/com/example/app/twittercore/TwitterCoreMainActivity.java
@@ -45,6 +45,20 @@ public static Intent newIntent(Context packageContext) {
         return new Intent(packageContext, TwitterCoreMainActivity.class);
     }
 
+    private static void requestEmailAddress(final Context context, TwitterSession session) {
+        new TwitterAuthClient().requestEmail(session, new Callback<String>() {
+            @Override
+            public void success(Result<String> result) {
+                Toast.makeText(context, result.getData(), Toast.LENGTH_SHORT).show();
+            }
+
+            @Override
+            public void failure(TwitterException exception) {
+                Toast.makeText(context, exception.getMessage(), Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -60,7 +74,7 @@ protected void onCreate(Bundle savedInstanceState) {
         loginButton.setCallback(new Callback<TwitterSession>() {
             @Override
             public void success(Result<TwitterSession> result) {
-                requestEmailAddress(getApplicationContext(), result.data);
+                requestEmailAddress(getApplicationContext(), result.getData());
             }
 
             @Override
@@ -72,20 +86,6 @@ public void failure(TwitterException exception) {
         });
     }
 
-    private static void requestEmailAddress(final Context context, TwitterSession session) {
-        new TwitterAuthClient().requestEmail(session, new Callback<String>() {
-            @Override
-            public void success(Result<String> result) {
-                Toast.makeText(context, result.data, Toast.LENGTH_SHORT).show();
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                Toast.makeText(context, exception.getMessage(), Toast.LENGTH_SHORT).show();
-            }
-        });
-    }
-
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerController.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerController.java
index 496b5183..635422c4 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerController.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerController.java
@@ -80,7 +80,7 @@ void setProfilePhoto() {
                 .verifyCredentials(false, true, false).enqueue(new Callback<User>() {
                     @Override
                     public void success(Result<User> result) {
-                        composerView.setProfilePhotoView(result.data);
+                        composerView.setProfilePhotoView(result.getData());
                     }
 
                     @Override
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
index bf4fb94d..27f27ea8 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
@@ -84,7 +84,7 @@ void uploadTweet(final TwitterSession session, final String text, final Uri imag
             uploadMedia(session, imageUri, new Callback<Media>() {
                 @Override
                 public void success(Result<Media> result) {
-                    uploadTweetWithMedia(session, text, result.data.mediaIdString);
+                    uploadTweetWithMedia(session, text, result.getData().mediaIdString);
                 }
 
                 @Override
@@ -106,7 +106,7 @@ void uploadTweetWithMedia(TwitterSession session, String text, String mediaId) {
                         new Callback<Tweet>() {
                             @Override
                             public void success(Result<Tweet> result) {
-                                sendSuccessBroadcast(result.data.getId());
+                                sendSuccessBroadcast(result.getData().getId());
                                 stopSelf();
                             }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTimeline.java
index 1d212a0e..4eeccd7c 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTimeline.java
@@ -56,11 +56,11 @@ static Long decrementMaxId(Long maxId) {
 
         @Override
         public void success(Result<List<Tweet>> result) {
-            final List<Tweet> tweets = result.data;
+            final List<Tweet> tweets = result.getData();
             final TimelineResult<Tweet> timelineResult
                     = new TimelineResult<>(new TimelineCursor(tweets), tweets);
             if (cb != null) {
-                cb.success(new Result<>(timelineResult, result.response));
+                cb.success(new Result<>(timelineResult, result.getResponse()));
             }
         }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
index 566829ea..5363eec2 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
@@ -238,7 +238,7 @@ private void loadTweet() {
         final Callback<Tweet> repoCb = new Callback<Tweet>() {
             @Override
             public void success(Result<Tweet> result) {
-                setTweet(result.data);
+                setTweet(result.getData());
             }
 
             @Override
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
index f0eb95d9..1d44aee9 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/CollectionTimeline.java
@@ -25,13 +25,14 @@
 import com.twitter.sdk.android.core.models.TweetBuilder;
 import com.twitter.sdk.android.core.models.TwitterCollection;
 import com.twitter.sdk.android.core.models.User;
-import retrofit2.Call;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
+import retrofit2.Call;
+
 /**
  * CollectionTimeline provides a timeline of tweets from the collections/collection API source.
  */
@@ -103,8 +104,8 @@ String getTimelineType() {
 
         @Override
         public void success(Result<TwitterCollection> result) {
-            final TimelineCursor timelineCursor = getTimelineCursor(result.data);
-            final List<Tweet> tweets = getOrderedTweets(result.data);
+            final TimelineCursor timelineCursor = getTimelineCursor(result.getData());
+            final List<Tweet> tweets = getOrderedTweets(result.getData());
             final TimelineResult<Tweet> timelineResult;
             if (timelineCursor != null) {
                 timelineResult = new TimelineResult<>(timelineCursor, tweets);
@@ -112,7 +113,7 @@ public void success(Result<TwitterCollection> result) {
                 timelineResult = new TimelineResult<>(null, Collections.emptyList());
             }
             if (cb != null) {
-                cb.success(new Result(timelineResult, result.response));
+                cb.success(new Result(timelineResult, result.getResponse()));
             }
         }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
index 34b849dc..933fa657 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FilterTimelineDelegate.java
@@ -101,13 +101,13 @@ public void previous() {
         @Override
         public void success(final Result<TimelineResult<Tweet>> result) {
             final Runnable timelineFilterRunnable = () -> {
-                final List<Tweet> filteredTweets = timelineFilter.filter(result.data.items);
+                final List<Tweet> filteredTweets = timelineFilter.filter(result.getData().items);
                 final TimelineResult<Tweet> filteredTimelineResult =
-                        buildTimelineResult(result.data.timelineCursor, filteredTweets);
+                        buildTimelineResult(result.getData().timelineCursor, filteredTweets);
 
-                handler.post(() -> callback.success(new Result<>(filteredTimelineResult, result.response)));
+                handler.post(() -> callback.success(new Result<>(filteredTimelineResult, result.getResponse())));
 
-                scribeFilteredTimeline(result.data.items, filteredTweets);
+                scribeFilteredTimeline(result.getData().items, filteredTweets);
             };
 
             executorService.execute(timelineFilterRunnable);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ResetTweetCallback.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ResetTweetCallback.java
index 56474d41..9a7a5cfd 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ResetTweetCallback.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/ResetTweetCallback.java
@@ -40,8 +40,8 @@
 
     @Override
     public void success(Result<Tweet> result) {
-        tweetRepository.updateCache(result.data);
-        baseTweetView.setTweet(result.data);
+        tweetRepository.updateCache(result.getData());
+        baseTweetView.setTweet(result.getData());
         if (cb != null) {
             cb.success(result);
         }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/SearchTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/SearchTimeline.java
index c2d870d1..60a8a438 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/SearchTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/SearchTimeline.java
@@ -112,11 +112,11 @@ String getTimelineType() {
 
         @Override
         public void success(Result<Search> result) {
-            final List<Tweet> tweets = result.data.tweets;
+            final List<Tweet> tweets = result.getData().tweets;
             final TimelineResult<Tweet> timelineResult
                     = new TimelineResult<>(new TimelineCursor(tweets), tweets);
             if (cb != null) {
-                cb.success(new Result<>(timelineResult, result.response));
+                cb.success(new Result<>(timelineResult, result.getResponse()));
             }
         }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
index e8803cca..834d091b 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineDelegate.java
@@ -236,12 +236,12 @@ public void failure(TwitterException exception) {
 
         @Override
         public void success(Result<TimelineResult<T>> result) {
-            if (result.data.items.size() > 0) {
-                final ArrayList<T> receivedItems = new ArrayList<>(result.data.items);
+            if (result.getData().items.size() > 0) {
+                final ArrayList<T> receivedItems = new ArrayList<>(result.getData().items);
                 receivedItems.addAll(itemList);
                 itemList = receivedItems;
                 notifyDataSetChanged();
-                timelineStateHolder.setNextCursor(result.data.timelineCursor);
+                timelineStateHolder.setNextCursor(result.getData().timelineCursor);
             }
             // do nothing when zero items are received. Subsequent 'next' call does not change.
             super.success(result);
@@ -262,7 +262,7 @@ public void success(Result<TimelineResult<T>> result) {
 
         @Override
         public void success(Result<TimelineResult<T>> result) {
-            if (result.data.items.size() > 0) {
+            if (result.getData().items.size() > 0) {
                 itemList.clear();
             }
             super.success(result);
@@ -280,10 +280,10 @@ public void success(Result<TimelineResult<T>> result) {
 
         @Override
         public void success(Result<TimelineResult<T>> result) {
-            if (result.data.items.size() > 0) {
-                itemList.addAll(result.data.items);
+            if (result.getData().items.size() > 0) {
+                itemList.addAll(result.getData().items);
                 notifyDataSetChanged();
-                timelineStateHolder.setPreviousCursor(result.data.timelineCursor);
+                timelineStateHolder.setPreviousCursor(result.getData().timelineCursor);
             }
             // do nothing when zero items are received. Subsequent 'next' call does not change.
             super.success(result);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
index d91adaec..20d2a014 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetRepository.java
@@ -102,7 +102,7 @@ void favorite(final long tweetId, final Callback<Tweet> cb) {
         getUserSession(new LoggingCallback<TwitterSession>(cb, Twitter.getLogger()) {
             @Override
             public void success(Result<TwitterSession> result) {
-                twitterCore.getApiClient(result.data).getFavoriteService().create(tweetId, false)
+                twitterCore.getApiClient(result.getData()).getFavoriteService().create(tweetId, false)
                         .enqueue(cb);
             }
         });
@@ -112,7 +112,7 @@ void unfavorite(final long tweetId, final Callback<Tweet> cb) {
         getUserSession(new LoggingCallback<TwitterSession>(cb, Twitter.getLogger()) {
             @Override
             public void success(Result<TwitterSession> result) {
-                twitterCore.getApiClient(result.data).getFavoriteService().destroy(tweetId, false)
+                twitterCore.getApiClient(result.getData()).getFavoriteService().destroy(tweetId, false)
                         .enqueue(cb);
             }
         });
@@ -122,7 +122,7 @@ void retweet(final long tweetId, final Callback<Tweet> cb) {
         getUserSession(new LoggingCallback<TwitterSession>(cb, Twitter.getLogger()) {
             @Override
             public void success(Result<TwitterSession> result) {
-                twitterCore.getApiClient(result.data).getStatusesService().retweet(tweetId, false)
+                twitterCore.getApiClient(result.getData()).getStatusesService().retweet(tweetId, false)
                         .enqueue(cb);
             }
         });
@@ -132,7 +132,7 @@ void unretweet(final long tweetId, final Callback<Tweet> cb) {
         getUserSession(new LoggingCallback<TwitterSession>(cb, Twitter.getLogger()) {
             @Override
             public void success(Result<TwitterSession> result) {
-                twitterCore.getApiClient(result.data).getStatusesService().unretweet(tweetId, false)
+                twitterCore.getApiClient(result.getData()).getStatusesService().unretweet(tweetId, false)
                         .enqueue(cb);
             }
         });
@@ -192,10 +192,10 @@ void loadTweets(final List<Long> tweetIds, final Callback<List<Tweet>> cb) {
 
         @Override
         public void success(Result<Tweet> result) {
-            final Tweet tweet = result.data;
+            final Tweet tweet = result.getData();
             updateCache(tweet);
             if (cb != null) {
-                cb.success(new Result<>(tweet, result.response));
+                cb.success(new Result<>(tweet, result.getResponse()));
             }
         }
 
@@ -221,8 +221,8 @@ public void failure(TwitterException exception) {
         @Override
         public void success(Result<List<Tweet>> result) {
             if (cb != null) {
-                final List<Tweet> sorted = Utils.orderTweets(tweetIds, result.data);
-                cb.success(new Result<>(sorted, result.response));
+                final List<Tweet> sorted = Utils.orderTweets(tweetIds, result.getData());
+                cb.success(new Result<>(sorted, result.getResponse()));
             }
         }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
index 1e6684be..1d6b0064 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapter.java
@@ -136,7 +136,7 @@ static String getTimelineType(Timeline timeline) {
 
         @Override
         public void success(Result<Tweet> result) {
-            delegate.setItemById(result.data);
+            delegate.setItemById(result.getData());
             if (cb != null) {
                 cb.success(result);
             }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
index a8e27474..9cdb8264 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
@@ -202,7 +202,7 @@ static String getTimelineType(Timeline timeline) {
 
         @Override
         public void success(Result<Tweet> result) {
-            delegate.setItemById(result.data);
+            delegate.setItemById(result.getData());
             if (cb != null) {
                 cb.success(result);
             }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
index 42c67639..ffc4e76b 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/FixedTweetTimelineTest.java
@@ -64,12 +64,12 @@ public void testNext_succeedsWithFixedTweets() {
         timeline.next(ANY_ID, new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
-                assertEquals(fixedTweets, result.data.items);
+                assertEquals(fixedTweets, result.getData().items);
                 assertEquals((Long) TestFixtures.TEST_PHOTO_TWEET.getId(),
-                        result.data.timelineCursor.minPosition);
+                        result.getData().timelineCursor.minPosition);
                 assertEquals((Long) TestFixtures.TEST_TWEET.getId(),
-                        result.data.timelineCursor.maxPosition);
-                assertNull(result.response);
+                        result.getData().timelineCursor.maxPosition);
+                assertNull(result.getResponse());
             }
             @Override
             public void failure(TwitterException exception) {
@@ -84,10 +84,10 @@ public void testNext_succeedsWithEmptyTweets() {
         timeline.previous(ANY_ID, new Callback<TimelineResult<Tweet>>() {
             @Override
             public void success(Result<TimelineResult<Tweet>> result) {
-                assertTrue(result.data.items.isEmpty());
-                assertNull(result.data.timelineCursor.maxPosition);
-                assertNull(result.data.timelineCursor.minPosition);
-                assertNull(result.response);
+                assertTrue(result.getData().items.isEmpty());
+                assertNull(result.getData().timelineCursor.maxPosition);
+                assertNull(result.getData().timelineCursor.minPosition);
+                assertNull(result.getResponse());
             }
 
             @Override
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java
index 15ec9309..6cde3db3 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/LikeTweetActionTest.java
@@ -138,8 +138,8 @@ public void testFavoriteCallback_failureAlreadyFavorited() {
         final ArgumentCaptor<Result<Tweet>> resultCaptor
                 = ArgumentCaptor.forClass(Result.class);
         verify(mockCallback).success(resultCaptor.capture());
-        assertEquals(tweet.getId(), resultCaptor.getValue().data.getId());
-        assertTrue(resultCaptor.getValue().data.favorited);
+        assertEquals(tweet.getId(), resultCaptor.getValue().getData().getId());
+        assertTrue(resultCaptor.getValue().getData().favorited);
     }
 
     @Test
@@ -160,8 +160,8 @@ public void testFavoriteCallback_failureAlreadyUnfavorited() {
         final ArgumentCaptor<Result<Tweet>> resultCaptor
                 = ArgumentCaptor.forClass(Result.class);
         verify(mockCallback).success(resultCaptor.capture());
-        assertEquals(tweet.getId(), resultCaptor.getValue().data.getId());
-        assertFalse(resultCaptor.getValue().data.favorited);
+        assertEquals(tweet.getId(), resultCaptor.getValue().getData().getId());
+        assertFalse(resultCaptor.getValue().getData().favorited);
     }
 
     @Test
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.java
deleted file mode 100644
index dd4a49d9..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.util.Log;
-
-/**
- * Default logger that logs to android.util.Log.
- */
-public class DefaultLogger implements Logger {
-    private int logLevel;
-
-    public DefaultLogger(int logLevel) {
-        this.logLevel = logLevel;
-    }
-
-    public DefaultLogger() {
-        this.logLevel = Log.INFO;
-    }
-
-    @Override
-    public boolean isLoggable(String tag, int level) {
-        return logLevel <= level;
-    }
-
-    @Override
-    public int getLogLevel() {
-        return logLevel;
-    }
-
-    @Override
-    public void setLogLevel(int logLevel) {
-        this.logLevel = logLevel;
-    }
-
-    @Override
-    public void d(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.DEBUG)) {
-            Log.d(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void v(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.VERBOSE)) {
-            Log.v(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void i(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.INFO)) {
-            Log.i(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void w(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.WARN)) {
-            Log.w(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void e(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.ERROR)) {
-            Log.e(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void d(String tag, String text) {
-        d(tag, text, null);
-    }
-
-    @Override
-    public void v(String tag, String text) {
-        v(tag, text, null);
-    }
-
-    @Override
-    public void i(String tag, String text) {
-        i(tag, text, null);
-    }
-
-    @Override
-    public void w(String tag, String text) {
-        w(tag, text, null);
-    }
-
-    @Override
-    public void e(String tag, String text) {
-        e(tag, text, null);
-    }
-
-    @Override
-    public void log(int priority, String tag, String msg) {
-        log(priority, tag, msg, false);
-    }
-
-    @Override
-    public void log(int priority, String tag, String msg, boolean forceLog) {
-        if (forceLog || isLoggable(tag, priority)) {
-            Log.println(priority, tag, msg);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt
new file mode 100644
index 00000000..6a141e2f
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+import android.util.Log
+
+/**
+ * Default logger that logs to android.util.Log.
+ */
+class DefaultLogger : Logger {
+    private var logLevel: Int = 0
+
+    constructor(logLevel: Int) {
+        this.logLevel = logLevel
+    }
+
+    constructor() {
+        this.logLevel = Log.INFO
+    }
+
+    override fun isLoggable(tag: String, level: Int): Boolean {
+        return logLevel <= level
+    }
+
+    override fun getLogLevel(): Int {
+        return logLevel
+    }
+
+    override fun setLogLevel(logLevel: Int) {
+        this.logLevel = logLevel
+    }
+
+    override fun d(tag: String, text: String, throwable: Throwable?) {
+        if (isLoggable(tag, Log.DEBUG)) {
+            Log.d(tag, text, throwable)
+        }
+    }
+
+    override fun v(tag: String, text: String, throwable: Throwable?) {
+        if (isLoggable(tag, Log.VERBOSE)) {
+            Log.v(tag, text, throwable)
+        }
+    }
+
+    override fun i(tag: String, text: String, throwable: Throwable?) {
+        if (isLoggable(tag, Log.INFO)) {
+            Log.i(tag, text, throwable)
+        }
+    }
+
+    override fun w(tag: String, text: String, throwable: Throwable?) {
+        if (isLoggable(tag, Log.WARN)) {
+            Log.w(tag, text, throwable)
+        }
+    }
+
+    override fun e(tag: String, text: String, throwable: Throwable?) {
+        if (isLoggable(tag, Log.ERROR)) {
+            Log.e(tag, text, throwable)
+        }
+    }
+
+    override fun d(tag: String, text: String) {
+        d(tag, text, null)
+    }
+
+    override fun v(tag: String, text: String) {
+        v(tag, text, null)
+    }
+
+    override fun i(tag: String, text: String) {
+        i(tag, text, null)
+    }
+
+    override fun w(tag: String, text: String) {
+        w(tag, text, null)
+    }
+
+    override fun e(tag: String, text: String) {
+        e(tag, text, null)
+    }
+
+    override fun log(priority: Int, tag: String, msg: String) {
+        log(priority, tag, msg, false)
+    }
+
+    override fun log(priority: Int, tag: String, msg: String, forceLog: Boolean) {
+        if (forceLog || isLoggable(tag, priority)) {
+            Log.println(priority, tag, msg)
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java
index 8694e2f8..83a4a824 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java
@@ -58,7 +58,7 @@ void refreshToken() {
         oAuth2Service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
             @Override
             public void success(Result<GuestAuthToken> result) {
-                sessionManager.setActiveSession(new GuestSession(result.data));
+                sessionManager.setActiveSession(new GuestSession(result.getData()));
                 latch.countDown();
             }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.kt
similarity index 70%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/Result.kt
index 0f017e71..cebee837 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.kt
@@ -15,17 +15,13 @@
  *
  */
 
-package com.twitter.sdk.android.core.models;
+package com.twitter.sdk.android.core
 
-import com.google.gson.annotations.SerializedName;
-
-public class UserValue {
-
-    @SerializedName("id_str")
-    public final String idStr;
-
-    public UserValue(String idStr) {
-        this.idStr = idStr;
-    }
-}
+import retrofit2.Response
 
+/**
+ * Encapsulates parsed result for delivery.
+ *
+ * @param <T> Parsed type, available in the [Result.data]
+</T> */
+data class Result<out T>(val data: T, val response: Response<*>)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java
deleted file mode 100644
index 9935bbd6..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Base class for session associated with {@link com.twitter.sdk.android.core.AuthToken}.
- */
-public class Session<T extends AuthToken> {
-    @SerializedName("auth_token")
-    private final T authToken;
-
-    @SerializedName("id")
-    private final long id;
-
-    public Session(T authToken, long id) {
-        if (authToken == null) {
-            throw new IllegalArgumentException("AuthToken must not be null.");
-        }
-
-        this.authToken = authToken;
-        this.id = id;
-    }
-
-    public T getAuthToken() {
-        return authToken;
-    }
-
-    public long getId() {
-        return id;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        final Session session = (Session) o;
-
-        if (id != session.id) return false;
-        return authToken != null ? authToken.equals(session.authToken) : session.authToken == null;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = authToken != null ? authToken.hashCode() : 0;
-        result = 31 * result + (int) (id ^ (id >>> 32));
-        return result;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.kt
similarity index 61%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/Session.kt
index fb2caaa7..b8b04099 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.kt
@@ -15,21 +15,14 @@
  *
  */
 
-package com.twitter.sdk.android.core;
+package com.twitter.sdk.android.core
 
-import retrofit2.Response;
+import com.google.gson.annotations.SerializedName
 
 /**
- * Encapsulates parsed result for delivery.
- *
- * @param <T> Parsed type, available in the {@link Result#data}
+ * Base class for session associated with [com.twitter.sdk.android.core.AuthToken].
  */
-public class Result<T> {
-    public final T data;
-    public final Response response;
-
-    public Result(T data, Response response) {
-        this.data = data;
-        this.response = response;
-    }
-}
+open class Session<out T : AuthToken>(
+        @SerializedName("auth_token") val authToken: T?,
+        @SerializedName("id") val id: Long
+)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java
index 9071a511..0d7baf81 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java
@@ -75,7 +75,7 @@ void startAuth() {
         return new Callback<OAuthResponse>() {
             @Override
             public void success(Result<OAuthResponse> result) {
-                requestToken = result.data.authToken;
+                requestToken = result.getData().authToken;
                 final String authorizeUrl = oAuth1aService.getAuthorizeUrl(requestToken);
                 // Step 2. Redirect user to web view to complete authorization flow.
                 Twitter.getLogger().d(TwitterCore.TAG,
@@ -149,7 +149,7 @@ private void handleWebViewSuccess(Bundle bundle) {
             @Override
             public void success(Result<OAuthResponse> result) {
                 final Intent data = new Intent();
-                final OAuthResponse response = result.data;
+                final OAuthResponse response = result.getData();
                 data.putExtra(AuthHandler.EXTRA_SCREEN_NAME, response.userName);
                 data.putExtra(AuthHandler.EXTRA_USER_ID, response.userId);
                 data.putExtra(AuthHandler.EXTRA_TOKEN, response.authToken.token);
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
index ef29e042..17479464 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
@@ -191,7 +191,7 @@ public void requestEmail(TwitterSession session, final Callback<String> callback
         verifyRequest.enqueue(new Callback<User>() {
             @Override
             public void success(Result<User> result) {
-                callback.success(new Result<>(result.data.email, null));
+                callback.success(new Result<>(result.getData().email, null));
             }
 
             @Override
@@ -234,7 +234,7 @@ private void scribeRequestEmail() {
         @Override
         public void success(Result<TwitterSession> result) {
             Twitter.getLogger().d(TwitterCore.TAG, "Authorization completed successfully");
-            sessionManager.setActiveSession(result.data);
+            sessionManager.setActiveSession(result.getData());
             callback.success(result);
         }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java
index a8ef5116..d459498d 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/VineCardUtils.java
@@ -29,13 +29,13 @@
     private VineCardUtils() {}
 
     public static boolean isVine(Card card) {
-        return (PLAYER_CARD.equals(card.name) || VINE_CARD.equals(card.name)) && isVineUser(card);
+        return (PLAYER_CARD.equals(card.getName()) || VINE_CARD.equals(card.getName())) && isVineUser(card);
     }
 
     private static boolean isVineUser(Card card) {
-        final UserValue user = card.bindingValues.get("site");
+        final UserValue user = card.getBindingValues().get("site");
         try {
-            if (user != null && Long.parseLong(user.idStr) == VINE_USER_ID) {
+            if (user != null && Long.parseLong(user.getIdStr()) == VINE_USER_ID) {
                 return true;
             }
         } catch (NumberFormatException ex) {
@@ -46,15 +46,15 @@ private static boolean isVineUser(Card card) {
     }
 
     public static String getPublisherId(Card card) {
-        final UserValue user_value = card.bindingValues.get("site");
-        return user_value.idStr;
+        final UserValue user_value = card.getBindingValues().get("site");
+        return user_value.getIdStr();
     }
 
     public static String getStreamUrl(Card card) {
-        return card.bindingValues.get("player_stream_url");
+        return card.getBindingValues().get("player_stream_url");
     }
 
     public static ImageValue getImageValue(Card card) {
-        return card.bindingValues.get("player_image");
+        return card.getBindingValues().get("player_image");
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
index 00a573f5..d2020734 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
@@ -162,7 +162,7 @@ public void success(Result<ResponseBody> result) {
                 try {
                     try {
                         reader = new BufferedReader(
-                                new InputStreamReader(result.data.byteStream()));
+                                new InputStreamReader(result.getData().byteStream()));
                         String line;
 
                         while ((line = reader.readLine()) != null) {
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java
index 1440596f..8eb17048 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java
@@ -65,7 +65,7 @@ public void requestGuestAuthToken(final Callback<GuestAuthToken> callback) {
         final Callback<OAuth2Token> appAuthCallback = new Callback<OAuth2Token>() {
             @Override
             public void success(Result<OAuth2Token> result) {
-                final OAuth2Token appAuthToken = result.data;
+                final OAuth2Token appAuthToken = result.getData();
                 // Got back an app auth token, now request a guest auth token.
                 final Callback<GuestTokenResponse> guestTokenCallback
                         = new Callback<GuestTokenResponse>() {
@@ -74,7 +74,7 @@ public void success(Result<GuestTokenResponse> result) {
                         // Return a GuestAuthToken that includes the guestToken.
                         final GuestAuthToken guestAuthToken = new GuestAuthToken(
                                 appAuthToken.getTokenType(), appAuthToken.getAccessToken(),
-                                result.data.guestToken);
+                                result.getData().guestToken);
                         callback.success(new Result<>(guestAuthToken, null));
                     }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.kt
new file mode 100644
index 00000000..089225cc
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.kt
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models
+
+import com.google.gson.annotations.SerializedName
+
+data class Card(
+        @SerializedName("binding_values")
+        val bindingValues: BindingValues,
+        @SerializedName("name")
+        val name: String
+)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.kt
similarity index 88%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.kt
index d2199985..27fb630b 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.kt
@@ -15,16 +15,16 @@
  *
  */
 
-package com.twitter.sdk.android.core.models;
+package com.twitter.sdk.android.core.models
 
 /**
  * Identifiable is an abstraction of types with long identifiers.
  */
-public interface Identifiable {
+interface Identifiable {
 
     /**
      * Returns the id.
      * @return The id.
      */
-    long getId();
+    val id: Long
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.kt
similarity index 55%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.kt
index 2b0838ec..9940842b 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.kt
@@ -1,3 +1,5 @@
+@file:JvmName("ModelUtils")
+
 /*
  * Copyright (C) 2015 Twitter, Inc.
  *
@@ -15,32 +17,31 @@
  *
  */
 
-package com.twitter.sdk.android.core.models;
+package com.twitter.sdk.android.core.models
+
 
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
+import java.util.*
 
 /**
  * Util class for twitter-core models
  */
-public final class ModelUtils {
-
-    private ModelUtils() {}
+object ModelUtils {
 
-    public static <T> List<T> getSafeList(List<T> entities) {
-        if (entities == null) {
-            return Collections.emptyList();
+    @JvmStatic
+    fun <T> getSafeList(entities: List<T>?): List<T> {
+        return if (entities == null) {
+            emptyList()
         } else {
-            return Collections.unmodifiableList(entities);
+            Collections.unmodifiableList(entities)
         }
     }
 
-    public static <K, V> Map<K, V> getSafeMap(Map<K, V> entities) {
-        if (entities == null) {
-            return Collections.emptyMap();
+    @JvmStatic
+    fun <K, V> getSafeMap(entities: Map<K, V>?): Map<K, V> {
+        return if (entities == null) {
+            emptyMap()
         } else {
-            return Collections.unmodifiableMap(entities);
+            Collections.unmodifiableMap(entities)
         }
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.kt
similarity index 60%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.kt
index eee87763..a2ddf2e1 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Card.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.kt
@@ -15,20 +15,9 @@
  *
  */
 
-package com.twitter.sdk.android.core.models;
+package com.twitter.sdk.android.core.models
 
-import com.google.gson.annotations.SerializedName;
+import com.google.gson.annotations.SerializedName
 
-public class Card {
+data class UserValue(@SerializedName("id_str") val idStr: String)
 
-    @SerializedName("binding_values")
-    public final BindingValues bindingValues;
-
-    @SerializedName("name")
-    public final String name;
-
-    public Card(BindingValues bindingValues, String name) {
-        this.bindingValues = bindingValues;
-        this.name = name;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/params/Geocode.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/params/Geocode.kt
similarity index 54%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/services/params/Geocode.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/services/params/Geocode.kt
index 0722f13e..9f20909b 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/params/Geocode.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/params/Geocode.kt
@@ -15,7 +15,7 @@
  *
  */
 
-package com.twitter.sdk.android.core.services.params;
+package com.twitter.sdk.android.core.services.params
 
 /**
  *
@@ -26,35 +26,21 @@
  *
  * Example Values: 37.781157,-122.398720,1mi
  *
- * <a href="https://dev.twitter.com/rest/reference/get/search/tweets">GET search/tweets</a>
+ * [GET search/tweets](https://dev.twitter.com/rest/reference/get/search/tweets)
  */
-public class Geocode {
-
-    public enum Distance {
+class Geocode(
+        private val latitude: Double,
+        private val longitude: Double,
+        private val radius: Int,
+        private val distance: Distance
+) {
+
+    enum class Distance(val identifier: String) {
         MILES("mi"),
-        KILOMETERS("km");
-
-        public final String identifier;
-
-        Distance(String identifier) {
-            this.identifier = identifier;
-        }
-    }
-
-    public final double latitude;
-    public final double longitude;
-    public final int radius;
-    public final Distance distance;
-
-    public Geocode(double latitude, double longitude, int radius, Distance distance) {
-        this.latitude = latitude;
-        this.longitude = longitude;
-        this.radius = radius;
-        this.distance = distance;
+        KILOMETERS("km")
     }
 
-    @Override
-    public String toString() {
-        return latitude + "," + longitude + "," + radius + distance.identifier;
+    override fun toString(): String {
+        return "$latitude,$longitude,$radius${distance.identifier}"
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
index 86560c21..b81de6e3 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
@@ -65,7 +65,7 @@ public void testHandleOnActivityResult_resultCodeOK() {
         assertTrue(result);
         final ArgumentCaptor<Result> argCaptor = ArgumentCaptor.forClass(Result.class);
         verify(mockCallback).success(argCaptor.capture());
-        final TwitterSession session = (TwitterSession) argCaptor.getValue().data;
+        final TwitterSession session = (TwitterSession) argCaptor.getValue().getData();
         final TwitterAuthToken authToken = session.getAuthToken();
         assertEquals(TestFixtures.TOKEN, authToken.token);
         assertEquals(TestFixtures.SECRET, authToken.secret);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java
index 73d45f31..56e65c77 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/TwitterAuthClientTest.java
@@ -312,7 +312,7 @@ public void testRequestEmail_withSuccess() {
         authClient.requestEmail(mock(TwitterSession.class), new Callback<String>() {
             @Override
             public void success(Result<String> result) {
-                assertEquals(TEST_EMAIL, result.data);
+                assertEquals(TEST_EMAIL, result.getData());
             }
 
             @Override
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
index 311736b3..3896dc4e 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
@@ -17,22 +17,36 @@
 
 package com.twitter.sdk.android.core.internal.oauth;
 
-import com.twitter.sdk.android.core.*;
+import com.twitter.sdk.android.core.Callback;
+import com.twitter.sdk.android.core.Result;
+import com.twitter.sdk.android.core.TwitterAuthConfig;
+import com.twitter.sdk.android.core.TwitterAuthToken;
+import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.TwitterException;
 import com.twitter.sdk.android.core.internal.TwitterApi;
-import okhttp3.MediaType;
-import okhttp3.ResponseBody;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+
+import okhttp3.MediaType;
+import okhttp3.ResponseBody;
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.http.Header;
 import retrofit2.http.Query;
 import retrofit2.mock.Calls;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
 @SuppressWarnings("checkstyle:linelength")
@@ -190,7 +204,7 @@ public void testCallbackWrapperSuccess() {
         final Callback<OAuthResponse> callback = new Callback<OAuthResponse>() {
             @Override
             public void success(Result<OAuthResponse> result) {
-                final OAuthResponse authResponse = result.data;
+                final OAuthResponse authResponse = result.getData();
                 assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
                         authResponse.authToken.token);
                 assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo",
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
index 02a013df..b39d9d77 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth2ServiceTest.java
@@ -156,7 +156,7 @@ public void testRequestGuestAuthToken_guestAuthSuccess() {
         service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
             @Override
             public void success(Result<GuestAuthToken> result) {
-                assertEquals(GUEST_TOKEN, result.data);
+                assertEquals(GUEST_TOKEN, result.getData());
             }
 
             @Override
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
index 3f0303f9..57adcfa6 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsFilesManagerTest.java
@@ -20,6 +20,7 @@
 import com.twitter.sdk.android.core.internal.CommonUtils;
 import com.twitter.sdk.android.core.internal.CurrentTimeProvider;
 import com.twitter.sdk.android.core.internal.SystemCurrentTimeProvider;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -37,7 +38,10 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
 public class EventsFilesManagerTest {
@@ -117,7 +121,7 @@ public void testSizeTriggeredRollOver() throws IOException{
     }
 
     @Test
-    public void testParseTimestampFromRolledOverFileName() throws IOException{
+    public void testParseTimestampFromRolledOverFileName() {
         final long startTime = 10000L;
 
         when(mockCurrentTimeProvider.getCurrentTimeMillis()).thenReturn(startTime);
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
index e55d94d5..80d2de74 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/BindingValuesAdapterTest.java
@@ -53,49 +53,49 @@ public void testDeserialize_withValidBindingValues() {
                 .getAsStream("model_card.json")));
         final Card card = gson.fromJson(reader, Card.class);
 
-        assertNotNull(card.bindingValues);
-        assertTrue(card.bindingValues.containsKey("app_id"));
-        assertEquals("co.vine.android", card.bindingValues.get("app_id"));
-        assertTrue(card.bindingValues.containsKey("app_is_free"));
-        assertEquals("true", card.bindingValues.get("app_is_free"));
-        assertTrue(card.bindingValues.containsKey("app_name"));
-        assertEquals("Vine - video entertainment", card.bindingValues.get("app_name"));
-        assertTrue(card.bindingValues.containsKey("app_num_ratings"));
-        assertEquals("1,080,460", card.bindingValues.get("app_num_ratings"));
-        assertTrue(card.bindingValues.containsKey("app_price_amount"));
-        assertEquals("0.0", card.bindingValues.get("app_price_amount"));
-        assertTrue(card.bindingValues.containsKey("app_price_currency"));
-        assertEquals("USD", card.bindingValues.get("app_price_currency"));
-        assertTrue(card.bindingValues.containsKey("app_star_rating"));
-        assertEquals("4.2", card.bindingValues.get("app_star_rating"));
-        assertTrue(card.bindingValues.containsKey("app_url"));
-        assertTrue(card.bindingValues.containsKey("app_url_resolved"));
-        assertTrue(card.bindingValues.containsKey("card_url"));
-        assertTrue(card.bindingValues.containsKey("description"));
-        assertEquals("Vine by Krystaalized", card.bindingValues.get("description"));
-        assertTrue(card.bindingValues.containsKey("domain"));
-        assertEquals("vine.co", card.bindingValues.get("domain"));
-        assertTrue(card.bindingValues.containsKey("player_height"));
-        assertEquals("535", card.bindingValues.get("player_height"));
-        assertTrue(card.bindingValues.containsKey("player_image"));
-        final ImageValue imageValue = card.bindingValues.get("player_image");
+        assertNotNull(card.getBindingValues());
+        assertTrue(card.getBindingValues().containsKey("app_id"));
+        assertEquals("co.vine.android", card.getBindingValues().get("app_id"));
+        assertTrue(card.getBindingValues().containsKey("app_is_free"));
+        assertEquals("true", card.getBindingValues().get("app_is_free"));
+        assertTrue(card.getBindingValues().containsKey("app_name"));
+        assertEquals("Vine - video entertainment", card.getBindingValues().get("app_name"));
+        assertTrue(card.getBindingValues().containsKey("app_num_ratings"));
+        assertEquals("1,080,460", card.getBindingValues().get("app_num_ratings"));
+        assertTrue(card.getBindingValues().containsKey("app_price_amount"));
+        assertEquals("0.0", card.getBindingValues().get("app_price_amount"));
+        assertTrue(card.getBindingValues().containsKey("app_price_currency"));
+        assertEquals("USD", card.getBindingValues().get("app_price_currency"));
+        assertTrue(card.getBindingValues().containsKey("app_star_rating"));
+        assertEquals("4.2", card.getBindingValues().get("app_star_rating"));
+        assertTrue(card.getBindingValues().containsKey("app_url"));
+        assertTrue(card.getBindingValues().containsKey("app_url_resolved"));
+        assertTrue(card.getBindingValues().containsKey("card_url"));
+        assertTrue(card.getBindingValues().containsKey("description"));
+        assertEquals("Vine by Krystaalized", card.getBindingValues().get("description"));
+        assertTrue(card.getBindingValues().containsKey("domain"));
+        assertEquals("vine.co", card.getBindingValues().get("domain"));
+        assertTrue(card.getBindingValues().containsKey("player_height"));
+        assertEquals("535", card.getBindingValues().get("player_height"));
+        assertTrue(card.getBindingValues().containsKey("player_image"));
+        final ImageValue imageValue = card.getBindingValues().get("player_image");
         assertNotNull(imageValue);
         assertEquals(480, imageValue.height);
         assertEquals(480, imageValue.width);
         assertEquals("https://o.twimg.com/qwhjddd", imageValue.url);
-        assertTrue(card.bindingValues.containsKey("player_stream_content_type"));
-        assertTrue(card.bindingValues.containsKey("player_stream_url"));
-        assertTrue(card.bindingValues.containsKey("player_url"));
-        assertTrue(card.bindingValues.containsKey("player_width"));
-        assertEquals("535", card.bindingValues.get("player_width"));
-        assertTrue(card.bindingValues.containsKey("site"));
-        assertNotNull(card.bindingValues.get("site"));
-        assertEquals("586671909", ((UserValue) card.bindingValues.get("site")).idStr);
-        assertTrue(card.bindingValues.containsKey("title"));
-        assertTrue(card.bindingValues.containsKey("vanity_url"));
-        assertEquals("vine.co", card.bindingValues.get("vanity_url"));
-        assertFalse(card.bindingValues.containsKey("foo"));
-        assertFalse(card.bindingValues.containsKey(null));
+        assertTrue(card.getBindingValues().containsKey("player_stream_content_type"));
+        assertTrue(card.getBindingValues().containsKey("player_stream_url"));
+        assertTrue(card.getBindingValues().containsKey("player_url"));
+        assertTrue(card.getBindingValues().containsKey("player_width"));
+        assertEquals("535", card.getBindingValues().get("player_width"));
+        assertTrue(card.getBindingValues().containsKey("site"));
+        assertNotNull(card.getBindingValues().get("site"));
+        assertEquals("586671909", ((UserValue) card.getBindingValues().get("site")).getIdStr());
+        assertTrue(card.getBindingValues().containsKey("title"));
+        assertTrue(card.getBindingValues().containsKey("vanity_url"));
+        assertEquals("vine.co", card.getBindingValues().get("vanity_url"));
+        assertFalse(card.getBindingValues().containsKey("foo"));
+        assertFalse(card.getBindingValues().containsKey(null));
     }
 
     @Test
