diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.java
deleted file mode 100644
index 2970f208..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-
-/**
- * Current configuration used by Twitter
- */
-public class Configuration {
-    /**
-     * Maximum number of characters per direct message
-     */
-    @SerializedName("dm_text_character_limit")
-    public final int dmTextCharacterLimit;
-
-    /**
-     * Slugs which are not user names
-     */
-    @SerializedName("non_username_paths")
-    public final List<String> nonUsernamePaths;
-
-    /**
-     * Maximum size in bytes for the media file.
-     */
-    @SerializedName("photo_size_limit")
-    public final long photoSizeLimit;
-
-    /**
-     * Maximum resolution for the media files.
-     */
-    @SerializedName("photo_sizes")
-    public final MediaEntity.Sizes photoSizes;
-
-    /**
-     * Current t.co URL length
-     */
-    @SerializedName("short_url_length_https")
-    public final int shortUrlLengthHttps;
-
-    private Configuration() {
-        this(0, null, 0, null, 0);
-    }
-
-    public Configuration(int dmTextCharacterLimit, List<String> nonUsernamePaths,
-            long photoSizeLimit, MediaEntity.Sizes photoSizes, int shortUrlLengthHttps) {
-        this.dmTextCharacterLimit = dmTextCharacterLimit;
-        this.nonUsernamePaths = ModelUtils.getSafeList(nonUsernamePaths);
-        this.photoSizeLimit = photoSizeLimit;
-        this.photoSizes = photoSizes;
-        this.shortUrlLengthHttps = shortUrlLengthHttps;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.kt
new file mode 100644
index 00000000..ce7dd63e
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.kt
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.models
+
+import com.google.gson.annotations.SerializedName
+
+/**
+ * Current configuration used by Twitter
+ */
+class Configuration constructor(
+        /**
+         * Maximum number of characters per direct message
+         */
+        @SerializedName("dm_text_character_limit")
+        val dmTextCharacterLimit: Int,
+
+        /**
+         * Maximum size in bytes for the media file.
+         */
+        @SerializedName("photo_size_limit")
+        val photoSizeLimit: Long,
+        /**
+         * Maximum resolution for the media files.
+         */
+        @SerializedName("photo_sizes")
+        val photoSizes: MediaEntity.Sizes?,
+        /**
+         * Current t.co URL length
+         */
+        @SerializedName("short_url_length_https")
+        val shortUrlLengthHttps: Int,
+        /**
+         * Slugs which are not user names
+         */
+        @SerializedName("non_username_paths")
+        val nonUsernamePaths: List<String>?)
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
index 2c4af5b6..1455cd76 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
@@ -21,6 +21,7 @@
 import com.google.gson.stream.JsonReader;
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
+
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -52,16 +53,16 @@ public void testDeserialization() {
             reader = new JsonReader(new InputStreamReader(testResources
                     .getAsStream("model_configuration.json")));
             final Configuration configuration = new Gson().fromJson(reader, Configuration.class);
-            assertEquals(TEST_DM_CHAR_LIMIT, configuration.dmTextCharacterLimit);
-            assertNotNull(configuration.nonUsernamePaths);
-            assertEquals(TEST_NUN_NON_USER_NAME, configuration.nonUsernamePaths.size());
-            assertEquals(TEST_PHOTO_SIZE_LIMIT, configuration.photoSizeLimit);
-            assertNotNull(configuration.photoSizes);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_THUMB, configuration.photoSizes.thumb);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_SMALL, configuration.photoSizes.small);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_MEDIUM, configuration.photoSizes.medium);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_LARGE, configuration.photoSizes.large);
-            assertEquals(TEST_SHORT_URL_LENGTH, configuration.shortUrlLengthHttps);
+            assertEquals(TEST_DM_CHAR_LIMIT, configuration.getDmTextCharacterLimit());
+            assertNotNull(configuration.getNonUsernamePaths());
+            assertEquals(TEST_NUN_NON_USER_NAME, configuration.getNonUsernamePaths().size());
+            assertEquals(TEST_PHOTO_SIZE_LIMIT, configuration.getPhotoSizeLimit());
+            assertNotNull(configuration.getPhotoSizes());
+            MediaEntityTest.assertSizeEquals(TEST_SIZE_THUMB, configuration.getPhotoSizes().thumb);
+            MediaEntityTest.assertSizeEquals(TEST_SIZE_SMALL, configuration.getPhotoSizes().small);
+            MediaEntityTest.assertSizeEquals(TEST_SIZE_MEDIUM, configuration.getPhotoSizes().medium);
+            MediaEntityTest.assertSizeEquals(TEST_SIZE_LARGE, configuration.getPhotoSizes().large);
+            assertEquals(TEST_SHORT_URL_LENGTH, configuration.getShortUrlLengthHttps());
         } finally {
             CommonUtils.closeQuietly(reader);
         }
