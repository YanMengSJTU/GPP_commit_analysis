diff --git a/samples/app/src/main/java/com/example/app/tweetcomposer/TweetComposerMainActivity.java b/samples/app/src/main/java/com/example/app/tweetcomposer/TweetComposerMainActivity.java
index cc7a0979..d8e299ca 100644
--- a/samples/app/src/main/java/com/example/app/tweetcomposer/TweetComposerMainActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetcomposer/TweetComposerMainActivity.java
@@ -23,7 +23,6 @@
 import android.os.Bundle;
 import android.support.v7.app.ActionBar;
 import android.util.Log;
-import android.view.View;
 import android.widget.Button;
 
 import com.example.app.BaseActivity;
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TimelineActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TimelineActivity.java
index a00677eb..a8c6f3fa 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TimelineActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TimelineActivity.java
@@ -45,7 +45,7 @@
  */
 public class TimelineActivity extends BaseActivity {
 
-    final WeakReference<Activity> activityRef = new WeakReference<Activity>(TimelineActivity.this);
+    final WeakReference<Activity> activityRef = new WeakReference<>(TimelineActivity.this);
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TweetActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TweetActivity.java
index d3d4f579..1aaf0534 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TweetActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TweetActivity.java
@@ -19,6 +19,7 @@
 
 import android.content.Context;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v7.app.ActionBar;
 import android.util.Log;
@@ -84,8 +85,8 @@ public static TweetsFragment newInstance() {
         }
 
         @Override
-        public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                Bundle savedInstanceState) {
+        public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
+                                 Bundle savedInstanceState) {
             final View v = inflater.inflate(R.layout.tweetui_fragment_tweet, container, false);
 
             final ViewGroup tweetRegion = v.findViewById(R.id.tweet_region);
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TweetPreviewActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TweetPreviewActivity.java
index 66cf3de1..15d7d24f 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TweetPreviewActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TweetPreviewActivity.java
@@ -20,6 +20,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v7.app.ActionBar;
 import android.util.Log;
@@ -74,7 +75,7 @@ public static TweetPreviewFragment newInstance() {
         }
 
         @Override
-        public View onCreateView(LayoutInflater inflater, final ViewGroup container,
+        public View onCreateView(@NonNull LayoutInflater inflater, final ViewGroup container,
                                  Bundle savedInstanceState) {
             final View v = inflater.inflate(R.layout.tweetui_fragment_tweet_preview, container,
                     false);
diff --git a/samples/app/src/main/java/com/example/app/tweetui/TweetUiMainActivity.java b/samples/app/src/main/java/com/example/app/tweetui/TweetUiMainActivity.java
index 4a9d49b3..bddd6c4f 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/TweetUiMainActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/TweetUiMainActivity.java
@@ -20,7 +20,6 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.v7.app.ActionBar;
-import android.view.View;
 import android.widget.Button;
 
 import com.example.app.BaseActivity;
diff --git a/samples/app/src/main/java/com/example/app/tweetui/UniqueTweetActivity.java b/samples/app/src/main/java/com/example/app/tweetui/UniqueTweetActivity.java
index c00fde3a..ecb8575f 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/UniqueTweetActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/UniqueTweetActivity.java
@@ -18,6 +18,7 @@
 package com.example.app.tweetui;
 
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v7.app.ActionBar;
 import android.view.LayoutInflater;
@@ -63,7 +64,7 @@ public static UniqueTweetFragment newInstance() {
         }
 
         @Override
-        public View onCreateView(LayoutInflater inflater, ViewGroup container,
+        public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                                  Bundle savedInstanceState) {
             final View v = inflater.inflate(R.layout.tweetui_fragment_unique_tweet, container,
                     false);
diff --git a/samples/app/src/main/java/com/example/app/tweetui/UserTimelineRecyclerViewFragment.java b/samples/app/src/main/java/com/example/app/tweetui/UserTimelineRecyclerViewFragment.java
index 5f6e8cc9..3132e510 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/UserTimelineRecyclerViewFragment.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/UserTimelineRecyclerViewFragment.java
@@ -18,6 +18,7 @@
 package com.example.app.tweetui;
 
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
@@ -42,7 +43,7 @@ public static UserTimelineRecyclerViewFragment newInstance() {
     }
 
     @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         final View view = inflater.inflate(R.layout.tweetui_timeline_recyclerview, container, false);
         final RecyclerView recyclerView = view.findViewById(R.id.recycler_view);
diff --git a/samples/app/src/main/java/com/example/app/tweetui/XmlTweetActivity.java b/samples/app/src/main/java/com/example/app/tweetui/XmlTweetActivity.java
index 4a972b9e..ac5ae161 100644
--- a/samples/app/src/main/java/com/example/app/tweetui/XmlTweetActivity.java
+++ b/samples/app/src/main/java/com/example/app/tweetui/XmlTweetActivity.java
@@ -18,6 +18,7 @@
 package com.example.app.tweetui;
 
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v7.app.ActionBar;
 import android.view.LayoutInflater;
@@ -57,8 +58,8 @@ public static XmlTweetFragment newInstance() {
         }
 
         @Override
-        public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                Bundle savedInstanceState) {
+        public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
+                                 Bundle savedInstanceState) {
             return inflater.inflate(R.layout.tweetui_fragment_xml_tweet, container, false);
         }
     }
diff --git a/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java b/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
index 29b71864..7fbf5d52 100644
--- a/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
+++ b/tweet-composer/src/androidTest/java/com/twitter/sdk/android/tweetcomposer/TweetComposerTest.java
@@ -18,6 +18,7 @@
 package com.twitter.sdk.android.tweetcomposer;
 
 import android.test.AndroidTestCase;
+
 import com.twitter.sdk.android.core.Twitter;
 import com.twitter.sdk.android.core.TwitterConfig;
 import com.twitter.sdk.android.core.TwitterCoreTestUtils;
@@ -51,12 +52,12 @@ public void tearDown()  throws Exception {
 
     public void testGetVersion() {
         final String version = BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER;
-        assertEquals(version, tweetComposer.getVersion());
+        Assert.assertEquals(version, tweetComposer.getVersion());
     }
 
     public void testGetIdentifier() {
         final String identifier = BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID;
-        assertEquals(identifier, tweetComposer.getIdentifier());
+        Assert.assertEquals(identifier, tweetComposer.getIdentifier());
     }
 
     public void testGetInstance_twitterNotInitialized() {
@@ -66,9 +67,9 @@ public void testGetInstance_twitterNotInitialized() {
             TweetComposer.instance = null;
 
             TweetComposer.getInstance();
-            fail("Should fail if Twitter is not initialized");
+            Assert.fail("Should fail if Twitter is not initialized");
         } catch (IllegalStateException e) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, e.getMessage());
+            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, e.getMessage());
         }
     }
 }
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/FileUtils.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/FileUtils.java
index ee3012a3..5a73df99 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/FileUtils.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/FileUtils.java
@@ -79,18 +79,12 @@ static boolean isFileScheme(Uri uri) {
     }
 
     static String resolveFilePath(Context context, Uri uri, String selection, String[] args) {
-        Cursor cursor = null;
         final String[] projection = {MediaStore.Images.Media.DATA};
-        try {
-            cursor = context.getContentResolver().query(uri, projection, selection, args, null);
+        try (Cursor cursor = context.getContentResolver().query(uri, projection, selection, args, null)) {
             if (cursor != null && cursor.moveToFirst()) {
                 final int i = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                 return cursor.getString(i);
             }
-        } finally {
-            if (cursor != null) {
-                cursor.close();
-            }
         }
         return null;
     }
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
index a0ac8ec3..80590f89 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/ComposerControllerTest.java
@@ -20,23 +20,30 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+
 import com.twitter.Validator;
 import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterSession;
 import com.twitter.sdk.android.core.services.AccountService;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricTestRunner;
+
 import retrofit2.Call;
 
 import static com.twitter.sdk.android.tweetcomposer.TweetUploadService.TWEET_COMPOSE_CANCEL;
-import static org.junit.Assert.*;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
 public class ComposerControllerTest {
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetComposerIntentBuilderTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetComposerIntentBuilderTest.java
index 32279fb7..098afcfd 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetComposerIntentBuilderTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetComposerIntentBuilderTest.java
@@ -24,6 +24,7 @@
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -33,9 +34,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
@@ -49,7 +50,7 @@
     @Test
     public void testBuilder_constructor() {
         final TweetComposer.Builder builder = new TweetComposer.Builder(mock(Context.class));
-        assertNotNull(builder);
+        Assert.assertThat(builder, notNullValue());
     }
 
     @Test
@@ -58,7 +59,7 @@ public void testBuilder_constructorNullContext() {
             new TweetComposer.Builder(null);
             fail();
         } catch (IllegalArgumentException e) {
-            assertEquals("Context must not be null.", e.getMessage());
+            Assert.assertThat(e.getMessage(), is("Context must not be null."));
         }
     }
 
@@ -68,7 +69,7 @@ public void testBuilder_text() {
         final String text = "test";
         final TweetComposer.Builder builder = new TweetComposer.Builder(context).text(text);
         final Intent intent = builder.createTwitterIntent();
-        assertEquals(text, intent.getStringExtra(Intent.EXTRA_TEXT));
+        Assert.assertThat(intent.getStringExtra(Intent.EXTRA_TEXT), is(text));
     }
 
     @Test
@@ -77,7 +78,7 @@ public void testBuilder_textNull() {
             new TweetComposer.Builder(mock(Context.class)).text(null);
             fail();
         } catch (IllegalArgumentException ignored) {
-            assertEquals("text must not be null.", ignored.getMessage());
+            Assert.assertThat(ignored.getMessage(), is("text must not be null."));
         }
     }
 
@@ -88,7 +89,7 @@ public void testBuilder_textAlreadySet() {
             new TweetComposer.Builder(mock(Context.class)).text(text).text(text);
             fail();
         } catch (IllegalStateException ignored) {
-            assertEquals("text already set.", ignored.getMessage());
+            Assert.assertThat(ignored.getMessage(), is("text already set."));
         }
     }
 
@@ -103,7 +104,7 @@ public void testBuilder_textAndUrl() throws MalformedURLException {
                 .text(text)
                 .url(url);
         final Intent intent = builder.createTwitterIntent();
-        assertEquals(result, intent.getStringExtra(Intent.EXTRA_TEXT));
+        Assert.assertThat(intent.getStringExtra(Intent.EXTRA_TEXT), is(result));
     }
 
     @Test
@@ -112,7 +113,7 @@ public void testBuilder_url() throws MalformedURLException {
         final URL url = new URL("http://www.twitter.com");
         final TweetComposer.Builder builder = new TweetComposer.Builder(context).url(url);
         final Intent intent = builder.createTwitterIntent();
-        assertEquals(url.toString(), intent.getStringExtra(Intent.EXTRA_TEXT));
+        Assert.assertThat(intent.getStringExtra(Intent.EXTRA_TEXT), is(url.toString()));
     }
 
     @Test
@@ -121,7 +122,7 @@ public void testBuilder_urlNull() {
             new TweetComposer.Builder(mock(Context.class)).url(null);
             fail();
         } catch (IllegalArgumentException ignored) {
-            assertEquals("url must not be null.", ignored.getMessage());
+            Assert.assertThat(ignored.getMessage(), is("url must not be null."));
         }
     }
 
@@ -132,7 +133,7 @@ public void testBuilder_urlAlreadySet() throws MalformedURLException {
             new TweetComposer.Builder(mock(Context.class)).url(url).url(url);
             fail();
         } catch (IllegalStateException ignored) {
-            assertEquals("url already set.", ignored.getMessage());
+            Assert.assertThat(ignored.getMessage(), is("url already set."));
         }
     }
 
@@ -142,7 +143,7 @@ public void testBuilder_image() {
         final Uri uri = Uri.parse("http://www.twitter.com");
         final TweetComposer.Builder builder = new TweetComposer.Builder(context).image(uri);
         final Intent intent = builder.createTwitterIntent();
-        assertEquals(uri, intent.getParcelableExtra(Intent.EXTRA_STREAM));
+        Assert.assertThat(intent.getParcelableExtra(Intent.EXTRA_STREAM), is(uri));
     }
 
     @Test
@@ -151,7 +152,7 @@ public void testBuilder_imageNull() {
             new TweetComposer.Builder(mock(Context.class)).image(null);
             fail();
         } catch (IllegalArgumentException ignored) {
-            assertEquals("imageUri must not be null.", ignored.getMessage());
+            Assert.assertThat(ignored.getMessage(), is("imageUri must not be null."));
         }
     }
 
@@ -162,7 +163,7 @@ public void testBuilder_imageAlreadySet() {
             new TweetComposer.Builder(mock(Context.class)).image(uri).image(uri);
             fail();
         } catch (IllegalStateException ignored) {
-            assertEquals("imageUri already set.", ignored.getMessage());
+            Assert.assertThat(ignored.getMessage(), is("imageUri already set."));
         }
     }
 
@@ -173,8 +174,8 @@ public void testBuilder_createIntentTwitterInstalled() {
         final Intent intentTwitter = builder.createTwitterIntent();
         final Intent intent = builder.createIntent();
 
-        assertNotNull(intent);
-        assertNotNull(intentTwitter);
+        Assert.assertThat(intent, notNullValue());
+        Assert.assertThat(intentTwitter, notNullValue());
         assertIntentEquals(intentTwitter, intent);
     }
 
@@ -186,8 +187,8 @@ public void testBuilder_createIntentTwitterNotInstalled() {
         final Intent intentTwitter = builder.createTwitterIntent();
         final Intent intentWeb = builder.createWebIntent();
 
-        assertNotNull(intent);
-        assertNull(intentTwitter);
+        Assert.assertThat(intent, notNullValue());
+        Assert.assertThat(intentTwitter, nullValue());
         assertIntentEquals(intentWeb, intent);
     }
 
@@ -225,11 +226,9 @@ private Context createIntentContext(boolean twitterInstalled) {
     }
 
     private void assertIntentEquals(Intent intent, Intent otherIntent) {
-        assertEquals(intent.getType(), otherIntent.getType());
-        assertEquals(intent.getAction(), otherIntent.getAction());
-        assertEquals(intent.getStringExtra(Intent.EXTRA_TEXT),
-                otherIntent.getStringExtra(Intent.EXTRA_TEXT));
-        assertEquals(intent.getStringExtra(intent.getStringExtra(Intent.EXTRA_STREAM)),
-                otherIntent.getStringExtra(Intent.EXTRA_STREAM));
+        Assert.assertThat(otherIntent.getType(), is(intent.getType()));
+        Assert.assertThat(otherIntent.getAction(), is(intent.getAction()));
+        Assert.assertThat(otherIntent.getStringExtra(Intent.EXTRA_TEXT), is(intent.getStringExtra(Intent.EXTRA_TEXT)));
+        Assert.assertThat(otherIntent.getStringExtra(Intent.EXTRA_STREAM), is(intent.getStringExtra(intent.getStringExtra(Intent.EXTRA_STREAM))));
     }
 }
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
index 6d67e0b3..35f4756f 100644
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
@@ -20,6 +20,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+
 import com.twitter.sdk.android.core.TwitterApiClient;
 import com.twitter.sdk.android.core.TwitterAuthToken;
 import com.twitter.sdk.android.core.TwitterException;
@@ -28,7 +29,7 @@
 import com.twitter.sdk.android.core.models.TweetBuilder;
 import com.twitter.sdk.android.core.services.MediaService;
 import com.twitter.sdk.android.core.services.StatusesService;
-import okhttp3.RequestBody;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -36,18 +37,24 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import retrofit2.Call;
-import retrofit2.mock.Calls;
 
 import java.io.IOException;
 
+import okhttp3.RequestBody;
+import retrofit2.Call;
+import retrofit2.mock.Calls;
+
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isNull;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyLong;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.eq;
+import static org.mockito.Mockito.isNull;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
 public class TweetUploadServiceTest {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
index 46d11f95..f2effd2e 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/AbstractTweetViewTest.java
@@ -83,40 +83,40 @@ private void setUpMockDependencyProvider() {
     public void testInit() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final long tweetId = TestFixtures.TEST_TWEET.id;
-        assertEquals(tweetId, view.getTweetId());
-        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
+        Assert.assertEquals(tweetId, view.getTweetId());
+        Assert.assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
+        Assert.assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
     }
 
     public void testInit_withEmptyTweet() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, fields should clear
         view.setTweet(TestFixtures.EMPTY_TWEET);
-        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
     }
 
     public void testInit_withNullTweet() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, fields should clear
         view.setTweet(null);
-        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
     }
 
     public void testInit_inEditMode() {
         TwitterTestUtils.resetTwitter();
         try {
             final AbstractTweetView view = createViewInEditMode(context, TestFixtures.TEST_TWEET);
-            assertTrue(view.isInEditMode());
-            assertTrue(view.isEnabled());
+            Assert.assertTrue(view.isInEditMode());
+            Assert.assertTrue(view.isEnabled());
         } catch (Exception e) {
-            fail("Must start TweetUi... IllegalStateException should be caught");
+            Assert.fail("Must start TweetUi... IllegalStateException should be caught");
         } finally {
             TwitterTestUtils.resetTwitter();
         }
@@ -124,18 +124,18 @@ public void testInit_inEditMode() {
 
     public void testIsTweetUiEnabled_withEditMode() {
         final AbstractTweetView view = createView(getContext(), TestFixtures.TEST_TWEET);
-        assertTrue(view.isTweetUiEnabled());
+        Assert.assertTrue(view.isTweetUiEnabled());
     }
 
     public void testIsTweetUiEnabled_inEditMode() {
         final AbstractTweetView view = createViewInEditMode(getContext(), TestFixtures.TEST_TWEET);
-        assertFalse(view.isTweetUiEnabled());
+        Assert.assertFalse(view.isTweetUiEnabled());
     }
 
     public void testIsTweetUiEnabled_tweetUiStarted() {
         final AbstractTweetView view = new TweetView(getContext(), TestFixtures.TEST_TWEET);
-        assertTrue(view.isTweetUiEnabled());
-        assertTrue(view.isEnabled());
+        Assert.assertTrue(view.isTweetUiEnabled());
+        Assert.assertTrue(view.isEnabled());
     }
 
     // Tests Date formatting reliant string, manually sets english and restores original locale
@@ -143,7 +143,7 @@ public void testGetContentDescription_emptyTweet() {
         final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         view.setTweet(TestFixtures.EMPTY_TWEET);
-        assertEquals(getResources().getString(R.string.tw__loading_tweet),
+        Assert.assertEquals(getResources().getString(R.string.tw__loading_tweet),
                 view.getContentDescription());
         TestUtils.setLocale(getContext(), originalLocale);
     }
@@ -153,8 +153,8 @@ public void testGetContentDescription_fullTweet() {
         final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
 
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertTrue(TweetUtils.isTweetResolvable(view.tweet));
-        assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
+        Assert.assertTrue(TweetUtils.isTweetResolvable(view.tweet));
+        Assert.assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
 
         TestUtils.setLocale(getContext(), originalLocale);
     }
@@ -165,7 +165,7 @@ public void testSetTweetMediaClickListener() {
 
         });
 
-        assertNotNull(view.tweetMediaClickListener);
+        Assert.assertNotNull(view.tweetMediaClickListener);
     }
 
     public void testSetTweetLinkClickListener() {
@@ -173,7 +173,7 @@ public void testSetTweetLinkClickListener() {
         final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
         view.setTweetLinkClickListener(linkClickListener);
 
-        assertNotNull(view.tweetLinkClickListener);
+        Assert.assertNotNull(view.tweetLinkClickListener);
 
         view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_URL);
         verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_LINK, TestFixtures.TEST_URL);
@@ -184,7 +184,7 @@ public void testSetHashtagLinkClickListener() {
         final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
         view.setTweetLinkClickListener(linkClickListener);
 
-        assertNotNull(view.tweetLinkClickListener);
+        Assert.assertNotNull(view.tweetLinkClickListener);
 
         view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_HASHTAG);
         verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_HASHTAG,
@@ -194,47 +194,47 @@ public void testSetHashtagLinkClickListener() {
     public void testSetTweet_defaultClickListener() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
 
-        assertNull(view.tweetLinkClickListener);
+        Assert.assertNull(view.tweetLinkClickListener);
     }
 
     // Permalink click
     public void testSetTweet_permalink() {
         final AbstractTweetView view = createView(context, null);
         view.setTweet(TestFixtures.TEST_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        Assert.assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
     }
 
     // permalinkUri should be null so the permalink launcher will be a NoOp
     public void testSetTweet_nullTweetPermalink() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         view.setTweet(null);
-        assertNull(view.getPermalinkUri());
+        Assert.assertNull(view.getPermalinkUri());
     }
 
     public void testSetTweet_updatePermalink() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        Assert.assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
         view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
+        Assert.assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
     }
 
     public void testGetAspectRatio_withNullMediaEntity() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final MediaEntity mediaEntity = null;
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
     }
 
     public void testGetAspectRatio_withNullImageValue() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final ImageValue imageValue = null;
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
     }
 
     public void testGetAspectRatio_mediaEntityWithNullSizes() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(null);
 
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
     }
 
     public void testGetAspectRatio_mediaEntityWithEmptySizes() {
@@ -242,17 +242,17 @@ public void testGetAspectRatio_mediaEntityWithEmptySizes() {
         final MediaEntity.Sizes sizes = new MediaEntity.Sizes(null, null, null, null);
         final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(sizes);
 
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
     }
 
     public void testGetAspectRatio_mediaEntityWithZeroDimension() {
         final AbstractTweetView view = createView(context, TestFixtures.TEST_TWEET);
 
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
                 view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)));
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
                 view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)));
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
                 view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)));
     }
 
@@ -289,7 +289,7 @@ public void testSetTweetMedia_handlesNullPicasso() {
         try {
             tweetView.setTweetMedia(mock(Tweet.class));
         } catch (NullPointerException e) {
-            fail("Should have handled null error image");
+            Assert.fail("Should have handled null error image");
         }
     }
 
@@ -297,18 +297,18 @@ public void testRender_forSinglePhotoEntity() {
         final AbstractTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_PHOTO_TWEET);
 
-        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+        Assert.assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
+        Assert.assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
+        Assert.assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
     }
 
     public void testRender_forMultiplePhotoEntities() {
         final AbstractTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_MULTIPLE_PHOTO_TWEET);
 
-        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+        Assert.assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
+        Assert.assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
+        Assert.assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
     }
 
     public void testRender_rendersVineCard() {
@@ -320,12 +320,12 @@ public void testRender_rendersVineCard() {
 
         view.setTweet(tweetWithVineCard);
 
-        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
-        assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
+        Assert.assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
+        Assert.assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
+        Assert.assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
+        Assert.assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
+        Assert.assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
     }
 
     public void testClearMedia() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
index a17159df..15a28908 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewTest.java
@@ -103,33 +103,33 @@ private void setUpMockDependencyProvider() {
     public void testInit() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final long tweetId = TestFixtures.TEST_TWEET.id;
-        assertEquals(tweetId, view.getTweetId());
-        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        assertEquals(TestFixtures.TIMESTAMP_RENDERED, view.timestampView.getText().toString());
+        Assert.assertEquals(tweetId, view.getTweetId());
+        Assert.assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
+        Assert.assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
+        Assert.assertEquals(TestFixtures.TIMESTAMP_RENDERED, view.timestampView.getText().toString());
     }
 
     public void testInit_withEmptyTweet() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, fields should clear
         view.setTweet(TestFixtures.EMPTY_TWEET);
-        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
     }
 
     public void testInit_withNullTweet() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, fields should clear
         view.setTweet(null);
-        assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
-        assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_TWEET.id, view.getTweetId());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
     }
 
     // setTweet with a Tweet with an invalid timestamp makes timestamp view show an empty string
@@ -137,18 +137,18 @@ public void testInit_withInvalidTimestamp() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         // recycle so we're not relying on first time defaults, timestamp should clear
         view.setTweet(TestFixtures.INVALID_TIMESTAMP_TWEET);
-        assertEquals(TestFixtures.INVALID_TIMESTAMP_TWEET.id, view.getTweetId());
-        assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
+        Assert.assertEquals(TestFixtures.INVALID_TIMESTAMP_TWEET.id, view.getTweetId());
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
     }
 
     public void testInit_inEditMode() {
         TwitterTestUtils.resetTwitter();
         try {
             final BaseTweetView view = createViewInEditMode(context, TestFixtures.TEST_TWEET);
-            assertTrue(view.isInEditMode());
-            assertTrue(view.isEnabled());
+            Assert.assertTrue(view.isInEditMode());
+            Assert.assertTrue(view.isEnabled());
         } catch (Exception e) {
-            fail("Must start TweetUi... IllegalStateException should be caught");
+            Assert.fail("Must start TweetUi... IllegalStateException should be caught");
         } finally {
             TwitterTestUtils.resetTwitter();
         }
@@ -156,18 +156,18 @@ public void testInit_inEditMode() {
 
     public void testIsTweetUiEnabled_withEditMode() {
         final BaseTweetView view = createView(getContext(), TestFixtures.TEST_TWEET);
-        assertTrue(view.isTweetUiEnabled());
+        Assert.assertTrue(view.isTweetUiEnabled());
     }
 
     public void testIsTweetUiEnabled_inEditMode() {
         final BaseTweetView view = createViewInEditMode(getContext(), TestFixtures.TEST_TWEET);
-        assertFalse(view.isTweetUiEnabled());
+        Assert.assertFalse(view.isTweetUiEnabled());
     }
 
     public void testIsTweetUiEnabled_tweetUiStarted() {
         final BaseTweetView view = new TweetView(getContext(), TestFixtures.TEST_TWEET);
-        assertTrue(view.isTweetUiEnabled());
-        assertTrue(view.isEnabled());
+        Assert.assertTrue(view.isTweetUiEnabled());
+        Assert.assertTrue(view.isEnabled());
     }
 
     // Tests Date formatting reliant string, manually sets english and restores original locale
@@ -175,7 +175,7 @@ public void testGetContentDescription_emptyTweet() {
         final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         view.setTweet(TestFixtures.EMPTY_TWEET);
-        assertEquals(getResources().getString(R.string.tw__loading_tweet),
+        Assert.assertEquals(getResources().getString(R.string.tw__loading_tweet),
                 view.getContentDescription());
         TestUtils.setLocale(getContext(), originalLocale);
     }
@@ -185,8 +185,8 @@ public void testGetContentDescription_fullTweet() {
         final Locale originalLocale = TestUtils.setLocale(getContext(), Locale.ENGLISH);
 
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertTrue(TweetUtils.isTweetResolvable(view.tweet));
-        assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
+        Assert.assertTrue(TweetUtils.isTweetResolvable(view.tweet));
+        Assert.assertEquals(TestFixtures.TEST_CONTENT_DESCRIPTION, view.getContentDescription());
 
         TestUtils.setLocale(getContext(), originalLocale);
     }
@@ -197,7 +197,7 @@ public void testSetTweetMediaClickListener() {
 
         });
 
-        assertNotNull(view.tweetMediaClickListener);
+        Assert.assertNotNull(view.tweetMediaClickListener);
     }
 
     public void testSetTweetLinkClickListener() {
@@ -205,7 +205,7 @@ public void testSetTweetLinkClickListener() {
         final TweetLinkClickListener linkClickListener = mock(TweetLinkClickListener.class);
         view.setTweetLinkClickListener(linkClickListener);
 
-        assertNotNull(view.tweetLinkClickListener);
+        Assert.assertNotNull(view.tweetLinkClickListener);
 
         view.getLinkClickListener().onUrlClicked(TestFixtures.TEST_URL);
         verify(linkClickListener).onLinkClick(TestFixtures.TEST_TWEET_LINK, TestFixtures.TEST_URL);
@@ -214,28 +214,28 @@ public void testSetTweetLinkClickListener() {
     public void testSetTweet_defaultClickListener() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET_LINK);
 
-        assertNull(view.tweetLinkClickListener);
+        Assert.assertNull(view.tweetLinkClickListener);
     }
 
     // Permalink click
     public void testSetTweet_permalink() {
         final BaseTweetView view = createView(context, null);
         view.setTweet(TestFixtures.TEST_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        Assert.assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
     }
 
     // permalinkUri should be null so the permalink launcher will be a NoOp
     public void testSetTweet_nullTweetPermalink() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         view.setTweet(null);
-        assertNull(view.getPermalinkUri());
+        Assert.assertNull(view.getPermalinkUri());
     }
 
     public void testSetTweet_updatePermalink() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
+        Assert.assertEquals(TestFixtures.TEST_PERMALINK_ONE, view.getPermalinkUri().toString());
         view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
+        Assert.assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
     }
 
     // Styling
@@ -252,10 +252,10 @@ public void testSecondaryColorsDefault() {
                 R.color.tw__tweet_light_primary_text_color);
         final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_LIGHT_OPACITY, Color.WHITE, primaryTextColor);
-        assertEquals(color, view.secondaryTextColor);
-        assertEquals(color, view.timestampView.getCurrentTextColor());
-        assertEquals(color, view.screenNameView.getCurrentTextColor());
-        assertEquals(color, view.retweetedByView.getCurrentTextColor());
+        Assert.assertEquals(color, view.secondaryTextColor);
+        Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
+        Assert.assertEquals(color, view.screenNameView.getCurrentTextColor());
+        Assert.assertEquals(color, view.retweetedByView.getCurrentTextColor());
     }
 
     public void testAvatarDefault() {
@@ -264,7 +264,7 @@ public void testAvatarDefault() {
                 R.color.tw__tweet_light_container_bg_color);
         final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
+        Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
 
     public void testPhotoDefault() {
@@ -282,17 +282,17 @@ public void testPhotoDefault() {
         tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
 
         final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
-        assertEquals(color, TestUtils.getBackgroundColor(imageView));
+        Assert.assertEquals(color, TestUtils.getBackgroundColor(imageView));
     }
 
     public void testTweetPhotoErrorDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
+        Assert.assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
     }
 
     public void testRetweetIconDefault() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_RETWEET);
-        assertEquals(R.drawable.tw__ic_retweet_light, view.retweetIconResId);
+        Assert.assertEquals(R.drawable.tw__ic_retweet_light, view.retweetIconResId);
     }
 
     // dark style
@@ -310,10 +310,10 @@ public void testSecondaryColorsDark() {
                 R.color.tw__tweet_dark_primary_text_color);
         final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_DARK_OPACITY, Color.BLACK, primaryTextColor);
-        assertEquals(color, view.secondaryTextColor);
-        assertEquals(color, view.timestampView.getCurrentTextColor());
-        assertEquals(color, view.screenNameView.getCurrentTextColor());
-        assertEquals(color, view.retweetedByView.getCurrentTextColor());
+        Assert.assertEquals(color, view.secondaryTextColor);
+        Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
+        Assert.assertEquals(color, view.screenNameView.getCurrentTextColor());
+        Assert.assertEquals(color, view.retweetedByView.getCurrentTextColor());
     }
 
     public void testAvatarDark() {
@@ -323,7 +323,7 @@ public void testAvatarDark() {
                 R.color.tw__tweet_dark_container_bg_color);
         final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
+        Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
 
     public void testPhotoDark() {
@@ -341,25 +341,25 @@ public void testPhotoDark() {
         tweetMediaView.setTweetMediaEntities(TestFixtures.TEST_TWEET, mediaEntities);
 
         final ImageView imageView = (ImageView) tweetMediaView.getChildAt(0);
-        assertEquals(color, TestUtils.getBackgroundColor(imageView));
+        Assert.assertEquals(color, TestUtils.getBackgroundColor(imageView));
     }
 
     public void testTweetPhotoErrorDark() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
                 R.style.tw__TweetDarkStyle);
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
+        Assert.assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
     }
 
     public void testRetweetIconDark() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_RETWEET,
                R.style.tw__TweetDarkStyle);
-        assertEquals(R.drawable.tw__ic_retweet_dark, view.retweetIconResId);
+        Assert.assertEquals(R.drawable.tw__ic_retweet_dark, view.retweetIconResId);
     }
 
     public void testTweetActionsEnabled() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
                 R.style.tw__TweetActionsEnabled);
-        assertTrue(view.tweetActionsEnabled);
+        Assert.assertTrue(view.tweetActionsEnabled);
     }
 
     public void testSetOnActionCallback_passesCorrectTweetToActionBarView() {
@@ -373,7 +373,7 @@ public void testSetOnActionCallback_passesCorrectTweetToActionBarView() {
         // verify that the TweetActionBarView is set with the Tweet, not the inner retweeted Tweet
         final ArgumentCaptor<Tweet> tweetCaptor = ArgumentCaptor.forClass(Tweet.class);
         verify(mockActionBarView).setTweet(tweetCaptor.capture());
-        assertEquals(TestFixtures.TEST_RETWEET.getId(), tweetCaptor.getValue().getId());
+        Assert.assertEquals(TestFixtures.TEST_RETWEET.getId(), tweetCaptor.getValue().getId());
     }
 
     public void testRender_passesCorrectTweetToActionBarView() {
@@ -386,32 +386,32 @@ public void testRender_passesCorrectTweetToActionBarView() {
         // verify that the TweetActionBarView is set with the Tweet, not the inner retweeted Tweet
         final ArgumentCaptor<Tweet> tweetCaptor = ArgumentCaptor.forClass(Tweet.class);
         verify(mockActionBarView).setTweet(tweetCaptor.capture());
-        assertEquals(TestFixtures.TEST_RETWEET.getId(), tweetCaptor.getValue().getId());
+        Assert.assertEquals(TestFixtures.TEST_RETWEET.getId(), tweetCaptor.getValue().getId());
     }
 
     public void testTweetActionsDisabled() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET,
                 R.style.tw__TweetActionsDisabled);
-        assertFalse(view.tweetActionsEnabled);
+        Assert.assertFalse(view.tweetActionsEnabled);
     }
 
     public void testGetAspectRatio_withNullMediaEntity() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final MediaEntity mediaEntity = null;
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
     }
 
     public void testGetAspectRatio_withNullImageValue() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final ImageValue imageValue = null;
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(imageValue));
     }
 
     public void testGetAspectRatio_mediaEntityWithNullSizes() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
         final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(null);
 
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
     }
 
     public void testGetAspectRatio_mediaEntityWithEmptySizes() {
@@ -419,17 +419,17 @@ public void testGetAspectRatio_mediaEntityWithEmptySizes() {
         final MediaEntity.Sizes sizes = new MediaEntity.Sizes(null, null, null, null);
         final MediaEntity mediaEntity = TestFixtures.createMediaEntityWithPhoto(sizes);
 
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO, view.getAspectRatio(mediaEntity));
     }
 
     public void testGetAspectRatio_mediaEntityWithZeroDimension() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
 
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
                 view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 0)));
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
                 view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(100, 0)));
-        assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
+        Assert.assertEquals(BaseTweetView.DEFAULT_ASPECT_RATIO,
                 view.getAspectRatio(TestFixtures.createMediaEntityWithPhoto(0, 100)));
     }
 
@@ -466,7 +466,7 @@ public void testSetProfilePhotoView_handlesNullPicasso() {
         try {
             tweetView.setProfilePhotoView(TestFixtures.TEST_TWEET);
         } catch (NullPointerException e) {
-            fail("Should have handled null error image");
+            Assert.fail("Should have handled null error image");
         }
     }
 
@@ -479,7 +479,7 @@ public void testSetTweetMedia_handlesNullPicasso() {
         try {
             tweetView.setTweetMedia(mock(Tweet.class));
         } catch (NullPointerException e) {
-            fail("Should have handled null error image");
+            Assert.fail("Should have handled null error image");
         }
     }
 
@@ -487,45 +487,46 @@ public void testRender_forSinglePhotoEntity() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_PHOTO_TWEET);
 
-        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+        Assert.assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
+        Assert.assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
+        Assert.assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
     }
 
     public void testRender_forMultiplePhotoEntities() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_MULTIPLE_PHOTO_TWEET);
 
-        assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
-        assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());    }
+        Assert.assertEquals(View.VISIBLE, tweetView.mediaContainer.getVisibility());
+        Assert.assertEquals(View.VISIBLE, tweetView.tweetMediaView.getVisibility());
+        Assert.assertEquals(View.GONE, tweetView.mediaBadgeView.getVisibility());
+    }
 
     public void testRender_rendersRetweetedStatus() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_RETWEET);
-        assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
-        assertEquals(TestFixtures.TEST_NAME, tweetView.fullNameView.getText());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, tweetView.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, tweetView.contentView.getText().toString());
+        Assert.assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
+        Assert.assertEquals(TestFixtures.TEST_NAME, tweetView.fullNameView.getText());
+        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, tweetView.screenNameView.getText());
+        Assert.assertEquals(TestFixtures.TEST_STATUS, tweetView.contentView.getText().toString());
     }
 
     public void testSetRetweetedBy_nullTweet() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(null);
-        assertEquals(View.GONE, tweetView.retweetedByView.getVisibility());
+        Assert.assertEquals(View.GONE, tweetView.retweetedByView.getVisibility());
     }
 
     public void testSetRetweetedBy_nonRetweet() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_TWEET);
-        assertEquals(View.GONE, tweetView.retweetedByView.getVisibility());
+        Assert.assertEquals(View.GONE, tweetView.retweetedByView.getVisibility());
     }
 
     public void testSetRetweetedBy_retweet() {
         final BaseTweetView tweetView = createViewWithMocks(context, null);
         tweetView.setTweet(TestFixtures.TEST_RETWEET);
-        assertEquals(View.VISIBLE, tweetView.retweetedByView.getVisibility());
-        assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
+        Assert.assertEquals(View.VISIBLE, tweetView.retweetedByView.getVisibility());
+        Assert.assertEquals(REQUIRED_RETWEETED_BY_TEXT, tweetView.retweetedByView.getText());
     }
 
     public void testRender_rendersVineCard() {
@@ -537,12 +538,12 @@ public void testRender_rendersVineCard() {
 
         view.setTweet(tweetWithVineCard);
 
-        assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
-        assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
-        assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
-        assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
-        assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
-        assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
+        Assert.assertEquals(TestFixtures.TEST_NAME, view.fullNameView.getText().toString());
+        Assert.assertEquals(TestFixtures.TEST_FORMATTED_SCREEN_NAME, view.screenNameView.getText());
+        Assert.assertEquals(TestFixtures.TEST_STATUS, view.contentView.getText().toString());
+        Assert.assertEquals(View.VISIBLE, view.mediaContainer.getVisibility());
+        Assert.assertEquals(View.VISIBLE, view.mediaBadgeView.getVisibility());
+        Assert.assertEquals(View.VISIBLE, view.tweetMediaView.getVisibility());
     }
 
     public void testClearMedia() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
index 76e5760e..6b1f2514 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/BaseTweetViewXmlTest.java
@@ -57,31 +57,31 @@ protected View getInflatedLayout() {
 
     public void testInitName() {
         final BaseTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
+        Assert.assertNotNull(view);
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.fullNameView.getText().toString());
     }
 
     public void testInitScreenName() {
         final BaseTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
+        Assert.assertNotNull(view);
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.screenNameView.getText().toString());
     }
 
     public void testInitTimestamp() {
         final BaseTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
+        Assert.assertNotNull(view);
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.timestampView.getText().toString());
     }
 
     public void testInitText() {
         final BaseTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
+        Assert.assertNotNull(view);
+        Assert.assertEquals(TestFixtures.EMPTY_STRING, view.contentView.getText().toString());
     }
 
     public void testInitWithTweetActionsDisabled() {
         final BaseTweetView view = getView();
-        assertFalse(view.tweetActionsEnabled);
+        Assert.assertFalse(view.tweetActionsEnabled);
     }
 
     public void testInitWithTweetActionsEnabled() {
@@ -90,7 +90,7 @@ public void testInitWithTweetActionsEnabled() {
                 R.layout.activity_tweet_actions_enabled, group, true);
 
         final BaseTweetView tweetView = view.findViewById(R.id.tweet_view);
-        assertTrue(tweetView.tweetActionsEnabled);
+        Assert.assertTrue(tweetView.tweetActionsEnabled);
     }
 
     // asserts that a BaseTweetView with an invalid tweet id throws an exception
@@ -99,7 +99,7 @@ public void testInitWithInvalidTweetId() {
         try {
             final View view = LayoutInflater.from(getContext()).inflate(
                     R.layout.activity_invalid_tweet_id, group, true);
-            fail("InflateException not thrown");
+            Assert.fail("InflateException not thrown");
         } catch (InflateException e) {
             // success
         }
@@ -109,20 +109,20 @@ public void testInitWithInvalidTweetId() {
 
     public void testSetTweet_permalink() {
         final BaseTweetView view = getView();
-        assertEquals(TestFixtures.TEST_PERMALINK_UNKNOWN_USER, view.getPermalinkUri().toString());
+        Assert.assertEquals(TestFixtures.TEST_PERMALINK_UNKNOWN_USER, view.getPermalinkUri().toString());
     }
 
     // permalinkUri should be null so the permalink launcher will be a NoOp
     public void testSetTweet_nullTweetPermalink() {
         final BaseTweetView view = getView();
         view.setTweet(null);
-        assertNull(view.getPermalinkUri());
+        Assert.assertNull(view.getPermalinkUri());
     }
 
     public void testSetTweet_updatePermalink() {
         final BaseTweetView view = getView();
         view.setTweet(TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
+        Assert.assertEquals(TestFixtures.TEST_PERMALINK_TWO, view.getPermalinkUri().toString());
     }
 
     // Styling
@@ -139,10 +139,10 @@ public void testSecondaryColorsDefault() {
                 R.color.tw__tweet_light_primary_text_color);
         final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_LIGHT_OPACITY, Color.WHITE, primaryTextColor);
-        assertEquals(color, view.secondaryTextColor);
-        assertEquals(color, view.timestampView.getCurrentTextColor());
-        assertEquals(color, view.screenNameView.getCurrentTextColor());
-        assertEquals(color, view.retweetedByView.getCurrentTextColor());
+        Assert.assertEquals(color, view.secondaryTextColor);
+        Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
+        Assert.assertEquals(color, view.screenNameView.getCurrentTextColor());
+        Assert.assertEquals(color, view.retweetedByView.getCurrentTextColor());
     }
 
     public void testAvatarDefault() {
@@ -151,18 +151,18 @@ public void testAvatarDefault() {
                 R.color.tw__tweet_light_container_bg_color);
         final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_LIGHT_OPACITY, Color.BLACK, containerColor);
-        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
+        Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
 
     public void testPhotoErrorDefault() {
         final BaseTweetView view = getView();
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
+        Assert.assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
     }
 
 
     public void testRetweetIconDefault() {
         final BaseTweetView view = getView();
-        assertEquals(R.drawable.tw__ic_retweet_light, view.retweetIconResId);
+        Assert.assertEquals(R.drawable.tw__ic_retweet_light, view.retweetIconResId);
     }
 
     // dark style
@@ -177,10 +177,10 @@ public void testSecondaryColorsDark() {
                 R.color.tw__tweet_dark_primary_text_color);
         final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.SECONDARY_TEXT_COLOR_DARK_OPACITY, Color.BLACK, primaryTextColor);
-        assertEquals(color, view.secondaryTextColor);
-        assertEquals(color, view.timestampView.getCurrentTextColor());
-        assertEquals(color, view.screenNameView.getCurrentTextColor());
-        assertEquals(color, view.retweetedByView.getCurrentTextColor());
+        Assert.assertEquals(color, view.secondaryTextColor);
+        Assert.assertEquals(color, view.timestampView.getCurrentTextColor());
+        Assert.assertEquals(color, view.screenNameView.getCurrentTextColor());
+        Assert.assertEquals(color, view.retweetedByView.getCurrentTextColor());
     }
 
     public void testAvatarDark() {
@@ -189,16 +189,16 @@ public void testAvatarDark() {
                 R.color.tw__tweet_dark_container_bg_color);
         final int color = ColorUtils.calculateOpacityTransform(
                 BaseTweetView.MEDIA_BG_DARK_OPACITY, Color.WHITE, containerColor);
-        assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
+        Assert.assertEquals(color, TestUtils.getDrawableColor(view.avatarView));
     }
 
     public void testPhotoErrorDark() {
         final BaseTweetView view = getViewDark();
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
+        Assert.assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
     }
 
     public void testRetweetIconDark() {
         final BaseTweetView view = getViewDark();
-        assertEquals(R.drawable.tw__ic_retweet_dark, view.retweetIconResId);
+        Assert.assertEquals(R.drawable.tw__ic_retweet_dark, view.retweetIconResId);
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
index 3fc30ff2..8a846df5 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewTest.java
@@ -65,31 +65,31 @@ CompactTweetView createViewWithMocks(Context context, Tweet tweet, int styleResI
     // Layout
     public void testLayout() {
         final CompactTweetView compactView = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(R.layout.tw__tweet_compact, compactView.getLayout());
+        Assert.assertEquals(R.layout.tw__tweet_compact, compactView.getLayout());
     }
 
     public void testGetAspectRatio() {
         final CompactTweetView compactView = createView(context, TestFixtures.TEST_TWEET);
 
-        assertEquals(1.0, compactView.getAspectRatio(
+        Assert.assertEquals(1.0, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(100, 100)), DELTA);
-        assertEquals(1.0, compactView.getAspectRatio(
+        Assert.assertEquals(1.0, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(300, 400)), DELTA);
-        assertEquals(1.0, compactView.getAspectRatio(
+        Assert.assertEquals(1.0, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(100, 800)), DELTA);
-        assertEquals(1.3333, compactView.getAspectRatio(
+        Assert.assertEquals(1.3333, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(400, 300)), DELTA);
-        assertEquals(1.6666, compactView.getAspectRatio(
+        Assert.assertEquals(1.6666, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(500, 300)), DELTA);
-        assertEquals(2.0, compactView.getAspectRatio(
+        Assert.assertEquals(2.0, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(600, 300)), DELTA);
-        assertEquals(2.3333, compactView.getAspectRatio(
+        Assert.assertEquals(2.3333, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(700, 300)), DELTA);
-        assertEquals(2.6666, compactView.getAspectRatio(
+        Assert.assertEquals(2.6666, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(800, 300)), DELTA);
-        assertEquals(3.0, compactView.getAspectRatio(
+        Assert.assertEquals(3.0, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(900, 300)), DELTA);
-        assertEquals(3.0, compactView.getAspectRatio(
+        Assert.assertEquals(3.0, compactView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(1000, 50)), DELTA);
     }
 
@@ -107,9 +107,9 @@ public void testSetTweetPhoto() {
 
     public void testGetAspectRatioForPhotoEntity() {
         final CompactTweetView compactView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(1));
-        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(2));
-        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(3));
-        assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(4));
+        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(1));
+        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(2));
+        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(3));
+        Assert.assertEquals(1.6, compactView.getAspectRatioForPhotoEntity(4));
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java
index 82b7bcbe..69fa73d4 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/CompactTweetViewXmlTest.java
@@ -33,7 +33,7 @@ CompactTweetView getViewDark() {
 
     public void testLayout() {
         final CompactTweetView view = getView();
-        assertNotNull(view);
-        assertEquals(R.layout.tw__tweet_compact, view.getLayout());
+        Assert.assertNotNull(view);
+        Assert.assertEquals(R.layout.tw__tweet_compact, view.getLayout());
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
index afb5a37c..605830bc 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/QuoteTweetViewTest.java
@@ -61,33 +61,33 @@ QuoteTweetView createViewWithMocks(Context context, Tweet tweet,
     public void testGetAspectRatio() {
         final QuoteTweetView quoteTweetView = createView(context, TestFixtures.TEST_TWEET);
 
-        assertEquals(1.0, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(1.0, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(100, 100)), DELTA);
-        assertEquals(1.0, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(1.0, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(300, 400)), DELTA);
-        assertEquals(1.0, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(1.0, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(100, 800)), DELTA);
-        assertEquals(1.3333, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(1.3333, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(400, 300)), DELTA);
-        assertEquals(1.6666, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(1.6666, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(500, 300)), DELTA);
-        assertEquals(2.0, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(2.0, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(600, 300)), DELTA);
-        assertEquals(2.3333, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(2.3333, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(700, 300)), DELTA);
-        assertEquals(2.6666, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(2.6666, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(800, 300)), DELTA);
-        assertEquals(3.0, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(3.0, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(900, 300)), DELTA);
-        assertEquals(3.0, quoteTweetView.getAspectRatio(
+        Assert.assertEquals(3.0, quoteTweetView.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(1000, 50)), DELTA);
     }
 
     public void testGetAspectRatioForPhotoEntity() {
         final QuoteTweetView quoteTweetView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(1));
-        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(2));
-        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(3));
-        assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(4));
+        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(1));
+        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(2));
+        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(3));
+        Assert.assertEquals(1.6, quoteTweetView.getAspectRatioForPhotoEntity(4));
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java
index a35f071e..adc2d6cc 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetActionBarViewTest.java
@@ -34,7 +34,7 @@ public void testSetOnActionCallback() {
         final TweetActionBarView view = createView();
         final Callback<Tweet> actionCallback = mock(Callback.class);
         view.setOnActionCallback(actionCallback);
-        assertEquals(actionCallback, view.actionCallback);
+        Assert.assertEquals(actionCallback, view.actionCallback);
     }
 
     public void testSetLike() {
@@ -47,9 +47,9 @@ public void testSetLike() {
         verify(view.likeButton).setToggledOn(TestFixtures.TEST_TWEET.favorited);
         verify(view.likeButton).setOnClickListener(likeCaptor.capture());
         final LikeTweetAction likeAction = likeCaptor.getValue();
-        assertNotNull(likeAction);
-        assertEquals(TestFixtures.TEST_TWEET, likeAction.tweet);
-        assertEquals(tweetRepository, likeAction.tweetRepository);
+        Assert.assertNotNull(likeAction);
+        Assert.assertEquals(TestFixtures.TEST_TWEET, likeAction.tweet);
+        Assert.assertEquals(tweetRepository, likeAction.tweetRepository);
     }
 
     public void testSetLike_handlesNullTweet() {
@@ -66,8 +66,8 @@ public void testSetShare() {
                 = ArgumentCaptor.forClass(ShareTweetAction.class);
         verify(view.shareButton).setOnClickListener(shareCaptor.capture());
         final ShareTweetAction shareAction = shareCaptor.getValue();
-        assertNotNull(shareAction);
-        assertEquals(TestFixtures.TEST_TWEET, shareAction.tweet);
+        Assert.assertNotNull(shareAction);
+        Assert.assertEquals(TestFixtures.TEST_TWEET, shareAction.tweet);
     }
 
     public void testSetShare_handlesNullTweet() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
index ea31615f..08d69014 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineListAdapterTest.java
@@ -58,10 +58,10 @@ public void testConstructor() {
         if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
             final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            assertNull(replaceCallback.cb);
+            Assert.assertEquals(mockTimelineDelegate, replaceCallback.delegate);
+            Assert.assertNull(replaceCallback.cb);
         } else {
-            fail("Expected default actionCallback to be a ReplaceTweetCallback");
+            Assert.fail("Expected default actionCallback to be a ReplaceTweetCallback");
         }
     }
 
@@ -76,10 +76,10 @@ public void testConstructor_withActionCallback() {
         if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
             final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            assertEquals(mockCallback, replaceCallback.cb);
+            Assert.assertEquals(mockTimelineDelegate, replaceCallback.delegate);
+            Assert.assertEquals(mockCallback, replaceCallback.cb);
         } else {
-            fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
+            Assert.fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
         }
     }
 
@@ -91,13 +91,13 @@ public void testBuilder() {
                 .setOnActionCallback(mockCallback)
                 .setViewStyle(R.style.tw__TweetDarkStyle)
                 .build();
-        assertEquals(R.style.tw__TweetDarkStyle, listAdapter.styleResId);
+        Assert.assertEquals(R.style.tw__TweetDarkStyle, listAdapter.styleResId);
         if (listAdapter.actionCallback instanceof TweetTimelineListAdapter.ReplaceTweetCallback) {
             final TweetTimelineListAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineListAdapter.ReplaceTweetCallback) listAdapter.actionCallback;
-            assertEquals(mockCallback, replaceCallback.cb);
+            Assert.assertEquals(mockCallback, replaceCallback.cb);
         } else {
-            fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
+            Assert.fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
         }
     }
 
@@ -106,9 +106,9 @@ public void testBuilder_nullContext() {
         try {
             listAdapter = new TweetTimelineListAdapter.Builder(null).setTimeline(mockTimeline)
                     .build();
-            fail("Null context should throw exception");
+            Assert.fail("Null context should throw exception");
         } catch (IllegalArgumentException e) {
-            assertEquals(NULL_CONTEXT_MESSAGE, e.getMessage());
+            Assert.assertEquals(NULL_CONTEXT_MESSAGE, e.getMessage());
         }
     }
 
@@ -116,9 +116,9 @@ public void testBuilder_nullTimeline() {
         try {
             listAdapter = new TweetTimelineListAdapter.Builder(getContext()).setTimeline(null)
                     .build();
-            fail("Null timeline should throw exception");
+            Assert.fail("Null timeline should throw exception");
         } catch (IllegalArgumentException e) {
-            assertEquals(NULL_TIMELINE_MESSAGE, e.getMessage());
+            Assert.assertEquals(NULL_TIMELINE_MESSAGE, e.getMessage());
         }
     }
 
@@ -130,7 +130,7 @@ public void testBuilder_withTimelineFilter() {
                 .setTimelineFilter(mockTimelineFilter)
                 .build();
 
-        assertTrue(listAdapter.delegate instanceof FilterTimelineDelegate);
+        Assert.assertTrue(listAdapter.delegate instanceof FilterTimelineDelegate);
     }
 
     public void testBuilder_withNullTimelineFilter() {
@@ -140,7 +140,7 @@ public void testBuilder_withNullTimelineFilter() {
                 .setTimelineFilter(null)
                 .build();
 
-        assertTrue(listAdapter.delegate instanceof TimelineDelegate);
+        Assert.assertTrue(listAdapter.delegate instanceof TimelineDelegate);
     }
 
     /**
@@ -157,9 +157,9 @@ public void testGetView_getsCompactTweetView() {
         // assert that
         // - default implementation of getView returns a CompactTweetView
         // - sanity check that CompactTweetView tweet id matches the Tweet's id
-        assertEquals(CompactTweetView.class, view.getClass());
+        Assert.assertSame(CompactTweetView.class, view.getClass());
         final BaseTweetView tv = (BaseTweetView) view;
-        assertEquals(listAdapter.getItemId(0), tv.getTweetId());
+        Assert.assertEquals(listAdapter.getItemId(0), tv.getTweetId());
     }
 
     public void testDefaultViewStyle_viaConstructor() {
@@ -167,7 +167,7 @@ public void testDefaultViewStyle_viaConstructor() {
         listAdapter = new TweetTimelineListAdapter(getContext(), fakeTimeline);
         final View view = listAdapter.getView(0, null, null);
         final BaseTweetView tv = (BaseTweetView) view;
-        assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
+        Assert.assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
     }
 
     public void testDefaultViewStyle_viaBuilder() {
@@ -177,7 +177,7 @@ public void testDefaultViewStyle_viaBuilder() {
                 .build();
         final View view = listAdapter.getView(0, null, null);
         final BaseTweetView tv = (BaseTweetView) view;
-        assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
+        Assert.assertEquals(R.style.tw__TweetLightStyle, tv.styleResId);
     }
 
     public void testConstructor_scribesImpression() {
@@ -197,23 +197,23 @@ public void testConstructor_scribesImpression() {
         verify(tweetUi).scribe(tfwNamespaceCaptor.capture(), scribeItemsCaptor.capture());
 
         final EventNamespace sdkNs = sdkNamespaceCaptor.getValue();
-        assertEquals(REQUIRED_SDK_IMPRESSION_CLIENT, sdkNs.client);
-        assertEquals(REQUIRED_SDK_IMPRESSION_PAGE, sdkNs.page);
-        assertEquals(TEST_SCRIBE_SECTION, sdkNs.section);
-        assertEquals(REQUIRED_SDK_IMPRESSION_COMPONENT, sdkNs.component);
-        assertEquals(REQUIRED_SDK_IMPRESSION_ELEMENT, sdkNs.element);
-        assertEquals(REQUIRED_IMPRESSION_ACTION, sdkNs.action);
+        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_CLIENT, sdkNs.client);
+        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_PAGE, sdkNs.page);
+        Assert.assertEquals(TEST_SCRIBE_SECTION, sdkNs.section);
+        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_COMPONENT, sdkNs.component);
+        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_ELEMENT, sdkNs.element);
+        Assert.assertEquals(REQUIRED_IMPRESSION_ACTION, sdkNs.action);
 
         final EventNamespace tfwNs = tfwNamespaceCaptor.getValue();
-        assertEquals(REQUIRED_TFW_CLIENT, tfwNs.client);
-        assertEquals(REQUIRED_TFW_PAGE, tfwNs.page);
-        assertEquals(REQUIRED_TFW_SECTION, tfwNs.section);
-        assertEquals(TEST_SCRIBE_SECTION, tfwNs.component);
-        assertEquals(REQUIRED_TFW_ELEMENT, tfwNs.element);
-        assertEquals(REQUIRED_IMPRESSION_ACTION, tfwNs.action);
+        Assert.assertEquals(REQUIRED_TFW_CLIENT, tfwNs.client);
+        Assert.assertEquals(REQUIRED_TFW_PAGE, tfwNs.page);
+        Assert.assertEquals(REQUIRED_TFW_SECTION, tfwNs.section);
+        Assert.assertEquals(TEST_SCRIBE_SECTION, tfwNs.component);
+        Assert.assertEquals(REQUIRED_TFW_ELEMENT, tfwNs.element);
+        Assert.assertEquals(REQUIRED_IMPRESSION_ACTION, tfwNs.action);
 
         final List<ScribeItem> scribeItems = scribeItemsCaptor.getValue();
-        assertNotNull(scribeItems);
+        Assert.assertNotNull(scribeItems);
     }
 
     public void testSetViewStyle() {
@@ -224,7 +224,7 @@ public void testSetViewStyle() {
                 .build();
         final View view = listAdapter.getView(0, null, null);
         final BaseTweetView tv = (BaseTweetView) view;
-        assertEquals(R.style.tw__TweetDarkWithActionsStyle, tv.styleResId);
+        Assert.assertEquals(R.style.tw__TweetDarkWithActionsStyle, tv.styleResId);
     }
 
     static class FakeTweetTimeline implements Timeline<Tweet> {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java
index d46742a6..b7e1867a 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapterTest.java
@@ -61,10 +61,10 @@ public void testConstructor() {
             final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
                     recyclerViewAdapter.actionCallback;
-            assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            assertNull(replaceCallback.cb);
+            Assert.assertEquals(mockTimelineDelegate, replaceCallback.delegate);
+            Assert.assertNull(replaceCallback.cb);
         } else {
-            fail("Expected default actionCallback to be a ReplaceTweetCallback");
+            Assert.fail("Expected default actionCallback to be a ReplaceTweetCallback");
         }
     }
 
@@ -81,10 +81,10 @@ public void testConstructor_withActionCallback() {
             final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
                     recyclerViewAdapter.actionCallback;
-            assertEquals(mockTimelineDelegate, replaceCallback.delegate);
-            assertEquals(mockCallback, replaceCallback.cb);
+            Assert.assertEquals(mockTimelineDelegate, replaceCallback.delegate);
+            Assert.assertEquals(mockCallback, replaceCallback.cb);
         } else {
-            fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
+            Assert.fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
         }
     }
 
@@ -96,15 +96,15 @@ public void testBuilder() {
                 .setOnActionCallback(mockCallback)
                 .setViewStyle(R.style.tw__TweetDarkStyle)
                 .build();
-        assertEquals(R.style.tw__TweetDarkStyle, recyclerViewAdapter.styleResId);
+        Assert.assertEquals(R.style.tw__TweetDarkStyle, recyclerViewAdapter.styleResId);
         if (recyclerViewAdapter.actionCallback instanceof
                 TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback) {
             final TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback replaceCallback
                     = (TweetTimelineRecyclerViewAdapter.ReplaceTweetCallback)
                     recyclerViewAdapter.actionCallback;
-            assertEquals(mockCallback, replaceCallback.cb);
+            Assert.assertEquals(mockCallback, replaceCallback.cb);
         } else {
-            fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
+            Assert.fail("Expected actionCallback to be wrapped in ReplaceTweetCallback");
         }
     }
 
@@ -114,9 +114,9 @@ public void testBuilder_nullContext() {
             recyclerViewAdapter =
                     new TweetTimelineRecyclerViewAdapter.Builder(null).setTimeline(mockTimeline)
                     .build();
-            fail("Null context should throw exception");
+            Assert.fail("Null context should throw exception");
         } catch (IllegalArgumentException e) {
-            assertEquals(NULL_CONTEXT_MESSAGE, e.getMessage());
+            Assert.assertEquals(NULL_CONTEXT_MESSAGE, e.getMessage());
         }
     }
 
@@ -125,9 +125,9 @@ public void testBuilder_nullTimeline() {
             recyclerViewAdapter =
                     new TweetTimelineRecyclerViewAdapter.Builder(getContext()).setTimeline(null)
                     .build();
-            fail("Null timeline should throw exception");
+            Assert.fail("Null timeline should throw exception");
         } catch (IllegalArgumentException e) {
-            assertEquals(NULL_TIMELINE_MESSAGE, e.getMessage());
+            Assert.assertEquals(NULL_TIMELINE_MESSAGE, e.getMessage());
         }
     }
 
@@ -139,7 +139,7 @@ public void testBuilder_withTimelineFilter() {
                 .setTimelineFilter(mockTimelineFilter)
                 .build();
 
-        assertTrue(recyclerViewAdapter.timelineDelegate instanceof FilterTimelineDelegate);
+        Assert.assertTrue(recyclerViewAdapter.timelineDelegate instanceof FilterTimelineDelegate);
     }
 
     public void testBuilder_withNullTimelineFilter() {
@@ -149,14 +149,14 @@ public void testBuilder_withNullTimelineFilter() {
                 .setTimelineFilter(null)
                 .build();
 
-        assertTrue(recyclerViewAdapter.timelineDelegate instanceof TimelineDelegate);
+        Assert.assertTrue(recyclerViewAdapter.timelineDelegate instanceof TimelineDelegate);
     }
 
     public void testItemCount_viaConstructor() {
         final Timeline<Tweet> fakeTimeline = new FakeTweetTimeline(ITEM_COUNT);
         final TweetTimelineRecyclerViewAdapter recyclerViewAdapter = new
                 TweetTimelineRecyclerViewAdapter(getContext(), fakeTimeline);
-        assertEquals(recyclerViewAdapter.getItemCount(), ITEM_COUNT);
+        Assert.assertEquals(ITEM_COUNT, recyclerViewAdapter.getItemCount());
     }
 
     public void testItemCount_viaBuilder() {
@@ -166,7 +166,7 @@ public void testItemCount_viaBuilder() {
                         .setTimeline(fakeTimeline)
                         .setViewStyle(R.style.tw__TweetLightWithActionsStyle)
                         .build();
-        assertEquals(recyclerViewAdapter.getItemCount(), ITEM_COUNT);
+        Assert.assertEquals(ITEM_COUNT, recyclerViewAdapter.getItemCount());
     }
 
     public void testConstructor_scribesImpression() {
@@ -186,23 +186,23 @@ public void testConstructor_scribesImpression() {
         verify(tweetUi).scribe(tfwNamespaceCaptor.capture(), scribeItemsCaptor.capture());
 
         final EventNamespace sdkNs = sdkNamespaceCaptor.getValue();
-        assertEquals(REQUIRED_SDK_IMPRESSION_CLIENT, sdkNs.client);
-        assertEquals(REQUIRED_SDK_IMPRESSION_PAGE, sdkNs.page);
-        assertEquals(TEST_SCRIBE_SECTION, sdkNs.section);
-        assertEquals(REQUIRED_SDK_IMPRESSION_COMPONENT, sdkNs.component);
-        assertEquals(REQUIRED_SDK_IMPRESSION_ELEMENT, sdkNs.element);
-        assertEquals(REQUIRED_IMPRESSION_ACTION, sdkNs.action);
+        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_CLIENT, sdkNs.client);
+        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_PAGE, sdkNs.page);
+        Assert.assertEquals(TEST_SCRIBE_SECTION, sdkNs.section);
+        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_COMPONENT, sdkNs.component);
+        Assert.assertEquals(REQUIRED_SDK_IMPRESSION_ELEMENT, sdkNs.element);
+        Assert.assertEquals(REQUIRED_IMPRESSION_ACTION, sdkNs.action);
 
         final EventNamespace tfwNs = tfwNamespaceCaptor.getValue();
-        assertEquals(REQUIRED_TFW_CLIENT, tfwNs.client);
-        assertEquals(REQUIRED_TFW_PAGE, tfwNs.page);
-        assertEquals(REQUIRED_TFW_SECTION, tfwNs.section);
-        assertEquals(TEST_SCRIBE_SECTION, tfwNs.component);
-        assertEquals(REQUIRED_TFW_ELEMENT, tfwNs.element);
-        assertEquals(REQUIRED_IMPRESSION_ACTION, tfwNs.action);
+        Assert.assertEquals(REQUIRED_TFW_CLIENT, tfwNs.client);
+        Assert.assertEquals(REQUIRED_TFW_PAGE, tfwNs.page);
+        Assert.assertEquals(REQUIRED_TFW_SECTION, tfwNs.section);
+        Assert.assertEquals(TEST_SCRIBE_SECTION, tfwNs.component);
+        Assert.assertEquals(REQUIRED_TFW_ELEMENT, tfwNs.element);
+        Assert.assertEquals(REQUIRED_IMPRESSION_ACTION, tfwNs.action);
 
         final List<ScribeItem> scribeItems = scribeItemsCaptor.getValue();
-        assertNotNull(scribeItems);
+        Assert.assertNotNull(scribeItems);
     }
 
     static class FakeTweetTimeline implements Timeline<Tweet> {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
index 576b1137..9bf69850 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiBackgroundTest.java
@@ -55,11 +55,11 @@ public void testRenderTweet_beforeInBackground() {
         try {
             new TweetView(getInstrumentation().getTargetContext(), TestFixtures.TEST_TWEET);
         } catch (IllegalArgumentException e) {
-            fail(e.getMessage());
+            Assert.fail(e.getMessage());
         }
     }
 
     public void testGetTweetRepository() {
-        assertNotNull(TweetUi.getInstance().getTweetRepository());
+        Assert.assertNotNull(TweetUi.getInstance().getTweetRepository());
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
index 34ea08e1..2a62e0dc 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUiTest.java
@@ -55,21 +55,21 @@ protected void tearDown() throws Exception {
     }
 
     public void testGetVersion() {
-        assertEquals(BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER,
+        Assert.assertEquals(BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER,
                 tweetUi.getVersion());
     }
 
     public void testGetIdentifier() {
         final String identifier = BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID;
-        assertEquals(identifier, tweetUi.getIdentifier());
+        Assert.assertEquals(identifier, tweetUi.getIdentifier());
     }
 
     public void testGetInstance_tweeterStarted() {
         try {
             final TweetUi instance = TweetUi.getInstance();
-            assertNotNull(instance);
+            Assert.assertNotNull(instance);
         } catch (Exception ex) {
-            fail("IllegalStateException was expected");
+            Assert.fail("IllegalStateException was expected");
         }
     }
 
@@ -77,10 +77,10 @@ public void testGetInstance_tweeterNotStarted() {
         TwitterTestUtils.resetTwitter();
         try {
             TweetUi.getInstance();
-            fail("IllegalStateException was expected");
+            Assert.fail("IllegalStateException was expected");
         } catch (Exception ex) {
             if (!(ex instanceof IllegalStateException)) {
-                fail("IllegalStateException was expected");
+                Assert.fail("IllegalStateException was expected");
             }
         }
     }
@@ -92,7 +92,7 @@ public void testScribe_scribeClientNull() {
             tweetUi.scribeClient = null;
             tweetUi.scribe(ns, ns);
         } catch (NullPointerException e) {
-            fail("should have gracefully ignored events");
+            Assert.fail("should have gracefully ignored events");
         }
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
index 715349ef..30c9fcb4 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetUtilsTest.java
@@ -50,39 +50,39 @@ public void tearDown() throws Exception {
     public void testLoadTweet_beforeKitStart() {
         try {
             TweetUtils.loadTweet(TestFixtures.TEST_TWEET_ID, null);
-            fail("IllegalStateException not thrown");
+            Assert.fail("IllegalStateException not thrown");
         } catch (IllegalStateException e) {
-            assertEquals(NOT_STARTED_ERROR, e.getMessage());
+            Assert.assertEquals(NOT_STARTED_ERROR, e.getMessage());
         } catch (Exception ex) {
-            fail();
+            Assert.fail();
         }
     }
 
     public void testLoadTweets_beforeKitStart() {
         try {
             TweetUtils.loadTweets(TestFixtures.TWEET_IDS, null);
-            fail("IllegalStateException not thrown");
+            Assert.fail("IllegalStateException not thrown");
         } catch (IllegalStateException e) {
-            assertEquals(NOT_STARTED_ERROR, e.getMessage());
+            Assert.assertEquals(NOT_STARTED_ERROR, e.getMessage());
         } catch (Exception ex) {
-            fail();
+            Assert.fail();
         }
     }
 
     public void testIsTweetResolvable_nullTweet() {
-        assertFalse(TweetUtils.isTweetResolvable(null));
+        Assert.assertFalse(TweetUtils.isTweetResolvable(null));
     }
 
     public void testIsTweetResolvable_hasInvalidIdAndNullUser() {
         final Tweet tweet = new TweetBuilder().build();
-        assertNull(tweet.user);
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertNull(tweet.user);
+        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
     }
 
     public void testIsTweetResolvable_hasValidIdAndNullUser() {
         final Tweet tweet = new TweetBuilder().setId(TestFixtures.TEST_TWEET_ID).build();
-        assertNull(tweet.user);
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertNull(tweet.user);
+        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
     }
 
     public void testIsTweetResolvable_hasInvalidIdAndUserWithNullScreenName() {
@@ -95,7 +95,7 @@ public void testIsTweetResolvable_hasInvalidIdAndUserWithNullScreenName() {
                                 .setVerified(false)
                                 .build())
                 .build();
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
     }
 
     public void testIsTweetResolvable_hasValidIdAndUserWithNullScreenName() {
@@ -109,7 +109,7 @@ public void testIsTweetResolvable_hasValidIdAndUserWithNullScreenName() {
                                 .setVerified(false)
                                 .build()
                 ).build();
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
     }
 
     public void testIsTweetResolvable_hasInvalidIdAndUserWithEmptyScreenName() {
@@ -121,7 +121,7 @@ public void testIsTweetResolvable_hasInvalidIdAndUserWithEmptyScreenName() {
                         .setVerified(false)
                         .build())
                 .build();
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
     }
 
     public void testIsTweetResolvable_hasValidIdAndUserWithEmptyScreenName() {
@@ -134,43 +134,43 @@ public void testIsTweetResolvable_hasValidIdAndUserWithEmptyScreenName() {
                         .setVerified(false)
                         .build())
                 .build();
-        assertFalse(TweetUtils.isTweetResolvable(tweet));
+        Assert.assertFalse(TweetUtils.isTweetResolvable(tweet));
     }
 
     public void testIsTweetResolvable_hasUserWithScreenNameAndValidId() {
-        assertTrue(TweetUtils.isTweetResolvable(TestFixtures.TEST_TWEET));
+        Assert.assertTrue(TweetUtils.isTweetResolvable(TestFixtures.TEST_TWEET));
     }
 
     public void testGetPermalink_nullScreenNameValidId() {
-        assertEquals(A_PERMALINK_WITH_NO_SCREEN_NAME,
+        Assert.assertEquals(A_PERMALINK_WITH_NO_SCREEN_NAME,
                 TweetUtils.getPermalink(null, A_VALID_TWEET_ID).toString());
     }
 
     public void testGetPermalink_validScreenNameZeroId() {
-        assertNull(TweetUtils.getPermalink(A_VALID_SCREEN_NAME, AN_INVALID_TWEET_ID));
+        Assert.assertNull(TweetUtils.getPermalink(A_VALID_SCREEN_NAME, AN_INVALID_TWEET_ID));
     }
 
     public void testGetPermalink_validScreenNameAndId() {
-        assertEquals(A_FULL_PERMALINK,
+        Assert.assertEquals(A_FULL_PERMALINK,
                 TweetUtils.getPermalink(A_VALID_SCREEN_NAME, A_VALID_TWEET_ID).toString());
     }
 
     public void testGetPermalink_emptyScreenName() {
         final Uri permalink = TweetUtils.getPermalink("", 20);
-        assertEquals(A_PERMALINK_WITH_NO_SCREEN_NAME, permalink.toString());
+        Assert.assertEquals(A_PERMALINK_WITH_NO_SCREEN_NAME, permalink.toString());
     }
 
     public void testGetDisplayTweet_nullTweet() {
-        assertNull(TweetUtils.getDisplayTweet(null));
+        Assert.assertNull(TweetUtils.getDisplayTweet(null));
     }
 
     public void testGetDisplayTweet_retweet() {
-        assertEquals(TestFixtures.TEST_RETWEET.retweetedStatus,
+        Assert.assertEquals(TestFixtures.TEST_RETWEET.retweetedStatus,
                 TweetUtils.getDisplayTweet(TestFixtures.TEST_RETWEET));
     }
 
     public void testGetDisplayTweet_nonRetweet() {
-        assertEquals(TestFixtures.TEST_TWEET, TweetUtils.getDisplayTweet(TestFixtures.TEST_TWEET));
+        Assert.assertEquals(TestFixtures.TEST_TWEET, TweetUtils.getDisplayTweet(TestFixtures.TEST_TWEET));
     }
 
     public void testShowQuoteTweet() {
@@ -178,7 +178,7 @@ public void testShowQuoteTweet() {
                 .copy(TestFixtures.TEST_TWEET)
                 .setQuotedStatus(TestFixtures.TEST_TWEET)
                 .build();
-        assertTrue(TweetUtils.showQuoteTweet(tweet));
+        Assert.assertTrue(TweetUtils.showQuoteTweet(tweet));
     }
 
     public void testShowQuoteTweet_withCardAndQuoteTweet() {
@@ -187,7 +187,7 @@ public void testShowQuoteTweet_withCardAndQuoteTweet() {
                 .setCard(new Card(null, "Vine"))
                 .setEntities(new TweetEntities(null, null, null, null, null))
                 .build();
-        assertFalse(TweetUtils.showQuoteTweet(tweet));
+        Assert.assertFalse(TweetUtils.showQuoteTweet(tweet));
     }
 
     public void testShowQuoteTweet_withMediaAndQuoteTweet() {
@@ -195,7 +195,7 @@ public void testShowQuoteTweet_withMediaAndQuoteTweet() {
                 .copy(TestFixtures.TEST_PHOTO_TWEET)
                 .setQuotedStatus(TestFixtures.TEST_TWEET)
                 .build();
-        assertFalse(TweetUtils.showQuoteTweet(tweet));
+        Assert.assertFalse(TweetUtils.showQuoteTweet(tweet));
     }
 
     public void testShowQuoteTweet_nullEntity() {
@@ -204,6 +204,6 @@ public void testShowQuoteTweet_nullEntity() {
                 .setQuotedStatus(TestFixtures.TEST_TWEET)
                 .setEntities(null)
                 .build();
-        assertTrue(TweetUtils.showQuoteTweet(tweet));
+        Assert.assertTrue(TweetUtils.showQuoteTweet(tweet));
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
index e454f067..3d942e50 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewTest.java
@@ -60,44 +60,44 @@ TweetView createViewWithMocks(Context context, Tweet tweet, int styleResId,
     public void testInit() {
         super.testInit();
         final TweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
+        Assert.assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
     }
 
     @Override
     public void testInit_withEmptyTweet() {
         super.testInit();
         final TweetView view = createView(context, TestFixtures.TEST_TWEET);
-        assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
+        Assert.assertEquals(ImageView.GONE, view.mediaContainer.getVisibility());
     }
 
     public void testInit_withPhotoTweet() {
         final TweetView view = createView(context, TestFixtures.TEST_PHOTO_TWEET);
-        assertEquals(ImageView.VISIBLE, view.mediaContainer.getVisibility());
+        Assert.assertEquals(ImageView.VISIBLE, view.mediaContainer.getVisibility());
     }
 
     // Layout
     public void testLayout() {
         final TweetView tweetView = new TweetView(context, TestFixtures.TEST_TWEET);
-        assertEquals(R.layout.tw__tweet, tweetView.getLayout());
+        Assert.assertEquals(R.layout.tw__tweet, tweetView.getLayout());
     }
 
     public void testGetAspectRatio() {
         final BaseTweetView view = createView(context, TestFixtures.TEST_TWEET);
 
-        assertEquals(1, view.getAspectRatio(
+        Assert.assertEquals(1, view.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(100, 100)), DELTA);
-        assertEquals(.5, view.getAspectRatio(
+        Assert.assertEquals(.5, view.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(100, 200)), DELTA);
-        assertEquals(2, view.getAspectRatio(
+        Assert.assertEquals(2, view.getAspectRatio(
                 TestFixtures.createMediaEntityWithPhoto(200, 100)), DELTA);
     }
 
     public void testGetAspectRatioForPhotoEntity() {
         final TweetView tweetView = createView(context, TestFixtures.TEST_PHOTO_TWEET);
 
-        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(1));
-        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(2));
-        assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(3));
-        assertEquals(1.0, tweetView.getAspectRatioForPhotoEntity(4));
+        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(1));
+        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(2));
+        Assert.assertEquals(1.5, tweetView.getAspectRatioForPhotoEntity(3));
+        Assert.assertEquals(1.0, tweetView.getAspectRatioForPhotoEntity(4));
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java
index 82760707..09a44592 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/TweetViewXmlTest.java
@@ -32,7 +32,7 @@ TweetView getViewDark() {
 
     public void testLayout() {
         final TweetView view = getView();
-        assertNotNull(view);
-        assertEquals(R.layout.tw__tweet, view.getLayout());
+        Assert.assertNotNull(view);
+        Assert.assertEquals(R.layout.tw__tweet, view.getLayout());
     }
 }
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
index 84c22a1a..37c0be7b 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/MultiTouchImageViewTest.java
@@ -38,11 +38,11 @@ public void setUp() throws Exception {
     }
 
     public void testInitialViewState() {
-        assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
-        assertEquals(TEST_IDENTITY_MATRIX, view.updateMatrix);
-        assertEquals(TEST_VIEW_RECT, view.viewRect);
-        assertEquals(TEST_BASE_SCALE, view.getScale());
-        assertEquals(TEST_BASE_MATRIX, view.getDrawMatrix());
+        Assert.assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
+        Assert.assertEquals(TEST_IDENTITY_MATRIX, view.updateMatrix);
+        Assert.assertEquals(TEST_VIEW_RECT, view.viewRect);
+        Assert.assertEquals(TEST_BASE_SCALE, view.getScale());
+        Assert.assertEquals(TEST_BASE_MATRIX, view.getDrawMatrix());
     }
 
     public void testGetDrawRect() {
@@ -52,7 +52,7 @@ public void testGetDrawRect() {
                 .build();
         final RectF result = view.getDrawRect(matrix);
         final RectF expected = new RectF(10f, 10f, 110f, 110f);
-        assertEquals(expected, result);
+        Assert.assertEquals(expected, result);
     }
 
     public void testSetScale() {
@@ -62,18 +62,18 @@ public void testSetScale() {
                 .postScale(1.5f)
                 .postTranslate(-25f, -25f)
                 .build();
-        assertEquals(expected, view.updateMatrix);
-        assertEquals(1.5f, view.getScale());
-        assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
+        Assert.assertEquals(expected, view.updateMatrix);
+        Assert.assertEquals(1.5f, view.getScale());
+        Assert.assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
     }
 
     public void testReset() {
         view.setScale(1.5f, 50f, 50f);
         view.reset();
 
-        assertEquals(TEST_IDENTITY_MATRIX, view.updateMatrix);
-        assertEquals(TEST_BASE_SCALE, view.getScale());
-        assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
+        Assert.assertEquals(TEST_IDENTITY_MATRIX, view.updateMatrix);
+        Assert.assertEquals(TEST_BASE_SCALE, view.getScale());
+        Assert.assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
     }
 
     public void testSetTranslate() {
@@ -82,18 +82,18 @@ public void testSetTranslate() {
         final Matrix expected = new MatrixBuilder()
                 .postTranslate(10f, 10f)
                 .build();
-        assertEquals(expected, view.updateMatrix);
-        assertEquals(TEST_BASE_SCALE, view.getScale());
-        assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
+        Assert.assertEquals(expected, view.updateMatrix);
+        Assert.assertEquals(TEST_BASE_SCALE, view.getScale());
+        Assert.assertEquals(TEST_BASE_MATRIX, view.baseMatrix);
     }
 
     public void testCanBeSwiped_withScaleEqualOne() {
-        assertTrue(view.canBeSwiped());
+        Assert.assertTrue(view.canBeSwiped());
     }
 
     public void testCanBeSwiped_withScaleGreaterThanOne() {
         view.setScale(2, 0, 0);
-        assertFalse(view.canBeSwiped());
+        Assert.assertFalse(view.canBeSwiped());
     }
 
     static class MatrixBuilder {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
index 29b61e8c..55c70e2e 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/OverlayImageViewTest.java
@@ -79,8 +79,8 @@ public void testSetOverlayDrawable() {
         overlayImageView.setOverlayDrawable(drawable);
 
         verify(overlay).cleanupDrawable(overlayImageView);
-        assertNotNull(overlayImageView.overlay);
-        assertEquals(drawable, overlayImageView.overlay.drawable);
+        Assert.assertNotNull(overlayImageView.overlay);
+        Assert.assertEquals(drawable, overlayImageView.overlay.drawable);
     }
 
     public void testSetOverlayDrawable_nullDrawable() {
diff --git a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java
index a48be453..e0be68a8 100644
--- a/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java
+++ b/tweet-ui/src/androidTest/java/com/twitter/sdk/android/tweetui/internal/VideoControlViewTest.java
@@ -42,19 +42,19 @@ public void setUp() throws Exception {
     }
 
     public void testInitialState() {
-        assertTrue(videoControlView.getVisibility() == View.VISIBLE);
-        assertNotNull(videoControlView.seekBar);
-        assertNotNull(videoControlView.duration);
-        assertNotNull(videoControlView.currentTime);
-        assertNotNull(videoControlView.stateControl);
-        assertNull(videoControlView.player);
-
-        assertEquals(1000, videoControlView.seekBar.getMax());
-        assertEquals(0, videoControlView.seekBar.getProgress());
-        assertEquals(0, videoControlView.seekBar.getSecondaryProgress());
-
-        assertEquals("0:00", videoControlView.duration.getText());
-        assertEquals("0:00", videoControlView.currentTime.getText());
+        Assert.assertTrue(videoControlView.getVisibility() == View.VISIBLE);
+        Assert.assertNotNull(videoControlView.seekBar);
+        Assert.assertNotNull(videoControlView.duration);
+        Assert.assertNotNull(videoControlView.currentTime);
+        Assert.assertNotNull(videoControlView.stateControl);
+        Assert.assertNull(videoControlView.player);
+
+        Assert.assertEquals(1000, videoControlView.seekBar.getMax());
+        Assert.assertEquals(0, videoControlView.seekBar.getProgress());
+        Assert.assertEquals(0, videoControlView.seekBar.getSecondaryProgress());
+
+        Assert.assertEquals("0:00", videoControlView.duration.getText());
+        Assert.assertEquals("0:00", videoControlView.currentTime.getText());
     }
 
     public void testCreateStateControlClickListener() {
@@ -84,7 +84,7 @@ public void testCreateProgressChangeListener() {
         when(player.getDuration()).thenReturn(MINUTE_IN_MS);
         listener.onProgressChanged(null, 500, true);
         verify(player).seekTo(30000);
-        assertEquals("0:30", videoControlView.currentTime.getText());
+        Assert.assertEquals("0:30", videoControlView.currentTime.getText());
     }
 
     public void testCreateProgressChangeListener_fromUserFalse() {
@@ -101,7 +101,7 @@ public void testCreateProgressChangeListener_fromUserFalse() {
     }
 
     public void testIsShowing() {
-        assertTrue(videoControlView.isShowing());
+        Assert.assertTrue(videoControlView.isShowing());
     }
 
     public void testUpdateProgress() {
@@ -114,33 +114,33 @@ public void testUpdateProgress() {
 
         videoControlView.updateProgress();
 
-        assertEquals(16, videoControlView.seekBar.getProgress());
-        assertEquals(500, videoControlView.seekBar.getSecondaryProgress());
+        Assert.assertEquals(16, videoControlView.seekBar.getProgress());
+        Assert.assertEquals(500, videoControlView.seekBar.getSecondaryProgress());
 
-        assertEquals("1:00", videoControlView.duration.getText());
-        assertEquals("0:01", videoControlView.currentTime.getText());
+        Assert.assertEquals("1:00", videoControlView.duration.getText());
+        Assert.assertEquals("0:01", videoControlView.currentTime.getText());
     }
 
     public void testSetDuration() {
         videoControlView.setDuration(SECOND_IN_MS);
-        assertEquals("0:01", videoControlView.duration.getText());
+        Assert.assertEquals("0:01", videoControlView.duration.getText());
     }
 
     public void testSetCurrentTime() {
         videoControlView.setCurrentTime(SECOND_IN_MS);
-        assertEquals("0:01", videoControlView.currentTime.getText());
+        Assert.assertEquals("0:01", videoControlView.currentTime.getText());
     }
 
     public void testSetSeekBarProgress() {
         videoControlView.setProgress(SECOND_IN_MS, MINUTE_IN_MS, TEST_BUFFER_PROGRESS);
-        assertEquals(16, videoControlView.seekBar.getProgress());
-        assertEquals(320, videoControlView.seekBar.getSecondaryProgress());
+        Assert.assertEquals(16, videoControlView.seekBar.getProgress());
+        Assert.assertEquals(320, videoControlView.seekBar.getSecondaryProgress());
     }
 
     public void testSetSeekBarProgress_zeroDuration() {
         videoControlView.setProgress(SECOND_IN_MS, 0, TEST_BUFFER_PROGRESS);
-        assertEquals(0, videoControlView.seekBar.getProgress());
-        assertEquals(320, videoControlView.seekBar.getSecondaryProgress());
+        Assert.assertEquals(0, videoControlView.seekBar.getProgress());
+        Assert.assertEquals(320, videoControlView.seekBar.getSecondaryProgress());
     }
 
     public void testSetPlayDrawable() {
@@ -172,6 +172,6 @@ public void testSetReplayDrawable() {
 
     public void testSetMediaPlayer() {
         videoControlView.setMediaPlayer(mock(VideoControlView.MediaPlayerControl.class));
-        assertNotNull(videoControlView.player);
+        Assert.assertNotNull(videoControlView.player);
     }
 }
diff --git a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TweetAsserts.java b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
index 7ca3e0fa..85b86d1d 100644
--- a/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
+++ b/tweet-ui/src/debug/java/com/twitter/sdk/android/tweetui/TweetAsserts.java
@@ -33,12 +33,12 @@ public static void assertDefaultColors(BaseTweetView view, Resources resources)
         final int primaryTextColor
                 = resources.getColor(R.color.tw__tweet_light_primary_text_color);
 
-        assertEquals(containerColor, view.containerBgColor);
-        assertEquals(primaryTextColor, view.primaryTextColor);
-        assertEquals(primaryTextColor, view.contentView.getCurrentTextColor());
-        assertEquals(primaryTextColor, view.fullNameView.getCurrentTextColor());
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
-        assertEquals(R.drawable.tw__ic_logo_blue, view.birdLogoResId);
+        Assert.assertEquals(containerColor, view.containerBgColor);
+        Assert.assertEquals(primaryTextColor, view.primaryTextColor);
+        Assert.assertEquals(primaryTextColor, view.contentView.getCurrentTextColor());
+        Assert.assertEquals(primaryTextColor, view.fullNameView.getCurrentTextColor());
+        Assert.assertEquals(R.drawable.tw__ic_tweet_photo_error_light, view.photoErrorResId);
+        Assert.assertEquals(R.drawable.tw__ic_logo_blue, view.birdLogoResId);
     }
 
     public static void assertDarkColors(BaseTweetView view, Resources resources) {
@@ -47,11 +47,11 @@ public static void assertDarkColors(BaseTweetView view, Resources resources) {
         final int primaryTextColor
                 = resources.getColor(R.color.tw__tweet_dark_primary_text_color);
 
-        assertEquals(containerColor, view.containerBgColor);
-        assertEquals(primaryTextColor, view.primaryTextColor);
-        assertEquals(primaryTextColor, view.contentView.getCurrentTextColor());
-        assertEquals(primaryTextColor, view.fullNameView.getCurrentTextColor());
-        assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
-        assertEquals(R.drawable.tw__ic_logo_white, view.birdLogoResId);
+        Assert.assertEquals(containerColor, view.containerBgColor);
+        Assert.assertEquals(primaryTextColor, view.primaryTextColor);
+        Assert.assertEquals(primaryTextColor, view.contentView.getCurrentTextColor());
+        Assert.assertEquals(primaryTextColor, view.fullNameView.getCurrentTextColor());
+        Assert.assertEquals(R.drawable.tw__ic_tweet_photo_error_dark, view.photoErrorResId);
+        Assert.assertEquals(R.drawable.tw__ic_logo_white, view.birdLogoResId);
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FixedTweetTimeline.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FixedTweetTimeline.java
index 14b87618..18ffd08b 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FixedTweetTimeline.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FixedTweetTimeline.java
@@ -31,7 +31,7 @@
     final List<Tweet> tweets;
 
     FixedTweetTimeline(List<Tweet> tweets) {
-        this.tweets = tweets == null ? new ArrayList<Tweet>() : tweets;
+        this.tweets = tweets == null ? new ArrayList<>() : tweets;
     }
 
     @Override
@@ -64,6 +64,7 @@ String getTimelineType() {
         /**
          * Constructs a Builder.
          */
+        @SuppressWarnings("RedundantNoArgConstructor")
         public Builder() {}
 
         /**
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryAdapter.java
index 8dbcb965..5d057a8b 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryAdapter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/GalleryAdapter.java
@@ -18,6 +18,7 @@
 package com.twitter.sdk.android.tweetui;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.support.v4.view.PagerAdapter;
 import android.view.View;
 import android.view.ViewGroup;
@@ -51,12 +52,13 @@ public int getCount() {
     }
 
     @Override
-    public boolean isViewFromObject(View view, Object object) {
+    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {
         return view == object;
     }
 
+    @NonNull
     @Override
-    public Object instantiateItem(ViewGroup container, int position) {
+    public Object instantiateItem(@NonNull ViewGroup container, int position) {
         final GalleryImageView root = new GalleryImageView(context);
         root.setSwipeToDismissCallback(callback);
 
@@ -69,7 +71,7 @@ public Object instantiateItem(ViewGroup container, int position) {
     }
 
     @Override
-    public void destroyItem(ViewGroup container, int position, Object object) {
+    public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
         container.removeView((View) object);
     }
 }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
index 572759ad..057427d5 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
@@ -118,10 +118,8 @@ static CharSequence trimEnd(CharSequence charSequence) {
             if (lhs == null && rhs != null) return -1;
             if (lhs != null && rhs == null) return 1;
             if (lhs == null && rhs == null) return 0;
-            if (lhs.start < rhs.start) return -1;
-            if (lhs.start > rhs.start) return 1;
+            return Integer.compare(lhs.start, rhs.start);
 
-            return 0;
         });
         return combined;
     }
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
index 9cdb8264..547b2ed4 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTimelineRecyclerViewAdapter.java
@@ -19,6 +19,7 @@
 
 import android.content.Context;
 import android.database.DataSetObserver;
+import android.support.annotation.NonNull;
 import android.support.v7.widget.RecyclerView;
 import android.view.ViewGroup;
 
@@ -128,8 +129,9 @@ public void refresh(Callback<TimelineResult<Tweet>> cb) {
         previousCount = 0;
     }
 
+    @NonNull
     @Override
-    public TweetViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+    public TweetViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
         final Tweet tweet = new TweetBuilder().build();
         final CompactTweetView compactTweetView = new CompactTweetView(context, tweet, styleResId);
         compactTweetView.setOnActionCallback(actionCallback);
@@ -137,7 +139,7 @@ public TweetViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
     }
 
     @Override
-    public void onBindViewHolder(TweetViewHolder holder, int position) {
+    public void onBindViewHolder(@NonNull TweetViewHolder holder, int position) {
         final Tweet tweet = timelineDelegate.getItem(position);
         final CompactTweetView compactTweetView = (CompactTweetView) holder.itemView;
         compactTweetView.setTweet(tweet);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/OverlayImageView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/OverlayImageView.java
index 7e43d3e6..fccdade5 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/OverlayImageView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/OverlayImageView.java
@@ -20,6 +20,7 @@
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
 import android.util.AttributeSet;
 import android.widget.ImageView;
 
@@ -63,7 +64,7 @@ protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight)
     }
 
     @Override
-    public void invalidateDrawable(Drawable drawable) {
+    public void invalidateDrawable(@NonNull Drawable drawable) {
         if (drawable == overlay.drawable) {
             invalidate();
         } else {
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/util/HtmlEntities.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/util/HtmlEntities.java
index df31459d..e3f08458 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/util/HtmlEntities.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/internal/util/HtmlEntities.java
@@ -903,88 +903,6 @@ static void fillWithHtml40Entities(HtmlEntities entities) {
         int value(String name);
     }
 
-    static class PrimitiveEntityMap implements EntityMap {
-        @SuppressWarnings("unchecked")
-        private final Map mapNameToValue = new HashMap();
-
-        private final IntHashMap mapValueToName = new IntHashMap();
-
-        @SuppressWarnings("unchecked")
-        public void add(String name, int value) {
-            mapNameToValue.put(name, value);
-            mapValueToName.put(value, name);
-        }
-
-        public String name(int value) {
-            return (String) mapValueToName.get(value);
-        }
-
-        public int value(String name) {
-            final Object value = mapNameToValue.get(name);
-            if (value == null) {
-                return -1;
-            }
-            return ((Integer) value).intValue();
-        }
-    }
-
-    static class LookupEntityMap extends PrimitiveEntityMap {
-        private static final int LOOKUP_TABLE_SIZE = 256;
-
-        private String[] lookupTable;
-
-        @Override
-        public String name(int value) {
-            if (value < LOOKUP_TABLE_SIZE) {
-                return lookupTable()[value];
-            }
-            return super.name(value);
-        }
-
-        private String[] lookupTable() {
-            if (lookupTable == null) {
-                createLookupTable();
-            }
-            return lookupTable;
-        }
-
-        private void createLookupTable() {
-            lookupTable = new String[LOOKUP_TABLE_SIZE];
-            for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) {
-                lookupTable[i] = super.name(i);
-            }
-        }
-    }
-
-    /**
-     * The result of an unescape. Keeps an array of indices[start][end] on the original input that
-     * was escaped.
-     */
-    public static final class Unescaped {
-        public final String unescaped;
-        // An ordered list of start/end indices
-        public final ArrayList<int[]> indices;
-
-        public Unescaped(String unescaped, ArrayList<int[]> indices) {
-            this.unescaped = unescaped;
-            this.indices = indices;
-        }
-    }
-
-    public void addEntities(String[][] entityArray) {
-        for (String[] anEntityArray : entityArray) {
-            addEntity(anEntityArray[0], Integer.parseInt(anEntityArray[1]));
-        }
-    }
-
-    public void addEntity(String name, int value) {
-        map.add(name, value);
-    }
-
-    public int entityValue(String name) {
-        return map.value(name);
-    }
-
     /**
      * <p>
      * Unescapes the entities in a <code>String</code>.
@@ -1019,8 +937,7 @@ public Unescaped unescape(String str) {
                         try {
                             if (charAt1 == 'x' || charAt1 == 'X') {
                                 if (entityNameLength > 2) {
-                                    entityValue = Integer.valueOf(entityName.substring(2), 16)
-                                            .intValue();
+                                        entityValue = Integer.valueOf(entityName.substring(2), 16);
                                 }
                             } else {
                                 entityValue = Integer.parseInt(entityName.substring(1));
@@ -1050,4 +967,86 @@ public Unescaped unescape(String str) {
         }
         return new Unescaped(buf.toString(), indices);
     }
+
+        static class LookupEntityMap extends PrimitiveEntityMap {
+                private static final int LOOKUP_TABLE_SIZE = 256;
+
+                private String[] lookupTable;
+
+                @Override
+                public String name(int value) {
+                        if (value < LOOKUP_TABLE_SIZE) {
+                                return lookupTable()[value];
+                        }
+                        return super.name(value);
+                }
+
+                private String[] lookupTable() {
+                        if (lookupTable == null) {
+                                createLookupTable();
+                        }
+                        return lookupTable;
+                }
+
+                private void createLookupTable() {
+                        lookupTable = new String[LOOKUP_TABLE_SIZE];
+                        for (int i = 0; i < LOOKUP_TABLE_SIZE; ++i) {
+                                lookupTable[i] = super.name(i);
+                        }
+                }
+        }
+
+        /**
+         * The result of an unescape. Keeps an array of indices[start][end] on the original input that
+         * was escaped.
+         */
+        public static final class Unescaped {
+                public final String unescaped;
+                // An ordered list of start/end indices
+                public final ArrayList<int[]> indices;
+
+                public Unescaped(String unescaped, ArrayList<int[]> indices) {
+                        this.unescaped = unescaped;
+                        this.indices = indices;
+                }
+        }
+
+        public void addEntities(String[][] entityArray) {
+                for (String[] anEntityArray : entityArray) {
+                        addEntity(anEntityArray[0], Integer.parseInt(anEntityArray[1]));
+                }
+        }
+
+        public void addEntity(String name, int value) {
+                map.add(name, value);
+        }
+
+        public int entityValue(String name) {
+                return map.value(name);
+        }
+
+        static class PrimitiveEntityMap implements EntityMap {
+                @SuppressWarnings("unchecked")
+                private final Map mapNameToValue = new HashMap();
+
+                private final IntHashMap mapValueToName = new IntHashMap();
+
+                @SuppressWarnings("unchecked")
+                public void add(String name, int value) {
+                        mapNameToValue.put(name, value);
+                        mapValueToName.put(value, name);
+                }
+
+                public String name(int value) {
+                        return (String) mapValueToName.get(value);
+                }
+
+                public int value(String name) {
+                        final Object value = mapNameToValue.get(name);
+                        if (value == null) {
+                                return -1;
+                        }
+                        return (Integer) value;
+                }
+        }
 }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
index d20aaec1..711ef0c3 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/SearchTimelineTest.java
@@ -32,6 +32,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.eq;
@@ -176,7 +177,7 @@ public void testBuilder() {
         assertEquals(TEST_LANG, timeline.languageCode);
         assertEquals(TEST_ITEMS_PER_REQUEST, timeline.maxItemsPerRequest);
         assertEquals(TEST_UNTIL_DATE, timeline.untilDate);
-        assertEquals(TEST_GEOCODE, timeline.geocode);
+        assertSame(TEST_GEOCODE, timeline.geocode);
     }
 
     @Test
@@ -223,7 +224,7 @@ public void testBuilder_geocode() {
                 .query(TEST_QUERY)
                 .geocode(TEST_GEOCODE)
                 .build();
-        assertEquals(TEST_GEOCODE, timeline.geocode);
+        assertSame(TEST_GEOCODE, timeline.geocode);
     }
 
     @Test
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
index 4a28a07b..c34b910e 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TimelineDelegateTest.java
@@ -356,7 +356,7 @@ public void testLoadNext_respectsMaxCapacity() {
                 = ArgumentCaptor.forClass(TwitterException.class);
         verifyZeroInteractions(mockTimeline);
         verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(exceptionCaptor.getValue().getMessage(), REQUIRED_MAX_CAPACITY_ERROR);
+        assertEquals(REQUIRED_MAX_CAPACITY_ERROR, exceptionCaptor.getValue().getMessage());
     }
 
     @Test
@@ -369,7 +369,7 @@ public void testLoadNext_respectsRequestInFlight() {
                 = ArgumentCaptor.forClass(TwitterException.class);
         verifyZeroInteractions(mockTimeline);
         verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(exceptionCaptor.getValue().getMessage(), REQUIRED_REQUEST_IN_FLIGHT_ERROR);
+        assertEquals(REQUIRED_REQUEST_IN_FLIGHT_ERROR, exceptionCaptor.getValue().getMessage());
     }
 
     @Test
@@ -391,7 +391,7 @@ public void testLoadPrevious_respectsMaxCapacity() {
                 = ArgumentCaptor.forClass(TwitterException.class);
         verifyZeroInteractions(mockTimeline);
         verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(exceptionCaptor.getValue().getMessage(), REQUIRED_MAX_CAPACITY_ERROR);
+        assertEquals(REQUIRED_MAX_CAPACITY_ERROR, exceptionCaptor.getValue().getMessage());
     }
 
     @Test
@@ -404,7 +404,7 @@ public void testLoadPrevious_respectsRequestInFlight() {
                 = ArgumentCaptor.forClass(TwitterException.class);
         verifyZeroInteractions(mockTimeline);
         verify(mockCallback).failure(exceptionCaptor.capture());
-        assertEquals(exceptionCaptor.getValue().getMessage(), REQUIRED_REQUEST_IN_FLIGHT_ERROR);
+        assertEquals(REQUIRED_REQUEST_IN_FLIGHT_ERROR, exceptionCaptor.getValue().getMessage());
     }
 
     /* nested Callbacks */
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
index 2b1b9a2c..a2137f4b 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaUtilsTest.java
@@ -63,7 +63,7 @@ public void testGetPhotoEntity_nullMedia() {
 
     @Test
     public void testGetPhotoEntity_emptyMedia() {
-        final TweetEntities entities = new TweetEntities(null, null, new ArrayList<MediaEntity>(),
+        final TweetEntities entities = new TweetEntities(null, null, new ArrayList<>(),
                 null, null);
         final Tweet tweet = new TweetBuilder().setEntities(entities).build();
         assertNull(TweetMediaUtils.getPhotoEntity(tweet));
@@ -145,7 +145,7 @@ public void testGetVideoEntity_nullMedia() {
 
     @Test
     public void testGetVideoEntity_emptyMedia() {
-        final TweetEntities entities = new TweetEntities(null, null, new ArrayList<MediaEntity>(),
+        final TweetEntities entities = new TweetEntities(null, null, new ArrayList<>(),
                 null, null);
         final Tweet tweet = new TweetBuilder().setExtendedEntities(entities).build();
         assertNull(TweetMediaUtils.getVideoEntity(tweet));
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
index e4836cdf..d4793504 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/internal/TweetMediaViewTest.java
@@ -73,11 +73,13 @@ public void testInitialViewState() {
         assertArrayEquals(new float[]{0, 0, 0, 0, 0, 0, 0, 0}, tweetMediaView.radii, 0);
     }
 
+    @Test
     public void testSetMediaBgColor() {
         tweetMediaView.setMediaBgColor(Color.BLUE);
         assertEquals(Color.BLUE, tweetMediaView.mediaBgColor);
     }
 
+    @Test
     public void testSetPhotoErrorResId() {
         tweetMediaView.setPhotoErrorResId(TEST_ERROR_RES_ID);
         assertEquals(TEST_ERROR_RES_ID, tweetMediaView.photoErrorResId);
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
index dc2250ff..a80988cd 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterApiClientTest.java
@@ -18,13 +18,15 @@
 package com.twitter.sdk.android.core;
 
 import android.test.AndroidTestCase;
+
 import com.twitter.sdk.android.core.internal.TwitterApi;
 import com.twitter.sdk.android.core.services.FavoriteService;
 import com.twitter.sdk.android.core.services.StatusesService;
-import okhttp3.OkHttpClient;
 
 import java.util.concurrent.ExecutorService;
 
+import okhttp3.OkHttpClient;
+
 import static org.mockito.Mockito.mock;
 
 public class TwitterApiClientTest extends AndroidTestCase {
@@ -49,38 +51,38 @@ public void testGetService_sdkNotStarted() {
         try {
             TwitterTestUtils.resetTwitter();
             new TwitterApiClient(mock(TwitterSession.class));
-            fail();
+            Assert.fail();
         } catch (IllegalStateException ise) {
-            assertEquals("Must initialize Twitter before using getInstance()", ise.getMessage());
+            Assert.assertEquals("Must initialize Twitter before using getInstance()", ise.getMessage());
         }
     }
 
     public void testConstructor_noSession() {
         try {
             new TwitterApiClient((TwitterSession) null);
-            fail();
+            Assert.fail();
         } catch (IllegalArgumentException ie) {
-            assertEquals("Session must not be null.", ie.getMessage());
+            Assert.assertEquals("Session must not be null.", ie.getMessage());
         }
     }
 
     public void testGetService_cachedService() {
         final TwitterApiClient client = newTwitterApiClient();
         final StatusesService service = client.getService(StatusesService.class);
-        assertSame(service, client.getService(StatusesService.class));
+        Assert.assertSame(service, client.getService(StatusesService.class));
     }
 
     public void testGetService_differentServices() {
         final TwitterApiClient client = newTwitterApiClient();
         final FavoriteService service = client.getService(FavoriteService.class);
-        assertNotSame(service, client.getService(StatusesService.class));
+        Assert.assertNotSame(service, client.getService(StatusesService.class));
     }
 
     public void testApiClient_cachedGuestAuthClient() {
         final TwitterApiClient customApiClient = new TwitterApiClient(newOkHttpClient());
         TwitterCore.getInstance().addGuestApiClient(customApiClient);
 
-        assertEquals(customApiClient, TwitterCore.getInstance().getGuestApiClient());
+        Assert.assertEquals(customApiClient, TwitterCore.getInstance().getGuestApiClient());
     }
 
     public void testApiClient_cachedUserAuthApiClient() {
@@ -89,7 +91,7 @@ public void testApiClient_cachedUserAuthApiClient() {
                 new TwitterApiClient(mockUserSession, newOkHttpClient());
         TwitterCore.getInstance().addApiClient(mockUserSession, customApiClient);
 
-        assertEquals(customApiClient, TwitterCore.getInstance().getApiClient(mockUserSession));
+        Assert.assertEquals(customApiClient, TwitterCore.getInstance().getApiClient(mockUserSession));
     }
 
     private TwitterApiClient newTwitterApiClient() {
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
index 535f866d..e10e6736 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/TwitterCoreTest.java
@@ -51,9 +51,9 @@ public void testGuestSessionManager_noSdkStart() {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
             TwitterCore.getInstance().getGuestSessionProvider();
-            fail("Should fail if Twitter is not initialized.");
+            Assert.fail("Should fail if Twitter is not initialized.");
         } catch (IllegalStateException ie) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage());
+            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage());
         }
     }
 
@@ -62,19 +62,19 @@ public void testGuestSessionManager_sdkStartNoTwitterKit() {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
             TwitterCore.getInstance().getGuestSessionProvider();
-            fail("Should fail if Twitter is not initialized.");
+            Assert.fail("Should fail if Twitter is not initialized.");
         } catch (IllegalStateException ie) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage());
+            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ie.getMessage());
         }
     }
 
     public void testGetIdentifier() {
         final String identifier = BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID;
-        assertEquals(identifier, twitterCore.getIdentifier());
+        Assert.assertEquals(identifier, twitterCore.getIdentifier());
     }
 
     public void testGetSessionManager() {
-        assertNotNull(twitterCore.getSessionManager());
+        Assert.assertNotNull(twitterCore.getSessionManager());
     }
 
     public void testGetSessionManager_twitterNotInitialized() {
@@ -82,14 +82,14 @@ public void testGetSessionManager_twitterNotInitialized() {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
             TwitterCore.getInstance().getSessionManager();
-            fail("Should fail if Twitter is not initialized.");
+            Assert.fail("Should fail if Twitter is not initialized.");
         } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
+            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
         }
     }
 
     public void testGetAppSessionManager() {
-        assertNotNull(twitterCore.getGuestSessionProvider());
+        Assert.assertNotNull(twitterCore.getGuestSessionProvider());
     }
 
     public void testGetAppSessionManager_twitterNotInitialized() {
@@ -97,15 +97,15 @@ public void testGetAppSessionManager_twitterNotInitialized() {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
             TwitterCore.getInstance().getGuestSessionProvider();
-            fail("Should fail if Twitter is not initialized.");
+            Assert.fail("Should fail if Twitter is not initialized.");
         } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
+            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
         }
     }
 
     public void testGetApiClient_activeSessionExists() {
         twitterCore.twitterSessionManager = setUpSessionManager(mock(TwitterSession.class));
-        assertNotNull(twitterCore.getApiClient());
+        Assert.assertNotNull(twitterCore.getApiClient());
     }
 
     public void testGetApiClient_twitterNotInitialized() {
@@ -113,14 +113,14 @@ public void testGetApiClient_twitterNotInitialized() {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
             twitterCore.getApiClient();
-            fail("Should fail if Twitter is not initialized.");
+            Assert.fail("Should fail if Twitter is not initialized.");
         } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
+            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
         }
     }
 
     public void testGetApiClient_withSession() {
-        assertNotNull(twitterCore.getApiClient(mock(TwitterSession.class)));
+        Assert.assertNotNull(twitterCore.getApiClient(mock(TwitterSession.class)));
     }
 
     public void testGetApiClient_withSessionTwitterNotInitialized() {
@@ -128,9 +128,9 @@ public void testGetApiClient_withSessionTwitterNotInitialized() {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
             TwitterCore.getInstance().getApiClient(mock(TwitterSession.class));
-            fail("Should fail if Twitter is not initialized.");
+            Assert.fail("Should fail if Twitter is not initialized.");
         } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
+            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
         }
     }
 
@@ -139,9 +139,9 @@ public void testGetGuestApiClient_twitterNotInitialized() {
             TwitterTestUtils.resetTwitter();
             TwitterCoreTestUtils.resetTwitterCore();
             TwitterCore.getInstance().getGuestApiClient();
-            fail("Should fail if Twitter is not initialized.");
+            Assert.fail("Should fail if Twitter is not initialized.");
         } catch (IllegalStateException ex) {
-            assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
+            Assert.assertEquals(TWITTER_NOT_INIT_ERROR_MSG, ex.getMessage());
         }
     }
 
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/OAuthActivityTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/OAuthActivityTest.java
index a4d4252a..86833da4 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/OAuthActivityTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/OAuthActivityTest.java
@@ -79,7 +79,7 @@ public void testOnBackPressed() {
                 = ArgumentCaptor.forClass(TwitterAuthException.class);
         verify(mockController).handleAuthError(eq(Activity.RESULT_CANCELED),
                 exceptionArgCaptor.capture());
-        assertEquals("Authorization failed, request was canceled.",
+        Assert.assertEquals("Authorization failed, request was canceled.",
                 exceptionArgCaptor.getValue().getMessage());
     }
 
@@ -87,6 +87,6 @@ public void testOnComplete() {
         init();
         getActivity().onComplete(Activity.RESULT_OK, new Intent());
 
-        assertTrue(isFinishCalled());
+        Assert.assertTrue(isFinishCalled());
     }
 }
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java
index d118fb53..80a8a90b 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/identity/TwitterLoginButtonTest.java
@@ -22,12 +22,30 @@
 import android.test.AndroidTestCase;
 import android.util.Log;
 import android.view.View;
-import com.twitter.sdk.android.core.*;
+
+import com.twitter.sdk.android.core.Callback;
+import com.twitter.sdk.android.core.Logger;
+import com.twitter.sdk.android.core.Twitter;
+import com.twitter.sdk.android.core.TwitterConfig;
+import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.TwitterCoreTestUtils;
+import com.twitter.sdk.android.core.TwitterSession;
+import com.twitter.sdk.android.core.TwitterTestUtils;
+
 import org.mockito.ArgumentCaptor;
 
 import java.util.concurrent.ExecutorService;
 
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyInt;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.doNothing;
+import static org.mockito.Mockito.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
 
 public class TwitterLoginButtonTest extends AndroidTestCase {
 
@@ -65,9 +83,9 @@ protected Activity getActivity() {
     public void testConstructor_contextNotActivity() {
         try {
             loginButton = new TwitterLoginButton(getContext(), null, 0, mockAuthClient);
-            fail("Constructor should throw an exception when provided context is not an activity");
+            Assert.fail("Constructor should throw an exception when provided context is not an activity");
         } catch (IllegalStateException e) {
-            assertEquals(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY, e.getMessage());
+            Assert.assertEquals(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY, e.getMessage());
         }
     }
 
@@ -78,7 +96,7 @@ public boolean isInEditMode() {
                 return true;
             }
         };
-        assertNull(loginButton.getActivity());
+        Assert.assertNull(loginButton.getActivity());
     }
 
     public void testConstructor_nullTwitterAuthClient() {
@@ -88,7 +106,7 @@ protected Activity getActivity() {
                 return mock(Activity.class);
             }
         };
-        assertNull(button.authClient);
+        Assert.assertNull(button.authClient);
     }
 
     public void testConstructor_editMode() {
@@ -103,7 +121,7 @@ public boolean isInEditMode() {
                     return true;
                 }
             };
-            assertTrue(button.isEnabled());
+        Assert.assertTrue(button.isEnabled());
     }
 
     public void testConstructor_twitterNotStarted() {
@@ -117,7 +135,7 @@ protected Activity getActivity() {
                 }
             };
 
-            assertFalse(button.isEnabled());
+            Assert.assertFalse(button.isEnabled());
 
         } finally {
             TwitterTestUtils.resetTwitter();
@@ -137,7 +155,7 @@ protected Activity getActivity() {
 
             final Logger logger = Twitter.getLogger();
             verify(logger, never()).e(eq(TwitterLoginButton.TAG), anyString());
-            assertTrue(button.isEnabled());
+            Assert.assertTrue(button.isEnabled());
 
         } finally {
             TwitterTestUtils.resetTwitter();
@@ -148,16 +166,16 @@ protected Activity getActivity() {
     public void testSetCallback_callbackNull() {
         try {
             loginButton.setCallback(null);
-            fail("setCallback should throw an exception when called with null callback");
+            Assert.fail("setCallback should throw an exception when called with null callback");
         } catch (IllegalArgumentException e) {
-            assertEquals("Callback cannot be null", e.getMessage());
+            Assert.assertEquals("Callback cannot be null", e.getMessage());
         }
     }
 
     public void testGetCallback() {
         final Callback<TwitterSession> mockCallback = mock(Callback.class);
         loginButton.setCallback(mockCallback);
-        assertSame(mockCallback, loginButton.getCallback());
+        Assert.assertSame(mockCallback, loginButton.getCallback());
     }
 
     public void testOnClick() {
@@ -181,9 +199,9 @@ public void testOnClick_callbackNullDebuggableTrue() {
                 .build());
         try {
             loginButton.performClick();
-            fail("onClick should throw an exception when called and there is no callback");
+            Assert.fail("onClick should throw an exception when called and there is no callback");
         } catch (IllegalStateException e) {
-            assertEquals("Callback must not be null, did you call setCallback?", e.getMessage());
+            Assert.assertEquals("Callback must not be null, did you call setCallback?", e.getMessage());
         } finally {
             TwitterCoreTestUtils.resetTwitterCore();
             TwitterTestUtils.resetTwitter();
@@ -218,9 +236,9 @@ protected Activity getActivity() {
 
         try {
             loginButton.performClick();
-            fail("onClick should throw an exception when called and there is no activity");
+            Assert.fail("onClick should throw an exception when called and there is no activity");
         } catch (IllegalStateException e) {
-            assertEquals(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY, e.getMessage());
+            Assert.assertEquals(TwitterLoginButton.ERROR_MSG_NO_ACTIVITY, e.getMessage());
         } finally {
             TwitterCoreTestUtils.resetTwitterCore();
             TwitterTestUtils.resetTwitter();
@@ -286,7 +304,7 @@ private TwitterConfig setUpLogTest() {
     private void assertLogMessage(String expectedMessage) {
         final ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);
         verify(Twitter.getLogger()).w(eq(Twitter.TAG), argumentCaptor.capture());
-        assertEquals(expectedMessage, argumentCaptor.getValue());
+        Assert.assertEquals(expectedMessage, argumentCaptor.getValue());
     }
 
     public void testOnActivityResult_requestCodeMatches() {
@@ -320,7 +338,7 @@ protected Activity getActivity() {
                 }
             };
             final TwitterAuthClient client = button.getTwitterAuthClient();
-            assertNotNull(client);
+            Assert.assertNotNull(client);
 
         } finally {
             TwitterCoreTestUtils.resetTwitterCore();
@@ -342,7 +360,7 @@ protected Activity getActivity() {
             };
             final TwitterAuthClient client = button.getTwitterAuthClient();
             final TwitterAuthClient client2 = button.getTwitterAuthClient();
-            assertSame(client, client2);
+            Assert.assertSame(client, client2);
 
         } finally {
             TwitterCoreTestUtils.resetTwitterCore();
diff --git a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventTransformTest.java b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventTransformTest.java
index c6fe9a61..5d0b4e80 100644
--- a/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventTransformTest.java
+++ b/twitter-core/src/androidTest/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventTransformTest.java
@@ -62,7 +62,7 @@ public void testToBytes() throws IOException {
         final ScribeEvent scribeEvent =
                 new ScribeEvent("testcategory", eventNamespace, 1404426136717L);
         final byte[] bytes = transform.toBytes(scribeEvent);
-        assertEquals(scribeEventJsonString, new String(bytes, "UTF-8"));
+        Assert.assertEquals(scribeEventJsonString, new String(bytes, "UTF-8"));
     }
 
     public void testToBytes_withItems() throws IOException {
@@ -72,7 +72,7 @@ public void testToBytes_withItems() throws IOException {
                 new ScribeEvent("testcategory", eventNamespace, 1404426136717L, itemList);
         final byte[] bytes = transform.toBytes(scribeEvent);
 
-        assertTrue(new String(bytes, "UTF-8").contains(TEST_ITEM_TYPE));
-        assertTrue(new String(bytes, "UTF-8").contains(TEST_DESCRIPTION));
+        Assert.assertTrue(new String(bytes, "UTF-8").contains(TEST_ITEM_TYPE));
+        Assert.assertTrue(new String(bytes, "UTF-8").contains(TEST_DESCRIPTION));
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/PersistedSessionManager.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/PersistedSessionManager.java
index d097a584..50a19798 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/PersistedSessionManager.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/PersistedSessionManager.java
@@ -45,8 +45,8 @@
     public PersistedSessionManager(PreferenceStore preferenceStore,
             SerializationStrategy<T> serializer, String prefKeyActiveSession,
             String prefKeySession) {
-        this(preferenceStore, serializer, new ConcurrentHashMap<Long, T>(NUM_SESSIONS),
-                new ConcurrentHashMap<Long, PreferenceStoreStrategy<T>>(NUM_SESSIONS),
+        this(preferenceStore, serializer, new ConcurrentHashMap<>(NUM_SESSIONS),
+                new ConcurrentHashMap<>(NUM_SESSIONS),
                 new PreferenceStoreStrategy<>(preferenceStore, serializer,
                         prefKeyActiveSession), prefKeySession);
     }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java
index 8a374ef5..adcd3585 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java
@@ -55,7 +55,7 @@
     private volatile GuestSessionProvider guestSessionProvider;
 
     TwitterCore(TwitterAuthConfig authConfig) {
-        this(authConfig, new ConcurrentHashMap<Session, TwitterApiClient>(), null);
+        this(authConfig, new ConcurrentHashMap<>(), null);
     }
 
     // Testing only
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfoReflectionStrategy.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfoReflectionStrategy.java
index e6d5b1ec..bd14c5ea 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfoReflectionStrategy.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfoReflectionStrategy.java
@@ -50,7 +50,7 @@ boolean isGooglePlayServiceAvailable(final Context context) {
             final Method method = Class.forName(CLASS_NAME_GOOGLE_PLAY_SERVICES_UTILS)
                     .getMethod(METHOD_NAME_IS_GOOGLE_PLAY_SERVICES_AVAILABLE, Context.class);
             final Integer result = (Integer) method.invoke(null, context);
-            return result.intValue() == GOOGLE_PLAY_SERVICES_SUCCESS_CODE;
+            return result == GOOGLE_PLAY_SERVICES_SUCCESS_CODE;
         } catch (Exception exception) {
             return false;
         }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ExecutorUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ExecutorUtils.java
index 82ae0bec..a8e6529f 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ExecutorUtils.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ExecutorUtils.java
@@ -45,7 +45,7 @@ public static ExecutorService buildThreadPoolExecutorService(String name) {
         final ThreadFactory threadFactory = ExecutorUtils.getNamedThreadFactory(name);
         final ExecutorService executor =
                 new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE, SECONDS,
-                        new LinkedBlockingQueue<Runnable>(), threadFactory);
+                        new LinkedBlockingQueue<>(), threadFactory);
         ExecutorUtils.addDelayedShutdownHook(name, executor);
         return executor;
     }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java
index d1bd06cd..fc75dc0a 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java
@@ -83,7 +83,7 @@ public void triggerVerificationIfNecessary() {
         final boolean startVerification = session != null &&
                 monitorState.beginVerification(currentTime);
         if (startVerification) {
-            executorService.submit(() -> verifyAll());
+            executorService.submit(this::verifyAll);
         }
     }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
index d2020734..cf8e3094 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
@@ -157,21 +157,15 @@ public static OAuthResponse parseAuthResponse(String response) {
             @Override
             public void success(Result<ResponseBody> result) {
                 //Try to get response body
-                BufferedReader reader = null;
                 final StringBuilder sb = new StringBuilder();
                 try {
-                    try {
-                        reader = new BufferedReader(
-                                new InputStreamReader(result.getData().byteStream()));
+                    try (BufferedReader reader = new BufferedReader(
+                            new InputStreamReader(result.getData().byteStream()))) {
                         String line;
 
                         while ((line = reader.readLine()) != null) {
                             sb.append(line);
                         }
-                    } finally {
-                        if (reader != null) {
-                            reader.close();
-                        }
                     }
                     final String responseAsStr = sb.toString();
                     final OAuthResponse authResponse = parseAuthResponse(responseAsStr);
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/QueueFile.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/QueueFile.java
index 1251b1b5..ab1b59b5 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/QueueFile.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/scribe/QueueFile.java
@@ -37,7 +37,12 @@
  */
 package com.twitter.sdk.android.core.internal.scribe;
 
-import java.io.*;
+import java.io.Closeable;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.RandomAccessFile;
 import java.nio.channels.FileChannel;
 import java.util.NoSuchElementException;
 import java.util.logging.Level;
@@ -203,15 +208,12 @@ private Element readElement(int position) throws IOException {
     private static void initialize(File file) throws IOException {
         // Use a temp file so we don't leave a partially-initialized file.
         File tempFile = new File(file.getPath() + ".tmp");
-        RandomAccessFile raf = open(tempFile);
-        try {
+        try (RandomAccessFile raf = open(tempFile)) {
             raf.setLength(INITIAL_LENGTH);
             raf.seek(0);
             byte[] headerBuffer = new byte[16];
             writeInts(headerBuffer, INITIAL_LENGTH, 0, 0, 0);
             raf.write(headerBuffer);
-        } finally {
-            raf.close();
         }
 
         // A rename is atomic.
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
index 52390686..3d1b732a 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/GuestSessionSerializerTest.java
@@ -26,6 +26,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertSame;
 
 @RunWith(RobolectricTestRunner.class)
 public class GuestSessionSerializerTest {
@@ -76,7 +77,7 @@ public void testDeserialize_serializedStringEmpty() {
     @Test
     public void testDeserialize_serializedStringAuthTokenIsGuestAuthToken() {
         final GuestSession session = serializer.deserialize(JSON_SESSION_GUEST);
-        assertEquals(GuestAuthToken.class, session.getAuthToken().getClass());
+        assertSame(GuestAuthToken.class, session.getAuthToken().getClass());
         assertEquals(TEST_TOKEN_TYPE, session.getAuthToken().getTokenType());
         assertEquals(TEST_ACCESS_TOKEN, session.getAuthToken().getAccessToken());
         assertEquals(TEST_GUEST_TOKEN, session.getAuthToken().getGuestToken());
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
index d3786a5c..35a2e406 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/PersistedSessionManagerTest.java
@@ -235,7 +235,7 @@ public void testSetActiveSession_differentSession() {
         numSessionsThisTest++;
         assertMapSizes(numSessionsThisTest);
         verify(mockActiveSessionStorage).save(session2);
-        assertNotSame(session, session2);
+        assertNotSame(session2, session);
         assertEquals(session2, sessionManager.getActiveSession());
     }
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java
index 662e6bf3..099a1cd5 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterContextTest.java
@@ -33,6 +33,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+@SuppressWarnings("FieldCanBeLocal")
 @RunWith(RobolectricTestRunner.class)
 public class TwitterContextTest {
     private static final String ROOT_DIR = ".Fabric";
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
index 7a89ce69..01c0a22a 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifierTest.java
@@ -23,19 +23,24 @@
 import com.twitter.sdk.android.core.internal.scribe.DefaultScribeClient;
 import com.twitter.sdk.android.core.internal.scribe.EventNamespace;
 import com.twitter.sdk.android.core.services.AccountService;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.RobolectricTestRunner;
-import retrofit2.mock.Calls;
 
 import java.io.IOException;
 
+import retrofit2.mock.Calls;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.doReturn;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
 public class TwitterSessionVerifierTest {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
index 0c7a310f..df06e909 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptorTest.java
@@ -36,6 +36,7 @@
 import okhttp3.Request;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -101,7 +102,7 @@ public void testIntercept_nullSessionFromProvider() throws Exception {
         verify(mockChain).proceed(requestCaptor.capture());
 
         final Request unsignedRequest = requestCaptor.getValue();
-        assertEquals(request, unsignedRequest);
+        assertSame(request, unsignedRequest);
     }
 
     @Test
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java
index f6f56f81..c4ac4c2a 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/persistence/FileStoreImplTest.java
@@ -87,6 +87,7 @@ public void testGetExternalFilesDir_withoutExternalStorage() {
         assertNull(fileStore.getExternalFilesDir());
     }
 
+    @Test
     public void testPrepare() {
         verifyFile(fileStore.prepare(new File(RuntimeEnvironment.application.getFilesDir(),
                 "FileStoreImplTest/")));
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsHandlerTest.java
index 8026e7c3..00e0ae73 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/EventsHandlerTest.java
@@ -18,6 +18,7 @@
 package com.twitter.sdk.android.core.internal.scribe;
 
 import android.content.Context;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -27,8 +28,10 @@
 
 import java.util.concurrent.ScheduledExecutorService;
 
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
 public class EventsHandlerTest {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
index 030dfe7d..011e78c8 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/scribe/ScribeEventFactoryTest.java
@@ -23,7 +23,7 @@
 
 import java.util.Collections;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
 
 @RunWith(RobolectricTestRunner.class)
 public class ScribeEventFactoryTest {
@@ -41,7 +41,7 @@ public void testNewScribeEvent_tfwEvent() {
                 = new EventNamespace.Builder().setClient(TFW_CLIENT_NAME).builder();
         final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, ANY_TIMESTAMP,
                 ANY_LANGUAGE, ANY_ADVERTISING_ID);
-        assertEquals(SyndicationClientEvent.class, event.getClass());
+        assertSame(SyndicationClientEvent.class, event.getClass());
     }
 
     @Test
@@ -50,7 +50,7 @@ public void testNewScribeEvent_sdkEvent() {
                 = new EventNamespace.Builder().setClient(SDK_CLIENT_NAME).builder();
         final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, ANY_TIMESTAMP,
                 ANY_LANGUAGE, ANY_ADVERTISING_ID);
-        assertEquals(SyndicatedSdkImpressionEvent.class, event.getClass());
+        assertSame(SyndicatedSdkImpressionEvent.class, event.getClass());
     }
 
     @Test
@@ -59,7 +59,7 @@ public void testNewScribeEvent_otherEvent() {
                 = new EventNamespace.Builder().setClient(OTHER_CLIENT_NAME).builder();
         final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, ANY_TIMESTAMP,
                 ANY_LANGUAGE, ANY_ADVERTISING_ID);
-        assertEquals(SyndicatedSdkImpressionEvent.class, event.getClass());
+        assertSame(SyndicatedSdkImpressionEvent.class, event.getClass());
     }
 
     @Test
@@ -69,6 +69,6 @@ public void testNewScribeEvent_withEventInfo() {
         final String eventInfo = "any info";
         final ScribeEvent event = ScribeEventFactory.newScribeEvent(ns, eventInfo, ANY_TIMESTAMP,
                 ANY_LANGUAGE, ANY_ADVERTISING_ID, Collections.emptyList());
-        assertEquals(SyndicatedSdkImpressionEvent.class, event.getClass());
+        assertSame(SyndicatedSdkImpressionEvent.class, event.getClass());
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
index 1455cd76..b13483c2 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
@@ -22,6 +22,7 @@
 import com.twitter.sdk.android.core.TestResources;
 import com.twitter.sdk.android.core.internal.CommonUtils;
 
+import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -29,8 +30,8 @@
 
 import java.io.InputStreamReader;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
 
 @RunWith(RobolectricTestRunner.class)
 public class ConfigurationTest {
@@ -53,16 +54,16 @@ public void testDeserialization() {
             reader = new JsonReader(new InputStreamReader(testResources
                     .getAsStream("model_configuration.json")));
             final Configuration configuration = new Gson().fromJson(reader, Configuration.class);
-            assertEquals(TEST_DM_CHAR_LIMIT, configuration.getDmTextCharacterLimit());
-            assertNotNull(configuration.getNonUsernamePaths());
-            assertEquals(TEST_NUN_NON_USER_NAME, configuration.getNonUsernamePaths().size());
-            assertEquals(TEST_PHOTO_SIZE_LIMIT, configuration.getPhotoSizeLimit());
-            assertNotNull(configuration.getPhotoSizes());
+            Assert.assertThat(configuration.getDmTextCharacterLimit(), is(TEST_DM_CHAR_LIMIT));
+            Assert.assertThat(configuration.getNonUsernamePaths(), notNullValue());
+            Assert.assertThat(configuration.getNonUsernamePaths().size(), is(TEST_NUN_NON_USER_NAME));
+            Assert.assertThat(configuration.getPhotoSizeLimit(), is(TEST_PHOTO_SIZE_LIMIT));
+            Assert.assertThat(configuration.getPhotoSizes(), notNullValue());
             MediaEntityTest.assertSizeEquals(TEST_SIZE_THUMB, configuration.getPhotoSizes().thumb);
             MediaEntityTest.assertSizeEquals(TEST_SIZE_SMALL, configuration.getPhotoSizes().small);
             MediaEntityTest.assertSizeEquals(TEST_SIZE_MEDIUM, configuration.getPhotoSizes().medium);
             MediaEntityTest.assertSizeEquals(TEST_SIZE_LARGE, configuration.getPhotoSizes().large);
-            assertEquals(TEST_SHORT_URL_LENGTH, configuration.getShortUrlLengthHttps());
+            Assert.assertThat(configuration.getShortUrlLengthHttps(), is(TEST_SHORT_URL_LENGTH));
         } finally {
             CommonUtils.closeQuietly(reader);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
index 36e73415..1679958d 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
@@ -18,6 +18,7 @@
 package com.twitter.sdk.android.core.models;
 
 import com.google.gson.Gson;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -36,8 +37,8 @@
             + "    ],\n"
             + "    \"type\":\"Point\"\n"
             + "}\n";
-    private static final Double TEST_COORDINATES_LONGITUDE = Double.valueOf(-75.14310264);
-    private static final Double TEST_COORDINATES_LATITUDE = Double.valueOf(40.05701649);
+    private static final Double TEST_COORDINATES_LONGITUDE = -75.14310264;
+    private static final Double TEST_COORDINATES_LATITUDE = 40.05701649;
     private static final String TEST_TYPE = "Point";
 
     private Gson gson;
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java
index 08197f05..3b67c855 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeListAdapterTest.java
@@ -65,7 +65,7 @@ public void testDeserialization_emptyListModel1() {
     public void testDeserialization_validListModel1() {
         final Model1 model = gson.fromJson(TEST_JSON_LIST_VALUES, Model1.class);
         try {
-            model.listOfIntegers.add(Integer.valueOf(TEST_ANY_NUMBER));
+            model.listOfIntegers.add(TEST_ANY_NUMBER);
         } catch (Exception e) {
             assertTrue(e instanceof UnsupportedOperationException);
         }
@@ -87,7 +87,7 @@ public void testDeserialization_emptyList() {
     public void testDeserialization_validListModel2() {
         final Model2 model = gson.fromJson(TEST_JSON_LIST_VALUES, Model2.class);
         try {
-            model.listOfLongs.add(Long.valueOf(TEST_ANY_NUMBER));
+            model.listOfLongs.add((long) TEST_ANY_NUMBER);
         } catch (Exception e) {
             assertTrue(e instanceof UnsupportedOperationException);
         }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java
index e9b00bd7..e7b4fd7c 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SafeMapAdapterTest.java
@@ -77,7 +77,7 @@ public void testDeserialization_emptyList() {
     public void testDeserialization_validMapModel2() {
         final Model2 model = gson.fromJson(TEST_JSON_MAP_NUMBER_VALUES, Model2.class);
         try {
-            model.stringLongMap.put(TEST_ANY_STRING_KEY, Long.valueOf(TEST_ANY_NUMBER));
+            model.stringLongMap.put(TEST_ANY_STRING_KEY, (long) TEST_ANY_NUMBER);
         } catch (Exception e) {
             assertTrue(e instanceof UnsupportedOperationException);
         }
diff --git a/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRenderer.java b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRenderer.java
index dae7d110..6386c032 100644
--- a/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRenderer.java
+++ b/twitter-mopub/src/main/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRenderer.java
@@ -18,6 +18,7 @@
 package com.twitter.sdk.android.mopub;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -40,18 +41,19 @@ public TwitterStaticNativeAdRenderer(int styleResId) {
         this.styleResId = styleResId;
     }
 
+    @NonNull
     @Override
-    public View createAdView(final Context context, final ViewGroup parent) {
+    public View createAdView(@NonNull final Context context, final ViewGroup parent) {
         return new TwitterStaticNativeAd(context, null, styleResId);
     }
 
     @Override
-    public void renderAdView(final View view, final StaticNativeAd staticNativeAd) {
+    public void renderAdView(@NonNull final View view, @NonNull final StaticNativeAd staticNativeAd) {
         update((TwitterStaticNativeAd) view, staticNativeAd);
     }
 
     @Override
-    public boolean supports(final BaseNativeAd nativeAd) {
+    public boolean supports(@NonNull final BaseNativeAd nativeAd) {
         return nativeAd instanceof StaticNativeAd;
     }
 
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
index ff3c7102..30b0182b 100644
--- a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdRendererTest.java
@@ -23,12 +23,14 @@
 import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.TextView;
+
 import com.mopub.nativeads.BaseNativeAd;
 import com.mopub.nativeads.StaticNativeAd;
 import com.mopub.network.MaxWidthImageLoader;
 import com.mopub.network.Networking;
 import com.mopub.volley.toolbox.ImageLoader;
 import com.twitter.sdk.android.mopub.internal.RoundedImageView;
+
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -41,9 +43,13 @@
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.doReturn;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
 public class TwitterStaticNativeAdRendererTest {
diff --git a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java
index 9b822acd..fe926ea6 100644
--- a/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java
+++ b/twitter-mopub/src/test/java/com/twitter/sdk/android/mopub/TwitterStaticNativeAdTest.java
@@ -19,6 +19,7 @@
 
 import android.test.AndroidTestCase;
 
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -42,11 +43,11 @@ public void testStyleAttrsForDefaultTheme() {
         final int cardBorderColor =
                 nativeAd.getResources().getColor(R.color.tw__ad_light_card_border_color);
 
-        assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor);
-        assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor);
-        assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor);
-        assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor);
-        assertEquals(cardBorderColor, nativeAd.cardBorderColor);
+        Assert.assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor);
+        Assert.assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor);
+        Assert.assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor);
+        Assert.assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor);
+        Assert.assertEquals(cardBorderColor, nativeAd.cardBorderColor);
     }
 
     @Test
@@ -66,10 +67,10 @@ public void testStyleAttrsForDarkTheme() {
         final int cardBorderColor =
                 nativeAd.getResources().getColor(R.color.tw__ad_dark_card_border_color);
 
-        assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor);
-        assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor);
-        assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor);
-        assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor);
-        assertEquals(cardBorderColor, nativeAd.cardBorderColor);
+        Assert.assertEquals(expectedContainerBgColor, nativeAd.containerBackgroundColor);
+        Assert.assertEquals(expectedCardBgColor, nativeAd.cardBackgroundColor);
+        Assert.assertEquals(expectedPrimaryTextColor, nativeAd.primaryTextColor);
+        Assert.assertEquals(ctaBackgroundColor, nativeAd.ctaBackgroundColor);
+        Assert.assertEquals(cardBorderColor, nativeAd.cardBorderColor);
     }
 }
