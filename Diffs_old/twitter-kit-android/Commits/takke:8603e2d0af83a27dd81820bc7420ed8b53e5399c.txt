diff --git a/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java b/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java
index a78a4ee4..7e3d933f 100644
--- a/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java
+++ b/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterCoreTestUtils.java
@@ -17,20 +17,18 @@
 
 package com.twitter.sdk.android.core;
 
-import java.util.concurrent.ConcurrentHashMap;
-
 public final class TwitterCoreTestUtils {
 
     private TwitterCoreTestUtils() {}
 
-    public static TwitterCore createTwitterCore(TwitterAuthConfig authConfig,
-            ConcurrentHashMap<Session, TwitterApiClient> clients, TwitterApiClient guestClient) {
-
-        TwitterCore.instance = new TwitterCore(authConfig, clients, guestClient);
-        return TwitterCore.instance;
-    }
+//    public static TwitterCore createTwitterCore(TwitterAuthConfig authConfig,
+//            ConcurrentHashMap<Session, TwitterApiClient> clients, TwitterApiClient guestClient) {
+//
+//        TwitterCore.instance = new TwitterCore(authConfig, clients, guestClient);
+//        return TwitterCore.instance;
+//    }
 
     public static void resetTwitterCore() {
-        TwitterCore.instance = null;
+//        TwitterCore.instance = null;
     }
 }
diff --git a/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterTestUtils.java b/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterTestUtils.java
index 408984ad..598d4ad6 100644
--- a/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterTestUtils.java
+++ b/twitter-core/src/debug/java/com/twitter/sdk/android/core/TwitterTestUtils.java
@@ -19,6 +19,6 @@
 
 public class TwitterTestUtils {
     public static void resetTwitter() {
-        Twitter.instance = null;
+//        Twitter.instance = null;
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java
deleted file mode 100644
index 8f83c7fa..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Base class for authentication tokens.
- */
-public abstract class AuthToken {
-
-    /**
-     * Unit time or epoch time when the token was created (always in UTC). The
-     * time may be 0 if the token is deserialized from data missing the field.
-     */
-    @SerializedName("created_at")
-    protected final long createdAt;
-
-    public AuthToken() {
-        this(System.currentTimeMillis());
-    }
-
-    protected AuthToken(long createdAt) {
-        this.createdAt = createdAt;
-    }
-
-    /**
-     * Determines whether a token is known to have expired.
-     * @return true if the token is known to have expired, otherwise false to indicate the token
-     * may or may not be considered expired by the server.
-     */
-    public abstract boolean isExpired();
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthTokenAdapter.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthTokenAdapter.java
deleted file mode 100644
index 2dde8693..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthTokenAdapter.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.google.gson.Gson;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonPrimitive;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-
-import java.lang.reflect.Type;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * Provides custom serialization and deserialization for classes that hold any type of
- * {@link com.twitter.sdk.android.core.AuthToken}.
- */
-public class AuthTokenAdapter implements JsonSerializer<AuthToken>, JsonDeserializer<AuthToken> {
-
-    private static final String AUTH_TYPE = "auth_type";
-    private static final String AUTH_TOKEN = "auth_token";
-
-    static final Map<String, Class<? extends AuthToken>> authTypeRegistry
-            = new HashMap<>();
-    static {
-        authTypeRegistry.put("oauth1a", TwitterAuthToken.class);
-        authTypeRegistry.put("oauth2", OAuth2Token.class);
-        authTypeRegistry.put("guest", GuestAuthToken.class);
-    }
-
-    private final Gson gson;
-
-    public AuthTokenAdapter() {
-        this.gson = new Gson();
-    }
-
-    @Override
-    public JsonElement serialize(AuthToken src, Type typeOfSrc, JsonSerializationContext context) {
-        final JsonObject jsonObject = new JsonObject();
-        jsonObject.addProperty(AUTH_TYPE, getAuthTypeString(src.getClass()));
-        jsonObject.add(AUTH_TOKEN, gson.toJsonTree(src));
-        return jsonObject;
-    }
-
-    @Override
-    public AuthToken deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
-            throws JsonParseException {
-        final JsonObject jsonObject =  json.getAsJsonObject();
-        final JsonPrimitive jsonAuthType = jsonObject.getAsJsonPrimitive(AUTH_TYPE);
-        final String authType = jsonAuthType.getAsString();
-        final JsonElement jsonAuthToken = jsonObject.get(AUTH_TOKEN);
-        return gson.fromJson(jsonAuthToken, authTypeRegistry.get(authType));
-    }
-
-    static String getAuthTypeString(Class<? extends AuthToken> authTokenClass) {
-        for (Map.Entry<String, Class<? extends AuthToken>> entry : authTypeRegistry.entrySet()) {
-            if (entry.getValue().equals(authTokenClass)) {
-                return entry.getKey();
-            }
-        }
-        return "";
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.java
deleted file mode 100644
index b9510a49..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import retrofit2.Call;
-import retrofit2.Response;
-
-/**
- * Communicates responses from a server or offline requests. One and only one method will be
- * invoked in response to a given request.
- * <p>
- * Callback methods are executed using the {@link retrofit2.Retrofit} callback executor. When none is
- * specified, the following defaults are used:
- * <ul>
- * <li>Callbacks are executed on the application's main (UI) thread.</li>
- * </ul>
- *
- * @param <T> expected response type
- */
-public abstract class Callback<T> implements retrofit2.Callback<T> {
-
-    @Override
-    public final void onResponse(Call<T> call, Response<T> response){
-        if (response.isSuccessful()) {
-            success(new Result<>(response.body(), response));
-        } else {
-            failure(new TwitterApiException(response));
-        }
-    }
-
-    @Override
-    public final void onFailure(Call<T> call, Throwable t) {
-        failure(new TwitterException("Request Failure", t));
-    }
-
-    /**
-     * Called when call completes successfully.
-     *
-     * @param result the parsed result.
-     */
-    public abstract void success(Result<T> result);
-
-    /**
-     * Unsuccessful call due to network failure, non-2XX status code, or unexpected
-     * exception.
-     */
-    public abstract void failure(TwitterException exception);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStore.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.kt
similarity index 54%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStore.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.kt
index 1106055c..5e64dc5a 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStore.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Callback.kt
@@ -15,29 +15,26 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal.persistence;
+package com.twitter.sdk.android.core
 
-import android.content.SharedPreferences;
-
-public interface PreferenceStore {
-
-    /**
-     *
-     * @return {@link android.content.SharedPreferences}
-     */
-    SharedPreferences get();
+/**
+ * Communicates responses from a server or offline requests. One and only one method will be
+ * invoked in response to a given request.
+ *
+ * @param <T> expected response type</T>
+ */
+abstract class Callback<T> {
 
     /**
+     * Called when call completes successfully.
      *
-     * @return {@link android.content.SharedPreferences.Editor}
+     * @param result the parsed result.
      */
-    SharedPreferences.Editor edit();
+    abstract fun success(result: T)
 
     /**
-     *
-     * @param editor to save
-     * @return successful save
+     * Unsuccessful call due to network failure, non-2XX status code, or unexpected
+     * exception.
      */
-    boolean save(SharedPreferences.Editor editor);
-
+    abstract fun failure(exception: TwitterException)
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.java
deleted file mode 100644
index dd4a49d9..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.util.Log;
-
-/**
- * Default logger that logs to android.util.Log.
- */
-public class DefaultLogger implements Logger {
-    private int logLevel;
-
-    public DefaultLogger(int logLevel) {
-        this.logLevel = logLevel;
-    }
-
-    public DefaultLogger() {
-        this.logLevel = Log.INFO;
-    }
-
-    @Override
-    public boolean isLoggable(String tag, int level) {
-        return logLevel <= level;
-    }
-
-    @Override
-    public int getLogLevel() {
-        return logLevel;
-    }
-
-    @Override
-    public void setLogLevel(int logLevel) {
-        this.logLevel = logLevel;
-    }
-
-    @Override
-    public void d(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.DEBUG)) {
-            Log.d(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void v(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.VERBOSE)) {
-            Log.v(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void i(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.INFO)) {
-            Log.i(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void w(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.WARN)) {
-            Log.w(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void e(String tag, String text, Throwable throwable) {
-        if (isLoggable(tag, Log.ERROR)) {
-            Log.e(tag, text, throwable);
-        }
-    }
-
-    @Override
-    public void d(String tag, String text) {
-        d(tag, text, null);
-    }
-
-    @Override
-    public void v(String tag, String text) {
-        v(tag, text, null);
-    }
-
-    @Override
-    public void i(String tag, String text) {
-        i(tag, text, null);
-    }
-
-    @Override
-    public void w(String tag, String text) {
-        w(tag, text, null);
-    }
-
-    @Override
-    public void e(String tag, String text) {
-        e(tag, text, null);
-    }
-
-    @Override
-    public void log(int priority, String tag, String msg) {
-        log(priority, tag, msg, false);
-    }
-
-    @Override
-    public void log(int priority, String tag, String msg, boolean forceLog) {
-        if (forceLog || isLoggable(tag, priority)) {
-            Log.println(priority, tag, msg);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt
new file mode 100644
index 00000000..13c1017a
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt
@@ -0,0 +1,99 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+import android.util.Log
+
+/**
+ * Default logger that logs to android.util.Log.
+ */
+class DefaultLogger : Logger {
+    override var logLevel: Int = 0
+
+    constructor(logLevel: Int) {
+        this.logLevel = logLevel
+    }
+
+    constructor() {
+        this.logLevel = Log.INFO
+    }
+
+    override fun isLoggable(tag: String, level: Int): Boolean {
+        return logLevel <= level
+    }
+
+    override fun d(tag: String, text: String?, throwable: Throwable?) {
+        if (isLoggable(tag, Log.DEBUG)) {
+            Log.d(tag, text, throwable)
+        }
+    }
+
+    override fun v(tag: String, text: String?, throwable: Throwable?) {
+        if (isLoggable(tag, Log.VERBOSE)) {
+            Log.v(tag, text, throwable)
+        }
+    }
+
+    override fun i(tag: String, text: String?, throwable: Throwable?) {
+        if (isLoggable(tag, Log.INFO)) {
+            Log.i(tag, text, throwable)
+        }
+    }
+
+    override fun w(tag: String, text: String?, throwable: Throwable?) {
+        if (isLoggable(tag, Log.WARN)) {
+            Log.w(tag, text, throwable)
+        }
+    }
+
+    override fun e(tag: String, text: String?, throwable: Throwable?) {
+        if (isLoggable(tag, Log.ERROR)) {
+            Log.e(tag, text, throwable)
+        }
+    }
+
+    override fun d(tag: String, text: String?) {
+        d(tag, text, null)
+    }
+
+    override fun v(tag: String, text: String?) {
+        v(tag, text, null)
+    }
+
+    override fun i(tag: String, text: String?) {
+        i(tag, text, null)
+    }
+
+    override fun w(tag: String, text: String?) {
+        w(tag, text, null)
+    }
+
+    override fun e(tag: String, text: String?) {
+        e(tag, text, null)
+    }
+
+    override fun log(priority: Int, tag: String, msg: String) {
+        log(priority, tag, msg, false)
+    }
+
+    override fun log(priority: Int, tag: String, msg: String, forceLog: Boolean) {
+        if (forceLog || isLoggable(tag, priority)) {
+            Log.println(priority, tag, msg)
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSession.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSession.java
deleted file mode 100644
index bee3a160..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSession.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.text.TextUtils;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.persistence.SerializationStrategy;
-
-public class GuestSession extends Session<GuestAuthToken> {
-    public static final long LOGGED_OUT_USER_ID = 0L;
-
-    /**
-     * @param authToken Auth token
-     *
-     * @throws java.lang.IllegalArgumentException if token argument is null
-     */
-    public GuestSession(GuestAuthToken authToken) {
-        super(authToken, LOGGED_OUT_USER_ID);
-    }
-
-    public static class Serializer implements SerializationStrategy<GuestSession> {
-
-        private final Gson gson;
-
-        public Serializer() {
-            this.gson = new GsonBuilder()
-                    .registerTypeAdapter(GuestAuthToken.class, new AuthTokenAdapter())
-                    .create();
-        }
-
-        @Override
-        public String serialize(GuestSession session) {
-            if (session != null && session.getAuthToken() != null) {
-                try {
-                    return gson.toJson(session);
-                } catch (Exception e) {
-                    Twitter.getLogger().d(TwitterCore.TAG,
-                            "Failed to serialize session " + e.getMessage());
-                }
-            }
-            return "";
-        }
-
-        @Override
-        public GuestSession deserialize(String serializedSession) {
-            if (!TextUtils.isEmpty(serializedSession)) {
-                try {
-                    return gson.fromJson(serializedSession, GuestSession.class);
-                } catch (Exception e) {
-                    Twitter.getLogger().d(TwitterCore.TAG,
-                            "Failed to deserialize session " + e.getMessage());
-                }
-            }
-            return null;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java
deleted file mode 100644
index 8694e2f8..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/GuestSessionProvider.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;
-
-import java.util.concurrent.CountDownLatch;
-
-public class GuestSessionProvider {
-    private final OAuth2Service oAuth2Service;
-    private final SessionManager<GuestSession> sessionManager;
-
-    public GuestSessionProvider(OAuth2Service oAuth2Service,
-            SessionManager<GuestSession> sessionManager) {
-        this.oAuth2Service = oAuth2Service;
-        this.sessionManager = sessionManager;
-    }
-
-    public synchronized GuestSession getCurrentSession() {
-        final GuestSession session = sessionManager.getActiveSession();
-        if (isSessionValid(session)) {
-            return session;
-        }
-
-        refreshToken();
-
-        return sessionManager.getActiveSession();
-    }
-
-    public synchronized GuestSession refreshCurrentSession(GuestSession expiredSession) {
-        final GuestSession session = sessionManager.getActiveSession();
-        if (expiredSession != null && expiredSession.equals(session)) {
-            refreshToken();
-        }
-
-        return sessionManager.getActiveSession();
-    }
-
-    void refreshToken() {
-        Twitter.getLogger().d("GuestSessionProvider", "Refreshing expired guest session.");
-        final CountDownLatch latch = new CountDownLatch(1);
-        oAuth2Service.requestGuestAuthToken(new Callback<GuestAuthToken>() {
-            @Override
-            public void success(Result<GuestAuthToken> result) {
-                sessionManager.setActiveSession(new GuestSession(result.data));
-                latch.countDown();
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                sessionManager.clearSession(GuestSession.LOGGED_OUT_USER_ID);
-                latch.countDown();
-            }
-        });
-
-        try {
-            latch.await();
-        } catch (InterruptedException e) {
-            sessionManager.clearSession(GuestSession.LOGGED_OUT_USER_ID);
-        }
-    }
-
-    boolean isSessionValid(GuestSession session) {
-        return session != null
-                && session.getAuthToken() != null
-                && !session.getAuthToken().isExpired();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.java
deleted file mode 100644
index bc257018..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-
-import java.util.List;
-
-public class IntentUtils {
-    /*
-     * Determine if activity is available to handle provided intent.
-     * @param context The context through which {@link android.content.pm.PackageManager} can be accessed.
-     * @param intent The intent of the activity to start.
-     * @returns true if activity is found, otherwise false.
-     */
-    public static boolean isActivityAvailable(Context context, Intent intent) {
-        final PackageManager packageManager = context.getPackageManager();
-        final List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
-        return !activities.isEmpty();
-    }
-
-    /*
-     * Determine if activity is available to handle provided intent before calling startActivity.
-     * @param context The context through which activity can be started.
-     * @param intent The intent of the activity to start.
-     * @returns true if activity is found and startActivity called, otherwise false.
-     */
-    public static boolean safeStartActivity(Context context, Intent intent) {
-        if (isActivityAvailable(context, intent)) {
-            context.startActivity(intent);
-            return true;
-        }
-
-        return false;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.kt
new file mode 100644
index 00000000..c38b9844
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.kt
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+import android.content.Context
+import android.content.Intent
+
+object IntentUtils {
+
+    /**
+     * Determine if activity is available to handle provided intent.
+     *
+     * @param context The context through which {@link android.content.pm.PackageManager} can be accessed.
+     * @param intent The intent of the activity to start.
+     * @returns true if activity is found, otherwise false.
+     */
+    fun isActivityAvailable(context: Context, intent: Intent): Boolean {
+        val packageManager = context.packageManager
+        val activities = packageManager.queryIntentActivities(intent, 0)
+        return activities.isNotEmpty()
+    }
+
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.java
deleted file mode 100644
index ca0467c1..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-/**
- * Interface to support custom logger.
- */
-public interface Logger {
-
-    boolean isLoggable(String tag, int level);
-    int getLogLevel();
-    void setLogLevel(int logLevel);
-
-    void d(String tag, String text, Throwable throwable);
-    void v(String tag, String text, Throwable throwable);
-    void i(String tag, String text, Throwable throwable);
-    void w(String tag, String text, Throwable throwable);
-    void e(String tag, String text, Throwable throwable);
-
-    void d(String tag, String text);
-    void v(String tag, String text);
-    void i(String tag, String text);
-    void w(String tag, String text);
-    void e(String tag, String text);
-
-    void log(int priority, String tag, String msg);
-    void log(int priority, String tag, String msg, boolean forceLog);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.kt
new file mode 100644
index 00000000..993b4052
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.kt
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+/**
+ * Interface to support custom logger.
+ */
+interface Logger {
+    var logLevel: Int
+
+    fun isLoggable(tag: String, level: Int): Boolean
+
+    fun d(tag: String, text: String?, throwable: Throwable?)
+    fun v(tag: String, text: String?, throwable: Throwable?)
+    fun i(tag: String, text: String?, throwable: Throwable?)
+    fun w(tag: String, text: String?, throwable: Throwable?)
+    fun e(tag: String, text: String?, throwable: Throwable?)
+
+    fun d(tag: String, text: String?)
+    fun v(tag: String, text: String?)
+    fun i(tag: String, text: String?)
+    fun w(tag: String, text: String?)
+    fun e(tag: String, text: String?)
+
+    fun log(priority: Int, tag: String, msg: String)
+    fun log(priority: Int, tag: String, msg: String, forceLog: Boolean)
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthResult.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthResult.kt
new file mode 100644
index 00000000..062b5f61
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/OAuthResult.kt
@@ -0,0 +1,8 @@
+package com.twitter.sdk.android.core
+
+data class OAuthResult(
+        val token: String,
+        val tokenSecret: String,
+        val userId: Long,
+        val screenName: String
+)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/PersistedSessionManager.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/PersistedSessionManager.java
deleted file mode 100644
index 50a19798..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/PersistedSessionManager.java
+++ /dev/null
@@ -1,210 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStore;
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreStrategy;
-import com.twitter.sdk.android.core.internal.persistence.SerializationStrategy;
-
-import java.util.Collections;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicReference;
-
-/**
- * Implementation of {@link com.twitter.sdk.android.core.SessionManager} that persists sessions.
- */
-public class PersistedSessionManager<T extends Session> implements SessionManager<T> {
-
-    private static final int NUM_SESSIONS = 1;
-
-    private final PreferenceStore preferenceStore;
-    private final SerializationStrategy<T> serializer;
-    private final ConcurrentHashMap<Long, T> sessionMap;
-    private final ConcurrentHashMap<Long, PreferenceStoreStrategy<T>> storageMap;
-    private final PreferenceStoreStrategy<T> activeSessionStorage;
-    private final AtomicReference<T> activeSessionRef;
-    private final String prefKeySession;
-    private volatile boolean restorePending = true;
-
-    public PersistedSessionManager(PreferenceStore preferenceStore,
-            SerializationStrategy<T> serializer, String prefKeyActiveSession,
-            String prefKeySession) {
-        this(preferenceStore, serializer, new ConcurrentHashMap<>(NUM_SESSIONS),
-                new ConcurrentHashMap<>(NUM_SESSIONS),
-                new PreferenceStoreStrategy<>(preferenceStore, serializer,
-                        prefKeyActiveSession), prefKeySession);
-    }
-
-    PersistedSessionManager(PreferenceStore preferenceStore,
-            SerializationStrategy<T> serializer, ConcurrentHashMap<Long, T> sessionMap,
-            ConcurrentHashMap<Long, PreferenceStoreStrategy<T>> storageMap,
-            PreferenceStoreStrategy<T> activesSessionStorage,
-            String prefKeySession) {
-        this.preferenceStore = preferenceStore;
-        this.serializer = serializer;
-        this.sessionMap = sessionMap;
-        this.storageMap = storageMap;
-        this.activeSessionStorage = activesSessionStorage;
-        this.activeSessionRef = new AtomicReference<>();
-        this.prefKeySession = prefKeySession;
-    }
-
-    void restoreAllSessionsIfNecessary() {
-        // Only restore once
-        if (restorePending) {
-            restoreAllSessions();
-        }
-    }
-
-    private synchronized void restoreAllSessions() {
-        if (restorePending) {
-            restoreActiveSession();
-            restoreSessions();
-            restorePending = false;
-        }
-    }
-
-    private void restoreSessions() {
-        T session;
-
-        final Map<String, ?> preferences = preferenceStore.get().getAll();
-        for (Map.Entry<String, ?> entry : preferences.entrySet()) {
-            if (isSessionPreferenceKey(entry.getKey())) {
-                session = serializer.deserialize((String) entry.getValue());
-                if (session != null) {
-                    internalSetSession(session.getId(), session, false);
-                }
-            }
-        }
-
-    }
-
-    private void restoreActiveSession() {
-        final T session = activeSessionStorage.restore();
-        if (session != null) {
-            internalSetSession(session.getId(), session, false);
-        }
-    }
-
-    boolean isSessionPreferenceKey(String preferenceKey) {
-        return preferenceKey.startsWith(prefKeySession);
-    }
-
-    /**
-     * @return the active session, may return {@code null} if there's no session.
-     */
-    @Override
-    public T getActiveSession() {
-        restoreAllSessionsIfNecessary();
-        return activeSessionRef.get();
-    }
-
-    /**
-     * Sets the active session.
-     */
-    @Override
-    public void setActiveSession(T session) {
-        if (session == null) {
-            throw new IllegalArgumentException("Session must not be null!");
-        }
-        restoreAllSessionsIfNecessary();
-        internalSetSession(session.getId(), session, true);
-    }
-
-    /**
-     * Clears the active session.
-     */
-    @Override
-    public void clearActiveSession() {
-        restoreAllSessionsIfNecessary();
-        if (activeSessionRef.get() != null) {
-            clearSession(activeSessionRef.get().getId());
-        }
-    }
-
-    /**
-     * @return the session associated with the id, may return {@code null} if there's no session.
-     */
-    @Override
-    public T getSession(long id) {
-        restoreAllSessionsIfNecessary();
-        return sessionMap.get(id);
-    }
-
-    /**
-     * Sets the session to associate with the id. If there is no active session, this session also
-     * becomes the active session.
-     */
-    @Override
-    public void setSession(long id, T session) {
-        if (session == null) {
-            throw new IllegalArgumentException("Session must not be null!");
-        }
-        restoreAllSessionsIfNecessary();
-        internalSetSession(id, session, false);
-    }
-
-    @Override
-    public Map<Long, T> getSessionMap() {
-        restoreAllSessionsIfNecessary();
-        return Collections.unmodifiableMap(sessionMap);
-    }
-
-    private void internalSetSession(long id, T session, boolean forceUpdate) {
-        sessionMap.put(id, session);
-        PreferenceStoreStrategy<T> storage = storageMap.get(id);
-        if (storage == null) {
-            storage = new PreferenceStoreStrategy<>(preferenceStore, serializer, getPrefKey(id));
-            storageMap.putIfAbsent(id, storage);
-        }
-        storage.save(session);
-
-        final T activeSession = activeSessionRef.get();
-        if (activeSession == null || activeSession.getId() == id || forceUpdate) {
-            synchronized (this) {
-                activeSessionRef.compareAndSet(activeSession, session);
-                activeSessionStorage.save(session);
-            }
-        }
-    }
-
-    String getPrefKey(long id) {
-        return prefKeySession + "_" + id;
-    }
-
-    /**
-     * Clears the session associated with the id.
-     */
-    @Override
-    public void clearSession(long id) {
-        restoreAllSessionsIfNecessary();
-        if (activeSessionRef.get() != null && activeSessionRef.get().getId() == id) {
-            synchronized (this) {
-                activeSessionRef.set(null);
-                activeSessionStorage.clear();
-            }
-        }
-
-        sessionMap.remove(id);
-        final PreferenceStoreStrategy<T> storage = storageMap.remove(id);
-        if (storage != null) {
-            storage.clear();
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java
deleted file mode 100644
index fb2caaa7..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import retrofit2.Response;
-
-/**
- * Encapsulates parsed result for delivery.
- *
- * @param <T> Parsed type, available in the {@link Result#data}
- */
-public class Result<T> {
-    public final T data;
-    public final Response response;
-
-    public Result(T data, Response response) {
-        this.data = data;
-        this.response = response;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java
deleted file mode 100644
index 9935bbd6..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Base class for session associated with {@link com.twitter.sdk.android.core.AuthToken}.
- */
-public class Session<T extends AuthToken> {
-    @SerializedName("auth_token")
-    private final T authToken;
-
-    @SerializedName("id")
-    private final long id;
-
-    public Session(T authToken, long id) {
-        if (authToken == null) {
-            throw new IllegalArgumentException("AuthToken must not be null.");
-        }
-
-        this.authToken = authToken;
-        this.id = id;
-    }
-
-    public T getAuthToken() {
-        return authToken;
-    }
-
-    public long getId() {
-        return id;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        final Session session = (Session) o;
-
-        if (id != session.id) return false;
-        return authToken != null ? authToken.equals(session.authToken) : session.authToken == null;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = authToken != null ? authToken.hashCode() : 0;
-        result = 31 * result + (int) (id ^ (id >>> 32));
-        return result;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/SessionManager.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/SessionManager.java
deleted file mode 100644
index a0300df3..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/SessionManager.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import java.util.Map;
-
-/**
- * SessionManager for managing sessions.
- */
-public interface SessionManager<T extends Session> {
-
-    /**
-     * @return the active session, restoring saved session if available
-     */
-    T getActiveSession();
-
-    /**
-     * Sets the active session.
-     */
-    void setActiveSession(T session);
-
-    /**
-     * Clears the active session.
-     */
-    void clearActiveSession();
-
-    /**
-     * @return the session associated with the id.
-     */
-    T getSession(long id);
-
-    /**
-     * Sets the session to associate with the id. If there is no active session, this session also
-     * becomes the active session.
-     */
-    void setSession(long id, T session);
-
-    /**
-     * Clears the session associated with the id.
-     */
-    void clearSession(long id);
-
-    /**
-     * @return the session map containing all managed sessions
-     */
-    Map<Long, T> getSessionMap();
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Twitter.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Twitter.java
deleted file mode 100644
index 1b84d5f7..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Twitter.java
+++ /dev/null
@@ -1,202 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-
-import com.twitter.sdk.android.core.internal.ActivityLifecycleManager;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-import com.twitter.sdk.android.core.internal.ExecutorUtils;
-
-import java.io.File;
-import java.util.concurrent.ExecutorService;
-
-/**
- *  The {@link Twitter} class stores common configuration and state for TwitterKit SDK.
- */
-public class Twitter {
-    public static final String TAG = "Twitter";
-    private static final String CONSUMER_KEY = "com.twitter.sdk.android.CONSUMER_KEY";
-    private static final String CONSUMER_SECRET = "com.twitter.sdk.android.CONSUMER_SECRET";
-    private static final String NOT_INITIALIZED_MESSAGE = "Must initialize Twitter before using getInstance()";
-    static final Logger DEFAULT_LOGGER = new DefaultLogger();
-
-    @SuppressLint("StaticFieldLeak")
-    static volatile Twitter instance;
-
-    private final Context context;
-    private final ExecutorService executorService;
-    private final TwitterAuthConfig twitterAuthConfig;
-    private final ActivityLifecycleManager lifecycleManager;
-    private final Logger logger;
-    private final boolean debug;
-
-    private Twitter(TwitterConfig config) {
-        context = config.context;
-        lifecycleManager = new ActivityLifecycleManager(context);
-
-        if (config.twitterAuthConfig == null) {
-            final String key = CommonUtils.getStringResourceValue(context, CONSUMER_KEY, "");
-            final String secret = CommonUtils.getStringResourceValue(context, CONSUMER_SECRET, "");
-            twitterAuthConfig = new TwitterAuthConfig(key, secret);
-        } else {
-            twitterAuthConfig = config.twitterAuthConfig;
-        }
-
-        if (config.executorService == null) {
-            executorService = ExecutorUtils.buildThreadPoolExecutorService("twitter-worker");
-        } else {
-            executorService = config.executorService;
-        }
-
-        if (config.logger == null) {
-            logger = DEFAULT_LOGGER;
-        } else {
-            logger = config.logger;
-        }
-
-        if (config.debug == null) {
-            debug = false;
-        } else {
-            debug = config.debug;
-        }
-    }
-
-    /**
-     * Entry point to initialize the TwitterKit SDK.
-     * <p>
-     * Only the Application context is retained.
-     * See http://developer.android.com/resources/articles/avoiding-memory-leaks.html
-     * <p>
-     * Should be called from {@code OnCreate()} method of custom {@code Application} class.
-     * <pre>
-     * public class SampleApplication extends Application {
-     *   &#64;Override
-     *   public void onCreate() {
-     *     Twitter.initialize(this);
-     *   }
-     * }
-     * </pre>
-     *
-     * @param context Android context used for initialization
-     */
-    public static void initialize(Context context) {
-        final TwitterConfig config = new TwitterConfig
-                .Builder(context)
-                .build();
-        createTwitter(config);
-    }
-
-    /**
-     * Entry point to initialize the TwitterKit SDK.
-     * <p>
-     * Only the Application context is retained.
-     * See http://developer.android.com/resources/articles/avoiding-memory-leaks.html
-     * <p>
-     * Should be called from {@code OnCreate()} method of custom {@code Application} class.
-     * <pre>
-     * public class SampleApplication extends Application {
-     *   &#64;Override
-     *   public void onCreate() {
-     *     final TwitterConfig config = new TwitterConfig.Builder(this).build();
-     *     Twitter.initialize(config);
-     *   }
-     * }
-     * </pre>
-     *
-     * @param config {@link TwitterConfig} user for initialization
-     */
-    public static void initialize(TwitterConfig config) {
-        createTwitter(config);
-    }
-
-    static synchronized Twitter createTwitter(TwitterConfig config) {
-        if (instance == null) {
-            instance = new Twitter(config);
-            return instance;
-        }
-
-        return instance;
-    }
-
-    static void checkInitialized() {
-        if (instance == null) {
-            throw new IllegalStateException(NOT_INITIALIZED_MESSAGE);
-        }
-    }
-
-    /**
-     * @return Single instance of the {@link Twitter}.
-     */
-    public static Twitter getInstance() {
-        checkInitialized();
-        return instance;
-    }
-
-    /**
-     * @param component the component name
-     * @return A {@link TwitterContext} for specified component.
-     */
-    public Context getContext(String component) {
-        return new TwitterContext(context, component, ".TwitterKit" + File.separator + component);
-    }
-
-    /**
-     * @return the global {@link TwitterAuthConfig}.
-     */
-    public TwitterAuthConfig getTwitterAuthConfig() {
-        return twitterAuthConfig;
-    }
-
-    /**
-     * @return the global {@link ExecutorService}.
-     */
-    public ExecutorService getExecutorService() {
-        return executorService;
-    }
-
-    /**
-     * @return the global {@link ActivityLifecycleManager}.
-     */
-    public ActivityLifecycleManager getActivityLifecycleManager() {
-        return lifecycleManager;
-    }
-
-    /**
-     * @return the global value for debug mode.
-     */
-    public static boolean isDebug() {
-        if (instance == null) {
-            return false;
-        }
-
-        return instance.debug;
-    }
-
-    /**
-     * @return the global {@link Logger}.
-     */
-    public static Logger getLogger() {
-        if (instance == null) {
-            return DEFAULT_LOGGER;
-        }
-
-        return instance.logger;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Twitter.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/Twitter.kt
new file mode 100644
index 00000000..61595b99
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Twitter.kt
@@ -0,0 +1,123 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+import android.annotation.SuppressLint
+import android.content.Context
+import com.twitter.sdk.android.core.internal.CommonUtils
+
+/**
+ * The [Twitter] class stores common configuration and state for TwitterKit SDK.
+ */
+class Twitter private constructor(config: TwitterConfig) {
+
+    private val context: Context = config.context
+
+    /**
+     * @return the global [TwitterAuthConfig].
+     */
+    val twitterAuthConfig: TwitterAuthConfig
+
+    private val logger: Logger = config.logger ?: DEFAULT_LOGGER
+
+    private val debug: Boolean = config.debug ?: false
+
+    init {
+        twitterAuthConfig = if (config.twitterAuthConfig == null) {
+            val key = CommonUtils.getStringResourceValue(context, CONSUMER_KEY, "")
+            val secret = CommonUtils.getStringResourceValue(context, CONSUMER_SECRET, "")
+            TwitterAuthConfig(key, secret)
+        } else {
+            config.twitterAuthConfig
+        }
+    }
+
+    companion object {
+        const val TAG = "Twitter"
+        private const val CONSUMER_KEY = "com.twitter.sdk.android.CONSUMER_KEY"
+        private const val CONSUMER_SECRET = "com.twitter.sdk.android.CONSUMER_SECRET"
+        private const val NOT_INITIALIZED_MESSAGE = "Must initialize Twitter before using getInstance()"
+        internal val DEFAULT_LOGGER: Logger = DefaultLogger()
+
+        @SuppressLint("StaticFieldLeak")
+        @Volatile
+        internal var instance: Twitter? = null
+
+        /**
+         * Entry point to initialize the TwitterKit SDK.
+         *
+         *
+         * Only the Application context is retained.
+         * See http://developer.android.com/resources/articles/avoiding-memory-leaks.html
+         *
+         *
+         * Should be called from `OnCreate()` method of custom `Application` class.
+         * <pre>
+         * public class SampleApplication extends Application {
+         *   &#64;Override
+         *   public void onCreate() {
+         *   final TwitterConfig config = new TwitterConfig.Builder(this).build();
+         *     Twitter.initialize(config);
+         *   }
+         * }
+         * </pre>
+         *
+         * @param config [TwitterConfig] user for initialization
+         */
+        fun initialize(config: TwitterConfig) {
+            createTwitter(config)
+        }
+
+        @Synchronized
+        internal fun createTwitter(config: TwitterConfig): Twitter? {
+            if (instance == null) {
+                instance = Twitter(config)
+                return instance
+            }
+
+            return instance
+        }
+
+        private fun checkInitialized() {
+            if (instance == null) {
+                throw IllegalStateException(NOT_INITIALIZED_MESSAGE)
+            }
+        }
+
+        /**
+         * @return Single instance of the [Twitter].
+         */
+        fun getInstance(): Twitter {
+            checkInitialized()
+            return instance!!
+        }
+
+        /**
+         * @return the global value for debug mode.
+         */
+        val isDebug: Boolean
+            get() = instance?.debug ?: false
+
+        /**
+         * @return the global [Logger].
+         */
+        fun getLogger(): Logger {
+            return instance?.logger ?: DEFAULT_LOGGER
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java
deleted file mode 100644
index 818d1360..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiClient.java
+++ /dev/null
@@ -1,135 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.internal.network.OkHttpClientHelper;
-import com.twitter.sdk.android.core.models.BindingValues;
-import com.twitter.sdk.android.core.models.BindingValuesAdapter;
-import com.twitter.sdk.android.core.models.SafeListAdapter;
-import com.twitter.sdk.android.core.models.SafeMapAdapter;
-import com.twitter.sdk.android.core.services.AccountService;
-
-import java.util.concurrent.ConcurrentHashMap;
-
-import okhttp3.OkHttpClient;
-import retrofit2.Retrofit;
-import retrofit2.converter.gson.GsonConverterFactory;
-
-/**
- * A class to allow authenticated access to Twitter API endpoints.
- * Can be extended to provided additional endpoints by extending and providing Retrofit API
- * interfaces to {@link com.twitter.sdk.android.core.TwitterApiClient#getService(Class)}
- */
-public class TwitterApiClient {
-    final ConcurrentHashMap<Class, Object> services;
-    final Retrofit retrofit;
-
-    /**
-     * Constructs Guest Session based TwitterApiClient.
-     */
-    public TwitterApiClient() {
-        this(OkHttpClientHelper.getOkHttpClient(
-                TwitterCore.getInstance().getGuestSessionProvider()), new TwitterApi());
-    }
-
-    /**
-     * Constructs Guest Session based TwitterApiClient, with custom http client.
-     *
-     * The custom http client can be constructed with {@link okhttp3.Interceptor}, and other
-     * optional params provided in {@link okhttp3.OkHttpClient}.
-     */
-    public TwitterApiClient(OkHttpClient client) {
-        this(OkHttpClientHelper.getCustomOkHttpClient(
-                client,
-                TwitterCore.getInstance().getGuestSessionProvider()),
-            new TwitterApi());
-    }
-
-    /**
-     * Constructs User Session based TwitterApiClient.
-     */
-    public TwitterApiClient(TwitterSession session) {
-        this(OkHttpClientHelper.getOkHttpClient(
-                session,
-                TwitterCore.getInstance().getAuthConfig()),
-            new TwitterApi());
-    }
-
-    /**
-     * Constructs User Session based TwitterApiClient, with custom http client.
-     *
-     * The custom http client can be constructed with {@link okhttp3.Interceptor}, and other
-     * optional params provided in {@link okhttp3.OkHttpClient}.
-     */
-    public TwitterApiClient(TwitterSession session, OkHttpClient client) {
-        this(OkHttpClientHelper.getCustomOkHttpClient(
-                client,
-                session,
-                TwitterCore.getInstance().getAuthConfig()),
-            new TwitterApi());
-    }
-
-    TwitterApiClient(OkHttpClient client, TwitterApi twitterApi) {
-        this.services = buildConcurrentMap();
-        this.retrofit = buildRetrofit(client, twitterApi);
-    }
-
-    private Retrofit buildRetrofit(OkHttpClient httpClient, TwitterApi twitterApi) {
-        return new Retrofit.Builder()
-                .client(httpClient)
-                .baseUrl(twitterApi.getBaseHostUrl())
-                .addConverterFactory(GsonConverterFactory.create(buildGson()))
-                .build();
-    }
-
-    private Gson buildGson() {
-        return new GsonBuilder()
-                .registerTypeAdapterFactory(new SafeListAdapter())
-                .registerTypeAdapterFactory(new SafeMapAdapter())
-                .registerTypeAdapter(BindingValues.class, new BindingValuesAdapter())
-                .create();
-    }
-
-    private ConcurrentHashMap buildConcurrentMap() {
-        return new ConcurrentHashMap<>();
-    }
-
-    /**
-     * @return {@link com.twitter.sdk.android.core.services.AccountService} to access TwitterApi
-     */
-    public AccountService getAccountService() {
-        return getService(AccountService.class);
-    }
-
-    /**
-     * Converts Retrofit style interface into instance for API access
-     *
-     * @param cls Retrofit style interface
-     * @return instance of cls
-     */
-    @SuppressWarnings("unchecked")
-    protected <T> T getService(Class<T> cls) {
-        if (!services.contains(cls)) {
-            services.putIfAbsent(cls, retrofit.create(cls));
-        }
-        return (T) services.get(cls);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiException.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiException.java
deleted file mode 100644
index 73f031fd..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterApiException.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.text.TextUtils;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonSyntaxException;
-import com.twitter.sdk.android.core.models.ApiError;
-import com.twitter.sdk.android.core.models.ApiErrors;
-import com.twitter.sdk.android.core.models.SafeListAdapter;
-import com.twitter.sdk.android.core.models.SafeMapAdapter;
-
-import retrofit2.Response;
-
-/**
- * Represents a Twitter API error.
- */
-public class TwitterApiException extends TwitterException {
-    public static final int DEFAULT_ERROR_CODE = 0;
-    private final ApiError apiError;
-    private final TwitterRateLimit twitterRateLimit;
-    private final int code;
-    private final Response response;
-
-    public TwitterApiException(Response response) {
-        this(response, readApiError(response), readApiRateLimit(response), response.code());
-    }
-
-    TwitterApiException(Response response, ApiError apiError, TwitterRateLimit twitterRateLimit,
-            int code) {
-        super(createExceptionMessage(code));
-        this.apiError = apiError;
-        this.twitterRateLimit = twitterRateLimit;
-        this.code = code;
-        this.response = response;
-    }
-
-    public int getStatusCode() {
-        return code;
-    }
-
-    /**
-     * Error code returned by API request.
-     *
-     * @return API error code
-     */
-    public int getErrorCode() {
-        return apiError == null ? DEFAULT_ERROR_CODE : apiError.code;
-    }
-
-    /**
-     * Error message returned by API request. Error message may change, the codes will stay the same.
-     *
-     * @return API error message
-     */
-    public String getErrorMessage() {
-        return apiError == null ? null : apiError.message;
-    }
-
-    public TwitterRateLimit getTwitterRateLimit() {
-        return twitterRateLimit;
-    }
-
-    public Response getResponse() {
-        return response;
-    }
-
-    public static TwitterRateLimit readApiRateLimit(Response response) {
-        return new TwitterRateLimit(response.headers());
-    }
-
-    public static ApiError readApiError(Response response) {
-        try {
-            // The response buffer can only be read once, so we clone the underlying buffer so the
-            // response can be consumed down stream if necessary.
-            final String body = response.errorBody().source().buffer().clone().readUtf8();
-            if (!TextUtils.isEmpty(body)) {
-                return parseApiError(body);
-            }
-        } catch (Exception e) {
-            Twitter.getLogger().e(TwitterCore.TAG, "Unexpected response", e);
-        }
-
-        return null;
-    }
-
-    static ApiError parseApiError(String body) {
-        final Gson gson = new GsonBuilder()
-                .registerTypeAdapterFactory(new SafeListAdapter())
-                .registerTypeAdapterFactory(new SafeMapAdapter())
-                .create();
-        try {
-            final ApiErrors apiErrors = gson.fromJson(body, ApiErrors.class);
-            if (!apiErrors.errors.isEmpty()) {
-                return apiErrors.errors.get(0);
-            }
-        } catch (JsonSyntaxException e) {
-            Twitter.getLogger().e(TwitterCore.TAG, "Invalid json: " + body, e);
-        }
-        return null;
-    }
-
-    static String createExceptionMessage(int code) {
-        return "HTTP request failed, Status: " + code;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.java
deleted file mode 100644
index 56a8e109..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-/**
- * Authorization configuration details.
- */
-public class TwitterAuthConfig implements Parcelable {
-
-    /**
-     * The default request code to use for Single Sign On. This code will
-     * be returned in {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     */
-    public static final int DEFAULT_AUTH_REQUEST_CODE = 140;
-
-    public static final Parcelable.Creator<TwitterAuthConfig> CREATOR
-            = new Parcelable.Creator<TwitterAuthConfig>() {
-        public TwitterAuthConfig createFromParcel(Parcel in) {
-            return new TwitterAuthConfig(in);
-        }
-
-        public TwitterAuthConfig[] newArray(int size) {
-            return new TwitterAuthConfig[size];
-        }
-    };
-
-    private final String consumerKey;
-    private final String consumerSecret;
-
-    /**
-     * @param consumerKey    The consumer key.
-     * @param consumerSecret The consumer secret.
-     *
-     * @throws java.lang.IllegalArgumentException if consumer key or consumer secret is null.
-     */
-    public TwitterAuthConfig(String consumerKey, String consumerSecret) {
-        if (consumerKey == null || consumerSecret == null) {
-            throw new IllegalArgumentException(
-                    "TwitterAuthConfig must not be created with null consumer key or secret.");
-        }
-        this.consumerKey = sanitizeAttribute(consumerKey);
-        this.consumerSecret = sanitizeAttribute(consumerSecret);
-    }
-
-    private TwitterAuthConfig(Parcel in) {
-        consumerKey = in.readString();
-        consumerSecret = in.readString();
-    }
-
-    /**
-     * @return the consumer key
-     */
-    public String getConsumerKey() {
-        return consumerKey;
-    }
-
-    /**
-     * @return the consumer secret
-     */
-    public String getConsumerSecret() {
-        return consumerSecret;
-    }
-
-    /**
-     * @return The request code to use for Single Sign On. This code will
-     * be returned in {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * when the activity exits.
-     */
-    public int getRequestCode() {
-        return DEFAULT_AUTH_REQUEST_CODE;
-    }
-
-    static String sanitizeAttribute(String input) {
-        if (input != null) {
-            return input.trim();
-        } else {
-            return null;
-        }
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel out, int flags) {
-        out.writeString(consumerKey);
-        out.writeString(consumerSecret);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.kt
new file mode 100644
index 00000000..50b8720b
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthConfig.kt
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+import android.os.Parcel
+import android.os.Parcelable
+
+/**
+ * Authorization configuration details.
+ */
+class TwitterAuthConfig : Parcelable {
+
+    /**
+     * @return the consumer key
+     */
+    val consumerKey: String?
+    /**
+     * @return the consumer secret
+     */
+    val consumerSecret: String?
+
+    /**
+     * @return The request code to use for Single Sign On. This code will
+     * be returned in [android.app.Activity.onActivityResult]
+     * when the activity exits.
+     */
+    val requestCode: Int
+        get() = DEFAULT_AUTH_REQUEST_CODE
+
+    /**
+     * @param consumerKey    The consumer key.
+     * @param consumerSecret The consumer secret.
+     *
+     * @throws IllegalArgumentException if consumer key or consumer secret is null.
+     */
+    constructor(consumerKey: String?, consumerSecret: String?) {
+        if (consumerKey == null || consumerSecret == null) {
+            throw IllegalArgumentException(
+                    "TwitterAuthConfig must not be created with null consumer key or secret.")
+        }
+        this.consumerKey = sanitizeAttribute(consumerKey)
+        this.consumerSecret = sanitizeAttribute(consumerSecret)
+    }
+
+    private constructor(`in`: Parcel) {
+        consumerKey = `in`.readString()
+        consumerSecret = `in`.readString()
+    }
+
+    override fun describeContents(): Int {
+        return 0
+    }
+
+    override fun writeToParcel(out: Parcel, flags: Int) {
+        out.writeString(consumerKey)
+        out.writeString(consumerSecret)
+    }
+
+    companion object CREATOR : Parcelable.Creator<TwitterAuthConfig> {
+        override fun createFromParcel(parcel: Parcel): TwitterAuthConfig {
+            return TwitterAuthConfig(parcel)
+        }
+
+        override fun newArray(size: Int): Array<TwitterAuthConfig?> {
+            return arrayOfNulls(size)
+        }
+
+        /**
+         * The default request code to use for Single Sign On. This code will
+         * be returned in [android.app.Activity.onActivityResult]
+         */
+        private const val DEFAULT_AUTH_REQUEST_CODE = 140
+
+        private fun sanitizeAttribute(input: String?): String? {
+            return input?.trim { it <= ' ' }
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthException.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthException.java
deleted file mode 100644
index 8e165c9c..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthException.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-/**
- * Represents a Twitter authorization error.
- */
-public class TwitterAuthException extends TwitterException {
-
-    private static final long serialVersionUID = 577033016879783994L;
-
-    public TwitterAuthException(String detailMessage) {
-        super(detailMessage);
-    }
-
-    public TwitterAuthException(String detailMessage, Throwable throwable) {
-        super(detailMessage, throwable);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthException.kt
similarity index 68%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthException.kt
index d2199985..1380ac06 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Identifiable.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthException.kt
@@ -15,16 +15,15 @@
  *
  */
 
-package com.twitter.sdk.android.core.models;
+package com.twitter.sdk.android.core
 
 /**
- * Identifiable is an abstraction of types with long identifiers.
+ * Represents a Twitter authorization error.
  */
-public interface Identifiable {
+class TwitterAuthException : TwitterException {
+
+    constructor(detailMessage: String) : super(detailMessage)
+
+    constructor(detailMessage: String, throwable: Throwable) : super(detailMessage, throwable)
 
-    /**
-     * Returns the id.
-     * @return The id.
-     */
-    long getId();
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
deleted file mode 100644
index 1c5e1922..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents an authorization token and its secret.
- */
-public class TwitterAuthToken extends AuthToken implements Parcelable {
-
-    public static final Parcelable.Creator<TwitterAuthToken> CREATOR
-            = new Parcelable.Creator<TwitterAuthToken>() {
-        public TwitterAuthToken createFromParcel(Parcel in) {
-            return new TwitterAuthToken(in);
-        }
-
-        public TwitterAuthToken[] newArray(int size) {
-            return new TwitterAuthToken[size];
-        }
-    };
-
-    @SerializedName("token")
-    public final String token;
-
-    @SerializedName("secret")
-    public final String secret;
-
-    public TwitterAuthToken(String token, String secret) {
-        super();
-        this.token = token;
-        this.secret = secret;
-    }
-
-    // for testing purposes
-    TwitterAuthToken(String token, String secret, long createdAt) {
-        super(createdAt);
-        this.token = token;
-        this.secret = secret;
-    }
-
-    private TwitterAuthToken(Parcel in) {
-        super();
-        this.token = in.readString();
-        this.secret = in.readString();
-    }
-
-    @Override
-    public boolean isExpired() {
-        // Twitter does not expire OAuth1a tokens
-        return false;
-    }
-
-    @Override
-    public String toString() {
-        final StringBuilder sb = new StringBuilder()
-                .append("token=").append(this.token)
-                .append(",secret=").append(this.secret);
-        return sb.toString();
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel out, int flags) {
-        out.writeString(token);
-        out.writeString(secret);
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof TwitterAuthToken)) return false;
-
-        final TwitterAuthToken that = (TwitterAuthToken) o;
-
-        if (secret != null ? !secret.equals(that.secret) : that.secret != null) return false;
-        if (token != null ? !token.equals(that.token) : that.token != null) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = token != null ? token.hashCode() : 0;
-        result = 31 * result + (secret != null ? secret.hashCode() : 0);
-        return result;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterConfig.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterConfig.java
deleted file mode 100644
index e6dcf361..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterConfig.java
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.content.Context;
-
-import java.util.concurrent.ExecutorService;
-
-/**
- * Configurable Twitter options
- */
-public class TwitterConfig {
-    final Context context;
-    final Logger logger;
-    final TwitterAuthConfig twitterAuthConfig;
-    final ExecutorService executorService;
-    final Boolean debug;
-
-    private TwitterConfig(Context context, Logger logger, TwitterAuthConfig twitterAuthConfig,
-            ExecutorService executorService, Boolean debug) {
-        this.context = context;
-        this.logger = logger;
-        this.twitterAuthConfig = twitterAuthConfig;
-        this.executorService = executorService;
-        this.debug = debug;
-    }
-
-    /**
-     * Builder for creating {@link TwitterConfig} instances.
-     * */
-    public static class Builder {
-        private final Context context;
-        private Logger logger;
-        private TwitterAuthConfig twitterAuthConfig;
-        private ExecutorService executorService;
-        private Boolean debug;
-
-        /**
-         * Start building a new {@link TwitterConfig} instance.
-         */
-        public Builder(Context context) {
-            if (context == null) {
-                throw new IllegalArgumentException("Context must not be null.");
-            }
-
-            this.context = context.getApplicationContext();
-        }
-
-        /**
-         * Sets the {@link Logger} to build with.
-         */
-        public Builder logger(Logger logger) {
-            if (logger == null) {
-                throw new IllegalArgumentException("Logger must not be null.");
-            }
-
-            this.logger = logger;
-
-            return this;
-        }
-
-        /**
-         * Sets the {@link TwitterAuthConfig} to build with.
-         */
-        public Builder twitterAuthConfig(TwitterAuthConfig authConfig) {
-            if (authConfig == null) {
-                throw new IllegalArgumentException("TwitterAuthConfig must not be null.");
-            }
-
-            this.twitterAuthConfig = authConfig;
-
-            return this;
-        }
-
-        /**
-         * Sets the {@link ExecutorService} to build with.
-         */
-        public Builder executorService(ExecutorService executorService) {
-            if (executorService == null) {
-                throw new IllegalArgumentException("ExecutorService must not be null.");
-            }
-
-            this.executorService = executorService;
-
-            return this;
-        }
-
-        /**
-         * Enable debug mode
-         */
-        public Builder debug(boolean debug) {
-            this.debug = debug;
-
-            return this;
-        }
-
-        /**
-         * Build the {@link TwitterConfig} instance
-         */
-        public TwitterConfig build() {
-            return new TwitterConfig(context, logger, twitterAuthConfig, executorService, debug);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterConfig.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterConfig.kt
new file mode 100644
index 00000000..655dbd5e
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterConfig.kt
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+import android.content.Context
+
+/**
+ * Configurable Twitter options
+ */
+class TwitterConfig private constructor(
+        val context: Context,
+        val logger: Logger?,
+        val twitterAuthConfig: TwitterAuthConfig?,
+        val debug: Boolean?
+) {
+
+    /**
+     * Builder for creating [TwitterConfig] instances.
+     */
+    class Builder(context: Context?) {
+        private val context: Context
+        private var logger: Logger? = null
+        private var twitterAuthConfig: TwitterAuthConfig? = null
+        private var debug: Boolean? = null
+
+        init {
+            if (context == null) {
+                throw IllegalArgumentException("Context must not be null.")
+            }
+
+            this.context = context.applicationContext
+        }
+
+        /**
+         * Sets the [Logger] to build with.
+         */
+        fun logger(logger: Logger?): Builder {
+            if (logger == null) {
+                throw IllegalArgumentException("Logger must not be null.")
+            }
+
+            this.logger = logger
+
+            return this
+        }
+
+        /**
+         * Sets the [TwitterAuthConfig] to build with.
+         */
+        fun twitterAuthConfig(authConfig: TwitterAuthConfig?): Builder {
+            if (authConfig == null) {
+                throw IllegalArgumentException("TwitterAuthConfig must not be null.")
+            }
+
+            this.twitterAuthConfig = authConfig
+
+            return this
+        }
+
+        /**
+         * Enable debug mode
+         */
+        fun debug(debug: Boolean): Builder {
+            this.debug = debug
+
+            return this
+        }
+
+        /**
+         * Build the [TwitterConfig] instance
+         */
+        fun build(): TwitterConfig {
+            return TwitterConfig(context, logger, twitterAuthConfig, debug)
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterContext.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterContext.java
deleted file mode 100644
index f4cbd56a..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterContext.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-package com.twitter.sdk.android.core;
-
-import android.content.Context;
-import android.content.ContextWrapper;
-import android.content.SharedPreferences;
-import android.database.DatabaseErrorHandler;
-import android.database.sqlite.SQLiteDatabase;
-
-import java.io.File;
-
-/**
- * Wraps Context to provide sub directories for Kits
- */
-class TwitterContext extends ContextWrapper {
-    private final String componentPath;
-    private final String componentName;
-
-    TwitterContext(Context base, String componentName, String componentPath) {
-        super(base);
-        this.componentName = componentName;
-        this.componentPath = componentPath;
-    }
-
-    @Override
-    public File getDatabasePath(String name) {
-
-        final File dir = new File(super.getDatabasePath(name).getParentFile(),
-                componentPath);
-        dir.mkdirs();
-
-        return new File(dir, name);
-    }
-
-    @Override
-    public SQLiteDatabase openOrCreateDatabase(String name, int mode,
-            SQLiteDatabase.CursorFactory factory) {
-        return android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(
-                getDatabasePath(name), factory);
-    }
-
-    @Override
-    public SQLiteDatabase openOrCreateDatabase(String name, int mode,
-            SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler) {
-        return android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(
-                getDatabasePath(name).getPath(), factory, errorHandler);
-    }
-
-    @Override
-    public File getFilesDir() {
-        return new File(super.getFilesDir(), componentPath);
-    }
-
-    @Override
-    public File getExternalFilesDir(String type) {
-        return new File(super.getExternalFilesDir(type), componentPath);
-    }
-
-    @Override
-    public File getCacheDir() {
-        return new File(super.getCacheDir(), componentPath);
-    }
-
-    @Override
-    public File getExternalCacheDir() {
-        return new File(super.getExternalCacheDir(), componentPath);
-    }
-
-    @Override
-    public SharedPreferences getSharedPreferences(String name, int mode) {
-        return super.getSharedPreferences(componentName + ":" + name, mode);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java
deleted file mode 100644
index 026549ac..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.java
+++ /dev/null
@@ -1,228 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-
-import com.twitter.sdk.android.core.internal.SessionMonitor;
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.internal.TwitterSessionVerifier;
-import com.twitter.sdk.android.core.internal.oauth.OAuth2Service;
-import com.twitter.sdk.android.core.internal.persistence.PreferenceStoreImpl;
-
-import java.util.concurrent.ConcurrentHashMap;
-
-/**
- * The TwitterCore Kit provides Login with Twitter and the Twitter API.
- */
-public class TwitterCore {
-    @SuppressLint("StaticFieldLeak")
-    static volatile TwitterCore instance;
-    public static final String TAG = "Twitter";
-
-    static final String PREF_KEY_ACTIVE_TWITTER_SESSION = "active_twittersession";
-    static final String PREF_KEY_TWITTER_SESSION = "twittersession";
-    static final String PREF_KEY_ACTIVE_GUEST_SESSION = "active_guestsession";
-    static final String PREF_KEY_GUEST_SESSION = "guestsession";
-    static final String SESSION_PREF_FILE_NAME = "session_store";
-
-    SessionManager<TwitterSession> twitterSessionManager;
-    SessionManager<GuestSession> guestSessionManager;
-    SessionMonitor<TwitterSession> sessionMonitor;
-
-    private final TwitterAuthConfig authConfig;
-    private final ConcurrentHashMap<Session, TwitterApiClient> apiClients;
-    private final Context context;
-    private volatile TwitterApiClient guestClient;
-    private volatile GuestSessionProvider guestSessionProvider;
-
-    TwitterCore(TwitterAuthConfig authConfig) {
-        this(authConfig, new ConcurrentHashMap<>(), null);
-    }
-
-    // Testing only
-    TwitterCore(TwitterAuthConfig authConfig,
-                ConcurrentHashMap<Session, TwitterApiClient> apiClients,
-                TwitterApiClient guestClient) {
-        this.authConfig = authConfig;
-        this.apiClients = apiClients;
-        this.guestClient = guestClient;
-        context = Twitter.getInstance().getContext(getIdentifier());
-
-        twitterSessionManager = new PersistedSessionManager<>(
-                new PreferenceStoreImpl(context, SESSION_PREF_FILE_NAME),
-                new TwitterSession.Serializer(), PREF_KEY_ACTIVE_TWITTER_SESSION,
-                PREF_KEY_TWITTER_SESSION);
-
-        guestSessionManager = new PersistedSessionManager<>(
-                new PreferenceStoreImpl(context, SESSION_PREF_FILE_NAME),
-                new GuestSession.Serializer(), PREF_KEY_ACTIVE_GUEST_SESSION,
-                PREF_KEY_GUEST_SESSION);
-
-        sessionMonitor = new SessionMonitor<>(twitterSessionManager,
-                Twitter.getInstance().getExecutorService(), new TwitterSessionVerifier());
-    }
-
-    public static TwitterCore getInstance() {
-        if (instance == null) {
-            synchronized (TwitterCore.class) {
-                if (instance == null) {
-                    instance = new TwitterCore(Twitter.getInstance().getTwitterAuthConfig());
-                    Twitter.getInstance().getExecutorService().execute(() -> instance.doInBackground());
-                }
-            }
-        }
-        return instance;
-    }
-
-    public String getVersion() {
-        return BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER;
-    }
-
-    public TwitterAuthConfig getAuthConfig() {
-        return authConfig;
-    }
-
-    void doInBackground() {
-        // Trigger restoration of session
-        twitterSessionManager.getActiveSession();
-        guestSessionManager.getActiveSession();
-        getGuestSessionProvider();
-        // Monitor activity lifecycle after sessions have been restored. Otherwise we would not
-        // have any sessions to monitor anyways.
-
-        sessionMonitor.monitorActivityLifecycle(
-                Twitter.getInstance().getActivityLifecycleManager());
-    }
-
-    public String getIdentifier() {
-        return BuildConfig.GROUP + ":" + BuildConfig.ARTIFACT_ID;
-    }
-
-
-    /**********************************************************************************************
-     * BEGIN PUBLIC API METHODS                                                                   *
-     **********************************************************************************************/
-
-    /**
-     * @return the {@link com.twitter.sdk.android.core.SessionManager} for user sessions.
-     */
-    public SessionManager<TwitterSession> getSessionManager() {
-        return twitterSessionManager;
-    }
-
-    public GuestSessionProvider getGuestSessionProvider() {
-        if (guestSessionProvider == null) {
-            createGuestSessionProvider();
-        }
-        return guestSessionProvider;
-    }
-
-    private synchronized void createGuestSessionProvider() {
-        if (guestSessionProvider == null) {
-            final OAuth2Service service =
-                    new OAuth2Service(this, new TwitterApi());
-            guestSessionProvider = new GuestSessionProvider(service, guestSessionManager);
-        }
-    }
-
-    /**
-     * Creates {@link com.twitter.sdk.android.core.TwitterApiClient} from default
-     * {@link com.twitter.sdk.android.core.Session}.
-     *
-     * Caches internally for efficient access.
-     */
-    public TwitterApiClient getApiClient() {
-        final TwitterSession session = twitterSessionManager.getActiveSession();
-        if (session == null) {
-            return getGuestApiClient();
-        }
-
-        return getApiClient(session);
-    }
-
-    /**
-     * Creates {@link com.twitter.sdk.android.core.TwitterApiClient} from authenticated
-     * {@link com.twitter.sdk.android.core.Session} provided.
-     *
-     * Caches internally for efficient access.
-     * @param session the session
-     */
-    public TwitterApiClient getApiClient(TwitterSession session) {
-        if (!apiClients.containsKey(session)) {
-            apiClients.putIfAbsent(session, new TwitterApiClient(session));
-        }
-        return apiClients.get(session);
-    }
-
-    /**
-     * Add custom {@link com.twitter.sdk.android.core.TwitterApiClient} for guest auth access.
-     *
-     * Only adds guest auth client if it's not already defined. Caches internally for efficient
-     * access and storing it in TwitterCore's singleton.
-     *
-     * @param customTwitterApiClient the custom twitter api client
-     */
-    public void addGuestApiClient(TwitterApiClient customTwitterApiClient) {
-        if (guestClient == null) {
-            createGuestClient(customTwitterApiClient);
-        }
-    }
-
-    /**
-     * Add custom {@link com.twitter.sdk.android.core.TwitterApiClient} for authenticated
-     * {@link com.twitter.sdk.android.core.Session} access.
-     *
-     * Only adds session auth client if it's not already defined. Caches internally for efficient
-     * access and storing it in TwitterCore's singleton.
-     *
-     * @param session the session
-     * @param customTwitterApiClient the custom twitter api client
-     */
-    public void addApiClient(TwitterSession session, TwitterApiClient customTwitterApiClient) {
-        if (!apiClients.containsKey(session)) {
-            apiClients.putIfAbsent(session, customTwitterApiClient);
-        }
-    }
-
-    /**
-     * Creates {@link com.twitter.sdk.android.core.TwitterApiClient} using guest authentication.
-     *
-     * Caches internally for efficient access.
-     */
-    public TwitterApiClient getGuestApiClient() {
-        if (guestClient == null) {
-            createGuestClient();
-        }
-
-        return guestClient;
-    }
-
-    private synchronized void createGuestClient() {
-        if (guestClient == null) {
-            guestClient = new TwitterApiClient();
-        }
-    }
-
-    private synchronized void createGuestClient(TwitterApiClient twitterApiClient) {
-        if (guestClient == null) {
-            guestClient = twitterApiClient;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.kt
new file mode 100644
index 00000000..bf0a7d75
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterCore.kt
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+import android.annotation.SuppressLint
+
+/**
+ * The TwitterCore Kit provides Login with Twitter and the Twitter API.
+ */
+class TwitterCore internal constructor(
+        val authConfig: TwitterAuthConfig
+) {
+
+    val version: String
+        get() = BuildConfig.VERSION_NAME + "." + BuildConfig.BUILD_NUMBER
+
+    companion object {
+        @SuppressLint("StaticFieldLeak")
+        @Volatile
+        internal var instance: TwitterCore? = null
+        const val TAG = "Twitter"
+
+        fun getInstance(): TwitterCore {
+            if (instance == null) {
+                synchronized(TwitterCore::class.java) {
+                    if (instance == null) {
+                        instance = TwitterCore(Twitter.getInstance().twitterAuthConfig)
+                    }
+                }
+            }
+            return instance!!
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterException.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterException.kt
similarity index 69%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterException.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterException.kt
index e2f10802..812dac56 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterException.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterException.kt
@@ -15,18 +15,14 @@
  *
  */
 
-package com.twitter.sdk.android.core;
+package com.twitter.sdk.android.core
 
 /**
  * Represents a Twitter error. Base class for all Twitter related exceptions.
  */
-public class TwitterException extends RuntimeException {
+open class TwitterException : RuntimeException {
 
-    public TwitterException(String detailMessage) {
-        super(detailMessage);
-    }
+    constructor(detailMessage: String) : super(detailMessage)
 
-    public TwitterException(String detailMessage, Throwable throwable) {
-        super(detailMessage, throwable);
-    }
+    constructor(detailMessage: String, throwable: Throwable) : super(detailMessage, throwable) {}
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterRateLimit.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterRateLimit.java
deleted file mode 100644
index 855b7fa2..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterRateLimit.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import okhttp3.Headers;
-
-/**
- * Represents the rate limit data returned on the headers of a request
- *
- * @see <a href="https://dev.twitter.com/rest/public/rate-limiting">Rate Limiting</a>
- */
-public class TwitterRateLimit  {
-
-    private static final String LIMIT_KEY = "x-rate-limit-limit";
-    private static final String REMAINING_KEY = "x-rate-limit-remaining";
-    private static final String RESET_KEY = "x-rate-limit-reset";
-
-    private int requestLimit;
-    private int remainingRequest;
-    private long resetSeconds;
-
-    TwitterRateLimit(final Headers headers) {
-        if (headers == null) {
-            throw new IllegalArgumentException("headers must not be null");
-        }
-        for (int i = 0; i < headers.size(); i++) {
-            if (LIMIT_KEY.equals(headers.name(i))) {
-                requestLimit = Integer.valueOf(headers.value(i));
-            } else if (REMAINING_KEY.equals(headers.name(i))) {
-                remainingRequest = Integer.valueOf(headers.value(i));
-            } else if (RESET_KEY.equals(headers.name(i))) {
-                resetSeconds = Long.valueOf(headers.value(i));
-            }
-        }
-    }
-
-    /**
-     * Returns the rate limit ceiling for that given request
-     */
-    public int getLimit() {
-        return requestLimit;
-    }
-
-    /**
-     * Returns the number of requests left for the 15 minute window
-     */
-    public int getRemaining() {
-        return remainingRequest;
-    }
-
-    /**
-     * Returns epoch time that rate limit reset will happen.
-     */
-    public long getReset() {
-        return resetSeconds;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterSession.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterSession.java
deleted file mode 100644
index e2955409..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterSession.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.text.TextUtils;
-
-import com.google.gson.Gson;
-import com.google.gson.annotations.SerializedName;
-import com.twitter.sdk.android.core.internal.persistence.SerializationStrategy;
-
-/**
- * Represents a Twitter session that is associated with a {@link com.twitter.sdk.android.core.TwitterAuthToken}.
- */
-public class TwitterSession extends Session<TwitterAuthToken> {
-    public static final long UNKNOWN_USER_ID = -1L;
-    public static final String UNKNOWN_USER_NAME = "";
-
-    @SerializedName("user_name")
-    private final String userName;
-
-    /**
-     * @param authToken Auth token
-     * @param userId    User ID
-     * @param userName  User Name
-     *
-     * @throws java.lang.IllegalArgumentException if token argument is null
-     */
-    public TwitterSession(TwitterAuthToken authToken, long userId, String userName) {
-        super(authToken, userId);
-        this.userName = userName;
-    }
-
-    public long getUserId() {
-        return getId();
-    }
-
-    public String getUserName() {
-        return userName;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
-
-        final TwitterSession that = (TwitterSession) o;
-
-        return userName != null ? userName.equals(that.userName) : that.userName == null;
-
-    }
-
-    @Override
-    public int hashCode() {
-        int result = super.hashCode();
-        result = 31 * result + (userName != null ? userName.hashCode() : 0);
-        return result;
-    }
-
-    static class Serializer implements SerializationStrategy<TwitterSession> {
-
-        private final Gson gson;
-
-        Serializer() {
-            this.gson = new Gson();
-        }
-
-        @Override
-        public String serialize(TwitterSession session) {
-            if (session != null && session.getAuthToken() != null) {
-                try {
-                    return gson.toJson(session);
-                } catch (Exception e) {
-                    Twitter.getLogger().d(TwitterCore.TAG, e.getMessage());
-                }
-            }
-            return "";
-        }
-
-        @Override
-        public TwitterSession deserialize(String serializedSession) {
-            if (!TextUtils.isEmpty(serializedSession)) {
-                try {
-                    return gson.fromJson(serializedSession, TwitterSession.class);
-                } catch (Exception e) {
-                    Twitter.getLogger().d(TwitterCore.TAG, e.getMessage());
-                }
-            }
-            return null;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.java
deleted file mode 100644
index b4f29407..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterSession;
-
-/**
- * Abstract class for handling authorization requests.
- */
-public abstract class AuthHandler {
-    static final String EXTRA_TOKEN = "tk";
-    static final String EXTRA_TOKEN_SECRET = "ts";
-    static final String EXTRA_SCREEN_NAME = "screen_name";
-    static final String EXTRA_USER_ID = "user_id";
-    static final String EXTRA_AUTH_ERROR = "auth_error";
-
-    static final int RESULT_CODE_ERROR = Activity.RESULT_FIRST_USER;
-
-    protected final int requestCode;
-    private final TwitterAuthConfig config;
-    private final Callback<TwitterSession> callback;
-
-    /**
-     * @param authConfig  The {@link TwitterAuthConfig}.
-     * @param callback    The listener to callback when authorization completes.
-     * @param requestCode The request code.
-     */
-    AuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback, int requestCode) {
-        config = authConfig;
-        this.callback = callback;
-        this.requestCode = requestCode;
-    }
-
-    TwitterAuthConfig getAuthConfig() {
-        return config;
-    }
-
-    Callback<TwitterSession> getCallback() {
-        return callback;
-    }
-
-    /**
-     * Called to request authorization.
-     *
-     * @return true if authorize request was successfully started.
-     */
-    public abstract boolean authorize(Activity activity);
-
-    /**
-     * Called when {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * is called to complete the authorization flow.
-     *
-     * @param requestCode the request code used for SSO
-     * @param resultCode  the result code returned by the SSO activity
-     * @param data        the result data returned by the SSO activity
-     */
-    public boolean handleOnActivityResult(int requestCode, int resultCode, Intent data) {
-        if (this.requestCode != requestCode) {
-            return false;
-        }
-
-        final Callback<TwitterSession> callback = getCallback();
-        if (callback != null) {
-            if (resultCode == Activity.RESULT_OK) {
-                final String token = data.getStringExtra(EXTRA_TOKEN);
-                final String tokenSecret = data.getStringExtra(EXTRA_TOKEN_SECRET);
-                final String screenName = data.getStringExtra(EXTRA_SCREEN_NAME);
-                final long userId = data.getLongExtra(EXTRA_USER_ID, 0L);
-                callback.success(new Result<>(new TwitterSession(
-                        new TwitterAuthToken(token, tokenSecret), userId, screenName), null));
-            } else if (data != null && data.hasExtra(EXTRA_AUTH_ERROR)) {
-                callback.failure(
-                        (TwitterAuthException) data.getSerializableExtra(EXTRA_AUTH_ERROR));
-            } else {
-                callback.failure(new TwitterAuthException("Authorize failed."));
-            }
-        }
-        return true;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.kt
new file mode 100644
index 00000000..c8243884
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthHandler.kt
@@ -0,0 +1,88 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.identity
+
+import android.app.Activity
+import android.content.Intent
+import com.twitter.sdk.android.core.Callback
+import com.twitter.sdk.android.core.OAuthResult
+import com.twitter.sdk.android.core.TwitterAuthConfig
+import com.twitter.sdk.android.core.TwitterAuthException
+
+/**
+ * Abstract class for handling authorization requests.
+ */
+abstract class AuthHandler
+/**
+ * @param authConfig  The [TwitterAuthConfig].
+ * @param callback    The listener to callback when authorization completes.
+ * @param requestCode The request code.
+ */
+internal constructor(internal val authConfig: TwitterAuthConfig,
+                     internal val callback: Callback<OAuthResult>,
+                     protected val requestCode: Int) {
+
+    /**
+     * Called to request authorization.
+     *
+     * @return true if authorize request was successfully started.
+     */
+    abstract fun authorize(activity: Activity): Boolean
+
+    /**
+     * Called when [Activity.onActivityResult]
+     * is called to complete the authorization flow.
+     *
+     * @param requestCode the request code used for SSO
+     * @param resultCode  the result code returned by the SSO activity
+     * @param data        the result data returned by the SSO activity
+     */
+    fun handleOnActivityResult(requestCode: Int, resultCode: Int, data: Intent?): Boolean {
+        if (this.requestCode != requestCode) {
+            return false
+        }
+
+        val callback = callback
+        if (resultCode == Activity.RESULT_OK) {
+            val token = data!!.getStringExtra(EXTRA_TOKEN)
+            val tokenSecret = data.getStringExtra(EXTRA_TOKEN_SECRET)
+            val screenName = data.getStringExtra(EXTRA_SCREEN_NAME)
+            val userId = data.getLongExtra(EXTRA_USER_ID, 0L)
+
+            val accessToken = OAuthResult(token, tokenSecret, userId, screenName)
+
+            callback.success(accessToken)
+        } else if (data != null && data.hasExtra(EXTRA_AUTH_ERROR)) {
+            callback.failure(
+                    data.getSerializableExtra(EXTRA_AUTH_ERROR) as TwitterAuthException)
+        } else {
+            callback.failure(TwitterAuthException("Authorize failed."))
+        }
+        return true
+    }
+
+    companion object {
+        internal const val EXTRA_TOKEN = "tk"
+        internal const val EXTRA_TOKEN_SECRET = "ts"
+        internal const val EXTRA_SCREEN_NAME = "screen_name"
+        internal const val EXTRA_USER_ID = "user_id"
+        internal const val EXTRA_AUTH_ERROR = "auth_error"
+
+        internal const val RESULT_CODE_ERROR = Activity.RESULT_FIRST_USER
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthState.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthState.kt
similarity index 53%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthState.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthState.kt
index eab78074..0da4842b 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthState.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/AuthState.kt
@@ -15,46 +15,43 @@
  *
  */
 
-package com.twitter.sdk.android.core.identity;
+package com.twitter.sdk.android.core.identity
 
-import android.app.Activity;
+import android.app.Activity
 
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterCore;
+import com.twitter.sdk.android.core.Twitter
+import com.twitter.sdk.android.core.TwitterCore
 
-import java.util.concurrent.atomic.AtomicReference;
+import java.util.concurrent.atomic.AtomicReference
 
 
 /**
  * The state of an authorization request. This class is thread safe.
  */
-class AuthState {
+internal class AuthState {
 
-    final AtomicReference<AuthHandler> authHandlerRef = new AtomicReference<>(null);
+    private val authHandlerRef = AtomicReference<AuthHandler>(null)
 
-    public boolean beginAuthorize(Activity activity, AuthHandler authHandler) {
-        boolean result = false;
-        if (isAuthorizeInProgress()) {
-            Twitter.getLogger().w(TwitterCore.TAG, "Authorize already in progress");
+    val isAuthorizeInProgress: Boolean
+        get() = authHandlerRef.get() != null
+
+    val authHandler: AuthHandler?
+        get() = authHandlerRef.get()
+
+    fun beginAuthorize(activity: Activity, authHandler: AuthHandler): Boolean {
+        var result = false
+        if (isAuthorizeInProgress) {
+            Twitter.getLogger().w(TwitterCore.TAG, "Authorize already in progress")
         } else if (authHandler.authorize(activity)) {
-            result = authHandlerRef.compareAndSet(null, authHandler);
+            result = authHandlerRef.compareAndSet(null, authHandler)
             if (!result) {
-                Twitter.getLogger().w(TwitterCore.TAG, "Failed to update authHandler, authorize"
-                        + " already in progress.");
+                Twitter.getLogger().w(TwitterCore.TAG, "Failed to update authHandler, authorize" + " already in progress.")
             }
         }
-        return result;
-    }
-
-    public void endAuthorize() {
-        authHandlerRef.set(null);
-    }
-
-    public boolean isAuthorizeInProgress() {
-        return authHandlerRef.get() != null;
+        return result
     }
 
-    public AuthHandler getAuthHandler() {
-        return authHandlerRef.get();
+    fun endAuthorize() {
+        authHandlerRef.set(null)
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.java
deleted file mode 100644
index a5c318a2..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.webkit.WebView;
-import android.widget.ProgressBar;
-
-import com.twitter.sdk.android.core.R;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aService;
-
-/**
- * Activity for performing OAuth flow when Single Sign On is not available. This activity should not
- * be called directly.
- */
-// This activity assumes it will handle configuration changes itself and MUST have the
-// following attribute defined in the AndroidManifest.xml
-// file: android:configChanges="orientation|screenSize"
-public class OAuthActivity extends Activity implements OAuthController.Listener {
-
-    static final String EXTRA_AUTH_CONFIG = "auth_config";
-
-    private static final String STATE_PROGRESS = "progress";
-
-    OAuthController oAuthController;
-
-    private ProgressBar spinner;
-    private WebView webView;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.tw__activity_oauth);
-
-        spinner = findViewById(R.id.tw__spinner);
-        webView = findViewById(R.id.tw__web_view);
-
-        final boolean showProgress;
-        if (savedInstanceState != null) {
-            showProgress = savedInstanceState.getBoolean(STATE_PROGRESS, false);
-        } else {
-            showProgress = true;
-        }
-        spinner.setVisibility(showProgress ? View.VISIBLE : View.GONE);
-
-        final TwitterCore kit = TwitterCore.getInstance();
-        oAuthController = new OAuthController(spinner, webView,
-                getIntent().getParcelableExtra(EXTRA_AUTH_CONFIG),
-                new OAuth1aService(kit, new TwitterApi()), this);
-        oAuthController.startAuth();
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        if (spinner.getVisibility() == View.VISIBLE) {
-            outState.putBoolean(STATE_PROGRESS, true);
-        }
-        super.onSaveInstanceState(outState);
-    }
-
-    @Override
-    public void onBackPressed() {
-        oAuthController.handleAuthError(RESULT_CANCELED,
-                new TwitterAuthException("Authorization failed, request was canceled."));
-    }
-
-    @Override
-    public void onComplete(int resultCode, Intent data) {
-        setResult(resultCode, data);
-        finish();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.kt
new file mode 100644
index 00000000..146c3e78
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthActivity.kt
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.identity
+
+import android.app.Activity
+import android.content.Intent
+import android.os.Bundle
+import android.view.View
+import android.webkit.WebView
+import android.widget.ProgressBar
+
+import com.twitter.sdk.android.core.R
+import com.twitter.sdk.android.core.TwitterAuthException
+import com.twitter.sdk.android.core.TwitterCore
+import com.twitter.sdk.android.core.internal.TwitterApi
+import com.twitter.sdk.android.core.internal.oauth.OAuth1aService
+
+/**
+ * Activity for performing OAuth flow when Single Sign On is not available. This activity should not
+ * be called directly.
+ */
+// This activity assumes it will handle configuration changes itself and MUST have the
+// following attribute defined in the AndroidManifest.xml
+// file: android:configChanges="orientation|screenSize"
+class OAuthActivity : Activity(), OAuthController.Listener {
+
+    private lateinit var oAuthController: OAuthController
+
+    private var spinner: ProgressBar? = null
+    private var webView: WebView? = null
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.tw__activity_oauth)
+
+        spinner = findViewById(R.id.tw__spinner)
+        webView = findViewById(R.id.tw__web_view)
+
+        val showProgress: Boolean = savedInstanceState?.getBoolean(STATE_PROGRESS, false) ?: true
+        spinner?.visibility = if (showProgress) View.VISIBLE else View.GONE
+
+        val kit = TwitterCore.getInstance()
+        oAuthController = OAuthController(spinner!!, webView!!,
+                intent.getParcelableExtra(EXTRA_AUTH_CONFIG),
+                OAuth1aService(kit, TwitterApi()), this)
+        oAuthController.startAuth()
+    }
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        if (spinner!!.visibility == View.VISIBLE) {
+            outState.putBoolean(STATE_PROGRESS, true)
+        }
+        super.onSaveInstanceState(outState)
+    }
+
+    override fun onBackPressed() {
+        oAuthController.handleAuthError(RESULT_CANCELED,
+                TwitterAuthException("Authorization failed, request was canceled."))
+    }
+
+    override fun onComplete(resultCode: Int, data: Intent) {
+        setResult(resultCode, data)
+        finish()
+    }
+
+    companion object {
+
+        internal const val EXTRA_AUTH_CONFIG = "auth_config"
+
+        private const val STATE_PROGRESS = "progress"
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java
deleted file mode 100644
index 9071a511..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.webkit.WebChromeClient;
-import android.webkit.WebSettings;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import android.widget.ProgressBar;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aService;
-import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-import com.twitter.sdk.android.core.internal.oauth.OAuthResponse;
-
-class OAuthController implements OAuthWebViewClient.Listener {
-
-    interface Listener {
-        void onComplete(int resultCode, Intent data);
-    }
-
-    final Listener listener;
-    TwitterAuthToken requestToken;
-
-    private final ProgressBar spinner;
-    private final WebView webView;
-    private final TwitterAuthConfig authConfig;
-    private final OAuth1aService oAuth1aService;
-
-    OAuthController(ProgressBar spinner, WebView webView, TwitterAuthConfig authConfig,
-            OAuth1aService oAuth1aService, Listener listener) {
-        this.spinner = spinner;
-        this.webView = webView;
-        this.authConfig = authConfig;
-        this.oAuth1aService = oAuth1aService;
-        this.listener = listener;
-    }
-
-    void startAuth() {
-        // Step 1. Obtain a request token to start the sign in flow.
-        Twitter.getLogger().d(TwitterCore.TAG, "Obtaining request token to start the sign in flow");
-        oAuth1aService.requestTempToken(newRequestTempTokenCallback());
-    }
-
-    /**
-     * Package private for testing.
-     */
-    Callback<OAuthResponse> newRequestTempTokenCallback() {
-        return new Callback<OAuthResponse>() {
-            @Override
-            public void success(Result<OAuthResponse> result) {
-                requestToken = result.data.authToken;
-                final String authorizeUrl = oAuth1aService.getAuthorizeUrl(requestToken);
-                // Step 2. Redirect user to web view to complete authorization flow.
-                Twitter.getLogger().d(TwitterCore.TAG,
-                        "Redirecting user to web view to complete authorization flow");
-                setUpWebView(webView,
-                        new OAuthWebViewClient(oAuth1aService.buildCallbackUrl(authConfig),
-                                OAuthController.this), authorizeUrl, new OAuthWebChromeClient());
-            }
-
-            @Override
-            public void failure(TwitterException error) {
-                Twitter.getLogger().e(TwitterCore.TAG,
-                        "Failed to get request token", error);
-                // Create new exception that can be safely serialized since Retrofit errors may
-                // throw a NotSerializableException.
-                handleAuthError(AuthHandler.RESULT_CODE_ERROR,
-                        new TwitterAuthException("Failed to get request token"));
-            }
-        };
-    }
-
-    protected void handleAuthError(int resultCode, TwitterAuthException error) {
-        final Intent data = new Intent();
-        data.putExtra(AuthHandler.EXTRA_AUTH_ERROR, error);
-        listener.onComplete(resultCode, data);
-    }
-
-    /**
-     * Package private for testing.
-     */
-    void setUpWebView(WebView webView, WebViewClient webViewClient, String url,
-                      WebChromeClient webChromeClient) {
-        final WebSettings webSettings = webView.getSettings();
-        webSettings.setAllowFileAccess(false);
-        webSettings.setJavaScriptEnabled(false);
-        webSettings.setSaveFormData(false);
-        webView.setVerticalScrollBarEnabled(false);
-        webView.setHorizontalScrollBarEnabled(false);
-        webView.setWebViewClient(webViewClient);
-        webView.loadUrl(url);
-        webView.setVisibility(View.INVISIBLE);
-        webView.setWebChromeClient(webChromeClient);
-    }
-
-    private void handleWebViewSuccess(Bundle bundle) {
-        Twitter.getLogger().d(TwitterCore.TAG, "OAuth web view completed successfully");
-        if (bundle != null) {
-            final String verifier = bundle.getString(OAuthConstants.PARAM_VERIFIER);
-            if (verifier != null) {
-                // Step 3. Convert the request token to an access token.
-                Twitter.getLogger().d(TwitterCore.TAG,
-                        "Converting the request token to an access token.");
-                oAuth1aService.requestAccessToken(newRequestAccessTokenCallback(),
-                        requestToken, verifier);
-                return;
-            }
-        }
-
-        // If we get here, we failed to complete authorization.
-        Twitter.getLogger().e(TwitterCore.TAG,
-                "Failed to get authorization, bundle incomplete " + bundle, null);
-        handleAuthError(AuthHandler.RESULT_CODE_ERROR,
-                new TwitterAuthException("Failed to get authorization, bundle incomplete"));
-    }
-
-    /**
-     * Package private for testing.
-     */
-    Callback<OAuthResponse> newRequestAccessTokenCallback() {
-        return new Callback<OAuthResponse>() {
-            @Override
-            public void success(Result<OAuthResponse> result) {
-                final Intent data = new Intent();
-                final OAuthResponse response = result.data;
-                data.putExtra(AuthHandler.EXTRA_SCREEN_NAME, response.userName);
-                data.putExtra(AuthHandler.EXTRA_USER_ID, response.userId);
-                data.putExtra(AuthHandler.EXTRA_TOKEN, response.authToken.token);
-                data.putExtra(AuthHandler.EXTRA_TOKEN_SECRET,
-                        response.authToken.secret);
-                listener.onComplete(Activity.RESULT_OK, data);
-            }
-
-            @Override
-            public void failure(TwitterException error) {
-                Twitter.getLogger().e(TwitterCore.TAG, "Failed to get access token", error);
-                // Create new exception that can be safely serialized since Retrofit errors may
-                // throw a NotSerializableException.
-                handleAuthError(AuthHandler.RESULT_CODE_ERROR,
-                        new TwitterAuthException("Failed to get access token"));
-            }
-        };
-    }
-
-    private void handleWebViewError(WebViewException error) {
-        Twitter.getLogger().e(TwitterCore.TAG, "OAuth web view completed with an error", error);
-        handleAuthError(AuthHandler.RESULT_CODE_ERROR,
-                new TwitterAuthException("OAuth web view completed with an error"));
-    }
-
-    private void dismissWebView() {
-        webView.stopLoading();
-        dismissSpinner();
-    }
-
-    private void dismissSpinner() {
-        spinner.setVisibility(View.GONE);
-    }
-
-    @Override
-    public void onPageFinished(WebView webView, String url) {
-        dismissSpinner();
-        webView.setVisibility(View.VISIBLE);
-    }
-
-    @Override
-    public void onSuccess(Bundle bundle) {
-        handleWebViewSuccess(bundle);
-        dismissWebView();
-    }
-
-    @Override
-    public void onError(WebViewException exception) {
-        handleWebViewError(exception);
-        dismissWebView();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.kt
new file mode 100644
index 00000000..e44a273a
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.kt
@@ -0,0 +1,179 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.identity
+
+import android.app.Activity
+import android.content.Intent
+import android.os.Bundle
+import android.view.View
+import android.webkit.WebChromeClient
+import android.webkit.WebView
+import android.webkit.WebViewClient
+import android.widget.ProgressBar
+import com.twitter.sdk.android.core.Twitter
+import com.twitter.sdk.android.core.TwitterAuthConfig
+import com.twitter.sdk.android.core.TwitterAuthException
+import com.twitter.sdk.android.core.TwitterCore
+import com.twitter.sdk.android.core.TwitterException
+import com.twitter.sdk.android.core.internal.oauth.OAuth1aService
+import com.twitter.sdk.android.core.internal.oauth.OAuthConstants
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.GlobalScope
+import kotlinx.coroutines.launch
+import twitter4j.auth.RequestToken
+
+internal class OAuthController(
+        private val spinner: ProgressBar,
+        private val webView: WebView,
+        private val authConfig: TwitterAuthConfig,
+        private val oAuth1aService: OAuth1aService,
+        private val listener: Listener
+) : OAuthWebViewClient.Listener {
+
+    private lateinit var requestToken: RequestToken
+
+    internal interface Listener {
+        fun onComplete(resultCode: Int, data: Intent)
+    }
+
+    fun startAuth() {
+        // Step 1. Obtain a request token to start the sign in flow.
+        Twitter.getLogger().d(TwitterCore.TAG, "Obtaining request token to start the sign in flow")
+
+        GlobalScope.launch(Dispatchers.Main) {
+
+            try {
+                requestToken = oAuth1aService.requestTempToken()
+
+                val authorizeUrl = oAuth1aService.getAuthorizeUrl(requestToken)
+
+                // Step 2. Redirect user to web view to complete authorization flow.
+                Twitter.getLogger().d(TwitterCore.TAG,
+                        "Redirecting user to web view to complete authorization flow")
+                setUpWebView(webView,
+                        OAuthWebViewClient(oAuth1aService.buildCallbackUrl(authConfig),
+                                this@OAuthController), authorizeUrl, OAuthWebChromeClient())
+
+            } catch (e: TwitterException) {
+                Twitter.getLogger().e(TwitterCore.TAG,
+                        "Failed to get request token", e)
+                // Create new exception that can be safely serialized since Retrofit errors may
+                // throw a NotSerializableException.
+                handleAuthError(AuthHandler.RESULT_CODE_ERROR,
+                        TwitterAuthException("Failed to get request token"))
+            }
+        }
+    }
+
+    internal fun handleAuthError(resultCode: Int, error: TwitterAuthException) {
+        val data = Intent()
+        data.putExtra(AuthHandler.EXTRA_AUTH_ERROR, error)
+        listener.onComplete(resultCode, data)
+    }
+
+    /**
+     * Package private for testing.
+     */
+    private fun setUpWebView(webView: WebView,
+                             webViewClient: WebViewClient,
+                             url: String,
+                             webChromeClient: WebChromeClient) {
+        val webSettings = webView.settings
+        webSettings.allowFileAccess = false
+        webSettings.javaScriptEnabled = false
+        @Suppress("DEPRECATION")
+        webSettings.saveFormData = false
+        webView.isVerticalScrollBarEnabled = false
+        webView.isHorizontalScrollBarEnabled = false
+        webView.webViewClient = webViewClient
+        webView.loadUrl(url)
+        webView.visibility = View.INVISIBLE
+        webView.webChromeClient = webChromeClient
+    }
+
+    private fun handleWebViewSuccess(bundle: Bundle?) {
+        Twitter.getLogger().d(TwitterCore.TAG, "OAuth web view completed successfully")
+        if (bundle != null) {
+            val verifier = bundle.getString(OAuthConstants.PARAM_VERIFIER)
+            if (verifier != null) {
+                // Step 3. Convert the request token to an access token.
+                Twitter.getLogger().d(TwitterCore.TAG,
+                        "Converting the request token to an access token.")
+
+                GlobalScope.launch(Dispatchers.Main) {
+
+                    try {
+                        val accessToken = oAuth1aService.requestAccessToken(requestToken, verifier)
+
+                        val data = Intent()
+                        data.putExtra(AuthHandler.EXTRA_SCREEN_NAME, accessToken.screenName)
+                        data.putExtra(AuthHandler.EXTRA_USER_ID, accessToken.userId)
+                        data.putExtra(AuthHandler.EXTRA_TOKEN, accessToken.token)
+                        data.putExtra(AuthHandler.EXTRA_TOKEN_SECRET, accessToken.tokenSecret)
+                        listener.onComplete(Activity.RESULT_OK, data)
+
+                    } catch (e: TwitterException) {
+
+                        Twitter.getLogger().e(TwitterCore.TAG, "Failed to get access token", e)
+                        // Create new exception that can be safely serialized since Retrofit errors may
+                        // throw a NotSerializableException.
+                        handleAuthError(AuthHandler.RESULT_CODE_ERROR,
+                                TwitterAuthException("Failed to get access token"))
+                    }
+                }
+                return
+            }
+        }
+
+        // If we get here, we failed to complete authorization.
+        Twitter.getLogger().e(TwitterCore.TAG,
+                "Failed to get authorization, bundle incomplete " + bundle!!, null)
+        handleAuthError(AuthHandler.RESULT_CODE_ERROR,
+                TwitterAuthException("Failed to get authorization, bundle incomplete"))
+    }
+
+    private fun handleWebViewError(error: WebViewException) {
+        Twitter.getLogger().e(TwitterCore.TAG, "OAuth web view completed with an error", error)
+        handleAuthError(AuthHandler.RESULT_CODE_ERROR,
+                TwitterAuthException("OAuth web view completed with an error"))
+    }
+
+    private fun dismissWebView() {
+        webView.stopLoading()
+        dismissSpinner()
+    }
+
+    private fun dismissSpinner() {
+        spinner.visibility = View.GONE
+    }
+
+    override fun onPageFinished(webView: WebView, url: String) {
+        dismissSpinner()
+        webView.visibility = View.VISIBLE
+    }
+
+    override fun onSuccess(bundle: Bundle) {
+        handleWebViewSuccess(bundle)
+        dismissWebView()
+    }
+
+    override fun onError(exception: WebViewException) {
+        handleWebViewError(exception)
+        dismissWebView()
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthHandler.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthHandler.java
deleted file mode 100644
index 285f461a..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthHandler.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterSession;
-
-/**
- * OAuth 1.0a implementation of an {@link AuthHandler}
- */
-class OAuthHandler extends AuthHandler {
-
-    /**
-     * @param authConfig The {@link com.twitter.sdk.android.core.TwitterAuthConfig}.
-     * @param callback   The listener to callback when authorization completes.
-     */
-    OAuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback,
-            int requestCode) {
-        super(authConfig, callback, requestCode);
-    }
-
-    @Override
-    public boolean authorize(Activity activity) {
-        activity.startActivityForResult(newIntent(activity), requestCode);
-        return true;
-    }
-
-    Intent newIntent(Activity activity) {
-        final Intent intent = new Intent(activity, OAuthActivity.class);
-        intent.putExtra(OAuthActivity.EXTRA_AUTH_CONFIG, getAuthConfig());
-        return intent;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthHandler.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthHandler.kt
new file mode 100644
index 00000000..276d6574
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthHandler.kt
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.identity
+
+import android.app.Activity
+import android.content.Intent
+import com.twitter.sdk.android.core.Callback
+import com.twitter.sdk.android.core.OAuthResult
+import com.twitter.sdk.android.core.TwitterAuthConfig
+
+/**
+ * OAuth 1.0a implementation of an [AuthHandler]
+ *
+ * @param authConfig The [com.twitter.sdk.android.core.TwitterAuthConfig].
+ * @param callback   The listener to callback when authorization completes.
+ */
+internal class OAuthHandler(
+        authConfig: TwitterAuthConfig,
+        callback: Callback<OAuthResult>,
+        requestCode: Int
+) : AuthHandler(authConfig, callback, requestCode) {
+
+    override fun authorize(activity: Activity): Boolean {
+        activity.startActivityForResult(newIntent(activity), requestCode)
+        return true
+    }
+
+    private fun newIntent(activity: Activity): Intent {
+        val intent = Intent(activity, OAuthActivity::class.java)
+        intent.putExtra(OAuthActivity.EXTRA_AUTH_CONFIG, authConfig)
+        return intent
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClient.kt
similarity index 69%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClient.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClient.kt
index 45c4384c..58c3c2bc 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClient.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebChromeClient.kt
@@ -15,16 +15,15 @@
  *
  */
 
-package com.twitter.sdk.android.core.identity;
+package com.twitter.sdk.android.core.identity
 
-import android.webkit.ConsoleMessage;
-import android.webkit.WebChromeClient;
+import android.webkit.ConsoleMessage
+import android.webkit.WebChromeClient
 
-class OAuthWebChromeClient extends WebChromeClient {
+internal class OAuthWebChromeClient : WebChromeClient() {
 
-    @Override
-    public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
+    override fun onConsoleMessage(consoleMessage: ConsoleMessage): Boolean {
         //Do not log
-        return true;
+        return true
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebViewClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebViewClient.java
deleted file mode 100644
index 59f26e02..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebViewClient.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.net.http.SslError;
-import android.os.Bundle;
-import android.webkit.SslErrorHandler;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-
-import com.twitter.sdk.android.core.internal.network.UrlUtils;
-
-import java.net.URI;
-import java.util.Map;
-import java.util.TreeMap;
-
-class OAuthWebViewClient extends WebViewClient {
-
-    interface Listener {
-        void onPageFinished(WebView webView, String url);
-        void onSuccess(Bundle bundle);
-        void onError(WebViewException exception);
-    }
-
-    private final String completeUrl;
-    private final Listener listener;
-
-    OAuthWebViewClient(String completeUrl, Listener listener) {
-        this.completeUrl = completeUrl;
-        this.listener = listener;
-    }
-
-    @Override
-    public void onPageFinished(WebView view, String url) {
-        super.onPageFinished(view, url);
-        listener.onPageFinished(view, url);
-    }
-
-    @Override
-    public boolean shouldOverrideUrlLoading(WebView view, String url) {
-        if (url.startsWith(completeUrl)) {
-            final TreeMap<String, String> params =
-                    UrlUtils.getQueryParams(URI.create(url), false);
-            final Bundle bundle = new Bundle(params.size());
-            for (Map.Entry<String, String> entry : params.entrySet()) {
-                bundle.putString(entry.getKey(), entry.getValue());
-            }
-            listener.onSuccess(bundle);
-            return true;
-        }
-        return super.shouldOverrideUrlLoading(view, url);
-    }
-
-    @Override
-    public void onReceivedError(WebView view, int errorCode,
-            String description, String failingUrl) {
-        super.onReceivedError(view, errorCode, description, failingUrl);
-        listener.onError(new WebViewException(errorCode, description, failingUrl));
-    }
-
-    @Override
-    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
-        super.onReceivedSslError(view, handler, error);
-        listener.onError(new WebViewException(error.getPrimaryError(), null, null));
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebViewClient.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebViewClient.kt
new file mode 100644
index 00000000..ab4d4d53
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthWebViewClient.kt
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.identity
+
+import android.net.http.SslError
+import android.os.Bundle
+import android.webkit.SslErrorHandler
+import android.webkit.WebView
+import android.webkit.WebViewClient
+import com.twitter.sdk.android.core.internal.network.UrlUtils
+import java.net.URI
+
+internal class OAuthWebViewClient(
+        private val completeUrl: String,
+        private val listener: Listener
+) : WebViewClient() {
+
+    internal interface Listener {
+        fun onPageFinished(webView: WebView, url: String)
+        fun onSuccess(bundle: Bundle)
+        fun onError(exception: WebViewException)
+    }
+
+    override fun onPageFinished(view: WebView, url: String) {
+        super.onPageFinished(view, url)
+        listener.onPageFinished(view, url)
+    }
+
+    override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {
+        if (url.startsWith(completeUrl)) {
+            val params = UrlUtils.getQueryParams(URI.create(url), false)
+            val bundle = Bundle(params.size)
+            for ((key, value) in params) {
+                bundle.putString(key, value)
+            }
+            listener.onSuccess(bundle)
+            return true
+        }
+        @Suppress("DEPRECATION")
+        return super.shouldOverrideUrlLoading(view, url)
+    }
+
+    override fun onReceivedError(view: WebView, errorCode: Int,
+                                 description: String, failingUrl: String) {
+        @Suppress("DEPRECATION")
+        super.onReceivedError(view, errorCode, description, failingUrl)
+        listener.onError(WebViewException(errorCode, description, failingUrl))
+    }
+
+    override fun onReceivedSslError(view: WebView, handler: SslErrorHandler, error: SslError) {
+        super.onReceivedSslError(view, handler, error)
+        listener.onError(WebViewException(error.primaryError, null, null))
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.java
deleted file mode 100644
index 3fe43ee2..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.java
+++ /dev/null
@@ -1,172 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.Signature;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.IntentUtils;
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterSession;
-
-/**
- * Single Sign On implementation of an {@link AuthHandler}
- */
-class SSOAuthHandler extends AuthHandler {
-
-    // Package name of the Twitter for Android application.
-    static final String TWITTER_PACKAGE_NAME = "com.twitter.android";
-
-    // Package name of the Twitter Dogfood Android application.
-    static final String DOGFOOD_PACKAGE_NAME = "com.twitter.android.beta";
-
-    // Class name of the Activity responsible for Single sign-on flow.
-    static final String SSO_CLASS_NAME = TWITTER_PACKAGE_NAME + ".SingleSignOnActivity";
-
-    // Twitter for Android application signature
-    static final String TWITTER_SIGNATURE = "3082025d308201c6a00302010202044bd76cce300d06092" +
-            "a864886f70d01010505003073310b3009060355040613025553310b3009060355040813024341311630" +
-            "140603550407130d53616e204672616e636973636f31163014060355040a130d547769747465722c204" +
-            "96e632e310f300d060355040b13064d6f62696c65311630140603550403130d4c656c616e6420526563" +
-            "686973301e170d3130303432373233303133345a170d3438303832353233303133345a3073310b30090" +
-            "60355040613025553310b3009060355040813024341311630140603550407130d53616e204672616e63" +
-            "6973636f31163014060355040a130d547769747465722c20496e632e310f300d060355040b13064d6f6" +
-            "2696c65311630140603550403130d4c656c616e642052656368697330819f300d06092a864886f70d01" +
-            "0101050003818d003081890281810086233c2e51c62232d49cc932e470713d63a6a1106b38f9e442e01" +
-            "bc79ca4f95c72b2cb3f1369ef7dea6036bff7c4b2828cb3787e7657ad83986751ced5b131fcc6f413ef" +
-            "b7334e32ed9787f9e9a249ae108fa66009ac7a7932c25d37e1e07d4f9f66aa494c270dbac87d261c966" +
-            "8d321c2fba4ef2800e46671a597ff2eac5d7f0203010001300d06092a864886f70d0101050500038181" +
-            "003e1f01cb6ea8be8d2cecef5cd2a64c97ba8728aa5f08f8275d00508d64d139b6a72c5716b40a040df" +
-            "0eeeda04de9361107e123ee8d3dc05e70c8a355f46dbadf1235443b0b214c57211afd4edd147451c443" +
-            "d49498d2a7ff27e45a99c39b9e47429a1dae843ba233bf8ca81296dbe1dc5c5434514d995b027924680" +
-            "9392a219b";
-
-    // Twitter Android Dogfood application signature
-    static final String DOGFOOD_SIGNATURE = "308203523082023aa00302010202044fd0006b300d06092a864" +
-            "886f70d0101050500306b310b3009060355040613025553310b30090603550408130243413116301406" +
-            "03550407130d53616e204672616e636973636f3110300e060355040a130754776974746572310f300d0" +
-            "60355040b13064d6f62696c65311430120603550403130b4a6f6e617468616e204c65301e170d313230" +
-            "3630373031313431395a170d3339313032343031313431395a306b310b3009060355040613025553310" +
-            "b3009060355040813024341311630140603550407130d53616e204672616e636973636f3110300e0603" +
-            "55040a130754776974746572310f300d060355040b13064d6f62696c65311430120603550403130b4a6" +
-            "f6e617468616e204c6530820122300d06092a864886f70d01010105000382010f003082010a02820101" +
-            "0089e6cbdfed4288a9c0a215d33d4fa978a5bdd20be426ef4b497d358a9fd1c6efec9684f059f6955e6" +
-            "0e5fda1b5910bb2d097e7421a78f9c81e95cd8ef3bf50add7f8d9f073c0478736a6c7fd38c587155978" +
-            "3a76420d37f3f874f2114ec02532e85587791d24037485b1b95ec8cbc75b52042867988b51c7c3589d5" +
-            "b5972fd20a2e8a7c9ced986873f5008a418b2921daa7cfb78afc174eecdb8a79dc0961bea9740d09c46" +
-            "56ac9b8c86263a788e35af1d4a3f86ce053a1aefb5369def91614a390219f896f378712376baa05934a" +
-            "341798950e229f4f735b86004952b259f23cc9fc3b8c1bc8171984884dc92940e91f2e9a78a84a78f0c" +
-            "2946b7e37bbf3b9b0203010001300d06092a864886f70d010105050003820101001cf15250365e66cc8" +
-            "7bb5054de1661266cf87907841016b20dfa1f9f59842020cbc33f9b4d41717db0428d11696a0bade6a4" +
-            "950a48cc4fa8ae56c850647379a5c2d977436b644162c453dd36b7745ccb9ff0b5fc070125024de73da" +
-            "b6dcda5c69372e978a49865f569927199ed0f61d7cbee1839079a7da2e83f8c90f7421a8c81b3f17f1c" +
-            "c05d52aedac9acd6e092ffd9ad572960e779a5b91a78e1aeb2b3c7b24464bd223c745e40abd74fc5863" +
-            "10809520d183443fcca3c6ade3be458afedbd3325df9c0e552636e35bb55b240eb8c0ba3973c4fb8121" +
-            "3f22363be2d70e85014650c2f4fc679747a7ec31ea7b08da7dd9b9ba279a7fbbc1bd440fbe831bf4";
-
-    private static final String EXTRA_CONSUMER_KEY = "ck";
-    private static final String EXTRA_CONSUMER_SECRET = "cs";
-
-    SSOAuthHandler(TwitterAuthConfig authConfig, Callback<TwitterSession> callback,
-            int requestCode) {
-        super(authConfig, callback, requestCode);
-    }
-
-    @Override
-    public boolean authorize(Activity activity) {
-        return startAuthActivityForResult(activity);
-    }
-
-
-    private boolean startAuthActivityForResult(Activity activity) {
-        final PackageManager pm = activity.getPackageManager();
-        final String packageName = availableSSOPackage(pm);
-        if (packageName == null) {
-            Twitter.getLogger().e(TwitterCore.TAG, "SSO app signature check failed", null);
-            return false;
-        }
-
-        final ComponentName ssoActivity = new ComponentName(packageName, SSO_CLASS_NAME);
-        final TwitterAuthConfig authConfig = getAuthConfig();
-        final Intent intent = new Intent().setComponent(ssoActivity);
-        if (!IntentUtils.isActivityAvailable(activity, intent)) {
-            Twitter.getLogger().e(TwitterCore.TAG, "SSO auth activity not found", null);
-            return false;
-        }
-        intent.putExtra(EXTRA_CONSUMER_KEY, authConfig.getConsumerKey())
-                .putExtra(EXTRA_CONSUMER_SECRET, authConfig.getConsumerSecret());
-
-        try {
-            activity.startActivityForResult(intent, requestCode);
-            return true;
-        } catch (Exception e) {
-            Twitter.getLogger().e(TwitterCore.TAG, "SSO exception occurred", e);
-            return false;
-        }
-    }
-
-    /**
-     * Returns an available SSO app package, preferring Twitter for Android, then Twitter Dogfood.
-     * @param pm the PackageManager for checking available app packages.
-     * @return the app package name to use for SSO.
-     */
-    public static String availableSSOPackage(PackageManager pm) {
-        if (checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE)) {
-            return TWITTER_PACKAGE_NAME;
-        } else if (checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE)) {
-            return DOGFOOD_PACKAGE_NAME;
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Returns true if Twitter for Android or Twitter Dogfood is installed.
-     * @param context a context
-     * @return true if Twitter is installed; otherwise, false.
-     */
-    public static boolean isAvailable(Context context) {
-        final PackageManager pm = context.getPackageManager();
-        return checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE) ||
-                checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE);
-    }
-
-    private static boolean checkAppSignature(PackageManager pm, String packageName,
-            String requiredSignature) {
-        final PackageInfo p;
-        try {
-            p = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
-        } catch (PackageManager.NameNotFoundException e) {
-            return false;
-        }
-        for (Signature s : p.signatures) {
-            if (!requiredSignature.equals(s.toCharsString())) {
-                return false;
-            }
-        }
-        return true;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.kt
new file mode 100644
index 00000000..ed03561f
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/SSOAuthHandler.kt
@@ -0,0 +1,173 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.identity
+
+import android.annotation.SuppressLint
+import android.app.Activity
+import android.content.ComponentName
+import android.content.Context
+import android.content.Intent
+import android.content.pm.PackageInfo
+import android.content.pm.PackageManager
+import com.twitter.sdk.android.core.Callback
+import com.twitter.sdk.android.core.IntentUtils
+import com.twitter.sdk.android.core.OAuthResult
+import com.twitter.sdk.android.core.Twitter
+import com.twitter.sdk.android.core.TwitterAuthConfig
+import com.twitter.sdk.android.core.TwitterCore
+
+/**
+ * Single Sign On implementation of an [AuthHandler]
+ */
+class SSOAuthHandler(authConfig: TwitterAuthConfig,
+                     callback: Callback<OAuthResult>,
+                     requestCode: Int
+) : AuthHandler(authConfig, callback, requestCode) {
+
+    override fun authorize(activity: Activity): Boolean {
+        return startAuthActivityForResult(activity)
+    }
+
+
+    private fun startAuthActivityForResult(activity: Activity): Boolean {
+        val pm = activity.packageManager
+        val packageName = availableSSOPackage(pm)
+        if (packageName == null) {
+            Twitter.getLogger().e(TwitterCore.TAG, "SSO app signature check failed", null)
+            return false
+        }
+
+        val ssoActivity = ComponentName(packageName, SSO_CLASS_NAME)
+        val authConfig = authConfig
+        val intent = Intent().setComponent(ssoActivity)
+        if (!IntentUtils.isActivityAvailable(activity, intent)) {
+            Twitter.getLogger().e(TwitterCore.TAG, "SSO auth activity not found", null)
+            return false
+        }
+        intent.putExtra(EXTRA_CONSUMER_KEY, authConfig.consumerKey)
+                .putExtra(EXTRA_CONSUMER_SECRET, authConfig.consumerSecret)
+
+        return try {
+            activity.startActivityForResult(intent, requestCode)
+            true
+        } catch (e: Exception) {
+            Twitter.getLogger().e(TwitterCore.TAG, "SSO exception occurred", e)
+            false
+        }
+
+    }
+
+    companion object {
+
+        // Package name of the Twitter for Android application.
+        private const val TWITTER_PACKAGE_NAME = "com.twitter.android"
+
+        // Package name of the Twitter Dogfood Android application.
+        private const val DOGFOOD_PACKAGE_NAME = "com.twitter.android.beta"
+
+        // Class name of the Activity responsible for Single sign-on flow.
+        const val SSO_CLASS_NAME = "$TWITTER_PACKAGE_NAME.SingleSignOnActivity"
+
+        // Twitter for Android application signature
+        private const val TWITTER_SIGNATURE = "3082025d308201c6a00302010202044bd76cce300d06092" +
+                "a864886f70d01010505003073310b3009060355040613025553310b3009060355040813024341311630" +
+                "140603550407130d53616e204672616e636973636f31163014060355040a130d547769747465722c204" +
+                "96e632e310f300d060355040b13064d6f62696c65311630140603550403130d4c656c616e6420526563" +
+                "686973301e170d3130303432373233303133345a170d3438303832353233303133345a3073310b30090" +
+                "60355040613025553310b3009060355040813024341311630140603550407130d53616e204672616e63" +
+                "6973636f31163014060355040a130d547769747465722c20496e632e310f300d060355040b13064d6f6" +
+                "2696c65311630140603550403130d4c656c616e642052656368697330819f300d06092a864886f70d01" +
+                "0101050003818d003081890281810086233c2e51c62232d49cc932e470713d63a6a1106b38f9e442e01" +
+                "bc79ca4f95c72b2cb3f1369ef7dea6036bff7c4b2828cb3787e7657ad83986751ced5b131fcc6f413ef" +
+                "b7334e32ed9787f9e9a249ae108fa66009ac7a7932c25d37e1e07d4f9f66aa494c270dbac87d261c966" +
+                "8d321c2fba4ef2800e46671a597ff2eac5d7f0203010001300d06092a864886f70d0101050500038181" +
+                "003e1f01cb6ea8be8d2cecef5cd2a64c97ba8728aa5f08f8275d00508d64d139b6a72c5716b40a040df" +
+                "0eeeda04de9361107e123ee8d3dc05e70c8a355f46dbadf1235443b0b214c57211afd4edd147451c443" +
+                "d49498d2a7ff27e45a99c39b9e47429a1dae843ba233bf8ca81296dbe1dc5c5434514d995b027924680" +
+                "9392a219b"
+
+        // Twitter Android Dogfood application signature
+        private const val DOGFOOD_SIGNATURE = "308203523082023aa00302010202044fd0006b300d06092a864" +
+                "886f70d0101050500306b310b3009060355040613025553310b30090603550408130243413116301406" +
+                "03550407130d53616e204672616e636973636f3110300e060355040a130754776974746572310f300d0" +
+                "60355040b13064d6f62696c65311430120603550403130b4a6f6e617468616e204c65301e170d313230" +
+                "3630373031313431395a170d3339313032343031313431395a306b310b3009060355040613025553310" +
+                "b3009060355040813024341311630140603550407130d53616e204672616e636973636f3110300e0603" +
+                "55040a130754776974746572310f300d060355040b13064d6f62696c65311430120603550403130b4a6" +
+                "f6e617468616e204c6530820122300d06092a864886f70d01010105000382010f003082010a02820101" +
+                "0089e6cbdfed4288a9c0a215d33d4fa978a5bdd20be426ef4b497d358a9fd1c6efec9684f059f6955e6" +
+                "0e5fda1b5910bb2d097e7421a78f9c81e95cd8ef3bf50add7f8d9f073c0478736a6c7fd38c587155978" +
+                "3a76420d37f3f874f2114ec02532e85587791d24037485b1b95ec8cbc75b52042867988b51c7c3589d5" +
+                "b5972fd20a2e8a7c9ced986873f5008a418b2921daa7cfb78afc174eecdb8a79dc0961bea9740d09c46" +
+                "56ac9b8c86263a788e35af1d4a3f86ce053a1aefb5369def91614a390219f896f378712376baa05934a" +
+                "341798950e229f4f735b86004952b259f23cc9fc3b8c1bc8171984884dc92940e91f2e9a78a84a78f0c" +
+                "2946b7e37bbf3b9b0203010001300d06092a864886f70d010105050003820101001cf15250365e66cc8" +
+                "7bb5054de1661266cf87907841016b20dfa1f9f59842020cbc33f9b4d41717db0428d11696a0bade6a4" +
+                "950a48cc4fa8ae56c850647379a5c2d977436b644162c453dd36b7745ccb9ff0b5fc070125024de73da" +
+                "b6dcda5c69372e978a49865f569927199ed0f61d7cbee1839079a7da2e83f8c90f7421a8c81b3f17f1c" +
+                "c05d52aedac9acd6e092ffd9ad572960e779a5b91a78e1aeb2b3c7b24464bd223c745e40abd74fc5863" +
+                "10809520d183443fcca3c6ade3be458afedbd3325df9c0e552636e35bb55b240eb8c0ba3973c4fb8121" +
+                "3f22363be2d70e85014650c2f4fc679747a7ec31ea7b08da7dd9b9ba279a7fbbc1bd440fbe831bf4"
+
+        private const val EXTRA_CONSUMER_KEY = "ck"
+        private const val EXTRA_CONSUMER_SECRET = "cs"
+
+        /**
+         * Returns an available SSO app package, preferring Twitter for Android, then Twitter Dogfood.
+         * @param pm the PackageManager for checking available app packages.
+         * @return the app package name to use for SSO.
+         */
+        fun availableSSOPackage(pm: PackageManager): String? {
+            return when {
+                checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE) -> TWITTER_PACKAGE_NAME
+                checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE) -> DOGFOOD_PACKAGE_NAME
+                else -> null
+            }
+        }
+
+        /**
+         * Returns true if Twitter for Android or Twitter Dogfood is installed.
+         * @param context a context
+         * @return true if Twitter is installed; otherwise, false.
+         */
+        fun isAvailable(context: Context): Boolean {
+            val pm = context.packageManager
+            return checkAppSignature(pm, TWITTER_PACKAGE_NAME, TWITTER_SIGNATURE) || checkAppSignature(pm, DOGFOOD_PACKAGE_NAME, DOGFOOD_SIGNATURE)
+        }
+
+        @SuppressLint("PackageManagerGetSignatures")
+        private fun checkAppSignature(pm: PackageManager, packageName: String,
+                                      requiredSignature: String): Boolean {
+            val p: PackageInfo
+            try {
+                @Suppress("DEPRECATION")
+                p = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES)
+            } catch (e: PackageManager.NameNotFoundException) {
+                return false
+            }
+
+            @Suppress("DEPRECATION")
+            for (s in p.signatures) {
+                if (requiredSignature != s.toCharsString()) {
+                    return false
+                }
+            }
+            return true
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
deleted file mode 100644
index 698e8379..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.java
+++ /dev/null
@@ -1,199 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.SessionManager;
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.models.User;
-
-import retrofit2.Call;
-
-/**
- * Client for requesting authorization and email from the user.
- */
-public class TwitterAuthClient {
-
-    private static class AuthStateLazyHolder {
-        private static final AuthState INSTANCE = new AuthState();
-    }
-
-    final TwitterCore twitterCore;
-    final AuthState authState;
-    final SessionManager<TwitterSession> sessionManager;
-    final TwitterAuthConfig authConfig;
-
-    public int getRequestCode() {
-        return authConfig.getRequestCode();
-    }
-
-    /**
-     * Constructor.
-     *
-     * @throws java.lang.IllegalStateException if called before starting TwitterKit with
-     *                                         Twitter.initialize()
-     */
-    public TwitterAuthClient() {
-        this(TwitterCore.getInstance(), TwitterCore.getInstance().getAuthConfig(),
-                TwitterCore.getInstance().getSessionManager(), AuthStateLazyHolder.INSTANCE);
-    }
-
-    TwitterAuthClient(TwitterCore twitterCore, TwitterAuthConfig authConfig,
-                      SessionManager<TwitterSession> sessionManager, AuthState authState) {
-        this.twitterCore = twitterCore;
-        this.authState = authState;
-        this.authConfig = authConfig;
-        this.sessionManager = sessionManager;
-    }
-
-     /**
-     * Requests authorization.
-     *
-     * @param activity The {@link android.app.Activity} context to use for the authorization flow.
-     * @param callback The callback interface to invoke when authorization completes.
-     * @throws java.lang.IllegalArgumentException if activity or callback is null.
-     */
-    public void authorize(Activity activity, Callback<TwitterSession> callback) {
-        if (activity == null) {
-            throw new IllegalArgumentException("Activity must not be null.");
-        }
-        if (callback == null) {
-            throw new IllegalArgumentException("Callback must not be null.");
-        }
-
-        if (activity.isFinishing()) {
-            Twitter.getLogger()
-                    .e(TwitterCore.TAG, "Cannot authorize, activity is finishing.", null);
-        } else {
-            handleAuthorize(activity, callback);
-        }
-    }
-
-    private void handleAuthorize(Activity activity, Callback<TwitterSession> callback) {
-        final CallbackWrapper callbackWrapper = new CallbackWrapper(sessionManager, callback);
-        if (!authorizeUsingSSO(activity, callbackWrapper)
-                && !authorizeUsingOAuth(activity, callbackWrapper)) {
-            callbackWrapper.failure(new TwitterAuthException("Authorize failed."));
-        }
-    }
-
-    /**
-     * Cancels any pending authorization request
-     */
-    public void cancelAuthorize() {
-        authState.endAuthorize();
-    }
-
-    private boolean authorizeUsingSSO(Activity activity, CallbackWrapper callbackWrapper) {
-        if (SSOAuthHandler.isAvailable(activity)) {
-            Twitter.getLogger().d(TwitterCore.TAG, "Using SSO");
-            return authState.beginAuthorize(activity,
-                    new SSOAuthHandler(authConfig, callbackWrapper, authConfig.getRequestCode()));
-        } else {
-            return false;
-        }
-    }
-
-    private boolean authorizeUsingOAuth(Activity activity, CallbackWrapper callbackWrapper) {
-        Twitter.getLogger().d(TwitterCore.TAG, "Using OAuth");
-        return authState.beginAuthorize(activity,
-                new OAuthHandler(authConfig, callbackWrapper, authConfig.getRequestCode()));
-    }
-
-    /**
-     * Call this method when {@link android.app.Activity#onActivityResult(int, int, Intent)}
-     * is called to complete the authorization flow.
-     *
-     * @param requestCode the request code used for SSO
-     * @param resultCode the result code returned by the SSO activity
-     * @param data the result data returned by the SSO activity
-     */
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        Twitter.getLogger().d(TwitterCore.TAG,
-                "onActivityResult called with " + requestCode + " " + resultCode);
-        if (!authState.isAuthorizeInProgress()) {
-            Twitter.getLogger().e(TwitterCore.TAG, "Authorize not in progress", null);
-        } else {
-            final AuthHandler authHandler = authState.getAuthHandler();
-            if (authHandler != null &&
-                    authHandler.handleOnActivityResult(requestCode, resultCode, data)) {
-                authState.endAuthorize();
-            }
-        }
-    }
-
-    /**
-     * Requests the user's email address.
-     *
-     * @param session the user session
-     * @param callback The callback interface to invoke when the request completes. If the user
-     *                 denies access to the email address, or the email address is not available,
-     *                 an error is returned.
-     * @throws java.lang.IllegalArgumentException if session or callback are null.
-     */
-    public void requestEmail(TwitterSession session, final Callback<String> callback) {
-        final Call<User> verifyRequest = twitterCore.getApiClient(session).getAccountService()
-                .verifyCredentials(false, false, true);
-
-        verifyRequest.enqueue(new Callback<User>() {
-            @Override
-            public void success(Result<User> result) {
-                callback.success(new Result<>(result.data.email, null));
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                callback.failure(exception);
-            }
-        });
-    }
-
-    static class CallbackWrapper extends Callback<TwitterSession> {
-        private final SessionManager<TwitterSession> sessionManager;
-        private final Callback<TwitterSession> callback;
-
-        CallbackWrapper(SessionManager<TwitterSession> sessionManager,
-                Callback<TwitterSession> callback) {
-            this.sessionManager = sessionManager;
-            this.callback = callback;
-        }
-
-        @Override
-        public void success(Result<TwitterSession> result) {
-            Twitter.getLogger().d(TwitterCore.TAG, "Authorization completed successfully");
-            sessionManager.setActiveSession(result.data);
-            callback.success(result);
-        }
-
-        @Override
-        public void failure(TwitterException exception) {
-            Twitter.getLogger().e(TwitterCore.TAG, "Authorization completed with an error",
-                    exception);
-            callback.failure(exception);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.kt
new file mode 100644
index 00000000..55a6071f
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterAuthClient.kt
@@ -0,0 +1,137 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.identity
+
+import android.app.Activity
+import android.content.Intent
+import com.twitter.sdk.android.core.Callback
+import com.twitter.sdk.android.core.OAuthResult
+import com.twitter.sdk.android.core.Twitter
+import com.twitter.sdk.android.core.TwitterAuthConfig
+import com.twitter.sdk.android.core.TwitterAuthException
+import com.twitter.sdk.android.core.TwitterCore
+import com.twitter.sdk.android.core.TwitterException
+
+/**
+ * Client for requesting authorization and email from the user.
+ */
+class TwitterAuthClient internal constructor(
+        private val authConfig: TwitterAuthConfig,
+        private val authState: AuthState
+) {
+
+    val requestCode: Int
+        get() = authConfig.requestCode
+
+    private object AuthStateLazyHolder {
+        internal val INSTANCE = AuthState()
+    }
+
+    /**
+     * Constructor.
+     *
+     * @throws IllegalStateException if called before starting TwitterKit with
+     * Twitter.initialize()
+     */
+    constructor() : this(TwitterCore.getInstance().authConfig, AuthStateLazyHolder.INSTANCE)
+
+    /**
+     * Requests authorization.
+     *
+     * @param activity The [Activity] context to use for the authorization flow.
+     * @param callback The callback interface to invoke when authorization completes.
+     * @throws IllegalArgumentException if activity or callback is null.
+     */
+    fun authorize(activity: Activity?, callback: Callback<OAuthResult>?) {
+        activity ?: throw IllegalArgumentException("Activity must not be null.")
+        callback ?: throw IllegalArgumentException("Callback must not be null.")
+
+        if (activity.isFinishing) {
+            Twitter.getLogger()
+                    .e(TwitterCore.TAG, "Cannot authorize, activity is finishing.", null)
+        } else {
+            handleAuthorize(activity, callback)
+        }
+    }
+
+    private fun handleAuthorize(activity: Activity, callback: Callback<OAuthResult>) {
+        val callbackWrapper = CallbackWrapper(callback)
+        if (!authorizeUsingSSO(activity, callbackWrapper) && !authorizeUsingOAuth(activity, callbackWrapper)) {
+            callbackWrapper.failure(TwitterAuthException("Authorize failed."))
+        }
+    }
+
+    /**
+     * Cancels any pending authorization request
+     */
+    @Suppress("unused")
+    fun cancelAuthorize() {
+        authState.endAuthorize()
+    }
+
+    private fun authorizeUsingSSO(activity: Activity, callbackWrapper: CallbackWrapper): Boolean {
+        return if (SSOAuthHandler.isAvailable(activity)) {
+            Twitter.getLogger().d(TwitterCore.TAG, "Using SSO")
+            authState.beginAuthorize(activity,
+                    SSOAuthHandler(authConfig, callbackWrapper, authConfig.requestCode))
+        } else {
+            false
+        }
+    }
+
+    private fun authorizeUsingOAuth(activity: Activity, callbackWrapper: CallbackWrapper): Boolean {
+        Twitter.getLogger().d(TwitterCore.TAG, "Using OAuth")
+        return authState.beginAuthorize(activity,
+                OAuthHandler(authConfig, callbackWrapper, authConfig.requestCode))
+    }
+
+    /**
+     * Call this method when [Activity.onActivityResult]
+     * is called to complete the authorization flow.
+     *
+     * @param requestCode the request code used for SSO
+     * @param resultCode the result code returned by the SSO activity
+     * @param data the result data returned by the SSO activity
+     */
+    fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
+        Twitter.getLogger().d(TwitterCore.TAG,
+                "onActivityResult called with $requestCode $resultCode")
+        if (!authState.isAuthorizeInProgress) {
+            Twitter.getLogger().e(TwitterCore.TAG, "Authorize not in progress", null)
+        } else {
+            val authHandler = authState.authHandler
+            if (authHandler != null && authHandler.handleOnActivityResult(requestCode, resultCode, data)) {
+                authState.endAuthorize()
+            }
+        }
+    }
+
+    private class CallbackWrapper(private val callback: Callback<OAuthResult>) : Callback<OAuthResult>() {
+
+        override fun success(result: OAuthResult) {
+            Twitter.getLogger().d(TwitterCore.TAG, "Authorization completed successfully")
+            callback.success(result)
+        }
+
+        override fun failure(exception: TwitterException) {
+            Twitter.getLogger().e(TwitterCore.TAG, "Authorization completed with an error",
+                    exception)
+            callback.failure(exception)
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterLoginButton.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterLoginButton.java
deleted file mode 100644
index 3b037e4f..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterLoginButton.java
+++ /dev/null
@@ -1,209 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Resources;
-import android.graphics.Typeface;
-import android.os.Build;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.ContextThemeWrapper;
-import android.view.View;
-import android.widget.Button;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.R;
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import java.lang.ref.WeakReference;
-
-/**
- * Log in button for logging into Twitter. When the button is clicked, an authorization request
- * is started and the user is presented with a screen requesting access to the user's Twitter
- * account. If successful, a {@link com.twitter.sdk.android.core.TwitterSession} is provided
- * in the {@link com.twitter.sdk.android.core.Callback#success(com.twitter.sdk.android.core.Result)}
- */
-public class TwitterLoginButton extends Button {
-    static final String TAG = TwitterCore.TAG;
-    static final String ERROR_MSG_NO_ACTIVITY = "TwitterLoginButton requires an activity."
-            + " Override getActivity to provide the activity for this button.";
-
-    final WeakReference<Activity> activityRef;
-    volatile TwitterAuthClient authClient;
-    OnClickListener onClickListener;
-    Callback<TwitterSession> callback;
-
-    public TwitterLoginButton(Context context) {
-        this(context, null);
-    }
-
-    public TwitterLoginButton(Context context, AttributeSet attrs) {
-        this(context, attrs, android.R.attr.buttonStyle);
-    }
-
-    public TwitterLoginButton(Context context, AttributeSet attrs, int defStyle) {
-        this(context, attrs, defStyle, null);
-    }
-
-    TwitterLoginButton(Context context, AttributeSet attrs, int defStyle,
-            TwitterAuthClient authClient) {
-        super(context, attrs, defStyle);
-        this.activityRef = new WeakReference<>(getActivity());
-        this.authClient = authClient;
-        setupButton();
-
-        checkTwitterCoreAndEnable();
-    }
-
-    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
-    private void setupButton() {
-        final Resources res = getResources();
-        super.setCompoundDrawablesWithIntrinsicBounds(
-                res.getDrawable(R.drawable.tw__ic_logo_default), null, null, null);
-        super.setCompoundDrawablePadding(
-                res.getDimensionPixelSize(R.dimen.tw__login_btn_drawable_padding));
-        super.setText(R.string.tw__login_btn_txt);
-        super.setTextColor(res.getColor(R.color.tw__solid_white));
-        super.setTextSize(TypedValue.COMPLEX_UNIT_PX,
-                res.getDimensionPixelSize(R.dimen.tw__login_btn_text_size));
-        super.setTypeface(Typeface.DEFAULT_BOLD);
-        super.setPadding(res.getDimensionPixelSize(R.dimen.tw__login_btn_left_padding), 0,
-                res.getDimensionPixelSize(R.dimen.tw__login_btn_right_padding), 0);
-        super.setBackgroundResource(R.drawable.tw__login_btn);
-        super.setOnClickListener(new LoginClickListener());
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            super.setAllCaps(false);
-        }
-    }
-
-    /**
-     * Sets the {@link com.twitter.sdk.android.core.Callback} to invoke when login completes.
-     *
-     * @param callback The callback interface to invoke when login completes.
-     * @throws java.lang.IllegalArgumentException if callback is null.
-     */
-    public void setCallback(Callback<TwitterSession> callback) {
-        if (callback == null) {
-            throw new IllegalArgumentException("Callback cannot be null");
-        }
-        this.callback = callback;
-    }
-
-    /**
-     * @return the current {@link com.twitter.sdk.android.core.Callback}
-     */
-    public Callback<TwitterSession> getCallback() {
-        return callback;
-    }
-
-    /**
-     * Call this method when {@link android.app.Activity#onActivityResult(int, int, Intent)}
-     * is called to complete the authorization flow.
-     *
-     * @param requestCode the request code used for SSO
-     * @param resultCode the result code returned by the SSO activity
-     * @param data the result data returned by the SSO activity
-     */
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode == getTwitterAuthClient().getRequestCode()) {
-            getTwitterAuthClient().onActivityResult(requestCode, resultCode, data);
-        }
-    }
-
-    /**
-     * Gets the activity. Override this method if this button was created with a non-Activity
-     * context.
-     */
-    protected Activity getActivity() {
-        if (getContext() instanceof ContextThemeWrapper &&
-                ((ContextThemeWrapper) getContext()).getBaseContext() instanceof Activity) {
-            return (Activity) ((ContextThemeWrapper) getContext()).getBaseContext();
-        } else if (getContext() instanceof Activity) {
-            return (Activity) getContext();
-        } else if (isInEditMode()) {
-            return null;
-        } else {
-            throw new IllegalStateException(ERROR_MSG_NO_ACTIVITY);
-        }
-    }
-
-    @Override
-    public void setOnClickListener(OnClickListener onClickListener) {
-        this.onClickListener = onClickListener;
-    }
-
-    private class LoginClickListener implements OnClickListener {
-
-        @Override
-        public void onClick(View view) {
-            checkCallback(callback);
-            checkActivity(activityRef.get());
-
-            getTwitterAuthClient().authorize(activityRef.get(), callback);
-
-            if (onClickListener != null) {
-                onClickListener.onClick(view);
-            }
-        }
-
-        private void checkCallback(Callback callback) {
-            if (callback == null) {
-                CommonUtils.logOrThrowIllegalStateException(TwitterCore.TAG,
-                        "Callback must not be null, did you call setCallback?");
-            }
-        }
-
-        private void checkActivity(Activity activity) {
-            if (activity == null || activity.isFinishing()) {
-                CommonUtils.logOrThrowIllegalStateException(TwitterCore.TAG,
-                        ERROR_MSG_NO_ACTIVITY);
-            }
-        }
-    }
-
-    TwitterAuthClient getTwitterAuthClient() {
-        if (authClient == null) {
-            synchronized (TwitterLoginButton.class) {
-                if (authClient == null) {
-                    authClient = new TwitterAuthClient();
-                }
-            }
-        }
-        return authClient;
-    }
-
-    private void checkTwitterCoreAndEnable() {
-        //Default (Enabled) in edit mode
-        if (isInEditMode()) return;
-
-        try {
-            TwitterCore.getInstance();
-        } catch (IllegalStateException ex) {
-            //Disable if TwitterCore hasn't started
-            Twitter.getLogger().e(TAG, ex.getMessage());
-            setEnabled(false);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterLoginButton.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterLoginButton.kt
new file mode 100644
index 00000000..7b8a83d5
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/TwitterLoginButton.kt
@@ -0,0 +1,178 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.identity
+
+import android.annotation.SuppressLint
+import android.annotation.TargetApi
+import android.app.Activity
+import android.content.Context
+import android.content.Intent
+import android.graphics.Typeface
+import android.os.Build
+import android.util.AttributeSet
+import android.util.TypedValue
+import android.view.ContextThemeWrapper
+import android.view.View
+import android.widget.Button
+import com.twitter.sdk.android.core.Callback
+import com.twitter.sdk.android.core.OAuthResult
+import com.twitter.sdk.android.core.R
+import com.twitter.sdk.android.core.Twitter
+import com.twitter.sdk.android.core.TwitterCore
+import com.twitter.sdk.android.core.internal.CommonUtils
+import java.lang.ref.WeakReference
+
+/**
+ * Log in button for logging into Twitter. When the button is clicked, an authorization request
+ * is started and the user is presented with a screen requesting access to the user's Twitter
+ * account. If successful, a [OAuthResult] is provided
+ * in the [com.twitter.sdk.android.core.Callback.success]
+ */
+@SuppressLint("AppCompatCustomView")
+class TwitterLoginButton internal constructor(
+        context: Context,
+        attrs: AttributeSet?,
+        defStyle: Int,
+        @field:Volatile internal var authClient: TwitterAuthClient?
+) : Button(context, attrs, defStyle) {
+
+    internal val activityRef: WeakReference<Activity?> = WeakReference(activity)
+
+    internal var onClickListener: OnClickListener? = null
+    lateinit var callback: Callback<OAuthResult>
+
+    /**
+     * Gets the activity. Override this method if this button was created with a non-Activity
+     * context.
+     */
+    private val activity: Activity?
+        get() {
+            val context = context
+            return when {
+                context is ContextThemeWrapper && context.baseContext is Activity ->
+                    context.baseContext as Activity
+                context is Activity -> context
+                isInEditMode -> null
+                else -> throw IllegalStateException(ERROR_MSG_NO_ACTIVITY)
+            }
+        }
+
+    internal val twitterAuthClient: TwitterAuthClient?
+        get() {
+            if (authClient == null) {
+                synchronized(TwitterLoginButton::class.java) {
+                    if (authClient == null) {
+                        authClient = TwitterAuthClient()
+                    }
+                }
+            }
+            return authClient
+        }
+
+    @JvmOverloads
+    constructor(context: Context,
+                attrs: AttributeSet? = null,
+                defStyle: Int = android.R.attr.buttonStyle
+    ) : this(context, attrs, defStyle, null)
+
+    init {
+        setupButton()
+
+        checkTwitterCoreAndEnable()
+    }
+
+    @Suppress("DEPRECATION")
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    private fun setupButton() {
+        val res = resources
+
+        super.setCompoundDrawablesWithIntrinsicBounds(
+                res.getDrawable(R.drawable.tw__ic_logo_default), null, null, null)
+        super.setCompoundDrawablePadding(res.getDimensionPixelSize(R.dimen.tw__login_btn_drawable_padding))
+        super.setText(R.string.tw__login_btn_txt)
+        super.setTextColor(res.getColor(R.color.tw__solid_white))
+        super.setTextSize(TypedValue.COMPLEX_UNIT_PX, res.getDimensionPixelSize(R.dimen.tw__login_btn_text_size).toFloat())
+        super.setTypeface(Typeface.DEFAULT_BOLD)
+        super.setPadding(res.getDimensionPixelSize(R.dimen.tw__login_btn_left_padding), 0, res.getDimensionPixelSize(R.dimen.tw__login_btn_right_padding), 0)
+        super.setBackgroundResource(R.drawable.tw__login_btn)
+        super.setOnClickListener(LoginClickListener())
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            super.setAllCaps(false)
+        }
+    }
+
+    /**
+     * Call this method when [Activity.onActivityResult]
+     * is called to complete the authorization flow.
+     *
+     * @param requestCode the request code used for SSO
+     * @param resultCode the result code returned by the SSO activity
+     * @param data the result data returned by the SSO activity
+     */
+    fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
+        if (requestCode == twitterAuthClient?.requestCode) {
+            twitterAuthClient?.onActivityResult(requestCode, resultCode, data)
+        }
+    }
+
+    override fun setOnClickListener(onClickListener: OnClickListener?) {
+        this.onClickListener = onClickListener
+    }
+
+    private inner class LoginClickListener : OnClickListener {
+
+        override fun onClick(view: View) {
+            if (!::callback.isInitialized) {
+                CommonUtils.logOrThrowIllegalStateException(TwitterCore.TAG,
+                        "Callback must not be null, did you call setCallback?")
+            }
+            checkActivity(activityRef.get())
+
+            twitterAuthClient?.authorize(activityRef.get(), callback)
+
+            onClickListener?.onClick(view)
+        }
+
+        private fun checkActivity(activity: Activity?) {
+            if (activity == null || activity.isFinishing) {
+                CommonUtils.logOrThrowIllegalStateException(TwitterCore.TAG,
+                        ERROR_MSG_NO_ACTIVITY)
+            }
+        }
+    }
+
+    private fun checkTwitterCoreAndEnable() {
+        //Default (Enabled) in edit mode
+        if (isInEditMode) return
+
+        try {
+            TwitterCore.getInstance()
+        } catch (ex: IllegalStateException) {
+            //Disable if TwitterCore hasn't started
+            Twitter.getLogger().e(TAG, ex.message)
+            isEnabled = false
+        }
+
+    }
+
+    companion object {
+        internal const val TAG = TwitterCore.TAG
+        internal const val ERROR_MSG_NO_ACTIVITY = "TwitterLoginButton requires an activity." +
+                " Override getActivity to provide the activity for this button."
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/WebViewException.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/WebViewException.java
deleted file mode 100644
index 451ac0b7..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/WebViewException.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.identity;
-
-/**
- * Exception thrown when a WebDialog error occurs.
- */
-class WebViewException extends Exception {
-    private static final long serialVersionUID = -7397331487240298819L;
-
-    private final int errorCode;
-    private final String failingUrl;
-
-    WebViewException(int errorCode, String description, String failingUrl) {
-        super(description);
-        this.errorCode = errorCode;
-        this.failingUrl = failingUrl;
-    }
-
-    public int getErrorCode() {
-        return errorCode;
-    }
-
-    public String getDescription() {
-        return getMessage();
-    }
-
-    public String getFailingUrl() {
-        return failingUrl;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PersistenceStrategy.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/WebViewException.kt
similarity index 66%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PersistenceStrategy.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/identity/WebViewException.kt
index c84c1d19..b11209a1 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PersistenceStrategy.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/WebViewException.kt
@@ -15,12 +15,18 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal.persistence;
+package com.twitter.sdk.android.core.identity
 
-public interface PersistenceStrategy<T> {
-    void save(T object);
+/**
+ * Exception thrown when a WebDialog error occurs.
+ */
+internal class WebViewException(
+        val errorCode: Int,
+        description: String?,
+        val failingUrl: String?
+) : Exception(description) {
 
-    T restore();
+    val description: String?
+        get() = message
 
-    void clear();
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ActivityLifecycleManager.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ActivityLifecycleManager.java
deleted file mode 100644
index 072084c8..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ActivityLifecycleManager.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.app.Activity;
-import android.app.Application;
-import android.content.Context;
-import android.os.Bundle;
-
-import java.util.HashSet;
-import java.util.Set;
-
-/**
- * This is a convenience class that wraps the ActivityLifecycleCallbacks registration. It provides
- * an abstract Callbacks class that reduces required boilerplate code in your callbacks as well as
- * OS Version checks that make it compatible with Android versions less than Ice Cream Sandwich.
- */
-public class ActivityLifecycleManager {
-    private final ActivityLifecycleCallbacksWrapper callbacksWrapper;
-
-    /**
-     * Override the methods corresponding to the activity.
-     */
-    public abstract static class Callbacks {
-        public void onActivityCreated(Activity activity, Bundle bundle) {}
-        public void onActivityStarted(Activity activity) {}
-        public void onActivityResumed(Activity activity) {}
-        public void onActivityPaused(Activity activity) {}
-        public void onActivityStopped(Activity activity) {}
-        public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {}
-        public void onActivityDestroyed(Activity activity) {}
-    }
-
-    /**
-     * @param context Any context object, it is not stored
-     */
-    public ActivityLifecycleManager(Context context) {
-        final Application application = (Application) context.getApplicationContext();
-        callbacksWrapper = new ActivityLifecycleCallbacksWrapper(application);
-    }
-
-    /**
-     * @param callbacks The callbacks
-     * @return true if the version of the application context supports registering lifecycle
-     * callbacks
-     */
-    public boolean registerCallbacks(Callbacks callbacks) {
-        return callbacksWrapper != null &&
-                callbacksWrapper.registerLifecycleCallbacks(callbacks);
-    }
-
-    /**
-     * Unregisters all previously registered callbacks on the application context.
-     */
-    public void resetCallbacks() {
-        if (callbacksWrapper != null) {
-            callbacksWrapper.clearCallbacks();
-        }
-    }
-
-    private static class ActivityLifecycleCallbacksWrapper {
-        private final Set<Application.ActivityLifecycleCallbacks> registeredCallbacks =
-                new HashSet<>();
-        private final Application application;
-
-        ActivityLifecycleCallbacksWrapper(Application application) {
-            this.application = application;
-        }
-
-        private void clearCallbacks() {
-            for (Application.ActivityLifecycleCallbacks callback : registeredCallbacks) {
-                application.unregisterActivityLifecycleCallbacks(callback);
-            }
-        }
-
-        private boolean registerLifecycleCallbacks(final Callbacks callbacks) {
-
-            if (application != null) {
-                final Application.ActivityLifecycleCallbacks callbackWrapper =
-                        new Application.ActivityLifecycleCallbacks() {
-
-                            @Override
-                            public void onActivityCreated(Activity activity, Bundle bundle) {
-                                callbacks.onActivityCreated(activity, bundle);
-                            }
-
-                            @Override
-                            public void onActivityStarted(Activity activity) {
-                                callbacks.onActivityStarted(activity);
-                            }
-
-                            @Override
-                            public void onActivityResumed(Activity activity) {
-                                callbacks.onActivityResumed(activity);
-                            }
-
-                            @Override
-                            public void onActivityPaused(Activity activity) {
-                                callbacks.onActivityPaused(activity);
-                            }
-
-                            @Override
-                            public void onActivityStopped(Activity activity) {
-                                callbacks.onActivityStopped(activity);
-                            }
-
-                            @Override
-                            public void onActivitySaveInstanceState(Activity activity,
-                                    Bundle bundle) {
-                                callbacks.onActivitySaveInstanceState(activity, bundle);
-                            }
-
-                            @Override
-                            public void onActivityDestroyed(Activity activity) {
-                                callbacks.onActivityDestroyed(activity);
-                            }
-                        };
-                application.registerActivityLifecycleCallbacks(callbackWrapper);
-                this.registeredCallbacks.add(callbackWrapper);
-                return true;
-            }
-            return false;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.java
deleted file mode 100644
index 86e64988..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.java
+++ /dev/null
@@ -1,232 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.content.Context;
-import android.content.res.Resources;
-
-import com.twitter.sdk.android.core.Twitter;
-
-import java.io.Closeable;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Scanner;
-
-public class CommonUtils {
-    static final String TRACE_ENABLED_RESOURCE_NAME = "com.twitter.sdk.android.TRACE_ENABLED";
-    static final boolean TRACE_ENABLED_DEFAULT = false;
-    private static Boolean clsTrace;
-
-    public static String streamToString(InputStream is) throws IOException {
-        // Previous code was running into this: http://code.google.com/p/android/issues/detail?id=14562
-        // on Android 2.3.3. The below code, cribbed from: http://weblogs.java.net/blog/pat/archive/2004/10/stupid_scanner_1.html
-        // does not exhibit that problem.
-        final java.util.Scanner s = new Scanner(is).useDelimiter("\\A");
-        return s.hasNext() ? s.next() : "";
-    }
-
-    /**
-     * Copies all available data from the {@link InputStream} into the {@link OutputStream}, using the
-     * provided <code>buffer</code>. Neither stream is closed during this call.
-     */
-    public static void copyStream(InputStream is, OutputStream os, byte[] buffer)
-            throws IOException {
-        int count;
-        while ((count = is.read(buffer)) != -1) {
-            os.write(buffer, 0, count);
-        }
-    }
-
-    public static void closeQuietly(Closeable closeable) {
-        if (closeable != null) {
-            try {
-                closeable.close();
-            } catch (RuntimeException rethrown) {
-                throw rethrown;
-            } catch (Exception ignored) {
-            }
-        }
-    }
-
-    /**
-     * Closes a {@link Closeable}, ignoring any {@link IOException}s raised in the process.
-     * Does nothing if the {@link Closeable} is <code>null</code>.
-     *
-     * @param c {@link Closeable} to close
-     */
-    public static void closeOrLog(Closeable c, String message) {
-        if (c != null) {
-            try {
-                c.close();
-            } catch (IOException e) {
-                Twitter.getLogger().e(Twitter.TAG, message, e);
-            }
-        }
-    }
-
-    /**
-     * Uses the given context's application icon to retrieve the package name for the resources for the context
-     * This package name only differs from context.getPackageName() when using aapt parameter --rename-manifest-package
-     * @param context Context to get resource package name from
-     * @return String representing the package name of the resources for the given context
-     */
-    static String getResourcePackageName(Context context) {
-        // There should always be an icon
-        // http://developer.android.com/guide/topics/manifest/application-element.html#icon
-        // safety check anyway to prevent exceptions
-        final int iconId = context.getApplicationContext().getApplicationInfo().icon;
-        if (iconId > 0) {
-            return context.getResources().getResourcePackageName(iconId);
-        } else {
-            return context.getPackageName();
-        }
-    }
-
-    static int getResourcesIdentifier(Context context, String key, String resourceType) {
-        final Resources resources = context.getResources();
-        return resources.getIdentifier(key, resourceType, getResourcePackageName(context));
-    }
-
-    /**
-     * <p>
-     * Gets a value for a boolean resource by its name. If a key is not present, the provided default value
-     * will be returned.
-     * </p>
-     * <p>
-     * Tries to look up a boolean value two ways:
-     * <ol>
-     * <li>As a <code>bool</code> resource. A discovered value is returned as-is.</li>
-     * <li>As a <code>string</code> resource. A discovered value is turned into a boolean with
-     * {@link Boolean#parseBoolean(String)} before being returned.</li>
-     * </ol>
-     * </p>
-     *
-     * @param context {@link Context} to use when accessing resources
-     * @param key {@link String} name of the boolean value to look up
-     * @param defaultValue value to be returned if the specified resource could be not be found.
-     * @return {@link String} value of the specified property, or an empty string if it could not be found.
-     */
-    public static boolean getBooleanResourceValue(Context context, String key,
-                                                  boolean defaultValue) {
-        if (context != null) {
-            final Resources resources = context.getResources();
-
-            if (resources != null) {
-                int id = getResourcesIdentifier(context, key, "bool");
-
-                if (id > 0) {
-                    return resources.getBoolean(id);
-                }
-
-                id = getResourcesIdentifier(context, key, "string");
-
-                if (id > 0) {
-                    return Boolean.parseBoolean(context.getString(id));
-                }
-            }
-        }
-
-        return defaultValue;
-    }
-
-    /**
-     * <p>
-     * Gets a value for a string resource by its name. If a key is not present, the provided default value
-     * will be returned.
-     * </p>
-     *
-     * @param context {@link Context} to use when accessing resources
-     * @param key {@link String} name of the boolean value to look up
-     * @param defaultValue value to be returned if the specified resource could be not be found.
-     * @return {@link String} value of the specified property, or an empty string if it could not be found.
-     */
-    public static String getStringResourceValue(Context context, String key, String defaultValue) {
-        if (context != null) {
-            final Resources resources = context.getResources();
-
-            if (resources != null) {
-                final int id = getResourcesIdentifier(context, key, "string");
-
-                if (id > 0) {
-                    return resources.getString(id);
-                }
-            }
-        }
-
-        return defaultValue;
-    }
-
-    /**
-     */
-    static boolean isClsTrace(Context context) {
-        // Since the cached value is a Boolean object, it can be null. If it's null, load the value
-        // and cache it.
-        if (clsTrace == null) {
-            clsTrace = getBooleanResourceValue(context, TRACE_ENABLED_RESOURCE_NAME,
-                    TRACE_ENABLED_DEFAULT);
-        }
-
-        return clsTrace;
-    }
-
-    /**
-     * Used internally to log only when the com.twitter.sdk.android.TRACE_ENABLED resource value
-     * is set to true.  When it is, this API passes processing to the log API.
-     */
-    public static void logControlled(Context context, String msg){
-        if (isClsTrace(context)){
-            Twitter.getLogger().d(Twitter.TAG, msg);
-        }
-    }
-
-    /**
-     * Used internally to log errors only when the com.twitter.sdk.android.TRACE_ENABLED resource
-     * value is set to true.  When it is, this API passes processing to the logError API.
-     */
-    public static void logControlledError(Context context, String msg, Throwable tr){
-        if (isClsTrace(context)){
-            Twitter.getLogger().e(Twitter.TAG, msg);
-        }
-    }
-
-    /**
-     * Used internally to log only when the com.twitter.sdk.android.TRACE_ENABLED resource value
-     * is set to true.  When it is, this API passes processing to the log API.
-     */
-    public static void logControlled(Context context, int level, String tag, String msg) {
-        if (isClsTrace(context)) {
-            Twitter.getLogger().log(level, Twitter.TAG, msg);
-        }
-    }
-
-    /**
-     *  If {@link Twitter#isDebug()}, throws an IllegalStateException,
-     *  else logs a warning.
-     *
-     * @param logTag the log tag to use for logging
-     * @param errorMsg the error message
-     */
-    public static void logOrThrowIllegalStateException(String logTag, String errorMsg) {
-        if (Twitter.isDebug()) {
-            throw new IllegalStateException(errorMsg);
-        } else {
-            Twitter.getLogger().w(logTag, errorMsg);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.kt
new file mode 100644
index 00000000..2bce5db4
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CommonUtils.kt
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal
+
+import android.content.Context
+import com.twitter.sdk.android.core.Twitter
+
+object CommonUtils {
+
+    /**
+     * Uses the given context's application icon to retrieve the package name for the resources for the context
+     * This package name only differs from context.getPackageName() when using aapt parameter --rename-manifest-package
+     * @param context Context to get resource package name from
+     * @return String representing the package name of the resources for the given context
+     */
+    private fun getResourcePackageName(context: Context): String {
+        // There should always be an icon
+        // http://developer.android.com/guide/topics/manifest/application-element.html#icon
+        // safety check anyway to prevent exceptions
+        val iconId = context.applicationContext.applicationInfo.icon
+        return if (iconId > 0) {
+            context.resources.getResourcePackageName(iconId)
+        } else {
+            context.packageName
+        }
+    }
+
+    private fun getResourcesIdentifier(context: Context, key: String, resourceType: String): Int {
+        val resources = context.resources
+        return resources.getIdentifier(key, resourceType, getResourcePackageName(context))
+    }
+
+    /**
+     *
+     *
+     * Gets a value for a string resource by its name. If a key is not present, the provided default value
+     * will be returned.
+     *
+     *
+     * @param context [Context] to use when accessing resources
+     * @param key [String] name of the boolean value to look up
+     * @param defaultValue value to be returned if the specified resource could be not be found.
+     * @return [String] value of the specified property, or an empty string if it could not be found.
+     */
+    fun getStringResourceValue(context: Context?, key: String, defaultValue: String): String {
+        if (context != null) {
+            val resources = context.resources
+
+            if (resources != null) {
+                val id = getResourcesIdentifier(context, key, "string")
+
+                if (id > 0) {
+                    return resources.getString(id)
+                }
+            }
+        }
+
+        return defaultValue
+    }
+
+    /**
+     * If [Twitter.isDebug], throws an IllegalStateException,
+     * else logs a warning.
+     *
+     * @param logTag the log tag to use for logging
+     * @param errorMsg the error message
+     */
+    fun logOrThrowIllegalStateException(logTag: String, errorMsg: String) {
+        if (Twitter.isDebug) {
+            throw IllegalStateException(errorMsg)
+        } else {
+            Twitter.getLogger().w(logTag, errorMsg)
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CurrentTimeProvider.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CurrentTimeProvider.java
deleted file mode 100644
index b8dd1932..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/CurrentTimeProvider.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-/**
- * Internal interface representing a time source. Useful for mocking out in tests so that system time can be
- * fixed and simulated.
- *
- * @author mfurtak
- */
-public interface CurrentTimeProvider {
-    /**
-     * @return the current time in milliseconds
-     */
-    long getCurrentTimeMillis();
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ExecutorUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ExecutorUtils.java
deleted file mode 100644
index a8e6529f..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/ExecutorUtils.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.Twitter;
-
-import java.util.Locale;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicLong;
-
-import static java.util.concurrent.TimeUnit.SECONDS;
-
-public final class ExecutorUtils {
-    private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
-    private static final int CORE_POOL_SIZE = CPU_COUNT + 1;
-    private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;
-    private static final long KEEP_ALIVE = 1L;
-    private static final long DEFAULT_TERMINATION_TIMEOUT = 1L;
-
-    private ExecutorUtils() {
-    }
-
-    public static ExecutorService buildThreadPoolExecutorService(String name) {
-        final ThreadFactory threadFactory = ExecutorUtils.getNamedThreadFactory(name);
-        final ExecutorService executor =
-                new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE, SECONDS,
-                        new LinkedBlockingQueue<>(), threadFactory);
-        ExecutorUtils.addDelayedShutdownHook(name, executor);
-        return executor;
-    }
-
-    public static ScheduledExecutorService buildSingleThreadScheduledExecutorService(String name) {
-        final ThreadFactory threadFactory = ExecutorUtils.getNamedThreadFactory(name);
-        final ScheduledExecutorService executor =
-                Executors.newSingleThreadScheduledExecutor(threadFactory);
-        ExecutorUtils.addDelayedShutdownHook(name, executor);
-        return executor;
-    }
-
-    static ThreadFactory getNamedThreadFactory(final String threadNameTemplate) {
-        final AtomicLong count = new AtomicLong(1);
-
-        return runnable -> {
-            final Thread thread = Executors.defaultThreadFactory().newThread(runnable);
-            thread.setName(threadNameTemplate + count.getAndIncrement());
-            return thread;
-        };
-    }
-
-    static void addDelayedShutdownHook(String serviceName, ExecutorService service){
-        ExecutorUtils.addDelayedShutdownHook(serviceName, service, DEFAULT_TERMINATION_TIMEOUT,
-                SECONDS);
-    }
-
-    static void addDelayedShutdownHook(final String serviceName,
-            final ExecutorService service, final long terminationTimeout, final TimeUnit timeUnit) {
-        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
-            try {
-                service.shutdown();
-                if (!service.awaitTermination(terminationTimeout, timeUnit)) {
-                    Twitter.getLogger().d(Twitter.TAG, serviceName + " did not shutdown in the"
-                            + " allocated time. Requesting immediate shutdown.");
-                    service.shutdownNow();
-                }
-            } catch (InterruptedException e) {
-                Twitter.getLogger().d(Twitter.TAG, String.format(Locale.US,
-                        "Interrupted while waiting for %s to shut down." +
-                                " Requesting immediate shutdown.",
-                        serviceName));
-                service.shutdownNow();
-            }
-        }, "Twitter Shutdown Hook for " + serviceName));
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java
deleted file mode 100644
index fc75dc0a..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionMonitor.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.app.Activity;
-import android.text.format.DateUtils;
-
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.SessionManager;
-
-import java.util.Calendar;
-import java.util.TimeZone;
-import java.util.concurrent.ExecutorService;
-
-/**
- * A session monitor for validating sessions.
- * @param <T>
- */
-public class SessionMonitor<T extends Session> {
-    protected final MonitorState monitorState;
-
-    private final SystemCurrentTimeProvider time;
-    private final SessionManager<T> sessionManager;
-    private final ExecutorService executorService;
-    private final SessionVerifier sessionVerifier;
-
-    /**
-     * @param sessionManager A user auth based session manager
-     * @param executorService used to
-     */
-    public SessionMonitor(SessionManager<T> sessionManager, ExecutorService executorService,
-            SessionVerifier<T> sessionVerifier) {
-        this(sessionManager, new SystemCurrentTimeProvider(),
-                executorService, new MonitorState(), sessionVerifier);
-    }
-
-    SessionMonitor(SessionManager<T> sessionManager, SystemCurrentTimeProvider time,
-            ExecutorService executorService, MonitorState monitorState, SessionVerifier
-            sessionVerifier) {
-        this.time = time;
-        this.sessionManager = sessionManager;
-        this.executorService = executorService;
-        this.monitorState = monitorState;
-        this.sessionVerifier = sessionVerifier;
-    }
-
-    /**
-     * This is how we hook into the activity lifecycle to detect if the user is using the app.
-     * @param activityLifecycleManager
-     */
-    public void monitorActivityLifecycle(ActivityLifecycleManager activityLifecycleManager) {
-        activityLifecycleManager.registerCallbacks(new ActivityLifecycleManager.Callbacks() {
-            @Override
-            public void onActivityStarted(Activity activity) {
-                triggerVerificationIfNecessary();
-            }
-        });
-    }
-
-    /**
-     * triggerVerificationIfNecessary checks if there are any sessions to verify and if enough time
-     * has passed in order to run another verification. If it determines it can verify, it submits a
-     * runnable that does the verification in a background thread.
-     */
-    public void triggerVerificationIfNecessary() {
-        final Session session = sessionManager.getActiveSession();
-        final long currentTime = time.getCurrentTimeMillis();
-        final boolean startVerification = session != null &&
-                monitorState.beginVerification(currentTime);
-        if (startVerification) {
-            executorService.submit(this::verifyAll);
-        }
-    }
-
-    protected void verifyAll() {
-        for (T session : sessionManager.getSessionMap().values()) {
-            sessionVerifier.verifySession(session);
-        }
-        monitorState.endVerification(time.getCurrentTimeMillis());
-    }
-
-    /**
-     * Encapsulates time based state that rate limits our calls to the verification api.
-     * Ensure we don't end up with racy parallel calls with beginVerification.
-     */
-    protected static class MonitorState {
-        private static final long TIME_THRESHOLD_IN_MILLIS = 6 * DateUtils.HOUR_IN_MILLIS;
-
-        public boolean verifying;
-        public long lastVerification;
-
-        private final Calendar utcCalendar;
-
-        public MonitorState() {
-            this.utcCalendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
-        }
-
-        public synchronized boolean beginVerification(long currentTime) {
-            final boolean isPastThreshold
-                    = currentTime - lastVerification > TIME_THRESHOLD_IN_MILLIS;
-            final boolean dayHasChanged = !isOnSameDate(currentTime, lastVerification);
-
-            if (!verifying && (isPastThreshold || dayHasChanged)) {
-                return verifying = true;
-            }
-            return false;
-        }
-
-        public synchronized void endVerification(long currentTime) {
-            verifying = false;
-            lastVerification = currentTime;
-        }
-
-        private boolean isOnSameDate(long timeA, long timeB) {
-            utcCalendar.setTimeInMillis(timeA);
-            final int dayA = utcCalendar.get(Calendar.DAY_OF_YEAR);
-            final int yearA = utcCalendar.get(Calendar.YEAR);
-
-            utcCalendar.setTimeInMillis(timeB);
-            final int dayB = utcCalendar.get(Calendar.DAY_OF_YEAR);
-            final int yearB = utcCalendar.get(Calendar.YEAR);
-
-            return dayA == dayB && yearA == yearB;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SystemCurrentTimeProvider.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SystemCurrentTimeProvider.java
deleted file mode 100644
index 91344658..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SystemCurrentTimeProvider.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-/**
- * Default implementation of the {@link CurrentTimeProvider} which returns the system time
- *
- * @author mfurtak
- */
-public class SystemCurrentTimeProvider implements CurrentTimeProvider {
-
-    @Override
-    public long getCurrentTimeMillis() {
-        return System.currentTimeMillis();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.java
deleted file mode 100644
index d37201f0..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.net.Uri;
-import android.os.Build;
-
-import java.text.Normalizer;
-
-public class TwitterApi {
-
-    public static final String BASE_HOST = "api.twitter.com";
-    public static final String BASE_HOST_URL = "https://" + BASE_HOST;
-
-    private final String baseHostUrl;
-
-    public TwitterApi() {
-        this(BASE_HOST_URL);
-    }
-
-    public TwitterApi(String baseHostUrl) {
-        this.baseHostUrl = baseHostUrl;
-    }
-
-    public String getBaseHostUrl() {
-        return baseHostUrl;
-    }
-
-    /**
-     * Builds upon the base host url by appending paths to the url.
-     *
-     * @param paths the paths to append
-     * @return {@link android.net.Uri.Builder} that can be used to further build the url.
-     */
-    public Uri.Builder buildUponBaseHostUrl(String... paths) {
-        final Uri.Builder builder = Uri.parse(getBaseHostUrl()).buildUpon();
-        if (paths != null) {
-            for (String p : paths) {
-                builder.appendPath(p);
-            }
-        }
-        return builder;
-    }
-
-    /**
-     * @return User-Agent string that looks like:
-     * client_name/client_version (client_version_code) model/os_version (manufacturer;device;brand;product;client_source;preload;on_wifi)
-     * <p/>
-     * Example: TwitterAndroidSDK/1.1.0.dev HTC One/4.1.2 (HTC;HTC One;tmous;m7)
-     * <p/>
-     * See go/ooua for more information.
-     */
-    public static String buildUserAgent(String clientName, String version) {
-        final StringBuilder ua = new StringBuilder(clientName)
-                .append('/').append(version)
-                        // NOTE: We currently do not provide client_version_code information.
-                .append(' ')
-                .append(Build.MODEL).append('/').append(Build.VERSION.RELEASE)
-                .append(" (")
-                .append(Build.MANUFACTURER).append(';')
-                .append(Build.MODEL).append(';')
-                .append(Build.BRAND).append(';')
-                .append(Build.PRODUCT)
-                        // NOTE: We do not add client_source, preload, or wifi information.
-                .append(')');
-        return normalizeString(ua.toString());
-    }
-
-    static String normalizeString(String str) {
-        final String normalizedString = Normalizer.normalize(str, Normalizer.Form.NFD);
-        return stripNonAscii(normalizedString);
-    }
-
-    static String stripNonAscii(String str) {
-        final StringBuilder sb = new StringBuilder(str.length());
-        for (int i = 0; i < str.length(); i++) {
-            final char c = str.charAt(i);
-            if (c > '\u001f' && c < '\u007f') {
-                sb.append(c);
-            }
-        }
-
-        return sb.toString();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.kt
new file mode 100644
index 00000000..cd288ff8
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterApi.kt
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal
+
+import android.net.Uri
+import android.os.Build
+
+import java.text.Normalizer
+
+class TwitterApi @JvmOverloads constructor(val baseHostUrl: String = BASE_HOST_URL) {
+
+    /**
+     * Builds upon the base host url by appending paths to the url.
+     *
+     * @param paths the paths to append
+     * @return [Uri.Builder] that can be used to further build the url.
+     */
+    fun buildUponBaseHostUrl(vararg paths: String): Uri.Builder {
+        val builder = Uri.parse(baseHostUrl).buildUpon()
+        for (p in paths) {
+            builder.appendPath(p)
+        }
+        return builder
+    }
+
+    companion object {
+
+        private const val BASE_HOST = "api.twitter.com"
+        const val BASE_HOST_URL = "https://$BASE_HOST"
+
+        /**
+         * @return User-Agent string that looks like:
+         * client_name/client_version (client_version_code) model/os_version (manufacturer;device;brand;product;client_source;preload;on_wifi)
+         *
+         *
+         * Example: TwitterAndroidSDK/1.1.0.dev HTC One/4.1.2 (HTC;HTC One;tmous;m7)
+         *
+         *
+         * See go/ooua for more information.
+         */
+        fun buildUserAgent(clientName: String, version: String): String {
+            val ua = StringBuilder(clientName)
+                    .append('/').append(version)
+                    // NOTE: We currently do not provide client_version_code information.
+                    .append(' ')
+                    .append(Build.MODEL).append('/').append(Build.VERSION.RELEASE)
+                    .append(" (")
+                    .append(Build.MANUFACTURER).append(';')
+                    .append(Build.MODEL).append(';')
+                    .append(Build.BRAND).append(';')
+                    .append(Build.PRODUCT)
+                    // NOTE: We do not add client_source, preload, or wifi information.
+                    .append(')')
+            return normalizeString(ua.toString())
+        }
+
+        private fun normalizeString(str: String): String {
+            val normalizedString = Normalizer.normalize(str, Normalizer.Form.NFD)
+            return stripNonAscii(normalizedString)
+        }
+
+        private fun stripNonAscii(str: String): String {
+            val sb = StringBuilder(str.length)
+            for (i in 0 until str.length) {
+                val c = str[i]
+                if (c in ' '..'~') {
+                    sb.append(c)
+                }
+            }
+
+            return sb.toString()
+        }
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifier.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifier.java
deleted file mode 100644
index 8939ad58..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/TwitterSessionVerifier.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.services.AccountService;
-
-import java.io.IOException;
-
-public class TwitterSessionVerifier implements SessionVerifier<TwitterSession> {
-    private final AccountServiceProvider accountServiceProvider;
-
-    public TwitterSessionVerifier() {
-        this(new AccountServiceProvider());
-    }
-
-    TwitterSessionVerifier(AccountServiceProvider accountServiceProvider) {
-        this.accountServiceProvider = accountServiceProvider;
-    }
-
-    /**
-     * Verify session uses the synchronous api to simplify marking when verification is done.
-     *
-     * @param session
-     */
-    public void verifySession(final TwitterSession session) {
-        final AccountService accountService = accountServiceProvider.getAccountService(session);
-        try {
-            accountService.verifyCredentials(true, false, false).execute();
-        } catch (IOException | RuntimeException e) {
-            // We ignore failures since we will attempt the verification again the next time
-            // the verification period comes up. This has the potential to lose events, but we
-            // are not aiming towards 100% capture rate.
-        }
-    }
-
-    /**
-     * Produces new service instances, this code is a separate class so that we can more easily test
-     * SessionMonitor
-     */
-    protected static class AccountServiceProvider {
-        public AccountService getAccountService(TwitterSession session) {
-            return new TwitterApiClient(session).getAccountService();
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptor.java
deleted file mode 100644
index 624569c3..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthInterceptor.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import com.twitter.sdk.android.core.GuestSession;
-import com.twitter.sdk.android.core.GuestSessionProvider;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-
-import java.io.IOException;
-
-import okhttp3.Interceptor;
-import okhttp3.Request;
-import okhttp3.Response;
-
-/**
- * Signs requests with OAuth2 signature.
- */
-public class GuestAuthInterceptor implements Interceptor {
-    final GuestSessionProvider guestSessionProvider;
-
-    public GuestAuthInterceptor(GuestSessionProvider guestSessionProvider) {
-        this.guestSessionProvider = guestSessionProvider;
-    }
-
-    @Override
-    public Response intercept(Chain chain) throws IOException {
-        final Request request = chain.request();
-
-        final GuestSession session = guestSessionProvider.getCurrentSession();
-        final GuestAuthToken token = session == null ? null : session.getAuthToken();
-        if (token != null) {
-            final Request.Builder builder = request.newBuilder();
-            addAuthHeaders(builder, token);
-            return chain.proceed(builder.build());
-        }
-
-        return chain.proceed(request);
-    }
-
-    static void addAuthHeaders(Request.Builder builder, GuestAuthToken token) {
-        final String authHeader = token.getTokenType() + " " + token.getAccessToken();
-
-        builder.header(OAuthConstants.HEADER_AUTHORIZATION, authHeader);
-        builder.header(OAuthConstants.HEADER_GUEST_TOKEN, token.getGuestToken());
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptor.java
deleted file mode 100644
index 15ae1fd6..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthNetworkInterceptor.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import java.io.IOException;
-
-import okhttp3.Interceptor;
-import okhttp3.Response;
-
-/**
- * The Twitter API uses HTTP status code of 403 to indicate guest session needs to be refreshed.
- * However, the OkHttp Authenticator that refreshes guest sessions only responds to 401. So we map
- * all 403 to 401 responses.
- */
-public class GuestAuthNetworkInterceptor implements Interceptor {
-    @Override
-    public Response intercept(Chain chain) throws IOException {
-        Response response = chain.proceed(chain.request());
-        if (response.code() == 403) {
-            response = response.newBuilder().code(401).message("Unauthorized").build();
-        }
-        return response;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java
deleted file mode 100644
index fc73e658..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/GuestAuthenticator.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import com.twitter.sdk.android.core.GuestSession;
-import com.twitter.sdk.android.core.GuestSessionProvider;
-import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-
-import java.io.IOException;
-
-import okhttp3.Authenticator;
-import okhttp3.Headers;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.Route;
-
-/**
- * Refreshes guest auth session when server indicates session is expired.
- */
-public class GuestAuthenticator implements Authenticator {
-    static final int MAX_RETRIES = 2;
-    final GuestSessionProvider guestSessionProvider;
-
-    public GuestAuthenticator(GuestSessionProvider guestSessionProvider) {
-        this.guestSessionProvider = guestSessionProvider;
-    }
-
-    @Override
-    public Request authenticate(Route route, Response response) throws IOException {
-        return reauth(response);
-    }
-
-    Request reauth(Response response) {
-        if (canRetry(response)) {
-            final GuestSession session = guestSessionProvider
-                    .refreshCurrentSession(getExpiredSession(response));
-            final GuestAuthToken token = session == null ? null : session.getAuthToken();
-            if (token != null) {
-                return resign(response.request(), token);
-            }
-        }
-
-        return null;
-    }
-
-    GuestSession getExpiredSession(Response response) {
-        final Headers headers = response.request().headers();
-        final String auth = headers.get(OAuthConstants.HEADER_AUTHORIZATION);
-        final String guest = headers.get(OAuthConstants.HEADER_GUEST_TOKEN);
-
-        if (auth != null && guest != null) {
-            final GuestAuthToken token =
-                    new GuestAuthToken("bearer", auth.replace("bearer ", ""), guest);
-            return new GuestSession(token);
-        }
-
-        return null;
-    }
-
-    Request resign(Request request, GuestAuthToken token) {
-        final Request.Builder builder = request.newBuilder();
-        GuestAuthInterceptor.addAuthHeaders(builder, token);
-        return builder.build();
-    }
-
-    boolean canRetry(Response response) {
-        int responseCount = 1;
-        while ((response = response.priorResponse()) != null) {
-            responseCount++;
-        }
-
-        return responseCount < MAX_RETRIES;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java
deleted file mode 100644
index 74a654bd..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OAuth1aInterceptor.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.internal.oauth.OAuth1aHeaders;
-import com.twitter.sdk.android.core.internal.oauth.OAuthConstants;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-
-import okhttp3.FormBody;
-import okhttp3.HttpUrl;
-import okhttp3.Interceptor;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-/**
- * Signs requests with OAuth1a signature
- */
-public class OAuth1aInterceptor implements Interceptor {
-    final Session<? extends TwitterAuthToken> session;
-    final TwitterAuthConfig authConfig;
-
-    public OAuth1aInterceptor(Session<? extends TwitterAuthToken> session,
-            TwitterAuthConfig authConfig) {
-        this.session = session;
-        this.authConfig = authConfig;
-    }
-
-    @Override
-    public Response intercept(Chain chain) throws IOException {
-        final Request request = chain.request();
-        final Request hackRequest = request.newBuilder()
-                .url(urlWorkaround(request.url()))
-                .build();
-
-        final Request newRequest = hackRequest
-                .newBuilder()
-                .header(OAuthConstants.HEADER_AUTHORIZATION, getAuthorizationHeader(hackRequest))
-                .build();
-
-        return chain.proceed(newRequest);
-    }
-
-    HttpUrl urlWorkaround(HttpUrl url) {
-        final HttpUrl.Builder builder = url.newBuilder().query(null);
-
-        final int size = url.querySize();
-        for (int i = 0; i < size; i++) {
-            builder.addEncodedQueryParameter(UrlUtils.percentEncode(url.queryParameterName(i)),
-                    UrlUtils.percentEncode(url.queryParameterValue(i)));
-        }
-
-        return builder.build();
-    }
-
-    String getAuthorizationHeader(Request request) throws IOException {
-        return new OAuth1aHeaders().getAuthorizationHeader(authConfig,
-                session.getAuthToken(), null, request.method(), request.url().toString(),
-                getPostParams(request));
-    }
-
-    Map<String, String> getPostParams(Request request) throws IOException {
-        final Map<String, String> params = new HashMap<>();
-        if ("POST".equals(request.method().toUpperCase(Locale.US))) {
-            final RequestBody output = request.body();
-            if (output instanceof FormBody) {
-                final FormBody body = (FormBody) output;
-                for (int i = 0; i < body.size(); i++) {
-                    params.put(body.encodedName(i), body.value(i));
-                }
-            }
-        }
-        return params;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OkHttpClientHelper.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OkHttpClientHelper.java
deleted file mode 100644
index 981d5014..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/OkHttpClientHelper.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import com.twitter.sdk.android.core.GuestSessionProvider;
-import com.twitter.sdk.android.core.Session;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-
-import okhttp3.CertificatePinner;
-import okhttp3.OkHttpClient;
-
-public class OkHttpClientHelper {
-    public static OkHttpClient getOkHttpClient(GuestSessionProvider guestSessionProvider) {
-        return addGuestAuth(new OkHttpClient.Builder(), guestSessionProvider).build();
-    }
-
-    public static OkHttpClient getOkHttpClient(Session<? extends TwitterAuthToken> session,
-            TwitterAuthConfig authConfig) {
-        if (session == null) {
-            throw new IllegalArgumentException("Session must not be null.");
-        }
-
-        return addSessionAuth(new OkHttpClient.Builder(), session, authConfig).build();
-    }
-
-    public static OkHttpClient getCustomOkHttpClient(OkHttpClient httpClient,
-            GuestSessionProvider guestSessionProvider) {
-        if (httpClient == null) {
-            throw new IllegalArgumentException("HttpClient must not be null.");
-        }
-
-        return addGuestAuth(httpClient.newBuilder(), guestSessionProvider)
-                .build();
-    }
-
-    public static OkHttpClient getCustomOkHttpClient(
-            OkHttpClient httpClient,
-            Session<? extends TwitterAuthToken> session,
-            TwitterAuthConfig authConfig) {
-        if (session == null) {
-            throw new IllegalArgumentException("Session must not be null.");
-        }
-
-        if (httpClient == null) {
-            throw new IllegalArgumentException("HttpClient must not be null.");
-        }
-
-        return addSessionAuth(httpClient.newBuilder(), session, authConfig)
-                .build();
-    }
-
-    static OkHttpClient.Builder addGuestAuth(OkHttpClient.Builder builder,
-                                             GuestSessionProvider guestSessionProvider) {
-        return builder
-                .certificatePinner(getCertificatePinner())
-                .authenticator(new GuestAuthenticator(guestSessionProvider))
-                .addInterceptor(new GuestAuthInterceptor(guestSessionProvider))
-                .addNetworkInterceptor(new GuestAuthNetworkInterceptor());
-    }
-
-    static OkHttpClient.Builder addSessionAuth(OkHttpClient.Builder builder,
-                                               Session<? extends TwitterAuthToken> session,
-                                               TwitterAuthConfig authConfig) {
-        return builder
-                .certificatePinner(getCertificatePinner())
-                .addInterceptor(new OAuth1aInterceptor(session, authConfig));
-    }
-
-    public static CertificatePinner getCertificatePinner() {
-        return new CertificatePinner.Builder()
-                .add("*.twitter.com", "sha1/I0PRSKJViZuUfUYaeX7ATP7RcLc=") //VERISIGN_CLASS1
-                .add("*.twitter.com", "sha1/VRmyeKyygdftp6vBg5nDu2kEJLU=") //VERISIGN_CLASS1_G3
-                .add("*.twitter.com", "sha1/Eje6RRfurSkm/cHN/r7t8t7ZFFw=") //VERISIGN_CLASS2_G2
-                .add("*.twitter.com", "sha1/Wr7Fddyu87COJxlD/H8lDD32YeM=") //VERISIGN_CLASS2_G3
-                .add("*.twitter.com", "sha1/GiG0lStik84Ys2XsnA6TTLOB5tQ=") //VERISIGN_CLASS3_G2
-                .add("*.twitter.com", "sha1/IvGeLsbqzPxdI0b0wuj2xVTdXgc=") //VERISIGN_CLASS3_G3
-                .add("*.twitter.com", "sha1/7WYxNdMb1OymFMQp4xkGn5TBJlA=") //VERISIGN_CLASS3_G4
-                .add("*.twitter.com", "sha1/sYEIGhmkwJQf+uiVKMEkyZs0rMc=") //VERISIGN_CLASS3_G5
-                .add("*.twitter.com", "sha1/PANDaGiVHPNpKri0Jtq6j+ki5b0=") //VERISIGN_CLASS4_G3
-                .add("*.twitter.com", "sha1/u8I+KQuzKHcdrT6iTb30I70GsD0=") //VERISIGN_UNIVERSAL
-                .add("*.twitter.com", "sha1/wHqYaI2J+6sFZAwRfap9ZbjKzE4=") //GEOTRUST_GLOBAL
-                .add("*.twitter.com", "sha1/cTg28gIxU0crbrplRqkQFVggBQk=") //GEOTRUST_GLOBAL2
-                .add("*.twitter.com", "sha1/sBmJ5+/7Sq/LFI9YRjl2IkFQ4bo=") //GEOTRUST_PRIMARY
-                .add("*.twitter.com", "sha1/vb6nG6txV/nkddlU0rcngBqCJoI=") //GEOTRUST_PRIMARY_G2
-                .add("*.twitter.com", "sha1/nKmNAK90Dd2BgNITRaWLjy6UONY=") //GEOTRUST_PRIMARY_G3
-                .add("*.twitter.com", "sha1/h+hbY1PGI6MSjLD/u/VR/lmADiI=") //GEOTRUST_UNIVERAL
-                .add("*.twitter.com", "sha1/Xk9ThoXdT57KX9wNRW99UbHcm3s=") //GEOTRUST_UNIVERSAL2
-                .add("*.twitter.com", "sha1/1S4TwavjSdrotJWU73w4Q2BkZr0=") //DIGICERT_GLOBAL_ROOT
-                .add("*.twitter.com", "sha1/gzF+YoVCU9bXeDGQ7JGQVumRueM=") //DIGICERT_EV_ROOT
-                .add("*.twitter.com", "sha1/aDMOYTWFIVkpg6PI0tLhQG56s8E=") //DIGICERT_ASSUREDID_ROOT
-                .add("*.twitter.com", "sha1/Vv7zwhR9TtOIN/29MFI4cgHld40=") //TWITTER1
-                .build();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/UrlUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/UrlUtils.java
deleted file mode 100644
index 988aa4f9..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/UrlUtils.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.network;
-
-import android.text.TextUtils;
-
-import java.io.UnsupportedEncodingException;
-import java.net.URI;
-import java.net.URLDecoder;
-import java.net.URLEncoder;
-import java.util.TreeMap;
-
-public final class UrlUtils {
-
-    public static final String UTF8 = "UTF8";
-
-    private UrlUtils() {
-    }
-
-    public static TreeMap<String, String> getQueryParams(URI uri, boolean decode) {
-        return getQueryParams(uri.getRawQuery(), decode);
-    }
-
-    public static TreeMap<String, String> getQueryParams(String paramsString, boolean decode) {
-        final TreeMap<String, String> params = new TreeMap<>();
-        if (paramsString == null) {
-            return params;
-        }
-        for (String nameValuePairString : paramsString.split("&")) {
-            final String[] nameValuePair = nameValuePairString.split("=");
-            if (nameValuePair.length == 2) {
-                if (decode) {
-                    params.put(urlDecode(nameValuePair[0]),
-                            urlDecode(nameValuePair[1]));
-                } else {
-                    params.put(nameValuePair[0], nameValuePair[1]);
-                }
-            } else if (!TextUtils.isEmpty(nameValuePair[0])) {
-                if (decode) {
-                    params.put(urlDecode(nameValuePair[0]), "");
-                } else {
-                    params.put(nameValuePair[0], "");
-                }
-            }
-        }
-        return params;
-    }
-
-    public static String urlEncode(String s) {
-        if (s == null) {
-            return "";
-        }
-        try {
-            return URLEncoder.encode(s, UrlUtils.UTF8);
-        } catch (UnsupportedEncodingException unlikely) {
-            throw new RuntimeException(unlikely.getMessage(), unlikely);
-        }
-    }
-
-    public static String urlDecode(String s) {
-        if (s == null) {
-            return "";
-        }
-        try {
-            return URLDecoder.decode(s, UrlUtils.UTF8);
-        } catch (UnsupportedEncodingException unlikely) {
-            throw new RuntimeException(unlikely.getMessage(), unlikely);
-        }
-    }
-
-    /**
-     * Percent encodes by doing the following:
-     * 1) url encode string using UTF8
-     * 2) apply additional encoding to string, replacing:
-     *      "*" => "%2A"
-     *      "+" => "%20"
-     *      "%7E" => "~"
-     *
-     * @param s the string to encode
-     * @return the encoded string
-     */
-    public static String percentEncode(String s) {
-        if (s == null) {
-            return "";
-        }
-        final StringBuilder sb = new StringBuilder();
-        final String encoded = UrlUtils.urlEncode(s);
-        final int encodedLength = encoded.length();
-        for (int i = 0; i < encodedLength; i++) {
-            final char c = encoded.charAt(i);
-            if (c == '*') {
-                sb.append("%2A");
-            } else if (c == '+') {
-                sb.append("%20");
-            } else if (c == '%' && (i + 2) < encodedLength &&
-                    encoded.charAt(i + 1) == '7' &&
-                    encoded.charAt(i + 2) == 'E') {
-                sb.append('~');
-                i += 2;
-            } else {
-                sb.append(c);
-            }
-        }
-        return sb.toString();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/UrlUtils.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/UrlUtils.kt
new file mode 100644
index 00000000..a9d86df3
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/network/UrlUtils.kt
@@ -0,0 +1,70 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.network
+
+import android.text.TextUtils
+import java.io.UnsupportedEncodingException
+import java.net.URI
+import java.net.URLDecoder
+import java.util.*
+
+object UrlUtils {
+
+    private const val UTF8 = "UTF8"
+
+    fun getQueryParams(uri: URI, decode: Boolean): TreeMap<String, String> {
+        return getQueryParams(uri.rawQuery, decode)
+    }
+
+    private fun getQueryParams(paramsString: String?, decode: Boolean): TreeMap<String, String> {
+        val params = TreeMap<String, String>()
+        if (paramsString == null) {
+            return params
+        }
+        for (nameValuePairString in paramsString.split("&".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()) {
+            val nameValuePair = nameValuePairString.split("=".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
+            if (nameValuePair.size == 2) {
+                if (decode) {
+                    params[urlDecode(nameValuePair[0])] = urlDecode(nameValuePair[1])
+                } else {
+                    params[nameValuePair[0]] = nameValuePair[1]
+                }
+            } else if (!TextUtils.isEmpty(nameValuePair[0])) {
+                if (decode) {
+                    params[urlDecode(nameValuePair[0])] = ""
+                } else {
+                    params[nameValuePair[0]] = ""
+                }
+            }
+        }
+        return params
+    }
+
+    private fun urlDecode(s: String?): String {
+        if (s == null) {
+            return ""
+        }
+        try {
+            return URLDecoder.decode(s, UTF8)
+        } catch (unlikely: UnsupportedEncodingException) {
+            throw RuntimeException(unlikely.message, unlikely)
+        }
+
+    }
+
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
deleted file mode 100644
index 352c0def..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import android.text.format.DateUtils;
-
-import com.google.gson.annotations.SerializedName;
-
-public class GuestAuthToken extends OAuth2Token {
-    public static final String HEADER_GUEST_TOKEN = "x-guest-token";
-    /*
-     * macaw-login oauth2/token does not return an expires_in field as recommended in RFC 6749,
-     * https://tools.ietf.org/html/rfc6749#section-4.2.2. If token expiration policies change,
-     * update this constant to help prevent requests with tokens known to be expired.
-     * https://cgit.twitter.biz/birdcage/tree/passbird/server/src/main/scala/com/twitter/passbird/profile/PassbirdServerProfile.scala#n186
-     */
-    private static final long EXPIRES_IN_MS = DateUtils.HOUR_IN_MILLIS * 3;
-
-    @SerializedName("guest_token")
-    private final String guestToken;
-
-    public GuestAuthToken(String tokenType, String accessToken, String guestToken) {
-        super(tokenType, accessToken);
-        this.guestToken = guestToken;
-    }
-
-    public GuestAuthToken(String tokenType, String accessToken, String guestToken, long createdAt) {
-        super(tokenType, accessToken, createdAt);
-        this.guestToken = guestToken;
-    }
-
-    public String getGuestToken() {
-        return guestToken;
-    }
-
-    // Passbird maintains guest tokens for at least 1 hour, but no more than 3 hours. Tokens
-    // older than 3 hours are known to have expired and should not be reused.
-    @Override
-    public boolean isExpired() {
-        return System.currentTimeMillis() >= this.createdAt + EXPIRES_IN_MS;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        if (!super.equals(o)) return false;
-
-        final GuestAuthToken that = (GuestAuthToken) o;
-
-        if (guestToken != null ? !guestToken.equals(that.guestToken) : that.guestToken != null)
-            return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = super.hashCode();
-        result = 31 * result + (guestToken != null ? guestToken.hashCode() : 0);
-        return result;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestTokenResponse.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestTokenResponse.java
deleted file mode 100644
index 4d191c2b..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestTokenResponse.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import com.google.gson.annotations.SerializedName;
-
-class GuestTokenResponse {
-
-    @SerializedName("guest_token")
-    public final String guestToken;
-
-    GuestTokenResponse(String guestToken) {
-        this.guestToken = guestToken;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeaders.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeaders.java
deleted file mode 100644
index a6d96d73..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aHeaders.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class OAuth1aHeaders {
-    public static final String HEADER_AUTH_SERVICE_PROVIDER = "X-Auth-Service-Provider";
-    public static final String HEADER_AUTH_CREDENTIALS = "X-Verify-Credentials-Authorization";
-
-    /**
-     * Gets authorization header for inclusion in HTTP request headers.
-     *
-     * @param authConfig The auth config.
-     * @param authToken The auth token to use to sign the request.
-     * @param callback The callback url.
-     * @param method The HTTP method.
-     * @param url The url.
-     * @param postParams The post parameters.
-     */
-    public String getAuthorizationHeader(TwitterAuthConfig authConfig,
-            TwitterAuthToken authToken, String callback, String method, String url,
-            Map<String, String> postParams) {
-        final OAuth1aParameters oAuth1aParameters = getOAuth1aParameters(authConfig, authToken,
-                callback, method, url, postParams);
-        return oAuth1aParameters.getAuthorizationHeader();
-    }
-
-
-    /**
-     * @param authConfig The auth config.
-     * @param authToken  The auth token to use.
-     * @param callback   The callback url.
-     * @param method     The HTTP method (GET, POST, PUT, DELETE, etc).
-     * @param url        The url delegation should be sent to (e.g. https://api.twitter.com/1.1/account/verify_credentials.json).
-     * @param postParams The post parameters.
-     * @return A map of OAuth Echo headers
-     */
-    public Map<String, String> getOAuthEchoHeaders(TwitterAuthConfig authConfig,
-            TwitterAuthToken authToken, String callback, String method, String url,
-            Map<String, String> postParams) {
-        final Map<String, String> headers = new HashMap<>(2);
-        final String authorizationHeader = getAuthorizationHeader(authConfig, authToken,
-                callback, method, url, postParams);
-        headers.put(HEADER_AUTH_CREDENTIALS, authorizationHeader);
-        headers.put(HEADER_AUTH_SERVICE_PROVIDER, url);
-        return headers;
-    }
-
-    OAuth1aParameters getOAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken
-            authToken, String callback, String method, String url, Map<String, String> postParams) {
-        return new OAuth1aParameters(authConfig, authToken, callback, method, url, postParams);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParameters.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParameters.java
deleted file mode 100644
index 16070904..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParameters.java
+++ /dev/null
@@ -1,190 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.internal.network.UrlUtils;
-
-import java.io.UnsupportedEncodingException;
-import java.net.URI;
-import java.security.InvalidKeyException;
-import java.security.NoSuchAlgorithmException;
-import java.security.SecureRandom;
-import java.util.Locale;
-import java.util.Map;
-import java.util.TreeMap;
-
-import javax.crypto.Mac;
-import javax.crypto.SecretKey;
-import javax.crypto.spec.SecretKeySpec;
-
-import okio.ByteString;
-
-class OAuth1aParameters {
-    private static final String VERSION = "1.0";
-    private static final String SIGNATURE_METHOD = "HMAC-SHA1";
-
-    /**
-     * Secure random number generator to sign requests.
-     */
-    private static final SecureRandom RAND = new SecureRandom();
-
-    private final TwitterAuthConfig authConfig;
-    private final TwitterAuthToken authToken;
-    private final String callback;
-    private final String method;
-    private final String url;
-    private final Map<String, String> postParams;
-
-    OAuth1aParameters(TwitterAuthConfig authConfig, TwitterAuthToken authToken,
-            String callback, String method, String url, Map<String, String> postParams) {
-        this.authConfig = authConfig;
-        this.authToken = authToken;
-        this.callback = callback;
-        this.method = method;
-        this.url = url;
-        this.postParams = postParams;
-    }
-
-    /**
-     * @return the authorization header for inclusion in HTTP request headers for a request token.
-     */
-    public String getAuthorizationHeader() {
-        final String nonce = getNonce();
-        final String timestamp = getTimestamp();
-        final String signatureBase = constructSignatureBase(nonce, timestamp);
-        final String signature = calculateSignature(signatureBase);
-        return constructAuthorizationHeader(nonce, timestamp, signature);
-    }
-
-    private String getNonce() {
-        return String.valueOf(System.nanoTime()) + String.valueOf(Math.abs(RAND.nextLong()));
-    }
-
-    private String getTimestamp() {
-        final long secondsFromEpoch = System.currentTimeMillis() / 1000;
-        return Long.toString(secondsFromEpoch);
-    }
-
-    String constructSignatureBase(String nonce, String timestamp) {
-        // Get query parameters from request.
-        final URI uri = URI.create(url);
-        final TreeMap<String, String> params = UrlUtils.getQueryParams(uri, true);
-        if (postParams != null) {
-            params.putAll(postParams);
-        }
-
-        // Add OAuth parameters.
-        if (callback != null) {
-            params.put(OAuthConstants.PARAM_CALLBACK, callback);
-        }
-        params.put(OAuthConstants.PARAM_CONSUMER_KEY, authConfig.getConsumerKey());
-        params.put(OAuthConstants.PARAM_NONCE, nonce);
-        params.put(OAuthConstants.PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD);
-        params.put(OAuthConstants.PARAM_TIMESTAMP, timestamp);
-        if (authToken != null && authToken.token != null) {
-            params.put(OAuthConstants.PARAM_TOKEN, authToken.token);
-        }
-        params.put(OAuthConstants.PARAM_VERSION, VERSION);
-
-        // Construct the signature base.
-        final String baseUrl = uri.getScheme() + "://" + uri.getHost() + uri.getPath();
-        final StringBuilder sb = new StringBuilder()
-                .append(method.toUpperCase(Locale.ENGLISH))
-                .append('&')
-                .append(UrlUtils.percentEncode(baseUrl))
-                .append('&')
-                .append(getEncodedQueryParams(params));
-        return sb.toString();
-    }
-
-    private String getEncodedQueryParams(TreeMap<String, String> params) {
-        final StringBuilder paramsBuf = new StringBuilder();
-        final int numParams = params.size();
-        int current = 0;
-        for (Map.Entry<String, String> entry : params.entrySet()) {
-            paramsBuf.append(UrlUtils.percentEncode(UrlUtils.percentEncode(entry.getKey())))
-                    .append("%3D")
-                    .append(UrlUtils.percentEncode(UrlUtils.percentEncode(entry.getValue())));
-            current += 1;
-            if (current < numParams) {
-                paramsBuf.append("%26");
-            }
-        }
-        return paramsBuf.toString();
-    }
-
-    String calculateSignature(String signatureBase) {
-        try {
-            final String key = getSigningKey();
-            // Calculate the signature by passing both the signature base and signing key to the
-            // HMAC-SHA1 hashing algorithm
-            final byte[] signatureBaseBytes = signatureBase.getBytes(UrlUtils.UTF8);
-            final byte[] keyBytes = key.getBytes(UrlUtils.UTF8);
-            final SecretKey secretKey = new SecretKeySpec(keyBytes, "HmacSHA1");
-            final Mac mac = Mac.getInstance("HmacSHA1");
-            mac.init(secretKey);
-            final byte[] signatureBytes = mac.doFinal(signatureBaseBytes);
-            return ByteString.of(signatureBytes, 0, signatureBytes.length).base64();
-        } catch (InvalidKeyException e) {
-            Twitter.getLogger().e(TwitterCore.TAG, "Failed to calculate signature", e);
-            return "";
-        } catch (NoSuchAlgorithmException e) {
-            Twitter.getLogger().e(TwitterCore.TAG, "Failed to calculate signature", e);
-            return "";
-        } catch (UnsupportedEncodingException e) {
-            Twitter.getLogger().e(TwitterCore.TAG, "Failed to calculate signature", e);
-            return "";
-        }
-    }
-
-    private String getSigningKey() {
-        final String tokenSecret = authToken != null ? authToken.secret : null;
-        return new StringBuilder()
-                .append(UrlUtils.urlEncode(authConfig.getConsumerSecret()))
-                .append('&')
-                .append(UrlUtils.urlEncode(tokenSecret))
-                .toString();
-    }
-
-    String constructAuthorizationHeader(String nonce, String timestamp, String signature) {
-        final StringBuilder sb = new StringBuilder("OAuth");
-        appendParameter(sb, OAuthConstants.PARAM_CALLBACK, callback);
-        appendParameter(sb, OAuthConstants.PARAM_CONSUMER_KEY, authConfig.getConsumerKey());
-        appendParameter(sb, OAuthConstants.PARAM_NONCE, nonce);
-        appendParameter(sb, OAuthConstants.PARAM_SIGNATURE, signature);
-        appendParameter(sb, OAuthConstants.PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD);
-        appendParameter(sb, OAuthConstants.PARAM_TIMESTAMP, timestamp);
-        final String token = authToken != null ? authToken.token : null;
-        appendParameter(sb, OAuthConstants.PARAM_TOKEN, token);
-        appendParameter(sb, OAuthConstants.PARAM_VERSION, VERSION);
-        // Remove the extra ',' at the end.
-        return sb.substring(0, sb.length() - 1);
-    }
-
-    private void appendParameter(StringBuilder sb, String name, String value) {
-        if (value != null) {
-            sb.append(' ')
-                    .append(UrlUtils.percentEncode(name)).append("=\"")
-                    .append(UrlUtils.percentEncode(value)).append("\",");
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
deleted file mode 100644
index 00a573f5..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
+++ /dev/null
@@ -1,195 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import android.net.Uri;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterAuthException;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.internal.network.UrlUtils;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.TreeMap;
-
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.http.Header;
-import retrofit2.http.POST;
-import retrofit2.http.Query;
-
-/**
- * OAuth1.0a service. Provides methods for requesting request tokens, access tokens, and signing
- * requests.
- */
-public class OAuth1aService extends OAuthService {
-
-    interface OAuthApi {
-        @POST("/oauth/request_token")
-        Call<ResponseBody> getTempToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth);
-
-        @POST("/oauth/access_token")
-        Call<ResponseBody> getAccessToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
-                                          @Query(OAuthConstants.PARAM_VERIFIER) String verifier);
-    }
-
-    private static final String RESOURCE_OAUTH = "oauth";
-    private static final String CALLBACK_URL = "twittersdk://callback";
-    private static final String PARAM_SCREEN_NAME = "screen_name";
-    private static final String PARAM_USER_ID = "user_id";
-
-    OAuthApi api;
-
-    public OAuth1aService(TwitterCore twitterCore, TwitterApi api) {
-        super(twitterCore, api);
-        this.api = getRetrofit().create(OAuthApi.class);
-    }
-
-    /**
-     * Requests a temp token to start the Twitter sign-in flow.
-     *
-     * @param callback The callback interface to invoke when the request completes.
-     */
-    public void requestTempToken(final Callback<OAuthResponse> callback) {
-        final TwitterAuthConfig config = getTwitterCore().getAuthConfig();
-        final String url = getTempTokenUrl();
-
-        api.getTempToken(new OAuth1aHeaders().getAuthorizationHeader(config, null,
-                buildCallbackUrl(config), "POST", url, null)).enqueue(getCallbackWrapper(callback));
-    }
-
-    String getTempTokenUrl() {
-        return getApi().getBaseHostUrl() + "/oauth/request_token";
-    }
-
-    /**
-     * Builds a callback url that is used to receive a request containing the oauth_token and
-     * oauth_verifier parameters.
-     *
-     * @param authConfig The auth config
-     * @return the callback url
-     */
-    public String buildCallbackUrl(TwitterAuthConfig authConfig) {
-        return Uri.parse(CALLBACK_URL).buildUpon()
-                .appendQueryParameter("version", getTwitterCore().getVersion())
-                .appendQueryParameter("app", authConfig.getConsumerKey())
-                .build()
-                .toString();
-    }
-
-    /**
-     * Requests a Twitter access token to act on behalf of a user account.
-     *
-     * @param callback The callback interface to invoke when when the request completes.
-     */
-    public void requestAccessToken(final Callback<OAuthResponse> callback,
-            TwitterAuthToken requestToken, String verifier) {
-        final String url = getAccessTokenUrl();
-        final String authHeader = new OAuth1aHeaders().getAuthorizationHeader(getTwitterCore()
-                        .getAuthConfig(), requestToken, null, "POST", url, null);
-
-        api.getAccessToken(authHeader, verifier).enqueue(getCallbackWrapper(callback));
-    }
-
-    String getAccessTokenUrl() {
-        return getApi().getBaseHostUrl() + "/oauth/access_token";
-    }
-
-    /**
-     * @param requestToken The request token.
-     * @return authorization url that can be used to get a verifier code to get access token.
-     */
-    public String getAuthorizeUrl(TwitterAuthToken requestToken) {
-        // https://api.twitter.com/oauth/authorize?oauth_token=%s
-        return getApi().buildUponBaseHostUrl(RESOURCE_OAUTH, "authorize")
-                .appendQueryParameter(OAuthConstants.PARAM_TOKEN, requestToken.token)
-                .build()
-                .toString();
-    }
-
-    /**
-     * @return  {@link OAuthResponse} parsed from the
-     * response, may be {@code null} if the response does not contain an auth token and secret.
-     */
-    public static OAuthResponse parseAuthResponse(String response) {
-        final TreeMap<String, String> params = UrlUtils.getQueryParams(response, false);
-        final String token = params.get(OAuthConstants.PARAM_TOKEN);
-        final String secret = params.get(OAuthConstants.PARAM_TOKEN_SECRET);
-        final String userName = params.get(PARAM_SCREEN_NAME);
-        final long userId;
-        if (params.containsKey(PARAM_USER_ID)) {
-            userId = Long.parseLong(params.get(PARAM_USER_ID));
-        } else {
-            userId = 0L;
-        }
-        if (token == null || secret == null) {
-            return null;
-        } else {
-            return new OAuthResponse(new TwitterAuthToken(token, secret), userName, userId);
-        }
-    }
-
-    Callback<ResponseBody> getCallbackWrapper(final Callback<OAuthResponse> callback) {
-        return new Callback<ResponseBody>() {
-
-            @Override
-            public void success(Result<ResponseBody> result) {
-                //Try to get response body
-                BufferedReader reader = null;
-                final StringBuilder sb = new StringBuilder();
-                try {
-                    try {
-                        reader = new BufferedReader(
-                                new InputStreamReader(result.data.byteStream()));
-                        String line;
-
-                        while ((line = reader.readLine()) != null) {
-                            sb.append(line);
-                        }
-                    } finally {
-                        if (reader != null) {
-                            reader.close();
-                        }
-                    }
-                    final String responseAsStr = sb.toString();
-                    final OAuthResponse authResponse = parseAuthResponse(responseAsStr);
-                    if (authResponse == null) {
-                        callback.failure(new TwitterAuthException(
-                                "Failed to parse auth response: " + responseAsStr));
-                    } else {
-                        callback.success(new Result<>(authResponse, null));
-                    }
-                } catch (IOException e) {
-                    callback.failure(new TwitterAuthException(e.getMessage(), e));
-                }
-            }
-
-            @Override
-            public void failure(TwitterException exception) {
-                callback.failure(exception);
-            }
-        };
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.kt
new file mode 100644
index 00000000..c6d6ba25
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.kt
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal.oauth
+
+import android.net.Uri
+import com.twitter.sdk.android.core.TwitterAuthConfig
+import com.twitter.sdk.android.core.TwitterCore
+import com.twitter.sdk.android.core.internal.TwitterApi
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import twitter4j.auth.AccessToken
+import twitter4j.auth.OAuthAuthorization
+import twitter4j.auth.RequestToken
+import twitter4j.conf.ConfigurationBuilder
+
+/**
+ * OAuth1.0a service. Provides methods for requesting request tokens, access tokens, and signing
+ * requests.
+ */
+class OAuth1aService(private val twitterCore: TwitterCore,
+                     private val api: TwitterApi
+) {
+
+    private lateinit var oAuth: OAuthAuthorization
+
+    /**
+     * Requests a temp token to start the Twitter sign-in flow.
+     */
+    @Throws(twitter4j.TwitterException::class)
+    suspend fun requestTempToken(): RequestToken {
+
+        val config = twitterCore.authConfig
+
+        return withContext(Dispatchers.Default) {
+
+            val builder = ConfigurationBuilder()
+
+            builder.setOAuthConsumerKey(config.consumerKey)
+            builder.setOAuthConsumerSecret(config.consumerSecret)
+
+            val conf = builder.build()
+            oAuth = OAuthAuthorization(conf)
+
+            oAuth.getOAuthRequestToken(buildCallbackUrl(config))
+        }
+    }
+
+    /**
+     * Builds a callback url that is used to receive a request containing the oauth_token and
+     * oauth_verifier parameters.
+     *
+     * @param authConfig The auth config
+     * @return the callback url
+     */
+    fun buildCallbackUrl(authConfig: TwitterAuthConfig): String {
+        return Uri.parse(CALLBACK_URL).buildUpon()
+                .appendQueryParameter("version", twitterCore.version)
+                .appendQueryParameter("app", authConfig.consumerKey)
+                .build()
+                .toString()
+    }
+
+    /**
+     * Requests a Twitter access token to act on behalf of a user account.
+     */
+    @Throws(twitter4j.TwitterException::class)
+    suspend fun requestAccessToken(requestToken: RequestToken,
+                                   verifier: String): AccessToken {
+
+        return withContext(Dispatchers.Default) {
+
+            oAuth.getOAuthAccessToken(requestToken, verifier)
+        }
+    }
+
+    /**
+     * @param requestToken The request token.
+     * @return authorization url that can be used to get a verifier code to get access token.
+     */
+    fun getAuthorizeUrl(requestToken: RequestToken): String {
+        // https://api.twitter.com/oauth/authorize?oauth_token=%s
+        return api.buildUponBaseHostUrl(RESOURCE_OAUTH, "authorize")
+                .appendQueryParameter(OAuthConstants.PARAM_TOKEN, requestToken.token)
+                .build()
+                .toString()
+    }
+
+    companion object {
+
+        private const val RESOURCE_OAUTH = "oauth"
+        private const val CALLBACK_URL = "twittersdk://callback"
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java
deleted file mode 100644
index 1440596f..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Service.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import com.twitter.sdk.android.core.Callback;
-import com.twitter.sdk.android.core.Result;
-import com.twitter.sdk.android.core.Twitter;
-import com.twitter.sdk.android.core.TwitterAuthConfig;
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.internal.network.UrlUtils;
-
-import okio.ByteString;
-import retrofit2.Call;
-import retrofit2.http.Field;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.Header;
-import retrofit2.http.Headers;
-import retrofit2.http.POST;
-
-/**
- * OAuth2.0 service. Provides methods for requesting guest auth tokens.
- */
-public class OAuth2Service extends OAuthService {
-    OAuth2Api api;
-
-    interface OAuth2Api {
-        @POST("/1.1/guest/activate.json")
-        Call<GuestTokenResponse> getGuestToken(
-                @Header(OAuthConstants.HEADER_AUTHORIZATION) String auth);
-
-        @Headers("Content-Type: application/x-www-form-urlencoded;charset=UTF-8")
-        @FormUrlEncoded
-        @POST("/oauth2/token")
-        Call<OAuth2Token> getAppAuthToken(@Header(OAuthConstants.HEADER_AUTHORIZATION) String auth,
-                                          @Field(OAuthConstants.PARAM_GRANT_TYPE) String grantType);
-    }
-
-    public OAuth2Service(TwitterCore twitterCore, TwitterApi api) {
-        super(twitterCore, api);
-        this.api = getRetrofit().create(OAuth2Api.class);
-    }
-
-    /**
-     * Requests a guest auth token.
-     * @param callback The callback interface to invoke when when the request completes.
-     */
-    public void requestGuestAuthToken(final Callback<GuestAuthToken> callback) {
-        final Callback<OAuth2Token> appAuthCallback = new Callback<OAuth2Token>() {
-            @Override
-            public void success(Result<OAuth2Token> result) {
-                final OAuth2Token appAuthToken = result.data;
-                // Got back an app auth token, now request a guest auth token.
-                final Callback<GuestTokenResponse> guestTokenCallback
-                        = new Callback<GuestTokenResponse>() {
-                    @Override
-                    public void success(Result<GuestTokenResponse> result) {
-                        // Return a GuestAuthToken that includes the guestToken.
-                        final GuestAuthToken guestAuthToken = new GuestAuthToken(
-                                appAuthToken.getTokenType(), appAuthToken.getAccessToken(),
-                                result.data.guestToken);
-                        callback.success(new Result<>(guestAuthToken, null));
-                    }
-
-                    @Override
-                    public void failure(TwitterException error) {
-                        Twitter.getLogger().e(TwitterCore.TAG,
-                                "Your app may not allow guest auth. Please talk to us "
-                                        + "regarding upgrading your consumer key.", error);
-                        callback.failure(error);
-                    }
-                };
-                requestGuestToken(guestTokenCallback, appAuthToken);
-            }
-
-            @Override
-            public void failure(TwitterException error) {
-                Twitter.getLogger().e(TwitterCore.TAG, "Failed to get app auth token", error);
-                if (callback != null) {
-                    callback.failure(error);
-                }
-            }
-        };
-        requestAppAuthToken(appAuthCallback);
-    }
-
-    /**
-     * Requests an application-only auth token.
-     *
-     * @param callback The callback interface to invoke when when the request completes.
-     */
-    void requestAppAuthToken(final Callback<OAuth2Token> callback) {
-        api.getAppAuthToken(getAuthHeader(), OAuthConstants.GRANT_TYPE_CLIENT_CREDENTIALS)
-                .enqueue(callback);
-    }
-
-    /**
-     * Requests a guest token.
-     *
-     * @param callback The callback interface to invoke when when the request completes.
-     * @param appAuthToken The application-only auth token.
-     */
-    void requestGuestToken(final Callback<GuestTokenResponse> callback,
-            OAuth2Token appAuthToken) {
-        api.getGuestToken(getAuthorizationHeader(appAuthToken)).enqueue(callback);
-    }
-
-    /**
-     * Gets authorization header for inclusion in HTTP request headers.
-     */
-    private String getAuthorizationHeader(OAuth2Token token) {
-        return OAuthConstants.AUTHORIZATION_BEARER + " " + token.getAccessToken();
-    }
-
-    private String getAuthHeader() {
-        final TwitterAuthConfig authConfig = getTwitterCore().getAuthConfig();
-        final ByteString string = ByteString.encodeUtf8(
-                UrlUtils.percentEncode(authConfig.getConsumerKey())
-                + ":"
-                + UrlUtils.percentEncode(authConfig.getConsumerSecret()));
-
-        return OAuthConstants.AUTHORIZATION_BASIC + " " + string.base64();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java
deleted file mode 100644
index bcbd56a9..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth2Token.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.google.gson.annotations.SerializedName;
-import com.twitter.sdk.android.core.AuthToken;
-
-/**
- * OAuth2.0 token.
- */
-public class OAuth2Token extends AuthToken implements Parcelable {
-    public static final String TOKEN_TYPE_BEARER = "bearer";
-
-    public static final Parcelable.Creator<OAuth2Token> CREATOR
-            = new Parcelable.Creator<OAuth2Token>() {
-        public OAuth2Token createFromParcel(Parcel in) {
-            return new OAuth2Token(in);
-        }
-
-        public OAuth2Token[] newArray(int size) {
-            return new OAuth2Token[size];
-        }
-    };
-
-    @SerializedName("token_type")
-    private final String tokenType;
-
-    @SerializedName("access_token")
-    private final String accessToken;
-
-    public OAuth2Token(String tokenType, String accessToken) {
-        super();
-        this.tokenType = tokenType;
-        this.accessToken = accessToken;
-    }
-
-    public OAuth2Token(String tokenType, String accessToken, long createdAt) {
-        super(createdAt);
-        this.tokenType = tokenType;
-        this.accessToken = accessToken;
-    }
-
-    private OAuth2Token(Parcel in) {
-        super();
-        tokenType = in.readString();
-        accessToken = in.readString();
-    }
-
-    public String getTokenType() {
-        return tokenType;
-    }
-
-    public String getAccessToken() {
-        return accessToken;
-    }
-
-    @Override
-    public boolean isExpired() {
-        // Oauth 2.0 tokens do not have a common expiration policy. Returning false indicates
-        // the token is not known to have expired. App auth tokens only expire when manually
-        // invalidated, while guest auth tokens are known to have expired after 3 hours.
-        return false;
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel out, int flags) {
-        out.writeString(tokenType);
-        out.writeString(accessToken);
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        final OAuth2Token that = (OAuth2Token) o;
-
-        if (accessToken != null ? !accessToken.equals(that.accessToken) : that.accessToken != null)
-            return false;
-        if (tokenType != null ? !tokenType.equals(that.tokenType) : that.tokenType != null)
-            return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = tokenType != null ? tokenType.hashCode() : 0;
-        result = 31 * result + (accessToken != null ? accessToken.hashCode() : 0);
-        return result;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.java
deleted file mode 100644
index 325dbb9a..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-public class OAuthConstants {
-    public static final String HEADER_AUTHORIZATION = "Authorization";
-    public static final String HEADER_GUEST_TOKEN = "x-guest-token";
-
-    // OAuth1.0a parameter constants.
-    public static final String PARAM_CALLBACK = "oauth_callback";
-    public static final String PARAM_CONSUMER_KEY = "oauth_consumer_key";
-    public static final String PARAM_NONCE = "oauth_nonce";
-    public static final String PARAM_SIGNATURE_METHOD = "oauth_signature_method";
-    public static final String PARAM_TIMESTAMP = "oauth_timestamp";
-    public static final String PARAM_TOKEN = "oauth_token";
-    public static final String PARAM_TOKEN_SECRET = "oauth_token_secret";
-    public static final String PARAM_VERSION = "oauth_version";
-    public static final String PARAM_SIGNATURE = "oauth_signature";
-    public static final String PARAM_VERIFIER = "oauth_verifier";
-
-    // OAuth2
-    public static final String AUTHORIZATION_BASIC = "Basic";
-    public static final String AUTHORIZATION_BEARER = "Bearer";
-
-    public static final String PARAM_GRANT_TYPE = "grant_type";
-    public static final String GRANT_TYPE_CLIENT_CREDENTIALS = "client_credentials";
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionVerifier.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.kt
similarity index 74%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionVerifier.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.kt
index 1b08de47..a9cc74dd 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/SessionVerifier.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthConstants.kt
@@ -15,10 +15,11 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal;
+package com.twitter.sdk.android.core.internal.oauth
 
-import com.twitter.sdk.android.core.Session;
+object OAuthConstants {
+    // OAuth1.0a parameter constants.
+    const val PARAM_TOKEN = "oauth_token"
+    const val PARAM_VERIFIER = "oauth_verifier"
 
-public interface SessionVerifier<T extends Session> {
-    void verifySession(T session);
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponse.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponse.java
deleted file mode 100644
index 23e33f4b..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthResponse.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.twitter.sdk.android.core.TwitterAuthToken;
-
-/**
- * Represents an authorization response.
- */
-public class OAuthResponse implements Parcelable {
-
-    public static final Parcelable.Creator<OAuthResponse> CREATOR
-            = new Parcelable.Creator<OAuthResponse>() {
-        public OAuthResponse createFromParcel(Parcel in) {
-            return new OAuthResponse(in);
-        }
-
-        public OAuthResponse[] newArray(int size) {
-            return new OAuthResponse[size];
-        }
-    };
-
-    /**
-     * The authorization token. May be temporary (request token) or long-lived (access token).
-     */
-    public final TwitterAuthToken authToken;
-    /**
-     * The username associated with the access token.
-     */
-    public final String userName;
-    /**
-     * The user id associated with the access token.
-     */
-    public final long userId;
-
-    public OAuthResponse(TwitterAuthToken authToken, String userName, long userId) {
-        this.authToken = authToken;
-        this.userName = userName;
-        this.userId = userId;
-    }
-
-    private OAuthResponse(Parcel in) {
-        this.authToken = in.readParcelable(TwitterAuthToken.class.getClassLoader());
-        this.userName = in.readString();
-        this.userId = in.readLong();
-    }
-
-    @Override
-    public String toString() {
-        return new StringBuilder()
-                .append("authToken=").append(authToken)
-                .append(",userName=").append(userName)
-                .append(",userId=").append(userId)
-                .toString();
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel out, int flags) {
-        out.writeParcelable(this.authToken, flags);
-        out.writeString(this.userName);
-        out.writeLong(this.userId);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthService.java
deleted file mode 100644
index 83abd4fd..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuthService.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.oauth;
-
-import com.twitter.sdk.android.core.TwitterCore;
-import com.twitter.sdk.android.core.internal.TwitterApi;
-import com.twitter.sdk.android.core.internal.network.OkHttpClientHelper;
-
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import retrofit2.Retrofit;
-import retrofit2.converter.gson.GsonConverterFactory;
-
-/**
- * Base class for OAuth service.
- */
-abstract class OAuthService {
-
-    private static final String CLIENT_NAME = "TwitterAndroidSDK";
-
-    private final TwitterCore twitterCore;
-    private final TwitterApi api;
-    private final String userAgent;
-    private final Retrofit retrofit;
-
-    OAuthService(TwitterCore twitterCore, TwitterApi api) {
-        this.twitterCore = twitterCore;
-        this.api = api;
-        userAgent = TwitterApi.buildUserAgent(CLIENT_NAME, twitterCore.getVersion());
-
-        final OkHttpClient client = new OkHttpClient.Builder()
-                .addInterceptor(chain -> {
-                    final Request request = chain.request().newBuilder()
-                            .header("User-Agent", getUserAgent())
-                            .build();
-                    return chain.proceed(request);
-                })
-                .certificatePinner(OkHttpClientHelper.getCertificatePinner())
-                .build();
-
-        retrofit = new Retrofit.Builder()
-                .baseUrl(getApi().getBaseHostUrl())
-                .client(client)
-                .addConverterFactory(GsonConverterFactory.create())
-                .build();
-    }
-
-    protected TwitterCore getTwitterCore() {
-        return twitterCore;
-    }
-
-    protected TwitterApi getApi() {
-        return api;
-    }
-
-    protected String getUserAgent() {
-        return userAgent;
-    }
-
-    protected Retrofit getRetrofit() {
-        return retrofit;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImpl.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImpl.java
deleted file mode 100644
index 9836196f..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreImpl.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.persistence;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-
-public class PreferenceStoreImpl implements PreferenceStore {
-    private final SharedPreferences sharedPreferences;
-
-    public PreferenceStoreImpl(Context context, String name) {
-        if (context == null) {
-            throw new IllegalArgumentException("Context must not be null");
-        }
-        sharedPreferences = context.getSharedPreferences(name, Context.MODE_PRIVATE);
-    }
-
-    /**
-     * @return {@link android.content.SharedPreferences} name spaced to Kit
-     */
-    @Override
-    public SharedPreferences get() {
-        return sharedPreferences;
-    }
-
-    /**
-     * @return {@link android.content.SharedPreferences.Editor} name spaced to Kit
-     */
-    @Override
-    public SharedPreferences.Editor edit() {
-        return sharedPreferences.edit();
-    }
-
-    /**
-     * Apply thread safe saves based on Android API level
-     * @param editor
-     * @return boolean success
-     */
-    @Override
-    public boolean save(SharedPreferences.Editor editor) {
-        editor.apply();
-        return true;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreStrategy.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreStrategy.java
deleted file mode 100644
index 0758113b..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/PreferenceStoreStrategy.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.persistence;
-
-import android.annotation.SuppressLint;
-import android.content.SharedPreferences;
-
-public class PreferenceStoreStrategy<T> implements PersistenceStrategy<T> {
-
-    private final PreferenceStore store;
-    private final SerializationStrategy<T> serializer;
-    private final String key;
-
-
-    public PreferenceStoreStrategy(PreferenceStore store, SerializationStrategy<T> serializer,
-                                   String preferenceKey) {
-        this.store = store;
-        this.serializer = serializer;
-        key = preferenceKey;
-    }
-
-    @SuppressLint("CommitPrefEdits")
-    @Override
-    public void save(T object) {
-        store.save(store.edit().putString(key, serializer.serialize(object)));
-    }
-
-    @Override
-    public T restore() {
-        final SharedPreferences store = this.store.get();
-        return serializer.deserialize(store.getString(key, null));
-    }
-
-    @SuppressLint("CommitPrefEdits")
-    @Override
-    public void clear() {
-        //TODO create a remove on the PreferenceStore
-        store.edit().remove(key).commit();
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/SerializationStrategy.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/SerializationStrategy.java
deleted file mode 100644
index fc065691..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/persistence/SerializationStrategy.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal.persistence;
-
-public interface SerializationStrategy<T> {
-    String serialize(T object);
-
-    T deserialize(String serializedObject);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiError.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiError.java
deleted file mode 100644
index c6b9238d..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiError.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents error returned from the Twitter API. For complete list of error codes, see
- * https://dev.twitter.com/overview/api/response-codes
- */
-public class ApiError {
-
-    @SerializedName("message")
-    public final String message;
-
-    @SerializedName("code")
-    public final int code;
-
-    public ApiError(String message, int code) {
-        this.message = message;
-        this.code = code;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiErrors.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiErrors.java
deleted file mode 100644
index ee81157c..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ApiErrors.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-
-public class ApiErrors {
-    @SerializedName("errors")
-    public final List<ApiError> errors;
-
-    private ApiErrors() {
-        this(null);
-    }
-
-    public ApiErrors(List<ApiError> errors) {
-        this.errors = ModelUtils.getSafeList(errors);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValues.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValues.java
deleted file mode 100644
index 9db11557..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValues.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import java.util.Collections;
-import java.util.Map;
-
-/**
- * Map of key/value pairs representing card data.
- */
-public class BindingValues {
-
-    private final Map<String, Object> bindingValues;
-
-    public BindingValues() {
-        this(Collections.EMPTY_MAP);
-    }
-
-    public BindingValues(Map<String, Object> bindingValues) {
-        this.bindingValues = Collections.unmodifiableMap(bindingValues);
-    }
-
-    /**
-     * Returns {@code true} if specified key exists.
-     */
-    public boolean containsKey(String key) {
-        return bindingValues.containsKey(key);
-    }
-
-    /**
-     * Returns the value for the specified key. Returns {@code null} if key does not exist, or
-     * object cannot be cast to return type.
-     */
-    public <T> T get(String key) {
-        try {
-            return (T) bindingValues.get(key);
-        } catch (ClassCastException ex){
-            return null;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java
deleted file mode 100644
index 800165bd..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/BindingValuesAdapter.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-
-import java.lang.reflect.Type;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-public class BindingValuesAdapter implements JsonSerializer<BindingValues>,
-        JsonDeserializer<BindingValues> {
-    private static final String STRING_TYPE = "STRING";
-    private static final String IMAGE_TYPE = "IMAGE";
-    private static final String USER_TYPE = "USER";
-    private static final String BOOLEAN_TYPE = "BOOLEAN";
-
-    private static final String TYPE_MEMBER = "type";
-    private static final String TYPE_VALUE_MEMBER = "string_value";
-    private static final String IMAGE_VALUE_MEMBER = "image_value";
-    private static final String USER_VALUE_MEMBER = "user_value";
-    private static final String BOOLEAN_MEMBER = "boolean_value";
-
-    @Override
-    public JsonElement serialize(BindingValues src, Type typeOfSrc,
-            JsonSerializationContext context) {
-        return null;
-    }
-
-    @Override
-    public BindingValues deserialize(JsonElement json, Type typeOfT,
-            JsonDeserializationContext context) throws JsonParseException {
-        if (!json.isJsonObject()) {
-            return new BindingValues();
-        }
-
-        final JsonObject obj = json.getAsJsonObject();
-        final Set<Map.Entry<String, JsonElement>> members = obj.entrySet();
-
-        final Map<String, Object> bindingHash = new HashMap<>(32);
-        for (Map.Entry<String, JsonElement> member : members) {
-            final String key = member.getKey();
-            final JsonObject memberObj = member.getValue().getAsJsonObject();
-            final Object value = getValue(memberObj, context);
-
-            bindingHash.put(key, value);
-        }
-
-        return new BindingValues(bindingHash);
-    }
-
-    Object getValue(JsonObject obj, JsonDeserializationContext context) {
-        final JsonElement typeObj = obj.get(TYPE_MEMBER);
-        if (typeObj == null || !typeObj.isJsonPrimitive()) {
-            return null;
-        }
-
-        switch (typeObj.getAsString()) {
-            case STRING_TYPE:
-                return context.deserialize(obj.get(TYPE_VALUE_MEMBER), String.class);
-//            case IMAGE_TYPE:
-//                return context.deserialize(obj.get(IMAGE_VALUE_MEMBER), ImageValue.class);
-            case USER_TYPE:
-                return context.deserialize(obj.get(USER_VALUE_MEMBER), UserValue.class);
-            case BOOLEAN_TYPE:
-                return context.deserialize(obj.get(BOOLEAN_MEMBER), Boolean.class);
-            default:
-                return null;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.java
deleted file mode 100644
index 15a7e6e1..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Entity.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * Provides metadata and additional contextual information about content posted on Twitter
- */
-class Entity implements Serializable {
-    private static final int START_INDEX = 0;
-    private static final int END_INDEX = 1;
-
-    /**
-     * An array of integers indicating the offsets.
-     */
-    @SerializedName("indices")
-    public final List<Integer> indices;
-
-    Entity(int start, int end) {
-        final List<Integer> temp = new ArrayList<>(2);
-        temp.add(START_INDEX, start);
-        temp.add(END_INDEX, end);
-
-        indices = Collections.unmodifiableList(temp);
-    }
-
-    public int getStart() {
-        return indices.get(START_INDEX);
-    }
-
-    public int getEnd() {
-        return indices.get(END_INDEX);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.java
deleted file mode 100644
index 2b0838ec..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/ModelUtils.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Util class for twitter-core models
- */
-public final class ModelUtils {
-
-    private ModelUtils() {}
-
-    public static <T> List<T> getSafeList(List<T> entities) {
-        if (entities == null) {
-            return Collections.emptyList();
-        } else {
-            return Collections.unmodifiableList(entities);
-        }
-    }
-
-    public static <K, V> Map<K, V> getSafeMap(Map<K, V> entities) {
-        if (entities == null) {
-            return Collections.emptyMap();
-        } else {
-            return Collections.unmodifiableMap(entities);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SafeListAdapter.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SafeListAdapter.java
deleted file mode 100644
index d3c1c581..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SafeListAdapter.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-import java.io.IOException;
-import java.util.Collections;
-import java.util.List;
-
-public class SafeListAdapter implements TypeAdapterFactory {
-
-    @Override
-    public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> tokenType) {
-        final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, tokenType);
-
-        return new TypeAdapter<T>() {
-            @Override
-            public void write(JsonWriter out, T value) throws IOException {
-                delegate.write(out, value);
-            }
-
-            @Override
-            public T read(JsonReader arg0) throws IOException {
-                final T t = delegate.read(arg0);
-                if (List.class.isAssignableFrom(tokenType.getRawType())) {
-                    if (t == null) {
-                        return (T) Collections.EMPTY_LIST;
-                    }
-
-                    final List<?> list = (List<?>) t;
-                    return (T) Collections.unmodifiableList(list);
-                }
-                return t;
-            }
-        };
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SafeMapAdapter.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SafeMapAdapter.java
deleted file mode 100644
index 2fc35d4d..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SafeMapAdapter.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.TypeAdapter;
-import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
-import com.google.gson.stream.JsonReader;
-import com.google.gson.stream.JsonWriter;
-
-import java.io.IOException;
-import java.util.Collections;
-import java.util.Map;
-
-public class SafeMapAdapter implements TypeAdapterFactory {
-
-    @Override
-    public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> tokenType) {
-        final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, tokenType);
-
-        return new TypeAdapter<T>() {
-            @Override
-            public void write(JsonWriter out, T value) throws IOException {
-                delegate.write(out, value);
-            }
-
-            @Override
-            public T read(JsonReader arg0) throws IOException {
-                final T t = delegate.read(arg0);
-                if (Map.class.isAssignableFrom(tokenType.getRawType())) {
-                    if (t == null) {
-                        return (T) Collections.EMPTY_MAP;
-                    }
-
-                    final Map<?, ?> map = (Map<?, ?>) t;
-                    return (T) Collections.unmodifiableMap(map);
-                }
-                return t;
-            }
-        };
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.java
deleted file mode 100644
index 7fb8444b..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UrlEntity.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents URLs included in the text of a Tweet or within textual fields of a user object.
- */
-public class UrlEntity extends Entity {
-
-    /**
-     * Wrapped URL, corresponding to the value embedded directly into the raw Tweet text, and the
-     * values for the indices parameter.
-     */
-    @SerializedName("url")
-    public final String url;
-
-    /**
-     * Expanded version of display_url
-     */
-    @SerializedName("expanded_url")
-    public final String expandedUrl;
-
-    /**
-     * Version of the URL to display to clients.
-     */
-    @SerializedName("display_url")
-    public final String displayUrl;
-
-    public UrlEntity(String url, String expandedUrl, String displayUrl, int start, int end) {
-        super(start, end);
-        this.url = url;
-        this.expandedUrl = expandedUrl;
-        this.displayUrl = displayUrl;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
deleted file mode 100644
index 50ed0de6..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
+++ /dev/null
@@ -1,380 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.io.Serializable;
-import java.util.List;
-
-/**
- * Users can be anyone or anything. They tweet, follow, create lists, have a home_timeline, can be
- * mentioned, and can be looked up in bulk.
- */
-public class User implements Serializable, Identifiable {
-    private static final long serialVersionUID = 4663450696842173958L;
-    public static final long INVALID_ID = -1L;
-
-    /**
-     * Indicates that the user has an account with "contributor mode" enabled, allowing for Tweets
-     * issued by the user to be co-authored by another account. Rarely true.
-     */
-    @SerializedName("contributors_enabled")
-    public final boolean contributorsEnabled;
-
-    /**
-     * The UTC datetime that the user account was created on Twitter.
-     */
-    @SerializedName("created_at")
-    public final String createdAt;
-
-    /**
-     * When true, indicates that the user has not altered the theme or background of their user
-     * profile.
-     */
-    @SerializedName("default_profile")
-    public final boolean defaultProfile;
-
-    /**
-     * When true, indicates that the user has not uploaded their own avatar and a default egg avatar
-     * is used instead.
-     */
-    @SerializedName("default_profile_image")
-    public final boolean defaultProfileImage;
-
-    /**
-     * Nullable. The user-defined UTF-8 string describing their account.
-     */
-    @SerializedName("description")
-    public final String description;
-
-    /**
-     * Nullable. The logged in user email address if available. Must have permission to access email
-     * address.
-     */
-    @SerializedName("email")
-    public final String email;
-
-    /**
-     * Entities which have been parsed out of the url or description fields defined by the user.
-     * Read more about User Entities.
-     */
-    @SerializedName("entities")
-    public final UserEntities entities;
-
-    /**
-     * The number of tweets this user has favorited in the account's lifetime. British spelling used
-     * in the field name for historical reasons.
-     */
-    @SerializedName("favourites_count")
-    public final int favouritesCount;
-
-    /**
-     * Nullable. Perspectival. When true, indicates that the authenticating user has issued a follow
-     * request to this protected user account.
-     */
-    @SerializedName("follow_request_sent")
-    public final boolean followRequestSent;
-
-    /**
-     * The number of followers this account currently has. Under certain conditions of duress, this
-     * field will temporarily indicate "0."
-     */
-    @SerializedName("followers_count")
-    public final int followersCount;
-
-    /**
-     * The number of users this account is following (AKA their "followings"). Under certain
-     * conditions of duress, this field will temporarily indicate "0."
-     */
-    @SerializedName("friends_count")
-    public final int friendsCount;
-
-    /**
-     * When true, indicates that the user has enabled the possibility of geotagging their Tweets.
-     * This field must be true for the current user to attach geographic data when using
-     * POST statuses / update.
-     */
-    @SerializedName("geo_enabled")
-    public final boolean geoEnabled;
-
-    /**
-     * The integer representation of the unique identifier for this User. This number is greater
-     * than 53 bits and some programming languages may have difficulty/silent defects in
-     * interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use
-     * id_str for fetching the identifier to stay on the safe side. See Twitter IDs, JSON and
-     * Snowflake.
-     */
-    @SerializedName("id")
-    public final long id;
-
-    /**
-     * The string representation of the unique identifier for this User. Implementations should use
-     * this rather than the large, possibly un-consumable integer in id
-     */
-    @SerializedName("id_str")
-    public final String idStr;
-
-    /**
-     * When true, indicates that the user is a participant in Twitter's translator community.
-     */
-    @SerializedName("is_translator")
-    public final boolean isTranslator;
-
-    /**
-     * The BCP 47 code for the user's self-declared user interface language. May or may not have
-     * anything to do with the content of their Tweets.
-     */
-    @SerializedName("lang")
-    public final String lang;
-
-    /**
-     * The number of public lists that this user is a member of.
-     */
-    @SerializedName("listed_count")
-    public final int listedCount;
-
-    /**
-     * Nullable. The user-defined location for this account's profile. Not necessarily a location
-     * nor parseable. This field will occasionally be fuzzily interpreted by the Search service.
-     */
-    @SerializedName("location")
-    public final String location;
-
-    /**
-     * The name of the user, as they've defined it. Not necessarily a person's name. Typically
-     * capped at 20 characters, but subject to change.
-     */
-    @SerializedName("name")
-    public final String name;
-
-    /**
-     * The hexadecimal color chosen by the user for their background.
-     */
-    @SerializedName("profile_background_color")
-    public final String profileBackgroundColor;
-
-    /**
-     * A HTTP-based URL pointing to the background image the user has uploaded for their profile.
-     */
-    @SerializedName("profile_background_image_url")
-    public final String profileBackgroundImageUrl;
-
-    /**
-     * A HTTPS-based URL pointing to the background image the user has uploaded for their profile.
-     */
-    @SerializedName("profile_background_image_url_https")
-    public final String profileBackgroundImageUrlHttps;
-
-    /**
-     * When true, indicates that the user's profile_background_image_url should be tiled when
-     * displayed.
-     */
-    @SerializedName("profile_background_tile")
-    public final boolean profileBackgroundTile;
-
-    /**
-     * The HTTPS-based URL pointing to the standard web representation of the user's uploaded
-     * profile banner. By adding a final path element of the URL, you can obtain different image
-     * sizes optimized for specific displays. In the future, an API method will be provided to serve
-     * these URLs so that you need not modify the original URL. For size variations, please see
-     * User Profile Images and Banners.
-     */
-    @SerializedName("profile_banner_url")
-    public final String profileBannerUrl;
-
-    /**
-     * A HTTP-based URL pointing to the user's avatar image. See User Profile Images and Banners.
-     */
-    @SerializedName("profile_image_url")
-    public final String profileImageUrl;
-
-    /**
-     * A HTTPS-based URL pointing to the user's avatar image.
-     */
-    @SerializedName("profile_image_url_https")
-    public final String profileImageUrlHttps;
-
-    /**
-     * The hexadecimal color the user has chosen to display links with in their Twitter UI.
-     */
-    @SerializedName("profile_link_color")
-    public final String profileLinkColor;
-
-    /**
-     * The hexadecimal color the user has chosen to display sidebar borders with in their Twitter
-     * UI.
-     */
-    @SerializedName("profile_sidebar_border_color")
-    public final String profileSidebarBorderColor;
-
-    /**
-     * The hexadecimal color the user has chosen to display sidebar backgrounds with in their
-     * Twitter UI.
-     */
-    @SerializedName("profile_sidebar_fill_color")
-    public final String profileSidebarFillColor;
-
-    /**
-     * The hexadecimal color the user has chosen to display text with in their Twitter UI.
-     */
-    @SerializedName("profile_text_color")
-    public final String profileTextColor;
-
-    /**
-     * When true, indicates the user wants their uploaded background image to be used.
-     */
-    @SerializedName("profile_use_background_image")
-    public final boolean profileUseBackgroundImage;
-
-    /**
-     * When true, indicates that this user has chosen to protect their Tweets. See About Public and
-     * Protected Tweets.
-     */
-    @SerializedName("protected")
-    public final boolean protectedUser;
-
-    /**
-     * The screen name, handle, or alias that this user identifies themselves with. screen_names are
-     * unique but subject to change. Use id_str as a user identifier whenever possible. Typically a
-     * maximum of 15 characters long, but some historical accounts may exist with longer names.
-     */
-    @SerializedName("screen_name")
-    public final String screenName;
-
-    /**
-     * Indicates that the user would like to see media inline. Somewhat disused.
-     */
-    @SerializedName("show_all_inline_media")
-    public final boolean showAllInlineMedia;
-
-//    /**
-//     * Nullable. If possible, the user's most recent tweet or retweet. In some circumstances, this
-//     * data cannot be provided and this field will be omitted, null, or empty. Perspectival
-//     * attributes within tweets embedded within users cannot always be relied upon. See Why are
-//     * embedded objects stale or inaccurate?.
-//     */
-//    @SerializedName("status")
-//    public final Tweet status;
-
-    /**
-     * The number of tweets (including retweets) issued by the user.
-     */
-    @SerializedName("statuses_count")
-    public final int statusesCount;
-
-    /**
-     * Nullable. A string describing the Time Zone this user declares themselves within.
-     */
-    @SerializedName("time_zone")
-    public final String timeZone;
-
-    /**
-     * Nullable. A URL provided by the user in association with their profile.
-     */
-    @SerializedName("url")
-    public final String url;
-
-    /**
-     * Nullable. The offset from GMT/UTC in seconds.
-     */
-    @SerializedName("utc_offset")
-    public final int utcOffset;
-
-    /**
-     * When true, indicates that the user has a verified account. See Verified Accounts.
-     */
-    @SerializedName("verified")
-    public final boolean verified;
-
-    /**
-     * When present, indicates a textual representation of the two-letter country codes this user is
-     * withheld from.
-     */
-    @SerializedName("withheld_in_countries")
-    public final List<String> withheldInCountries;
-
-    /**
-     * When present, indicates whether the content being withheld is the "status" or a "user."
-     */
-    @SerializedName("withheld_scope")
-    public final String withheldScope;
-
-    public User(boolean contributorsEnabled, String createdAt, boolean defaultProfile,
-            boolean defaultProfileImage, String description, String emailAddress,
-            UserEntities entities, int favouritesCount, boolean followRequestSent,
-            int followersCount, int friendsCount, boolean geoEnabled, long id, String idStr,
-            boolean isTranslator, String lang, int listedCount, String location, String name,
-            String profileBackgroundColor, String profileBackgroundImageUrl,
-            String profileBackgroundImageUrlHttps, boolean profileBackgroundTile,
-            String profileBannerUrl, String profileImageUrl, String profileImageUrlHttps,
-            String profileLinkColor, String profileSidebarBorderColor,
-            String profileSidebarFillColor, String profileTextColor,
-            boolean profileUseBackgroundImage, boolean protectedUser, String screenName,
-            boolean showAllInlineMedia, int statusesCount, String timeZone,
-            String url, int utcOffset, boolean verified, List<String> withheldInCountries,
-            String withheldScope) {
-        this.contributorsEnabled = contributorsEnabled;
-        this.createdAt = createdAt;
-        this.defaultProfile = defaultProfile;
-        this.defaultProfileImage = defaultProfileImage;
-        this.description = description;
-        this.email = emailAddress;
-        this.entities = entities;
-        this.favouritesCount = favouritesCount;
-        this.followRequestSent = followRequestSent;
-        this.followersCount = followersCount;
-        this.friendsCount = friendsCount;
-        this.geoEnabled = geoEnabled;
-        this.id = id;
-        this.idStr = idStr;
-        this.isTranslator = isTranslator;
-        this.lang = lang;
-        this.listedCount = listedCount;
-        this.location = location;
-        this.name = name;
-        this.profileBackgroundColor = profileBackgroundColor;
-        this.profileBackgroundImageUrl = profileBackgroundImageUrl;
-        this.profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps;
-        this.profileBackgroundTile = profileBackgroundTile;
-        this.profileBannerUrl = profileBannerUrl;
-        this.profileImageUrl = profileImageUrl;
-        this.profileImageUrlHttps = profileImageUrlHttps;
-        this.profileLinkColor = profileLinkColor;
-        this.profileSidebarBorderColor = profileSidebarBorderColor;
-        this.profileSidebarFillColor = profileSidebarFillColor;
-        this.profileTextColor = profileTextColor;
-        this.profileUseBackgroundImage = profileUseBackgroundImage;
-        this.protectedUser = protectedUser;
-        this.screenName = screenName;
-        this.showAllInlineMedia = showAllInlineMedia;
-//        this.status = status;
-        this.statusesCount = statusesCount;
-        this.timeZone = timeZone;
-        this.url = url;
-        this.utcOffset = utcOffset;
-        this.verified = verified;
-        this.withheldInCountries = withheldInCountries;
-        this.withheldScope = withheldScope;
-    }
-
-    @Override
-    public long getId() {
-        return this.id;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserEntities.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserEntities.java
deleted file mode 100644
index 204c65c6..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserEntities.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-
-/**
- * Entities for User Objects describe URLs that appear in the user defined profile URL and
- * description fields.
- */
-public class UserEntities {
-
-    @SerializedName("url")
-    public final UrlEntities url;
-
-    @SerializedName("description")
-    public final UrlEntities description;
-
-    public UserEntities(UrlEntities url, UrlEntities description) {
-        this.url = url;
-        this.description = description;
-    }
-
-    public static class UrlEntities {
-
-        @SerializedName("urls")
-        public final List<UrlEntity> urls;
-
-        private UrlEntities() {
-            this(null);
-        }
-
-        public UrlEntities(List<UrlEntity> urls) {
-            this.urls = ModelUtils.getSafeList(urls);
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java
deleted file mode 100644
index 0f017e71..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserValue.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-public class UserValue {
-
-    @SerializedName("id_str")
-    public final String idStr;
-
-    public UserValue(String idStr) {
-        this.idStr = idStr;
-    }
-}
-
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java
deleted file mode 100644
index e0ed653a..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.User;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.http.Query;
-
-public interface AccountService {
-
-    /**
-     * Returns an HTTP 200 OK response code and a representation of the requesting user if
-     * authentication was successful; returns a 401 status code and an error message if not. Use
-     * this method to test if supplied user credentials are valid.
-     *
-     * @param includeEntities (optional) The entities node will not be included when set to false.
-     * @param skipStatus (optional) When set to either true statuses will not be included in
-     *                   the returned user objects.
-     * @param includeEmail (optional) When set to true email will be returned in the user object as
-     *                     a string. If the user does not have an email address on their account, or
-     *                     if the email address is not verified, null will be returned.
-     */
-    @GET("/1.1/account/verify_credentials.json")
-    Call<User> verifyCredentials(@Query("include_entities") Boolean includeEntities,
-                                 @Query("skip_status") Boolean skipStatus,
-                                 @Query("include_email") Boolean includeEmail);
-}
