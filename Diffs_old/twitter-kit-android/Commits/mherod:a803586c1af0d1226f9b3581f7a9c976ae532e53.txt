diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.kt b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.kt
index cc244b31..55873b74 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.kt
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerScribeClient.kt
@@ -20,7 +20,7 @@ package com.twitter.sdk.android.tweetcomposer
 /**
  * ComposerScribeClient represents scribe events of Tweet Composer components.
  */
-internal interface ComposerScribeClient {
+interface ComposerScribeClient {
 
 
     /**
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerView.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerView.java
index b3491b9b..ae5598f5 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerView.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/ComposerView.java
@@ -31,6 +31,7 @@
 import android.widget.TextView;
 
 import com.squareup.picasso.Picasso;
+import com.twitter.sdk.android.core.internal.AvatarSize;
 import com.twitter.sdk.android.core.internal.UserUtils;
 import com.twitter.sdk.android.core.models.User;
 import com.twitter.sdk.android.tweetcomposer.internal.util.ObservableScrollView;
@@ -133,8 +134,8 @@ void setCallbacks(ComposerController.ComposerCallbacks callbacks) {
      * color.
      */
     void setProfilePhotoView(User user) {
-        final String url = UserUtils.getProfileImageUrlHttps(user,
-                UserUtils.AvatarSize.REASONABLY_SMALL);
+        final String url = UserUtils.INSTANCE.getProfileImageUrlHttps(user,
+                AvatarSize.REASONABLY_SMALL);
         if (imageLoader != null) {
             // Passing null url will not trigger any request, but will set the placeholder bg
             imageLoader.load(url).placeholder(mediaBg).into(avatarView);
diff --git a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
index 27f27ea8..1764cf81 100644
--- a/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
+++ b/tweet-composer/src/main/java/com/twitter/sdk/android/tweetcomposer/TweetUploadService.java
@@ -84,7 +84,7 @@ void uploadTweet(final TwitterSession session, final String text, final Uri imag
             uploadMedia(session, imageUri, new Callback<Media>() {
                 @Override
                 public void success(Result<Media> result) {
-                    uploadTweetWithMedia(session, text, result.getData().mediaIdString);
+                    uploadTweetWithMedia(session, text, result.getData().getMediaIdString());
                 }
 
                 @Override
diff --git a/tweet-composer/src/main/res/layout/tw__composer_view.xml b/tweet-composer/src/main/res/layout/tw__composer_view.xml
index 06cb19fd..a9371d88 100644
--- a/tweet-composer/src/main/res/layout/tw__composer_view.xml
+++ b/tweet-composer/src/main/res/layout/tw__composer_view.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
+<?xml version="1.0" encoding="utf-8"?><!--
   ~ Copyright (C) 2015 Twitter, Inc.
   ~
   ~ Licensed under the Apache License, Version 2.0 (the "License");
@@ -16,10 +15,10 @@
   -->
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              xmlns:tools="http://schemas.android.com/tools"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:orientation="vertical">
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
 
     <RelativeLayout
         android:id="@+id/tw__composer_header"
@@ -30,30 +29,30 @@
             android:id="@+id/tw__composer_close"
             style="@style/tw__ComposerClose"
             android:layout_centerVertical="true"
-            tools:ignore="ContentDescription"/>
+            tools:ignore="ContentDescription" />
 
         <ImageView
             android:id="@+id/tw__twitter_logo"
-            android:layout_height="@dimen/tw__composer_logo_height"
             android:layout_width="@dimen/tw__composer_logo_width"
-            android:src="?attr/tw__twitter_logo"
+            android:layout_height="@dimen/tw__composer_logo_height"
             android:layout_centerInParent="true"
-            tools:ignore="ContentDescription"/>
+            android:src="?attr/tw__twitter_logo"
+            tools:ignore="ContentDescription" />
 
         <ImageView
             android:id="@+id/tw__author_avatar"
             style="@style/tw__ComposerAvatar"
-            android:layout_centerVertical="true"
             android:layout_alignParentEnd="true"
             android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
             tools:background="@color/tw__composer_light_gray"
-            tools:ignore="ContentDescription"/>
+            tools:ignore="ContentDescription" />
     </RelativeLayout>
 
     <View
         android:id="@+id/tw__composer_profile_divider"
-        android:visibility="invisible"
-        style="@style/tw__ComposerDivider"/>
+        style="@style/tw__ComposerDivider"
+        android:visibility="invisible" />
 
     <com.twitter.sdk.android.tweetcomposer.internal.util.ObservableScrollView
         android:id="@+id/tw__composer_scroll_view"
@@ -69,7 +68,24 @@
 
             <EditText
                 android:id="@+id/tw__edit_tweet"
-                style="@style/tw__EditTweet"/>
+                style="@style/tw__EditTweet"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="@dimen/tw__composer_spacing_small"
+                android:layout_marginBottom="@dimen/tw__composer_spacing_small"
+                android:background="@null"
+                android:cursorVisible="true"
+                android:gravity="top|left"
+                android:hint="@string/tw__composer_hint"
+                android:imeActionLabel="@string/tw__post_tweet"
+                android:imeOptions="actionSend"
+                android:inputType="textMultiLine"
+                android:paddingLeft="@dimen/tw__composer_spacing_large"
+                android:paddingRight="@dimen/tw__composer_spacing_large"
+                android:scrollbars="vertical"
+                android:textColor="?android:attr/textColor"
+                android:textColorHint="?android:attr/textColorHint"
+                android:textCursorDrawable="@null" />
 
             <ImageView
                 android:id="@+id/tw__image_view"
@@ -78,25 +94,51 @@
                 android:layout_margin="@dimen/tw__composer_spacing_large"
                 android:adjustViewBounds="true"
                 android:visibility="gone"
-                tools:ignore="ContentDescription"/>
+                tools:ignore="ContentDescription" />
         </LinearLayout>
     </com.twitter.sdk.android.tweetcomposer.internal.util.ObservableScrollView>
 
     <View
         android:id="@+id/tw__composer_toolbar_divider"
-        style="@style/tw__ComposerDivider"/>
+        style="@style/tw__ComposerDivider"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/tw__composer_divider_height"
+        android:background="@color/tw__composer_light_gray" />
 
     <LinearLayout
         android:id="@+id/tw__composer_toolbar"
-        style="@style/tw__ComposerToolbar">
+        style="@style/tw__ComposerToolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="right"
+        android:orientation="horizontal"
+        android:paddingTop="@dimen/tw__composer_spacing_medium"
+        android:paddingBottom="@dimen/tw__composer_spacing_medium">
 
         <TextView
             android:id="@+id/tw__char_count"
-            style="@style/tw__ComposerCharCount"/>
+            style="@style/tw__ComposerCharCount"
+            android:layout_width="wrap_content"
+            android:layout_height="@dimen/tw__composer_char_count_height"
+            android:layout_marginRight="@dimen/tw__composer_spacing_large"
+            android:gravity="center_vertical"
+            android:text="@string/tw__max_tweet_chars"
+            android:textAlignment="center"
+            android:textColor="@color/tw__composer_deep_gray"
+            android:textSize="@dimen/tw__composer_font_size_small" />
 
         <Button
             android:id="@+id/tw__post_tweet"
-            style="@style/tw__ComposerTweetButton"/>
+            style="@style/tw__ComposerTweetButton"
+            android:layout_width="wrap_content"
+            android:layout_height="@dimen/tw__composer_tweet_btn_height"
+            android:layout_marginRight="@dimen/tw__composer_spacing_large"
+            android:background="@drawable/tw__btn_composer_tweet"
+            android:text="@string/tw__post_tweet"
+            android:textAlignment="center"
+            android:textAllCaps="false"
+            android:textColor="@color/tw__composer_white"
+            android:textSize="@dimen/tw__composer_font_size_small" />
 
     </LinearLayout>
 
diff --git a/tweet-composer/src/main/res/values/tw__composer_styles.xml b/tweet-composer/src/main/res/values/tw__composer_styles.xml
index ae922032..20c43f3f 100644
--- a/tweet-composer/src/main/res/values/tw__composer_styles.xml
+++ b/tweet-composer/src/main/res/values/tw__composer_styles.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
+<?xml version="1.0" encoding="utf-8"?><!--
   ~ Copyright (C) 2015 Twitter, Inc.
   ~
   ~ Licensed under the Apache License, Version 2.0 (the "License");
@@ -15,9 +14,7 @@
   ~ limitations under the License.
   -->
 
-<resources
-    xmlns:tools="http://schemas.android.com/tools"
-    tools:ignore="NewApi">
+<resources xmlns:tools="http://schemas.android.com/tools" tools:ignore="NewApi">
 
     <style name="tw__ComposerClose">
         <item name="android:layout_width">@dimen/tw__composer_close_size</item>
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
index b28fa57b..a39aa070 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/AbstractTweetView.java
@@ -401,7 +401,7 @@ protected CharSequence getLinkifiedText(Tweet displayTweet) {
 
         final boolean stripQuoteTweet = TweetUtils.showQuoteTweet(displayTweet);
 
-        return TweetTextLinkifier.linkifyUrls(formattedText, getLinkClickListener(), actionColor,
+        return TweetTextLinkifier.INSTANCE.linkifyUrls(formattedText, getLinkClickListener(), actionColor,
                 actionHighlightColor, stripQuoteTweet, stripVineCard);
     }
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
index 9087e410..6b14e3e8 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/BaseTweetView.java
@@ -37,6 +37,7 @@
 import com.twitter.sdk.android.core.Result;
 import com.twitter.sdk.android.core.Twitter;
 import com.twitter.sdk.android.core.TwitterException;
+import com.twitter.sdk.android.core.internal.AvatarSize;
 import com.twitter.sdk.android.core.internal.UserUtils;
 import com.twitter.sdk.android.core.models.Tweet;
 import com.twitter.sdk.android.core.models.TweetBuilder;
@@ -402,8 +403,8 @@ void setProfilePhotoView(Tweet displayTweet) {
         if (displayTweet == null || displayTweet.user == null) {
             url = null;
         } else {
-            url = UserUtils.getProfileImageUrlHttps(displayTweet.user,
-                    UserUtils.AvatarSize.REASONABLY_SMALL);
+            url = UserUtils.INSTANCE.getProfileImageUrlHttps(displayTweet.user,
+                    AvatarSize.REASONABLY_SMALL);
         }
 
         imageLoader.load(url).placeholder(avatarMediaBg).into(avatarView);
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedMediaEntity.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedMediaEntity.java
index 23364597..662244bd 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedMediaEntity.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedMediaEntity.java
@@ -19,7 +19,7 @@
 
 import com.twitter.sdk.android.core.models.MediaEntity;
 
-class FormattedMediaEntity extends FormattedUrlEntity {
+public class FormattedMediaEntity extends FormattedUrlEntity {
     final String type;
     final String mediaUrlHttps;
 
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
index d6569a61..b2d1104a 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedTweetText.kt
@@ -22,7 +22,7 @@ package com.twitter.sdk.android.tweetui
  * from the REST API are html escaped for & < and > characters as well as not counting emoji
  * characters correctly in the entity indices.
  */
-internal data class FormattedTweetText @JvmOverloads constructor(
+data class FormattedTweetText @JvmOverloads constructor(
         var text: String? = null,
         val urlEntities: List<FormattedUrlEntity> = arrayListOf(),
         val hashtagEntities: List<FormattedUrlEntity> = arrayListOf(),
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt
index 1cb232d3..d3d6575d 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/FormattedUrlEntity.kt
@@ -22,32 +22,36 @@ import com.twitter.sdk.android.core.models.MentionEntity
 import com.twitter.sdk.android.core.models.SymbolEntity
 import com.twitter.sdk.android.core.models.UrlEntity
 
-internal open class FormattedUrlEntity(
-        var start: Int,
-        var end: Int,
-        val displayUrl: String,
-        val url: String,
-        val expandedUrl: String
+open class FormattedUrlEntity(
+        open var start: Int,
+        open var end: Int,
+        open val displayUrl: String,
+        open val url: String,
+        open val expandedUrl: String
 ) {
     companion object {
 
+        @JvmStatic
         fun createFormattedUrlEntity(entity: UrlEntity): FormattedUrlEntity {
             return FormattedUrlEntity(entity.start, entity.end, entity.displayUrl,
                     entity.url, entity.expandedUrl)
         }
 
+        @JvmStatic
         fun createFormattedUrlEntity(hashtagEntity: HashtagEntity): FormattedUrlEntity {
             val url = TweetUtils.getHashtagPermalink(hashtagEntity.text)
             return FormattedUrlEntity(hashtagEntity.start, hashtagEntity.end,
                     "#" + hashtagEntity.text, url, url)
         }
 
+        @JvmStatic
         fun createFormattedUrlEntity(mentionEntity: MentionEntity): FormattedUrlEntity {
             val url = TweetUtils.getProfilePermalink(mentionEntity.screenName)
             return FormattedUrlEntity(mentionEntity.start, mentionEntity.end,
                     "@" + mentionEntity.screenName, url, url)
         }
 
+        @JvmStatic
         fun createFormattedUrlEntity(symbolEntity: SymbolEntity): FormattedUrlEntity {
             val url = TweetUtils.getSymbolPermalink(symbolEntity.text)
             return FormattedUrlEntity(symbolEntity.start, symbolEntity.end,
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.kt
index 16fb0f54..05888a38 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.kt
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/LinkClickListener.kt
@@ -20,7 +20,7 @@ package com.twitter.sdk.android.tweetui
 /**
  * Tweet interaction listener
  */
-internal interface LinkClickListener {
+interface LinkClickListener {
     /**
      * A URL was clicked
      *
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.kt
index cf0b8f88..827cceaf 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.kt
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TimelineResult.kt
@@ -27,4 +27,7 @@ package com.twitter.sdk.android.tweetui
  * @param items timeline items
  */
 
-class TimelineResult<T>(val timelineCursor: TimelineCursor, val items: List<T>)
\ No newline at end of file
+open class TimelineResult<T>(
+        open val timelineCursor: TimelineCursor?,
+        open val items: List<T>?
+)
\ No newline at end of file
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
deleted file mode 100644
index c1e57d96..00000000
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetui;
-
-import android.text.SpannableStringBuilder;
-import android.text.Spanned;
-import android.text.TextUtils;
-import android.text.style.CharacterStyle;
-import android.view.View;
-
-import com.twitter.sdk.android.core.models.ModelUtils;
-import com.twitter.sdk.android.tweetui.internal.ClickableLinkSpan;
-import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.regex.Pattern;
-
-final class TweetTextLinkifier {
-    static final Pattern QUOTED_STATUS_URL =
-            Pattern.compile("^https?://twitter\\.com(/#!)?/\\w+/status/\\d+$");
-    static final Pattern VINE_URL =
-            Pattern.compile("^https?://vine\\.co(/#!)?/v/\\w+$");
-
-    private TweetTextLinkifier() {}
-
-    /**
-     * Returns a charSequence with the display urls substituted in place of the t.co links. It will
-     * strip off the last photo entity, quote Tweet, and Vine card urls in the text. The return
-     * value can be set directly onto a text view.
-     *
-     * @param tweetText             The formatted and adjusted tweet wrapper
-     * @param linkListener          A listener to handle link clicks
-     * @param linkColor             The link color
-     * @param linkHighlightColor    The link background color when pressed
-     * @param stripQuoteTweet       If true we should strip the quote Tweet URL
-     * @param stripVineCard         If true we should strip the Vine card URL
-     * @return                      The Tweet text with displayUrls substituted in
-     */
-    static CharSequence linkifyUrls(FormattedTweetText tweetText,
-                                    final LinkClickListener linkListener,
-                                    final int linkColor, final int linkHighlightColor,
-                                    boolean stripQuoteTweet, boolean stripVineCard) {
-        if (tweetText == null) return null;
-
-        if (TextUtils.isEmpty(tweetText.getText())) {
-            return tweetText.getText();
-        }
-
-        final SpannableStringBuilder spannable = new SpannableStringBuilder(tweetText.getText());
-        final List<FormattedUrlEntity> urls = ModelUtils.getSafeList(tweetText.getUrlEntities());
-        final List<FormattedMediaEntity> media = ModelUtils.getSafeList(tweetText.getMediaEntities());
-        final List<FormattedUrlEntity> hashtags = ModelUtils.getSafeList(tweetText.getHashtagEntities());
-        final List<FormattedUrlEntity> mentions = ModelUtils.getSafeList(tweetText.getMentionEntities());
-        final List<FormattedUrlEntity> symbols = ModelUtils.getSafeList(tweetText.getSymbolEntities());
-        /*
-         * We combine and sort the entities here so that we can correctly calculate the offsets
-         * into the text.
-         */
-        final List<FormattedUrlEntity> combined = mergeAndSortEntities(urls, media, hashtags,
-                mentions, symbols);
-        final FormattedUrlEntity strippedEntity = getEntityToStrip(tweetText.getText(), combined,
-                stripQuoteTweet, stripVineCard);
-
-        addUrlEntities(spannable, combined, strippedEntity, linkListener, linkColor,
-                linkHighlightColor);
-
-        return trimEnd(spannable);
-    }
-
-    /**
-     * Trim trailing whitespaces. Similar to String#trim(), but only for trailing characters.
-     */
-    static CharSequence trimEnd(CharSequence charSequence) {
-        int length = charSequence.length();
-
-        while ((length > 0) && (charSequence.charAt(length - 1) <= ' ')) {
-            length--;
-        }
-
-        // Avoid creating new object if length hasn't changed
-        return length < charSequence.length() ? charSequence.subSequence(0, length) : charSequence;
-    }
-
-    /**
-     * Combines and sorts the two lists of entities, it only considers the start index as the
-     * parameter to sort on because the api guarantees that we are to have non-overlapping entities.
-     *
-     * @param urls  Expected to be non-null
-     * @param media Can be null
-     * @return      Combined and sorted list of urls and media
-     */
-    static List<FormattedUrlEntity> mergeAndSortEntities(final List<FormattedUrlEntity> urls,
-            final List<FormattedMediaEntity> media, final List<FormattedUrlEntity> hashtags,
-            final List<FormattedUrlEntity> mentions, final List<FormattedUrlEntity> symbols) {
-        final ArrayList<FormattedUrlEntity> combined = new ArrayList<>(urls);
-        combined.addAll(media);
-        combined.addAll(hashtags);
-        combined.addAll(mentions);
-        combined.addAll(symbols);
-        Collections.sort(combined, (lhs, rhs) -> {
-            if (lhs == null && rhs != null) return -1;
-            if (lhs != null && rhs == null) return 1;
-            if (lhs == null && rhs == null) return 0;
-            return Integer.compare(lhs.getStart(), rhs.getStart());
-
-        });
-        return combined;
-    }
-
-    /**
-     * Swaps display urls in for t.co urls and adjusts the remaining entity indices.
-     *
-     * @param spannable          The final formatted text that we are building
-     * @param entities           The combined list of media and url entities
-     * @param strippedEntity     The trailing entity that we should strip from the text
-     * @param linkListener       The link click listener to attach to the span
-     * @param linkColor          The link color
-     * @param linkHighlightColor The link background color when pressed
-     */
-    private static void addUrlEntities(final SpannableStringBuilder spannable,
-            final List<FormattedUrlEntity> entities,
-            final FormattedUrlEntity strippedEntity,
-            final LinkClickListener linkListener,
-            final int linkColor, final int linkHighlightColor) {
-        if (entities == null || entities.isEmpty()) return;
-
-        int offset = 0;
-        int len;
-        int start;
-        int end;
-        for (final FormattedUrlEntity url : entities) {
-            start = url.getStart() - offset;
-            end = url.getEnd() - offset;
-            if (start >= 0 && end <= spannable.length()) {
-                // replace the last photo url with empty string, we can use the start indices as
-                // as simple check, since none of this will work anyways if we have overlapping
-                // entities
-                if (strippedEntity != null && strippedEntity.getStart() == url.getStart()) {
-                    spannable.replace(start, end, "");
-                    len = end - start;
-                    offset += len;
-                } else if (!TextUtils.isEmpty(url.getDisplayUrl())) {
-                    spannable.replace(start, end, url.getDisplayUrl());
-                    len = end - (start + url.getDisplayUrl().length());
-                    end -= len;
-                    offset += len;
-
-                    final CharacterStyle span = new ClickableLinkSpan(linkHighlightColor,
-                            linkColor, false) {
-                        @Override
-                        public void onClick(View widget) {
-                            if (linkListener == null) return;
-                            linkListener.onUrlClicked(url.getUrl());
-                        }
-                    };
-                    spannable.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-                }
-            }
-        }
-    }
-
-    static FormattedUrlEntity getEntityToStrip(String tweetText, List<FormattedUrlEntity> combined,
-                                               boolean stripQuoteTweet, boolean stripVineCard) {
-        if (combined.isEmpty()) return null;
-
-        final FormattedUrlEntity urlEntity = combined.get(combined.size() - 1);
-        if (stripLtrMarker(tweetText).endsWith(urlEntity.getUrl()) && (isPhotoEntity(urlEntity) ||
-                (stripQuoteTweet && isQuotedStatus(urlEntity)) ||
-                (stripVineCard && isVineCard(urlEntity)))) {
-            return urlEntity;
-        }
-
-        return null;
-    }
-
-    static String stripLtrMarker(String tweetText) {
-        if (tweetText.endsWith(Character.toString('\u200E'))) {
-            return tweetText.substring(0, tweetText.length() - 1);
-        }
-
-        return tweetText;
-    }
-
-    static boolean isPhotoEntity(final FormattedUrlEntity urlEntity) {
-        return urlEntity instanceof FormattedMediaEntity &&
-                TweetMediaUtils.PHOTO_TYPE.equals(((FormattedMediaEntity) urlEntity).type);
-    }
-
-    static boolean isQuotedStatus(final FormattedUrlEntity urlEntity) {
-        return QUOTED_STATUS_URL.matcher(urlEntity.getExpandedUrl()).find();
-    }
-
-    static boolean isVineCard(final FormattedUrlEntity urlEntity) {
-        return VINE_URL.matcher(urlEntity.getExpandedUrl()).find();
-    }
-}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.kt b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.kt
new file mode 100644
index 00000000..3ee10ccf
--- /dev/null
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextLinkifier.kt
@@ -0,0 +1,219 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetui
+
+import android.os.Build
+import android.text.SpannableStringBuilder
+import android.text.Spanned
+import android.text.TextUtils
+import android.text.style.CharacterStyle
+import android.view.View
+
+import com.twitter.sdk.android.core.models.ModelUtils
+import com.twitter.sdk.android.tweetui.internal.ClickableLinkSpan
+import com.twitter.sdk.android.tweetui.internal.TweetMediaUtils
+
+import java.util.ArrayList
+import java.util.Collections
+import java.util.regex.Pattern
+
+object TweetTextLinkifier {
+    val QUOTED_STATUS_URL = Pattern.compile("^https?://twitter\\.com(/#!)?/\\w+/status/\\d+$")
+    val VINE_URL = Pattern.compile("^https?://vine\\.co(/#!)?/v/\\w+$")
+
+    /**
+     * Returns a charSequence with the display urls substituted in place of the t.co links. It will
+     * strip off the last photo entity, quote Tweet, and Vine card urls in the text. The return
+     * value can be set directly onto a text view.
+     *
+     * @param tweetText             The formatted and adjusted tweet wrapper
+     * @param linkListener          A listener to handle link clicks
+     * @param linkColor             The link color
+     * @param linkHighlightColor    The link background color when pressed
+     * @param stripQuoteTweet       If true we should strip the quote Tweet URL
+     * @param stripVineCard         If true we should strip the Vine card URL
+     * @return                      The Tweet text with displayUrls substituted in
+     */
+    @JvmStatic
+    fun linkifyUrls(
+            tweetText: FormattedTweetText?,
+            linkListener: LinkClickListener?,
+            linkColor: Int,
+            linkHighlightColor: Int,
+            stripQuoteTweet: Boolean,
+            stripVineCard: Boolean
+    ): CharSequence? {
+        if (tweetText == null) return null
+
+        if (TextUtils.isEmpty(tweetText.text)) {
+            return tweetText.text
+        }
+
+        val spannable = SpannableStringBuilder(tweetText.text)
+        val urls = ModelUtils.getSafeList(tweetText.urlEntities)
+        val media = ModelUtils.getSafeList(tweetText.mediaEntities)
+        val hashtags = ModelUtils.getSafeList(tweetText.hashtagEntities)
+        val mentions = ModelUtils.getSafeList(tweetText.mentionEntities)
+        val symbols = ModelUtils.getSafeList(tweetText.symbolEntities)
+        /*
+         * We combine and sort the entities here so that we can correctly calculate the offsets
+         * into the text.
+         */
+        val combined = mergeAndSortEntities(urls, media, hashtags,
+                mentions, symbols)
+        val strippedEntity = getEntityToStrip(tweetText.text, combined,
+                stripQuoteTweet, stripVineCard)
+
+        addUrlEntities(spannable, combined, strippedEntity, linkListener, linkColor,
+                linkHighlightColor)
+
+        return trimEnd(spannable)
+    }
+
+    /**
+     * Trim trailing whitespaces. Similar to String#trim(), but only for trailing characters.
+     */
+    @JvmStatic
+    fun trimEnd(charSequence: CharSequence): CharSequence {
+        var length = charSequence.length
+
+        while (length > 0 && charSequence[length - 1] <= ' ') {
+            length--
+        }
+
+        // Avoid creating new object if length hasn't changed
+        return if (length < charSequence.length) charSequence.subSequence(0, length) else charSequence
+    }
+
+    /**
+     * Combines and sorts the two lists of entities, it only considers the start index as the
+     * parameter to sort on because the api guarantees that we are to have non-overlapping entities.
+     *
+     * @param urls  Expected to be non-null
+     * @param media Can be null
+     * @return      Combined and sorted list of urls and media
+     */
+    @JvmStatic
+    fun mergeAndSortEntities(urls: List<FormattedUrlEntity>,
+                             media: List<FormattedMediaEntity>, hashtags: List<FormattedUrlEntity>,
+                             mentions: List<FormattedUrlEntity>, symbols: List<FormattedUrlEntity>): List<FormattedUrlEntity> {
+        val combined = ArrayList(urls)
+        combined.addAll(media)
+        combined.addAll(hashtags)
+        combined.addAll(mentions)
+        combined.addAll(symbols)
+        combined.sortWith(Comparator { lhs, rhs ->
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+                Integer.compare(lhs?.start ?: 0, rhs?.start ?: 0)
+            } else {
+                TODO("VERSION.SDK_INT < KITKAT")
+            }
+
+        })
+        return combined
+    }
+
+    /**
+     * Swaps display urls in for t.co urls and adjusts the remaining entity indices.
+     *
+     * @param spannable          The final formatted text that we are building
+     * @param entities           The combined list of media and url entities
+     * @param strippedEntity     The trailing entity that we should strip from the text
+     * @param linkListener       The link click listener to attach to the span
+     * @param linkColor          The link color
+     * @param linkHighlightColor The link background color when pressed
+     */
+    @JvmStatic
+    private fun addUrlEntities(spannable: SpannableStringBuilder,
+                               entities: List<FormattedUrlEntity>?,
+                               strippedEntity: FormattedUrlEntity?,
+                               linkListener: LinkClickListener?,
+                               linkColor: Int, linkHighlightColor: Int) {
+        if (entities == null || entities.isEmpty()) return
+
+        var offset = 0
+        var len: Int
+        var start: Int
+        var end: Int
+        for (url in entities) {
+            start = url.start - offset
+            end = url.end - offset
+            if (start >= 0 && end <= spannable.length) {
+                // replace the last photo url with empty string, we can use the start indices as
+                // as simple check, since none of this will work anyways if we have overlapping
+                // entities
+                if (strippedEntity != null && strippedEntity.start == url.start) {
+                    spannable.replace(start, end, "")
+                    len = end - start
+                    offset += len
+                } else if (!TextUtils.isEmpty(url.displayUrl)) {
+                    spannable.replace(start, end, url.displayUrl)
+                    len = end - (start + url.displayUrl.length)
+                    end -= len
+                    offset += len
+
+                    val span = object : ClickableLinkSpan(linkHighlightColor,
+                            linkColor, false) {
+                        override fun onClick(widget: View) {
+                            if (linkListener == null) return
+                            linkListener.onUrlClicked(url.url)
+                        }
+                    }
+                    spannable.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
+                }
+            }
+        }
+    }
+
+    @JvmStatic
+    fun getEntityToStrip(tweetText: String?, combined: List<FormattedUrlEntity>,
+                         stripQuoteTweet: Boolean, stripVineCard: Boolean): FormattedUrlEntity? {
+        if (combined.isEmpty()) return null
+
+        val urlEntity = combined[combined.size - 1]
+        return if (stripLtrMarker(tweetText!!).endsWith(urlEntity.url) && (isPhotoEntity(urlEntity) ||
+                        stripQuoteTweet && isQuotedStatus(urlEntity) ||
+                        stripVineCard && isVineCard(urlEntity))) {
+            urlEntity
+        } else null
+
+    }
+
+    @JvmStatic
+    fun stripLtrMarker(tweetText: String): String {
+        return if (tweetText.endsWith(Character.toString('\u200E'))) {
+            tweetText.substring(0, tweetText.length - 1)
+        } else tweetText
+
+    }
+
+    @JvmStatic
+    fun isPhotoEntity(urlEntity: FormattedUrlEntity): Boolean {
+        return urlEntity is FormattedMediaEntity && TweetMediaUtils.PHOTO_TYPE == urlEntity.type
+    }
+
+    @JvmStatic
+    fun isQuotedStatus(urlEntity: FormattedUrlEntity): Boolean {
+        return QUOTED_STATUS_URL.matcher(urlEntity.expandedUrl).find()
+    }
+
+    @JvmStatic
+    fun isVineCard(urlEntity: FormattedUrlEntity): Boolean {
+        return VINE_URL.matcher(urlEntity.expandedUrl).find()
+    }
+}
diff --git a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
index 6e44e658..6f4a6e08 100644
--- a/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
+++ b/tweet-ui/src/main/java/com/twitter/sdk/android/tweetui/TweetTextUtils.java
@@ -65,7 +65,7 @@ static void convertEntities(FormattedTweetText formattedTweetText, Tweet tweet)
         if (coreUrls != null) {
             for (UrlEntity entity : coreUrls) {
                 final FormattedUrlEntity formattedUrlEntity =
-                        FormattedUrlEntity.Companion.createFormattedUrlEntity(entity);
+                        FormattedUrlEntity.createFormattedUrlEntity(entity);
                 formattedTweetText.getUrlEntities().add(formattedUrlEntity);
             }
         }
diff --git a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
index fc1fcbb4..7a0ba4d9 100644
--- a/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
+++ b/tweet-ui/src/test/java/com/twitter/sdk/android/tweetui/TweetTextLinkifierTest.java
@@ -90,7 +90,7 @@ public void testLinkifyUrls_oneInvalidUrlEntity() {
         final UrlEntity urlEntity = new UrlEntity("x z", "y", "z", -1, 30);
         final FormattedTweetText formattedText = new FormattedTweetText();
         formattedText.setText(fullText);
-        formattedText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(urlEntity));
+        formattedText.getUrlEntities().add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
 
         final CharSequence linkifiedText
                 = TweetTextLinkifier.linkifyUrls(formattedText, null, 0, 0, true, true);
@@ -316,7 +316,7 @@ private FormattedTweetText setupPicTwitterEntities() {
 
         final FormattedTweetText formattedText = new FormattedTweetText();
         formattedText.setText(text);
-        formattedText.getUrlEntities().add(FormattedUrlEntity.Companion.createFormattedUrlEntity(urlEntity));
+        formattedText.getUrlEntities().add(FormattedUrlEntity.createFormattedUrlEntity(urlEntity));
         formattedText.getMediaEntities().add(new FormattedMediaEntity(mediaEntity));
 
         return formattedText;
diff --git a/twitter-core/build.gradle b/twitter-core/build.gradle
index 1d96cd72..7f233117 100644
--- a/twitter-core/build.gradle
+++ b/twitter-core/build.gradle
@@ -17,6 +17,7 @@
 
 apply plugin: 'com.android.library'
 apply plugin: 'kotlin-android'
+apply plugin: 'kotlin-android-extensions'
 
 android {
     compileSdkVersion rootProject.compileSdkVersion
@@ -73,6 +74,9 @@ android {
         targetCompatibility rootProject.targetCompatibilityVersion
     }
 }
+androidExtensions {
+    experimental = true
+}
 
 dependencies {
     api dependency.retrofit
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.kt
similarity index 61%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.kt
index 8f83c7fa..294380f4 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/AuthToken.kt
@@ -15,34 +15,26 @@
  *
  */
 
-package com.twitter.sdk.android.core;
+package com.twitter.sdk.android.core
 
-import com.google.gson.annotations.SerializedName;
+import com.google.gson.annotations.SerializedName
 
 /**
  * Base class for authentication tokens.
  */
-public abstract class AuthToken {
-
-    /**
-     * Unit time or epoch time when the token was created (always in UTC). The
-     * time may be 0 if the token is deserialized from data missing the field.
-     */
-    @SerializedName("created_at")
-    protected final long createdAt;
-
-    public AuthToken() {
-        this(System.currentTimeMillis());
-    }
-
-    protected AuthToken(long createdAt) {
-        this.createdAt = createdAt;
-    }
+abstract class AuthToken(
+        /**
+         * Unit time or epoch time when the token was created (always in UTC). The
+         * time may be 0 if the token is deserialized from data missing the field.
+         */
+        @field:SerializedName("created_at") open val createdAt: Long) {
 
     /**
      * Determines whether a token is known to have expired.
      * @return true if the token is known to have expired, otherwise false to indicate the token
      * may or may not be considered expired by the server.
      */
-    public abstract boolean isExpired();
+    abstract val isExpired: Boolean
+
+    constructor() : this(System.currentTimeMillis())
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt
index 6a141e2f..6bc858f9 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/DefaultLogger.kt
@@ -23,7 +23,7 @@ import android.util.Log
  * Default logger that logs to android.util.Log.
  */
 class DefaultLogger : Logger {
-    private var logLevel: Int = 0
+    override var logLevel: Int = 0
 
     constructor(logLevel: Int) {
         this.logLevel = logLevel
@@ -37,14 +37,6 @@ class DefaultLogger : Logger {
         return logLevel <= level
     }
 
-    override fun getLogLevel(): Int {
-        return logLevel
-    }
-
-    override fun setLogLevel(logLevel: Int) {
-        this.logLevel = logLevel
-    }
-
     override fun d(tag: String, text: String, throwable: Throwable?) {
         if (isLoggable(tag, Log.DEBUG)) {
             Log.d(tag, text, throwable)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.kt
similarity index 65%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.kt
index bc257018..60ae8fa1 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/IntentUtils.kt
@@ -1,3 +1,5 @@
+@file:JvmName("IntentUtils")
+
 /*
  * Copyright (C) 2015 Twitter, Inc.
  *
@@ -15,26 +17,23 @@
  *
  */
 
-package com.twitter.sdk.android.core;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
+package com.twitter.sdk.android.core
 
-import java.util.List;
+import android.content.Context
+import android.content.Intent
 
-public class IntentUtils {
+object IntentUtils {
     /*
      * Determine if activity is available to handle provided intent.
      * @param context The context through which {@link android.content.pm.PackageManager} can be accessed.
      * @param intent The intent of the activity to start.
      * @returns true if activity is found, otherwise false.
      */
-    public static boolean isActivityAvailable(Context context, Intent intent) {
-        final PackageManager packageManager = context.getPackageManager();
-        final List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
-        return !activities.isEmpty();
+    @JvmStatic
+    fun isActivityAvailable(context: Context, intent: Intent): Boolean {
+        val packageManager = context.packageManager
+        val activities = packageManager.queryIntentActivities(intent, 0)
+        return !activities.isEmpty()
     }
 
     /*
@@ -43,12 +42,13 @@ public static boolean isActivityAvailable(Context context, Intent intent) {
      * @param intent The intent of the activity to start.
      * @returns true if activity is found and startActivity called, otherwise false.
      */
-    public static boolean safeStartActivity(Context context, Intent intent) {
+    @JvmStatic
+    fun safeStartActivity(context: Context, intent: Intent): Boolean {
         if (isActivityAvailable(context, intent)) {
-            context.startActivity(intent);
-            return true;
+            context.startActivity(intent)
+            return true
         }
 
-        return false;
+        return false
     }
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.java
deleted file mode 100644
index ca0467c1..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-/**
- * Interface to support custom logger.
- */
-public interface Logger {
-
-    boolean isLoggable(String tag, int level);
-    int getLogLevel();
-    void setLogLevel(int logLevel);
-
-    void d(String tag, String text, Throwable throwable);
-    void v(String tag, String text, Throwable throwable);
-    void i(String tag, String text, Throwable throwable);
-    void w(String tag, String text, Throwable throwable);
-    void e(String tag, String text, Throwable throwable);
-
-    void d(String tag, String text);
-    void v(String tag, String text);
-    void i(String tag, String text);
-    void w(String tag, String text);
-    void e(String tag, String text);
-
-    void log(int priority, String tag, String msg);
-    void log(int priority, String tag, String msg, boolean forceLog);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.kt
new file mode 100644
index 00000000..cb684ee8
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Logger.kt
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+/**
+ * Interface to support custom logger.
+ */
+interface Logger {
+    var logLevel: Int
+
+    fun isLoggable(tag: String, level: Int): Boolean
+
+    fun d(tag: String, text: String, throwable: Throwable?)
+    fun v(tag: String, text: String, throwable: Throwable?)
+    fun i(tag: String, text: String, throwable: Throwable?)
+    fun w(tag: String, text: String, throwable: Throwable?)
+    fun e(tag: String, text: String, throwable: Throwable?)
+
+    fun d(tag: String, text: String)
+    fun v(tag: String, text: String)
+    fun i(tag: String, text: String)
+    fun w(tag: String, text: String)
+    fun e(tag: String, text: String)
+
+    fun log(priority: Int, tag: String, msg: String)
+    fun log(priority: Int, tag: String, msg: String, forceLog: Boolean)
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.kt
index cebee837..8bcc2cb2 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.kt
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Result.kt
@@ -24,4 +24,7 @@ import retrofit2.Response
  *
  * @param <T> Parsed type, available in the [Result.data]
 </T> */
-data class Result<out T>(val data: T, val response: Response<*>)
+data class Result<out T>(
+        val data: T?,
+        val response: Response<*>?
+)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.kt
index b8b04099..e4b15a24 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.kt
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/Session.kt
@@ -22,7 +22,7 @@ import com.google.gson.annotations.SerializedName
 /**
  * Base class for session associated with [com.twitter.sdk.android.core.AuthToken].
  */
-open class Session<out T : AuthToken>(
-        @SerializedName("auth_token") val authToken: T?,
-        @SerializedName("id") val id: Long
+open class Session<out T : AuthToken> constructor(
+        @field:SerializedName("auth_token") open val authToken: T?,
+        @field:SerializedName("id") open val id: Long
 )
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
deleted file mode 100644
index 628a3bea..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents an authorization token and its secret.
- */
-public class TwitterAuthToken extends AuthToken implements Parcelable {
-
-    public static final Parcelable.Creator<TwitterAuthToken> CREATOR
-            = new Parcelable.Creator<TwitterAuthToken>() {
-        public TwitterAuthToken createFromParcel(Parcel in) {
-            return new TwitterAuthToken(in);
-        }
-
-        public TwitterAuthToken[] newArray(int size) {
-            return new TwitterAuthToken[size];
-        }
-    };
-
-    @SerializedName("token")
-    public final String token;
-
-    @SerializedName("secret")
-    public final String secret;
-
-    public TwitterAuthToken(String token, String secret) {
-        this.token = token;
-        this.secret = secret;
-    }
-
-    // for testing purposes
-    TwitterAuthToken(String token, String secret, long createdAt) {
-        super(createdAt);
-        this.token = token;
-        this.secret = secret;
-    }
-
-    private TwitterAuthToken(Parcel in) {
-        this.token = in.readString();
-        this.secret = in.readString();
-    }
-
-    @Override
-    public boolean isExpired() {
-        // Twitter does not expire OAuth1a tokens
-        return false;
-    }
-
-    @Override
-    public String toString() {
-        final StringBuilder sb = new StringBuilder()
-                .append("token=").append(this.token)
-                .append(",secret=").append(this.secret);
-        return sb.toString();
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel out, int flags) {
-        out.writeString(token);
-        out.writeString(secret);
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof TwitterAuthToken)) return false;
-
-        final TwitterAuthToken that = (TwitterAuthToken) o;
-
-        if (secret != null ? !secret.equals(that.secret) : that.secret != null) return false;
-        return token != null ? token.equals(that.token) : that.token == null;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = token != null ? token.hashCode() : 0;
-        result = 31 * result + (secret != null ? secret.hashCode() : 0);
-        return result;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.kt
new file mode 100644
index 00000000..4b34ab2a
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/TwitterAuthToken.kt
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core
+
+import android.os.Parcelable
+import com.google.gson.annotations.SerializedName
+import kotlinx.android.parcel.Parcelize
+
+/**
+ * Represents an authorization token and its secret.
+ */
+@Parcelize
+data class TwitterAuthToken @JvmOverloads constructor(
+        @field:SerializedName("token") var token: String?,
+        @field:SerializedName("secret") var secret: String?,
+        override val createdAt: Long = System.currentTimeMillis()
+) : AuthToken(createdAt), Parcelable {
+
+    override val isExpired: Boolean
+        get() = false // Twitter does not expire OAuth1a tokens
+
+    override fun toString(): String = "token=$token,secret=$secret"
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java
index 0d7baf81..5be5f458 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/identity/OAuthController.java
@@ -152,9 +152,9 @@ public void success(Result<OAuthResponse> result) {
                 final OAuthResponse response = result.getData();
                 data.putExtra(AuthHandler.EXTRA_SCREEN_NAME, response.userName);
                 data.putExtra(AuthHandler.EXTRA_USER_ID, response.userId);
-                data.putExtra(AuthHandler.EXTRA_TOKEN, response.authToken.token);
+                data.putExtra(AuthHandler.EXTRA_TOKEN, response.authToken.getToken());
                 data.putExtra(AuthHandler.EXTRA_TOKEN_SECRET,
-                        response.authToken.secret);
+                        response.authToken.getSecret());
                 listener.onComplete(Activity.RESULT_OK, data);
             }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfo.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfo.kt
similarity index 64%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfo.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfo.kt
index fa385071..28b9d402 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfo.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfo.kt
@@ -15,14 +15,9 @@
  *
  */
 
-package com.twitter.sdk.android.core.internal;
+package com.twitter.sdk.android.core.internal
 
-class AdvertisingInfo {
-    final String advertisingId;
-    final boolean limitAdTrackingEnabled;
-
-    AdvertisingInfo(String advertisingId, boolean limitAdTrackingEnabled) {
-        this.advertisingId = advertisingId;
-        this.limitAdTrackingEnabled = limitAdTrackingEnabled;
-    }
-}
+data class AdvertisingInfo(
+        val advertisingId: String,
+        val limitAdTrackingEnabled: Boolean
+)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfoProvider.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfoProvider.java
index bc07d9b2..8b6612aa 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfoProvider.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AdvertisingInfoProvider.java
@@ -78,8 +78,8 @@ private void refreshInfoIfNeededAsync(final AdvertisingInfo advertisingInfo) {
     private void storeInfoToPreferences(AdvertisingInfo infoToReturn) {
         if (isInfoValid(infoToReturn)) {
             preferenceStore.save(preferenceStore.edit()
-                    .putString(PREFKEY_ADVERTISING_ID, infoToReturn.advertisingId)
-                    .putBoolean(PREFKEY_LIMIT_AD_TRACKING, infoToReturn.limitAdTrackingEnabled));
+                    .putString(PREFKEY_ADVERTISING_ID, infoToReturn.getAdvertisingId())
+                    .putBoolean(PREFKEY_LIMIT_AD_TRACKING, infoToReturn.getLimitAdTrackingEnabled()));
         } else {
             // if we get an invalid advertising info, clear out the previous value since it isn't
             // valid now
@@ -101,7 +101,7 @@ private AdvertisingInfoStrategy getReflectionStrategy() {
     }
 
     private boolean isInfoValid(AdvertisingInfo advertisingInfo) {
-        return advertisingInfo != null && !TextUtils.isEmpty(advertisingInfo.advertisingId);
+        return advertisingInfo != null && !TextUtils.isEmpty(advertisingInfo.getAdvertisingId());
     }
 
     private AdvertisingInfo getAdvertisingInfoFromStrategies() {
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AvatarSize.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AvatarSize.kt
new file mode 100644
index 00000000..47df0d8c
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/AvatarSize.kt
@@ -0,0 +1,11 @@
+package com.twitter.sdk.android.core.internal
+
+// see https://dev.twitter.com/overview/general/user-profile-images-and-banners
+// see also: https://confluence.twitter.biz/display/PLATFORM/Image+Types+and+Sizes
+enum class AvatarSize(val suffix: String) {
+    NORMAL("_normal"),
+    BIGGER("_bigger"),
+    MINI("_mini"),
+    ORIGINAL("_original"),
+    REASONABLY_SMALL("_reasonably_small")
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/IdManager.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/IdManager.java
index db24d51e..a523d7fb 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/IdManager.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/IdManager.java
@@ -190,7 +190,7 @@ public Boolean isLimitAdTrackingEnabled() {
         if (collectHardwareIds) {
             final AdvertisingInfo advertisingInfo = getAdvertisingInfo();
             if (advertisingInfo != null) {
-                toReturn = advertisingInfo.limitAdTrackingEnabled;
+                toReturn = advertisingInfo.getLimitAdTrackingEnabled();
             }
         }
 
@@ -203,7 +203,7 @@ public String getAdvertisingId() {
         if (collectHardwareIds) {
             final AdvertisingInfo advertisingInfo = getAdvertisingInfo();
             if (advertisingInfo != null) {
-                toReturn = advertisingInfo.advertisingId;
+                toReturn = advertisingInfo.getAdvertisingId();
             }
         }
 
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.java
deleted file mode 100644
index a8bad6dd..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.internal;
-
-import android.text.TextUtils;
-
-import com.twitter.sdk.android.core.models.User;
-
-public final class UserUtils {
-    private UserUtils() {}
-
-    // see https://dev.twitter.com/overview/general/user-profile-images-and-banners
-    // see also: https://confluence.twitter.biz/display/PLATFORM/Image+Types+and+Sizes
-    public enum AvatarSize {
-        NORMAL("_normal"),
-        BIGGER("_bigger"),
-        MINI("_mini"),
-        ORIGINAL("_original"),
-        REASONABLY_SMALL("_reasonably_small");
-
-        private final String suffix;
-
-        AvatarSize(String suffix) {
-            this.suffix = suffix;
-        }
-
-        String getSuffix() {
-            return suffix;
-        }
-    }
-
-    public static String getProfileImageUrlHttps(User user, AvatarSize size) {
-        if (user != null && user.profileImageUrlHttps != null) {
-            final String url = user.profileImageUrlHttps;
-            if (size == null || url == null) {
-                return url;
-            }
-
-            switch (size) {
-                case NORMAL:
-                case BIGGER:
-                case MINI:
-                case ORIGINAL:
-                case REASONABLY_SMALL:
-                    return url
-                            .replace(AvatarSize.NORMAL.getSuffix(), size.getSuffix());
-                default:
-                    return url;
-            }
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * @return the given screenName, prepended with an "@"
-     */
-    public static CharSequence formatScreenName(CharSequence screenName) {
-        if (TextUtils.isEmpty(screenName)) {
-            return "";
-        }
-
-        if (screenName.charAt(0) == '@') {
-            return screenName;
-        }
-        return "@" + screenName;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.kt
new file mode 100644
index 00000000..fbdceece
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/UserUtils.kt
@@ -0,0 +1,50 @@
+@file:JvmName("UserUtils")
+
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.internal
+
+import com.twitter.sdk.android.core.models.User
+
+object UserUtils {
+
+    fun getProfileImageUrlHttps(user: User?, size: AvatarSize?): String? {
+        if (user?.profileImageUrlHttps != null) {
+            val url = user.profileImageUrlHttps
+            if (size == null || url == null) {
+                return url
+            }
+
+            return when (size) {
+                AvatarSize.NORMAL, AvatarSize.BIGGER, AvatarSize.MINI, AvatarSize.ORIGINAL, AvatarSize.REASONABLY_SMALL -> url.replace(AvatarSize.NORMAL.suffix, size.suffix)
+            }
+        } else {
+            return null
+        }
+    }
+
+    /**
+     * @return the given screenName, prepended with an "@"
+     */
+    @JvmStatic
+    fun formatScreenName(screenName: CharSequence?): CharSequence = when {
+        screenName.isNullOrBlank() -> ""
+        screenName?.startsWith('@') == true -> screenName
+        else -> "@$screenName"
+    }
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
index e33f33b5..75d1e14a 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/GuestAuthToken.java
@@ -51,7 +51,7 @@ public String getGuestToken() {
     // older than 3 hours are known to have expired and should not be reused.
     @Override
     public boolean isExpired() {
-        return System.currentTimeMillis() >= this.createdAt + EXPIRES_IN_MS;
+        return System.currentTimeMillis() >= this.getCreatedAt() + EXPIRES_IN_MS;
     }
 
     @Override
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParameters.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParameters.java
index 16070904..48959ab3 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParameters.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParameters.java
@@ -100,8 +100,8 @@ String constructSignatureBase(String nonce, String timestamp) {
         params.put(OAuthConstants.PARAM_NONCE, nonce);
         params.put(OAuthConstants.PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD);
         params.put(OAuthConstants.PARAM_TIMESTAMP, timestamp);
-        if (authToken != null && authToken.token != null) {
-            params.put(OAuthConstants.PARAM_TOKEN, authToken.token);
+        if (authToken != null && authToken.getToken() != null) {
+            params.put(OAuthConstants.PARAM_TOKEN, authToken.getToken());
         }
         params.put(OAuthConstants.PARAM_VERSION, VERSION);
 
@@ -157,7 +157,7 @@ String calculateSignature(String signatureBase) {
     }
 
     private String getSigningKey() {
-        final String tokenSecret = authToken != null ? authToken.secret : null;
+        final String tokenSecret = authToken != null ? authToken.getSecret() : null;
         return new StringBuilder()
                 .append(UrlUtils.urlEncode(authConfig.getConsumerSecret()))
                 .append('&')
@@ -173,7 +173,7 @@ String constructAuthorizationHeader(String nonce, String timestamp, String signa
         appendParameter(sb, OAuthConstants.PARAM_SIGNATURE, signature);
         appendParameter(sb, OAuthConstants.PARAM_SIGNATURE_METHOD, SIGNATURE_METHOD);
         appendParameter(sb, OAuthConstants.PARAM_TIMESTAMP, timestamp);
-        final String token = authToken != null ? authToken.token : null;
+        final String token = authToken != null ? authToken.getToken() : null;
         appendParameter(sb, OAuthConstants.PARAM_TOKEN, token);
         appendParameter(sb, OAuthConstants.PARAM_VERSION, VERSION);
         // Remove the extra ',' at the end.
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
index cf8e3094..778da9c9 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aService.java
@@ -124,7 +124,7 @@ String getAccessTokenUrl() {
     public String getAuthorizeUrl(TwitterAuthToken requestToken) {
         // https://api.twitter.com/oauth/authorize?oauth_token=%s
         return getApi().buildUponBaseHostUrl(RESOURCE_OAUTH, "authorize")
-                .appendQueryParameter(OAuthConstants.PARAM_TOKEN, requestToken.token)
+                .appendQueryParameter(OAuthConstants.PARAM_TOKEN, requestToken.getToken())
                 .build()
                 .toString();
     }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.kt
similarity index 53%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.kt
index 9d83d17c..de1303c3 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Media.kt
@@ -15,31 +15,16 @@
  *
  */
 
-package com.twitter.sdk.android.core.models;
+package com.twitter.sdk.android.core.models
 
-import com.google.gson.annotations.SerializedName;
+import com.google.gson.annotations.SerializedName
 
 /**
  * Represents Media which has been uploaded to Twitter upload endpoints.
  */
-public class Media {
-
-    @SerializedName("media_id")
-    public final long mediaId;
-
-    @SerializedName("media_id_string")
-    public final String mediaIdString;
-
-    @SerializedName("size")
-    public final long size;
-
-    @SerializedName("image")
-    public final Image image;
-
-    public Media(long mediaID, String mediaIdString, long size, Image image) {
-        this.mediaId = mediaID;
-        this.mediaIdString = mediaIdString;
-        this.size = size;
-        this.image = image;
-    }
-}
+data class Media(
+        @SerializedName("media_id") val mediaId: Long,
+        @SerializedName("media_id_string") val mediaIdString: String,
+        @SerializedName("size") val size: Long,
+        @SerializedName("image") val image: Image
+)
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.kt
similarity index 54%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.kt
index e0ed653a..fae8118b 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/AccountService.kt
@@ -15,15 +15,15 @@
  *
  */
 
-package com.twitter.sdk.android.core.services;
+package com.twitter.sdk.android.core.services
 
-import com.twitter.sdk.android.core.models.User;
+import com.twitter.sdk.android.core.models.User
 
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.http.Query;
+import retrofit2.Call
+import retrofit2.http.GET
+import retrofit2.http.Query
 
-public interface AccountService {
+interface AccountService {
 
     /**
      * Returns an HTTP 200 OK response code and a representation of the requesting user if
@@ -31,14 +31,14 @@
      * this method to test if supplied user credentials are valid.
      *
      * @param includeEntities (optional) The entities node will not be included when set to false.
-     * @param skipStatus (optional) When set to either true statuses will not be included in
-     *                   the returned user objects.
-     * @param includeEmail (optional) When set to true email will be returned in the user object as
-     *                     a string. If the user does not have an email address on their account, or
-     *                     if the email address is not verified, null will be returned.
+     * @param skipStatus      (optional) When set to either true statuses will not be included in
+     * the returned user objects.
+     * @param includeEmail    (optional) When set to true email will be returned in the user object as
+     * a string. If the user does not have an email address on their account, or
+     * if the email address is not verified, null will be returned.
      */
     @GET("/1.1/account/verify_credentials.json")
-    Call<User> verifyCredentials(@Query("include_entities") Boolean includeEntities,
-                                 @Query("skip_status") Boolean skipStatus,
-                                 @Query("include_email") Boolean includeEmail);
+    fun verifyCredentials(@Query("include_entities") includeEntities: Boolean?,
+                          @Query("skip_status") skipStatus: Boolean?,
+                          @Query("include_email") includeEmail: Boolean?): Call<User>
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.kt
similarity index 54%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.kt
index e75b05ab..e6ce58df 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/CollectionService.kt
@@ -15,15 +15,15 @@
  *
  */
 
-package com.twitter.sdk.android.core.services;
+package com.twitter.sdk.android.core.services
 
-import com.twitter.sdk.android.core.models.TwitterCollection;
+import com.twitter.sdk.android.core.models.TwitterCollection
 
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.http.Query;
+import retrofit2.Call
+import retrofit2.http.GET
+import retrofit2.http.Query
 
-public interface CollectionService {
+interface CollectionService {
 
     /**
      * Retrieve the identified TwitterCollection, presented as a list of the curated Tweets.
@@ -32,19 +32,19 @@
      * Use the response/position hash to navigate through the collection via the min_position
      * and max_position. The was_truncated attribute will indicate to you whether additional tweets
      * exist in the collection outside of what was in range of the current request.
-     * @param id The identifier of the Collection to return results for (e.g. "custom-5394878324")
-     * @param count Specifies the number of Tweets to try and retrieve, up to a maximum of 200 per
-     *              distinct request. The value of count is best thought of as an "up to" parameter;
-     *              receiving less results than the specified count does not necessarily mean there
-     *              aren't remaining results to fetch.
+     *
+     * @param id          The identifier of the Collection to return results for (e.g. "custom-5394878324")
+     * @param count       Specifies the number of Tweets to try and retrieve, up to a maximum of 200 per
+     * distinct request. The value of count is best thought of as an "up to" parameter;
+     * receiving less results than the specified count does not necessarily mean there
+     * aren't remaining results to fetch.
      * @param maxPosition Returns results with a position value less than or equal to the specified
-     *                    position.
+     * position.
      * @param minPosition Returns results with a position greater than the specified position.
      */
-    @GET("/1.1/collections/entries.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<TwitterCollection> collection(@Query("id") String id,
-                                       @Query("count") Integer count,
-                                       @Query("max_position") Long maxPosition,
-                                       @Query("min_position") Long minPosition);
+    @GET("/1.1/collections/entries.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun collection(@Query("id") id: String,
+                   @Query("count") count: Int?,
+                   @Query("max_position") maxPosition: Long?,
+                   @Query("min_position") minPosition: Long?): Call<TwitterCollection>
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.kt
similarity index 77%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.kt
index aeb4e0e8..6d4466c1 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ConfigurationService.kt
@@ -15,18 +15,18 @@
  *
  */
 
-package com.twitter.sdk.android.core.services;
+package com.twitter.sdk.android.core.services
 
-import com.twitter.sdk.android.core.models.Configuration;
+import com.twitter.sdk.android.core.models.Configuration
 
-import retrofit2.Call;
-import retrofit2.http.GET;
+import retrofit2.Call
+import retrofit2.http.GET
 
-public interface ConfigurationService {
+interface ConfigurationService {
     /**
      * Returns the current configuration used by Twitter including twitter.com slugs which are not
      * user names, maximum photo resolutions, and t.co URL lengths.
      */
     @GET("/1.1/help/configuration.json")
-    Call<Configuration> configuration();
+    fun configuration(): Call<Configuration>
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java
deleted file mode 100644
index 97d55a4c..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-import retrofit2.Call;
-import retrofit2.http.Field;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.GET;
-import retrofit2.http.POST;
-import retrofit2.http.Query;
-
-public interface FavoriteService {
-
-    /**
-     * Returns recent Tweets favorited by the authenticating or specified user,
-     * by default returns 20 tweets.
-     *
-     * @param userId (optional) The ID of the user for whom to return results for.
-     * @param screenName (optional) The screen name of the user for whom to return results for.
-     * @param count (optional) Specifies the number of records to retrieve. Must be less than or
-     *              equal to 200. Defaults to 20.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of Tweets which can be
-     *                accessed through the API. If the limit of Tweets has occured since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param includeEntities (optional) The entities node will be omitted when set to false.
-     */
-    @GET("/1.1/favorites/list.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> list(@Query("user_id") Long userId,
-                           @Query("screen_name") String screenName,
-                           @Query("count") Integer count,
-                           @Query("since_id") String sinceId,
-                           @Query("max_id") String maxId,
-                           @Query("include_entities") Boolean includeEntities);
-
-    /**
-     * Un-favorites the status specified in the ID parameter as the authenticating user. Returns the
-     * un-favorited status in the requested format when successful.
-     * <p>
-     * This process invoked by this method is asynchronous. The immediately returned status may not
-     * indicate the resultant favorited status of the Tweet. A 200 OK response from this method will
-     * indicate whether the intended action was successful or not.
-     *
-     * @param id (required) The numerical ID of the desired status.
-     * @param includeEntities (optional) The entities node will be omitted when set to false.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/favorites/destroy.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> destroy(@Field("id") Long id,
-                        @Field("include_entities") Boolean includeEntities);
-
-    /**
-     * Favorites the status specified in the ID parameter as the authenticating user. Returns the
-     * favorite status when successful.
-     * <p>
-     * This process invoked by this method is asynchronous. The immediately returned status may not
-     * indicate the resultant favorited status of the Tweet. A 200 OK response from this method will
-     * indicate whether the intended action was successful or not.
-     *
-     * @param id (required) The numerical ID of the desired status.
-     * @param includeEntities (optional) The entities node will be omitted when set to false.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/favorites/create.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> create(@Field("id") Long id,
-                       @Field("include_entities") Boolean includeEntities);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.kt
new file mode 100644
index 00000000..34f0b09d
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/FavoriteService.kt
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.services
+
+import com.twitter.sdk.android.core.models.Tweet
+import retrofit2.Call
+import retrofit2.http.*
+
+interface FavoriteService {
+
+    /**
+     * Returns recent Tweets favorited by the authenticating or specified user,
+     * by default returns 20 tweets.
+     *
+     * @param userId          (optional) The ID of the user for whom to return results for.
+     * @param screenName      (optional) The screen name of the user for whom to return results for.
+     * @param count           (optional) Specifies the number of records to retrieve. Must be less than or
+     * equal to 200. Defaults to 20.
+     * @param sinceId         (optional) Returns results with an ID greater than (that is, more recent than)
+     * the specified ID. There are limits to the number of Tweets which can be
+     * accessed through the API. If the limit of Tweets has occured since the
+     * since_id, the since_id will be forced to the oldest ID available.
+     * @param maxId           (optional) Returns results with an ID less than (that is, older than) or equal
+     * to the specified ID.
+     * @param includeEntities (optional) The entities node will be omitted when set to false.
+     */
+    @GET("/1.1/favorites/list.json?tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun list(@Query("user_id") userId: Long?,
+             @Query("screen_name") screenName: String,
+             @Query("count") count: Int?,
+             @Query("since_id") sinceId: String,
+             @Query("max_id") maxId: String,
+             @Query("include_entities") includeEntities: Boolean?): Call<List<Tweet>>
+
+    /**
+     * Un-favorites the status specified in the ID parameter as the authenticating user. Returns the
+     * un-favorited status in the requested format when successful.
+     *
+     *
+     * This process invoked by this method is asynchronous. The immediately returned status may not
+     * indicate the resultant favorited status of the Tweet. A 200 OK response from this method will
+     * indicate whether the intended action was successful or not.
+     *
+     * @param id              (required) The numerical ID of the desired status.
+     * @param includeEntities (optional) The entities node will be omitted when set to false.
+     */
+    @FormUrlEncoded
+    @POST("/1.1/favorites/destroy.json?tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun destroy(@Field("id") id: Long?,
+                @Field("include_entities") includeEntities: Boolean?): Call<Tweet>
+
+    /**
+     * Favorites the status specified in the ID parameter as the authenticating user. Returns the
+     * favorite status when successful.
+     *
+     *
+     * This process invoked by this method is asynchronous. The immediately returned status may not
+     * indicate the resultant favorited status of the Tweet. A 200 OK response from this method will
+     * indicate whether the intended action was successful or not.
+     *
+     * @param id              (required) The numerical ID of the desired status.
+     * @param includeEntities (optional) The entities node will be omitted when set to false.
+     */
+    @FormUrlEncoded
+    @POST("/1.1/favorites/create.json?tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun create(@Field("id") id: Long?,
+               @Field("include_entities") includeEntities: Boolean?): Call<Tweet>
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java
deleted file mode 100644
index aa30ed87..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.http.Query;
-
-public interface ListService {
-
-    /**
-     * Returns a timeline of tweets authored by members of the specified list. Retweets are included
-     * by default.
-     * @param listId The numerical id of the list.
-     * @param slug You can identify a list by its slug instead of its numerical id. If you decide to
-     *             do so, note that you'll also have to specify the list owner using the owner_id or
-     *             owner_screen_name parameters.
-     * @param ownerScreenName The screen name of the user who owns the list being requested by a
-     *                        slug.
-     * @param ownerId The user ID of the user who owns the list being requested by a slug.
-     * @param sinceId Returns results with an ID greater than (that is, more recent than) the
-     *                specified ID. There are limits to the number of Tweets which can be accessed
-     *                through the API. If the limit of Tweets has occurred since the since_id, the
-     *                since_id will be forced to the oldest ID available.
-     * @param maxId Returns results with an ID less than (that is, older than) or equal to the
-     *              specified ID.
-     * @param count Specifies the number of results to retrieve per "page."
-     * @param includeEntities Entities are ON by default in API 1.1, each Tweet includes a node
-     *                        called "entities." This node offers a variety of metadata about the
-     *                        Tweet in a discrete structure, including: user_mentions, urls, and
-     *                        hashtags.
-     * @param includeRetweets When set to either true, t or 1, the list timeline will contain native
-     *                        retweets (if they exist) in addition to the standard stream of tweets.
-     *                        The output format of retweeted tweets is identical to the
-     *                        representation you see in home_timeline.
-     */
-    @GET("/1.1/lists/statuses.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> statuses(@Query("list_id") Long listId,
-                               @Query("slug") String slug,
-                               @Query("owner_screen_name") String ownerScreenName,
-                               @Query("owner_id") Long ownerId,
-                               @Query("since_id") Long sinceId,
-                               @Query("max_id") Long maxId,
-                               @Query("count") Integer count,
-                               @Query("include_entities") Boolean includeEntities,
-                               @Query("include_rts") Boolean includeRetweets);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.kt
new file mode 100644
index 00000000..4187cd05
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/ListService.kt
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.services
+
+import com.twitter.sdk.android.core.models.Tweet
+
+import retrofit2.Call
+import retrofit2.http.GET
+import retrofit2.http.Query
+
+interface ListService {
+
+    /**
+     * Returns a timeline of tweets authored by members of the specified list. Retweets are included
+     * by default.
+     *
+     * @param listId          The numerical id of the list.
+     * @param slug            You can identify a list by its slug instead of its numerical id. If you decide to
+     * do so, note that you'll also have to specify the list owner using the owner_id or
+     * owner_screen_name parameters.
+     * @param ownerScreenName The screen name of the user who owns the list being requested by a
+     * slug.
+     * @param ownerId         The user ID of the user who owns the list being requested by a slug.
+     * @param sinceId         Returns results with an ID greater than (that is, more recent than) the
+     * specified ID. There are limits to the number of Tweets which can be accessed
+     * through the API. If the limit of Tweets has occurred since the since_id, the
+     * since_id will be forced to the oldest ID available.
+     * @param maxId           Returns results with an ID less than (that is, older than) or equal to the
+     * specified ID.
+     * @param count           Specifies the number of results to retrieve per "page."
+     * @param includeEntities Entities are ON by default in API 1.1, each Tweet includes a node
+     * called "entities." This node offers a variety of metadata about the
+     * Tweet in a discrete structure, including: user_mentions, urls, and
+     * hashtags.
+     * @param includeRetweets When set to either true, t or 1, the list timeline will contain native
+     * retweets (if they exist) in addition to the standard stream of tweets.
+     * The output format of retweeted tweets is identical to the
+     * representation you see in home_timeline.
+     */
+    @GET("/1.1/lists/statuses.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun statuses(@Query("list_id") listId: Long?,
+                 @Query("slug") slug: String,
+                 @Query("owner_screen_name") ownerScreenName: String,
+                 @Query("owner_id") ownerId: Long?,
+                 @Query("since_id") sinceId: Long?,
+                 @Query("max_id") maxId: Long?,
+                 @Query("count") count: Int?,
+                 @Query("include_entities") includeEntities: Boolean?,
+                 @Query("include_rts") includeRetweets: Boolean?): Call<List<Tweet>>
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.kt
similarity index 65%
rename from twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java
rename to twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.kt
index 844cfdea..b91a6aba 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/MediaService.kt
@@ -15,17 +15,17 @@
  *
  */
 
-package com.twitter.sdk.android.core.services;
+package com.twitter.sdk.android.core.services
 
-import com.twitter.sdk.android.core.models.Media;
+import com.twitter.sdk.android.core.models.Media
 
-import okhttp3.RequestBody;
-import retrofit2.Call;
-import retrofit2.http.Multipart;
-import retrofit2.http.POST;
-import retrofit2.http.Part;
+import okhttp3.RequestBody
+import retrofit2.Call
+import retrofit2.http.Multipart
+import retrofit2.http.POST
+import retrofit2.http.Part
 
-public interface MediaService {
+interface MediaService {
 
     /**
      * Uploads media (images) to Twitter for use in a Tweet or Twitter-hosted Card. You may
@@ -33,14 +33,15 @@
      * parameters are mutually exclusive. Media uploads for images are limited to 5MB in file
      * size.
      * Supported MIME-types are PNG, JPEG, BMP, WEBP, GIF, and Animated Gif
-     * @param media the raw binary file content to upload. Cannot be used with the mediaData
-     *              parameter.
+     *
+     * @param media     the raw binary file content to upload. Cannot be used with the mediaData
+     * parameter.
      * @param mediaData the base64-encoded file content to upload. Cannot be used with the media
-     *                  parameter
+     * parameter
      */
     @Multipart
     @POST("https://upload.twitter.com/1.1/media/upload.json")
-    Call<Media> upload(@Part("media") RequestBody media,
-                @Part("media_data") RequestBody mediaData,
-                @Part("additional_owners") RequestBody additionalOwners);
+    fun upload(@Part("media") media: RequestBody,
+               @Part("media_data") mediaData: RequestBody,
+               @Part("additional_owners") additionalOwners: RequestBody): Call<Media>
 }
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java
deleted file mode 100644
index dd009fd6..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Search;
-import com.twitter.sdk.android.core.services.params.Geocode;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.http.Query;
-
-public interface SearchService {
-
-    /**
-     * Returns a collection of relevant Tweets matching a specified query.
-     * <p>
-     * Please note that Twitter's search service and, by extension, the Search API is not meant to
-     * be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the
-     * search interface.
-     * <p>
-     * In API v1.1, the response format of the Search API has been improved to return Tweet objects
-     * more similar to the objects you'll find across the REST API and platform. You may need to
-     * tolerate some inconsistencies and variance in perspectival values (fields that pertain to the
-     * perspective of the authenticating user) and embedded user objects.
-     * <p>
-     * To learn how to use Twitter Search effectively, consult our guide to Using the Twitter Search
-     * API. See Working with Timelines to learn best practices for navigating results by since_id
-     * and max_id.
-     *
-     * @param query (required) A UTF-8, URL-encoded search query of 500 characters maximum,
-     *              including operators. Queries may additionally be limited by complexity.
-     * @param geocode (optional) Returns tweets by users located within a given radius of the given
-     *                latitude/longitude. The location is preferentially taking from the Geotagging
-     *                API, but will fall back to their Twitter profile. The parameter value is
-     *                specified by "latitude,longitude,radius", where radius units must be specified
-     *                as either "mi" (miles) or "km" (kilometers). Note that you cannot use the near
-     *                operator via the API to geocode arbitrary locations; however you can use this
-     *                geocode parameter to search near geocodes directly. A maximum of 1,000
-     *                distinct "sub-regions" will be considered when using the radius modifier.
-     * @param lang (optional) Restricts tweets to the given language, given by an ISO 639-1 code.
-     *             Language detection is best-effort.
-     * @param locale (optional) Specify the language of the query you are sending (only ja is
-     *               currently effective). This is intended for language-specific consumers and the
-     *               default should work in the majority of cases.
-     * @param resultType (optional) Specifies what type of search results you would prefer to
-     *                   receive. The current default is "mixed." Valid values include:
-     * mixed: Include both popular and real time results in the response.
-     * recent: return only the most recent results in the response
-     * popular: return only the most popular results in the response.
-     * @param count (optional) The number of tweets to return per page, up to a maximum of 100.
-     *              Defaults to 15. This was formerly the "rpp" parameter in the old Search API.
-     * @param until (optional) Returns tweets generated before the given date. Date should be
-     *              formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as
-     *              far as the date you specify here.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of Tweets which can be
-     *                accessed through the API. If the limit of Tweets has occured since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     */
-    @GET("/1.1/search/tweets.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Search> tweets(@Query("q") String query,
-                        //EncodedQuery protects commas from encode
-                        @Query(value = "geocode", encoded = true) Geocode geocode,
-                        @Query("lang") String lang,
-                        @Query("locale") String locale,
-                        @Query("result_type") String resultType,
-                        @Query("count") Integer count,
-                        @Query("until") String until,
-                        @Query("since_id") Long sinceId,
-                        @Query("max_id") Long maxId,
-                        @Query("include_entities") Boolean includeEntities);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.kt
new file mode 100644
index 00000000..f04c5ac7
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/SearchService.kt
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.services
+
+import com.twitter.sdk.android.core.models.Search
+import com.twitter.sdk.android.core.services.params.Geocode
+
+import retrofit2.Call
+import retrofit2.http.GET
+import retrofit2.http.Query
+
+interface SearchService {
+
+    /**
+     * Returns a collection of relevant Tweets matching a specified query.
+     *
+     *
+     * Please note that Twitter's search service and, by extension, the Search API is not meant to
+     * be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the
+     * search interface.
+     *
+     *
+     * In API v1.1, the response format of the Search API has been improved to return Tweet objects
+     * more similar to the objects you'll find across the REST API and platform. You may need to
+     * tolerate some inconsistencies and variance in perspectival values (fields that pertain to the
+     * perspective of the authenticating user) and embedded user objects.
+     *
+     *
+     * To learn how to use Twitter Search effectively, consult our guide to Using the Twitter Search
+     * API. See Working with Timelines to learn best practices for navigating results by since_id
+     * and max_id.
+     *
+     * @param query           (required) A UTF-8, URL-encoded search query of 500 characters maximum,
+     * including operators. Queries may additionally be limited by complexity.
+     * @param geocode         (optional) Returns tweets by users located within a given radius of the given
+     * latitude/longitude. The location is preferentially taking from the Geotagging
+     * API, but will fall back to their Twitter profile. The parameter value is
+     * specified by "latitude,longitude,radius", where radius units must be specified
+     * as either "mi" (miles) or "km" (kilometers). Note that you cannot use the near
+     * operator via the API to geocode arbitrary locations; however you can use this
+     * geocode parameter to search near geocodes directly. A maximum of 1,000
+     * distinct "sub-regions" will be considered when using the radius modifier.
+     * @param lang            (optional) Restricts tweets to the given language, given by an ISO 639-1 code.
+     * Language detection is best-effort.
+     * @param locale          (optional) Specify the language of the query you are sending (only ja is
+     * currently effective). This is intended for language-specific consumers and the
+     * default should work in the majority of cases.
+     * @param resultType      (optional) Specifies what type of search results you would prefer to
+     * receive. The current default is "mixed." Valid values include:
+     * mixed: Include both popular and real time results in the response.
+     * recent: return only the most recent results in the response
+     * popular: return only the most popular results in the response.
+     * @param count           (optional) The number of tweets to return per page, up to a maximum of 100.
+     * Defaults to 15. This was formerly the "rpp" parameter in the old Search API.
+     * @param until           (optional) Returns tweets generated before the given date. Date should be
+     * formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as
+     * far as the date you specify here.
+     * @param sinceId         (optional) Returns results with an ID greater than (that is, more recent than)
+     * the specified ID. There are limits to the number of Tweets which can be
+     * accessed through the API. If the limit of Tweets has occured since the
+     * since_id, the since_id will be forced to the oldest ID available.
+     * @param maxId           (optional) Returns results with an ID less than (that is, older than) or equal
+     * to the specified ID.
+     * @param includeEntities (optional) The entities node will be disincluded when set to false.
+     */
+    @GET("/1.1/search/tweets.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun tweets(@Query("q") query: String,
+            //EncodedQuery protects commas from encode
+               @Query(value = "geocode", encoded = true) geocode: Geocode,
+               @Query("lang") lang: String,
+               @Query("locale") locale: String,
+               @Query("result_type") resultType: String,
+               @Query("count") count: Int?,
+               @Query("until") until: String,
+               @Query("since_id") sinceId: Long?,
+               @Query("max_id") maxId: Long?,
+               @Query("include_entities") includeEntities: Boolean?): Call<Search>
+}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java
deleted file mode 100644
index ef464bb8..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.java
+++ /dev/null
@@ -1,363 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.services;
-
-import com.twitter.sdk.android.core.models.Tweet;
-
-import java.util.List;
-
-import retrofit2.Call;
-import retrofit2.http.Field;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.GET;
-import retrofit2.http.POST;
-import retrofit2.http.Path;
-import retrofit2.http.Query;
-
-public interface StatusesService {
-
-    /**
-     * Returns most recent mentions (tweets containing a user's @screen_name) for the
-     * authenticating user, by default returns 20 tweets.
-     * <p>
-     * The timeline returned is the equivalent of the one seen when you view your mentions on
-     * twitter.com.
-     * <p>
-     * The Twitter REST API goes back up to 800 tweets.
-     *
-     * @param count (optional) Specifies the number of tweets to try and retrieve, up to a maximum
-     *              of 200. The value of count is best thought of as a limit to the number of tweets
-     *              to return because suspended or deleted content is removed after the count has
-     *              been applied. We include retweets in the count, even if include_rts is not
-     *              supplied. It is recommended you always send include_rts=1 when using this API
-     *              method.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of tweets which can be
-     *                accessed through the API. If the limit of tweets has occurred since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param contributeDetails (optional) This parameter enhances the contributors element of the
-     *                          status response to include the screen_name of the contributor. By
-     *                          default only the user_id of the contributor is included.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     */
-    @GET("/1.1/statuses/mentions_timeline.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> mentionsTimeline(@Query("count") Integer count,
-                                       @Query("since_id") Long sinceId,
-                                       @Query("max_id") Long maxId,
-                                       @Query("trim_user") Boolean trimUser,
-                                       @Query("contributor_details") Boolean contributeDetails,
-                                       @Query("include_entities") Boolean includeEntities);
-
-    /**
-     * Returns a collection of the most recent tweets posted by the user indicated by the
-     * screen_name or user_id parameters.
-     * <p>
-     * User timelines belonging to protected users may only be requested when the authenticated user
-     * either "owns" the timeline or is an approved follower of the owner.
-     * <p>
-     * The timeline returned is the equivalent of the one seen when you view a user's profile on
-     * twitter.com.
-     * <p>
-     * The Twitter REST API goes back up to 3,200 of a user's most recent tweets.
-     * Native retweets of other statuses by the user is included in this total, regardless of
-     * whether include_rts is set to false when requesting this resource.
-     * <p>
-     * Always specify either an user_id or screen_name when requesting a user timeline.
-     *
-     * @param userId (optional) The ID of the user for whom to return results for.
-     * @param screenName (optional) The screen name of the user for whom to return results for.
-     * @param count (optional) Specifies the number of tweets to try and retrieve, up to a maximum
-     *              of 200. The value of count is best thought of as a limit to the number of tweets
-     *              to return because suspended or deleted content is removed after the count has
-     *              been applied. We include retweets in the count, even if include_rts is not
-     *              supplied. It is recommended you always send include_rts=1 when using this API
-     *              method.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of tweets which can be
-     *                accessed through the API. If the limit of tweets has occurred since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param excludeReplies (optional) This parameter will prevent replies from appearing in the
-     *                       returned timeline. Using exclude_replies with the count parameter will
-     *                       mean you will receive up-to count tweets — this is because the count
-     *                       parameter retrieves that many tweets before filtering out retweets and
-     *                       replies. This parameter is only supported for JSON and XML responses.
-     * @param contributeDetails (optional) This parameter enhances the contributors element of the
-     *                          status response to include the screen_name of the contributor. By
-     *                          default only the user_id of the contributor is included.
-     * @param includeRetweets (optional) When set to false, the timeline will strip any native
-     *                        retweets (though they will still count toward both the maximal length
-     *                        of the timeline and the slice selected by the count parameter).
-     *                        Note: If you're using the trim_user parameter in conjunction with
-     *                        include_rts, the retweets will still contain a full user object.
-     */
-    @GET("/1.1/statuses/user_timeline.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> userTimeline(@Query("user_id") Long userId,
-                                   @Query("screen_name") String screenName,
-                                   @Query("count") Integer count,
-                                   @Query("since_id") Long sinceId,
-                                   @Query("max_id") Long maxId,
-                                   @Query("trim_user") Boolean trimUser,
-                                   @Query("exclude_replies") Boolean excludeReplies,
-                                   @Query("contributor_details") Boolean contributeDetails,
-                                   @Query("include_rts") Boolean includeRetweets);
-
-    /**
-     * Returns a collection of the most recent Tweets and retweets posted by the authenticating user
-     * and the users they follow. The home timeline is central to how most users interact with the
-     * Twitter service.
-     * <p>
-     * The Twitter REST API goes back up to 800 tweets on the home timeline.
-     * It is more volatile for users that follow many users or follow users who Tweet frequently.
-     *
-     * @param count (optional) Specifies the number of tweets to try and retrieve, up to a maximum
-     *              of 200. The value of count is best thought of as a limit to the number of tweets
-     *              to return because suspended or deleted content is removed after the count has
-     *              been applied. We include retweets in the count, even if include_rts is not
-     *              supplied. It is recommended you always send include_rts=1 when using this API
-     *              method.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of Tweets which can be
-     *                accessed through the API. If the limit of Tweets has occurred since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param excludeReplies (optional) This parameter will prevent replies from appearing in the
-     *                       returned timeline. Using exclude_replies with the count parameter will
-     *                       mean you will receive up-to count tweets — this is because the count
-     *                       parameter retrieves that many tweets before filtering out retweets and
-     *                       replies. This parameter is only supported for JSON and XML responses.
-     * @param contributeDetails (optional) This parameter enhances the contributors element of the
-     *                          status response to include the screen_name of the contributor. By
-     *                          default only the user_id of the contributor is included.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     */
-    @GET("/1.1/statuses/home_timeline.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> homeTimeline(@Query("count") Integer count,
-                                   @Query("since_id") Long sinceId,
-                                   @Query("max_id") Long maxId,
-                                   @Query("trim_user") Boolean trimUser,
-                                   @Query("exclude_replies") Boolean excludeReplies,
-                                   @Query("contributor_details") Boolean contributeDetails,
-                                   @Query("include_entities") Boolean includeEntities);
-
-    /**
-     * Returns the most recent tweets authored by the authenticating user that have been retweeted
-     * by others. This timeline is a subset of the user's GET statuses / user_timeline.
-     *
-     * @param count (optional) Specifies the number of tweets to try and retrieve, up to a maximum
-     *              of 200. The value of count is best thought of as a limit to the number of tweets
-     *              to return because suspended or deleted content is removed after the count has
-     *              been applied. We include retweets in the count, even if include_rts is not
-     *              supplied. It is recommended you always send include_rts=1 when using this API
-     *              method.
-     * @param sinceId (optional) Returns results with an ID greater than (that is, more recent than)
-     *                the specified ID. There are limits to the number of Tweets which can be
-     *                accessed through the API. If the limit of Tweets has occurred since the
-     *                since_id, the since_id will be forced to the oldest ID available.
-     * @param maxId (optional) Returns results with an ID less than (that is, older than) or equal
-     *              to the specified ID.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     * @param includeUserEntities (optional) The user entities node will not be included when set to
-     *                            false.
-     */
-    @GET("/1.1/statuses/retweets_of_me.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> retweetsOfMe(@Query("count") Integer count,
-                                   @Query("since_id") Long sinceId,
-                                   @Query("max_id") Long maxId,
-                                   @Query("trim_user") Boolean trimUser,
-                                   @Query("include_entities") Boolean includeEntities,
-                                   @Query("include_user_entities") Boolean includeUserEntities);
-
-    /**
-     * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be
-     * embedded within the Tweet.
-     *
-     * @param id (required) The numerical ID of the desired Tweet.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param includeMyRetweet (optional) When set to either true, t or 1, any Tweets returned that
-     *                         have been retweeted by the authenticating user will include an
-     *                         additional current_user_retweet node, containing the ID of the source
-     *                         status for the retweet.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     */
-    @GET("/1.1/statuses/show.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> show(@Query("id") Long id,
-                     @Query("trim_user") Boolean trimUser,
-                     @Query("include_my_retweet") Boolean includeMyRetweet,
-                     @Query("include_entities") Boolean includeEntities);
-
-    /**
-     * Returns fully-hydrated Tweet objects for up to 100 tweets per request, as specified by
-     * comma-separated values passed to the id parameter.
-     * <p>
-     * This method is especially useful to get the details (hydrate) a collection of Tweet IDs.
-     * <p>
-     * GET statuses / show / :id is used to retrieve a single Tweet object.
-     * <p>
-     * There are a few things to note when using this method.
-     * <ul>
-     * <li>You must be following a protected user to be able to see their most recent tweets. If you
-     * don't follow a protected user their status will be removed.</li>
-     * <li>The order of Tweet IDs may not match the order of tweets in the returned array.</li>
-     * <li>If a requested Tweet is unknown or deleted, then that Tweet will not be returned in the
-     * results list, unless the map parameter is set to true, in which case it will be returned with
-     * a value of null.</li>
-     * <li>If none of your lookup criteria matches valid Tweet IDs an empty array will be returned
-     * for map=false.</li>
-     * <li>You are strongly encouraged to use a POST for larger requests.</li>
-     * </ul>
-     *
-     * @param id (required) The comma separated ids of the desired Tweets as a string.
-     * @param includeEntities (optional) The entities node will be disincluded when set to false.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param map (optional) When using the map parameter, tweets that do not exist or cannot be
-     *            viewed by the current user will still have their key represented but with an
-     *            explicitly null value paired with it
-     */
-    @GET("/1.1/statuses/lookup.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<List<Tweet>> lookup(@Query("id") String id,
-                             @Query("include_entities") Boolean includeEntities,
-                             @Query("trim_user") Boolean trimUser,
-                             @Query("map") Boolean map);
-
-    /**
-     * Updates the authenticating user's current status, also known as tweeting.
-     * <p>
-     * For each update attempt, the update text is compared with the authenticating user's recent
-     * tweets. Any attempt that would result in duplication will be blocked, resulting in a 403
-     * error. Therefore, a user cannot submit the same status twice in a row.
-     * <p>
-     * While not rate limited by the API a user is limited in the number of tweets they can create
-     * at a time. If the number of updates posted by the user reaches the current allowed limit this
-     * method will return an HTTP 403 error.
-     *
-     * @param status (required) The text of your status update, typically up to 140 characters. URL
-     *               encode as necessary. [node:840,title="t.co link wrapping"] may effect character
-     *               counts. There are some special commands in this field to be aware of. For
-     *               instance, preceding a message with "D " or "M " and following it with a screen
-     *               name can create a direct message to that user if the relationship allows for
-     *               it.
-     * @param inReplyToStatusId (optional) The ID of an existing status that the update is in reply
-     *                          to. Note:: This parameter will be ignored unless the author of the
-     *                          Tweet this parameter references is mentioned within the status text.
-     *                          Therefore, you must include @username, where username is the author
-     *                          of the referenced Tweet, within the update.
-     * @param possiblySensitive (optional) If you upload Tweet media that might be considered
-     *                          sensitive content such as nudity, violence, or medical procedures,
-     *                          you should set this value to true. See Media setting and best
-     *                          practices for more context. Defaults to false.
-     * @param latitude (optional) The latitude of the location this Tweet refers to. This parameter
-     *                 will be ignored unless it is inside the range -90.0 to +90.0 (North is
-     *                 positive) inclusive. It will also be ignored if there isn't a corresponding
-     *                 long parameter.
-     * @param longitude (optional) The longitude of the location this Tweet refers to. The valid
-     *                  ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This
-     *                  parameter will be ignored if outside that range, if it is not a number, if
-     *                  geo_enabled is disabled, or if there not a corresponding lat parameter.
-     * @param placeId (optional) A place in the world. These IDs can be retrieved from [node:29].
-     * @param displayCoordinates (optional) Whether or not to put a pin on the exact coordinates a
-     *                           Tweet has been sent from.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     * @param mediaIds A comma separated media ids as a string for uploaded media to associate
-     *                 with a Tweet. You may include up to 4 photos in a Tweet.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/statuses/update.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> update(@Field("status") String status,
-                       @Field("in_reply_to_status_id") Long inReplyToStatusId,
-                       @Field("possibly_sensitive") Boolean possiblySensitive,
-                       @Field("lat") Double latitude,
-                       @Field("long") Double longitude,
-                       @Field("place_id") String placeId,
-                       @Field("display_coordinates") Boolean displayCoordinates,
-                       @Field("trim_user") Boolean trimUser,
-                       @Field("media_ids") String mediaIds);
-
-    /**
-     * Retweets a Tweet. Returns the original Tweet with retweet details embedded.
-     *
-     * @param id (required) The numerical ID of the desired Tweet.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/statuses/retweet/{id}.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> retweet(@Path("id") Long id,
-                        @Field("trim_user") Boolean trimUser);
-
-    /**
-     * Destroys the status specified by the required ID parameter. The authenticating user must be
-     * the author of the specified status. Returns the destroyed status if successful.
-     *
-     * @param id (required) The numerical ID of the desired Tweet.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/statuses/destroy/{id}.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> destroy(@Path("id") Long id,
-                        @Field("trim_user") Boolean trimUser);
-
-    /**
-     * Destroys the retweet specified by the required source Tweet's ID parameter. Returns the
-     * source Tweet if successful.
-     *
-     * @param id (required) The numerical ID of the source Tweet.
-     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
-     *                 will include a user object including only the status authors numerical ID.
-     *                 Omit this parameter to receive the complete user object.
-     */
-    @FormUrlEncoded
-    @POST("/1.1/statuses/unretweet/{id}.json?" +
-            "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
-    Call<Tweet> unretweet(@Path("id") Long id,
-                          @Field("trim_user") Boolean trimUser);
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.kt b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.kt
new file mode 100644
index 00000000..82a4cf19
--- /dev/null
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/services/StatusesService.kt
@@ -0,0 +1,357 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.core.services
+
+import com.twitter.sdk.android.core.models.Tweet
+import retrofit2.Call
+import retrofit2.http.*
+
+interface StatusesService {
+
+    /**
+     * Returns most recent mentions (tweets containing a user's @screen_name) for the
+     * authenticating user, by default returns 20 tweets.
+     *
+     *
+     * The timeline returned is the equivalent of the one seen when you view your mentions on
+     * twitter.com.
+     *
+     *
+     * The Twitter REST API goes back up to 800 tweets.
+     *
+     * @param count             (optional) Specifies the number of tweets to try and retrieve, up to a maximum
+     * of 200. The value of count is best thought of as a limit to the number of tweets
+     * to return because suspended or deleted content is removed after the count has
+     * been applied. We include retweets in the count, even if include_rts is not
+     * supplied. It is recommended you always send include_rts=1 when using this API
+     * method.
+     * @param sinceId           (optional) Returns results with an ID greater than (that is, more recent than)
+     * the specified ID. There are limits to the number of tweets which can be
+     * accessed through the API. If the limit of tweets has occurred since the
+     * since_id, the since_id will be forced to the oldest ID available.
+     * @param maxId             (optional) Returns results with an ID less than (that is, older than) or equal
+     * to the specified ID.
+     * @param trimUser          (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     * @param contributeDetails (optional) This parameter enhances the contributors element of the
+     * status response to include the screen_name of the contributor. By
+     * default only the user_id of the contributor is included.
+     * @param includeEntities   (optional) The entities node will be disincluded when set to false.
+     */
+    @GET("/1.1/statuses/mentions_timeline.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun mentionsTimeline(@Query("count") count: Int?,
+                         @Query("since_id") sinceId: Long?,
+                         @Query("max_id") maxId: Long?,
+                         @Query("trim_user") trimUser: Boolean?,
+                         @Query("contributor_details") contributeDetails: Boolean?,
+                         @Query("include_entities") includeEntities: Boolean?): Call<List<Tweet>>
+
+    /**
+     * Returns a collection of the most recent tweets posted by the user indicated by the
+     * screen_name or user_id parameters.
+     *
+     *
+     * User timelines belonging to protected users may only be requested when the authenticated user
+     * either "owns" the timeline or is an approved follower of the owner.
+     *
+     *
+     * The timeline returned is the equivalent of the one seen when you view a user's profile on
+     * twitter.com.
+     *
+     *
+     * The Twitter REST API goes back up to 3,200 of a user's most recent tweets.
+     * Native retweets of other statuses by the user is included in this total, regardless of
+     * whether include_rts is set to false when requesting this resource.
+     *
+     *
+     * Always specify either an user_id or screen_name when requesting a user timeline.
+     *
+     * @param userId            (optional) The ID of the user for whom to return results for.
+     * @param screenName        (optional) The screen name of the user for whom to return results for.
+     * @param count             (optional) Specifies the number of tweets to try and retrieve, up to a maximum
+     * of 200. The value of count is best thought of as a limit to the number of tweets
+     * to return because suspended or deleted content is removed after the count has
+     * been applied. We include retweets in the count, even if include_rts is not
+     * supplied. It is recommended you always send include_rts=1 when using this API
+     * method.
+     * @param sinceId           (optional) Returns results with an ID greater than (that is, more recent than)
+     * the specified ID. There are limits to the number of tweets which can be
+     * accessed through the API. If the limit of tweets has occurred since the
+     * since_id, the since_id will be forced to the oldest ID available.
+     * @param maxId             (optional) Returns results with an ID less than (that is, older than) or equal
+     * to the specified ID.
+     * @param trimUser          (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     * @param excludeReplies    (optional) This parameter will prevent replies from appearing in the
+     * returned timeline. Using exclude_replies with the count parameter will
+     * mean you will receive up-to count tweets — this is because the count
+     * parameter retrieves that many tweets before filtering out retweets and
+     * replies. This parameter is only supported for JSON and XML responses.
+     * @param contributeDetails (optional) This parameter enhances the contributors element of the
+     * status response to include the screen_name of the contributor. By
+     * default only the user_id of the contributor is included.
+     * @param includeRetweets   (optional) When set to false, the timeline will strip any native
+     * retweets (though they will still count toward both the maximal length
+     * of the timeline and the slice selected by the count parameter).
+     * Note: If you're using the trim_user parameter in conjunction with
+     * include_rts, the retweets will still contain a full user object.
+     */
+    @GET("/1.1/statuses/user_timeline.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun userTimeline(@Query("user_id") userId: Long?,
+                     @Query("screen_name") screenName: String,
+                     @Query("count") count: Int?,
+                     @Query("since_id") sinceId: Long?,
+                     @Query("max_id") maxId: Long?,
+                     @Query("trim_user") trimUser: Boolean?,
+                     @Query("exclude_replies") excludeReplies: Boolean?,
+                     @Query("contributor_details") contributeDetails: Boolean?,
+                     @Query("include_rts") includeRetweets: Boolean?): Call<List<Tweet>>
+
+    /**
+     * Returns a collection of the most recent Tweets and retweets posted by the authenticating user
+     * and the users they follow. The home timeline is central to how most users interact with the
+     * Twitter service.
+     *
+     *
+     * The Twitter REST API goes back up to 800 tweets on the home timeline.
+     * It is more volatile for users that follow many users or follow users who Tweet frequently.
+     *
+     * @param count             (optional) Specifies the number of tweets to try and retrieve, up to a maximum
+     * of 200. The value of count is best thought of as a limit to the number of tweets
+     * to return because suspended or deleted content is removed after the count has
+     * been applied. We include retweets in the count, even if include_rts is not
+     * supplied. It is recommended you always send include_rts=1 when using this API
+     * method.
+     * @param sinceId           (optional) Returns results with an ID greater than (that is, more recent than)
+     * the specified ID. There are limits to the number of Tweets which can be
+     * accessed through the API. If the limit of Tweets has occurred since the
+     * since_id, the since_id will be forced to the oldest ID available.
+     * @param maxId             (optional) Returns results with an ID less than (that is, older than) or equal
+     * to the specified ID.
+     * @param trimUser          (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     * @param excludeReplies    (optional) This parameter will prevent replies from appearing in the
+     * returned timeline. Using exclude_replies with the count parameter will
+     * mean you will receive up-to count tweets — this is because the count
+     * parameter retrieves that many tweets before filtering out retweets and
+     * replies. This parameter is only supported for JSON and XML responses.
+     * @param contributeDetails (optional) This parameter enhances the contributors element of the
+     * status response to include the screen_name of the contributor. By
+     * default only the user_id of the contributor is included.
+     * @param includeEntities   (optional) The entities node will be disincluded when set to false.
+     */
+    @GET("/1.1/statuses/home_timeline.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun homeTimeline(@Query("count") count: Int?,
+                     @Query("since_id") sinceId: Long?,
+                     @Query("max_id") maxId: Long?,
+                     @Query("trim_user") trimUser: Boolean?,
+                     @Query("exclude_replies") excludeReplies: Boolean?,
+                     @Query("contributor_details") contributeDetails: Boolean?,
+                     @Query("include_entities") includeEntities: Boolean?): Call<List<Tweet>>
+
+    /**
+     * Returns the most recent tweets authored by the authenticating user that have been retweeted
+     * by others. This timeline is a subset of the user's GET statuses / user_timeline.
+     *
+     * @param count               (optional) Specifies the number of tweets to try and retrieve, up to a maximum
+     * of 200. The value of count is best thought of as a limit to the number of tweets
+     * to return because suspended or deleted content is removed after the count has
+     * been applied. We include retweets in the count, even if include_rts is not
+     * supplied. It is recommended you always send include_rts=1 when using this API
+     * method.
+     * @param sinceId             (optional) Returns results with an ID greater than (that is, more recent than)
+     * the specified ID. There are limits to the number of Tweets which can be
+     * accessed through the API. If the limit of Tweets has occurred since the
+     * since_id, the since_id will be forced to the oldest ID available.
+     * @param maxId               (optional) Returns results with an ID less than (that is, older than) or equal
+     * to the specified ID.
+     * @param trimUser            (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     * @param includeEntities     (optional) The entities node will be disincluded when set to false.
+     * @param includeUserEntities (optional) The user entities node will not be included when set to
+     * false.
+     */
+    @GET("/1.1/statuses/retweets_of_me.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun retweetsOfMe(@Query("count") count: Int?,
+                     @Query("since_id") sinceId: Long?,
+                     @Query("max_id") maxId: Long?,
+                     @Query("trim_user") trimUser: Boolean?,
+                     @Query("include_entities") includeEntities: Boolean?,
+                     @Query("include_user_entities") includeUserEntities: Boolean?): Call<List<Tweet>>
+
+    /**
+     * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be
+     * embedded within the Tweet.
+     *
+     * @param id               (required) The numerical ID of the desired Tweet.
+     * @param trimUser         (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     * @param includeMyRetweet (optional) When set to either true, t or 1, any Tweets returned that
+     * have been retweeted by the authenticating user will include an
+     * additional current_user_retweet node, containing the ID of the source
+     * status for the retweet.
+     * @param includeEntities  (optional) The entities node will be disincluded when set to false.
+     */
+    @GET("/1.1/statuses/show.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun show(@Query("id") id: Long?,
+             @Query("trim_user") trimUser: Boolean?,
+             @Query("include_my_retweet") includeMyRetweet: Boolean?,
+             @Query("include_entities") includeEntities: Boolean?): Call<Tweet>
+
+    /**
+     * Returns fully-hydrated Tweet objects for up to 100 tweets per request, as specified by
+     * comma-separated values passed to the id parameter.
+     *
+     *
+     * This method is especially useful to get the details (hydrate) a collection of Tweet IDs.
+     *
+     *
+     * GET statuses / show / :id is used to retrieve a single Tweet object.
+     *
+     *
+     * There are a few things to note when using this method.
+     *
+     *  * You must be following a protected user to be able to see their most recent tweets. If you
+     * don't follow a protected user their status will be removed.
+     *  * The order of Tweet IDs may not match the order of tweets in the returned array.
+     *  * If a requested Tweet is unknown or deleted, then that Tweet will not be returned in the
+     * results list, unless the map parameter is set to true, in which case it will be returned with
+     * a value of null.
+     *  * If none of your lookup criteria matches valid Tweet IDs an empty array will be returned
+     * for map=false.
+     *  * You are strongly encouraged to use a POST for larger requests.
+     *
+     *
+     * @param id              (required) The comma separated ids of the desired Tweets as a string.
+     * @param includeEntities (optional) The entities node will be disincluded when set to false.
+     * @param trimUser        (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     * @param map             (optional) When using the map parameter, tweets that do not exist or cannot be
+     * viewed by the current user will still have their key represented but with an
+     * explicitly null value paired with it
+     */
+    @GET("/1.1/statuses/lookup.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun lookup(@Query("id") id: String,
+               @Query("include_entities") includeEntities: Boolean?,
+               @Query("trim_user") trimUser: Boolean?,
+               @Query("map") map: Boolean?): Call<List<Tweet>>
+
+    /**
+     * Updates the authenticating user's current status, also known as tweeting.
+     *
+     *
+     * For each update attempt, the update text is compared with the authenticating user's recent
+     * tweets. Any attempt that would result in duplication will be blocked, resulting in a 403
+     * error. Therefore, a user cannot submit the same status twice in a row.
+     *
+     *
+     * While not rate limited by the API a user is limited in the number of tweets they can create
+     * at a time. If the number of updates posted by the user reaches the current allowed limit this
+     * method will return an HTTP 403 error.
+     *
+     * @param status             (required) The text of your status update, typically up to 140 characters. URL
+     * encode as necessary. [node:840,title="t.co link wrapping"] may effect character
+     * counts. There are some special commands in this field to be aware of. For
+     * instance, preceding a message with "D " or "M " and following it with a screen
+     * name can create a direct message to that user if the relationship allows for
+     * it.
+     * @param inReplyToStatusId  (optional) The ID of an existing status that the update is in reply
+     * to. Note:: This parameter will be ignored unless the author of the
+     * Tweet this parameter references is mentioned within the status text.
+     * Therefore, you must include @username, where username is the author
+     * of the referenced Tweet, within the update.
+     * @param possiblySensitive  (optional) If you upload Tweet media that might be considered
+     * sensitive content such as nudity, violence, or medical procedures,
+     * you should set this value to true. See Media setting and best
+     * practices for more context. Defaults to false.
+     * @param latitude           (optional) The latitude of the location this Tweet refers to. This parameter
+     * will be ignored unless it is inside the range -90.0 to +90.0 (North is
+     * positive) inclusive. It will also be ignored if there isn't a corresponding
+     * long parameter.
+     * @param longitude          (optional) The longitude of the location this Tweet refers to. The valid
+     * ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This
+     * parameter will be ignored if outside that range, if it is not a number, if
+     * geo_enabled is disabled, or if there not a corresponding lat parameter.
+     * @param placeId            (optional) A place in the world. These IDs can be retrieved from [node:29].
+     * @param displayCoordinates (optional) Whether or not to put a pin on the exact coordinates a
+     * Tweet has been sent from.
+     * @param trimUser           (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     * @param mediaIds           A comma separated media ids as a string for uploaded media to associate
+     * with a Tweet. You may include up to 4 photos in a Tweet.
+     */
+    @FormUrlEncoded
+    @POST("/1.1/statuses/update.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun update(@Field("status") status: String,
+               @Field("in_reply_to_status_id") inReplyToStatusId: Long?,
+               @Field("possibly_sensitive") possiblySensitive: Boolean?,
+               @Field("lat") latitude: Double?,
+               @Field("long") longitude: Double?,
+               @Field("place_id") placeId: String,
+               @Field("display_coordinates") displayCoordinates: Boolean?,
+               @Field("trim_user") trimUser: Boolean?,
+               @Field("media_ids") mediaIds: String): Call<Tweet>
+
+    /**
+     * Retweets a Tweet. Returns the original Tweet with retweet details embedded.
+     *
+     * @param id       (required) The numerical ID of the desired Tweet.
+     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     */
+    @FormUrlEncoded
+    @POST("/1.1/statuses/retweet/{id}.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun retweet(@Path("id") id: Long?,
+                @Field("trim_user") trimUser: Boolean?): Call<Tweet>
+
+    /**
+     * Destroys the status specified by the required ID parameter. The authenticating user must be
+     * the author of the specified status. Returns the destroyed status if successful.
+     *
+     * @param id       (required) The numerical ID of the desired Tweet.
+     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     */
+    @FormUrlEncoded
+    @POST("/1.1/statuses/destroy/{id}.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun destroy(@Path("id") id: Long?,
+                @Field("trim_user") trimUser: Boolean?): Call<Tweet>
+
+    /**
+     * Destroys the retweet specified by the required source Tweet's ID parameter. Returns the
+     * source Tweet if successful.
+     *
+     * @param id       (required) The numerical ID of the source Tweet.
+     * @param trimUser (optional) When set to either true, t or 1, each Tweet returned in a timeline
+     * will include a user object including only the status authors numerical ID.
+     * Omit this parameter to receive the complete user object.
+     */
+    @FormUrlEncoded
+    @POST("/1.1/statuses/unretweet/{id}.json?" + "tweet_mode=extended&include_cards=true&cards_platform=TwitterKit-13")
+    fun unretweet(@Path("id") id: Long?,
+                  @Field("trim_user") trimUser: Boolean?): Call<Tweet>
+}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
index fcb6677a..d3aa914d 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/AuthTokenAdapterTest.java
@@ -126,8 +126,8 @@ public void testDeserialize_oauth1aToken() {
                 AuthTokenWrapper.class);
         assertTrue(authTokenWrapper.authToken instanceof TwitterAuthToken);
         final TwitterAuthToken authToken = (TwitterAuthToken) authTokenWrapper.authToken;
-        assertEquals(TestFixtures.TOKEN, authToken.token);
-        assertEquals(TestFixtures.SECRET, authToken.secret);
+        assertEquals(TestFixtures.TOKEN, authToken.getToken());
+        assertEquals(TestFixtures.SECRET, authToken.getSecret());
     }
 
     @Test
@@ -157,9 +157,9 @@ public void testDeserialize_oauth1aTokenMissingCreatedAt() {
                 JSON_OAUTH1A_TOKEN_MISSING_CREATED_AT, AuthTokenWrapper.class);
         assertTrue(authTokenWrapper.authToken instanceof TwitterAuthToken);
         final TwitterAuthToken authToken = (TwitterAuthToken) authTokenWrapper.authToken;
-        assertEquals(TestFixtures.TOKEN, authToken.token);
-        assertEquals(TestFixtures.SECRET, authToken.secret);
-        assertEquals(0, authToken.createdAt);
+        assertEquals(TestFixtures.TOKEN, authToken.getToken());
+        assertEquals(TestFixtures.SECRET, authToken.getSecret());
+        assertEquals(0, authToken.getCreatedAt());
     }
 
     @Test
@@ -170,7 +170,7 @@ public void testDeserialize_oauth2TokenMissingCreatedAt() {
         final OAuth2Token authToken = (OAuth2Token) authTokenWrapper.authToken;
         assertEquals(TOKEN_TYPE, authToken.getTokenType());
         assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-        assertEquals(0, authToken.createdAt);
+        assertEquals(0, authToken.getCreatedAt());
     }
 
     @Test
@@ -182,7 +182,7 @@ public void testDeserialize_guestAuthTokenMissingCreatedAt() {
         assertEquals(GUEST_TOKEN, authToken.getGuestToken());
         assertEquals(TOKEN_TYPE, authToken.getTokenType());
         assertEquals(ACCESS_TOKEN, authToken.getAccessToken());
-        assertEquals(0, authToken.createdAt);
+        assertEquals(0, authToken.getCreatedAt());
     }
 
     private static class AuthTokenWrapper {
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java
index c65fa1c0..c3b62e4e 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/TwitterAuthTokenTest.java
@@ -37,7 +37,7 @@ public void testParcelable() {
         authToken.writeToParcel(parcel, 0);
         parcel.setDataPosition(0);
         final TwitterAuthToken parceledAuthToken
-                = TwitterAuthToken.CREATOR.createFromParcel(parcel);
+                = TwitterAuthToken.Companion.getCREATOR().createFromParcel(parcel);
         assertEquals(authToken, parceledAuthToken);
     }
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
index b81de6e3..3f3a5cc2 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/identity/AuthHandlerTest.java
@@ -67,8 +67,8 @@ public void testHandleOnActivityResult_resultCodeOK() {
         verify(mockCallback).success(argCaptor.capture());
         final TwitterSession session = (TwitterSession) argCaptor.getValue().getData();
         final TwitterAuthToken authToken = session.getAuthToken();
-        assertEquals(TestFixtures.TOKEN, authToken.token);
-        assertEquals(TestFixtures.SECRET, authToken.secret);
+        assertEquals(TestFixtures.TOKEN, authToken.getToken());
+        assertEquals(TestFixtures.SECRET, authToken.getSecret());
         assertEquals(TestFixtures.SCREEN_NAME, session.getUserName());
         assertEquals(TestFixtures.USER_ID, session.getUserId());
     }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java
index 5254860d..05a1b0dc 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/UserUtilsTest.java
@@ -44,7 +44,7 @@ public void setUp() throws Exception {
     @Test
     public void testGetProfileImageUrlHttps_nullSize() {
         assertEquals(user.profileImageUrlHttps,
-                UserUtils.getProfileImageUrlHttps(user, null));
+                UserUtils.INSTANCE.getProfileImageUrlHttps(user, null));
     }
 
     @Test
@@ -52,7 +52,7 @@ public void testGetProfileImageUrlHttps_reasonablySmall() {
         final String reasonableSize = "https://pbs.twimg.com/profile_images/2284174872/" +
                   "7df3h38zabcvjylnyfe3_reasonably_small.png";
         assertEquals(reasonableSize,
-                UserUtils.getProfileImageUrlHttps(user, UserUtils.AvatarSize.REASONABLY_SMALL));
+                UserUtils.INSTANCE.getProfileImageUrlHttps(user, AvatarSize.REASONABLY_SMALL));
     }
 
     @Test
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
index 3896dc4e..18a03ba9 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aServiceTest.java
@@ -99,7 +99,7 @@ public void testRequestAccessToken() {
 
                 assertEquals(verifier, innerVerifier);
                 assertNotNull(auth);
-                assertTrue(auth.contains(token.token));
+                assertTrue(auth.contains(token.getToken()));
 
                 return super.getAccessToken(auth, innerVerifier);
             }
@@ -141,8 +141,8 @@ public void testParseAuthResponse() {
                 + "screen_name=test&user_id=1";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
         assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.token);
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.secret);
+                authResponse.authToken.getToken());
+        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.getSecret());
         assertEquals("test", authResponse.userName);
         assertEquals(1L, authResponse.userId);
     }
@@ -177,8 +177,8 @@ public void testParseAuthResponse_noScreenName() {
                 + "user_id=1";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
         assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.token);
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.secret);
+                authResponse.authToken.getToken());
+        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.getSecret());
         assertNull(authResponse.userName);
         assertEquals(1L, authResponse.userId);
     }
@@ -190,8 +190,8 @@ public void testParseAuthResponse_noUserId() {
                 + "screen_name=test";
         final OAuthResponse authResponse = OAuth1aService.parseAuthResponse(response);
         assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                authResponse.authToken.token);
-        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.secret);
+                authResponse.authToken.getToken());
+        assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo", authResponse.authToken.getSecret());
         assertEquals("test", authResponse.userName);
         assertEquals(0L, authResponse.userId);
     }
@@ -206,9 +206,9 @@ public void testCallbackWrapperSuccess() {
             public void success(Result<OAuthResponse> result) {
                 final OAuthResponse authResponse = result.getData();
                 assertEquals("7588892-kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4",
-                        authResponse.authToken.token);
+                        authResponse.authToken.getToken());
                 assertEquals("PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo",
-                        authResponse.authToken.secret);
+                        authResponse.authToken.getSecret());
                 assertEquals("test", authResponse.userName);
                 assertEquals(1L, authResponse.userId);
             }
