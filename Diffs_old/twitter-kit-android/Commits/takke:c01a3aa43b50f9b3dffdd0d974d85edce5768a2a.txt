diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/HashtagEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/HashtagEntity.java
deleted file mode 100644
index 61e5b81b..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/HashtagEntity.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents hashtags which have been parsed out of the Tweet text.
- */
-public class HashtagEntity extends Entity {
-
-    /**
-     * Name of the hashtag, minus the leading '#' character.
-     */
-    @SerializedName("text")
-    public final String text;
-
-    public HashtagEntity(String text, int start, int end) {
-        super(start, end);
-        this.text = text;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Place.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Place.java
deleted file mode 100644
index b7282047..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Place.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-import java.util.Map;
-
-/**
- * A place is a specific, named location with corresponding geo coordinates.
- */
-public class Place {
-
-    /**
-     * Place Attributes are metadata about places. An attribute is a key-value pair of arbitrary
-     * strings, but with some conventions.
-     */
-    @SerializedName("attributes")
-    public final Map<String, String> attributes;
-
-    /**
-     * A bounding box of coordinates which encloses this place.
-     */
-    @SerializedName("bounding_box")
-    public final BoundingBox boundingBox;
-
-    /**
-     * Name of the country containing this place.
-     */
-    @SerializedName("country")
-    public final String country;
-
-    /**
-     * Shortened country code representing the country containing this place.
-     */
-    @SerializedName("country_code")
-    public final String countryCode;
-
-    /**
-     * Full human-readable representation of the place's name.
-     */
-    @SerializedName("full_name")
-    public final String fullName;
-
-    /**
-     * ID representing this place. Note that this is represented as a string, not an integer.
-     */
-    @SerializedName("id")
-    public final String id;
-
-    /**
-     * Short human-readable representation of the place's name.
-     */
-    @SerializedName("name")
-    public final String name;
-
-    /**
-     * The type of location represented by this place.
-     */
-    @SerializedName("place_type")
-    public final String placeType;
-
-    /**
-     * URL representing the location of additional place metadata for this place.
-     */
-    @SerializedName("url")
-    public final String url;
-
-    public Place(Map<String, String> attributes, BoundingBox boundingBox, String country,
-            String countryCode, String fullName, String id, String name, String placeType,
-            String url) {
-        this.attributes = ModelUtils.getSafeMap(attributes);
-        this.boundingBox = boundingBox;
-        this.country = country;
-        this.countryCode = countryCode;
-        this.fullName = fullName;
-        this.id = id;
-        this.name = name;
-        this.placeType = placeType;
-        this.url = url;
-    }
-
-    public static class BoundingBox {
-        /**
-         * A series of longitude and latitude points, defining a box which will contain the Place
-         * entity this bounding box is related to. Each point is an array in the form of
-         * [longitude, latitude]. Points are grouped into an array per bounding box. Bounding box
-         * arrays are wrapped in one additional array to be compatible with the polygon notation.
-         */
-        @SerializedName("coordinates")
-        public final List<List<List<Double>>> coordinates;
-
-        /**
-         * The type of data encoded in the coordinates property. This will be "Polygon" for bounding
-         * boxes.
-         */
-        @SerializedName("type")
-        public final String type;
-
-        private BoundingBox() {
-            this(null, null);
-        }
-
-        public BoundingBox(List<List<List<Double>>> coordinates, String type) {
-            this.coordinates = ModelUtils.getSafeList(coordinates);
-            this.type = type;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SymbolEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SymbolEntity.java
deleted file mode 100644
index 0cd48d16..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/SymbolEntity.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents symbols which have been parsed out of the Tweet text.
- */
-
-public class SymbolEntity extends Entity {
-
-    /**
-     * Name of the symbol, minus the leading '$' character.
-     */
-    @SerializedName("text")
-    public final String text;
-
-    public SymbolEntity(String text, int start, int end) {
-        super(start, end);
-        this.text = text;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java
deleted file mode 100644
index 6ad8777a..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Tweet.java
+++ /dev/null
@@ -1,353 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-
-/**
- * A Tweet is the basic atomic building block of all things Twitter. Tweets, also known more
- * generically as "status updates." Tweets can be embedded, replied to, favorited, unfavorited and
- * deleted.
- */
-public class Tweet implements Identifiable {
-    public static final long INVALID_ID = -1L;
-
-
-    /**
-     * Nullable. Represents the geographic location of this Tweet as reported by the user or client
-     * application. The inner coordinates array is formatted as geoJSON (longitude first,
-     * then latitude).
-     */
-    @SerializedName("coordinates")
-    public final Coordinates coordinates;
-
-    /**
-     * UTC time when this Tweet was created.
-     */
-    @SerializedName("created_at")
-    public final String createdAt;
-
-    /**
-     * Perspectival. Only surfaces on methods supporting the include_my_retweet parameter, when set
-     * to true. Details the Tweet ID of the user's own retweet (if existent) of this Tweet.
-     */
-    @SerializedName("current_user_retweet")
-    public final Object currentUserRetweet;
-
-    /**
-     * Entities which have been parsed out of the text of the Tweet.
-     */
-    @SerializedName("entities")
-    public final TweetEntities entities;
-
-    /**
-     * Additional entities such as multi photos, animated gifs and video.
-     */
-    @SerializedName("extended_entities")
-    public final TweetEntities extendedEntities;
-
-    /**
-     * Nullable. Indicates approximately how many times this Tweet has been "favorited" by Twitter
-     * users.
-     */
-    @SerializedName("favorite_count")
-    public final Integer favoriteCount;
-
-    /**
-     * Nullable. Perspectival. Indicates whether this Tweet has been favorited by the authenticating
-     * user.
-     */
-    @SerializedName("favorited")
-    public final boolean favorited;
-
-    /**
-     * Indicates the maximum value of the filter_level parameter which may be used and still stream
-     * this Tweet. So a value of medium will be streamed on none, low, and medium streams.
-     */
-    @SerializedName("filter_level")
-    public final String filterLevel;
-
-    /**
-     * The integer representation of the unique identifier for this Tweet. This number is greater
-     * than 53 bits and some programming languages may have difficulty/silent defects in
-     * interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use
-     * id_str for fetching the identifier to stay on the safe side. See Twitter IDs, JSON and
-     * Snowflake.
-     */
-    @SerializedName("id")
-    public final long id;
-
-    /**
-     * The string representation of the unique identifier for this Tweet. Implementations should use
-     * this rather than the large integer in id
-     */
-    @SerializedName("id_str")
-    public final String idStr;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the screen name of
-     * the original Tweet's author.
-     */
-    @SerializedName("in_reply_to_screen_name")
-    public final String inReplyToScreenName;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the integer
-     * representation of the original Tweet's ID.
-     */
-    @SerializedName("in_reply_to_status_id")
-    public final long inReplyToStatusId;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the string
-     * representation of the original Tweet's ID.
-     */
-    @SerializedName("in_reply_to_status_id_str")
-    public final String inReplyToStatusIdStr;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the integer
-     * representation of the original Tweet's author ID. This will not necessarily always be the
-     * user directly mentioned in the Tweet.
-     */
-    @SerializedName("in_reply_to_user_id")
-    public final long inReplyToUserId;
-
-    /**
-     * Nullable. If the represented Tweet is a reply, this field will contain the string
-     * representation of the original Tweet's author ID. This will not necessarily always be the
-     * user directly mentioned in the Tweet.
-     */
-    @SerializedName("in_reply_to_user_id_str")
-    public final String inReplyToUserIdStr;
-
-    /**
-     * Nullable. When present, indicates a BCP 47 language identifier corresponding to the
-     * machine-detected language of the Tweet text, or "und" if no language could be detected.
-     */
-    @SerializedName("lang")
-    public final String lang;
-
-    /**
-     * Nullable. When present, indicates that the tweet is associated (but not necessarily
-     * originating from) a Place.
-     */
-    @SerializedName("place")
-    public final Place place;
-
-    /**
-     * Nullable. This field only surfaces when a tweet contains a link. The meaning of the field
-     * doesn't pertain to the tweet content itself, but instead it is an indicator that the URL
-     * contained in the tweet may contain content or media identified as sensitive content.
-     */
-    @SerializedName("possibly_sensitive")
-    public final boolean possiblySensitive;
-
-    /**
-     * A set of key-value pairs indicating the intended contextual delivery of the containing Tweet.
-     * Currently used by Twitter's Promoted Products.
-     */
-    @SerializedName("scopes")
-    public final Object scopes;
-
-    /**
-     * This field only surfaces when the Tweet is a quote Tweet. This field contains the
-     * integer value Tweet ID of the quoted Tweet.
-     */
-    @SerializedName("quoted_status_id")
-    public final long quotedStatusId;
-
-    /**
-     * This field only surfaces when the Tweet is a quote Tweet. This is the string representation
-     * Tweet ID of the quoted Tweet.
-     */
-    @SerializedName("quoted_status_id_str")
-    public final String quotedStatusIdStr;
-
-    /**
-     * This field only surfaces when the Tweet is a quote Tweet. This attribute contains the
-     * Tweet object of the original Tweet that was quoted.
-     */
-    @SerializedName("quoted_status")
-    public final Tweet quotedStatus;
-
-    /**
-     * Number of times this Tweet has been retweeted. This field is no longer capped at 99 and will
-     * not turn into a String for "100+"
-     */
-    @SerializedName("retweet_count")
-    public final int retweetCount;
-
-    /**
-     * Perspectival. Indicates whether this Tweet has been retweeted by the authenticating user.
-     */
-    @SerializedName("retweeted")
-    public final boolean retweeted;
-
-    /**
-     * Users can amplify the broadcast of tweets authored by other users by retweeting. Retweets can
-     * be distinguished from typical Tweets by the existence of a retweeted_status attribute. This
-     * attribute contains a representation of the original Tweet that was retweeted. Note that
-     * retweets of retweets do not show representations of the intermediary retweet, but only the
-     * original tweet. (Users can also unretweet a retweet they created by deleting their retweet.)
-     */
-    @SerializedName("retweeted_status")
-    public final Tweet retweetedStatus;
-
-    /**
-     * Utility used to post the Tweet, as an HTML-formatted string. Tweets from the Twitter website
-     * have a source value of web.
-     */
-    @SerializedName("source")
-    public final String source;
-
-    /**
-     * The actual UTF-8 text of the status update. See twitter-text for details on what is currently
-     * considered valid characters.
-     */
-    @SerializedName(value = "text", alternate = {"full_text"})
-    public final String text;
-
-
-    /**
-     * An array of two unicode code point indices, identifying the inclusive start and exclusive end
-     * of the displayable content of the Tweet.
-     */
-    @SerializedName("display_text_range")
-    public final List<Integer> displayTextRange;
-
-    /**
-     * Indicates whether the value of the text parameter was truncated, for example, as a result of
-     * a retweet exceeding the 140 character Tweet length. Truncated text will end in ellipsis, like
-     * this ... Since Twitter now rejects long Tweets vs truncating them, the large majority of
-     * Tweets will have this set to false.
-     * Note that while native retweets may have their toplevel text property shortened, the original
-     * text will be available under the retweeted_status object and the truncated parameter will be
-     * set to the value of the original status (in most cases, false).
-     */
-    @SerializedName("truncated")
-    public final boolean truncated;
-
-    /**
-     * The user who posted this Tweet. Perspectival attributes embedded within this object are
-     * unreliable. See Why are embedded objects stale or inaccurate?.
-     */
-    @SerializedName("user")
-    public final User user;
-
-    /**
-     * When present and set to "true", it indicates that this piece of content has been withheld due
-     * to a DMCA complaint.
-     */
-    @SerializedName("withheld_copyright")
-    public final boolean withheldCopyright;
-
-    /**
-     * When present, indicates a list of uppercase two-letter country codes this content is withheld
-     * from. Twitter supports the following non-country values for this field:
-     * "XX" - Content is withheld in all countries
-     * "XY" - Content is withheld due to a DMCA request.
-     */
-    @SerializedName("withheld_in_countries")
-    public final List<String> withheldInCountries;
-
-    /**
-     * When present, indicates whether the content being withheld is the "status" or a "user."
-     */
-    @SerializedName("withheld_scope")
-    public final String withheldScope;
-
-    /**
-     * Nullable. Card data used to attach rich photos, videos and media experience to Tweets.
-     */
-    @SerializedName("card")
-    public final Card card;
-
-    private Tweet() {
-        this(null, null, null, TweetEntities.EMPTY, TweetEntities.EMPTY, 0, false, null, 0, "0",
-                null, 0, "0", 0, "0", null, null, false, null, 0, "0", null, 0, false, null, null,
-                null, null, false, null, false, null, null, null);
-    }
-
-    public Tweet(Coordinates coordinates, String createdAt, Object currentUserRetweet,
-            TweetEntities entities, TweetEntities extendedEntities, Integer favoriteCount,
-            boolean favorited, String filterLevel, long id, String idStr,
-            String inReplyToScreenName, long inReplyToStatusId, String inReplyToStatusIdStr,
-            long inReplyToUserId, String inReplyToUserIdStr, String lang, Place place,
-            boolean possiblySensitive, Object scopes, long quotedStatusId, String quotedStatusIdStr,
-            Tweet quotedStatus, int retweetCount, boolean retweeted, Tweet retweetedStatus,
-            String source, String text, List<Integer> displayTextRange, boolean truncated,
-            User user, boolean withheldCopyright, List<String> withheldInCountries,
-            String withheldScope, Card card) {
-        this.coordinates = coordinates;
-        this.createdAt = createdAt;
-        this.currentUserRetweet = currentUserRetweet;
-        this.entities = entities == null ? TweetEntities.EMPTY : entities;
-        this.extendedEntities = extendedEntities == null ? TweetEntities.EMPTY : extendedEntities;
-        this.favoriteCount = favoriteCount;
-        this.favorited = favorited;
-        this.filterLevel = filterLevel;
-        this.id = id;
-        this.idStr = idStr;
-        this.inReplyToScreenName = inReplyToScreenName;
-        this.inReplyToStatusId = inReplyToStatusId;
-        this.inReplyToStatusIdStr = inReplyToStatusIdStr;
-        this.inReplyToUserId = inReplyToUserId;
-        this.inReplyToUserIdStr = inReplyToUserIdStr;
-        this.lang = lang;
-        this.place = place;
-        this.possiblySensitive = possiblySensitive;
-        this.scopes = scopes;
-        this.quotedStatusId = quotedStatusId;
-        this.quotedStatusIdStr = quotedStatusIdStr;
-        this.quotedStatus = quotedStatus;
-        this.retweetCount = retweetCount;
-        this.retweeted = retweeted;
-        this.retweetedStatus = retweetedStatus;
-        this.source = source;
-        this.text = text;
-        this.displayTextRange = ModelUtils.getSafeList(displayTextRange);
-        this.truncated = truncated;
-        this.user = user;
-        this.withheldCopyright = withheldCopyright;
-        this.withheldInCountries = ModelUtils.getSafeList(withheldInCountries);
-        this.withheldScope = withheldScope;
-        this.card = card;
-    }
-
-    @Override
-    public long getId() {
-        return this.id;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (o == null) return false;
-        if (!(o instanceof Tweet)) return false;
-        final Tweet other = (Tweet) o;
-        return this.id == other.id;
-    }
-
-    @Override
-    public int hashCode() {
-        return (int) this.id;
-    }
-
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java
deleted file mode 100644
index f2d2c153..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetBuilder.java
+++ /dev/null
@@ -1,275 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import java.util.List;
-
-public class TweetBuilder {
-    private Coordinates coordinates;
-    private String createdAt;
-    private Object currentUserRetweet;
-    private TweetEntities entities;
-    private TweetEntities extendedEntities;
-    private Integer favoriteCount;
-    private boolean favorited;
-    private String filterLevel;
-    private long id = Tweet.INVALID_ID;
-    private String idStr;
-    private String inReplyToScreenName;
-    private long inReplyToStatusId;
-    private String inReplyToStatusIdStr;
-    private long inReplyToUserId;
-    private String inReplyToUserIdStr;
-    private String lang;
-    private Place place;
-    private boolean possiblySensitive;
-    private Object scopes;
-    private long quotedStatusId;
-    private String quotedStatusIdStr;
-    private Tweet quotedStatus;
-    private int retweetCount;
-    private boolean retweeted;
-    private Tweet retweetedStatus;
-    private String source;
-    private String text;
-    private List<Integer> displayTextRange;
-    private boolean truncated;
-    private User user;
-    private boolean withheldCopyright;
-    private List<String> withheldInCountries;
-    private String withheldScope;
-    private Card card;
-
-    public TweetBuilder setCoordinates(Coordinates coordinates) {
-        this.coordinates = coordinates;
-        return this;
-    }
-
-    public TweetBuilder setCreatedAt(String createdAt) {
-        this.createdAt = createdAt;
-        return this;
-    }
-
-    public TweetBuilder setCurrentUserRetweet(Object currentUserRetweet) {
-        this.currentUserRetweet = currentUserRetweet;
-        return this;
-    }
-
-    public TweetBuilder setEntities(TweetEntities entities) {
-        this.entities = entities;
-        return this;
-    }
-
-    public TweetBuilder setExtendedEntities(TweetEntities extendedEntities) {
-        this.extendedEntities = extendedEntities;
-        return this;
-    }
-
-    public TweetBuilder setFavoriteCount(Integer favoriteCount) {
-        this.favoriteCount = favoriteCount;
-        return this;
-    }
-
-    public TweetBuilder setFavorited(boolean favorited) {
-        this.favorited = favorited;
-        return this;
-    }
-
-    public TweetBuilder setFilterLevel(String filterLevel) {
-        this.filterLevel = filterLevel;
-        return this;
-    }
-
-    public TweetBuilder setId(long id) {
-        this.id = id;
-        return this;
-    }
-
-    public TweetBuilder setIdStr(String idStr) {
-        this.idStr = idStr;
-        return this;
-    }
-
-    public TweetBuilder setInReplyToScreenName(String inReplyToScreenName) {
-        this.inReplyToScreenName = inReplyToScreenName;
-        return this;
-    }
-
-    public TweetBuilder setInReplyToStatusId(long inReplyToStatusId) {
-        this.inReplyToStatusId = inReplyToStatusId;
-        return this;
-    }
-
-    public TweetBuilder setInReplyToStatusIdStr(String inReplyToStatusIdStr) {
-        this.inReplyToStatusIdStr = inReplyToStatusIdStr;
-        return this;
-    }
-
-    public TweetBuilder setInReplyToUserId(long inReplyToUserId) {
-        this.inReplyToUserId = inReplyToUserId;
-        return this;
-    }
-
-    public TweetBuilder setInReplyToUserIdStr(String inReplyToUserIdStr) {
-        this.inReplyToUserIdStr = inReplyToUserIdStr;
-        return this;
-    }
-
-    public TweetBuilder setLang(String lang) {
-        this.lang = lang;
-        return this;
-    }
-
-    public TweetBuilder setPlace(Place place) {
-        this.place = place;
-        return this;
-    }
-
-    public TweetBuilder setPossiblySensitive(boolean possiblySensitive) {
-        this.possiblySensitive = possiblySensitive;
-        return this;
-    }
-
-    public TweetBuilder setScopes(Object scopes) {
-        this.scopes = scopes;
-        return this;
-    }
-
-    public TweetBuilder setQuotedStatusId(long quotedStatusId) {
-        this.quotedStatusId = quotedStatusId;
-        return this;
-    }
-
-    public TweetBuilder setQuotedStatusIdStr(String quotedStatusIdStr) {
-        this.quotedStatusIdStr = quotedStatusIdStr;
-        return this;
-    }
-
-    public TweetBuilder setQuotedStatus(Tweet quotedStatus) {
-        this.quotedStatus = quotedStatus;
-        return this;
-    }
-
-    public TweetBuilder setRetweetCount(int retweetCount) {
-        this.retweetCount = retweetCount;
-        return this;
-    }
-
-    public TweetBuilder setRetweeted(boolean retweeted) {
-        this.retweeted = retweeted;
-        return this;
-    }
-
-    public TweetBuilder setRetweetedStatus(Tweet retweetedStatus) {
-        this.retweetedStatus = retweetedStatus;
-        return this;
-    }
-
-    public TweetBuilder setSource(String source) {
-        this.source = source;
-        return this;
-    }
-
-    public TweetBuilder setText(String text) {
-        this.text = text;
-        return this;
-    }
-
-    public TweetBuilder setDisplayTextRange(List<Integer> displayTextRange) {
-        this.displayTextRange = displayTextRange;
-        return this;
-    }
-
-    public TweetBuilder setTruncated(boolean truncated) {
-        this.truncated = truncated;
-        return this;
-    }
-
-    public TweetBuilder setUser(User user) {
-        this.user = user;
-        return this;
-    }
-
-    public TweetBuilder setWithheldCopyright(boolean withheldCopyright) {
-        this.withheldCopyright = withheldCopyright;
-        return this;
-    }
-
-    public TweetBuilder setWithheldInCountries(List<String> withheldInCountries) {
-        this.withheldInCountries = withheldInCountries;
-        return this;
-    }
-
-    public TweetBuilder setWithheldScope(String withheldScope) {
-        this.withheldScope = withheldScope;
-        return this;
-    }
-
-    public TweetBuilder setCard(Card card) {
-        this.card = card;
-        return this;
-    }
-
-    public TweetBuilder copy(Tweet tweet) {
-        this.coordinates = tweet.coordinates;
-        this.createdAt = tweet.createdAt;
-        this.currentUserRetweet = tweet.currentUserRetweet;
-        this.entities = tweet.entities;
-        this.extendedEntities = tweet.extendedEntities;
-        this.favoriteCount = tweet.favoriteCount;
-        this.favorited = tweet.favorited;
-        this.filterLevel = tweet.filterLevel;
-        this.id = tweet.id;
-        this.idStr = tweet.idStr;
-        this.inReplyToScreenName = tweet.inReplyToScreenName;
-        this.inReplyToStatusId = tweet.inReplyToStatusId;
-        this.inReplyToStatusIdStr = tweet.inReplyToStatusIdStr;
-        this.inReplyToUserId = tweet.inReplyToUserId;
-        this.inReplyToUserIdStr = tweet.inReplyToStatusIdStr;
-        this.lang = tweet.lang;
-        this.place = tweet.place;
-        this.possiblySensitive = tweet.possiblySensitive;
-        this.scopes = tweet.scopes;
-        this.quotedStatusId = tweet.quotedStatusId;
-        this.quotedStatusIdStr = tweet.quotedStatusIdStr;
-        this.quotedStatus = tweet.quotedStatus;
-        this.retweetCount = tweet.retweetCount;
-        this.retweeted = tweet.retweeted;
-        this.retweetedStatus = tweet.retweetedStatus;
-        this.source = tweet.source;
-        this.text = tweet.text;
-        this.displayTextRange = tweet.displayTextRange;
-        this.truncated = tweet.truncated;
-        this.user = tweet.user;
-        this.withheldCopyright = tweet.withheldCopyright;
-        this.withheldInCountries = tweet.withheldInCountries;
-        this.withheldScope = tweet.withheldScope;
-        this.card = tweet.card;
-        return this;
-    }
-
-    public Tweet build() {
-        return new Tweet(coordinates, createdAt, currentUserRetweet, entities, extendedEntities,
-                favoriteCount, favorited, filterLevel, id, idStr, inReplyToScreenName,
-                inReplyToStatusId, inReplyToStatusIdStr, inReplyToUserId, inReplyToUserIdStr,
-                lang, place, possiblySensitive, scopes, quotedStatusId, quotedStatusIdStr,
-                quotedStatus, retweetCount, retweeted, retweetedStatus, source, text,
-                displayTextRange, truncated, user, withheldCopyright, withheldInCountries,
-                withheldScope, card);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java
deleted file mode 100644
index ca2bcbf4..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/TweetEntities.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-
-/**
- * Provides metadata and additional contextual information about content posted in a tweet.
- */
-public class TweetEntities {
-
-    static final TweetEntities EMPTY = new TweetEntities(null, null, null, null, null);
-
-    /**
-     * Represents URLs included in the text of a Tweet or within textual fields of a user object.
-     */
-    @SerializedName("urls")
-    public final List<UrlEntity> urls;
-
-    /**
-     * Represents other Twitter users mentioned in the text of the Tweet.
-     */
-    @SerializedName("user_mentions")
-    public final List<MentionEntity> userMentions;
-
-    /**
-     * Represents media elements uploaded with the Tweet.
-     */
-    @SerializedName("media")
-    public final List<MediaEntity> media;
-
-    /**
-     * Represents hashtags which have been parsed out of the Tweet text.
-     */
-    @SerializedName("hashtags")
-    public final List<HashtagEntity> hashtags;
-
-    /**
-     * Represents symbols which have been parsed out of the Tweet text.
-     */
-    @SerializedName("symbols")
-    public final List<SymbolEntity> symbols;
-
-    private TweetEntities() {
-        this(null, null, null, null, null);
-    }
-
-    public TweetEntities(List<UrlEntity> urls, List<MentionEntity> userMentions,
-            List<MediaEntity> media, List<HashtagEntity> hashtags, List<SymbolEntity> symbols) {
-        this.urls = ModelUtils.getSafeList(urls);
-        this.userMentions = ModelUtils.getSafeList(userMentions);
-        this.media = ModelUtils.getSafeList(media);
-        this.hashtags = ModelUtils.getSafeList(hashtags);
-        this.symbols = ModelUtils.getSafeList(symbols);
-    }
-
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
index 5ee60582..50ed0de6 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/User.java
@@ -263,14 +263,14 @@
     @SerializedName("show_all_inline_media")
     public final boolean showAllInlineMedia;
 
-    /**
-     * Nullable. If possible, the user's most recent tweet or retweet. In some circumstances, this
-     * data cannot be provided and this field will be omitted, null, or empty. Perspectival
-     * attributes within tweets embedded within users cannot always be relied upon. See Why are
-     * embedded objects stale or inaccurate?.
-     */
-    @SerializedName("status")
-    public final Tweet status;
+//    /**
+//     * Nullable. If possible, the user's most recent tweet or retweet. In some circumstances, this
+//     * data cannot be provided and this field will be omitted, null, or empty. Perspectival
+//     * attributes within tweets embedded within users cannot always be relied upon. See Why are
+//     * embedded objects stale or inaccurate?.
+//     */
+//    @SerializedName("status")
+//    public final Tweet status;
 
     /**
      * The number of tweets (including retweets) issued by the user.
@@ -326,7 +326,7 @@ public User(boolean contributorsEnabled, String createdAt, boolean defaultProfil
             String profileLinkColor, String profileSidebarBorderColor,
             String profileSidebarFillColor, String profileTextColor,
             boolean profileUseBackgroundImage, boolean protectedUser, String screenName,
-            boolean showAllInlineMedia, Tweet status, int statusesCount, String timeZone,
+            boolean showAllInlineMedia, int statusesCount, String timeZone,
             String url, int utcOffset, boolean verified, List<String> withheldInCountries,
             String withheldScope) {
         this.contributorsEnabled = contributorsEnabled;
@@ -363,7 +363,7 @@ public User(boolean contributorsEnabled, String createdAt, boolean defaultProfil
         this.protectedUser = protectedUser;
         this.screenName = screenName;
         this.showAllInlineMedia = showAllInlineMedia;
-        this.status = status;
+//        this.status = status;
         this.statusesCount = statusesCount;
         this.timeZone = timeZone;
         this.url = url;
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
index 3483f945..e9f71385 100644
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
+++ b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/UserBuilder.java
@@ -54,7 +54,7 @@
     private boolean protectedUser;
     private String screenName;
     private boolean showAllInlineMedia;
-    private Tweet status;
+//    private Tweet status;
     private int statusesCount;
     private String timeZone;
     private String url;
@@ -233,10 +233,10 @@ public UserBuilder setShowAllInlineMedia(boolean showAllInlineMedia) {
         return this;
     }
 
-    public UserBuilder setStatus(Tweet status) {
-        this.status = status;
-        return this;
-    }
+//    public UserBuilder setStatus(Tweet status) {
+//        this.status = status;
+//        return this;
+//    }
 
     public UserBuilder setStatusesCount(int statusesCount) {
         this.statusesCount = statusesCount;
@@ -282,7 +282,7 @@ public User build() {
                 profileBannerUrl, profileImageUrl, profileImageUrlHttps,
                 profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor,
                 profileTextColor, profileUseBackgroundImage, protectedUser, screenName,
-                showAllInlineMedia, status, statusesCount, timeZone, url, utcOffset, verified,
+                showAllInlineMedia, statusesCount, timeZone, url, utcOffset, verified,
                 withheldInCountries, withheldScope);
     }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
index 8bd9b40b..84274a88 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
@@ -20,8 +20,6 @@
 
 import com.twitter.sdk.android.core.internal.oauth.GuestAuthToken;
 import com.twitter.sdk.android.core.internal.oauth.OAuth2Token;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
 
 import org.junit.Test;
 
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
deleted file mode 100644
index 94216d70..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/HashTagEntityTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class HashTagEntityTest  {
-
-    private static final String TEST_JSON = "{\"indices\":[32,36],\"text\":\"lol\"}";
-    private static final int TEST_INDICES_START = 32;
-    private static final int TEST_INDICES_END = 36;
-    private static final String TEST_TEXT = "lol";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final HashtagEntity entity = gson.fromJson(TEST_JSON, HashtagEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_TEXT, entity.text);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
deleted file mode 100644
index 85adec80..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/PlaceTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.List;
-import java.util.Map;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class PlaceTest {
-
-    private static final String EXPECTED_COUNTRY = "United States";
-    private static final String EXPECTED_COUNTRY_CODE = "US";
-    private static final String EXPECTED_FULL_NAME = "Twitter HQ, San Francisco";
-    private static final String EXPECTED_ID = "247f43d441defc03";
-    private static final String EXPECTED_NAME = "Twitter HQ";
-    private static final String EXPECTED_PLACE_TYPE = "poi";
-    private static final String EXPECTED_URL = "https://api.twitter.com/1.1/geo/id/247f43d441defc03.json";
-
-    private static final String EXPECTED_ATTR_STREET_ADDRESS = "street_address";
-    private static final String EXPECTED_ATTR_STREET_ADDRESS_VALUE = "795 Folsom St";
-    private static final String EXPECTED_ATTR_623_ID = "623:id";
-    private static final String EXPECTED_ATTR_623_ID_VALUE = "210176";
-    private static final String EXPECTED_ATTR_TWITTER = "twitter";
-    private static final String EXPECTED_ATTR_TWITTER_VALUE = "twitter";
-
-    private static final Double EXPECTED_BOUNDING_BOX_LONGITUDE = -122.400612831116;
-    private static final Double EXPECTED_BOUNDING_BOX_LATITUDE = 37.7821120598956;
-    private static final String EXPECTED_BOUNDING_BOX_TYPE = "Polygon";
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_places.json")));
-            final Place place = gson.fromJson(reader, Place.class);
-            assertAttributes(place.attributes);
-            assertBoundingBox(place.boundingBox);
-            assertEquals(EXPECTED_COUNTRY, place.country);
-            assertEquals(EXPECTED_COUNTRY_CODE, place.countryCode);
-            assertEquals(EXPECTED_FULL_NAME, place.fullName);
-            assertEquals(EXPECTED_ID, place.id);
-            assertEquals(EXPECTED_NAME, place.name);
-            assertEquals(EXPECTED_PLACE_TYPE, place.placeType);
-            assertEquals(EXPECTED_URL, place.url);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    private void assertAttributes(Map<String, String> attributes) {
-        assertEquals(EXPECTED_ATTR_STREET_ADDRESS_VALUE,
-                attributes.get(EXPECTED_ATTR_STREET_ADDRESS));
-        assertEquals(EXPECTED_ATTR_623_ID_VALUE, attributes.get(EXPECTED_ATTR_623_ID));
-        assertEquals(EXPECTED_ATTR_TWITTER_VALUE, attributes.get(EXPECTED_ATTR_TWITTER));
-    }
-
-    private void assertBoundingBox(Place.BoundingBox boundingBox) {
-        assertEquals(EXPECTED_BOUNDING_BOX_TYPE, boundingBox.type);
-        assertEquals(4, boundingBox.coordinates.get(0).size());
-        for (List<Double> d: boundingBox.coordinates.get(0)) {
-            assertEquals(EXPECTED_BOUNDING_BOX_LONGITUDE, d.get(0));
-            assertEquals(EXPECTED_BOUNDING_BOX_LATITUDE, d.get(1));
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
deleted file mode 100644
index bcdee62d..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/SymbolEntityTest.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class SymbolEntityTest  {
-
-    private static final String TEST_JSON = "{\"indices\":[32,36],\"text\":\"TWTR\"}";
-    private static final int TEST_INDICES_START = 32;
-    private static final int TEST_INDICES_END = 36;
-    private static final String TEST_TEXT = "TWTR";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final SymbolEntity entity = gson.fromJson(TEST_JSON, SymbolEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_TEXT, entity.text);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
deleted file mode 100644
index cf32cc34..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetEntitiesTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.Collections;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetEntitiesTest {
-
-    private static final int EXPECTED_URLS_SIZE = 1;
-    private static final int EXPECTED_USER_MENTIONS_SIZE = 1;
-    private static final int EXPECTED_MEDIA_SIZE = 1;
-    private static final int EXPECTED_HASHTAGS_SIZE = 1;
-    private static final int EXPECTED_SYMBOLS_SIZE = 1;
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testConstructor_nullParameters() {
-        try {
-            final TweetEntities entities = new TweetEntities(null, null, null, null, null);
-            assertEquals(Collections.EMPTY_LIST, entities.urls);
-            assertEquals(Collections.EMPTY_LIST, entities.userMentions);
-            assertEquals(Collections.EMPTY_LIST, entities.media);
-            assertEquals(Collections.EMPTY_LIST, entities.hashtags);
-        } catch (Exception e) {
-            fail();
-        }
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_tweetentities.json")));
-            final TweetEntities tweetEntities = gson.fromJson(reader, TweetEntities.class);
-            // We simply assert that we parsed it successfully and rely on our other unit tests to
-            // verify parsing of the individual objects.
-            assertEquals(EXPECTED_URLS_SIZE, tweetEntities.urls.size());
-            assertEquals(EXPECTED_USER_MENTIONS_SIZE, tweetEntities.userMentions.size());
-            assertEquals(EXPECTED_MEDIA_SIZE, tweetEntities.media.size());
-            assertEquals(EXPECTED_HASHTAGS_SIZE, tweetEntities.hashtags.size());
-            assertEquals(EXPECTED_SYMBOLS_SIZE, tweetEntities.symbols.size());
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    @Test
-    public void testDeserialization_noEntities() throws IOException {
-        final TweetEntities tweetEntities = gson.fromJson("{\"urls\":[]}", TweetEntities.class);
-        // We simply assert that we parsed it successfully and rely on our other unit tests to
-        // verify parsing of the individual objects.
-        assertNotNull(tweetEntities.urls);
-        assertEquals(0, tweetEntities.urls.size());
-        assertNotNull(tweetEntities.userMentions);
-        assertEquals(0, tweetEntities.userMentions.size());
-        assertNotNull(tweetEntities.media);
-        assertEquals(0, tweetEntities.media.size());
-        assertNotNull(tweetEntities.hashtags);
-        assertEquals(0, tweetEntities.hashtags.size());
-        assertNotNull(tweetEntities.symbols);
-        assertEquals(0, tweetEntities.symbols.size());
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
deleted file mode 100644
index 3f272950..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/TweetTest.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetTest {
-
-    private static final String EXPECTED_CREATED_AT = "Wed Jun 06 20:07:10 +0000 2012";
-    private static final long EXPECTED_ID = 210462857140252672L;
-    private static final String EXPECTED_TEXT = "Along with our new #Twitterbird, we've also updated our Display Guidelines: https://t.co/Ed4omjYs  ^JC";
-    private static final Integer[] EXPECTED_DISPLAY_TEXT_RANGE = {0, 102};
-    private static final String EXPECTED_WITHHELD_IN_COUNTRIES = "XY";
-    private static final long EXPECTED_QUOTED_STATUS_ID = 745634624466911232L;
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_tweet.json")));
-            final Tweet tweet = gson.fromJson(reader, Tweet.class);
-            // We simply assert that we parsed it successfully and rely on our other unit tests to
-            // verify parsing of the individual objects.
-            assertEquals(EXPECTED_CREATED_AT, tweet.createdAt);
-            assertNotNull(tweet.entities);
-            assertNotNull(tweet.entities.hashtags);
-            assertNotNull(tweet.entities.media);
-            assertNotNull(tweet.entities.symbols);
-            assertNotNull(tweet.entities.urls);
-            assertNotNull(tweet.entities.userMentions);
-            assertNotNull(tweet.user);
-            assertTrue(tweet.retweeted);
-            assertEquals(EXPECTED_ID, tweet.id);
-            assertEquals(EXPECTED_ID, tweet.getId());
-            assertNotNull(tweet.text);
-            assertEquals(EXPECTED_TEXT, tweet.text);
-            assertNotNull(tweet.displayTextRange);
-            assertFalse(tweet.truncated);
-            assertArrayEquals(EXPECTED_DISPLAY_TEXT_RANGE, tweet.displayTextRange.toArray());
-            assertNotNull(tweet.withheldInCountries);
-            assertEquals(1, tweet.withheldInCountries.size());
-            assertEquals(EXPECTED_WITHHELD_IN_COUNTRIES, tweet.withheldInCountries.get(0));
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    @Test
-    public void testQuotedTweetDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                .getAsStream("model_quoted_tweet.json")));
-            final Tweet tweet = gson.fromJson(reader, Tweet.class);
-            assertEquals(EXPECTED_QUOTED_STATUS_ID, tweet.quotedStatusId);
-            assertEquals(String.valueOf(EXPECTED_QUOTED_STATUS_ID), tweet.quotedStatusIdStr);
-            assertNotNull(tweet.quotedStatus);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-}
