diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
deleted file mode 100644
index 94648656..00000000
--- a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.java
+++ /dev/null
@@ -1,171 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.tweetcomposer;
-
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-
-import com.twitter.sdk.android.core.TwitterApiClient;
-import com.twitter.sdk.android.core.TwitterAuthToken;
-import com.twitter.sdk.android.core.TwitterException;
-import com.twitter.sdk.android.core.TwitterSession;
-import com.twitter.sdk.android.core.models.Tweet;
-import com.twitter.sdk.android.core.models.TweetBuilder;
-import com.twitter.sdk.android.core.services.MediaService;
-import com.twitter.sdk.android.core.services.StatusesService;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-
-import java.io.IOException;
-
-import okhttp3.RequestBody;
-import retrofit2.Call;
-import retrofit2.mock.Calls;
-
-import static org.hamcrest.Matchers.*;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyLong;
-import static org.mockito.Mockito.anyString;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.isNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class TweetUploadServiceTest {
-    private static final String EXPECTED_TWEET_TEXT = "tweet text";
-
-    private Context context;
-    private StatusesService mockStatusesService;
-    private MediaService mockMediaService;
-    private TweetUploadService service;
-
-    @Before
-    public void setUp() {
-        context = RuntimeEnvironment.application;
-        mockMediaService = mock(MediaService.class);
-        mockStatusesService = mock(StatusesService.class);
-        Tweet tweet = new TweetBuilder().setId(123L).setText(EXPECTED_TWEET_TEXT).build();
-        when(mockMediaService
-                .upload(any(RequestBody.class), any(RequestBody.class), any(RequestBody.class)))
-                .thenReturn(mock(Call.class));
-        when(mockStatusesService.update(anyString(), isNull(Long.class), isNull(Boolean.class),
-                isNull(Double.class), isNull(Double.class), isNull(String.class),
-                isNull(Boolean.class), eq(true), isNull(String.class)))
-                .thenReturn(Calls.response(tweet));
-
-        TwitterApiClient mockTwitterApiClient = mock(TwitterApiClient.class);
-        when(mockTwitterApiClient.getStatusesService()).thenReturn(mockStatusesService);
-        when(mockTwitterApiClient.getMediaService()).thenReturn(mockMediaService);
-
-        TweetUploadService.DependencyProvider mockDependencyProvider = mock(TweetUploadService.DependencyProvider.class);
-        when(mockDependencyProvider.getTwitterApiClient(any(TwitterSession.class)))
-                .thenReturn(mockTwitterApiClient);
-
-        service = spy(Robolectric.buildService(TweetUploadService.class).create().get());
-        service.dependencyProvider = mockDependencyProvider;
-    }
-
-    @Test
-    public void testOnHandleIntent() {
-        final TwitterAuthToken mockToken = mock(TwitterAuthToken.class);
-
-        final Intent intent = new Intent(context, TweetUploadService.class);
-        intent.putExtra(TweetUploadService.EXTRA_USER_TOKEN, mockToken);
-        intent.putExtra(TweetUploadService.EXTRA_TWEET_TEXT, EXPECTED_TWEET_TEXT);
-        intent.putExtra(TweetUploadService.EXTRA_IMAGE_URI, Uri.EMPTY);
-        service.onHandleIntent(intent);
-
-        verify(service).uploadTweet(any(TwitterSession.class), eq(EXPECTED_TWEET_TEXT),
-                eq(Uri.EMPTY));
-    }
-
-    @Test
-    public void testUploadTweet_withNoMediaSuccess() {
-        service.uploadTweet(mock(TwitterSession.class), EXPECTED_TWEET_TEXT, null);
-
-        verify(mockStatusesService).update(eq(EXPECTED_TWEET_TEXT), isNull(Long.class),
-                isNull(Boolean.class), isNull(Double.class), isNull(Double.class),
-                isNull(String.class), isNull(Boolean.class), eq(true), isNull(String.class));
-        verifyZeroInteractions(mockMediaService);
-        verify(service).sendSuccessBroadcast(eq(123L));
-        verify(service).stopSelf();
-    }
-
-    @Test
-    public void testUploadTweet_withNoMediaFailure() {
-        when(mockStatusesService.update(anyString(), isNull(Long.class), isNull(Boolean.class),
-                isNull(Double.class), isNull(Double.class), isNull(String.class),
-                isNull(Boolean.class), eq(true), isNull(String.class)))
-                .thenReturn(Calls.failure(new IOException("")));
-
-        service.uploadTweet(mock(TwitterSession.class), EXPECTED_TWEET_TEXT, null);
-
-        verify(mockStatusesService).update(eq(EXPECTED_TWEET_TEXT), isNull(Long.class),
-                isNull(Boolean.class), isNull(Double.class), isNull(Double.class),
-                isNull(String.class), isNull(Boolean.class), eq(true), isNull(String.class));
-        verifyZeroInteractions(mockMediaService);
-        verify(service).fail(any(TwitterException.class));
-        verify(service).stopSelf();
-    }
-
-    @Test
-    public void testUploadTweet_withInvalidUri() {
-        service.uploadTweet(mock(TwitterSession.class), EXPECTED_TWEET_TEXT, Uri.EMPTY);
-
-        verifyZeroInteractions(mockStatusesService);
-        verifyZeroInteractions(mockMediaService);
-        verify(service).fail(any(TwitterException.class));
-        verify(service).stopSelf();
-    }
-
-    @Test
-    public void testSendSuccessBroadcast() {
-        final ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        service.sendSuccessBroadcast(anyLong());
-        verify(service).sendBroadcast(intentCaptor.capture());
-
-        final Intent capturedIntent = intentCaptor.getValue();
-        Assert.assertThat(capturedIntent.getAction(), is(TweetUploadService.UPLOAD_SUCCESS));
-        Assert.assertThat(capturedIntent.getPackage(), is(RuntimeEnvironment.application.getPackageName()));
-    }
-
-    @Test
-    public void testSendFailureBroadcast() {
-        final Intent mockIntent = mock(Intent.class);
-        final ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        service.sendFailureBroadcast(mockIntent);
-        verify(service).sendBroadcast(intentCaptor.capture());
-
-        final Intent capturedIntent = intentCaptor.getValue();
-        Assert.assertThat(capturedIntent.getAction(), is(TweetUploadService.UPLOAD_FAILURE));
-        Assert.assertThat(capturedIntent.getParcelableExtra(TweetUploadService.EXTRA_RETRY_INTENT), is(mockIntent));
-        Assert.assertThat(capturedIntent.getPackage(), is(RuntimeEnvironment.application.getPackageName()));
-    }
-}
diff --git a/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.kt b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.kt
new file mode 100644
index 00000000..aa2b57ac
--- /dev/null
+++ b/tweet-composer/src/test/java/com/twitter/sdk/android/tweetcomposer/TweetUploadServiceTest.kt
@@ -0,0 +1,201 @@
+/*
+ * Copyright (C) 2015 Twitter, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package com.twitter.sdk.android.tweetcomposer
+
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import com.twitter.sdk.android.core.TwitterApiClient
+import com.twitter.sdk.android.core.TwitterAuthToken
+import com.twitter.sdk.android.core.TwitterException
+import com.twitter.sdk.android.core.TwitterSession
+import com.twitter.sdk.android.core.models.Media
+import com.twitter.sdk.android.core.models.TweetBuilder
+import com.twitter.sdk.android.core.services.MediaService
+import com.twitter.sdk.android.core.services.StatusesService
+import okhttp3.RequestBody
+import org.hamcrest.Matchers.`is`
+import org.junit.Assert.assertThat
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.mockito.ArgumentCaptor
+import org.mockito.ArgumentMatchers
+import org.mockito.Mockito.*
+import org.robolectric.Robolectric
+import org.robolectric.RobolectricTestRunner
+import org.robolectric.RuntimeEnvironment
+import retrofit2.Call
+import retrofit2.mock.Calls
+import java.io.IOException
+
+@RunWith(RobolectricTestRunner::class)
+class TweetUploadServiceTest {
+
+    private var context: Context? = null
+    private var mockStatusesService: StatusesService? = null
+    private var mockMediaService: MediaService? = null
+    private var service: TweetUploadService? = null
+
+    @Before
+    fun setUp() {
+        context = RuntimeEnvironment.application
+        mockMediaService = mock(MediaService::class.java)
+        mockStatusesService = mock(StatusesService::class.java)
+
+        val tweet = TweetBuilder().setId(123L).setText(EXPECTED_TWEET_TEXT).build()
+
+        `when`<Call<Media>>(mockMediaService!!
+                .upload(
+                        ArgumentMatchers.any(RequestBody::class.java),
+                        ArgumentMatchers.any(RequestBody::class.java),
+                        ArgumentMatchers.any(RequestBody::class.java)
+                ))
+                .thenReturn(mock<Call<Media>>(Call::class.java as Class<Call<Media>>))
+
+        `when`(mockStatusesService!!.update(
+                ArgumentMatchers.anyString(),
+                ArgumentMatchers.isNull(Long::class.java),
+                ArgumentMatchers.isNull(Boolean::class.java),
+                ArgumentMatchers.isNull(Double::class.java),
+                ArgumentMatchers.isNull(Double::class.java),
+                ArgumentMatchers.isNull(String::class.java),
+                ArgumentMatchers.isNull(Boolean::class.java),
+                ArgumentMatchers.eq(true),
+                ArgumentMatchers.isNull(String::class.java)
+        )).thenReturn(Calls.response(tweet))
+
+        val mockTwitterApiClient = mock(TwitterApiClient::class.java)
+        `when`(mockTwitterApiClient.statusesService).thenReturn(mockStatusesService)
+        `when`(mockTwitterApiClient.mediaService).thenReturn(mockMediaService)
+
+        val mockDependencyProvider = mock(TweetUploadService.DependencyProvider::class.java)
+        `when`(mockDependencyProvider.getTwitterApiClient(ArgumentMatchers.any(TwitterSession::class.java)))
+                .thenReturn(mockTwitterApiClient)
+
+        service = spy(Robolectric.buildService(TweetUploadService::class.java).create().get())
+        service!!.dependencyProvider = mockDependencyProvider
+    }
+
+    @Test
+    fun testOnHandleIntent() {
+        val mockToken = mock(TwitterAuthToken::class.java)
+
+        val intent = Intent(context, TweetUploadService::class.java)
+        intent.putExtra(TweetUploadService.EXTRA_USER_TOKEN, mockToken)
+        intent.putExtra(TweetUploadService.EXTRA_TWEET_TEXT, EXPECTED_TWEET_TEXT)
+        intent.putExtra(TweetUploadService.EXTRA_IMAGE_URI, Uri.EMPTY)
+        service!!.onHandleIntent(intent)
+
+        verify<TweetUploadService>(service).uploadTweet(
+                ArgumentMatchers.any(TwitterSession::class.java),
+                ArgumentMatchers.eq(EXPECTED_TWEET_TEXT),
+                ArgumentMatchers.eq(Uri.EMPTY)
+        )
+    }
+
+    @Test
+    fun testUploadTweet_withNoMediaSuccess() {
+        service!!.uploadTweet(mock(TwitterSession::class.java), EXPECTED_TWEET_TEXT, null)
+
+        verify<StatusesService>(mockStatusesService).update(
+                ArgumentMatchers.eq(EXPECTED_TWEET_TEXT),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.eq(true),
+                ArgumentMatchers.isNull()
+        )
+        verifyZeroInteractions(mockMediaService)
+        verify<TweetUploadService>(service).sendSuccessBroadcast(ArgumentMatchers.eq(123L))
+        verify<TweetUploadService>(service).stopSelf()
+    }
+
+    @Test
+    fun testUploadTweet_withNoMediaFailure() {
+        `when`(mockStatusesService!!.update(
+                ArgumentMatchers.anyString(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.eq(true),
+                ArgumentMatchers.isNull()
+        )).thenReturn(Calls.failure(IOException("")))
+
+        service!!.uploadTweet(mock(TwitterSession::class.java), EXPECTED_TWEET_TEXT, null)
+
+        verify<StatusesService>(mockStatusesService).update(
+                ArgumentMatchers.eq(EXPECTED_TWEET_TEXT),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.isNull(),
+                ArgumentMatchers.eq(true),
+                ArgumentMatchers.isNull()
+        )
+        verifyZeroInteractions(mockMediaService)
+        verify<TweetUploadService>(service).fail(ArgumentMatchers.any(TwitterException::class.java))
+        verify<TweetUploadService>(service).stopSelf()
+    }
+
+    @Test
+    fun testUploadTweet_withInvalidUri() {
+        service!!.uploadTweet(mock(TwitterSession::class.java), EXPECTED_TWEET_TEXT, Uri.EMPTY)
+
+        verifyZeroInteractions(mockStatusesService)
+        verifyZeroInteractions(mockMediaService)
+        verify<TweetUploadService>(service).fail(ArgumentMatchers.any(TwitterException::class.java))
+        verify<TweetUploadService>(service).stopSelf()
+    }
+
+    @Test
+    fun testSendSuccessBroadcast() {
+        val intentCaptor = ArgumentCaptor.forClass(Intent::class.java)
+        service!!.sendSuccessBroadcast(ArgumentMatchers.anyLong())
+        verify<TweetUploadService>(service).sendBroadcast(intentCaptor.capture())
+
+        val capturedIntent = intentCaptor.value
+        assertThat(capturedIntent.action, `is`(TweetUploadService.UPLOAD_SUCCESS))
+        assertThat(capturedIntent.`package`, `is`(RuntimeEnvironment.application.packageName))
+    }
+
+    @Test
+    fun testSendFailureBroadcast() {
+        val mockIntent = mock(Intent::class.java)
+        val intentCaptor = ArgumentCaptor.forClass(Intent::class.java)
+        service!!.sendFailureBroadcast(mockIntent)
+        verify<TweetUploadService>(service).sendBroadcast(intentCaptor.capture())
+
+        val capturedIntent = intentCaptor.value
+        assertThat(capturedIntent.action, `is`(TweetUploadService.UPLOAD_FAILURE))
+        assertThat(capturedIntent.getParcelableExtra(TweetUploadService.EXTRA_RETRY_INTENT), `is`(mockIntent))
+        assertThat(capturedIntent.`package`, `is`(RuntimeEnvironment.application.packageName))
+    }
+
+    companion object {
+        private const val EXPECTED_TWEET_TEXT = "tweet text"
+    }
+}
