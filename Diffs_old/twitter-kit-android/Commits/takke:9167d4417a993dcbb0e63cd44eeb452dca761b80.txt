diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.java
deleted file mode 100644
index 2970f208..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Configuration.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.List;
-
-/**
- * Current configuration used by Twitter
- */
-public class Configuration {
-    /**
-     * Maximum number of characters per direct message
-     */
-    @SerializedName("dm_text_character_limit")
-    public final int dmTextCharacterLimit;
-
-    /**
-     * Slugs which are not user names
-     */
-    @SerializedName("non_username_paths")
-    public final List<String> nonUsernamePaths;
-
-    /**
-     * Maximum size in bytes for the media file.
-     */
-    @SerializedName("photo_size_limit")
-    public final long photoSizeLimit;
-
-    /**
-     * Maximum resolution for the media files.
-     */
-    @SerializedName("photo_sizes")
-    public final MediaEntity.Sizes photoSizes;
-
-    /**
-     * Current t.co URL length
-     */
-    @SerializedName("short_url_length_https")
-    public final int shortUrlLengthHttps;
-
-    private Configuration() {
-        this(0, null, 0, null, 0);
-    }
-
-    public Configuration(int dmTextCharacterLimit, List<String> nonUsernamePaths,
-            long photoSizeLimit, MediaEntity.Sizes photoSizes, int shortUrlLengthHttps) {
-        this.dmTextCharacterLimit = dmTextCharacterLimit;
-        this.nonUsernamePaths = ModelUtils.getSafeList(nonUsernamePaths);
-        this.photoSizeLimit = photoSizeLimit;
-        this.photoSizes = photoSizes;
-        this.shortUrlLengthHttps = shortUrlLengthHttps;
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Coordinates.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Coordinates.java
deleted file mode 100644
index 6af30f89..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/Coordinates.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Represents coordinates of a Tweet's location.
- */
-public class Coordinates {
-
-    public static final int INDEX_LONGITUDE = 0;
-    public static final int INDEX_LATITUDE = 1;
-
-    /**
-     * The longitude and latitude of the Tweet's location, as an collection in the form of
-     * [longitude, latitude].
-     */
-    @SerializedName("coordinates")
-    public final List<Double> coordinates;
-
-    /**
-     * The type of data encoded in the coordinates property. This will be "Point" for Tweet
-     * coordinates fields.
-     */
-    @SerializedName("type")
-    public final String type;
-
-    public Coordinates(Double longitude, Double latitude, String type) {
-        final List<Double> coords = new ArrayList<>(2);
-        coords.add(INDEX_LONGITUDE, longitude);
-        coords.add(INDEX_LATITUDE, latitude);
-
-        this.coordinates = ModelUtils.getSafeList(coords);
-        this.type = type;
-    }
-
-    public Double getLongitude() {
-        return coordinates.get(INDEX_LONGITUDE);
-    }
-
-    public Double getLatitude() {
-        return coordinates.get(INDEX_LATITUDE);
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java
deleted file mode 100644
index 3357b6e8..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MediaEntity.java
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-import java.io.Serializable;
-
-/**
- * Represents media elements uploaded with the Tweet.
- */
-public class MediaEntity extends UrlEntity {
-
-    /**
-     * ID of the media expressed as a 64-bit integer.
-     */
-    @SerializedName("id")
-    public final long id;
-
-    /**
-     * ID of the media expressed as a string.
-     */
-    @SerializedName("id_str")
-    public final String idStr;
-
-    /**
-     * A http:// URL pointing directly to the uploaded media file.
-     *
-     * For media in direct messages, media_url is the same https URL as media_url_https and must be
-     * accessed via an authenticated twitter.com session or by signing a request with the user's
-     * access token using OAuth 1.0A. It is not possible to directly embed these images in a web
-     * page.
-     */
-    @SerializedName("media_url")
-    public final String mediaUrl;
-
-    /**
-     * A https:// URL pointing directly to the uploaded media file, for embedding on https pages.
-     *
-     * For media in direct messages, media_url_https must be accessed via an authenticated
-     * twitter.com session or by signing a request with the user's access token using OAuth 1.0A.
-     * It is not possible to directly embed these images in a web page.
-     */
-    @SerializedName("media_url_https")
-    public final String mediaUrlHttps;
-
-    /**
-     * An object showing available sizes for the media file.
-     */
-    @SerializedName("sizes")
-    public final Sizes sizes;
-
-    /**
-     * For Tweets containing media that was originally associated with a different tweet, this ID
-     * points to the original Tweet.
-     */
-    @SerializedName("source_status_id")
-    public final long sourceStatusId;
-
-    /**
-     * For Tweets containing media that was originally associated with a different tweet, this
-     * string-based ID points to the original Tweet.
-     */
-    @SerializedName("source_status_id_str")
-    public final String sourceStatusIdStr;
-
-    /**
-     * Type of uploaded media.
-     */
-    @SerializedName("type")
-    public final String type;
-
-    /**
-     * An object showing details for the video file. This field is present only when there is a
-     * video in the payload.
-     */
-    @SerializedName("video_info")
-    public final VideoInfo videoInfo;
-
-    @SerializedName("ext_alt_text")
-    public final String altText;
-
-    public MediaEntity(String url, String expandedUrl, String displayUrl, int start, int end,
-            long id, String idStr, String mediaUrl, String mediaUrlHttps, Sizes sizes,
-            long sourceStatusId, String sourceStatusIdStr, String type, VideoInfo videoInfo,
-            String altText) {
-        super(url, expandedUrl, displayUrl, start, end);
-        this.id = id;
-        this.idStr = idStr;
-        this.mediaUrl = mediaUrl;
-        this.mediaUrlHttps = mediaUrlHttps;
-        this.sizes = sizes;
-        this.sourceStatusId = sourceStatusId;
-        this.sourceStatusIdStr = sourceStatusIdStr;
-        this.type = type;
-        this.videoInfo = videoInfo;
-        this.altText = altText;
-    }
-
-    public static class Sizes implements Serializable {
-        /**
-         * Information for a medium-sized version of the media.
-         */
-        @SerializedName("medium")
-        public final Size medium;
-
-        /**
-         * Information for a thumbnail-sized version of the media.
-         */
-        @SerializedName("thumb")
-        public final Size thumb;
-
-        /**
-         * Information for a small-sized version of the media.
-         */
-        @SerializedName("small")
-        public final Size small;
-
-        /**
-         * Information for a large-sized version of the media.
-         */
-        @SerializedName("large")
-        public final Size large;
-
-        public Sizes(Size thumb, Size small, Size medium, Size large) {
-            this.thumb = thumb;
-            this.small = small;
-            this.medium = medium;
-            this.large = large;
-        }
-    }
-
-    public static class Size implements Serializable {
-        /**
-         * Width in pixels of this size.
-         */
-        @SerializedName("w")
-        public final int w;
-
-        /**
-         * Height in pixels of this size.
-         */
-        @SerializedName("h")
-        public final int h;
-
-        /**
-         * Resizing method used to obtain this size. A value of fit means that the media was resized
-         * to fit one dimension, keeping its native aspect ratio. A value of crop means that the
-         * media was cropped in order to fit a specific resolution.
-         */
-        @SerializedName("resize")
-        public final String resize;
-
-        public Size(int w, int h, String resize) {
-            this.w = w;
-            this.h = h;
-            this.resize = resize;
-        }
-    }
-}
diff --git a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MentionEntity.java b/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MentionEntity.java
deleted file mode 100644
index 0cd165e2..00000000
--- a/twitter-core/src/main/java/com/twitter/sdk/android/core/models/MentionEntity.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.annotations.SerializedName;
-
-/**
- * Represents other Twitter users mentioned in the text of the Tweet.
- */
-public class MentionEntity extends Entity {
-
-    /**
-     * ID of the mentioned user, as an integer.
-     */
-    @SerializedName("id")
-    public final long id;
-
-    /**
-     * ID of the mentioned user, as a string.
-     */
-    @SerializedName("id_str")
-    public final String idStr;
-
-    /**
-     * Display name of the referenced user.
-     */
-    @SerializedName("name")
-    public final String name;
-
-    /**
-     * Screen name of the referenced user.
-     */
-    @SerializedName("screen_name")
-    public final String screenName;
-
-    public MentionEntity(long id, String idStr, String name, String screenName, int start,
-            int end) {
-        super(start, end);
-        this.id = id;
-        this.idStr = idStr;
-        this.name = name;
-        this.screenName = screenName;
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
index 84274a88..0d9986fb 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/EqualsHashCodeTest.java
@@ -78,14 +78,4 @@ public void testTwitterSession() throws Exception {
                 .verify();
     }
 
-    @Test
-    public void testTweet() throws Exception {
-        final Tweet tweet01 = new TweetBuilder().setId(123456).build();
-        final Tweet tweet02 = new TweetBuilder().setId(654321).build();
-        EqualsVerifier.forClass(Tweet.class)
-                .suppress(Warning.STRICT_INHERITANCE)
-                .withPrefabValues(Tweet.class, tweet01, tweet02)
-                .withOnlyTheseFields("id")
-                .verify();
-    }
 }
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
deleted file mode 100644
index c280f6e5..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/ConfigurationTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
-@RunWith(RobolectricTestRunner.class)
-public class ConfigurationTest {
-    @Rule
-    public final TestResources testResources = new TestResources();
-
-    private static final int TEST_DM_CHAR_LIMIT = 10000;
-    private static final int TEST_SHORT_URL_LENGTH = 23;
-    private static final int TEST_NUN_NON_USER_NAME = 85;
-    private static final long TEST_PHOTO_SIZE_LIMIT = 3145728;
-    private static final MediaEntity.Size TEST_SIZE_THUMB = new MediaEntity.Size(150, 150, "crop");
-    private static final MediaEntity.Size TEST_SIZE_SMALL = new MediaEntity.Size(340, 480, "fit");
-    private static final MediaEntity.Size TEST_SIZE_MEDIUM = new MediaEntity.Size(600, 1200, "fit");
-    private static final MediaEntity.Size TEST_SIZE_LARGE = new MediaEntity.Size(1024, 2048, "fit");
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_configuration.json")));
-            final Configuration configuration = new Gson().fromJson(reader, Configuration.class);
-            assertEquals(TEST_DM_CHAR_LIMIT, configuration.dmTextCharacterLimit);
-            assertNotNull(configuration.nonUsernamePaths);
-            assertEquals(TEST_NUN_NON_USER_NAME, configuration.nonUsernamePaths.size());
-            assertEquals(TEST_PHOTO_SIZE_LIMIT, configuration.photoSizeLimit);
-            assertNotNull(configuration.photoSizes);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_THUMB, configuration.photoSizes.thumb);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_SMALL, configuration.photoSizes.small);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_MEDIUM, configuration.photoSizes.medium);
-            MediaEntityTest.assertSizeEquals(TEST_SIZE_LARGE, configuration.photoSizes.large);
-            assertEquals(TEST_SHORT_URL_LENGTH, configuration.shortUrlLengthHttps);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
deleted file mode 100644
index 7a823fe4..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/CoordinatesTest.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class CoordinatesTest  {
-
-    private static final String TEST_JSON = "{\n"
-            + "    \"coordinates\":\n"
-            + "    [\n"
-            + "        -75.14310264,\n"
-            + "        40.05701649\n"
-            + "    ],\n"
-            + "    \"type\":\"Point\"\n"
-            + "}\n";
-    private static final Double TEST_COORDINATES_LONGITUDE = Double.valueOf(-75.14310264);
-    private static final Double TEST_COORDINATES_LATITUDE = Double.valueOf(40.05701649);
-    private static final String TEST_TYPE = "Point";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final Coordinates coordinates = gson.fromJson(TEST_JSON, Coordinates.class);
-        assertEquals(TEST_COORDINATES_LONGITUDE, coordinates.getLongitude());
-        assertEquals(TEST_COORDINATES_LATITUDE, coordinates.getLatitude());
-        assertEquals(TEST_TYPE, coordinates.type);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
deleted file mode 100644
index 6daa41bb..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MediaEntityTest.java
+++ /dev/null
@@ -1,143 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-import com.google.gson.stream.JsonReader;
-import com.twitter.sdk.android.core.TestResources;
-import com.twitter.sdk.android.core.internal.CommonUtils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.NotSerializableException;
-import java.io.ObjectOutputStream;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class MediaEntityTest  {
-    private static final int TEST_INDICES_START = 117;
-    private static final int TEST_INDICES_END = 139;
-    private static final String TEST_URL = "http://t.co/lvYVFjAbzz";
-    private static final String TEST_DISPLAY_URL = "pic.twitter.com/lvYVFjAbzz";
-    private static final String TEST_EXPANDED_URL = "http://twitter.com/jbulava/status/606528031289655296/video/1";
-    private static final long TEST_ID = 606527664086781952L;
-    private static final String TEST_ID_STR = "606527664086781952";
-    private static final String TEST_MEDIA_URL = "http://pbs.twimg.com/ext_tw_video_thumb/606527664086781952/pu/img/mInvoINHjLcN8Mvk.jpg";
-    private static final String TEST_MEDIA_URL_HTTPS = "https://pbs.twimg.com/ext_tw_video_thumb/606527664086781952/pu/img/mInvoINHjLcN8Mvk.jpg";
-    private static final MediaEntity.Size TEST_SIZE_THUMB = new MediaEntity.Size(150, 150, "crop");
-    private static final MediaEntity.Size TEST_SIZE_SMALL = new MediaEntity.Size(340, 191, "fit");
-    private static final MediaEntity.Size TEST_SIZE_MEDIUM = new MediaEntity.Size(600, 338, "fit");
-    private static final MediaEntity.Size TEST_SIZE_LARGE = new MediaEntity.Size(1024, 576, "fit");
-    private static final long TEST_SOURCE_STATUS_ID = 205282515685081088L;
-    private static final String TEST_SOURCE_STATUS_ID_STR = "205282515685081088";
-    private static final String TEST_TYPE = "video";
-    private static final int TEST_ASPECT_WIDTH = 16;
-    private static final int TEST_ASPECT_HEIGHT = 9;
-    private static final long TEST_DURATION = 30024;
-    private static final int TEST_TOTAL_VARIANTS = 2;
-    private static final String TEST_ALT_TEXT = "A Twitter employee";
-    private static final String TEST_URL_0 = "https://video.twimg.com/ext_tw_video/606527664086781952/pu/vid/640x360/jdAs88NgP4N3Iqtu.mp4";
-    private static final VideoInfo.Variant TEST_VARIANT_0 =
-            new VideoInfo.Variant(832000, "video/mp4", TEST_URL_0);
-    private static final String TEST_URL_1 = "https://video.twimg.com/ext_tw_video/606527664086781952/pu/vid/640x360/jdAs88NgP4N3Iqtu.webm";
-    private static final VideoInfo.Variant TEST_VARIANT_1 =
-            new VideoInfo.Variant(832000, "video/webm", TEST_URL_1);
-
-    @Rule
-    public final TestResources testResources = new TestResources();
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_media_entity.json")));
-            final MediaEntity entity = gson.fromJson(reader, MediaEntity.class);
-
-            assertEquals(TEST_INDICES_START, entity.getStart());
-            assertEquals(TEST_INDICES_END, entity.getEnd());
-            assertEquals(TEST_URL, entity.url);
-            assertEquals(TEST_DISPLAY_URL, entity.displayUrl);
-            assertEquals(TEST_EXPANDED_URL, entity.expandedUrl);
-            assertEquals(TEST_ID, entity.id);
-            assertEquals(TEST_ID_STR, entity.idStr);
-            assertEquals(TEST_MEDIA_URL, entity.mediaUrl);
-            assertEquals(TEST_MEDIA_URL_HTTPS, entity.mediaUrlHttps);
-            assertSizeEquals(TEST_SIZE_THUMB, entity.sizes.thumb);
-            assertSizeEquals(TEST_SIZE_SMALL, entity.sizes.small);
-            assertSizeEquals(TEST_SIZE_MEDIUM, entity.sizes.medium);
-            assertSizeEquals(TEST_SIZE_LARGE, entity.sizes.large);
-            assertEquals(TEST_SOURCE_STATUS_ID, entity.sourceStatusId);
-            assertEquals(TEST_SOURCE_STATUS_ID_STR, entity.sourceStatusIdStr);
-            assertEquals(TEST_TYPE, entity.type);
-            assertEquals(TEST_ASPECT_WIDTH, (int) entity.videoInfo.aspectRatio.get(0));
-            assertEquals(TEST_ASPECT_HEIGHT, (int) entity.videoInfo.aspectRatio.get(1));
-            assertEquals(TEST_DURATION, entity.videoInfo.durationMillis);
-            assertEquals(TEST_TOTAL_VARIANTS, entity.videoInfo.variants.size());
-            assertVariantEquals(TEST_VARIANT_0, entity.videoInfo.variants.get(0));
-            assertVariantEquals(TEST_VARIANT_1, entity.videoInfo.variants.get(1));
-            assertEquals(TEST_ALT_TEXT, entity.altText);
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    @Test
-    public void testSerializable() throws Exception {
-        JsonReader reader = null;
-        try {
-            reader = new JsonReader(new InputStreamReader(testResources
-                    .getAsStream("model_media_entity.json")));
-            final MediaEntity entity = gson.fromJson(reader, MediaEntity.class);
-
-            new ObjectOutputStream(new ByteArrayOutputStream()).writeObject(entity);
-        } catch (NotSerializableException ex) {
-            fail("MediaEntity should implement Serializable");
-        } finally {
-            CommonUtils.closeQuietly(reader);
-        }
-    }
-
-    public static void assertSizeEquals(MediaEntity.Size expected, MediaEntity.Size actual) {
-        assertEquals(expected.h, actual.h);
-        assertEquals(expected.w, actual.w);
-        assertEquals(expected.resize, actual.resize);
-    }
-
-    public static void assertVariantEquals(VideoInfo.Variant expected, VideoInfo.Variant actual) {
-        assertEquals(expected.bitrate, actual.bitrate);
-        assertEquals(expected.contentType, actual.contentType);
-        assertEquals(expected.url, actual.url);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
deleted file mode 100644
index 39718e34..00000000
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/MentionEntityTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2015 Twitter, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.twitter.sdk.android.core.models;
-
-import com.google.gson.Gson;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.IOException;
-
-import static org.junit.Assert.assertEquals;
-
-@RunWith(RobolectricTestRunner.class)
-public class MentionEntityTest  {
-
-    private static final String TEST_JSON = "{\"name\":\"Twitter API\","
-            + "\"indices\":[4,15], \"screen_name\":\"twitterapi\","
-            + "\"id\":6253282, \"id_str\":\"6253282\"}";
-    private static final int TEST_INDICES_START = 4;
-    private static final int TEST_INDICES_END = 15;
-    private static final long TEST_ID = 6253282L;
-    private static final String TEST_ID_STR = "6253282";
-    private static final String TEST_NAME = "Twitter API";
-    private static final String TEST_SCREEN_NAME = "twitterapi";
-
-    private Gson gson;
-
-    @Before
-    public void setUp() throws Exception {
-
-        gson = new Gson();
-    }
-
-    @Test
-    public void testDeserialization() throws IOException {
-        final MentionEntity entity = gson.fromJson(TEST_JSON, MentionEntity.class);
-        assertEquals(TEST_INDICES_START, entity.getStart());
-        assertEquals(TEST_INDICES_END, entity.getEnd());
-        assertEquals(TEST_ID, entity.id);
-        assertEquals(TEST_ID_STR, entity.idStr);
-        assertEquals(TEST_NAME, entity.name);
-        assertEquals(TEST_SCREEN_NAME, entity.screenName);
-    }
-}
diff --git a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
index 733205f4..c41d7007 100644
--- a/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
+++ b/twitter-core/src/test/java/com/twitter/sdk/android/core/models/UserTest.java
@@ -73,7 +73,6 @@ public void testDeserialization() throws IOException {
             assertEquals(EXPECTED_SCREEN_NAME, user.screenName);
             assertEquals(EXPECTED_PROFILE_IMAGE_URL_HTTPS, user.profileImageUrlHttps);
             assertEquals(EXPECTED_VERIFIED, user.verified);
-            assertNotNull(user.status);
             assertNotNull(user.withheldInCountries);
             assertEquals(1, user.withheldInCountries.size());
             assertEquals(EXPECTED_WITHHELD_IN_COUNTRIES, user.withheldInCountries.get(0));
