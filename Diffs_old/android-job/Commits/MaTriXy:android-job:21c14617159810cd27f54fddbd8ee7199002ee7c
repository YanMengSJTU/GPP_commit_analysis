diff --git a/FAQ.md b/FAQ.md
index d616726..84005a9 100644
--- a/FAQ.md
+++ b/FAQ.md
@@ -193,4 +193,26 @@ new JobRequest.Builder(DemoSyncJob.TAG)
         .setRequirementsEnforced(true)
         .build()
         .schedule();
+```
+
+### I cannot override the Application class. How can I add my `JobCreator`?
+
+There is an alternative. You can register a `BroadcastReceiver` to get notified that you should add your `JobCreator` like the following:
+
+```xml
+<receiver
+    android:name=".AddReceiver"
+    android:exported="false">
+        <intent-filter>
+            <action android:name="com.evernote.android.job.ADD_JOB_CREATOR"/>
+        </intent-filter>
+</receiver>
+```
+```java
+public final class AddReceiver extends AddJobCreatorReceiver {
+    @Override
+    protected void addJobCreator(@NonNull Context context, @NonNull JobManager manager) {
+        manager.addJobCreator(new DemoJobCreator());
+    }
+}
 ```
\ No newline at end of file
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 344e5b3..7fe1c3c 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -27,5 +27,13 @@
             android:name=".SyncHistoryActivity"
             android:label="@string/demo"/>
 
+        <receiver
+            android:name=".DemoJobCreator$AddReceiver"
+            android:exported="false">
+            <intent-filter>
+                <action android:name="com.evernote.android.job.ADD_JOB_CREATOR"/>
+            </intent-filter>
+        </receiver>
+
     </application>
 </manifest>
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java b/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
index 69d81fd..9a07f75 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
@@ -1,7 +1,11 @@
 package com.evernote.android.job.demo;
 
+import android.content.Context;
+import android.support.annotation.NonNull;
+
 import com.evernote.android.job.Job;
 import com.evernote.android.job.JobCreator;
+import com.evernote.android.job.JobManager;
 
 /**
  * @author rwondratschek
@@ -17,4 +21,11 @@ public Job create(String tag) {
                 return null;
         }
     }
+
+    public static final class AddReceiver extends AddJobCreatorReceiver {
+        @Override
+        protected void addJobCreator(@NonNull Context context, @NonNull JobManager manager) {
+            // manager.addJobCreator(new DemoJobCreator());
+        }
+    }
 }
diff --git a/library/src/main/java/com/evernote/android/job/JobCreator.java b/library/src/main/java/com/evernote/android/job/JobCreator.java
index fa99f1a..161ac2f 100644
--- a/library/src/main/java/com/evernote/android/job/JobCreator.java
+++ b/library/src/main/java/com/evernote/android/job/JobCreator.java
@@ -1,5 +1,10 @@
 package com.evernote.android.job;
 
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.support.annotation.NonNull;
+
 /**
  * A {@code JobCreator} maps a tag to a specific {@link Job} class. You need to pass the tag in the
  * {@link JobRequest.Builder} constructor.
@@ -27,4 +32,33 @@
      * @see JobRequest.Builder#Builder(String)
      */
     Job create(String tag);
+
+    /**
+     * Action to notify receives that the application was instantiated and {@link JobCreator}s should be added.
+     */
+    String ACTION_ADD_JOB_CREATOR = "com.evernote.android.job.ADD_JOB_CREATOR";
+
+    /**
+     * Abstract receiver to get notified about when {@link JobCreator}s need to be added.
+     */
+    abstract class AddJobCreatorReceiver extends BroadcastReceiver {
+
+        @Override
+        public final void onReceive(Context context, Intent intent) {
+            if (context ==  null || intent == null || !ACTION_ADD_JOB_CREATOR.equals(intent.getAction())) {
+                return;
+            }
+
+            addJobCreator(context, JobManager.create(context));
+        }
+
+        /**
+         * Called to add a {@link JobCreator} to this manager instance by calling {@link JobManager#addJobCreator(JobCreator)}.
+         *
+         * @param context Any context.
+         * @param manager The manager instance.
+         */
+        protected abstract void addJobCreator(@NonNull Context context, @NonNull JobManager manager);
+    }
+
 }
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index d0902c8..896d279 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -30,6 +30,9 @@
 import android.app.Application;
 import android.app.job.JobScheduler;
 import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.content.pm.ResolveInfo;
 import android.os.Build;
 import android.os.PowerManager;
 import android.os.SystemClock;
@@ -47,6 +50,7 @@
 import net.vrallev.android.cat.CatGlobal;
 import net.vrallev.android.cat.CatLog;
 
+import java.util.List;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
@@ -118,6 +122,8 @@ public static JobManager create(@NonNull Context context) {
                     if (!JobUtil.hasBootPermission(context)) {
                         Cat.w("No boot permission");
                     }
+
+                    sendAddJobCreatorIntent(context);
                 }
             }
         }
@@ -613,4 +619,26 @@ public void setAllowSmallerIntervalsForMarshmallow(boolean allowSmallerIntervals
             mAllowSmallerIntervals = allowSmallerIntervals;
         }
     }
+
+    private static void sendAddJobCreatorIntent(@NonNull Context context) {
+        Intent intent = new Intent(JobCreator.ACTION_ADD_JOB_CREATOR);
+        List<ResolveInfo> resolveInfos = context.getPackageManager().queryBroadcastReceivers(intent, 0);
+        String myPackage = context.getPackageName();
+
+        for (ResolveInfo resolveInfo : resolveInfos) {
+            ActivityInfo activityInfo = resolveInfo.activityInfo;
+            if (activityInfo == null || activityInfo.exported || !myPackage.equals(activityInfo.packageName)
+                    || TextUtils.isEmpty(activityInfo.name)) {
+                continue;
+            }
+
+            try {
+                JobCreator.AddJobCreatorReceiver receiver =
+                        (JobCreator.AddJobCreatorReceiver) Class.forName(activityInfo.name).newInstance();
+
+                receiver.addJobCreator(context, instance);
+            } catch (Exception ignored) {
+            }
+        }
+    }
 }
