diff --git a/build.gradle b/build.gradle
index 0bde310..fd8fc0c 100644
--- a/build.gradle
+++ b/build.gradle
@@ -21,21 +21,6 @@ allprojects {
     }
 }
 
-ext {
-    compileSdkVersion = 26
-    targetSdkVersion = compileSdkVersion
-    minSdkVersion = 14
-
-    buildToolsVersion = '27.0.3'
-
-    supportLibVersion = '26.0.2'
-    playServicesVersion = '11.0.2'
-    stethoVersion = '1.5.0'
-    junitVersion = '4.12'
-    assertjVersion = '3.6.2'
-    mockitoVersion = '2.7.22'
-    robolectricVersion = '3.6.1'
-}
 
 task wrapper(type: Wrapper) {
     gradleVersion = '4.6'
diff --git a/library/build.gradle b/library/build.gradle
index cc0f68b..c5a7c6c 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,42 +1,39 @@
 apply plugin: 'com.android.library'
 apply plugin: 'com.github.ben-manes.versions'
-apply from: '../build-config/gradle-quality.gradle'
 
 archivesBaseName = 'android-job'
 
 dependencies {
-    compileOnly "com.google.android.gms:play-services-gcm:$playServicesVersion"
+    compileOnly "com.google.android.gms:play-services-gcm:$playServices"
 
     //noinspection GradleCompatible,GradleDependency
-    api "com.android.support:support-compat:$supportLibVersion"
+    api "com.android.support:support-compat:$supportLibraryVersion"
 
-    androidTestImplementation 'com.android.support.test:runner:1.0.1'
-    androidTestImplementation 'com.android.support.test:rules:1.0.1'
-    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
-    androidTestImplementation 'com.squareup.assertj:assertj-android:1.1.1'
-    androidTestImplementation "com.google.android.gms:play-services-gcm:$playServicesVersion"
+    androidTestImplementation "com.android.support.test:runner:$libTestRunnerVersion"
+    androidTestImplementation "com.android.support.test:rules:$libTestRunnerVersion"
 
-    androidTestImplementation "com.facebook.stetho:stetho:$stethoVersion"
-    androidTestImplementation "com.android.support:support-v4:$supportLibVersion"
+    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
+    androidTestImplementation "com.squareup.assertj:assertj-android:$libAssertjAndroidVersion"
+    androidTestImplementation "com.google.android.gms:play-services-gcm:$playServices"
 
-    testImplementation "junit:junit:$junitVersion"
-    testImplementation "org.mockito:mockito-core:$mockitoVersion"
-    testImplementation "org.assertj:assertj-core:$assertjVersion"
-    testImplementation "org.robolectric:robolectric:$robolectricVersion"
+    androidTestImplementation "com.facebook.stetho:stetho:$libStethoVersion"
+    androidTestImplementation "com.android.support:support-v4:$supportLibraryVersion"
+
+    testImplementation "junit:junit:$libJUintVersion"
+    testImplementation "org.mockito:mockito-core:$libMockitoVersion"
+    testImplementation "org.assertj:assertj-core:$libAssertjVersion"
+    testImplementation "org.robolectric:robolectric:$libRobolectricVersion"
 }
 
 android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
+    compileSdkVersion rootProject.ext.compileSdk
     buildToolsVersion rootProject.ext.buildToolsVersion
 
     resourcePrefix 'job_'
 
     defaultConfig {
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-
-        versionName project.VERSION_NAME
-        versionCode Integer.parseInt(project.VERSION_CODE)
+        minSdkVersion rootProject.ext.minSdk
+        targetSdkVersion rootProject.ext.compileSdk
 
         consumerProguardFiles 'proguard.cfg'
 
@@ -62,5 +59,3 @@ android {
         }
     }
 }
-
-apply from: '../build-config/gradle-push.gradle'
\ No newline at end of file
diff --git a/library/proguard.cfg b/library/proguard.cfg
index da246ae..2b03268 100644
--- a/library/proguard.cfg
+++ b/library/proguard.cfg
@@ -4,6 +4,4 @@
 -keep public class com.evernote.android.job.v21.PlatformJobService
 -keep public class com.evernote.android.job.v14.PlatformAlarmService
 -keep public class com.evernote.android.job.v14.PlatformAlarmReceiver
--keep public class com.evernote.android.job.JobBootReceiver
--keep public class com.evernote.android.job.JobRescheduleService
 -keep public class com.evernote.android.job.gcm.PlatformGcmService
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
index e9c2249..a75751f 100644
--- a/library/src/main/AndroidManifest.xml
+++ b/library/src/main/AndroidManifest.xml
@@ -3,9 +3,7 @@
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools">
 
-    <uses-permission android:name="android.permission.WAKE_LOCK"/>
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
-    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
 
     <application tools:ignore="AllowBackup">
 
@@ -33,17 +31,6 @@
             </intent-filter>
         </receiver>
 
-        <receiver
-            android:name="com.evernote.android.job.JobBootReceiver"
-            android:exported="false">
-            <intent-filter>
-                <action android:name="android.intent.action.BOOT_COMPLETED"/>
-                <action android:name="android.intent.action.QUICKBOOT_POWERON"/>
-                <action android:name="com.htc.intent.action.QUICKBOOT_POWERON"/>
-                <action android:name="android.intent.action.MY_PACKAGE_REPLACED"/>
-            </intent-filter>
-        </receiver>
-
         <service
             android:name="com.evernote.android.job.gcm.PlatformGcmService"
             android:enabled="false"
@@ -54,10 +41,6 @@
             </intent-filter>
         </service>
 
-        <service
-            android:name="com.evernote.android.job.JobRescheduleService"
-            android:exported="false"
-            android:permission="android.permission.BIND_JOB_SERVICE"/>
     </application>
 
 </manifest>
diff --git a/library/src/main/java/com/evernote/android/job/JobBootReceiver.java b/library/src/main/java/com/evernote/android/job/JobBootReceiver.java
deleted file mode 100644
index 42a9857..0000000
--- a/library/src/main/java/com/evernote/android/job/JobBootReceiver.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright 2007-present Evernote Corporation.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.evernote.android.job;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-
-/**
- * A {@code BroadcastReceiver} rescheduling jobs after a reboot, if the underlying {@link JobApi} can't
- * handle it.
- *
- * @author rwondratschek
- */
-public final class JobBootReceiver extends BroadcastReceiver {
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        /*
-         * Create the job manager. We may need to reschedule jobs and some applications aren't initializing the
-         * manager in Application.onCreate(). It may happen that some jobs can't be created if the JobCreator
-         * wasn't registered, yet. Apps / Libraries need to figure out how to solve this themselves.
-         */
-        try {
-            JobManager.create(context);
-        } catch (JobManagerCreateException ignored) {
-        }
-    }
-}
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 9b12c22..3d77822 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -154,10 +154,6 @@ private JobManager(Context context) {
         mJobCreatorHolder = new JobCreatorHolder();
         mJobStorage = new JobStorage(context);
         mJobExecutor = new JobExecutor();
-
-        if (!JobConfig.isSkipJobReschedule()) {
-            JobRescheduleService.startService(mContext);
-        }
     }
 
     /**
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
deleted file mode 100644
index 5905268..0000000
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ /dev/null
@@ -1,118 +0,0 @@
-package com.evernote.android.job;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.SystemClock;
-import android.support.annotation.NonNull;
-import android.support.annotation.VisibleForTesting;
-import android.support.v4.app.JobIntentService;
-
-import com.evernote.android.job.util.JobCat;
-
-import java.util.Collection;
-import java.util.Set;
-import java.util.concurrent.CountDownLatch;
-
-/**
- * This service reschedules your jobs in case this should be necessary. Usually rescheduling is necessary
- * after a reboot. If you don't want that your jobs are rescheduled, then you should use a transient job
- * or cancel your job manually.
- *
- * @author rwondratschek
- */
-public final class JobRescheduleService extends JobIntentService {
-
-    private static final JobCat CAT = new JobCat("JobRescheduleService", BuildConfig.DEBUG);
-
-    /*package*/ static void startService(Context context) {
-        try {
-            enqueueWork(context, JobRescheduleService.class, JobIdsInternal.JOB_ID_JOB_RESCHEDULE_SERVICE, new Intent());
-            latch = new CountDownLatch(1);
-        } catch (Exception e) {
-            /*
-             * Caused by: java.lang.SecurityException: Unable to start service Intent
-             * { cmp=com.evernote/.android.job.JobRescheduleService (has extras) }: Unable to launch
-             * app com.evernote/1210016 for service Intent { cmp=com.evernote/.android.job.JobRescheduleService }:
-             * user 12 is stopped
-             *
-             * It's bad to catch all exceptions. But this service is only a safety check and
-             * if it fails, then better try next time and don't handle the exception upstream
-             * where it's hard to deal with this case.
-             */
-            CAT.e(e);
-        }
-    }
-
-    @VisibleForTesting
-    /*package*/ static CountDownLatch latch;
-
-    @Override
-    protected void onHandleWork(@NonNull Intent intent) {
-        /*
-         * Delay this slightly. This avoids a race condition if the app was launched by the
-         * AlarmManager. Then the alarm was already removed, but the JobRequest might still
-         * be available in the storage. We still catch this case, because we never execute
-         * a job with the same ID twice. Nonetheless, add the delay to save resources.
-         */
-        try {
-            CAT.d("Reschedule service started");
-            SystemClock.sleep(JobConfig.getJobReschedulePause());
-
-            JobManager manager;
-            try {
-                manager = JobManager.create(this);
-            } catch (JobManagerCreateException e) {
-                return;
-            }
-
-            Set<JobRequest> requests = manager.getAllJobRequests(null, true, true);
-
-            int rescheduledCount = rescheduleJobs(manager, requests);
-
-            CAT.d("Reschedule %d jobs of %d jobs", rescheduledCount, requests.size());
-        } finally {
-            if (latch != null) {
-                // latch can be null, if the service was restarted after a process death
-                latch.countDown();
-            }
-        }
-    }
-
-    @SuppressWarnings("UnusedReturnValue")
-    /*package*/ int rescheduleJobs(JobManager manager) {
-        return rescheduleJobs(manager, manager.getAllJobRequests(null, true, true));
-    }
-
-    /*package*/ int rescheduleJobs(JobManager manager, Collection<JobRequest> requests) {
-        int rescheduledCount = 0;
-        boolean exceptionThrown = false;
-        for (JobRequest request : requests) {
-            boolean reschedule;
-            if (request.isStarted()) {
-                Job job = manager.getJob(request.getJobId());
-                reschedule = job == null;
-            } else {
-                reschedule = !manager.getJobProxy(request.getJobApi()).isPlatformJobScheduled(request);
-            }
-
-            if (reschedule) {
-                // update execution window
-                try {
-                    request.cancelAndEdit()
-                            .build()
-                            .schedule();
-                } catch (Exception e) {
-                    // this may crash (e.g. more than 100 jobs with JobScheduler), but it's not catchable for the user
-                    // better catch here, otherwise app will end in a crash loop
-                    if (!exceptionThrown) {
-                        CAT.e(e);
-                        exceptionThrown = true;
-                    }
-                }
-
-                rescheduledCount++;
-            }
-        }
-        return rescheduledCount;
-    }
-}
