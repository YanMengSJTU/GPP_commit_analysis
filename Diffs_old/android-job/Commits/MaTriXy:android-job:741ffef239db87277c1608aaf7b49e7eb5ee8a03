diff --git a/library/build.gradle b/library/build.gradle
index 6e5aa96..9236ef3 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -14,6 +14,8 @@ dependencies {
     androidTestCompile 'com.android.support.test:rules:0.5'
     androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
     androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
+
+    androidTestCompile 'com.facebook.stetho:stetho:1.3.1'
 }
 
 android {
diff --git a/library/src/androidTest/java/com/evernote/android/job/DatabaseUpgradeTest.java b/library/src/androidTest/java/com/evernote/android/job/DatabaseUpgradeTest.java
index 7116b8e..cec0fcc 100644
--- a/library/src/androidTest/java/com/evernote/android/job/DatabaseUpgradeTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/DatabaseUpgradeTest.java
@@ -1,5 +1,6 @@
 package com.evernote.android.job;
 
+import android.content.ContentValues;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
@@ -7,9 +8,15 @@
 import android.support.test.runner.AndroidJUnit4;
 import android.test.suitebuilder.annotation.LargeTest;
 
+import com.evernote.android.job.util.support.PersistableBundleCompat;
+import com.facebook.stetho.Stetho;
+
+import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.concurrent.TimeUnit;
+
 import static com.evernote.android.job.JobStorage.COLUMN_BACKOFF_MS;
 import static com.evernote.android.job.JobStorage.COLUMN_BACKOFF_POLICY;
 import static com.evernote.android.job.JobStorage.COLUMN_END_MS;
@@ -38,12 +45,20 @@
 @LargeTest
 public class DatabaseUpgradeTest {
 
+    @BeforeClass
+    public static void beforeClass() {
+        Stetho.initializeWithDefaults(InstrumentationRegistry.getContext());
+    }
+
     @Test
     public void testDatabaseUpgrade1to3() {
         Context context = InstrumentationRegistry.getContext();
         context.deleteDatabase(DATABASE_NAME);
 
-        createDatabase(new JobOpenHelper1(context), false);
+        JobOpenHelper1 openHelper = new JobOpenHelper1(context);
+        createDatabase(openHelper, false);
+        createJobs(openHelper);
+
         checkJob(context);
     }
 
@@ -52,7 +67,10 @@ public void testDatabaseUpgrade2to3() {
         Context context = InstrumentationRegistry.getContext();
         context.deleteDatabase(DATABASE_NAME);
 
-        createDatabase(new JobOpenHelper2(context), false);
+        JobOpenHelper2 openHelper = new JobOpenHelper2(context);
+        createDatabase(openHelper, false);
+        createJobs(openHelper);
+
         checkJob(context);
     }
 
@@ -61,7 +79,10 @@ public void testDatabaseUpgrade1to2to3() {
         Context context = InstrumentationRegistry.getContext();
         context.deleteDatabase(DATABASE_NAME);
 
-        createDatabase(new JobOpenHelper1(context), false);
+        JobOpenHelper1 openHelper = new JobOpenHelper1(context);
+        createDatabase(openHelper, false);
+        createJobs(openHelper);
+
         createDatabase(new JobOpenHelper2(context), true);
 
         checkJob(context);
@@ -77,6 +98,23 @@ private void createDatabase(UpgradeAbleJobOpenHelper openHelper, boolean checkUp
         database.close();
     }
 
+    private void createJobs(UpgradeAbleJobOpenHelper openHelper) {
+        SQLiteDatabase database = openHelper.getWritableDatabase();
+
+        ContentValues contentValues = openHelper.createBaseContentValues(1);
+        contentValues.put(JobStorage.COLUMN_START_MS, 60_000L);
+        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);
+        database.insert(JobStorage.JOB_TABLE_NAME, null, contentValues);
+
+        contentValues = openHelper.createBaseContentValues(2);
+        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 60_000L);
+        database.insert(JobStorage.JOB_TABLE_NAME, null, contentValues);
+
+        contentValues = openHelper.createBaseContentValues(3);
+        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, TimeUnit.MINUTES.toMillis(20));
+        database.insert(JobStorage.JOB_TABLE_NAME, null, contentValues);
+    }
+
     private void checkJob(Context context) {
         JobManager.create(context).addJobCreator(new JobCreator() {
             @Override
@@ -85,6 +123,27 @@ public Job create(String tag) {
             }
         });
 
+        assertThat(JobManager.instance().getAllJobRequests()).hasSize(3);
+
+        JobRequest jobRequest = JobManager.instance().getJobRequest(1);
+        assertThat(jobRequest.isPeriodic()).isFalse();
+        assertThat(jobRequest.getStartMs()).isEqualTo(60_000L);
+        assertThat(jobRequest.isTransient()).isFalse();
+
+        jobRequest = JobManager.instance().getJobRequest(2);
+        assertThat(jobRequest.isPeriodic()).isTrue();
+        assertThat(jobRequest.getIntervalMs()).isEqualTo(JobRequest.MIN_INTERVAL);
+        assertThat(jobRequest.getFlexMs()).isEqualTo(jobRequest.getIntervalMs());
+        assertThat(jobRequest.isTransient()).isFalse();
+
+        jobRequest = JobManager.instance().getJobRequest(3);
+        assertThat(jobRequest.isPeriodic()).isTrue();
+        assertThat(jobRequest.getIntervalMs()).isEqualTo(TimeUnit.MINUTES.toMillis(20));
+        assertThat(jobRequest.getFlexMs()).isEqualTo(jobRequest.getIntervalMs());
+        assertThat(jobRequest.isTransient()).isFalse();
+
+        JobManager.instance().cancelAll();
+
         int jobId = new JobRequest.Builder("Tag")
                 .setExact(90_000L)
                 .build()
@@ -92,7 +151,7 @@ public Job create(String tag) {
 
         assertThat(JobManager.instance().getAllJobRequests()).hasSize(1);
 
-        JobRequest jobRequest = JobManager.instance().getJobRequest(jobId);
+        jobRequest = JobManager.instance().getJobRequest(jobId);
         assertThat(jobRequest).isNotNull();
         assertThat(jobRequest.isTransient()).isFalse();
 
@@ -133,6 +192,34 @@ public final void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int n
         }
 
         protected abstract void onUpgradeInner(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion);
+
+        protected ContentValues createBaseContentValues(int id) {
+            ContentValues contentValues = new ContentValues();
+            contentValues.put(JobStorage.COLUMN_ID, id);
+            contentValues.put(JobStorage.COLUMN_TAG, "Tag");
+
+            contentValues.put(JobStorage.COLUMN_START_MS, -1L);
+            contentValues.put(JobStorage.COLUMN_END_MS, -1L);
+
+            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);
+            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, JobRequest.DEFAULT_BACKOFF_POLICY.toString());
+
+            contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 0L);
+
+            contentValues.put(JobStorage.COLUMN_REQUIREMENTS_ENFORCED, false);
+            contentValues.put(JobStorage.COLUMN_REQUIRES_CHARGING, false);
+            contentValues.put(JobStorage.COLUMN_REQUIRES_DEVICE_IDLE, false);
+            contentValues.put(JobStorage.COLUMN_EXACT, false);
+            contentValues.put(JobStorage.COLUMN_NETWORK_TYPE, JobRequest.DEFAULT_NETWORK_TYPE.toString());
+
+            contentValues.put(JobStorage.COLUMN_EXTRAS, new PersistableBundleCompat().saveToXml());
+            contentValues.put(JobStorage.COLUMN_PERSISTED, false);
+
+            contentValues.put(JobStorage.COLUMN_NUM_FAILURES, 0);
+            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, System.currentTimeMillis());
+
+            return contentValues;
+        }
     }
 
     private class JobOpenHelper1 extends UpgradeAbleJobOpenHelper {
@@ -191,6 +278,13 @@ public void onUpgradeInner(SQLiteDatabase db, int oldVersion, int newVersion) {
             }
         }
 
+        @Override
+        protected ContentValues createBaseContentValues(int id) {
+            ContentValues contentValues = super.createBaseContentValues(id);
+            contentValues.put(JobStorage.COLUMN_TRANSIENT, false);
+            return contentValues;
+        }
+
         private void createJobTable(SQLiteDatabase db) {
             db.execSQL("create table " + JOB_TABLE_NAME + " ("
                     + COLUMN_ID + " integer primary key, "
diff --git a/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java b/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
index a3ec443..9fdd83f 100644
--- a/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
@@ -6,6 +6,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 
 import com.evernote.android.job.util.JobApi;
+import com.facebook.stetho.Stetho;
 
 import org.junit.After;
 import org.junit.AfterClass;
@@ -24,6 +25,8 @@
 
     @BeforeClass
     public static void beforeClass() {
+        Stetho.initializeWithDefaults(InstrumentationRegistry.getContext());
+
         JobManager.create(InstrumentationRegistry.getContext()).addJobCreator(new JobCreator() {
             @Override
             public Job create(String tag) {
diff --git a/library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java b/library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java
index e2495dc..d499a2b 100644
--- a/library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java
@@ -7,6 +7,7 @@
 
 import com.evernote.android.job.util.JobApi;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
+import com.facebook.stetho.Stetho;
 
 import org.junit.After;
 import org.junit.AfterClass;
@@ -26,6 +27,8 @@
 
     @BeforeClass
     public static void beforeClass() {
+        Stetho.initializeWithDefaults(InstrumentationRegistry.getContext());
+
         JobManager.create(InstrumentationRegistry.getContext()).addJobCreator(new JobCreator() {
             @Override
             public Job create(String tag) {
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index 96e969e..52904d0 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -82,6 +82,8 @@
 
     private static final int CACHE_SIZE = 30;
 
+    private static final String WHERE_NOT_TRANSIENT = "ifnull(" + COLUMN_TRANSIENT + ", 0)<=0";
+
     private final SharedPreferences mPreferences;
     private final JobCacheId mCacheId;
 
@@ -132,10 +134,10 @@ public synchronized JobRequest get(int id) {
             String where; // filter transient requests
             String[] args;
             if (TextUtils.isEmpty(tag)) {
-                where = includeTransient ? null : (COLUMN_TRANSIENT + "<=0");
+                where = includeTransient ? null : WHERE_NOT_TRANSIENT;
                 args = null;
             } else {
-                where = includeTransient ? "" : (COLUMN_TRANSIENT + "<=0 AND ");
+                where = includeTransient ? "" : (WHERE_NOT_TRANSIENT + " AND ");
                 where += COLUMN_TAG + "=?";
                 args = new String[]{tag};
             }
@@ -300,6 +302,14 @@ private void upgradeFrom1To2(SQLiteDatabase db) {
         private void upgradeFrom2To3(SQLiteDatabase db) {
             db.execSQL("alter table " + JOB_TABLE_NAME + " add column " + COLUMN_FLEX_MS + " integer;");
             db.execSQL("alter table " + JOB_TABLE_NAME + " add column " + COLUMN_FLEX_SUPPORT + " integer;");
+
+            // adjust interval to minimum value if necessary
+            ContentValues contentValues = new ContentValues();
+            contentValues.put(COLUMN_INTERVAL_MS, JobRequest.MIN_INTERVAL);
+            db.update(JOB_TABLE_NAME, contentValues, COLUMN_INTERVAL_MS + ">0 AND " + COLUMN_INTERVAL_MS + "<" + JobRequest.MIN_INTERVAL, new String[0]);
+
+            // copy interval into flex column, that's the default value and the flex support mode is not required
+            db.execSQL("update " + JOB_TABLE_NAME + " set " + COLUMN_FLEX_MS + " = " + COLUMN_INTERVAL_MS + ";");
         }
     }
 }
