diff --git a/CHANGELOG.md b/CHANGELOG.md
index 0608c68..e36c975 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -10,6 +10,11 @@
 * Adjust minimum interval for periodic jobs
 * Add GCM service declaration in library manifest
 
+## 1.0.13 (2016-09-12)
+
+* Fix crash while acquiring wake lock
+* Check boot permission only when persisted flag is set to true
+
 ## 1.0.12 (2016-08-29)
 
 * Fix IllegalArgumentException with GCM API, see #72
diff --git a/README.md b/README.md
index a21b1c7..66d857d 100644
--- a/README.md
+++ b/README.md
@@ -8,7 +8,7 @@ Download [the latest version][2] or grab via Gradle:
 
 ```groovy
 dependencies {
-    compile 'com.evernote:android-job:1.0.12'
+    compile 'com.evernote:android-job:1.0.13'
 }
 ```
 
diff --git a/library/src/main/java/com/evernote/android/job/JobExecutor.java b/library/src/main/java/com/evernote/android/job/JobExecutor.java
index a4825ab..f28bb4b 100644
--- a/library/src/main/java/com/evernote/android/job/JobExecutor.java
+++ b/library/src/main/java/com/evernote/android/job/JobExecutor.java
@@ -33,7 +33,6 @@
 import android.util.SparseArray;
 
 import com.evernote.android.job.util.JobCat;
-import com.evernote.android.job.util.JobUtil;
 
 import net.vrallev.android.cat.CatLog;
 
@@ -52,6 +51,7 @@
 /*package*/ class JobExecutor {
 
     private static final CatLog CAT = new JobCat("JobExecutor");
+    private static final long WAKE_LOCK_TIMEOUT = TimeUnit.MINUTES.toMillis(3);
 
     private final ExecutorService mExecutorService;
 
@@ -124,34 +124,23 @@ private JobCallable(Job job) {
             mJob = job;
 
             Context context = mJob.getContext();
-            PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
-
-            mWakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "JobExecutor");
-            mWakeLock.setReferenceCounted(false);
-            acquireWakeLock();
+            mWakeLock = WakeLockUtil.acquireWakeLock(context, "JobExecutor", WAKE_LOCK_TIMEOUT);
         }
 
         @Override
         public Job.Result call() throws Exception {
             try {
                 // just in case something was blocking and the wake lock is no longer acquired
-                acquireWakeLock();
-
+                WakeLockUtil.acquireWakeLock(mJob.getContext(), mWakeLock, WAKE_LOCK_TIMEOUT);
                 return runJob();
 
             } finally {
-                if (mWakeLock.isHeld()) {
-                    try {
-                        mWakeLock.release();
-                    } catch (Exception e) {
-                        // just to make sure if the PowerManager crashes while acquiring a wake lock
-                        CAT.e(e);
-                    }
-                } else {
+                markJobAsFinished(mJob);
+
+                if (mWakeLock == null || !mWakeLock.isHeld()) {
                     CAT.w("Wake lock was not held after job %s was done. The job took too long to complete. This could have unintended side effects on your app.", mJob);
                 }
-
-                markJobAsFinished(mJob);
+                WakeLockUtil.releaseWakeLock(mWakeLock);
             }
         }
 
@@ -180,17 +169,5 @@ private void handleResult(Job.Result result) {
                 request.incNumFailures();
             }
         }
-
-        private void acquireWakeLock() {
-            if (!mWakeLock.isHeld() && JobUtil.hasWakeLockPermission(mJob.getContext())) {
-                try {
-                    mWakeLock.acquire(TimeUnit.MINUTES.toMillis(3));
-                } catch (Exception e) {
-                    // saw an NPE on rooted Galaxy Nexus Android 4.1.1
-                    // android.os.IPowerManager$Stub$Proxy.acquireWakeLock(IPowerManager.java:288)
-                    CAT.e(e);
-                }
-            }
-        }
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 8f7fd20..99fcc30 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -469,12 +469,7 @@ private JobProxy getJobProxy(JobApi api) {
     }
 
     private void rescheduleTasksIfNecessary() {
-        PowerManager powerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
-        final PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, JobManager.class.getName());
-        if (JobUtil.hasWakeLockPermission(mContext)) {
-            wakeLock.setReferenceCounted(false);
-            wakeLock.acquire(TimeUnit.SECONDS.toMillis(3));
-        }
+        final PowerManager.WakeLock wakeLock = WakeLockUtil.acquireWakeLock(mContext, JobManager.class.getName(), TimeUnit.MINUTES.toMillis(1));
 
         new Thread() {
             @Override
@@ -513,14 +508,7 @@ public void run() {
                     CAT.d("Reschedule %d jobs of %d jobs", rescheduledCount, requests.size());
 
                 } finally {
-                    try {
-                        if (wakeLock.isHeld()) {
-                            wakeLock.release();
-                        }
-                    } catch (Exception e) {
-                        // just to make sure if the PowerManager crashes while acquiring a wake lock
-                        CAT.e(e);
-                    }
+                    WakeLockUtil.releaseWakeLock(wakeLock);
                 }
             }
         }.start();
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index e9229e9..0a236ea 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -820,7 +820,7 @@ public Builder setBackoffCriteria(long backoffMs, @NonNull BackoffPolicy backoff
          * @param persisted If {@code true} the job is scheduled after a reboot.
          */
         public Builder setPersisted(boolean persisted) {
-            if (!JobUtil.hasBootPermission(JobManager.instance().getContext())) {
+            if (persisted && !JobUtil.hasBootPermission(JobManager.instance().getContext())) {
                 throw new IllegalStateException("Does not have RECEIVE_BOOT_COMPLETED permission, which is mandatory for this feature");
             }
             mPersisted = persisted;
diff --git a/library/src/main/java/com/evernote/android/job/WakeLockUtil.java b/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
new file mode 100644
index 0000000..18bd0d1
--- /dev/null
+++ b/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
@@ -0,0 +1,61 @@
+package com.evernote.android.job;
+
+import android.content.Context;
+import android.os.PowerManager;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.evernote.android.job.util.JobCat;
+import com.evernote.android.job.util.JobUtil;
+
+import net.vrallev.android.cat.CatLog;
+
+/**
+ * @author rwondratschek
+ */
+/*package*/ final class WakeLockUtil {
+
+    private static final CatLog CAT = new JobCat("WakeLockUtil");
+
+    private WakeLockUtil() {
+        // no op
+    }
+
+    @Nullable
+    public static PowerManager.WakeLock acquireWakeLock(@NonNull Context context, @NonNull String tag, long timeoutMillis) {
+        PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+
+        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, tag);
+        wakeLock.setReferenceCounted(false);
+
+        return acquireWakeLock(context, wakeLock, timeoutMillis) ? wakeLock : null;
+    }
+
+    public static boolean acquireWakeLock(@NonNull Context context, @Nullable PowerManager.WakeLock wakeLock, long timeoutMillis) {
+        if (wakeLock != null && !wakeLock.isHeld() && JobUtil.hasWakeLockPermission(context)) {
+            // Even if we have the permission, some devices throw an exception in the try block nonetheless,
+            // I'm looking at you, Samsung SM-T805
+
+            try {
+                wakeLock.acquire(timeoutMillis);
+                return true;
+            } catch (Exception e) {
+                // saw an NPE on rooted Galaxy Nexus Android 4.1.1
+                // android.os.IPowerManager$Stub$Proxy.acquireWakeLock(IPowerManager.java:288)
+                CAT.e(e);
+            }
+        }
+        return false;
+    }
+
+    public static void releaseWakeLock(@Nullable PowerManager.WakeLock wakeLock) {
+        try {
+            if (wakeLock != null && wakeLock.isHeld()) {
+                wakeLock.release();
+            }
+        } catch (Exception e) {
+            // just to make sure if the PowerManager crashes while acquiring a wake lock
+            CAT.e(e);
+        }
+    }
+}
