diff --git a/library/src/main/java/com/evernote/android/job/JobExecutor.java b/library/src/main/java/com/evernote/android/job/JobExecutor.java
index 24a6b1a..ec4c735 100644
--- a/library/src/main/java/com/evernote/android/job/JobExecutor.java
+++ b/library/src/main/java/com/evernote/android/job/JobExecutor.java
@@ -180,7 +180,7 @@ private void handleResult(Job job, Job.Result result) {
             boolean incFailureCount = false;
             boolean updateLastRun = false;
 
-            if (!request.isPeriodic() && Job.Result.RESCHEDULE.equals(result)) {
+            if (!request.isPeriodic() && Job.Result.RESCHEDULE.equals(result) && !job.isDeleted()) {
                 request = request.reschedule(true, true);
                 mJob.onReschedule(request.getJobId());
                 updateLastRun = true;
diff --git a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index d762aab..7842da7 100644
--- a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -1,5 +1,7 @@
 package com.evernote.android.job;
 
+import android.support.annotation.NonNull;
+
 import com.evernote.android.job.test.DummyJobs;
 import com.evernote.android.job.test.JobRobolectricTestRunner;
 import com.evernote.android.job.test.TestLogger;
@@ -11,6 +13,7 @@
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
 
@@ -169,4 +172,46 @@ public void verifyPendingRequestNullWhenMarkedStated() {
         common.markStarting(request);
         assertThat(common.getPendingRequest(true, false)).isNull();
     }
+
+    @Test
+    public void verifyCanceledJobNotRescheduled() {
+        final AtomicBoolean onRescheduleCalled = new AtomicBoolean(false);
+        final Job job = new Job() {
+            @NonNull
+            @Override
+            protected Result onRunJob(Params params) {
+                manager().cancelAll();
+                return Result.RESCHEDULE;
+            }
+
+            @Override
+            protected void onReschedule(int newJobId) {
+                onRescheduleCalled.set(true);
+            }
+        };
+
+        JobCreator jobCreator = new JobCreator() {
+            @Override
+            public Job create(String tag) {
+                return job;
+            }
+        };
+
+        manager().addJobCreator(jobCreator);
+
+        final String tag = "something";
+        final int jobId = new JobRequest.Builder(tag)
+                .setExecutionWindow(200_000L, 400_000L)
+                .build()
+                .schedule();
+
+        executeJob(jobId, Job.Result.RESCHEDULE);
+
+        assertThat(manager().getAllJobRequestsForTag(tag)).isEmpty();
+
+        assertThat(manager().getJobRequest(jobId)).isNull();
+        assertThat(manager().getJobRequest(jobId, true)).isNull();
+
+        assertThat(onRescheduleCalled.get()).isFalse();
+    }
 }
