diff --git a/CHANGELOG.md b/CHANGELOG.md
index ea01b57..2aa4ff5 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,6 @@
+## 1.3.0-alpha05 (2018-07-23)
+* Use synchronous method to query the workmanager statuses, see #464
+
 ## 1.3.0-alpha04 (2018-07-20)
 * Fix rare NPE when `WorkManager` is null for some reason, see #477
 * Fix rare NPE when `JobStorage` is null, see #492
diff --git a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
index 225d35c..7d14bad 100644
--- a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
@@ -1,10 +1,6 @@
 package com.evernote.android.job.work;
 
-import android.arch.lifecycle.LiveData;
-import android.arch.lifecycle.Observer;
 import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.test.InstrumentationRegistry;
@@ -16,15 +12,14 @@
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.PlatformWorkManagerRule;
 
+import org.assertj.core.util.Preconditions;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import java.util.List;
-import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicReference;
 
 import androidx.work.State;
 import androidx.work.WorkManager;
@@ -165,34 +160,6 @@ private void testConstraints(JobRequest.Builder builder) {
     }
 
     private List<WorkStatus> getWorkStatus(String tag) {
-        final CountDownLatch latch = new CountDownLatch(1);
-        final AtomicReference<List<WorkStatus>> reference = new AtomicReference<>();
-
-        final LiveData<List<WorkStatus>> liveData = WorkManager.getInstance().getStatusesByTag(tag);
-        liveData.observeForever(new Observer<List<WorkStatus>>() {
-            @Override
-            public void onChanged(@Nullable List<WorkStatus> workStatuses) {
-                if (reference.get() == null) {
-                    reference.set(workStatuses);
-                }
-
-                final Observer<List<WorkStatus>> observer = this;
-                new Handler(Looper.getMainLooper()).post(new Runnable() {
-                    @Override
-                    public void run() {
-                        liveData.removeObserver(observer);
-                    }
-                });
-
-                latch.countDown();
-            }
-        });
-
-        try {
-            assertThat(latch.await(3, TimeUnit.SECONDS)).isTrue();
-        } catch (InterruptedException e) {
-            throw new RuntimeException(e);
-        }
-        return reference.get();
+        return Preconditions.checkNotNull(WorkManager.getInstance()).synchronous().getStatusesByTagSync(tag);
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/work/JobProxyWorkManager.java b/library/src/main/java/com/evernote/android/job/work/JobProxyWorkManager.java
index 0e3d876..da51f31 100644
--- a/library/src/main/java/com/evernote/android/job/work/JobProxyWorkManager.java
+++ b/library/src/main/java/com/evernote/android/job/work/JobProxyWorkManager.java
@@ -1,13 +1,8 @@
 package com.evernote.android.job.work;
 
-import android.arch.lifecycle.LiveData;
-import android.arch.lifecycle.Observer;
 import android.content.Context;
 import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.support.annotation.RestrictTo;
 
 import com.evernote.android.job.JobProxy;
@@ -17,9 +12,7 @@
 
 import java.util.Collections;
 import java.util.List;
-import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicReference;
 
 import androidx.work.Configuration;
 import androidx.work.Constraints;
@@ -42,11 +35,9 @@
 
     @SuppressWarnings({"FieldCanBeLocal", "unused"})
     private final Context mContext;
-    private final Handler mHandler;
 
     public JobProxyWorkManager(Context context) {
         mContext = context;
-        mHandler = new Handler(Looper.getMainLooper());
     }
 
     @Override
@@ -168,38 +159,11 @@ private WorkManager getWorkManager() {
     }
 
     private List<WorkStatus> getWorkStatusBlocking(String tag) {
-        final CountDownLatch latch = new CountDownLatch(1);
-        final AtomicReference<List<WorkStatus>> reference = new AtomicReference<>();
-
         WorkManager workManager = getWorkManager();
         if (workManager == null) {
             return Collections.emptyList();
         }
 
-        final LiveData<List<WorkStatus>> liveData = workManager.getStatusesByTag(tag);
-        liveData.observeForever(new Observer<List<WorkStatus>>() {
-            @Override
-            public void onChanged(@Nullable List<WorkStatus> workStatuses) {
-                if (reference.get() == null) {
-                    reference.set(workStatuses);
-                }
-
-                final Observer<List<WorkStatus>> observer = this;
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        liveData.removeObserver(observer);
-                    }
-                });
-
-                latch.countDown();
-            }
-        });
-
-        try {
-            latch.await(3, TimeUnit.SECONDS);
-        } catch (InterruptedException ignored) {
-        }
-        return reference.get();
+        return workManager.synchronous().getStatusesByTagSync(tag);
     }
 }
