diff --git a/CHANGELOG.md b/CHANGELOG.md
index b720ab9..235dc5d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -11,6 +11,7 @@
 * Add new requirements battery not low and storage not low
 * Add helper job class `DailyJob` to make it easier to run jobs once a day, see #223
 * Add option in `JobConfig` to add a logger
+* Add option in `JobConfig` for a job ID offset to avoid clashes with other jobs in the `JobScheduler`
 
 ## 1.1.12
 
diff --git a/library/src/main/java/com/evernote/android/job/JobConfig.java b/library/src/main/java/com/evernote/android/job/JobConfig.java
index ca9b281..af6b702 100644
--- a/library/src/main/java/com/evernote/android/job/JobConfig.java
+++ b/library/src/main/java/com/evernote/android/job/JobConfig.java
@@ -60,6 +60,8 @@ private JobConfig() {
     private static volatile long jobReschedulePause = DEFAULT_JOB_RESCHEDULE_PAUSE;
     private static volatile boolean skipJobReschedule = false;
 
+    private static volatile int jobIdOffset = 0;
+
     static {
         ENABLED_APIS = new EnumMap<>(JobApi.class);
         for (JobApi api : JobApi.values()) {
@@ -215,6 +217,27 @@ public static void setJobReschedulePause(long pause, @NonNull TimeUnit timeUnit)
         JobConfig.skipJobReschedule = skipJobReschedule;
     }
 
+    /**
+     * @return The offset for the very first job ID. The default value is 0 and very first job ID will be 1.
+     */
+    public static int getJobIdOffset() {
+        return jobIdOffset;
+    }
+
+    /**
+     * Adds an offset to the job IDs. Job IDs are generated and usually start with 1. This offset shifts the
+     * very first job ID.
+     *
+     * @param jobIdOffset The offset for the very first job ID.
+     */
+    public static void setJobIdOffset(int jobIdOffset) {
+        if (jobIdOffset > Integer.MAX_VALUE - 500) {
+            throw new IllegalArgumentException("offset is too close to Integer.MAX_VALUE");
+        }
+
+        JobConfig.jobIdOffset = jobIdOffset;
+    }
+
     /**
      * Resets all adjustments in the config.
      */
@@ -226,6 +249,7 @@ public static void reset() {
         forceAllowApi14 = false;
         jobReschedulePause = DEFAULT_JOB_RESCHEDULE_PAUSE;
         skipJobReschedule = false;
+        jobIdOffset = 0;
         JobCat.setLogcatEnabled(true);
         JobCat.clearLogger();
     }
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index 246f4fa..aa33f48 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -233,6 +233,12 @@ public synchronized int nextJobId() {
 
         int id = mJobCounter.incrementAndGet();
 
+        int offset = JobConfig.getJobIdOffset();
+        if (id < offset) {
+            mJobCounter.set(offset);
+            id = mJobCounter.incrementAndGet();
+        }
+
         if (id < 0) {
             /*
              * An overflow occurred. It'll happen rarely, but just in case reset the ID and start from scratch.
@@ -346,7 +352,7 @@ private JobRequest load(int id, boolean includeStarted) {
             closeDatabase(database);
         }
 
-        return Math.max(jobId, mPreferences.getInt(JOB_ID_COUNTER, 0));
+        return Math.max(JobConfig.getJobIdOffset(), Math.max(jobId, mPreferences.getInt(JOB_ID_COUNTER, 0)));
     }
 
     private void addFailedDeleteId(int id) {
diff --git a/library/src/test/java/com/evernote/android/job/JobConfigTest.java b/library/src/test/java/com/evernote/android/job/JobConfigTest.java
index bfadbaa..cc5df9f 100644
--- a/library/src/test/java/com/evernote/android/job/JobConfigTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobConfigTest.java
@@ -2,6 +2,7 @@
 
 import android.os.Build;
 
+import com.evernote.android.job.test.DummyJobs;
 import com.evernote.android.job.test.JobRobolectricTestRunner;
 
 import org.junit.FixMethodOrder;
@@ -108,4 +109,37 @@ public void verifyForceApiDisabledOtherApis() {
             assertThat(JobConfig.isApiEnabled(api)).isEqualTo(api == forcedApi);
         }
     }
+
+    @Test
+    public void verifyJobIdOffset() {
+        assertThat(JobConfig.getJobIdOffset()).isEqualTo(0);
+        assertThat(manager().getJobStorage().getMaxJobId()).isEqualTo(0);
+
+        int jobId = DummyJobs.createBuilder(DummyJobs.SuccessJob.class)
+                .setExecutionWindow(200_000L, 400_000L)
+                .build()
+                .schedule();
+
+        assertThat(jobId).isEqualTo(1);
+
+        JobConfig.setJobIdOffset(100);
+        assertThat(JobConfig.getJobIdOffset()).isEqualTo(100);
+
+        jobId = DummyJobs.createBuilder(DummyJobs.SuccessJob.class)
+                .setExecutionWindow(200_000L, 400_000L)
+                .build()
+                .schedule();
+
+        assertThat(jobId).isEqualTo(101);
+
+        JobConfig.setJobIdOffset(0);
+        assertThat(JobConfig.getJobIdOffset()).isEqualTo(0);
+
+        jobId = DummyJobs.createBuilder(DummyJobs.SuccessJob.class)
+                .setExecutionWindow(200_000L, 400_000L)
+                .build()
+                .schedule();
+
+        assertThat(jobId).isEqualTo(102);
+    }
 }
diff --git a/library/src/test/java/com/evernote/android/job/JobManagerRule.java b/library/src/test/java/com/evernote/android/job/JobManagerRule.java
index d914228..0b88ee8 100644
--- a/library/src/test/java/com/evernote/android/job/JobManagerRule.java
+++ b/library/src/test/java/com/evernote/android/job/JobManagerRule.java
@@ -24,6 +24,8 @@ public JobManagerRule(@NonNull JobCreator jobCreator, @NonNull Context context)
     @Override
     protected void before() throws Throwable {
         JobConfig.addLogger(TestLogger.INSTANCE);
+        JobConfig.setSkipJobReschedule(true);
+
         mManager = JobManager.create(mContext);
         mManager.addJobCreator(mJobCreator);
     }
