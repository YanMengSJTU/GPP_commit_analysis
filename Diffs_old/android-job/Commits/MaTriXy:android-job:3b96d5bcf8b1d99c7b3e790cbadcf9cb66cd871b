diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index e1179ba..4480cd9 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -69,16 +69,21 @@ public boolean onCreateOptionsMenu(Menu menu) {
     public boolean onPrepareOptionsMenu(Menu menu) {
         super.onPrepareOptionsMenu(menu);
 
-        if (JobApi.V_14.isSupported(this)) {
-            menu.findItem(R.id.action_force_14).setChecked(false);
+        if (JobApi.V_24.isSupported(this)) {
+            menu.findItem(R.id.action_force_24).setChecked(false);
         } else {
-            menu.findItem(R.id.action_force_14).setVisible(false);
+            menu.findItem(R.id.action_force_24).setVisible(false);
         }
         if (JobApi.V_21.isSupported(this)) {
             menu.findItem(R.id.action_force_21).setChecked(false);
         } else {
             menu.findItem(R.id.action_force_21).setVisible(false);
         }
+        if (JobApi.V_14.isSupported(this)) {
+            menu.findItem(R.id.action_force_14).setChecked(false);
+        } else {
+            menu.findItem(R.id.action_force_14).setVisible(false);
+        }
         if (JobApi.GCM.isSupported(this)) {
             menu.findItem(R.id.action_force_gcm).setChecked(false);
         } else {
@@ -86,6 +91,9 @@ public boolean onPrepareOptionsMenu(Menu menu) {
         }
 
         switch (mJobManager.getApi()) {
+            case V_24:
+                menu.findItem(R.id.action_force_24).setChecked(true);
+                break;
             case V_21:
                 menu.findItem(R.id.action_force_21).setChecked(true);
                 break;
@@ -105,6 +113,9 @@ public boolean onPrepareOptionsMenu(Menu menu) {
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
+            case R.id.action_force_24:
+                mJobManager.forceApi(JobApi.V_24);
+                return true;
             case R.id.action_force_21:
                 mJobManager.forceApi(JobApi.V_21);
                 return true;
diff --git a/demo/src/main/res/menu/activity_main.xml b/demo/src/main/res/menu/activity_main.xml
index 8e81905..493a124 100644
--- a/demo/src/main/res/menu/activity_main.xml
+++ b/demo/src/main/res/menu/activity_main.xml
@@ -5,6 +5,10 @@
       tools:ignore="HardcodedText">
 
     <group android:checkableBehavior="single">
+        <item
+            android:id="@+id/action_force_24"
+            android:title="v24"
+            app:showAsAction="never"/>
         <item
             android:id="@+id/action_force_21"
             android:title="v21"
diff --git a/library/src/main/java/com/evernote/android/job/util/JobApi.java b/library/src/main/java/com/evernote/android/job/util/JobApi.java
index b7c5661..5857807 100644
--- a/library/src/main/java/com/evernote/android/job/util/JobApi.java
+++ b/library/src/main/java/com/evernote/android/job/util/JobApi.java
@@ -34,6 +34,7 @@
 import com.evernote.android.job.gcm.JobProxyGcm;
 import com.evernote.android.job.v14.JobProxy14;
 import com.evernote.android.job.v21.JobProxy21;
+import com.evernote.android.job.v24.JobProxy24;
 import com.google.android.gms.gcm.GcmNetworkManager;
 
 /**
@@ -42,6 +43,10 @@
  * @author rwondratschek
  */
 public enum JobApi {
+    /**
+     * Uses the {@link JobScheduler} for scheduling jobs.
+     */
+    V_24,
     /**
      * Uses the {@link JobScheduler} for scheduling jobs.
      */
@@ -59,6 +64,8 @@
 
     public boolean isSupported(Context context) {
         switch (this) {
+            case V_24:
+                return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N;
             case V_21:
                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;
             case V_14:
@@ -72,6 +79,8 @@ public boolean isSupported(Context context) {
 
     public JobProxy createProxy(Context context) {
         switch (this) {
+            case V_24:
+                return new JobProxy24(context);
             case V_21:
                 return new JobProxy21(context);
             case V_14:
@@ -91,7 +100,9 @@ public synchronized JobProxy getCachedProxy(Context context) {
     }
 
     public static JobApi getDefault(Context context) {
-        if (V_21.isSupported(context)) {
+        if (V_24.isSupported(context)) {
+            return V_24;
+        } else if (V_21.isSupported(context)) {
             return V_21;
         } else if (GCM.isSupported(context)) {
             return GCM;
diff --git a/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java b/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
index 6991a49..b3e737d 100644
--- a/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
+++ b/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
@@ -49,12 +49,18 @@
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class JobProxy21 implements JobProxy {
 
-    private static final CatLog CAT = new JobCat("JobProxy21");
+    private static final String TAG = "JobProxy21";
 
-    private final Context mContext;
+    protected final Context mContext;
+    protected final CatLog mCat;
 
     public JobProxy21(Context context) {
+        this(context, TAG);
+    }
+
+    protected JobProxy21(Context context, String logTag) {
         mContext = context;
+        mCat = new JobCat(logTag);
     }
 
     @Override
@@ -72,11 +78,11 @@ public void plantOneOff(JobRequest request) {
         try {
             scheduleResult = getJobScheduler().schedule(jobInfo);
         } catch (Exception e) {
-            CAT.e(e);
+            mCat.e(e);
             scheduleResult = JobScheduler.RESULT_FAILURE;
         }
 
-        CAT.d("Schedule one-off jobInfo %s, %s, start %s, end %s", scheduleResult == JobScheduler.RESULT_SUCCESS ? "success" : "failure",
+        mCat.d("Schedule one-off jobInfo %s, %s, start %s, end %s", scheduleResult == JobScheduler.RESULT_SUCCESS ? "success" : "failure",
                 request, JobUtil.timeToString(Common.getStartMs(request)), JobUtil.timeToString(Common.getEndMs(request)));
     }
 
@@ -94,11 +100,11 @@ public void plantPeriodic(JobRequest request) {
         try {
             scheduleResult = getJobScheduler().schedule(jobInfo);
         } catch (Exception e) {
-            CAT.e(e);
+            mCat.e(e);
             scheduleResult = JobScheduler.RESULT_FAILURE;
         }
 
-        CAT.d("Schedule periodic jobInfo %s, %s, interval %s", scheduleResult == JobScheduler.RESULT_SUCCESS ? "success" : "failure",
+        mCat.d("Schedule periodic jobInfo %s, %s, interval %s", scheduleResult == JobScheduler.RESULT_SUCCESS ? "success" : "failure",
                 request, JobUtil.timeToString(request.getIntervalMs()));
     }
 
@@ -108,7 +114,7 @@ public void cancel(int jobId) {
             getJobScheduler().cancel(jobId);
         } catch (Exception e) {
             // https://gist.github.com/vRallev/5d48a4a8e8d05067834e
-            CAT.e(e);
+            mCat.e(e);
         }
     }
 
@@ -119,10 +125,11 @@ public boolean isPlatformJobScheduled(JobRequest request) {
             pendingJobs = getJobScheduler().getAllPendingJobs();
         } catch (Exception e) {
             // it's possible that this throws an exception, see https://gist.github.com/vRallev/a59947dd3932d2642641
-            CAT.e(e);
+            mCat.e(e);
             return false;
         }
 
+        //noinspection ConstantConditions
         if (pendingJobs == null || pendingJobs.isEmpty()) {
             return false;
         }
diff --git a/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java b/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java
new file mode 100644
index 0000000..eed70c4
--- /dev/null
+++ b/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright 2007-present Evernote Corporation.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package com.evernote.android.job.v24;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build;
+
+import com.evernote.android.job.JobRequest;
+import com.evernote.android.job.v21.JobProxy21;
+
+
+/**
+ * @author rwondratschek
+ */
+@TargetApi(Build.VERSION_CODES.N)
+public class JobProxy24 extends JobProxy21 {
+
+    private static final String TAG = "JobProxy24";
+
+    public JobProxy24(Context context) {
+        super(context, TAG);
+    }
+
+    @Override
+    public boolean isPlatformJobScheduled(JobRequest request) {
+        try {
+            return getJobScheduler().getPendingJob(request.getJobId()) != null;
+        } catch (Exception e) {
+            mCat.e(e);
+            return false;
+        }
+    }
+}
