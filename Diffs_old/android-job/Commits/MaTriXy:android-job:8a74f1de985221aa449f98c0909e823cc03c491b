diff --git a/library/src/androidTest/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
similarity index 59%
rename from library/src/androidTest/java/com/evernote/android/job/JobExecutionTest.java
rename to library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index 585f84c..eca822f 100644
--- a/library/src/androidTest/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -1,41 +1,38 @@
 package com.evernote.android.job;
 
-import android.content.Context;
-import android.os.SystemClock;
 import android.support.annotation.NonNull;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.filters.LargeTest;
-import android.support.test.runner.AndroidJUnit4;
 
-import com.facebook.stetho.Stetho;
+import com.evernote.android.job.test.JobRobolectricTestRunner;
+import com.evernote.android.job.test.TestCat;
 
 import org.junit.After;
-import org.junit.AfterClass;
 import org.junit.Before;
-import org.junit.BeforeClass;
+import org.junit.FixMethodOrder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
+import org.robolectric.RuntimeEnvironment;
 
 import java.util.HashSet;
 import java.util.Set;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicReference;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 /**
  * @author rwondratschek
  */
-@RunWith(AndroidJUnit4.class)
-@LargeTest
+@RunWith(JobRobolectricTestRunner.class)
+@FixMethodOrder(MethodSorters.JVM)
 public class JobExecutionTest {
 
-    private static Set<Integer> cachedJobIds;
+    private Set<Integer> cachedJobIds;
 
-    @BeforeClass
-    public static void beforeClass() {
-        Stetho.initializeWithDefaults(InstrumentationRegistry.getContext());
-
-        JobManager.create(InstrumentationRegistry.getContext()).addJobCreator(new JobCreator() {
+    @Before
+    public void prepare() {
+        JobManager.create(RuntimeEnvironment.application).addJobCreator(new JobCreator() {
             @Override
             public Job create(String tag) {
                 return new TestJob();
@@ -44,28 +41,18 @@ public Job create(String tag) {
         cachedJobIds = new HashSet<>();
     }
 
-    @AfterClass
-    public static void afterClass() {
-        Context context = InstrumentationRegistry.getContext();
+    @After
+    public void after() {
         for (Integer jobId : cachedJobIds) {
-            JobManager.instance().getApi().getCachedProxy(context).cancel(jobId);
+            JobManager.instance().getApi().getCachedProxy(RuntimeEnvironment.application).cancel(jobId);
         }
 
-        JobManager.instance().destroy();
-    }
-
-    @Before
-    public void beforeTest() {
-        JobManager.instance().cancelAll();
-    }
-
-    @After
-    public void afterTest() {
         JobManager.instance().cancelAll();
+        JobManager.instance().destroy();
     }
 
     @Test
-    public void testSimpleJob() {
+    public void testSimpleJob() throws Throwable {
         final int jobId = getBuilder()
                 .setExecutionWindow(200_000L, 400_000L)
                 .setPersisted(true)
@@ -78,15 +65,23 @@ public void testSimpleJob() {
         JobRequest pendingRequest = common.getPendingRequest(true);
         assertThat(pendingRequest).isNotNull();
 
+        final CountDownLatch latch = new CountDownLatch(1);
+        final AtomicReference<Throwable> crash = new AtomicReference<>();
         new Thread() {
             @Override
             public void run() {
-                SystemClock.sleep(200);
-                assertThat(JobManager.instance().getJobRequest(jobId)).isNull();
-
-                JobRequest transientRequest = JobManager.instance().getJobRequest(jobId, true);
-                assertThat(transientRequest).isNotNull();
-                assertThat(transientRequest.isTransient()).isTrue();
+                try {
+                    Thread.sleep(200);
+                    assertThat(JobManager.instance().getJobRequest(jobId)).isNull();
+
+                    JobRequest transientRequest = JobManager.instance().getJobRequest(jobId, true);
+                    assertThat(transientRequest).isNotNull();
+                    assertThat(transientRequest.isTransient()).isTrue();
+                } catch (Throwable t) {
+                    crash.set(t);
+                }
+
+                latch.countDown();
             }
         }.start();
 
@@ -97,10 +92,15 @@ public void run() {
 
         pendingRequest = common.getPendingRequest(true);
         assertThat(pendingRequest).isNull();
+
+        latch.await(1, TimeUnit.SECONDS);
+        if (crash.get() != null) {
+            throw crash.get();
+        }
     }
 
     @Test
-    public void testPeriodicJob() {
+    public void testPeriodicJob() throws Exception {
         int jobId = getBuilder()
                 .setPeriodic(TimeUnit.MINUTES.toMillis(15))
                 .setPersisted(true)
@@ -121,7 +121,7 @@ public void testPeriodicJob() {
 
         assertThat(JobManager.instance().getAllJobRequestsForTag(TestJob.TAG)).hasSize(1);
 
-        SystemClock.sleep(3_000);
+        Thread.sleep(3_000);
 
         pendingRequest = common.getPendingRequest(true);
         assertThat(pendingRequest).isNotNull();
@@ -132,7 +132,7 @@ public void testPeriodicJob() {
     }
 
     private JobProxy.Common getCommon(int jobId) {
-        return new JobProxy.Common(InstrumentationRegistry.getContext(), "JobExecutionTest", jobId);
+        return new JobProxy.Common(RuntimeEnvironment.application, new TestCat(), jobId);
     }
 
     private static final class TestJob extends Job {
@@ -142,7 +142,11 @@ public void testPeriodicJob() {
         @NonNull
         @Override
         protected Result onRunJob(@NonNull Params params) {
-            SystemClock.sleep(1_000L);
+            try {
+                Thread.sleep(1_000L);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
             return Result.FAILURE;
         }
     }
diff --git a/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java b/library/src/test/java/com/evernote/android/job/JobManagerTest.java
similarity index 77%
rename from library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
rename to library/src/test/java/com/evernote/android/job/JobManagerTest.java
index b4d7f21..672aa08 100644
--- a/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobManagerTest.java
@@ -1,33 +1,30 @@
 package com.evernote.android.job;
 
 import android.support.annotation.NonNull;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.filters.LargeTest;
-import android.support.test.runner.AndroidJUnit4;
 
+import com.evernote.android.job.test.JobRobolectricTestRunner;
 import com.evernote.android.job.util.JobApi;
-import com.facebook.stetho.Stetho;
 
 import org.junit.After;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
+import org.junit.Before;
+import org.junit.FixMethodOrder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
+import org.robolectric.RuntimeEnvironment;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 /**
  * @author rwondratschek
  */
-@RunWith(AndroidJUnit4.class)
-@LargeTest
+@RunWith(JobRobolectricTestRunner.class)
+@FixMethodOrder(MethodSorters.JVM)
 public class JobManagerTest {
 
-    @BeforeClass
-    public static void beforeClass() {
-        Stetho.initializeWithDefaults(InstrumentationRegistry.getContext());
-
-        JobManager.create(InstrumentationRegistry.getContext()).addJobCreator(new JobCreator() {
+    @Before
+    public void prepare() {
+        JobManager.create(RuntimeEnvironment.application).addJobCreator(new JobCreator() {
             @Override
             public Job create(String tag) {
                 return new TestJob();
@@ -35,14 +32,15 @@ public Job create(String tag) {
         });
     }
 
-    @AfterClass
-    public static void afterClass() {
-        JobManager.instance().destroy();
+    @After
+    public void tearDown() {
+        getManager().cancelAll();
+        getManager().destroy();
     }
 
     @Test
     public void testScheduleAndCancel() {
-        JobApi defaultApi = JobApi.getDefault(InstrumentationRegistry.getContext(), getManager().getConfig().isGcmApiEnabled());
+        JobApi defaultApi = JobApi.getDefault(RuntimeEnvironment.application, getManager().getConfig().isGcmApiEnabled());
         assertThat(getManager().getApi()).isEqualTo(defaultApi);
 
         JobRequest request = getJobRequest();
@@ -94,11 +92,6 @@ public void testCancelTag() {
         assertThat(getManager().cancelAllForTag(TestJob.TAG)).isZero();
     }
 
-    @After
-    public void tearDown() {
-        getManager().cancelAll();
-    }
-
     private JobRequest getJobRequest() {
         return getBuilder()
                 .setExecutionWindow(300_000L, 300_000L)
diff --git a/library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java b/library/src/test/java/com/evernote/android/job/JobRequestTest.java
similarity index 91%
rename from library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java
rename to library/src/test/java/com/evernote/android/job/JobRequestTest.java
index a1afb56..81d3602 100644
--- a/library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobRequestTest.java
@@ -1,35 +1,31 @@
 package com.evernote.android.job;
 
 import android.support.annotation.NonNull;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.filters.LargeTest;
-import android.support.test.runner.AndroidJUnit4;
 
+import com.evernote.android.job.test.JobRobolectricTestRunner;
 import com.evernote.android.job.util.JobApi;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
-import com.facebook.stetho.Stetho;
 
 import org.junit.After;
-import org.junit.AfterClass;
 import org.junit.Before;
-import org.junit.BeforeClass;
+import org.junit.FixMethodOrder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
+import org.robolectric.RuntimeEnvironment;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Java6Assertions.assertThat;
 
 /**
  * @author rwondratschek
  */
-@RunWith(AndroidJUnit4.class)
-@LargeTest
+@RunWith(JobRobolectricTestRunner.class)
+@FixMethodOrder(MethodSorters.JVM)
 public class JobRequestTest {
 
-    @BeforeClass
-    public static void beforeClass() {
-        Stetho.initializeWithDefaults(InstrumentationRegistry.getContext());
-
-        JobManager.create(InstrumentationRegistry.getContext()).addJobCreator(new JobCreator() {
+    @Before
+    public void prepare() {
+        JobManager.create(RuntimeEnvironment.application).addJobCreator(new JobCreator() {
             @Override
             public Job create(String tag) {
                 return new TestJob();
@@ -37,19 +33,10 @@ public Job create(String tag) {
         });
     }
 
-    @AfterClass
-    public static void afterClass() {
-        JobManager.instance().destroy();
-    }
-
-    @Before
-    public void beforeTest() {
-        JobManager.instance().cancelAll();
-    }
-
     @After
-    public void afterTest() {
+    public void after() {
         JobManager.instance().cancelAll();
+        JobManager.instance().destroy();
     }
 
     @Test
@@ -110,13 +97,14 @@ public void testPeriodic() {
 
     @Test
     public void testFlex() {
+        JobManager.instance().forceApi(JobApi.V_14);
+
         long interval = JobRequest.MIN_INTERVAL * 5;
         long flex = JobRequest.MIN_FLEX * 5;
         JobRequest request = getBuilder()
                 .setPeriodic(interval, flex)
                 .build();
 
-        JobManager.instance().forceApi(JobApi.V_14);
         JobManager.instance().schedule(request);
 
         assertThat(request.getJobId()).isGreaterThan(0);
diff --git a/library/src/test/java/com/evernote/android/job/test/JobRobolectricTestRunner.java b/library/src/test/java/com/evernote/android/job/test/JobRobolectricTestRunner.java
index 83becd3..22c3998 100644
--- a/library/src/test/java/com/evernote/android/job/test/JobRobolectricTestRunner.java
+++ b/library/src/test/java/com/evernote/android/job/test/JobRobolectricTestRunner.java
@@ -11,14 +11,14 @@
  */
 public class JobRobolectricTestRunner extends RobolectricTestRunner {
 
-  public JobRobolectricTestRunner(Class<?> testClass) throws InitializationError {
-    super(testClass);
-  }
+    public JobRobolectricTestRunner(Class<?> testClass) throws InitializationError {
+        super(testClass);
+    }
 
-  @Override
-  protected Config buildGlobalConfig() {
-    return new Config.Builder()
-        .setConstants(BuildConfig.class)
-        .build();
-  }
+    @Override
+    protected Config buildGlobalConfig() {
+        return new Config.Builder()
+                .setConstants(BuildConfig.class)
+                .build();
+    }
 }
diff --git a/library/src/test/java/com/evernote/android/job/test/TestCat.java b/library/src/test/java/com/evernote/android/job/test/TestCat.java
new file mode 100644
index 0000000..5d5a1e3
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/test/TestCat.java
@@ -0,0 +1,17 @@
+package com.evernote.android.job.test;
+
+import net.vrallev.android.cat.instance.CatLazy;
+
+/**
+ * @author rwondratschek
+ */
+public class TestCat extends CatLazy {
+
+    @Override
+    protected void println(int priority, String message, Throwable t) {
+        //System.out.println(message);
+        //if (t != null) {
+        //    t.printStackTrace();
+        //}
+    }
+}
