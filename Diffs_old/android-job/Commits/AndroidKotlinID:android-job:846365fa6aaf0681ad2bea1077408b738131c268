diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2b60b35..2c8de01 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,6 @@
+## 1.3.0-alpha10
+* Offset the end time when rescheduling an inexact job, see #547
+
 ## 1.3.0-alpha09 (2018-11-18)
 * Upgraded WorkManager to 1.0.0-alpha11
 
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 2e03734..262d60f 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -79,7 +79,7 @@ private static long checkNoOverflow(long result, boolean condition) {
 
         public static long getStartMs(JobRequest request) {
             if (request.getFailureCount() > 0) {
-                return request.getBackoffOffset();
+                return request.getBackoffOffset(false);
             } else {
                 return request.getStartMs();
             }
@@ -92,7 +92,7 @@ public static long getEndMs(JobRequest request) {
         public static long getEndMs(JobRequest request, boolean shiftEnd) {
             long endMs;
             if (request.getFailureCount() > 0) {
-                endMs = request.getBackoffOffset();
+                endMs = request.getBackoffOffset(true);
             } else {
                 endMs = request.getEndMs();
             }
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 28763e4..9dd3613 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -287,7 +287,7 @@ public boolean isExact() {
         return mBuilder.mExact;
     }
 
-    /*package*/ long getBackoffOffset() {
+    /*package*/ long getBackoffOffset(boolean endTime) {
         if (isPeriodic()) {
             return 0L;
         }
@@ -310,6 +310,10 @@ public boolean isExact() {
                 throw new IllegalStateException("not implemented");
         }
 
+        if (endTime) {
+            offset *= 1.2f;
+        }
+
         return Math.min(offset, TimeUnit.HOURS.toMillis(5)); // use max of 5 hours like JobScheduler
     }
 
diff --git a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index 7b7b9d7..faf443e 100644
--- a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -14,6 +14,7 @@
 import org.junit.runners.MethodSorters;
 import org.robolectric.annotation.Config;
 
+import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -290,6 +291,32 @@ public void verifyReschedulingTransientJobsWorks() {
         }
     }
 
+    @Test
+    public void verifyReschedulingInexactJobUsesTimeWindow() {
+        int previousJobId = DummyJobs.createBuilder(DummyJobs.RescheduleJob.class)
+                .setExecutionWindow(200_000L, 400_000L)
+                .setBackoffCriteria(TimeUnit.MINUTES.toMillis(1), JobRequest.BackoffPolicy.LINEAR)
+                .build()
+                .schedule();
+
+        executeJob(previousJobId, Job.Result.RESCHEDULE);
+
+        Set<JobRequest> allJobRequestsForTag = manager().getAllJobRequestsForTag(DummyJobs.RescheduleJob.TAG);
+        assertThat(allJobRequestsForTag).hasSize(1);
+
+        JobRequest firstRetry = allJobRequestsForTag.iterator().next();
+        assertThat(JobProxy.Common.getStartMs(firstRetry)).isNotEqualTo(JobProxy.Common.getEndMs(firstRetry));
+
+        executeJob(firstRetry.getJobId(), Job.Result.RESCHEDULE);
+
+        allJobRequestsForTag = manager().getAllJobRequestsForTag(DummyJobs.RescheduleJob.TAG);
+        assertThat(allJobRequestsForTag).hasSize(1);
+
+        JobRequest secondRetry = allJobRequestsForTag.iterator().next();
+        assertThat(JobProxy.Common.getStartMs(secondRetry)).isNotEqualTo(JobProxy.Common.getEndMs(secondRetry));
+        assertThat(JobProxy.Common.getStartMs(secondRetry)).isNotEqualTo(JobProxy.Common.getEndMs(secondRetry));
+    }
+
     @Test
     public void verifyNotFoundJobCanceledOneOff() {
         final String tag = "something";
