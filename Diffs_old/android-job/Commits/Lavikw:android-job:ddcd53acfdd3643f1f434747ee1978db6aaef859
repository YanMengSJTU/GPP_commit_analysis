diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 896d279..edde1eb 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -614,9 +614,12 @@ public boolean isAllowSmallerIntervalsForMarshmallow() {
          */
         public void setAllowSmallerIntervalsForMarshmallow(boolean allowSmallerIntervals) {
             if (allowSmallerIntervals && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-                throw new IllegalStateException("This method is only allowed to call on Android M or earlier");
+                CAT.i("A call to setAllowSmallerIntervalsForMarshmallow was overriden because we're on Android N or newer");
+            }
+            else
+            {
+                mAllowSmallerIntervals = allowSmallerIntervals;
             }
-            mAllowSmallerIntervals = allowSmallerIntervals;
         }
     }
 
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 4105520..9e9c930 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -106,11 +106,11 @@
     private static final CatLog CAT = new JobCat("JobRequest");
 
     /*package*/ static long getMinInterval() {
-        return JobManager.instance().getConfig().isAllowSmallerIntervalsForMarshmallow() ? TimeUnit.MINUTES.toMillis(1) : MIN_INTERVAL;
+        return JobManager.instance().getConfig().isAllowSmallerIntervalsForMarshmallow() ? TimeUnit.SECONDS.toMillis(10) : MIN_INTERVAL;
     }
 
     /*package*/ static long getMinFlex() {
-        return JobManager.instance().getConfig().isAllowSmallerIntervalsForMarshmallow() ? TimeUnit.SECONDS.toMillis(30) : MIN_FLEX;
+        return JobManager.instance().getConfig().isAllowSmallerIntervalsForMarshmallow() ? TimeUnit.SECONDS.toMillis(1) : MIN_FLEX;
     }
 
     private final Builder mBuilder;
@@ -801,6 +801,7 @@ public Builder setPeriodic(long intervalMs) {
          * @see #MIN_INTERVAL
          * @see #MIN_FLEX
          */
+
         public Builder setPeriodic(long intervalMs, long flexMs) {
             mIntervalMs = JobPreconditions.checkArgumentInRange(intervalMs, getMinInterval(), Long.MAX_VALUE, "intervalMs");
             mFlexMs = JobPreconditions.checkArgumentInRange(flexMs, getMinFlex(), mIntervalMs, "flexMs");
