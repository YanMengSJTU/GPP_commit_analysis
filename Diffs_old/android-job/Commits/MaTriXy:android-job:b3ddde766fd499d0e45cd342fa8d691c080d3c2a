diff --git a/library/src/main/java/com/evernote/android/job/Job.java b/library/src/main/java/com/evernote/android/job/Job.java
index 69e9bd0..5f05920 100644
--- a/library/src/main/java/com/evernote/android/job/Job.java
+++ b/library/src/main/java/com/evernote/android/job/Job.java
@@ -508,7 +508,7 @@ public boolean requirementsEnforced() {
          * @return How often the job already has failed.
          */
         public int getFailureCount() {
-            return mRequest.getNumFailures();
+            return mRequest.getFailureCount();
         }
 
         /**
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 913e914..a1e97e3 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -90,7 +90,7 @@ private static long checkNoOverflow(long result, boolean condition) {
         }
 
         public static long getStartMs(JobRequest request) {
-            if (request.getNumFailures() > 0) {
+            if (request.getFailureCount() > 0) {
                 return request.getBackoffOffset();
             } else {
                 return request.getStartMs();
@@ -98,7 +98,7 @@ public static long getStartMs(JobRequest request) {
         }
 
         public static long getEndMs(JobRequest request) {
-            if (request.getNumFailures() > 0) {
+            if (request.getFailureCount() > 0) {
                 return request.getBackoffOffset();
             } else {
                 return request.getEndMs();
@@ -122,7 +122,7 @@ public static long getAverageDelayMsSupportFlex(JobRequest request) {
         }
 
         public static int getRescheduleCount(JobRequest request) {
-            return request.getNumFailures();
+            return request.getFailureCount();
         }
 
         private final Context mContext;
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 117f4dd..ca152fa 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -115,7 +115,7 @@
     private final Builder mBuilder;
     private final JobApi mJobApi;
 
-    private int mNumFailures;
+    private int mFailureCount;
     private long mScheduledAt;
     private boolean mTransient;
     private boolean mFlexSupport;
@@ -271,14 +271,14 @@ public boolean isExact() {
         long offset;
         switch (getBackoffPolicy()) {
             case LINEAR:
-                offset = mNumFailures * getBackoffMs();
+                offset = mFailureCount * getBackoffMs();
                 break;
 
             case EXPONENTIAL:
-                if (mNumFailures == 0) {
+                if (mFailureCount == 0) {
                     offset = 0L;
                 } else {
-                    offset = (long) (getBackoffMs() * Math.pow(2, mNumFailures - 1));
+                    offset = (long) (getBackoffMs() * Math.pow(2, mFailureCount - 1));
                 }
                 break;
 
@@ -319,9 +319,8 @@ public long getScheduledAt() {
      *
      * @return How often the job already has failed.
      */
-
-    public int getNumFailures() {
-        return mNumFailures;
+    public int getFailureCount() {
+        return mFailureCount;
     }
 
     /**
@@ -381,15 +380,15 @@ public Builder cancelAndEdit() {
     /*package*/ int reschedule(boolean failure, boolean newJob) {
         JobRequest newRequest = new Builder(this, newJob).build();
         if (failure) {
-            newRequest.mNumFailures = mNumFailures + 1;
+            newRequest.mFailureCount = mFailureCount + 1;
         }
         return newRequest.schedule();
     }
 
     /*package*/ void incNumFailures() {
-        mNumFailures++;
+        mFailureCount++;
         ContentValues contentValues = new ContentValues();
-        contentValues.put(JobStorage.COLUMN_NUM_FAILURES, mNumFailures);
+        contentValues.put(JobStorage.COLUMN_NUM_FAILURES, mFailureCount);
         JobManager.instance().getJobStorage().update(this, contentValues);
     }
 
@@ -403,7 +402,7 @@ public Builder cancelAndEdit() {
     /*package*/ ContentValues toContentValues() {
         ContentValues contentValues = new ContentValues();
         mBuilder.fillContentValues(contentValues);
-        contentValues.put(JobStorage.COLUMN_NUM_FAILURES, mNumFailures);
+        contentValues.put(JobStorage.COLUMN_NUM_FAILURES, mFailureCount);
         contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, mScheduledAt);
         contentValues.put(JobStorage.COLUMN_TRANSIENT, mTransient);
         contentValues.put(JobStorage.COLUMN_FLEX_SUPPORT, mFlexSupport);
@@ -412,12 +411,12 @@ public Builder cancelAndEdit() {
 
     /*package*/ static JobRequest fromCursor(Cursor cursor) throws Exception {
         JobRequest request = new Builder(cursor).build();
-        request.mNumFailures = cursor.getInt(cursor.getColumnIndex(JobStorage.COLUMN_NUM_FAILURES));
+        request.mFailureCount = cursor.getInt(cursor.getColumnIndex(JobStorage.COLUMN_NUM_FAILURES));
         request.mScheduledAt = cursor.getLong(cursor.getColumnIndex(JobStorage.COLUMN_SCHEDULED_AT));
         request.mTransient = cursor.getInt(cursor.getColumnIndex(JobStorage.COLUMN_TRANSIENT)) > 0;
         request.mFlexSupport = cursor.getInt(cursor.getColumnIndex(JobStorage.COLUMN_FLEX_SUPPORT)) > 0;
 
-        JobPreconditions.checkArgumentNonnegative(request.mNumFailures, "failure count can't be negative");
+        JobPreconditions.checkArgumentNonnegative(request.mFailureCount, "failure count can't be negative");
         JobPreconditions.checkArgumentNonnegative(request.mScheduledAt, "scheduled at can't be negative");
 
         return request;
diff --git a/library/src/test/java/com/evernote/android/job/FailureCountTest.java b/library/src/test/java/com/evernote/android/job/FailureCountTest.java
index ff1bc33..9c50598 100644
--- a/library/src/test/java/com/evernote/android/job/FailureCountTest.java
+++ b/library/src/test/java/com/evernote/android/job/FailureCountTest.java
@@ -27,12 +27,12 @@ public void incrementPeriodicJobFailureCount() {
                 .schedule();
 
         executeJob(jobId, Job.Result.FAILURE);
-        assertThat(manager().getJobRequest(jobId).getNumFailures()).isEqualTo(1);
+        assertThat(manager().getJobRequest(jobId).getFailureCount()).isEqualTo(1);
 
         resetJob(jobId);
 
         executeJob(jobId, Job.Result.FAILURE);
-        assertThat(manager().getJobRequest(jobId).getNumFailures()).isEqualTo(2);
+        assertThat(manager().getJobRequest(jobId).getFailureCount()).isEqualTo(2);
     }
 
     @Test
@@ -46,12 +46,12 @@ public void incrementRescheduleJobFailureCount() {
         DummyJobs.RescheduleJob job = (DummyJobs.RescheduleJob) manager().getJob(jobId);
         jobId = job.getNewJobId();
 
-        assertThat(manager().getJobRequest(jobId).getNumFailures()).isEqualTo(1);
+        assertThat(manager().getJobRequest(jobId).getFailureCount()).isEqualTo(1);
 
         executeJob(jobId, Job.Result.RESCHEDULE);
         job = (DummyJobs.RescheduleJob) manager().getJob(jobId);
         jobId = job.getNewJobId();
 
-        assertThat(manager().getJobRequest(jobId).getNumFailures()).isEqualTo(2);
+        assertThat(manager().getJobRequest(jobId).getFailureCount()).isEqualTo(2);
     }
 }
