diff --git a/CHANGELOG.md b/CHANGELOG.md
index e6d0fb6..f42e161 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,8 @@
-## 1.3.0-alpha06  (2018-07-24)
+## 1.3.0-alpha07 (2018-09-23)
+* Handle crash when rescheduling jobs, see #510
+* Upgraded WorkManager
+
+## 1.3.0-alpha06 (2018-07-24)
 * Find the right tag for the job with `WorkManager`, see #509
 * Integrate `WorkManager` version `1.0.0-alpha05`
 
diff --git a/README.md b/README.md
index 92e03a4..7607804 100644
--- a/README.md
+++ b/README.md
@@ -11,7 +11,7 @@ dependencies {
     implementation 'com.evernote:android-job:1.2.6'
 
     // or
-    implementation 'com.evernote:android-job:1.3.0-alpha06'
+    implementation 'com.evernote:android-job:1.3.0-alpha07'
 }
 ```
 
@@ -166,10 +166,8 @@ dependencies {
     implementation "android.arch.work:work-runtime:$work_version"
 }
 ```
-This library will detect the `WorkManager` at runtime and use it from now on. To opt-out of this change (what isn't recommended) either exclude `WorkManager` from your app or turn the API off with
-```java
-JobConfig.setApiEnabled(JobApi.WORK_MANAGER, false);
-```
+
+Please take a look at the [Wiki](https://github.com/evernote/android-job/wiki/Migrating-to-WorkManager) for a complete transition guide.
 
 The API and feature set of `android-job` and `WorkManager` are really similar. However, some features are unique and only supported by one or the other
 
diff --git a/build.gradle b/build.gradle
index 5ef7c57..8761a29 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
         google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.1.1'
+        classpath 'com.android.tools.build:gradle:3.1.4'
         classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
     }
 }
@@ -22,15 +22,15 @@ allprojects {
 }
 
 ext {
-    compileSdkVersion = 26
+    compileSdkVersion = 28
     targetSdkVersion = compileSdkVersion
     minSdkVersion = 14
 
-    buildToolsVersion = '27.0.3'
+    buildToolsVersion = '28.0.2'
 
-    supportLibVersion = '26.1.0'
+    supportLibVersion = '28.0.0'
     playServicesVersion = '15.0.1'
-    workVersion = '1.0.0-alpha05'
+    workVersion = '1.0.0-alpha09'
     stethoVersion = '1.5.0'
     junitVersion = '4.12'
     assertjVersion = '3.6.2'
@@ -39,6 +39,6 @@ ext {
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '4.8.1'
+    gradleVersion = '4.10.2'
     distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
 }
diff --git a/gradle.properties b/gradle.properties
index 91067c6..30ef102 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,3 @@
-#VERSION_NAME=1.3.0-alpha06
+#VERSION_NAME=1.3.0-alpha07
 VERSION_NAME=1.3.0-SNAPSHOT
 VERSION_CODE=1
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 758de96..29953ea 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index debd024..d76b502 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.8.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.2-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/library/build.gradle b/library/build.gradle
index d3ea554..0ec5375 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -34,6 +34,8 @@ android {
 
     resourcePrefix 'job_'
 
+    useLibrary 'android.test.mock'
+
     defaultConfig {
         minSdkVersion rootProject.ext.minSdkVersion
         targetSdkVersion rootProject.ext.targetSdkVersion
@@ -64,6 +66,10 @@ android {
             }
         }
     }
+
+    packagingOptions {
+        exclude 'META-INF/proguard/androidx-annotations.pro'
+    }
 }
 
 apply from: '../build-config/gradle-push.gradle'
\ No newline at end of file
diff --git a/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java b/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
index a11b9c2..3c51736 100644
--- a/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
+++ b/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
@@ -6,11 +6,13 @@
 
 import org.junit.rules.ExternalResource;
 
+import java.util.List;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 
 import androidx.work.Configuration;
 import androidx.work.WorkManager;
+import androidx.work.WorkStatus;
 import androidx.work.test.WorkManagerTestInitHelper;
 
 /**
@@ -19,24 +21,19 @@
 public class PlatformWorkManagerRule extends ExternalResource {
 
     private JobManager mManager;
-    private Executor mExecutor;
-    private boolean mAllowExecution;
 
     @Override
     protected void before() {
         Context context = InstrumentationRegistry.getTargetContext();
 
-        mAllowExecution = false;
-        mExecutor = new Executor() {
+        Executor executor = new Executor() {
             @Override
             public void execute(@NonNull Runnable command) {
-                if (mAllowExecution) {
-                    command.run();
-                }
+                command.run();
             }
         };
 
-        WorkManagerTestInitHelper.initializeTestWorkManager(context, new Configuration.Builder().setExecutor(mExecutor).build());
+        WorkManagerTestInitHelper.initializeTestWorkManager(context, new Configuration.Builder().setExecutor(executor).build());
 
         JobConfig.setJobReschedulePause(0, TimeUnit.MILLISECONDS);
         JobConfig.setSkipJobReschedule(true);
@@ -59,7 +56,11 @@ public JobManager getManager() {
         return mManager;
     }
 
-    public void setAllowExecution(boolean allowExecution) {
-        mAllowExecution = allowExecution;
+    public void runJob(String tag) {
+        WorkManagerTestInitHelper.getTestDriver().setInitialDelayMet(getWorkStatus(tag).get(0).getId());
+    }
+
+    public List<WorkStatus> getWorkStatus(String tag) {
+        return WorkManager.getInstance().synchronous().getStatusesByTagSync(tag);
     }
 }
diff --git a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
index d4fcc5d..7e3e1f3 100644
--- a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
@@ -21,7 +21,6 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import androidx.work.State;
-import androidx.work.WorkManager;
 import androidx.work.WorkStatus;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -65,13 +64,13 @@ public void testCancel() {
         assertThat(jobProxyWorkManager.isPlatformJobScheduled(request)).isTrue();
 
         String tag = JobProxyWorkManager.createTag(jobId);
-        List<WorkStatus> statuses = getWorkStatus(tag);
+        List<WorkStatus> statuses = mWorkManagerRule.getWorkStatus(tag);
 
         assertThat(statuses).isNotNull().hasSize(1);
         assertThat(statuses.get(0).getState()).isEqualTo(State.ENQUEUED);
 
         mWorkManagerRule.getManager().cancel(jobId);
-        assertThat(getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
+        assertThat(mWorkManagerRule.getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
         assertThat(jobProxyWorkManager.isPlatformJobScheduled(request)).isFalse();
     }
 
@@ -93,9 +92,9 @@ public void testTransientExtras() {
         mWorkManagerRule.getManager().cancel(jobId);
         assertThat(TransientBundleHolder.getBundle(jobId)).isNull();
 
-        mWorkManagerRule.setAllowExecution(true);
-
         jobId = builder.build().schedule();
+        mWorkManagerRule.runJob(JobProxyWorkManager.createTag(jobId));
+
         assertThat(TransientBundleHolder.getBundle(jobId)).isNull();
     }
 
@@ -123,15 +122,15 @@ public Job create(@NonNull String tag) {
             }
         });
 
-        mWorkManagerRule.setAllowExecution(true);
-
         int jobId = new JobRequest.Builder(TAG)
                 .setExecutionWindow(TimeUnit.HOURS.toMillis(4), TimeUnit.HOURS.toMillis(5))
                 .build()
                 .schedule();
 
         String tag = JobProxyWorkManager.createTag(jobId);
-        State state = getWorkStatus(tag).get(0).getState();
+        mWorkManagerRule.runJob(tag);
+
+        State state = mWorkManagerRule.getWorkStatus(tag).get(0).getState();
 
         assertThat(executed.get()).isTrue();
         assertThat(state).isEqualTo(State.SUCCEEDED);
@@ -149,16 +148,12 @@ private void testConstraints(JobRequest.Builder builder) {
                 .schedule();
 
         String tag = JobProxyWorkManager.createTag(jobId);
-        List<WorkStatus> statuses = getWorkStatus(tag);
+        List<WorkStatus> statuses = mWorkManagerRule.getWorkStatus(tag);
 
         assertThat(statuses).isNotNull().hasSize(1);
         assertThat(statuses.get(0).getState()).isEqualTo(State.ENQUEUED);
 
         mWorkManagerRule.getManager().cancelAllForTag(TAG);
-        assertThat(getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
-    }
-
-    private List<WorkStatus> getWorkStatus(String tag) {
-        return WorkManager.getInstance().synchronous().getStatusesByTagSync(tag);
+        assertThat(mWorkManagerRule.getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 1e7e15c..79e3997 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -459,7 +459,7 @@ public void removeJobCreator(JobCreator jobCreator) {
     /*package*/ JobStorage getJobStorage() {
         if (mJobStorage == null) {
             try {
-                mJobStorageLatch.await(10, TimeUnit.SECONDS);
+                mJobStorageLatch.await(20, TimeUnit.SECONDS);
             } catch (InterruptedException e) {
                 throw new RuntimeException(e);
             }
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index efb50be..c0622dc 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -78,7 +78,7 @@ protected void onHandleWork(@NonNull Intent intent) {
             JobManager manager;
             try {
                 manager = JobManager.create(this);
-            } catch (JobManagerCreateException e) {
+            } catch (Exception e) {
                 return;
             }
 
diff --git a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
index d36dac4..c320808 100644
--- a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
+++ b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
@@ -101,7 +101,15 @@ public void plantPeriodicFlexSupport(JobRequest request) {
 
     @Override
     public void cancel(int jobId) {
-        mGcmNetworkManager.cancelTask(createTag(jobId), PlatformGcmService.class);
+        try {
+            mGcmNetworkManager.cancelTask(createTag(jobId), PlatformGcmService.class);
+        } catch (IllegalArgumentException e) {
+            if (e.getMessage() != null && e.getMessage().startsWith("The GcmTaskService class you provided")) {
+                throw new JobProxyIllegalStateException(e);
+            } else {
+                throw e;
+            }
+        }
     }
 
     @Override
diff --git a/library/src/main/java/com/evernote/android/job/util/Device.java b/library/src/main/java/com/evernote/android/job/util/Device.java
index 678a883..f7ef01a 100644
--- a/library/src/main/java/com/evernote/android/job/util/Device.java
+++ b/library/src/main/java/com/evernote/android/job/util/Device.java
@@ -20,6 +20,7 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.net.ConnectivityManager;
+import android.net.NetworkCapabilities;
 import android.net.NetworkInfo;
 import android.os.BatteryManager;
 import android.os.Build;
@@ -89,6 +90,7 @@ public static boolean isIdle(Context context) {
      * @return The current network type of the device.
      */
     @NonNull
+    @SuppressWarnings("deprecation")
     public static JobRequest.NetworkType getNetworkType(@NonNull Context context) {
         ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
         NetworkInfo networkInfo;
@@ -107,13 +109,27 @@ public static boolean isIdle(Context context) {
             return JobRequest.NetworkType.UNMETERED;
         }
 
-        if (networkInfo.isRoaming()) {
+        if (isRoaming(connectivityManager, networkInfo)) {
             return JobRequest.NetworkType.CONNECTED;
         } else {
             return JobRequest.NetworkType.NOT_ROAMING;
         }
     }
 
+    @SuppressWarnings("deprecation")
+    private static boolean isRoaming(ConnectivityManager connectivityManager, NetworkInfo networkInfo) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {
+            return networkInfo.isRoaming();
+        }
+
+        try {
+            NetworkCapabilities capabilities = connectivityManager.getNetworkCapabilities(connectivityManager.getActiveNetwork());
+            return capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING);
+        } catch (Exception e) {
+            return networkInfo.isRoaming();
+        }
+    }
+
     public static boolean isStorageLow() {
         // figure this out
         return false;
diff --git a/library/src/main/java/com/evernote/android/job/v26/JobProxy26.java b/library/src/main/java/com/evernote/android/job/v26/JobProxy26.java
index 5723cab..6547bcc 100644
--- a/library/src/main/java/com/evernote/android/job/v26/JobProxy26.java
+++ b/library/src/main/java/com/evernote/android/job/v26/JobProxy26.java
@@ -62,11 +62,17 @@ protected boolean isJobInfoScheduled(@Nullable JobInfo info, @NonNull JobRequest
                 .setRequiresStorageNotLow(request.requiresStorageNotLow());
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     protected int convertNetworkType(@NonNull JobRequest.NetworkType networkType) {
         switch (networkType) {
             case METERED:
-                return JobInfo.NETWORK_TYPE_METERED;
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
+                    return JobInfo.NETWORK_TYPE_CELLULAR;
+                } else {
+                    return JobInfo.NETWORK_TYPE_METERED;
+                }
+
             default:
                 return super.convertNetworkType(networkType);
         }
diff --git a/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java b/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
index 4c1d767..41d09a8 100644
--- a/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
+++ b/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
@@ -1,5 +1,6 @@
 package com.evernote.android.job.work;
 
+import android.content.Context;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.RestrictTo;
@@ -11,6 +12,7 @@
 import com.evernote.android.job.util.JobCat;
 
 import androidx.work.Worker;
+import androidx.work.WorkerParameters;
 
 /**
  * @author rwondratschek
@@ -20,6 +22,10 @@
 
     private static final JobCat CAT = new JobCat("PlatformWorker");
 
+    public PlatformWorker(@NonNull Context context, @NonNull WorkerParameters workerParams) {
+        super(context, workerParams);
+    }
+
     @NonNull
     @Override
     public Result doWork() {
diff --git a/library/src/test/java/com/evernote/android/job/JobRequirementTest.java b/library/src/test/java/com/evernote/android/job/JobRequirementTest.java
index 1a81d46..835bdf5 100644
--- a/library/src/test/java/com/evernote/android/job/JobRequirementTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobRequirementTest.java
@@ -22,6 +22,7 @@
  * @author rwondratschek
  */
 @FixMethodOrder(MethodSorters.JVM)
+@SuppressWarnings("deprecation")
 public class JobRequirementTest {
 
     @Test
diff --git a/library/src/test/java/com/evernote/android/job/util/DeviceTest.java b/library/src/test/java/com/evernote/android/job/util/DeviceTest.java
index d74fc1b..92a053c 100644
--- a/library/src/test/java/com/evernote/android/job/util/DeviceTest.java
+++ b/library/src/test/java/com/evernote/android/job/util/DeviceTest.java
@@ -19,6 +19,7 @@
  * @author rwondratschek
  */
 @FixMethodOrder(MethodSorters. JVM)
+@SuppressWarnings("deprecation")
 public class DeviceTest {
 
     @Test
