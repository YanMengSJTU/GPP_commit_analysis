diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 25a0e75..117f4dd 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -328,7 +328,7 @@ public int getNumFailures() {
      * Only non-periodic jobs can be in a transient state. The transient state means, that
      * the job is running and is about to be removed. A job can get stuck in a transient state,
      * if the app terminates while the job is running. Then the job isn't scheduled anymore, but
-     * entry is still in the database. Since the job didn't finish successfully, reschedule
+     * the entry is still in the database. Since the job didn't finish successfully, reschedule
      * the job if necessary and treat it as it wouldn't have run, yet.
      *
      * @return Whether the job is in a transient state.
diff --git a/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java b/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java
index 21022c5..10fc2d3 100644
--- a/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java
+++ b/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java
@@ -8,6 +8,12 @@
 import org.junit.Rule;
 import org.robolectric.RuntimeEnvironment;
 
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+
 import static org.assertj.core.api.Java6Assertions.assertThat;
 import static org.mockito.Mockito.doReturn;
 
@@ -31,16 +37,33 @@ protected final JobManager manager() {
 
     @NonNull
     protected void executeJob(int jobId, @NonNull Job.Result expected) {
-        JobProxy.Common common = new JobProxy.Common(RuntimeEnvironment.application, new TestCat(), jobId);
+        try {
+            executeJobAsync(jobId, expected).get(3, TimeUnit.SECONDS);
+        } catch (Exception e) {
+            throw new AssertionError("Job timeout");
+        }
+    }
 
-        JobRequest pendingRequest = common.getPendingRequest(true);
+    protected Future<Job.Result> executeJobAsync(int jobId, @NonNull final Job.Result expected) {
+        final JobProxy.Common common = new JobProxy.Common(RuntimeEnvironment.application, TestCat.INSTANCE, jobId);
+
+        final JobRequest pendingRequest = common.getPendingRequest(true);
         assertThat(pendingRequest).isNotNull();
 
-        Job.Result result = common.executeJobRequest(pendingRequest);
-        assertThat(result).isEqualTo(expected);
+        ExecutorService executor = Executors.newSingleThreadExecutor();
+        Future<Job.Result> future = executor.submit(new Callable<Job.Result>() {
+            @Override
+            public Job.Result call() throws Exception {
+                Job.Result result = common.executeJobRequest(pendingRequest);
+                assertThat(result).isEqualTo(expected);
+                assertThat(common.getPendingRequest(true)).isNull();
+
+                return result;
+            }
+        });
 
-        pendingRequest = common.getPendingRequest(true);
-        assertThat(pendingRequest).isNull();
+        executor.shutdown();
+        return future;
     }
 
     @SuppressWarnings("ResultOfMethodCallIgnored")
diff --git a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index e0e8ea3..e2b4d29 100644
--- a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -1,21 +1,14 @@
 package com.evernote.android.job;
 
-import android.support.annotation.NonNull;
-
+import com.evernote.android.job.test.DummyJobs;
 import com.evernote.android.job.test.JobRobolectricTestRunner;
-import com.evernote.android.job.test.TestCat;
 
-import org.junit.After;
-import org.junit.Before;
 import org.junit.FixMethodOrder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.MethodSorters;
-import org.robolectric.RuntimeEnvironment;
 
-import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicReference;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
 
@@ -24,118 +17,70 @@
  */
 @RunWith(JobRobolectricTestRunner.class)
 @FixMethodOrder(MethodSorters.JVM)
-public class JobExecutionTest {
-
-    @Before
-    public void prepare() {
-        JobManager.create(RuntimeEnvironment.application).addJobCreator(new JobCreator() {
-            @Override
-            public Job create(String tag) {
-                return new TestJob();
-            }
-        });
-    }
-
-    @After
-    public void after() {
-        JobManager.instance().cancelAll();
-        JobManager.instance().destroy();
-    }
+public class JobExecutionTest extends BaseJobManagerTest {
 
     @Test
-    public void testSimpleJob() throws Throwable {
-        final int jobId = getBuilder()
-                .setExecutionWindow(200_000L, 400_000L)
+    public void testPeriodicJob() throws Exception {
+        int jobId = DummyJobs.createBuilder(DummyJobs.SuccessJob.class)
+                .setPeriodic(TimeUnit.MINUTES.toMillis(15))
                 .setPersisted(true)
                 .build()
                 .schedule();
 
-        JobProxy.Common common = getCommon(jobId);
-        JobRequest pendingRequest = common.getPendingRequest(true);
-        assertThat(pendingRequest).isNotNull();
-
-        final CountDownLatch latch = new CountDownLatch(1);
-        final AtomicReference<Throwable> crash = new AtomicReference<>();
-        final JobManager manager = JobManager.instance();
-        new Thread() {
-            @Override
-            public void run() {
-                try {
-                    Thread.sleep(200);
-                    assertThat(manager.getJobRequest(jobId)).isNull();
-
-                    JobRequest transientRequest = manager.getJobRequest(jobId, true);
-                    assertThat(transientRequest).isNotNull();
-                    assertThat(transientRequest.isTransient()).isTrue();
-                } catch (Throwable t) {
-                    crash.set(t);
-                }
-
-                latch.countDown();
-            }
-        }.start();
-
-        Job.Result result = common.executeJobRequest(pendingRequest);
-        assertThat(result).isEqualTo(Job.Result.FAILURE);
-
-        assertThat(manager.getAllJobRequestsForTag(TestJob.TAG)).isEmpty();
-
-        pendingRequest = common.getPendingRequest(true);
-        assertThat(pendingRequest).isNull();
-
-        latch.await(1, TimeUnit.SECONDS);
-        if (crash.get() != null) {
-            throw crash.get();
-        }
+        executeJob(jobId, Job.Result.SUCCESS);
+
+        // make sure job request is still around
+        assertThat(manager().getAllJobRequestsForTag(DummyJobs.SuccessJob.TAG)).hasSize(1);
     }
 
     @Test
-    public void testPeriodicJob() throws Exception {
-        int jobId = getBuilder()
-                .setPeriodic(TimeUnit.MINUTES.toMillis(15))
-                .setPersisted(true)
+    public void testSimpleJob() throws Throwable {
+        final int jobId = DummyJobs.createBuilder(DummyJobs.SuccessJob.class)
+                .setExecutionWindow(200_000L, 400_000L)
                 .build()
                 .schedule();
 
-        JobProxy.Common common = getCommon(jobId);
-        JobRequest pendingRequest = common.getPendingRequest(true);
-        assertThat(pendingRequest).isNotNull();
+        executeJob(jobId, Job.Result.SUCCESS);
 
-        Job.Result result = common.executeJobRequest(pendingRequest);
-        assertThat(result).isEqualTo(Job.Result.FAILURE);
+        assertThat(manager().getAllJobRequestsForTag(DummyJobs.SuccessJob.TAG)).isEmpty();
 
-        pendingRequest = common.getPendingRequest(true);
-        assertThat(pendingRequest).isNull();
+        assertThat(manager().getJobRequest(jobId)).isNull();
+        assertThat(manager().getJobRequest(jobId, true)).isNull();
+    }
 
-        assertThat(JobManager.instance().getAllJobRequestsForTag(TestJob.TAG)).hasSize(1);
+    @Test
+    public void testTransientState() throws Throwable {
+        int jobId = DummyJobs.createBuilder(DummyJobs.TwoSecondPauseJob.class)
+                .setExecutionWindow(300_000, 400_000)
+                .build()
+                .schedule();
 
-        Thread.sleep(3_000);
+        executeJobAsync(jobId, Job.Result.SUCCESS);
 
-        pendingRequest = common.getPendingRequest(true);
-        assertThat(pendingRequest).isNotNull();
-    }
+        // wait until the job is started
+        Thread.sleep(100);
 
-    private JobRequest.Builder getBuilder() {
-        return new JobRequest.Builder(TestJob.TAG);
+        // request should be in transient state, running but not removed from DB
+        JobRequest transientRequest = manager().getJobRequest(jobId, true);
+        assertThat(transientRequest).isNotNull();
+        assertThat(transientRequest.isTransient()).isTrue();
     }
 
-    private JobProxy.Common getCommon(int jobId) {
-        return new JobProxy.Common(RuntimeEnvironment.application, new TestCat(), jobId);
-    }
+    @Test
+    public void testPeriodicJobNotInTransientState() throws Throwable {
+        int jobId = DummyJobs.createBuilder(DummyJobs.TwoSecondPauseJob.class)
+                .setPeriodic(TimeUnit.MINUTES.toMillis(15))
+                .build()
+                .schedule();
 
-    private static final class TestJob extends Job {
+        executeJobAsync(jobId, Job.Result.SUCCESS);
 
-        private static final String TAG = "tag";
+        // wait until the job is started
+        Thread.sleep(100);
 
-        @NonNull
-        @Override
-        protected Result onRunJob(@NonNull Params params) {
-            try {
-                Thread.sleep(1_000L);
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-            return Result.FAILURE;
-        }
+        // request should be in transient state, running but not removed from DB
+        JobRequest transientRequest = manager().getJobRequest(jobId, true);
+        assertThat(transientRequest).isNotNull();
+        assertThat(transientRequest.isTransient()).isFalse();
     }
 }
diff --git a/library/src/test/java/com/evernote/android/job/JobManagerRule.java b/library/src/test/java/com/evernote/android/job/JobManagerRule.java
index 5384b5c..55b21fc 100644
--- a/library/src/test/java/com/evernote/android/job/JobManagerRule.java
+++ b/library/src/test/java/com/evernote/android/job/JobManagerRule.java
@@ -2,6 +2,9 @@
 
 import android.support.annotation.NonNull;
 
+import com.evernote.android.job.test.TestCat;
+import com.evernote.android.job.util.JobCat;
+
 import org.junit.rules.ExternalResource;
 import org.robolectric.RuntimeEnvironment;
 
@@ -19,6 +22,7 @@ public JobManagerRule(@NonNull JobCreator jobCreator) {
 
     @Override
     protected void before() throws Throwable {
+        JobCat.addLogPrinter(TestCat.INSTANCE);
         mManager = JobManager.create(RuntimeEnvironment.application);
         mManager.addJobCreator(mJobCreator);
     }
@@ -27,6 +31,7 @@ protected void before() throws Throwable {
     protected void after() {
         mManager.cancelAll();
         mManager.destroy();
+        JobCat.removeLogPrinter(TestCat.INSTANCE);
     }
 
     public JobManager getJobManager() {
diff --git a/library/src/test/java/com/evernote/android/job/JobManagerTest.java b/library/src/test/java/com/evernote/android/job/JobManagerTest.java
index 672aa08..de7d30d 100644
--- a/library/src/test/java/com/evernote/android/job/JobManagerTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobManagerTest.java
@@ -1,17 +1,12 @@
 package com.evernote.android.job;
 
-import android.support.annotation.NonNull;
-
+import com.evernote.android.job.test.DummyJobs;
 import com.evernote.android.job.test.JobRobolectricTestRunner;
-import com.evernote.android.job.util.JobApi;
 
-import org.junit.After;
-import org.junit.Before;
 import org.junit.FixMethodOrder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.MethodSorters;
-import org.robolectric.RuntimeEnvironment;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
 
@@ -20,100 +15,54 @@
  */
 @RunWith(JobRobolectricTestRunner.class)
 @FixMethodOrder(MethodSorters.JVM)
-public class JobManagerTest {
-
-    @Before
-    public void prepare() {
-        JobManager.create(RuntimeEnvironment.application).addJobCreator(new JobCreator() {
-            @Override
-            public Job create(String tag) {
-                return new TestJob();
-            }
-        });
-    }
-
-    @After
-    public void tearDown() {
-        getManager().cancelAll();
-        getManager().destroy();
-    }
+public class JobManagerTest extends BaseJobManagerTest {
 
     @Test
     public void testScheduleAndCancel() {
-        JobApi defaultApi = JobApi.getDefault(RuntimeEnvironment.application, getManager().getConfig().isGcmApiEnabled());
-        assertThat(getManager().getApi()).isEqualTo(defaultApi);
-
-        JobRequest request = getJobRequest();
-        int id = request.schedule();
+        JobRequest request = DummyJobs.createOneOff();
+        int jobId = request.schedule();
 
-        assertThat(getManager().getJobRequest(id)).isNotNull();
-        assertThat(getManager().getJob(id)).isNull();
+        assertThat(manager().getJobRequest(jobId)).isNotNull();
+        assertThat(manager().getJob(jobId)).isNull();
 
-        boolean canceled = getManager().cancel(id);
-        assertThat(canceled).isTrue();
+        assertThat(manager().cancel(jobId)).isTrue();
 
-        assertThat(getManager().getAllJobRequests()).isEmpty();
-        assertThat(getManager().getAllJobs()).isEmpty();
+        assertThat(manager().getAllJobRequests()).isEmpty();
+        assertThat(manager().getAllJobs()).isEmpty();
 
         request.schedule();
         request.schedule();
         request.schedule();
 
-        assertThat(getManager().getAllJobRequests().size()).isEqualTo(1);
+        assertThat(manager().getAllJobRequests()).hasSize(1);
+        assertThat(manager().cancelAll()).isEqualTo(1);
 
-        int cancelCount = getManager().cancelAll();
-        assertThat(cancelCount).isEqualTo(1);
-
-        assertThat(getManager().getAllJobRequests()).isEmpty();
-        assertThat(getManager().getAllJobs()).isEmpty();
+        assertThat(manager().getAllJobRequests()).isEmpty();
+        assertThat(manager().getAllJobs()).isEmpty();
     }
 
     @Test
     public void testSameIdAfterCancel() {
-        JobRequest request = getJobRequest();
+        JobRequest request = DummyJobs.createOneOff();
         int jobId = request.getJobId();
 
-        getManager().schedule(request);
+        manager().schedule(request);
 
-        int newId = getManager().getJobRequest(jobId).cancelAndEdit().build().schedule();
-        assertThat(jobId).isEqualTo(newId);
+        int newId = request.cancelAndEdit().build().schedule();
+        assertThat(newId).isEqualTo(jobId);
     }
 
     @Test
     public void testCancelTag() {
-        JobRequest request = getJobRequest();
-
-        request.schedule();
-
-        assertThat(getManager().getAllJobRequestsForTag(TestJob.TAG)).isNotNull().hasSize(1);
-        assertThat(getManager().getAllJobRequestsForTag("other")).isNotNull().isEmpty();
-
-        assertThat(getManager().cancelAllForTag(TestJob.TAG)).isEqualTo(1);
-        assertThat(getManager().cancelAllForTag(TestJob.TAG)).isZero();
-    }
-
-    private JobRequest getJobRequest() {
-        return getBuilder()
-                .setExecutionWindow(300_000L, 300_000L)
+        JobRequest request = DummyJobs.createBuilder(DummyJobs.SuccessJob.class)
+                .setExecutionWindow(300_000, 400_000)
                 .build();
-    }
-
-    private JobRequest.Builder getBuilder() {
-        return new JobRequest.Builder(TestJob.TAG);
-    }
-
-    private JobManager getManager() {
-        return JobManager.instance();
-    }
-
-    private static final class TestJob extends Job {
+        request.schedule();
 
-        private static final String TAG = "tag";
+        assertThat(manager().getAllJobRequestsForTag(DummyJobs.SuccessJob.TAG)).hasSize(1);
+        assertThat(manager().getAllJobRequestsForTag("other")).isNotNull().isEmpty();
 
-        @NonNull
-        @Override
-        protected Result onRunJob(@NonNull Params params) {
-            return Result.FAILURE;
-        }
+        assertThat(manager().cancelAllForTag(DummyJobs.SuccessJob.TAG)).isEqualTo(1);
+        assertThat(manager().cancelAllForTag(DummyJobs.SuccessJob.TAG)).isZero();
     }
 }
diff --git a/library/src/test/java/com/evernote/android/job/JobRequestTest.java b/library/src/test/java/com/evernote/android/job/JobRequestTest.java
index 81d3602..b48c1da 100644
--- a/library/src/test/java/com/evernote/android/job/JobRequestTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobRequestTest.java
@@ -1,18 +1,14 @@
 package com.evernote.android.job;
 
-import android.support.annotation.NonNull;
-
+import com.evernote.android.job.test.DummyJobs;
 import com.evernote.android.job.test.JobRobolectricTestRunner;
 import com.evernote.android.job.util.JobApi;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
-import org.junit.After;
-import org.junit.Before;
 import org.junit.FixMethodOrder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.MethodSorters;
-import org.robolectric.RuntimeEnvironment;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
 
@@ -21,23 +17,7 @@
  */
 @RunWith(JobRobolectricTestRunner.class)
 @FixMethodOrder(MethodSorters.JVM)
-public class JobRequestTest {
-
-    @Before
-    public void prepare() {
-        JobManager.create(RuntimeEnvironment.application).addJobCreator(new JobCreator() {
-            @Override
-            public Job create(String tag) {
-                return new TestJob();
-            }
-        });
-    }
-
-    @After
-    public void after() {
-        JobManager.instance().cancelAll();
-        JobManager.instance().destroy();
-    }
+public class JobRequestTest extends BaseJobManagerTest {
 
     @Test
     public void testSimpleJob() {
@@ -49,7 +29,7 @@ public void testSimpleJob() {
                 .build();
 
         assertThat(request.getJobId()).isGreaterThan(0);
-        assertThat(request.getTag()).isEqualTo(TestJob.TAG);
+        assertThat(request.getTag()).isEqualTo(DummyJobs.SuccessJob.TAG);
         assertThat(request.getStartMs()).isEqualTo(2_000L);
         assertThat(request.getEndMs()).isEqualTo(3_000L);
         assertThat(request.getBackoffMs()).isEqualTo(4_000L);
@@ -76,7 +56,7 @@ public void testPeriodic() {
                 .build();
 
         assertThat(request.getJobId()).isGreaterThan(0);
-        assertThat(request.getTag()).isEqualTo(TestJob.TAG);
+        assertThat(request.getTag()).isEqualTo(DummyJobs.SuccessJob.TAG);
         assertThat(request.isPersisted()).isTrue();
         assertThat(request.getIntervalMs()).isEqualTo(interval);
         assertThat(request.getFlexMs()).isEqualTo(interval);
@@ -108,7 +88,7 @@ public void testFlex() {
         JobManager.instance().schedule(request);
 
         assertThat(request.getJobId()).isGreaterThan(0);
-        assertThat(request.getTag()).isEqualTo(TestJob.TAG);
+        assertThat(request.getTag()).isEqualTo(DummyJobs.SuccessJob.TAG);
         assertThat(request.getIntervalMs()).isEqualTo(interval);
         assertThat(request.getFlexMs()).isEqualTo(flex);
         assertThat(request.isPeriodic()).isTrue();
@@ -125,7 +105,7 @@ public void testExact() {
                 .build();
 
         assertThat(request.getJobId()).isGreaterThan(0);
-        assertThat(request.getTag()).isEqualTo(TestJob.TAG);
+        assertThat(request.getTag()).isEqualTo(DummyJobs.SuccessJob.TAG);
         assertThat(request.getStartMs()).isEqualTo(2_000L);
         assertThat(request.getEndMs()).isEqualTo(2_000L);
         assertThat(request.getBackoffMs()).isEqualTo(4_000L);
@@ -233,17 +213,6 @@ public void testExactNoRequirementsEnforced() {
     }
 
     private JobRequest.Builder getBuilder() {
-        return new JobRequest.Builder(TestJob.TAG);
-    }
-
-    private static final class TestJob extends Job {
-
-        private static final String TAG = "tag";
-
-        @NonNull
-        @Override
-        protected Result onRunJob(@NonNull Params params) {
-            return Result.FAILURE;
-        }
+        return DummyJobs.createBuilder(DummyJobs.SuccessJob.class);
     }
 }
diff --git a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
index 4d335f0..5d902a6 100644
--- a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
+++ b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
@@ -61,6 +61,20 @@ protected Result onRunJob(Params params) {
         }
     }
 
+    public static final class TwoSecondPauseJob extends Job {
+        public static final String TAG = "TwoSecondPauseJob";
+
+        @NonNull
+        @Override
+        protected Result onRunJob(Params params) {
+            try {
+                Thread.sleep(2_000);
+            } catch (InterruptedException ignored) {
+            }
+            return Result.SUCCESS;
+        }
+    }
+
     public static final JobCreator TEST_JOB_CREATOR = new JobCreator() {
         @Override
         public Job create(String tag) {
@@ -71,6 +85,8 @@ public Job create(String tag) {
                     return new RescheduleJob();
                 case FailureJob.TAG:
                     return new FailureJob();
+                case TwoSecondPauseJob.TAG:
+                    return new TwoSecondPauseJob();
                 default:
                     return null;
             }
@@ -100,4 +116,10 @@ public Job create(String tag) {
             throw new IllegalStateException(e);
         }
     }
+
+    public static JobRequest createOneOff() {
+        return createBuilder(SuccessJob.class)
+                .setExecutionWindow(300_000, 400_000)
+                .build();
+    }
 }
diff --git a/library/src/test/java/com/evernote/android/job/test/TestCat.java b/library/src/test/java/com/evernote/android/job/test/TestCat.java
index 5d5a1e3..2985959 100644
--- a/library/src/test/java/com/evernote/android/job/test/TestCat.java
+++ b/library/src/test/java/com/evernote/android/job/test/TestCat.java
@@ -1,17 +1,32 @@
 package com.evernote.android.job.test;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import net.vrallev.android.cat.instance.CatLazy;
+import net.vrallev.android.cat.print.CatPrinter;
 
 /**
  * @author rwondratschek
  */
-public class TestCat extends CatLazy {
+public final class TestCat extends CatLazy implements CatPrinter {
+
+    public static final TestCat INSTANCE = new TestCat();
+
+    private TestCat() {
+        // no op
+    }
 
     @Override
     protected void println(int priority, String message, Throwable t) {
-        //System.out.println(message);
-        //if (t != null) {
-        //    t.printStackTrace();
-        //}
+        println(priority, "Unit-Test", message, t);
+    }
+
+    @Override
+    public void println(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
+        // System.out.println(message);
+        // if (t != null) {
+        //     t.printStackTrace();
+        // }
     }
 }
