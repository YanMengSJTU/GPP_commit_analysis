diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5f0ecbc..5c1f72b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,7 @@
+## 1.1.9
+
+* Improve logging by providing an option to add a custom logger
+
 ## 1.1.8 (2017-03-23)
 
 * Catch wake lock crashes in all cases, fixes #153
diff --git a/FAQ.md b/FAQ.md
index e574260..28bf501 100644
--- a/FAQ.md
+++ b/FAQ.md
@@ -256,4 +256,33 @@ public class SeparateProcessService extends IntentService {
         }
     }
 }
+```
+
+### How can I add a custom logger?
+
+By default the library prints all log statement in Logcat. But often you wish to store those somewhere else, e.g. in file. The `JobCat` class gives you an option register a custom logger. It's recommended to add the logger before creating the `JobManager` instance.
+
+```java
+private class TestPrinter implements CatPrinter {
+
+    @Override
+    public void println(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
+        switch (priority) {
+            case Log.ERROR:
+                // do something
+                break;
+        }
+    }
+}
+
+public class App extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        JobCat.addLogPrinter(new TestPrinter());
+        JobManager.create(this).addJobCreator(new DemoJobCreator());
+    }
+}
 ```
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 4cd80bd..1d393d6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -22,8 +22,11 @@ ext {
     buildToolsVersion = '25.0.2'
 
     supportLibVersion = '25.0.0'
-    playServicesVersion = '9.8.0'
-    stethoVersion = '1.4.1'
+    playServicesVersion = '10.2.1'
+    stethoVersion = '1.4.2'
+    junitVersion = '4.12'
+    assertjVersion = '3.6.2'
+    mockitoVersion = '2.6.2'
 }
 
 task wrapper(type: Wrapper) {
diff --git a/gradle.properties b/gradle.properties
index 3b829cf..be965e4 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,3 @@
-#VERSION_NAME=1.1.8
-VERSION_NAME=1.1.8-SNAPSHOT
+#VERSION_NAME=1.1.9
+VERSION_NAME=1.1.9-SNAPSHOT
 VERSION_CODE=1
\ No newline at end of file
diff --git a/library/build.gradle b/library/build.gradle
index fa49bfd..f2aeba1 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -3,11 +3,11 @@ apply plugin: 'com.github.ben-manes.versions'
 apply from: '../build-config/gradle-quality.gradle'
 
 dependencies {
-    provided "com.google.android.gms:play-services-gcm:$rootProject.ext.playServicesVersion"
+    provided "com.google.android.gms:play-services-gcm:$playServicesVersion"
     //compile "com.google.android.gms:play-services-gcm:$rootProject.ext.playServicesVersion"
 
     //noinspection GradleDependency
-    compile "com.android.support:support-annotations:$rootProject.ext.supportLibVersion"
+    compile "com.android.support:support-annotations:$supportLibVersion"
     compile 'net.vrallev.android:cat:1.0.5'
 
     androidTestCompile 'com.android.support.test:runner:0.5'
@@ -15,7 +15,11 @@ dependencies {
     androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
     androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
 
-    androidTestCompile "com.facebook.stetho:stetho:$rootProject.ext.stethoVersion"
+    androidTestCompile "com.facebook.stetho:stetho:$stethoVersion"
+
+    testCompile "junit:junit:$junitVersion"
+    testCompile "org.mockito:mockito-core:$mockitoVersion"
+    testCompile "org.assertj:assertj-core:$assertjVersion"
 }
 
 android {
@@ -44,6 +48,15 @@ android {
     lintOptions {
         abortOnError true
     }
+
+    testOptions {
+        unitTests.returnDefaultValues = true
+        unitTests.all {
+            testLogging {
+                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
+            }
+        }
+    }
 }
 
 apply from: '../build-config/gradle-push.gradle'
\ No newline at end of file
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 4a52329..924851b 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -44,8 +44,6 @@
 import com.evernote.android.job.util.JobUtil;
 import com.google.android.gms.gcm.GcmNetworkManager;
 
-import net.vrallev.android.cat.Cat;
-import net.vrallev.android.cat.CatGlobal;
 import net.vrallev.android.cat.CatLog;
 
 import java.util.List;
@@ -79,10 +77,9 @@
  *
  * @author rwondratschek
  */
-@SuppressWarnings("unused")
+@SuppressWarnings({"unused", "WeakerAccess"})
 public final class JobManager {
 
-    private static final Package PACKAGE = JobManager.class.getPackage();
     private static final CatLog CAT = new JobCat("JobManager");
 
     @SuppressLint("StaticFieldLeak")
@@ -101,11 +98,6 @@ public static JobManager create(@NonNull Context context) {
                 if (instance == null) {
                     JobPreconditions.checkNotNull(context, "Context cannot be null");
 
-                    if (PACKAGE != null) {
-                        // package can be null when class is repackaged, then ignore this
-                        CatGlobal.setDefaultCatLogPackage(PACKAGE.getName(), new JobCat());
-                    }
-
                     if (context.getApplicationContext() != null) {
                         // could be null in unit tests
                         context = context.getApplicationContext();
@@ -114,10 +106,10 @@ public static JobManager create(@NonNull Context context) {
                     instance = new JobManager(context);
 
                     if (!JobUtil.hasWakeLockPermission(context)) {
-                        Cat.w("No wake lock permission");
+                        CAT.w("No wake lock permission");
                     }
                     if (!JobUtil.hasBootPermission(context)) {
-                        Cat.w("No boot permission");
+                        CAT.w("No boot permission");
                     }
 
                     sendAddJobCreatorIntent(context);
@@ -198,7 +190,7 @@ public Config getConfig() {
         return mConfig;
     }
 
-    protected void setJobProxy(JobApi api) {
+    private void setJobProxy(JobApi api) {
         mApi = api;
     }
 
@@ -407,6 +399,7 @@ private int cancelAllInner(@Nullable String tag) {
             }
         }
 
+        //noinspection ConstantConditions
         Set<Job> jobs = TextUtils.isEmpty(tag) ? getAllJobs() : getAllJobsForTag(tag);
         for (Job job : jobs) {
             if (cancelInner(job)) {
@@ -476,14 +469,13 @@ private JobProxy getJobProxy(JobApi api) {
         return api.getCachedProxy(mContext);
     }
 
+    // TODO: extract this class so that settings can be changed before the JobManager has been created
     public final class Config {
 
-        private boolean mVerbose;
         private boolean mGcmEnabled;
         private boolean mAllowSmallerIntervals;
 
         private Config() {
-            mVerbose = true;
             mGcmEnabled = true;
             mAllowSmallerIntervals = false;
         }
@@ -492,7 +484,7 @@ private Config() {
          * @return Whether logging is enabled for this library. The default value is {@code true}.
          */
         public boolean isVerbose() {
-            return mVerbose;
+            return JobCat.isVerbose();
         }
 
         /**
@@ -501,10 +493,7 @@ public boolean isVerbose() {
          * @param verbose Whether or not to print all log messages. The default value is {@code true}.
          */
         public void setVerbose(boolean verbose) {
-            if (mVerbose != verbose && PACKAGE != null) {
-                mVerbose = verbose;
-                CatGlobal.setPackageEnabled(PACKAGE.getName(), verbose);
-            }
+            JobCat.setVerbose(verbose);
         }
 
         /**
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 2a2eacf..913e914 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -33,7 +33,6 @@
 import android.support.annotation.NonNull;
 
 import com.evernote.android.job.util.JobApi;
-import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
 import net.vrallev.android.cat.CatLog;
@@ -132,14 +131,14 @@ public static int getRescheduleCount(JobRequest request) {
 
         private final JobManager mJobManager;
 
-        public Common(@NonNull Service service, int jobId) {
-            this(service, service.getClass().getSimpleName(), jobId);
+        public Common(@NonNull Service service, CatLog cat, int jobId) {
+            this((Context) service, cat, jobId);
         }
 
-        /*package*/ Common(@NonNull Context context, String loggingTag, int jobId) {
+        /*package*/ Common(@NonNull Context context, CatLog cat, int jobId) {
             mContext = context;
             mJobId = jobId;
-            mCat = new JobCat(loggingTag);
+            mCat = cat;
 
             mJobManager = JobManager.create(context);
         }
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 9f2ddbd..af67f28 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -38,7 +38,6 @@
 import com.evernote.android.job.util.JobUtil;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
-import net.vrallev.android.cat.Cat;
 import net.vrallev.android.cat.CatLog;
 
 import java.util.concurrent.TimeUnit;
@@ -615,11 +614,11 @@ public Builder setExecutionWindow(long startMs, long endMs) {
             mEndMs = JobPreconditions.checkArgumentInRange(endMs, startMs, Long.MAX_VALUE, "endMs");
 
             if (mStartMs > WINDOW_THRESHOLD_MAX) {
-                Cat.i("startMs reduced from %d days to %d days", TimeUnit.MILLISECONDS.toDays(mStartMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
+                CAT.i("startMs reduced from %d days to %d days", TimeUnit.MILLISECONDS.toDays(mStartMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
                 mStartMs = WINDOW_THRESHOLD_MAX;
             }
             if (mEndMs > WINDOW_THRESHOLD_MAX) {
-                Cat.i("endMs reduced from %d days to %d days", TimeUnit.MILLISECONDS.toDays(mEndMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
+                CAT.i("endMs reduced from %d days to %d days", TimeUnit.MILLISECONDS.toDays(mEndMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
                 mEndMs = WINDOW_THRESHOLD_MAX;
             }
 
@@ -771,7 +770,7 @@ public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle) {
         public Builder setExact(long exactMs) {
             mExact = true;
             if (exactMs > WINDOW_THRESHOLD_MAX) {
-                Cat.i("exactMs clamped from %d days to %d days", TimeUnit.MILLISECONDS.toDays(exactMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
+                CAT.i("exactMs clamped from %d days to %d days", TimeUnit.MILLISECONDS.toDays(exactMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
                 exactMs = WINDOW_THRESHOLD_MAX;
             }
 
@@ -912,7 +911,7 @@ public JobRequest build() {
             }
 
             if (mIntervalMs <= 0 && (mStartMs > WINDOW_THRESHOLD_WARNING || mEndMs > WINDOW_THRESHOLD_WARNING)) {
-                Cat.w("Attention: your execution window is too large. This could result in undesired behavior, see https://github.com/evernote/android-job/blob/master/FAQ.md");
+                CAT.w("Attention: your execution window is too large. This could result in undesired behavior, see https://github.com/evernote/android-job/blob/master/FAQ.md");
             }
 
             return new JobRequest(this);
diff --git a/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java b/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java
index c14e3df..c39353c 100644
--- a/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java
+++ b/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java
@@ -29,19 +29,24 @@
 import com.evernote.android.job.JobManager;
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
+import com.evernote.android.job.util.JobCat;
 import com.google.android.gms.gcm.GcmNetworkManager;
 import com.google.android.gms.gcm.GcmTaskService;
 import com.google.android.gms.gcm.TaskParams;
 
+import net.vrallev.android.cat.CatLog;
+
 /**
  * @author rwondratschek
  */
 public class PlatformGcmService extends GcmTaskService {
 
+    private static final CatLog CAT = new JobCat("JobRequest");
+
     @Override
     public int onRunTask(TaskParams taskParams) {
         int jobId = Integer.parseInt(taskParams.getTag());
-        JobProxy.Common common = new JobProxy.Common(this, jobId);
+        JobProxy.Common common = new JobProxy.Common(this, CAT, jobId);
 
         JobRequest request = common.getPendingRequest(true);
         if (request == null) {
diff --git a/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java b/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java
index 1d9f1c1..962b97c 100644
--- a/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java
+++ b/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java
@@ -11,7 +11,7 @@
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GoogleApiAvailability;
 
-import net.vrallev.android.cat.Cat;
+import net.vrallev.android.cat.CatLog;
 
 import java.util.List;
 
@@ -20,6 +20,8 @@
  */
 /*package*/ final class GcmAvailableHelper {
 
+    private static final CatLog CAT = new JobCat("GcmAvailableHelper");
+
     private static final String ACTION_TASK_READY = "com.google.android.gms.gcm.ACTION_TASK_READY";
     private static final String GCM_PERMISSION = "com.google.android.gms.permission.BIND_NETWORK_TASK_SERVICE";
 
@@ -52,7 +54,7 @@ public static boolean isGcmApiSupported(Context context) {
         } catch (Throwable t) {
             // seeing sometimes a DeadObjectException, return false, we can't do anything in this case
             // still sometimes seeing a NoClassDefFoundError here
-            Cat.w(t);
+            CAT.w(t);
             return false;
         }
     }
@@ -109,7 +111,7 @@ private static void setServiceEnabled(Context context, boolean enabled) {
                 case PackageManager.COMPONENT_ENABLED_STATE_ENABLED:
                     if (!enabled) {
                         packageManager.setComponentEnabledSetting(component, PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP);
-                        Cat.i("GCM service disabled");
+                        CAT.i("GCM service disabled");
                     }
                     break;
 
@@ -117,14 +119,14 @@ private static void setServiceEnabled(Context context, boolean enabled) {
                 case PackageManager.COMPONENT_ENABLED_STATE_DISABLED:
                     if (enabled) {
                         packageManager.setComponentEnabledSetting(component, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);
-                        Cat.i("GCM service enabled");
+                        CAT.i("GCM service enabled");
                     }
                     break;
             }
 
         } catch (Throwable t) {
             // just in case, don't let the app crash with each restart
-            Cat.e(t);
+            CAT.e(t);
         }
     }
 
diff --git a/library/src/main/java/com/evernote/android/job/util/JobCat.java b/library/src/main/java/com/evernote/android/job/util/JobCat.java
index e70aa33..29b634d 100644
--- a/library/src/main/java/com/evernote/android/job/util/JobCat.java
+++ b/library/src/main/java/com/evernote/android/job/util/JobCat.java
@@ -25,8 +25,13 @@
  */
 package com.evernote.android.job.util;
 
+import android.support.annotation.NonNull;
+
 import net.vrallev.android.cat.CatLog;
 import net.vrallev.android.cat.instance.CatLazy;
+import net.vrallev.android.cat.print.CatPrinter;
+
+import java.util.Arrays;
 
 /**
  * The default {@link CatLog} class for this library.
@@ -35,6 +40,67 @@
  */
 public class JobCat extends CatLazy {
 
+    private static volatile CatPrinter[] printers = new CatPrinter[0]; // use array to avoid synchronization while printing log statements
+    private static volatile boolean verbose = true;
+
+    /**
+     * Add a global logger for the job library, which will be notified about each log statement.
+     *
+     * @param printer Your desired logger.
+     * @return {@code true} if the printer was added. Returns {@code false} if the printer was
+     * already added.
+     */
+    public static synchronized boolean addLogPrinter(@NonNull CatPrinter printer) {
+        for (CatPrinter printer1 : printers) {
+            if (printer.equals(printer1)) {
+                return false;
+            }
+        }
+
+        for (int i = 0; i < printers.length; i++) {
+            if (printers[i] == null) {
+                printers[i] = printer;
+                return true;
+            }
+        }
+
+        int index = printers.length;
+        printers = Arrays.copyOf(printers, printers.length + 2);
+        printers[index] = printer;
+        return true;
+    }
+
+    /**
+     * Remove a global logger.
+     *
+     * @param printer Your desired logger.
+     * @see #addLogPrinter(CatPrinter)
+     */
+    public static synchronized void removeLogPrinter(@NonNull CatPrinter printer) {
+        for (int i = 0; i < printers.length; i++) {
+            if (printer.equals(printers[i])) {
+                printers[i] = null;
+                // continue, maybe for some reason the printer is twice in the array
+            }
+        }
+    }
+
+    /**
+     * Global switch to enable or disable logging.
+     *
+     * @param verbose Whether or not to print all log messages. The default value is {@code true}.
+     */
+    public static void setVerbose(boolean verbose) {
+        JobCat.verbose = verbose;
+    }
+
+    /**
+     * @return Whether logging is enabled for this library. The default value is {@code true}.
+     */
+    public static boolean isVerbose() {
+        return verbose;
+    }
+
     private final String mTag;
 
     public JobCat() {
@@ -56,6 +122,19 @@ public String getTag() {
 
     @Override
     protected void println(int priority, String message, Throwable t) {
+        if (!verbose) {
+            return;
+        }
+
         super.println(priority, message, t);
+
+        String tag = getTag();
+
+        CatPrinter[] printers = JobCat.printers;
+        for (CatPrinter printer : printers) {
+            if (printer != null) {
+                printer.println(priority, tag, message, t);
+            }
+        }
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
index 80fcb41..fe13fea 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
@@ -33,8 +33,9 @@
 
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
+import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.Cat;
+import net.vrallev.android.cat.CatLog;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -46,6 +47,8 @@
  */
 public final class PlatformAlarmService extends Service {
 
+    private static final CatLog CAT = new JobCat("PlatformAlarmService");
+
     /*package*/ static Intent createIntent(Context context, int jobId) {
         Intent intent = new Intent(context, PlatformAlarmService.class);
         intent.putExtra(PlatformAlarmReceiver.EXTRA_JOB_ID, jobId);
@@ -105,12 +108,12 @@ public final IBinder onBind(Intent intent) {
 
     private void runJob(Intent intent) {
         if (intent == null) {
-            Cat.i("Delivered intent is null");
+            CAT.i("Delivered intent is null");
             return;
         }
 
         int jobId = intent.getIntExtra(PlatformAlarmReceiver.EXTRA_JOB_ID, -1);
-        final JobProxy.Common common = new JobProxy.Common(this, jobId);
+        final JobProxy.Common common = new JobProxy.Common(this, CAT, jobId);
 
         // create the JobManager. Seeing sometimes exceptions, that it wasn't created, yet.
         final JobRequest request = common.getPendingRequest(true);
diff --git a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
index 4792de4..9f39fcf 100644
--- a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
+++ b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
@@ -57,7 +57,7 @@
     @Override
     public boolean onStartJob(final JobParameters params) {
         final int jobId = params.getJobId();
-        final JobProxy.Common common = new JobProxy.Common(this, jobId);
+        final JobProxy.Common common = new JobProxy.Common(this, CAT, jobId);
 
         final JobRequest request = common.getPendingRequest(true);
         if (request == null) {
diff --git a/library/src/test/java/com/evernote/android/job/util/TestLogger.java b/library/src/test/java/com/evernote/android/job/util/TestLogger.java
new file mode 100644
index 0000000..f8ffdf5
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/util/TestLogger.java
@@ -0,0 +1,143 @@
+package com.evernote.android.job.util;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import net.vrallev.android.cat.print.CatPrinter;
+
+import org.junit.After;
+import org.junit.FixMethodOrder;
+import org.junit.Test;
+import org.junit.runners.MethodSorters;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.assertj.core.api.Java6Assertions.assertThat;
+
+/**
+ * @author rwondratschek
+ */
+@FixMethodOrder(MethodSorters.JVM)
+public class TestLogger {
+
+    private boolean mResetValueCalled;
+
+    @After
+    public void resetValue() {
+        JobCat.setVerbose(true);
+        mResetValueCalled = true;
+    }
+
+    @Test
+    public void testIsVerbose() {
+        // first test in class, so resetValue() hasn't been called, yet
+        assertThat(mResetValueCalled).isFalse();
+        assertThat(JobCat.isVerbose()).isTrue();
+
+        JobCat.setVerbose(false);
+        assertThat(JobCat.isVerbose()).isFalse();
+    }
+
+    @Test
+    public void testAddIsIdempotent() {
+        TestPrinter printer = new TestPrinter();
+        assertThat(JobCat.addLogPrinter(printer)).isTrue();
+        assertThat(JobCat.addLogPrinter(printer)).isFalse();
+    }
+
+    @Test
+    public void testRemove() {
+        TestPrinter printer = new TestPrinter();
+        assertThat(JobCat.addLogPrinter(printer)).isTrue();
+        JobCat.removeLogPrinter(printer);
+        assertThat(JobCat.addLogPrinter(printer)).isTrue();
+    }
+
+    @Test
+    public void testSingleCustomLoggerAddBefore() {
+        TestPrinter printer = new TestPrinter();
+        assertThat(JobCat.addLogPrinter(printer)).isTrue();
+
+        JobCat cat = new JobCat("Tag");
+        cat.d("hello");
+        cat.w("world");
+
+        assertThat(printer.mMessages).contains("hello", "world");
+    }
+
+    @Test
+    public void testSingleCustomLoggerAddAfter() {
+        JobCat cat = new JobCat("Tag");
+
+        TestPrinter printer = new TestPrinter();
+        assertThat(JobCat.addLogPrinter(printer)).isTrue();
+
+        cat.d("hello");
+        cat.w("world");
+
+        assertThat(printer.mMessages).containsExactly("hello", "world");
+    }
+
+    @Test
+    public void test100Loggers() {
+        JobCat cat1 = new JobCat("Tag1");
+
+        List<TestPrinter> printers = new ArrayList<>();
+        for (int i = 0; i < 100; i++) {
+            TestPrinter printer = new TestPrinter();
+            assertThat(JobCat.addLogPrinter(printer)).isTrue();
+            printers.add(printer);
+        }
+
+        JobCat cat2 = new JobCat("Tag2");
+
+        cat1.d("hello");
+        cat2.w("world");
+
+        for (TestPrinter printer : printers) {
+            assertThat(printer.mTags).containsExactly("Tag1", "Tag2");
+            assertThat(printer.mMessages).containsExactly("hello", "world");
+        }
+
+        TestPrinter removedPrinter = printers.remove(50);
+        JobCat.removeLogPrinter(removedPrinter);
+
+        cat1.d("third");
+        for (TestPrinter printer : printers) {
+            assertThat(printer.mTags).containsExactly("Tag1", "Tag2", "Tag1");
+            assertThat(printer.mMessages).containsExactly("hello", "world", "third");
+        }
+        assertThat(removedPrinter.mTags).containsExactly("Tag1", "Tag2");
+        assertThat(removedPrinter.mMessages).containsExactly("hello", "world");
+    }
+
+    @Test
+    public void testNotVerboseLogging() {
+        JobCat cat = new JobCat("Tag");
+
+        TestPrinter printer = new TestPrinter();
+        assertThat(JobCat.addLogPrinter(printer)).isTrue();
+
+        cat.d("hello");
+
+        assertThat(printer.mMessages).containsExactly("hello");
+
+        JobCat.setVerbose(false);
+
+        cat.d("world");
+        assertThat(printer.mMessages).containsExactly("hello");
+    }
+
+    private static final class TestPrinter implements CatPrinter {
+
+        private final List<String> mTags = new ArrayList<>();
+        private final List<String> mMessages = new ArrayList<>();
+
+        @Override
+        public void println(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
+            mTags.add(tag);
+            mMessages.add(message);
+        }
+    }
+}
