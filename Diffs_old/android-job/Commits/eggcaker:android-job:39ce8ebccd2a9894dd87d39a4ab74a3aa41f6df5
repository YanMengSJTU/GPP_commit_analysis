diff --git a/.github/ISSUE_TEMPLATE.md b/.github/ISSUE_TEMPLATE.md
index 504de38..a62a287 100644
--- a/.github/ISSUE_TEMPLATE.md
+++ b/.github/ISSUE_TEMPLATE.md
@@ -2,7 +2,7 @@ Before posting an issue, please check the following:
 
 * Do you have a question? Please take a look at the samples and read the FAQ first.
 ** https://github.com/evernote/android-job#usage
-** https://github.com/evernote/android-job/blob/master/FAQ.md
+** https://github.com/evernote/android-job/wiki/FAQ
 
 * Does the library crash for you? Please provide the version of the library, a log, stacktrace and even better a sample.
 
diff --git a/FAQ.md b/FAQ.md
deleted file mode 100644
index 9635904..0000000
--- a/FAQ.md
+++ /dev/null
@@ -1,255 +0,0 @@
-### Can I run a job immediately?
-
-Yes, simply use the `startNow()` method. Your job will work like an exact job.
-
-```java
-private void runJobImmediately() {
-    new JobRequest.Builder(DemoSyncJob.TAG)
-            .startNow()
-            .build()
-            .schedule();
-}
-```
-
-### How can I run a job at a specific time once a day?
-
-See this sample, which schedules a job between 1 AM and 6 AM each day. Note that this sample isn't using a periodic job, because the periodic jobs don't support a flex parameter (yet).
-
-```java
-public class JobSample extends Job {
-
-    public static final String TAG = "JobSample";
-
-    public static void schedule() {
-        schedule(true);
-    }
-
-    private static void schedule(boolean updateCurrent) {
-        Calendar calendar = Calendar.getInstance();
-        int hour = calendar.get(Calendar.HOUR_OF_DAY);
-        int minute = calendar.get(Calendar.MINUTE);
-
-        // 1 AM - 6 AM, ignore seconds
-        long startMs = TimeUnit.MINUTES.toMillis(60 - minute)
-                + TimeUnit.HOURS.toMillis((24 - hour) % 24);
-        long endMs = startMs + TimeUnit.HOURS.toMillis(5);
-
-        new JobRequest.Builder(TAG)
-                .setExecutionWindow(startMs, endMs)
-                .setUpdateCurrent(updateCurrent)
-                .build()
-                .schedule();
-    }
-
-    @NonNull
-    @Override
-    protected Result onRunJob(Params params) {
-        try {
-            // do something
-            return Result.SUCCESS;
-        } finally {
-            schedule(false); // don't update current, it would cancel this currently running job
-        }
-    }
-}
-```
-
-### Do NOT use `Long.MAX_VALUE` as argument!
-
-Don't use `Long.MAX_VALUE` as argument for the execution window. The `AlarmManager` doesn't allow setting a start date, instead the execution time is the arithmetic average between start and end date.
-
-Your job might work as expected on Android 5+, but maybe won't run at all on older devices.
-
-```java
-// bad, execution time on Android 4.X = startMs + (endMs - startMs) / 2
-new JobRequest.Builder(TAG)
-        .setExecutionWindow(3_000L, Long.MAX_VALUE)
-        .build()
-        .schedule();
-
-// better, execution time on Android 4.X is 2 days
-new JobRequest.Builder(TAG)
-        .setExecutionWindow(TimeUnit.DAYS.toMillis(1), TimeUnit.DAYS.toMillis(3))
-        .build()
-        .schedule();
-```
-
-### Why can't an interval be smaller than 15 minutes for periodic jobs?
-
-This library is a subset of 3 different APIs. Since Android Nougat the minimum interval of periodic jobs is 15 minutes. Although pre Nougat devices support smaller intervals, the least common was chosen as minimum for this library so that periodic jobs run with the same frequency on all devices.
-
-The `JobScheduler` with Android Nougat allows setting a smaller interval, but the value is silently adjusted and a warning is being logged. This library throws an exception instead, so that misbehaving jobs are caught early. You can read more about it [here](https://developer.android.com/reference/android/app/job/JobInfo.html#getMinPeriodMillis()).
-
-### How can I run async operations in a job?
-
-This library automatically creates a wake lock for you so that the system stays on until your job finished. When your job returns a result, then this wakelock is being released and async operations may not finish. The easiest solution is to not return a result until the async operation finished. Don't forget that your job is already executed on a background thread!
-
-```java
-public class AsyncJob extends Job {
-
-    @NonNull
-    @Override
-    protected Result onRunJob(Params params) {
-        final CountDownLatch countDownLatch = new CountDownLatch(1);
-
-        new Thread() {
-            @Override
-            public void run() {
-                // do async operation here
-
-                SystemClock.sleep(3_000L);
-                countDownLatch.countDown();
-            }
-        }.start();
-
-        try {
-            countDownLatch.await();
-        } catch (InterruptedException ignored) {
-        }
-
-        return Result.SUCCESS;
-    }
-}
-```
-
-### How can I remove the GCM dependency from my app?
-
-You need to be careful, if you remove this dependency after it has been already used for a while.
-
-```groovy
-dependencies {
-    compile 'com.google.android.gms:play-services-gcm:9.8.0'
-}
-```
-
-The reason is that jobs probably were scheduled with the GCM API on Android 4.X and after removing the dependency, the Play Services still look for the platform service, but can't find the class anymore. The result is that your app will crash with a runtime exception similar like this:
-
-```
-java.lang.RuntimeException: Unable to instantiate service com.evernote.android.job.gcm.PlatformGcmService: java.lang.ClassNotFoundException: Didn't find class "com.evernote.android.job.gcm.PlatformGcmService" on path: DexPathList[[zip file "/data/app/com.evernote.android.job.demo-2/base.apk"],nativeLibraryDirectories=[/vendor/lib, /system/lib]]
-```
-
-Fortunately, there is a workaround to prevent the crash. You need to remove the GCM service declaration from the manifest like this and then the Play Services won't try to instantiate the missing class.
-
-```xml
-<application
-    ...>
-
-    <service
-        android:name="com.evernote.android.job.gcm.PlatformGcmService"
-        tools:node="remove"/>
-
-</application>
-```
-
-### Why does my job run while the device is offline, although I've requested a network connection?
-
-That's expected. The job should run once during a period or within the specified execution window. The timing is a higher requirement than the network type, which is more like a hint when it's best to run your job. To make sure that all requirements are met, you can call `.setRequirementsEnforced(true)`. This will make sure that your job won't run, if one check fails, e.g.
-
-```java
-new JobRequest.Builder(DemoSyncJob.TAG)
-        .setExecutionWindow(60_000L, 90_000L)
-        .setRequiresCharging(true)
-        .setRequiredNetworkType(JobRequest.NetworkType.UNMETERED)
-        .setRequirementsEnforced(true)
-        .build()
-        .schedule();
-```
-
-### I cannot override the Application class. How can I add my `JobCreator`?
-
-There is an alternative. You can register a `BroadcastReceiver` to get notified about that you should add your `JobCreator`, e.g.
-
-```xml
-<receiver
-    android:name=".AddReceiver"
-    android:exported="false">
-        <intent-filter>
-            <action android:name="com.evernote.android.job.ADD_JOB_CREATOR"/>
-        </intent-filter>
-</receiver>
-```
-```java
-public final class AddReceiver extends AddJobCreatorReceiver {
-    @Override
-    protected void addJobCreator(@NonNull Context context, @NonNull JobManager manager) {
-        manager.addJobCreator(new DemoJobCreator());
-    }
-}
-```
-
-### Why aren't my periodic jobs running as expected on Android 5 or higher?
-
-On Android Lollipop or above the `JobScheduler` is used for periodic jobs. Android optimizes apps for battery usage, meaning that it tries to save as much power as possible. If your jobs have a high frequency, then it's possible, that some periods are skipped, because the device is saving battery.
-
-You can read more about Doze and App Standby [in the official documentation](https://developer.android.com/training/monitoring-device-state/doze-standby.html) to understand how it works and its implications.
-
-### What happens with jobs after the app was forced killed?
-
-After the app was force killed (or swiped away from the recent list on some devices) Android clears all pending alarms from the `AlarmManager` for this app. This is problematic, because until the app is being relaunched alarms can't be rescheduled and jobs won't run. Unfortunately, there is no known workaround.
-
-When the app is being relaunched, this library automatically reschedules pending jobs if necessary. The library also register a [boot completed receiver](https://github.com/evernote/android-job/blob/master/library/src/main/java/com/evernote/android/job/JobBootReceiver.java), so that jobs are rescheduled after a reboot.
-
-Note that only the `AlarmManager` is affected. Jobs relying on the `JobScheduler` or `GcmNetworkManager` still work reliable.
-
-### Can I run a job in a different process?
-
-No, that's not possible. The library can't know your process name in advance to start all services in this process. The recommended way is to start your service in the other process from the job.
-
-```java
-public class SeparateProcessJob extends Job {
-    @Override
-    @NonNull
-    protected Result onRunJob(final Params params) {
-        Intent intent = new Intent(getContext(), SeparateProcessService.class);
-        getContext().startService(intent);
-        return Result.SUCCESS;
-    }
-}
-
-public class SeparateProcessService extends IntentService {
-    @Override
-    protected void onHandleIntent(Intent intent) {
-        // do work
-    }
-}
-```
-
-### How can I add a custom logger?
-
-By default the library prints all log statement in Logcat. But often you wish to store those somewhere else, e.g. in a file. The `JobCat` class gives you an option register a custom logger. It's recommended to add the logger before creating the `JobManager` instance.
-
-```java
-private class TestPrinter implements CatPrinter {
-
-    @Override
-    public void println(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
-        switch (priority) {
-            case Log.ERROR:
-                // do something
-                break;
-        }
-    }
-}
-
-public class App extends Application {
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-
-        JobCat.addLogPrinter(new TestPrinter());
-        JobManager.create(this).addJobCreator(new DemoJobCreator());
-    }
-}
-```
-
-If you wish, you can even disable printing messages to Logcat, if you own logger handles that for you
-```java
-JobCat.setLogcatEnabled(false);
-```
-
-### Why was persisted parameter removed?
-
-The `setPersisted()` method didn't work reliable. Jobs were and are always persisted in a database. Usually you don't want to deal with platform specific issues, e.g. when an alarm is cancelled in the `AlarmManager`. The library takes care of this and reschedules jobs if necessary.
-
-If you don't want that a job can run after a reboot, then you need to register your own boot completed broadcast receiver and cancel the specific job yourself.
\ No newline at end of file
diff --git a/README.md b/README.md
index bb7c8c1..a80b30c 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # Android-Job
 
-A utility library for Android to run jobs delayed in the background. Depending on the Android version either the `JobScheduler`, `GcmNetworkManager` or `AlarmManager` is getting used. You can find out in [this blog post](https://blog.evernote.com/tech/2015/10/26/unified-job-library-android/) or in [these slides](https://speakerdeck.com/vrallev/scheduling-background-job-on-android-at-the-right-time-1) why you should prefer this library than each separate API. All features from Android Nougat are backward compatible.
+A utility library for Android to run jobs delayed in the background. Depending on the Android version either the `JobScheduler`, `GcmNetworkManager` or `AlarmManager` is getting used. You can find out in [this blog post](https://blog.evernote.com/tech/2015/10/26/unified-job-library-android/) or in [these slides](https://speakerdeck.com/vrallev/doo-z-z-z-z-z-e?slide=50) why you should prefer this library than each separate API. All features from Android Oreo are backward compatible back to Ice Cream Sandwich.
 
 ## Download
 
@@ -8,7 +8,7 @@ Download [the latest version](http://search.maven.org/#search|gav|1|g:"com.evern
 
 ```groovy
 dependencies {
-    compile 'com.evernote:android-job:1.1.11'
+    compile 'com.evernote:android-job:1.2.0'
 }
 ```
 
@@ -16,13 +16,11 @@ If you didn't turn off the manifest merger from the Gradle build tools, then no
 
 You can read the [JavaDoc here](https://evernote.github.io/android-job/javadoc/).
 
-Testing Android O? You can give version `1.2.0` a try. You find the instruction in the [wiki](https://github.com/evernote/android-job/wiki/Version-1.2.0-and-Android-O).
-
 ## Usage
 
 The class `JobManager` serves as entry point. Your jobs need to extend the class `Job`. Create a `JobRequest` with the corresponding builder class and schedule this request with the `JobManager`.
 
-Before you can use the `JobManager` you must initialize the singleton. You need to provide a `Context` and add a `JobCreator` implementation after that. The `JobCreator` maps a job tag to a specific job class. It's recommended to initialize the `JobManager` in the `onCreate()` method of your `Application` object, but there is [an alternative](FAQ.md#i-cannot-override-the-application-class-how-can-i-add-my-jobcreator), if you don't have access to the `Application` class.
+Before you can use the `JobManager` you must initialize the singleton. You need to provide a `Context` and add a `JobCreator` implementation after that. The `JobCreator` maps a job tag to a specific job class. It's recommended to initialize the `JobManager` in the `onCreate()` method of your `Application` object, but there is [an alternative](https://github.com/evernote/android-job/wiki/FAQ#i-cannot-override-the-application-class-how-can-i-add-my-jobcreator), if you don't have access to the `Application` class.
 
 ```java
 public class App extends Application {
@@ -38,8 +36,8 @@ public class App extends Application {
 ```java
 public class DemoJobCreator implements JobCreator {
 
-    @Override
-    public Job create(String tag) {
+    @Override @Nullable
+    public Job create(@NonNull String tag) {
         switch (tag) {
             case DemoSyncJob.TAG:
                 return new DemoSyncJob();
@@ -142,31 +140,13 @@ public class RescheduleDemoJob extends Job {
 }
 ```
 
-**Warning:** With Android Marshmallow Google introduced the auto backup feature. All job information are stored in a shared preference file called `evernote_jobs.xml` and in a database called `evernote_jobs.db`. You should exclude these files so that they aren't backed up.
-
-You can do this by defining a resource XML file (i.e., `res/xml/backup_config.xml`) with content:
-
-```xml
-<?xml version="1.0" encoding="utf-8"?>
-<full-backup-content>
-    <exclude domain="sharedpref" path="evernote_jobs.xml" />
-    <exclude domain="database" path="evernote_jobs.db" />
-</full-backup-content>
-``` 
-
-And then referring to it in your application tag in `AndroidManifest.xml`:
-
-```xml
-<application ...  android:fullBackupContent="@xml/backup_config">
-```
-
 #### Proguard
 
 The library doesn't use reflection, but it relies on three `Service`s and two `BroadcastReceiver`s. In order to avoid any issues, you shouldn't obfuscate those four classes. The library bundles its own Proguard config and you don't need to do anything, but just in case you can add [these rules](library/proguard.txt) in your configuration.
 
-## FAQ
+## More questions?
 
-See [here](FAQ.md).
+See the [FAQ](https://github.com/evernote/android-job/wiki/FAQ) in the [Wiki](https://github.com/evernote/android-job/wiki).
 
 ## Google Play Services
 
@@ -176,7 +156,7 @@ dependencies {
     compile "com.google.android.gms:play-services-gcm:latest_version"
 }
 ```
-Crashes after removing the GCM dependency is a known limitation of the Google Play Services. Please take a look at [this workaround](FAQ.md#how-can-i-remove-the-gcm-dependency-from-my-app) to avoid those crashes.
+Crashes after removing the GCM dependency is a known limitation of the Google Play Services. Please take a look at [this workaround](https://github.com/evernote/android-job/wiki/FAQ#how-can-i-remove-the-gcm-dependency-from-my-app) to avoid those crashes.
 
 ## License
 ```
diff --git a/demo/src/main/java/com/evernote/android/job/demo/App.java b/demo/src/main/java/com/evernote/android/job/demo/App.java
index 5a730f6..ce9d5dc 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/App.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/App.java
@@ -1,8 +1,12 @@
 package com.evernote.android.job.demo;
 
 import android.app.Application;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
+import com.evernote.android.job.JobConfig;
 import com.evernote.android.job.JobManager;
+import com.evernote.android.job.util.JobLogger;
 import com.facebook.stetho.Stetho;
 
 /**
@@ -15,6 +19,21 @@ public void onCreate() {
         super.onCreate();
         Stetho.initializeWithDefaults(this);
 
+        JobConfig.addLogger(new JobLogger() {
+            @Override
+            public void log(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
+                // log
+            }
+        });
+        JobConfig.setLogcatEnabled(false);
         JobManager.create(this).addJobCreator(new DemoJobCreator());
     }
+
+    private static class MyLogger implements JobLogger {
+        @Override
+        public void log(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
+            // log
+        }
+    }
 }
+
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java b/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
index 9a07f75..5f2831b 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
@@ -13,7 +13,7 @@
 public class DemoJobCreator implements JobCreator {
 
     @Override
-    public Job create(String tag) {
+    public Job create(@NonNull String tag) {
         switch (tag) {
             case DemoSyncJob.TAG:
                 return new DemoSyncJob();
diff --git a/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java b/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
index a84986e..cca4406 100644
--- a/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
@@ -184,7 +184,7 @@ private void verifyJob(long wait, TimeUnit timeUnit) throws InterruptedException
 
     private final class TestJobCreator implements JobCreator {
         @Override
-        public Job create(String tag) {
+        public Job create(@NonNull String tag) {
             return mJob;
         }
     }
diff --git a/library/src/androidTest/java/com/evernote/android/job/TransientBundleRescheduleTest.java b/library/src/androidTest/java/com/evernote/android/job/TransientBundleRescheduleTest.java
index bc24f66..bf1e89a 100644
--- a/library/src/androidTest/java/com/evernote/android/job/TransientBundleRescheduleTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/TransientBundleRescheduleTest.java
@@ -93,7 +93,7 @@ protected Result onRunJob(Params params) {
 
     private final class TestJobCreator implements JobCreator {
         @Override
-        public Job create(String tag) {
+        public Job create(@NonNull String tag) {
             return new TestJob();
         }
     }
diff --git a/library/src/androidTest/java/com/evernote/android/job/TransientBundleTest.java b/library/src/androidTest/java/com/evernote/android/job/TransientBundleTest.java
index 7b2c8a0..73de6ac 100644
--- a/library/src/androidTest/java/com/evernote/android/job/TransientBundleTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/TransientBundleTest.java
@@ -148,7 +148,7 @@ private void verifyJob(long wait, TimeUnit timeUnit) throws InterruptedException
 
     private final class TestJobCreator implements JobCreator {
         @Override
-        public Job create(String tag) {
+        public Job create(@NonNull String tag) {
             return mJob;
         }
     }
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 8d4c849..9e2f461 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -79,7 +79,7 @@
      * <br>
      *
      * This limit comes from the {@code JobScheduler} starting with Android Nougat. You can read
-     * <a href="https://github.com/evernote/android-job/blob/master/FAQ.md">here</a> more about
+     * <a href="https://github.com/evernote/android-job/wiki/FAQ">here</a> more about
      * the limit.
      *
      * @see Builder#setPeriodic(long)
@@ -94,7 +94,7 @@
      * <br>
      *
      * This limit comes from the {@code JobScheduler} starting with Android Nougat. You can read
-     * <a href="https://github.com/evernote/android-job/blob/master/FAQ.md">here</a> more about
+     * <a href="https://github.com/evernote/android-job/wiki/FAQ">here</a> more about
      * the limit.
      *
      * @see Builder#setPeriodic(long, long)
@@ -1090,7 +1090,7 @@ public JobRequest build() {
             }
 
             if (mIntervalMs <= 0 && (mStartMs > WINDOW_THRESHOLD_WARNING || mEndMs > WINDOW_THRESHOLD_WARNING)) {
-                CAT.w("Attention: your execution window is too large. This could result in undesired behavior, see https://github.com/evernote/android-job/blob/master/FAQ.md");
+                CAT.w("Attention: your execution window is too large. This could result in undesired behavior, see https://github.com/evernote/android-job/wiki/FAQ");
             }
 
             if (mIntervalMs <= 0 && (mStartMs > TimeUnit.DAYS.toMillis(365))) {
diff --git a/library/src/test/java/com/evernote/android/job/DatabaseManualUpgradeTest.java b/library/src/test/java/com/evernote/android/job/DatabaseManualUpgradeTest.java
index 8d53772..3ceba46 100644
--- a/library/src/test/java/com/evernote/android/job/DatabaseManualUpgradeTest.java
+++ b/library/src/test/java/com/evernote/android/job/DatabaseManualUpgradeTest.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
+import android.support.annotation.NonNull;
 
 import com.evernote.android.job.test.JobRobolectricTestRunner;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
@@ -169,7 +170,7 @@ private void createJobs(UpgradeAbleJobOpenHelper openHelper, boolean validInterv
     private void checkJob() {
         createManager().addJobCreator(new JobCreator() {
             @Override
-            public Job create(String tag) {
+            public Job create(@NonNull String tag) {
                 return null;
             }
         });
diff --git a/library/src/test/java/com/evernote/android/job/JobCreatorHolderTest.java b/library/src/test/java/com/evernote/android/job/JobCreatorHolderTest.java
index d997247..9963b1b 100644
--- a/library/src/test/java/com/evernote/android/job/JobCreatorHolderTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobCreatorHolderTest.java
@@ -1,5 +1,7 @@
 package com.evernote.android.job;
 
+import android.support.annotation.NonNull;
+
 import com.evernote.android.job.util.JobLogger;
 
 import org.junit.After;
@@ -88,7 +90,7 @@ public void createJobSucceedsWhenCreatorListIsModifiedConcurrently() {
 
         class BlockingJobCreator implements JobCreator {
             @Override
-            public Job create(String tag) {
+            public Job create(@NonNull String tag) {
                 lock.lock();
                 try {
                     isIteratorActive.set(true);
diff --git a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index d77cffe..45e5874 100644
--- a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -193,7 +193,7 @@ protected void onReschedule(int newJobId) {
 
         JobCreator jobCreator = new JobCreator() {
             @Override
-            public Job create(String tag) {
+            public Job create(@NonNull String tag) {
                 return job;
             }
         };
diff --git a/library/src/test/java/com/evernote/android/job/JobPeriodicCancelTest.java b/library/src/test/java/com/evernote/android/job/JobPeriodicCancelTest.java
index 160ba26..bb7d018 100644
--- a/library/src/test/java/com/evernote/android/job/JobPeriodicCancelTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobPeriodicCancelTest.java
@@ -33,7 +33,7 @@ public void setup() {
         mJob = new PeriodicJob();
         manager().addJobCreator(new JobCreator() {
             @Override
-            public Job create(String tag) {
+            public Job create(@NonNull String tag) {
                 return mJob;
             }
         });
diff --git a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
index 9c78179..5e08d64 100644
--- a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
+++ b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
@@ -88,7 +88,7 @@ protected DailyJobResult onRunDailyJob(Params params) {
 
     public static final JobCreator TEST_JOB_CREATOR = new JobCreator() {
         @Override
-        public Job create(String tag) {
+        public Job create(@NonNull String tag) {
             switch (tag) {
                 case SuccessJob.TAG:
                     return new SuccessJob();
@@ -115,7 +115,7 @@ public SpyableJobCreator(JobCreator jobCreator) {
         }
 
         @Override
-        public Job create(String tag) {
+        public Job create(@NonNull String tag) {
             Job job = mJobCreator.create(tag);
             return job == null ? null : spy(job);
         }
