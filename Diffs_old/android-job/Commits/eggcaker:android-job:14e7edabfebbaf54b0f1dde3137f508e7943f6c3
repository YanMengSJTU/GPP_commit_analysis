diff --git a/library/src/main/java/com/evernote/android/job/DailyJob.java b/library/src/main/java/com/evernote/android/job/DailyJob.java
index 1054c47..0379b8e 100644
--- a/library/src/main/java/com/evernote/android/job/DailyJob.java
+++ b/library/src/main/java/com/evernote/android/job/DailyJob.java
@@ -70,6 +70,8 @@ private static int schedule(@NonNull JobRequest.Builder builder, boolean newJob,
         }
 
         Calendar calendar = Calendar.getInstance();
+        calendar.setTimeInMillis(JobConfig.getClock().currentTimeMillis());
+
         int hour = calendar.get(Calendar.HOUR_OF_DAY);
         int minute = calendar.get(Calendar.MINUTE);
         int second = calendar.get(Calendar.SECOND);
@@ -78,7 +80,8 @@ private static int schedule(@NonNull JobRequest.Builder builder, boolean newJob,
         long startDelay = TimeUnit.SECONDS.toMillis(60 - second)
                 + TimeUnit.MINUTES.toMillis(60 - minute)
                 + TimeUnit.HOURS.toMillis((24 - hour) % 24)
-                - TimeUnit.HOURS.toMillis(1)  // subtract because we're adding minutes and seconds
+                - TimeUnit.HOURS.toMillis(1)  // subtract because we're adding minutes
+                - TimeUnit.MINUTES.toMillis(1)  // subtract because we're adding seconds
                 + TimeUnit.DAYS.toMillis(1); // add one day, otherwise result could be negative, e.g. if startMs is 0 and time is 00:08
 
         startDelay = (startDelay + startMs) % TimeUnit.DAYS.toMillis(1);
diff --git a/library/src/main/java/com/evernote/android/job/JobConfig.java b/library/src/main/java/com/evernote/android/job/JobConfig.java
index f6873d0..2b4ea8b 100644
--- a/library/src/main/java/com/evernote/android/job/JobConfig.java
+++ b/library/src/main/java/com/evernote/android/job/JobConfig.java
@@ -27,7 +27,9 @@
 
 import android.os.Build;
 import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
 
+import com.evernote.android.job.util.Clock;
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobLogger;
 import com.evernote.android.job.util.JobPreconditions;
@@ -43,7 +45,7 @@
  *
  * @author rwondratschek
  */
-@SuppressWarnings({"WeakerAccess", "unused"})
+@SuppressWarnings({"WeakerAccess", "unused", "SameParameterValue"})
 public final class JobConfig {
 
     private JobConfig() {
@@ -65,6 +67,8 @@ private JobConfig() {
 
     private static volatile boolean forceRtc = false;
 
+    private static volatile Clock clock = Clock.DEFAULT;
+
     static {
         ENABLED_APIS = new EnumMap<>(JobApi.class);
         for (JobApi api : JobApi.values()) {
@@ -260,6 +264,18 @@ public static void setForceRtc(boolean forceRtc) {
         JobConfig.forceRtc = forceRtc;
     }
 
+    /**
+     * @return A helper providing the system time
+     */
+    public static Clock getClock() {
+        return clock;
+    }
+
+    @VisibleForTesting
+    /*package*/ static void setClock(Clock clock) {
+        JobConfig.clock = clock;
+    }
+
     /**
      * Resets all adjustments in the config.
      */
@@ -273,6 +289,7 @@ public static void reset() {
         skipJobReschedule = false;
         jobIdOffset = 0;
         forceRtc = false;
+        clock = Clock.DEFAULT;
         JobCat.setLogcatEnabled(true);
         JobCat.clearLogger();
     }
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index bb56a82..73f54b5 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -187,7 +187,7 @@ public void schedule(@NonNull JobRequest request) {
         boolean periodic = request.isPeriodic();
         boolean flexSupport = periodic && jobApi.isFlexSupport() && request.getFlexMs() < request.getIntervalMs();
 
-        request.setScheduledAt(System.currentTimeMillis());
+        request.setScheduledAt(JobConfig.getClock().currentTimeMillis());
         request.setFlexSupport(flexSupport);
         mJobStorage.put(request);
 
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 3cd24e4..8d4c849 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -426,7 +426,7 @@ public Builder cancelAndEdit() {
         mStarted = false;
 
         if (!isPeriodic()) {
-            long offset = System.currentTimeMillis() - scheduledAt;
+            long offset = JobConfig.getClock().currentTimeMillis() - scheduledAt;
             long minValue = 1L; // 1ms
             builder.setExecutionWindow(Math.max(minValue, getStartMs() - offset), Math.max(minValue, getEndMs() - offset));
         }
@@ -459,7 +459,7 @@ public Builder cancelAndEdit() {
             contentValues.put(JobStorage.COLUMN_NUM_FAILURES, mFailureCount);
         }
         if (updateLastRun) {
-            mLastRun = System.currentTimeMillis();
+            mLastRun = JobConfig.getClock().currentTimeMillis();
             contentValues.put(JobStorage.COLUMN_LAST_RUN, mLastRun);
         }
         JobManager.instance().getJobStorage().update(this, contentValues);
diff --git a/library/src/main/java/com/evernote/android/job/util/Clock.java b/library/src/main/java/com/evernote/android/job/util/Clock.java
new file mode 100644
index 0000000..a3844b8
--- /dev/null
+++ b/library/src/main/java/com/evernote/android/job/util/Clock.java
@@ -0,0 +1,25 @@
+package com.evernote.android.job.util;
+
+import android.os.SystemClock;
+
+/**
+ * @author rwondratschek
+ */
+public interface Clock {
+
+    long currentTimeMillis();
+
+    long elapsedRealtime();
+
+    Clock DEFAULT = new Clock() {
+        @Override
+        public long currentTimeMillis() {
+            return System.currentTimeMillis();
+        }
+
+        @Override
+        public long elapsedRealtime() {
+            return SystemClock.elapsedRealtime();
+        }
+    };
+}
diff --git a/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java b/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
index c55d791..6b81fdb 100644
--- a/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
+++ b/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
@@ -31,7 +31,6 @@
 import android.content.Intent;
 import android.os.Build;
 import android.os.Bundle;
-import android.os.SystemClock;
 import android.support.annotation.Nullable;
 
 import com.evernote.android.job.JobConfig;
@@ -108,7 +107,7 @@ protected void plantOneOffExact(JobRequest request, AlarmManager alarmManager, P
     }
 
     protected void plantOneOffFlexSupport(JobRequest request, AlarmManager alarmManager, PendingIntent pendingIntent) {
-        long triggerAtMs = System.currentTimeMillis() + Common.getAverageDelayMsSupportFlex(request);
+        long triggerAtMs = JobConfig.getClock().currentTimeMillis() + Common.getAverageDelayMsSupportFlex(request);
         alarmManager.set(AlarmManager.RTC, triggerAtMs, pendingIntent);
 
         mCat.d("Scheduled repeating alarm (flex support), %s, interval %s, flex %s", request,
@@ -117,9 +116,9 @@ protected void plantOneOffFlexSupport(JobRequest request, AlarmManager alarmMana
 
     protected long getTriggerAtMillis(JobRequest request) {
         if (JobConfig.isForceRtc()) {
-            return System.currentTimeMillis() + Common.getAverageDelayMs(request);
+            return JobConfig.getClock().currentTimeMillis() + Common.getAverageDelayMs(request);
         } else {
-            return SystemClock.elapsedRealtime() + Common.getAverageDelayMs(request);
+            return JobConfig.getClock().elapsedRealtime() + Common.getAverageDelayMs(request);
         }
     }
 
diff --git a/library/src/test/java/com/evernote/android/job/DailyJobTest.java b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
index f2dab60..feec545 100644
--- a/library/src/test/java/com/evernote/android/job/DailyJobTest.java
+++ b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
@@ -2,6 +2,8 @@
 
 import com.evernote.android.job.test.DummyJobs;
 import com.evernote.android.job.test.JobRobolectricTestRunner;
+import com.evernote.android.job.test.TestClock;
+import com.evernote.android.job.util.Clock;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
 import org.junit.FixMethodOrder;
@@ -22,10 +24,29 @@
 public class DailyJobTest extends BaseJobManagerTest {
 
     @Test
-    public void verifyScheduleInNextHour() {
-        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
-        long start = TimeUnit.HOURS.toMillis(hour + 1);
-        long end = start + TimeUnit.MINUTES.toMillis(30);
+    public void verifyScheduleInNextHourMinute0() {
+        TestClock clock = new TestClock();
+        clock.setTime(20, 0);
+        verifyScheduleInNextHour(clock);
+    }
+
+    @Test
+    public void verifyScheduleInNextHourMinute57() {
+        TestClock clock = new TestClock();
+        clock.setTime(20, 57);
+        verifyScheduleInNextHour(clock);
+    }
+
+    private void verifyScheduleInNextHour(Clock clock) {
+        JobConfig.setClock(clock);
+
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTimeInMillis(clock.currentTimeMillis());
+
+        int hour = calendar.get(Calendar.HOUR_OF_DAY);
+        int minute = calendar.get(Calendar.MINUTE);
+        long start = TimeUnit.HOURS.toMillis(hour + 1) + TimeUnit.MINUTES.toMillis(minute);
+        long end = start + TimeUnit.HOURS.toMillis(1);
 
         DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessJob.class), start, end);
 
@@ -33,12 +54,29 @@ public void verifyScheduleInNextHour() {
 
         JobRequest request = manager().getAllJobRequests().iterator().next();
 
-        assertThat(request.getStartMs()).isLessThan(TimeUnit.HOURS.toMillis(1));
-        assertThat(request.getEndMs()).isLessThan(TimeUnit.HOURS.toMillis(2));
+        assertThat(request.getStartMs()).isEqualTo(TimeUnit.HOURS.toMillis(1));
+        assertThat(request.getEndMs()).isEqualTo(TimeUnit.HOURS.toMillis(2));
     }
 
     @Test
-    public void verifyScheduleOverMidnight() {
+    public void verifyScheduleOverMidnight8pm() {
+        TestClock clock = new TestClock();
+        clock.setTime(20, 0);
+
+        verifyScheduleOverMidnight(clock);
+    }
+
+    @Test
+    public void verifyScheduleOverMidnightAtMidnight() {
+        TestClock clock = new TestClock();
+        clock.setTime(0, 0);
+
+        verifyScheduleOverMidnight(clock);
+    }
+
+    private void verifyScheduleOverMidnight(Clock clock) {
+        JobConfig.setClock(clock);
+
         long start = TimeUnit.HOURS.toMillis(24) - 1L;
         long end = 1L;
 
@@ -47,7 +85,9 @@ public void verifyScheduleOverMidnight() {
         assertThat(manager().getAllJobRequests()).hasSize(1);
         JobRequest request = manager().getAllJobRequests().iterator().next();
 
-        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTimeInMillis(clock.currentTimeMillis());
+        int hour = calendar.get(Calendar.HOUR_OF_DAY);
 
         long maxStart = TimeUnit.HOURS.toMillis(24 - hour);
         assertThat(request.getStartMs()).isLessThan(maxStart);
diff --git a/library/src/test/java/com/evernote/android/job/test/TestClock.java b/library/src/test/java/com/evernote/android/job/test/TestClock.java
new file mode 100644
index 0000000..eaef0c5
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/test/TestClock.java
@@ -0,0 +1,40 @@
+package com.evernote.android.job.test;
+
+import com.evernote.android.job.util.Clock;
+import com.evernote.android.job.util.JobPreconditions;
+
+import java.util.Calendar;
+
+/**
+ * @author rwondratschek
+ */
+public class TestClock implements Clock {
+
+    private long mTime;
+
+    @Override
+    public long currentTimeMillis() {
+        return mTime;
+    }
+
+    @Override
+    public long elapsedRealtime() {
+        return mTime;
+    }
+
+    public void setTime(long time) {
+        mTime = time;
+    }
+
+    public void setTime(int hour, int minute) {
+        JobPreconditions.checkArgumentInRange(hour, 0, 23, "hour");
+        JobPreconditions.checkArgumentInRange(minute, 0, 59, "minute");
+
+        Calendar calendar = Calendar.getInstance();
+        calendar.set(Calendar.HOUR_OF_DAY, hour);
+        calendar.set(Calendar.MINUTE, minute);
+        calendar.set(Calendar.SECOND, 0);
+        calendar.set(Calendar.MILLISECOND, 0);
+        setTime(calendar.getTimeInMillis());
+    }
+}
