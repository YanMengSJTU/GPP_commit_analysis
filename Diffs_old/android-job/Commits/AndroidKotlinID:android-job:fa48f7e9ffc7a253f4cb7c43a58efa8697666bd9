diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2b60b35..fe4cf20 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,7 @@
+## 1.3.0-rc1 (2019-03-22)
+* Offset the end time when rescheduling an inexact job, see #547
+* Upgraded WorkManager to 1.0.0, see #561
+
 ## 1.3.0-alpha09 (2018-11-18)
 * Upgraded WorkManager to 1.0.0-alpha11
 
diff --git a/README.md b/README.md
index 9c0c6c9..696aafd 100644
--- a/README.md
+++ b/README.md
@@ -2,6 +2,9 @@
 
 A utility library for Android to run jobs delayed in the background. Depending on the Android version either the `JobScheduler`, `GcmNetworkManager` or `AlarmManager` is getting used. You can find out in [this blog post](https://blog.evernote.com/tech/2015/10/26/unified-job-library-android/) or in [these slides](https://speakerdeck.com/vrallev/doo-z-z-z-z-z-e?slide=50) why you should prefer this library than each separate API. All features from Android Oreo are backward compatible back to Ice Cream Sandwich.
 
+**Attention:**
+If you start a new project, you should be using [WorkManager](https://github.com/evernote/android-job#workmanager) instead of this library. You should also start migrating your code from this library to WorkManager. At some point in the future this library will be deprecated.
+
 ## Download
 
 Download [the latest version](http://search.maven.org/#search|gav|1|g:"com.evernote"%20AND%20a:"android-job") or grab via Gradle:
@@ -11,7 +14,7 @@ dependencies {
     implementation 'com.evernote:android-job:1.2.6'
 
     // or
-    implementation 'com.evernote:android-job:1.3.0-alpha09'
+    implementation 'com.evernote:android-job:1.3.0-rc1'
 }
 ```
 
diff --git a/build.gradle b/build.gradle
index 808c96f..b65f6a5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.2.1'
+        classpath 'com.android.tools.build:gradle:3.3.2'
         classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
     }
 }
@@ -30,7 +30,7 @@ ext {
 
     supportLibVersion = '28.0.0'
     playServicesVersion = '15.0.1'
-    workVersion = '1.0.0-alpha11'
+    workVersion = '1.0.0'
     stethoVersion = '1.5.0'
     junitVersion = '4.12'
     assertjVersion = '3.6.2'
@@ -38,7 +38,7 @@ ext {
     robolectricVersion = '3.8'
 }
 
-task wrapper(type: Wrapper) {
-    gradleVersion = '4.10.2'
+task updateWrapper(type: Wrapper) {
+    gradleVersion = '4.10.3'
     distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
 }
diff --git a/gradle.properties b/gradle.properties
index adce4c7..f6e170b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,3 @@
-#VERSION_NAME=1.3.0-alpha09
+#VERSION_NAME=1.3.0-rc1
 VERSION_NAME=1.3.0-SNAPSHOT
 VERSION_CODE=1
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 29953ea..94336fc 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index d76b502..ae45383 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.3-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/library/src/main/java/android/support/v4/app/SafeJobServiceEngineImpl.java b/library/src/main/java/android/support/v4/app/SafeJobServiceEngineImpl.java
index 5242df8..1ef9594 100644
--- a/library/src/main/java/android/support/v4/app/SafeJobServiceEngineImpl.java
+++ b/library/src/main/java/android/support/v4/app/SafeJobServiceEngineImpl.java
@@ -70,7 +70,7 @@ public boolean onStartJob(JobParameters params) {
 
     @Override
     public boolean onStopJob(JobParameters params) {
-        if (DEBUG) Log.d(TAG, "onStartJob: " + params);
+        if (DEBUG) Log.d(TAG, "onStopJob: " + params);
         boolean result = mService.doStopCurrentWork();
         synchronized (mLock) {
             // Once we return, the job is stopped, so its JobParameters are no
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 2e03734..262d60f 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -79,7 +79,7 @@ private static long checkNoOverflow(long result, boolean condition) {
 
         public static long getStartMs(JobRequest request) {
             if (request.getFailureCount() > 0) {
-                return request.getBackoffOffset();
+                return request.getBackoffOffset(false);
             } else {
                 return request.getStartMs();
             }
@@ -92,7 +92,7 @@ public static long getEndMs(JobRequest request) {
         public static long getEndMs(JobRequest request, boolean shiftEnd) {
             long endMs;
             if (request.getFailureCount() > 0) {
-                endMs = request.getBackoffOffset();
+                endMs = request.getBackoffOffset(true);
             } else {
                 endMs = request.getEndMs();
             }
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 28763e4..0f160a6 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -287,7 +287,7 @@ public boolean isExact() {
         return mBuilder.mExact;
     }
 
-    /*package*/ long getBackoffOffset() {
+    /*package*/ long getBackoffOffset(boolean endTime) {
         if (isPeriodic()) {
             return 0L;
         }
@@ -310,6 +310,10 @@ public boolean isExact() {
                 throw new IllegalStateException("not implemented");
         }
 
+        if (endTime && !isExact()) {
+            offset *= 1.2f;
+        }
+
         return Math.min(offset, TimeUnit.HOURS.toMillis(5)); // use max of 5 hours like JobScheduler
     }
 
diff --git a/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java b/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
index 86471b5..16d5d11 100644
--- a/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
+++ b/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
@@ -31,7 +31,7 @@ public PlatformWorker(@NonNull Context context, @NonNull WorkerParameters worker
     public Result doWork() {
         final int jobId = getJobId();
         if (jobId < 0) {
-            return Result.FAILURE;
+            return Result.failure();
         }
 
         try {
@@ -39,7 +39,7 @@ public Result doWork() {
 
             JobRequest request = common.getPendingRequest(true, true);
             if (request == null) {
-                return Result.FAILURE;
+                return Result.failure();
             }
 
             Bundle transientBundle = null;
@@ -47,15 +47,15 @@ public Result doWork() {
                 transientBundle = TransientBundleHolder.getBundle(jobId);
                 if (transientBundle == null) {
                     CAT.d("Transient bundle is gone for request %s", request);
-                    return Result.FAILURE;
+                    return Result.failure();
                 }
             }
 
             Job.Result result = common.executeJobRequest(request, transientBundle);
             if (Job.Result.SUCCESS == result) {
-                return Result.SUCCESS;
+                return Result.success();
             } else {
-                return Result.FAILURE;
+                return Result.failure();
             }
         } finally {
             TransientBundleHolder.cleanUpBundle(jobId);
diff --git a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index 7b7b9d7..faf443e 100644
--- a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -14,6 +14,7 @@
 import org.junit.runners.MethodSorters;
 import org.robolectric.annotation.Config;
 
+import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -290,6 +291,32 @@ public void verifyReschedulingTransientJobsWorks() {
         }
     }
 
+    @Test
+    public void verifyReschedulingInexactJobUsesTimeWindow() {
+        int previousJobId = DummyJobs.createBuilder(DummyJobs.RescheduleJob.class)
+                .setExecutionWindow(200_000L, 400_000L)
+                .setBackoffCriteria(TimeUnit.MINUTES.toMillis(1), JobRequest.BackoffPolicy.LINEAR)
+                .build()
+                .schedule();
+
+        executeJob(previousJobId, Job.Result.RESCHEDULE);
+
+        Set<JobRequest> allJobRequestsForTag = manager().getAllJobRequestsForTag(DummyJobs.RescheduleJob.TAG);
+        assertThat(allJobRequestsForTag).hasSize(1);
+
+        JobRequest firstRetry = allJobRequestsForTag.iterator().next();
+        assertThat(JobProxy.Common.getStartMs(firstRetry)).isNotEqualTo(JobProxy.Common.getEndMs(firstRetry));
+
+        executeJob(firstRetry.getJobId(), Job.Result.RESCHEDULE);
+
+        allJobRequestsForTag = manager().getAllJobRequestsForTag(DummyJobs.RescheduleJob.TAG);
+        assertThat(allJobRequestsForTag).hasSize(1);
+
+        JobRequest secondRetry = allJobRequestsForTag.iterator().next();
+        assertThat(JobProxy.Common.getStartMs(secondRetry)).isNotEqualTo(JobProxy.Common.getEndMs(secondRetry));
+        assertThat(JobProxy.Common.getStartMs(secondRetry)).isNotEqualTo(JobProxy.Common.getEndMs(secondRetry));
+    }
+
     @Test
     public void verifyNotFoundJobCanceledOneOff() {
         final String tag = "something";
