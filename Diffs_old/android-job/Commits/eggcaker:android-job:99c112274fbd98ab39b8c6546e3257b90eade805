diff --git a/CHANGELOG.md b/CHANGELOG.md
index 20780a2..695c85d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,6 @@
+## 1.2.5
+* Handle platform bug where querying the network state throws an NPE internally, see #380
+
 ## 1.2.4 (2018-02-08)
 * Add `scheduleAsync()` to the `DailyJob` class for scheduling daily jobs asynchronously to avoid IO operations on the main thread, see #371
 
diff --git a/library/src/main/java/com/evernote/android/job/util/Device.java b/library/src/main/java/com/evernote/android/job/util/Device.java
index 4785e7f..d39be20 100644
--- a/library/src/main/java/com/evernote/android/job/util/Device.java
+++ b/library/src/main/java/com/evernote/android/job/util/Device.java
@@ -99,7 +99,13 @@ public static boolean isIdle(Context context) {
     @NonNull
     public static JobRequest.NetworkType getNetworkType(@NonNull Context context) {
         ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
-        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
+        NetworkInfo networkInfo;
+        try {
+            networkInfo = connectivityManager.getActiveNetworkInfo();
+        } catch (Throwable t) {
+            return JobRequest.NetworkType.ANY;
+        }
+
         if (networkInfo == null || !networkInfo.isConnectedOrConnecting()) {
             return JobRequest.NetworkType.ANY;
         }
diff --git a/library/src/test/java/com/evernote/android/job/util/DeviceTest.java b/library/src/test/java/com/evernote/android/job/util/DeviceTest.java
index cd49b45..817f3fd 100644
--- a/library/src/test/java/com/evernote/android/job/util/DeviceTest.java
+++ b/library/src/test/java/com/evernote/android/job/util/DeviceTest.java
@@ -129,4 +129,15 @@ public void testNetworkStateWifiAndRoaming() {
 
         assertThat(Device.getNetworkType(context)).isEqualTo(JobRequest.NetworkType.UNMETERED);
     }
+
+    @Test
+    public void testPlatformBug() {
+        ConnectivityManager connectivityManager = mock(ConnectivityManager.class);
+        when(connectivityManager.getActiveNetworkInfo()).thenThrow(new NullPointerException());
+
+        Context context = mock(MockContext.class);
+        when(context.getSystemService(Context.CONNECTIVITY_SERVICE)).thenReturn(connectivityManager);
+
+        assertThat(Device.getNetworkType(context)).isEqualTo(JobRequest.NetworkType.ANY);
+    }
 }
