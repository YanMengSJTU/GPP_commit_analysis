diff --git a/library/src/main/java/com/evernote/android/job/DailyJob.java b/library/src/main/java/com/evernote/android/job/DailyJob.java
index 0379b8e..ff0fd27 100644
--- a/library/src/main/java/com/evernote/android/job/DailyJob.java
+++ b/library/src/main/java/com/evernote/android/job/DailyJob.java
@@ -139,7 +139,7 @@ protected final Result onRunJob(Params params) {
 
                 // don't update current, it would cancel this currently running job
                 schedule(request.createBuilder(), false,
-                        extras.getLong(EXTRA_START_MS, 0), extras.getLong(EXTRA_END_MS, 0L));
+                        extras.getLong(EXTRA_START_MS, 0) % DAY, extras.getLong(EXTRA_END_MS, 0L) % DAY);
 
             } else {
                 CAT.i("Cancel daily job %s", request);
diff --git a/library/src/test/java/com/evernote/android/job/DailyJobTest.java b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
index bd072bc..32a4983 100644
--- a/library/src/test/java/com/evernote/android/job/DailyJobTest.java
+++ b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
@@ -94,6 +94,50 @@ private void verifyScheduleOverMidnight(Clock clock) {
         assertThat(request.getEndMs()).isLessThan(maxStart + 3);
     }
 
+    @Test
+    public void verifyScheduleAndExecutionInFuture() {
+        TestClock clock = new TestClock();
+        clock.setTime(0, 0);
+
+        verifyExecutionAndSuccessfulReschedule(clock, TimeUnit.HOURS.toMillis(2),  TimeUnit.HOURS.toMillis(6));
+    }
+
+    @Test
+    public void verifyScheduleAndExecutionInPast() {
+        TestClock clock = new TestClock();
+        clock.setTime(12, 0);
+
+        verifyExecutionAndSuccessfulReschedule(clock, TimeUnit.HOURS.toMillis(2),  TimeUnit.HOURS.toMillis(6));
+    }
+
+    @Test
+    public void verifyScheduleAndExecutionStartInPast() {
+        TestClock clock = new TestClock();
+        clock.setTime(4, 0);
+
+        verifyExecutionAndSuccessfulReschedule(clock, TimeUnit.HOURS.toMillis(2),  TimeUnit.HOURS.toMillis(6));
+    }
+
+    @Test
+    public void verifyScheduleAndExecutionOverMidnight() {
+        TestClock clock = new TestClock();
+        clock.setTime(0, 0);
+
+        verifyExecutionAndSuccessfulReschedule(clock, TimeUnit.HOURS.toMillis(23),  TimeUnit.HOURS.toMillis(6));
+    }
+
+    private void verifyExecutionAndSuccessfulReschedule(Clock clock, long start, long end) {
+        JobConfig.setClock(clock);
+
+        int jobId = DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessDailyJob.class), start, end);
+        assertThat(jobId).isEqualTo(1);
+
+        executeJob(jobId, Job.Result.SUCCESS);
+
+        assertThat(manager().getAllJobRequests()).hasSize(1);
+        assertThat(manager().getJobRequest(jobId + 1)).isNotNull();
+    }
+
     @Test(expected = IllegalArgumentException.class)
     public void verifyTooLargeValue() {
         long start = TimeUnit.HOURS.toMillis(24);
diff --git a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
index 5d902a6..9c78179 100644
--- a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
+++ b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
@@ -2,6 +2,7 @@
 
 import android.support.annotation.NonNull;
 
+import com.evernote.android.job.DailyJob;
 import com.evernote.android.job.Job;
 import com.evernote.android.job.JobCreator;
 import com.evernote.android.job.JobRequest;
@@ -75,6 +76,16 @@ protected Result onRunJob(Params params) {
         }
     }
 
+    public static final class SuccessDailyJob extends DailyJob {
+        public static final String TAG = "SuccessDailyJob";
+
+        @NonNull
+        @Override
+        protected DailyJobResult onRunDailyJob(Params params) {
+            return DailyJobResult.SUCCESS;
+        }
+    }
+
     public static final JobCreator TEST_JOB_CREATOR = new JobCreator() {
         @Override
         public Job create(String tag) {
@@ -87,6 +98,8 @@ public Job create(String tag) {
                     return new FailureJob();
                 case TwoSecondPauseJob.TAG:
                     return new TwoSecondPauseJob();
+                case SuccessDailyJob.TAG:
+                    return new SuccessDailyJob();
                 default:
                     return null;
             }
