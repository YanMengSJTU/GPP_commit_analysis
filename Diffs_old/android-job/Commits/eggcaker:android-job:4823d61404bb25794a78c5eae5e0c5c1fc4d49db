diff --git a/CHANGELOG.md b/CHANGELOG.md
index 80163a1..f520b94 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,6 @@
+## 1.2.3
+* Add an `onCancel()` method to get notified when the job is canceled, see #359
+
 ## 1.2.2 (2018-01-13)
 * Use only the `support-compat` instead of the full `support-v4` library, see #326
 * Use a `ReadWriteLock` for synchronizing the database reads and writes, see #344
diff --git a/library/src/main/java/com/evernote/android/job/Job.java b/library/src/main/java/com/evernote/android/job/Job.java
index b1fecdc..5a43f4d 100644
--- a/library/src/main/java/com/evernote/android/job/Job.java
+++ b/library/src/main/java/com/evernote/android/job/Job.java
@@ -113,6 +113,18 @@
     @WorkerThread
     protected abstract Result onRunJob(@NonNull Params params);
 
+    /**
+     * This method is intended to be overwritten. It is called once when the job is still running, but was
+     * canceled. This can happen when the system wants to stop the job or if you manually cancel the job
+     * yourself. It's a good indicator to stop your work and maybe retry your job later again. Alternatively,
+     * you can also call {@link #isCanceled()}.
+     *
+     * @see #isCanceled()
+     */
+    protected void onCancel() {
+        // override me
+    }
+
     /*package*/ final Result runJob() {
         try {
             // daily jobs check the requirements manually
@@ -263,7 +275,10 @@ public final void cancel() {
 
     /*package*/ final void cancel(boolean deleted) {
         if (!isFinished()) {
-            mCanceled = true;
+            if (!mCanceled) {
+                mCanceled = true;
+                onCancel();
+            }
             mDeleted = deleted;
         }
     }
diff --git a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
index 64fff04..c306d04 100644
--- a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
+++ b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
@@ -104,7 +104,6 @@ public boolean onStopJob(JobParameters params) {
             CAT.d("Called onStopJob, job %d not found", params.getJobId());
         }
 
-
         // do not reschedule
         return false;
     }
diff --git a/library/src/test/java/com/evernote/android/job/JobCanceledTest.java b/library/src/test/java/com/evernote/android/job/JobCanceledTest.java
new file mode 100644
index 0000000..3b16487
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/JobCanceledTest.java
@@ -0,0 +1,106 @@
+package com.evernote.android.job;
+
+import android.support.annotation.NonNull;
+
+import com.evernote.android.job.test.JobRobolectricTestRunner;
+
+import org.junit.FixMethodOrder;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+import static org.assertj.core.api.Java6Assertions.assertThat;
+
+/**
+ * @author rwondratschek
+ */
+@RunWith(JobRobolectricTestRunner.class)
+@FixMethodOrder(MethodSorters.JVM)
+public class JobCanceledTest extends BaseJobManagerTest {
+
+    @Test
+    public void verifyOnCancelInvokedOnce() {
+        final AtomicInteger onCancelCalled = new AtomicInteger(0);
+        final Job job = new Job() {
+            @NonNull
+            @Override
+            protected Result onRunJob(@NonNull Params params) {
+                cancel();
+                cancel();
+                cancel();
+                return Result.SUCCESS;
+            }
+
+            @Override
+            protected void onCancel() {
+                onCancelCalled.incrementAndGet();
+            }
+        };
+
+        manager().addJobCreator(new JobCreator() {
+            @Override
+            public Job create(@NonNull String tag) {
+                return job;
+            }
+        });
+
+        final String tag = "something";
+        final int jobId = new JobRequest.Builder(tag)
+                .setExecutionWindow(200_000L, 400_000L)
+                .build()
+                .schedule();
+
+        executeJob(jobId, Job.Result.SUCCESS);
+
+        assertThat(manager().getAllJobRequestsForTag(tag)).isEmpty();
+
+        assertThat(manager().getJobRequest(jobId)).isNull();
+        assertThat(manager().getJobRequest(jobId, true)).isNull();
+
+        assertThat(job.isCanceled()).isTrue();
+        assertThat(onCancelCalled.get()).isEqualTo(1);
+    }
+
+    @Test
+    public void verifyOnCancelNotInvokedWhenFinished() {
+        final AtomicInteger onCancelCalled = new AtomicInteger(0);
+        final Job job = new Job() {
+            @NonNull
+            @Override
+            protected Result onRunJob(@NonNull Params params) {
+                return Result.SUCCESS;
+            }
+
+            @Override
+            protected void onCancel() {
+                onCancelCalled.incrementAndGet();
+            }
+        };
+
+        manager().addJobCreator(new JobCreator() {
+            @Override
+            public Job create(@NonNull String tag) {
+                return job;
+            }
+        });
+
+        final String tag = "something";
+        final int jobId = new JobRequest.Builder(tag)
+                .setExecutionWindow(200_000L, 400_000L)
+                .build()
+                .schedule();
+
+        executeJob(jobId, Job.Result.SUCCESS);
+        job.cancel();
+
+        assertThat(manager().getAllJobRequestsForTag(tag)).isEmpty();
+
+        assertThat(manager().getJobRequest(jobId)).isNull();
+        assertThat(manager().getJobRequest(jobId, true)).isNull();
+
+        assertThat(job.isCanceled()).isFalse();
+        assertThat(onCancelCalled.get()).isEqualTo(0);
+    }
+}
