diff --git a/CHANGELOG.md b/CHANGELOG.md
index 695c85d..8c2f6ae 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,6 @@
 ## 1.2.5
 * Handle platform bug where querying the network state throws an NPE internally, see #380
+* Fix database access on main thread, see #385
 
 ## 1.2.4 (2018-02-08)
 * Add `scheduleAsync()` to the `DailyJob` class for scheduling daily jobs asynchronously to avoid IO operations on the main thread, see #371
diff --git a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
index c306d04..9b0834a 100644
--- a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
+++ b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
@@ -52,35 +52,35 @@
 
     @Override
     public boolean onStartJob(final JobParameters params) {
-        final int jobId = params.getJobId();
-        final JobProxy.Common common = new JobProxy.Common(this, CAT, jobId);
-
-        // don't mark starting!
-        final JobRequest request = common.getPendingRequest(true, false);
-        if (request == null) {
-            return false;
-        }
-
-        if (request.isTransient()) {
-            if (TransientBundleCompat.startWithTransientBundle(this, request)) {
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-                    // should only happen during testing if an API is disabled
-                    CAT.d("PendingIntent for transient bundle is not null although running on O, using compat mode, request %s", request);
-                }
-                return false;
-
-            } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
-                CAT.d("PendingIntent for transient job %s expired", request);
-                return false;
-            }
-        }
-
-        common.markStarting(request);
-
         JobConfig.getExecutorService().execute(new Runnable() {
             @Override
             public void run() {
                 try {
+                    final int jobId = params.getJobId();
+                    final JobProxy.Common common = new JobProxy.Common(PlatformJobService.this, CAT, jobId);
+
+                    // don't mark starting!
+                    final JobRequest request = common.getPendingRequest(true, false);
+                    if (request == null) {
+                        return;
+                    }
+
+                    if (request.isTransient()) {
+                        if (TransientBundleCompat.startWithTransientBundle(PlatformJobService.this, request)) {
+                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                                // should only happen during testing if an API is disabled
+                                CAT.d("PendingIntent for transient bundle is not null although running on O, using compat mode, request %s", request);
+                            }
+                            return;
+
+                        } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
+                            CAT.d("PendingIntent for transient job %s expired", request);
+                            return;
+                        }
+                    }
+
+                    common.markStarting(request);
+
                     common.executeJobRequest(request, getTransientBundle(params));
 
                 } finally {
