diff --git a/CHANGELOG.md b/CHANGELOG.md
index b6e03bf..05be62b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,6 @@
 ## 1.3.0-alpha07
 * Handle crash when rescheduling jobs, see #510
+* Upgraded WorkManager
 
 ## 1.3.0-alpha06 (2018-07-24)
 * Find the right tag for the job with `WorkManager`, see #509
diff --git a/library/build.gradle b/library/build.gradle
index d646ec5..0ec5375 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -66,6 +66,10 @@ android {
             }
         }
     }
+
+    packagingOptions {
+        exclude 'META-INF/proguard/androidx-annotations.pro'
+    }
 }
 
 apply from: '../build-config/gradle-push.gradle'
\ No newline at end of file
diff --git a/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java b/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
index a11b9c2..3c51736 100644
--- a/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
+++ b/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
@@ -6,11 +6,13 @@
 
 import org.junit.rules.ExternalResource;
 
+import java.util.List;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 
 import androidx.work.Configuration;
 import androidx.work.WorkManager;
+import androidx.work.WorkStatus;
 import androidx.work.test.WorkManagerTestInitHelper;
 
 /**
@@ -19,24 +21,19 @@
 public class PlatformWorkManagerRule extends ExternalResource {
 
     private JobManager mManager;
-    private Executor mExecutor;
-    private boolean mAllowExecution;
 
     @Override
     protected void before() {
         Context context = InstrumentationRegistry.getTargetContext();
 
-        mAllowExecution = false;
-        mExecutor = new Executor() {
+        Executor executor = new Executor() {
             @Override
             public void execute(@NonNull Runnable command) {
-                if (mAllowExecution) {
-                    command.run();
-                }
+                command.run();
             }
         };
 
-        WorkManagerTestInitHelper.initializeTestWorkManager(context, new Configuration.Builder().setExecutor(mExecutor).build());
+        WorkManagerTestInitHelper.initializeTestWorkManager(context, new Configuration.Builder().setExecutor(executor).build());
 
         JobConfig.setJobReschedulePause(0, TimeUnit.MILLISECONDS);
         JobConfig.setSkipJobReschedule(true);
@@ -59,7 +56,11 @@ public JobManager getManager() {
         return mManager;
     }
 
-    public void setAllowExecution(boolean allowExecution) {
-        mAllowExecution = allowExecution;
+    public void runJob(String tag) {
+        WorkManagerTestInitHelper.getTestDriver().setInitialDelayMet(getWorkStatus(tag).get(0).getId());
+    }
+
+    public List<WorkStatus> getWorkStatus(String tag) {
+        return WorkManager.getInstance().synchronous().getStatusesByTagSync(tag);
     }
 }
diff --git a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
index d4fcc5d..7e3e1f3 100644
--- a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
@@ -21,7 +21,6 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import androidx.work.State;
-import androidx.work.WorkManager;
 import androidx.work.WorkStatus;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -65,13 +64,13 @@ public void testCancel() {
         assertThat(jobProxyWorkManager.isPlatformJobScheduled(request)).isTrue();
 
         String tag = JobProxyWorkManager.createTag(jobId);
-        List<WorkStatus> statuses = getWorkStatus(tag);
+        List<WorkStatus> statuses = mWorkManagerRule.getWorkStatus(tag);
 
         assertThat(statuses).isNotNull().hasSize(1);
         assertThat(statuses.get(0).getState()).isEqualTo(State.ENQUEUED);
 
         mWorkManagerRule.getManager().cancel(jobId);
-        assertThat(getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
+        assertThat(mWorkManagerRule.getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
         assertThat(jobProxyWorkManager.isPlatformJobScheduled(request)).isFalse();
     }
 
@@ -93,9 +92,9 @@ public void testTransientExtras() {
         mWorkManagerRule.getManager().cancel(jobId);
         assertThat(TransientBundleHolder.getBundle(jobId)).isNull();
 
-        mWorkManagerRule.setAllowExecution(true);
-
         jobId = builder.build().schedule();
+        mWorkManagerRule.runJob(JobProxyWorkManager.createTag(jobId));
+
         assertThat(TransientBundleHolder.getBundle(jobId)).isNull();
     }
 
@@ -123,15 +122,15 @@ public Job create(@NonNull String tag) {
             }
         });
 
-        mWorkManagerRule.setAllowExecution(true);
-
         int jobId = new JobRequest.Builder(TAG)
                 .setExecutionWindow(TimeUnit.HOURS.toMillis(4), TimeUnit.HOURS.toMillis(5))
                 .build()
                 .schedule();
 
         String tag = JobProxyWorkManager.createTag(jobId);
-        State state = getWorkStatus(tag).get(0).getState();
+        mWorkManagerRule.runJob(tag);
+
+        State state = mWorkManagerRule.getWorkStatus(tag).get(0).getState();
 
         assertThat(executed.get()).isTrue();
         assertThat(state).isEqualTo(State.SUCCEEDED);
@@ -149,16 +148,12 @@ private void testConstraints(JobRequest.Builder builder) {
                 .schedule();
 
         String tag = JobProxyWorkManager.createTag(jobId);
-        List<WorkStatus> statuses = getWorkStatus(tag);
+        List<WorkStatus> statuses = mWorkManagerRule.getWorkStatus(tag);
 
         assertThat(statuses).isNotNull().hasSize(1);
         assertThat(statuses.get(0).getState()).isEqualTo(State.ENQUEUED);
 
         mWorkManagerRule.getManager().cancelAllForTag(TAG);
-        assertThat(getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
-    }
-
-    private List<WorkStatus> getWorkStatus(String tag) {
-        return WorkManager.getInstance().synchronous().getStatusesByTagSync(tag);
+        assertThat(mWorkManagerRule.getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
     }
 }
