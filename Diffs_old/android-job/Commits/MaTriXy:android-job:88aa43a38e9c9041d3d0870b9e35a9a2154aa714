diff --git a/FAQ.md b/FAQ.md
index a91baa4..72b543a 100644
--- a/FAQ.md
+++ b/FAQ.md
@@ -3,23 +3,47 @@
 No, it's recommended to extract the logic from your job instead and to reuse it in a background thread.
 
 ```java
-public class JobSample extends Job {
+public class DemoSyncJob extends Job {
+
+    public static final String TAG = "job_demo_tag";
 
-    @NonNull
     @Override
-    protected Result onRunJob(Params params) {
-        runNow();
-        return Result.SUCCESS;
+    @NonNull
+    protected Result onRunJob(final Params params) {
+        boolean success = new DemoSyncEngine(getContext()).sync();
+        return success ? Result.SUCCESS : Result.FAILURE;
     }
+}
 
-    public static void runNow() {
-        new MyAwesomeTask().run();
+public class DemoSyncEngine {
+    public boolean sync() {
+        // do something fancy
+        return true;
     }
+}
 
-    public static class MyAwesomeTask {
-        public void run() {
-            // do stuff here
-        }
+public class SyncHistoryActivity extends Activity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_sync_history);
+
+        syncAsynchronously();
+    }
+
+    private void syncAsynchronously() {
+        new AsyncTask<Void, Void, Boolean>() {
+            @Override
+            protected Boolean doInBackground(Void... params) {
+                return new DemoSyncEngine(SyncHistoryActivity.this).sync();
+            }
+
+            @Override
+            protected void onPostExecute(Boolean aBoolean) {
+                refreshView();
+            }
+        }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
     }
 }
 ```
diff --git a/README.md b/README.md
index 9828da5..a21b1c7 100644
--- a/README.md
+++ b/README.md
@@ -55,8 +55,8 @@ public class DemoJobCreator implements JobCreator {
     @Override
     public Job create(String tag) {
         switch (tag) {
-            case DemoJob.TAG:
-                return new DemoJob();
+            case DemoSyncJob.TAG:
+                return new DemoSyncJob();
             default:
                 return null;
         }
@@ -67,22 +67,22 @@ public class DemoJobCreator implements JobCreator {
 After that you can start scheduling jobs.
 
 ```java
-public class DemoJob extends Job {
+public class DemoSyncJob extends Job {
 
     public static final String TAG = "job_demo_tag";
 
     @Override
     @NonNull
     protected Result onRunJob(Params params) {
-        // run your job
+        // run your job here
         return Result.SUCCESS;
     }
 
-public static void scheduleJob() {
-    new JobRequest.Builder(DemoJob.TAG)
-            .setExecutionWindow(30_000L, 40_000L)
-            .build()
-            .schedule();
+    public static void scheduleJob() {
+        new JobRequest.Builder(DemoSyncJob.TAG)
+                .setExecutionWindow(30_000L, 40_000L)
+                .build()
+                .schedule();
     }
 }
 ```
@@ -98,7 +98,7 @@ private void scheduleAdvancedJob() {
     PersistableBundleCompat extras = new PersistableBundleCompat();
     extras.putString("key", "Hello world");
 
-    int jobId = new JobRequest.Builder(DemoJob.TAG)
+    int jobId = new JobRequest.Builder(DemoSyncJob.TAG)
             .setExecutionWindow(30_000L, 40_000L)
             .setBackoffCriteria(5_000L, JobRequest.BackoffPolicy.EXPONENTIAL)
             .setRequiresCharging(true)
@@ -113,7 +113,7 @@ private void scheduleAdvancedJob() {
 }
 
 private void schedulePeriodicJob() {
-    int jobId = new JobRequest.Builder(DemoJob.TAG)
+    int jobId = new JobRequest.Builder(DemoSyncJob.TAG)
             .setPeriodic(TimeUnit.MINUTES.toMillis(15), TimeUnit.MINUTES.toMillis(5))
             .setPersisted(true)
             .build()
@@ -121,7 +121,7 @@ private void schedulePeriodicJob() {
 }
 
 private void scheduleExactJob() {
-    int jobId = new JobRequest.Builder(DemoJob.class)
+    int jobId = new JobRequest.Builder(DemoSyncJob.class)
             .setExact(20_000L)
             .setPersisted(true)
             .build()
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 765f342..344e5b3 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -24,7 +24,7 @@
         </activity>
 
         <activity
-            android:name=".FileActivity"
+            android:name=".SyncHistoryActivity"
             android:label="@string/demo"/>
 
     </application>
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoJob.java b/demo/src/main/java/com/evernote/android/job/demo/DemoJob.java
deleted file mode 100644
index cca572e..0000000
--- a/demo/src/main/java/com/evernote/android/job/demo/DemoJob.java
+++ /dev/null
@@ -1,109 +0,0 @@
-package com.evernote.android.job.demo;
-
-import android.content.Context;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.SystemClock;
-import android.support.annotation.NonNull;
-import android.widget.Toast;
-
-import com.evernote.android.job.Job;
-
-import net.vrallev.android.cat.Cat;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-import java.util.concurrent.CountDownLatch;
-
-/**
- * @author rwondratschek
- */
-public class DemoJob extends Job {
-
-    public static final String TAG = "job_demo_tag";
-
-    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("HH:mm:ss.SSS", Locale.getDefault());
-
-    public static File getTestFile(Context context) {
-        return new File(context.getCacheDir(), "TestFile.txt");
-    }
-
-    @Override
-    @NonNull
-    protected Result onRunJob(final Params params) {
-        SystemClock.sleep(3000);
-
-        if (!isCanceled()) {
-            writeIntoFile();
-        }
-
-        final CountDownLatch latch = new CountDownLatch(1);
-        new Handler(Looper.getMainLooper()).post(new Runnable() {
-            @Override
-            public void run() {
-                StringBuilder message = new StringBuilder()
-                        .append(isCanceled() ? "Canceled" : "Success")
-                        .append(' ')
-                        .append(params.getId())
-                        .append(' ')
-                        .append(params.getExtras().getString("key", "NOT_FOUND"))
-                        .append(" failed ")
-                        .append(params.getFailureCount());
-
-                Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
-                latch.countDown();
-            }
-        });
-
-        try {
-            latch.await();
-        } catch (InterruptedException e) {
-            Cat.e(e);
-        }
-
-        if (isCanceled()) {
-            return params.isPeriodic() ? Result.FAILURE : Result.RESCHEDULE;
-        } else {
-            return Result.SUCCESS;
-        }
-    }
-
-    private void writeIntoFile() {
-        String text = DATE_FORMAT.format(new Date()) + "\t\t" + getParams().getId() + "\t\t";
-        text += (hasInternetAccess() ? "has internet" : "no internet");
-        text += '\n';
-
-        try {
-            FileUtils.writeFile(getTestFile(getContext()), text, true);
-
-        } catch (IOException e) {
-            Cat.e(e);
-        }
-    }
-
-    private boolean hasInternetAccess() {
-        InputStream inputStream = null;
-        try {
-            inputStream = new URL("https://evernote.com/").openConnection().getInputStream();
-
-            byte[] buffer = new byte[128];
-            return inputStream.read(buffer) > 0;
-
-        } catch (IOException e) {
-            return false;
-
-        } finally {
-            if (inputStream != null) {
-                try {
-                    inputStream.close();
-                } catch (IOException ignored) {
-                }
-            }
-        }
-    }
-}
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java b/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
index 1a62b8f..69d81fd 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoJobCreator.java
@@ -11,8 +11,8 @@
     @Override
     public Job create(String tag) {
         switch (tag) {
-            case DemoJob.TAG:
-                return new DemoJob();
+            case DemoSyncJob.TAG:
+                return new DemoSyncJob();
             default:
                 return null;
         }
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncEngine.java b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncEngine.java
new file mode 100644
index 0000000..6423dc1
--- /dev/null
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncEngine.java
@@ -0,0 +1,68 @@
+package com.evernote.android.job.demo;
+
+import android.content.Context;
+import android.os.Looper;
+import android.os.NetworkOnMainThreadException;
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+
+import net.vrallev.android.cat.Cat;
+
+import java.io.File;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+/**
+ * @author rwondratschek
+ */
+public class DemoSyncEngine {
+
+    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("HH:mm:ss.SSS", Locale.getDefault());
+
+    private final Context mContext;
+
+    public DemoSyncEngine(Context context) {
+        mContext = context;
+    }
+
+    public boolean sync() {
+        // do something fancy
+
+        if (Looper.myLooper() == Looper.getMainLooper()) {
+            throw new NetworkOnMainThreadException();
+        }
+
+        SystemClock.sleep(1_000);
+        boolean success = Math.random() > 0.1;// successful 90% of the time
+        saveSuccess(success);
+        return success;
+    }
+
+    @NonNull
+    public String getSuccessHistory() {
+        try {
+            byte[] data = FileUtils.readFile(getSuccessFile());
+            if (data == null || data.length == 0) {
+                return "";
+            }
+            return new String(data);
+        } catch (IOException e) {
+            return "";
+        }
+    }
+
+    private void saveSuccess(boolean success) {
+        String text = DATE_FORMAT.format(new Date()) + "\t\t" + success + '\n';
+        try {
+            FileUtils.writeFile(getSuccessFile(), text, true);
+        } catch (IOException e) {
+            Cat.e(e);
+        }
+    }
+
+    private File getSuccessFile() {
+        return new File(mContext.getCacheDir(), "success.txt");
+    }
+}
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
new file mode 100644
index 0000000..55ef6a3
--- /dev/null
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
@@ -0,0 +1,20 @@
+package com.evernote.android.job.demo;
+
+import android.support.annotation.NonNull;
+
+import com.evernote.android.job.Job;
+
+/**
+ * @author rwondratschek
+ */
+public class DemoSyncJob extends Job {
+
+    public static final String TAG = "job_demo_tag";
+
+    @Override
+    @NonNull
+    protected Result onRunJob(final Params params) {
+        boolean success = new DemoSyncEngine(getContext()).sync();
+        return success ? Result.SUCCESS : Result.FAILURE;
+    }
+}
diff --git a/demo/src/main/java/com/evernote/android/job/demo/FileActivity.java b/demo/src/main/java/com/evernote/android/job/demo/FileActivity.java
deleted file mode 100644
index ae8c7ee..0000000
--- a/demo/src/main/java/com/evernote/android/job/demo/FileActivity.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.evernote.android.job.demo;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.widget.TextView;
-
-import net.vrallev.android.cat.Cat;
-
-import java.io.File;
-import java.io.IOException;
-
-/**
- * @author rwondratschek
- */
-public class FileActivity extends Activity {
-
-    private TextView mTextView;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_file);
-
-        mTextView = (TextView) findViewById(R.id.textView_log);
-        refreshView();
-    }
-
-    private void refreshView() {
-        File file = DemoJob.getTestFile(this);
-        if (!file.exists()) {
-            return;
-        }
-
-        try {
-            byte[] content = FileUtils.readFile(file);
-            if (content != null) {
-                mTextView.setText(new String(content, "UTF-8"));
-            }
-
-        } catch (IOException e) {
-            Cat.e(e);
-        }
-    }
-}
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index e49b63f..9ac2eec 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -180,8 +180,8 @@ public void onClick(View view) {
                 }
                 break;
 
-            case R.id.button_file_activity:
-                startActivity(new Intent(this, FileActivity.class));
+            case R.id.button_sync_history:
+                startActivity(new Intent(this, SyncHistoryActivity.class));
                 break;
         }
     }
@@ -190,7 +190,7 @@ private void testSimple() {
         PersistableBundleCompat extras = new PersistableBundleCompat();
         extras.putString("key", "Hello world");
 
-        mLastJobId = new JobRequest.Builder(DemoJob.TAG)
+        mLastJobId = new JobRequest.Builder(DemoSyncJob.TAG)
                 .setExecutionWindow(3_000L, 4_000L)
                 .setBackoffCriteria(5_000L, JobRequest.BackoffPolicy.LINEAR)
                 .setRequiresCharging(mRequiresCharging.isChecked())
@@ -209,7 +209,7 @@ private void testAllImpl() {
         for (JobApi api : JobApi.values()) {
             if (api.isSupported(this)) {
                 mJobManager.forceApi(api);
-                testPeriodic();
+                testSimple();
             } else {
                 Cat.w("%s is not supported", api);
             }
@@ -219,7 +219,7 @@ private void testAllImpl() {
     }
 
     private void testPeriodic() {
-        mLastJobId = new JobRequest.Builder(DemoJob.TAG)
+        mLastJobId = new JobRequest.Builder(DemoSyncJob.TAG)
                 .setPeriodic(JobRequest.MIN_INTERVAL, JobRequest.MIN_FLEX)
                 .setRequiresCharging(mRequiresCharging.isChecked())
                 .setRequiresDeviceIdle(mRequiresDeviceIdle.isChecked())
@@ -233,7 +233,7 @@ private void testExact() {
         PersistableBundleCompat extras = new PersistableBundleCompat();
         extras.putString("key", "Hello world");
 
-        mLastJobId = new JobRequest.Builder(DemoJob.TAG)
+        mLastJobId = new JobRequest.Builder(DemoSyncJob.TAG)
                 .setBackoffCriteria(5_000L, JobRequest.BackoffPolicy.EXPONENTIAL)
                 .setExtras(extras)
                 .setExact(20_000L)
diff --git a/demo/src/main/java/com/evernote/android/job/demo/SyncHistoryActivity.java b/demo/src/main/java/com/evernote/android/job/demo/SyncHistoryActivity.java
new file mode 100644
index 0000000..ab24129
--- /dev/null
+++ b/demo/src/main/java/com/evernote/android/job/demo/SyncHistoryActivity.java
@@ -0,0 +1,62 @@
+package com.evernote.android.job.demo;
+
+import android.app.Activity;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.TextView;
+
+/**
+ * @author rwondratschek
+ */
+public class SyncHistoryActivity extends Activity {
+
+    private TextView mTextView;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_sync_history);
+
+        mTextView = (TextView) findViewById(R.id.textView_log);
+        refreshView();
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        super.onCreateOptionsMenu(menu);
+        getMenuInflater().inflate(R.menu.activity_sync_history, menu);
+        return true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case R.id.action_sync_now:
+                syncAsynchronously();
+                return true;
+
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    private void syncAsynchronously() {
+        new AsyncTask<Void, Void, Boolean>() {
+            @Override
+            protected Boolean doInBackground(Void... params) {
+                return new DemoSyncEngine(SyncHistoryActivity.this).sync();
+            }
+
+            @Override
+            protected void onPostExecute(Boolean aBoolean) {
+                refreshView();
+            }
+        }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
+    }
+
+    private void refreshView() {
+        mTextView.setText(new DemoSyncEngine(this).getSuccessHistory());
+    }
+}
diff --git a/demo/src/main/res/layout/activity_main.xml b/demo/src/main/res/layout/activity_main.xml
index 4eab56d..4aa67cb 100644
--- a/demo/src/main/res/layout/activity_main.xml
+++ b/demo/src/main/res/layout/activity_main.xml
@@ -97,12 +97,12 @@
             android:layout_height="wrap_content" />
 
         <Button
-            android:id="@+id/button_file_activity"
+            android:id="@+id/button_sync_history"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_gravity="center_horizontal"
             android:layout_marginTop="12dp"
             android:onClick="onClick"
-            android:text="Open file activity"/>
+            android:text="Open sync history"/>
     </LinearLayout>
 </ScrollView>
\ No newline at end of file
diff --git a/demo/src/main/res/layout/activity_file.xml b/demo/src/main/res/layout/activity_sync_history.xml
similarity index 100%
rename from demo/src/main/res/layout/activity_file.xml
rename to demo/src/main/res/layout/activity_sync_history.xml
diff --git a/demo/src/main/res/menu/activity_sync_history.xml b/demo/src/main/res/menu/activity_sync_history.xml
new file mode 100644
index 0000000..21267e8
--- /dev/null
+++ b/demo/src/main/res/menu/activity_sync_history.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+      xmlns:app="http://schemas.android.com/apk/res-auto"
+      xmlns:tools="http://schemas.android.com/tools"
+      tools:ignore="HardcodedText">
+
+    <item
+        android:id="@+id/action_sync_now"
+        android:showAsAction="always"
+        android:title="Sync now"
+        app:showAsAction="always"
+        tools:ignore="AlwaysShowAction,AppCompatResource"/>
+</menu>
\ No newline at end of file
