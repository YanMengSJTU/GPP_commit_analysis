diff --git a/library/src/main/java/com/evernote/android/job/JobConfig.java b/library/src/main/java/com/evernote/android/job/JobConfig.java
index b8e4e04..1ffa5d3 100644
--- a/library/src/main/java/com/evernote/android/job/JobConfig.java
+++ b/library/src/main/java/com/evernote/android/job/JobConfig.java
@@ -235,7 +235,7 @@ public static int getJobIdOffset() {
      */
     public static void setJobIdOffset(int jobIdOffset) {
         JobPreconditions.checkArgumentNonnegative(jobIdOffset, "offset can't be negative");
-        if (jobIdOffset > Integer.MAX_VALUE - 500) {
+        if (jobIdOffset > JobIds.RESERVED_JOB_ID_RANGE_START - 500) {
             throw new IllegalArgumentException("offset is too close to Integer.MAX_VALUE");
         }
 
diff --git a/library/src/main/java/com/evernote/android/job/JobIds.java b/library/src/main/java/com/evernote/android/job/JobIds.java
new file mode 100644
index 0000000..344c106
--- /dev/null
+++ b/library/src/main/java/com/evernote/android/job/JobIds.java
@@ -0,0 +1,16 @@
+package com.evernote.android.job;
+
+public class JobIds {
+
+    // close to Integer.MAX_VALUE; jobIds in this range are reserved for internal purposes
+    public static final int RESERVED_JOB_ID_RANGE_START = 2147480000;
+
+    // fixed and unique jobIds for internal jobs
+    public static final int JOB_ID_JOB_RESCHEDULE_SERVICE = 2147480000;
+    public static final int JOB_ID_PLATFORM_ALARM_SERVICE = 2147480001;
+
+    private JobIds() {
+        // do not instantiate; holder for constants
+    }
+
+}
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index d1d2798..7336aee 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -27,11 +27,9 @@
 
     private static final CatLog CAT = BuildConfig.DEBUG ? new JobCat("JobRescheduleService") : new CatEmpty();
 
-    /*package*/ static final int JOB_ID = 2147480000; // close to Integer.MAX_VALUE to avoid conflict with real jobs
-
     /*package*/ static void startService(Context context) {
         try {
-            enqueueWork(context, JobRescheduleService.class, JOB_ID, new Intent());
+            enqueueWork(context, JobRescheduleService.class, JobIds.JOB_ID_JOB_RESCHEDULE_SERVICE, new Intent());
             latch = new CountDownLatch(1);
         } catch (Exception e) {
             /*
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index a5fd07b..ed9f123 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -234,7 +234,7 @@ public synchronized int nextJobId() {
         int id = mJobCounter.incrementAndGet();
 
         int offset = JobConfig.getJobIdOffset();
-        if (id < offset) {
+        if (id < offset || id >= JobIds.RESERVED_JOB_ID_RANGE_START) {
             /*
              * An overflow occurred. It'll happen rarely, but just in case reset the ID and start from scratch.
              * Existing jobs will be treated as orphaned and will be overwritten.
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
index ce905ed..b47d889 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
@@ -33,6 +33,7 @@
 import android.support.annotation.Nullable;
 import android.support.v4.app.JobIntentService;
 
+import com.evernote.android.job.JobIds;
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.util.JobCat;
@@ -45,7 +46,6 @@
 public final class PlatformAlarmService extends JobIntentService {
 
     private static final CatLog CAT = new JobCat("PlatformAlarmService");
-    private static final int JOB_ID = 2147480001; // close to Integer.MAX_VALUE to avoid conflict with real jobs
 
     public static void start(Context context, int jobId, @Nullable Bundle transientExtras) {
         Intent intent = new Intent();
@@ -54,7 +54,7 @@ public static void start(Context context, int jobId, @Nullable Bundle transientE
             intent.putExtra(PlatformAlarmReceiver.EXTRA_TRANSIENT_EXTRAS, transientExtras);
         }
 
-        enqueueWork(context, PlatformAlarmService.class, JOB_ID, intent);
+        enqueueWork(context, PlatformAlarmService.class, JobIds.JOB_ID_PLATFORM_ALARM_SERVICE, intent);
     }
 
     @Override
