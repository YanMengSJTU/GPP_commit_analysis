diff --git a/library/src/main/java/com/evernote/android/job/DailyJob.java b/library/src/main/java/com/evernote/android/job/DailyJob.java
index df8a5da..1054c47 100644
--- a/library/src/main/java/com/evernote/android/job/DailyJob.java
+++ b/library/src/main/java/com/evernote/android/job/DailyJob.java
@@ -2,6 +2,7 @@
 
 import android.os.PowerManager.WakeLock;
 import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
 import android.support.annotation.WorkerThread;
 
 import com.evernote.android.job.util.JobCat;
@@ -23,8 +24,10 @@
 
     private static final CatLog CAT = new JobCat("DailyJob");
 
-    private static final String EXTRA_START_MS = "EXTRA_START_MS";
-    private static final String EXTRA_END_MS = "EXTRA_END_MS";
+    @VisibleForTesting
+    /*package*/ static final String EXTRA_START_MS = "EXTRA_START_MS";
+    @VisibleForTesting
+    /*package*/ static final String EXTRA_END_MS = "EXTRA_END_MS";
 
     private static final long DAY = TimeUnit.DAYS.toMillis(1);
 
@@ -55,12 +58,13 @@
      * @param baseBuilder The builder of your daily job.
      * @param startMs The time of the day when the job is allowed to start in milliseconds.
      * @param endMs The time of the day when the job is not allowed to start later in milliseconds.
+     * @return The unique ID for this job.
      */
-    public static void schedule(@NonNull JobRequest.Builder baseBuilder, long startMs, long endMs) {
-        schedule(baseBuilder, true, startMs, endMs);
+    public static int schedule(@NonNull JobRequest.Builder baseBuilder, long startMs, long endMs) {
+        return schedule(baseBuilder, true, startMs, endMs);
     }
 
-    private static void schedule(@NonNull JobRequest.Builder builder, boolean newJob, long startMs, long endMs) {
+    private static int schedule(@NonNull JobRequest.Builder builder, boolean newJob, long startMs, long endMs) {
         if (startMs >= DAY || endMs >= DAY || startMs < 0 || endMs < 0) {
             throw new IllegalArgumentException("startMs or endMs should be less than one day (in milliseconds)");
         }
@@ -74,7 +78,8 @@ private static void schedule(@NonNull JobRequest.Builder builder, boolean newJob
         long startDelay = TimeUnit.SECONDS.toMillis(60 - second)
                 + TimeUnit.MINUTES.toMillis(60 - minute)
                 + TimeUnit.HOURS.toMillis((24 - hour) % 24)
-                - TimeUnit.HOURS.toMillis(1); // subtract because we're adding minutes and seconds
+                - TimeUnit.HOURS.toMillis(1)  // subtract because we're adding minutes and seconds
+                + TimeUnit.DAYS.toMillis(1); // add one day, otherwise result could be negative, e.g. if startMs is 0 and time is 00:08
 
         startDelay = (startDelay + startMs) % TimeUnit.DAYS.toMillis(1);
 
@@ -84,6 +89,12 @@ private static void schedule(@NonNull JobRequest.Builder builder, boolean newJob
         }
         long endDelay = startDelay + (endMs - startMs);
 
+        PersistableBundleCompat extras = new PersistableBundleCompat();
+        extras.putLong(EXTRA_START_MS, startMs);
+        extras.putLong(EXTRA_END_MS, endMs);
+
+        builder.addExtras(extras);
+
         JobRequest request = builder
                 .setExecutionWindow(startDelay, endDelay)
                 .setUpdateCurrent(newJob)
@@ -96,7 +107,7 @@ private static void schedule(@NonNull JobRequest.Builder builder, boolean newJob
             throw new IllegalArgumentException("Daily jobs cannot enforce requirements");
         }
 
-        request.schedule();
+        return request.schedule();
     }
 
     @NonNull
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 42a7ad9..fb85a75 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -738,6 +738,22 @@ public Builder setExtras(@Nullable PersistableBundleCompat extras) {
             return this;
         }
 
+        /**
+         * Adds optional extras. This is persisted, so only primitive types are allowed. This method overrides
+         * values with the same keys inside of {@code extras}, which were set before.
+         *
+         * @param extras Bundle containing extras which you can retrieve with {@link Job.Params#getExtras()}.
+         */
+        public Builder addExtras(@NonNull PersistableBundleCompat extras) {
+            if (mExtras == null) {
+                mExtras = extras;
+            } else {
+                mExtras.putAll(extras);
+            }
+            mExtrasXml = null;
+            return this;
+        }
+
         /**
          * It's possible to set several requirements for a job, however, not all of them need to
          * be considered by the underlying {@link JobApi}. If the requirements are enforced, then
diff --git a/library/src/test/java/com/evernote/android/job/DailyJobTest.java b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
index b8d383c..f2dab60 100644
--- a/library/src/test/java/com/evernote/android/job/DailyJobTest.java
+++ b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
@@ -2,6 +2,7 @@
 
 import com.evernote.android.job.test.DummyJobs;
 import com.evernote.android.job.test.JobRobolectricTestRunner;
+import com.evernote.android.job.util.support.PersistableBundleCompat;
 
 import org.junit.FixMethodOrder;
 import org.junit.Test;
@@ -69,4 +70,37 @@ public void verifyScheduledAtMidnight() {
         DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessJob.class), start, end);
         assertThat(manager().getAllJobRequests()).hasSize(1);
     }
+
+    @Test
+    public void verifyHasExtras() {
+        long start = 0;
+        long end = 1L;
+
+        int jobId = DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessJob.class), start, end);
+        JobRequest request = manager().getJobRequest(jobId);
+
+        assertThat(request).isNotNull();
+        assertThat(request.getExtras().getLong(DailyJob.EXTRA_START_MS, -1)).isEqualTo(0L);
+        assertThat(request.getExtras().getLong(DailyJob.EXTRA_END_MS, -1)).isEqualTo(1L);
+        assertThat(request.getExtras().size()).isEqualTo(2);
+    }
+
+    @Test
+    public void verifyExtraValuesAreOverwritten() {
+        long start = 0;
+        long end = 1L;
+
+        PersistableBundleCompat extras = new PersistableBundleCompat();
+        extras.putLong("something", 9L); // make sure this value is not overwritten
+        extras.putLong(DailyJob.EXTRA_START_MS, 9L); // make sure they're overwritten
+        extras.putLong(DailyJob.EXTRA_END_MS, 9L);
+
+        int jobId = DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessJob.class).setExtras(extras), start, end);
+        JobRequest request = manager().getJobRequest(jobId);
+
+        assertThat(request).isNotNull();
+        assertThat(request.getExtras().getLong(DailyJob.EXTRA_START_MS, -1)).isEqualTo(0L);
+        assertThat(request.getExtras().getLong(DailyJob.EXTRA_END_MS, -1)).isEqualTo(1L);
+        assertThat(request.getExtras().size()).isEqualTo(3);
+    }
 }
