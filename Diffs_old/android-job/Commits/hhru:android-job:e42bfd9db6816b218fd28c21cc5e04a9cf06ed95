diff --git a/library/src/main/java/android/support/v4/app/SafeJobIntentService.java b/library/src/main/java/android/support/v4/app/SafeJobIntentService.java
new file mode 100644
index 0000000..4811c8f
--- /dev/null
+++ b/library/src/main/java/android/support/v4/app/SafeJobIntentService.java
@@ -0,0 +1,33 @@
+package android.support.v4.app;
+
+import android.os.Build;
+import android.support.annotation.RestrictTo;
+
+/**
+ * @author rwondratschek
+ */
+@RestrictTo(RestrictTo.Scope.LIBRARY)
+public abstract class SafeJobIntentService extends JobIntentService {
+
+    @Override
+    GenericWorkItem dequeueWork() {
+        try {
+            return super.dequeueWork();
+        } catch (SecurityException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        // override mJobImpl with safe class to ignore SecurityException
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            mJobImpl = new SafeJobServiceEngineImpl(this);
+        } else {
+            mJobImpl = null;
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/library/src/main/java/android/support/v4/app/SafeJobServiceEngineImpl.java b/library/src/main/java/android/support/v4/app/SafeJobServiceEngineImpl.java
new file mode 100644
index 0000000..bed6184
--- /dev/null
+++ b/library/src/main/java/android/support/v4/app/SafeJobServiceEngineImpl.java
@@ -0,0 +1,116 @@
+package android.support.v4.app;
+
+import android.app.job.JobParameters;
+import android.app.job.JobServiceEngine;
+import android.app.job.JobWorkItem;
+import android.content.Intent;
+import android.os.IBinder;
+import android.support.annotation.RequiresApi;
+import android.util.Log;
+
+/**
+ * Implementation of a JobServiceEngine for interaction with JobIntentService.
+ */
+@RequiresApi(26)
+public class SafeJobServiceEngineImpl extends JobServiceEngine
+        implements JobIntentService.CompatJobEngine {
+
+    static final String TAG = "JobServiceEngineImpl";
+
+    static final boolean DEBUG = false;
+
+    final JobIntentService mService;
+
+    final Object mLock = new Object();
+
+    JobParameters mParams;
+
+    final class WrapperWorkItem implements JobIntentService.GenericWorkItem {
+
+        final JobWorkItem mJobWork;
+
+        WrapperWorkItem(JobWorkItem jobWork) {
+            mJobWork = jobWork;
+        }
+
+        @Override
+        public Intent getIntent() {
+            return mJobWork.getIntent();
+        }
+
+        @Override
+        public void complete() {
+            synchronized (mLock) {
+                if (mParams != null) {
+                    try {
+                        mParams.completeWork(mJobWork);
+                    } catch (SecurityException se) {
+                        // ignore
+                        se.printStackTrace();
+                    }
+                }
+            }
+        }
+    }
+
+    SafeJobServiceEngineImpl(JobIntentService service) {
+        super(service);
+        mService = service;
+    }
+
+    @Override
+    public IBinder compatGetBinder() {
+        return getBinder();
+    }
+
+    @Override
+    public boolean onStartJob(JobParameters params) {
+        if (DEBUG) {
+            Log.d(TAG, "onStartJob: " + params);
+        }
+        mParams = params;
+        // We can now start dequeuing work!
+        mService.ensureProcessorRunningLocked(false);
+        return true;
+    }
+
+    @Override
+    public boolean onStopJob(JobParameters params) {
+        if (DEBUG) {
+            Log.d(TAG, "onStartJob: " + params);
+        }
+        boolean result = mService.doStopCurrentWork();
+        synchronized (mLock) {
+            // Once we return, the job is stopped, so its JobParameters are no
+            // longer valid and we should not be doing anything with them.
+            mParams = null;
+        }
+        return result;
+    }
+
+    /**
+     * Dequeue some work.
+     */
+    @Override
+    public JobIntentService.GenericWorkItem dequeueWork() {
+        JobWorkItem work = null;
+        synchronized (mLock) {
+            if (mParams == null) {
+                return null;
+            }
+            try {
+                work = mParams.dequeueWork();
+            } catch (SecurityException se) {
+                //ignore
+                se.printStackTrace();
+            }
+        }
+        if (work != null) {
+            work.getIntent().setExtrasClassLoader(mService.getClassLoader());
+            return new WrapperWorkItem(work);
+        } else {
+            return null;
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index 1a6b500..334ce8c 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -15,14 +15,14 @@
  */
 package com.evernote.android.job;
 
+import com.evernote.android.job.util.JobCat;
+
 import android.content.Context;
 import android.content.Intent;
 import android.os.SystemClock;
 import android.support.annotation.NonNull;
 import android.support.annotation.VisibleForTesting;
-import android.support.v4.app.JobIntentService;
-
-import com.evernote.android.job.util.JobCat;
+import android.support.v4.app.SafeJobIntentService;
 
 import java.util.Collection;
 import java.util.Set;
@@ -35,13 +35,15 @@
  *
  * @author rwondratschek
  */
-public final class JobRescheduleService extends JobIntentService {
+public final class JobRescheduleService extends SafeJobIntentService {
 
     private static final JobCat CAT = new JobCat("JobRescheduleService", BuildConfig.DEBUG);
 
-    /*package*/ static void startService(Context context) {
+    /*package*/
+    static void startService(Context context) {
         try {
-            enqueueWork(context, JobRescheduleService.class, JobIdsInternal.JOB_ID_JOB_RESCHEDULE_SERVICE, new Intent());
+            enqueueWork(context, JobRescheduleService.class, JobIdsInternal.JOB_ID_JOB_RESCHEDULE_SERVICE,
+                    new Intent());
             latch = new CountDownLatch(1);
         } catch (Exception e) {
             /*
@@ -94,7 +96,7 @@ protected void onHandleWork(@NonNull Intent intent) {
     }
 
     @SuppressWarnings("UnusedReturnValue")
-    /*package*/ int rescheduleJobs(JobManager manager) {
+        /*package*/ int rescheduleJobs(JobManager manager) {
         return rescheduleJobs(manager, manager.getAllJobRequests(null, true, true));
     }
 
@@ -130,4 +132,5 @@ protected void onHandleWork(@NonNull Intent intent) {
         }
         return rescheduledCount;
     }
-}
+
+}
\ No newline at end of file
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
index 4d26f12..b914330 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
@@ -15,23 +15,23 @@
  */
 package com.evernote.android.job.v14;
 
+import com.evernote.android.job.JobIdsInternal;
+import com.evernote.android.job.JobProxy;
+import com.evernote.android.job.JobRequest;
+import com.evernote.android.job.util.JobCat;
+
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.app.JobIntentService;
-
-import com.evernote.android.job.JobIdsInternal;
-import com.evernote.android.job.JobProxy;
-import com.evernote.android.job.JobRequest;
-import com.evernote.android.job.util.JobCat;
+import android.support.v4.app.SafeJobIntentService;
 
 /**
  * @author rwondratschek
  */
-public final class PlatformAlarmService extends JobIntentService {
+public final class PlatformAlarmService extends SafeJobIntentService {
 
     private static final JobCat CAT = new JobCat("PlatformAlarmService");
 
@@ -50,7 +50,8 @@ protected void onHandleWork(@NonNull Intent intent) {
         runJob(intent, this, CAT);
     }
 
-    /*package*/ static void runJob(@Nullable Intent intent, @NonNull Service service, @NonNull JobCat cat) {
+    /*package*/
+    static void runJob(@Nullable Intent intent, @NonNull Service service, @NonNull JobCat cat) {
         if (intent == null) {
             cat.i("Delivered intent is null");
             return;
