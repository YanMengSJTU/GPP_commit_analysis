diff --git a/library/src/main/java/com/evernote/android/job/JobConfig.java b/library/src/main/java/com/evernote/android/job/JobConfig.java
index 1ffa5d3..f6873d0 100644
--- a/library/src/main/java/com/evernote/android/job/JobConfig.java
+++ b/library/src/main/java/com/evernote/android/job/JobConfig.java
@@ -235,7 +235,7 @@ public static int getJobIdOffset() {
      */
     public static void setJobIdOffset(int jobIdOffset) {
         JobPreconditions.checkArgumentNonnegative(jobIdOffset, "offset can't be negative");
-        if (jobIdOffset > JobIds.RESERVED_JOB_ID_RANGE_START - 500) {
+        if (jobIdOffset > JobIdsInternal.RESERVED_JOB_ID_RANGE_START - 500) {
             throw new IllegalArgumentException("offset is too close to Integer.MAX_VALUE");
         }
 
diff --git a/library/src/main/java/com/evernote/android/job/JobIds.java b/library/src/main/java/com/evernote/android/job/JobIds.java
deleted file mode 100644
index 344c106..0000000
--- a/library/src/main/java/com/evernote/android/job/JobIds.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.evernote.android.job;
-
-public class JobIds {
-
-    // close to Integer.MAX_VALUE; jobIds in this range are reserved for internal purposes
-    public static final int RESERVED_JOB_ID_RANGE_START = 2147480000;
-
-    // fixed and unique jobIds for internal jobs
-    public static final int JOB_ID_JOB_RESCHEDULE_SERVICE = 2147480000;
-    public static final int JOB_ID_PLATFORM_ALARM_SERVICE = 2147480001;
-
-    private JobIds() {
-        // do not instantiate; holder for constants
-    }
-
-}
diff --git a/library/src/main/java/com/evernote/android/job/JobIdsInternal.java b/library/src/main/java/com/evernote/android/job/JobIdsInternal.java
new file mode 100644
index 0000000..d63be1e
--- /dev/null
+++ b/library/src/main/java/com/evernote/android/job/JobIdsInternal.java
@@ -0,0 +1,25 @@
+package com.evernote.android.job;
+
+/**
+ * Constants for jobIds reserved for internal jobs.
+ *
+ * There are some internal jobs needing fixed platform jobIds, which should not conflict with those chosen dynamically
+ * for jobs scheduled with the {@link JobManager}.
+ */
+public final class JobIdsInternal {
+
+    /**
+     * JobIds between this and Integer.MAX_VALUE are reserved for internal purposes.
+     */
+    // close to Integer.MAX_VALUE
+    public static final int RESERVED_JOB_ID_RANGE_START = 2147480000;
+
+    // fixed and unique jobIds for internal jobs
+    public static final int JOB_ID_JOB_RESCHEDULE_SERVICE = 2147480000;
+    public static final int JOB_ID_PLATFORM_ALARM_SERVICE = 2147480001;
+
+    private JobIdsInternal() {
+        // do not instantiate; holder for constants
+    }
+
+}
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index 7336aee..6c370c8 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -29,7 +29,7 @@
 
     /*package*/ static void startService(Context context) {
         try {
-            enqueueWork(context, JobRescheduleService.class, JobIds.JOB_ID_JOB_RESCHEDULE_SERVICE, new Intent());
+            enqueueWork(context, JobRescheduleService.class, JobIdsInternal.JOB_ID_JOB_RESCHEDULE_SERVICE, new Intent());
             latch = new CountDownLatch(1);
         } catch (Exception e) {
             /*
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index ed9f123..82f3514 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -58,7 +58,7 @@
 
     private static final CatLog CAT = new JobCat("JobStorage");
 
-    private static final String JOB_ID_COUNTER = "JOB_ID_COUNTER_v2";
+    public static final String JOB_ID_COUNTER = "JOB_ID_COUNTER_v2";
     private static final String FAILED_DELETE_IDS = "FAILED_DELETE_IDS";
 
     public static final String PREF_FILE_NAME = "evernote_jobs";
@@ -234,7 +234,7 @@ public synchronized int nextJobId() {
         int id = mJobCounter.incrementAndGet();
 
         int offset = JobConfig.getJobIdOffset();
-        if (id < offset || id >= JobIds.RESERVED_JOB_ID_RANGE_START) {
+        if (id < offset || id >= JobIdsInternal.RESERVED_JOB_ID_RANGE_START) {
             /*
              * An overflow occurred. It'll happen rarely, but just in case reset the ID and start from scratch.
              * Existing jobs will be treated as orphaned and will be overwritten.
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
index b47d889..819b03a 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
@@ -33,7 +33,7 @@
 import android.support.annotation.Nullable;
 import android.support.v4.app.JobIntentService;
 
-import com.evernote.android.job.JobIds;
+import com.evernote.android.job.JobIdsInternal;
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.util.JobCat;
@@ -54,7 +54,7 @@ public static void start(Context context, int jobId, @Nullable Bundle transientE
             intent.putExtra(PlatformAlarmReceiver.EXTRA_TRANSIENT_EXTRAS, transientExtras);
         }
 
-        enqueueWork(context, PlatformAlarmService.class, JobIds.JOB_ID_PLATFORM_ALARM_SERVICE, intent);
+        enqueueWork(context, PlatformAlarmService.class, JobIdsInternal.JOB_ID_PLATFORM_ALARM_SERVICE, intent);
     }
 
     @Override
diff --git a/library/src/test/java/com/evernote/android/job/JobConfigTest.java b/library/src/test/java/com/evernote/android/job/JobConfigTest.java
index 7faaff3..3fb8118 100644
--- a/library/src/test/java/com/evernote/android/job/JobConfigTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobConfigTest.java
@@ -145,7 +145,7 @@ public void verifyJobIdOffset() {
 
     @Test(expected = IllegalArgumentException.class)
     public void verifyJobIdOffsetUpperBound() {
-        JobConfig.setJobIdOffset(Integer.MAX_VALUE - 500 + 1);
+        JobConfig.setJobIdOffset(2147480000 - 500 + 1);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -156,6 +156,6 @@ public void verifyJobIdOffsetLowerBound() {
     @Test
     public void verifyJobIdOffsetBounds() {
         JobConfig.setJobIdOffset(0);
-        JobConfig.setJobIdOffset(Integer.MAX_VALUE - 500);
+        JobConfig.setJobIdOffset(2147480000 - 500);
     }
 }
diff --git a/library/src/test/java/com/evernote/android/job/JobManagerTest.java b/library/src/test/java/com/evernote/android/job/JobManagerTest.java
index 48e3974..d4f511c 100644
--- a/library/src/test/java/com/evernote/android/job/JobManagerTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobManagerTest.java
@@ -250,6 +250,19 @@ public void testJobIdIncremented() throws Exception {
         assertThat(manager().getJobStorage().getMaxJobId()).isEqualTo(1);
     }
 
+    @Test
+    public void testJobIdRollover() throws Exception {
+        JobConfig.setJobIdOffset(10);
+
+        context().getSharedPreferences(JobStorage.PREF_FILE_NAME, Context.MODE_PRIVATE).edit()
+                .putInt(JobStorage.JOB_ID_COUNTER, JobIdsInternal.RESERVED_JOB_ID_RANGE_START - 2)
+                .apply();
+
+        assertThat(manager().getJobStorage().nextJobId()).isEqualTo(JobIdsInternal.RESERVED_JOB_ID_RANGE_START - 1);
+        assertThat(manager().getJobStorage().nextJobId()).isEqualTo(11);
+        assertThat(manager().getJobStorage().nextJobId()).isEqualTo(12);
+    }
+
     @SuppressWarnings("ConstantConditions")
     @Test
     public void testCancelAndEdit() {
