diff --git a/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java b/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
index 1702748..a11b9c2 100644
--- a/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
+++ b/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
@@ -1,14 +1,16 @@
 package com.evernote.android.job;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.support.test.InstrumentationRegistry;
 
 import org.junit.rules.ExternalResource;
 
+import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 
 import androidx.work.Configuration;
-import androidx.work.impl.WorkManagerImpl;
+import androidx.work.WorkManager;
 import androidx.work.test.WorkManagerTestInitHelper;
 
 /**
@@ -17,11 +19,25 @@
 public class PlatformWorkManagerRule extends ExternalResource {
 
     private JobManager mManager;
+    private Executor mExecutor;
+    private boolean mAllowExecution;
 
     @Override
     protected void before() {
         Context context = InstrumentationRegistry.getTargetContext();
 
+        mAllowExecution = false;
+        mExecutor = new Executor() {
+            @Override
+            public void execute(@NonNull Runnable command) {
+                if (mAllowExecution) {
+                    command.run();
+                }
+            }
+        };
+
+        WorkManagerTestInitHelper.initializeTestWorkManager(context, new Configuration.Builder().setExecutor(mExecutor).build());
+
         JobConfig.setJobReschedulePause(0, TimeUnit.MILLISECONDS);
         JobConfig.setSkipJobReschedule(true);
         JobConfig.forceApi(JobApi.WORK_MANAGER);
@@ -36,18 +52,14 @@ protected void after() {
         mManager.destroy();
 
         JobConfig.reset();
-        resetWorkManager();
-    }
-
-    public void resetWorkManager() {
-        WorkManagerImpl.setDelegate(new WorkManagerImpl(InstrumentationRegistry.getTargetContext(), new Configuration.Builder().build()));
-    }
-
-    public void initTestWorkManager() {
-        WorkManagerTestInitHelper.initializeTestWorkManager(InstrumentationRegistry.getTargetContext());
+        WorkManager.getInstance().cancelAllWork();
     }
 
     public JobManager getManager() {
         return mManager;
     }
+
+    public void setAllowExecution(boolean allowExecution) {
+        mAllowExecution = allowExecution;
+    }
 }
diff --git a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
index 9279f1e..225d35c 100644
--- a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
@@ -99,7 +99,7 @@ public void testTransientExtras() {
         mWorkManagerRule.getManager().cancel(jobId);
         assertThat(TransientBundleHolder.getBundle(jobId)).isNull();
 
-        mWorkManagerRule.initTestWorkManager();
+        mWorkManagerRule.setAllowExecution(true);
 
         jobId = builder.build().schedule();
         assertThat(TransientBundleHolder.getBundle(jobId)).isNull();
@@ -129,7 +129,7 @@ public Job create(@NonNull String tag) {
             }
         });
 
-        mWorkManagerRule.initTestWorkManager();
+        mWorkManagerRule.setAllowExecution(true);
 
         int jobId = new JobRequest.Builder(TAG)
                 .setExecutionWindow(TimeUnit.HOURS.toMillis(4), TimeUnit.HOURS.toMillis(5))
