diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8379988..8702aa3 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,6 +3,7 @@
 * Use own internal monitor for synchronizing access to variables in order to avoid deadlocks when using the library, see #414
 * Cleanup jobs in the database if no job creator returns an instance during execution, see #413
 * Make sure that the `JobManager` is created when canceling jobs, see #442
+* Don't crash on Android 4.X with the recent Google Play Services, see #415
 * Explain the relation to `WorkManager`, see [here](https://github.com/evernote/android-job#WorkManager)
 
 ## 1.2.5 (2018-03-19)
diff --git a/README.md b/README.md
index acc5d9e..7608ce5 100644
--- a/README.md
+++ b/README.md
@@ -151,12 +151,21 @@ See the [FAQ](https://github.com/evernote/android-job/wiki/FAQ) in the [Wiki](ht
 
 ## Google Play Services
 
-This library does **not** automatically bundle the Google Play Services, because the dependency is really heavy and not all apps want to include them. That's why you need to add the dependency manually, if you want that the library uses the `GcmNetworkManager` on Android 4.
+This library does **not** automatically bundle the Google Play Services, because the dependency is really heavy and not all apps want to include them. That's why you need to add the dependency manually, if you want that the library uses the `GcmNetworkManager` on Android 4, then include the following dependency.
 ```groovy
 dependencies {
     compile "com.google.android.gms:play-services-gcm:latest_version"
 }
 ```
+Because of recent changes in the support library, you must turn on the service manually in your `AndroidManifest.xml`
+```xml
+<service
+    android:name="com.evernote.android.job.gcm.PlatformGcmService"
+    android:enabled="true"
+    tools:replace="android:enabled"/>
+```
+If you don't turn on the service, the library will always use the `AlarmManager` on Android 4.x.
+
 Crashes after removing the GCM dependency is a known limitation of the Google Play Services. Please take a look at [this workaround](https://github.com/evernote/android-job/wiki/FAQ#how-can-i-remove-the-gcm-dependency-from-my-app) to avoid those crashes.
 
 ## WorkManager
diff --git a/build.gradle b/build.gradle
index 31b4f4e..7269160 100644
--- a/build.gradle
+++ b/build.gradle
@@ -28,8 +28,8 @@ ext {
 
     buildToolsVersion = '27.0.3'
 
-    supportLibVersion = '26.0.2'
-    playServicesVersion = '11.0.2'
+    supportLibVersion = '26.1.0'
+    playServicesVersion = '15.0.1'
     stethoVersion = '1.5.0'
     junitVersion = '4.12'
     assertjVersion = '3.6.2'
diff --git a/demo/src/gcm/AndroidManifest.xml b/demo/src/gcm/AndroidManifest.xml
new file mode 100644
index 0000000..82bc6df
--- /dev/null
+++ b/demo/src/gcm/AndroidManifest.xml
@@ -0,0 +1,13 @@
+<manifest
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+
+    <application>
+        <service
+            android:name="com.evernote.android.job.gcm.PlatformGcmService"
+            android:enabled="true"
+            tools:replace="android:enabled"/>
+    </application>
+</manifest>
diff --git a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
index 7ba702f..a44f498 100644
--- a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
+++ b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
@@ -19,6 +19,7 @@
 import android.support.annotation.NonNull;
 
 import com.evernote.android.job.JobProxy;
+import com.evernote.android.job.JobProxyIllegalStateException;
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
@@ -60,7 +61,7 @@ public void plantOneOff(JobRequest request) {
                 .setExecutionWindow(startSeconds, endSeconds)
                 .build();
 
-        mGcmNetworkManager.schedule(task);
+        scheduleTask(task);
 
         CAT.d("Scheduled OneoffTask, %s, start %s, end %s (from now), reschedule count %d", request, JobUtil.timeToString(startMs),
                 JobUtil.timeToString(endMs), Common.getRescheduleCount(request));
@@ -73,7 +74,7 @@ public void plantPeriodic(JobRequest request) {
                 .setFlex(request.getFlexMs() / 1_000)
                 .build();
 
-        mGcmNetworkManager.schedule(task);
+        scheduleTask(task);
 
         CAT.d("Scheduled PeriodicTask, %s, interval %s, flex %s", request, JobUtil.timeToString(request.getIntervalMs()),
                 JobUtil.timeToString(request.getFlexMs()));
@@ -90,7 +91,7 @@ public void plantPeriodicFlexSupport(JobRequest request) {
                 .setExecutionWindow(startMs / 1_000, endMs / 1_000)
                 .build();
 
-        mGcmNetworkManager.schedule(task);
+        scheduleTask(task);
 
         CAT.d("Scheduled periodic (flex support), %s, start %s, end %s, flex %s", request, JobUtil.timeToString(startMs),
                 JobUtil.timeToString(endMs), JobUtil.timeToString(request.getFlexMs()));
@@ -107,6 +108,18 @@ public boolean isPlatformJobScheduled(JobRequest request) {
         return true;
     }
 
+    private void scheduleTask(Task task) {
+        try {
+            mGcmNetworkManager.schedule(task);
+        } catch (IllegalArgumentException e) {
+            if (e.getMessage() != null && e.getMessage().startsWith("The GcmTaskService class you provided")) {
+                throw new JobProxyIllegalStateException(e);
+            } else {
+                throw e;
+            }
+        }
+    }
+
     protected <T extends Task.Builder> T prepareBuilder(T builder, JobRequest request) {
         builder.setTag(createTag(request))
                 .setService(PlatformGcmService.class)
