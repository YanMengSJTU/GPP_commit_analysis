diff --git a/demo/src/main/java/com/evernote/android/job/demo/UnitTestDatabaseCreator.java b/demo/src/main/java/com/evernote/android/job/demo/UnitTestDatabaseCreator.java
new file mode 100644
index 0000000..5c94385
--- /dev/null
+++ b/demo/src/main/java/com/evernote/android/job/demo/UnitTestDatabaseCreator.java
@@ -0,0 +1,135 @@
+package com.evernote.android.job.demo;
+
+import com.evernote.android.job.JobRequest;
+import com.evernote.android.job.util.support.PersistableBundleCompat;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * @author rwondratschek
+ */
+public final class UnitTestDatabaseCreator {
+
+    private static boolean random() {
+        return Math.random() > 0.5;
+    }
+
+    public void createV1() {
+        createJobs(new DummyJobCreatorV1());
+    }
+
+    public void createV2() {
+        createJobs(new DummyJobCreatorV1()); // same as v1, only transient column is new
+    }
+
+    public void createV3() {
+        createJobs(new DummyJobCreatorV3());
+    }
+
+    private void createJobs(DummyJobCreator creator) {
+        creator.createOneOff();
+        creator.createExact();
+        creator.createPeriodic();
+    }
+
+    private interface DummyJobCreator {
+        void createOneOff();
+
+        void createExact();
+
+        void createPeriodic();
+    }
+
+    private static class DummyJobCreatorV1 implements DummyJobCreator {
+        @Override
+        public void createOneOff() {
+            for (int i = 0; i < 10; i++) {
+                JobRequest.Builder builder = new JobRequest.Builder("tag")
+                        .setExecutionWindow(300_000, 400_000)
+                        .setBackoffCriteria(5_000L, random() ? JobRequest.BackoffPolicy.EXPONENTIAL : JobRequest.BackoffPolicy.LINEAR)
+                        .setRequiresCharging(random())
+                        .setRequiresDeviceIdle(random())
+                        .setRequiredNetworkType(random() ? JobRequest.NetworkType.ANY : JobRequest.NetworkType.CONNECTED)
+                        .setRequirementsEnforced(random())
+                        .setPersisted(random());
+
+                if (random()) {
+                    PersistableBundleCompat extras = new PersistableBundleCompat();
+                    extras.putString("key", "Hello world");
+                    builder.setExtras(extras);
+                }
+
+                builder.build().schedule();
+            }
+
+        }
+
+        @Override
+        public void createExact() {
+            for (int i = 0; i < 10; i++) {
+                JobRequest.Builder builder = new JobRequest.Builder("tag")
+                        .setExact(400_000)
+                        .setBackoffCriteria(5_000L, random() ? JobRequest.BackoffPolicy.EXPONENTIAL : JobRequest.BackoffPolicy.LINEAR)
+                        .setPersisted(random());
+
+                if (random()) {
+                    PersistableBundleCompat extras = new PersistableBundleCompat();
+                    extras.putString("key", "Hello world");
+                    builder.setExtras(extras);
+                }
+
+                builder.build().schedule();
+            }
+
+        }
+
+        @Override
+        public void createPeriodic() {
+            for (int i = 0; i < 10; i++) {
+                JobRequest.Builder builder = new JobRequest.Builder("tag")
+                        .setPeriodic(TimeUnit.MINUTES.toMillis(1))
+                        .setRequiresCharging(random())
+                        .setRequiresDeviceIdle(random())
+                        .setRequiredNetworkType(random() ? JobRequest.NetworkType.ANY : JobRequest.NetworkType.CONNECTED)
+                        .setRequirementsEnforced(random())
+                        .setPersisted(random());
+
+                if (random()) {
+                    PersistableBundleCompat extras = new PersistableBundleCompat();
+                    extras.putString("key", "Hello world");
+                    builder.setExtras(extras);
+                }
+
+                builder.build().schedule();
+            }
+        }
+    }
+
+    private static final class DummyJobCreatorV3 extends DummyJobCreatorV1 {
+        @Override
+        public void createPeriodic() {
+            for (int i = 0; i < 10; i++) {
+                JobRequest.Builder builder = new JobRequest.Builder("tag")
+                        .setRequiresCharging(random())
+                        .setRequiresDeviceIdle(random())
+                        .setRequiredNetworkType(random() ? JobRequest.NetworkType.ANY : JobRequest.NetworkType.CONNECTED)
+                        .setRequirementsEnforced(random())
+                        .setPersisted(random());
+
+                if (random()) {
+                    PersistableBundleCompat extras = new PersistableBundleCompat();
+                    extras.putString("key", "Hello world");
+                    builder.setExtras(extras);
+                }
+                if (random()) {
+                    builder.setPeriodic(JobRequest.MIN_INTERVAL);
+                } else {
+                    builder.setPeriodic(JobRequest.MIN_INTERVAL, JobRequest.MIN_FLEX);
+                }
+
+                builder.build().schedule();
+            }
+
+        }
+    }
+}
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index 8f93e5b..d437814 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -48,7 +48,9 @@
 /**
  * @author rwondratschek
  */
-/*package*/ class JobStorage {
+/*package*/
+@SuppressWarnings("WeakerAccess")
+class JobStorage {
 
     private static final CatLog CAT = new JobCat("JobStorage");
 
@@ -93,6 +95,10 @@
     private SQLiteDatabase mDatabase;
 
     public JobStorage(Context context) {
+        this(context, DATABASE_NAME);
+    }
+
+    public JobStorage(Context context, String databasePath) {
         mPreferences = context.getSharedPreferences(PREF_FILE_NAME, Context.MODE_PRIVATE);
 
         mCacheId = new JobCacheId();
@@ -100,7 +106,7 @@ public JobStorage(Context context) {
         int lastJobId = mPreferences.getInt(JOB_ID_COUNTER, 0);
         mJobCounter = new AtomicInteger(lastJobId);
 
-        mDbHelper = new JobOpenHelper(context);
+        mDbHelper = new JobOpenHelper(context, databasePath);
     }
 
     public synchronized void put(final JobRequest request) {
@@ -253,10 +259,10 @@ protected JobRequest create(Integer id) {
         }
     }
 
-    private class JobOpenHelper extends SQLiteOpenHelper {
+    private static class JobOpenHelper extends SQLiteOpenHelper {
 
-        public JobOpenHelper(Context context) {
-            super(context, DATABASE_NAME, null, DATABASE_VERSION);
+        private JobOpenHelper(Context context, String databasePath) {
+            super(context, databasePath, null, DATABASE_VERSION);
         }
 
         @Override
diff --git a/library/src/test/java/com/evernote/android/job/DatabaseExistingTest.java b/library/src/test/java/com/evernote/android/job/DatabaseExistingTest.java
new file mode 100644
index 0000000..e8e9851
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/DatabaseExistingTest.java
@@ -0,0 +1,77 @@
+package com.evernote.android.job;
+
+import com.evernote.android.job.test.JobRobolectricTestRunner;
+
+import org.junit.FixMethodOrder;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
+import org.robolectric.RuntimeEnvironment;
+
+import java.io.File;
+import java.util.Set;
+
+import static org.assertj.core.api.Java6Assertions.assertThat;
+
+/**
+ * Databases should be created with UnitTestDatabaseCreator.java and then be pulled from the device.
+ * Best is to use an emulator with API 23.
+ *
+ * @author rwondratschek
+ */
+@RunWith(JobRobolectricTestRunner.class)
+@FixMethodOrder(MethodSorters.JVM)
+public class DatabaseExistingTest extends BaseJobManagerTest {
+
+    @Test
+    public void upgradeFromV1() {
+        testDatabase("evernote_jobs_v1.db");
+    }
+
+    @Test
+    public void upgradeFromV2() {
+        testDatabase("evernote_jobs_v2.db");
+    }
+
+    private void testDatabase(String name) {
+        String filePath = getClass().getResource("/databases/" + name).getPath();
+        assertThat(new File(filePath).exists()).isTrue();
+
+        JobStorage storage = new JobStorage(RuntimeEnvironment.application, filePath);
+
+        Set<JobRequest> requests = storage.getAllJobRequests("tag", true);
+        assertThat(requests).hasSize(30);
+
+        int exact = 0;
+        int oneOff = 0;
+        int periodic = 0;
+
+        for (JobRequest request : requests) {
+            if (request.isExact()) {
+                exact++;
+            } else if (request.isPeriodic()) {
+                periodic++;
+            } else {
+                oneOff++;
+            }
+        }
+
+        assertThat(exact).isEqualTo(10);
+        assertThat(oneOff).isEqualTo(10);
+        assertThat(periodic).isEqualTo(10);
+
+        // none of them should be transient
+        for (JobRequest request : requests) {
+            assertThat(request.isTransient()).isFalse();
+        }
+
+        for (JobRequest request : requests) {
+            if (!request.isPeriodic()) {
+                continue;
+            }
+
+            assertThat(request.getIntervalMs()).isGreaterThanOrEqualTo(JobRequest.MIN_INTERVAL);
+            assertThat(request.getFlexMs()).isGreaterThanOrEqualTo(JobRequest.MIN_FLEX);
+        }
+    }
+}
diff --git a/library/src/test/java/com/evernote/android/job/DatabaseUpgradeTest.java b/library/src/test/java/com/evernote/android/job/DatabaseManualUpgradeTest.java
similarity index 99%
rename from library/src/test/java/com/evernote/android/job/DatabaseUpgradeTest.java
rename to library/src/test/java/com/evernote/android/job/DatabaseManualUpgradeTest.java
index 5381a89..2fba623 100644
--- a/library/src/test/java/com/evernote/android/job/DatabaseUpgradeTest.java
+++ b/library/src/test/java/com/evernote/android/job/DatabaseManualUpgradeTest.java
@@ -42,7 +42,7 @@
  */
 @RunWith(JobRobolectricTestRunner.class)
 @FixMethodOrder(MethodSorters.JVM)
-public class DatabaseUpgradeTest {
+public class DatabaseManualUpgradeTest {
 
     @Test
     public void testDatabaseUpgrade1to3() {
diff --git a/library/src/test/resources/databases/evernote_jobs_v1.db b/library/src/test/resources/databases/evernote_jobs_v1.db
new file mode 100644
index 0000000..fcfea1e
Binary files /dev/null and b/library/src/test/resources/databases/evernote_jobs_v1.db differ
diff --git a/library/src/test/resources/databases/evernote_jobs_v2.db b/library/src/test/resources/databases/evernote_jobs_v2.db
new file mode 100644
index 0000000..791c254
Binary files /dev/null and b/library/src/test/resources/databases/evernote_jobs_v2.db differ
diff --git a/library/src/test/resources/databases/evernote_jobs_v3.db b/library/src/test/resources/databases/evernote_jobs_v3.db
new file mode 100644
index 0000000..86e1281
Binary files /dev/null and b/library/src/test/resources/databases/evernote_jobs_v3.db differ
