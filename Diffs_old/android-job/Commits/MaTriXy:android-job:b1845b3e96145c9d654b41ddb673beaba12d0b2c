diff --git a/demo/src/gcm/AndroidManifest.xml b/demo/src/gcm/AndroidManifest.xml
deleted file mode 100644
index 8cdd7ff..0000000
--- a/demo/src/gcm/AndroidManifest.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<manifest
-    package="com.evernote.android.job.demo"
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools">
-
-    <application
-        android:name=".App"
-        android:allowBackup="false"
-        android:fullBackupContent="false"
-        android:icon="@mipmap/ic_launcher"
-        android:label="@string/demo"
-        android:theme="@style/AppTheme"
-        tools:ignore="UnusedAttribute">
-
-        <service
-            android:name="com.evernote.android.job.gcm.PlatformGcmService"
-            android:exported="true"
-            android:permission="com.google.android.gms.permission.BIND_NETWORK_TASK_SERVICE">
-            <intent-filter>
-                <action android:name="com.google.android.gms.gcm.ACTION_TASK_READY"/>
-            </intent-filter>
-        </service>
-
-    </application>
-</manifest>
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index 261a9d1..e49b63f 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -27,6 +27,7 @@
 
     private int mLastJobId;
 
+    private CompoundButton mEnableGcm;
     private CompoundButton mRequiresCharging;
     private CompoundButton mRequiresDeviceIdle;
     private Spinner mNetworkTypeSpinner;
@@ -44,6 +45,7 @@ protected void onCreate(Bundle savedInstanceState) {
             mLastJobId = savedInstanceState.getInt(LAST_JOB_ID, 0);
         }
 
+        mEnableGcm = (CompoundButton) findViewById(R.id.enable_gcm);
         mRequiresCharging = (CompoundButton) findViewById(R.id.check_requires_charging);
         mRequiresDeviceIdle = (CompoundButton) findViewById(R.id.check_requires_device_idle);
         mNetworkTypeSpinner = (Spinner) findViewById(R.id.spinner_network_type);
@@ -51,6 +53,15 @@ protected void onCreate(Bundle savedInstanceState) {
         ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, getNetworkTypesAsString());
         adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         mNetworkTypeSpinner.setAdapter(adapter);
+
+        mEnableGcm.setChecked(mJobManager.getConfig().isGcmApiEnabled());
+        mEnableGcm.setEnabled(JobApi.GCM.isSupported(this));
+        mEnableGcm.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                mJobManager.getConfig().setGcmApiEnabled(isChecked);
+            }
+        });
     }
 
     @Override
diff --git a/demo/src/main/res/layout/activity_main.xml b/demo/src/main/res/layout/activity_main.xml
index a2ea6ba..4eab56d 100644
--- a/demo/src/main/res/layout/activity_main.xml
+++ b/demo/src/main/res/layout/activity_main.xml
@@ -65,6 +65,14 @@
             android:onClick="onClick"
             android:text="Cancel all"/>
 
+        <Switch
+            android:id="@+id/enable_gcm"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="12dp"
+            android:text="Enable GCM API"/>
+
         <Switch
             android:id="@+id/check_requires_charging"
             android:layout_width="wrap_content"
diff --git a/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java b/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
index 9fdd83f..3585c84 100644
--- a/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
@@ -42,7 +42,8 @@ public static void afterClass() {
 
     @Test
     public void testScheduleAndCancel() {
-        assertThat(getManager().getApi()).isEqualTo(JobApi.getDefault(InstrumentationRegistry.getContext()));
+        JobApi defaultApi = JobApi.getDefault(InstrumentationRegistry.getContext(), getManager().getConfig().isGcmApiEnabled());
+        assertThat(getManager().getApi()).isEqualTo(defaultApi);
 
         JobRequest request = getJobRequest();
         int id = request.schedule();
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
index 146e409..a1d6131 100644
--- a/library/src/main/AndroidManifest.xml
+++ b/library/src/main/AndroidManifest.xml
@@ -35,6 +35,16 @@
                 <action android:name="android.intent.action.BOOT_COMPLETED"/>
             </intent-filter>
         </receiver>
+
+        <service
+            android:name="com.evernote.android.job.gcm.PlatformGcmService"
+            android:enabled="false"
+            android:exported="true"
+            android:permission="com.google.android.gms.permission.BIND_NETWORK_TASK_SERVICE">
+            <intent-filter>
+                <action android:name="com.google.android.gms.gcm.ACTION_TASK_READY"/>
+            </intent-filter>
+        </service>
     </application>
 
 </manifest>
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 7c4f300..8f7fd20 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -178,7 +178,7 @@ private JobManager(Context context) {
         mJobExecutor = new JobExecutor();
         mConfig = new Config();
 
-        setJobProxy(JobApi.getDefault(mContext));
+        setJobProxy(JobApi.getDefault(mContext, mConfig.isGcmApiEnabled()));
 
         rescheduleTasksIfNecessary();
     }
@@ -217,6 +217,11 @@ public void schedule(@NonNull JobRequest request) {
         boolean periodic = request.isPeriodic();
         boolean flexSupport = periodic && jobApi.isFlexSupport() && request.getFlexMs() < request.getIntervalMs();
 
+        if (jobApi == JobApi.GCM && !mConfig.isGcmApiEnabled()) {
+            // shouldn't happen
+            CAT.w("GCM API disabled, but used nonetheless");
+        }
+
         request.setScheduledAt(System.currentTimeMillis());
         request.setFlexSupport(flexSupport);
         mJobStorage.put(request);
@@ -524,9 +529,11 @@ public void run() {
     public final class Config {
 
         private boolean mVerbose;
+        private boolean mGcmEnabled;
 
         private Config() {
             mVerbose = true;
+            mGcmEnabled = true;
         }
 
         /**
@@ -542,8 +549,48 @@ public boolean isVerbose() {
          * @param verbose Whether or not to print all log messages. The default value is {@code true}.
          */
         public void setVerbose(boolean verbose) {
-            mVerbose = verbose;
-            CatGlobal.setPackageEnabled(PACKAGE, verbose);
+            if (mVerbose != verbose) {
+                mVerbose = verbose;
+                CatGlobal.setPackageEnabled(PACKAGE, verbose);
+            }
+        }
+
+        /**
+         * @return Whether the GCM API is enabled. The API is only used if the required class dependency
+         * is found, the Google Play Services are available and this setting is {@code true}. The default
+         * value is {@code true}.
+         */
+        public boolean isGcmApiEnabled() {
+            return mGcmEnabled;
+        }
+
+        /**
+         * Programmatic switch to disable the GCM API. If {@code false}, then the {@link AlarmManager} will
+         * be used for Android 4 devices in all cases.
+         *
+         * @param enabled Whether the GCM API should be enabled or disabled. Note that the API is only used,
+         *                if the required class dependency is found, the Google Play Services are available
+         *                and this setting is {@code true}. The default value is {@code true}.
+         */
+        public void setGcmApiEnabled(boolean enabled) {
+            if (enabled == mGcmEnabled) {
+                return;
+            }
+
+            mGcmEnabled = enabled;
+            if (enabled) {
+                JobApi defaultApi = JobApi.getDefault(mContext, true);
+                if (!defaultApi.equals(getApi())) {
+                    setJobProxy(defaultApi);
+                    CAT.i("Changed default proxy to %s after enabled the GCM API", defaultApi);
+                }
+            } else {
+                JobApi defaultApi = JobApi.getDefault(mContext, false);
+                if (JobApi.GCM == getApi()) {
+                    setJobProxy(defaultApi);
+                    CAT.i("Changed default proxy to %s after disabling the GCM API", defaultApi);
+                }
+            }
         }
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java b/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java
index 0bd8d6b..1d9f1c1 100644
--- a/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java
+++ b/library/src/main/java/com/evernote/android/job/util/GcmAvailableHelper.java
@@ -1,9 +1,12 @@
 package com.evernote.android.job.util;
 
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 
+import com.evernote.android.job.gcm.JobProxyGcm;
 import com.evernote.android.job.gcm.PlatformGcmService;
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GoogleApiAvailability;
@@ -23,6 +26,7 @@
     private static final boolean GCM_IN_CLASSPATH;
 
     private static int gcmServiceAvailable = -1;
+    private static boolean checkedServiceEnabled;
 
     static {
         boolean gcmInClasspath;
@@ -37,6 +41,11 @@
 
     public static boolean isGcmApiSupported(Context context) {
         try {
+            if (!checkedServiceEnabled) {
+                checkedServiceEnabled = true;
+                setServiceEnabled(context, GCM_IN_CLASSPATH);
+            }
+
             return GCM_IN_CLASSPATH
                     && GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(context) == ConnectionResult.SUCCESS
                     && isGcmServiceRegistered(context) == ConnectionResult.SUCCESS;
@@ -87,6 +96,38 @@ private static boolean hasPermission(List<ResolveInfo> resolveInfos) {
         return false;
     }
 
+    private static void setServiceEnabled(Context context, boolean enabled) {
+        try {
+            PackageManager packageManager = context.getPackageManager();
+
+            // use a string, the class object probably cannot be instantiated
+            String className = JobProxyGcm.class.getPackage().getName() + ".PlatformGcmService";
+            ComponentName component = new ComponentName(context, className);
+
+            int componentEnabled = packageManager.getComponentEnabledSetting(component);
+            switch (componentEnabled) {
+                case PackageManager.COMPONENT_ENABLED_STATE_ENABLED:
+                    if (!enabled) {
+                        packageManager.setComponentEnabledSetting(component, PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP);
+                        Cat.i("GCM service disabled");
+                    }
+                    break;
+
+                case PackageManager.COMPONENT_ENABLED_STATE_DEFAULT: // default is disable
+                case PackageManager.COMPONENT_ENABLED_STATE_DISABLED:
+                    if (enabled) {
+                        packageManager.setComponentEnabledSetting(component, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);
+                        Cat.i("GCM service enabled");
+                    }
+                    break;
+            }
+
+        } catch (Throwable t) {
+            // just in case, don't let the app crash with each restart
+            Cat.e(t);
+        }
+    }
+
     private GcmAvailableHelper() {
         // no op
     }
diff --git a/library/src/main/java/com/evernote/android/job/util/JobApi.java b/library/src/main/java/com/evernote/android/job/util/JobApi.java
index 3efed8b..4b3978e 100644
--- a/library/src/main/java/com/evernote/android/job/util/JobApi.java
+++ b/library/src/main/java/com/evernote/android/job/util/JobApi.java
@@ -31,6 +31,7 @@
 import android.os.Build;
 import android.support.annotation.NonNull;
 
+import com.evernote.android.job.JobManager;
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.gcm.JobProxyGcm;
 import com.evernote.android.job.v14.JobProxy14;
@@ -127,13 +128,23 @@ public synchronized JobProxy getCachedProxy(Context context) {
         return mCachedProxy;
     }
 
+    /**
+     * @deprecated Use {@link #getDefault(Context, boolean)} instead.
+     */
+    @SuppressWarnings("unused")
     @NonNull
+    @Deprecated
     public static JobApi getDefault(Context context) {
+        return getDefault(context, JobManager.instance().getConfig().isGcmApiEnabled());
+    }
+
+    @NonNull
+    public static JobApi getDefault(Context context, boolean gcmEnabled) {
         if (V_24.isSupported(context)) {
             return V_24;
         } else if (V_21.isSupported(context)) {
             return V_21;
-        } else if (GCM.isSupported(context)) {
+        } else if (gcmEnabled && GCM.isSupported(context)) {
             return GCM;
         } else if (V_19.isSupported(context)) {
             return V_19;
