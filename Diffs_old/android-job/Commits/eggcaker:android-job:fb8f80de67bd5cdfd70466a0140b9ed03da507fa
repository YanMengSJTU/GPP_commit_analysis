diff --git a/library/src/main/java/com/evernote/android/job/DailyJob.java b/library/src/main/java/com/evernote/android/job/DailyJob.java
index ff0fd27..58fcfc3 100644
--- a/library/src/main/java/com/evernote/android/job/DailyJob.java
+++ b/library/src/main/java/com/evernote/android/job/DailyJob.java
@@ -99,7 +99,7 @@ private static int schedule(@NonNull JobRequest.Builder builder, boolean newJob,
         builder.addExtras(extras);
 
         JobRequest request = builder
-                .setExecutionWindow(startDelay, endDelay)
+                .setExecutionWindow(Math.max(1L, startDelay), Math.max(1L, endDelay))
                 .setUpdateCurrent(newJob)
                 .build();
 
diff --git a/library/src/test/java/com/evernote/android/job/DailyJobTest.java b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
index 32a4983..3b35b64 100644
--- a/library/src/test/java/com/evernote/android/job/DailyJobTest.java
+++ b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
@@ -118,6 +118,22 @@ public void verifyScheduleAndExecutionStartInPast() {
         verifyExecutionAndSuccessfulReschedule(clock, TimeUnit.HOURS.toMillis(2),  TimeUnit.HOURS.toMillis(6));
     }
 
+    @Test
+    public void verifyScheduleAndExecutionExactStart() {
+        TestClock clock = new TestClock();
+        clock.setTime(13, 0);
+
+        verifyExecutionAndSuccessfulReschedule(clock, TimeUnit.HOURS.toMillis(13),  TimeUnit.HOURS.toMillis(14));
+    }
+
+    @Test
+    public void verifyScheduleAndExecutionExactEnd() {
+        TestClock clock = new TestClock();
+        clock.setTime(14, 0);
+
+        verifyExecutionAndSuccessfulReschedule(clock, TimeUnit.HOURS.toMillis(13),  TimeUnit.HOURS.toMillis(14));
+    }
+
     @Test
     public void verifyScheduleAndExecutionOverMidnight() {
         TestClock clock = new TestClock();
