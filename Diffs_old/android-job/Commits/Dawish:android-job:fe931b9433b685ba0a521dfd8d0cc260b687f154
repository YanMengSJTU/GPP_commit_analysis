diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index 09639ea..18fe7fa 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -11,6 +11,7 @@
 import android.widget.ArrayAdapter;
 import android.widget.CompoundButton;
 import android.widget.Spinner;
+import android.widget.Toast;
 
 import com.evernote.android.job.JobConfig;
 import com.evernote.android.job.JobManager;
@@ -18,6 +19,8 @@
 import com.evernote.android.job.JobApi;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
+import java.util.Set;
+
 /**
  * @author rwondratschek
  */
@@ -194,13 +197,19 @@ public void onClick(View view) {
         }
     }
 
+    String onlyId = "123423423:2342:23";
+
     private void testSimple() {
+
+        mJobManager.getJobRequestByOnlyId(onlyId, true);
+
         PersistableBundleCompat extras = new PersistableBundleCompat();
         extras.putString("key", "Hello world");
 
         mLastJobId = new JobRequest.Builder(DemoSyncJob.TAG)
-                .setExecutionWindow(3_000L, 4_000L)
-                .setBackoffCriteria(5_000L, JobRequest.BackoffPolicy.LINEAR)
+                .setExecutionWindow(23_000L, 24_000L)
+                .setBackoffCriteria(25_000L, JobRequest.BackoffPolicy.LINEAR)
+                .setOnlyId("123423423:2342:23")
                 .setRequiresCharging(mRequiresCharging.isChecked())
                 .setRequiresDeviceIdle(mRequiresDeviceIdle.isChecked())
                 .setRequiredNetworkType(JobRequest.NetworkType.values()[mNetworkTypeSpinner.getSelectedItemPosition()])
@@ -208,6 +217,22 @@ private void testSimple() {
                 .setRequirementsEnforced(true)
                 .build()
                 .schedule();
+
+        if(mJobManager.isExistByOnlyId("empty_OnlyId", true)){
+            Toast.makeText(MainActivity.this, onlyId + " 任务已经存在了哦", Toast.LENGTH_SHORT).show();
+        }
+
+        Set<JobRequest> jobRequestSetId = mJobManager.getJobRequestByOnlyId(onlyId, true);
+        if(jobRequestSetId!=null){
+            Log.d("danxx","ID size : "+jobRequestSetId.size());
+            Log.d("danxx","ID content : "+jobRequestSetId.toString());
+        }
+
+        Set<JobRequest> jobRequestSet = mJobManager.getAllJobRequestsForTag(DemoSyncJob.TAG);
+        if(jobRequestSet!=null){
+            Log.d("danxx","size : "+jobRequestSet.size());
+            Log.d("danxx","content : "+jobRequestSet.toString());
+        }
     }
 
     private void testAllImpl() {
diff --git a/library/build.gradle b/library/build.gradle
index cc0f68b..d27b0e8 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -63,4 +63,4 @@ android {
     }
 }
 
-apply from: '../build-config/gradle-push.gradle'
\ No newline at end of file
+//apply from: '../build-config/gradle-push.gradle'
\ No newline at end of file
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 9b12c22..01662bc 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -434,6 +434,21 @@ private synchronized int cancelAllInner(@Nullable String tag) {
         return canceled;
     }
 
+    /**
+     *
+     * @param onlyId
+     * @param includeStarted
+     * @return
+     */
+    public boolean isExistByOnlyId(String onlyId, boolean includeStarted){
+        return mJobStorage == null ? false : mJobStorage.isExistByOnlyId(onlyId, includeStarted);
+    }
+
+    public Set<JobRequest> getJobRequestByOnlyId(String onlyId, boolean includeStarted){
+        return mJobStorage == null ? null : mJobStorage.getJobRequestByOnlyId(onlyId, includeStarted);
+    }
+
+
     /**
      * Registers this instance to create jobs for a specific tag. It's possible to have multiple
      * {@link JobCreator}s with a first come first serve order.
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index fd88409..aed5de1 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -148,7 +148,7 @@ private JobRequest(Builder builder) {
      * @return The unique ID for this job.
      */
     public int getJobId() {
-        return mBuilder.mId;
+        return mBuilder.mAutoId;
     }
 
     /**
@@ -177,6 +177,14 @@ public long getEndMs() {
         return mBuilder.mEndMs;
     }
 
+    /**
+     * 获取可用的唯一id
+     * @return
+     */
+    public String getOnlyId(){
+        return mBuilder.mOnlyId;
+    }
+
     /**
      * Only valid if the job isn't periodic.
      *
@@ -545,6 +553,10 @@ public Builder cancelAndEdit() {
         return contentValues;
     }
 
+    /**
+     * 通过Cursor从数据库获取一个JobRequest
+     * @return
+     */
     /*package*/ static JobRequest fromCursor(Cursor cursor) {
         JobRequest request = new Builder(cursor).build();
         request.mFailureCount = cursor.getInt(cursor.getColumnIndex(JobStorage.COLUMN_NUM_FAILURES));
@@ -576,7 +588,8 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return "request{id=" + getJobId() + ", tag=" + getTag() + ", transient=" + isTransient() + '}';
+
+        return "request{id=" + getJobId() + ", onlyId=" + getOnlyId() + ", tag=" + getTag() + ", transient=" + isTransient() + '}';
     }
 
     /**
@@ -587,7 +600,9 @@ public String toString() {
 
         private static final int CREATE_ID = -8765; // magic number
 
-        private int mId;
+        private int mAutoId;
+        /**job可以被设置的唯一id*/
+        private String mOnlyId;
         final String mTag;
 
         private long mStartMs;
@@ -630,7 +645,8 @@ public String toString() {
          */
         public Builder(@NonNull String tag) {
             mTag = JobPreconditions.checkNotEmpty(tag);
-            mId = CREATE_ID;
+            mAutoId = CREATE_ID;
+            mOnlyId = "empty_OnlyId";
 
             mStartMs = -1;
             mEndMs = -1;
@@ -641,10 +657,15 @@ public Builder(@NonNull String tag) {
             mNetworkType = DEFAULT_NETWORK_TYPE;
         }
 
+        /**
+         * 通过Cursor创建一个JobRequest
+         * @param cursor
+         */
         @SuppressWarnings("unchecked")
         private Builder(Cursor cursor) {
-            mId = cursor.getInt(cursor.getColumnIndex(JobStorage.COLUMN_ID));
+            mAutoId = cursor.getInt(cursor.getColumnIndex(JobStorage.COLUMN_ID));
             mTag = cursor.getString(cursor.getColumnIndex(JobStorage.COLUMN_TAG));
+            mOnlyId = cursor.getString(cursor.getColumnIndex(JobStorage.COLUMN_ONLY_ID));
 
             mStartMs = cursor.getLong(cursor.getColumnIndex(JobStorage.COLUMN_START_MS));
             mEndMs = cursor.getLong(cursor.getColumnIndex(JobStorage.COLUMN_END_MS));
@@ -683,8 +704,9 @@ private Builder(@NonNull Builder builder) {
         }
 
         private Builder(@NonNull Builder builder, boolean createId) {
-            mId = createId ? CREATE_ID : builder.mId;
+            mAutoId = createId ? CREATE_ID : builder.mAutoId;
             mTag = builder.mTag;
+            mOnlyId = "empty_OnlyId";
 
             mStartMs = builder.mStartMs;
             mEndMs = builder.mEndMs;
@@ -712,8 +734,9 @@ private Builder(@NonNull Builder builder, boolean createId) {
         }
 
         private void fillContentValues(ContentValues contentValues) {
-            contentValues.put(JobStorage.COLUMN_ID, mId);
+            contentValues.put(JobStorage.COLUMN_ID, mAutoId);
             contentValues.put(JobStorage.COLUMN_TAG, mTag);
+            contentValues.put(JobStorage.COLUMN_ONLY_ID, mOnlyId);
 
             contentValues.put(JobStorage.COLUMN_START_MS, mStartMs);
             contentValues.put(JobStorage.COLUMN_END_MS, mEndMs);
@@ -803,6 +826,11 @@ public Builder setExtras(@Nullable PersistableBundleCompat extras) {
             return this;
         }
 
+        public Builder setOnlyId(@NonNull String onlyId) {
+            mOnlyId = onlyId;
+            return this;
+        }
+
         /**
          * Adds optional extras. This is persisted, so only primitive types are allowed. This method overrides
          * values with the same keys inside of {@code extras}, which were set before.
@@ -1114,6 +1142,8 @@ public Builder setTransientExtras(@Nullable Bundle extras) {
          */
         public JobRequest build() {
             JobPreconditions.checkNotEmpty(mTag);
+            /**检测我们要的job唯一可用id不为空null*/
+            JobPreconditions.checkNotEmpty(mOnlyId);
             JobPreconditions.checkArgumentPositive(mBackoffMs, "backoffMs must be > 0");
             JobPreconditions.checkNotNull(mBackoffPolicy);
             JobPreconditions.checkNotNull(mNetworkType);
@@ -1159,14 +1189,14 @@ public JobRequest build() {
                 CAT.w("Warning: job with tag %s scheduled over a year in the future", mTag);
             }
 
-            if (mId != CREATE_ID) {
-                JobPreconditions.checkArgumentNonnegative(mId, "id can't be negative");
+            if (mAutoId != CREATE_ID) {
+                JobPreconditions.checkArgumentNonnegative(mAutoId, "id can't be negative");
             }
 
             Builder builder = new Builder(this);
-            if (mId == CREATE_ID) {
-                builder.mId = JobManager.instance().getJobStorage().nextJobId();
-                JobPreconditions.checkArgumentNonnegative(builder.mId, "id can't be negative");
+            if (mAutoId == CREATE_ID) {
+                builder.mAutoId = JobManager.instance().getJobStorage().nextJobId();
+                JobPreconditions.checkArgumentNonnegative(builder.mAutoId, "id can't be negative");
             }
 
             return new JobRequest(builder);
@@ -1179,12 +1209,12 @@ public boolean equals(Object o) {
 
             Builder builder = (Builder) o;
 
-            return mId == builder.mId;
+            return mAutoId == builder.mAutoId;
         }
 
         @Override
         public int hashCode() {
-            return mId;
+            return mAutoId;
         }
     }
 
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index b9773b5..daab796 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -52,6 +52,9 @@
 
 /**
  * @author rwondratschek
+ * @Desc 二级缓存来存储JobRequest，LruCache内存缓存 ,sqlite文件缓存
+ *        存储一个JobRequest是先存到SQLite 然后在更新到LruCache内存缓存
+ *        获取一个JobRequest是先从LruCache内存缓存获取，没有再从SQLite获取
  */
 @SuppressWarnings("WeakerAccess")
 /*package*/ class JobStorage {
@@ -67,7 +70,10 @@
 
     public static final String JOB_TABLE_NAME = "jobs";
 
+    /**库内自己维护的id唯一存在，数据库主键*/
     public static final String COLUMN_ID = "_id";
+    /**用户自己设置的id，可能重复存在*/
+    public static final String COLUMN_ONLY_ID = "onlyId";
     public static final String COLUMN_TAG = "tag";
     public static final String COLUMN_START_MS = "startMs";
     public static final String COLUMN_END_MS = "endMs";
@@ -105,9 +111,11 @@
     private static final String WHERE_NOT_STARTED = "ifnull(" + COLUMN_STARTED + ", 0)<=0";
 
     private final SharedPreferences mPreferences;
+    /**通过id从SQLite数据库获取jobRequest*/
     private final JobCacheId mCacheId;
 
     private AtomicInteger mJobCounter;
+    /**已经被删除的id*/
     private final Set<String> mFailedDeleteIds;
 
     private final JobOpenHelper mDbHelper;
@@ -177,6 +185,133 @@ public JobRequest get(int id) {
         }
     }
 
+
+    /**
+     *
+     * @param onlyId
+     * @param includeStarted
+     * @return
+     */
+    public boolean isExistByOnlyId(String onlyId, boolean includeStarted){
+
+        boolean isExist = false;
+
+        SQLiteDatabase database = null;
+        Cursor cursor = null;
+
+        mLock.readLock().lock();
+
+        try {
+            String where; // filter started requests
+            String[] args;
+            if (TextUtils.isEmpty(onlyId)) {
+                where = includeStarted ? null : WHERE_NOT_STARTED;
+                args = null;
+            } else {
+                where = includeStarted ? "" : (WHERE_NOT_STARTED + " AND ");
+                where += COLUMN_ONLY_ID + "=?";
+                args = new String[]{onlyId};
+            }
+
+            database = getDatabase();
+            cursor = database.query(JOB_TABLE_NAME, null, where, args, null, null, null);
+
+            @SuppressLint("UseSparseArrays")
+            HashMap<Integer, JobRequest> cachedRequests = new HashMap<>(mCacheId.snapshot());
+
+            while (cursor != null && cursor.moveToNext()) {
+                // check in cache first, can avoid creating many JobRequest objects
+                Integer autoId = cursor.getInt(cursor.getColumnIndex(COLUMN_ID));
+                /**没有被删除过*/
+                if (!didFailToDelete(autoId)) {
+                    /**内存缓存中已经存在*/
+                    if (cachedRequests.containsKey(autoId)) {
+                        isExist = true;
+                        break;
+                    } else {
+                        /**内存缓存中不存在就从数据库中获取*/
+                        String tempOnlyId = cursor.getString(cursor.getColumnIndex(COLUMN_ONLY_ID));
+                        if(tempOnlyId.equals(onlyId)){
+                            isExist = true;
+                            break;
+                        }
+                    }
+                }
+            }
+        } catch (Exception e) {
+            CAT.e(e, "could not load all jobs");
+
+        } finally {
+            closeCursor(cursor);
+            closeDatabase(database);
+            mLock.readLock().unlock();
+        }
+
+        return isExist;
+    }
+
+    /**
+     * 通过自己添加的唯一id来查找JobRequest
+     * @param onlyId
+     * @param includeStarted
+     * @return
+     */
+    public Set<JobRequest> getJobRequestByOnlyId(@NonNull String onlyId, boolean includeStarted){
+        JobRequest jobRequest = null;
+
+        Set<JobRequest> result = new HashSet<>();
+
+        SQLiteDatabase database = null;
+        Cursor cursor = null;
+
+        mLock.readLock().lock();
+
+        try {
+            String where; // filter started requests
+            String[] args;
+            if (TextUtils.isEmpty(onlyId)) {
+                where = includeStarted ? null : WHERE_NOT_STARTED;
+                args = null;
+            } else {
+                where = includeStarted ? "" : (WHERE_NOT_STARTED + " AND ");
+                where += COLUMN_ONLY_ID + "=?";
+                args = new String[]{onlyId};
+            }
+
+            database = getDatabase();
+            cursor = database.query(JOB_TABLE_NAME, null, where, args, null, null, null);
+
+            @SuppressLint("UseSparseArrays")
+            HashMap<Integer, JobRequest> cachedRequests = new HashMap<>(mCacheId.snapshot());
+
+            while (cursor != null && cursor.moveToNext()) {
+                // check in cache first, can avoid creating many JobRequest objects
+                Integer autoId = cursor.getInt(cursor.getColumnIndex(COLUMN_ID));
+                /**没有被删除过*/
+                if (!didFailToDelete(autoId)) {
+                    /**内存缓存中已经存在*/
+                    if (cachedRequests.containsKey(autoId)) {
+                        result.add(cachedRequests.get(autoId));
+                    } else {
+                        /**内存缓存中不存在就从数据库中获取*/
+                        result.add(JobRequest.fromCursor(cursor));
+                    }
+                }
+            }
+        } catch (Exception e) {
+            CAT.e(e, "could not load all jobs");
+
+        } finally {
+            closeCursor(cursor);
+            closeDatabase(database);
+            mLock.readLock().unlock();
+        }
+
+        return result;
+
+//        return jobRequest;
+    }
+
     public Set<JobRequest> getAllJobRequests(@Nullable String tag, boolean includeStarted) {
         Set<JobRequest> result = new HashSet<>();
 
@@ -290,6 +425,12 @@ private void store(JobRequest request) {
         }
     }
 
+    /**
+     * 通过自己生成的id从SQLite中获取一个JobRequest
+     * @param id
+     * @param includeStarted
+     * @return
+     */
     @SuppressWarnings("SameParameterValue")
     private JobRequest load(int id, boolean includeStarted) {
         if (didFailToDelete(id)) {
@@ -374,6 +515,10 @@ private JobRequest load(int id, boolean includeStarted) {
         return Math.max(JobConfig.getJobIdOffset(), Math.max(jobId, mPreferences.getInt(JOB_ID_COUNTER, 0)));
     }
 
+    /**
+     * job移除后保存job的自动生成的id
+     * @param id
+     */
     private void addFailedDeleteId(int id) {
         synchronized (mFailedDeleteIds) {
             mFailedDeleteIds.add(String.valueOf(id));
@@ -381,6 +526,11 @@ private void addFailedDeleteId(int id) {
         }
     }
 
+    /**
+     *
+     * @param id
+     * @return
+     */
     private boolean didFailToDelete(int id) {
         synchronized (mFailedDeleteIds) {
             return !mFailedDeleteIds.isEmpty() && mFailedDeleteIds.contains(String.valueOf(id));
@@ -501,6 +651,7 @@ private void createJobTable(SQLiteDatabase db) {
                     + COLUMN_EXACT + " integer, "
                     + COLUMN_NETWORK_TYPE + " text not null, "
                     + COLUMN_EXTRAS + " text, "
+                    + COLUMN_ONLY_ID + " text, "
                     + COLUMN_NUM_FAILURES + " integer, "
                     + COLUMN_SCHEDULED_AT + " integer, "
                     + COLUMN_STARTED + " integer, "
