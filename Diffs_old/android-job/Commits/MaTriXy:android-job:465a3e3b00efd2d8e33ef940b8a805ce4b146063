diff --git a/CHANGELOG.md b/CHANGELOG.md
index 819be9a..148547e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,6 +3,7 @@
 * Improve logging by providing an option to add a custom logger
 * Fix crash when rescheduling jobs, see #164
 * Fix wrong returned network type, see #166
+* Expose failure count in the `JobRequest` class, see #168
 
 ## 1.1.8 (2017-03-23)
 
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index af67f28..25a0e75 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -313,7 +313,14 @@ public long getScheduledAt() {
         return mScheduledAt;
     }
 
-    /*package*/ int getNumFailures() {
+    /**
+     * The failure count increases if a non periodic {@link Job} was rescheduled or if a periodic
+     * {@link Job} wasn't successful.
+     *
+     * @return How often the job already has failed.
+     */
+
+    public int getNumFailures() {
         return mNumFailures;
     }
 
diff --git a/library/src/test/java/com/evernote/android/job/FailureCountTest.java b/library/src/test/java/com/evernote/android/job/FailureCountTest.java
new file mode 100644
index 0000000..ff1bc33
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/FailureCountTest.java
@@ -0,0 +1,57 @@
+package com.evernote.android.job;
+
+import com.evernote.android.job.test.DummyJobs;
+import com.evernote.android.job.test.JobRobolectricTestRunner;
+
+import org.junit.FixMethodOrder;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.MethodSorters;
+
+import java.util.concurrent.TimeUnit;
+
+import static org.assertj.core.api.Java6Assertions.assertThat;
+
+/**
+ * @author rwondratschek
+ */
+@RunWith(JobRobolectricTestRunner.class)
+@FixMethodOrder(MethodSorters.JVM)
+public class FailureCountTest extends BaseJobManagerTest {
+
+    @Test
+    public void incrementPeriodicJobFailureCount() {
+        int jobId = DummyJobs.createBuilder(DummyJobs.FailureJob.class)
+                .setPeriodic(TimeUnit.MINUTES.toMillis(15))
+                .build()
+                .schedule();
+
+        executeJob(jobId, Job.Result.FAILURE);
+        assertThat(manager().getJobRequest(jobId).getNumFailures()).isEqualTo(1);
+
+        resetJob(jobId);
+
+        executeJob(jobId, Job.Result.FAILURE);
+        assertThat(manager().getJobRequest(jobId).getNumFailures()).isEqualTo(2);
+    }
+
+    @Test
+    public void incrementRescheduleJobFailureCount() {
+        int jobId = DummyJobs.createBuilder(DummyJobs.RescheduleJob.class)
+                .setExecutionWindow(1_000, 2_000)
+                .build()
+                .schedule();
+
+        executeJob(jobId, Job.Result.RESCHEDULE);
+        DummyJobs.RescheduleJob job = (DummyJobs.RescheduleJob) manager().getJob(jobId);
+        jobId = job.getNewJobId();
+
+        assertThat(manager().getJobRequest(jobId).getNumFailures()).isEqualTo(1);
+
+        executeJob(jobId, Job.Result.RESCHEDULE);
+        job = (DummyJobs.RescheduleJob) manager().getJob(jobId);
+        jobId = job.getNewJobId();
+
+        assertThat(manager().getJobRequest(jobId).getNumFailures()).isEqualTo(2);
+    }
+}
