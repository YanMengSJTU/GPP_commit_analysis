diff --git a/FAQ.md b/FAQ.md
index 368dd40..ab79009 100644
--- a/FAQ.md
+++ b/FAQ.md
@@ -66,4 +66,24 @@ public class JobSample extends Job {
         }
     }
 }
+```
+
+### Do NOT use `Long.MAX_VALUE` as argument!
+
+Don't use `Long.MAX_VALUE` as argument for the execution window. The `AlarmManager` doesn't allow setting a start date, instead the execution time is the arithmetic average between start and end date.
+
+Your job might work as expected on Android 5+, but maybe won't run at all on older devices.
+
+```java
+// bad, execution time on Android 4.X = startMs + (endMs - startMs) / 2
+new JobRequest.Builder(TAG)
+        .setExecutionWindow(3_000L, Long.MAX_VALUE)
+        .build()
+        .schedule();
+
+// better, execution time on Android 4.X is 2 days
+new JobRequest.Builder(TAG)
+        .setExecutionWindow(TimeUnit.DAYS.toMillis(1), TimeUnit.DAYS.toMillis(3))
+        .build()
+        .schedule();
 ```
\ No newline at end of file
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index e1179ba..10ab2a8 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -158,7 +158,7 @@ private void testSimple() {
         extras.putString("key", "Hello world");
 
         mLastJobId = new JobRequest.Builder(DemoJob.TAG)
-                .setExecutionWindow(3_000L, 4_000L)
+                .setExecutionWindow(Long.MAX_VALUE / 2, Long.MAX_VALUE / 3 * 2)
                 .setBackoffCriteria(5_000L, JobRequest.BackoffPolicy.LINEAR)
                 .setRequiresCharging(mRequiresCharging.isChecked())
                 .setRequiresDeviceIdle(mRequiresDeviceIdle.isChecked())
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index caee000..34cede6 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -57,16 +57,26 @@
 
     /*package*/ final class Common {
 
+        // see Google Guava: https://github.com/google/guava/blob/master/guava/src/com/google/common/math/LongMath.java
+        private static long checkedAdd(long a, long b) {
+            long result = a + b;
+            return checkNoOverflow(result, (a ^ b) < 0 | (a ^ result) >= 0);
+        }
+
+        private static long checkNoOverflow(long result, boolean condition) {
+            return condition ? result : Long.MAX_VALUE;
+        }
+
         public static long getStartMs(JobRequest request) {
-            return request.getStartMs() + request.getBackoffOffset();
+            return checkedAdd(request.getStartMs(), request.getBackoffOffset());
         }
 
         public static long getEndMs(JobRequest request) {
-            return request.getEndMs() + request.getBackoffOffset();
+            return checkedAdd(request.getEndMs(), request.getBackoffOffset());
         }
 
         public static long getAverageDelayMs(JobRequest request) {
-            return getStartMs(request) + (getEndMs(request) - getStartMs(request)) / 2;
+            return checkedAdd(getStartMs(request), (getEndMs(request) - getStartMs(request)) / 2);
         }
 
         private final Context mContext;
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 45b1d54..c3b95d1 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -38,6 +38,7 @@
 import com.evernote.android.job.util.JobUtil;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
+import net.vrallev.android.cat.Cat;
 import net.vrallev.android.cat.CatLog;
 
 import java.util.concurrent.TimeUnit;
@@ -70,6 +71,9 @@
      */
     public static final NetworkType DEFAULT_NETWORK_TYPE = NetworkType.ANY;
 
+    private static final long WINDOW_THRESHOLD_WARNING = Long.MAX_VALUE / 3;
+    private static final long WINDOW_THRESHOLD_MAX = (Long.MAX_VALUE / 3) * 2;
+
     private static final CatLog CAT = new JobCat("JobRequest");
 
     private final Builder mBuilder;
@@ -505,12 +509,37 @@ private void fillContentValues(ContentValues contentValues) {
          * {@code System.currentTimeMillis() + startMs} and
          * {@code System.currentTimeMillis() + endMs}.
          *
+         * <br>
+         * <br>
+         *
+         * The maximum value for each argument is {@code Long.MAX_VALUE / 3 * 2} (about 53_375_995_583 days).
+         * Otherwise some APIs schedule the job immediately. No exception is thrown if an argument is greater
+         * then the maximum value, the arguments are silently being reduced.
+         *
+         * <br>
+         * <br>
+         *
+         * <b>NOTE:</b> It's not recommended to have such big execution windows. The {@code AlarmManager} used
+         * as fallback API doesn't allow setting a start date. Although being inexact, the execution time is
+         * the arithmetic average of {@code startMs} and {@code endMs}. The result could be that your job never
+         * runs on pre Android 5.0 devices, if one argument is too big.
+         *
          * @param startMs Earliest point from which your task is eligible to run.
          * @param endMs Latest point at which your task must be run.
          */
         public Builder setExecutionWindow(long startMs, long endMs) {
             mStartMs = JobPreconditions.checkArgumentPositive(startMs, "startMs must be greater than 0");
             mEndMs = JobPreconditions.checkArgumentInRange(endMs, startMs, Long.MAX_VALUE, "endMs");
+
+            if (mStartMs > WINDOW_THRESHOLD_MAX) {
+                Cat.i("startMs reduced from %d days to %d days", TimeUnit.MILLISECONDS.toDays(mStartMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
+                mStartMs = WINDOW_THRESHOLD_MAX;
+            }
+            if (mEndMs > WINDOW_THRESHOLD_MAX) {
+                Cat.i("endMs reduced from %d days to %d days", TimeUnit.MILLISECONDS.toDays(mEndMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
+                mEndMs = WINDOW_THRESHOLD_MAX;
+            }
+
             return this;
         }
 
@@ -645,12 +674,24 @@ public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle) {
          * The milliseconds specified are treated as offset from now, e.g. the job will run at
          * {@code System.currentTimeMillis() + exactMs}.
          *
+         * <br>
+         * <br>
+         *
+         * The maximum value of the argument is {@code Long.MAX_VALUE / 3 * 2} (about 53_375_995_583 days).
+         * No exception is thrown if the argument is greater then the maximum value, the argument is
+         * silently being reduced.
+         *
          * @param exactMs The exact offset when the job should run from when the job was scheduled.
          * @see AlarmManager#setExact(int, long, android.app.PendingIntent)
          * @see AlarmManager#setExactAndAllowWhileIdle(int, long, android.app.PendingIntent)
          */
         public Builder setExact(long exactMs) {
             mExact = true;
+            if (exactMs > WINDOW_THRESHOLD_MAX) {
+                Cat.i("exactMs reduced from %d days to %d days", TimeUnit.MILLISECONDS.toDays(exactMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
+                exactMs = WINDOW_THRESHOLD_MAX;
+            }
+
             return setExecutionWindow(exactMs, exactMs);
         }
 
@@ -756,6 +797,10 @@ public JobRequest build() {
                         + "setBackoffCriteria() with setPeriodic() is an error.");
             }
 
+            if (mIntervalMs <= 0 && (mStartMs > WINDOW_THRESHOLD_WARNING || mEndMs > WINDOW_THRESHOLD_WARNING)) {
+                Cat.w("Attention: your execution window is too big. This could result in undesired behavior, see https://github.com/evernote/android-job/blob/master/FAQ.md");
+            }
+
             return new JobRequest(this);
         }
 
