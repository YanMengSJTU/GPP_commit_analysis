diff --git a/library/src/androidTest/java/com/evernote/android/job/DatabaseUpgradeTest.java b/library/src/androidTest/java/com/evernote/android/job/DatabaseUpgradeTest.java
index 41373c8..7116b8e 100644
--- a/library/src/androidTest/java/com/evernote/android/job/DatabaseUpgradeTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/DatabaseUpgradeTest.java
@@ -7,7 +7,6 @@
 import android.support.test.runner.AndroidJUnit4;
 import android.test.suitebuilder.annotation.LargeTest;
 
-import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
@@ -27,6 +26,7 @@
 import static com.evernote.android.job.JobStorage.COLUMN_SCHEDULED_AT;
 import static com.evernote.android.job.JobStorage.COLUMN_START_MS;
 import static com.evernote.android.job.JobStorage.COLUMN_TAG;
+import static com.evernote.android.job.JobStorage.COLUMN_TRANSIENT;
 import static com.evernote.android.job.JobStorage.DATABASE_NAME;
 import static com.evernote.android.job.JobStorage.JOB_TABLE_NAME;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -39,16 +39,45 @@
 public class DatabaseUpgradeTest {
 
     @Test
-    public void testDatabaseUpgrade() {
+    public void testDatabaseUpgrade1to3() {
         Context context = InstrumentationRegistry.getContext();
         context.deleteDatabase(DATABASE_NAME);
 
-        JobOpenHelper1 jobOpenHelper = new JobOpenHelper1(context);
-        SQLiteDatabase database = jobOpenHelper.getWritableDatabase();
-        assertThat(jobOpenHelper.mDatabaseCreated).isTrue();
+        createDatabase(new JobOpenHelper1(context), false);
+        checkJob(context);
+    }
+
+    @Test
+    public void testDatabaseUpgrade2to3() {
+        Context context = InstrumentationRegistry.getContext();
+        context.deleteDatabase(DATABASE_NAME);
+
+        createDatabase(new JobOpenHelper2(context), false);
+        checkJob(context);
+    }
+
+    @Test
+    public void testDatabaseUpgrade1to2to3() {
+        Context context = InstrumentationRegistry.getContext();
+        context.deleteDatabase(DATABASE_NAME);
+
+        createDatabase(new JobOpenHelper1(context), false);
+        createDatabase(new JobOpenHelper2(context), true);
+
+        checkJob(context);
+    }
+
+    private void createDatabase(UpgradeAbleJobOpenHelper openHelper, boolean checkUpgraded) {
+        SQLiteDatabase database = openHelper.getWritableDatabase();
+        assertThat(openHelper.mDatabaseCreated).isTrue();
+        if (checkUpgraded) {
+            assertThat(openHelper.mDatabaseUpgraded).isTrue();
+        }
 
         database.close();
+    }
 
+    private void checkJob(Context context) {
         JobManager.create(context).addJobCreator(new JobCreator() {
             @Override
             public Job create(String tag) {
@@ -75,29 +104,50 @@ public Job create(String tag) {
 
         assertThat(JobManager.instance().getAllJobRequests()).isEmpty();
         assertThat(JobManager.instance().getJobStorage().getAllJobRequests(null, true)).isEmpty();
-    }
 
-    @After
-    public void tearDown() {
-        JobManager.instance().cancelAll();
+        JobManager.instance().destroy();
     }
 
-    private class JobOpenHelper1 extends SQLiteOpenHelper {
+    private abstract class UpgradeAbleJobOpenHelper extends SQLiteOpenHelper {
 
         private boolean mDatabaseCreated;
+        private boolean mDatabaseUpgraded;
+
+        public UpgradeAbleJobOpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
+            super(context, name, factory, version);
+        }
+
+        @Override
+        public final void onCreate(SQLiteDatabase db) {
+            onCreateInner(db);
+            mDatabaseCreated = true;
+        }
+
+        protected abstract void onCreateInner(SQLiteDatabase db);
+
+        @Override
+        public final void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
+            onUpgradeInner(sqLiteDatabase, oldVersion, newVersion);
+            mDatabaseCreated = true;
+            mDatabaseUpgraded = true;
+        }
+
+        protected abstract void onUpgradeInner(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion);
+    }
+
+    private class JobOpenHelper1 extends UpgradeAbleJobOpenHelper {
 
         public JobOpenHelper1(Context context) {
             super(context, DATABASE_NAME, null, 1);
         }
 
         @Override
-        public void onCreate(SQLiteDatabase db) {
+        public void onCreateInner(SQLiteDatabase db) {
             createJobTable(db);
-            mDatabaseCreated = true;
         }
 
         @Override
-        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        public void onUpgradeInner(SQLiteDatabase db, int oldVersion, int newVersion) {
             // not needed at the moment
         }
 
@@ -121,4 +171,49 @@ private void createJobTable(SQLiteDatabase db) {
                     + COLUMN_SCHEDULED_AT + " integer);");
         }
     }
+
+    private class JobOpenHelper2 extends UpgradeAbleJobOpenHelper {
+
+        public JobOpenHelper2(Context context) {
+            super(context, DATABASE_NAME, null, 2);
+        }
+
+        @Override
+        public void onCreateInner(SQLiteDatabase db) {
+            createJobTable(db);
+        }
+
+        @Override
+        public void onUpgradeInner(SQLiteDatabase db, int oldVersion, int newVersion) {
+            // with newer versions there should be a smarter way
+            if (oldVersion == 1 && newVersion == 2) {
+                upgradeFrom1To2(db);
+            }
+        }
+
+        private void createJobTable(SQLiteDatabase db) {
+            db.execSQL("create table " + JOB_TABLE_NAME + " ("
+                    + COLUMN_ID + " integer primary key, "
+                    + COLUMN_TAG + " text not null, "
+                    + COLUMN_START_MS + " integer, "
+                    + COLUMN_END_MS + " integer, "
+                    + COLUMN_BACKOFF_MS + " integer, "
+                    + COLUMN_BACKOFF_POLICY + " text not null, "
+                    + COLUMN_INTERVAL_MS + " integer, "
+                    + COLUMN_REQUIREMENTS_ENFORCED + " integer, "
+                    + COLUMN_REQUIRES_CHARGING + " integer, "
+                    + COLUMN_REQUIRES_DEVICE_IDLE + " integer, "
+                    + COLUMN_EXACT + " integer, "
+                    + COLUMN_NETWORK_TYPE + " text not null, "
+                    + COLUMN_EXTRAS + " text, "
+                    + COLUMN_PERSISTED + " integer, "
+                    + COLUMN_NUM_FAILURES + " integer, "
+                    + COLUMN_SCHEDULED_AT + " integer, "
+                    + COLUMN_TRANSIENT + " integer);");
+        }
+
+        private void upgradeFrom1To2(SQLiteDatabase db) {
+            db.execSQL("alter table " + JOB_TABLE_NAME + " add column " + COLUMN_TRANSIENT + " integer;");
+        }
+    }
 }
diff --git a/library/src/androidTest/java/com/evernote/android/job/test/JobManagerTest.java b/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
similarity index 92%
rename from library/src/androidTest/java/com/evernote/android/job/test/JobManagerTest.java
rename to library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
index 386b5bc..a3ec443 100644
--- a/library/src/androidTest/java/com/evernote/android/job/test/JobManagerTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/JobManagerTest.java
@@ -1,17 +1,14 @@
-package com.evernote.android.job.test;
+package com.evernote.android.job;
 
 import android.support.annotation.NonNull;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import android.test.suitebuilder.annotation.LargeTest;
 
-import com.evernote.android.job.Job;
-import com.evernote.android.job.JobCreator;
-import com.evernote.android.job.JobManager;
-import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.util.JobApi;
 
 import org.junit.After;
+import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -26,7 +23,7 @@
 public class JobManagerTest {
 
     @BeforeClass
-    public static void createJobManager() {
+    public static void beforeClass() {
         JobManager.create(InstrumentationRegistry.getContext()).addJobCreator(new JobCreator() {
             @Override
             public Job create(String tag) {
@@ -35,6 +32,11 @@ public Job create(String tag) {
         });
     }
 
+    @AfterClass
+    public static void afterClass() {
+        JobManager.instance().destroy();
+    }
+
     @Test
     public void testScheduleAndCancel() {
         assertThat(getManager().getApi()).isEqualTo(JobApi.getDefault(InstrumentationRegistry.getContext()));
diff --git a/library/src/androidTest/java/com/evernote/android/job/test/JobRequestTest.java b/library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java
similarity index 80%
rename from library/src/androidTest/java/com/evernote/android/job/test/JobRequestTest.java
rename to library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java
index d24f82f..e2495dc 100644
--- a/library/src/androidTest/java/com/evernote/android/job/test/JobRequestTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/JobRequestTest.java
@@ -1,16 +1,16 @@
-package com.evernote.android.job.test;
+package com.evernote.android.job;
 
 import android.support.annotation.NonNull;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import android.test.suitebuilder.annotation.LargeTest;
 
-import com.evernote.android.job.Job;
-import com.evernote.android.job.JobCreator;
-import com.evernote.android.job.JobManager;
-import com.evernote.android.job.JobRequest;
+import com.evernote.android.job.util.JobApi;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -25,7 +25,7 @@
 public class JobRequestTest {
 
     @BeforeClass
-    public static void createJobManager() {
+    public static void beforeClass() {
         JobManager.create(InstrumentationRegistry.getContext()).addJobCreator(new JobCreator() {
             @Override
             public Job create(String tag) {
@@ -34,6 +34,21 @@ public Job create(String tag) {
         });
     }
 
+    @AfterClass
+    public static void afterClass() {
+        JobManager.instance().destroy();
+    }
+
+    @Before
+    public void beforeTest() {
+        JobManager.instance().cancelAll();
+    }
+
+    @After
+    public void afterTest() {
+        JobManager.instance().cancelAll();
+    }
+
     @Test
     public void testSimpleJob() {
         JobRequest request = getBuilder()
@@ -63,8 +78,9 @@ public void testSimpleJob() {
 
     @Test
     public void testPeriodic() {
+        long interval = JobRequest.MIN_INTERVAL * 5;
         JobRequest request = getBuilder()
-                .setPeriodic(60_000L)
+                .setPeriodic(interval)
                 .setExtras(new PersistableBundleCompat())
                 .setPersisted(true)
                 .build();
@@ -72,8 +88,10 @@ public void testPeriodic() {
         assertThat(request.getJobId()).isGreaterThan(0);
         assertThat(request.getTag()).isEqualTo(TestJob.TAG);
         assertThat(request.isPersisted()).isTrue();
-        assertThat(request.getIntervalMs()).isEqualTo(60_000L);
+        assertThat(request.getIntervalMs()).isEqualTo(interval);
+        assertThat(request.getFlexMs()).isEqualTo(interval);
         assertThat(request.isPeriodic()).isTrue();
+        assertThat(request.isFlexSupport()).isFalse();
 
         assertThat(request.getStartMs()).isNegative();
         assertThat(request.getEndMs()).isNegative();
@@ -87,6 +105,25 @@ public void testPeriodic() {
         assertThat(request.requiresDeviceIdle()).isFalse();
     }
 
+    @Test
+    public void testFlex() {
+        long interval = JobRequest.MIN_INTERVAL * 5;
+        long flex = JobRequest.MIN_FLEX * 5;
+        JobRequest request = getBuilder()
+                .setPeriodic(interval, flex)
+                .build();
+
+        JobManager.instance().forceApi(JobApi.V_14);
+        JobManager.instance().schedule(request);
+
+        assertThat(request.getJobId()).isGreaterThan(0);
+        assertThat(request.getTag()).isEqualTo(TestJob.TAG);
+        assertThat(request.getIntervalMs()).isEqualTo(interval);
+        assertThat(request.getFlexMs()).isEqualTo(flex);
+        assertThat(request.isPeriodic()).isTrue();
+        assertThat(request.isFlexSupport()).isTrue();
+    }
+
     @Test
     public void testExact() {
         JobRequest request = getBuilder()
@@ -129,7 +166,14 @@ public void testExecutionWindow() {
     @Test(expected = Exception.class)
     public void testPeriodicTooLittleInterval() {
         getBuilder()
-                .setPeriodic(59_999L)
+                .setPeriodic(JobRequest.MIN_INTERVAL - 1)
+                .build();
+    }
+
+    @Test(expected = Exception.class)
+    public void testPeriodicTooLittleFlex() {
+        getBuilder()
+                .setPeriodic(JobRequest.MIN_FLEX - 1)
                 .build();
     }
 
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 4f78b09..7b4ed5b 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -438,6 +438,12 @@ public void removeJobCreator(JobCreator jobCreator) {
         return mContext;
     }
 
+    /*package*/ void destroy() {
+        synchronized (JobManager.class) {
+            instance = null;
+        }
+    }
+
     private JobProxy getJobProxy(JobRequest request) {
         return getJobProxy(request.getJobApi());
     }
