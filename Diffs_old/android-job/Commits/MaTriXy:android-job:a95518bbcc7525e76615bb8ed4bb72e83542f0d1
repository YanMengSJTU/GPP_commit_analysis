diff --git a/FAQ.md b/FAQ.md
index ab79009..a91baa4 100644
--- a/FAQ.md
+++ b/FAQ.md
@@ -86,4 +86,10 @@ new JobRequest.Builder(TAG)
         .setExecutionWindow(TimeUnit.DAYS.toMillis(1), TimeUnit.DAYS.toMillis(3))
         .build()
         .schedule();
-```
\ No newline at end of file
+```
+
+### Why can't an interval be smaller than 15 minutes for periodic jobs?
+
+This library is a subset of 3 different APIs. Since Android Nougat the minimum interval of periodic jobs is 15 minutes. Although pre Nougat devices support a smaller intervals, the least common was chosen as minimum for this library so that all devices behave the same for all APIs.
+
+The `JobScheduler` with Android Nougat allows setting a smaller interval, but the value is silently adjusted and a warning is being logged. This library throws an exception instead, so that misbehaving jobs are caught early. You can read more about it [here](https://developer.android.com/reference/android/app/job/JobInfo.html#getMinPeriodMillis()).
\ No newline at end of file
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index 241a250..261a9d1 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -209,7 +209,7 @@ private void testAllImpl() {
 
     private void testPeriodic() {
         mLastJobId = new JobRequest.Builder(DemoJob.TAG)
-                .setPeriodic(60_000L, 20_000L)
+                .setPeriodic(JobRequest.MIN_INTERVAL, JobRequest.MIN_FLEX)
                 .setRequiresCharging(mRequiresCharging.isChecked())
                 .setRequiresDeviceIdle(mRequiresDeviceIdle.isChecked())
                 .setRequiredNetworkType(JobRequest.NetworkType.values()[mNetworkTypeSpinner.getSelectedItemPosition()])
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 03a8c0c..e9229e9 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -73,18 +73,32 @@
 
     /**
      * The minimum interval of a periodic job. Specifying a smaller interval will result in an exception.
+     *
+     * <br>
+     * <br>
+     *
+     * This limit comes from the {@code JobScheduler} starting with Android Nougat. You can read
+     * <a href="https://github.com/evernote/android-job/blob/master/FAQ.md">here</a> more about
+     * the limit.
+     *
      * @see Builder#setPeriodic(long)
      * @see Builder#setPeriodic(long, long)
      */
-    public static final long MIN_INTERVAL = 60_000L;
-    // TODO: double check values with final N release, JobInfo.getMinPeriodMillis() returns 15min, kinda eh
-    // JobInfo.getMinFlexMillis() returns 5min, more eh
+    public static final long MIN_INTERVAL = TimeUnit.MINUTES.toMillis(15);
 
     /**
      * The minimum flex of a periodic job. Specifying a smaller flex will result in an exception.
+     *
+     * <br>
+     * <br>
+     *
+     * This limit comes from the {@code JobScheduler} starting with Android Nougat. You can read
+     * <a href="https://github.com/evernote/android-job/blob/master/FAQ.md">here</a> more about
+     * the limit.
+     *
      * @see Builder#setPeriodic(long, long)
      */
-    public static final long MIN_FLEX = 5_000L;
+    public static final long MIN_FLEX = TimeUnit.MINUTES.toMillis(5);
 
     private static final long WINDOW_THRESHOLD_WARNING = Long.MAX_VALUE / 3;
     private static final long WINDOW_THRESHOLD_MAX = (Long.MAX_VALUE / 3) * 2;
@@ -746,7 +760,7 @@ public Builder setExact(long exactMs) {
          * with this function. Since {@link Job.Result#RESCHEDULE} is ignored for periodic jobs,
          * setting a back-off criteria is illegal as well.
          *
-         * @param intervalMs The job should run at most once every {@code intervalMs}. The minimum value is {@code 60,000ms}.
+         * @param intervalMs The job should run at most once every {@code intervalMs}. The minimum value is {@code 15min}.
          */
         public Builder setPeriodic(long intervalMs) {
             return setPeriodic(intervalMs, intervalMs);
@@ -765,8 +779,8 @@ public Builder setPeriodic(long intervalMs) {
          * Instead you set an interval with this function. Since {@link Job.Result#RESCHEDULE} is ignored for
          * periodic jobs, setting a back-off criteria is illegal as well.
          *
-         * @param intervalMs The job should run at most once every {@code intervalMs}. The minimum value is {@code 60,000ms}.
-         * @param flexMs How close to the end of the period the job should run. The minimum value is {@code 5,000ms}.
+         * @param intervalMs The job should run at most once every {@code intervalMs}. The minimum value is {@code 15min}.
+         * @param flexMs How close to the end of the period the job should run. The minimum value is {@code 5min}.
          * @see #MIN_INTERVAL
          * @see #MIN_FLEX
          */
