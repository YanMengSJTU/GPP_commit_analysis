diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9f8a38e..e49c173 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,7 @@
+## 1.1.8
+
+* Catch wake lock crashes in all cases, fixes #153
+
 ## 1.1.7 (2017-02-27)
 
 * Use a service to reschedule jobs and prevent a too early process death, fixes #142
diff --git a/gradle.properties b/gradle.properties
index 5ca7850..3b829cf 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,3 @@
-#VERSION_NAME=1.1.7
-VERSION_NAME=1.1.7-SNAPSHOT
+#VERSION_NAME=1.1.8
+VERSION_NAME=1.1.8-SNAPSHOT
 VERSION_CODE=1
\ No newline at end of file
diff --git a/library/src/main/java/com/evernote/android/job/Job.java b/library/src/main/java/com/evernote/android/job/Job.java
index 2bcf31f..69e9bd0 100644
--- a/library/src/main/java/com/evernote/android/job/Job.java
+++ b/library/src/main/java/com/evernote/android/job/Job.java
@@ -255,7 +255,9 @@ public final boolean isFinished() {
     }
 
     /**
-     * Delegates calls to {@link WakefulBroadcastReceiver#startWakefulService(Context, Intent)}.
+     * Similar call like {@link WakefulBroadcastReceiver#startWakefulService(Context, Intent)}.
+     * Compared to the original implementation it avoids crashes on some devices. Don't forget
+     * to call {@link #completeWakefulIntent(Intent)} on the Job class.
      *
      * <br>
      * <br>
@@ -274,11 +276,12 @@ public final boolean isFinished() {
      * @see WakefulBroadcastReceiver
      */
     protected ComponentName startWakefulService(@NonNull Intent intent) {
-        return WakefulBroadcastReceiver.startWakefulService(getContext(), intent);
+        return WakeLockUtil.startWakefulService(getContext(), intent);
     }
 
     /**
-     * Delegates calls to {@link WakefulBroadcastReceiver#completeWakefulIntent(Intent)}.
+     * Similar call like {@link WakefulBroadcastReceiver#completeWakefulIntent(Intent)}.
+     * Compared to the original implementation it avoids crashes on some devices.
      *
      * <br>
      * <br>
@@ -293,7 +296,7 @@ protected ComponentName startWakefulService(@NonNull Intent intent) {
      */
     public static boolean completeWakefulIntent(@NonNull Intent intent) {
         try {
-            return WakefulBroadcastReceiver.completeWakefulIntent(intent);
+            return WakeLockUtil.completeWakefulIntent(intent);
         } catch (Exception e) {
             // could end in a NPE if the intent no wake lock was found
             return true;
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 52bbb81..82c2d26 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -26,7 +26,9 @@
 package com.evernote.android.job;
 
 import android.app.Service;
+import android.content.ComponentName;
 import android.content.Context;
+import android.content.Intent;
 import android.os.Looper;
 import android.support.annotation.NonNull;
 
@@ -243,5 +245,13 @@ public static void cleanUpOrphanedJob(Context context, int jobId) {
                 }
             }
         }
+
+        public static ComponentName startWakefulService(Context context, Intent intent) {
+            return WakeLockUtil.startWakefulService(context, intent);
+        }
+
+        public static boolean completeWakefulIntent(Intent intent) {
+            return WakeLockUtil.completeWakefulIntent(intent);
+        }
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index 528100e..74cb99c 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.SystemClock;
-import android.support.v4.content.WakefulBroadcastReceiver;
 
 import com.evernote.android.job.util.JobCat;
 
@@ -22,7 +21,7 @@
 
     /*package*/ static void startService(Context context) {
         Intent intent = new Intent(context, JobRescheduleService.class);
-        WakefulBroadcastReceiver.startWakefulService(context, intent);
+        WakeLockUtil.startWakefulService(context, intent);
     }
 
     public JobRescheduleService() {
@@ -67,7 +66,7 @@ protected void onHandleIntent(Intent intent) {
             CAT.d("Reschedule %d jobs of %d jobs", rescheduledCount, requests.size());
 
         } finally {
-            WakefulBroadcastReceiver.completeWakefulIntent(intent);
+            WakeLockUtil.completeWakefulIntent(intent);
         }
 
     }
diff --git a/library/src/main/java/com/evernote/android/job/WakeLockUtil.java b/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
index 18bd0d1..6a9f823 100644
--- a/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
+++ b/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
@@ -1,15 +1,20 @@
 package com.evernote.android.job;
 
+import android.content.ComponentName;
 import android.content.Context;
+import android.content.Intent;
 import android.os.PowerManager;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.SparseArray;
 
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
 import net.vrallev.android.cat.CatLog;
 
+import java.util.concurrent.TimeUnit;
+
 /**
  * @author rwondratschek
  */
@@ -17,6 +22,8 @@
 
     private static final CatLog CAT = new JobCat("WakeLockUtil");
 
+    private static final String EXTRA_WAKE_LOCK_ID = "com.evernote.android.job.wakelockid";
+
     private WakeLockUtil() {
         // no op
     }
@@ -58,4 +65,65 @@ public static void releaseWakeLock(@Nullable PowerManager.WakeLock wakeLock) {
             CAT.e(e);
         }
     }
+
+    private static final SparseArray<PowerManager.WakeLock> ACTIVE_WAKE_LOCKS = new SparseArray<>();
+    private static int nextId = 1;
+
+    /**
+     * Do a {@link android.content.Context#startService(android.content.Intent)
+     * Context.startService}, but holding a wake lock while the service starts.
+     * This will modify the Intent to hold an extra identifying the wake lock;
+     * when the service receives it in {@link android.app.Service#onStartCommand
+     * Service.onStartCommand}, it should pass back the Intent it receives there to
+     * {@link #completeWakefulIntent(android.content.Intent)} in order to release
+     * the wake lock.
+     *
+     * @param context The Context in which it operate.
+     * @param intent The Intent with which to start the service, as per
+     * {@link android.content.Context#startService(android.content.Intent)
+     * Context.startService}.
+     */
+    public static ComponentName startWakefulService(Context context, Intent intent) {
+        synchronized (ACTIVE_WAKE_LOCKS) {
+            int id = nextId;
+            nextId++;
+            if (nextId <= 0) {
+                nextId = 1;
+            }
+
+            intent.putExtra(EXTRA_WAKE_LOCK_ID, id);
+            ComponentName comp = context.startService(intent);
+            if (comp == null) {
+                return null;
+            }
+
+            String tag = "wake:" + comp.flattenToShortString();
+            PowerManager.WakeLock wakeLock = acquireWakeLock(context, tag, TimeUnit.MINUTES.toMillis(3));
+            if (wakeLock != null) {
+                ACTIVE_WAKE_LOCKS.put(id, wakeLock);
+            }
+
+            return comp;
+        }
+    }
+
+    /**
+     * Finish the execution from a previous {@link #startWakefulService}.  Any wake lock
+     * that was being held will now be released.
+     *
+     * @param intent The Intent as originally generated by {@link #startWakefulService}.
+     * @return Returns true if the intent is associated with a wake lock that is
+     * now released; returns false if there was no wake lock specified for it.
+     */
+    public static boolean completeWakefulIntent(Intent intent) {
+        final int id = intent.getIntExtra(EXTRA_WAKE_LOCK_ID, 0);
+        if (id == 0) {
+            return false;
+        }
+        synchronized (ACTIVE_WAKE_LOCKS) {
+            releaseWakeLock(ACTIVE_WAKE_LOCKS.get(id));
+            ACTIVE_WAKE_LOCKS.remove(id);
+            return true;
+        }
+    }
 }
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmReceiver.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmReceiver.java
index 41b5086..63ab913 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmReceiver.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmReceiver.java
@@ -29,8 +29,8 @@
 import android.content.Intent;
 import android.support.v4.content.WakefulBroadcastReceiver;
 
+import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.util.JobCat;
-import com.evernote.android.job.util.JobUtil;
 
 import net.vrallev.android.cat.CatLog;
 
@@ -54,23 +54,6 @@ public void onReceive(Context context, Intent intent) {
         }
 
         Intent serviceIntent = PlatformAlarmService.createIntent(context, intent.getIntExtra(EXTRA_JOB_ID, -1));
-
-        if (JobUtil.hasWakeLockPermission(context)) {
-            try {
-                startWakefulService(context, serviceIntent);
-            } catch (Exception e) {
-                /*
-                 * Saw a SecurityException, although WAKE_LOCK permission is granted.
-                 * https://gist.github.com/vRallev/715777806e0abe3777bc
-                 *
-                 * The wake lock is acquired after the service was started, so it's not necessary
-                 * to start the service another time.
-                 */
-                CAT.e(e);
-            }
-
-        } else {
-            context.startService(serviceIntent);
-        }
+        JobProxy.Common.startWakefulService(context, serviceIntent);
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
index 65cd5d9..59dbc0a 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
@@ -77,11 +77,7 @@ public void run() {
                 common.executeJobRequest(request);
 
                 // call here, our own wake lock could be acquired too late
-                try {
-                    PlatformAlarmReceiver.completeWakefulIntent(intent);
-                } catch (Exception e) {
-                    // could end in a NPE if the intent has no wake lock
-                }
+                JobProxy.Common.completeWakefulIntent(intent);
             }
         });
     }
