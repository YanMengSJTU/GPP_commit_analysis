diff --git a/library/build.gradle b/library/build.gradle
index 1b71eed..be804f9 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -11,9 +11,9 @@ dependencies {
     api "com.android.support:support-v4:$supportLibVersion"
     implementation "net.vrallev.android:cat:$catVersion"
 
-    androidTestImplementation 'com.android.support.test:runner:0.5'
-    androidTestImplementation 'com.android.support.test:rules:0.5'
-    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
+    androidTestImplementation 'com.android.support.test:runner:1.0.0'
+    androidTestImplementation 'com.android.support.test:rules:1.0.0'
+    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
     androidTestImplementation 'com.squareup.assertj:assertj-android:1.1.1'
     androidTestImplementation "com.google.android.gms:play-services-gcm:$playServicesVersion"
 
diff --git a/library/src/androidTest/java/com/evernote/android/job/JobManagerRule.java b/library/src/androidTest/java/com/evernote/android/job/JobManagerRule.java
index 4aa0396..d17a694 100644
--- a/library/src/androidTest/java/com/evernote/android/job/JobManagerRule.java
+++ b/library/src/androidTest/java/com/evernote/android/job/JobManagerRule.java
@@ -11,6 +11,7 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 /**
  * @author rwondratschek
@@ -21,6 +22,9 @@
 
     @Override
     protected void before() throws Throwable {
+        JobConfig.setJobReschedulePause(0, TimeUnit.MILLISECONDS);
+        JobConfig.setSkipJobReschedule(true);
+
         mManager = JobManager.create(InstrumentationRegistry.getTargetContext());
         mManager.cancelAll();
     }
@@ -34,6 +38,7 @@ protected void after() {
         mManager.cancelAll();
         mManager.destroy();
 
+        getJobScheduler().cancelAll();
         JobConfig.reset();
     }
 
diff --git a/library/src/androidTest/java/com/evernote/android/job/Platform21Test.java b/library/src/androidTest/java/com/evernote/android/job/Platform21Test.java
index 65c2ff5..a5fd4b3 100644
--- a/library/src/androidTest/java/com/evernote/android/job/Platform21Test.java
+++ b/library/src/androidTest/java/com/evernote/android/job/Platform21Test.java
@@ -1,9 +1,6 @@
 package com.evernote.android.job;
 
-import android.app.job.JobInfo;
-import android.app.job.JobScheduler;
 import android.os.Build;
-import android.support.test.InstrumentationRegistry;
 import android.support.test.filters.LargeTest;
 import android.support.test.runner.AndroidJUnit4;
 
@@ -11,9 +8,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.concurrent.TimeUnit;
-
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 import static org.junit.Assume.assumeTrue;
 
 /**
@@ -37,7 +33,7 @@ public void test100DistinctJobsLimit() {
                     .schedule();
         }
 
-        throw new AssertionError("It shouldn't be possible to create more than 100 distinct jobs with the JobScheduler");
+        fail("It shouldn't be possible to create more than 100 distinct jobs with the JobScheduler");
     }
 
     @Test
@@ -71,7 +67,7 @@ public void verifyNotLandingInCrashLoop() throws Exception {
                         .schedule();
             }
 
-            throw new AssertionError("It shouldn't be possible to create more than 100 distinct jobs with the JobScheduler");
+            fail("It shouldn't be possible to create more than 100 distinct jobs with the JobScheduler");
 
         } catch (Exception ignored) {
         }
@@ -97,24 +93,10 @@ public void verifyNotLandingInCrashLoop() throws Exception {
         assertThat(manager.getAllJobRequests()).hasSize(jobCount + moreJobs);
 
         waitForJobRescheduleService();
-        assertThat(mJobManagerRule.getAllPendingJobsFromScheduler()).hasSize(jobCount);
+        assertThat(mJobManagerRule.getAllPendingJobsFromScheduler().size()).isGreaterThanOrEqualTo(jobCount);
     }
 
     private void waitForJobRescheduleService() throws InterruptedException {
-        boolean await = JobRescheduleService.latch.await(15, TimeUnit.SECONDS);
-        if (!await) {
-            // must be O
-            assertThat(Build.VERSION.SDK_INT).isGreaterThanOrEqualTo(Build.VERSION_CODES.O);
-
-            JobScheduler jobScheduler = InstrumentationRegistry.getContext().getSystemService(JobScheduler.class);
-            JobInfo pendingJob = jobScheduler.getPendingJob(JobRescheduleService.JOB_ID);
-            if (pendingJob != null) {
-                // job was scheduled, that's what we want to verify, now manually call the reschedule
-                new JobRescheduleService().rescheduleJobs(mJobManagerRule.getManager());
-            } else {
-                // job probably running, give it another try
-                assertThat(JobRescheduleService.latch.await(15, TimeUnit.SECONDS)).isTrue();
-            }
-        }
+        new JobRescheduleService().rescheduleJobs(mJobManagerRule.getManager());
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/GcmAvailableHelper.java b/library/src/main/java/com/evernote/android/job/GcmAvailableHelper.java
index 4532054..c33522a 100644
--- a/library/src/main/java/com/evernote/android/job/GcmAvailableHelper.java
+++ b/library/src/main/java/com/evernote/android/job/GcmAvailableHelper.java
@@ -123,6 +123,10 @@ private static void setServiceEnabled(Context context, boolean enabled) {
                         CAT.i("GCM service enabled");
                     }
                     break;
+                case PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED:
+                case PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER:
+                    // do nothing
+                    break;
             }
 
         } catch (Throwable t) {
diff --git a/library/src/main/java/com/evernote/android/job/JobConfig.java b/library/src/main/java/com/evernote/android/job/JobConfig.java
index 177c17c..ca9b281 100644
--- a/library/src/main/java/com/evernote/android/job/JobConfig.java
+++ b/library/src/main/java/com/evernote/android/job/JobConfig.java
@@ -58,6 +58,7 @@ private JobConfig() {
     private static volatile boolean forceAllowApi14 = false;
 
     private static volatile long jobReschedulePause = DEFAULT_JOB_RESCHEDULE_PAUSE;
+    private static volatile boolean skipJobReschedule = false;
 
     static {
         ENABLED_APIS = new EnumMap<>(JobApi.class);
@@ -206,6 +207,14 @@ public static void setJobReschedulePause(long pause, @NonNull TimeUnit timeUnit)
         jobReschedulePause = timeUnit.toMillis(pause);
     }
 
+    /*package*/ static boolean isSkipJobReschedule() {
+        return skipJobReschedule;
+    }
+
+    /*package*/ static void setSkipJobReschedule(boolean skipJobReschedule) {
+        JobConfig.skipJobReschedule = skipJobReschedule;
+    }
+
     /**
      * Resets all adjustments in the config.
      */
@@ -215,6 +224,8 @@ public static void reset() {
         }
         allowSmallerIntervals = false;
         forceAllowApi14 = false;
+        jobReschedulePause = DEFAULT_JOB_RESCHEDULE_PAUSE;
+        skipJobReschedule = false;
         JobCat.setLogcatEnabled(true);
         JobCat.clearLogger();
     }
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 83a6520..bb56a82 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -155,7 +155,9 @@ private JobManager(Context context) {
         mJobStorage = new JobStorage(context);
         mJobExecutor = new JobExecutor();
 
-        JobRescheduleService.startService(mContext);
+        if (!JobConfig.isSkipJobReschedule()) {
+            JobRescheduleService.startService(mContext);
+        }
     }
 
     /**
