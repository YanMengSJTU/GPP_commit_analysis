diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 7b4ed5b..7c4f300 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -124,7 +124,7 @@ public static JobManager create(@NonNull Context context) {
      * Initializes the singleton. It's necessary to call this function before using the {@code JobManager}.
      * Calling it multiple times has not effect.
      *
-     * @param context Any {@link Context} to instantiate the singleton object.
+     * @param context    Any {@link Context} to instantiate the singleton object.
      * @param jobCreator The mapping between a specific job tag and the job class.
      * @return The new or existing singleton object.
      * @deprecated Use {@link #create(Context)} instead and call {@link #addJobCreator(JobCreator)} after that.
@@ -167,6 +167,7 @@ public static JobManager instance() {
     private final JobCreatorHolder mJobCreatorHolder;
     private final JobStorage mJobStorage;
     private final JobExecutor mJobExecutor;
+    private final Config mConfig;
 
     private JobApi mApi;
 
@@ -175,12 +176,20 @@ private JobManager(Context context) {
         mJobCreatorHolder = new JobCreatorHolder();
         mJobStorage = new JobStorage(context);
         mJobExecutor = new JobExecutor();
+        mConfig = new Config();
 
         setJobProxy(JobApi.getDefault(mContext));
 
         rescheduleTasksIfNecessary();
     }
 
+    /**
+     * @return The current configuration for the job manager.
+     */
+    public Config getConfig() {
+        return mConfig;
+    }
+
     protected void setJobProxy(JobApi api) {
         mApi = api;
     }
@@ -398,9 +407,11 @@ private int cancelAllInner(@Nullable String tag) {
      * Global switch to enable or disable logging.
      *
      * @param verbose Whether or not to print log messages.
+     * @deprecated Use {@link Config#setVerbose(boolean)} instead.
      */
+    @Deprecated
     public void setVerbose(boolean verbose) {
-        CatGlobal.setPackageEnabled(PACKAGE, verbose);
+        mConfig.setVerbose(verbose);
     }
 
     /**
@@ -509,4 +520,30 @@ public void run() {
             }
         }.start();
     }
+
+    public final class Config {
+
+        private boolean mVerbose;
+
+        private Config() {
+            mVerbose = true;
+        }
+
+        /**
+         * @return Whether logging is enabled for this library. The default value is {@code true}.
+         */
+        public boolean isVerbose() {
+            return mVerbose;
+        }
+
+        /**
+         * Global switch to enable or disable logging.
+         *
+         * @param verbose Whether or not to print all log messages. The default value is {@code true}.
+         */
+        public void setVerbose(boolean verbose) {
+            mVerbose = verbose;
+            CatGlobal.setPackageEnabled(PACKAGE, verbose);
+        }
+    }
 }
