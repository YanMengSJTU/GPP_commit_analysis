diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7dc8571..2413f80 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,7 @@
+## 1.0.10 (2016-07-25)
+
+* Create the JobManager in all API services
+
 ## 1.0.9 (2016-07-18)
 
 * Bug fixes
diff --git a/README.md b/README.md
index de61f04..c0e7fbe 100644
--- a/README.md
+++ b/README.md
@@ -10,7 +10,7 @@ Download [the latest version][2] or grab via Gradle:
 
 ```groovy
 dependencies {
-    compile 'com.evernote:android-job:1.0.9'
+    compile 'com.evernote:android-job:1.0.10'
 }
 ```
 
@@ -191,7 +191,7 @@ See [here](FAQ.md).
 License
 -------
 
-    Copyright (c) 2007-2015 by Evernote Corporation, All rights reserved.
+    Copyright (c) 2007-2016 by Evernote Corporation, All rights reserved.
 
     Use of the source code and binary libraries included in this package
     is permitted under the following terms:
diff --git a/gradle.properties b/gradle.properties
index ae3f794..78c42bd 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,3 @@
-#VERSION_NAME=1.0.9
-VERSION_NAME=1.0.9-SNAPSHOT
+#VERSION_NAME=1.0.10
+VERSION_NAME=1.0.10-SNAPSHOT
 VERSION_CODE=1
\ No newline at end of file
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 67e8900..cb87815 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -25,6 +25,7 @@
  */
 package com.evernote.android.job;
 
+import android.annotation.SuppressLint;
 import android.app.AlarmManager;
 import android.app.Application;
 import android.app.job.JobScheduler;
@@ -82,6 +83,7 @@
     private static final String PACKAGE = JobManager.class.getPackage().getName();
     private static final CatLog CAT = new JobCat("JobManager");
 
+    @SuppressLint("StaticFieldLeak")
     private static volatile JobManager instance;
 
     /**
@@ -91,7 +93,7 @@
      * @param context Any {@link Context} to instantiate the singleton object.
      * @return The new or existing singleton object.
      */
-    public static JobManager create(Context context) {
+    public static JobManager create(@NonNull Context context) {
         if (instance == null) {
             synchronized (JobManager.class) {
                 if (instance == null) {
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 916fa45..ff91de9 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -73,20 +73,20 @@ public static long getAverageDelayMs(JobRequest request) {
         private final int mJobId;
         private final CatLog mCat;
 
+        private final JobManager mJobManager;
+
         public Common(Service service, int jobId) {
             mContext = service;
             mJobId = jobId;
             mCat = new JobCat(service.getClass());
-        }
 
-        public JobRequest getPendingRequest() {
-            return getPendingRequest(JobManager.instance());
+            mJobManager = JobManager.create(service);
         }
 
-        public JobRequest getPendingRequest(JobManager manager) {
+        public JobRequest getPendingRequest() {
             // order is important for logging purposes
-            JobRequest request = manager.getJobRequest(mJobId, true);
-            Job job = manager.getJob(mJobId);
+            JobRequest request = mJobManager.getJobRequest(mJobId, true);
+            Job job = mJobManager.getJob(mJobId);
             boolean periodic = request != null && request.isPeriodic();
 
             if (job != null && !job.isFinished()) {
@@ -129,13 +129,12 @@ public JobRequest getPendingRequest(JobManager manager) {
             }
 
             mCat.d("Run job, %s, waited %s, %s", request, JobUtil.timeToString(waited), timeWindow);
-            JobManager manager = JobManager.instance();
-            JobExecutor jobExecutor = manager.getJobExecutor();
+            JobExecutor jobExecutor = mJobManager.getJobExecutor();
             Job job = null;
 
             try {
                 // create job first before setting it transient, avoids a race condition while rescheduling jobs
-                job = manager.getJobCreatorHolder().createJob(request.getTag());
+                job = mJobManager.getJobCreatorHolder().createJob(request.getTag());
 
                 if (!request.isPeriodic()) {
                     request.setTransient(true);
@@ -163,7 +162,7 @@ public JobRequest getPendingRequest(JobManager manager) {
 
             } finally {
                 if (!request.isPeriodic()) {
-                    manager.getJobStorage().remove(request);
+                    mJobManager.getJobStorage().remove(request);
                 }
             }
         }
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
index 355ba14..275628a 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
@@ -29,7 +29,6 @@
 import android.content.Context;
 import android.content.Intent;
 
-import com.evernote.android.job.JobManager;
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
 
@@ -63,11 +62,10 @@ protected void onHandleIntent(final Intent intent) {
         }
 
         int jobId = intent.getIntExtra(PlatformAlarmReceiver.EXTRA_JOB_ID, -1);
-
         final JobProxy.Common common = new JobProxy.Common(this, jobId);
 
         // create the JobManager. Seeing sometimes exceptions, that it wasn't created, yet.
-        final JobRequest request = common.getPendingRequest(JobManager.create(this));
+        final JobRequest request = common.getPendingRequest();
         if (request == null) {
             common.cleanUpOrphanedJob();
             return;
