diff --git a/CHANGELOG.md b/CHANGELOG.md
index a1c9d35..7a4aa9f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,7 @@
+## 1.1.1 (2016-10-11)
+
+* Add test option to override minimum interval and flex for testing purposes
+
 ## 1.1.0 (2016-09-23)
 
 * Bump SDK version to 24
diff --git a/gradle.properties b/gradle.properties
index 399390b..aa18880 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,3 @@
-#VERSION_NAME=1.1.0
-VERSION_NAME=1.1.0-SNAPSHOT
+#VERSION_NAME=1.1.1
+VERSION_NAME=1.1.1-SNAPSHOT
 VERSION_CODE=1
\ No newline at end of file
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index c5e5d55..d0902c8 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -30,6 +30,7 @@
 import android.app.Application;
 import android.app.job.JobScheduler;
 import android.content.Context;
+import android.os.Build;
 import android.os.PowerManager;
 import android.os.SystemClock;
 import android.support.annotation.NonNull;
@@ -522,10 +523,12 @@ public void run() {
 
         private boolean mVerbose;
         private boolean mGcmEnabled;
+        private boolean mAllowSmallerIntervals;
 
         private Config() {
             mVerbose = true;
             mGcmEnabled = true;
+            mAllowSmallerIntervals = false;
         }
 
         /**
@@ -584,5 +587,30 @@ public void setGcmApiEnabled(boolean enabled) {
                 }
             }
         }
+
+        /**
+         * Checks whether a smaller interval and flex are allowed for periodic jobs. That's helpful
+         * for testing purposes.
+         *
+         * @return Whether a smaller interval and flex than the minimum values are allowed for periodic jobs
+         * are allowed. The default value is {@code false}.
+         */
+        public boolean isAllowSmallerIntervalsForMarshmallow() {
+            return mAllowSmallerIntervals && Build.VERSION.SDK_INT < Build.VERSION_CODES.N;
+        }
+
+        /**
+         * Option to override the minimum period and minimum flex for periodic jobs. This is useful for testing
+         * purposes. This method only works for Android M and earlier. Later versions throw an exception.
+         *
+         * @param allowSmallerIntervals Whether a smaller interval and flex than the minimum values are allowed
+         *                              for periodic jobs are allowed. The default value is {@code false}.
+         */
+        public void setAllowSmallerIntervalsForMarshmallow(boolean allowSmallerIntervals) {
+            if (allowSmallerIntervals && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+                throw new IllegalStateException("This method is only allowed to call on Android M or earlier");
+            }
+            mAllowSmallerIntervals = allowSmallerIntervals;
+        }
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 6119665..37ad398 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -121,7 +121,7 @@ public JobRequest getPendingRequest() {
                 mCat.d("Job %d already finished, %s", mJobId, request);
                 return null;
 
-            } else if (job != null && System.currentTimeMillis() - job.getFinishedTimeStamp() < JobRequest.MIN_INTERVAL / 2) {
+            } else if (job != null && System.currentTimeMillis() - job.getFinishedTimeStamp() < JobRequest.getMinInterval() / 2) {
                 mCat.d("Job %d is periodic and just finished, %s", mJobId, request);
                 return null;
 
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 0a236ea..70086f1 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -105,6 +105,14 @@
 
     private static final CatLog CAT = new JobCat("JobRequest");
 
+    /*package*/ static long getMinInterval() {
+        return JobManager.instance().getConfig().isAllowSmallerIntervalsForMarshmallow() ? TimeUnit.MINUTES.toMillis(1) : MIN_INTERVAL;
+    }
+
+    /*package*/ static long getMinFlex() {
+        return JobManager.instance().getConfig().isAllowSmallerIntervalsForMarshmallow() ? TimeUnit.SECONDS.toMillis(30) : MIN_FLEX;
+    }
+
     private final Builder mBuilder;
     private final JobApi mJobApi;
 
@@ -785,8 +793,8 @@ public Builder setPeriodic(long intervalMs) {
          * @see #MIN_FLEX
          */
         public Builder setPeriodic(long intervalMs, long flexMs) {
-            mIntervalMs = JobPreconditions.checkArgumentInRange(intervalMs, MIN_INTERVAL, Long.MAX_VALUE, "intervalMs");
-            mFlexMs = JobPreconditions.checkArgumentInRange(flexMs, MIN_FLEX, mIntervalMs, "flexMs");
+            mIntervalMs = JobPreconditions.checkArgumentInRange(intervalMs, getMinInterval(), Long.MAX_VALUE, "intervalMs");
+            mFlexMs = JobPreconditions.checkArgumentInRange(flexMs, getMinFlex(), mIntervalMs, "flexMs");
             return this;
         }
 
@@ -851,8 +859,14 @@ public JobRequest build() {
             JobPreconditions.checkNotNull(mNetworkType);
 
             if (mIntervalMs > 0) {
-                JobPreconditions.checkArgumentInRange(mIntervalMs, MIN_INTERVAL, Long.MAX_VALUE, "intervalMs");
-                JobPreconditions.checkArgumentInRange(mFlexMs, MIN_FLEX, mIntervalMs, "flexMs");
+                JobPreconditions.checkArgumentInRange(mIntervalMs, getMinInterval(), Long.MAX_VALUE, "intervalMs");
+                JobPreconditions.checkArgumentInRange(mFlexMs, getMinFlex(), mIntervalMs, "flexMs");
+
+                if (mIntervalMs < MIN_INTERVAL || mFlexMs < MIN_FLEX) {
+                    // this means the debug flag is set to true
+                    CAT.w("AllowSmallerIntervals enabled, this will crash on Android N and later, interval %d (minimum is %d), flex %d (minimum is %d)",
+                            mIntervalMs, MIN_INTERVAL, mFlexMs, MIN_FLEX);
+                }
             }
 
             if (mExact && mIntervalMs > 0) {
