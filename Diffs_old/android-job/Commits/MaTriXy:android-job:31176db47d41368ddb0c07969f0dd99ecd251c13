diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 02d9e0d..12d3040 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -483,6 +483,13 @@ private void fillContentValues(ContentValues contentValues) {
          * {@link #setPeriodic(long)} or {@link #setExact(long)}. For those types jobs it doesn't
          * make sense to have a time window.
          *
+         * <br>
+         * <br>
+         *
+         * The window specified is treated as offset from now, e.g. the job will run between
+         * {@code System.currentTimeMillis() + startMs} and
+         * {@code System.currentTimeMillis() + endMs}.
+         *
          * @param startMs Earliest point from which your task is eligible to run.
          * @param endMs Latest point at which your task must be run.
          */
@@ -617,6 +624,12 @@ public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle) {
          * The default value is set to {@code false}. Internally an exact job is always using the
          * {@link AlarmManager}.
          *
+         * <br>
+         * <br>
+         *
+         * The milliseconds specified are treated as offset from now, e.g. the job will run at
+         * {@code System.currentTimeMillis() + exactMs}.
+         *
          * @param exactMs The exact offset when the job should run from when the job was scheduled.
          * @see AlarmManager#setExact(int, long, android.app.PendingIntent)
          * @see AlarmManager#setExactAndAllowWhileIdle(int, long, android.app.PendingIntent)
