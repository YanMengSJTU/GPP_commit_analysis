diff --git a/FAQ.md b/FAQ.md
index 84005a9..e04e6f4 100644
--- a/FAQ.md
+++ b/FAQ.md
@@ -183,7 +183,7 @@ Fortunately, there is a workaround to prevent the crash. You need to remove the
 
 ### Why does my job run while the device is offline, although I've requested a network connection?
 
-That's expected. The job should run once during a period or within the specified execution window. The timing is a higher requirement than the network type, which is more like a hint when it's best to run your job. To make sure that all requirements are met, you can call `.setRequirementsEnforced(true)`. This will make sure that your job won't run, if one checks fail, e.g.
+That's expected. The job should run once during a period or within the specified execution window. The timing is a higher requirement than the network type, which is more like a hint when it's best to run your job. To make sure that all requirements are met, you can call `.setRequirementsEnforced(true)`. This will make sure that your job won't run, if one check fails, e.g.
 
 ```java
 new JobRequest.Builder(DemoSyncJob.TAG)
@@ -197,7 +197,7 @@ new JobRequest.Builder(DemoSyncJob.TAG)
 
 ### I cannot override the Application class. How can I add my `JobCreator`?
 
-There is an alternative. You can register a `BroadcastReceiver` to get notified that you should add your `JobCreator` like the following:
+There is an alternative. You can register a `BroadcastReceiver` to get notified about that you should add your `JobCreator`, e.g.
 
 ```xml
 <receiver
diff --git a/README.md b/README.md
index ce737f1..8148ccd 100644
--- a/README.md
+++ b/README.md
@@ -20,7 +20,7 @@ You can read the [JavaDoc here](https://evernote.github.io/android-job/javadoc/)
 
 The class `JobManager` serves as entry point. Your jobs need to extend the class `Job`. Create a `JobRequest` with the corresponding builder class and schedule this request with the `JobManager`.
 
-Before you can use the `JobManager` you must initialize the singleton. You need to provide a `Context` and add a `JobCreator` implementation after that. The `JobCreator` maps a job tag to a specific job class. It's recommend to initialize the `JobManager` in the `onCreate()` method of your `Application` object.
+Before you can use the `JobManager` you must initialize the singleton. You need to provide a `Context` and add a `JobCreator` implementation after that. The `JobCreator` maps a job tag to a specific job class. It's recommend to initialize the `JobManager` in the `onCreate()` method of your `Application` object, but there is [an alternative](FAQ.md#i-cannot-override-the-application-class-how-can-i-add-my-jobcreator), if you don't have access to the `Application` class.
 
 ```java
 public class App extends Application {
