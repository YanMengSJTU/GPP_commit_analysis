diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index 4480cd9..ebe4205 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -79,6 +79,11 @@ public boolean onPrepareOptionsMenu(Menu menu) {
         } else {
             menu.findItem(R.id.action_force_21).setVisible(false);
         }
+        if (JobApi.V_19.isSupported(this)) {
+            menu.findItem(R.id.action_force_19).setChecked(false);
+        } else {
+            menu.findItem(R.id.action_force_19).setVisible(false);
+        }
         if (JobApi.V_14.isSupported(this)) {
             menu.findItem(R.id.action_force_14).setChecked(false);
         } else {
@@ -97,6 +102,9 @@ public boolean onPrepareOptionsMenu(Menu menu) {
             case V_21:
                 menu.findItem(R.id.action_force_21).setChecked(true);
                 break;
+            case V_19:
+                menu.findItem(R.id.action_force_19).setChecked(true);
+                break;
             case V_14:
                 menu.findItem(R.id.action_force_14).setChecked(true);
                 break;
@@ -119,6 +127,9 @@ public boolean onOptionsItemSelected(MenuItem item) {
             case R.id.action_force_21:
                 mJobManager.forceApi(JobApi.V_21);
                 return true;
+            case R.id.action_force_19:
+                mJobManager.forceApi(JobApi.V_19);
+                return true;
             case R.id.action_force_14:
                 mJobManager.forceApi(JobApi.V_14);
                 return true;
diff --git a/demo/src/main/res/menu/activity_main.xml b/demo/src/main/res/menu/activity_main.xml
index 493a124..0dcfb3e 100644
--- a/demo/src/main/res/menu/activity_main.xml
+++ b/demo/src/main/res/menu/activity_main.xml
@@ -13,6 +13,10 @@
             android:id="@+id/action_force_21"
             android:title="v21"
             app:showAsAction="never"/>
+        <item
+            android:id="@+id/action_force_19"
+            android:title="v19"
+            app:showAsAction="never"/>
         <item
             android:id="@+id/action_force_14"
             android:title="v14"
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 34cede6..2afb72d 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -129,11 +129,11 @@ public JobRequest getPendingRequest() {
             String timeWindow;
             if (request.isPeriodic()) {
                 timeWindow = "interval " + JobUtil.timeToString(request.getIntervalMs());
-            } else if (JobApi.V_14.equals(request.getJobApi())) {
-                timeWindow = "delay " + JobUtil.timeToString(getAverageDelayMs(request));
-            } else {
+            } else if (request.getJobApi().supportsExecutionWindow()) {
                 timeWindow = String.format(Locale.US, "start %s, end %s", JobUtil.timeToString(getStartMs(request)),
                         JobUtil.timeToString(getEndMs(request)));
+            } else {
+                timeWindow = "delay " + JobUtil.timeToString(getAverageDelayMs(request));
             }
 
             if (Looper.myLooper() == Looper.getMainLooper()) {
diff --git a/library/src/main/java/com/evernote/android/job/util/JobApi.java b/library/src/main/java/com/evernote/android/job/util/JobApi.java
index 5857807..50b588b 100644
--- a/library/src/main/java/com/evernote/android/job/util/JobApi.java
+++ b/library/src/main/java/com/evernote/android/job/util/JobApi.java
@@ -29,10 +29,12 @@
 import android.app.job.JobScheduler;
 import android.content.Context;
 import android.os.Build;
+import android.support.annotation.NonNull;
 
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.gcm.JobProxyGcm;
 import com.evernote.android.job.v14.JobProxy14;
+import com.evernote.android.job.v19.JobProxy19;
 import com.evernote.android.job.v21.JobProxy21;
 import com.evernote.android.job.v24.JobProxy24;
 import com.google.android.gms.gcm.GcmNetworkManager;
@@ -46,21 +48,34 @@
     /**
      * Uses the {@link JobScheduler} for scheduling jobs.
      */
-    V_24,
+    V_24(true),
     /**
      * Uses the {@link JobScheduler} for scheduling jobs.
      */
-    V_21,
+    V_21(true),
     /**
      * Uses the {@link AlarmManager} for scheduling jobs.
      */
-    V_14,
+    V_19(true),
+    /**
+     * Uses the {@link AlarmManager} for scheduling jobs.
+     */
+    V_14(false),
     /**
      * Uses the {@link GcmNetworkManager} for scheduling jobs.
      */
-    GCM;
+    GCM(true);
 
     private JobProxy mCachedProxy;
+    private final boolean mSupportsExecutionWindow;
+
+    JobApi(boolean supportsExecutionWindow) {
+        mSupportsExecutionWindow = supportsExecutionWindow;
+    }
+
+    public boolean supportsExecutionWindow() {
+        return mSupportsExecutionWindow;
+    }
 
     public boolean isSupported(Context context) {
         switch (this) {
@@ -68,6 +83,8 @@ public boolean isSupported(Context context) {
                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N;
             case V_21:
                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;
+            case V_19:
+                return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;
             case V_14:
                 return true;
             case GCM:
@@ -77,12 +94,15 @@ public boolean isSupported(Context context) {
         }
     }
 
+    @NonNull
     public JobProxy createProxy(Context context) {
         switch (this) {
             case V_24:
                 return new JobProxy24(context);
             case V_21:
                 return new JobProxy21(context);
+            case V_19:
+                return new JobProxy19(context);
             case V_14:
                 return new JobProxy14(context);
             case GCM:
@@ -92,6 +112,7 @@ public JobProxy createProxy(Context context) {
         }
     }
 
+    @NonNull
     public synchronized JobProxy getCachedProxy(Context context) {
         if (mCachedProxy == null) {
             mCachedProxy = createProxy(context);
@@ -99,6 +120,7 @@ public synchronized JobProxy getCachedProxy(Context context) {
         return mCachedProxy;
     }
 
+    @NonNull
     public static JobApi getDefault(Context context) {
         if (V_24.isSupported(context)) {
             return V_24;
@@ -106,6 +128,8 @@ public static JobApi getDefault(Context context) {
             return V_21;
         } else if (GCM.isSupported(context)) {
             return GCM;
+        } else if (V_19.isSupported(context)) {
+            return V_19;
         } else {
             return V_14;
         }
diff --git a/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java b/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
index 8d7508c..b5a2e90 100644
--- a/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
+++ b/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
@@ -44,21 +44,66 @@
  */
 public class JobProxy14 implements JobProxy {
 
-    private static final CatLog CAT = new JobCat("JobProxy14");
+    private static final String TAG = "JobProxy14";
+
+    protected final Context mContext;
+    protected final CatLog mCat;
 
-    private final Context mContext;
     private AlarmManager mAlarmManager;
 
     public JobProxy14(Context context) {
+        this(context, TAG);
+    }
+
+    protected JobProxy14(Context context, String logTag) {
         mContext = context;
+        mCat = new JobCat(logTag);
     }
 
     @Override
     public void plantOneOff(JobRequest request) {
         PendingIntent pendingIntent = getPendingIntent(request, false);
-        setAlarm(request, System.currentTimeMillis() + Common.getAverageDelayMs(request), pendingIntent);
 
-        CAT.d("Scheduled alarm, %s, delay %s, exact %b", request,
+        AlarmManager alarmManager = getAlarmManager();
+        if (alarmManager == null) {
+            return;
+        }
+
+        try {
+            if (request.isExact()) {
+                plantOneOffExact(request, alarmManager, pendingIntent);
+            } else {
+                plantOneOffInexact(request, alarmManager, pendingIntent);
+            }
+        } catch (Exception e) {
+            // https://gist.github.com/vRallev/621b0b76a14ddde8691c
+            mCat.e(e);
+        }
+    }
+
+    protected void plantOneOffInexact(JobRequest request, AlarmManager alarmManager, PendingIntent pendingIntent) {
+        alarmManager.set(AlarmManager.RTC, getTriggerAtMillis(request), pendingIntent);
+        logScheduled(request);
+    }
+
+    protected void plantOneOffExact(JobRequest request, AlarmManager alarmManager, PendingIntent pendingIntent) {
+        long triggerAtMillis = getTriggerAtMillis(request);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerAtMillis, pendingIntent);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            alarmManager.setExact(AlarmManager.RTC_WAKEUP, triggerAtMillis, pendingIntent);
+        } else {
+            alarmManager.set(AlarmManager.RTC_WAKEUP, triggerAtMillis, pendingIntent);
+        }
+        logScheduled(request);
+    }
+
+    protected long getTriggerAtMillis(JobRequest request) {
+        return System.currentTimeMillis() + Common.getAverageDelayMs(request);
+    }
+
+    private void logScheduled(JobRequest request) {
+        mCat.d("Scheduled alarm, %s, delay %s, exact %b", request,
                 JobUtil.timeToString(Common.getAverageDelayMs(request)), request.isExact());
     }
 
@@ -70,7 +115,7 @@ public void plantPeriodic(JobRequest request) {
             alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + request.getIntervalMs(), request.getIntervalMs(), pendingIntent);
         }
 
-        CAT.d("Scheduled repeating alarm, %s, interval %s", request, JobUtil.timeToString(request.getIntervalMs()));
+        mCat.d("Scheduled repeating alarm, %s, interval %s", request, JobUtil.timeToString(request.getIntervalMs()));
     }
 
     @Override
@@ -83,7 +128,7 @@ public void cancel(int jobId) {
             } catch (Exception e) {
                 // java.lang.SecurityException: get application info: Neither user 1010133 nor
                 // current process has android.permission.INTERACT_ACROSS_USERS.
-                CAT.e(e);
+                mCat.e(e);
             }
         }
     }
@@ -119,36 +164,11 @@ protected PendingIntent getPendingIntent(int jobId, int flags) {
         } catch (Exception e) {
             // java.lang.SecurityException: Permission Denial: getIntentSender() from pid=31482, uid=10057,
             // (need uid=-1) is not allowed to send as package com.evernote
-            CAT.e(e);
+            mCat.e(e);
             return null;
         }
     }
 
-    protected void setAlarm(JobRequest request, long triggerAtMillis, PendingIntent pendingIntent) {
-        AlarmManager alarmManager = getAlarmManager();
-        if (alarmManager == null) {
-            return;
-        }
-
-        try {
-            if (request.isExact()) {
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                    alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerAtMillis, pendingIntent);
-                } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
-                    alarmManager.setExact(AlarmManager.RTC_WAKEUP, triggerAtMillis, pendingIntent);
-                } else {
-                    alarmManager.set(AlarmManager.RTC_WAKEUP, triggerAtMillis, pendingIntent);
-                }
-
-            } else {
-                alarmManager.set(AlarmManager.RTC, triggerAtMillis, pendingIntent);
-            }
-        } catch (Exception e) {
-            // https://gist.github.com/vRallev/621b0b76a14ddde8691c
-            CAT.e(e);
-        }
-    }
-
     @Nullable
     protected AlarmManager getAlarmManager() {
         if (mAlarmManager == null) {
@@ -156,7 +176,7 @@ protected AlarmManager getAlarmManager() {
         }
         if (mAlarmManager == null) {
             // https://gist.github.com/vRallev/5daef6e8a3b0d4a7c366
-            CAT.e("AlarmManager is null");
+            mCat.e("AlarmManager is null");
         }
         return mAlarmManager;
     }
diff --git a/library/src/main/java/com/evernote/android/job/v19/JobProxy19.java b/library/src/main/java/com/evernote/android/job/v19/JobProxy19.java
new file mode 100644
index 0000000..2e3d16d
--- /dev/null
+++ b/library/src/main/java/com/evernote/android/job/v19/JobProxy19.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright 2007-present Evernote Corporation.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package com.evernote.android.job.v19;
+
+import android.annotation.TargetApi;
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.os.Build;
+
+import com.evernote.android.job.JobRequest;
+import com.evernote.android.job.util.JobUtil;
+import com.evernote.android.job.v14.JobProxy14;
+
+/**
+ * @author rwondratschek
+ */
+@TargetApi(Build.VERSION_CODES.KITKAT)
+public class JobProxy19 extends JobProxy14 {
+
+    private static final String TAG = "JobProxy19";
+
+    public JobProxy19(Context context) {
+        super(context, TAG);
+    }
+
+    @Override
+    protected void plantOneOffInexact(JobRequest request, AlarmManager alarmManager, PendingIntent pendingIntent) {
+        long currentTime = System.currentTimeMillis();
+        long startMs = currentTime + Common.getStartMs(request);
+        long lengthMs = Common.getEndMs(request) - Common.getStartMs(request);
+
+        alarmManager.setWindow(AlarmManager.RTC, startMs ,lengthMs, pendingIntent);
+
+        mCat.d("Schedule alarm, %s, start %s, end %s", request,
+                JobUtil.timeToString(Common.getStartMs(request)), JobUtil.timeToString(Common.getEndMs(request)));
+    }
+}
