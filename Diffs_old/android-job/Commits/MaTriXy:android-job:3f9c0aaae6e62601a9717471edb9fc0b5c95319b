diff --git a/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java b/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java
new file mode 100644
index 0000000..21022c5
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java
@@ -0,0 +1,53 @@
+package com.evernote.android.job;
+
+import android.support.annotation.NonNull;
+
+import com.evernote.android.job.test.DummyJobs;
+import com.evernote.android.job.test.TestCat;
+
+import org.junit.Rule;
+import org.robolectric.RuntimeEnvironment;
+
+import static org.assertj.core.api.Java6Assertions.assertThat;
+import static org.mockito.Mockito.doReturn;
+
+/**
+ * @author rwondratschek
+ */
+public abstract class BaseJobManagerTest {
+
+    @Rule
+    public final JobManagerRule mJobManagerRule = new JobManagerRule(provideJobCreator());
+
+    @NonNull
+    protected JobCreator provideJobCreator() {
+        return new DummyJobs.SpyableJobCreator(DummyJobs.TEST_JOB_CREATOR);
+    }
+
+    @NonNull
+    protected final JobManager manager() {
+        return mJobManagerRule.getJobManager();
+    }
+
+    @NonNull
+    protected void executeJob(int jobId, @NonNull Job.Result expected) {
+        JobProxy.Common common = new JobProxy.Common(RuntimeEnvironment.application, new TestCat(), jobId);
+
+        JobRequest pendingRequest = common.getPendingRequest(true);
+        assertThat(pendingRequest).isNotNull();
+
+        Job.Result result = common.executeJobRequest(pendingRequest);
+        assertThat(result).isEqualTo(expected);
+
+        pendingRequest = common.getPendingRequest(true);
+        assertThat(pendingRequest).isNull();
+    }
+
+    @SuppressWarnings("ResultOfMethodCallIgnored")
+    protected void resetJob(int jobId) {
+        Job job = manager().getJob(jobId);
+        if (job != null) {
+            doReturn(-1L).when(job).getFinishedTimeStamp();
+        }
+    }
+}
diff --git a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index eca822f..e0e8ea3 100644
--- a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -13,8 +13,6 @@
 import org.junit.runners.MethodSorters;
 import org.robolectric.RuntimeEnvironment;
 
-import java.util.HashSet;
-import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
@@ -28,8 +26,6 @@
 @FixMethodOrder(MethodSorters.JVM)
 public class JobExecutionTest {
 
-    private Set<Integer> cachedJobIds;
-
     @Before
     public void prepare() {
         JobManager.create(RuntimeEnvironment.application).addJobCreator(new JobCreator() {
@@ -38,15 +34,10 @@ public Job create(String tag) {
                 return new TestJob();
             }
         });
-        cachedJobIds = new HashSet<>();
     }
 
     @After
     public void after() {
-        for (Integer jobId : cachedJobIds) {
-            JobManager.instance().getApi().getCachedProxy(RuntimeEnvironment.application).cancel(jobId);
-        }
-
         JobManager.instance().cancelAll();
         JobManager.instance().destroy();
     }
@@ -59,22 +50,21 @@ public void testSimpleJob() throws Throwable {
                 .build()
                 .schedule();
 
-        cachedJobIds.add(jobId);
-
         JobProxy.Common common = getCommon(jobId);
         JobRequest pendingRequest = common.getPendingRequest(true);
         assertThat(pendingRequest).isNotNull();
 
         final CountDownLatch latch = new CountDownLatch(1);
         final AtomicReference<Throwable> crash = new AtomicReference<>();
+        final JobManager manager = JobManager.instance();
         new Thread() {
             @Override
             public void run() {
                 try {
                     Thread.sleep(200);
-                    assertThat(JobManager.instance().getJobRequest(jobId)).isNull();
+                    assertThat(manager.getJobRequest(jobId)).isNull();
 
-                    JobRequest transientRequest = JobManager.instance().getJobRequest(jobId, true);
+                    JobRequest transientRequest = manager.getJobRequest(jobId, true);
                     assertThat(transientRequest).isNotNull();
                     assertThat(transientRequest.isTransient()).isTrue();
                 } catch (Throwable t) {
@@ -88,7 +78,7 @@ public void run() {
         Job.Result result = common.executeJobRequest(pendingRequest);
         assertThat(result).isEqualTo(Job.Result.FAILURE);
 
-        assertThat(JobManager.instance().getAllJobRequestsForTag(TestJob.TAG)).isEmpty();
+        assertThat(manager.getAllJobRequestsForTag(TestJob.TAG)).isEmpty();
 
         pendingRequest = common.getPendingRequest(true);
         assertThat(pendingRequest).isNull();
@@ -107,8 +97,6 @@ public void testPeriodicJob() throws Exception {
                 .build()
                 .schedule();
 
-        cachedJobIds.add(jobId);
-
         JobProxy.Common common = getCommon(jobId);
         JobRequest pendingRequest = common.getPendingRequest(true);
         assertThat(pendingRequest).isNotNull();
diff --git a/library/src/test/java/com/evernote/android/job/JobManagerRule.java b/library/src/test/java/com/evernote/android/job/JobManagerRule.java
new file mode 100644
index 0000000..5384b5c
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/JobManagerRule.java
@@ -0,0 +1,39 @@
+package com.evernote.android.job;
+
+import android.support.annotation.NonNull;
+
+import org.junit.rules.ExternalResource;
+import org.robolectric.RuntimeEnvironment;
+
+/**
+ * @author rwondratschek
+ */
+public final class JobManagerRule extends ExternalResource {
+
+    private JobManager mManager;
+    private final JobCreator mJobCreator;
+
+    public JobManagerRule(@NonNull JobCreator jobCreator) {
+        mJobCreator = jobCreator;
+    }
+
+    @Override
+    protected void before() throws Throwable {
+        mManager = JobManager.create(RuntimeEnvironment.application);
+        mManager.addJobCreator(mJobCreator);
+    }
+
+    @Override
+    protected void after() {
+        mManager.cancelAll();
+        mManager.destroy();
+    }
+
+    public JobManager getJobManager() {
+        return mManager;
+    }
+
+    public void setJobFinished() {
+        mManager.removeJobCreator(mJobCreator);
+    }
+}
diff --git a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
new file mode 100644
index 0000000..4d335f0
--- /dev/null
+++ b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
@@ -0,0 +1,103 @@
+package com.evernote.android.job.test;
+
+import android.support.annotation.NonNull;
+
+import com.evernote.android.job.Job;
+import com.evernote.android.job.JobCreator;
+import com.evernote.android.job.JobRequest;
+
+import static org.mockito.Mockito.spy;
+
+/**
+ * @author rwondratschek
+ */
+public final class DummyJobs {
+
+    private DummyJobs() {
+        throw new UnsupportedOperationException();
+    }
+
+    public static final class SuccessJob extends Job {
+
+        public static final String TAG = "SuccessJob";
+
+        @NonNull
+        @Override
+        protected Result onRunJob(Params params) {
+            return Result.SUCCESS;
+        }
+    }
+
+    public static final class RescheduleJob extends Job {
+
+        public static final String TAG = "RescheduleJob";
+
+        private int mNewJobId;
+
+        @NonNull
+        @Override
+        protected Result onRunJob(Params params) {
+            return Result.RESCHEDULE;
+        }
+
+        @Override
+        protected void onReschedule(int newJobId) {
+            mNewJobId = newJobId;
+        }
+
+        public int getNewJobId() {
+            return mNewJobId;
+        }
+    }
+
+    public static final class FailureJob extends Job {
+
+        public static final String TAG = "FailureJob";
+
+        @NonNull
+        @Override
+        protected Result onRunJob(Params params) {
+            return Result.FAILURE;
+        }
+    }
+
+    public static final JobCreator TEST_JOB_CREATOR = new JobCreator() {
+        @Override
+        public Job create(String tag) {
+            switch (tag) {
+                case SuccessJob.TAG:
+                    return new SuccessJob();
+                case RescheduleJob.TAG:
+                    return new RescheduleJob();
+                case FailureJob.TAG:
+                    return new FailureJob();
+                default:
+                    return null;
+            }
+        }
+    };
+
+    public static final class SpyableJobCreator implements JobCreator {
+
+        private final JobCreator mJobCreator;
+
+        public SpyableJobCreator(JobCreator jobCreator) {
+            mJobCreator = jobCreator;
+        }
+
+        @Override
+        public Job create(String tag) {
+            Job job = mJobCreator.create(tag);
+            return job == null ? null : spy(job);
+        }
+    }
+
+    public static JobRequest.Builder createBuilder(Class<? extends Job> jobClass) {
+        try {
+            String tag = (String) jobClass.getDeclaredField("TAG").get(null);
+            return new JobRequest.Builder(tag);
+        } catch (Exception e) {
+            throw new IllegalStateException(e);
+        }
+    }
+}
diff --git a/library/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker b/library/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker
new file mode 100644
index 0000000..ca6ee9c
--- /dev/null
+++ b/library/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker
@@ -0,0 +1 @@
+mock-maker-inline
\ No newline at end of file
