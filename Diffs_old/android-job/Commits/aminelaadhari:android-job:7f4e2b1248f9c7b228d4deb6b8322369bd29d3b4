diff --git a/library/src/main/java/com/evernote/android/job/Job.java b/library/src/main/java/com/evernote/android/job/Job.java
index 69e9bd0..6ddad83 100644
--- a/library/src/main/java/com/evernote/android/job/Job.java
+++ b/library/src/main/java/com/evernote/android/job/Job.java
@@ -35,10 +35,9 @@
 import android.support.v4.content.WakefulBroadcastReceiver;
 
 import com.evernote.android.job.util.Device;
-import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.lang.ref.WeakReference;
 
@@ -50,8 +49,6 @@
 @SuppressWarnings("unused")
 public abstract class Job {
 
-    private static final CatLog CAT = new JobCat("Job");
-
     public enum Result {
         /**
          * Indicates that {@link #onRunJob(Params)} was successful.
@@ -137,15 +134,15 @@ private boolean meetsRequirements() {
         }
 
         if (!isRequirementChargingMet()) {
-            CAT.w("Job requires charging, reschedule");
+            Cat.w("Job requires charging, reschedule");
             return false;
         }
         if (!isRequirementDeviceIdleMet()) {
-            CAT.w("Job requires device to be idle, reschedule");
+            Cat.w("Job requires device to be idle, reschedule");
             return false;
         }
         if (!isRequirementNetworkTypeMet()) {
-            CAT.w("Job requires network to be %s, but was %s", getParams().getRequest().requiredNetworkType(),
+            Cat.w("Job requires network to be %s, but was %s", getParams().getRequest().requiredNetworkType(),
                     Device.getNetworkType(getContext()));
             return false;
         }
diff --git a/library/src/main/java/com/evernote/android/job/JobCreatorHolder.java b/library/src/main/java/com/evernote/android/job/JobCreatorHolder.java
index 5781f1e..a8baf3e 100644
--- a/library/src/main/java/com/evernote/android/job/JobCreatorHolder.java
+++ b/library/src/main/java/com/evernote/android/job/JobCreatorHolder.java
@@ -1,8 +1,7 @@
 package com.evernote.android.job;
 
-import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -12,8 +11,6 @@
  */
 /*package*/ class JobCreatorHolder {
 
-    private static final CatLog CAT = new JobCat("JobCreatorHolder");
-
     private final List<JobCreator> mJobCreators;
     private final Object mMonitor;
 
@@ -41,7 +38,7 @@ public Job createJob(String tag) {
         synchronized (mMonitor) {
             int count = mJobCreators.size();
             if (count == 0) {
-                CAT.w("no JobCreator added");
+                Cat.w("no JobCreator added");
                 return null;
 
             } else if (count == 1) {
diff --git a/library/src/main/java/com/evernote/android/job/JobExecutor.java b/library/src/main/java/com/evernote/android/job/JobExecutor.java
index 2b74c5b..cf882be 100644
--- a/library/src/main/java/com/evernote/android/job/JobExecutor.java
+++ b/library/src/main/java/com/evernote/android/job/JobExecutor.java
@@ -32,9 +32,8 @@
 import android.support.v4.util.LruCache;
 import android.util.SparseArray;
 
-import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.util.HashSet;
 import java.util.Locale;
@@ -51,7 +50,6 @@
  */
 /*package*/ class JobExecutor {
 
-    private static final CatLog CAT = new JobCat("JobExecutor");
     private static final long WAKE_LOCK_TIMEOUT = TimeUnit.MINUTES.toMillis(3);
 
     private final ExecutorService mExecutorService;
@@ -67,7 +65,7 @@ public JobExecutor() {
 
     public synchronized Future<Job.Result> execute(@NonNull Context context, @NonNull JobRequest request, @Nullable Job job) {
         if (job == null) {
-            CAT.w("JobCreator returned null for tag %s", request.getTag());
+            Cat.w("JobCreator returned null for tag %s", request.getTag());
             return null;
         }
         if (job.isFinished()) {
@@ -76,7 +74,7 @@ public JobExecutor() {
 
         job.setContext(context).setRequest(request);
 
-        CAT.i("Executing %s, context %s", request, context.getClass().getSimpleName());
+        Cat.i("Executing %s, context %s", request, context.getClass().getSimpleName());
 
         mJobs.put(request.getJobId(), job);
         return mExecutorService.submit(new JobCallable(job));
@@ -139,7 +137,7 @@ private JobCallable(Job job) {
                 markJobAsFinished(mJob);
 
                 if (mWakeLock == null || !mWakeLock.isHeld()) {
-                    CAT.w("Wake lock was not held after job %s was done. The job took too long to complete. This could have unintended side effects on your app.", mJob);
+                    Cat.w("Wake lock was not held after job %s was done. The job took too long to complete. This could have unintended side effects on your app.", mJob);
                 }
                 WakeLockUtil.releaseWakeLock(mWakeLock);
             }
@@ -149,12 +147,12 @@ private JobCallable(Job job) {
             Job.Result result;
             try {
                 result = mJob.runJob();
-                CAT.i("Finished %s", mJob);
+                Cat.i("Finished %s", mJob);
 
                 handleResult(result);
 
             } catch (Throwable t) {
-                CAT.e(t, "Crashed %s", mJob);
+                Cat.e(t, "Crashed %s", mJob);
                 result = mJob.getResult(); // probably the default value
             }
 
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 4a52329..4359a55 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -39,14 +39,12 @@
 import android.text.TextUtils;
 
 import com.evernote.android.job.util.JobApi;
-import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobPreconditions;
 import com.evernote.android.job.util.JobUtil;
 import com.google.android.gms.gcm.GcmNetworkManager;
 
 import net.vrallev.android.cat.Cat;
 import net.vrallev.android.cat.CatGlobal;
-import net.vrallev.android.cat.CatLog;
 
 import java.util.List;
 import java.util.Set;
@@ -82,9 +80,6 @@
 @SuppressWarnings("unused")
 public final class JobManager {
 
-    private static final Package PACKAGE = JobManager.class.getPackage();
-    private static final CatLog CAT = new JobCat("JobManager");
-
     @SuppressLint("StaticFieldLeak")
     private static volatile JobManager instance;
 
@@ -101,11 +96,6 @@ public static JobManager create(@NonNull Context context) {
                 if (instance == null) {
                     JobPreconditions.checkNotNull(context, "Context cannot be null");
 
-                    if (PACKAGE != null) {
-                        // package can be null when class is repackaged, then ignore this
-                        CatGlobal.setDefaultCatLogPackage(PACKAGE.getName(), new JobCat());
-                    }
-
                     if (context.getApplicationContext() != null) {
                         // could be null in unit tests
                         context = context.getApplicationContext();
@@ -212,7 +202,7 @@ protected void setJobProxy(JobApi api) {
      */
     public void schedule(@NonNull JobRequest request) {
         if (mJobCreatorHolder.isEmpty()) {
-            CAT.w("you haven't registered a JobCreator with addJobCreator(), it's likely that your job never will be executed");
+            Cat.w("you haven't registered a JobCreator with addJobCreator(), it's likely that your job never will be executed");
         }
 
         if (request.isUpdateCurrent()) {
@@ -227,7 +217,7 @@ public void schedule(@NonNull JobRequest request) {
 
         if (jobApi == JobApi.GCM && !mConfig.isGcmApiEnabled()) {
             // shouldn't happen
-            CAT.w("GCM API disabled, but used nonetheless");
+            Cat.w("GCM API disabled, but used nonetheless");
         }
 
         request.setScheduledAt(System.currentTimeMillis());
@@ -331,7 +321,7 @@ public Job getJob(int jobId) {
      */
     public void forceApi(@NonNull JobApi api) {
         setJobProxy(JobPreconditions.checkNotNull(api));
-        CAT.w("Changed API to %s", api);
+        Cat.w("Changed API to %s", api);
     }
 
     /**
@@ -378,7 +368,7 @@ public int cancelAllForTag(@NonNull String tag) {
 
     private boolean cancelInner(@Nullable JobRequest request) {
         if (request != null) {
-            CAT.i("Found pending job %s, canceling", request);
+            Cat.i("Found pending job %s, canceling", request);
             getJobProxy(request).cancel(request.getJobId());
             getJobStorage().remove(request);
             return true;
@@ -389,7 +379,7 @@ private boolean cancelInner(@Nullable JobRequest request) {
 
     private boolean cancelInner(@Nullable Job job) {
         if (job != null && !job.isFinished() && !job.isCanceled()) {
-            CAT.i("Cancel running %s", job);
+            Cat.i("Cancel running %s", job);
             job.cancel();
             return true;
         } else {
@@ -501,9 +491,9 @@ public boolean isVerbose() {
          * @param verbose Whether or not to print all log messages. The default value is {@code true}.
          */
         public void setVerbose(boolean verbose) {
-            if (mVerbose != verbose && PACKAGE != null) {
+            if (mVerbose != verbose) {
                 mVerbose = verbose;
-                CatGlobal.setPackageEnabled(PACKAGE.getName(), verbose);
+                CatGlobal.setPackageEnabled(JobManager.class.getPackage().toString(), verbose);
             }
         }
 
@@ -534,13 +524,13 @@ public void setGcmApiEnabled(boolean enabled) {
                 JobApi defaultApi = JobApi.getDefault(mContext, true);
                 if (!defaultApi.equals(getApi())) {
                     setJobProxy(defaultApi);
-                    CAT.i("Changed default proxy to %s after enabled the GCM API", defaultApi);
+                    Cat.i("Changed default proxy to %s after enabled the GCM API", defaultApi);
                 }
             } else {
                 JobApi defaultApi = JobApi.getDefault(mContext, false);
                 if (JobApi.GCM == getApi()) {
                     setJobProxy(defaultApi);
-                    CAT.i("Changed default proxy to %s after disabling the GCM API", defaultApi);
+                    Cat.i("Changed default proxy to %s after disabling the GCM API", defaultApi);
                 }
             }
         }
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 2a2eacf..6cd8473 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -33,10 +33,9 @@
 import android.support.annotation.NonNull;
 
 import com.evernote.android.job.util.JobApi;
-import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.util.Locale;
 import java.util.concurrent.ExecutionException;
@@ -128,7 +127,6 @@ public static int getRescheduleCount(JobRequest request) {
 
         private final Context mContext;
         private final int mJobId;
-        private final CatLog mCat;
 
         private final JobManager mJobManager;
 
@@ -139,7 +137,6 @@ public Common(@NonNull Service service, int jobId) {
         /*package*/ Common(@NonNull Context context, String loggingTag, int jobId) {
             mContext = context;
             mJobId = jobId;
-            mCat = new JobCat(loggingTag);
 
             mJobManager = JobManager.create(context);
         }
@@ -152,28 +149,28 @@ public JobRequest getPendingRequest(boolean cleanUpOrphanedJob) {
 
             if (job != null && !job.isFinished()) {
                 // that's probably a platform bug http://stackoverflow.com/questions/33235754/jobscheduler-posting-jobs-twice-not-expected
-                mCat.d("Job %d is already running, %s", mJobId, request);
+                Cat.d("Job %d is already running, %s", mJobId, request);
                 // not necessary to clean up, the running instance will do that
                 return null;
 
             } else if (job != null && !periodic) {
-                mCat.d("Job %d already finished, %s", mJobId, request);
+                Cat.d("Job %d already finished, %s", mJobId, request);
                 cleanUpOrphanedJob(cleanUpOrphanedJob);
                 return null;
 
             } else if (job != null && System.currentTimeMillis() - job.getFinishedTimeStamp() < 2_000) {
                 // that's probably a platform bug http://stackoverflow.com/questions/33235754/jobscheduler-posting-jobs-twice-not-expected
-                mCat.d("Job %d is periodic and just finished, %s", mJobId, request);
+                Cat.d("Job %d is periodic and just finished, %s", mJobId, request);
                 // don't clean up, periodic job
                 return null;
 
             } else if (request != null && request.isTransient()) {
-                mCat.d("Request %d is transient, %s", mJobId, request);
+                Cat.d("Request %d is transient, %s", mJobId, request);
                 // not necessary to clean up, the JobManager will do this for transient jobs
                 return null;
 
             } else if (request == null) {
-                mCat.d("Request for ID %d was null", mJobId);
+                Cat.d("Request for ID %d was null", mJobId);
                 cleanUpOrphanedJob(cleanUpOrphanedJob);
                 return null;
             }
@@ -196,10 +193,10 @@ public JobRequest getPendingRequest(boolean cleanUpOrphanedJob) {
             }
 
             if (Looper.myLooper() == Looper.getMainLooper()) {
-                mCat.w("Running JobRequest on a main thread, this could cause stutter or ANR in your app.");
+                Cat.w("Running JobRequest on a main thread, this could cause stutter or ANR in your app.");
             }
 
-            mCat.d("Run job, %s, waited %s, %s", request, JobUtil.timeToString(waited), timeWindow);
+            Cat.d("Run job, %s, waited %s, %s", request, JobUtil.timeToString(waited), timeWindow);
             JobExecutor jobExecutor = mJobManager.getJobExecutor();
             Job job = null;
 
@@ -218,15 +215,15 @@ public JobRequest getPendingRequest(boolean cleanUpOrphanedJob) {
 
                 // wait until done
                 Job.Result result = future.get();
-                mCat.d("Finished job, %s %s", request, result);
+                Cat.d("Finished job, %s %s", request, result);
                 return result;
 
             } catch (InterruptedException | ExecutionException e) {
-                mCat.e(e);
+                Cat.e(e);
 
                 if (job != null) {
                     job.cancel();
-                    mCat.e("Canceled %s", request);
+                    Cat.e("Canceled %s", request);
                 }
 
                 return Job.Result.FAILURE;
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 9f2ddbd..442e8d0 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -33,13 +33,11 @@
 import android.text.TextUtils;
 
 import com.evernote.android.job.util.JobApi;
-import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobPreconditions;
 import com.evernote.android.job.util.JobUtil;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
 import net.vrallev.android.cat.Cat;
-import net.vrallev.android.cat.CatLog;
 
 import java.util.concurrent.TimeUnit;
 
@@ -103,8 +101,6 @@
     private static final long WINDOW_THRESHOLD_WARNING = Long.MAX_VALUE / 3;
     private static final long WINDOW_THRESHOLD_MAX = (Long.MAX_VALUE / 3) * 2;
 
-    private static final CatLog CAT = new JobCat("JobRequest");
-
     /*package*/ static long getMinInterval() {
         return JobManager.instance().getConfig().isAllowSmallerIntervalsForMarshmallow() ? TimeUnit.MINUTES.toMillis(1) : MIN_INTERVAL;
     }
@@ -529,7 +525,7 @@ private Builder(Cursor cursor) throws Exception {
             try {
                 mBackoffPolicy = BackoffPolicy.valueOf(cursor.getString(cursor.getColumnIndex(JobStorage.COLUMN_BACKOFF_POLICY)));
             } catch (Throwable t) {
-                CAT.e(t); // https://gist.github.com/vRallev/574563f0e3fe636b19a7
+                Cat.e(t); // https://gist.github.com/vRallev/574563f0e3fe636b19a7
                 mBackoffPolicy = DEFAULT_BACKOFF_POLICY;
             }
 
@@ -543,7 +539,7 @@ private Builder(Cursor cursor) throws Exception {
             try {
                 mNetworkType = NetworkType.valueOf(cursor.getString(cursor.getColumnIndex(JobStorage.COLUMN_NETWORK_TYPE)));
             } catch (Throwable t) {
-                CAT.e(t); // https://gist.github.com/vRallev/574563f0e3fe636b19a7
+                Cat.e(t); // https://gist.github.com/vRallev/574563f0e3fe636b19a7
                 mNetworkType = DEFAULT_NETWORK_TYPE;
             }
 
@@ -885,7 +881,7 @@ public JobRequest build() {
 
                 if (mIntervalMs < MIN_INTERVAL || mFlexMs < MIN_FLEX) {
                     // this means the debug flag is set to true
-                    CAT.w("AllowSmallerIntervals enabled, this will crash on Android N and later, interval %d (minimum is %d), flex %d (minimum is %d)",
+                    Cat.w("AllowSmallerIntervals enabled, this will crash on Android N and later, interval %d (minimum is %d), flex %d (minimum is %d)",
                             mIntervalMs, MIN_INTERVAL, mFlexMs, MIN_FLEX);
                 }
             }
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index 74cb99c..03a903a 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -5,9 +5,8 @@
 import android.content.Intent;
 import android.os.SystemClock;
 
-import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.util.Set;
 
@@ -17,7 +16,6 @@
 public final class JobRescheduleService extends IntentService {
 
     private static final String TAG = "JobRescheduleService";
-    private static final CatLog CAT = new JobCat(TAG);
 
     /*package*/ static void startService(Context context) {
         Intent intent = new Intent(context, JobRescheduleService.class);
@@ -37,7 +35,7 @@ protected void onHandleIntent(Intent intent) {
              * be available in the storage. We still catch this case, because we never execute
              * a job with the same ID twice. However, the still save resources with the delay.
              */
-            CAT.d("Reschedule service started");
+            Cat.d("Reschedule service started");
             SystemClock.sleep(10_000L);
 
             JobManager manager = JobManager.create(this);
@@ -63,7 +61,7 @@ protected void onHandleIntent(Intent intent) {
                 }
             }
 
-            CAT.d("Reschedule %d jobs of %d jobs", rescheduledCount, requests.size());
+            Cat.d("Reschedule %d jobs of %d jobs", rescheduledCount, requests.size());
 
         } finally {
             WakeLockUtil.completeWakefulIntent(intent);
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index 8f93e5b..cdaf3cc 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -36,9 +36,8 @@
 import android.support.v4.util.LruCache;
 import android.text.TextUtils;
 
-import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -50,8 +49,6 @@
  */
 /*package*/ class JobStorage {
 
-    private static final CatLog CAT = new JobCat("JobStorage");
-
     private static final String JOB_ID_COUNTER = "JOB_ID_COUNTER";
 
     public static final String PREF_FILE_NAME = "evernote_jobs";
@@ -114,7 +111,7 @@ public synchronized void update(JobRequest request, ContentValues contentValues)
         try {
             getDatabase().update(JOB_TABLE_NAME, contentValues, COLUMN_ID + "=?", new String[]{String.valueOf(request.getJobId())});
         } catch (Exception e) {
-            CAT.e(e, "could not update %s", request);
+            Cat.e(e, "could not update %s", request);
         }
     }
 
@@ -157,7 +154,7 @@ public synchronized JobRequest get(int id) {
                 }
             }
         } catch (Exception e) {
-            CAT.e(e, "could not load all jobs");
+            Cat.e(e, "could not load all jobs");
 
         } finally {
             if (cursor != null) {
@@ -173,7 +170,7 @@ public synchronized void remove(JobRequest request) {
         try {
             getDatabase().delete(JOB_TABLE_NAME, COLUMN_ID + "=?", new String[]{String.valueOf(request.getJobId())});
         } catch (Exception e) {
-            CAT.e(e, "could not delete %s", request);
+            Cat.e(e, "could not delete %s", request);
         }
     }
 
@@ -201,7 +198,7 @@ private void store(JobRequest request) {
             ContentValues contentValues = request.toContentValues();
             getDatabase().insert(JOB_TABLE_NAME, null, contentValues);
         } catch (Exception e) {
-            CAT.e(e, "could not store %s", request);
+            Cat.e(e, "could not store %s", request);
         }
     }
 
@@ -219,7 +216,7 @@ private JobRequest load(int id, boolean includeTransient) {
             }
 
         } catch (Exception e) {
-            CAT.e(e, "could not load id %d", id);
+            Cat.e(e, "could not load id %d", id);
 
         } finally {
             if (cursor != null) {
diff --git a/library/src/main/java/com/evernote/android/job/WakeLockUtil.java b/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
index 6a9f823..b19432a 100644
--- a/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
+++ b/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
@@ -8,10 +8,9 @@
 import android.support.annotation.Nullable;
 import android.util.SparseArray;
 
-import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.util.concurrent.TimeUnit;
 
@@ -20,9 +19,9 @@
  */
 /*package*/ final class WakeLockUtil {
 
-    private static final CatLog CAT = new JobCat("WakeLockUtil");
-
     private static final String EXTRA_WAKE_LOCK_ID = "com.evernote.android.job.wakelockid";
+    private static final SparseArray<PowerManager.WakeLock> ACTIVE_WAKE_LOCKS = new SparseArray<>();
+    private static int nextId = 1;
 
     private WakeLockUtil() {
         // no op
@@ -49,7 +48,7 @@ public static boolean acquireWakeLock(@NonNull Context context, @Nullable PowerM
             } catch (Exception e) {
                 // saw an NPE on rooted Galaxy Nexus Android 4.1.1
                 // android.os.IPowerManager$Stub$Proxy.acquireWakeLock(IPowerManager.java:288)
-                CAT.e(e);
+                Cat.e(e);
             }
         }
         return false;
@@ -62,13 +61,10 @@ public static void releaseWakeLock(@Nullable PowerManager.WakeLock wakeLock) {
             }
         } catch (Exception e) {
             // just to make sure if the PowerManager crashes while acquiring a wake lock
-            CAT.e(e);
+            Cat.e(e);
         }
     }
 
-    private static final SparseArray<PowerManager.WakeLock> ACTIVE_WAKE_LOCKS = new SparseArray<>();
-    private static int nextId = 1;
-
     /**
      * Do a {@link android.content.Context#startService(android.content.Intent)
      * Context.startService}, but holding a wake lock while the service starts.
@@ -79,9 +75,9 @@ public static void releaseWakeLock(@Nullable PowerManager.WakeLock wakeLock) {
      * the wake lock.
      *
      * @param context The Context in which it operate.
-     * @param intent The Intent with which to start the service, as per
-     * {@link android.content.Context#startService(android.content.Intent)
-     * Context.startService}.
+     * @param intent  The Intent with which to start the service, as per
+     *                {@link android.content.Context#startService(android.content.Intent)
+     *                Context.startService}.
      */
     public static ComponentName startWakefulService(Context context, Intent intent) {
         synchronized (ACTIVE_WAKE_LOCKS) {
diff --git a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
index d3cd0b4..0927005 100644
--- a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
+++ b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
@@ -28,7 +28,6 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import com.evernote.android.job.util.JobCat;
 import com.google.android.gms.gcm.GcmNetworkManager;
 import com.google.android.gms.gcm.OneoffTask;
 import com.google.android.gms.gcm.PeriodicTask;
@@ -37,15 +36,13 @@
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 /**
  * @author rwondratschek
  */
 public class JobProxyGcm implements JobProxy {
 
-    private static final CatLog CAT = new JobCat("JobProxyGcm");
-
     /*
      * Requires charging doesn't work reliable. Like the documentation says, the job doesn't run if
      * not plugged in. However, the job never runs until you schedule a new one although the device is
@@ -72,7 +69,7 @@ public void plantOneOff(JobRequest request) {
 
         mGcmNetworkManager.schedule(task);
 
-        CAT.d("Scheduled OneoffTask, %s, start %s, end %s, reschedule count %d", request, JobUtil.timeToString(startMs),
+        Cat.d("Scheduled OneoffTask, %s, start %s, end %s, reschedule count %d", request, JobUtil.timeToString(startMs),
                 JobUtil.timeToString(endMs), Common.getRescheduleCount(request));
     }
 
@@ -85,13 +82,13 @@ public void plantPeriodic(JobRequest request) {
 
         mGcmNetworkManager.schedule(task);
 
-        CAT.d("Scheduled PeriodicTask, %s, interval %s, flex %s", request, JobUtil.timeToString(request.getIntervalMs()),
+        Cat.d("Scheduled PeriodicTask, %s, interval %s, flex %s", request, JobUtil.timeToString(request.getIntervalMs()),
                 JobUtil.timeToString(request.getFlexMs()));
     }
 
     @Override
     public void plantPeriodicFlexSupport(JobRequest request) {
-        CAT.w("plantPeriodicFlexSupport called although flex is supported");
+        Cat.w("plantPeriodicFlexSupport called although flex is supported");
 
         long startMs = Common.getStartMsSupportFlex(request);
         long endMs = Common.getEndMsSupportFlex(request);
@@ -102,7 +99,7 @@ public void plantPeriodicFlexSupport(JobRequest request) {
 
         mGcmNetworkManager.schedule(task);
 
-        CAT.d("Scheduled periodic (flex support), %s, start %s, end %s, flex %s", request, JobUtil.timeToString(startMs),
+        Cat.d("Scheduled periodic (flex support), %s, start %s, end %s, flex %s", request, JobUtil.timeToString(startMs),
                 JobUtil.timeToString(endMs), JobUtil.timeToString(request.getFlexMs()));
     }
 
diff --git a/library/src/main/java/com/evernote/android/job/util/JobCat.java b/library/src/main/java/com/evernote/android/job/util/JobCat.java
deleted file mode 100644
index e70aa33..0000000
--- a/library/src/main/java/com/evernote/android/job/util/JobCat.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright 2007-present Evernote Corporation.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this
- *    list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.evernote.android.job.util;
-
-import net.vrallev.android.cat.CatLog;
-import net.vrallev.android.cat.instance.CatLazy;
-
-/**
- * The default {@link CatLog} class for this library.
- *
- * @author rwondratschek
- */
-public class JobCat extends CatLazy {
-
-    private final String mTag;
-
-    public JobCat() {
-        this((String) null);
-    }
-
-    public JobCat(Class<?> clazz) {
-        this(clazz.getSimpleName());
-    }
-
-    public JobCat(String tag) {
-        mTag = tag;
-    }
-
-    @Override
-    public String getTag() {
-        return mTag == null ? super.getTag() : mTag;
-    }
-
-    @Override
-    protected void println(int priority, String message, Throwable t) {
-        super.println(priority, message, t);
-    }
-}
diff --git a/library/src/main/java/com/evernote/android/job/util/JobUtil.java b/library/src/main/java/com/evernote/android/job/util/JobUtil.java
index a389200..633c319 100644
--- a/library/src/main/java/com/evernote/android/job/util/JobUtil.java
+++ b/library/src/main/java/com/evernote/android/job/util/JobUtil.java
@@ -29,7 +29,7 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -48,8 +48,6 @@
 
     private static final long ONE_DAY = TimeUnit.DAYS.toMillis(1);
 
-    private static final CatLog CAT = new JobCat("JobUtil");
-
     private JobUtil() {
         // no op
     }
@@ -93,7 +91,7 @@ private static boolean hasPermission(Context context, String permission, int rep
             return PackageManager.PERMISSION_GRANTED == context.getPackageManager()
                     .checkPermission(permission, context.getPackageName());
         } catch (Exception e) {
-            CAT.e(e);
+            Cat.e(e);
             // crash https://gist.github.com/vRallev/6affe17c93e993681bfd
 
             // give it another chance with the application context
diff --git a/library/src/main/java/com/evernote/android/job/util/support/PersistableBundleCompat.java b/library/src/main/java/com/evernote/android/job/util/support/PersistableBundleCompat.java
index 86889b1..19653a3 100644
--- a/library/src/main/java/com/evernote/android/job/util/support/PersistableBundleCompat.java
+++ b/library/src/main/java/com/evernote/android/job/util/support/PersistableBundleCompat.java
@@ -28,9 +28,7 @@
 import android.os.PersistableBundle;
 import android.support.annotation.NonNull;
 
-import com.evernote.android.job.util.JobCat;
-
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import org.xmlpull.v1.XmlPullParserException;
 
@@ -50,7 +48,6 @@
 @SuppressWarnings("unused")
 public final class PersistableBundleCompat {
 
-    private static final CatLog CAT = new JobCat("PersistableBundleCompat");
     private static final String UTF_8 = "UTF-8";
 
     private final Map<String, Object> mValues;
@@ -238,13 +235,13 @@ public String saveToXml() {
             return outputStream.toString(UTF_8);
 
         } catch (XmlPullParserException | IOException e) {
-            CAT.e(e);
+            Cat.e(e);
             // shouldn't happen
             return "";
 
         } catch (Error e) {
             // https://gist.github.com/vRallev/9444359f05259e4b6317 and other crashes on rooted devices
-            CAT.e(e);
+            Cat.e(e);
             return "";
 
         } finally {
@@ -265,12 +262,12 @@ public static PersistableBundleCompat fromXml(@NonNull String xml) {
             return new PersistableBundleCompat((Map<String, Object>) map);
 
         } catch (XmlPullParserException | IOException e) {
-            CAT.e(e);
+            Cat.e(e);
             return new PersistableBundleCompat();
 
         } catch (VerifyError e) {
             // https://gist.github.com/vRallev/9444359f05259e4b6317
-            CAT.e(e);
+            Cat.e(e);
             return new PersistableBundleCompat();
 
         } finally {
diff --git a/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java b/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
index d3bf77a..13344ab 100644
--- a/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
+++ b/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
@@ -34,30 +34,21 @@
 
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
-import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 /**
  * @author rwondratschek
  */
 public class JobProxy14 implements JobProxy {
 
-    private static final String TAG = "JobProxy14";
-
     protected final Context mContext;
-    protected final CatLog mCat;
 
     private AlarmManager mAlarmManager;
 
     public JobProxy14(Context context) {
-        this(context, TAG);
-    }
-
-    protected JobProxy14(Context context, String logTag) {
         mContext = context;
-        mCat = new JobCat(logTag);
     }
 
     @Override
@@ -77,7 +68,7 @@ public void plantOneOff(JobRequest request) {
             }
         } catch (Exception e) {
             // https://gist.github.com/vRallev/621b0b76a14ddde8691c
-            mCat.e(e);
+            Cat.e(e);
         }
     }
 
@@ -102,7 +93,7 @@ protected void plantOneOffFlexSupport(JobRequest request, AlarmManager alarmMana
         long triggerAtMs = System.currentTimeMillis() + Common.getAverageDelayMsSupportFlex(request);
         alarmManager.set(AlarmManager.RTC, triggerAtMs, pendingIntent);
 
-        mCat.d("Scheduled repeating alarm (flex support), %s, interval %s, flex %s", request,
+        Cat.d("Scheduled repeating alarm (flex support), %s, interval %s, flex %s", request,
                 JobUtil.timeToString(request.getIntervalMs()), JobUtil.timeToString(request.getFlexMs()));
     }
 
@@ -111,7 +102,7 @@ protected long getTriggerAtMillis(JobRequest request) {
     }
 
     private void logScheduled(JobRequest request) {
-        mCat.d("Scheduled alarm, %s, delay %s, exact %b, reschedule count %d", request,
+        Cat.d("Scheduled alarm, %s, delay %s, exact %b, reschedule count %d", request,
                 JobUtil.timeToString(Common.getAverageDelayMs(request)), request.isExact(), Common.getRescheduleCount(request));
     }
 
@@ -123,7 +114,7 @@ public void plantPeriodic(JobRequest request) {
             alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + request.getIntervalMs(), request.getIntervalMs(), pendingIntent);
         }
 
-        mCat.d("Scheduled repeating alarm, %s, interval %s", request, JobUtil.timeToString(request.getIntervalMs()));
+        Cat.d("Scheduled repeating alarm, %s, interval %s", request, JobUtil.timeToString(request.getIntervalMs()));
     }
 
     @Override
@@ -139,7 +130,7 @@ public void plantPeriodicFlexSupport(JobRequest request) {
             plantOneOffFlexSupport(request, alarmManager, pendingIntent);
         } catch (Exception e) {
             // https://gist.github.com/vRallev/621b0b76a14ddde8691c
-            mCat.e(e);
+            Cat.e(e);
         }
     }
 
@@ -153,7 +144,7 @@ public void cancel(int jobId) {
             } catch (Exception e) {
                 // java.lang.SecurityException: get application info: Neither user 1010133 nor
                 // current process has android.permission.INTERACT_ACROSS_USERS.
-                mCat.e(e);
+                Cat.e(e);
             }
         }
     }
@@ -189,7 +180,7 @@ protected PendingIntent getPendingIntent(int jobId, int flags) {
         } catch (Exception e) {
             // java.lang.SecurityException: Permission Denial: getIntentSender() from pid=31482, uid=10057,
             // (need uid=-1) is not allowed to send as package com.evernote
-            mCat.e(e);
+            Cat.e(e);
             return null;
         }
     }
@@ -201,7 +192,7 @@ protected AlarmManager getAlarmManager() {
         }
         if (mAlarmManager == null) {
             // https://gist.github.com/vRallev/5daef6e8a3b0d4a7c366
-            mCat.e("AlarmManager is null");
+            Cat.e("AlarmManager is null");
         }
         return mAlarmManager;
     }
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmReceiver.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmReceiver.java
index 63ab913..2b3243f 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmReceiver.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmReceiver.java
@@ -30,9 +30,7 @@
 import android.support.v4.content.WakefulBroadcastReceiver;
 
 import com.evernote.android.job.JobProxy;
-import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
 
 /**
  * @author rwondratschek
@@ -41,8 +39,6 @@
 
     /*package*/ static final String EXTRA_JOB_ID = "EXTRA_JOB_ID";
 
-    private static final CatLog CAT = new JobCat("PlatformAlarmReceiver");
-
     /*package*/ static Intent createIntent(Context context, int jobId) {
         return new Intent(context, PlatformAlarmReceiver.class).putExtra(EXTRA_JOB_ID, jobId);
     }
diff --git a/library/src/main/java/com/evernote/android/job/v19/JobProxy19.java b/library/src/main/java/com/evernote/android/job/v19/JobProxy19.java
index bf8df0f..87e34bc 100644
--- a/library/src/main/java/com/evernote/android/job/v19/JobProxy19.java
+++ b/library/src/main/java/com/evernote/android/job/v19/JobProxy19.java
@@ -35,16 +35,16 @@
 import com.evernote.android.job.util.JobUtil;
 import com.evernote.android.job.v14.JobProxy14;
 
+import net.vrallev.android.cat.Cat;
+
 /**
  * @author rwondratschek
  */
 @TargetApi(Build.VERSION_CODES.KITKAT)
 public class JobProxy19 extends JobProxy14 {
 
-    private static final String TAG = "JobProxy19";
-
     public JobProxy19(Context context) {
-        super(context, TAG);
+        super(context);
     }
 
     @Override
@@ -55,7 +55,7 @@ protected void plantOneOffInexact(JobRequest request, AlarmManager alarmManager,
 
         alarmManager.setWindow(AlarmManager.RTC, startMs, lengthMs, pendingIntent);
 
-        mCat.d("Schedule alarm, %s, start %s, end %s", request,
+        Cat.d("Schedule alarm, %s, start %s, end %s", request,
                 JobUtil.timeToString(Common.getStartMs(request)), JobUtil.timeToString(Common.getEndMs(request)));
     }
 
@@ -67,7 +67,7 @@ protected void plantOneOffFlexSupport(JobRequest request, AlarmManager alarmMana
 
         alarmManager.setWindow(AlarmManager.RTC, startMs, lengthMs, pendingIntent);
 
-        mCat.d("Scheduled repeating alarm (flex support), %s, start %s, end %s, flex %s", request,
+        Cat.d("Scheduled repeating alarm (flex support), %s, start %s, end %s, flex %s", request,
                 JobUtil.timeToString(Common.getStartMsSupportFlex(request)), JobUtil.timeToString(Common.getEndMsSupportFlex(request)),
                 JobUtil.timeToString(request.getFlexMs()));
     }
diff --git a/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java b/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
index 60e21ea..75e0e7f 100644
--- a/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
+++ b/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
@@ -35,10 +35,9 @@
 
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
-import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.util.List;
 
@@ -49,18 +48,10 @@
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class JobProxy21 implements JobProxy {
 
-    private static final String TAG = "JobProxy21";
-
     protected final Context mContext;
-    protected final CatLog mCat;
 
     public JobProxy21(Context context) {
-        this(context, TAG);
-    }
-
-    protected JobProxy21(Context context, String logTag) {
         mContext = context;
-        mCat = new JobCat(logTag);
     }
 
     @Override
@@ -71,7 +62,7 @@ public void plantOneOff(JobRequest request) {
         JobInfo jobInfo = createBuilderOneOff(createBaseBuilder(request), startMs, endMs).build();
         int scheduleResult = schedule(jobInfo);
 
-        mCat.d("Schedule one-off jobInfo %s, %s, start %s, end %s, reschedule count %d", scheduleResultToString(scheduleResult),
+        Cat.d("Schedule one-off jobInfo %s, %s, start %s, end %s, reschedule count %d", scheduleResultToString(scheduleResult),
                 request, JobUtil.timeToString(startMs), JobUtil.timeToString(endMs), Common.getRescheduleCount(request));
     }
 
@@ -83,7 +74,7 @@ public void plantPeriodic(JobRequest request) {
         JobInfo jobInfo = createBuilderPeriodic(createBaseBuilder(request), intervalMs, flexMs).build();
         int scheduleResult = schedule(jobInfo);
 
-        mCat.d("Schedule periodic jobInfo %s, %s, interval %s, flex %s", scheduleResultToString(scheduleResult),
+        Cat.d("Schedule periodic jobInfo %s, %s, interval %s, flex %s", scheduleResultToString(scheduleResult),
                 request, JobUtil.timeToString(intervalMs), JobUtil.timeToString(flexMs));
     }
 
@@ -95,7 +86,7 @@ public void plantPeriodicFlexSupport(JobRequest request) {
         JobInfo jobInfo = createBuilderOneOff(createBaseBuilder(request), startMs, endMs).build();
         int scheduleResult = schedule(jobInfo);
 
-        mCat.d("Schedule periodic (flex support) jobInfo %s, %s, start %s, end %s, flex %s", scheduleResultToString(scheduleResult),
+        Cat.d("Schedule periodic (flex support) jobInfo %s, %s, start %s, end %s, flex %s", scheduleResultToString(scheduleResult),
                 request, JobUtil.timeToString(startMs), JobUtil.timeToString(endMs), JobUtil.timeToString(request.getFlexMs()));
     }
 
@@ -105,7 +96,7 @@ public void cancel(int jobId) {
             getJobScheduler().cancel(jobId);
         } catch (Exception e) {
             // https://gist.github.com/vRallev/5d48a4a8e8d05067834e
-            mCat.e(e);
+            Cat.e(e);
         }
     }
 
@@ -116,7 +107,7 @@ public boolean isPlatformJobScheduled(JobRequest request) {
             pendingJobs = getJobScheduler().getAllPendingJobs();
         } catch (Exception e) {
             // it's possible that this throws an exception, see https://gist.github.com/vRallev/a59947dd3932d2642641
-            mCat.e(e);
+            Cat.e(e);
             return false;
         }
 
@@ -174,7 +165,7 @@ protected final int schedule(JobInfo jobInfo) {
         try {
             return getJobScheduler().schedule(jobInfo);
         } catch (Exception e) {
-            mCat.e(e);
+            Cat.e(e);
             return JobScheduler.RESULT_FAILURE;
         }
     }
diff --git a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
index 4792de4..1f6776d 100644
--- a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
+++ b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
@@ -34,9 +34,8 @@
 import com.evernote.android.job.JobManager;
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
-import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
+import net.vrallev.android.cat.Cat;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -51,7 +50,6 @@
      * JobScheduler can have issues: http://stackoverflow.com/questions/32079407/android-jobscheduler-onstartjob-called-multiple-times
      */
 
-    private static final CatLog CAT = new JobCat("PlatformJobService");
     private static final ExecutorService EXECUTOR_SERVICE = Executors.newCachedThreadPool(JobProxy.Common.COMMON_THREAD_FACTORY);
 
     @Override
@@ -86,9 +84,9 @@ public boolean onStopJob(JobParameters params) {
         Job job = JobManager.instance().getJob(params.getJobId());
         if (job != null) {
             job.cancel();
-            CAT.d("Called onStopJob for %s", job);
+            Cat.d("Called onStopJob for %s", job);
         } else {
-            CAT.d("Called onStopJob, job %d not found", params.getJobId());
+            Cat.d("Called onStopJob, job %d not found", params.getJobId());
         }
 
 
diff --git a/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java b/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java
index 14f6785..268d6a4 100644
--- a/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java
+++ b/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java
@@ -34,6 +34,8 @@
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.v21.JobProxy21;
 
+import net.vrallev.android.cat.Cat;
+
 
 /**
  * @author rwondratschek
@@ -41,15 +43,13 @@
 @TargetApi(Build.VERSION_CODES.N)
 public class JobProxy24 extends JobProxy21 {
 
-    private static final String TAG = "JobProxy24";
-
     public JobProxy24(Context context) {
-        super(context, TAG);
+        super(context);
     }
 
     @Override
     public void plantPeriodicFlexSupport(JobRequest request) {
-        mCat.w("plantPeriodicFlexSupport called although flex is supported");
+        Cat.w("plantPeriodicFlexSupport called although flex is supported");
         super.plantPeriodicFlexSupport(request);
     }
 
@@ -58,7 +58,7 @@ public boolean isPlatformJobScheduled(JobRequest request) {
         try {
             return getJobScheduler().getPendingJob(request.getJobId()) != null;
         } catch (Exception e) {
-            mCat.e(e);
+            Cat.e(e);
             return false;
         }
     }
