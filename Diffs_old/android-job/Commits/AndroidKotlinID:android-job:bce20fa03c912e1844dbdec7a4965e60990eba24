diff --git a/CHANGELOG.md b/CHANGELOG.md
index 602cc8e..49a4e1d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,10 @@
-## 1.2.1
+## 1.2.1 (2017-11-23)
 * Add option to override the default background executor, see #292
 * Don't keep a strong reference to finished jobs to allow freeing memory, see #299
+* Allow running a daily job immediately once, this is helpful for testing purposes, see #317
+* Allow enforcing requirements for daily jobs, see #313
+* Remove the Cat dependency for logging, see 295
+* Add `@NonNull` annotation to `param` parameter, see #321 (thanks for the contribution @Jawnnypoo)
 
 ## 1.2.0 (2017-10-05)
 
diff --git a/README.md b/README.md
index 3413080..861737f 100644
--- a/README.md
+++ b/README.md
@@ -8,7 +8,7 @@ Download [the latest version](http://search.maven.org/#search|gav|1|g:"com.evern
 
 ```groovy
 dependencies {
-    compile 'com.evernote:android-job:1.2.0'
+    compile 'com.evernote:android-job:1.2.1'
 }
 ```
 
diff --git a/build-config/gradle-push.gradle b/build-config/gradle-push.gradle
index 5793ee3..98aeb6b 100644
--- a/build-config/gradle-push.gradle
+++ b/build-config/gradle-push.gradle
@@ -144,8 +144,8 @@ android.libraryVariants.all { variant ->
 
         source = variant.javaCompile.source
 
-        ext.androidJar = "${project.android.sdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar"
-        classpath += project.files(variant.javaCompile.classpath.files) + project.files(ext.androidJar)
+        classpath += project.files(variant.javaCompile.classpath)
+        classpath += project.files("${project.android.sdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar")
         classpath += files("$buildDir/generated/source/r/${variant.name}/")
         classpath += files("$buildDir/generated/source/buildConfig/${variant.name}/")
 
diff --git a/build-config/gradle-quality.gradle b/build-config/gradle-quality.gradle
index 36d5a32..f5ae647 100644
--- a/build-config/gradle-quality.gradle
+++ b/build-config/gradle-quality.gradle
@@ -2,7 +2,7 @@ apply plugin: 'checkstyle'
 apply plugin: 'findbugs'
 apply plugin: 'pmd'
 
-check.dependsOn 'checkstyle', 'pmd' //,'findbugs'
+check.dependsOn 'checkstyle'//, 'pmd' ,'findbugs'
 
 task checkstyle(type: Checkstyle) {
     configFile file("${project.rootDir}/build-config/checkstyle/checkstyle.xml")
diff --git a/build.gradle b/build.gradle
index c0c22ba..73983a3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
         google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.0-rc1'
+        classpath 'com.android.tools.build:gradle:3.0.0'
         classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
     }
 }
@@ -30,15 +30,14 @@ ext {
 
     supportLibVersion = '26.0.1'
     playServicesVersion = '11.0.2'
-    catVersion = '1.0.5'
     stethoVersion = '1.5.0'
     junitVersion = '4.12'
     assertjVersion = '3.6.2'
     mockitoVersion = '2.7.22'
-    robolectricVersion = '3.4.2'
+    robolectricVersion = '3.5.1'
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '4.1'
-    distributionType = 'ALL'
+    gradleVersion = '4.3.1'
+    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
 }
diff --git a/demo/build.gradle b/demo/build.gradle
index 208aed3..279f065 100644
--- a/demo/build.gradle
+++ b/demo/build.gradle
@@ -49,7 +49,6 @@ dependencies {
     implementation "com.android.support:support-v4:$supportLibVersion"
     implementation "com.android.support:appcompat-v7:$supportLibVersion"
     implementation "com.facebook.stetho:stetho:$stethoVersion"
-    implementation "net.vrallev.android:cat:$catVersion"
 
     gcmImplementation "com.google.android.gms:play-services-gcm:$playServicesVersion"
 }
diff --git a/demo/src/main/java/com/evernote/android/job/demo/App.java b/demo/src/main/java/com/evernote/android/job/demo/App.java
index ce9d5dc..5e32ae9 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/App.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/App.java
@@ -1,12 +1,8 @@
 package com.evernote.android.job.demo;
 
 import android.app.Application;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
-import com.evernote.android.job.JobConfig;
 import com.evernote.android.job.JobManager;
-import com.evernote.android.job.util.JobLogger;
 import com.facebook.stetho.Stetho;
 
 /**
@@ -19,21 +15,7 @@ public void onCreate() {
         super.onCreate();
         Stetho.initializeWithDefaults(this);
 
-        JobConfig.addLogger(new JobLogger() {
-            @Override
-            public void log(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
-                // log
-            }
-        });
-        JobConfig.setLogcatEnabled(false);
         JobManager.create(this).addJobCreator(new DemoJobCreator());
     }
-
-    private static class MyLogger implements JobLogger {
-        @Override
-        public void log(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
-            // log
-        }
-    }
 }
 
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncEngine.java b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncEngine.java
index 8ff1cfd..298e322 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncEngine.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncEngine.java
@@ -6,8 +6,7 @@
 import android.os.SystemClock;
 import android.support.annotation.NonNull;
 import android.support.annotation.WorkerThread;
-
-import net.vrallev.android.cat.Cat;
+import android.util.Log;
 
 import java.io.File;
 import java.io.IOException;
@@ -60,7 +59,7 @@ private void saveSuccess(boolean success) {
         try {
             FileUtils.writeFile(getSuccessFile(), text, true);
         } catch (IOException e) {
-            Cat.e(e);
+            Log.e("Demo", e.getMessage(), e);
         }
     }
 
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
index 020284a..d6fee00 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
@@ -24,7 +24,7 @@
 
     @Override
     @NonNull
-    protected Result onRunJob(final Params params) {
+    protected Result onRunJob(@NonNull final Params params) {
         boolean success = new DemoSyncEngine(getContext()).sync();
 
         PendingIntent pendingIntent = PendingIntent.getActivity(getContext(), 0, new Intent(getContext(), MainActivity.class), 0);
diff --git a/demo/src/main/java/com/evernote/android/job/demo/FileUtils.java b/demo/src/main/java/com/evernote/android/job/demo/FileUtils.java
index 14c47b3..e7dba82 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/FileUtils.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/FileUtils.java
@@ -1,6 +1,6 @@
 package com.evernote.android.job.demo;
 
-import net.vrallev.android.cat.Cat;
+import android.util.Log;
 
 import java.io.Closeable;
 import java.io.File;
@@ -79,7 +79,7 @@ public static void close(Closeable closeable) {
             try {
                 closeable.close();
             } catch (Exception e) {
-                Cat.e(e);
+                Log.e("Demo", e.getMessage(), e);
             }
         }
     }
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index 450f5c0..09639ea 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -17,8 +18,6 @@
 import com.evernote.android.job.JobApi;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
-import net.vrallev.android.cat.Cat;
-
 /**
  * @author rwondratschek
  */
@@ -217,7 +216,7 @@ private void testAllImpl() {
                 JobConfig.forceApi(api);
                 testSimple();
             } else {
-                Cat.w("%s is not supported", api);
+                Log.w("Demo", String.format("%s is not supported", api));
             }
         }
 
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 7a3265e..27768f1 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index bf1b63c..702c4b6 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.3.1-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index be804f9..52ec44e 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -9,7 +9,6 @@ dependencies {
 
     //noinspection GradleDependency
     api "com.android.support:support-v4:$supportLibVersion"
-    implementation "net.vrallev.android:cat:$catVersion"
 
     androidTestImplementation 'com.android.support.test:runner:1.0.0'
     androidTestImplementation 'com.android.support.test:rules:1.0.0'
diff --git a/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java b/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
index cca4406..5274d35 100644
--- a/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
@@ -164,7 +164,7 @@ private TestJob(Class<? extends Context> expectedContext) {
 
         @NonNull
         @Override
-        protected Result onRunJob(Params params) {
+        protected Result onRunJob(@NonNull Params params) {
             mContext = getContext();
             mParams = params;
 
diff --git a/library/src/androidTest/java/com/evernote/android/job/TransientBundleRescheduleTest.java b/library/src/androidTest/java/com/evernote/android/job/TransientBundleRescheduleTest.java
index bf1e89a..b5ae625 100644
--- a/library/src/androidTest/java/com/evernote/android/job/TransientBundleRescheduleTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/TransientBundleRescheduleTest.java
@@ -76,7 +76,7 @@ private void testOneOff(JobApi api, long wait, TimeUnit timeUnit) throws Excepti
 
         @NonNull
         @Override
-        protected Result onRunJob(Params params) {
+        protected Result onRunJob(@NonNull Params params) {
             Bundle extras = params.getTransientExtras();
             assertThat(extras).isNotNull();
             assertThat(extras.getString("Key")).isEqualTo("Value");
diff --git a/library/src/androidTest/java/com/evernote/android/job/TransientBundleTest.java b/library/src/androidTest/java/com/evernote/android/job/TransientBundleTest.java
index 73de6ac..80b2f24 100644
--- a/library/src/androidTest/java/com/evernote/android/job/TransientBundleTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/TransientBundleTest.java
@@ -130,7 +130,7 @@ private void testOneOff(JobApi api, long wait, TimeUnit timeUnit) throws Excepti
 
         @NonNull
         @Override
-        protected Result onRunJob(Params params) {
+        protected Result onRunJob(@NonNull Params params) {
             mParams = params;
 
             mLatch.countDown();
diff --git a/library/src/main/java/com/evernote/android/job/DailyJob.java b/library/src/main/java/com/evernote/android/job/DailyJob.java
index 58fcfc3..97ede96 100644
--- a/library/src/main/java/com/evernote/android/job/DailyJob.java
+++ b/library/src/main/java/com/evernote/android/job/DailyJob.java
@@ -8,9 +8,9 @@
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.Calendar;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -19,23 +19,25 @@
  *
  * @author rwondratschek
  */
-@SuppressWarnings("unused")
+@SuppressWarnings({"unused", "WeakerAccess"})
 public abstract class DailyJob extends Job {
 
-    private static final CatLog CAT = new JobCat("DailyJob");
+    private static final JobCat CAT = new JobCat("DailyJob");
 
     @VisibleForTesting
     /*package*/ static final String EXTRA_START_MS = "EXTRA_START_MS";
     @VisibleForTesting
     /*package*/ static final String EXTRA_END_MS = "EXTRA_END_MS";
+    @VisibleForTesting
+    private static final String EXTRA_ONCE = "EXTRA_ONCE";
 
     private static final long DAY = TimeUnit.DAYS.toMillis(1);
 
     /**
      * Schedules your daily job. A builder is required for this method call. Within the builder, you may specify
      * additional requirements and/or extras for the job. However, a daily job may not be exact,
-     * periodic or transient. Since the rescheduling of a daily job when requirements aren't met
-     * (e.g. low internet connectivity) isn't useful, the enforcing of such requirements isn't supported either.
+     * periodic or transient. If the requirements are enforced but are not met when the job runs, then the
+     * daily job will only be rescheduled for the next day. The back-off criteria is ignored in this case.
      * <br>
      * <br>
      * Daily jobs should use a unique tag and their classes shouldn't be reused for other jobs.
@@ -64,6 +66,26 @@ public static int schedule(@NonNull JobRequest.Builder baseBuilder, long startMs
         return schedule(baseBuilder, true, startMs, endMs);
     }
 
+    /**
+     * Schedules the daily job only once and runs it immediately. This is helpful if you want to reuse your job
+     * and want to trigger the execution immediately. It's possible to schedule a daily job normally with
+     * {@link #schedule(JobRequest.Builder, long, long)} and this method at the same time to trigger the
+     * execution immediately.
+     *
+     * @param baseBuilder The builder of your daily job.
+     * @return The unique ID for this job.
+     */
+    public static int startNowOnce(@NonNull JobRequest.Builder baseBuilder) {
+        PersistableBundleCompat extras = new PersistableBundleCompat();
+        extras.putBoolean(EXTRA_ONCE, true);
+
+        return baseBuilder
+                .startNow()
+                .addExtras(extras)
+                .build()
+                .schedule();
+    }
+
     private static int schedule(@NonNull JobRequest.Builder builder, boolean newJob, long startMs, long endMs) {
         if (startMs >= DAY || endMs >= DAY || startMs < 0 || endMs < 0) {
             throw new IllegalArgumentException("startMs or endMs should be less than one day (in milliseconds)");
@@ -98,26 +120,35 @@ private static int schedule(@NonNull JobRequest.Builder builder, boolean newJob,
 
         builder.addExtras(extras);
 
+        if (newJob) {
+            // cancel all previous jobs, but not the one scheduled immediately
+            JobManager manager = JobManager.instance();
+            Set<JobRequest> requests = new HashSet<>(manager.getAllJobRequestsForTag(builder.mTag));
+            for (JobRequest request : requests) {
+                if (!request.isExact() || request.getStartMs() != JobRequest.START_NOW) {
+                    manager.cancel(request.getJobId());
+                }
+            }
+        }
+
         JobRequest request = builder
                 .setExecutionWindow(Math.max(1L, startDelay), Math.max(1L, endDelay))
-                .setUpdateCurrent(newJob)
                 .build();
 
         if (newJob && (request.isExact() || request.isPeriodic() || request.isTransient())) {
             throw new IllegalArgumentException("Daily jobs cannot be exact, periodic or transient");
         }
-        if (newJob && (request.requirementsEnforced())) {
-            throw new IllegalArgumentException("Daily jobs cannot enforce requirements");
-        }
 
         return request.schedule();
     }
 
     @NonNull
     @Override
-    protected final Result onRunJob(Params params) {
+    protected final Result onRunJob(@NonNull Params params) {
         PersistableBundleCompat extras = params.getExtras();
-        if (!extras.containsKey(EXTRA_START_MS) || !extras.containsKey(EXTRA_END_MS)) {
+        boolean runOnce = extras.getBoolean(EXTRA_ONCE, false);
+
+        if (!runOnce && (!extras.containsKey(EXTRA_START_MS) || !extras.containsKey(EXTRA_END_MS))) {
             CAT.e("Daily job doesn't contain start and end time");
             return Result.FAILURE;
         }
@@ -125,7 +156,13 @@ protected final Result onRunJob(Params params) {
         DailyJobResult result = null;
 
         try {
-            result = onRunDailyJob(params);
+            if (meetsRequirements()) {
+                result = onRunDailyJob(params);
+            } else {
+                result = DailyJobResult.SUCCESS; // reschedule
+                CAT.i("Daily job requirements not met, reschedule for the next day");
+            }
+
         } finally {
             if (result == null) {
                 // shouldn't happen if the job follows the contract
@@ -133,16 +170,18 @@ protected final Result onRunJob(Params params) {
                 CAT.e("Daily job result was null");
             }
 
-            JobRequest request = params.getRequest();
-            if (result == DailyJobResult.SUCCESS) {
-                CAT.i("Rescheduling daily job %s", request);
+            if (!runOnce) {
+                JobRequest request = params.getRequest();
+                if (result == DailyJobResult.SUCCESS) {
+                    CAT.i("Rescheduling daily job %s", request);
 
-                // don't update current, it would cancel this currently running job
-                schedule(request.createBuilder(), false,
-                        extras.getLong(EXTRA_START_MS, 0) % DAY, extras.getLong(EXTRA_END_MS, 0L) % DAY);
+                    // don't update current, it would cancel this currently running job
+                    schedule(request.createBuilder(), false,
+                            extras.getLong(EXTRA_START_MS, 0) % DAY, extras.getLong(EXTRA_END_MS, 0L) % DAY);
 
-            } else {
-                CAT.i("Cancel daily job %s", request);
+                } else {
+                    CAT.i("Cancel daily job %s", request);
+                }
             }
         }
 
@@ -172,7 +211,7 @@ protected final Result onRunJob(Params params) {
     @SuppressWarnings("WeakerAccess")
     @NonNull
     @WorkerThread
-    protected abstract DailyJobResult onRunDailyJob(Params params);
+    protected abstract DailyJobResult onRunDailyJob(@NonNull Params params);
 
     public enum DailyJobResult {
         /**
diff --git a/library/src/main/java/com/evernote/android/job/GcmAvailableHelper.java b/library/src/main/java/com/evernote/android/job/GcmAvailableHelper.java
index d932320..288fd8f 100644
--- a/library/src/main/java/com/evernote/android/job/GcmAvailableHelper.java
+++ b/library/src/main/java/com/evernote/android/job/GcmAvailableHelper.java
@@ -12,8 +12,6 @@
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GoogleApiAvailability;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.List;
 
 /**
@@ -21,7 +19,7 @@
  */
 /*package*/ final class GcmAvailableHelper {
 
-    private static final CatLog CAT = new JobCat("GcmAvailableHelper");
+    private static final JobCat CAT = new JobCat("GcmAvailableHelper");
 
     private static final String ACTION_TASK_READY = "com.google.android.gms.gcm.ACTION_TASK_READY";
     private static final String GCM_PERMISSION = "com.google.android.gms.permission.BIND_NETWORK_TASK_SERVICE";
diff --git a/library/src/main/java/com/evernote/android/job/Job.java b/library/src/main/java/com/evernote/android/job/Job.java
index 1a1d92b..74c6f01 100644
--- a/library/src/main/java/com/evernote/android/job/Job.java
+++ b/library/src/main/java/com/evernote/android/job/Job.java
@@ -36,8 +36,6 @@
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.lang.ref.WeakReference;
 
 /**
@@ -48,7 +46,7 @@
 @SuppressWarnings({"unused", "WeakerAccess"})
 public abstract class Job {
 
-    private static final CatLog CAT = new JobCat("Job");
+    private static final JobCat CAT = new JobCat("Job");
 
     public enum Result {
         /**
@@ -113,11 +111,12 @@
      */
     @NonNull
     @WorkerThread
-    protected abstract Result onRunJob(Params params);
+    protected abstract Result onRunJob(@NonNull Params params);
 
     /*package*/ final Result runJob() {
         try {
-            if (meetsRequirements()) {
+            // daily jobs check the requirements manually
+            if (this instanceof DailyJob || meetsRequirements()) {
                 mResult = onRunJob(getParams());
             } else {
                 mResult = getParams().isPeriodic() ? Result.FAILURE : Result.RESCHEDULE;
@@ -143,7 +142,7 @@ protected void onReschedule(int newJobId) {
         // override me
     }
 
-    private boolean meetsRequirements() {
+    /*package*/ boolean meetsRequirements() {
         if (!getParams().getRequest().requirementsEnforced()) {
             return true;
         }
diff --git a/library/src/main/java/com/evernote/android/job/JobCreatorHolder.java b/library/src/main/java/com/evernote/android/job/JobCreatorHolder.java
index 1e1ad2a..fbd3059 100644
--- a/library/src/main/java/com/evernote/android/job/JobCreatorHolder.java
+++ b/library/src/main/java/com/evernote/android/job/JobCreatorHolder.java
@@ -2,8 +2,6 @@
 
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
@@ -12,7 +10,7 @@
  */
 /*package*/ class JobCreatorHolder {
 
-    private static final CatLog CAT = new JobCat("JobCreatorHolder");
+    private static final JobCat CAT = new JobCat("JobCreatorHolder");
 
     private final List<JobCreator> mJobCreators;
 
diff --git a/library/src/main/java/com/evernote/android/job/JobExecutor.java b/library/src/main/java/com/evernote/android/job/JobExecutor.java
index 19ea602..5bb849f 100644
--- a/library/src/main/java/com/evernote/android/job/JobExecutor.java
+++ b/library/src/main/java/com/evernote/android/job/JobExecutor.java
@@ -37,8 +37,6 @@
 
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.lang.ref.WeakReference;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -55,7 +53,7 @@
 @SuppressWarnings("WeakerAccess")
 /*package*/ class JobExecutor {
 
-    private static final CatLog CAT = new JobCat("JobExecutor");
+    private static final JobCat CAT = new JobCat("JobExecutor");
     private static final long WAKE_LOCK_TIMEOUT = TimeUnit.MINUTES.toMillis(3);
 
     private final SparseArray<Job> mJobs; // only cached in memory, that's fine
diff --git a/library/src/main/java/com/evernote/android/job/JobManager.java b/library/src/main/java/com/evernote/android/job/JobManager.java
index 5788f94..dda4c34 100644
--- a/library/src/main/java/com/evernote/android/job/JobManager.java
+++ b/library/src/main/java/com/evernote/android/job/JobManager.java
@@ -43,8 +43,6 @@
 import com.evernote.android.job.util.JobUtil;
 import com.google.android.gms.gcm.GcmNetworkManager;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.lang.ref.WeakReference;
 import java.util.Collections;
 import java.util.Iterator;
@@ -82,7 +80,7 @@
 @SuppressWarnings({"unused", "WeakerAccess"})
 public final class JobManager {
 
-    private static final CatLog CAT = new JobCat("JobManager");
+    private static final JobCat CAT = new JobCat("JobManager");
 
     @SuppressLint("StaticFieldLeak")
     private static volatile JobManager instance;
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index d596d4d..516941b 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -34,10 +34,9 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.Locale;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -112,15 +111,15 @@ public static int getRescheduleCount(JobRequest request) {
 
         private final Context mContext;
         private final int mJobId;
-        private final CatLog mCat;
+        private final JobCat mCat;
 
         private final JobManager mJobManager;
 
-        public Common(@NonNull Service service, CatLog cat, int jobId) {
+        public Common(@NonNull Service service, JobCat cat, int jobId) {
             this((Context) service, cat, jobId);
         }
 
-        /*package*/ Common(@NonNull Context context, CatLog cat, int jobId) {
+        /*package*/ Common(@NonNull Context context, JobCat cat, int jobId) {
             mContext = context;
             mJobId = jobId;
             mCat = cat;
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 9e2f461..36d743c 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -39,8 +39,6 @@
 import com.evernote.android.job.util.JobPreconditions;
 import com.evernote.android.job.util.support.PersistableBundleCompat;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -104,7 +102,7 @@
     private static final long WINDOW_THRESHOLD_WARNING = Long.MAX_VALUE / 3;
     private static final long WINDOW_THRESHOLD_MAX = (Long.MAX_VALUE / 3) * 2;
 
-    private static final CatLog CAT = new JobCat("JobRequest");
+    private static final JobCat CAT = new JobCat("JobRequest");
 
     /*package*/ static long getMinInterval() {
         return JobConfig.isAllowSmallerIntervalsForMarshmallow() ? TimeUnit.MINUTES.toMillis(1) : MIN_INTERVAL;
@@ -526,7 +524,7 @@ public String toString() {
         private static final int CREATE_ID = -8765; // magic number
 
         private int mId;
-        private final String mTag;
+        final String mTag;
 
         private long mStartMs;
         private long mEndMs;
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index 6c370c8..5905268 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -9,9 +9,6 @@
 
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
-import net.vrallev.android.cat.instance.CatEmpty;
-
 import java.util.Collection;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
@@ -25,7 +22,7 @@
  */
 public final class JobRescheduleService extends JobIntentService {
 
-    private static final CatLog CAT = BuildConfig.DEBUG ? new JobCat("JobRescheduleService") : new CatEmpty();
+    private static final JobCat CAT = new JobCat("JobRescheduleService", BuildConfig.DEBUG);
 
     /*package*/ static void startService(Context context) {
         try {
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index 82f3514..ff6642d 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -42,8 +42,6 @@
 
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -56,7 +54,7 @@
 @SuppressWarnings("WeakerAccess")
 /*package*/ class JobStorage {
 
-    private static final CatLog CAT = new JobCat("JobStorage");
+    private static final JobCat CAT = new JobCat("JobStorage");
 
     public static final String JOB_ID_COUNTER = "JOB_ID_COUNTER_v2";
     private static final String FAILED_DELETE_IDS = "FAILED_DELETE_IDS";
diff --git a/library/src/main/java/com/evernote/android/job/JobStorageDatabaseErrorHandler.java b/library/src/main/java/com/evernote/android/job/JobStorageDatabaseErrorHandler.java
index e4af595..33fda1a 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorageDatabaseErrorHandler.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorageDatabaseErrorHandler.java
@@ -26,8 +26,6 @@
 
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.Cat;
-
 import java.io.File;
 import java.util.List;
 
@@ -61,7 +59,7 @@
      *              is detected.
      */
     public void onCorruption(SQLiteDatabase dbObj) {
-        Cat.e("Corruption reported by sqlite on database: " + dbObj.getPath());
+        CAT.e("Corruption reported by sqlite on database: " + dbObj.getPath());
 
         // is the corruption detected even before database could be 'opened'?
         if (!dbObj.isOpen()) {
diff --git a/library/src/main/java/com/evernote/android/job/WakeLockUtil.java b/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
index dc4ff6c..2ee991c 100644
--- a/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
+++ b/library/src/main/java/com/evernote/android/job/WakeLockUtil.java
@@ -11,8 +11,6 @@
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -20,7 +18,7 @@
  */
 /*package*/ final class WakeLockUtil {
 
-    private static final CatLog CAT = new JobCat("WakeLockUtil");
+    private static final JobCat CAT = new JobCat("WakeLockUtil");
 
     private static final String EXTRA_WAKE_LOCK_ID = "com.evernote.android.job.wakelockid";
 
diff --git a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
index 2116532..6c041ee 100644
--- a/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
+++ b/library/src/main/java/com/evernote/android/job/gcm/JobProxyGcm.java
@@ -37,14 +37,12 @@
 import com.google.android.gms.gcm.PeriodicTask;
 import com.google.android.gms.gcm.Task;
 
-import net.vrallev.android.cat.CatLog;
-
 /**
  * @author rwondratschek
  */
 public class JobProxyGcm implements JobProxy {
 
-    private static final CatLog CAT = new JobCat("JobProxyGcm");
+    private static final JobCat CAT = new JobCat("JobProxyGcm");
 
     /*
      * Requires charging doesn't work reliable. Like the documentation says, the job doesn't run if
diff --git a/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java b/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java
index 18924ff..a6dbf71 100644
--- a/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java
+++ b/library/src/main/java/com/evernote/android/job/gcm/PlatformGcmService.java
@@ -35,14 +35,12 @@
 import com.google.android.gms.gcm.GcmTaskService;
 import com.google.android.gms.gcm.TaskParams;
 
-import net.vrallev.android.cat.CatLog;
-
 /**
  * @author rwondratschek
  */
 public class PlatformGcmService extends GcmTaskService {
 
-    private static final CatLog CAT = new JobCat("PlatformGcmService");
+    private static final JobCat CAT = new JobCat("PlatformGcmService");
 
     @Override
     public int onRunTask(TaskParams taskParams) {
diff --git a/library/src/main/java/com/evernote/android/job/util/JobCat.java b/library/src/main/java/com/evernote/android/job/util/JobCat.java
index 7428fef..4369f3a 100644
--- a/library/src/main/java/com/evernote/android/job/util/JobCat.java
+++ b/library/src/main/java/com/evernote/android/job/util/JobCat.java
@@ -26,18 +26,17 @@
 package com.evernote.android.job.util;
 
 import android.support.annotation.NonNull;
-
-import net.vrallev.android.cat.CatLog;
-import net.vrallev.android.cat.instance.CatLazy;
+import android.support.annotation.Nullable;
+import android.util.Log;
 
 import java.util.Arrays;
 
 /**
- * The default {@link CatLog} class for this library.
+ * The default {@link JobLogger} class for this library.
  *
  * @author rwondratschek
  */
-public class JobCat extends CatLazy {
+public class JobCat implements JobLogger {
 
     private static volatile JobLogger[] loggers = new JobLogger[0]; // use array to avoid synchronization while printing log statements
     private static volatile boolean logcatEnabled = true;
@@ -104,35 +103,84 @@ public static boolean isLogcatEnabled() {
         return logcatEnabled;
     }
 
-    private final String mTag;
-
-    public JobCat() {
-        this((String) null);
-    }
+    protected final String mTag;
+    protected final boolean mEnabled;
 
     public JobCat(Class<?> clazz) {
         this(clazz.getSimpleName());
     }
 
     public JobCat(String tag) {
+        this(tag, true);
+    }
+
+    public JobCat(String tag, boolean enabled) {
         mTag = tag;
+        mEnabled = enabled;
     }
 
-    @Override
-    public String getTag() {
-        return mTag == null ? super.getTag() : mTag;
+    public void i(@NonNull String message) {
+        log(Log.INFO, mTag, message, null);
+    }
+
+    public void i(@NonNull String message, Object... args) {
+        log(Log.INFO, mTag, String.format(message, args), null);
+    }
+
+    public void d(@NonNull String message) {
+        log(Log.DEBUG, mTag, message, null);
+    }
+
+    public void d(@NonNull String message, Object... args) {
+        log(Log.DEBUG, mTag, String.format(message, args), null);
+    }
+
+    public void d(@NonNull Throwable t, String message, Object... args) {
+        log(Log.DEBUG, mTag, String.format(message, args), t);
+    }
+
+    public void w(@NonNull String message) {
+        log(Log.WARN, mTag, message, null);
+    }
+
+    public void w(@NonNull String message, Object... args) {
+        log(Log.WARN, mTag, String.format(message, args), null);
+    }
+
+    public void w(@NonNull Throwable t, @NonNull String message, Object... args) {
+        log(Log.WARN, mTag, String.format(message, args), t);
+    }
+
+    public void e(@NonNull Throwable t) {
+        String message = t.getMessage();
+        log(Log.ERROR, mTag, message == null ? "empty message" : message, t);
+    }
+
+    public void e(@NonNull String message) {
+        log(Log.ERROR, mTag, message, null);
+    }
+
+    public void e(@NonNull String message, Object... args) {
+        log(Log.ERROR, mTag, String.format(message, args), null);
+    }
+
+    public void e(@NonNull Throwable t, @NonNull String message, Object... args) {
+        log(Log.ERROR, mTag, String.format(message, args), t);
     }
 
     @Override
-    protected void println(int priority, String message, Throwable t) {
+    public void log(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
+        if (!mEnabled) {
+            return;
+        }
+
         if (logcatEnabled) {
-            super.println(priority, message, t);
+            String stacktrace = t == null ? "" : ('\n' + Log.getStackTraceString(t));
+            Log.println(priority, tag, message + stacktrace);
         }
 
         JobLogger[] printers = JobCat.loggers;
         if (printers.length > 0) {
-            String tag = getTag();
-
             for (JobLogger logger : printers) {
                 if (logger != null) {
                     logger.log(priority, tag, message, t);
diff --git a/library/src/main/java/com/evernote/android/job/util/JobUtil.java b/library/src/main/java/com/evernote/android/job/util/JobUtil.java
index 200d07a..d8a698f 100644
--- a/library/src/main/java/com/evernote/android/job/util/JobUtil.java
+++ b/library/src/main/java/com/evernote/android/job/util/JobUtil.java
@@ -29,8 +29,6 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Locale;
@@ -48,7 +46,7 @@
 
     private static final long ONE_DAY = TimeUnit.DAYS.toMillis(1);
 
-    private static final CatLog CAT = new JobCat("JobUtil");
+    private static final JobCat CAT = new JobCat("JobUtil");
 
     private JobUtil() {
         // no op
diff --git a/library/src/main/java/com/evernote/android/job/util/support/PersistableBundleCompat.java b/library/src/main/java/com/evernote/android/job/util/support/PersistableBundleCompat.java
index 86889b1..c5cf721 100644
--- a/library/src/main/java/com/evernote/android/job/util/support/PersistableBundleCompat.java
+++ b/library/src/main/java/com/evernote/android/job/util/support/PersistableBundleCompat.java
@@ -30,8 +30,6 @@
 
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
-
 import org.xmlpull.v1.XmlPullParserException;
 
 import java.io.ByteArrayInputStream;
@@ -50,7 +48,7 @@
 @SuppressWarnings("unused")
 public final class PersistableBundleCompat {
 
-    private static final CatLog CAT = new JobCat("PersistableBundleCompat");
+    private static final JobCat CAT = new JobCat("PersistableBundleCompat");
     private static final String UTF_8 = "UTF-8";
 
     private final Map<String, Object> mValues;
diff --git a/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java b/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
index 8101b48..a110d18 100644
--- a/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
+++ b/library/src/main/java/com/evernote/android/job/v14/JobProxy14.java
@@ -39,8 +39,6 @@
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
-
 /**
  * @author rwondratschek
  */
@@ -50,7 +48,7 @@
     private static final String TAG = "JobProxy14";
 
     protected final Context mContext;
-    protected final CatLog mCat;
+    protected final JobCat mCat;
 
     private AlarmManager mAlarmManager;
 
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
index 819b03a..e1e4550 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
@@ -38,14 +38,12 @@
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
-
 /**
  * @author rwondratschek
  */
 public final class PlatformAlarmService extends JobIntentService {
 
-    private static final CatLog CAT = new JobCat("PlatformAlarmService");
+    private static final JobCat CAT = new JobCat("PlatformAlarmService");
 
     public static void start(Context context, int jobId, @Nullable Bundle transientExtras) {
         Intent intent = new Intent();
@@ -62,7 +60,7 @@ protected void onHandleWork(@NonNull Intent intent) {
         runJob(intent, this, CAT);
     }
 
-    /*package*/ static void runJob(@Nullable Intent intent, @NonNull Service service, @NonNull CatLog cat) {
+    /*package*/ static void runJob(@Nullable Intent intent, @NonNull Service service, @NonNull JobCat cat) {
         if (intent == null) {
             cat.i("Delivered intent is null");
             return;
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmServiceExact.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmServiceExact.java
index 3b434ea..a62ce49 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmServiceExact.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmServiceExact.java
@@ -36,8 +36,6 @@
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.HashSet;
 import java.util.Set;
 
@@ -46,7 +44,7 @@
  */
 public final class PlatformAlarmServiceExact extends Service {
 
-    private static final CatLog CAT = new JobCat("PlatformAlarmServiceExact");
+    private static final JobCat CAT = new JobCat("PlatformAlarmServiceExact");
 
     public static Intent createIntent(Context context, int jobId, @Nullable Bundle transientExtras) {
         Intent intent = new Intent(context, PlatformAlarmServiceExact.class);
diff --git a/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java b/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
index 70d5d0f..24a01e8 100644
--- a/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
+++ b/library/src/main/java/com/evernote/android/job/v21/JobProxy21.java
@@ -40,8 +40,6 @@
 import com.evernote.android.job.util.JobCat;
 import com.evernote.android.job.util.JobUtil;
 
-import net.vrallev.android.cat.CatLog;
-
 import java.util.List;
 
 
@@ -56,7 +54,7 @@
     private static final int ERROR_BOOT_PERMISSION = -123;
 
     protected final Context mContext;
-    protected final CatLog mCat;
+    protected final JobCat mCat;
 
     public JobProxy21(Context context) {
         this(context, TAG);
diff --git a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
index 2f50433..64fff04 100644
--- a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
+++ b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
@@ -38,8 +38,6 @@
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.util.JobCat;
 
-import net.vrallev.android.cat.Cat;
-
 /**
  * @author rwondratschek
  */
@@ -67,7 +65,7 @@ public boolean onStartJob(final JobParameters params) {
             if (TransientBundleCompat.startWithTransientBundle(this, request)) {
                 if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                     // should only happen during testing if an API is disabled
-                    Cat.d("PendingIntent for transient bundle is not null although running on O, using compat mode, request %s", request);
+                    CAT.d("PendingIntent for transient bundle is not null although running on O, using compat mode, request %s", request);
                 }
                 return false;
 
diff --git a/library/src/test/java/com/evernote/android/job/DailyJobTest.java b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
index 3b35b64..1fd8071 100644
--- a/library/src/test/java/com/evernote/android/job/DailyJobTest.java
+++ b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
@@ -1,5 +1,7 @@
 package com.evernote.android.job;
 
+import android.support.annotation.NonNull;
+
 import com.evernote.android.job.test.DummyJobs;
 import com.evernote.android.job.test.JobRobolectricTestRunner;
 import com.evernote.android.job.test.TestClock;
@@ -12,7 +14,9 @@
 import org.junit.runners.MethodSorters;
 
 import java.util.Calendar;
+import java.util.Set;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
 
@@ -214,4 +218,83 @@ public void verifyDailyJobIsNotExact() {
         assertThat(request).isNotNull();
         assertThat(request.isExact()).isFalse();
     }
+
+    @Test
+    public void verifyScheduledTwiceOverridesExisting() {
+        long time = 1L;
+
+        DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessJob.class), time, time);
+        DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessJob.class), time, time);
+        Set<JobRequest> requests = manager().getAllJobRequests();
+
+        assertThat(requests).hasSize(1);
+        assertThat(requests.iterator().next().getTag()).isEqualTo(DummyJobs.SuccessJob.TAG);
+    }
+
+    @Test
+    public void verifyScheduledImmediatelyIsNotOverridden() {
+        long time = 1L;
+
+        DailyJob.startNowOnce(DummyJobs.createBuilder(DummyJobs.SuccessJob.class));
+        DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessJob.class), time, time);
+        Set<JobRequest> requests = manager().getAllJobRequests();
+
+        assertThat(requests).hasSize(2);
+        for (JobRequest request : requests) {
+            assertThat(request.getTag()).isEqualTo(DummyJobs.SuccessJob.TAG);
+        }
+    }
+
+    @Test
+    public void verifyImmediateExecution() {
+        long time = 1L;
+
+        int nowJobId = DailyJob.startNowOnce(DummyJobs.createBuilder(DummyJobs.SuccessJob.class));
+        int normalJobId = DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessJob.class), time, time);
+        assertThat(manager().getAllJobRequests()).hasSize(2);
+
+        executeJob(nowJobId, Job.Result.SUCCESS);
+
+        assertThat(manager().getAllJobRequests()).hasSize(1);
+        assertThat(manager().getJobRequest(normalJobId)).isNotNull();
+    }
+
+    @Test
+    public void verifyRequirementsEnforcedSkipsJob() {
+        long time = 1L;
+
+        final AtomicBoolean atomicBoolean = new AtomicBoolean(true);
+
+        manager().addJobCreator(new JobCreator() {
+            @Override
+            public Job create(@NonNull String tag) {
+                return new DailyJob() {
+                    @NonNull
+                    @Override
+                    protected DailyJobResult onRunDailyJob(@NonNull Params params) {
+                        atomicBoolean.set(false);
+                        return DailyJobResult.SUCCESS;
+                    }
+                };
+            }
+        });
+
+        int jobId = DailyJob.schedule(new JobRequest.Builder("any").setRequiresCharging(true).setRequirementsEnforced(true), time, time);
+        assertThat(manager().getAllJobRequests()).hasSize(1);
+
+        executeJob(jobId, Job.Result.SUCCESS);
+
+        assertThat(manager().getAllJobRequests()).hasSize(1);
+        assertThat(atomicBoolean.get()).isTrue();
+
+        // now verify that the job is called without the requirement
+        manager().cancelAll();
+        jobId = DailyJob.schedule(new JobRequest.Builder("any").setRequiresCharging(false).setRequirementsEnforced(true), time, time);
+        assertThat(manager().getAllJobRequests()).hasSize(1);
+
+        executeJob(jobId, Job.Result.SUCCESS);
+
+        assertThat(manager().getAllJobRequests()).hasSize(1);
+        assertThat(atomicBoolean.get()).isFalse();
+    }
 }
diff --git a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index 45e5874..209847b 100644
--- a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -180,7 +180,7 @@ public void verifyCanceledJobNotRescheduled() {
         final Job job = new Job() {
             @NonNull
             @Override
-            protected Result onRunJob(Params params) {
+            protected Result onRunJob(@NonNull Params params) {
                 manager().cancelAll();
                 return Result.RESCHEDULE;
             }
diff --git a/library/src/test/java/com/evernote/android/job/JobPeriodicCancelTest.java b/library/src/test/java/com/evernote/android/job/JobPeriodicCancelTest.java
index bb7d018..f8bb0bd 100644
--- a/library/src/test/java/com/evernote/android/job/JobPeriodicCancelTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobPeriodicCancelTest.java
@@ -121,7 +121,7 @@ public void run() {
 
         @NonNull
         @Override
-        protected Result onRunJob(Params params) {
+        protected Result onRunJob(@NonNull Params params) {
             mStartedLatch.countDown();
 
             try {
diff --git a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
index 5e08d64..6c19dbe 100644
--- a/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
+++ b/library/src/test/java/com/evernote/android/job/test/DummyJobs.java
@@ -24,7 +24,7 @@ private DummyJobs() {
 
         @NonNull
         @Override
-        protected Result onRunJob(Params params) {
+        protected Result onRunJob(@NonNull Params params) {
             return Result.SUCCESS;
         }
     }
@@ -37,7 +37,7 @@ protected Result onRunJob(Params params) {
 
         @NonNull
         @Override
-        protected Result onRunJob(Params params) {
+        protected Result onRunJob(@NonNull Params params) {
             return Result.RESCHEDULE;
         }
 
@@ -57,7 +57,7 @@ public int getNewJobId() {
 
         @NonNull
         @Override
-        protected Result onRunJob(Params params) {
+        protected Result onRunJob(@NonNull Params params) {
             return Result.FAILURE;
         }
     }
@@ -67,7 +67,7 @@ protected Result onRunJob(Params params) {
 
         @NonNull
         @Override
-        protected Result onRunJob(Params params) {
+        protected Result onRunJob(@NonNull Params params) {
             try {
                 Thread.sleep(2_000);
             } catch (InterruptedException ignored) {
@@ -81,7 +81,7 @@ protected Result onRunJob(Params params) {
 
         @NonNull
         @Override
-        protected DailyJobResult onRunDailyJob(Params params) {
+        protected DailyJobResult onRunDailyJob(@NonNull Params params) {
             return DailyJobResult.SUCCESS;
         }
     }
diff --git a/library/src/test/java/com/evernote/android/job/test/TestLogger.java b/library/src/test/java/com/evernote/android/job/test/TestLogger.java
index 817d09c..8c9ab43 100644
--- a/library/src/test/java/com/evernote/android/job/test/TestLogger.java
+++ b/library/src/test/java/com/evernote/android/job/test/TestLogger.java
@@ -3,37 +3,26 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.evernote.android.job.util.JobLogger;
-
-import net.vrallev.android.cat.instance.CatLazy;
-import net.vrallev.android.cat.print.CatPrinter;
+import com.evernote.android.job.util.JobCat;
 
 /**
  * @author rwondratschek
  */
-public final class TestLogger extends CatLazy implements CatPrinter, JobLogger {
+public final class TestLogger extends JobCat {
 
     public static final TestLogger INSTANCE = new TestLogger();
 
     private TestLogger() {
-        // no op
-    }
-
-    @Override
-    protected void println(int priority, String message, Throwable t) {
-        println(priority, "Unit-Test", message, t);
-    }
-
-    @Override
-    public void println(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
-        log(priority, tag, message, t);
+        super("JobCat", false); // disabled
     }
 
     @Override
     public void log(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
-        // System.out.println(message);
-        // if (t != null) {
-        //     t.printStackTrace();
-        // }
+        if (mEnabled) {
+            System.out.println(message);
+            if (t != null) {
+                t.printStackTrace();
+            }
+        }
     }
 }
diff --git a/library/src/test/java/com/evernote/android/job/util/LoggerTest.java b/library/src/test/java/com/evernote/android/job/util/LoggerTest.java
index 42da2b8..07215d6 100644
--- a/library/src/test/java/com/evernote/android/job/util/LoggerTest.java
+++ b/library/src/test/java/com/evernote/android/job/util/LoggerTest.java
@@ -5,8 +5,6 @@
 
 import com.evernote.android.job.JobConfig;
 
-import net.vrallev.android.cat.print.CatPrinter;
-
 import org.junit.After;
 import org.junit.FixMethodOrder;
 import org.junit.Test;
@@ -114,24 +112,7 @@ public void test100Loggers() {
         assertThat(removedPrinter.mMessages).containsExactly("hello", "world");
     }
 
-    @Test
-    public void testNotVerboseLogging() {
-        JobCat cat = new JobCat("Tag");
-
-        TestLogger fakeLogcatPrinter = new TestLogger();
-        cat.addPrinter(fakeLogcatPrinter); // in this list logcat is enabled
-
-        cat.d("hello");
-
-        assertThat(fakeLogcatPrinter.mMessages).containsExactly("hello");
-
-        JobCat.setLogcatEnabled(false);
-
-        cat.d("world");
-        assertThat(fakeLogcatPrinter.mMessages).containsExactly("hello");
-    }
-
-    private static final class TestLogger implements JobLogger, CatPrinter {
+    private static final class TestLogger implements JobLogger {
 
         private final List<String> mTags = new ArrayList<>();
         private final List<String> mMessages = new ArrayList<>();
@@ -141,10 +122,5 @@ public void log(int priority, @NonNull String tag, @NonNull String message, @Nul
             mTags.add(tag);
             mMessages.add(message);
         }
-
-        @Override
-        public void println(int priority, @NonNull String tag, @NonNull String message, @Nullable Throwable t) {
-            log(priority, tag, message, t);
-        }
     }
 }
