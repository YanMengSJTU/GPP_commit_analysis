diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2413f80..950083a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,8 @@
+## 1.0.11 (2016-08-09)
+
+* Fix overflow for too large execution windows
+* Fix immediately starting jobs with JobScheduler if the execution window is too large
+
 ## 1.0.10 (2016-07-25)
 
 * Create the JobManager in all API services
diff --git a/README.md b/README.md
index c0e7fbe..5651cb7 100644
--- a/README.md
+++ b/README.md
@@ -10,7 +10,7 @@ Download [the latest version][2] or grab via Gradle:
 
 ```groovy
 dependencies {
-    compile 'com.evernote:android-job:1.0.10'
+    compile 'com.evernote:android-job:1.0.11'
 }
 ```
 
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index 10ab2a8..e1179ba 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -158,7 +158,7 @@ private void testSimple() {
         extras.putString("key", "Hello world");
 
         mLastJobId = new JobRequest.Builder(DemoJob.TAG)
-                .setExecutionWindow(Long.MAX_VALUE / 2, Long.MAX_VALUE / 3 * 2)
+                .setExecutionWindow(3_000L, 4_000L)
                 .setBackoffCriteria(5_000L, JobRequest.BackoffPolicy.LINEAR)
                 .setRequiresCharging(mRequiresCharging.isChecked())
                 .setRequiresDeviceIdle(mRequiresDeviceIdle.isChecked())
diff --git a/gradle.properties b/gradle.properties
index 78c42bd..537f5d0 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,3 @@
-#VERSION_NAME=1.0.10
-VERSION_NAME=1.0.10-SNAPSHOT
+#VERSION_NAME=1.0.11
+VERSION_NAME=1.0.11-SNAPSHOT
 VERSION_CODE=1
\ No newline at end of file
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index c3b95d1..3309246 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -514,7 +514,7 @@ private void fillContentValues(ContentValues contentValues) {
          *
          * The maximum value for each argument is {@code Long.MAX_VALUE / 3 * 2} (about 53_375_995_583 days).
          * Otherwise some APIs schedule the job immediately. No exception is thrown if an argument is greater
-         * then the maximum value, the arguments are silently being reduced.
+         * than the maximum value, the arguments are silently being clamped.
          *
          * <br>
          * <br>
@@ -522,7 +522,7 @@ private void fillContentValues(ContentValues contentValues) {
          * <b>NOTE:</b> It's not recommended to have such big execution windows. The {@code AlarmManager} used
          * as fallback API doesn't allow setting a start date. Although being inexact, the execution time is
          * the arithmetic average of {@code startMs} and {@code endMs}. The result could be that your job never
-         * runs on pre Android 5.0 devices, if one argument is too big.
+         * runs on pre Android 5.0 devices, if one argument is too large.
          *
          * @param startMs Earliest point from which your task is eligible to run.
          * @param endMs Latest point at which your task must be run.
@@ -678,8 +678,8 @@ public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle) {
          * <br>
          *
          * The maximum value of the argument is {@code Long.MAX_VALUE / 3 * 2} (about 53_375_995_583 days).
-         * No exception is thrown if the argument is greater then the maximum value, the argument is
-         * silently being reduced.
+         * No exception is thrown if the argument is greater than the maximum value, the argument is
+         * silently being clamped.
          *
          * @param exactMs The exact offset when the job should run from when the job was scheduled.
          * @see AlarmManager#setExact(int, long, android.app.PendingIntent)
@@ -688,7 +688,7 @@ public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle) {
         public Builder setExact(long exactMs) {
             mExact = true;
             if (exactMs > WINDOW_THRESHOLD_MAX) {
-                Cat.i("exactMs reduced from %d days to %d days", TimeUnit.MILLISECONDS.toDays(exactMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
+                Cat.i("exactMs clamped from %d days to %d days", TimeUnit.MILLISECONDS.toDays(exactMs), TimeUnit.MILLISECONDS.toDays(WINDOW_THRESHOLD_MAX));
                 exactMs = WINDOW_THRESHOLD_MAX;
             }
 
@@ -798,7 +798,7 @@ public JobRequest build() {
             }
 
             if (mIntervalMs <= 0 && (mStartMs > WINDOW_THRESHOLD_WARNING || mEndMs > WINDOW_THRESHOLD_WARNING)) {
-                Cat.w("Attention: your execution window is too big. This could result in undesired behavior, see https://github.com/evernote/android-job/blob/master/FAQ.md");
+                Cat.w("Attention: your execution window is too large. This could result in undesired behavior, see https://github.com/evernote/android-job/blob/master/FAQ.md");
             }
 
             return new JobRequest(this);
