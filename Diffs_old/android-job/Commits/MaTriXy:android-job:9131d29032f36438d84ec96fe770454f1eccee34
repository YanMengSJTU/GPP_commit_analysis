diff --git a/library/build.gradle b/library/build.gradle
index 0e29a1c..8600ba0 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -4,7 +4,6 @@ apply from: '../build-config/gradle-quality.gradle'
 
 dependencies {
     provided "com.google.android.gms:play-services-gcm:$playServicesVersion"
-    //compile "com.google.android.gms:play-services-gcm:$rootProject.ext.playServicesVersion"
 
     //noinspection GradleDependency
     compile "com.android.support:support-annotations:$supportLibVersion"
@@ -14,6 +13,7 @@ dependencies {
     androidTestCompile 'com.android.support.test:rules:0.5'
     androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
     androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
+    androidTestCompile "com.google.android.gms:play-services-gcm:$playServicesVersion"
 
     androidTestCompile "com.facebook.stetho:stetho:$stethoVersion"
 
diff --git a/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java b/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
new file mode 100644
index 0000000..5bd83fc
--- /dev/null
+++ b/library/src/androidTest/java/com/evernote/android/job/PlatformTest.java
@@ -0,0 +1,150 @@
+package com.evernote.android.job;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.filters.LargeTest;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.evernote.android.job.gcm.PlatformGcmService;
+import com.evernote.android.job.util.JobApi;
+import com.evernote.android.job.v14.PlatformAlarmService;
+import com.evernote.android.job.v21.PlatformJobService;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assume.assumeTrue;
+
+/**
+ * @author rwondratschek
+ */
+@RunWith(AndroidJUnit4.class)
+@LargeTest
+public class PlatformTest {
+
+    private JobManager mManager;
+
+    private TestJob mJob;
+
+    @Before
+    public void prepare() {
+        mManager = JobManager.create(InstrumentationRegistry.getTargetContext());
+        mManager.addJobCreator(new TestJobCreator());
+    }
+
+    @After
+    public void clear() {
+        mManager.cancelAll();
+        mManager.destroy();
+    }
+
+    @Test
+    public void testApi14() throws Exception {
+        testOneOff(JobApi.V_14);
+    }
+
+    @Test
+    public void testApi19() throws Exception {
+        testOneOff(JobApi.V_19);
+    }
+
+    @Test
+    public void testApiGcm() throws Exception {
+        testOneOff(JobApi.GCM, 40, TimeUnit.SECONDS);
+    }
+
+    @Test
+    public void testApi21() throws Exception {
+        testOneOff(JobApi.V_21);
+    }
+
+    @Test
+    public void testApi24() throws Exception {
+        testOneOff(JobApi.V_24);
+    }
+
+    @Test
+    public void testExact() throws Exception {
+        mJob = new TestJob(PlatformAlarmService.class);
+
+        new JobRequest.Builder("tag")
+                .setExact(2_000)
+                .build()
+                .schedule();
+
+        mJob.mLatch.await(4, TimeUnit.SECONDS);
+    }
+
+    private void testOneOff(JobApi api) throws Exception {
+        testOneOff(api, 10, TimeUnit.SECONDS);
+    }
+
+    private void testOneOff(JobApi api, long wait, TimeUnit timeUnit) throws Exception {
+        switch (api) {
+            case V_14:
+            case V_19:
+                mJob = new TestJob(PlatformAlarmService.class);
+                break;
+            case GCM:
+                mJob = new TestJob(PlatformGcmService.class);
+                break;
+            case V_21:
+            case V_24:
+                mJob = new TestJob(PlatformJobService.class);
+                break;
+            default:
+                throw new IllegalStateException("not implemented");
+        }
+
+        // ignore test if not supported
+        assumeTrue(api.isSupported(InstrumentationRegistry.getTargetContext()));
+
+        mManager.forceApi(api);
+
+        int jobId = new JobRequest.Builder("tag")
+                .setExecutionWindow(2_000, 3_000)
+                .build()
+                .schedule();
+
+        mJob.mLatch.await(wait, timeUnit);
+
+        // give the platform implementation some time to clean everything up
+        Thread.sleep(300L);
+
+        assertThat(mManager.getJob(jobId)).isNotNull();
+        assertThat(mManager.getJobRequest(jobId)).isNull();
+    }
+
+    private final class TestJob extends Job {
+
+        private final CountDownLatch mLatch = new CountDownLatch(1);
+        private final Class<? extends Context> mExpectedContext;
+
+        private TestJob(Class<? extends Context> expectedContext) {
+            mExpectedContext = expectedContext;
+        }
+
+        @NonNull
+        @Override
+        protected Result onRunJob(Params params) {
+            assertThat(getContext()).isInstanceOf(mExpectedContext);
+
+            mLatch.countDown();
+            return Result.SUCCESS;
+        }
+    }
+
+    private final class TestJobCreator implements JobCreator {
+        @Override
+        public Job create(String tag) {
+            return mJob;
+        }
+    }
+}
diff --git a/library/src/main/java/com/evernote/android/job/JobExecutor.java b/library/src/main/java/com/evernote/android/job/JobExecutor.java
index 2b74c5b..10c76a8 100644
--- a/library/src/main/java/com/evernote/android/job/JobExecutor.java
+++ b/library/src/main/java/com/evernote/android/job/JobExecutor.java
@@ -29,7 +29,7 @@
 import android.os.PowerManager;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.util.LruCache;
+import android.util.LruCache;
 import android.util.SparseArray;
 
 import com.evernote.android.job.util.JobCat;
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index d437814..b0825e5 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -33,8 +33,8 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.support.annotation.Nullable;
-import android.support.v4.util.LruCache;
 import android.text.TextUtils;
+import android.util.LruCache;
 
 import com.evernote.android.job.util.JobCat;
 
@@ -259,7 +259,7 @@ protected JobRequest create(Integer id) {
         }
     }
 
-    private static class JobOpenHelper extends SQLiteOpenHelper {
+    private static final class JobOpenHelper extends SQLiteOpenHelper {
 
         private JobOpenHelper(Context context, String databasePath) {
             super(context, databasePath, null, DATABASE_VERSION);
