diff --git a/build.gradle b/build.gradle
index 2dbcbf0..808c96f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,7 +1,7 @@
 buildscript {
     repositories {
-        jcenter()
         google()
+        jcenter()
     }
     dependencies {
         classpath 'com.android.tools.build:gradle:3.2.1'
@@ -11,8 +11,8 @@ buildscript {
 
 allprojects {
     repositories {
-        jcenter()
         google()
+        jcenter()
     }
 
     tasks.withType(JavaCompile) {
@@ -30,12 +30,12 @@ ext {
 
     supportLibVersion = '28.0.0'
     playServicesVersion = '15.0.1'
-    workVersion = '1.0.0-alpha10'
+    workVersion = '1.0.0-alpha11'
     stethoVersion = '1.5.0'
     junitVersion = '4.12'
     assertjVersion = '3.6.2'
     mockitoVersion = '2.7.22'
-    robolectricVersion = '3.6.1'
+    robolectricVersion = '3.8'
 }
 
 task wrapper(type: Wrapper) {
diff --git a/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java b/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
index 75a65df..f01b2d1 100644
--- a/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
+++ b/library/src/androidTest/java/com/evernote/android/job/PlatformWorkManagerRule.java
@@ -11,9 +11,9 @@
 import java.util.concurrent.TimeUnit;
 
 import androidx.work.Configuration;
+import androidx.work.WorkInfo;
 import androidx.work.WorkManager;
-import androidx.work.WorkStatus;
-import androidx.work.test.WorkManagerTestInitHelper;
+import androidx.work.testing.WorkManagerTestInitHelper;
 
 /**
  * @author rwondratschek
@@ -60,9 +60,9 @@ public void runJob(String tag) {
         WorkManagerTestInitHelper.getTestDriver().setInitialDelayMet(getWorkStatus(tag).get(0).getId());
     }
 
-    public List<WorkStatus> getWorkStatus(String tag) {
+    public List<WorkInfo> getWorkStatus(String tag) {
         try {
-            return WorkManager.getInstance().getStatusesByTag(tag).get();
+            return WorkManager.getInstance().getWorkInfosByTag(tag).get();
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
diff --git a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
index 7e3e1f3..cd8a984 100644
--- a/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
+++ b/library/src/androidTest/java/com/evernote/android/job/work/PlatformWorkManagerTest.java
@@ -20,8 +20,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import androidx.work.State;
-import androidx.work.WorkStatus;
+import androidx.work.WorkInfo;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -64,13 +63,13 @@ public void testCancel() {
         assertThat(jobProxyWorkManager.isPlatformJobScheduled(request)).isTrue();
 
         String tag = JobProxyWorkManager.createTag(jobId);
-        List<WorkStatus> statuses = mWorkManagerRule.getWorkStatus(tag);
+        List<WorkInfo> statuses = mWorkManagerRule.getWorkStatus(tag);
 
         assertThat(statuses).isNotNull().hasSize(1);
-        assertThat(statuses.get(0).getState()).isEqualTo(State.ENQUEUED);
+        assertThat(statuses.get(0).getState()).isEqualTo(WorkInfo.State.ENQUEUED);
 
         mWorkManagerRule.getManager().cancel(jobId);
-        assertThat(mWorkManagerRule.getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
+        assertThat(mWorkManagerRule.getWorkStatus(tag).get(0).getState()).isEqualTo(WorkInfo.State.CANCELLED);
         assertThat(jobProxyWorkManager.isPlatformJobScheduled(request)).isFalse();
     }
 
@@ -130,10 +129,10 @@ public Job create(@NonNull String tag) {
         String tag = JobProxyWorkManager.createTag(jobId);
         mWorkManagerRule.runJob(tag);
 
-        State state = mWorkManagerRule.getWorkStatus(tag).get(0).getState();
+        WorkInfo.State state = mWorkManagerRule.getWorkStatus(tag).get(0).getState();
 
         assertThat(executed.get()).isTrue();
-        assertThat(state).isEqualTo(State.SUCCEEDED);
+        assertThat(state).isEqualTo(WorkInfo.State.SUCCEEDED);
     }
 
     @SuppressWarnings("ConstantConditions")
@@ -148,12 +147,12 @@ private void testConstraints(JobRequest.Builder builder) {
                 .schedule();
 
         String tag = JobProxyWorkManager.createTag(jobId);
-        List<WorkStatus> statuses = mWorkManagerRule.getWorkStatus(tag);
+        List<WorkInfo> statuses = mWorkManagerRule.getWorkStatus(tag);
 
         assertThat(statuses).isNotNull().hasSize(1);
-        assertThat(statuses.get(0).getState()).isEqualTo(State.ENQUEUED);
+        assertThat(statuses.get(0).getState()).isEqualTo(WorkInfo.State.ENQUEUED);
 
         mWorkManagerRule.getManager().cancelAllForTag(TAG);
-        assertThat(mWorkManagerRule.getWorkStatus(tag).get(0).getState()).isEqualTo(State.CANCELLED);
+        assertThat(mWorkManagerRule.getWorkStatus(tag).get(0).getState()).isEqualTo(WorkInfo.State.CANCELLED);
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/work/JobProxyWorkManager.java b/library/src/main/java/com/evernote/android/job/work/JobProxyWorkManager.java
index 77938d6..4b1520b 100644
--- a/library/src/main/java/com/evernote/android/job/work/JobProxyWorkManager.java
+++ b/library/src/main/java/com/evernote/android/job/work/JobProxyWorkManager.java
@@ -5,6 +5,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.RestrictTo;
 
+import androidx.work.WorkInfo;
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobProxyIllegalStateException;
 import com.evernote.android.job.JobRequest;
@@ -20,9 +21,7 @@
 import androidx.work.NetworkType;
 import androidx.work.OneTimeWorkRequest;
 import androidx.work.PeriodicWorkRequest;
-import androidx.work.State;
 import androidx.work.WorkManager;
-import androidx.work.WorkStatus;
 
 /**
  * @author rwondratschek
@@ -98,13 +97,13 @@ public void cancel(int jobId) {
 
     @Override
     public boolean isPlatformJobScheduled(JobRequest request) {
-        List<WorkStatus> statuses = getWorkStatusBlocking(createTag(request.getJobId()));
-        if (statuses == null || statuses.isEmpty()) {
+        List<WorkInfo> infos = getWorkStatusBlocking(createTag(request.getJobId()));
+        if (infos == null || infos.isEmpty()) {
             return false;
         }
 
-        State state = statuses.get(0).getState();
-        return state == State.ENQUEUED;
+        WorkInfo.State state = infos.get(0).getState();
+        return state == WorkInfo.State.ENQUEUED;
     }
 
     /*package*/ static String createTag(int jobId) {
@@ -157,14 +156,14 @@ private WorkManager getWorkManager() {
         WorkManager workManager;
         try {
             workManager = WorkManager.getInstance();
-        } catch (Exception e) {
+        } catch (Throwable t) {
             workManager = null;
         }
         if (workManager == null) {
-            WorkManager.initialize(mContext, new Configuration.Builder().build());
             try {
+                WorkManager.initialize(mContext, new Configuration.Builder().build());
                 workManager = WorkManager.getInstance();
-            } catch (Exception ignored) {
+            } catch (Throwable ignored) {
             }
             CAT.w("WorkManager getInstance() returned null, now: %s", workManager);
         }
@@ -172,14 +171,14 @@ private WorkManager getWorkManager() {
         return workManager;
     }
 
-    private List<WorkStatus> getWorkStatusBlocking(String tag) {
+    private List<WorkInfo> getWorkStatusBlocking(String tag) {
         WorkManager workManager = getWorkManager();
         if (workManager == null) {
             return Collections.emptyList();
         }
 
         try {
-            return workManager.getStatusesByTag(tag).get(5, TimeUnit.SECONDS);
+            return workManager.getWorkInfosByTag(tag).get(5, TimeUnit.SECONDS);
         } catch (Exception e) {
             return Collections.emptyList();
         }
diff --git a/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java b/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
index 41d09a8..86471b5 100644
--- a/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
+++ b/library/src/main/java/com/evernote/android/job/work/PlatformWorker.java
@@ -63,7 +63,7 @@ public Result doWork() {
     }
 
     @Override
-    public void onStopped(boolean cancelled) {
+    public void onStopped() {
         int jobId = getJobId();
         Job job = JobManager.create(getApplicationContext()).getJob(jobId);
 
