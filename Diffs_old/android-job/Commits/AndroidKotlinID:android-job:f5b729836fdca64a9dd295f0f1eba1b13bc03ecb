diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9760b6c..57709ff 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,7 @@
 ## 1.2.6
 * Make the license in Java files clearer, see #422
 * Use own internal monitor for synchronizing access to variables in order to avoid deadlocks when using the library, see #414
+* Cleanup jobs in the database if no job creator returns an instance during execution, see #413
 
 ## 1.2.5 (2018-03-19)
 * Handle platform bug where querying the network state throws an NPE internally, see #380
diff --git a/library/src/main/java/com/evernote/android/job/JobProxy.java b/library/src/main/java/com/evernote/android/job/JobProxy.java
index 142b456..37c837a 100644
--- a/library/src/main/java/com/evernote/android/job/JobProxy.java
+++ b/library/src/main/java/com/evernote/android/job/JobProxy.java
@@ -257,10 +257,13 @@ public void markStarting(@NonNull JobRequest request) {
                 return Job.Result.FAILURE;
 
             } finally {
-                if (!request.isPeriodic()) {
+                if (job == null) {
+                    mJobManager.getJobStorage().remove(request);
+
+                } else if (!request.isPeriodic()) {
                     mJobManager.getJobStorage().remove(request);
 
-                } else if (request.isFlexSupport() && (job == null || !job.isDeleted())) {
+                } else if (request.isFlexSupport() && !job.isDeleted()) {
                     mJobManager.getJobStorage().remove(request); // remove, we store the new job in JobManager.schedule()
                     request.reschedule(false, false);
                 }
diff --git a/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java b/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java
index fc97b04..641e3a3 100644
--- a/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java
+++ b/library/src/test/java/com/evernote/android/job/BaseJobManagerTest.java
@@ -73,7 +73,7 @@ protected void executeJob(int jobId, @NonNull Job.Result expected) {
         try {
             executeJobAsync(jobId, expected).get(3, TimeUnit.SECONDS);
         } catch (Exception e) {
-            throw new AssertionError("Job timeout");
+            throw new AssertionError(e.getMessage(), e);
         }
     }
 
diff --git a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
index 2fdc3ad..7b7b9d7 100644
--- a/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobExecutionTest.java
@@ -1,5 +1,6 @@
 package com.evernote.android.job;
 
+import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 
@@ -11,6 +12,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.MethodSorters;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -287,4 +289,68 @@ public void verifyReschedulingTransientJobsWorks() {
             previousJobId = request.getJobId();
         }
     }
+
+    @Test
+    public void verifyNotFoundJobCanceledOneOff() {
+        final String tag = "something";
+        final int jobId = new JobRequest.Builder(tag)
+                .setExecutionWindow(TimeUnit.HOURS.toMillis(4), TimeUnit.HOURS.toMillis(5))
+                .build()
+                .schedule();
+
+        assertThat(manager().getAllJobRequestsForTag(tag)).hasSize(1);
+        executeJob(jobId, Job.Result.FAILURE);
+        assertThat(manager().getAllJobRequestsForTag(tag)).isEmpty();
+    }
+
+    @Test
+    public void verifyNotFoundJobCanceledExact() {
+        final String tag = "something";
+        final int jobId = new JobRequest.Builder(tag)
+                .setExact(TimeUnit.HOURS.toMillis(4))
+                .build()
+                .schedule();
+
+        assertThat(manager().getAllJobRequestsForTag(tag)).hasSize(1);
+        executeJob(jobId, Job.Result.FAILURE);
+        assertThat(manager().getAllJobRequestsForTag(tag)).isEmpty();
+    }
+
+
+    @Test
+    public void verifyNotFoundJobCanceledDailyJob() {
+        final String tag = "something";
+        int jobId = DailyJob.schedule(new JobRequest.Builder(tag), TimeUnit.HOURS.toMillis(5), TimeUnit.HOURS.toMillis(6));
+
+        assertThat(manager().getAllJobRequestsForTag(tag)).hasSize(1);
+        executeJob(jobId, Job.Result.FAILURE);
+        assertThat(manager().getAllJobRequestsForTag(tag)).isEmpty();
+    }
+
+    @Test
+    public void verifyNotFoundJobCanceledPeriodic() {
+        final String tag = "something";
+        final int jobId = new JobRequest.Builder(tag)
+                .setPeriodic(TimeUnit.HOURS.toMillis(4))
+                .build()
+                .schedule();
+
+        assertThat(manager().getAllJobRequestsForTag(tag)).hasSize(1);
+        executeJob(jobId, Job.Result.FAILURE);
+        assertThat(manager().getAllJobRequestsForTag(tag)).isEmpty();
+    }
+
+    @Test
+    @Config(sdk = Build.VERSION_CODES.M)
+    public void verifyNotFoundJobCanceledPeriodicFlexSupport() {
+        final String tag = "something";
+        final int jobId = new JobRequest.Builder(tag)
+                .setPeriodic(TimeUnit.HOURS.toMillis(4))
+                .build()
+                .schedule();
+
+        assertThat(manager().getAllJobRequestsForTag(tag)).hasSize(1);
+        executeJob(jobId, Job.Result.FAILURE);
+        assertThat(manager().getAllJobRequestsForTag(tag)).isEmpty();
+    }
 }
