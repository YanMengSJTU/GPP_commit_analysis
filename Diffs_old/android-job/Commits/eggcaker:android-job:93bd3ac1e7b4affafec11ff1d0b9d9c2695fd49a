diff --git a/CHANGELOG.md b/CHANGELOG.md
index 624d5e0..2355f87 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,7 @@
 ## 1.2.2
 * Use only the `support-compat` instead of the full `support-v4` library, see #326
 * Use a `ReadWriteLock` for synchronizing the database reads and writes, see #344
+* Update the last run time for daily jobs, see #332
 
 ## 1.2.1 (2017-11-23)
 * Add option to override the default background executor, see #292
diff --git a/library/src/main/java/com/evernote/android/job/DailyJob.java b/library/src/main/java/com/evernote/android/job/DailyJob.java
index 97ede96..1a63fa9 100644
--- a/library/src/main/java/com/evernote/android/job/DailyJob.java
+++ b/library/src/main/java/com/evernote/android/job/DailyJob.java
@@ -176,9 +176,14 @@ protected final Result onRunJob(@NonNull Params params) {
                     CAT.i("Rescheduling daily job %s", request);
 
                     // don't update current, it would cancel this currently running job
-                    schedule(request.createBuilder(), false,
+                    int newJobId = schedule(request.createBuilder(), false,
                             extras.getLong(EXTRA_START_MS, 0) % DAY, extras.getLong(EXTRA_END_MS, 0L) % DAY);
 
+                    request = JobManager.instance().getJobRequest(newJobId);
+                    if (request != null) {
+                        request.updateStats(false, true);
+                    }
+
                 } else {
                     CAT.i("Cancel daily job %s", request);
                 }
diff --git a/library/src/main/java/com/evernote/android/job/Job.java b/library/src/main/java/com/evernote/android/job/Job.java
index 74c6f01..b1fecdc 100644
--- a/library/src/main/java/com/evernote/android/job/Job.java
+++ b/library/src/main/java/com/evernote/android/job/Job.java
@@ -511,7 +511,7 @@ public int getFailureCount() {
         }
 
         /**
-         * Returns the time the job did run the last time. This is only useful for periodic jobs
+         * Returns the time the job did run the last time. This is only useful for periodic jobs, daily jobs
          * or jobs which were rescheduled. If the job didn't run, yet, then it returns 0.
          *
          * @return The last time the rescheduled or periodic job did run.
diff --git a/library/src/main/java/com/evernote/android/job/JobRequest.java b/library/src/main/java/com/evernote/android/job/JobRequest.java
index 36d743c..42d58fd 100644
--- a/library/src/main/java/com/evernote/android/job/JobRequest.java
+++ b/library/src/main/java/com/evernote/android/job/JobRequest.java
@@ -357,7 +357,7 @@ public int getFailureCount() {
     }
 
     /**
-     * Returns the time the job did run the last time. This is only useful for periodic jobs
+     * Returns the time the job did run the last time. This is only useful for periodic jobs, daily jobs
      * or jobs which were rescheduled. If the job didn't run, yet, then it returns 0.
      *
      * @return The last time the rescheduled or periodic job did run.
diff --git a/library/src/test/java/com/evernote/android/job/DailyJobTest.java b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
index 1fd8071..dc3f3cf 100644
--- a/library/src/test/java/com/evernote/android/job/DailyJobTest.java
+++ b/library/src/test/java/com/evernote/android/job/DailyJobTest.java
@@ -146,7 +146,7 @@ public void verifyScheduleAndExecutionOverMidnight() {
         verifyExecutionAndSuccessfulReschedule(clock, TimeUnit.HOURS.toMillis(23),  TimeUnit.HOURS.toMillis(6));
     }
 
-    private void verifyExecutionAndSuccessfulReschedule(Clock clock, long start, long end) {
+    private JobRequest verifyExecutionAndSuccessfulReschedule(Clock clock, long start, long end) {
         JobConfig.setClock(clock);
 
         int jobId = DailyJob.schedule(DummyJobs.createBuilder(DummyJobs.SuccessDailyJob.class), start, end);
@@ -155,7 +155,10 @@ private void verifyExecutionAndSuccessfulReschedule(Clock clock, long start, lon
         executeJob(jobId, Job.Result.SUCCESS);
 
         assertThat(manager().getAllJobRequests()).hasSize(1);
-        assertThat(manager().getJobRequest(jobId + 1)).isNotNull();
+
+        JobRequest newRequest = manager().getJobRequest(jobId + 1);
+        assertThat(newRequest).isNotNull();
+        return newRequest;
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -259,6 +262,15 @@ public void verifyImmediateExecution() {
         assertThat(manager().getJobRequest(normalJobId)).isNotNull();
     }
 
+    @Test
+    public void verifyLastRunIsSet() {
+        TestClock clock = new TestClock();
+        clock.setTime(13, 0);
+
+        JobRequest request = verifyExecutionAndSuccessfulReschedule(clock, 0, 1);
+        assertThat(request.getLastRun()).isEqualTo(clock.currentTimeMillis());
+    }
+
     @Test
     public void verifyRequirementsEnforcedSkipsJob() {
         long time = 1L;
