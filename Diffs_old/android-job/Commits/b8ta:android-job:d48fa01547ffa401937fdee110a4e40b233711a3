diff --git a/build.gradle b/build.gradle
index 7269160..a801155 100644
--- a/build.gradle
+++ b/build.gradle
@@ -11,8 +11,8 @@ buildscript {
 
 allprojects {
     repositories {
-        jcenter()
         google()
+        jcenter()
     }
 
     tasks.withType(JavaCompile) {
@@ -22,13 +22,13 @@ allprojects {
 }
 
 ext {
-    compileSdkVersion = 26
+    compileSdkVersion = 23
     targetSdkVersion = compileSdkVersion
-    minSdkVersion = 14
+    minSdkVersion = 23
 
     buildToolsVersion = '27.0.3'
 
-    supportLibVersion = '26.1.0'
+    supportLibVersion = '23.0.0'
     playServicesVersion = '15.0.1'
     stethoVersion = '1.5.0'
     junitVersion = '4.12'
diff --git a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
index d6fee00..08a3a21 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/DemoSyncJob.java
@@ -1,12 +1,9 @@
 package com.evernote.android.job.demo;
 
 import android.app.Notification;
-import android.app.NotificationChannel;
-import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Intent;
 import android.graphics.Color;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
@@ -29,17 +26,10 @@ protected Result onRunJob(@NonNull final Params params) {
 
         PendingIntent pendingIntent = PendingIntent.getActivity(getContext(), 0, new Intent(getContext(), MainActivity.class), 0);
 
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            NotificationChannel channel = new NotificationChannel(TAG, "Job Demo", NotificationManager.IMPORTANCE_LOW);
-            channel.setDescription("Job demo job");
-            getContext().getSystemService(NotificationManager.class).createNotificationChannel(channel);
-        }
-
-        Notification notification = new NotificationCompat.Builder(getContext(), TAG)
+        Notification notification = new NotificationCompat.Builder(getContext())
                 .setContentTitle("ID " + params.getId())
                 .setContentText("Job ran, exact " + params.isExact() + " , periodic " + params.isPeriodic() + ", transient " + params.isTransient())
                 .setAutoCancel(true)
-                .setChannelId(TAG)
                 .setSound(null)
                 .setContentIntent(pendingIntent)
                 .setSmallIcon(R.drawable.ic_notification)
diff --git a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
index 09639ea..c7af077 100644
--- a/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
+++ b/demo/src/main/java/com/evernote/android/job/demo/MainActivity.java
@@ -44,10 +44,10 @@ protected void onCreate(Bundle savedInstanceState) {
             mLastJobId = savedInstanceState.getInt(LAST_JOB_ID, 0);
         }
 
-        CompoundButton enableGcm = findViewById(R.id.enable_gcm);
-        mRequiresCharging = findViewById(R.id.check_requires_charging);
-        mRequiresDeviceIdle = findViewById(R.id.check_requires_device_idle);
-        mNetworkTypeSpinner = findViewById(R.id.spinner_network_type);
+        CompoundButton enableGcm = (CompoundButton)findViewById(R.id.enable_gcm);
+        mRequiresCharging = (CompoundButton)findViewById(R.id.check_requires_charging);
+        mRequiresDeviceIdle = (CompoundButton)findViewById(R.id.check_requires_device_idle);
+        mNetworkTypeSpinner = (Spinner)findViewById(R.id.spinner_network_type);
 
         ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, getNetworkTypesAsString());
         adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
@@ -79,16 +79,6 @@ public boolean onCreateOptionsMenu(Menu menu) {
     public boolean onPrepareOptionsMenu(Menu menu) {
         super.onPrepareOptionsMenu(menu);
 
-        if (JobApi.V_26.isSupported(this)) {
-            menu.findItem(R.id.action_force_26).setChecked(false);
-        } else {
-            menu.findItem(R.id.action_force_26).setVisible(false);
-        }
-        if (JobApi.V_24.isSupported(this)) {
-            menu.findItem(R.id.action_force_24).setChecked(false);
-        } else {
-            menu.findItem(R.id.action_force_24).setVisible(false);
-        }
         if (JobApi.V_21.isSupported(this)) {
             menu.findItem(R.id.action_force_21).setChecked(false);
         } else {
@@ -111,12 +101,6 @@ public boolean onPrepareOptionsMenu(Menu menu) {
         }
 
         switch (JobApi.getDefault(this)) {
-            case V_26:
-                menu.findItem(R.id.action_force_26).setChecked(true);
-                break;
-            case V_24:
-                menu.findItem(R.id.action_force_24).setChecked(true);
-                break;
             case V_21:
                 menu.findItem(R.id.action_force_21).setChecked(true);
                 break;
@@ -139,12 +123,6 @@ public boolean onPrepareOptionsMenu(Menu menu) {
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
-            case R.id.action_force_26:
-                JobConfig.forceApi(JobApi.V_26);
-                return true;
-            case R.id.action_force_24:
-                JobConfig.forceApi(JobApi.V_24);
-                return true;
             case R.id.action_force_21:
                 JobConfig.forceApi(JobApi.V_21);
                 return true;
diff --git a/demo/src/main/res/menu/activity_main.xml b/demo/src/main/res/menu/activity_main.xml
index 9dd9b3c..69d65ef 100644
--- a/demo/src/main/res/menu/activity_main.xml
+++ b/demo/src/main/res/menu/activity_main.xml
@@ -5,14 +5,6 @@
       tools:ignore="HardcodedText">
 
     <group android:checkableBehavior="single">
-        <item
-            android:id="@+id/action_force_26"
-            android:title="v26"
-            app:showAsAction="never"/>
-        <item
-            android:id="@+id/action_force_24"
-            android:title="v24"
-            app:showAsAction="never"/>
         <item
             android:id="@+id/action_force_21"
             android:title="v21"
diff --git a/library/build.gradle b/library/build.gradle
index cc0f68b..ebff662 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -7,9 +7,6 @@ archivesBaseName = 'android-job'
 dependencies {
     compileOnly "com.google.android.gms:play-services-gcm:$playServicesVersion"
 
-    //noinspection GradleCompatible,GradleDependency
-    api "com.android.support:support-compat:$supportLibVersion"
-
     androidTestImplementation 'com.android.support.test:runner:1.0.1'
     androidTestImplementation 'com.android.support.test:rules:1.0.1'
     androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
@@ -17,7 +14,6 @@ dependencies {
     androidTestImplementation "com.google.android.gms:play-services-gcm:$playServicesVersion"
 
     androidTestImplementation "com.facebook.stetho:stetho:$stethoVersion"
-    androidTestImplementation "com.android.support:support-v4:$supportLibVersion"
 
     testImplementation "junit:junit:$junitVersion"
     testImplementation "org.mockito:mockito-core:$mockitoVersion"
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
index e9c2249..a0a009f 100644
--- a/library/src/main/AndroidManifest.xml
+++ b/library/src/main/AndroidManifest.xml
@@ -56,8 +56,7 @@
 
         <service
             android:name="com.evernote.android.job.JobRescheduleService"
-            android:exported="false"
-            android:permission="android.permission.BIND_JOB_SERVICE"/>
+            android:exported="false"/>
     </application>
 
 </manifest>
diff --git a/library/src/main/java/com/evernote/android/job/JobApi.java b/library/src/main/java/com/evernote/android/job/JobApi.java
index 9f45b6a..0afd10a 100644
--- a/library/src/main/java/com/evernote/android/job/JobApi.java
+++ b/library/src/main/java/com/evernote/android/job/JobApi.java
@@ -33,8 +33,6 @@
 import com.evernote.android.job.v19.JobProxy19;
 import com.evernote.android.job.v21.JobProxy21;
 import com.evernote.android.job.v21.PlatformJobService;
-import com.evernote.android.job.v24.JobProxy24;
-import com.evernote.android.job.v26.JobProxy26;
 import com.google.android.gms.gcm.GcmNetworkManager;
 
 import java.util.List;
@@ -45,14 +43,6 @@
  * @author rwondratschek
  */
 public enum JobApi {
-    /**
-     * Uses the {@link JobScheduler} for scheduling jobs.
-     */
-    V_26(true, false, true),
-    /**
-     * Uses the {@link JobScheduler} for scheduling jobs.
-     */
-    V_24(true, false, false),
     /**
      * Uses the {@link JobScheduler} for scheduling jobs.
      */
@@ -98,10 +88,6 @@
 
     public boolean isSupported(Context context) {
         switch (this) {
-            case V_26:
-                return Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && isServiceEnabled(context, PlatformJobService.class);
-            case V_24:
-                return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && isServiceEnabledAndHasPermission(context, PlatformJobService.class, JOB_SCHEDULER_PERMISSION);
             case V_21:
                 return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && isServiceEnabledAndHasPermission(context, PlatformJobService.class, JOB_SCHEDULER_PERMISSION);
             case V_19:
@@ -121,10 +107,6 @@ public boolean isSupported(Context context) {
     @NonNull
     private JobProxy createProxy(Context context) {
         switch (this) {
-            case V_26:
-                return new JobProxy26(context);
-            case V_24:
-                return new JobProxy24(context);
             case V_21:
                 return new JobProxy21(context);
             case V_19:
@@ -194,11 +176,7 @@ private boolean isBroadcastEnabled(@NonNull Context context, @NonNull Class<? ex
 
     @NonNull
     public static JobApi getDefault(Context context) {
-        if (V_26.isSupported(context) && JobConfig.isApiEnabled(V_26)) {
-            return V_26;
-        } else if (V_24.isSupported(context) && JobConfig.isApiEnabled(V_24)) {
-            return V_24;
-        } else if (V_21.isSupported(context) && JobConfig.isApiEnabled(V_21)) {
+        if (V_21.isSupported(context) && JobConfig.isApiEnabled(V_21)) {
             return V_21;
         } else if (GCM.isSupported(context) && JobConfig.isApiEnabled(GCM)) {
             return GCM;
diff --git a/library/src/main/java/com/evernote/android/job/JobConfig.java b/library/src/main/java/com/evernote/android/job/JobConfig.java
index 4ae46ed..e450df6 100644
--- a/library/src/main/java/com/evernote/android/job/JobConfig.java
+++ b/library/src/main/java/com/evernote/android/job/JobConfig.java
@@ -15,7 +15,6 @@
  */
 package com.evernote.android.job;
 
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.VisibleForTesting;
 
@@ -133,7 +132,7 @@ public static void forceApi(@NonNull JobApi api) {
      * are allowed. The default value is {@code false}.
      */
     public static boolean isAllowSmallerIntervalsForMarshmallow() {
-        return allowSmallerIntervals && Build.VERSION.SDK_INT < Build.VERSION_CODES.N;
+        return allowSmallerIntervals;
     }
 
     /**
@@ -144,9 +143,6 @@ public static boolean isAllowSmallerIntervalsForMarshmallow() {
      *                              for periodic jobs are allowed. The default value is {@code false}.
      */
     public static void setAllowSmallerIntervalsForMarshmallow(boolean allowSmallerIntervals) {
-        if (allowSmallerIntervals && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-            throw new IllegalStateException("This method is only allowed to call on Android M or earlier");
-        }
         JobConfig.allowSmallerIntervals = allowSmallerIntervals;
     }
 
diff --git a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
index 1a6b500..d739b3a 100644
--- a/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
+++ b/library/src/main/java/com/evernote/android/job/JobRescheduleService.java
@@ -15,12 +15,12 @@
  */
 package com.evernote.android.job;
 
+import android.app.IntentService;
 import android.content.Context;
 import android.content.Intent;
 import android.os.SystemClock;
-import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
-import android.support.v4.app.JobIntentService;
 
 import com.evernote.android.job.util.JobCat;
 
@@ -35,13 +35,17 @@
  *
  * @author rwondratschek
  */
-public final class JobRescheduleService extends JobIntentService {
+public final class JobRescheduleService extends IntentService {
 
     private static final JobCat CAT = new JobCat("JobRescheduleService", BuildConfig.DEBUG);
 
+    public JobRescheduleService() {
+        super("JobRescheduleService");
+    }
+
     /*package*/ static void startService(Context context) {
         try {
-            enqueueWork(context, JobRescheduleService.class, JobIdsInternal.JOB_ID_JOB_RESCHEDULE_SERVICE, new Intent());
+            context.startService(new Intent(context, JobRescheduleService.class));
             latch = new CountDownLatch(1);
         } catch (Exception e) {
             /*
@@ -62,7 +66,7 @@
     /*package*/ static CountDownLatch latch;
 
     @Override
-    protected void onHandleWork(@NonNull Intent intent) {
+    protected void onHandleIntent(@Nullable Intent intent) {
         /*
          * Delay this slightly. This avoids a race condition if the app was launched by the
          * AlarmManager. Then the alarm was already removed, but the JobRequest might still
diff --git a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
index 4d26f12..10dd9bd 100644
--- a/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
+++ b/library/src/main/java/com/evernote/android/job/v14/PlatformAlarmService.java
@@ -15,15 +15,14 @@
  */
 package com.evernote.android.job.v14;
 
+import android.app.IntentService;
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.app.JobIntentService;
 
-import com.evernote.android.job.JobIdsInternal;
 import com.evernote.android.job.JobProxy;
 import com.evernote.android.job.JobRequest;
 import com.evernote.android.job.util.JobCat;
@@ -31,22 +30,26 @@
 /**
  * @author rwondratschek
  */
-public final class PlatformAlarmService extends JobIntentService {
+public final class PlatformAlarmService extends IntentService {
 
     private static final JobCat CAT = new JobCat("PlatformAlarmService");
 
+    public PlatformAlarmService() {
+        super("PlatformAlarmService");
+    }
+
     public static void start(Context context, int jobId, @Nullable Bundle transientExtras) {
-        Intent intent = new Intent();
+        Intent intent = new Intent(context, PlatformAlarmService.class);
         intent.putExtra(PlatformAlarmReceiver.EXTRA_JOB_ID, jobId);
         if (transientExtras != null) {
             intent.putExtra(PlatformAlarmReceiver.EXTRA_TRANSIENT_EXTRAS, transientExtras);
         }
 
-        enqueueWork(context, PlatformAlarmService.class, JobIdsInternal.JOB_ID_PLATFORM_ALARM_SERVICE, intent);
+        context.startService(intent);
     }
 
     @Override
-    protected void onHandleWork(@NonNull Intent intent) {
+    protected void onHandleIntent(@Nullable Intent intent) {
         runJob(intent, this, CAT);
     }
 
diff --git a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
index 1f94cf6..0083d10 100644
--- a/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
+++ b/library/src/main/java/com/evernote/android/job/v21/PlatformJobService.java
@@ -57,13 +57,9 @@ public void run() {
 
                     if (request.isTransient()) {
                         if (TransientBundleCompat.startWithTransientBundle(PlatformJobService.this, request)) {
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-                                // should only happen during testing if an API is disabled
-                                CAT.d("PendingIntent for transient bundle is not null although running on O, using compat mode, request %s", request);
-                            }
                             return;
 
-                        } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
+                        } else {
                             CAT.d("PendingIntent for transient job %s expired", request);
                             return;
                         }
@@ -98,12 +94,7 @@ public boolean onStopJob(JobParameters params) {
         return false;
     }
 
-    @TargetApi(Build.VERSION_CODES.O)
     private Bundle getTransientBundle(JobParameters params) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            return params.getTransientExtras();
-        } else {
-            return Bundle.EMPTY;
-        }
+        return Bundle.EMPTY;
     }
 }
diff --git a/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java b/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java
deleted file mode 100644
index 1cf3ee7..0000000
--- a/library/src/main/java/com/evernote/android/job/v24/JobProxy24.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2018 Evernote Corporation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.evernote.android.job.v24;
-
-import android.annotation.TargetApi;
-import android.app.job.JobInfo;
-import android.content.Context;
-import android.os.Build;
-import android.support.annotation.NonNull;
-
-import com.evernote.android.job.JobRequest;
-import com.evernote.android.job.v21.JobProxy21;
-
-
-/**
- * @author rwondratschek
- */
-@TargetApi(Build.VERSION_CODES.N)
-public class JobProxy24 extends JobProxy21 {
-
-    private static final String TAG = "JobProxy24";
-
-    public JobProxy24(Context context) {
-        this(context, TAG);
-    }
-
-    public JobProxy24(Context context, String tag) {
-        super(context, tag);
-    }
-
-    @Override
-    public void plantPeriodicFlexSupport(JobRequest request) {
-        mCat.w("plantPeriodicFlexSupport called although flex is supported");
-        super.plantPeriodicFlexSupport(request);
-    }
-
-    @Override
-    public boolean isPlatformJobScheduled(JobRequest request) {
-        try {
-            return isJobInfoScheduled(getJobScheduler().getPendingJob(request.getJobId()), request);
-        } catch (Exception e) {
-            mCat.e(e);
-            return false;
-        }
-    }
-
-    @Override
-    protected JobInfo.Builder createBuilderPeriodic(JobInfo.Builder builder, long intervalMs, long flexMs) {
-        return builder.setPeriodic(intervalMs, flexMs);
-    }
-
-    @Override
-    protected int convertNetworkType(@NonNull JobRequest.NetworkType networkType) {
-        switch (networkType) {
-            case NOT_ROAMING:
-                return JobInfo.NETWORK_TYPE_NOT_ROAMING;
-            default:
-                return super.convertNetworkType(networkType);
-        }
-    }
-}
diff --git a/library/src/main/java/com/evernote/android/job/v26/JobProxy26.java b/library/src/main/java/com/evernote/android/job/v26/JobProxy26.java
deleted file mode 100644
index 0b80892..0000000
--- a/library/src/main/java/com/evernote/android/job/v26/JobProxy26.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Copyright (C) 2018 Evernote Corporation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.evernote.android.job.v26;
-
-import android.annotation.TargetApi;
-import android.app.job.JobInfo;
-import android.content.Context;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.evernote.android.job.JobRequest;
-import com.evernote.android.job.v24.JobProxy24;
-
-
-/**
- * @author rwondratschek
- */
-@SuppressWarnings("unused")
-@TargetApi(Build.VERSION_CODES.O)
-public class JobProxy26 extends JobProxy24 {
-
-    private static final String TAG = "JobProxy26";
-
-    public JobProxy26(Context context) {
-        super(context, TAG);
-    }
-
-    public JobProxy26(Context context, String tag) {
-        super(context, tag);
-    }
-
-    @Override
-    protected JobInfo.Builder setTransientBundle(JobRequest request, JobInfo.Builder builder) {
-        return builder.setTransientExtras(request.getTransientExtras());
-    }
-
-    @Override
-    protected boolean isJobInfoScheduled(@Nullable JobInfo info, @NonNull JobRequest request) {
-        return info != null && info.getId() == request.getJobId();
-    }
-
-    @Override
-    protected JobInfo.Builder createBaseBuilder(JobRequest request, boolean allowPersisting) {
-        return super.createBaseBuilder(request, allowPersisting)
-                .setRequiresBatteryNotLow(request.requiresBatteryNotLow())
-                .setRequiresStorageNotLow(request.requiresStorageNotLow());
-    }
-
-    @Override
-    protected int convertNetworkType(@NonNull JobRequest.NetworkType networkType) {
-        switch (networkType) {
-            case METERED:
-                return JobInfo.NETWORK_TYPE_METERED;
-            default:
-                return super.convertNetworkType(networkType);
-        }
-
-    }
-}
diff --git a/library/src/test/java/android/support/v4/app/JobIntentServiceReset.java b/library/src/test/java/android/support/v4/app/JobIntentServiceReset.java
deleted file mode 100644
index f3e20e4..0000000
--- a/library/src/test/java/android/support/v4/app/JobIntentServiceReset.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package android.support.v4.app;
-
-/**
- * @author rwondratschek
- */
-public final class JobIntentServiceReset {
-    private JobIntentServiceReset() {
-        throw new IllegalArgumentException();
-    }
-
-    public static void reset() {
-        JobIntentService.sClassWorkEnqueuer.clear();
-    }
-}
