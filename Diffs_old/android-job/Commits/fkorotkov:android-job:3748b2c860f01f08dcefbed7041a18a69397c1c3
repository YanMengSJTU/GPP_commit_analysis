diff --git a/CHANGELOG.md b/CHANGELOG.md
index df80309..35140ec 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,7 @@
 ## 1.2.3
 * Add an `onCancel()` method to get notified when the job is canceled, see #359
 * Expose the `meetsRequirements()` method to have the option to check all requirements manually, see #349
+* Don't close the database automatically after each interaction, but give an option in the `JobConfig` class to revert this behavior, see #344
 
 ## 1.2.2 (2018-01-13)
 * Use only the `support-compat` instead of the full `support-v4` library, see #326
diff --git a/library/src/main/java/com/evernote/android/job/JobConfig.java b/library/src/main/java/com/evernote/android/job/JobConfig.java
index 93ad09a..11d6f7d 100644
--- a/library/src/main/java/com/evernote/android/job/JobConfig.java
+++ b/library/src/main/java/com/evernote/android/job/JobConfig.java
@@ -90,6 +90,7 @@ public Thread newThread(@NonNull Runnable r) {
 
     private static volatile Clock clock = Clock.DEFAULT;
     private static volatile ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE;
+    private static volatile boolean closeDatabase = false;
 
     static {
         ENABLED_APIS = new EnumMap<>(JobApi.class);
@@ -315,6 +316,23 @@ public static void setExecutorService(@NonNull ExecutorService executorService)
         JobConfig.executorService = JobPreconditions.checkNotNull(executorService);
     }
 
+    /**
+     * @return Whether the internal database is closed after each access. The default value is {@code false}.
+     */
+    public static boolean isCloseDatabase() {
+        return closeDatabase;
+    }
+
+    /**
+     * Controls whether the internal database should be closed after each access to clean up
+     * resources. The default value is {@code false}.
+     *
+     * @param closeDatabase Whether to close the database after each access.
+     */
+    public static void setCloseDatabase(boolean closeDatabase) {
+        JobConfig.closeDatabase = closeDatabase;
+    }
+
     /**
      * Resets all adjustments in the config.
      */
@@ -330,6 +348,7 @@ public static void reset() {
         forceRtc = false;
         clock = Clock.DEFAULT;
         executorService = DEFAULT_EXECUTOR_SERVICE;
+        closeDatabase = false;
         JobCat.setLogcatEnabled(true);
         JobCat.clearLogger();
     }
diff --git a/library/src/main/java/com/evernote/android/job/JobStorage.java b/library/src/main/java/com/evernote/android/job/JobStorage.java
index 224720d..b9773b5 100644
--- a/library/src/main/java/com/evernote/android/job/JobStorage.java
+++ b/library/src/main/java/com/evernote/android/job/JobStorage.java
@@ -613,7 +613,7 @@ private static void closeCursor(@Nullable Cursor cursor) {
 
     private static void closeDatabase(@Nullable SQLiteDatabase database) {
         // SQLiteDatabase doesn't implement Closable on some 4.0.3 devices, see #182
-        if (database != null) {
+        if (database != null && JobConfig.isCloseDatabase()) {
             try {
                 database.close();
             } catch (Exception ignored) {
diff --git a/library/src/test/java/com/evernote/android/job/JobConfigTest.java b/library/src/test/java/com/evernote/android/job/JobConfigTest.java
index 3fb8118..4aef409 100644
--- a/library/src/test/java/com/evernote/android/job/JobConfigTest.java
+++ b/library/src/test/java/com/evernote/android/job/JobConfigTest.java
@@ -1,5 +1,6 @@
 package com.evernote.android.job;
 
+import android.database.sqlite.SQLiteDatabase;
 import android.os.Build;
 
 import com.evernote.android.job.test.DummyJobs;
@@ -12,6 +13,12 @@
 import org.robolectric.annotation.Config;
 
 import static org.assertj.core.api.Java6Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.nullable;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
 
 /**
  * @author rwondratschek
@@ -158,4 +165,24 @@ public void verifyJobIdOffsetBounds() {
         JobConfig.setJobIdOffset(0);
         JobConfig.setJobIdOffset(2147480000 - 500);
     }
+
+    @Test
+    public void verifyCloseDatabase() {
+        assertThat(JobConfig.isCloseDatabase()).isFalse(); // default
+
+        SQLiteDatabase database = mock(SQLiteDatabase.class);
+
+        JobStorage storage = manager().getJobStorage();
+        storage.injectDatabase(database);
+
+        storage.get(1);
+        verify(database, times(1)).query(anyString(), nullable(String[].class), anyString(), any(String[].class), nullable(String.class), nullable(String.class), nullable(String.class));
+        verify(database, times(0)).close();
+
+        JobConfig.setCloseDatabase(true);
+
+        storage.get(1);
+        verify(database, times(2)).query(anyString(), nullable(String[].class), anyString(), any(String[].class), nullable(String.class), nullable(String.class), nullable(String.class));
+        verify(database, times(1)).close();
+    }
 }
