diff --git a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java
index fd7884cd80..35ac109c43 100644
--- a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java
+++ b/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java
@@ -17,7 +17,7 @@
     this.entity = entity;
 
     if (contentTypeHeader != null) {
-      mediaType = MediaType.parse(contentTypeHeader);
+        mediaType = MediaType.valueOf(contentTypeHeader);
     } else if (entity.getContentType() != null) {
       mediaType = MediaType.parse(entity.getContentType().getValue());
     } else {
diff --git a/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java
index ca47c0131a..9dd4b89ce8 100644
--- a/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java
+++ b/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java
@@ -1,21 +1,28 @@
 package com.squareup.okhttp.apache;
 
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+import static com.squareup.okhttp.internal.Util.UTF_8;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
 import java.io.ByteArrayInputStream;
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.zip.GZIPInputStream;
+
 import okio.Buffer;
 import okio.GzipSink;
 import okio.Okio;
+
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.entity.ByteArrayEntity;
+import org.apache.http.entity.ContentType;
+import org.apache.http.entity.FileEntity;
 import org.apache.http.entity.InputStreamEntity;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.util.EntityUtils;
@@ -23,10 +30,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static com.squareup.okhttp.internal.Util.UTF_8;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
+import com.squareup.okhttp.mockwebserver.MockResponse;
+import com.squareup.okhttp.mockwebserver.MockWebServer;
+import com.squareup.okhttp.mockwebserver.RecordedRequest;
 
 public class OkApacheClientTest {
   private MockWebServer server;
@@ -126,6 +132,20 @@
     assertEquals(request.getHeader("Content-Type"), "application/xml");
   }
 
+  @Test public void acceptNonstandardContentTypeInHeader() throws Exception {
+	    server.enqueue(new MockResponse());
+
+	    HttpPost httpPost = new HttpPost();
+	    httpPost.setURI(server.getUrl("/").toURI());
+	    httpPost.addHeader("Content-Type", "jpg");
+	    HttpEntity entity = new ByteArrayEntity(new byte[] {'a', 'b', 0} , ContentType.parse("image/jpeg"));
+		httpPost.setEntity(entity);
+	    client.execute(httpPost);
+
+	    RecordedRequest request = server.takeRequest();
+	    assertEquals("jpg", request.getHeader("Content-Type"));
+	  }
+
   @Test public void contentType() throws Exception {
     server.enqueue(new MockResponse().setBody("<html><body><h1>Hello, World!</h1></body></html>")
         .setHeader("Content-Type", "text/html"));
diff --git a/okhttp/src/main/java/com/squareup/okhttp/MediaType.java b/okhttp/src/main/java/com/squareup/okhttp/MediaType.java
index 4d2f1fcf44..c463a11d77 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/MediaType.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/MediaType.java
@@ -73,6 +73,10 @@ public static MediaType parse(String string) {
     return new MediaType(string, type, subtype, charset);
   }
 
+  public static MediaType valueOf(String contentTypeHeader) {
+	    return new MediaType(contentTypeHeader, contentTypeHeader, "", null);
+	}
+
   /**
    * Returns the high-level media type, such as "text", "image", "audio",
    * "video", or "application".
@@ -120,4 +124,5 @@ public Charset charset(Charset defaultValue) {
   @Override public int hashCode() {
     return mediaType.hashCode();
   }
+
 }
