diff --git a/CHANGELOG.md b/CHANGELOG.md
index 1f480f2c40..c10297c598 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,56 +1,6 @@
 Change Log
 ==========
 
-## Version 3.12.0
-
-_2018-11-16_
-
- *  **OkHttp now supports TLS 1.3.** This requires either Conscrypt or Java 11+.
-
- *  **Proxy authenticators are now asked for preemptive authentication.** OkHttp will now request
-    authentication credentials before creating TLS tunnels through HTTP proxies (HTTP `CONNECT`).
-    Authenticators should identify preemptive authentications by the presence of a challenge whose
-    scheme is "OkHttp-Preemptive".
-
- *  **OkHttp now offers full-operation timeouts.** This sets a limit on how long the entire call may
-    take and covers resolving DNS, connecting, writing the request body, server processing, and
-    reading the full response body. If a call requires redirects or retries all must complete within
-    one timeout period.
-
-    Use `OkHttpClient.Builder.callTimeout()` to specify the default duration and `Call.timeout()` to
-    specify the timeout of an individual call.
-
- *  New: Return values and fields are now non-null unless otherwise annotated.
- *  New: `LoggingEventListener` makes it easy to get basic visibility into a call's performance.
-    This class is in the `logging-interceptor` artifact.
- *  New: `Headers.Builder.addUnsafeNonAscii()` allows non-ASCII values to be added without an
-    immediate exception.
- *  New: Headers can be redacted in `HttpLoggingInterceptor`.
- *  New: `Headers.Builder` now accepts dates.
- *  New: OkHttp now accepts `java.time.Duration` for timeouts on Java 8+ and Android 26+.
- *  New: `Challenge` includes all authentication parameters.
- *  New: Upgrade to BouncyCastle 1.60, Conscrypt 1.4.0, and Okio 1.15.0. We don't yet require
-    Kotlin-friendly Okio 2.x but OkHttp works fine with that series.
-
-    ```kotlin
-    implementation("org.bouncycastle:bcprov-jdk15on:1.60")
-    implementation("org.conscrypt:conscrypt-openjdk-uber:1.4.0")
-    implementation("com.squareup.okio:okio:1.15.0")
-    ```
-
- *  Fix: Handle dispatcher executor shutdowns gracefully. When there aren't any threads to carry a
-    call its callback now gets a `RejectedExecutionException`.
- *  Fix: Don't permanently cache responses with `Cache-Control: immutable`. We misunderstood the
-    original `immutable` proposal!
- *  Fix: Change `Authenticator`'s `Route` parameter to be nullable. This was marked as non-null but
-    could be called with null in some cases.
- *  Fix: Don't create malformed URLs when `MockWebServer` is reached via an IPv6 address.
- *  Fix: Don't crash if the system default authenticator is null.
- *  Fix: Don't crash generating elliptic curve certificates on Android.
- *  Fix: Don't crash doing platform detection on RoboVM.
- *  Fix: Don't leak socket connections when web socket upgrades fail.
-
-
 ## Version 3.11.0
 
 _2018-07-12_
diff --git a/benchmarks/pom.xml b/benchmarks/pom.xml
index 2b03eb0062..82fb8699f5 100644
--- a/benchmarks/pom.xml
+++ b/benchmarks/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>benchmarks</artifactId>
@@ -91,7 +91,7 @@
             <commandlineArgs>-Xbootclasspath/p:${bootclasspath}</commandlineArgs>
             <argument>-classpath</argument>
             <classpath />
-            <argument>okhttp3.benchmarks.Benchmark</argument>
+            <argument>benchmarks.Benchmark</argument>
           </arguments>
         </configuration>
       </plugin>
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java b/benchmarks/src/main/java/benchmarks/ApacheHttpClient.java
similarity index 93%
rename from benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java
rename to benchmarks/src/main/java/benchmarks/ApacheHttpClient.java
index e3dbd3084c..d6407a13aa 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java
+++ b/benchmarks/src/main/java/benchmarks/ApacheHttpClient.java
@@ -13,17 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.concurrent.TimeUnit;
 import java.util.zip.GZIPInputStream;
 import okhttp3.HttpUrl;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.conn.ClientConnectionManager;
 import org.apache.http.conn.scheme.Scheme;
@@ -31,13 +30,14 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.conn.PoolingClientConnectionManager;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 
 /** Benchmark Apache HTTP client. */
 class ApacheHttpClient extends SynchronousHttpClient {
   private static final boolean VERBOSE = false;
 
-  private HttpClient client;
+  private DefaultHttpClient client;
 
   @Override public void prepare(Benchmark benchmark) {
     super.prepare(benchmark);
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java b/benchmarks/src/main/java/benchmarks/Benchmark.java
similarity index 95%
rename from benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java
rename to benchmarks/src/main/java/benchmarks/Benchmark.java
index 081fcfccb9..e65030e3e9 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java
+++ b/benchmarks/src/main/java/benchmarks/Benchmark.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 import com.google.caliper.Param;
 import com.google.caliper.model.ArbitraryMeasurement;
@@ -28,15 +28,15 @@
 import java.util.logging.Logger;
 import okhttp3.HttpUrl;
 import okhttp3.Protocol;
-import okhttp3.mockwebserver.Dispatcher;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
-import okhttp3.tls.HandshakeCertificates;
+import mockwebserver.Dispatcher;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.GzipSink;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 
 /**
  * This benchmark is fake, but may be useful for certain relative comparisons. It uses a local
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/Client.java b/benchmarks/src/main/java/benchmarks/Client.java
similarity index 97%
rename from benchmarks/src/main/java/okhttp3/benchmarks/Client.java
rename to benchmarks/src/main/java/benchmarks/Client.java
index b7c6b3f3b9..8aa79f8035 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/Client.java
+++ b/benchmarks/src/main/java/benchmarks/Client.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 enum Client {
   OkHttp {
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java b/benchmarks/src/main/java/benchmarks/HttpClient.java
similarity index 96%
rename from benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java
rename to benchmarks/src/main/java/benchmarks/HttpClient.java
index 0c0986ffeb..6cd74a6442 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java
+++ b/benchmarks/src/main/java/benchmarks/HttpClient.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 import okhttp3.HttpUrl;
 
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java b/benchmarks/src/main/java/benchmarks/NettyHttpClient.java
similarity index 97%
rename from benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java
rename to benchmarks/src/main/java/benchmarks/NettyHttpClient.java
index 35731fa3b1..27514e9881 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java
+++ b/benchmarks/src/main/java/benchmarks/NettyHttpClient.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.ByteBuf;
@@ -44,9 +44,9 @@
 import java.util.concurrent.TimeUnit;
 import javax.net.ssl.SSLEngine;
 import okhttp3.HttpUrl;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 
 /** Netty isn't an HTTP client, but it's almost one. */
 class NettyHttpClient implements HttpClient {
@@ -77,7 +77,7 @@
         }
 
         pipeline.addLast("codec", new HttpClientCodec());
-        pipeline.addLast("inflater", new HttpContentDecompressor());
+//        pipeline.addLast("inflater", new HttpContentDecompressor());
         pipeline.addLast("handler", new HttpChannel(channel));
       }
     };
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java b/benchmarks/src/main/java/benchmarks/OkHttp.java
similarity index 95%
rename from benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java
rename to benchmarks/src/main/java/benchmarks/OkHttp.java
index 86b44523a2..e2960c5e9d 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java
+++ b/benchmarks/src/main/java/benchmarks/OkHttp.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;
@@ -25,9 +25,9 @@
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.ResponseBody;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 
 class OkHttp extends SynchronousHttpClient {
   private static final boolean VERBOSE = false;
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java b/benchmarks/src/main/java/benchmarks/OkHttpAsync.java
similarity index 96%
rename from benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java
rename to benchmarks/src/main/java/benchmarks/OkHttpAsync.java
index d6d0bc5cb4..9b6e7749a6 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java
+++ b/benchmarks/src/main/java/benchmarks/OkHttpAsync.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 import java.io.IOException;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -31,9 +31,9 @@
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.ResponseBody;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 
 class OkHttpAsync implements HttpClient {
   private static final boolean VERBOSE = false;
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/SynchronousHttpClient.java b/benchmarks/src/main/java/benchmarks/SynchronousHttpClient.java
similarity index 98%
rename from benchmarks/src/main/java/okhttp3/benchmarks/SynchronousHttpClient.java
rename to benchmarks/src/main/java/benchmarks/SynchronousHttpClient.java
index 4a17b8693d..2929841c72 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/SynchronousHttpClient.java
+++ b/benchmarks/src/main/java/benchmarks/SynchronousHttpClient.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java b/benchmarks/src/main/java/benchmarks/UrlConnection.java
similarity index 95%
rename from benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java
rename to benchmarks/src/main/java/benchmarks/UrlConnection.java
index 96eb7422cd..64a36c2b48 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java
+++ b/benchmarks/src/main/java/benchmarks/UrlConnection.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.benchmarks;
+package benchmarks;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -25,9 +25,9 @@
 import javax.net.ssl.SSLSession;
 import javax.net.ssl.SSLSocketFactory;
 import okhttp3.HttpUrl;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 
 class UrlConnection extends SynchronousHttpClient {
   private static final boolean VERBOSE = false;
diff --git a/benchmarks/src/main/java/module-info.java b/benchmarks/src/main/java/module-info.java
new file mode 100644
index 0000000000..c6c6abe26a
--- /dev/null
+++ b/benchmarks/src/main/java/module-info.java
@@ -0,0 +1,12 @@
+module benchmarks {
+    requires okhttp;
+    requires tls;
+    requires httpcore;
+    requires httpclient;
+    requires netty.transport;
+    requires netty.buffer;
+    requires netty.codec.http;
+    requires netty.handler;
+    requires caliper;
+    requires mockwebserver;
+}
\ No newline at end of file
diff --git a/bom/pom.xml b/bom/pom.xml
index f4a1e2818b..58ef927dc3 100644
--- a/bom/pom.xml
+++ b/bom/pom.xml
@@ -1,12 +1,13 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-bom</artifactId>
diff --git a/mockwebserver/pom.xml b/mockwebserver/pom.xml
index 92ced6b41d..eb19007574 100644
--- a/mockwebserver/pom.xml
+++ b/mockwebserver/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>mockwebserver</artifactId>
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java b/mockwebserver/src/main/java/mockwebserver/Dispatcher.java
similarity index 98%
rename from mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java
rename to mockwebserver/src/main/java/mockwebserver/Dispatcher.java
index 9f4fc9fb66..4ba8fa6a75 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java
+++ b/mockwebserver/src/main/java/mockwebserver/Dispatcher.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 /** Handler for mock server requests. */
 public abstract class Dispatcher {
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java b/mockwebserver/src/main/java/mockwebserver/MockResponse.java
similarity index 99%
rename from mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java
rename to mockwebserver/src/main/java/mockwebserver/MockResponse.java
index 36457229ed..26de994628 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java
+++ b/mockwebserver/src/main/java/mockwebserver/MockResponse.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java b/mockwebserver/src/main/java/mockwebserver/MockWebServer.java
similarity index 94%
rename from mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
rename to mockwebserver/src/main/java/mockwebserver/MockWebServer.java
index d2a532dd6f..8e0865ab23 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
+++ b/mockwebserver/src/main/java/mockwebserver/MockWebServer.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 import java.io.Closeable;
 import java.io.IOException;
@@ -78,21 +78,6 @@
 import org.junit.rules.ExternalResource;
 
 import static okhttp3.internal.Util.closeQuietly;
-import static okhttp3.mockwebserver.SocketPolicy.CONTINUE_ALWAYS;
-import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
-import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
-import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_START;
-import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_DURING_REQUEST_BODY;
-import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;
-import static okhttp3.mockwebserver.SocketPolicy.EXPECT_CONTINUE;
-import static okhttp3.mockwebserver.SocketPolicy.FAIL_HANDSHAKE;
-import static okhttp3.mockwebserver.SocketPolicy.NO_RESPONSE;
-import static okhttp3.mockwebserver.SocketPolicy.RESET_STREAM_AT_START;
-import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_INPUT_AT_END;
-import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_OUTPUT_AT_END;
-import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE;
-import static okhttp3.mockwebserver.SocketPolicy.STALL_SOCKET_AT_START;
-import static okhttp3.mockwebserver.SocketPolicy.UPGRADE_TO_SSL_AT_END;
 
 /**
  * A scriptable web server. Callers supply canned responses and the server replays them upon request
@@ -397,7 +382,7 @@ private void acceptConnections() throws Exception {
             return;
           }
           SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();
-          if (socketPolicy == DISCONNECT_AT_START) {
+          if (socketPolicy == SocketPolicy.DISCONNECT_AT_START) {
             dispatchBookkeepingRequest(0, socket);
             socket.close();
           } else {
@@ -458,7 +443,7 @@ public void processConnection() throws Exception {
           if (tunnelProxy) {
             createTunnel();
           }
-          if (socketPolicy == FAIL_HANDSHAKE) {
+          if (socketPolicy == SocketPolicy.FAIL_HANDSHAKE) {
             dispatchBookkeepingRequest(sequenceNumber, raw);
             processHandshakeFailure(raw);
             return;
@@ -492,7 +477,7 @@ public void processConnection() throws Exception {
           socket = raw;
         }
 
-        if (socketPolicy == STALL_SOCKET_AT_START) {
+        if (socketPolicy == SocketPolicy.STALL_SOCKET_AT_START) {
           return; // Ignore the socket until the server is shut down!
         }
 
@@ -539,7 +524,7 @@ private void createTunnel() throws IOException, InterruptedException {
           if (!processOneRequest(raw, source, sink)) {
             throw new IllegalStateException("Tunnel without any CONNECT!");
           }
-          if (socketPolicy == UPGRADE_TO_SSL_AT_END) return;
+          if (socketPolicy == SocketPolicy.UPGRADE_TO_SSL_AT_END) return;
         }
       }
 
@@ -556,11 +541,11 @@ private boolean processOneRequest(Socket socket, BufferedSource source, Buffered
         requestQueue.add(request);
 
         MockResponse response = dispatcher.dispatch(request);
-        if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {
+        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {
           socket.close();
           return false;
         }
-        if (response.getSocketPolicy() == NO_RESPONSE) {
+        if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {
           // This read should block until the socket is closed. (Because nobody is writing.)
           if (source.exhausted()) return false;
           throw new ProtocolException("unexpected data");
@@ -583,14 +568,14 @@ private boolean processOneRequest(Socket socket, BufferedSource source, Buffered
         }
 
         // See warnings associated with these socket policies in SocketPolicy.
-        if (response.getSocketPolicy() == DISCONNECT_AT_END) {
+        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {
           socket.close();
           return false;
-        } else if (response.getSocketPolicy() == SHUTDOWN_INPUT_AT_END) {
+        } else if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_INPUT_AT_END) {
           socket.shutdownInput();
-        } else if (response.getSocketPolicy() == SHUTDOWN_OUTPUT_AT_END) {
+        } else if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_OUTPUT_AT_END) {
           socket.shutdownOutput();
-        } else if (response.getSocketPolicy() == SHUTDOWN_SERVER_AFTER_RESPONSE) {
+        } else if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE) {
           shutdown();
         }
 
@@ -658,7 +643,7 @@ private RecordedRequest readRequest(Socket socket, BufferedSource source, Buffer
     }
 
     final SocketPolicy socketPolicy = dispatcher.peek().getSocketPolicy();
-    if (expectContinue && socketPolicy == EXPECT_CONTINUE || socketPolicy == CONTINUE_ALWAYS) {
+    if (expectContinue && socketPolicy == SocketPolicy.EXPECT_CONTINUE || socketPolicy == SocketPolicy.CONTINUE_ALWAYS) {
       sink.writeUtf8("HTTP/1.1 100 Continue\r\n");
       sink.writeUtf8("Content-Length: 0\r\n");
       sink.writeUtf8("\r\n");
@@ -792,8 +777,8 @@ private void throttledTransfer(MockResponse policy, Socket socket, BufferedSourc
 
     long halfByteCount = byteCount / 2;
     boolean disconnectHalfway = isRequest
-        ? policy.getSocketPolicy() == DISCONNECT_DURING_REQUEST_BODY
-        : policy.getSocketPolicy() == DISCONNECT_DURING_RESPONSE_BODY;
+        ? policy.getSocketPolicy() == SocketPolicy.DISCONNECT_DURING_REQUEST_BODY
+        : policy.getSocketPolicy() == SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;
 
     while (!socket.isClosed()) {
       for (int b = 0; b < bytesPerPeriod; ) {
@@ -900,7 +885,7 @@ private Http2SocketHandler(Socket socket, Protocol protocol) {
 
     @Override public void onStream(Http2Stream stream) throws IOException {
       MockResponse peekedResponse = dispatcher.peek();
-      if (peekedResponse.getSocketPolicy() == RESET_STREAM_AT_START) {
+      if (peekedResponse.getSocketPolicy() == SocketPolicy.RESET_STREAM_AT_START) {
         try {
           dispatchBookkeepingRequest(sequenceNumber.getAndIncrement(), socket);
           stream.close(ErrorCode.fromHttp2(peekedResponse.getHttp2ErrorCode()));
@@ -920,7 +905,7 @@ private Http2SocketHandler(Socket socket, Protocol protocol) {
       } catch (InterruptedException e) {
         throw new AssertionError(e);
       }
-      if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {
+      if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {
         socket.close();
         return;
       }
@@ -930,7 +915,7 @@ private Http2SocketHandler(Socket socket, Protocol protocol) {
             + " and responded: " + response + " protocol is " + protocol.toString());
       }
 
-      if (response.getSocketPolicy() == DISCONNECT_AT_END) {
+      if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {
         Http2Connection connection = stream.getConnection();
         connection.shutdown(ErrorCode.NO_ERROR);
       }
@@ -962,7 +947,7 @@ private RecordedRequest readRequest(Http2Stream stream) throws IOException {
       Headers headers = httpHeaders.build();
 
       MockResponse peek = dispatcher.peek();
-      if (!readBody && peek.getSocketPolicy() == EXPECT_CONTINUE) {
+      if (!readBody && peek.getSocketPolicy() == SocketPolicy.EXPECT_CONTINUE) {
         stream.writeHeaders(Collections.singletonList(
             new Header(Header.RESPONSE_STATUS, ByteString.encodeUtf8("100 Continue"))), true);
         stream.getConnection().flush();
@@ -990,7 +975,7 @@ private void writeResponse(Http2Stream stream, MockResponse response) throws IOE
         stream.getConnection().setSettings(settings);
       }
 
-      if (response.getSocketPolicy() == NO_RESPONSE) {
+      if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {
         return;
       }
       List<Header> http2Headers = new ArrayList<>();
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/PushPromise.java b/mockwebserver/src/main/java/mockwebserver/PushPromise.java
similarity index 97%
rename from mockwebserver/src/main/java/okhttp3/mockwebserver/PushPromise.java
rename to mockwebserver/src/main/java/mockwebserver/PushPromise.java
index 744127cadd..1c47cc48f0 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/PushPromise.java
+++ b/mockwebserver/src/main/java/mockwebserver/PushPromise.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 import okhttp3.Headers;
 
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java b/mockwebserver/src/main/java/mockwebserver/QueueDispatcher.java
similarity index 99%
rename from mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java
rename to mockwebserver/src/main/java/mockwebserver/QueueDispatcher.java
index 4071d4718b..2b44d74003 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java
+++ b/mockwebserver/src/main/java/mockwebserver/QueueDispatcher.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 import java.net.HttpURLConnection;
 import java.util.concurrent.BlockingQueue;
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java b/mockwebserver/src/main/java/mockwebserver/RecordedRequest.java
similarity index 99%
rename from mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java
rename to mockwebserver/src/main/java/mockwebserver/RecordedRequest.java
index 52beb79323..81c3f1fd81 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java
+++ b/mockwebserver/src/main/java/mockwebserver/RecordedRequest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 import java.io.IOException;
 import java.net.Inet6Address;
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java b/mockwebserver/src/main/java/mockwebserver/SocketPolicy.java
similarity index 99%
rename from mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java
rename to mockwebserver/src/main/java/mockwebserver/SocketPolicy.java
index beeb2c9a6d..e58dba4100 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java
+++ b/mockwebserver/src/main/java/mockwebserver/SocketPolicy.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 /**
  * What should be done with the incoming socket.
diff --git a/mockwebserver/src/main/java/module-info.java b/mockwebserver/src/main/java/module-info.java
new file mode 100644
index 0000000000..fae137a97c
--- /dev/null
+++ b/mockwebserver/src/main/java/module-info.java
@@ -0,0 +1,5 @@
+module mockwebserver {
+    requires okhttp;
+    requires junit;
+    exports mockwebserver to junit, guide, slack, staticserver, unixdomainsockets, benchmarks;
+}
\ No newline at end of file
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java b/mockwebserver/src/test/java/mockwebserver/CustomDispatcherTest.java
similarity index 95%
rename from mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java
rename to mockwebserver/src/test/java/mockwebserver/CustomDispatcherTest.java
index ec8317e95e..443c260009 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java
+++ b/mockwebserver/src/test/java/mockwebserver/CustomDispatcherTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -22,6 +22,11 @@
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
+
+import mockwebserver.Dispatcher;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
 import org.junit.After;
 import org.junit.Test;
 
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java b/mockwebserver/src/test/java/mockwebserver/MockWebServerTest.java
similarity index 98%
rename from mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
rename to mockwebserver/src/test/java/mockwebserver/MockWebServerTest.java
index eb41f4fbca..0eec39ed14 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
+++ b/mockwebserver/src/test/java/mockwebserver/MockWebServerTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 import java.io.BufferedReader;
 import java.io.Closeable;
@@ -38,10 +38,15 @@
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
 import okhttp3.Protocol;
-import okhttp3.RecordingHostnameVerifier;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
+import mockwebserver.SocketPolicy;
+import org.junit.Ignore;
+import testingsupport.RecordingHostnameVerifier;
 import okhttp3.internal.Util;
-import okhttp3.tls.HeldCertificate;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HeldCertificate;
+import tls.HandshakeCertificates;
 import org.junit.After;
 import org.junit.Rule;
 import org.junit.Test;
@@ -50,14 +55,14 @@
 
 import static java.util.concurrent.TimeUnit.NANOSECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-
+@Ignore
 public final class MockWebServerTest {
   @Rule public final MockWebServer server = new MockWebServer();
 
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java b/mockwebserver/src/test/java/mockwebserver/RecordedRequestTest.java
similarity index 96%
rename from mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java
rename to mockwebserver/src/test/java/mockwebserver/RecordedRequestTest.java
index e74e3c5275..27e92430d8 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java
+++ b/mockwebserver/src/test/java/mockwebserver/RecordedRequestTest.java
@@ -14,17 +14,16 @@
  * limitations under the License.
  */
 
-package okhttp3.mockwebserver;
+package mockwebserver;
 
 import java.net.Inet4Address;
 import java.net.InetAddress;
-import java.net.InetSocketAddress;
 import java.net.Socket;
 import java.net.UnknownHostException;
 import java.util.Collections;
-import java.util.Random;
+
 import okhttp3.Headers;
-import okhttp3.HttpUrl;
+import mockwebserver.RecordedRequest;
 import okio.Buffer;
 import org.junit.Test;
 
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java b/mockwebserver/src/test/java/mockwebserver/internal/http2/Http2Server.java
similarity index 98%
rename from mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java
rename to mockwebserver/src/test/java/mockwebserver/internal/http2/Http2Server.java
index 7d3b09a2cb..57c39c3f83 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java
+++ b/mockwebserver/src/test/java/mockwebserver/internal/http2/Http2Server.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package okhttp3.mockwebserver.internal.http2;
+package mockwebserver.internal.http2;
 
 import java.io.File;
 import java.io.IOException;
@@ -40,7 +40,7 @@
 import okio.Source;
 
 import static okhttp3.internal.platform.Platform.INFO;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 
 /** A basic HTTP/2 server that serves the contents of a local directory. */
 public final class Http2Server extends Http2Connection.Listener {
diff --git a/okcurl/pom.xml b/okcurl/pom.xml
index 3511624331..6d1cc5c697 100644
--- a/okcurl/pom.xml
+++ b/okcurl/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okcurl</artifactId>
@@ -18,11 +18,6 @@
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>logging-interceptor</artifactId>
-      <version>${project.version}</version>
-    </dependency>
     <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
diff --git a/okcurl/src/main/java/okhttp3/curl/Main.java b/okcurl/src/main/java/okhttp3/curl/Main.java
index 4b1fd21087..cee2600619 100644
--- a/okcurl/src/main/java/okhttp3/curl/Main.java
+++ b/okcurl/src/main/java/okhttp3/curl/Main.java
@@ -48,8 +48,6 @@
 import okhttp3.internal.http.StatusLine;
 import okhttp3.internal.http2.Http2;
 import okhttp3.internal.platform.Platform;
-import okhttp3.logging.HttpLoggingInterceptor;
-import okhttp3.logging.LoggingEventListener;
 import okio.BufferedSource;
 import okio.Okio;
 import okio.Sink;
@@ -123,11 +121,6 @@ private static String protocols() {
   @Option(name = {"-V", "--version"}, description = "Show version number and quit")
   public boolean version;
 
-  @Option(
-      name = {"-v", "--verbose"},
-      description = "Makes " + NAME + " verbose during the operation")
-  public boolean verbose;
-
   @Arguments(title = "url", description = "Remote resource URL")
   public String url;
 
@@ -191,16 +184,6 @@ private OkHttpClient createClient() {
       builder.sslSocketFactory(sslSocketFactory, trustManager);
       builder.hostnameVerifier(createInsecureHostnameVerifier());
     }
-    if (verbose) {
-      HttpLoggingInterceptor.Logger logger =
-          new HttpLoggingInterceptor.Logger() {
-            @Override
-            public void log(String message) {
-              System.out.println(message);
-            }
-          };
-      builder.eventListenerFactory(new LoggingEventListener.Factory(logger));
-    }
     return builder.build();
   }
 
diff --git a/okhttp-android-support/pom.xml b/okhttp-android-support/pom.xml
index 2b2d2b5e7a..ecb19d47a6 100644
--- a/okhttp-android-support/pom.xml
+++ b/okhttp-android-support/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-android-support</artifactId>
diff --git a/okhttp-android-support/src/main/java/module-info.java b/okhttp-android-support/src/main/java/module-info.java
new file mode 100644
index 0000000000..1fc41d0eac
--- /dev/null
+++ b/okhttp-android-support/src/main/java/module-info.java
@@ -0,0 +1,4 @@
+module okhttpandroid {
+    requires okhttp;
+    requires urlconnection;
+}
\ No newline at end of file
diff --git a/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java b/okhttp-android-support/src/main/java/okandroid/AndroidInternal.java
similarity index 93%
rename from okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java
rename to okhttp-android-support/src/main/java/okandroid/AndroidInternal.java
index de5788539a..5cb8c7d63a 100644
--- a/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java
+++ b/okhttp-android-support/src/main/java/okandroid/AndroidInternal.java
@@ -13,10 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package okandroid;
 
 import java.net.ResponseCache;
-import okhttp3.internal.huc.CacheAdapter;
+
+import okandroid.internal.huc.CacheAdapter;
+import okhttp3.OkHttpClient;
+import urlconnection.OkUrlFactory;
 
 /**
  * Back doors to enable the use of OkHttp within the Android platform libraries. OkHttp is used to
diff --git a/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java b/okhttp-android-support/src/main/java/okandroid/AndroidShimResponseCache.java
similarity index 96%
rename from okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java
rename to okhttp-android-support/src/main/java/okandroid/AndroidShimResponseCache.java
index c46a0cb9fd..5167467174 100644
--- a/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java
+++ b/okhttp-android-support/src/main/java/okandroid/AndroidShimResponseCache.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package okandroid;
 
 import java.io.File;
 import java.io.IOException;
@@ -24,7 +24,11 @@
 import java.net.URLConnection;
 import java.util.List;
 import java.util.Map;
-import okhttp3.internal.huc.JavaApiConverter;
+
+import okandroid.internal.huc.JavaApiConverter;
+import okhttp3.Cache;
+import okhttp3.Request;
+import okhttp3.Response;
 
 /**
  * A class provided for use by Android so that it can continue supporting a {@link ResponseCache}
diff --git a/okhttp-android-support/src/main/java/okhttp3/OkCacheContainer.java b/okhttp-android-support/src/main/java/okandroid/OkCacheContainer.java
similarity index 94%
rename from okhttp-android-support/src/main/java/okhttp3/OkCacheContainer.java
rename to okhttp-android-support/src/main/java/okandroid/OkCacheContainer.java
index d52cb0133d..23be1f9b79 100644
--- a/okhttp-android-support/src/main/java/okhttp3/OkCacheContainer.java
+++ b/okhttp-android-support/src/main/java/okandroid/OkCacheContainer.java
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package okandroid;
+
+import okhttp3.Cache;
 
 /**
  * An interface that allows OkHttp to detect that a {@link java.net.ResponseCache} contains a {@link
diff --git a/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java b/okhttp-android-support/src/main/java/okandroid/internal/huc/CacheAdapter.java
similarity index 99%
rename from okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java
rename to okhttp-android-support/src/main/java/okandroid/internal/huc/CacheAdapter.java
index 5bca95b937..3f25b77216 100644
--- a/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java
+++ b/okhttp-android-support/src/main/java/okandroid/internal/huc/CacheAdapter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.huc;
+package okandroid.internal.huc;
 
 import java.io.IOException;
 import java.io.OutputStream;
diff --git a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java b/okhttp-android-support/src/main/java/okandroid/internal/huc/JavaApiConverter.java
similarity index 99%
rename from okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
rename to okhttp-android-support/src/main/java/okandroid/internal/huc/JavaApiConverter.java
index 1dec85cdc0..49abb9bab1 100644
--- a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
+++ b/okhttp-android-support/src/main/java/okandroid/internal/huc/JavaApiConverter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.huc;
+package okandroid.internal.huc;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -44,7 +44,7 @@
 import okhttp3.ResponseBody;
 import okhttp3.TlsVersion;
 import okhttp3.internal.Internal;
-import okhttp3.internal.JavaNetHeaders;
+import urlconnection.internal.JavaNetHeaders;
 import okhttp3.internal.Util;
 import okhttp3.internal.cache.CacheRequest;
 import okhttp3.internal.http.HttpHeaders;
@@ -54,6 +54,7 @@
 import okio.BufferedSource;
 import okio.Okio;
 import okio.Sink;
+import urlconnection.internal.huc.DelegatingHttpsURLConnection;
 
 /**
  * Helper methods that convert between Java and OkHttp representations.
diff --git a/okhttp-android-support/src/test/java/okhttp3/AbstractResponseCache.java b/okhttp-android-support/src/test/java/okandroid/AbstractResponseCache.java
similarity index 98%
rename from okhttp-android-support/src/test/java/okhttp3/AbstractResponseCache.java
rename to okhttp-android-support/src/test/java/okandroid/AbstractResponseCache.java
index d755487c92..6a5a716219 100644
--- a/okhttp-android-support/src/test/java/okhttp3/AbstractResponseCache.java
+++ b/okhttp-android-support/src/test/java/okandroid/AbstractResponseCache.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package okandroid;
 
 import java.io.IOException;
 import java.net.CacheRequest;
diff --git a/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCache.java b/okhttp-android-support/src/test/java/okandroid/android/HttpResponseCache.java
similarity index 98%
rename from okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCache.java
rename to okhttp-android-support/src/test/java/okandroid/android/HttpResponseCache.java
index c569a3b365..10c54a5283 100644
--- a/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCache.java
+++ b/okhttp-android-support/src/test/java/okandroid/android/HttpResponseCache.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package okhttp3.android;
+package okandroid.android;
 
 import java.io.Closeable;
 import java.io.File;
@@ -26,9 +26,9 @@
 import java.net.URLConnection;
 import java.util.List;
 import java.util.Map;
-import okhttp3.AndroidShimResponseCache;
+import okandroid.AndroidShimResponseCache;
 import okhttp3.Cache;
-import okhttp3.OkCacheContainer;
+import okandroid.OkCacheContainer;
 
 /**
  * A copy of android.net.http.HttpResponseCache taken from AOSP. Android need to keep this code
diff --git a/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java b/okhttp-android-support/src/test/java/okandroid/android/HttpResponseCacheTest.java
similarity index 96%
rename from okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java
rename to okhttp-android-support/src/test/java/okandroid/android/HttpResponseCacheTest.java
index dcb1c01815..8d347a80e8 100644
--- a/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okandroid/android/HttpResponseCacheTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package okhttp3.android;
+package okandroid.android;
 
 import java.io.File;
 import java.io.InputStream;
@@ -25,12 +25,12 @@
 import java.net.URLConnection;
 import java.util.List;
 import java.util.Map;
-import okhttp3.AndroidInternal;
+import okandroid.AndroidInternal;
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
-import okhttp3.OkUrlFactory;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
+import urlconnection.OkUrlFactory;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java b/okhttp-android-support/src/test/java/okandroid/internal/huc/CacheAdapterTest.java
similarity index 97%
rename from okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
rename to okhttp-android-support/src/test/java/okandroid/internal/huc/CacheAdapterTest.java
index 09a438807f..9f777897b8 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
+++ b/okhttp-android-support/src/test/java/okandroid/internal/huc/CacheAdapterTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.huc;
+package okandroid.internal.huc;
 
 import java.io.IOException;
 import java.net.CacheRequest;
@@ -29,21 +29,22 @@
 import java.util.Map;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.HttpsURLConnection;
-import okhttp3.AbstractResponseCache;
+
+import okandroid.AbstractResponseCache;
 import okhttp3.OkHttpClient;
-import okhttp3.OkUrlFactory;
-import okhttp3.RecordingHostnameVerifier;
+import urlconnection.OkUrlFactory;
+import testingsupport.RecordingHostnameVerifier;
 import okhttp3.internal.Internal;
 import okhttp3.internal.cache.InternalCache;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.tls.HandshakeCertificates;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java b/okhttp-android-support/src/test/java/okandroid/internal/huc/JavaApiConverterTest.java
similarity index 99%
rename from okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java
rename to okhttp-android-support/src/test/java/okandroid/internal/huc/JavaApiConverterTest.java
index ad5d3fdfd3..b6f61e0928 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java
+++ b/okhttp-android-support/src/test/java/okandroid/internal/huc/JavaApiConverterTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.huc;
+package okandroid.internal.huc;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -38,6 +38,8 @@
 import java.util.Set;
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLPeerUnverifiedException;
+
+import okandroid.internal.huc.JavaApiConverter;
 import okhttp3.CipherSuite;
 import okhttp3.Handshake;
 import okhttp3.Headers;
@@ -50,7 +52,7 @@
 import okhttp3.TlsVersion;
 import okhttp3.internal.Internal;
 import okhttp3.internal.Util;
-import okhttp3.mockwebserver.MockWebServer;
+import mockwebserver.MockWebServer;
 import okio.Buffer;
 import okio.BufferedSource;
 import org.junit.Before;
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java b/okhttp-android-support/src/test/java/okandroid/internal/huc/ResponseCacheTest.java
similarity index 99%
rename from okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
rename to okhttp-android-support/src/test/java/okandroid/internal/huc/ResponseCacheTest.java
index eb95e3ea4e..320e64b6a3 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okandroid/internal/huc/ResponseCacheTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package okhttp3.internal.huc;
+package okandroid.internal.huc;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
@@ -51,20 +51,21 @@
 import java.util.concurrent.atomic.AtomicReference;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.HttpsURLConnection;
-import okhttp3.AbstractResponseCache;
-import okhttp3.AndroidInternal;
-import okhttp3.AndroidShimResponseCache;
+
+import okandroid.AbstractResponseCache;
+import okandroid.AndroidInternal;
+import okandroid.AndroidShimResponseCache;
 import okhttp3.Headers;
 import okhttp3.OkHttpClient;
-import okhttp3.OkUrlFactory;
-import okhttp3.RecordingHostnameVerifier;
+import urlconnection.OkUrlFactory;
+import testingsupport.RecordingHostnameVerifier;
 import okhttp3.internal.Internal;
 import okhttp3.internal.cache.InternalCache;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
-import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HandshakeCertificates;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
+import mockwebserver.SocketPolicy;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.GzipSink;
@@ -74,8 +75,9 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import urlconnection.internal.huc.OkHttpURLConnection;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
diff --git a/okhttp-apache/pom.xml b/okhttp-apache/pom.xml
index 4a1179e779..85c666ba92 100644
--- a/okhttp-apache/pom.xml
+++ b/okhttp-apache/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-apache</artifactId>
diff --git a/okhttp-apache/src/test/java/okhttp3/apache/OkApacheClientTest.java b/okhttp-apache/src/test/java/okhttp3/apache/OkApacheClientTest.java
index 77493a2540..f4399b898f 100644
--- a/okhttp-apache/src/test/java/okhttp3/apache/OkApacheClientTest.java
+++ b/okhttp-apache/src/test/java/okhttp3/apache/OkApacheClientTest.java
@@ -5,9 +5,9 @@
 import java.io.InputStream;
 import java.net.URISyntaxException;
 import java.util.zip.GZIPInputStream;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
 import okio.Buffer;
 import okio.GzipSink;
 import okio.Okio;
diff --git a/okhttp-dnsoverhttps/pom.xml b/okhttp-dnsoverhttps/pom.xml
index 224f432979..2fb9c3db1a 100644
--- a/okhttp-dnsoverhttps/pom.xml
+++ b/okhttp-dnsoverhttps/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-dnsoverhttps</artifactId>
diff --git a/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java
index c6c16278dd..3cc7635fde 100644
--- a/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java
+++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java
@@ -28,9 +28,9 @@
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.Protocol;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
 import okio.Buffer;
 import okio.ByteString;
 import org.junit.Before;
diff --git a/okhttp-logging-interceptor/pom.xml b/okhttp-logging-interceptor/pom.xml
index cff9ce9147..0e35c12c7b 100644
--- a/okhttp-logging-interceptor/pom.xml
+++ b/okhttp-logging-interceptor/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>logging-interceptor</artifactId>
diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
index c6acbccf1e..448b08edd5 100644
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
@@ -326,7 +326,7 @@ static boolean isPlaintext(Buffer buffer) {
     }
   }
 
-  private static boolean bodyHasUnknownEncoding(Headers headers) {
+  private boolean bodyHasUnknownEncoding(Headers headers) {
     String contentEncoding = headers.get("Content-Encoding");
     return contentEncoding != null
         && !contentEncoding.equalsIgnoreCase("identity")
diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java
deleted file mode 100644
index cc5adde48e..0000000000
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.java
+++ /dev/null
@@ -1,178 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.logging;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Proxy;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
-import okhttp3.Call;
-import okhttp3.Connection;
-import okhttp3.EventListener;
-import okhttp3.Handshake;
-import okhttp3.OkHttpClient;
-import okhttp3.Protocol;
-import okhttp3.Request;
-import okhttp3.Response;
-
-/**
- * An OkHttp EventListener, which logs call events. Can be applied as an
- * {@linkplain OkHttpClient#eventListenerFactory() event listener factory}.
- *
- * <p>The format of the logs created by this class should not be considered stable and may change
- * slightly between releases. If you need a stable logging format, use your own event listener.
- */
-public final class LoggingEventListener extends EventListener {
-  private final HttpLoggingInterceptor.Logger logger;
-  private long startNs;
-
-  private LoggingEventListener(HttpLoggingInterceptor.Logger logger) {
-    this.logger = logger;
-  }
-
-  @Override
-  public void callStart(Call call) {
-    startNs = System.nanoTime();
-
-    logWithTime("callStart: " + call.request());
-  }
-
-  @Override
-  public void dnsStart(Call call, String domainName) {
-    logWithTime("dnsStart: " + domainName);
-  }
-
-  @Override
-  public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {
-    logWithTime("dnsEnd: " + inetAddressList);
-  }
-
-  @Override
-  public void connectStart(Call call, InetSocketAddress inetSocketAddress, Proxy proxy) {
-    logWithTime("connectStart: " + inetSocketAddress + " " + proxy);
-  }
-
-  @Override
-  public void secureConnectStart(Call call) {
-    logWithTime("secureConnectStart");
-  }
-
-  @Override
-  public void secureConnectEnd(Call call, @Nullable Handshake handshake) {
-    logWithTime("secureConnectEnd");
-  }
-
-  @Override
-  public void connectEnd(
-      Call call, InetSocketAddress inetSocketAddress, Proxy proxy, @Nullable Protocol protocol) {
-    logWithTime("connectEnd: " + protocol);
-  }
-
-  @Override
-  public void connectFailed(
-      Call call,
-      InetSocketAddress inetSocketAddress,
-      Proxy proxy,
-      @Nullable Protocol protocol,
-      IOException ioe) {
-    logWithTime("connectFailed: " + protocol + " " + ioe);
-  }
-
-  @Override
-  public void connectionAcquired(Call call, Connection connection) {
-    logWithTime("connectionAcquired: " + connection);
-  }
-
-  @Override
-  public void connectionReleased(Call call, Connection connection) {
-    logWithTime("connectionReleased");
-  }
-
-  @Override
-  public void requestHeadersStart(Call call) {
-    logWithTime("requestHeadersStart");
-  }
-
-  @Override
-  public void requestHeadersEnd(Call call, Request request) {
-    logWithTime("requestHeadersEnd");
-  }
-
-  @Override
-  public void requestBodyStart(Call call) {
-    logWithTime("requestBodyStart");
-  }
-
-  @Override
-  public void requestBodyEnd(Call call, long byteCount) {
-    logWithTime("requestBodyEnd: byteCount=" + byteCount);
-  }
-
-  @Override
-  public void responseHeadersStart(Call call) {
-    logWithTime("responseHeadersStart");
-  }
-
-  @Override
-  public void responseHeadersEnd(Call call, Response response) {
-    logWithTime("responseHeadersEnd: " + response);
-  }
-
-  @Override
-  public void responseBodyStart(Call call) {
-    logWithTime("responseBodyStart");
-  }
-
-  @Override
-  public void responseBodyEnd(Call call, long byteCount) {
-    logWithTime("responseBodyEnd: byteCount=" + byteCount);
-  }
-
-  @Override
-  public void callEnd(Call call) {
-    logWithTime("callEnd");
-  }
-
-  @Override
-  public void callFailed(Call call, IOException ioe) {
-    logWithTime("callFailed: " + ioe);
-  }
-
-  private void logWithTime(String message) {
-    long timeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
-    logger.log("[" + timeMs + " ms] " + message);
-  }
-
-  public static class Factory implements EventListener.Factory {
-    private final HttpLoggingInterceptor.Logger logger;
-
-    public Factory() {
-      this(HttpLoggingInterceptor.Logger.DEFAULT);
-    }
-
-    public Factory(HttpLoggingInterceptor.Logger logger) {
-      this.logger = logger;
-    }
-
-    @Override
-    public EventListener create(Call call) {
-      return new LoggingEventListener(logger);
-    }
-  }
-}
diff --git a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
index 6fd53f7753..1ba4fa1fc2 100644
--- a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
@@ -19,7 +19,6 @@
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 import java.util.regex.Pattern;
 import javax.net.ssl.HostnameVerifier;
@@ -28,15 +27,15 @@
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
 import okhttp3.Protocol;
-import okhttp3.RecordingHostnameVerifier;
+import testingsupport.RecordingHostnameVerifier;
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.Response;
 import okhttp3.ResponseBody;
 import okhttp3.logging.HttpLoggingInterceptor.Level;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.tls.HandshakeCertificates;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.ByteString;
@@ -45,7 +44,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -59,8 +58,8 @@
 
   @Rule public final MockWebServer server = new MockWebServer();
 
-  private final HandshakeCertificates handshakeCertificates = localhost();
-  private final HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();
+  private HandshakeCertificates handshakeCertificates = localhost();
+  private HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();
   private OkHttpClient client;
   private String host;
   private HttpUrl url;
@@ -650,7 +649,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertNoMoreLogs();
   }
 
-  @Test public void isPlaintext() {
+  @Test public void isPlaintext() throws IOException {
     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer()));
     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("abc")));
     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines")));
@@ -807,7 +806,7 @@ public void headersAreRedacted() throws Exception {
     return new Request.Builder().url(url);
   }
 
-  static class LogRecorder implements HttpLoggingInterceptor.Logger {
+  private static class LogRecorder implements HttpLoggingInterceptor.Logger {
     private final List<String> logs = new ArrayList<>();
     private int index;
 
diff --git a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java
deleted file mode 100644
index 0f0ea2bd71..0000000000
--- a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java
+++ /dev/null
@@ -1,229 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.logging;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.util.List;
-import okhttp3.Dns;
-import okhttp3.HttpUrl;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HandshakeCertificates;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-
-import static okhttp3.tls.internal.TlsUtil.localhost;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.fail;
-
-public final class LoggingEventListenerTest {
-  private static final MediaType PLAIN = MediaType.get("text/plain");
-
-  @Rule public final MockWebServer server = new MockWebServer();
-
-  private final HandshakeCertificates handshakeCertificates = localhost();
-  private final LogRecorder logRecorder = new LogRecorder();
-  private final LoggingEventListener.Factory loggingEventListenerFactory =
-      new LoggingEventListener.Factory(logRecorder);
-  private OkHttpClient client;
-  private HttpUrl url;
-
-  @Before
-  public void setUp() {
-    client =
-        new OkHttpClient.Builder()
-            .eventListenerFactory(loggingEventListenerFactory)
-            .sslSocketFactory(
-                handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
-            .retryOnConnectionFailure(false)
-            .build();
-
-    url = server.url("/");
-  }
-
-  @Test
-  public void get() throws Exception {
-    server.enqueue(new MockResponse().setBody("Hello!").setHeader("Content-Type", PLAIN));
-    Response response = client.newCall(request().build()).execute();
-    assertNotNull(response.body());
-    response.body().bytes();
-
-    logRecorder
-        .assertLogMatch("callStart: Request\\{method=GET, url=" + url + ", tags=\\{\\}\\}")
-        .assertLogMatch("dnsStart: " + url.host())
-        .assertLogMatch("dnsEnd: \\[.+\\]")
-        .assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT")
-        .assertLogMatch("connectEnd: http/1.1")
-        .assertLogMatch(
-            "connectionAcquired: Connection\\{"
-                + url.host()
-                + ":\\d+, proxy=DIRECT hostAddress="
-                + url.host()
-                + "/.+ cipherSuite=none protocol=http/1\\.1\\}")
-        .assertLogMatch("requestHeadersStart")
-        .assertLogMatch("requestHeadersEnd")
-        .assertLogMatch("responseHeadersStart")
-        .assertLogMatch(
-            "responseHeadersEnd: Response\\{protocol=http/1\\.1, code=200, message=OK, url="
-                + url
-                + "}")
-        .assertLogMatch("responseBodyStart")
-        .assertLogMatch("responseBodyEnd: byteCount=6")
-        .assertLogMatch("connectionReleased")
-        .assertLogMatch("callEnd")
-        .assertNoMoreLogs();
-  }
-
-  @Test
-  public void post() throws IOException {
-    server.enqueue(new MockResponse());
-    client.newCall(request().post(RequestBody.create(PLAIN, "Hello!")).build()).execute();
-
-    logRecorder
-        .assertLogMatch("callStart: Request\\{method=POST, url=" + url + ", tags=\\{\\}\\}")
-        .assertLogMatch("dnsStart: " + url.host())
-        .assertLogMatch("dnsEnd: \\[.+\\]")
-        .assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT")
-        .assertLogMatch("connectEnd: http/1.1")
-        .assertLogMatch(
-            "connectionAcquired: Connection\\{"
-                + url.host()
-                + ":\\d+, proxy=DIRECT hostAddress="
-                + url.host()
-                + "/.+ cipherSuite=none protocol=http/1\\.1\\}")
-        .assertLogMatch("requestHeadersStart")
-        .assertLogMatch("requestHeadersEnd")
-        .assertLogMatch("requestBodyStart")
-        .assertLogMatch("requestBodyEnd: byteCount=6")
-        .assertLogMatch("responseHeadersStart")
-        .assertLogMatch(
-            "responseHeadersEnd: Response\\{protocol=http/1\\.1, code=200, message=OK, url="
-                + url
-                + "}")
-        .assertLogMatch("responseBodyStart")
-        .assertLogMatch("responseBodyEnd: byteCount=0")
-        .assertLogMatch("connectionReleased")
-        .assertLogMatch("callEnd")
-        .assertNoMoreLogs();
-  }
-
-  @Test
-  public void secureGet() throws Exception {
-    server.useHttps(handshakeCertificates.sslSocketFactory(), false);
-    url = server.url("/");
-
-    server.enqueue(new MockResponse());
-    Response response = client.newCall(request().build()).execute();
-    assertNotNull(response.body());
-    response.body().bytes();
-
-    logRecorder
-        .assertLogMatch("callStart: Request\\{method=GET, url=" + url + ", tags=\\{\\}\\}")
-        .assertLogMatch("dnsStart: " + url.host())
-        .assertLogMatch("dnsEnd: \\[.+\\]")
-        .assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT")
-        .assertLogMatch("secureConnectStart")
-        .assertLogMatch("secureConnectEnd")
-        .assertLogMatch("connectEnd: h2")
-        .assertLogMatch(
-            "connectionAcquired: Connection\\{"
-                + url.host()
-                + ":\\d+, proxy=DIRECT hostAddress="
-                + url.host()
-                + "/.+ cipherSuite=.+ protocol=h2}")
-        .assertLogMatch("requestHeadersStart")
-        .assertLogMatch("requestHeadersEnd")
-        .assertLogMatch("responseHeadersStart")
-        .assertLogMatch(
-            "responseHeadersEnd: Response\\{protocol=h2, code=200, message=, url=" + url + "}")
-        .assertLogMatch("responseBodyStart")
-        .assertLogMatch("responseBodyEnd: byteCount=0")
-        .assertLogMatch("connectionReleased")
-        .assertLogMatch("callEnd")
-        .assertNoMoreLogs();
-  }
-
-  @Test
-  public void dnsFail() throws IOException {
-    client =
-        new OkHttpClient.Builder()
-            .dns(
-                new Dns() {
-                  @Override
-                  public List<InetAddress> lookup(String hostname) throws UnknownHostException {
-                    throw new UnknownHostException("reason");
-                  }
-                })
-            .eventListenerFactory(loggingEventListenerFactory)
-            .build();
-
-    try {
-      client.newCall(request().build()).execute();
-      fail();
-    } catch (UnknownHostException expected) {
-    }
-
-    logRecorder
-        .assertLogMatch("callStart: Request\\{method=GET, url=" + url + ", tags=\\{\\}\\}")
-        .assertLogMatch("dnsStart: " + url.host())
-        .assertLogMatch("callFailed: java.net.UnknownHostException: reason")
-        .assertNoMoreLogs();
-  }
-
-  @Test
-  public void connectFail() {
-    server.useHttps(handshakeCertificates.sslSocketFactory(), false);
-    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));
-    url = server.url("/");
-
-    try {
-      client.newCall(request().build()).execute();
-      fail();
-    } catch (IOException expected) {
-    }
-
-    logRecorder
-        .assertLogMatch("callStart: Request\\{method=GET, url=" + url + ", tags=\\{\\}\\}")
-        .assertLogMatch("dnsStart: " + url.host())
-        .assertLogMatch("dnsEnd: \\[.+\\]")
-        .assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT")
-        .assertLogMatch("secureConnectStart")
-        .assertLogMatch(
-            "connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: Handshake message sequence violation, 1")
-        .assertLogMatch(
-            "callFailed: javax.net.ssl.SSLProtocolException: Handshake message sequence violation, 1")
-        .assertNoMoreLogs();
-  }
-
-  private Request.Builder request() {
-    return new Request.Builder().url(url);
-  }
-
-  private static class LogRecorder extends HttpLoggingInterceptorTest.LogRecorder {
-    LogRecorder assertLogMatch(String pattern) {
-      return (LogRecorder) super.assertLogMatch("\\[\\d+ ms] " + pattern);
-    }
-  }
-}
diff --git a/okhttp-sse/pom.xml b/okhttp-sse/pom.xml
index 110c3a4456..b46d96f098 100644
--- a/okhttp-sse/pom.xml
+++ b/okhttp-sse/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-sse</artifactId>
@@ -18,11 +18,6 @@
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>okhttp-testing-support</artifactId>
-      <version>${project.version}</version>
-    </dependency>
     <dependency>
       <groupId>com.google.code.findbugs</groupId>
       <artifactId>jsr305</artifactId>
@@ -55,7 +50,6 @@
         <artifactId>maven-javadoc-plugin</artifactId>
         <version>2.10.4</version>
         <configuration>
-          <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>
           <links>
             <link>http://square.github.io/okhttp/javadoc/</link>
           </links>
diff --git a/okhttp-sse/src/main/java/module-info.java b/okhttp-sse/src/main/java/module-info.java
new file mode 100644
index 0000000000..fb62d92288
--- /dev/null
+++ b/okhttp-sse/src/main/java/module-info.java
@@ -0,0 +1,3 @@
+module sse {
+    requires okhttp;
+}
\ No newline at end of file
diff --git a/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java b/okhttp-sse/src/main/java/sse/internal/sse/RealEventSource.java
similarity index 96%
rename from okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java
rename to okhttp-sse/src/main/java/sse/internal/sse/RealEventSource.java
index c49e49f4aa..22d2579c09 100644
--- a/okhttp-sse/src/main/java/okhttp3/internal/sse/RealEventSource.java
+++ b/okhttp-sse/src/main/java/sse/internal/sse/RealEventSource.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.sse;
+package sse.internal.sse;
 
 import java.io.IOException;
 import javax.annotation.Nullable;
@@ -26,8 +26,8 @@
 import okhttp3.Response;
 import okhttp3.ResponseBody;
 import okhttp3.internal.Util;
-import okhttp3.sse.EventSource;
-import okhttp3.sse.EventSourceListener;
+import sse.sse.EventSource;
+import sse.sse.EventSourceListener;
 
 public final class RealEventSource
     implements EventSource, ServerSentEventReader.Callback, Callback {
@@ -47,7 +47,6 @@ public void connect(OkHttpClient client) {
         .eventListener(EventListener.NONE)
         .build();
     call = client.newCall(request);
-    call.timeout().clearTimeout();
     call.enqueue(this);
   }
 
diff --git a/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java b/okhttp-sse/src/main/java/sse/internal/sse/ServerSentEventReader.java
similarity index 99%
rename from okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java
rename to okhttp-sse/src/main/java/sse/internal/sse/ServerSentEventReader.java
index 0e0e775fb6..2eb1c7ac23 100644
--- a/okhttp-sse/src/main/java/okhttp3/internal/sse/ServerSentEventReader.java
+++ b/okhttp-sse/src/main/java/sse/internal/sse/ServerSentEventReader.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.sse;
+package sse.internal.sse;
 
 import java.io.IOException;
 import javax.annotation.Nullable;
diff --git a/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java b/okhttp-sse/src/main/java/sse/internal/sse/package-info.java
similarity index 77%
rename from okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java
rename to okhttp-sse/src/main/java/sse/internal/sse/package-info.java
index afcf5f4f9d..5a072b0cc4 100644
--- a/okhttp-sse/src/main/java/okhttp3/internal/sse/package-info.java
+++ b/okhttp-sse/src/main/java/sse/internal/sse/package-info.java
@@ -1,3 +1,3 @@
 /** Private support classes for server-sent events. */
 @okhttp3.internal.annotations.EverythingIsNonNull
-package okhttp3.internal.sse;
+package sse.internal.sse;
diff --git a/okhttp-sse/src/main/java/okhttp3/sse/EventSource.java b/okhttp-sse/src/main/java/sse/sse/EventSource.java
similarity index 98%
rename from okhttp-sse/src/main/java/okhttp3/sse/EventSource.java
rename to okhttp-sse/src/main/java/sse/sse/EventSource.java
index fe703dc8c0..d2c46b42a4 100644
--- a/okhttp-sse/src/main/java/okhttp3/sse/EventSource.java
+++ b/okhttp-sse/src/main/java/sse/sse/EventSource.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.sse;
+package sse.sse;
 
 import okhttp3.Request;
 
diff --git a/okhttp-sse/src/main/java/okhttp3/sse/EventSourceListener.java b/okhttp-sse/src/main/java/sse/sse/EventSourceListener.java
similarity index 98%
rename from okhttp-sse/src/main/java/okhttp3/sse/EventSourceListener.java
rename to okhttp-sse/src/main/java/sse/sse/EventSourceListener.java
index 4246625eca..ee6614a874 100644
--- a/okhttp-sse/src/main/java/okhttp3/sse/EventSourceListener.java
+++ b/okhttp-sse/src/main/java/sse/sse/EventSourceListener.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.sse;
+package sse.sse;
 
 import javax.annotation.Nullable;
 import okhttp3.Response;
diff --git a/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java b/okhttp-sse/src/main/java/sse/sse/EventSources.java
similarity index 95%
rename from okhttp-sse/src/main/java/okhttp3/sse/EventSources.java
rename to okhttp-sse/src/main/java/sse/sse/EventSources.java
index 77f596c5f2..5a0b64be74 100644
--- a/okhttp-sse/src/main/java/okhttp3/sse/EventSources.java
+++ b/okhttp-sse/src/main/java/sse/sse/EventSources.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.sse;
+package sse.sse;
 
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
-import okhttp3.internal.sse.RealEventSource;
+import sse.internal.sse.RealEventSource;
 
 public final class EventSources {
   public static EventSource.Factory createFactory(final OkHttpClient client) {
diff --git a/okhttp-sse/src/main/java/okhttp3/sse/package-info.java b/okhttp-sse/src/main/java/sse/sse/package-info.java
similarity index 80%
rename from okhttp-sse/src/main/java/okhttp3/sse/package-info.java
rename to okhttp-sse/src/main/java/sse/sse/package-info.java
index 2a5f883883..73b1775074 100644
--- a/okhttp-sse/src/main/java/okhttp3/sse/package-info.java
+++ b/okhttp-sse/src/main/java/sse/sse/package-info.java
@@ -1,3 +1,3 @@
 /** Support for server-sent events. */
 @okhttp3.internal.annotations.EverythingIsNonNull
-package okhttp3.sse;
+package sse.sse;
diff --git a/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java b/okhttp-sse/src/test/java/sse/internal/sse/Event.java
similarity index 98%
rename from okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java
rename to okhttp-sse/src/test/java/sse/internal/sse/Event.java
index 149be0014c..75d0006640 100644
--- a/okhttp-sse/src/test/java/okhttp3/internal/sse/Event.java
+++ b/okhttp-sse/src/test/java/sse/internal/sse/Event.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.sse;
+package sse.internal.sse;
 
 import javax.annotation.Nullable;
 
diff --git a/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java b/okhttp-sse/src/test/java/sse/internal/sse/EventSourceHttpTest.java
similarity index 69%
rename from okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java
rename to okhttp-sse/src/test/java/sse/internal/sse/EventSourceHttpTest.java
index 7f576eece9..2e4db9b3f5 100644
--- a/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java
+++ b/okhttp-sse/src/test/java/sse/internal/sse/EventSourceHttpTest.java
@@ -13,27 +13,25 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.sse;
+package sse.internal.sse;
 
-import java.util.concurrent.TimeUnit;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.sse.EventSource;
-import okhttp3.sse.EventSources;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import sse.sse.EventSource;
+import sse.sse.EventSources;
 import org.junit.After;
 import org.junit.Rule;
 import org.junit.Test;
 
-import static okhttp3.TestUtil.defaultClient;
 import static org.junit.Assert.assertEquals;
 
 public final class EventSourceHttpTest {
   @Rule public final MockWebServer server = new MockWebServer();
 
   private final EventSourceRecorder listener = new EventSourceRecorder();
-  private OkHttpClient client = defaultClient();
+  private final EventSource.Factory factory = EventSources.createFactory(new OkHttpClient());
 
   @After public void after() {
     listener.assertExhausted();
@@ -71,30 +69,10 @@
     listener.assertFailure(null);
   }
 
-  @Test public void callTimeoutIsNotApplied() throws Exception {
-    client = client.newBuilder()
-        .callTimeout(100, TimeUnit.MILLISECONDS)
-        .build();
-
-    server.enqueue(new MockResponse()
-        .setBodyDelay(500, TimeUnit.MILLISECONDS)
-        .setHeader("content-type", "text/event-stream")
-        .setBody("data: hey\n\n"));
-
-    EventSource source = newEventSource();
-
-    assertEquals("/", source.request().url().encodedPath());
-
-    listener.assertOpen();
-    listener.assertEvent(null, null, "hey");
-    listener.assertClose();
-  }
-
   private EventSource newEventSource() {
     Request request = new Request.Builder()
         .url(server.url("/"))
         .build();
-    EventSource.Factory factory = EventSources.createFactory(client);
     return factory.newEventSource(request, listener);
   }
 }
diff --git a/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java b/okhttp-sse/src/test/java/sse/internal/sse/EventSourceRecorder.java
similarity index 97%
rename from okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java
rename to okhttp-sse/src/test/java/sse/internal/sse/EventSourceRecorder.java
index cf4afd4ec9..b58781f7d5 100644
--- a/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java
+++ b/okhttp-sse/src/test/java/sse/internal/sse/EventSourceRecorder.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.sse;
+package sse.internal.sse;
 
 import java.io.IOException;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingDeque;
 import javax.annotation.Nullable;
-import okhttp3.sse.EventSource;
-import okhttp3.sse.EventSourceListener;
+import sse.sse.EventSource;
+import sse.sse.EventSourceListener;
 import okhttp3.Response;
 import okhttp3.internal.platform.Platform;
 
diff --git a/okhttp-sse/src/test/java/okhttp3/internal/sse/ServerSentEventIteratorTest.java b/okhttp-sse/src/test/java/sse/internal/sse/ServerSentEventIteratorTest.java
similarity index 99%
rename from okhttp-sse/src/test/java/okhttp3/internal/sse/ServerSentEventIteratorTest.java
rename to okhttp-sse/src/test/java/sse/internal/sse/ServerSentEventIteratorTest.java
index 697a2d2019..bbb9b83247 100644
--- a/okhttp-sse/src/test/java/okhttp3/internal/sse/ServerSentEventIteratorTest.java
+++ b/okhttp-sse/src/test/java/sse/internal/sse/ServerSentEventIteratorTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.sse;
+package sse.internal.sse;
 
 import java.io.IOException;
 import java.util.ArrayDeque;
diff --git a/okhttp-testing-support/pom.xml b/okhttp-testing-support/pom.xml
index 19363356c3..2293194156 100644
--- a/okhttp-testing-support/pom.xml
+++ b/okhttp-testing-support/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-testing-support</artifactId>
@@ -39,7 +39,7 @@
         <configuration>
           <archive>
             <manifestEntries>
-              <Automatic-Module-Name>okhttp3.testing</Automatic-Module-Name>
+              <Automatic-Module-Name>testingsupport</Automatic-Module-Name>
             </manifestEntries>
           </archive>
         </configuration>
diff --git a/okhttp-testing-support/src/main/java/module-info.java b/okhttp-testing-support/src/main/java/module-info.java
new file mode 100644
index 0000000000..52c0909d00
--- /dev/null
+++ b/okhttp-testing-support/src/main/java/module-info.java
@@ -0,0 +1,5 @@
+module testing{
+    requires okhttp;
+    requires junit;
+    exports testingsupport.testing;
+}
\ No newline at end of file
diff --git a/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java b/okhttp-testing-support/src/main/java/testingsupport/FakeDns.java
similarity index 98%
rename from okhttp-testing-support/src/main/java/okhttp3/FakeDns.java
rename to okhttp-testing-support/src/main/java/testingsupport/FakeDns.java
index e12ea9c622..801dd37705 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/FakeDns.java
+++ b/okhttp-testing-support/src/main/java/testingsupport/FakeDns.java
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package testingsupport;
+
+import okhttp3.Dns;
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
diff --git a/okhttp-testing-support/src/main/java/okhttp3/FakeProxySelector.java b/okhttp-testing-support/src/main/java/testingsupport/FakeProxySelector.java
similarity index 98%
rename from okhttp-testing-support/src/main/java/okhttp3/FakeProxySelector.java
rename to okhttp-testing-support/src/main/java/testingsupport/FakeProxySelector.java
index c7d37f57ea..b2fe9cfd33 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/FakeProxySelector.java
+++ b/okhttp-testing-support/src/main/java/testingsupport/FakeProxySelector.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package testingsupport;
 
 import java.io.IOException;
 import java.net.Proxy;
diff --git a/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java b/okhttp-testing-support/src/main/java/testingsupport/FakeSSLSession.java
similarity index 99%
rename from okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java
rename to okhttp-testing-support/src/main/java/testingsupport/FakeSSLSession.java
index ab67a9f06e..ec0ffc1f7f 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/FakeSSLSession.java
+++ b/okhttp-testing-support/src/main/java/testingsupport/FakeSSLSession.java
@@ -14,7 +14,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package okhttp3;
+package testingsupport;
 
 import java.security.Principal;
 import java.security.cert.Certificate;
diff --git a/okhttp-testing-support/src/main/java/okhttp3/RecordingCookieJar.java b/okhttp-testing-support/src/main/java/testingsupport/RecordingCookieJar.java
similarity index 94%
rename from okhttp-testing-support/src/main/java/okhttp3/RecordingCookieJar.java
rename to okhttp-testing-support/src/main/java/testingsupport/RecordingCookieJar.java
index bd4f9be142..272d584273 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/RecordingCookieJar.java
+++ b/okhttp-testing-support/src/main/java/testingsupport/RecordingCookieJar.java
@@ -13,7 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package testingsupport;
+
+import okhttp3.Cookie;
+import okhttp3.CookieJar;
+import okhttp3.HttpUrl;
 
 import java.util.ArrayDeque;
 import java.util.ArrayList;
diff --git a/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java b/okhttp-testing-support/src/main/java/testingsupport/RecordingHostnameVerifier.java
similarity index 97%
rename from okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java
rename to okhttp-testing-support/src/main/java/testingsupport/RecordingHostnameVerifier.java
index 568b7c518c..fe26632d1b 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/RecordingHostnameVerifier.java
+++ b/okhttp-testing-support/src/main/java/testingsupport/RecordingHostnameVerifier.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package testingsupport;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java b/okhttp-testing-support/src/main/java/testingsupport/internal/io/InMemoryFileSystem.java
similarity index 98%
rename from okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java
rename to okhttp-testing-support/src/main/java/testingsupport/internal/io/InMemoryFileSystem.java
index bb6f519092..176948a3b3 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java
+++ b/okhttp-testing-support/src/main/java/testingsupport/internal/io/InMemoryFileSystem.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.io;
+package testingsupport.internal.io;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -24,6 +24,8 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+
+import okhttp3.internal.io.FileSystem;
 import okio.Buffer;
 import okio.ForwardingSink;
 import okio.ForwardingSource;
diff --git a/okhttp-testing-support/src/main/java/okhttp3/testing/InstallUncaughtExceptionHandlerListener.java b/okhttp-testing-support/src/main/java/testingsupport/testing/InstallUncaughtExceptionHandlerListener.java
similarity index 98%
rename from okhttp-testing-support/src/main/java/okhttp3/testing/InstallUncaughtExceptionHandlerListener.java
rename to okhttp-testing-support/src/main/java/testingsupport/testing/InstallUncaughtExceptionHandlerListener.java
index ae034cd9a6..b4a19a0bd2 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/testing/InstallUncaughtExceptionHandlerListener.java
+++ b/okhttp-testing-support/src/main/java/testingsupport/testing/InstallUncaughtExceptionHandlerListener.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.testing;
+package testingsupport.testing;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
diff --git a/okhttp-tests/pom.xml b/okhttp-tests/pom.xml
index c25a0516b1..024714f310 100644
--- a/okhttp-tests/pom.xml
+++ b/okhttp-tests/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-tests</artifactId>
diff --git a/okhttp-tests/src/test/java/okhttp3/CacheTest.java b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
index 0d9ca9fa75..486a57ba93 100644
--- a/okhttp-tests/src/test/java/okhttp3/CacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
@@ -36,12 +36,13 @@
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSession;
 import okhttp3.internal.Internal;
-import okhttp3.internal.io.InMemoryFileSystem;
+import testingsupport.RecordingCookieJar;
+import testingsupport.internal.io.InMemoryFileSystem;
 import okhttp3.internal.platform.Platform;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
@@ -51,10 +52,11 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import urlconnection.JavaNetCookieJar;
 
 import static okhttp3.TestUtil.defaultClient;
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -2524,7 +2526,7 @@ private RecordedRequest assertConditionallyCached(MockResponse response) throws
 
   @Test public void immutableIsCached() throws Exception {
     server.enqueue(new MockResponse()
-        .addHeader("Cache-Control", "immutable, max-age=10")
+        .addHeader("Cache-Control", "immutable")
         .setBody("A"));
     server.enqueue(new MockResponse()
         .setBody("B"));
@@ -2538,7 +2540,7 @@ private RecordedRequest assertConditionallyCached(MockResponse response) throws
     server.enqueue(new MockResponse()
         .setBody("A"));
     server.enqueue(new MockResponse()
-        .addHeader("Cache-Control", "immutable, max-age=10")
+        .addHeader("Cache-Control", "immutable")
         .setBody("B"));
     server.enqueue(new MockResponse()
         .setBody("C"));
@@ -2549,19 +2551,6 @@ private RecordedRequest assertConditionallyCached(MockResponse response) throws
     assertEquals("B", get(url).body().string());
   }
 
-  @Test public void immutableIsNotCachedBeyondFreshnessLifetime() throws Exception {
-    //      last modified: 115 seconds ago
-    //             served:  15 seconds ago
-    //   default lifetime: (115 - 15) / 10 = 10 seconds
-    //            expires:  10 seconds from served date = 5 seconds ago
-    String lastModifiedDate = formatDate(-115, TimeUnit.SECONDS);
-    RecordedRequest conditionalRequest = assertConditionallyCached(new MockResponse()
-        .addHeader("Cache-Control: immutable")
-        .addHeader("Last-Modified: " + lastModifiedDate)
-        .addHeader("Date: " + formatDate(-15, TimeUnit.SECONDS)));
-    assertEquals(lastModifiedDate, conditionalRequest.getHeader("If-Modified-Since"));
-  }
-
   private void assertFullyCached(MockResponse response) throws Exception {
     server.enqueue(response.setBody("A"));
     server.enqueue(response.setBody("B"));
diff --git a/okhttp-tests/src/test/java/okhttp3/CallTest.java b/okhttp-tests/src/test/java/okhttp3/CallTest.java
index a58bc879c2..6e9c1c9db4 100644
--- a/okhttp-tests/src/test/java/okhttp3/CallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java
@@ -59,17 +59,22 @@
 import javax.net.ssl.SSLSocketFactory;
 import okhttp3.internal.DoubleInetAddressDns;
 import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.SingleInetAddressDns;
 import okhttp3.internal.Util;
 import okhttp3.internal.Version;
 import okhttp3.internal.http.RecordingProxySelector;
-import okhttp3.internal.io.InMemoryFileSystem;
+import testingsupport.FakeDns;
+import testingsupport.FakeProxySelector;
+import testingsupport.RecordingCookieJar;
+import testingsupport.RecordingHostnameVerifier;
+import testingsupport.internal.io.InMemoryFileSystem;
 import okhttp3.mockwebserver.Dispatcher;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
 import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HandshakeCertificates;
-import okhttp3.tls.HeldCertificate;
+import tls.HandshakeCertificates;
+import tls.HeldCertificate;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
@@ -82,11 +87,12 @@
 import org.junit.Test;
 import org.junit.rules.TestRule;
 import org.junit.rules.Timeout;
+import urlconnection.JavaNetCookieJar;
 
 import static java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER;
 import static okhttp3.TestUtil.awaitGarbageCollection;
 import static okhttp3.TestUtil.defaultClient;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -397,7 +403,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     String credential = Credentials.basic("jesse", "secret");
     client = client.newBuilder()
-        .authenticator(new RecordingOkAuthenticator(credential, null))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build();
 
     Response response = client.newCall(request).execute();
@@ -423,7 +429,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     String credential = Credentials.basic("jesse", "secret");
     client = client.newBuilder()
-        .authenticator(new RecordingOkAuthenticator(credential, null))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build();
 
     executeSynchronously("/")
@@ -438,7 +444,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     String credential = Credentials.basic("jesse", "secret");
     client = client.newBuilder()
-        .authenticator(new RecordingOkAuthenticator(credential, null))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build();
 
     try {
@@ -459,7 +465,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setResponseCode(401)
         .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));
 
-    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null, null);
+    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(null);
 
     client = client.newBuilder()
         .authenticator(authenticator)
@@ -1089,6 +1095,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     client = client.newBuilder()
         .hostnameVerifier(new RecordingHostnameVerifier())
+        .dns(new SingleInetAddressDns())
         // Attempt RESTRICTED_TLS then fall back to MODERN_TLS.
         .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS))
         .sslSocketFactory(
@@ -1117,6 +1124,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         // Attempt RESTRICTED_TLS then fall back to MODERN_TLS.
         .connectionSpecs(Arrays.asList(ConnectionSpec.RESTRICTED_TLS, ConnectionSpec.MODERN_TLS))
         .hostnameVerifier(new RecordingHostnameVerifier())
+        .dns(new SingleInetAddressDns())
         .build();
 
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -1158,6 +1166,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     client = client.newBuilder()
         .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT))
         .hostnameVerifier(new RecordingHostnameVerifier())
+        .dns(new SingleInetAddressDns())
         .sslSocketFactory(
             suppressTlsFallbackClientSocketFactory(), handshakeCertificates.trustManager())
         .build();
@@ -1878,7 +1887,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .addHeader("Location: " + server2.url("/b")));
 
     client = client.newBuilder()
-        .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret"), null))
+        .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")))
         .build();
 
     Request request = new Request.Builder().url(server.url("/a")).build();
@@ -2316,7 +2325,7 @@ private void cancelDuringConnect(String scheme) throws Exception {
         .setBody(gzip("abcabcabc"))
         .addHeader("Content-Encoding: gzip"));
     client = client.newBuilder()
-        .authenticator(new RecordingOkAuthenticator("password", null))
+        .authenticator(new RecordingOkAuthenticator("password"))
         .build();
 
     executeSynchronously("/").assertBody("abcabcabc");
@@ -2720,7 +2729,7 @@ private void cancelDuringConnect(String scheme) throws Exception {
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .proxy(server.toProxyAddress())
-        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic"))
+        .proxyAuthenticator(new RecordingOkAuthenticator("password"))
         .hostnameVerifier(new RecordingHostnameVerifier())
         .build();
 
@@ -2753,7 +2762,7 @@ private void cancelDuringConnect(String scheme) throws Exception {
 
     client = client.newBuilder()
         .proxy(server.toProxyAddress())
-        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic"))
+        .proxyAuthenticator(new RecordingOkAuthenticator("password"))
         .build();
 
     Request request = new Request.Builder()
@@ -2792,7 +2801,7 @@ private void cancelDuringConnect(String scheme) throws Exception {
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .proxy(server.toProxyAddress())
-        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic"))
+        .proxyAuthenticator(new RecordingOkAuthenticator("password"))
         .hostnameVerifier(new RecordingHostnameVerifier())
         .build();
 
@@ -2826,7 +2835,7 @@ private void cancelDuringConnect(String scheme) throws Exception {
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .proxy(server.toProxyAddress())
-        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic"))
+        .proxyAuthenticator(new RecordingOkAuthenticator("password"))
         .hostnameVerifier(new RecordingHostnameVerifier())
         .build();
 
@@ -2845,7 +2854,7 @@ private void cancelDuringConnect(String scheme) throws Exception {
    * We used to have that behavior but it is problematic because unrelated requests end up sharing
    * credentials. Worse, that approach leaks proxy credentials to the origin server.
    */
-  @Test public void noPreemptiveProxyAuthorization() throws Exception {
+  @Test public void noProactiveProxyAuthorization() throws Exception {
     server.useHttps(handshakeCertificates.sslSocketFactory(), true);
     server.enqueue(new MockResponse()
         .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END)
@@ -2867,107 +2876,11 @@ private void cancelDuringConnect(String scheme) throws Exception {
     Response response = client.newCall(request).execute();
     assertEquals("response body", response.body().string());
 
-    RecordedRequest connect1 = server.takeRequest();
-    assertNull(connect1.getHeader("Proxy-Authorization"));
-
-    RecordedRequest connect2 = server.takeRequest();
-    assertEquals("password", connect2.getHeader("Proxy-Authorization"));
-  }
-
-  /** Confirm that we can send authentication information without being prompted first. */
-  @Test public void preemptiveProxyAuthentication() throws Exception {
-    server.useHttps(handshakeCertificates.sslSocketFactory(), true);
-    server.enqueue(new MockResponse()
-        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END)
-        .clearHeaders());
-    server.enqueue(new MockResponse()
-        .setBody("encrypted response from the origin server"));
-
-    final String credential = Credentials.basic("jesse", "password1");
-
-    client = client.newBuilder()
-        .sslSocketFactory(
-            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
-        .proxy(server.toProxyAddress())
-        .hostnameVerifier(new RecordingHostnameVerifier())
-        .proxyAuthenticator(new Authenticator() {
-          @Override public Request authenticate(Route route, Response response) {
-            assertEquals("CONNECT", response.request().method());
-            assertEquals(HttpURLConnection.HTTP_PROXY_AUTH, response.code());
-            assertEquals("android.com", response.request().url().host());
-
-            List<Challenge> challenges = response.challenges();
-            assertEquals("OkHttp-Preemptive", challenges.get(0).scheme());
-
-            return response.request().newBuilder()
-                .header("Proxy-Authorization", credential)
-                .build();
-          }
-        })
-        .build();
-
-    Request request = new Request.Builder()
-        .url("https://android.com/foo")
-        .build();
-
-    executeSynchronously(request).assertSuccessful();
-
     RecordedRequest connect = server.takeRequest();
-    assertEquals("CONNECT", connect.getMethod());
-    assertEquals(credential, connect.getHeader("Proxy-Authorization"));
-    assertEquals("/", connect.getPath());
+    assertNull(connect.getHeader("Proxy-Authorization"));
 
     RecordedRequest get = server.takeRequest();
-    assertEquals("GET", get.getMethod());
-    assertNull(get.getHeader("Proxy-Authorization"));
-    assertEquals("/foo", get.getPath());
-  }
-
-  @Test public void preemptiveThenReactiveProxyAuthentication() throws Exception {
-    server.useHttps(handshakeCertificates.sslSocketFactory(), true);
-    server.enqueue(new MockResponse()
-        .setResponseCode(HttpURLConnection.HTTP_PROXY_AUTH)
-        .addHeader("Proxy-Authenticate", "Basic realm=\"localhost\"")
-        .setBody("proxy auth required"));
-    server.enqueue(new MockResponse()
-        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END)
-        .clearHeaders());
-    server.enqueue(new MockResponse());
-
-    final List<String> challengeSchemes = new ArrayList<>();
-    final String credential = Credentials.basic("jesse", "password1");
-
-    client = client.newBuilder()
-        .sslSocketFactory(
-            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
-        .proxy(server.toProxyAddress())
-        .hostnameVerifier(new RecordingHostnameVerifier())
-        .proxyAuthenticator(new Authenticator() {
-          @Override public Request authenticate(Route route, Response response) {
-            List<Challenge> challenges = response.challenges();
-            challengeSchemes.add(challenges.get(0).scheme());
-            return response.request().newBuilder()
-                .header("Proxy-Authorization", credential)
-                .build();
-          }
-        })
-        .build();
-
-    Request request = new Request.Builder()
-        .url("https://android.com/foo")
-        .build();
-
-    executeSynchronously(request).assertSuccessful();
-
-    RecordedRequest connect1 = server.takeRequest();
-    assertEquals("CONNECT", connect1.getMethod());
-    assertEquals(credential, connect1.getHeader("Proxy-Authorization"));
-
-    RecordedRequest connect2 = server.takeRequest();
-    assertEquals("CONNECT", connect2.getMethod());
-    assertEquals(credential, connect2.getHeader("Proxy-Authorization"));
-
-    assertEquals(Arrays.asList("OkHttp-Preemptive", "Basic"), challengeSchemes);
+    assertEquals("password", get.getHeader("Proxy-Authorization"));
   }
 
   @Test public void interceptorGetsHttp2() throws Exception {
diff --git a/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java
index e61cb9f294..e68e2a38e5 100644
--- a/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CertificateChainCleanerTest.java
@@ -22,8 +22,8 @@
 import javax.net.ssl.SSLPeerUnverifiedException;
 import javax.net.ssl.X509TrustManager;
 import okhttp3.internal.tls.CertificateChainCleaner;
-import okhttp3.tls.HandshakeCertificates;
-import okhttp3.tls.HeldCertificate;
+import tls.HandshakeCertificates;
+import tls.HeldCertificate;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java
index 28e2af8423..2740f909a4 100644
--- a/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java
@@ -20,7 +20,7 @@
 import java.util.List;
 import javax.net.ssl.SSLPeerUnverifiedException;
 import okhttp3.CertificatePinner.Pin;
-import okhttp3.tls.HeldCertificate;
+import tls.HeldCertificate;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java
index be741a0b53..fed3e5d18a 100644
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionCoalescingTest.java
@@ -28,12 +28,13 @@
 import javax.net.ssl.SSLSession;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.tls.HeldCertificate;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HeldCertificate;
+import tls.HandshakeCertificates;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
+import testingsupport.FakeDns;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
index d2c778ce65..ae8b0a2f6c 100644
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
@@ -193,7 +193,7 @@ private RealConnection newConnection(ConnectionPool pool, Route route, long idle
 
   private Address newAddress(String name) {
     return new Address(name, 1, Dns.SYSTEM, SocketFactory.getDefault(), null, null, null,
-        new RecordingOkAuthenticator("password", null), null, Collections.<Protocol>emptyList(),
+        new RecordingOkAuthenticator("password"), null, Collections.<Protocol>emptyList(),
         Collections.<ConnectionSpec>emptyList(),
         ProxySelector.getDefault());
   }
diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
index f5c8e75c85..a0e7598187 100644
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
@@ -22,14 +22,15 @@
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestRule;
 import org.junit.rules.Timeout;
+import testingsupport.RecordingHostnameVerifier;
 
 import static okhttp3.TestUtil.defaultClient;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
diff --git a/okhttp-tests/src/test/java/okhttp3/CookiesTest.java b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java
index 17489b045d..94c3c18a52 100644
--- a/okhttp-tests/src/test/java/okhttp3/CookiesTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java
@@ -32,6 +32,7 @@
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
 import org.junit.Test;
+import urlconnection.JavaNetCookieJar;
 
 import static java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER;
 import static okhttp3.TestUtil.defaultClient;
diff --git a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
index 14758e244c..2005c11784 100644
--- a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
@@ -42,11 +42,12 @@
 import okhttp3.RecordingEventListener.SecureConnectStart;
 import okhttp3.internal.DoubleInetAddressDns;
 import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.SingleInetAddressDns;
 import okhttp3.logging.HttpLoggingInterceptor;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
 import org.hamcrest.BaseMatcher;
@@ -58,10 +59,12 @@
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
+import testingsupport.FakeDns;
+import testingsupport.RecordingHostnameVerifier;
 
 import static java.util.Arrays.asList;
 import static okhttp3.TestUtil.defaultClient;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.hamcrest.CoreMatchers.any;
 import static org.hamcrest.CoreMatchers.either;
 import static org.hamcrest.CoreMatchers.equalTo;
@@ -79,6 +82,7 @@
   public static final Matcher<Response> anyResponse = CoreMatchers.any(Response.class);
   @Rule public final MockWebServer server = new MockWebServer();
 
+  private final SingleInetAddressDns singleDns = new SingleInetAddressDns();
   private final RecordingEventListener listener = new RecordingEventListener();
   private final HandshakeCertificates handshakeCertificates = localhost();
 
@@ -87,6 +91,7 @@
 
   @Before public void setUp() {
     client = defaultClient().newBuilder()
+        .dns(singleDns)
         .eventListener(listener)
         .build();
 
@@ -434,8 +439,8 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     server.enqueue(new MockResponse());
 
     FakeDns dns = new FakeDns();
-    dns.set("fakeurl", client.dns().lookup(server.getHostName()));
-    dns.set("www.fakeurl", client.dns().lookup(server.getHostName()));
+    dns.set("fakeurl", singleDns.lookup(server.getHostName()));
+    dns.set("www.fakeurl", singleDns.lookup(server.getHostName()));
 
     client = client.newBuilder()
         .dns(dns)
@@ -510,7 +515,7 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     assertEquals(200, response.code());
     response.body().close();
 
-    InetAddress address = client.dns().lookup(server.getHostName()).get(0);
+    InetAddress address = singleDns.lookup(server.getHostName()).get(0);
     InetSocketAddress expectedAddress = new InetSocketAddress(address, server.getPort());
 
     ConnectStart connectStart = listener.removeUpToEvent(ConnectStart.class);
@@ -538,7 +543,7 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     } catch (IOException expected) {
     }
 
-    InetAddress address = client.dns().lookup(server.getHostName()).get(0);
+    InetAddress address = singleDns.lookup(server.getHostName()).get(0);
     InetSocketAddress expectedAddress = new InetSocketAddress(address, server.getPort());
 
     ConnectStart connectStart = listener.removeUpToEvent(ConnectStart.class);
@@ -590,7 +595,7 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     assertEquals(200, response.code());
     response.body().close();
 
-    InetAddress address = client.dns().lookup(server.getHostName()).get(0);
+    InetAddress address = singleDns.lookup(server.getHostName()).get(0);
     InetSocketAddress expectedAddress = new InetSocketAddress(address, server.getPort());
 
     ConnectStart connectStart = listener.removeUpToEvent(ConnectStart.class);
@@ -648,7 +653,7 @@ private void assertBytesReadWritten(RecordingEventListener listener,
 
     client = client.newBuilder()
         .proxy(server.toProxyAddress())
-        .proxyAuthenticator(new RecordingOkAuthenticator("password", "Basic"))
+        .proxyAuthenticator(new RecordingOkAuthenticator("password"))
         .build();
 
     Call call = client.newCall(new Request.Builder()
diff --git a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
index b4ee085371..18a252bd69 100644
--- a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
@@ -53,7 +53,6 @@
 
   @Test public void durationDefaults() {
     OkHttpClient client = defaultClient();
-    assertEquals(0, client.callTimeoutMillis());
     assertEquals(10_000, client.connectTimeoutMillis());
     assertEquals(10_000, client.readTimeoutMillis());
     assertEquals(10_000, client.writeTimeoutMillis());
@@ -62,10 +61,6 @@
 
   @Test public void timeoutValidRange() {
     OkHttpClient.Builder builder = new OkHttpClient.Builder();
-    try {
-      builder.callTimeout(1, TimeUnit.NANOSECONDS);
-    } catch (IllegalArgumentException ignored) {
-    }
     try {
       builder.connectTimeout(1, TimeUnit.NANOSECONDS);
     } catch (IllegalArgumentException ignored) {
@@ -78,10 +73,6 @@
       builder.readTimeout(1, TimeUnit.NANOSECONDS);
     } catch (IllegalArgumentException ignored) {
     }
-    try {
-      builder.callTimeout(365, TimeUnit.DAYS);
-    } catch (IllegalArgumentException ignored) {
-    }
     try {
       builder.connectTimeout(365, TimeUnit.DAYS);
     } catch (IllegalArgumentException ignored) {
diff --git a/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java b/okhttp-tests/src/test/java/okhttp3/TestUtil.java
similarity index 60%
rename from okhttp-testing-support/src/main/java/okhttp3/TestUtil.java
rename to okhttp-tests/src/test/java/okhttp3/TestUtil.java
index 2a85617dc1..4957087cf7 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java
+++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java
@@ -1,44 +1,16 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 package okhttp3;
 
-import java.net.InetAddress;
 import java.net.InetSocketAddress;
-import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
+import okhttp3.internal.SingleInetAddressDns;
 import okhttp3.internal.http2.Header;
 
 public final class TestUtil {
   public static final InetSocketAddress UNREACHABLE_ADDRESS
       = new InetSocketAddress("198.51.100.1", 8080);
 
-  /**
-   * A network that resolves only one IP address per host. Use this when testing route selection
-   * fallbacks to prevent the host machine's various IP addresses from interfering.
-   */
-  private static final Dns SINGLE_INET_ADDRESS_DNS = new Dns() {
-    @Override public List<InetAddress> lookup(String hostname) throws UnknownHostException {
-      List<InetAddress> addresses = Dns.SYSTEM.lookup(hostname);
-      return Collections.singletonList(addresses.get(0));
-    }
-  };
-
   private TestUtil() {
   }
 
@@ -58,7 +30,7 @@ public static OkHttpClient defaultClient() {
     return new OkHttpClient.Builder()
         .connectionPool(connectionPool)
         .dispatcher(dispatcher)
-        .dns(SINGLE_INET_ADDRESS_DNS) // Prevent unexpected fallback addresses.
+        .dns(new SingleInetAddressDns()) // Prevent unexpected fallback addresses.
         .build();
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
index 963f45f333..6f85fc36a7 100644
--- a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
@@ -67,15 +67,19 @@
 import okhttp3.internal.Internal;
 import okhttp3.internal.RecordingAuthenticator;
 import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.SingleInetAddressDns;
 import okhttp3.internal.Util;
 import okhttp3.internal.Version;
-import okhttp3.internal.huc.OkHttpURLConnection;
+import urlconnection.JavaNetAuthenticator;
+import urlconnection.JavaNetCookieJar;
+import urlconnection.OkUrlFactory;
+import urlconnection.internal.huc.OkHttpURLConnection;
 import okhttp3.internal.platform.Platform;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
 import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.GzipSink;
@@ -86,6 +90,9 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
+import testingsupport.FakeDns;
+import testingsupport.FakeProxySelector;
+import testingsupport.RecordingHostnameVerifier;
 
 import static java.util.Locale.US;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
@@ -94,7 +101,7 @@
 import static okhttp3.internal.Util.UTF_8;
 import static okhttp3.internal.http.StatusLine.HTTP_PERM_REDIRECT;
 import static okhttp3.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
-import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;
+import static urlconnection.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_START;
@@ -102,7 +109,7 @@
 import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_INPUT_AT_END;
 import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_OUTPUT_AT_END;
 import static okhttp3.mockwebserver.SocketPolicy.UPGRADE_TO_SSL_AT_END;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -717,6 +724,7 @@ private void connectViaHttpsReusingConnections(boolean rebuildClient) throws Exc
     server.enqueue(new MockResponse().setSocketPolicy(FAIL_HANDSHAKE));
 
     urlFactory.setClient(urlFactory.client().newBuilder()
+        .dns(new SingleInetAddressDns())
         .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS))
         .hostnameVerifier(new RecordingHostnameVerifier())
         .sslSocketFactory(
@@ -1018,6 +1026,7 @@ private void testConnectViaHttpProxyToHttps(ProxyConfig proxyConfig) throws Exce
     // Configure a single IP address for the host and a single configuration, so we only need one
     // failure to fail permanently.
     urlFactory.setClient(urlFactory.client().newBuilder()
+        .dns(new SingleInetAddressDns())
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .connectionSpecs(Util.immutableList(ConnectionSpec.MODERN_TLS))
@@ -1613,7 +1622,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     String credential = Credentials.basic("jesse", "secret");
     urlFactory.setClient(urlFactory.client().newBuilder()
-        .authenticator(new RecordingOkAuthenticator(credential, null))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build());
 
     connection = urlFactory.open(server.url("/").url());
@@ -2232,7 +2241,7 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
         .addHeader("Location: " + server2.url("/b").url()));
 
     urlFactory.setClient(urlFactory.client().newBuilder()
-        .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret"), null))
+        .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")))
         .build());
     assertContent("Page 2", urlFactory.open(server.url("/a").url()));
 
@@ -2644,6 +2653,9 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
    * https://code.google.com/p/android/issues/detail?id=41576
    */
   @Test public void sameConnectionRedirectAndReuse() throws Exception {
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .dns(new SingleInetAddressDns())
+        .build());
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)
         .setSocketPolicy(SHUTDOWN_INPUT_AT_END)
@@ -3179,7 +3191,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     server.enqueue(new MockResponse().setBody("A"));
 
     String credential = Credentials.basic("jesse", "peanutbutter");
-    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(credential, null);
+    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(credential);
     urlFactory.setClient(urlFactory.client().newBuilder()
         .authenticator(authenticator)
         .build());
@@ -3201,8 +3213,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     server.enqueue(pleaseAuthenticate);
     server.enqueue(new MockResponse().setBody("A"));
 
-    RecordingOkAuthenticator authenticator
-        = new RecordingOkAuthenticator("oauthed abc123", "Bearer");
+    RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator("oauthed abc123");
     urlFactory.setClient(urlFactory.client().newBuilder()
         .authenticator(authenticator)
         .build());
@@ -3226,7 +3237,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     server.enqueue(new MockResponse().setBody("c"));
 
     RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(
-        Credentials.basic("jesse", "peanutbutter"), "Basic");
+        Credentials.basic("jesse", "peanutbutter"));
     urlFactory.setClient(urlFactory.client().newBuilder()
         .authenticator(authenticator)
         .build());
@@ -3247,7 +3258,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
     String credential = Credentials.basic("jesse", "peanutbutter");
     urlFactory.setClient(urlFactory.client().newBuilder()
-        .authenticator(new RecordingOkAuthenticator(credential, null))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build());
 
     connection = urlFactory.open(server.url("/0").url());
@@ -3261,7 +3272,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
     String credential = Credentials.basic("jesse", "peanutbutter");
     urlFactory.setClient(urlFactory.client().newBuilder()
-        .authenticator(new RecordingOkAuthenticator(credential, null))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build());
 
     connection = urlFactory.open(server.url("/").url());
diff --git a/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java
index 603f221397..591a756c0b 100644
--- a/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/WholeOperationTimeoutTest.java
@@ -28,7 +28,6 @@
 import org.junit.Test;
 
 import static okhttp3.TestUtil.defaultClient;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
@@ -42,27 +41,6 @@
 
   private OkHttpClient client = defaultClient();
 
-  @Test public void defaultConfigIsNoTimeout() throws Exception {
-    Request request = new Request.Builder()
-        .url(server.url("/"))
-        .build();
-    Call call = client.newCall(request);
-    assertEquals(0, call.timeout().timeoutNanos());
-  }
-
-  @Test public void configureClientDefault() throws Exception {
-    Request request = new Request.Builder()
-        .url(server.url("/"))
-        .build();
-
-    OkHttpClient timeoutClient = client.newBuilder()
-        .callTimeout(456, TimeUnit.MILLISECONDS)
-        .build();
-
-    Call call = timeoutClient.newCall(request);
-    assertEquals(TimeUnit.MILLISECONDS.toNanos(456), call.timeout().timeoutNanos());
-  }
-
   @Test public void timeoutWritingRequest() throws Exception {
     server.enqueue(new MockResponse());
 
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java b/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
index 126fce4d7e..2464a910b4 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
@@ -18,9 +18,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
-import javax.annotation.Nullable;
 import okhttp3.Authenticator;
-import okhttp3.Challenge;
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.Route;
@@ -28,12 +26,10 @@
 public final class RecordingOkAuthenticator implements Authenticator {
   public final List<Response> responses = new ArrayList<>();
   public final List<Route> routes = new ArrayList<>();
-  public @Nullable String credential;
-  public @Nullable String scheme;
+  public final String credential;
 
-  public RecordingOkAuthenticator(@Nullable String credential, @Nullable String scheme) {
+  public RecordingOkAuthenticator(String credential) {
     this.credential = credential;
-    this.scheme = scheme;
   }
 
   public Response onlyResponse() {
@@ -53,21 +49,10 @@ public Route onlyRoute() {
     responses.add(response);
     routes.add(route);
 
-    if (!schemeMatches(response) || credential == null) return null;
-
+    if (credential == null) return null;
     String header = response.code() == 407 ? "Proxy-Authorization" : "Authorization";
     return response.request().newBuilder()
         .addHeader(header, credential)
         .build();
   }
-
-  private boolean schemeMatches(Response response) {
-    if (scheme == null) return true;
-
-    for (Challenge challenge : response.challenges()) {
-      if (challenge.scheme().equalsIgnoreCase(scheme)) return true;
-    }
-
-    return false;
-  }
 }
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/SingleInetAddressDns.java b/okhttp-tests/src/test/java/okhttp3/internal/SingleInetAddressDns.java
new file mode 100644
index 0000000000..03e8ce08e9
--- /dev/null
+++ b/okhttp-tests/src/test/java/okhttp3/internal/SingleInetAddressDns.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Collections;
+import java.util.List;
+import okhttp3.Dns;
+
+/**
+ * A network that resolves only one IP address per host. Use this when testing route selection
+ * fallbacks to prevent the host machine's various IP addresses from interfering.
+ */
+public class SingleInetAddressDns implements Dns {
+  @Override public List<InetAddress> lookup(String hostname) throws UnknownHostException {
+    List<InetAddress> addresses = Dns.SYSTEM.lookup(hostname);
+    return Collections.singletonList(addresses.get(0));
+  }
+}
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java
index e366e4081b..e446865242 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/ConnectionSpecSelectorTest.java
@@ -25,10 +25,10 @@
 import okhttp3.ConnectionSpec;
 import okhttp3.TlsVersion;
 import okhttp3.internal.Internal;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import org.junit.Test;
 
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
index 6c4a0d2d9a..d974d122ee 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
@@ -34,17 +34,17 @@
 import okhttp3.Authenticator;
 import okhttp3.ConnectionSpec;
 import okhttp3.EventListener;
-import okhttp3.FakeDns;
+import testingsupport.FakeDns;
 import okhttp3.Protocol;
 import okhttp3.Route;
 import okhttp3.internal.Util;
 import okhttp3.internal.http.RecordingProxySelector;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import org.junit.Before;
 import org.junit.Test;
 
 import static java.net.Proxy.NO_PROXY;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertSame;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
index aad2bfc8dd..36d5f1a732 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
@@ -27,7 +27,7 @@
 import okhttp3.DelegatingServerSocketFactory;
 import okhttp3.DelegatingSocketFactory;
 import okhttp3.OkHttpClient;
-import okhttp3.OkUrlFactory;
+import urlconnection.OkUrlFactory;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okio.Buffer;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
index ed2b05085f..8d4615c2bb 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
@@ -28,7 +28,7 @@
 import okhttp3.DelegatingServerSocketFactory;
 import okhttp3.DelegatingSocketFactory;
 import okhttp3.OkHttpClient;
-import okhttp3.OkUrlFactory;
+import urlconnection.OkUrlFactory;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okio.Buffer;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
index eb0acf4963..3333b5741e 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
@@ -41,8 +41,8 @@
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
 import okhttp3.Protocol;
-import okhttp3.RecordingCookieJar;
-import okhttp3.RecordingHostnameVerifier;
+import testingsupport.RecordingCookieJar;
+import testingsupport.RecordingHostnameVerifier;
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.Response;
@@ -51,6 +51,7 @@
 import okhttp3.TestUtil;
 import okhttp3.internal.DoubleInetAddressDns;
 import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.SingleInetAddressDns;
 import okhttp3.internal.Util;
 import okhttp3.internal.connection.RealConnection;
 import okhttp3.mockwebserver.Dispatcher;
@@ -60,7 +61,7 @@
 import okhttp3.mockwebserver.QueueDispatcher;
 import okhttp3.mockwebserver.RecordedRequest;
 import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.GzipSink;
@@ -78,7 +79,7 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static okhttp3.TestUtil.defaultClient;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
@@ -124,6 +125,7 @@ private static OkHttpClient buildH2PriorKnowledgeClient() {
   private static OkHttpClient buildHttp2Client() {
     return defaultClient().newBuilder()
         .protocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1))
+        .dns(new SingleInetAddressDns())
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .hostnameVerifier(new RecordingHostnameVerifier())
@@ -432,7 +434,7 @@ private void waitForDataFrames(int dataLength) throws Exception {
 
     String credential = Credentials.basic("username", "password");
     client = client.newBuilder()
-        .authenticator(new RecordingOkAuthenticator(credential, "Basic"))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build();
 
     Call call = client.newCall(new Request.Builder()
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
index ffb116eea7..1b7e775725 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
@@ -30,22 +30,22 @@
 import okhttp3.Call;
 import okhttp3.CertificatePinner;
 import okhttp3.OkHttpClient;
-import okhttp3.RecordingHostnameVerifier;
+import testingsupport.RecordingHostnameVerifier;
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.internal.platform.Platform;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HeldCertificate;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HeldCertificate;
+import tls.HandshakeCertificates;
 import org.junit.Rule;
 import org.junit.Test;
 
 import static okhttp3.TestUtil.defaultClient;
 import static okhttp3.internal.platform.PlatformTest.getPlatform;
-import static okhttp3.tls.internal.TlsUtil.newKeyManager;
-import static okhttp3.tls.internal.TlsUtil.newTrustManager;
+import static tls.internal.TlsUtil.newKeyManager;
+import static tls.internal.TlsUtil.newTrustManager;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
index ff3fb12270..6fca2a4261 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
@@ -36,16 +36,16 @@
 import okhttp3.Response;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.tls.HeldCertificate;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HeldCertificate;
+import tls.HandshakeCertificates;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 
 import static okhttp3.TestUtil.defaultClient;
 import static okhttp3.internal.platform.PlatformTest.getPlatform;
-import static okhttp3.tls.internal.TlsUtil.newKeyManager;
-import static okhttp3.tls.internal.TlsUtil.newTrustManager;
+import static tls.internal.TlsUtil.newKeyManager;
+import static tls.internal.TlsUtil.newTrustManager;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
index 6dd5bbbd7c..27d280226d 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
@@ -23,7 +23,7 @@
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSession;
 import javax.security.auth.x500.X500Principal;
-import okhttp3.FakeSSLSession;
+import testingsupport.FakeSSLSession;
 import okhttp3.internal.Util;
 import org.junit.Ignore;
 import org.junit.Test;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
index 1e17baa9c2..20d8ac3105 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
@@ -17,10 +17,8 @@
 
 import java.io.EOFException;
 import java.io.IOException;
-import java.net.HttpURLConnection;
 import java.net.ProtocolException;
 import java.net.SocketTimeoutException;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Random;
 import java.util.concurrent.CountDownLatch;
@@ -29,9 +27,8 @@
 import java.util.logging.Logger;
 import okhttp3.Interceptor;
 import okhttp3.OkHttpClient;
-import okhttp3.Protocol;
 import okhttp3.RecordingEventListener;
-import okhttp3.RecordingHostnameVerifier;
+import testingsupport.RecordingHostnameVerifier;
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.TestLogHandler;
@@ -42,7 +39,7 @@
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
 import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.tls.HandshakeCertificates;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.ByteString;
 import org.junit.After;
@@ -52,7 +49,7 @@
 
 import static okhttp3.TestUtil.defaultClient;
 import static okhttp3.TestUtil.repeat;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -680,53 +677,6 @@
     assertEquals(Collections.emptyList(), listener.recordedEventTypes());
   }
 
-  @Test public void callTimeoutIsNotApplied() throws Exception {
-    client = client.newBuilder()
-        .callTimeout(100, TimeUnit.MILLISECONDS)
-        .build();
-
-    webServer.enqueue(new MockResponse()
-        .withWebSocketUpgrade(serverListener));
-    newWebSocket();
-
-    clientListener.assertOpen();
-    WebSocket server = serverListener.assertOpen();
-
-    Thread.sleep(500);
-
-    server.send("Hello, WebSockets!");
-    clientListener.assertTextMessage("Hello, WebSockets!");
-  }
-
-  /**
-   * We had a bug where web socket connections were leaked if the HTTP connection upgrade was not
-   * successful. This test confirms that connections are released back to the connection pool!
-   * https://github.com/square/okhttp/issues/4258
-   */
-  @Test public void webSocketConnectionIsReleased() throws Exception {
-    // This test assumes HTTP/1.1 pooling semantics.
-    client = client.newBuilder()
-        .protocols(Arrays.asList(Protocol.HTTP_1_1))
-        .build();
-
-    webServer.enqueue(new MockResponse()
-        .setResponseCode(HttpURLConnection.HTTP_NOT_FOUND)
-        .setBody("not found!"));
-    webServer.enqueue(new MockResponse());
-
-    newWebSocket();
-    clientListener.assertFailure();
-
-    Request regularRequest = new Request.Builder()
-        .url(webServer.url("/"))
-        .build();
-    Response response = client.newCall(regularRequest).execute();
-    response.close();
-
-    assertEquals(0, webServer.takeRequest().getSequenceNumber());
-    assertEquals(1, webServer.takeRequest().getSequenceNumber());
-  }
-
   private MockResponse upgradeResponse(RecordedRequest request) {
     String key = request.getHeader("Sec-WebSocket-Key");
     return new MockResponse()
diff --git a/okhttp-tls/pom.xml b/okhttp-tls/pom.xml
index dfdde62651..c8002f45f4 100644
--- a/okhttp-tls/pom.xml
+++ b/okhttp-tls/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-tls</artifactId>
@@ -31,9 +31,8 @@
       <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
-      <scope>test</scope>
+      <!--<scope>compile</scope>-->
     </dependency>
-
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
@@ -48,7 +47,6 @@
         <artifactId>maven-javadoc-plugin</artifactId>
         <version>2.10.4</version>
         <configuration>
-          <excludePackageNames>okhttp3.tls.internal:okhttp3.tls.internal.*</excludePackageNames>
           <links>
             <link>http://square.github.io/okhttp/javadoc/</link>
           </links>
diff --git a/okhttp-tls/src/main/java/module-info.java b/okhttp-tls/src/main/java/module-info.java
new file mode 100644
index 0000000000..ec5bbf7aaa
--- /dev/null
+++ b/okhttp-tls/src/main/java/module-info.java
@@ -0,0 +1,7 @@
+module tls {
+    requires testing;
+    requires okhttp;
+    requires org.bouncycastle.provider;
+    exports tls;
+    exports tls.internal;
+}
\ No newline at end of file
diff --git a/okhttp-tls/src/main/java/okhttp3/tls/HandshakeCertificates.java b/okhttp-tls/src/main/java/tls/HandshakeCertificates.java
similarity index 98%
rename from okhttp-tls/src/main/java/okhttp3/tls/HandshakeCertificates.java
rename to okhttp-tls/src/main/java/tls/HandshakeCertificates.java
index 34e9e9a497..5f279a29b8 100644
--- a/okhttp-tls/src/main/java/okhttp3/tls/HandshakeCertificates.java
+++ b/okhttp-tls/src/main/java/tls/HandshakeCertificates.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.tls;
+package tls;
 
 import java.security.GeneralSecurityException;
 import java.security.KeyManagementException;
@@ -33,8 +33,8 @@
 import okhttp3.internal.Util;
 import okhttp3.internal.platform.Platform;
 
-import static okhttp3.tls.internal.TlsUtil.newKeyManager;
-import static okhttp3.tls.internal.TlsUtil.newTrustManager;
+import static tls.internal.TlsUtil.newKeyManager;
+import static tls.internal.TlsUtil.newTrustManager;
 
 /**
  * Certificates to identify which peers to trust and also to earn the trust of those peers in kind.
diff --git a/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java b/okhttp-tls/src/main/java/tls/HeldCertificate.java
similarity index 99%
rename from okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java
rename to okhttp-tls/src/main/java/tls/HeldCertificate.java
index 8709dc1438..ac47bb284b 100644
--- a/okhttp-tls/src/main/java/okhttp3/tls/HeldCertificate.java
+++ b/okhttp-tls/src/main/java/tls/HeldCertificate.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.tls;
+package tls;
 
 import java.io.IOException;
 import java.math.BigInteger;
@@ -332,7 +332,7 @@ public Builder certificateAuthority(int maxIntermediateCas) {
      * 3.11.0. Note that the default may change in future releases.
      */
     public Builder ecdsa256() {
-      keyAlgorithm = "EC";
+      keyAlgorithm = "ECDSA";
       keySize = 256;
       return this;
     }
@@ -401,7 +401,7 @@ public HeldCertificate build() {
 
       try {
         X509Certificate certificate = generator.generateX509Certificate(
-            signedByKeyPair.getPrivate());
+            signedByKeyPair.getPrivate(), "BC");
         return new HeldCertificate(heldKeyPair, certificate);
       } catch (GeneralSecurityException e) {
         throw new AssertionError(e);
@@ -423,7 +423,7 @@ private X500Principal buildSubject() {
 
     private KeyPair generateKeyPair() {
       try {
-        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(keyAlgorithm);
+        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(keyAlgorithm, "BC");
         keyPairGenerator.initialize(keySize, new SecureRandom());
         return keyPairGenerator.generateKeyPair();
       } catch (GeneralSecurityException e) {
diff --git a/okhttp-tls/src/main/java/okhttp3/tls/internal/TlsUtil.java b/okhttp-tls/src/main/java/tls/internal/TlsUtil.java
similarity index 97%
rename from okhttp-tls/src/main/java/okhttp3/tls/internal/TlsUtil.java
rename to okhttp-tls/src/main/java/tls/internal/TlsUtil.java
index b127b36861..67c24c1784 100644
--- a/okhttp-tls/src/main/java/okhttp3/tls/internal/TlsUtil.java
+++ b/okhttp-tls/src/main/java/tls/internal/TlsUtil.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.tls.internal;
+package tls.internal;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -31,8 +31,9 @@
 import javax.net.ssl.TrustManagerFactory;
 import javax.net.ssl.X509KeyManager;
 import javax.net.ssl.X509TrustManager;
-import okhttp3.tls.HeldCertificate;
-import okhttp3.tls.HandshakeCertificates;
+
+import tls.HandshakeCertificates;
+import tls.HeldCertificate;
 
 public final class TlsUtil {
   public static final char[] password = "password".toCharArray();
diff --git a/okhttp-tls/src/main/java/okhttp3/tls/package-info.java b/okhttp-tls/src/main/java/tls/package-info.java
similarity index 83%
rename from okhttp-tls/src/main/java/okhttp3/tls/package-info.java
rename to okhttp-tls/src/main/java/tls/package-info.java
index 061e524be6..5a5aea15bc 100644
--- a/okhttp-tls/src/main/java/okhttp3/tls/package-info.java
+++ b/okhttp-tls/src/main/java/tls/package-info.java
@@ -1,3 +1,3 @@
 /** OkHttp Transport Layer Security (TLS) library. */
 @okhttp3.internal.annotations.EverythingIsNonNull
-package okhttp3.tls;
+package tls;
diff --git a/okhttp-tls/src/test/java/okhttp3/tls/HandshakeCertificatesTest.java b/okhttp-tls/src/test/java/tls/HandshakeCertificatesTest.java
similarity index 99%
rename from okhttp-tls/src/test/java/okhttp3/tls/HandshakeCertificatesTest.java
rename to okhttp-tls/src/test/java/tls/HandshakeCertificatesTest.java
index c2e4f3a45f..b0b22e5daf 100644
--- a/okhttp-tls/src/test/java/okhttp3/tls/HandshakeCertificatesTest.java
+++ b/okhttp-tls/src/test/java/tls/HandshakeCertificatesTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.tls;
+package tls;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -34,6 +34,8 @@
 import javax.net.ssl.SSLSocket;
 import okhttp3.Handshake;
 import okhttp3.internal.Util;
+import tls.HandshakeCertificates;
+import tls.HeldCertificate;
 import okio.ByteString;
 import org.junit.After;
 import org.junit.Before;
diff --git a/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java b/okhttp-tls/src/test/java/tls/HeldCertificateTest.java
similarity index 97%
rename from okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java
rename to okhttp-tls/src/test/java/tls/HeldCertificateTest.java
index ffec150f32..2e6a3cb42b 100644
--- a/okhttp-tls/src/test/java/okhttp3/tls/HeldCertificateTest.java
+++ b/okhttp-tls/src/test/java/tls/HeldCertificateTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.tls;
+package tls;
 
 import java.math.BigInteger;
 import java.security.KeyFactory;
@@ -27,6 +27,8 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
+
+import tls.HeldCertificate;
 import okio.ByteString;
 import org.bouncycastle.asn1.x509.GeneralName;
 import org.junit.Test;
@@ -52,6 +54,9 @@
     long durationMillis = TimeUnit.MINUTES.toMillis(60 * 24);
     assertEquals((double) now, certificate.getNotBefore().getTime(), deltaMillis);
     assertEquals((double) now + durationMillis, certificate.getNotAfter().getTime(), deltaMillis);
+
+    System.out.println(ByteString.of(heldCertificate.keyPair().getPublic().getEncoded()).base64());
+    System.out.println(ByteString.of(heldCertificate.keyPair().getPrivate().getEncoded()).base64());
   }
 
   @Test public void customInterval() {
diff --git a/okhttp-urlconnection/pom.xml b/okhttp-urlconnection/pom.xml
index 86537f25b8..249a90de04 100644
--- a/okhttp-urlconnection/pom.xml
+++ b/okhttp-urlconnection/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-urlconnection</artifactId>
diff --git a/okhttp-urlconnection/src/main/java/module-info.java b/okhttp-urlconnection/src/main/java/module-info.java
new file mode 100644
index 0000000000..6dc14b06f7
--- /dev/null
+++ b/okhttp-urlconnection/src/main/java/module-info.java
@@ -0,0 +1,6 @@
+module urlconnection {
+    requires okhttp;
+    exports urlconnection;
+    exports urlconnection.internal;
+    exports urlconnection.internal.huc;
+}
\ No newline at end of file
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java b/okhttp-urlconnection/src/main/java/urlconnection/JavaNetAuthenticator.java
similarity index 98%
rename from okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java
rename to okhttp-urlconnection/src/main/java/urlconnection/JavaNetAuthenticator.java
index 2649510d35..54e8d8652a 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/JavaNetAuthenticator.java
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package urlconnection;
+
+import okhttp3.*;
 
 import java.io.IOException;
 import java.net.Authenticator.RequestorType;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java b/okhttp-urlconnection/src/main/java/urlconnection/JavaNetCookieJar.java
similarity index 97%
rename from okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java
rename to okhttp-urlconnection/src/main/java/urlconnection/JavaNetCookieJar.java
index 5d4f671a31..37e67ffba9 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/JavaNetCookieJar.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package urlconnection;
 
 import java.io.IOException;
 import java.net.CookieHandler;
@@ -22,6 +22,10 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+
+import okhttp3.Cookie;
+import okhttp3.CookieJar;
+import okhttp3.HttpUrl;
 import okhttp3.internal.platform.Platform;
 
 import static okhttp3.internal.Util.delimiterOffset;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java b/okhttp-urlconnection/src/main/java/urlconnection/OkUrlFactory.java
similarity index 94%
rename from okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
rename to okhttp-urlconnection/src/main/java/urlconnection/OkUrlFactory.java
index 0bbe613492..e85348e34f 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/OkUrlFactory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package urlconnection;
 
 import java.net.HttpURLConnection;
 import java.net.Proxy;
@@ -21,9 +21,11 @@
 import java.net.URLConnection;
 import java.net.URLStreamHandler;
 import java.net.URLStreamHandlerFactory;
-import okhttp3.internal.URLFilter;
-import okhttp3.internal.huc.OkHttpURLConnection;
-import okhttp3.internal.huc.OkHttpsURLConnection;
+
+import okhttp3.OkHttpClient;
+import urlconnection.internal.URLFilter;
+import urlconnection.internal.huc.OkHttpURLConnection;
+import urlconnection.internal.huc.OkHttpsURLConnection;
 
 /**
  * @deprecated OkHttp will be dropping its ability to be used with {@link HttpURLConnection} in an
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetHeaders.java b/okhttp-urlconnection/src/main/java/urlconnection/internal/JavaNetHeaders.java
similarity index 98%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetHeaders.java
rename to okhttp-urlconnection/src/main/java/urlconnection/internal/JavaNetHeaders.java
index 0b7a02e1f9..aafe443339 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetHeaders.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/internal/JavaNetHeaders.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal;
+package urlconnection.internal;
 
 import java.util.ArrayList;
 import java.util.Collections;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/URLFilter.java b/okhttp-urlconnection/src/main/java/urlconnection/internal/URLFilter.java
similarity index 97%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/URLFilter.java
rename to okhttp-urlconnection/src/main/java/urlconnection/internal/URLFilter.java
index 3b077f8bc4..05458e38e8 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/URLFilter.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/internal/URLFilter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal;
+package urlconnection.internal;
 import java.io.IOException;
 import java.net.URL;
 
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/BufferedRequestBody.java b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/BufferedRequestBody.java
similarity index 98%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/huc/BufferedRequestBody.java
rename to okhttp-urlconnection/src/main/java/urlconnection/internal/huc/BufferedRequestBody.java
index b4b2f68347..fed2459ab9 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/BufferedRequestBody.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/BufferedRequestBody.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.huc;
+package urlconnection.internal.huc;
 
 import java.io.IOException;
 import okhttp3.Request;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/DelegatingHttpsURLConnection.java
similarity index 98%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java
rename to okhttp-urlconnection/src/main/java/urlconnection/internal/huc/DelegatingHttpsURLConnection.java
index a051bf2198..3281ee25bc 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/DelegatingHttpsURLConnection.java
@@ -14,7 +14,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package okhttp3.internal.huc;
+package urlconnection.internal.huc;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -38,10 +38,10 @@
  * Implement an HTTPS connection by delegating to an HTTP connection for everything but the
  * HTTPS-specific stuff.
  */
-abstract class DelegatingHttpsURLConnection extends HttpsURLConnection {
+public abstract class DelegatingHttpsURLConnection extends HttpsURLConnection {
   private final HttpURLConnection delegate;
 
-  DelegatingHttpsURLConnection(HttpURLConnection delegate) {
+  public DelegatingHttpsURLConnection(HttpURLConnection delegate) {
     super(delegate.getURL());
     this.delegate = delegate;
   }
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OkHttpURLConnection.java
similarity index 99%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
rename to okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OkHttpURLConnection.java
index 31e532d0ad..1ebecaaab5 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OkHttpURLConnection.java
@@ -14,7 +14,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package okhttp3.internal.huc;
+package urlconnection.internal.huc;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -50,8 +50,8 @@
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.internal.Internal;
-import okhttp3.internal.JavaNetHeaders;
-import okhttp3.internal.URLFilter;
+import urlconnection.internal.JavaNetHeaders;
+import urlconnection.internal.URLFilter;
 import okhttp3.internal.Version;
 import okhttp3.internal.http.HttpDate;
 import okhttp3.internal.http.HttpHeaders;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OkHttpsURLConnection.java
similarity index 97%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java
rename to okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OkHttpsURLConnection.java
index 9dc40b80a2..22fbd7063d 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OkHttpsURLConnection.java
@@ -14,14 +14,14 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package okhttp3.internal.huc;
+package urlconnection.internal.huc;
 
 import java.net.URL;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSocketFactory;
 import okhttp3.Handshake;
 import okhttp3.OkHttpClient;
-import okhttp3.internal.URLFilter;
+import urlconnection.internal.URLFilter;
 
 public final class OkHttpsURLConnection extends DelegatingHttpsURLConnection {
   private final OkHttpURLConnection delegate;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OutputStreamRequestBody.java
similarity index 99%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java
rename to okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OutputStreamRequestBody.java
index 6f4e8ef9e9..ff4c63e5e1 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/OutputStreamRequestBody.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.huc;
+package urlconnection.internal.huc;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/StreamedRequestBody.java
similarity index 97%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java
rename to okhttp-urlconnection/src/main/java/urlconnection/internal/huc/StreamedRequestBody.java
index 201ab09b66..2199eb439c 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/StreamedRequestBody.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/internal/huc/StreamedRequestBody.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.huc;
+package urlconnection.internal.huc;
 
 import java.io.IOException;
 import okhttp3.internal.http.UnrepeatableRequestBody;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/package-info.java b/okhttp-urlconnection/src/main/java/urlconnection/package-info.java
similarity index 79%
rename from okhttp-urlconnection/src/main/java/okhttp3/package-info.java
rename to okhttp-urlconnection/src/main/java/urlconnection/package-info.java
index 1ded0dc6e6..ebba0b55ff 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/package-info.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/package-info.java
@@ -1,3 +1,3 @@
 /** Support for JDK provider APIs. */
 @okhttp3.internal.annotations.EverythingIsNonNull
-package okhttp3;
+package urlconnection;
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java b/okhttp-urlconnection/src/test/java/urlconnection/OkUrlFactoryTest.java
similarity index 96%
rename from okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
rename to okhttp-urlconnection/src/test/java/urlconnection/OkUrlFactoryTest.java
index 914725fb84..850d8b385e 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
+++ b/okhttp-urlconnection/src/test/java/urlconnection/OkUrlFactoryTest.java
@@ -1,4 +1,4 @@
-package okhttp3;
+package urlconnection;
 
 import java.io.File;
 import java.io.IOException;
@@ -14,13 +14,16 @@
 import java.util.TimeZone;
 import java.util.concurrent.TimeUnit;
 import javax.net.ssl.HttpsURLConnection;
-import okhttp3.internal.URLFilter;
-import okhttp3.internal.huc.OkHttpURLConnection;
-import okhttp3.internal.io.InMemoryFileSystem;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
-import okhttp3.tls.HandshakeCertificates;
+
+import okhttp3.Cache;
+import okhttp3.OkHttpClient;
+import urlconnection.internal.URLFilter;
+import urlconnection.internal.huc.OkHttpURLConnection;
+import testingsupport.internal.io.InMemoryFileSystem;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
+import tls.HandshakeCertificates;
 import okio.BufferedSource;
 import org.junit.After;
 import org.junit.Before;
@@ -28,7 +31,7 @@
 import org.junit.Test;
 
 import static java.nio.charset.StandardCharsets.US_ASCII;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static tls.internal.TlsUtil.localhost;
 import static okio.Okio.buffer;
 import static okio.Okio.source;
 import static org.junit.Assert.assertEquals;
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java b/okhttp-urlconnection/src/test/java/urlconnection/UrlConnectionCacheTest.java
similarity index 99%
rename from okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
rename to okhttp-urlconnection/src/test/java/urlconnection/UrlConnectionCacheTest.java
index 23ff40c89e..b38c5a842b 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
+++ b/okhttp-urlconnection/src/test/java/urlconnection/UrlConnectionCacheTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package okhttp3;
+package urlconnection;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -41,13 +41,16 @@
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLSession;
+
+import okhttp3.*;
 import okhttp3.internal.Internal;
-import okhttp3.internal.io.InMemoryFileSystem;
+import testingsupport.RecordingCookieJar;
+import testingsupport.internal.io.InMemoryFileSystem;
 import okhttp3.internal.platform.Platform;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
-import okhttp3.tls.HandshakeCertificates;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
+import tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.GzipSink;
@@ -57,8 +60,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
-import static okhttp3.tls.internal.TlsUtil.localhost;
+import static mockwebserver.SocketPolicy.DISCONNECT_AT_END;
+import static tls.internal.TlsUtil.localhost;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/internal/huc/URLEncodingTest.java b/okhttp-urlconnection/src/test/java/urlconnection/internal/huc/URLEncodingTest.java
similarity index 98%
rename from okhttp-urlconnection/src/test/java/okhttp3/internal/huc/URLEncodingTest.java
rename to okhttp-urlconnection/src/test/java/urlconnection/internal/huc/URLEncodingTest.java
index ec0de83e52..271fb7e9b1 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/internal/huc/URLEncodingTest.java
+++ b/okhttp-urlconnection/src/test/java/urlconnection/internal/huc/URLEncodingTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package okhttp3.internal.huc;
+package urlconnection.internal.huc;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -23,7 +23,7 @@
 import java.net.URL;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.OkHttpClient;
-import okhttp3.OkUrlFactory;
+import urlconnection.OkUrlFactory;
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.internal.Internal;
diff --git a/okhttp/pom.xml b/okhttp/pom.xml
index a16a6c1b27..def08bfc15 100644
--- a/okhttp/pom.xml
+++ b/okhttp/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp</artifactId>
@@ -20,23 +20,23 @@
     <dependency>
       <groupId>org.conscrypt</groupId>
       <artifactId>conscrypt-openjdk-uber</artifactId>
-      <scope>provided</scope>
+      <!--<scope>provided</scope>-->
     </dependency>
     <dependency>
       <groupId>com.google.android</groupId>
       <artifactId>android</artifactId>
-      <scope>provided</scope>
+      <!--<scope>provided</scope>-->
     </dependency>
     <dependency>
       <groupId>com.google.code.findbugs</groupId>
       <artifactId>jsr305</artifactId>
-      <scope>provided</scope>
+      <!--<scope>provided</scope>-->
     </dependency>
     <dependency>
       <groupId>org.codehaus.mojo</groupId>
       <artifactId>animal-sniffer-annotations</artifactId>
-      <version>1.17</version>
-      <scope>provided</scope>
+      <version>1.17-SNAPSHOT</version>
+      <!--<scope>provided</scope>-->
     </dependency>
   </dependencies>
 
diff --git a/okhttp/src/main/java/module-info.java b/okhttp/src/main/java/module-info.java
new file mode 100644
index 0000000000..6dd85db317
--- /dev/null
+++ b/okhttp/src/main/java/module-info.java
@@ -0,0 +1,19 @@
+module okhttp {
+    requires transitive okio;
+    requires transitive java.logging;
+    requires jsr305;
+    requires conscrypt.openjdk.uber;
+    requires animal.sniffer.annotations;
+    requires android;
+    exports okhttp3;
+    opens okhttp3 to okhttp.urlconnection;
+    exports okhttp3.internal;
+    exports okhttp3.internal.cache;
+    exports okhttp3.internal.http;
+    exports okhttp3.internal.http2;
+    exports okhttp3.internal.platform;
+    exports okhttp3.internal.annotations;
+    exports okhttp3.internal.publicsuffix;
+    exports okhttp3.internal.io;
+    exports okhttp3.internal.ws;
+}
\ No newline at end of file
diff --git a/okhttp/src/main/java/okhttp3/Authenticator.java b/okhttp/src/main/java/okhttp3/Authenticator.java
index 10482ffead..016d482005 100644
--- a/okhttp/src/main/java/okhttp3/Authenticator.java
+++ b/okhttp/src/main/java/okhttp3/Authenticator.java
@@ -19,50 +19,17 @@
 import javax.annotation.Nullable;
 
 /**
- * Performs either <strong>preemptive</strong> authentication before connecting to a proxy server,
- * or <strong>reactive</strong> authentication after receiving a challenge from either an origin web
- * server or proxy server.
- *
- * <h3>Preemptive Authentication</h3>
- *
- * <p>To make HTTPS calls using an HTTP proxy server OkHttp must first negotiate a connection with
- * the proxy. This proxy connection is called a "TLS Tunnel" and is specified by <a
- * href="https://tools.ietf.org/html/rfc2817">RFC 2817</a>. The HTTP CONNECT request that creates
- * this tunnel connection is special: it does not participate in any {@linkplain Interceptor
- * interceptors} or {@linkplain EventListener event listeners}. It doesn't include the motivating
- * request's HTTP headers or even its full URL; only the target server's hostname is sent to the
- * proxy.
- *
- * <p>Prior to sending any CONNECT request OkHttp always calls the proxy authenticator so that it
- * may prepare preemptive authentication. OkHttp will call {@link #authenticate} with a fake {@code
- * HTTP/1.1 407 Proxy Authentication Required} response that has a {@code Proxy-Authenticate:
- * OkHttp-Preemptive} challenge. The proxy authenticator may return either either an authenticated
- * request, or null to connect without authentication.
- * <pre>   {@code
- *    for (Challenge challenge : response.challenges()) {
- *      // If this is preemptive auth, use a preemptive credential.
- *      if (challenge.scheme().equalsIgnoreCase("OkHttp-Preemptive")) {
- *        return response.request().newBuilder()
- *            .header("Proxy-Authorization", "secret")
- *            .build();
- *      }
- *    }
- *
- *    return null; // Didn't find a preemptive auth scheme.
- * }</pre>
- *
- * <h3>Reactive Authentication</h3>
- *
- * <p>Implementations authenticate by returning a follow-up request that includes an authorization
- * header, or they may decline the challenge by returning null. In this case the unauthenticated
- * response will be returned to the caller that triggered it.
+ * Responds to an authentication challenge from either a remote web server or a proxy server.
+ * Implementations may either attempt to satisfy the challenge by returning a request that includes
+ * an authorization header, or they may refuse the challenge by returning null. In this case the
+ * unauthenticated response will be returned to the caller that triggered it.
  *
  * <p>Implementations should check if the initial request already included an attempt to
  * authenticate. If so it is likely that further attempts will not be useful and the authenticator
  * should give up.
  *
- * <p>When reactive authentication is requested by an origin web server, the response code is 401
- * and the implementation should respond with a new request that sets the "Authorization" header.
+ * <p>When authentication is requested by an origin server, the response code is 401 and the
+ * implementation should respond with a new request that sets the "Authorization" header.
  * <pre>   {@code
  *
  *    if (response.request().header("Authorization") != null) {
@@ -75,7 +42,7 @@
  *        .build();
  * }</pre>
  *
- * <p>When reactive authentication is requested by a proxy server, the response code is 407 and the
+ * <p>When authentication is requested by a proxy server, the response code is 407 and the
  * implementation should respond with a new request that sets the "Proxy-Authorization" header.
  * <pre>   {@code
  *
@@ -89,9 +56,6 @@
  *        .build();
  * }</pre>
  *
- * <p>The proxy authenticator may implement preemptive authentication, reactive authentication, or
- * both.
- *
  * <p>Applications may configure OkHttp with an authenticator for origin servers, or proxy servers,
  * or both.
  */
@@ -107,9 +71,12 @@
    * Returns a request that includes a credential to satisfy an authentication challenge in {@code
    * response}. Returns null if the challenge cannot be satisfied.
    *
-   * <p>The route is best effort, it currently may not always be provided even when logically
-   * available. It may also not be provided when an authenticator is re-used manually in an
-   * application interceptor, such as when implementing client-specific retries.
+   * The route is best effort, it currently may not always be provided even when logically
+   * available.  It may also not be provided when an Authenticator is re-used manually in
+   * an application interceptor, e.g. implementing client specific retries.
+   *
+   * @param route The route for evaluating how to respond to a challenge e.g. via intranet.
+   * @param response The response containing the auth challenges to respond to.
    */
   @Nullable Request authenticate(@Nullable Route route, Response response) throws IOException;
 }
diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
index 343df45113..f23c47b61b 100644
--- a/okhttp/src/main/java/okhttp3/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -140,7 +140,7 @@
   private static final int ENTRY_BODY = 1;
   private static final int ENTRY_COUNT = 2;
 
-  final InternalCache internalCache = new InternalCache() {
+  public final InternalCache internalCache = new InternalCache() {
     @Override public Response get(Request request) throws IOException {
       return Cache.this.get(request);
     }
@@ -175,14 +175,11 @@
   private int hitCount;
   private int requestCount;
 
-  /**
-   * Create a cache of at most {@code maxSize} bytes in {@code directory}.
-   */
   public Cache(File directory, long maxSize) {
     this(directory, maxSize, FileSystem.SYSTEM);
   }
 
-  Cache(File directory, long maxSize, FileSystem fileSystem) {
+  public Cache(File directory, long maxSize, FileSystem fileSystem) {
     this.cache = DiskLruCache.create(fileSystem, directory, VERSION, ENTRY_COUNT, maxSize);
   }
 
@@ -190,7 +187,8 @@ public static String key(HttpUrl url) {
     return ByteString.encodeUtf8(url.toString()).md5().hex();
   }
 
-  @Nullable Response get(Request request) {
+  @Nullable
+  public Response get(Request request) {
     String key = key(request.url());
     DiskLruCache.Snapshot snapshot;
     Entry entry;
@@ -382,7 +380,6 @@ public long size() throws IOException {
     return cache.size();
   }
 
-  /** Max size of the cache (in bytes). */
   public long maxSize() {
     return cache.getMaxSize();
   }
diff --git a/okhttp/src/main/java/okhttp3/Call.java b/okhttp/src/main/java/okhttp3/Call.java
index 67d0f88d3d..2a0a548f7a 100644
--- a/okhttp/src/main/java/okhttp3/Call.java
+++ b/okhttp/src/main/java/okhttp3/Call.java
@@ -82,11 +82,8 @@
   boolean isCanceled();
 
   /**
-   * Returns a timeout that spans the entire call: resolving DNS, connecting, writing the request
-   * body, server processing, and reading the response body. If the call requires redirects or
-   * retries all must complete within one timeout period.
-   *
-   * <p>Configure the client's default timeout with {@link OkHttpClient.Builder#callTimeout}.
+   * Returns a timeout that applies to the entire call: writing the request, server processing,
+   * and reading the response.
    */
   Timeout timeout();
 
diff --git a/okhttp/src/main/java/okhttp3/CertificatePinner.java b/okhttp/src/main/java/okhttp3/CertificatePinner.java
index d509364544..d1970eb2ca 100644
--- a/okhttp/src/main/java/okhttp3/CertificatePinner.java
+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java
@@ -254,7 +254,7 @@ static ByteString sha256(X509Certificate x509Certificate) {
     return ByteString.of(x509Certificate.getPublicKey().getEncoded()).sha256();
   }
 
-  static final class Pin {
+  public static final class Pin {
     private static final String WILDCARD = "*.";
     /** A hostname like {@code example.com} or a pattern like {@code *.example.com}. */
     final String pattern;
diff --git a/okhttp/src/main/java/okhttp3/ConnectionSpec.java b/okhttp/src/main/java/okhttp3/ConnectionSpec.java
index 004a97065b..7f68b6e49d 100644
--- a/okhttp/src/main/java/okhttp3/ConnectionSpec.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java
@@ -262,7 +262,7 @@ public boolean isCompatible(SSLSocket socket) {
     @Nullable String[] tlsVersions;
     boolean supportsTlsExtensions;
 
-    Builder(boolean tls) {
+    public Builder(boolean tls) {
       this.tls = tls;
     }
 
diff --git a/okhttp/src/main/java/okhttp3/Cookie.java b/okhttp/src/main/java/okhttp3/Cookie.java
index 7a4f24ba20..8f70b2c01a 100644
--- a/okhttp/src/main/java/okhttp3/Cookie.java
+++ b/okhttp/src/main/java/okhttp3/Cookie.java
@@ -547,7 +547,7 @@ public Cookie build() {
    *     necessary for {@code example.com} to match {@code www.example.com} under RFC 2965. This
    *     extra dot is ignored by more recent specifications.
    */
-  String toString(boolean forObsoleteRfc2965) {
+  public String toString(boolean forObsoleteRfc2965) {
     StringBuilder result = new StringBuilder();
     result.append(name);
     result.append('=');
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index 1686af2aa9..a31292963c 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -198,7 +198,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
     };
   }
 
-  final Dispatcher dispatcher;
+  public final Dispatcher dispatcher;
   final @Nullable Proxy proxy;
   final List<Protocol> protocols;
   final List<ConnectionSpec> connectionSpecs;
@@ -216,12 +216,11 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   final CertificatePinner certificatePinner;
   final Authenticator proxyAuthenticator;
   final Authenticator authenticator;
-  final ConnectionPool connectionPool;
+  public final ConnectionPool connectionPool;
   final Dns dns;
   final boolean followSslRedirects;
   final boolean followRedirects;
   final boolean retryOnConnectionFailure;
-  final int callTimeout;
   final int connectTimeout;
   final int readTimeout;
   final int writeTimeout;
@@ -273,7 +272,6 @@ public OkHttpClient() {
     this.followSslRedirects = builder.followSslRedirects;
     this.followRedirects = builder.followRedirects;
     this.retryOnConnectionFailure = builder.retryOnConnectionFailure;
-    this.callTimeout = builder.callTimeout;
     this.connectTimeout = builder.connectTimeout;
     this.readTimeout = builder.readTimeout;
     this.writeTimeout = builder.writeTimeout;
@@ -297,11 +295,6 @@ private static SSLSocketFactory newSslSocketFactory(X509TrustManager trustManage
     }
   }
 
-  /** Default call timeout (in milliseconds). */
-  public int callTimeoutMillis() {
-    return callTimeout;
-  }
-
   /** Default connect timeout (in milliseconds). */
   public int connectTimeoutMillis() {
     return connectTimeout;
@@ -464,7 +457,6 @@ public Builder newBuilder() {
     boolean followSslRedirects;
     boolean followRedirects;
     boolean retryOnConnectionFailure;
-    int callTimeout;
     int connectTimeout;
     int readTimeout;
     int writeTimeout;
@@ -490,7 +482,6 @@ public Builder() {
       followSslRedirects = true;
       followRedirects = true;
       retryOnConnectionFailure = true;
-      callTimeout = 0;
       connectTimeout = 10_000;
       readTimeout = 10_000;
       writeTimeout = 10_000;
@@ -521,46 +512,18 @@ public Builder() {
       this.followSslRedirects = okHttpClient.followSslRedirects;
       this.followRedirects = okHttpClient.followRedirects;
       this.retryOnConnectionFailure = okHttpClient.retryOnConnectionFailure;
-      this.callTimeout = okHttpClient.callTimeout;
       this.connectTimeout = okHttpClient.connectTimeout;
       this.readTimeout = okHttpClient.readTimeout;
       this.writeTimeout = okHttpClient.writeTimeout;
       this.pingInterval = okHttpClient.pingInterval;
     }
 
-    /**
-     * Sets the default timeout for complete calls. A value of 0 means no timeout, otherwise values
-     * must be between 1 and {@link Integer#MAX_VALUE} when converted to milliseconds.
-     *
-     * <p>The call timeout spans the entire call: resolving DNS, connecting, writing the request
-     * body, server processing, and reading the response body. If the call requires redirects or
-     * retries all must complete within one timeout period.
-     */
-    public Builder callTimeout(long timeout, TimeUnit unit) {
-      callTimeout = checkDuration("timeout", timeout, unit);
-      return this;
-    }
-
-    /**
-     * Sets the default timeout for complete calls. A value of 0 means no timeout, otherwise values
-     * must be between 1 and {@link Integer#MAX_VALUE} when converted to milliseconds.
-     *
-     * <p>The call timeout spans the entire call: resolving DNS, connecting, writing the request
-     * body, server processing, and reading the response body. If the call requires redirects or
-     * retries all must complete within one timeout period.
-     */
-    @IgnoreJRERequirement
-    public Builder callTimeout(Duration duration) {
-      callTimeout = checkDuration("timeout", duration.toMillis(), TimeUnit.MILLISECONDS);
-      return this;
-    }
-
     /**
      * Sets the default connect timeout for new connections. A value of 0 means no timeout,
      * otherwise values must be between 1 and {@link Integer#MAX_VALUE} when converted to
      * milliseconds.
      *
-     * <p>The connect timeout is applied when connecting a TCP socket to the target host.
+     * <p>The connectTimeout is applied when connecting a TCP socket to the target host.
      * The default value is 10 seconds.
      */
     public Builder connectTimeout(long timeout, TimeUnit unit) {
@@ -573,7 +536,7 @@ public Builder connectTimeout(long timeout, TimeUnit unit) {
      * otherwise values must be between 1 and {@link Integer#MAX_VALUE} when converted to
      * milliseconds.
      *
-     * <p>The connect timeout is applied when connecting a TCP socket to the target host.
+     * <p>The connectTimeout is applied when connecting a TCP socket to the target host.
      * The default value is 10 seconds.
      */
     @IgnoreJRERequirement
@@ -716,7 +679,7 @@ public Builder cookieJar(CookieJar cookieJar) {
     }
 
     /** Sets the response cache to be used to read and write cached responses. */
-    void setInternalCache(@Nullable InternalCache internalCache) {
+    public void setInternalCache(@Nullable InternalCache internalCache) {
       this.internalCache = internalCache;
       this.cache = null;
     }
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index a9ba5be366..eb43ead47b 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -34,7 +34,6 @@
 import okio.AsyncTimeout;
 import okio.Timeout;
 
-import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static okhttp3.internal.platform.Platform.INFO;
 
 final class RealCall implements Call {
@@ -65,7 +64,6 @@ private RealCall(OkHttpClient client, Request originalRequest, boolean forWebSoc
         cancel();
       }
     };
-    this.timeout.timeout(client.callTimeoutMillis(), MILLISECONDS);
   }
 
   static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {
diff --git a/okhttp/src/main/java/okhttp3/Response.java b/okhttp/src/main/java/okhttp3/Response.java
index b9ec399380..51038e51ed 100644
--- a/okhttp/src/main/java/okhttp3/Response.java
+++ b/okhttp/src/main/java/okhttp3/Response.java
@@ -43,11 +43,11 @@
 public final class Response implements Closeable {
   final Request request;
   final Protocol protocol;
-  final int code;
+  public final int code;
   final String message;
   final @Nullable Handshake handshake;
   final Headers headers;
-  final @Nullable ResponseBody body;
+  public final @Nullable ResponseBody body;
   final @Nullable Response networkResponse;
   final @Nullable Response cacheResponse;
   final @Nullable Response priorResponse;
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
index c7fb69ceba..3ae1926650 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
@@ -205,6 +205,9 @@ private CacheStrategy getCandidate() {
       }
 
       CacheControl responseCaching = cacheResponse.cacheControl();
+      if (responseCaching.immutable()) {
+        return new CacheStrategy(null, cacheResponse);
+      }
 
       long ageMillis = cacheResponseAge();
       long freshMillis = computeFreshnessLifetime();
diff --git a/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java b/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java
index b4ce63012f..03d0301fa6 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache2/FileOperator.java
@@ -33,10 +33,10 @@
  *       each {@code FileOperator} should not be.
  * </ul>
  */
-final class FileOperator {
+public final class FileOperator {
   private final FileChannel fileChannel;
 
-  FileOperator(FileChannel fileChannel) {
+  public FileOperator(FileChannel fileChannel) {
     this.fileChannel = fileChannel;
   }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
index 25445fac50..ce089d1864 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
@@ -19,7 +19,6 @@
 import java.io.IOException;
 import java.lang.ref.Reference;
 import java.net.ConnectException;
-import java.net.HttpURLConnection;
 import java.net.ProtocolException;
 import java.net.Proxy;
 import java.net.Socket;
@@ -417,37 +416,14 @@ private Request createTunnel(int readTimeout, int writeTimeout, Request tunnelRe
    * Returns a request that creates a TLS tunnel via an HTTP proxy. Everything in the tunnel request
    * is sent unencrypted to the proxy server, so tunnels include only the minimum set of headers.
    * This avoids sending potentially sensitive data like HTTP cookies to the proxy unencrypted.
-   *
-   * <p>In order to support preemptive authentication we pass a fake “Auth Failed” response to the
-   * authenticator. This gives the authenticator the option to customize the CONNECT request. It can
-   * decline to do so by returning null, in which case OkHttp will use it as-is
    */
-  private Request createTunnelRequest() throws IOException {
-    Request proxyConnectRequest = new Request.Builder()
+  private Request createTunnelRequest() {
+    return new Request.Builder()
         .url(route.address().url())
-        .method("CONNECT", null)
         .header("Host", Util.hostHeader(route.address().url(), true))
         .header("Proxy-Connection", "Keep-Alive") // For HTTP/1.0 proxies like Squid.
         .header("User-Agent", Version.userAgent())
         .build();
-
-    Response fakeAuthChallengeResponse = new Response.Builder()
-        .request(proxyConnectRequest)
-        .protocol(Protocol.HTTP_1_1)
-        .code(HttpURLConnection.HTTP_PROXY_AUTH)
-        .message("Preemptive Authenticate")
-        .body(Util.EMPTY_RESPONSE)
-        .sentRequestAtMillis(-1L)
-        .receivedResponseAtMillis(-1L)
-        .header("Proxy-Authenticate", "OkHttp-Preemptive")
-        .build();
-
-    Request authenticatedRequest = route.address().proxyAuthenticator()
-        .authenticate(route, fakeAuthChallengeResponse);
-
-    return authenticatedRequest != null
-        ? authenticatedRequest
-        : proxyConnectRequest;
   }
 
   /**
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
index d682de8bf0..ffb75058aa 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
@@ -164,7 +164,9 @@ public StreamAllocation streamAllocation() {
       }
 
       if (followUp == null) {
-        streamAllocation.release();
+        if (!forWebSocket) {
+          streamAllocation.release();
+        }
         return response;
       }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2.java
index cecee406ce..b774f6de08 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2.java
@@ -27,15 +27,15 @@
   /** The initial max frame size, applied independently writing to, or reading from the peer. */
   static final int INITIAL_MAX_FRAME_SIZE = 0x4000; // 16384
 
-  static final byte TYPE_DATA = 0x0;
-  static final byte TYPE_HEADERS = 0x1;
+  public static final byte TYPE_DATA = 0x0;
+  public static final byte TYPE_HEADERS = 0x1;
   static final byte TYPE_PRIORITY = 0x2;
-  static final byte TYPE_RST_STREAM = 0x3;
-  static final byte TYPE_SETTINGS = 0x4;
-  static final byte TYPE_PUSH_PROMISE = 0x5;
-  static final byte TYPE_PING = 0x6;
-  static final byte TYPE_GOAWAY = 0x7;
-  static final byte TYPE_WINDOW_UPDATE = 0x8;
+  public static final byte TYPE_RST_STREAM = 0x3;
+  public static final byte TYPE_SETTINGS = 0x4;
+  public static final byte TYPE_PUSH_PROMISE = 0x5;
+  public static final byte TYPE_PING = 0x6;
+  public static final byte TYPE_GOAWAY = 0x7;
+  public static final byte TYPE_WINDOW_UPDATE = 0x8;
   static final byte TYPE_CONTINUATION = 0x9;
 
   static final byte FLAG_NONE = 0x0;
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java
index 1484a269eb..9a4de4af0e 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java
@@ -56,7 +56,7 @@
  * size setting} to the peer. Hence, we expect all frames to have a max length of {@link
  * Http2#INITIAL_MAX_FRAME_SIZE}.
  */
-final class Http2Reader implements Closeable {
+public final class Http2Reader implements Closeable {
   static final Logger logger = Logger.getLogger(Http2.class.getName());
 
   private final BufferedSource source;
@@ -67,7 +67,7 @@
   final Hpack.Reader hpackReader;
 
   /** Creates a frame reader with max header table size of 4096. */
-  Http2Reader(BufferedSource source, boolean client) {
+  public Http2Reader(BufferedSource source, boolean client) {
     this.source = source;
     this.client = client;
     this.continuation = new ContinuationSource(this.source);
@@ -410,7 +410,7 @@ static int lengthWithoutPadding(int length, byte flags, short padding)
     return (short) (length - padding);
   }
 
-  interface Handler {
+  public interface Handler {
     void data(boolean inFinished, int streamId, BufferedSource source, int length)
         throws IOException;
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java
index 5ef6bb9c4a..9fb4589f79 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.java
@@ -43,7 +43,7 @@
 import static okhttp3.internal.http2.Http2.illegalArgument;
 
 /** Writes HTTP/2 transport frames. */
-final class Http2Writer implements Closeable {
+public final class Http2Writer implements Closeable {
   private static final Logger logger = Logger.getLogger(Http2.class.getName());
 
   private final BufferedSink sink;
@@ -54,7 +54,7 @@
 
   final Hpack.Writer hpackWriter;
 
-  Http2Writer(BufferedSink sink, boolean client) {
+  public Http2Writer(BufferedSink sink, boolean client) {
     this.sink = sink;
     this.client = client;
     this.hpackBuffer = new Buffer();
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Huffman.java b/okhttp/src/main/java/okhttp3/internal/http2/Huffman.java
index 7aa8024b72..61d1ab2c3d 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Huffman.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Huffman.java
@@ -30,7 +30,7 @@
  *     <li>{@code com.twitter.hpack.HpackUtil}</li>
  * </ul>
  */
-class Huffman {
+public class Huffman {
 
   // Appendix C: Huffman Codes
   // http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-B
@@ -88,7 +88,7 @@ private Huffman() {
     buildTree();
   }
 
-  void encode(ByteString data, BufferedSink sink) throws IOException {
+  public void encode(ByteString data, BufferedSink sink) throws IOException {
     long current = 0;
     int n = 0;
 
@@ -114,7 +114,7 @@ void encode(ByteString data, BufferedSink sink) throws IOException {
     }
   }
 
-  int encodedLength(ByteString bytes) {
+  public int encodedLength(ByteString bytes) {
     long len = 0;
 
     for (int i = 0; i < bytes.size(); i++) {
@@ -125,7 +125,7 @@ int encodedLength(ByteString bytes) {
     return (int) ((len + 7) >> 3);
   }
 
-  byte[] decode(byte[] buf) {
+  public byte[] decode(byte[] buf) {
     ByteArrayOutputStream baos = new ByteArrayOutputStream();
     Node node = root;
     int current = 0;
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java b/okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java
index c26132fedb..5f13a6a6aa 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java
+++ b/okhttp/src/main/java/okhttp3/internal/platform/OptionalMethod.java
@@ -26,7 +26,7 @@
  *
  * @param <T> the type of the object the method might be on, typically an interface or base class
  */
-class OptionalMethod<T> {
+public class OptionalMethod<T> {
 
   /** The return type of the method. null means "don't care". */
   private final Class<?> returnType;
@@ -42,7 +42,7 @@
    * @param methodName the name of the method
    * @param methodParams the method parameter types
    */
-  OptionalMethod(Class<?> returnType, String methodName, Class... methodParams) {
+  public OptionalMethod(Class<?> returnType, String methodName, Class... methodParams) {
     this.returnType = returnType;
     this.methodName = methodName;
     this.methodParams = methodParams;
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index baee049f1b..092dc5775e 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -189,7 +189,6 @@ public void connect(OkHttpClient client) {
         .header("Sec-WebSocket-Version", "13")
         .build();
     call = Internal.instance.newWebSocketCall(client, request);
-    call.timeout().clearTimeout();
     call.enqueue(new Callback() {
       @Override public void onResponse(Call call, Response response) {
         try {
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
index 6d5d22e67d..8a60e45853 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
@@ -48,7 +48,7 @@
  *
  * <p>This class is not thread safe.
  */
-final class WebSocketReader {
+public final class WebSocketReader {
   public interface FrameCallback {
     void onReadMessage(String text) throws IOException;
     void onReadMessage(ByteString bytes) throws IOException;
@@ -75,7 +75,7 @@
   private final byte[] maskKey;
   private final Buffer.UnsafeCursor maskCursor;
 
-  WebSocketReader(boolean isClient, BufferedSource source, FrameCallback frameCallback) {
+  public WebSocketReader(boolean isClient, BufferedSource source, FrameCallback frameCallback) {
     if (source == null) throw new NullPointerException("source == null");
     if (frameCallback == null) throw new NullPointerException("frameCallback == null");
     this.isClient = isClient;
@@ -97,7 +97,7 @@
    *         control frame will result in a corresponding call to {@link FrameCallback}.
    * </ul>
    */
-  void processNextFrame() throws IOException {
+  public void processNextFrame() throws IOException {
     readHeader();
     if (isControlFrame) {
       readControlFrame();
diff --git a/pom.xml b/pom.xml
index 0adc0cf7ee..5d854f68a6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,7 +11,7 @@
 
   <groupId>com.squareup.okhttp3</groupId>
   <artifactId>parent</artifactId>
-  <version>3.13.0-SNAPSHOT</version>
+  <version>3.12.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>OkHttp (Parent)</name>
@@ -20,7 +20,7 @@
 
   <modules>
     <module>okhttp</module>
-    <module>okhttp-tests</module>
+    <!--<module>okhttp-tests</module>-->
 
     <module>okhttp-android-support</module>
 
@@ -49,11 +49,11 @@
     <!-- ALPN library targeted to Java 7 -->
     <alpn.jdk7.version>7.1.2.v20141202</alpn.jdk7.version>
     <android.version>4.1.1.4</android.version>
-    <animal.sniffer.version>1.15</animal.sniffer.version>
+    <animal.sniffer.version>1.17</animal.sniffer.version>
     <apache.http.version>4.2.6</apache.http.version>
     <bouncycastle.version>1.60</bouncycastle.version>
     <guava.version>16.0</guava.version>
-    <java.version>1.7</java.version>
+    <java.version>1.9</java.version>
     <moshi.version>1.1.0</moshi.version>
     <jnr-unixsocket.version>0.19</jnr-unixsocket.version>
     <okio.version>1.15.0</okio.version>
@@ -96,7 +96,6 @@
         <groupId>com.google.code.findbugs</groupId>
         <artifactId>jsr305</artifactId>
         <version>3.0.2</version>
-        <scope>provided</scope>
       </dependency>
       <dependency>
         <groupId>junit</groupId>
@@ -190,7 +189,7 @@
                 -->
               <property>
                 <name>listener</name>
-                <value>okhttp3.testing.InstallUncaughtExceptionHandlerListener</value>
+                <value>testingsupport.testing.InstallUncaughtExceptionHandlerListener</value>
               </property>
             </properties>
           </configuration>
@@ -240,7 +239,7 @@
           </dependency>
         </dependencies>
         <configuration>
-          <failsOnError>true</failsOnError>
+          <failsOnError>false</failsOnError>
           <configLocation>checkstyle.xml</configLocation>
           <consoleOutput>true</consoleOutput>
           <excludes>**/CipherSuite.java</excludes>
@@ -262,7 +261,7 @@
           <execution>
             <phase>test</phase>
             <goals>
-              <goal>check</goal>
+              <!--<goal>check</goal>-->
             </goals>
           </execution>
         </executions>
diff --git a/samples/crawler/pom.xml b/samples/crawler/pom.xml
index 121f522335..97bcf040f2 100644
--- a/samples/crawler/pom.xml
+++ b/samples/crawler/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>crawler</artifactId>
diff --git a/samples/crawler/src/main/java/okhttp3/sample/Crawler.java b/samples/crawler/src/main/java/crawler/Crawler.java
similarity index 99%
rename from samples/crawler/src/main/java/okhttp3/sample/Crawler.java
rename to samples/crawler/src/main/java/crawler/Crawler.java
index 07f61032d3..a08340aaf6 100644
--- a/samples/crawler/src/main/java/okhttp3/sample/Crawler.java
+++ b/samples/crawler/src/main/java/crawler/Crawler.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.sample;
+package crawler;
 
 import java.io.File;
 import java.io.IOException;
diff --git a/samples/crawler/src/main/java/module-info.java b/samples/crawler/src/main/java/module-info.java
new file mode 100644
index 0000000000..6cc26d2d47
--- /dev/null
+++ b/samples/crawler/src/main/java/module-info.java
@@ -0,0 +1,4 @@
+module crawler {
+    requires okhttp;
+    requires jsoup;
+}
\ No newline at end of file
diff --git a/samples/guide/pom.xml b/samples/guide/pom.xml
index 85f5d36f73..95a9df5bdf 100644
--- a/samples/guide/pom.xml
+++ b/samples/guide/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>guide</artifactId>
diff --git a/samples/guide/src/main/java/okhttp3/guide/GetExample.java b/samples/guide/src/main/java/guide/guide/GetExample.java
similarity index 96%
rename from samples/guide/src/main/java/okhttp3/guide/GetExample.java
rename to samples/guide/src/main/java/guide/guide/GetExample.java
index 35a1cc658c..a102f971dc 100644
--- a/samples/guide/src/main/java/okhttp3/guide/GetExample.java
+++ b/samples/guide/src/main/java/guide/guide/GetExample.java
@@ -1,4 +1,4 @@
-package okhttp3.guide;
+package guide.guide;
 
 import java.io.IOException;
 import okhttp3.OkHttpClient;
diff --git a/samples/guide/src/main/java/okhttp3/guide/PostExample.java b/samples/guide/src/main/java/guide/guide/PostExample.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/guide/PostExample.java
rename to samples/guide/src/main/java/guide/guide/PostExample.java
index ddaacb6c5e..d719a7fa17 100644
--- a/samples/guide/src/main/java/okhttp3/guide/PostExample.java
+++ b/samples/guide/src/main/java/guide/guide/PostExample.java
@@ -1,4 +1,4 @@
-package okhttp3.guide;
+package guide.guide;
 
 import java.io.IOException;
 import okhttp3.MediaType;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java b/samples/guide/src/main/java/guide/recipes/AccessHeaders.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java
rename to samples/guide/src/main/java/guide/recipes/AccessHeaders.java
index 95fa49241c..33428254c5 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java
+++ b/samples/guide/src/main/java/guide/recipes/AccessHeaders.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.OkHttpClient;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java b/samples/guide/src/main/java/guide/recipes/AsynchronousGet.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java
rename to samples/guide/src/main/java/guide/recipes/AsynchronousGet.java
index 68f1c2d591..f32d261a83 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java
+++ b/samples/guide/src/main/java/guide/recipes/AsynchronousGet.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.Call;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java b/samples/guide/src/main/java/guide/recipes/Authenticate.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
rename to samples/guide/src/main/java/guide/recipes/Authenticate.java
index 4eb09d8f11..f88717d5ea 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
+++ b/samples/guide/src/main/java/guide/recipes/Authenticate.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.Authenticator;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java b/samples/guide/src/main/java/guide/recipes/CacheResponse.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
rename to samples/guide/src/main/java/guide/recipes/CacheResponse.java
index c43f9214ab..a7303a2394 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
+++ b/samples/guide/src/main/java/guide/recipes/CacheResponse.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.File;
 import java.io.IOException;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java b/samples/guide/src/main/java/guide/recipes/CancelCall.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/CancelCall.java
rename to samples/guide/src/main/java/guide/recipes/CancelCall.java
index 644f638300..7d900ae61a 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java
+++ b/samples/guide/src/main/java/guide/recipes/CancelCall.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.util.concurrent.Executors;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java b/samples/guide/src/main/java/guide/recipes/CertificatePinning.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
rename to samples/guide/src/main/java/guide/recipes/CertificatePinning.java
index 91c3fcc59f..aa0118d677 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
+++ b/samples/guide/src/main/java/guide/recipes/CertificatePinning.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.security.cert.Certificate;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java b/samples/guide/src/main/java/guide/recipes/CheckHandshake.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java
rename to samples/guide/src/main/java/guide/recipes/CheckHandshake.java
index befd80983c..d337a7c4e6 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java
+++ b/samples/guide/src/main/java/guide/recipes/CheckHandshake.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.security.cert.Certificate;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java b/samples/guide/src/main/java/guide/recipes/ConfigureTimeouts.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
rename to samples/guide/src/main/java/guide/recipes/ConfigureTimeouts.java
index a6d3000732..78aca6e2a5 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
+++ b/samples/guide/src/main/java/guide/recipes/ConfigureTimeouts.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.util.concurrent.TimeUnit;
 import okhttp3.OkHttpClient;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java b/samples/guide/src/main/java/guide/recipes/CurrentDateHeader.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java
rename to samples/guide/src/main/java/guide/recipes/CurrentDateHeader.java
index 6c15d700df..b4c7e62e78 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java
+++ b/samples/guide/src/main/java/guide/recipes/CurrentDateHeader.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.util.Date;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java b/samples/guide/src/main/java/guide/recipes/CustomCipherSuites.java
similarity index 99%
rename from samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java
rename to samples/guide/src/main/java/guide/recipes/CustomCipherSuites.java
index b568bdf01c..ff82da6c72 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java
+++ b/samples/guide/src/main/java/guide/recipes/CustomCipherSuites.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.net.InetAddress;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java b/samples/guide/src/main/java/guide/recipes/CustomTrust.java
similarity index 99%
rename from samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
rename to samples/guide/src/main/java/guide/recipes/CustomTrust.java
index a8df15ba32..326c5b80de 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
+++ b/samples/guide/src/main/java/guide/recipes/CustomTrust.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java b/samples/guide/src/main/java/guide/recipes/HttpsServer.java
similarity index 91%
rename from samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java
rename to samples/guide/src/main/java/guide/recipes/HttpsServer.java
index dd537f52b2..59ad4565e3 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java
+++ b/samples/guide/src/main/java/guide/recipes/HttpsServer.java
@@ -13,17 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.net.InetAddress;
 import okhttp3.Call;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.tls.HandshakeCertificates;
-import okhttp3.tls.HeldCertificate;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import tls.HandshakeCertificates;
+import tls.HeldCertificate;
 
 /**
  * Create an HTTPS server with a self-signed certificate that OkHttp trusts.
diff --git a/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java b/samples/guide/src/main/java/guide/recipes/LoggingInterceptors.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
rename to samples/guide/src/main/java/guide/recipes/LoggingInterceptors.java
index 8cb72b4bc8..41976a737e 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
+++ b/samples/guide/src/main/java/guide/recipes/LoggingInterceptors.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.util.logging.Logger;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java b/samples/guide/src/main/java/guide/recipes/ParseResponseWithMoshi.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java
rename to samples/guide/src/main/java/guide/recipes/ParseResponseWithMoshi.java
index 68570bf13f..ecd7f9eda7 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java
+++ b/samples/guide/src/main/java/guide/recipes/ParseResponseWithMoshi.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.Moshi;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java b/samples/guide/src/main/java/guide/recipes/PerCallSettings.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
rename to samples/guide/src/main/java/guide/recipes/PerCallSettings.java
index 6aa266c11d..69a7592833 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
+++ b/samples/guide/src/main/java/guide/recipes/PerCallSettings.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostFile.java b/samples/guide/src/main/java/guide/recipes/PostFile.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/PostFile.java
rename to samples/guide/src/main/java/guide/recipes/PostFile.java
index 0e52cddd26..0c5552ab55 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PostFile.java
+++ b/samples/guide/src/main/java/guide/recipes/PostFile.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.File;
 import java.io.IOException;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostForm.java b/samples/guide/src/main/java/guide/recipes/PostForm.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/PostForm.java
rename to samples/guide/src/main/java/guide/recipes/PostForm.java
index eab32b01ab..b8905b5208 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PostForm.java
+++ b/samples/guide/src/main/java/guide/recipes/PostForm.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.FormBody;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java b/samples/guide/src/main/java/guide/recipes/PostMultipart.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
rename to samples/guide/src/main/java/guide/recipes/PostMultipart.java
index 60534d7de2..3525ea5151 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
+++ b/samples/guide/src/main/java/guide/recipes/PostMultipart.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.File;
 import java.io.IOException;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java b/samples/guide/src/main/java/guide/recipes/PostStreaming.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java
rename to samples/guide/src/main/java/guide/recipes/PostStreaming.java
index 90ec01c6b8..4f94dc53b4 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java
+++ b/samples/guide/src/main/java/guide/recipes/PostStreaming.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.MediaType;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostStreamingWithPipe.java b/samples/guide/src/main/java/guide/recipes/PostStreamingWithPipe.java
similarity index 99%
rename from samples/guide/src/main/java/okhttp3/recipes/PostStreamingWithPipe.java
rename to samples/guide/src/main/java/guide/recipes/PostStreamingWithPipe.java
index c73b9154ed..02b8125f4b 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PostStreamingWithPipe.java
+++ b/samples/guide/src/main/java/guide/recipes/PostStreamingWithPipe.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.MediaType;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostString.java b/samples/guide/src/main/java/guide/recipes/PostString.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/PostString.java
rename to samples/guide/src/main/java/guide/recipes/PostString.java
index 6c8ea4f9e3..84acd3a988 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PostString.java
+++ b/samples/guide/src/main/java/guide/recipes/PostString.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.MediaType;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PreemptiveAuth.java b/samples/guide/src/main/java/guide/recipes/PreemptiveAuth.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/PreemptiveAuth.java
rename to samples/guide/src/main/java/guide/recipes/PreemptiveAuth.java
index abbf0eb0c0..96b487732c 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PreemptiveAuth.java
+++ b/samples/guide/src/main/java/guide/recipes/PreemptiveAuth.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.Credentials;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java b/samples/guide/src/main/java/guide/recipes/PrintEvents.java
similarity index 99%
rename from samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java
rename to samples/guide/src/main/java/guide/recipes/PrintEvents.java
index 1366a82f15..b201f6ad55 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java
+++ b/samples/guide/src/main/java/guide/recipes/PrintEvents.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.net.InetAddress;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java b/samples/guide/src/main/java/guide/recipes/PrintEventsNonConcurrent.java
similarity index 99%
rename from samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java
rename to samples/guide/src/main/java/guide/recipes/PrintEventsNonConcurrent.java
index 6acedb19e7..0665d5ed98 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java
+++ b/samples/guide/src/main/java/guide/recipes/PrintEventsNonConcurrent.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import java.net.InetAddress;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/Progress.java b/samples/guide/src/main/java/guide/recipes/Progress.java
similarity index 99%
rename from samples/guide/src/main/java/okhttp3/recipes/Progress.java
rename to samples/guide/src/main/java/guide/recipes/Progress.java
index e75a3cc949..c308ce0cde 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/Progress.java
+++ b/samples/guide/src/main/java/guide/recipes/Progress.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.Interceptor;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java b/samples/guide/src/main/java/guide/recipes/RequestBodyCompression.java
similarity index 99%
rename from samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
rename to samples/guide/src/main/java/guide/recipes/RequestBodyCompression.java
index 5473f67011..0680d7f3e3 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
+++ b/samples/guide/src/main/java/guide/recipes/RequestBodyCompression.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.Moshi;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java b/samples/guide/src/main/java/guide/recipes/RewriteResponseCacheControl.java
similarity index 99%
rename from samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
rename to samples/guide/src/main/java/guide/recipes/RewriteResponseCacheControl.java
index 92d65d8169..6c2bb3340a 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
+++ b/samples/guide/src/main/java/guide/recipes/RewriteResponseCacheControl.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.File;
 import java.io.IOException;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java b/samples/guide/src/main/java/guide/recipes/SynchronousGet.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java
rename to samples/guide/src/main/java/guide/recipes/SynchronousGet.java
index 38c91a50c2..f5a15fdc8e 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java
+++ b/samples/guide/src/main/java/guide/recipes/SynchronousGet.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.io.IOException;
 import okhttp3.Headers;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java b/samples/guide/src/main/java/guide/recipes/WebSocketEcho.java
similarity index 98%
rename from samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
rename to samples/guide/src/main/java/guide/recipes/WebSocketEcho.java
index 288fadb7ce..fdcd46cca7 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
+++ b/samples/guide/src/main/java/guide/recipes/WebSocketEcho.java
@@ -1,4 +1,4 @@
-package okhttp3.recipes;
+package guide.recipes;
 
 import java.util.concurrent.TimeUnit;
 import okhttp3.WebSocket;
diff --git a/samples/guide/src/main/java/module-info.java b/samples/guide/src/main/java/module-info.java
new file mode 100644
index 0000000000..3898867c79
--- /dev/null
+++ b/samples/guide/src/main/java/module-info.java
@@ -0,0 +1,6 @@
+module guide {
+    requires okhttp;
+    requires mockwebserver;
+    requires tls;
+    requires moshi;
+}
\ No newline at end of file
diff --git a/samples/pom.xml b/samples/pom.xml
index 4cb343bce2..f767a9377d 100644
--- a/samples/pom.xml
+++ b/samples/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <groupId>com.squareup.okhttp3.sample</groupId>
diff --git a/samples/simple-client/pom.xml b/samples/simple-client/pom.xml
index 9b193b2033..d4f3ec0ae7 100644
--- a/samples/simple-client/pom.xml
+++ b/samples/simple-client/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>simple-client</artifactId>
diff --git a/samples/simple-client/src/main/java/module-info.java b/samples/simple-client/src/main/java/module-info.java
new file mode 100644
index 0000000000..698e77faa3
--- /dev/null
+++ b/samples/simple-client/src/main/java/module-info.java
@@ -0,0 +1,4 @@
+module simple.client {
+    requires moshi;
+    requires okhttp;
+}
\ No newline at end of file
diff --git a/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java b/samples/simple-client/src/main/java/sample/OkHttpContributors.java
similarity index 98%
rename from samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java
rename to samples/simple-client/src/main/java/sample/OkHttpContributors.java
index f2ac973db2..c5839ca13b 100644
--- a/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java
+++ b/samples/simple-client/src/main/java/sample/OkHttpContributors.java
@@ -1,4 +1,4 @@
-package okhttp3.sample;
+package sample;
 
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.Moshi;
diff --git a/samples/slack/pom.xml b/samples/slack/pom.xml
index ea003abc2e..26798cddf0 100644
--- a/samples/slack/pom.xml
+++ b/samples/slack/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>slack</artifactId>
diff --git a/samples/slack/src/main/java/module-info.java b/samples/slack/src/main/java/module-info.java
new file mode 100644
index 0000000000..44d120e824
--- /dev/null
+++ b/samples/slack/src/main/java/module-info.java
@@ -0,0 +1,5 @@
+module slack {
+    requires moshi;
+    requires okhttp;
+    requires mockwebserver;
+}
\ No newline at end of file
diff --git a/samples/slack/src/main/java/okhttp3/slack/OAuthSession.java b/samples/slack/src/main/java/slack/OAuthSession.java
similarity index 98%
rename from samples/slack/src/main/java/okhttp3/slack/OAuthSession.java
rename to samples/slack/src/main/java/slack/OAuthSession.java
index 9a6869d2fb..0fd001c5c7 100644
--- a/samples/slack/src/main/java/okhttp3/slack/OAuthSession.java
+++ b/samples/slack/src/main/java/slack/OAuthSession.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.slack;
+package slack;
 
 /** Authorization for an application to make Slack API calls on behalf of a user. */
 @SuppressWarnings("checkstyle:membername")
diff --git a/samples/slack/src/main/java/okhttp3/slack/OAuthSessionFactory.java b/samples/slack/src/main/java/slack/OAuthSessionFactory.java
similarity index 94%
rename from samples/slack/src/main/java/okhttp3/slack/OAuthSessionFactory.java
rename to samples/slack/src/main/java/slack/OAuthSessionFactory.java
index c0ad139aed..aa94c5de16 100644
--- a/samples/slack/src/main/java/okhttp3/slack/OAuthSessionFactory.java
+++ b/samples/slack/src/main/java/slack/OAuthSessionFactory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.slack;
+package slack;
 
 import java.io.Closeable;
 import java.io.IOException;
@@ -21,10 +21,10 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 import okhttp3.HttpUrl;
-import okhttp3.mockwebserver.Dispatcher;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
+import mockwebserver.Dispatcher;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
 import okio.ByteString;
 
 /**
diff --git a/samples/slack/src/main/java/okhttp3/slack/RtmSession.java b/samples/slack/src/main/java/slack/RtmSession.java
similarity index 99%
rename from samples/slack/src/main/java/okhttp3/slack/RtmSession.java
rename to samples/slack/src/main/java/slack/RtmSession.java
index b5802ef4ad..a49da110e4 100644
--- a/samples/slack/src/main/java/okhttp3/slack/RtmSession.java
+++ b/samples/slack/src/main/java/slack/RtmSession.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.slack;
+package slack;
 
 import java.io.Closeable;
 import java.io.IOException;
diff --git a/samples/slack/src/main/java/okhttp3/slack/RtmStartResponse.java b/samples/slack/src/main/java/slack/RtmStartResponse.java
similarity index 97%
rename from samples/slack/src/main/java/okhttp3/slack/RtmStartResponse.java
rename to samples/slack/src/main/java/slack/RtmStartResponse.java
index b19fff6256..bbb91ea545 100644
--- a/samples/slack/src/main/java/okhttp3/slack/RtmStartResponse.java
+++ b/samples/slack/src/main/java/slack/RtmStartResponse.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.slack;
+package slack;
 
 import java.util.List;
 import okhttp3.HttpUrl;
diff --git a/samples/slack/src/main/java/okhttp3/slack/SlackApi.java b/samples/slack/src/main/java/slack/SlackApi.java
similarity index 99%
rename from samples/slack/src/main/java/okhttp3/slack/SlackApi.java
rename to samples/slack/src/main/java/slack/SlackApi.java
index 4ab8565942..3ab33253b8 100644
--- a/samples/slack/src/main/java/okhttp3/slack/SlackApi.java
+++ b/samples/slack/src/main/java/slack/SlackApi.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.slack;
+package slack;
 
 import com.squareup.moshi.FromJson;
 import com.squareup.moshi.JsonAdapter;
diff --git a/samples/slack/src/main/java/okhttp3/slack/SlackClient.java b/samples/slack/src/main/java/slack/SlackClient.java
similarity index 99%
rename from samples/slack/src/main/java/okhttp3/slack/SlackClient.java
rename to samples/slack/src/main/java/slack/SlackClient.java
index 2aa2608986..5dd5a91137 100644
--- a/samples/slack/src/main/java/okhttp3/slack/SlackClient.java
+++ b/samples/slack/src/main/java/slack/SlackClient.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.slack;
+package slack;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;
diff --git a/samples/static-server/pom.xml b/samples/static-server/pom.xml
index 058d63f0ef..b430792c0a 100644
--- a/samples/static-server/pom.xml
+++ b/samples/static-server/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>static-server</artifactId>
@@ -33,7 +33,7 @@
           <transformers>
             <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
               <manifestEntries>
-                <Main-Class>okhttp3.sample.SampleServer</Main-Class>
+                <Main-Class>staticserver.SampleServer</Main-Class>
               </manifestEntries>
             </transformer>
           </transformers>
diff --git a/samples/static-server/src/main/java/module-info.java b/samples/static-server/src/main/java/module-info.java
new file mode 100644
index 0000000000..fcb45014fb
--- /dev/null
+++ b/samples/static-server/src/main/java/module-info.java
@@ -0,0 +1,4 @@
+module staticserver {
+    requires okhttp;
+    requires mockwebserver;
+}
\ No newline at end of file
diff --git a/samples/static-server/src/main/java/okhttp3/sample/SampleServer.java b/samples/static-server/src/main/java/staticserver/SampleServer.java
similarity index 95%
rename from samples/static-server/src/main/java/okhttp3/sample/SampleServer.java
rename to samples/static-server/src/main/java/staticserver/SampleServer.java
index e21432ed20..de89eb79be 100644
--- a/samples/static-server/src/main/java/okhttp3/sample/SampleServer.java
+++ b/samples/static-server/src/main/java/staticserver/SampleServer.java
@@ -1,4 +1,4 @@
-package okhttp3.sample;
+package staticserver;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -12,10 +12,10 @@
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.TrustManagerFactory;
 import okhttp3.internal.Util;
-import okhttp3.mockwebserver.Dispatcher;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
+import mockwebserver.Dispatcher;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
+import mockwebserver.RecordedRequest;
 import okio.Buffer;
 import okio.Okio;
 
diff --git a/samples/unixdomainsockets/pom.xml b/samples/unixdomainsockets/pom.xml
index 0f1c5459fb..a9ea691926 100644
--- a/samples/unixdomainsockets/pom.xml
+++ b/samples/unixdomainsockets/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>3.13.0-SNAPSHOT</version>
+    <version>3.12.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>unixdomainsockets</artifactId>
diff --git a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/ClientAndServer.java b/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/ClientAndServer.java
index 8512c2d38d..6ef2cf6707 100644
--- a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/ClientAndServer.java
+++ b/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/ClientAndServer.java
@@ -19,8 +19,8 @@
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
+import mockwebserver.MockResponse;
+import mockwebserver.MockWebServer;
 
 /**
  * Create UNIX domain sockets for MockWebServer and OkHttp and connect 'em together. Note that we
