diff --git a/CHANGELOG.md b/CHANGELOG.md
index 1188e8e583..5772abad0c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,24 @@
 Change Log
 ==========
 
+## Version 2.7.0
+
+_2015-12-13_
+
+ *  **Rewritten connection management.** Previously OkHttp's connection pool
+    managed both idle and active connections for HTTP/2, but only idle
+    connections for HTTP/1.x. With this update the connection pool manages both
+    idle and active connections for everything. OkHttp now detects and warns on
+    connections that were allocated but never released, and will enforce HTTP/2
+    stream limits. This update also fixes `Call.cancel()` to not do I/O on the
+    calling thread.
+ *  Fix: Don't log gzipped data in the logging interceptor.
+ *  Fix: Don't resolve DNS addresses when connecting through a SOCKS proxy.
+ *  Fix: Drop the synthetic `OkHttp-Selected-Protocol` response header.
+ *  Fix: Support 204 and 205 'No Content' replies in the logging interceptor.
+ *  New: Add `Call.isExecuted()`.
+
+
 ## Version 2.6.0
 
 _2015-11-22_
diff --git a/README.md b/README.md
index f10aaeba78..52dcc5b862 100644
--- a/README.md
+++ b/README.md
@@ -11,12 +11,12 @@ Download [the latest JAR][3] or grab via Maven:
 <dependency>
   <groupId>com.squareup.okhttp</groupId>
   <artifactId>okhttp</artifactId>
-  <version>2.6.0</version>
+  <version>2.7.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.squareup.okhttp:okhttp:2.6.0'
+compile 'com.squareup.okhttp:okhttp:2.7.0'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
@@ -36,13 +36,13 @@ Download [the latest JAR][4] or grab via Maven:
 <dependency>
   <groupId>com.squareup.okhttp</groupId>
   <artifactId>mockwebserver</artifactId>
-  <version>2.6.0</version>
+  <version>2.7.0</version>
   <scope>test</scope>
 </dependency>
 ```
 or Gradle:
 ```groovy
-testCompile 'com.squareup.okhttp:mockwebserver:2.6.0'
+testCompile 'com.squareup.okhttp:mockwebserver:2.7.0'
 ```
 
 
diff --git a/benchmarks/README.md b/benchmarks/README.md
index 59f571fc55..ee9be3ff47 100644
--- a/benchmarks/README.md
+++ b/benchmarks/README.md
@@ -4,5 +4,5 @@ OkHttp Benchmarks
 This module allows you to test the performance of HTTP clients.
 
 ### Running
-  1. If you made modifications to `com.squareup.okhttp.benchmarks.Benchmark` run `mvn compile`.
+  1. If you made modifications to `Benchmark` run `mvn compile`.
   2. Run `mvn exec:exec` to launch a new JVM, which will execute the benchmark.
diff --git a/benchmarks/pom.xml b/benchmarks/pom.xml
index a0d8317bfa..bd6d7efd05 100644
--- a/benchmarks/pom.xml
+++ b/benchmarks/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>benchmarks</artifactId>
@@ -25,17 +25,17 @@
       <version>14.0.1</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-urlconnection</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
     </dependency>
@@ -89,7 +89,7 @@
             <commandlineArgs>-Xbootclasspath/p:${bootclasspath}</commandlineArgs>
             <argument>-classpath</argument>
             <classpath />
-            <argument>com.squareup.okhttp.benchmarks.Benchmark</argument>
+            <argument>okhttp3.benchmarks.Benchmark</argument>
           </arguments>
         </configuration>
       </plugin>
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java
similarity index 95%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java
index 3f2609d207..a5b1637e3e 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/ApacheHttpClient.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/ApacheHttpClient.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.internal.SslContextBuilder;
+import okhttp3.HttpUrl;
+import okhttp3.internal.SslContextBuilder;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.concurrent.TimeUnit;
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java
similarity index 94%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java
index 04b7f7fbff..94abd95d5d 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/Benchmark.java
@@ -13,18 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
 import com.google.caliper.Param;
 import com.google.caliper.model.ArbitraryMeasurement;
 import com.google.caliper.runner.CaliperMain;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.mockwebserver.Dispatcher;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+import okhttp3.HttpUrl;
+import okhttp3.Protocol;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.mockwebserver.Dispatcher;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Client.java b/benchmarks/src/main/java/okhttp3/benchmarks/Client.java
similarity index 96%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Client.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/Client.java
index bd777aa359..b7c6b3f3b9 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Client.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/Client.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
 enum Client {
   OkHttp {
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/HttpClient.java b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java
similarity index 91%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/HttpClient.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java
index 2820dc1cc8..1f45927c0f 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/HttpClient.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/HttpClient.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
-import com.squareup.okhttp.HttpUrl;
+import okhttp3.HttpUrl;
 
 /** An HTTP client to benchmark. */
 interface HttpClient {
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java
similarity index 98%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java
index 1b5571b5de..62d5c37bc1 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/NettyHttpClient.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.internal.SslContextBuilder;
+import okhttp3.HttpUrl;
+import okhttp3.internal.SslContextBuilder;
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.PooledByteBufAllocator;
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java
similarity index 79%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java
index 496e8d30bd..0d80f4c82c 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttp.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.internal.SslContextBuilder;
+import okhttp3.Call;
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.ResponseBody;
+import okhttp3.internal.SslContextBuilder;
 import java.io.IOException;
-import java.net.HttpURLConnection;
 import java.util.concurrent.TimeUnit;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLContext;
@@ -51,21 +52,22 @@
   }
 
   @Override public Runnable request(HttpUrl url) {
-    return new OkHttpRequest(url);
+    Call call = client.newCall(new Request.Builder().url(url).build());
+    return new OkHttpRequest(call);
   }
 
   class OkHttpRequest implements Runnable {
-    private final HttpUrl url;
+    private final Call call;
 
-    public OkHttpRequest(HttpUrl url) {
-      this.url = url;
+    public OkHttpRequest(Call call) {
+      this.call = call;
     }
 
     public void run() {
       long start = System.nanoTime();
       try {
-        HttpURLConnection urlConnection = new OkUrlFactory(client).open(url.url());
-        long total = readAllAndClose(urlConnection.getInputStream());
+        ResponseBody body = call.execute().body();
+        long total = readAllAndClose(body.byteStream());
         long finish = System.nanoTime();
 
         if (VERBOSE) {
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java
similarity index 89%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java
index cf0ad4accf..6aa6c333d7 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/OkHttpAsync.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
-import com.squareup.okhttp.Callback;
-import com.squareup.okhttp.Dispatcher;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.SslContextBuilder;
+import okhttp3.Callback;
+import okhttp3.Dispatcher;
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.SslContextBuilder;
 import java.io.IOException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/SynchronousHttpClient.java b/benchmarks/src/main/java/okhttp3/benchmarks/SynchronousHttpClient.java
similarity index 95%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/SynchronousHttpClient.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/SynchronousHttpClient.java
index 3b9631511b..76c267cec6 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/SynchronousHttpClient.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/SynchronousHttpClient.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
-import com.squareup.okhttp.HttpUrl;
+import okhttp3.HttpUrl;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.concurrent.LinkedBlockingQueue;
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java
similarity index 95%
rename from benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java
rename to benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java
index e17743095a..2a1c75baa7 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/UrlConnection.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/UrlConnection.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.benchmarks;
+package okhttp3.benchmarks;
 
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.internal.SslContextBuilder;
+import okhttp3.HttpUrl;
+import okhttp3.internal.SslContextBuilder;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
diff --git a/checkstyle.xml b/checkstyle.xml
index fc173af9e0..0d6d8a420d 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -44,7 +44,7 @@
     <module name="LocalVariableName"/>
     <module name="MemberName"/>
     <module name="MethodName"/>
-    <module name="PackageName"/>
+    <!--<module name="PackageName"/>-->
     <module name="ParameterName"/>
     <module name="StaticVariableName"/>
     <module name="TypeName"/>
diff --git a/mockwebserver/pom.xml b/mockwebserver/pom.xml
index b0090573e1..3899b1b12b 100644
--- a/mockwebserver/pom.xml
+++ b/mockwebserver/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>mockwebserver</artifactId>
@@ -14,18 +14,18 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-ws</artifactId>
       <version>${project.version}</version>
     </dependency>
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java
similarity index 99%
rename from mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java
rename to mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java
index 546d66036e..fcb5d68f5d 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/internal/SslContextBuilder.java
+++ b/mockwebserver/src/main/java/okhttp3/internal/SslContextBuilder.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java
similarity index 96%
rename from mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java
rename to mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java
index 1574806f29..dcf5334107 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/internal/framed/FramedServer.java
+++ b/mockwebserver/src/main/java/okhttp3/internal/framed/FramedServer.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.internal.Platform;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.internal.Util;
+import okhttp3.Protocol;
+import okhttp3.internal.Platform;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.internal.Util;
 import java.io.File;
 import java.io.IOException;
 import java.net.ProtocolException;
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java
similarity index 96%
rename from mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java
rename to mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java
index 4e1e0e70f6..4e3e05177f 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/Dispatcher.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/Dispatcher.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.mockwebserver;
+package okhttp3.mockwebserver;
 
 /** Handler for mock server requests. */
 public abstract class Dispatcher {
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java
similarity index 93%
rename from mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java
rename to mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java
index db685956d8..43b9fd264b 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java
@@ -13,15 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.mockwebserver;
+package okhttp3.mockwebserver;
 
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.framed.Settings;
-import com.squareup.okhttp.ws.WebSocketListener;
+import okhttp3.Headers;
+import okhttp3.internal.Internal;
+import okhttp3.internal.framed.Settings;
+import okhttp3.ws.WebSocketListener;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
+import okhttp3.Protocol;
 import okio.Buffer;
 
 /** A scripted response to be replayed by the mock web server. */
@@ -195,9 +196,8 @@ public MockResponse setSocketPolicy(SocketPolicy socketPolicy) {
   }
 
   /**
-   * Throttles the response body writer to sleep for the given period after each
-   * series of {@code bytesPerPeriod} bytes are written. Use this to simulate
-   * network behavior.
+   * Throttles the request reader and response writer to sleep for the given period after each
+   * series of {@code bytesPerPeriod} bytes are transferred. Use this to simulate network behavior.
    */
   public MockResponse throttleBody(long bytesPerPeriod, long period, TimeUnit unit) {
     this.throttleBytesPerPeriod = bytesPerPeriod;
@@ -230,7 +230,7 @@ public long getBodyDelay(TimeUnit unit) {
 
   /**
    * When {@link MockWebServer#setProtocols(java.util.List) protocols}
-   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2}, this attaches a
+   * include {@linkplain Protocol#HTTP_2}, this attaches a
    * pushed stream to this response.
    */
   public MockResponse withPush(PushPromise promise) {
@@ -245,7 +245,7 @@ public MockResponse withPush(PushPromise promise) {
 
   /**
    * When {@linkplain MockWebServer#setProtocols(java.util.List) protocols}
-   * include {@linkplain com.squareup.okhttp.Protocol#HTTP_2 HTTP/2}, this
+   * include {@linkplain Protocol#HTTP_2 HTTP/2}, this
    * pushes {@code settings} before writing the response.
    */
   public MockResponse withSettings(Settings settings) {
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
similarity index 92%
rename from mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java
rename to mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
index 2c76398978..0ecd8c0da5 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
@@ -15,25 +15,25 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.mockwebserver;
-
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.NamedRunnable;
-import com.squareup.okhttp.internal.Platform;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.framed.ErrorCode;
-import com.squareup.okhttp.internal.framed.FramedConnection;
-import com.squareup.okhttp.internal.framed.FramedStream;
-import com.squareup.okhttp.internal.framed.Header;
-import com.squareup.okhttp.internal.framed.Settings;
-import com.squareup.okhttp.internal.http.HttpMethod;
-import com.squareup.okhttp.internal.ws.RealWebSocket;
-import com.squareup.okhttp.internal.ws.WebSocketProtocol;
-import com.squareup.okhttp.ws.WebSocketListener;
+package okhttp3.mockwebserver;
+
+import okhttp3.Headers;
+import okhttp3.HttpUrl;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.NamedRunnable;
+import okhttp3.internal.Platform;
+import okhttp3.internal.Util;
+import okhttp3.internal.framed.ErrorCode;
+import okhttp3.internal.framed.FramedConnection;
+import okhttp3.internal.framed.FramedStream;
+import okhttp3.internal.framed.Header;
+import okhttp3.internal.framed.Settings;
+import okhttp3.internal.http.HttpMethod;
+import okhttp3.internal.ws.RealWebSocket;
+import okhttp3.internal.ws.WebSocketProtocol;
+import okhttp3.ws.WebSocketListener;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
@@ -42,7 +42,6 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.SocketException;
-import java.net.URL;
 import java.security.SecureRandom;
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
@@ -81,11 +80,17 @@
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
 
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_START;
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_REQUEST_BODY;
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.FAIL_HANDSHAKE;
 import static java.util.concurrent.TimeUnit.SECONDS;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_START;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_DURING_REQUEST_BODY;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY;
+import static okhttp3.mockwebserver.SocketPolicy.FAIL_HANDSHAKE;
+import static okhttp3.mockwebserver.SocketPolicy.NO_RESPONSE;
+import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_INPUT_AT_END;
+import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_OUTPUT_AT_END;
+import static okhttp3.mockwebserver.SocketPolicy.UPGRADE_TO_SSL_AT_END;
 
 /**
  * A scriptable web server. Callers supply canned responses and the server
@@ -182,15 +187,6 @@ public void setServerSocketFactory(ServerSocketFactory serverSocketFactory) {
     this.serverSocketFactory = serverSocketFactory;
   }
 
-  /**
-   * Returns a URL for connecting to this server.
-   * @param path the request path, such as "/".
-   */
-  @Deprecated
-  public URL getUrl(String path) {
-    return url(path).url();
-  }
-
   /**
    * Returns a URL for connecting to this server.
    *
@@ -238,7 +234,7 @@ public void setProtocolNegotiationEnabled(boolean protocolNegotiationEnabled) {
    * {@link #setProtocolNegotiationEnabled negotiation is disabled}.
    *
    * @param protocols the protocols to use, in order of preference. The list
-   *     must contain {@linkplain Protocol#HTTP_1_1}. It must not contain null.
+   * must contain {@linkplain Protocol#HTTP_1_1}. It must not contain null.
    */
   public void setProtocols(List<Protocol> protocols) {
     protocols = Util.immutableList(protocols);
@@ -253,8 +249,9 @@ public void setProtocols(List<Protocol> protocols) {
 
   /**
    * Serve requests with HTTPS rather than otherwise.
+   *
    * @param tunnelProxy true to expect the HTTP CONNECT method before
-   *     negotiating TLS.
+   * negotiating TLS.
    */
   public void useHttps(SSLSocketFactory sslSocketFactory, boolean tunnelProxy) {
     this.sslSocketFactory = sslSocketFactory;
@@ -278,9 +275,9 @@ public RecordedRequest takeRequest() throws InterruptedException {
    * use this to verify the request was sent as intended within the given time.
    *
    * @param timeout how long to wait before giving up, in units of
-  *        {@code unit}
+   * {@code unit}
    * @param unit a {@code TimeUnit} determining how to interpret the
-   *        {@code timeout} parameter
+   * {@code timeout} parameter
    * @return the head of the request queue
    */
   public RecordedRequest takeRequest(long timeout, TimeUnit unit) throws InterruptedException {
@@ -302,7 +299,7 @@ public int getRequestCount() {
    * by the second enqueued response; and so on.
    *
    * @throws ClassCastException if the default dispatcher has been replaced
-   *     with {@link #setDispatcher(Dispatcher)}.
+   * with {@link #setDispatcher(Dispatcher)}.
    */
   public void enqueue(MockResponse response) {
     ((QueueDispatcher) dispatcher).enqueueResponse(response.clone());
@@ -317,8 +314,8 @@ public void start() throws IOException {
    * Starts the server on the loopback interface for the given port.
    *
    * @param port the port to listen to, or 0 for any available port. Automated
-   *     tests should always use port 0 to avoid flakiness when a specific port
-   *     is unavailable.
+   * tests should always use port 0 to avoid flakiness when a specific port
+   * is unavailable.
    */
   public void start(int port) throws IOException {
     start(InetAddress.getByName("localhost"), port);
@@ -328,10 +325,9 @@ public void start(int port) throws IOException {
    * Starts the server on the given address and port.
    *
    * @param inetAddress the address to create the server socket on
-   *
    * @param port the port to listen to, or 0 for any available port. Automated
-   *     tests should always use port 0 to avoid flakiness when a specific port
-   *     is unavailable.
+   * tests should always use port 0 to avoid flakiness when a specific port
+   * is unavailable.
    */
   public void start(InetAddress inetAddress, int port) throws IOException {
     start(new InetSocketAddress(inetAddress, port));
@@ -508,7 +504,7 @@ private void createTunnel() throws IOException, InterruptedException {
           if (!processOneRequest(raw, source, sink)) {
             throw new IllegalStateException("Tunnel without any CONNECT!");
           }
-          if (socketPolicy == SocketPolicy.UPGRADE_TO_SSL_AT_END) return;
+          if (socketPolicy == UPGRADE_TO_SSL_AT_END) return;
         }
       }
 
@@ -525,11 +521,11 @@ private boolean processOneRequest(Socket socket, BufferedSource source, Buffered
         requestQueue.add(request);
 
         MockResponse response = dispatcher.dispatch(request);
-        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AFTER_REQUEST) {
+        if (response.getSocketPolicy() == DISCONNECT_AFTER_REQUEST) {
           socket.close();
           return false;
         }
-        if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {
+        if (response.getSocketPolicy() == NO_RESPONSE) {
           // This read should block until the socket is closed. (Because nobody is writing.)
           if (source.exhausted()) return false;
           throw new ProtocolException("unexpected data");
@@ -551,12 +547,13 @@ private boolean processOneRequest(Socket socket, BufferedSource source, Buffered
               + " and responded: " + response);
         }
 
-        if (response.getSocketPolicy() == SocketPolicy.DISCONNECT_AT_END) {
+        // See warnings associated with these socket policies in SocketPolicy.
+        if (response.getSocketPolicy() == DISCONNECT_AT_END) {
           socket.close();
           return false;
-        } else if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_INPUT_AT_END) {
+        } else if (response.getSocketPolicy() == SHUTDOWN_INPUT_AT_END) {
           socket.shutdownInput();
-        } else if (response.getSocketPolicy() == SocketPolicy.SHUTDOWN_OUTPUT_AT_END) {
+        } else if (response.getSocketPolicy() == SHUTDOWN_OUTPUT_AT_END) {
           socket.shutdownOutput();
         }
 
@@ -921,7 +918,7 @@ private void writeResponse(FramedStream stream, MockResponse response) throws IO
         stream.getConnection().setSettings(settings);
       }
 
-      if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {
+      if (response.getSocketPolicy() == NO_RESPONSE) {
         return;
       }
       List<Header> spdyHeaders = new ArrayList<>();
@@ -958,21 +955,21 @@ private void pushPromises(FramedStream stream, List<PushPromise> promises) throw
         List<Header> pushedHeaders = new ArrayList<>();
         pushedHeaders.add(new Header(stream.getConnection().getProtocol() == Protocol.SPDY_3
             ? Header.TARGET_HOST
-            : Header.TARGET_AUTHORITY, url(pushPromise.getPath()).host()));
-        pushedHeaders.add(new Header(Header.TARGET_METHOD, pushPromise.getMethod()));
-        pushedHeaders.add(new Header(Header.TARGET_PATH, pushPromise.getPath()));
-        Headers pushPromiseHeaders = pushPromise.getHeaders();
+            : Header.TARGET_AUTHORITY, url(pushPromise.path()).host()));
+        pushedHeaders.add(new Header(Header.TARGET_METHOD, pushPromise.method()));
+        pushedHeaders.add(new Header(Header.TARGET_PATH, pushPromise.path()));
+        Headers pushPromiseHeaders = pushPromise.headers();
         for (int i = 0, size = pushPromiseHeaders.size(); i < size; i++) {
           pushedHeaders.add(new Header(pushPromiseHeaders.name(i), pushPromiseHeaders.value(i)));
         }
-        String requestLine = pushPromise.getMethod() + ' ' + pushPromise.getPath() + " HTTP/1.1";
+        String requestLine = pushPromise.method() + ' ' + pushPromise.path() + " HTTP/1.1";
         List<Integer> chunkSizes = Collections.emptyList(); // No chunked encoding for SPDY.
-        requestQueue.add(new RecordedRequest(requestLine, pushPromise.getHeaders(), chunkSizes, 0,
+        requestQueue.add(new RecordedRequest(requestLine, pushPromise.headers(), chunkSizes, 0,
             new Buffer(), sequenceNumber.getAndIncrement(), socket));
-        boolean hasBody = pushPromise.getResponse().getBody() != null;
+        boolean hasBody = pushPromise.response().getBody() != null;
         FramedStream pushedStream =
             stream.getConnection().pushStream(stream.getId(), pushedHeaders, hasBody);
-        writeResponse(pushedStream, pushPromise.getResponse());
+        writeResponse(pushedStream, pushPromise.response());
       }
     }
   }
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/PushPromise.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/PushPromise.java
similarity index 84%
rename from mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/PushPromise.java
rename to mockwebserver/src/main/java/okhttp3/mockwebserver/PushPromise.java
index 649b4ee73a..744127cadd 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/PushPromise.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/PushPromise.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.mockwebserver;
+package okhttp3.mockwebserver;
 
-import com.squareup.okhttp.Headers;
+import okhttp3.Headers;
 
 /** An HTTP request initiated by the server. */
 public final class PushPromise {
@@ -31,19 +31,19 @@ public PushPromise(String method, String path, Headers headers, MockResponse res
     this.response = response;
   }
 
-  public String getMethod() {
+  public String method() {
     return method;
   }
 
-  public String getPath() {
+  public String path() {
     return path;
   }
 
-  public Headers getHeaders() {
+  public Headers headers() {
     return headers;
   }
 
-  public MockResponse getResponse() {
+  public MockResponse response() {
     return response;
   }
 }
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java
similarity index 98%
rename from mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java
rename to mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java
index bb36cdf696..d79418d977 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/QueueDispatcher.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.mockwebserver;
+package okhttp3.mockwebserver;
 
 import java.net.HttpURLConnection;
 import java.util.concurrent.BlockingQueue;
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java
similarity index 96%
rename from mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java
rename to mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java
index 99d4d273b2..2498af49c4 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.mockwebserver;
+package okhttp3.mockwebserver;
 
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.TlsVersion;
+import okhttp3.Headers;
+import okhttp3.TlsVersion;
 import java.net.Socket;
 import java.util.List;
 import javax.net.ssl.SSLSocket;
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java
similarity index 63%
rename from mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java
rename to mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java
index f71f33df1f..fd8fd43d5c 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/SocketPolicy.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/SocketPolicy.java
@@ -14,9 +14,21 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.mockwebserver;
+package okhttp3.mockwebserver;
 
-/** What should be done with the incoming socket. */
+/**
+ * What should be done with the incoming socket.
+ *
+ * <p>Be careful when using values like {@link #DISCONNECT_AT_END}, {@link #SHUTDOWN_INPUT_AT_END}
+ * and {@link #SHUTDOWN_OUTPUT_AT_END} that close a socket after a response, and where there are
+ * follow-up requests. The client is unblocked and free to continue as soon as it has received the
+ * entire response body. If and when the client makes a subsequent request using a pooled socket the
+ * server may not have had time to close the socket. The socket will be closed at an indeterminate
+ * point before or during the second request. It may be closed after client has started sending the
+ * request body. If a request body is not retryable then the client may fail the request, making
+ * client behavior non-deterministic. Add delays in the client to improve the chances that the
+ * server has closed the socket before follow up requests are made.
+ */
 public enum SocketPolicy {
 
   /**
@@ -28,6 +40,8 @@
   /**
    * Close the socket after the response. This is the default HTTP/1.0
    * behavior.
+   *
+   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it.
    */
   DISCONNECT_AT_END,
 
@@ -62,12 +76,16 @@
   /**
    * Shutdown the socket input after sending the response. For testing bad
    * behavior.
+   *
+   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it.
    */
   SHUTDOWN_INPUT_AT_END,
 
   /**
    * Shutdown the socket output after sending the response. For testing bad
    * behavior.
+   *
+   * <p>See {@link SocketPolicy} for reasons why this can cause test flakiness and how to avoid it.
    */
   SHUTDOWN_OUTPUT_AT_END,
 
diff --git a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java
similarity index 96%
rename from mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java
rename to mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java
index 1c8c8206c9..5f189dc608 100644
--- a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java
+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/CustomDispatcherTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.mockwebserver;
+package okhttp3.mockwebserver;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -46,7 +46,7 @@ public MockResponse dispatch(RecordedRequest request) throws InterruptedExceptio
     };
     assertEquals(0, requestsMade.size());
     mockWebServer.setDispatcher(dispatcher);
-    final URL url = mockWebServer.getUrl("/");
+    final URL url = mockWebServer.url("/").url();
     final HttpURLConnection conn = (HttpURLConnection) url.openConnection();
     conn.getResponseCode(); // Force the connection to hit the "server".
     // Make sure our dispatcher got the request.
@@ -86,7 +86,7 @@ public MockResponse dispatch(RecordedRequest request) throws InterruptedExceptio
   private Thread buildRequestThread(final String path, final AtomicInteger responseCode) {
     return new Thread(new Runnable() {
       @Override public void run() {
-        final URL url = mockWebServer.getUrl(path);
+        final URL url = mockWebServer.url(path).url();
         final HttpURLConnection conn;
         try {
           conn = (HttpURLConnection) url.openConnection();
diff --git a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
similarity index 91%
rename from mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java
rename to mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
index 95e0fe48bf..0e0dcf2986 100644
--- a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java
+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.mockwebserver;
+package okhttp3.mockwebserver;
 
-import com.squareup.okhttp.Headers;
+import okhttp3.Headers;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -83,7 +83,7 @@
   @Test public void regularResponse() throws Exception {
     server.enqueue(new MockResponse().setBody("hello world"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
     connection.setRequestProperty("Accept-Language", "en-US");
     InputStream in = connection.getInputStream();
@@ -99,11 +99,11 @@
   @Test public void redirect() throws Exception {
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)
-        .addHeader("Location: " + server.getUrl("/new-path"))
+        .addHeader("Location: " + server.url("/new-path"))
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("This is the new location!"));
 
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
     BufferedReader reader = new BufferedReader(new InputStreamReader(in));
     assertEquals("This is the new location!", reader.readLine());
@@ -129,7 +129,7 @@
       }
     }.start();
 
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
     BufferedReader reader = new BufferedReader(new InputStreamReader(in));
     assertEquals("enqueued in the background", reader.readLine());
@@ -141,7 +141,7 @@
         .clearHeaders()
         .addHeader("Transfer-encoding: chunked"));
 
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
     try {
       in.read();
@@ -157,7 +157,7 @@
         .addHeader("Content-Length: 4"));
     server.enqueue(new MockResponse().setBody("DEF"));
 
-    URLConnection urlConnection = server.getUrl("/").openConnection();
+    URLConnection urlConnection = server.url("/").url().openConnection();
     urlConnection.setReadTimeout(1000);
     InputStream in = urlConnection.getInputStream();
     assertEquals('A', in.read());
@@ -169,7 +169,7 @@
     } catch (SocketTimeoutException expected) {
     }
 
-    URLConnection urlConnection2 = server.getUrl("/").openConnection();
+    URLConnection urlConnection2 = server.url("/").url().openConnection();
     InputStream in2 = urlConnection2.getInputStream();
     assertEquals('D', in2.read());
     assertEquals('E', in2.read());
@@ -185,10 +185,10 @@
     server.enqueue(new MockResponse()); // The jdk's HttpUrlConnection is a bastard.
     server.enqueue(new MockResponse());
     try {
-      server.getUrl("/a").openConnection().getInputStream();
+      server.url("/a").url().openConnection().getInputStream();
     } catch (IOException expected) {
     }
-    server.getUrl("/b").openConnection().getInputStream(); // Should succeed.
+    server.url("/b").url().openConnection().getInputStream(); // Should succeed.
   }
 
   /**
@@ -200,7 +200,7 @@
         .throttleBody(3, 500, TimeUnit.MILLISECONDS));
 
     long startNanos = System.nanoTime();
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     connection.setDoOutput(true);
     connection.getOutputStream().write("ABCDEF".getBytes("UTF-8"));
     InputStream in = connection.getInputStream();
@@ -222,7 +222,7 @@
         .throttleBody(3, 500, TimeUnit.MILLISECONDS));
 
     long startNanos = System.nanoTime();
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
     assertEquals('A', in.read());
     assertEquals('B', in.read());
@@ -245,7 +245,7 @@
         .setBodyDelay(1, SECONDS));
 
     long startNanos = System.nanoTime();
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
     assertEquals('A', in.read());
     long elapsedNanos = System.nanoTime() - startNanos;
@@ -258,7 +258,7 @@
   @Test public void disconnectRequestHalfway() throws IOException {
     server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY));
 
-    HttpURLConnection connection = (HttpURLConnection) server.getUrl("/").openConnection();
+    HttpURLConnection connection = (HttpURLConnection) server.url("/").url().openConnection();
     connection.setRequestMethod("POST");
     connection.setDoOutput(true);
     connection.setFixedLengthStreamingMode(1024 * 1024 * 1024); // 1 GB
@@ -283,7 +283,7 @@
         .setBody("ab")
         .setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));
 
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     assertEquals(2, connection.getContentLength());
     InputStream in = connection.getInputStream();
     assertEquals('a', in.read());
@@ -345,7 +345,7 @@
     Statement statement = server.apply(new Statement() {
       @Override public void evaluate() throws Throwable {
         called.set(true);
-        server.getUrl("/").openConnection().connect();
+        server.url("/").url().openConnection().connect();
       }
     }, Description.EMPTY);
 
@@ -353,7 +353,7 @@
 
     assertTrue(called.get());
     try {
-      server.getUrl("/").openConnection().connect();
+      server.url("/").url().openConnection().connect();
       fail();
     } catch (ConnectException expected) {
     }
diff --git a/okcurl/pom.xml b/okcurl/pom.xml
index 537f0b6b3c..2b9b7ceab0 100644
--- a/okcurl/pom.xml
+++ b/okcurl/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okcurl</artifactId>
@@ -14,12 +14,12 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
@@ -62,7 +62,7 @@
           </descriptorRefs>
           <archive>
             <manifest>
-              <mainClass>com.squareup.okhttp.curl.Main</mainClass>
+              <mainClass>okhttp3.curl.Main</mainClass>
             </manifest>
           </archive>
         </configuration>
diff --git a/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java b/okcurl/src/main/java/okhttp3/curl/Main.java
similarity index 95%
rename from okcurl/src/main/java/com/squareup/okhttp/curl/Main.java
rename to okcurl/src/main/java/okhttp3/curl/Main.java
index 65c2cd04f9..25f3c2b5c1 100644
--- a/okcurl/src/main/java/com/squareup/okhttp/curl/Main.java
+++ b/okcurl/src/main/java/okhttp3/curl/Main.java
@@ -13,19 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.curl;
+package okhttp3.curl;
 
 import com.google.common.base.Joiner;
-import com.squareup.okhttp.ConnectionPool;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.http.StatusLine;
-import com.squareup.okhttp.internal.framed.Http2;
+import okhttp3.ConnectionPool;
+import okhttp3.Headers;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.internal.http.StatusLine;
+import okhttp3.internal.framed.Http2;
 
 import io.airlift.command.Arguments;
 import io.airlift.command.Command;
diff --git a/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java b/okcurl/src/test/java/okhttp3/curl/MainTest.java
similarity index 84%
rename from okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java
rename to okcurl/src/test/java/okhttp3/curl/MainTest.java
index d6961e1787..9f4d553a09 100644
--- a/okcurl/src/test/java/com/squareup/okhttp/curl/MainTest.java
+++ b/okcurl/src/test/java/okhttp3/curl/MainTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.curl;
+package okhttp3.curl;
 
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
+import okhttp3.Request;
+import okhttp3.RequestBody;
 import java.io.IOException;
 import okio.Buffer;
 import org.junit.Test;
 
-import static com.squareup.okhttp.curl.Main.fromArgs;
+import static okhttp3.curl.Main.fromArgs;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
@@ -29,14 +29,14 @@
   @Test public void simple() {
     Request request = fromArgs("http://example.com").createRequest();
     assertEquals("GET", request.method());
-    assertEquals("http://example.com/", request.urlString());
+    assertEquals("http://example.com/", request.url().toString());
     assertNull(request.body());
   }
 
   @Test public void put() throws IOException {
     Request request = fromArgs("-X", "PUT", "-d", "foo", "http://example.com").createRequest();
     assertEquals("PUT", request.method());
-    assertEquals("http://example.com/", request.urlString());
+    assertEquals("http://example.com/", request.url().toString());
     assertEquals(3, request.body().contentLength());
   }
 
@@ -44,7 +44,7 @@
     Request request = fromArgs("-d", "foo", "http://example.com").createRequest();
     RequestBody body = request.body();
     assertEquals("POST", request.method());
-    assertEquals("http://example.com/", request.urlString());
+    assertEquals("http://example.com/", request.url().toString());
     assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());
     assertEquals("foo", bodyAsString(body));
   }
@@ -53,7 +53,7 @@
     Request request = fromArgs("-d", "foo", "-X", "PUT", "http://example.com").createRequest();
     RequestBody body = request.body();
     assertEquals("PUT", request.method());
-    assertEquals("http://example.com/", request.urlString());
+    assertEquals("http://example.com/", request.url().toString());
     assertEquals("application/x-www-form-urlencoded; charset=utf-8", body.contentType().toString());
     assertEquals("foo", bodyAsString(body));
   }
@@ -63,7 +63,7 @@
         "http://example.com").createRequest();
     RequestBody body = request.body();
     assertEquals("POST", request.method());
-    assertEquals("http://example.com/", request.urlString());
+    assertEquals("http://example.com/", request.url().toString());
     assertEquals("application/json; charset=utf-8", body.contentType().toString());
     assertEquals("foo", bodyAsString(body));
   }
@@ -71,7 +71,7 @@
   @Test public void referer() {
     Request request = fromArgs("-e", "foo", "http://example.com").createRequest();
     assertEquals("GET", request.method());
-    assertEquals("http://example.com/", request.urlString());
+    assertEquals("http://example.com/", request.url().toString());
     assertEquals("foo", request.header("Referer"));
     assertNull(request.body());
   }
@@ -79,7 +79,7 @@
   @Test public void userAgent() {
     Request request = fromArgs("-A", "foo", "http://example.com").createRequest();
     assertEquals("GET", request.method());
-    assertEquals("http://example.com/", request.urlString());
+    assertEquals("http://example.com/", request.url().toString());
     assertEquals("foo", request.header("User-Agent"));
     assertNull(request.body());
   }
diff --git a/okhttp-android-support/pom.xml b/okhttp-android-support/pom.xml
index 99ef280e55..58ec87b3ea 100644
--- a/okhttp-android-support/pom.xml
+++ b/okhttp-android-support/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-android-support</artifactId>
@@ -15,13 +15,13 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-urlconnection</artifactId>
       <version>${project.version}</version>
     </dependency>
@@ -32,7 +32,7 @@
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
@@ -45,7 +45,7 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
         <configuration>
-          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>
+          <excludePackageNames>okhttp3.internal.*</excludePackageNames>
           <links>
             <link>http://square.github.io/okhttp/javadoc/</link>
           </links>
diff --git a/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java b/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java
similarity index 95%
rename from okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java
rename to okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java
index eeaf55473f..9a16786895 100644
--- a/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidInternal.java
+++ b/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.huc.CacheAdapter;
+import okhttp3.internal.huc.CacheAdapter;
 
 import java.net.ResponseCache;
 
diff --git a/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidShimResponseCache.java b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java
similarity index 96%
rename from okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidShimResponseCache.java
rename to okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java
index 4986c38a4b..cc669ae890 100644
--- a/okhttp-android-support/src/main/java/com/squareup/okhttp/AndroidShimResponseCache.java
+++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.huc.JavaApiConverter;
+import okhttp3.internal.huc.JavaApiConverter;
 
 import java.io.File;
 import java.io.IOException;
@@ -71,7 +71,7 @@ public Cache getCache() {
       // The URLConnection is not cacheable or could not be converted. Stop.
       return null;
     }
-    com.squareup.okhttp.internal.http.CacheRequest okCacheRequest =
+    okhttp3.internal.http.CacheRequest okCacheRequest =
         delegate.internalCache.put(okResponse);
     if (okCacheRequest == null) {
       return null;
diff --git a/okhttp-android-support/src/main/java/com/squareup/okhttp/OkCacheContainer.java b/okhttp-android-support/src/main/java/okhttp3/OkCacheContainer.java
similarity index 96%
rename from okhttp-android-support/src/main/java/com/squareup/okhttp/OkCacheContainer.java
rename to okhttp-android-support/src/main/java/okhttp3/OkCacheContainer.java
index d7b62e3ae1..06810999b4 100644
--- a/okhttp-android-support/src/main/java/com/squareup/okhttp/OkCacheContainer.java
+++ b/okhttp-android-support/src/main/java/okhttp3/OkCacheContainer.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 /**
  * An interface that allows OkHttp to detect that a {@link java.net.ResponseCache} contains a
diff --git a/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java
similarity index 90%
rename from okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java
rename to okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java
index e13c575391..b846f5ff19 100644
--- a/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/CacheAdapter.java
+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/CacheAdapter.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.huc;
+package okhttp3.internal.huc;
 
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.InternalCache;
-import com.squareup.okhttp.internal.http.CacheRequest;
-import com.squareup.okhttp.internal.http.CacheStrategy;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.InternalCache;
+import okhttp3.internal.http.CacheRequest;
+import okhttp3.internal.http.CacheStrategy;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.CacheResponse;
@@ -52,7 +52,7 @@ public ResponseCache getDelegate() {
   }
 
   @Override public CacheRequest put(Response response) throws IOException {
-    URI uri = response.request().uri();
+    URI uri = response.request().url().uri();
     HttpURLConnection connection = JavaApiConverter.createJavaUrlConnectionForCachePut(response);
     final java.net.CacheRequest request = delegate.put(uri, connection);
     if (request == null) {
@@ -100,6 +100,6 @@ public ResponseCache getDelegate() {
    */
   private CacheResponse getJavaCachedResponse(Request request) throws IOException {
     Map<String, List<String>> headers = JavaApiConverter.extractJavaHeaders(request);
-    return delegate.get(request.uri(), request.method(), headers);
+    return delegate.get(request.url().uri(), request.method(), headers);
   }
 }
diff --git a/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
similarity index 94%
rename from okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java
rename to okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
index 89570cc874..57f1792afe 100644
--- a/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java
+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
@@ -13,21 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.huc;
-
-import com.squareup.okhttp.Handshake;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.http.CacheRequest;
-import com.squareup.okhttp.internal.http.HttpMethod;
-import com.squareup.okhttp.internal.http.OkHeaders;
-import com.squareup.okhttp.internal.http.StatusLine;
+package okhttp3.internal.huc;
+
+import okhttp3.CipherSuite;
+import okhttp3.Handshake;
+import okhttp3.Headers;
+import okhttp3.MediaType;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.Internal;
+import okhttp3.internal.Util;
+import okhttp3.internal.http.CacheRequest;
+import okhttp3.internal.http.HttpMethod;
+import okhttp3.internal.http.OkHeaders;
+import okhttp3.internal.http.StatusLine;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -124,8 +125,9 @@ public static Response createOkResponseForCachePut(URI uri, URLConnection urlCon
 
       Certificate[] localCertificates = httpsUrlConnection.getLocalCertificates();
 
-      Handshake handshake = Handshake.get(
-          httpsUrlConnection.getCipherSuite(), nullSafeImmutableList(peerCertificates),
+      String cipherSuiteString = httpsUrlConnection.getCipherSuite();
+      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);
+      Handshake handshake = Handshake.get(cipherSuite, nullSafeImmutableList(peerCertificates),
           nullSafeImmutableList(localCertificates));
       okResponseBuilder.handshake(handshake);
     }
@@ -210,7 +212,7 @@ static Response createOkResponseForCacheGet(Request request, CacheResponse javaR
     }
 
     Request cacheRequest = new Request.Builder()
-        .url(request.httpUrl())
+        .url(request.url())
         .method(request.method(), null)
         .headers(varyHeaders)
         .build();
@@ -249,8 +251,10 @@ static Response createOkResponseForCacheGet(Request request, CacheResponse javaR
       if (localCertificates == null) {
         localCertificates = Collections.emptyList();
       }
-      Handshake handshake = Handshake.get(
-          javaSecureCacheResponse.getCipherSuite(), peerCertificates, localCertificates);
+
+      String cipherSuiteString = javaSecureCacheResponse.getCipherSuite();
+      CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);
+      Handshake handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);
       okResponseBuilder.handshake(handshake);
     }
 
@@ -294,7 +298,7 @@ public static CacheResponse createJavaCacheResponse(final Response response) {
       return new SecureCacheResponse() {
         @Override
         public String getCipherSuite() {
-          return handshake != null ? handshake.cipherSuite() : null;
+          return handshake != null ? handshake.cipherSuite().javaName() : null;
         }
 
         @Override
@@ -386,7 +390,7 @@ static HttpURLConnection createJavaUrlConnectionForCachePut(Response okResponse)
   }
 
   /**
-   * Extracts an immutable request header map from the supplied {@link com.squareup.okhttp.Headers}.
+   * Extracts an immutable request header map from the supplied {@link Headers}.
    */
   static Map<String, List<String>> extractJavaHeaders(Request request) {
     return OkHeaders.toMultimap(request.headers(), null);
@@ -470,10 +474,9 @@ static String extractStatusLine(Map<String, List<String>> javaResponseHeaders)
    * Creates an OkHttp Response.Body containing the supplied information.
    */
   private static ResponseBody createOkBody(final Headers okHeaders,
-      final CacheResponse cacheResponse) {
+      final CacheResponse cacheResponse) throws IOException {
+    final BufferedSource body = Okio.buffer(Okio.source(cacheResponse.getBody()));
     return new ResponseBody() {
-      private BufferedSource body;
-
       @Override
       public MediaType contentType() {
         String contentTypeHeader = okHeaders.get("Content-Type");
@@ -484,11 +487,7 @@ public MediaType contentType() {
       public long contentLength() {
         return OkHeaders.contentLength(okHeaders);
       }
-      @Override public BufferedSource source() throws IOException {
-        if (body == null) {
-          InputStream is = cacheResponse.getBody();
-          body = Okio.buffer(Okio.source(is));
-        }
+      @Override public BufferedSource source() {
         return body;
       }
     };
@@ -497,13 +496,13 @@ public long contentLength() {
   /**
    * Creates an OkHttp Response.Body containing the supplied information.
    */
-  private static ResponseBody createOkBody(final URLConnection urlConnection) {
+  private static ResponseBody createOkBody(final URLConnection urlConnection) throws IOException {
     if (!urlConnection.getDoInput()) {
       return null;
     }
-    return new ResponseBody() {
-      private BufferedSource body;
 
+    final BufferedSource body = Okio.buffer(Okio.source(urlConnection.getInputStream()));
+    return new ResponseBody() {
       @Override public MediaType contentType() {
         String contentTypeHeader = urlConnection.getContentType();
         return contentTypeHeader == null ? null : MediaType.parse(contentTypeHeader);
@@ -512,11 +511,7 @@ private static ResponseBody createOkBody(final URLConnection urlConnection) {
         String s = urlConnection.getHeaderField("Content-Length");
         return stringToLong(s);
       }
-      @Override public BufferedSource source() throws IOException {
-        if (body == null) {
-          InputStream is = urlConnection.getInputStream();
-          body = Okio.buffer(Okio.source(is));
-        }
+      @Override public BufferedSource source() {
         return body;
       }
     };
@@ -537,7 +532,7 @@ private static ResponseBody createOkBody(final URLConnection urlConnection) {
     private final Response response;
 
     public CacheHttpURLConnection(Response response) {
-      super(response.request().url());
+      super(response.request().url().url());
       this.request = response.request();
       this.response = response;
 
@@ -723,7 +718,11 @@ public Object getContent(Class[] classes) throws IOException {
 
     @Override
     public InputStream getInputStream() throws IOException {
-      throw throwResponseBodyAccessException();
+      return new InputStream() {
+        @Override public int read() throws IOException {
+          throw throwResponseBodyAccessException();
+        }
+      };
     }
 
     @Override
diff --git a/okhttp-android-support/src/test/java/com/squareup/okhttp/AbstractResponseCache.java b/okhttp-android-support/src/test/java/okhttp3/AbstractResponseCache.java
similarity index 97%
rename from okhttp-android-support/src/test/java/com/squareup/okhttp/AbstractResponseCache.java
rename to okhttp-android-support/src/test/java/okhttp3/AbstractResponseCache.java
index 2a59d22a02..d755487c92 100644
--- a/okhttp-android-support/src/test/java/com/squareup/okhttp/AbstractResponseCache.java
+++ b/okhttp-android-support/src/test/java/okhttp3/AbstractResponseCache.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 import java.net.CacheRequest;
diff --git a/okhttp-android-support/src/test/java/com/squareup/okhttp/android/HttpResponseCache.java b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCache.java
similarity index 93%
rename from okhttp-android-support/src/test/java/com/squareup/okhttp/android/HttpResponseCache.java
rename to okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCache.java
index 30d965c2b7..6b0802020e 100644
--- a/okhttp-android-support/src/test/java/com/squareup/okhttp/android/HttpResponseCache.java
+++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCache.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.android;
+package okhttp3.android;
 
-import com.squareup.okhttp.Cache;
-import com.squareup.okhttp.AndroidShimResponseCache;
-import com.squareup.okhttp.OkCacheContainer;
+import okhttp3.Cache;
+import okhttp3.AndroidShimResponseCache;
+import okhttp3.OkCacheContainer;
 
 import java.io.Closeable;
 import java.io.File;
@@ -33,11 +33,11 @@
 
 /**
  * A copy of android.net.http.HttpResponseCache taken from AOSP. Android need to keep this code
- * working somehow. Dependencies on com.squareup.okhttp are com.android.okhttp on Android.
- */
-/* <p>This class exists in okhttp-android-support to help keep the API as it always has been on
+ * working somehow. Dependencies on okhttp3 are com.android.okhttp on Android.
+ *
+ * <p>This class exists in okhttp-android-support to help keep the API as it always has been on
  * Android. The public API cannot be changed. This class delegates to
- * {@link com.squareup.okhttp.AndroidShimResponseCache}, a class that exists in a package that
+ * {@link AndroidShimResponseCache}, a class that exists in a package that
  * enables it to interact with non-public OkHttp classes.
  */
 public final class HttpResponseCache extends ResponseCache implements Closeable, OkCacheContainer {
diff --git a/okhttp-android-support/src/test/java/com/squareup/okhttp/android/HttpResponseCacheTest.java b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java
similarity index 94%
rename from okhttp-android-support/src/test/java/com/squareup/okhttp/android/HttpResponseCacheTest.java
rename to okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java
index 851501750b..dbaf9db93b 100644
--- a/okhttp-android-support/src/test/java/com/squareup/okhttp/android/HttpResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.android;
-
-import com.squareup.okhttp.AndroidInternal;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
+package okhttp3.android;
+
+import okhttp3.AndroidInternal;
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import java.io.File;
 import java.io.InputStream;
 import java.net.CacheRequest;
@@ -162,7 +162,7 @@ public CacheRequest put(URI uri, URLConnection connection) {
     assertEquals(2, cache.getHitCount());
   }
 
-  // This mimics the Android HttpHandler, which is found in the com.squareup.okhttp package.
+  // This mimics the Android HttpHandler, which is found in the okhttp3 package.
   private URLConnection openUrl(HttpUrl url) {
     ResponseCache responseCache = ResponseCache.getDefault();
     AndroidInternal.setResponseCache(client, responseCache);
diff --git a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
similarity index 95%
rename from okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java
rename to okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
index 97593d5779..eff0cd395f 100644
--- a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/CacheAdapterTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.huc;
-
-import com.squareup.okhttp.AbstractResponseCache;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.testing.RecordingHostnameVerifier;
+package okhttp3.internal.huc;
+
+import okhttp3.AbstractResponseCache;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.internal.Internal;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.testing.RecordingHostnameVerifier;
 import java.io.IOException;
 import java.net.CacheRequest;
 import java.net.CacheResponse;
@@ -252,13 +252,13 @@ private void executePost(HttpURLConnection connection) throws IOException {
   private URL configureServer(MockResponse mockResponse) throws Exception {
     server.enqueue(mockResponse);
     server.start();
-    return server.getUrl("/");
+    return server.url("/").url();
   }
 
   private URL configureHttpsServer(MockResponse mockResponse) throws Exception {
     server.useHttps(sslContext.getSocketFactory(), false /* tunnelProxy */);
     server.enqueue(mockResponse);
     server.start();
-    return server.getUrl("/");
+    return server.url("/").url();
   }
 }
diff --git a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java
similarity index 95%
rename from okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
rename to okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java
index 7255372bbe..e06572cbec 100644
--- a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java
@@ -13,19 +13,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.huc;
-
-import com.squareup.okhttp.Handshake;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
+package okhttp3.internal.huc;
+
+import okhttp3.CipherSuite;
+import okhttp3.Handshake;
+import okhttp3.Headers;
+import okhttp3.MediaType;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.Internal;
+import okhttp3.internal.Util;
+import okhttp3.mockwebserver.MockWebServer;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -51,6 +52,7 @@
 import javax.net.ssl.SSLPeerUnverifiedException;
 import okio.Buffer;
 import okio.BufferedSource;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -118,7 +120,7 @@
 
     Response response = JavaApiConverter.createOkResponseForCacheGet(request, cacheResponse);
     Request cacheRequest = response.request();
-    assertEquals(request.httpUrl(), cacheRequest.httpUrl());
+    assertEquals(request.url(), cacheRequest.url());
     assertEquals(request.method(), cacheRequest.method());
     assertEquals(0, request.headers().size());
 
@@ -176,7 +178,7 @@
       }
 
       @Override public String getCipherSuite() {
-        return "SuperSecure";
+        return "SSL_RSA_WITH_NULL_MD5";
       }
 
       @Override public List<Certificate> getLocalCertificateChain() {
@@ -198,7 +200,7 @@
 
     Response response = JavaApiConverter.createOkResponseForCacheGet(request, cacheResponse);
     Request cacheRequest = response.request();
-    assertEquals(request.httpUrl(), cacheRequest.httpUrl());
+    assertEquals(request.url(), cacheRequest.url());
     assertEquals(request.method(), cacheRequest.method());
     assertEquals(0, request.headers().size());
 
@@ -211,7 +213,7 @@
 
     Handshake handshake = response.handshake();
     assertNotNull(handshake);
-    assertNotNullAndEquals("SuperSecure", handshake.cipherSuite());
+    assertNotNullAndEquals(CipherSuite.TLS_RSA_WITH_NULL_MD5, handshake.cipherSuite());
     assertEquals(localPrincipal, handshake.localPrincipal());
     assertEquals(serverPrincipal, handshake.peerPrincipal());
     assertEquals(serverCertificates, handshake.peerCertificates());
@@ -224,7 +226,7 @@
     Map<String,List<String>> javaRequestHeaders = null;
     Request request = JavaApiConverter.createOkRequest(uri, "POST", javaRequestHeaders);
     assertFalse(request.isHttps());
-    assertEquals(uri, request.uri());
+    assertEquals(uri, request.url().uri());
     Headers okRequestHeaders = request.headers();
     assertEquals(0, okRequestHeaders.size());
     assertEquals("POST", request.method());
@@ -237,7 +239,7 @@
     javaRequestHeaders.put("Foo", Arrays.asList("Bar"));
     Request request = JavaApiConverter.createOkRequest(uri, "POST", javaRequestHeaders);
     assertTrue(request.isHttps());
-    assertEquals(uri, request.uri());
+    assertEquals(uri, request.url().uri());
     Headers okRequestHeaders = request.headers();
     assertEquals(1, okRequestHeaders.size());
     assertEquals("Bar", okRequestHeaders.get("Foo"));
@@ -256,7 +258,7 @@
     javaRequestHeaders.put("Foo", Arrays.asList("Bar"));
     Request request = JavaApiConverter.createOkRequest(uri, "POST", javaRequestHeaders);
     assertTrue(request.isHttps());
-    assertEquals(uri, request.uri());
+    assertEquals(uri, request.url().uri());
     Headers okRequestHeaders = request.headers();
     assertEquals(1, okRequestHeaders.size());
     assertEquals("Bar", okRequestHeaders.get("Foo"));
@@ -318,8 +320,9 @@
         JavaApiConverter.createJavaUrlConnectionForCachePut(okResponse);
     // Check an arbitrary (not complete) set of methods that can be used to access the response
     // body.
+    InputStream is = httpUrlConnection.getInputStream();
     try {
-      httpUrlConnection.getInputStream();
+      is.read();
       fail();
     } catch (UnsupportedOperationException expected) {
     }
@@ -461,15 +464,15 @@ private void assertHeadersContainsMapping(Map<String, List<String>> headers, Str
         .get()
         .url("https://secure/request")
         .build();
-    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),
-        Arrays.<Certificate>asList(LOCAL_CERT));
+    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,
+        Arrays.<Certificate>asList(SERVER_CERT), Arrays.<Certificate>asList(LOCAL_CERT));
     Response okResponse = createArbitraryOkResponse(okRequest).newBuilder()
         .handshake(handshake)
         .build();
     HttpsURLConnection httpsUrlConnection =
         (HttpsURLConnection) JavaApiConverter.createJavaUrlConnectionForCachePut(okResponse);
 
-    assertEquals("SecureCipher", httpsUrlConnection.getCipherSuite());
+    assertEquals("SSL_RSA_WITH_NULL_MD5", httpsUrlConnection.getCipherSuite());
     assertEquals(SERVER_CERT.getSubjectX500Principal(), httpsUrlConnection.getPeerPrincipal());
     assertArrayEquals(new Certificate[] { LOCAL_CERT }, httpsUrlConnection.getLocalCertificates());
     assertArrayEquals(new Certificate[] { SERVER_CERT },
@@ -551,8 +554,8 @@ private void assertHeadersContainsMapping(Map<String, List<String>> headers, Str
             .post(createRequestBody("RequestBody") )
             .build();
     ResponseBody responseBody = createResponseBody("ResponseBody");
-    Handshake handshake = Handshake.get("SecureCipher", Arrays.<Certificate>asList(SERVER_CERT),
-        Arrays.<Certificate>asList(LOCAL_CERT));
+    Handshake handshake = Handshake.get(CipherSuite.TLS_RSA_WITH_NULL_MD5,
+        Arrays.<Certificate>asList(SERVER_CERT), Arrays.<Certificate>asList(LOCAL_CERT));
     Response okResponse = createArbitraryOkResponse(okRequest).newBuilder()
         .protocol(Protocol.HTTP_1_1)
         .code(200)
@@ -569,7 +572,7 @@ private void assertHeadersContainsMapping(Map<String, List<String>> headers, Str
     assertEquals(Arrays.asList("value1_1", "value1_2"), javaHeaders.get("key1"));
     assertEquals(Arrays.asList("HTTP/1.1 200 Fantastic"), javaHeaders.get(null));
     assertEquals("ResponseBody", readAll(javaCacheResponse.getBody()));
-    assertEquals(handshake.cipherSuite(), javaCacheResponse.getCipherSuite());
+    assertEquals(handshake.cipherSuite().javaName(), javaCacheResponse.getCipherSuite());
     assertEquals(handshake.localCertificates(), javaCacheResponse.getLocalCertificateChain());
     assertEquals(handshake.peerCertificates(), javaCacheResponse.getServerCertificateChain());
     assertEquals(handshake.localPrincipal(), javaCacheResponse.getLocalPrincipal());
diff --git a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
similarity index 89%
rename from okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java
rename to okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
index 1dbf78fc83..bfd7a39765 100644
--- a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/ResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.huc;
-
-import com.squareup.okhttp.AbstractResponseCache;
-import com.squareup.okhttp.AndroidInternal;
-import com.squareup.okhttp.AndroidShimResponseCache;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
-import com.squareup.okhttp.testing.RecordingHostnameVerifier;
+package okhttp3.internal.huc;
+
+import okhttp3.AbstractResponseCache;
+import okhttp3.AndroidInternal;
+import okhttp3.AndroidShimResponseCache;
+import okhttp3.Headers;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.internal.Internal;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
+import okhttp3.testing.RecordingHostnameVerifier;
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.FileNotFoundException;
@@ -67,6 +67,7 @@
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLContext;
+import okhttp3.mockwebserver.SocketPolicy;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.GzipSink;
@@ -77,7 +78,6 @@
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -87,7 +87,7 @@
 
 /**
  * Tests the interaction between OkHttp and {@link ResponseCache}.
- * Based on com.squareup.okhttp.CacheTest with changes for ResponseCache and HttpURLConnection.
+ * Based on okhttp3.CacheTest with changes for ResponseCache and HttpURLConnection.
  */
 public final class ResponseCacheTest {
   @Rule public TemporaryFolder cacheRule = new TemporaryFolder();
@@ -195,7 +195,7 @@ private void assertCached(boolean shouldPut, int responseCode) throws Exception
     server.enqueue(mockResponse);
     server.start();
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection connection = openConnection(url);
     assertEquals(responseCode, connection.getResponseCode());
 
@@ -236,7 +236,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     server.enqueue(mockResponse);
 
     // Make sure that calling skip() doesn't omit bytes from the cache.
-    HttpURLConnection urlConnection = openConnection(server.getUrl("/"));
+    HttpURLConnection urlConnection = openConnection(server.url("/").url());
     InputStream in = urlConnection.getInputStream();
     assertEquals("I love ", readAscii(urlConnection, "I love ".length()));
     reliableSkip(in, "puppies but hate ".length());
@@ -244,7 +244,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     assertEquals(-1, in.read());
     in.close();
 
-    urlConnection = openConnection(server.getUrl("/")); // cached!
+    urlConnection = openConnection(server.url("/").url()); // cached!
     in = urlConnection.getInputStream();
     assertEquals("I love puppies but hate spiders",
         readAscii(urlConnection, "I love puppies but hate spiders".length()));
@@ -262,7 +262,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS))
         .setBody("ABC"));
 
-    HttpsURLConnection c1 = (HttpsURLConnection) openConnection(server.getUrl("/"));
+    HttpsURLConnection c1 = (HttpsURLConnection) openConnection(server.url("/").url());
     c1.setSSLSocketFactory(sslContext.getSocketFactory());
     c1.setHostnameVerifier(hostnameVerifier);
     assertEquals("ABC", readAscii(c1));
@@ -274,7 +274,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     Principal peerPrincipal = c1.getPeerPrincipal();
     Principal localPrincipal = c1.getLocalPrincipal();
 
-    HttpsURLConnection c2 = (HttpsURLConnection) openConnection(server.getUrl("/")); // cached!
+    HttpsURLConnection c2 = (HttpsURLConnection) openConnection(server.url("/").url()); // cached!
     c2.setSSLSocketFactory(sslContext.getSocketFactory());
     c2.setHostnameVerifier(hostnameVerifier);
     assertEquals("ABC", readAscii(c2));
@@ -299,10 +299,10 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     server.enqueue(new MockResponse()
         .setBody("DEF"));
 
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     assertEquals("ABC", readAscii(connection));
 
-    connection = openConnection(server.getUrl("/")); // cached!
+    connection = openConnection(server.url("/").url()); // cached!
     assertEquals("ABC", readAscii(connection));
   }
 
@@ -316,18 +316,18 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     server.enqueue(new MockResponse()
         .setBody("DEF"));
 
-    assertEquals("ABC", readAscii(openConnection(server.getUrl("/foo"))));
+    assertEquals("ABC", readAscii(openConnection(server.url("/foo").url())));
     RecordedRequest request1 = server.takeRequest();
     assertEquals("GET /foo HTTP/1.1", request1.getRequestLine());
     assertEquals(0, request1.getSequenceNumber());
 
-    assertEquals("ABC", readAscii(openConnection(server.getUrl("/bar"))));
+    assertEquals("ABC", readAscii(openConnection(server.url("/bar").url())));
     RecordedRequest request2 = server.takeRequest();
     assertEquals("GET /bar HTTP/1.1", request2.getRequestLine());
     assertEquals(1, request2.getSequenceNumber());
 
     // an unrelated request should reuse the pooled connection
-    assertEquals("DEF", readAscii(openConnection(server.getUrl("/baz"))));
+    assertEquals("DEF", readAscii(openConnection(server.url("/baz").url())));
     RecordedRequest request3 = server.takeRequest();
     assertEquals("GET /baz HTTP/1.1", request3.getRequestLine());
     assertEquals(2, request3.getSequenceNumber());
@@ -350,12 +350,12 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     client.setSslSocketFactory(sslContext.getSocketFactory());
     client.setHostnameVerifier(hostnameVerifier);
 
-    HttpsURLConnection connection1 = (HttpsURLConnection) openConnection(server.getUrl("/"));
+    HttpsURLConnection connection1 = (HttpsURLConnection) openConnection(server.url("/").url());
     assertEquals("ABC", readAscii(connection1));
     assertNotNull(connection1.getCipherSuite());
 
     // Cached!
-    HttpsURLConnection connection2 = (HttpsURLConnection) openConnection(server.getUrl("/"));
+    HttpsURLConnection connection2 = (HttpsURLConnection) openConnection(server.url("/").url());
     assertEquals("ABC", readAscii(connection2));
     assertNotNull(connection2.getCipherSuite());
 
@@ -383,16 +383,16 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS))
         .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS))
         .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)
-        .addHeader("Location: " + server2.getUrl("/")));
+        .addHeader("Location: " + server2.url("/").url()));
 
     client.setSslSocketFactory(sslContext.getSocketFactory());
     client.setHostnameVerifier(hostnameVerifier);
 
-    HttpURLConnection connection1 = openConnection(server.getUrl("/"));
+    HttpURLConnection connection1 = openConnection(server.url("/").url());
     assertEquals("ABC", readAscii(connection1));
 
     // Cached!
-    HttpURLConnection connection2 = openConnection(server.getUrl("/"));
+    HttpURLConnection connection2 = openConnection(server.url("/").url());
     assertEquals("ABC", readAscii(connection2));
   }
 
@@ -434,7 +434,7 @@ private void temporaryRedirectCachedWithCachingHeader(
     server.enqueue(new MockResponse()
         .setBody("c"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("a", readAscii(openConnection(url)));
     assertEquals("a", readAscii(openConnection(url)));
   }
@@ -448,7 +448,7 @@ private void temporaryRedirectNotCachedWithoutCachingHeader(int responseCode) th
     server.enqueue(new MockResponse()
         .setBody("b"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("a", readAscii(openConnection(url)));
     assertEquals("b", readAscii(openConnection(url)));
   }
@@ -475,7 +475,7 @@ private void testServerPrematureDisconnect(TransferKind transferKind) throws IOE
         .setBody("Request #2"));
 
     BufferedReader reader = new BufferedReader(
-        new InputStreamReader(openConnection(server.getUrl("/")).getInputStream()));
+        new InputStreamReader(openConnection(server.url("/").url()).getInputStream()));
     assertEquals("ABCDE", reader.readLine());
     try {
       reader.readLine();
@@ -485,7 +485,7 @@ private void testServerPrematureDisconnect(TransferKind transferKind) throws IOE
       reader.close();
     }
 
-    URLConnection connection = openConnection(server.getUrl("/"));
+    URLConnection connection = openConnection(server.url("/").url());
     assertEquals("Request #2", readAscii(connection));
   }
 
@@ -510,7 +510,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
     server.enqueue(new MockResponse()
         .setBody("Request #2"));
 
-    URLConnection connection = openConnection(server.getUrl("/"));
+    URLConnection connection = openConnection(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals("ABCDE", readAscii(connection, 5));
     in.close();
@@ -520,7 +520,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
     } catch (IOException expected) {
     }
 
-    connection = openConnection(server.getUrl("/"));
+    connection = openConnection(server.url("/").url());
     assertEquals("Request #2", readAscii(connection));
   }
 
@@ -534,7 +534,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
         .addHeader("Date: " + formatDate(-5, TimeUnit.SECONDS))
         .setBody("A"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(openConnection(url)));
     URLConnection connection = openConnection(url);
     assertEquals("A", readAscii(connection));
@@ -563,8 +563,8 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
         .addHeader("Date: " + formatDate(-5, TimeUnit.DAYS))
         .setBody("A"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    URLConnection connection = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    URLConnection connection = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection));
     assertEquals("113 HttpURLConnection \"Heuristic expiration\"",
         connection.getHeaderField("Warning"));
@@ -578,7 +578,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/?foo=bar");
+    URL url = server.url("/?foo=bar").url();
     assertEquals("A", readAscii(openConnection(url)));
     assertEquals("B", readAscii(openConnection(url)));
   }
@@ -702,7 +702,7 @@ private void testRequestMethod(String requestMethod, boolean expectCached) throw
     server.enqueue(new MockResponse()
         .addHeader("X-Response-ID: 2"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     HttpURLConnection request1 = openConnection(url);
     request1.setRequestMethod(requestMethod);
@@ -753,7 +753,7 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
     server.enqueue(new MockResponse()
         .setBody("C"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     assertEquals("A", readAscii(openConnection(url)));
 
@@ -780,7 +780,7 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
         .setBody("B")
         .setResponseCode(500));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     assertEquals("A", readAscii(openConnection(url)));
 
@@ -867,7 +867,7 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
     server.enqueue(new MockResponse()
         .setBody("BB"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     HttpURLConnection range = openConnection(url);
     range.addRequestProperty("Range", "bytes=1000-1001");
@@ -885,7 +885,7 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
         .setBody("B")
         .addHeader("Last-Modified: " + formatDate(-4, TimeUnit.HOURS)));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     assertEquals("A", readAscii(openConnection(url)));
     assertEquals("A", readAscii(openConnection(url)));
@@ -899,11 +899,11 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
         .addHeader("Cache-Control: max-age=60")
         .setBody("B"));
 
-    HttpURLConnection connection1 = openConnection(server.getUrl("/"));
+    HttpURLConnection connection1 = openConnection(server.url("/").url());
     connection1.setRequestProperty("Cache-Control", "no-store");
     assertEquals("A", readAscii(connection1));
 
-    HttpURLConnection connection2 = openConnection(server.getUrl("/"));
+    HttpURLConnection connection2 = openConnection(server.url("/").url());
     assertEquals("B", readAscii(connection2));
   }
 
@@ -931,9 +931,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     // At least three request/response pairs are required because after the first request is cached
     // a different execution path might be taken. Thus modifications to the cache applied during
     // the second request might not be visible until another request is performed.
-    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));
-    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));
-    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("ABCABCABC", readAscii(openConnection(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(openConnection(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(openConnection(server.url("/").url())));
   }
 
   @Test public void notModifiedSpecifiesEncoding() throws Exception {
@@ -948,9 +948,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("DEFDEFDEF"));
 
-    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));
-    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));
-    assertEquals("DEFDEFDEF", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("ABCABCABC", readAscii(openConnection(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(openConnection(server.url("/").url())));
+    assertEquals("DEFDEFDEF", readAscii(openConnection(server.url("/").url())));
   }
 
   /** https://github.com/square/okhttp/issues/947 */
@@ -963,8 +963,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("FAIL"));
 
-    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));
-    assertEquals("ABCABCABC", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("ABCABCABC", readAscii(openConnection(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(openConnection(server.url("/").url())));
   }
 
   @Test public void expiresDateBeforeModifiedDate() throws Exception {
@@ -982,9 +982,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
 
-    URLConnection connection = openConnection(server.getUrl("/"));
+    URLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-age=30");
     assertEquals("B", readAscii(connection));
   }
@@ -997,9 +997,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
 
-    URLConnection connection = openConnection(server.getUrl("/"));
+    URLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "min-fresh=120");
     assertEquals("B", readAscii(connection));
   }
@@ -1012,9 +1012,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
 
-    URLConnection connection = openConnection(server.getUrl("/"));
+    URLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-stale=180");
     assertEquals("A", readAscii(connection));
     assertEquals("110 HttpURLConnection \"Response is stale\"",
@@ -1030,10 +1030,10 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
 
     // With max-stale, we'll return that stale response.
-    URLConnection maxStaleConnection = openConnection(server.getUrl("/"));
+    URLConnection maxStaleConnection = openConnection(server.url("/").url());
     maxStaleConnection.setRequestProperty("Cache-Control", "max-stale");
     assertEquals("A", readAscii(maxStaleConnection));
     assertEquals("110 HttpURLConnection \"Response is stale\"",
@@ -1048,9 +1048,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
 
-    URLConnection connection = openConnection(server.getUrl("/"));
+    URLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-stale=180");
     assertEquals("B", readAscii(connection));
   }
@@ -1058,7 +1058,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
   @Test public void requestOnlyIfCachedWithNoResponseCached() throws IOException {
     // (no responses enqueued)
 
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
   }
@@ -1069,8 +1069,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    URLConnection connection = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    URLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertEquals("A", readAscii(connection));
   }
@@ -1081,8 +1081,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(-1, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
   }
@@ -1091,8 +1091,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("A"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
   }
@@ -1105,7 +1105,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(openConnection(url)));
     URLConnection connection = openConnection(url);
     connection.setRequestProperty("Cache-Control", "no-cache");
@@ -1120,7 +1120,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(openConnection(url)));
     URLConnection connection = openConnection(url);
     connection.setRequestProperty("Pragma", "no-cache");
@@ -1155,7 +1155,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(openConnection(url)));
 
     HttpURLConnection connection = openConnection(url);
@@ -1188,8 +1188,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
 
     // The first request has no conditions.
     RecordedRequest request1 = server.takeRequest();
@@ -1204,7 +1204,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     String clientIfModifiedSince = formatDate(-24, TimeUnit.HOURS);
     connection.addRequestProperty("If-Modified-Since", clientIfModifiedSince);
     assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode());
@@ -1218,7 +1218,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection connection = openConnection(url);
     connection.addRequestProperty("Authorization", "password");
     assertEquals("A", readAscii(connection));
@@ -1233,8 +1233,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/foo"))));
-    assertEquals("B", readAscii(openConnection(server.getUrl("/bar"))));
+    assertEquals("A", readAscii(openConnection(server.url("/foo").url())));
+    assertEquals("B", readAscii(openConnection(server.url("/bar").url())));
   }
 
   @Test public void connectionIsReturnedToPoolAfterConditionalSuccess() throws Exception {
@@ -1247,9 +1247,9 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/a"))));
-    assertEquals("A", readAscii(openConnection(server.getUrl("/a"))));
-    assertEquals("B", readAscii(openConnection(server.getUrl("/b"))));
+    assertEquals("A", readAscii(openConnection(server.url("/a").url())));
+    assertEquals("A", readAscii(openConnection(server.url("/a").url())));
+    assertEquals("B", readAscii(openConnection(server.url("/b").url())));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(1, server.takeRequest().getSequenceNumber());
@@ -1264,7 +1264,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection frenchConnection = openConnection(url);
     frenchConnection.setRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(frenchConnection));
@@ -1282,7 +1282,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection frenchConnection1 = openConnection(url);
     frenchConnection1.setRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(frenchConnection1));
@@ -1300,8 +1300,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
   }
 
   @Test public void varyMatchesAddedRequestHeaderField() throws Exception {
@@ -1312,8 +1312,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    HttpURLConnection connection2 = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    HttpURLConnection connection2 = openConnection(server.url("/").url());
     connection2.setRequestProperty("Foo", "bar");
     assertEquals("B", readAscii(connection2));
   }
@@ -1326,10 +1326,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    HttpURLConnection connection1 = openConnection(server.getUrl("/"));
+    HttpURLConnection connection1 = openConnection(server.url("/").url());
     connection1.setRequestProperty("Foo", "bar");
     assertEquals("A", readAscii(connection1));
-    assertEquals("B", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("B", readAscii(openConnection(server.url("/").url())));
   }
 
   @Test public void varyFieldsAreCaseInsensitive() throws Exception {
@@ -1340,7 +1340,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection frenchConnection1 = openConnection(url);
     frenchConnection1.setRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(frenchConnection1));
@@ -1358,7 +1358,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection frenchConnection1 = openConnection(url);
     frenchConnection1.setRequestProperty("Accept-Language", "fr-CA");
     frenchConnection1.setRequestProperty("Accept-Charset", "UTF-8");
@@ -1380,7 +1380,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection frenchConnection = openConnection(url);
     frenchConnection.setRequestProperty("Accept-Language", "fr-CA");
     frenchConnection.setRequestProperty("Accept-Charset", "UTF-8");
@@ -1401,7 +1401,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection multiConnection1 = openConnection(url);
     multiConnection1.setRequestProperty("Accept-Language", "fr-CA, fr-FR");
     multiConnection1.addRequestProperty("Accept-Language", "en-US");
@@ -1421,7 +1421,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection multiConnection = openConnection(url);
     multiConnection.setRequestProperty("Accept-Language", "fr-CA, fr-FR");
     multiConnection.addRequestProperty("Accept-Language", "en-US");
@@ -1441,8 +1441,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    assertEquals("B", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    assertEquals("B", readAscii(openConnection(server.url("/").url())));
   }
 
   @Test public void varyAndHttps() throws Exception {
@@ -1457,7 +1457,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     client.setSslSocketFactory(sslContext.getSocketFactory());
     client.setHostnameVerifier(hostnameVerifier);
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection connection1 = openConnection(url);
     connection1.setRequestProperty("Accept-Language", "en-US");
     assertEquals("A", readAscii(connection1));
@@ -1477,7 +1477,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .addHeader("Set-Cookie: a=SECOND; domain=" + server.getCookieDomain() + ";")
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(openConnection(url)));
     assertCookies(url, "a=FIRST");
     assertEquals("A", readAscii(openConnection(url)));
@@ -1494,11 +1494,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .addHeader("Allow: GET, HEAD, PUT")
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = openConnection(server.getUrl("/"));
+    URLConnection connection1 = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("GET, HEAD", connection1.getHeaderField("Allow"));
 
-    URLConnection connection2 = openConnection(server.getUrl("/"));
+    URLConnection connection2 = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("GET, HEAD, PUT", connection2.getHeaderField("Allow"));
   }
@@ -1513,11 +1513,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .addHeader("Transfer-Encoding: none")
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = openConnection(server.getUrl("/"));
+    URLConnection connection1 = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("identity", connection1.getHeaderField("Transfer-Encoding"));
 
-    URLConnection connection2 = openConnection(server.getUrl("/"));
+    URLConnection connection2 = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("identity", connection2.getHeaderField("Transfer-Encoding"));
   }
@@ -1531,11 +1531,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = openConnection(server.getUrl("/"));
+    URLConnection connection1 = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("199 test danger", connection1.getHeaderField("Warning"));
 
-    URLConnection connection2 = openConnection(server.getUrl("/"));
+    URLConnection connection2 = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals(null, connection2.getHeaderField("Warning"));
   }
@@ -1549,11 +1549,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = openConnection(server.getUrl("/"));
+    URLConnection connection1 = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("299 test danger", connection1.getHeaderField("Warning"));
 
-    URLConnection connection2 = openConnection(server.getUrl("/"));
+    URLConnection connection2 = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("299 test danger", connection2.getHeaderField("Warning"));
   }
@@ -1600,22 +1600,22 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
 
     // cache miss; seed the cache with an entry that will require a network hit to be sure it is
     // still valid
-    HttpURLConnection connection1 = openConnection(server.getUrl("/a"));
+    HttpURLConnection connection1 = openConnection(server.url("/a").url());
     assertEquals("A", readAscii(connection1));
     assertEquals(null, connection1.getHeaderField("Allow"));
 
     // conditional cache hit; The cached data should be returned, but the cache is not updated.
-    HttpURLConnection connection2 = openConnection(server.getUrl("/a"));
+    HttpURLConnection connection2 = openConnection(server.url("/a").url());
     assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());
     assertEquals("A", readAscii(connection2));
     assertEquals("GET, HEAD", connection2.getHeaderField("Allow"));
 
     // conditional cache hit; The server responds with new data. The cache is updated.
-    HttpURLConnection connection3 = openConnection(server.getUrl("/a"));
+    HttpURLConnection connection3 = openConnection(server.url("/a").url());
     assertEquals("B", readAscii(connection3));
 
     // full cache hit; The data from connection3 has now replaced that from connection 1.
-    HttpURLConnection connection4 = openConnection(server.getUrl("/a"));
+    HttpURLConnection connection4 = openConnection(server.url("/a").url());
     assertEquals("B", readAscii(connection4));
 
     assertEquals(3, server.getRequestCount());
@@ -1627,8 +1627,8 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    URLConnection connection = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    URLConnection connection = openConnection(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertEquals("A", readAscii(connection));
   }
@@ -1643,8 +1643,8 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     assertEquals("B", readAscii(connection));
   }
 
@@ -1656,8 +1656,8 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
     server.enqueue(new MockResponse()
         .setResponseCode(304));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection));
   }
 
@@ -1665,7 +1665,7 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
     server.enqueue(new MockResponse()
         .setBody("A"));
 
-    URLConnection connection = openConnection(server.getUrl("/"));
+    URLConnection connection = openConnection(server.url("/").url());
     assertEquals("A", readAscii(connection));
   }
 
@@ -1677,7 +1677,7 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
         .setHeaders(headers.build())
         .setBody("body"));
 
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     assertEquals("A", connection.getHeaderField(""));
   }
 
@@ -1701,7 +1701,7 @@ private void assertNotCached(MockResponse response) throws Exception {
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(openConnection(url)));
     assertEquals("B", readAscii(openConnection(url)));
   }
@@ -1716,7 +1716,7 @@ private RecordedRequest assertConditionallyCached(MockResponse response) throws
     server.enqueue(response.setBody("B").setStatus("HTTP/1.1 200 B-OK"));
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 C-OK").setBody("C"));
 
-    URL valid = server.getUrl("/valid");
+    URL valid = server.url("/valid").url();
     HttpURLConnection connection1 = openConnection(valid);
     assertEquals("A", readAscii(connection1));
     assertEquals(HttpURLConnection.HTTP_OK, connection1.getResponseCode());
@@ -1726,7 +1726,7 @@ private RecordedRequest assertConditionallyCached(MockResponse response) throws
     assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());
     assertEquals("A-OK", connection2.getResponseMessage());
 
-    URL invalid = server.getUrl("/invalid");
+    URL invalid = server.url("/invalid").url();
     HttpURLConnection connection3 = openConnection(invalid);
     assertEquals("B", readAscii(connection3));
     assertEquals(HttpURLConnection.HTTP_OK, connection3.getResponseCode());
@@ -1744,7 +1744,7 @@ private void assertFullyCached(MockResponse response) throws Exception {
     server.enqueue(response.setBody("A"));
     server.enqueue(response.setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(openConnection(url)));
     assertEquals("A", readAscii(openConnection(url)));
   }
@@ -1755,7 +1755,7 @@ private void assertFullyCached(MockResponse response) throws Exception {
    * the HTTP body.
    */
   private MockResponse truncateViolently(MockResponse response, int numBytesToKeep) {
-    response.setSocketPolicy(DISCONNECT_AT_END);
+    response.setSocketPolicy(SocketPolicy.DISCONNECT_AT_END);
     Headers headers = response.getHeaders();
     Buffer truncatedBody = new Buffer();
     truncatedBody.write(response.getBody(), numBytesToKeep);
@@ -1779,7 +1779,7 @@ private MockResponse truncateViolently(MockResponse response, int numBytesToKeep
     END_OF_STREAM() {
       @Override void setBody(MockResponse response, Buffer content, int chunkSize) {
         response.setBody(content);
-        response.setSocketPolicy(DISCONNECT_AT_END);
+        response.setSocketPolicy(SocketPolicy.DISCONNECT_AT_END);
         response.removeHeader("Content-Length");
       }
     };
@@ -1864,10 +1864,11 @@ private void assertGatewayTimeout(HttpURLConnection connection) throws IOExcepti
     Internal.instance.setCache(client, new CacheAdapter(new AbstractResponseCache() {
       @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {
         HttpURLConnection httpURLConnection = (HttpURLConnection) connection;
-        assertEquals(server.getUrl("/"), uri.toURL());
+        assertEquals(server.url("/").url(), uri.toURL());
         assertEquals(200, httpURLConnection.getResponseCode());
+        InputStream is = httpURLConnection.getInputStream();
         try {
-          httpURLConnection.getInputStream();
+          is.read();
           fail();
         } catch (UnsupportedOperationException expected) {
         }
@@ -1879,7 +1880,7 @@ private void assertGatewayTimeout(HttpURLConnection connection) throws IOExcepti
       }
     }));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection connection = openConnection(url);
     assertEquals(body, readAscii(connection));
     assertEquals(1, cacheCount.get());
@@ -1904,7 +1905,7 @@ private void assertGatewayTimeout(HttpURLConnection connection) throws IOExcepti
 
     server.enqueue(new MockResponse().setBody("abcdef"));
 
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     assertEquals("abc", readAscii(connection, 3));
     connection.getInputStream().close();
     assertFalse(aborted.get()); // The best behavior is ambiguous, but RI 6 doesn't abort here
@@ -1942,7 +1943,7 @@ public CacheResponse get(URI uri, String requestMethod,
         };
       }
     }));
-    HttpURLConnection connection = openConnection(server.getUrl("/"));
+    HttpURLConnection connection = openConnection(server.url("/").url());
     // If there was no status line from the cache an exception will be thrown. No network request
     // should be made.
     try {
@@ -1988,13 +1989,13 @@ private InsecureResponseCache(ResponseCache delegate) {
 
     AndroidInternal.setResponseCache(new OkUrlFactory(client), new InsecureResponseCache(cache));
 
-    HttpsURLConnection connection1 = (HttpsURLConnection) openConnection(server.getUrl("/"));
+    HttpsURLConnection connection1 = (HttpsURLConnection) openConnection(server.url("/").url());
     connection1.setSSLSocketFactory(sslContext.getSocketFactory());
     connection1.setHostnameVerifier(hostnameVerifier);
     assertEquals("ABC", readAscii(connection1));
 
     // Not cached!
-    HttpsURLConnection connection2 = (HttpsURLConnection) openConnection(server.getUrl("/"));
+    HttpsURLConnection connection2 = (HttpsURLConnection) openConnection(server.url("/").url());
     connection2.setSSLSocketFactory(sslContext.getSocketFactory());
     connection2.setHostnameVerifier(hostnameVerifier);
     assertEquals("DEF", readAscii(connection2));
@@ -2013,7 +2014,7 @@ private InsecureResponseCache(ResponseCache delegate) {
       }
     }));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection urlConnection = openConnection(url);
     urlConnection.addRequestProperty("A", "android");
     readAscii(urlConnection);
@@ -2027,7 +2028,7 @@ private InsecureResponseCache(ResponseCache delegate) {
             .setStatus("HTTP/1.1 200 Fantastic");
     server.enqueue(response);
 
-    HttpURLConnection urlConnection = openConnection(server.getUrl("/"));
+    HttpURLConnection urlConnection = openConnection(server.url("/").url());
     assertEquals(200, urlConnection.getResponseCode());
     assertEquals("Fantastic", urlConnection.getResponseMessage());
     assertTrue(urlConnection.getDoInput());
@@ -2035,7 +2036,7 @@ private InsecureResponseCache(ResponseCache delegate) {
     assertEquals(-1, is.read());
     is.close();
 
-    urlConnection = openConnection(server.getUrl("/")); // cached!
+    urlConnection = openConnection(server.url("/").url()); // cached!
     assertTrue(urlConnection.getDoInput());
     InputStream cachedIs = urlConnection.getInputStream();
     assertEquals(-1, cachedIs.read());
@@ -2051,10 +2052,10 @@ private InsecureResponseCache(ResponseCache delegate) {
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    URLConnection connection = openConnection(server.getUrl("/"));
+    URLConnection connection = openConnection(server.url("/").url());
     connection.setUseCaches(false);
     assertEquals("A", readAscii(connection));
-    assertEquals("B", readAscii(openConnection(server.getUrl("/"))));
+    assertEquals("B", readAscii(openConnection(server.url("/").url())));
   }
 
   @Test public void useCachesFalseDoesNotReadFromCache() throws Exception {
@@ -2064,8 +2065,8 @@ private InsecureResponseCache(ResponseCache delegate) {
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    assertEquals("A", readAscii(openConnection(server.getUrl("/"))));
-    URLConnection connection = openConnection(server.getUrl("/"));
+    assertEquals("A", readAscii(openConnection(server.url("/").url())));
+    URLConnection connection = openConnection(server.url("/").url());
     connection.setUseCaches(false);
     assertEquals("B", readAscii(connection));
   }
@@ -2100,11 +2101,11 @@ private InsecureResponseCache(ResponseCache delegate) {
     ResponseCache.setDefault(cache);
 
     // Use the platform's HTTP stack.
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     assertFalse(connection instanceof HttpURLConnectionImpl);
     assertEquals("A", readAscii(connection));
 
-    URLConnection connection2 = server.getUrl("/").openConnection();
+    URLConnection connection2 = server.url("/").url().openConnection();
     assertFalse(connection2 instanceof HttpURLConnectionImpl);
     assertEquals("A", readAscii(connection2));
   }
@@ -2124,11 +2125,11 @@ private InsecureResponseCache(ResponseCache delegate) {
     ResponseCache.setDefault(cache);
 
     // Use the platform's HTTP stack.
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     assertFalse(connection instanceof HttpURLConnectionImpl);
     assertEquals("A", readAscii(connection));
 
-    URLConnection connection2 = server.getUrl("/").openConnection();
+    URLConnection connection2 = server.url("/").url().openConnection();
     assertFalse(connection2 instanceof HttpURLConnectionImpl);
     assertEquals("B", readAscii(connection2));
   }
@@ -2148,12 +2149,12 @@ private InsecureResponseCache(ResponseCache delegate) {
     ResponseCache.setDefault(cache);
 
     // Use the platform's HTTP stack.
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     assertFalse(connection instanceof HttpURLConnectionImpl);
     connection.setRequestProperty("Accept-Language", "en-US");
     assertEquals("A", readAscii(connection));
 
-    URLConnection connection2 = server.getUrl("/").openConnection();
+    URLConnection connection2 = server.url("/").url().openConnection();
     assertFalse(connection2 instanceof HttpURLConnectionImpl);
     assertEquals("B", readAscii(connection2));
   }
@@ -2173,11 +2174,11 @@ private InsecureResponseCache(ResponseCache delegate) {
     ResponseCache.setDefault(cache);
 
     // Use the platform's HTTP stack.
-    URLConnection connection = server.getUrl("/").openConnection();
+    URLConnection connection = server.url("/").url().openConnection();
     assertFalse(connection instanceof HttpURLConnectionImpl);
     assertEquals("A", readAscii(connection));
 
-    URLConnection connection2 = server.getUrl("/").openConnection();
+    URLConnection connection2 = server.url("/").url().openConnection();
     assertFalse(connection2 instanceof HttpURLConnectionImpl);
     assertEquals("B", readAscii(connection2));
   }
diff --git a/okhttp-apache/pom.xml b/okhttp-apache/pom.xml
index b007eb5dd5..6e9a797cd3 100644
--- a/okhttp-apache/pom.xml
+++ b/okhttp-apache/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-apache</artifactId>
@@ -14,12 +14,12 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
@@ -36,7 +36,7 @@
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
diff --git a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java
similarity index 91%
rename from okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java
rename to okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java
index fd7884cd80..c971691f3f 100644
--- a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/HttpEntityBody.java
+++ b/okhttp-apache/src/main/java/okhttp3/apache/HttpEntityBody.java
@@ -1,7 +1,7 @@
-package com.squareup.okhttp.apache;
+package okhttp3.apache;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.RequestBody;
+import okhttp3.MediaType;
+import okhttp3.RequestBody;
 import java.io.IOException;
 import okio.BufferedSink;
 import org.apache.http.HttpEntity;
diff --git a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java
similarity index 92%
rename from okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java
rename to okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java
index 3a9174a4d6..2a862fa52f 100644
--- a/okhttp-apache/src/main/java/com/squareup/okhttp/apache/OkApacheClient.java
+++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java
@@ -1,12 +1,12 @@
 // Copyright 2013 Square, Inc.
-package com.squareup.okhttp.apache;
-
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
+package okhttp3.apache;
+
+import okhttp3.Headers;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.Proxy;
@@ -32,11 +32,9 @@
 import static org.apache.http.HttpVersion.HTTP_1_1;
 
 /**
- * Implements Apache's {@link HttpClient} API using {@link OkHttpClient}.
- * <p>
- * <strong>Warning:</strong> Many core features of Apache HTTP client are not implemented by this
- * API. This includes the keep-alive strategy, cookie store, credentials provider, route planner
- * and others.
+ * @deprecated OkHttp will be dropping its ability to be used with {@link HttpClient} in an
+ *     upcoming release. Applications that need this should either downgrade to the Apache
+ *     implementation or upgrade to OkHttp's Request/Response API.
  */
 public final class OkApacheClient implements HttpClient {
   private static Request transformRequest(HttpRequest request) {
diff --git a/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java b/okhttp-apache/src/test/java/okhttp3/apache/OkApacheClientTest.java
similarity index 88%
rename from okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java
rename to okhttp-apache/src/test/java/okhttp3/apache/OkApacheClientTest.java
index 105f22f3d5..8f5c3cd15c 100644
--- a/okhttp-apache/src/test/java/com/squareup/okhttp/apache/OkApacheClientTest.java
+++ b/okhttp-apache/src/test/java/okhttp3/apache/OkApacheClientTest.java
@@ -1,8 +1,8 @@
-package com.squareup.okhttp.apache;
+package okhttp3.apache;
 
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -25,7 +25,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static com.squareup.okhttp.internal.Util.UTF_8;
+import static okhttp3.internal.Util.UTF_8;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
@@ -47,7 +47,7 @@
   @Test public void success() throws Exception {
     server.enqueue(new MockResponse().setBody("Hello, World!"));
 
-    HttpGet request = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request = new HttpGet(server.url("/").url().toURI());
     HttpResponse response = client.execute(request);
     String actual = EntityUtils.toString(response.getEntity());
     assertEquals("Hello, World!", actual);
@@ -57,7 +57,7 @@
     server.enqueue(new MockResponse().setResponseCode(302).addHeader("Location", "/foo"));
     server.enqueue(new MockResponse().setBody("Hello, Redirect!"));
 
-    HttpGet request = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request = new HttpGet(server.url("/").url().toURI());
     HttpResponse response = client.execute(request);
     String actual = EntityUtils.toString(response.getEntity(), UTF_8);
     assertEquals("Hello, Redirect!", actual);
@@ -66,7 +66,7 @@
   @Test public void sessionExpired() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(422));
 
-    HttpGet request = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request = new HttpGet(server.url("/").url().toURI());
     HttpResponse response = client.execute(request);
     assertEquals(422, response.getStatusLine().getStatusCode());
   }
@@ -75,13 +75,13 @@
     server.enqueue(new MockResponse().addHeader("Foo", "Bar"));
     server.enqueue(new MockResponse().addHeader("Foo", "Bar").addHeader("Foo", "Baz"));
 
-    HttpGet request1 = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request1 = new HttpGet(server.url("/").url().toURI());
     HttpResponse response1 = client.execute(request1);
     Header[] headers1 = response1.getHeaders("Foo");
     assertEquals(1, headers1.length);
     assertEquals("Bar", headers1[0].getValue());
 
-    HttpGet request2 = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request2 = new HttpGet(server.url("/").url().toURI());
     HttpResponse response2 = client.execute(request2);
     Header[] headers2 = response2.getHeaders("Foo");
     assertEquals(2, headers2.length);
@@ -92,7 +92,7 @@
   @Test public void postByteEntity() throws Exception {
     server.enqueue(new MockResponse());
 
-    final HttpPost post = new HttpPost(server.getUrl("/").toURI());
+    final HttpPost post = new HttpPost(server.url("/").url().toURI());
     byte[] body = "Hello, world!".getBytes(UTF_8);
     post.setEntity(new ByteArrayEntity(body));
     client.execute(post);
@@ -105,7 +105,7 @@
   @Test public void postInputStreamEntity() throws Exception {
     server.enqueue(new MockResponse());
 
-    final HttpPost post = new HttpPost(server.getUrl("/").toURI());
+    final HttpPost post = new HttpPost(server.url("/").url().toURI());
     byte[] body = "Hello, world!".getBytes(UTF_8);
     post.setEntity(new InputStreamEntity(new ByteArrayInputStream(body), body.length));
     client.execute(post);
@@ -116,7 +116,7 @@
   }
   @Test public void postEmptyEntity() throws Exception {
     server.enqueue(new MockResponse());
-    final HttpPost post = new HttpPost(server.getUrl("/").toURI());
+    final HttpPost post = new HttpPost(server.url("/").url().toURI());
     client.execute(post);
     
     RecordedRequest request = server.takeRequest();
@@ -125,7 +125,7 @@
   }
   @Test public void putEmptyEntity() throws Exception {
     server.enqueue(new MockResponse());
-    final HttpPut put = new HttpPut(server.getUrl("/").toURI());
+    final HttpPut put = new HttpPut(server.url("/").url().toURI());
     client.execute(put);
     
     RecordedRequest request = server.takeRequest();
@@ -137,7 +137,7 @@
     server.enqueue(new MockResponse());
 
     HttpPost httpPost = new HttpPost();
-    httpPost.setURI(server.getUrl("/").toURI());
+    httpPost.setURI(server.url("/").url().toURI());
     httpPost.addHeader("Content-Type", "application/xml");
     httpPost.setEntity(new StringEntity("<yo/>"));
     client.execute(httpPost);
@@ -153,7 +153,7 @@
         .setHeader("Content-Type", "application/json"));
     server.enqueue(new MockResponse().setBody("Hello, World!"));
 
-    HttpGet request1 = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request1 = new HttpGet(server.url("/").url().toURI());
     HttpResponse response1 = client.execute(request1);
     Header[] headers1 = response1.getHeaders("Content-Type");
     assertEquals(1, headers1.length);
@@ -161,7 +161,7 @@
     assertNotNull(response1.getEntity().getContentType());
     assertEquals("text/html", response1.getEntity().getContentType().getValue());
 
-    HttpGet request2 = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request2 = new HttpGet(server.url("/").url().toURI());
     HttpResponse response2 = client.execute(request2);
     Header[] headers2 = response2.getHeaders("Content-Type");
     assertEquals(1, headers2.length);
@@ -169,7 +169,7 @@
     assertNotNull(response2.getEntity().getContentType());
     assertEquals("application/json", response2.getEntity().getContentType().getValue());
 
-    HttpGet request3 = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request3 = new HttpGet(server.url("/").url().toURI());
     HttpResponse response3 = client.execute(request3);
     Header[] headers3 = response3.getHeaders("Content-Type");
     assertEquals(0, headers3.length);
@@ -180,7 +180,7 @@
     server.enqueue(new MockResponse().setBody("{\"Message\": { \"text\": \"Hello, World!\" } }")
         .setHeader("cONTENT-tYPE", "application/json"));
 
-    HttpGet request = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request = new HttpGet(server.url("/").url().toURI());
     HttpResponse response = client.execute(request);
     assertEquals("application/json", response.getEntity().getContentType().getValue());
   }
@@ -190,7 +190,7 @@
     server.enqueue(new MockResponse().setBody(gzip(text))
         .setHeader("Content-Encoding", "gzip"));
 
-    HttpGet request = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request = new HttpGet(server.url("/").url().toURI());
     request.setHeader("Accept-encoding", "gzip"); // Not transparent gzip.
     HttpResponse response = client.execute(request);
     HttpEntity entity = response.getEntity();
@@ -210,7 +210,7 @@
         .setHeader("Content-Encoding", "gzip")
         .setHeader("Content-Type", "application/json"));
 
-    HttpGet request1 = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request1 = new HttpGet(server.url("/").url().toURI());
     request1.setHeader("Accept-encoding", "gzip"); // Not transparent gzip.
 
     HttpResponse response = client.execute(request1);
@@ -237,7 +237,7 @@
         .setHeader("Content-Encoding", "gzip")
         .setHeader("Content-Type", "application/json"));
 
-    HttpGet request = new HttpGet(server.getUrl("/").toURI());
+    HttpGet request = new HttpGet(server.url("/").url().toURI());
     HttpResponse response = client.execute(request);
     HttpEntity entity = response.getEntity();
 
diff --git a/okhttp-hpacktests/pom.xml b/okhttp-hpacktests/pom.xml
index 4d299fefdc..98947ce301 100644
--- a/okhttp-hpacktests/pom.xml
+++ b/okhttp-hpacktests/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.4.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-hpacktests</artifactId>
@@ -18,12 +18,12 @@
       <artifactId>okio</artifactId>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
@@ -34,7 +34,7 @@
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropTest.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackDecodeInteropTest.java
similarity index 85%
rename from okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropTest.java
rename to okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackDecodeInteropTest.java
index 6cb7a86225..bab0503a47 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeInteropTest.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackDecodeInteropTest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.spdy;
 
-import com.squareup.okhttp.internal.framed.hpackjson.Story;
+import okhttp3.internal.spdy.hpackjson.Story;
 import java.util.Collection;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
-import static com.squareup.okhttp.internal.framed.hpackjson.HpackJsonUtil.storiesForCurrentDraft;
+import static okhttp3.internal.spdy.hpackjson.HpackJsonUtil.storiesForCurrentDraft;
 
 @RunWith(Parameterized.class)
 public class HpackDecodeInteropTest extends HpackDecodeTestBase {
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackDecodeTestBase.java
similarity index 92%
rename from okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java
rename to okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackDecodeTestBase.java
index fe5731911b..f5cc86aaf9 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackDecodeTestBase.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.spdy;
 
-import com.squareup.okhttp.internal.framed.hpackjson.Case;
-import com.squareup.okhttp.internal.framed.hpackjson.HpackJsonUtil;
-import com.squareup.okhttp.internal.framed.hpackjson.Story;
+import okhttp3.internal.spdy.hpackjson.Case;
+import okhttp3.internal.spdy.hpackjson.HpackJsonUtil;
+import okhttp3.internal.spdy.hpackjson.Story;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.LinkedHashSet;
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackRoundTripTest.java
similarity index 91%
rename from okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java
rename to okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackRoundTripTest.java
index 3d347590a8..7d130c2634 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackRoundTripTest.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/HpackRoundTripTest.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.spdy;
 
-import com.squareup.okhttp.internal.framed.hpackjson.Case;
-import com.squareup.okhttp.internal.framed.hpackjson.Story;
+import okhttp3.internal.spdy.hpackjson.Case;
+import okhttp3.internal.spdy.hpackjson.Story;
 import okio.Buffer;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Case.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/Case.java
similarity index 94%
rename from okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Case.java
rename to okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/Case.java
index b62c9f50e3..74d413f873 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Case.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/Case.java
@@ -13,15 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed.hpackjson;
-
-import com.squareup.okhttp.internal.framed.Header;
-import okio.ByteString;
+package okhttp3.internal.spdy.hpackjson;
 
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import okhttp3.internal.framed.Header;
+import okio.ByteString;
 
 /**
  * Representation of an individual case (set of headers and wire format).
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/HpackJsonUtil.java
similarity index 98%
rename from okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java
rename to okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/HpackJsonUtil.java
index fa52d24287..5e31fb29c7 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/HpackJsonUtil.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed.hpackjson;
+package okhttp3.internal.spdy.hpackjson;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Story.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/Story.java
similarity index 96%
rename from okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Story.java
rename to okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/Story.java
index cf6a9a0807..a33c3a6f98 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Story.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/spdy/hpackjson/Story.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed.hpackjson;
+package okhttp3.internal.spdy.hpackjson;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/okhttp-logging-interceptor/pom.xml b/okhttp-logging-interceptor/pom.xml
index 23924586e3..011ed00fbf 100644
--- a/okhttp-logging-interceptor/pom.xml
+++ b/okhttp-logging-interceptor/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>logging-interceptor</artifactId>
@@ -14,7 +14,7 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
@@ -25,13 +25,13 @@
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
diff --git a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
similarity index 89%
rename from okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
rename to okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
index 402eee0a85..abb6f210fd 100644
--- a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
@@ -13,20 +13,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.logging;
-
-import com.squareup.okhttp.Connection;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.Platform;
-import com.squareup.okhttp.internal.http.HttpEngine;
+package okhttp3.logging;
+
+import okhttp3.Connection;
+import okhttp3.Headers;
+import okhttp3.Interceptor;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.Platform;
+import okhttp3.internal.http.HttpEngine;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.util.concurrent.TimeUnit;
@@ -151,7 +151,7 @@ public Level getLevel() {
     Connection connection = chain.connection();
     Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;
     String requestStartMessage =
-        "--> " + request.method() + ' ' + request.httpUrl() + ' ' + protocol(protocol);
+        "--> " + request.method() + ' ' + request.url() + ' ' + protocol(protocol);
     if (!logHeaders && hasRequestBody) {
       requestStartMessage += " (" + requestBody.contentLength() + "-byte body)";
     }
@@ -205,9 +205,9 @@ public Level getLevel() {
     long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
 
     ResponseBody responseBody = response.body();
-    logger.log("<-- " + protocol(response.protocol()) + ' ' + response.code() + ' '
-        + response.message() + " (" + tookMs + "ms"
-        + (!logHeaders ? ", " + responseBody.contentLength() + "-byte body" : "") + ')');
+    logger.log("<-- " + response.code() + ' ' + response.message() + ' '
+        + response.request().url() + " (" + tookMs + "ms" + (!logHeaders ? ", "
+        + responseBody.contentLength() + "-byte body" : "") + ')');
 
     if (logHeaders) {
       Headers headers = response.headers();
diff --git a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
similarity index 89%
rename from okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
rename to okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
index dbd1e84c35..e31a163919 100644
--- a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
@@ -13,17 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.logging;
-
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.logging.HttpLoggingInterceptor.Level;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
+package okhttp3.logging;
+
+import okhttp3.HttpUrl;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.logging.HttpLoggingInterceptor.Level;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
@@ -31,6 +31,7 @@
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.ByteString;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -73,7 +74,7 @@ private void setLevel(Level level) {
 
   @Test public void levelGetter() {
     // The default is NONE.
-    assertEquals(Level.NONE, applicationInterceptor.getLevel());
+    Assert.assertEquals(Level.NONE, applicationInterceptor.getLevel());
 
     for (Level level : Level.values()) {
       applicationInterceptor.setLevel(level);
@@ -112,12 +113,12 @@ private void setLevel(Level level) {
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
   }
 
@@ -129,12 +130,12 @@ private void setLevel(Level level) {
 
     applicationLogs
         .assertLogEqual("--> POST " + url + " HTTP/1.1 (3-byte body)")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
         .assertLogEqual("--> POST " + url + " HTTP/1.1 (3-byte body)")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
   }
 
@@ -149,12 +150,12 @@ private void setLevel(Level level) {
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 6-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 6-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 6-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 6-byte body\\)")
         .assertNoMoreLogs();
   }
 
@@ -168,7 +169,7 @@ private void setLevel(Level level) {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -182,7 +183,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -203,7 +204,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -219,7 +220,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -239,7 +240,7 @@ private void setLevel(Level level) {
         .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -254,7 +255,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -282,7 +283,7 @@ private void setLevel(Level level) {
         .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -298,7 +299,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -318,7 +319,7 @@ private void setLevel(Level level) {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -333,7 +334,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -352,7 +353,7 @@ private void setLevel(Level level) {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -366,7 +367,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -393,7 +394,7 @@ private void bodyGetNoBody(int code) throws IOException {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 " + code + " No Content \\(\\d+ms\\)")
+        .assertLogMatch("<-- " + code + " No Content " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -407,7 +408,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 " + code + " No Content \\(\\d+ms\\)")
+        .assertLogMatch("<-- " + code + " No Content " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -430,7 +431,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("")
         .assertLogEqual("Hi?")
         .assertLogEqual("--> END POST (3-byte body)")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -448,7 +449,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("")
         .assertLogEqual("Hi?")
         .assertLogEqual("--> END POST (3-byte body)")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -468,7 +469,7 @@ private void bodyGetNoBody(int code) throws IOException {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -485,7 +486,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -508,7 +509,7 @@ private void bodyGetNoBody(int code) throws IOException {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Transfer-encoding: chunked")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -525,7 +526,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Transfer-encoding: chunked")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -554,7 +555,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Encoding: gzip")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("Content-Length: \\d+")
@@ -566,7 +567,7 @@ private void bodyGetNoBody(int code) throws IOException {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
diff --git a/okhttp-testing-support/pom.xml b/okhttp-testing-support/pom.xml
index 03b316b8e5..d363749faa 100644
--- a/okhttp-testing-support/pom.xml
+++ b/okhttp-testing-support/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-testing-support</artifactId>
@@ -19,7 +19,7 @@
       <optional>true</optional>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
diff --git a/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java
similarity index 99%
rename from okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java
rename to okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java
index 6498fe8320..b4299fd09b 100644
--- a/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java
+++ b/okhttp-testing-support/src/main/java/okhttp3/internal/io/InMemoryFileSystem.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.io;
+package okhttp3.internal.io;
 
 import java.io.File;
 import java.io.FileNotFoundException;
diff --git a/okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/InstallUncaughtExceptionHandlerListener.java b/okhttp-testing-support/src/main/java/okhttp3/testing/InstallUncaughtExceptionHandlerListener.java
similarity index 98%
rename from okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/InstallUncaughtExceptionHandlerListener.java
rename to okhttp-testing-support/src/main/java/okhttp3/testing/InstallUncaughtExceptionHandlerListener.java
index 4dd4c92e94..bcb4df7a21 100644
--- a/okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/InstallUncaughtExceptionHandlerListener.java
+++ b/okhttp-testing-support/src/main/java/okhttp3/testing/InstallUncaughtExceptionHandlerListener.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.testing;
+package okhttp3.testing;
 
 import org.junit.runner.Description;
 import org.junit.runner.Result;
diff --git a/okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/RecordingHostnameVerifier.java b/okhttp-testing-support/src/main/java/okhttp3/testing/RecordingHostnameVerifier.java
similarity index 96%
rename from okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/RecordingHostnameVerifier.java
rename to okhttp-testing-support/src/main/java/okhttp3/testing/RecordingHostnameVerifier.java
index d4d343a5f3..7b682e56db 100644
--- a/okhttp-testing-support/src/main/java/com/squareup/okhttp/testing/RecordingHostnameVerifier.java
+++ b/okhttp-testing-support/src/main/java/okhttp3/testing/RecordingHostnameVerifier.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.testing;
+package okhttp3.testing;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/okhttp-tests/pom.xml b/okhttp-tests/pom.xml
index 2e454f725f..cb0c01793b 100644
--- a/okhttp-tests/pom.xml
+++ b/okhttp-tests/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-tests</artifactId>
@@ -18,18 +18,18 @@
       <artifactId>okio</artifactId>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-urlconnection</artifactId>
       <version>${project.version}</version>
     </dependency>
@@ -40,7 +40,7 @@
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/allocations/ConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/allocations/ConnectionTest.java
deleted file mode 100644
index 08fafa6f27..0000000000
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/allocations/ConnectionTest.java
+++ /dev/null
@@ -1,206 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.okhttp.internal.allocations;
-
-import com.squareup.okhttp.ConnectionPool;
-import org.junit.Test;
-
-import static junit.framework.TestCase.assertEquals;
-import static org.junit.Assert.assertNotEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.fail;
-
-public final class ConnectionTest {
-  ConnectionPool connectionPool = new ConnectionPool(1, 1000L);
-
-  @Test public void reserveCreateCompleteRelease() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(1);
-
-    Connection.StreamAllocation a = connection.reserve("a");
-    Connection.Stream a1 = a.newStream("a1");
-    assertNotNull(a1);
-    a.streamComplete(a1);
-    assertEquals(1, connection.size()); // Still allocated.
-
-    connection.release(a);
-    assertEquals(0, connection.size());
-  }
-
-  @Test public void reserveCreateReleaseComplete() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(1);
-
-    Connection.StreamAllocation a = connection.reserve("a");
-    Connection.Stream a1 = a.newStream("a1");
-    assertNotNull(a1);
-    connection.release(a);
-    assertEquals(1, connection.size()); // Still allocated.
-
-    a.streamComplete(a1);
-    assertEquals(0, connection.size());
-  }
-
-  @Test public void reuseAllocation() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(1);
-
-    Connection.StreamAllocation a = connection.reserve("a");
-    Connection.Stream a1 = a.newStream("a1");
-    assertNotNull(a1);
-    a.streamComplete(a1);
-    assertEquals(1, connection.size());
-
-    Connection.Stream a2 = a.newStream("a2");
-    assertNotNull(a2);
-    a.streamComplete(a2);
-    assertEquals(1, connection.size());
-
-    connection.release(a);
-    assertEquals(0, connection.size());
-  }
-
-  @Test public void cannotReuseAllocationAfterRelease() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(1);
-
-    Connection.StreamAllocation a = connection.reserve("a");
-    Connection.Stream a1 = a.newStream("a1");
-    a.streamComplete(a1);
-    connection.release(a);
-
-    try {
-      a.newStream("a2");
-      fail();
-    } catch (IllegalStateException expected) {
-    }
-  }
-
-  @Test public void createReturnsNullAfterNoNewStreams() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(1);
-
-    Connection.StreamAllocation a = connection.reserve("a");
-    Connection.Stream a1 = a.newStream("a1");
-    assertNotNull(a1);
-    a.streamComplete(a1);
-    assertEquals(1, connection.size());
-
-    connection.noNewStreams();
-    assertNull(a.newStream("a2"));
-    assertEquals(1, connection.size());
-
-    connection.release(a);
-    assertEquals(0, connection.size());
-  }
-
-  @Test public void reserveReturnsNullAfterNoNewStreams() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(1);
-
-    Connection.StreamAllocation a = connection.reserve("a");
-    Connection.Stream a1 = a.newStream("a1");
-
-    connection.noNewStreams();
-    assertNull(connection.reserve("b"));
-
-    // Even after streams are released, the limit still holds.
-    a.streamComplete(a1);
-    assertNull(connection.reserve("c"));
-  }
-
-  @Test public void closeScheduledAfterNoNewStreams() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(1);
-
-    Connection.StreamAllocation a = connection.reserve("c");
-    Connection.Stream a1 = a.newStream("a1");
-    connection.noNewStreams();
-    assertEquals(Long.MAX_VALUE, connection.idleAt);
-
-    a.streamComplete(a1);
-    assertEquals(Long.MAX_VALUE, connection.idleAt);
-
-    connection.release(a);
-    assertNotEquals(Long.MAX_VALUE, connection.idleAt);
-  }
-
-  @Test public void multipleAllocations() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(2);
-
-    Connection.StreamAllocation a = connection.reserve("a");
-    Connection.StreamAllocation b = connection.reserve("b");
-    Connection.Stream a1 = a.newStream("a1");
-    Connection.Stream b1 = b.newStream("b1");
-    assertEquals(2, connection.size());
-
-    connection.release(a);
-    assertEquals(2, connection.size());
-    a.streamComplete(a1);
-    assertEquals(1, connection.size());
-
-    b.streamComplete(b1);
-    assertEquals(1, connection.size());
-    connection.release(b);
-    assertEquals(0, connection.size());
-  }
-
-  @Test public void lowerAndRaiseAllocationLimit() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(2);
-
-    assertNotNull(connection.reserve("a"));
-    assertNotNull(connection.reserve("a"));
-    assertNull(connection.reserve("c"));
-
-    connection.setAllocationLimit(0);
-    assertEquals(2, connection.size());
-    assertNull(connection.reserve("d"));
-
-    connection.setAllocationLimit(3);
-    assertNotNull(connection.reserve("e"));
-  }
-
-  @Test public void leakedAllocation() throws Exception {
-    Connection connection = new Connection(connectionPool);
-    connection.setAllocationLimit(1);
-
-    reserveAndLeakAllocation(connection);
-    awaitGarbageCollection();
-    connection.pruneLeakedAllocations();
-    assertEquals(0, connection.size());
-
-    assertNull(connection.reserve("b")); // Can't allocate once a leak has been detected.
-  }
-
-  /** Use a helper method so there's no hidden reference remaining on the stack. */
-  private void reserveAndLeakAllocation(Connection connection) {
-    connection.reserve("a");
-  }
-
-  /**
-   * See FinalizationTester for discussion on how to best trigger GC in tests.
-   * https://android.googlesource.com/platform/libcore/+/master/support/src/test/java/libcore/
-   * java/lang/ref/FinalizationTester.java
-   */
-  private void awaitGarbageCollection() throws InterruptedException {
-    Runtime.getRuntime().gc();
-    Thread.sleep(100);
-    System.runFinalization();
-  }
-}
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java b/okhttp-tests/src/test/java/okhttp3/AddressTest.java
similarity index 91%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java
rename to okhttp-tests/src/test/java/okhttp3/AddressTest.java
index 1e623f0e59..5f346c9787 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/AddressTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.http.AuthenticatorAdapter;
-import com.squareup.okhttp.internal.http.RecordingProxySelector;
+import okhttp3.internal.Util;
+import okhttp3.internal.http.AuthenticatorAdapter;
+import okhttp3.internal.http.RecordingProxySelector;
 import java.util.List;
 import javax.net.SocketFactory;
 import org.junit.Test;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java
rename to okhttp-tests/src/test/java/okhttp3/CacheControlTest.java
index 5d1376737e..ef15052a93 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheControlTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CacheControlTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.util.concurrent.TimeUnit;
 import org.junit.Test;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
rename to okhttp-tests/src/test/java/okhttp3/CacheTest.java
index f70026145e..c6d77d7f30 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp;
-
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.io.InMemoryFileSystem;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+package okhttp3;
+
+import okhttp3.internal.Internal;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.internal.Util;
+import okhttp3.internal.io.InMemoryFileSystem;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
 import java.io.File;
 import java.io.IOException;
 import java.net.CookieHandler;
@@ -57,7 +57,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -259,7 +259,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     assertEquals("ABC", in.readUtf8());
 
     // OpenJDK 6 fails on this line, complaining that the connection isn't open yet
-    String suite = response1.handshake().cipherSuite();
+    CipherSuite cipherSuite = response1.handshake().cipherSuite();
     List<Certificate> localCerts = response1.handshake().localCertificates();
     List<Certificate> serverCerts = response1.handshake().peerCertificates();
     Principal peerPrincipal = response1.handshake().peerPrincipal();
@@ -272,7 +272,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     assertEquals(1, cache.getNetworkCount());
     assertEquals(1, cache.getHitCount());
 
-    assertEquals(suite, response2.handshake().cipherSuite());
+    assertEquals(cipherSuite, response2.handshake().cipherSuite());
     assertEquals(localCerts, response2.handshake().localCertificates());
     assertEquals(serverCerts, response2.handshake().peerCertificates());
     assertEquals(peerPrincipal, response2.handshake().peerPrincipal());
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java b/okhttp-tests/src/test/java/okhttp3/CallTest.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
rename to okhttp-tests/src/test/java/okhttp3/CallTest.java
index eeabe9d9f5..21c4f2d8cf 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java
@@ -13,22 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
-
-import com.squareup.okhttp.internal.DoubleInetAddressDns;
-import com.squareup.okhttp.internal.RecordingOkAuthenticator;
-import com.squareup.okhttp.internal.SingleInetAddressDns;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.Version;
-import com.squareup.okhttp.internal.http.FakeDns;
-import com.squareup.okhttp.internal.io.InMemoryFileSystem;
-import com.squareup.okhttp.mockwebserver.Dispatcher;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
-import com.squareup.okhttp.mockwebserver.SocketPolicy;
-import com.squareup.okhttp.testing.RecordingHostnameVerifier;
+package okhttp3;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -62,6 +48,20 @@
 import javax.net.ssl.SSLProtocolException;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.internal.DoubleInetAddressDns;
+import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.SingleInetAddressDns;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.internal.Util;
+import okhttp3.internal.Version;
+import okhttp3.internal.http.FakeDns;
+import okhttp3.internal.io.InMemoryFileSystem;
+import okhttp3.mockwebserver.Dispatcher;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
+import okhttp3.mockwebserver.SocketPolicy;
+import okhttp3.testing.RecordingHostnameVerifier;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
@@ -74,8 +74,8 @@
 import org.junit.rules.TestRule;
 import org.junit.rules.Timeout;
 
-import static com.squareup.okhttp.internal.Internal.logger;
 import static java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER;
+import static okhttp3.internal.Internal.logger;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotSame;
@@ -134,7 +134,7 @@
     Request request = new Request.Builder()
         .url(httpUrl)
         .build();
-    assertEquals(httpUrl, request.httpUrl());
+    assertEquals(httpUrl, request.url());
 
     executeSynchronously(request).assertSuccessful();
   }
@@ -631,7 +631,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl())
+    callback.await(request.url())
         .assertCode(200)
         .assertHeader("Content-Type", "text/plain")
         .assertBody("abc");
@@ -783,7 +783,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     });
     Request request = new Request.Builder().url(server.url("/")).build();
     c.newCall(request).enqueue(callback);
-    RecordedResponse response = callback.await(request.httpUrl());
+    RecordedResponse response = callback.await(request.url());
     assertEquals(request, response.request);
   }
 
@@ -874,7 +874,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl()).assertHandshake();
+    callback.await(request.url()).assertHandshake();
   }
 
   @Test public void recoverWhenRetryOnConnectionFailureIsTrue() throws Exception {
@@ -966,7 +966,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl()).assertBody("abc");
+    callback.await(request.url()).assertBody("abc");
   }
 
   @Test public void noRecoveryFromTlsHandshakeFailureWhenTlsFallbackIsDisabled() throws Exception {
@@ -1070,7 +1070,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl())
+    callback.await(request.url())
         .assertCode(200)
         .assertBody("abc");
 
@@ -1232,14 +1232,14 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .url(server.url("/"))
         .build();
     client.newCall(request1).enqueue(callback);
-    callback.await(request1.httpUrl()).assertCode(200).assertBody("A");
+    callback.await(request1.url()).assertCode(200).assertBody("A");
     assertNull(server.takeRequest().getHeader("If-None-Match"));
 
     Request request2 = new Request.Builder()
         .url(server.url("/"))
         .build();
     client.newCall(request2).enqueue(callback);
-    callback.await(request2.httpUrl()).assertCode(200).assertBody("A");
+    callback.await(request2.url()).assertCode(200).assertBody("A");
     assertEquals("v1", server.takeRequest().getHeader("If-None-Match"));
   }
 
@@ -1304,14 +1304,14 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .url(server.url("/"))
         .build();
     client.newCall(request1).enqueue(callback);
-    callback.await(request1.httpUrl()).assertCode(200).assertBody("A");
+    callback.await(request1.url()).assertCode(200).assertBody("A");
     assertNull(server.takeRequest().getHeader("If-None-Match"));
 
     Request request2 = new Request.Builder()
         .url(server.url("/"))
         .build();
     client.newCall(request2).enqueue(callback);
-    callback.await(request2.httpUrl()).assertCode(200).assertBody("B");
+    callback.await(request2.url()).assertCode(200).assertBody("B");
     assertEquals("v1", server.takeRequest().getHeader("If-None-Match"));
   }
 
@@ -1377,6 +1377,27 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     assertEquals("GET /page2 HTTP/1.1", page2.getRequestLine());
   }
 
+  @Test public void propfindRedirectsToPropfind() throws Exception {
+    server.enqueue(new MockResponse()
+        .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)
+        .addHeader("Location: /page2")
+        .setBody("This page has moved!"));
+    server.enqueue(new MockResponse().setBody("Page 2"));
+
+    Response response = client.newCall(new Request.Builder()
+        .url(server.url("/page1"))
+        .method("PROPFIND", RequestBody.create(MediaType.parse("text/plain"), "Request Body"))
+        .build()).execute();
+    assertEquals("Page 2", response.body().string());
+
+    RecordedRequest page1 = server.takeRequest();
+    assertEquals("PROPFIND /page1 HTTP/1.1", page1.getRequestLine());
+    assertEquals("Request Body", page1.getBody().readUtf8());
+
+    RecordedRequest page2 = server.takeRequest();
+    assertEquals("PROPFIND /page2 HTTP/1.1", page2.getRequestLine());
+  }
+
   @Test public void redirectsDoNotIncludeTooManyCookies() throws Exception {
     server2.enqueue(new MockResponse().setBody("Page 2"));
     server.enqueue(new MockResponse()
@@ -1680,9 +1701,9 @@ private InetSocketAddress startNullServer() throws IOException {
     Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();
     client.newCall(requestB).enqueue(callback);
 
-    callback.await(requestA.httpUrl()).assertBody("A");
+    callback.await(requestA.url()).assertBody("A");
     // At this point we know the callback is ready, and that it will receive a cancel failure.
-    callback.await(requestB.httpUrl()).assertFailure("Canceled");
+    callback.await(requestB.url()).assertFailure("Canceled");
   }
 
   @Test public void canceledBeforeIOSignalsOnFailure_HTTPS() throws Exception {
@@ -1713,7 +1734,7 @@ private InetSocketAddress startNullServer() throws IOException {
     call.enqueue(callback);
     assertEquals("/a", server.takeRequest().getPath());
 
-    callback.await(requestA.httpUrl()).assertFailure("Canceled", "stream was reset: CANCEL",
+    callback.await(requestA.url()).assertFailure("Canceled", "stream was reset: CANCEL",
         "Socket closed");
   }
 
@@ -2056,7 +2077,7 @@ private InetSocketAddress startNullServer() throws IOException {
 
     client.setSslSocketFactory(sslContext.getSocketFactory());
     client.setProxy(server.toProxyAddress());
-    client.setAuthenticator(new RecordingOkAuthenticator("password"));
+    client.setProxyAuthenticator(new RecordingOkAuthenticator("password"));
     client.setHostnameVerifier(new RecordingHostnameVerifier());
 
     Request request = new Request.Builder()
@@ -2199,7 +2220,7 @@ protected SSLSocket configureSocket(SSLSocket sslSocket) throws IOException {
   /**
    * Used during tests that involve TLS connection fallback attempts. OkHttp includes the
    * TLS_FALLBACK_SCSV cipher on fallback connections. See
-   * {@link com.squareup.okhttp.FallbackTestClientSocketFactory} for details.
+   * {@link FallbackTestClientSocketFactory} for details.
    */
   private void suppressTlsFallbackScsv(OkHttpClient client) {
     FallbackTestClientSocketFactory clientSocketFactory =
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CertificatePinnerTest.java b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java
similarity index 98%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/CertificatePinnerTest.java
rename to okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java
index 91b5a590f1..baa17fb26e 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CertificatePinnerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CertificatePinnerTest.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.SslContextBuilder;
+import okhttp3.internal.SslContextBuilder;
 import java.security.GeneralSecurityException;
 import java.security.KeyPair;
 import java.security.cert.X509Certificate;
@@ -24,7 +24,7 @@
 import okio.ByteString;
 import org.junit.Test;
 
-import static com.squareup.okhttp.TestUtil.setOf;
+import static okhttp3.TestUtil.setOf;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
similarity index 89%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java
rename to okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
index 4c4b1d3d54..86b5fdaa33 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.RecordingOkAuthenticator;
-import com.squareup.okhttp.internal.http.StreamAllocation;
-import com.squareup.okhttp.internal.io.RealConnection;
+import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.http.StreamAllocation;
+import okhttp3.internal.io.RealConnection;
 import java.net.InetSocketAddress;
 import java.net.Proxy;
 import java.net.ProxySelector;
@@ -48,8 +48,7 @@
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 50L);
-    pool.put(c1);
+    RealConnection c1 = newConnection(pool, routeA1, 50L);
 
     // Running at time 50, the pool returns that nothing can be evicted until time 150.
     assertEquals(100L, pool.cleanup(50L));
@@ -81,10 +80,9 @@
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 50L);
+    RealConnection c1 = newConnection(pool, routeA1, 50L);
     StreamAllocation streamAllocation = new StreamAllocation(pool, addressA);
     streamAllocation.acquire(c1);
-    pool.put(c1);
 
     // Running at time 50, the pool returns that nothing can be evicted until time 150.
     assertEquals(100L, pool.cleanup(50L));
@@ -106,11 +104,8 @@
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 75L);
-    pool.put(c1);
-
-    RealConnection c2 = newConnection(routeB1, 50L);
-    pool.put(c2);
+    RealConnection c1 = newConnection(pool, routeA1, 75L);
+    RealConnection c2 = newConnection(pool, routeB1, 50L);
 
     // Running at time 75, the pool returns that nothing can be evicted until time 150.
     assertEquals(75L, pool.cleanup(75L));
@@ -141,11 +136,8 @@
     ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 50L);
-    pool.put(c1);
-
-    RealConnection c2 = newConnection(routeB1, 75L);
-    pool.put(c2);
+    RealConnection c1 = newConnection(pool, routeA1, 50L);
+    RealConnection c2 = newConnection(pool, routeB1, 75L);
 
     // With 2 connections, there's no need to evict until the connections time out.
     assertEquals(50L, pool.cleanup(100L));
@@ -154,8 +146,7 @@
     assertFalse(c2.socket.isClosed());
 
     // Add a third connection
-    RealConnection c3 = newConnection(routeC1, 75L);
-    pool.put(c3);
+    RealConnection c3 = newConnection(pool, routeC1, 75L);
 
     // The third connection bounces the first.
     assertEquals(0L, pool.cleanup(100L));
@@ -169,8 +160,7 @@
     ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 0L);
-    pool.put(c1);
+    RealConnection c1 = newConnection(pool, routeA1, 0L);
     allocateAndLeakAllocation(pool, c1);
 
     awaitGarbageCollection();
@@ -182,7 +172,7 @@
 
   /** Use a helper method so there's no hidden reference remaining on the stack. */
   private void allocateAndLeakAllocation(ConnectionPool pool, RealConnection connection) {
-    StreamAllocation leak = new StreamAllocation(pool, connection.getRoute().getAddress());
+    StreamAllocation leak = new StreamAllocation(pool, connection.getRoute().address());
     leak.acquire(connection);
   }
 
@@ -197,10 +187,13 @@ private void awaitGarbageCollection() throws InterruptedException {
     System.runFinalization();
   }
 
-  private RealConnection newConnection(Route route, long idleAtNanos) {
+  private RealConnection newConnection(ConnectionPool pool, Route route, long idleAtNanos) {
     RealConnection connection = new RealConnection(route);
     connection.idleAtNanos = idleAtNanos;
     connection.socket = new Socket();
+    synchronized (pool) {
+      pool.put(connection);
+    }
     return connection;
   }
 
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionReuseTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionReuseTest.java
rename to okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
index f445dac7a7..b482798044 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionReuseTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.SocketPolicy;
-import com.squareup.okhttp.testing.RecordingHostnameVerifier;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.SocketPolicy;
+import okhttp3.testing.RecordingHostnameVerifier;
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
 import javax.net.ssl.SSLContext;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java
rename to okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java
index 3b390e841d..7db756d5a4 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionSpecTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionSpecTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.util.Arrays;
 import java.util.LinkedHashSet;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocket.java b/okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocket.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocket.java
rename to okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocket.java
index e13a50fcb9..f07559387b 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocket.java
+++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocket.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocketFactory.java b/okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocketFactory.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocketFactory.java
rename to okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocketFactory.java
index 38a5de8f8e..8d0d092f2d 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSSLSocketFactory.java
+++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSSLSocketFactory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 import java.net.InetAddress;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingServerSocketFactory.java b/okhttp-tests/src/test/java/okhttp3/DelegatingServerSocketFactory.java
similarity index 98%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingServerSocketFactory.java
rename to okhttp-tests/src/test/java/okhttp3/DelegatingServerSocketFactory.java
index 7116fa3023..09b3a25d09 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingServerSocketFactory.java
+++ b/okhttp-tests/src/test/java/okhttp3/DelegatingServerSocketFactory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 import java.net.InetAddress;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSocketFactory.java b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java
similarity index 98%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSocketFactory.java
rename to okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java
index e673fdf900..d21f37a31a 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/DelegatingSocketFactory.java
+++ b/okhttp-tests/src/test/java/okhttp3/DelegatingSocketFactory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 import java.net.InetAddress;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java
similarity index 93%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java
rename to okhttp-tests/src/test/java/okhttp3/DispatcherTest.java
index 3d7701f298..bb82b2f786 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java
@@ -1,6 +1,5 @@
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.Call.AsyncCall;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -123,24 +122,24 @@
   }
 
   class RecordingExecutor extends AbstractExecutorService {
-    private List<AsyncCall> calls = new ArrayList<>();
+    private List<Call.AsyncCall> calls = new ArrayList<>();
 
     @Override public void execute(Runnable command) {
-      calls.add((AsyncCall) command);
+      calls.add((Call.AsyncCall) command);
     }
 
     public void assertJobs(String... expectedUrls) {
       List<String> actualUrls = new ArrayList<>();
-      for (AsyncCall call : calls) {
-        actualUrls.add(call.request().urlString());
+      for (Call.AsyncCall call : calls) {
+        actualUrls.add(call.request().url().toString());
       }
       assertEquals(Arrays.asList(expectedUrls), actualUrls);
     }
 
     public void finishJob(String url) {
-      for (Iterator<AsyncCall> i = calls.iterator(); i.hasNext(); ) {
-        AsyncCall call = i.next();
-        if (call.request().urlString().equals(url)) {
+      for (Iterator<Call.AsyncCall> i = calls.iterator(); i.hasNext(); ) {
+        Call.AsyncCall call = i.next();
+        if (call.request().url().toString().equals(url)) {
           i.remove();
           dispatcher.finished(call);
           return;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/FallbackTestClientSocketFactory.java b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/FallbackTestClientSocketFactory.java
rename to okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java
index 5504e77d4f..7a34362b4a 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/FallbackTestClientSocketFactory.java
+++ b/okhttp-tests/src/test/java/okhttp3/FallbackTestClientSocketFactory.java
@@ -13,11 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
-import java.net.InetAddress;
-import java.net.Socket;
 import java.util.ArrayList;
 import java.util.List;
 import javax.net.ssl.SSLSocket;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java b/okhttp-tests/src/test/java/okhttp3/FormBodyTest.java
similarity index 80%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java
rename to okhttp-tests/src/test/java/okhttp3/FormBodyTest.java
index cb54aef8fa..a572ff235f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/FormBodyTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 import okio.Buffer;
@@ -21,26 +21,44 @@
 
 import static org.junit.Assert.assertEquals;
 
-public final class FormEncodingBuilderTest {
+public final class FormBodyTest {
   @Test public void urlEncoding() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .add("a+=& b", "c+=& d")
         .add("space, the", "final frontier")
         .add("%25", "%25")
         .build();
 
-    assertEquals("application/x-www-form-urlencoded", formEncoding.contentType().toString());
+    assertEquals(3, body.size());
+
+    assertEquals("a%2B%3D%26%20b", body.encodedName(0));
+    assertEquals("space%2C%20the", body.encodedName(1));
+    assertEquals("%2525", body.encodedName(2));
+
+    assertEquals("a+=& b", body.name(0));
+    assertEquals("space, the", body.name(1));
+    assertEquals("%25", body.name(2));
+
+    assertEquals("c%2B%3D%26%20d", body.encodedValue(0));
+    assertEquals("final%20frontier", body.encodedValue(1));
+    assertEquals("%2525", body.encodedValue(2));
+
+    assertEquals("c+=& d", body.value(0));
+    assertEquals("final frontier", body.value(1));
+    assertEquals("%25", body.value(2));
+
+    assertEquals("application/x-www-form-urlencoded", body.contentType().toString());
 
     String expected = "a%2B%3D%26%20b=c%2B%3D%26%20d&space%2C%20the=final%20frontier&%2525=%2525";
-    assertEquals(expected.length(), formEncoding.contentLength());
+    assertEquals(expected.length(), body.contentLength());
 
     Buffer out = new Buffer();
-    formEncoding.writeTo(out);
+    body.writeTo(out);
     assertEquals(expected, out.readUtf8());
   }
 
   @Test public void addEncoded() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .addEncoded("a+=& b", "c+=& d")
         .addEncoded("e+=& f", "g+=& h")
         .addEncoded("%25", "%25")
@@ -48,46 +66,46 @@
 
     String expected = "a+%3D%26%20b=c+%3D%26%20d&e+%3D%26%20f=g+%3D%26%20h&%25=%25";
     Buffer out = new Buffer();
-    formEncoding.writeTo(out);
+    body.writeTo(out);
     assertEquals(expected, out.readUtf8());
   }
 
   @Test public void encodedPair() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .add("sim", "ple")
         .build();
 
     String expected = "sim=ple";
-    assertEquals(expected.length(), formEncoding.contentLength());
+    assertEquals(expected.length(), body.contentLength());
 
     Buffer buffer = new Buffer();
-    formEncoding.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
   @Test public void encodeMultiplePairs() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .add("sim", "ple")
         .add("hey", "there")
         .add("help", "me")
         .build();
 
     String expected = "sim=ple&hey=there&help=me";
-    assertEquals(expected.length(), formEncoding.contentLength());
+    assertEquals(expected.length(), body.contentLength());
 
     Buffer buffer = new Buffer();
-    formEncoding.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
   @Test public void buildEmptyForm() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder().build();
+    FormBody body = new FormBody.Builder().build();
 
     String expected = "";
-    assertEquals(expected.length(), formEncoding.contentLength());
+    assertEquals(expected.length(), body.contentLength());
 
     Buffer buffer = new Buffer();
-    formEncoding.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -170,7 +188,7 @@
 
   private String formEncode(int codePoint) throws IOException {
     // Wrap the codepoint with regular printable characters to prevent trimming.
-    RequestBody body = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .add("a", new String(new int[] { 'b', codePoint, 'c' }, 0, 3))
         .build();
     Buffer buffer = new Buffer();
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java
rename to okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java
index 246dac2c6b..36f99c5658 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/HttpUrlTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java
@@ -13,10 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.UrlComponentEncodingTester.Component;
-import com.squareup.okhttp.UrlComponentEncodingTester.Encoding;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URL;
@@ -24,6 +22,8 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedHashSet;
+import okhttp3.UrlComponentEncodingTester.Component;
+import okhttp3.UrlComponentEncodingTester.Encoding;
 import org.junit.Ignore;
 import org.junit.Test;
 
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
rename to okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
index e70c9087ac..ebce641a38 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
@@ -134,9 +134,9 @@
 
     Interceptor interceptor = new Interceptor() {
       @Override public Response intercept(Chain chain) throws IOException {
-        Address address = chain.connection().getRoute().getAddress();
-        String sameHost = address.getUriHost();
-        int differentPort = address.getUriPort() + 1;
+        Address address = chain.connection().getRoute().address();
+        String sameHost = address.url().host();
+        int differentPort = address.url().port() + 1;
         return chain.proceed(chain.request().newBuilder()
             .url(HttpUrl.parse("http://" + sameHost + ":" + differentPort + "/"))
             .build());
@@ -380,7 +380,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl())
+    callback.await(request.url())
         .assertCode(200)
         .assertHeader("OkHttp-Intercepted", "yep");
   }
@@ -412,7 +412,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
 
     client.interceptors().add(new Interceptor() {
       @Override public Response intercept(Chain chain) throws IOException {
-        if (chain.request().url().getPath().equals("/b")) {
+        if (chain.request().url().encodedPath().equals("/b")) {
           Request requestA = new Request.Builder()
               .url(server.url("/a"))
               .build();
@@ -438,7 +438,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
 
     client.interceptors().add(new Interceptor() {
       @Override public Response intercept(Chain chain) throws IOException {
-        if (chain.request().url().getPath().equals("/b")) {
+        if (chain.request().url().encodedPath().equals("/b")) {
           Request requestA = new Request.Builder()
               .url(server.url("/a"))
               .build();
@@ -446,7 +446,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
           try {
             RecordingCallback callbackA = new RecordingCallback();
             client.newCall(requestA).enqueue(callbackA);
-            callbackA.await(requestA.httpUrl()).assertBody("a");
+            callbackA.await(requestA.url()).assertBody("a");
           } catch (Exception e) {
             throw new RuntimeException(e);
           }
@@ -461,7 +461,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
         .build();
     RecordingCallback callbackB = new RecordingCallback();
     client.newCall(requestB).enqueue(callbackB);
-    callbackB.await(requestB.httpUrl()).assertBody("b");
+    callbackB.await(requestB.url()).assertBody("b");
   }
 
   @Test public void applicationkInterceptorThrowsRuntimeExceptionSynchronous() throws Exception {
@@ -475,8 +475,6 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
   /**
    * When an interceptor throws an unexpected exception, synchronous callers can catch it and deal
    * with it.
-   *
-   * TODO(jwilson): test that resources are not leaked when this happens.
    */
   private void interceptorThrowsRuntimeExceptionSynchronous(
       List<Interceptor> interceptors) throws Exception {
@@ -533,8 +531,6 @@ private void interceptorThrowsRuntimeExceptionSynchronous(
   /**
    * When an interceptor throws an unexpected exception, asynchronous callers are left hanging. The
    * exception goes to the uncaught exception handler.
-   *
-   * TODO(jwilson): test that resources are not leaked when this happens.
    */
   private void interceptorThrowsRuntimeExceptionAsynchronous(
         List<Interceptor> interceptors) throws Exception {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/MediaTypeTest.java b/okhttp-tests/src/test/java/okhttp3/MediaTypeTest.java
similarity index 98%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/MediaTypeTest.java
rename to okhttp-tests/src/test/java/okhttp3/MediaTypeTest.java
index 25805957a5..8f2dbe79eb 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/MediaTypeTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/MediaTypeTest.java
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.nio.charset.Charset;
 import java.nio.charset.IllegalCharsetNameException;
 import java.nio.charset.UnsupportedCharsetException;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
similarity index 73%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java
rename to okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
index 4159679c76..a5a8664a87 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBuilderTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
@@ -13,21 +13,25 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 import okio.Buffer;
 import okio.BufferedSink;
 import org.junit.Test;
 
-import static com.squareup.okhttp.internal.Util.UTF_8;
+import static okhttp3.internal.Util.UTF_8;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
-public final class MultipartBuilderTest {
-  @Test(expected = IllegalStateException.class)
-  public void onePartRequired() throws Exception {
-    new MultipartBuilder().build();
+public final class MultipartBodyTest {
+  @Test public void onePartRequired() throws Exception {
+    try {
+      new MultipartBody.Builder().build();
+      fail();
+    } catch (IllegalStateException e) {
+      assertEquals("Multipart body must have at least one part.", e.getMessage());
+    }
   }
 
   @Test public void singlePart() throws Exception {
@@ -38,16 +42,19 @@ public void onePartRequired() throws Exception {
         + "Hello, World!\r\n"
         + "--123--\r\n";
 
-    RequestBody requestBody = new MultipartBuilder("123")
+    MultipartBody body = new MultipartBody.Builder("123")
         .addPart(RequestBody.create(null, "Hello, World!"))
         .build();
 
-    assertEquals("multipart/mixed; boundary=123", requestBody.contentType().toString());
+    assertEquals("123", body.boundary());
+    assertEquals(MultipartBody.MIXED, body.type());
+    assertEquals("multipart/mixed; boundary=123", body.contentType().toString());
+    assertEquals(1, body.parts().size());
+    assertEquals(53, body.contentLength());
 
     Buffer buffer = new Buffer();
-    requestBody.writeTo(buffer);
-    assertEquals(53, requestBody.contentLength());
-    assertEquals(buffer.size(), requestBody.contentLength());
+    body.writeTo(buffer);
+    assertEquals(buffer.size(), body.contentLength());
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -67,18 +74,21 @@ public void onePartRequired() throws Exception {
         + "Fox\r\n"
         + "--123--\r\n";
 
-    RequestBody requestBody = new MultipartBuilder("123")
+    MultipartBody body = new MultipartBody.Builder("123")
         .addPart(RequestBody.create(null, "Quick"))
         .addPart(RequestBody.create(null, "Brown"))
         .addPart(RequestBody.create(null, "Fox"))
         .build();
 
-    assertEquals("multipart/mixed; boundary=123", requestBody.contentType().toString());
+    assertEquals("123", body.boundary());
+    assertEquals(MultipartBody.MIXED, body.type());
+    assertEquals("multipart/mixed; boundary=123", body.contentType().toString());
+    assertEquals(3, body.parts().size());
+    assertEquals(112, body.contentLength());
 
     Buffer buffer = new Buffer();
-    requestBody.writeTo(buffer);
-    assertEquals(112, requestBody.contentLength());
-    assertEquals(buffer.size(), requestBody.contentLength());
+    body.writeTo(buffer);
+    assertEquals(buffer.size(), body.contentLength());
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -111,11 +121,11 @@ public void onePartRequired() throws Exception {
         + "\r\n"
         + "--AaB03x--\r\n";
 
-    RequestBody requestBody = new MultipartBuilder("AaB03x")
-        .type(MultipartBuilder.FORM)
+    MultipartBody body = new MultipartBody.Builder("AaB03x")
+        .setType(MultipartBody.FORM)
         .addFormDataPart("submit-name", "Larry")
         .addFormDataPart("files", null,
-            new MultipartBuilder("BbC04y")
+            new MultipartBody.Builder("BbC04y")
                 .addPart(
                     Headers.of("Content-Disposition", "file; filename=\"file1.txt\""),
                     RequestBody.create(
@@ -130,12 +140,15 @@ public void onePartRequired() throws Exception {
                 .build())
         .build();
 
-    assertEquals("multipart/form-data; boundary=AaB03x", requestBody.contentType().toString());
+    assertEquals("AaB03x", body.boundary());
+    assertEquals(MultipartBody.FORM, body.type());
+    assertEquals("multipart/form-data; boundary=AaB03x", body.contentType().toString());
+    assertEquals(2, body.parts().size());
+    assertEquals(568, body.contentLength());
 
     Buffer buffer = new Buffer();
-    requestBody.writeTo(buffer);
-    assertEquals(568, requestBody.contentLength());
-    assertEquals(buffer.size(), requestBody.contentLength());
+    body.writeTo(buffer);
+    assertEquals(buffer.size(), body.contentLength());
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -164,8 +177,8 @@ public void onePartRequired() throws Exception {
         + "Alpha\r\n"
         + "--AaB03x--\r\n";
 
-    RequestBody requestBody = new MultipartBuilder("AaB03x")
-        .type(MultipartBuilder.FORM)
+    MultipartBody body = new MultipartBody.Builder("AaB03x")
+        .setType(MultipartBody.FORM)
         .addFormDataPart("field with spaces", "filename with spaces.txt",
             RequestBody.create(MediaType.parse("text/plain; charset=utf-8"), "okay"))
         .addFormDataPart("field with \"", "\"")
@@ -174,7 +187,7 @@ public void onePartRequired() throws Exception {
         .build();
 
     Buffer buffer = new Buffer();
-    requestBody.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -209,24 +222,27 @@ public void onePartRequired() throws Exception {
         + "Fox\r\n"
         + "--123--\r\n";
 
-    RequestBody requestBody = new MultipartBuilder("123")
+    MultipartBody body = new MultipartBody.Builder("123")
         .addPart(RequestBody.create(null, "Quick"))
         .addPart(new StreamingBody("Brown"))
         .addPart(RequestBody.create(null, "Fox"))
         .build();
 
-    assertEquals("multipart/mixed; boundary=123", requestBody.contentType().toString());
+    assertEquals("123", body.boundary());
+    assertEquals(MultipartBody.MIXED, body.type());
+    assertEquals("multipart/mixed; boundary=123", body.contentType().toString());
+    assertEquals(3, body.parts().size());
+    assertEquals(-1, body.contentLength());
 
     Buffer buffer = new Buffer();
-    requestBody.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
-    assertEquals(-1, requestBody.contentLength());
   }
 
   @Test public void contentTypeHeaderIsForbidden() throws Exception {
+    MultipartBody.Builder multipart = new MultipartBody.Builder();
     try {
-      new MultipartBuilder().addPart(
-          Headers.of("Content-Type", "text/plain"),
+      multipart.addPart(Headers.of("Content-Type", "text/plain"),
           RequestBody.create(null, "Hello, World!"));
       fail();
     } catch (IllegalArgumentException expected) {
@@ -234,9 +250,9 @@ public void onePartRequired() throws Exception {
   }
 
   @Test public void contentLengthHeaderIsForbidden() throws Exception {
+    MultipartBody.Builder multipart = new MultipartBody.Builder();
     try {
-      new MultipartBuilder().addPart(
-          Headers.of("Content-Length", "13"),
+      multipart.addPart(Headers.of("Content-Length", "13"),
           RequestBody.create(null, "Hello, World!"));
       fail();
     } catch (IllegalArgumentException expected) {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java
rename to okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
index 7f2635b306..7a5477d04c 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/OkHttpClientTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
@@ -13,12 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.RecordingAuthenticator;
-import com.squareup.okhttp.internal.http.AuthenticatorAdapter;
-import com.squareup.okhttp.internal.http.RecordingProxySelector;
-import com.squareup.okhttp.internal.tls.OkHostnameVerifier;
 import java.io.IOException;
 import java.net.Authenticator;
 import java.net.CacheRequest;
@@ -34,6 +30,10 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import javax.net.SocketFactory;
+import okhttp3.internal.RecordingAuthenticator;
+import okhttp3.internal.http.AuthenticatorAdapter;
+import okhttp3.internal.http.RecordingProxySelector;
+import okhttp3.internal.tls.OkHostnameVerifier;
 import org.junit.After;
 import org.junit.Test;
 
@@ -126,6 +126,7 @@
     assertSame(proxySelector, client.getProxySelector());
     assertSame(cookieManager, client.getCookieHandler());
     assertSame(AuthenticatorAdapter.INSTANCE, client.getAuthenticator());
+    assertSame(AuthenticatorAdapter.INSTANCE, client.getProxyAuthenticator());
     assertSame(socketFactory, client.getSocketFactory());
     assertSame(hostnameVerifier, client.getHostnameVerifier());
     assertSame(certificatePinner, client.getCertificatePinner());
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java
rename to okhttp-tests/src/test/java/okhttp3/RecordedResponse.java
index 129fecf145..dca73617ef 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java
+++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java
@@ -13,11 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.ws.WebSocket;
+import okhttp3.ws.WebSocket;
 import java.io.IOException;
-import java.net.URL;
 import java.util.Arrays;
 
 import static org.junit.Assert.assertEquals;
@@ -45,7 +44,7 @@ public RecordedResponse(Request request, Response response, WebSocket webSocket,
     this.failure = failure;
   }
 
-  public RecordedResponse assertRequestUrl(URL url) {
+  public RecordedResponse assertRequestUrl(HttpUrl url) {
     assertEquals(url, request.url());
     return this;
   }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java b/okhttp-tests/src/test/java/okhttp3/RecordingCallback.java
similarity index 94%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
rename to okhttp-tests/src/test/java/okhttp3/RecordingCallback.java
index f2447ecc64..68d4adbab3 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
+++ b/okhttp-tests/src/test/java/okhttp3/RecordingCallback.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -49,7 +49,7 @@ public synchronized RecordedResponse await(HttpUrl url) throws Exception {
     while (true) {
       for (Iterator<RecordedResponse> i = responses.iterator(); i.hasNext(); ) {
         RecordedResponse recordedResponse = i.next();
-        if (recordedResponse.request.httpUrl().equals(url)) {
+        if (recordedResponse.request.url().equals(url)) {
           i.remove();
           return recordedResponse;
         }
@@ -65,7 +65,7 @@ public synchronized RecordedResponse await(HttpUrl url) throws Exception {
 
   public synchronized void assertNoResponse(HttpUrl url) throws Exception {
     for (RecordedResponse recordedResponse : responses) {
-      if (recordedResponse.request.httpUrl().equals(url)) {
+      if (recordedResponse.request.url().equals(url)) {
         throw new AssertionError("Expected no response for " + url);
       }
     }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java b/okhttp-tests/src/test/java/okhttp3/RequestTest.java
similarity index 95%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java
rename to okhttp-tests/src/test/java/okhttp3/RequestTest.java
index 39da50037c..929d04b356 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java
@@ -13,14 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.net.URI;
-import java.net.URL;
 import java.util.Arrays;
 import java.util.Collections;
 import okio.Buffer;
@@ -120,21 +119,21 @@
 
   @Test public void uninitializedURI() throws Exception {
     Request request = new Request.Builder().url("http://localhost/api").build();
-    assertEquals(new URI("http://localhost/api"), request.uri());
-    assertEquals(new URL("http://localhost/api"), request.url());
+    assertEquals(new URI("http://localhost/api"), request.url().uri());
+    assertEquals(HttpUrl.parse("http://localhost/api"), request.url());
   }
 
   @Test public void newBuilderUrlResetsUrl() throws Exception {
     Request requestWithoutCache = new Request.Builder().url("http://localhost/api").build();
     Request builtRequestWithoutCache = requestWithoutCache.newBuilder().url("http://localhost/api/foo").build();
-    assertEquals(new URL("http://localhost/api/foo"), builtRequestWithoutCache.url());
+    assertEquals(HttpUrl.parse("http://localhost/api/foo"), builtRequestWithoutCache.url());
 
     Request requestWithCache = new Request.Builder().url("http://localhost/api").build();
     // cache url object
     requestWithCache.url();
     Request builtRequestWithCache = requestWithCache.newBuilder().url(
         "http://localhost/api/foo").build();
-    assertEquals(new URL("http://localhost/api/foo"), builtRequestWithCache.url());
+    assertEquals(HttpUrl.parse("http://localhost/api/foo"), builtRequestWithCache.url());
   }
 
   @Test public void cacheControl() throws Exception {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxy.java b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java
similarity index 98%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxy.java
rename to okhttp-tests/src/test/java/okhttp3/SocksProxy.java
index 854ddaf04e..4cc4cae673 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxy.java
+++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.NamedRunnable;
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.NamedRunnable;
+import okhttp3.internal.Util;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxyTest.java b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxyTest.java
rename to okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java
index 0d6e9fdaee..83a7ba1af4 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/SocksProxyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import java.io.IOException;
 import java.net.Proxy;
 import java.net.ProxySelector;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/TestLogHandler.java b/okhttp-tests/src/test/java/okhttp3/TestLogHandler.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/TestLogHandler.java
rename to okhttp-tests/src/test/java/okhttp3/TestLogHandler.java
index 24cb377cab..10f3cbb9d2 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/TestLogHandler.java
+++ b/okhttp-tests/src/test/java/okhttp3/TestLogHandler.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java b/okhttp-tests/src/test/java/okhttp3/TestUtil.java
similarity index 91%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java
rename to okhttp-tests/src/test/java/okhttp3/TestUtil.java
index bf2ed4a237..dffa667115 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java
+++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java
@@ -1,6 +1,6 @@
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.framed.Header;
+import okhttp3.internal.framed.Header;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
similarity index 89%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java
rename to okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
index 576c8b5d8e..494f09fd92 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp;
-
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.RecordingAuthenticator;
-import com.squareup.okhttp.internal.RecordingOkAuthenticator;
-import com.squareup.okhttp.internal.SingleInetAddressDns;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.Version;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
-import com.squareup.okhttp.mockwebserver.SocketPolicy;
-import com.squareup.okhttp.testing.RecordingHostnameVerifier;
+package okhttp3;
+
+import okhttp3.internal.Internal;
+import okhttp3.internal.RecordingAuthenticator;
+import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.SingleInetAddressDns;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.internal.Util;
+import okhttp3.internal.Version;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
+import okhttp3.mockwebserver.SocketPolicy;
+import okhttp3.testing.RecordingHostnameVerifier;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -80,16 +80,19 @@
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 
-import static com.squareup.okhttp.internal.Util.UTF_8;
-import static com.squareup.okhttp.internal.http.OkHeaders.SELECTED_PROTOCOL;
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_PERM_REDIRECT;
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_START;
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.SHUTDOWN_INPUT_AT_END;
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.SHUTDOWN_OUTPUT_AT_END;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.NANOSECONDS;
+import static okhttp3.internal.Util.UTF_8;
+import static okhttp3.internal.http.OkHeaders.SELECTED_PROTOCOL;
+import static okhttp3.internal.http.StatusLine.HTTP_PERM_REDIRECT;
+import static okhttp3.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_START;
+import static okhttp3.mockwebserver.SocketPolicy.FAIL_HANDSHAKE;
+import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_INPUT_AT_END;
+import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_OUTPUT_AT_END;
+import static okhttp3.mockwebserver.SocketPolicy.UPGRADE_TO_SSL_AT_END;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -130,7 +133,7 @@
   @Test public void requestHeaders() throws IOException, InterruptedException {
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.addRequestProperty("D", "e");
     connection.addRequestProperty("D", "f");
     assertEquals("f", connection.getRequestProperty("D"));
@@ -189,7 +192,7 @@
   }
 
   @Test public void getRequestPropertyReturnsLastValue() throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.addRequestProperty("A", "value1");
     connection.addRequestProperty("A", "value2");
     assertEquals("value2", connection.getRequestProperty("A"));
@@ -202,7 +205,7 @@
         .addHeader("A: e")
         .setChunkedBody("ABCDE\nFGHIJ\nKLMNO\nPQR", 8));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals(200, connection.getResponseCode());
     assertEquals("Fantastic", connection.getResponseMessage());
     assertEquals("HTTP/1.0 200 Fantastic", connection.getHeaderField(null));
@@ -226,12 +229,13 @@
     assertEquals("d", connection.getHeaderField(1));
     assertEquals("A", connection.getHeaderFieldKey(2));
     assertEquals("e", connection.getHeaderField(2));
+    connection.getInputStream().close();
   }
 
   @Test public void serverSendsInvalidResponseHeaders() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTP/1.1 200 OK"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -242,7 +246,7 @@
   @Test public void serverSendsInvalidCodeTooLarge() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 2147483648 OK"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -253,7 +257,7 @@
   @Test public void serverSendsInvalidCodeNotANumber() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 00a OK"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -264,7 +268,7 @@
   @Test public void serverSendsUnnecessaryWhitespace() throws Exception {
     server.enqueue(new MockResponse().setStatus(" HTTP/1.1 2147483648 OK"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -273,7 +277,7 @@
   }
 
   @Test public void connectRetriesUntilConnectedOrFailed() throws Exception {
-    URL url = server.getUrl("/foo");
+    URL url = server.url("/foo").url();
     server.shutdown();
 
     connection = client.open(url);
@@ -305,7 +309,7 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
     client.client().setProxySelector(proxySelector);
     server2.shutdown();
 
-    connection = client.open(server.getUrl("/def"));
+    connection = client.open(server.url("/def").url());
     connection.setDoOutput(true);
     transferKind.setForRequest(connection, 4);
     connection.getOutputStream().write("body".getBytes("UTF-8"));
@@ -316,13 +320,14 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
 
   @Test public void getErrorStreamOnSuccessfulRequest() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertNull(connection.getErrorStream());
+    connection.getInputStream().close();
   }
 
   @Test public void getErrorStreamOnUnsuccessfulRequest() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(404).setBody("A"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection.getErrorStream(), Integer.MAX_VALUE));
   }
 
@@ -335,8 +340,13 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
     server.enqueue(response);
     server.enqueue(response);
 
-    assertContent("ABCDE", client.open(server.getUrl("/")), 5);
-    assertContent("ABCDE", client.open(server.getUrl("/")), 5);
+    HttpURLConnection c1 = client.open(server.url("/").url());
+    assertContent("ABCDE", c1, 5);
+    HttpURLConnection c2 = client.open(server.url("/").url());
+    assertContent("ABCDE", c2, 5);
+
+    c1.getInputStream().close();
+    c2.getInputStream().close();
   }
 
   // Check that we recognize a few basic mime types by extension.
@@ -353,11 +363,11 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
     server.enqueue(response);
     server.enqueue(response);
 
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/foo")));
+    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/foo").url()));
     assertEquals(0, server.takeRequest().getSequenceNumber());
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/bar?baz=quux")));
+    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/bar?baz=quux").url()));
     assertEquals(1, server.takeRequest().getSequenceNumber());
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/z")));
+    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/z").url()));
     assertEquals(2, server.takeRequest().getSequenceNumber());
   }
 
@@ -368,11 +378,11 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
     server.enqueue(response);
     server.enqueue(response);
 
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/foo")));
+    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/foo").url()));
     assertEquals(0, server.takeRequest().getSequenceNumber());
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/bar?baz=quux")));
+    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/bar?baz=quux").url()));
     assertEquals(1, server.takeRequest().getSequenceNumber());
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.getUrl("/z")));
+    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/z").url()));
     assertEquals(2, server.takeRequest().getSequenceNumber());
   }
 
@@ -406,11 +416,16 @@ private void testServerClosesOutput(SocketPolicy socketPolicy) throws Exception
     server.enqueue(responseAfter);
     server.enqueue(responseAfter); // Enqueue 2x because the broken connection may be reused.
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/a"));
+    HttpURLConnection connection1 = client.open(server.url("/a").url());
     connection1.setReadTimeout(100);
     assertContent("This connection won't pool properly", connection1);
     assertEquals(0, server.takeRequest().getSequenceNumber());
-    HttpURLConnection connection2 = client.open(server.getUrl("/b"));
+
+    // Give the server time to enact the socket policy if it's one that could happen after the
+    // client has received the response.
+    Thread.sleep(500);
+
+    HttpURLConnection connection2 = client.open(server.url("/b").url());
     connection2.setReadTimeout(100);
     assertContent("This comes after a busted connection", connection2);
 
@@ -454,7 +469,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.setBodyLimit(0);
     server.enqueue(new MockResponse());
 
-    HttpURLConnection conn = client.open(server.getUrl("/"));
+    HttpURLConnection conn = client.open(server.url("/").url());
     conn.setDoOutput(true);
     conn.setRequestMethod("POST");
     if (uploadKind == TransferKind.CHUNKED) {
@@ -488,7 +503,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
   @Test public void getResponseCodeNoResponseBody() throws Exception {
     server.enqueue(new MockResponse().addHeader("abc: def"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection conn = client.open(url);
     conn.setDoInput(false);
     assertEquals("def", conn.getHeaderField("abc"));
@@ -506,7 +521,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
 
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
 
     assertContent("this response comes via HTTPS", connection);
 
@@ -521,7 +536,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
 
-    HttpsURLConnection httpsConnection = (HttpsURLConnection) client.open(server.getUrl("/foo"));
+    HttpsURLConnection httpsConnection = (HttpsURLConnection) client.open(server.url("/foo").url());
 
     // Prior to calling connect(), getting the cipher suite is forbidden.
     try {
@@ -554,10 +569,10 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
 
     client.client().setSslSocketFactory(clientSocketFactory);
     client.client().setHostnameVerifier(hostnameVerifier);
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertContent("this response comes via HTTPS", connection);
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertContent("another response via HTTPS", connection);
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -573,11 +588,11 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     // install a custom SSL socket factory so the server can be authorized
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     assertContent("this response comes via HTTPS", connection1);
 
     client.client().setSslSocketFactory(null);
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     try {
       readAscii(connection2.getInputStream(), Integer.MAX_VALUE);
       fail("without an SSL socket factory, the connection should fail");
@@ -587,12 +602,12 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
 
   @Test public void connectViaHttpsWithSSLFallback() throws Exception {
     server.useHttps(sslContext.getSocketFactory(), false);
-    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));
+    server.enqueue(new MockResponse().setSocketPolicy(FAIL_HANDSHAKE));
     server.enqueue(new MockResponse().setBody("this response comes via SSL"));
 
     suppressTlsFallbackScsv(client.client());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
 
     assertContent("this response comes via SSL", connection);
 
@@ -603,14 +618,14 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
 
   @Test public void connectViaHttpsWithSSLFallbackFailuresRecorded() throws Exception {
     server.useHttps(sslContext.getSocketFactory(), false);
-    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));
-    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));
+    server.enqueue(new MockResponse().setSocketPolicy(FAIL_HANDSHAKE));
+    server.enqueue(new MockResponse().setSocketPolicy(FAIL_HANDSHAKE));
 
     suppressTlsFallbackScsv(client.client());
     client.client().setDns(new SingleInetAddressDns());
 
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
 
     try {
       connection.getResponseCode();
@@ -630,14 +645,18 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse()
         .setBody("abc")
-        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));
+        .setSocketPolicy(DISCONNECT_AT_END));
     server.enqueue(new MockResponse().setBody("def"));
 
     suppressTlsFallbackScsv(client.client());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
 
-    assertContent("abc", client.open(server.getUrl("/")));
-    assertContent("def", client.open(server.getUrl("/")));
+    assertContent("abc", client.open(server.url("/").url()));
+
+    // Give the server time to disconnect.
+    Thread.sleep(500);
+
+    assertContent("def", client.open(server.url("/").url()));
 
     Set<TlsVersion> tlsVersions =
         EnumSet.of(TlsVersion.TLS_1_0, TlsVersion.TLS_1_2); // v1.2 on OpenJDK 8.
@@ -658,7 +677,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse()); // unused
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     try {
       connection.getInputStream();
       fail();
@@ -698,15 +717,15 @@ private void testConnectViaProxy(ProxyConfig proxyConfig) throws Exception {
     server.enqueue(new MockResponse().setBody("abc\r\nYOU SHOULD NOT SEE THIS")
         .clearHeaders()
         .addHeader("Content-Length: 3"));
-    assertContent("abc", client.open(server.getUrl("/")));
+    assertContent("abc", client.open(server.url("/").url()));
   }
 
   @Test public void contentDisagreesWithContentLengthHeaderBodyTooShort() throws IOException {
     server.enqueue(new MockResponse().setBody("abc")
         .setHeader("Content-Length", "5")
-        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));
+        .setSocketPolicy(DISCONNECT_AT_END));
     try {
-      readAscii(client.open(server.getUrl("/")).getInputStream(), 5);
+      readAscii(client.open(server.url("/").url()).getInputStream(), 5);
       fail();
     } catch (ProtocolException expected) {
     }
@@ -733,7 +752,7 @@ public Socket createSocket(String host, int port, InetAddress localHost, int loc
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));
 
     client.client().setSocketFactory(uselessSocketFactory);
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -741,7 +760,7 @@ public Socket createSocket(String host, int port, InetAddress localHost, int loc
     }
 
     client.client().setSocketFactory(SocketFactory.getDefault());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals(200, connection.getResponseCode());
   }
 
@@ -764,7 +783,7 @@ public Socket createSocket(String host, int port, InetAddress localHost, int loc
 
     server.enqueue(mockResponse);
 
-    assertContent("abc", client.open(server.getUrl("/")));
+    assertContent("abc", client.open(server.url("/").url()));
   }
 
   @Test public void contentDisagreesWithChunkedHeaderBodyTooShort() throws IOException {
@@ -778,12 +797,12 @@ public Socket createSocket(String host, int port, InetAddress localHost, int loc
 
     mockResponse.clearHeaders();
     mockResponse.addHeader("Transfer-encoding: chunked");
-    mockResponse.setSocketPolicy(SocketPolicy.DISCONNECT_AT_END);
+    mockResponse.setSocketPolicy(DISCONNECT_AT_END);
 
     server.enqueue(mockResponse);
 
     try {
-      readAscii(client.open(server.getUrl("/")).getInputStream(), 5);
+      readAscii(client.open(server.url("/").url()).getInputStream(), 5);
       fail();
     } catch (ProtocolException expected) {
     }
@@ -802,7 +821,7 @@ private void testConnectViaDirectProxyToHttps(ProxyConfig proxyConfig) throws Ex
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse().setBody("this response comes via HTTPS"));
 
-    URL url = server.getUrl("/foo");
+    URL url = server.url("/foo").url();
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
     connection = proxyConfig.connect(server, client, url);
@@ -838,7 +857,7 @@ private void testConnectViaHttpProxyToHttps(ProxyConfig proxyConfig) throws Exce
 
     server.useHttps(sslContext.getSocketFactory(), true);
     server.enqueue(
-        new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
+        new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("this response comes via a secure proxy"));
 
     URL url = new URL("https://android.com/foo");
@@ -866,7 +885,7 @@ private void testConnectViaHttpProxyToHttps(ProxyConfig proxyConfig) throws Exce
     server.useHttps(sslContext.getSocketFactory(), true);
     // The inclusion of a body in the response to a CONNECT is key to reproducing b/6754912.
     MockResponse badProxyResponse = new MockResponse()
-        .setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END)
+        .setSocketPolicy(UPGRADE_TO_SSL_AT_END)
         .setBody("bogus proxy connect response content");
     server.enqueue(badProxyResponse);
     server.enqueue(new MockResponse().setBody("response"));
@@ -900,7 +919,7 @@ private void initResponseCache() throws IOException {
 
     server.useHttps(sslContext.getSocketFactory(), true);
     server.enqueue(
-        new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
+        new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("encrypted response from the origin server"));
 
     client.client().setProxy(server.toProxyAddress());
@@ -932,7 +951,7 @@ private void initResponseCache() throws IOException {
     server.enqueue(new MockResponse().setResponseCode(407)
         .addHeader("Proxy-Authenticate: Basic realm=\"localhost\""));
     server.enqueue(
-        new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
+        new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("A"));
 
     client.client().setProxy(server.toProxyAddress());
@@ -962,7 +981,7 @@ private void initResponseCache() throws IOException {
   @Test public void proxyWithConnectionClose() throws IOException {
     server.useHttps(sslContext.getSocketFactory(), true);
     server.enqueue(
-        new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
+        new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("this response comes via a proxy"));
 
     client.client().setProxy(server.toProxyAddress());
@@ -982,7 +1001,7 @@ private void initResponseCache() throws IOException {
 
     server.useHttps(socketFactory, true);
     server.enqueue(
-        new MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders());
+        new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("response 1"));
     server.enqueue(new MockResponse().setBody("response 2"));
 
@@ -1000,7 +1019,7 @@ private void initResponseCache() throws IOException {
         .throttleBody(2, 100, TimeUnit.MILLISECONDS)
         .setBody("ABCD"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals('A', (char) in.read());
     connection.disconnect();
@@ -1013,12 +1032,13 @@ private void initResponseCache() throws IOException {
       fail("Expected a connection closed exception");
     } catch (IOException expected) {
     }
+    in.close();
   }
 
   @Test public void disconnectBeforeConnect() throws IOException {
     server.enqueue(new MockResponse().setBody("A"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.disconnect();
     assertContent("A", connection);
     assertEquals(200, connection.getResponseCode());
@@ -1065,7 +1085,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
     server.enqueue(response);
     server.enqueue(response);
 
-    InputStream in = client.open(server.getUrl("/")).getInputStream();
+    InputStream in = client.open(server.url("/").url()).getInputStream();
     assertFalse("This implementation claims to support mark().", in.markSupported());
     in.mark(5);
     assertEquals("ABCDE", readAscii(in, 5));
@@ -1075,7 +1095,8 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
     } catch (IOException expected) {
     }
     assertEquals("FGHIJKLMNOPQRSTUVWXYZ", readAscii(in, Integer.MAX_VALUE));
-    assertContent("ABCDEFGHIJKLMNOPQRSTUVWXYZ", client.open(server.getUrl("/")));
+    in.close();
+    assertContent("ABCDEFGHIJKLMNOPQRSTUVWXYZ", client.open(server.url("/").url()));
   }
 
   /**
@@ -1091,13 +1112,14 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
     server.enqueue(response);
     server.enqueue(response);
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection conn = client.open(url);
 
     assertEquals(401, conn.getResponseCode());
     assertEquals(401, conn.getResponseCode());
     assertEquals(401, conn.getResponseCode());
     assertEquals(1, server.getRequestCount());
+    conn.getErrorStream().close();
   }
 
   @Test public void nonHexChunkSize() throws IOException {
@@ -1105,12 +1127,13 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .clearHeaders()
         .addHeader("Transfer-encoding: chunked"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     try {
       readAscii(connection.getInputStream(), Integer.MAX_VALUE);
       fail();
     } catch (IOException e) {
     }
+    connection.getInputStream().close();
   }
 
   @Test public void malformedChunkSize() throws IOException {
@@ -1118,11 +1141,13 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .clearHeaders()
         .addHeader("Transfer-encoding: chunked"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     try {
       readAscii(connection.getInputStream(), Integer.MAX_VALUE);
       fail();
     } catch (IOException e) {
+    } finally {
+      connection.getInputStream().close();
     }
   }
 
@@ -1131,7 +1156,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .clearHeaders()
         .addHeader("Transfer-encoding: chunked"));
 
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    HttpURLConnection connection = client.open(server.url("/").url());
     assertContent("ABCDE", connection);
   }
 
@@ -1141,11 +1166,13 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .addHeader("Transfer-encoding: chunked")
         .setSocketPolicy(DISCONNECT_AT_END));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     try {
       readAscii(connection.getInputStream(), Integer.MAX_VALUE);
       fail();
     } catch (IOException e) {
+    } finally {
+      connection.getInputStream().close();
     }
   }
 
@@ -1159,7 +1186,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .setBody(gzip("ABCABCABC"))
         .addHeader("Content-Encoding: gzip"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     assertEquals("ABCABCABC", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
     assertNull(connection.getContentEncoding());
     assertEquals(-1, connection.getContentLength());
@@ -1174,7 +1201,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .setBody(bodyBytes)
         .addHeader("Content-Encoding: gzip"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Accept-Encoding", "gzip");
     InputStream gunzippedIn = new GZIPInputStream(connection.getInputStream());
     assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ", readAscii(gunzippedIn, Integer.MAX_VALUE));
@@ -1203,7 +1230,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
   @Test public void clientConfiguredCustomContentEncoding() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE").addHeader("Content-Encoding: custom"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Accept-Encoding", "custom");
     assertEquals("ABCDE", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -1235,13 +1262,13 @@ private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferK
     transferKind.setBody(responseTwo, "two (identity)", 5);
     server.enqueue(responseTwo);
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     connection1.addRequestProperty("Accept-Encoding", "gzip");
     InputStream gunzippedIn = new GZIPInputStream(connection1.getInputStream());
     assertEquals("one (gzipped)", readAscii(gunzippedIn, Integer.MAX_VALUE));
     assertEquals(0, server.takeRequest().getSequenceNumber());
 
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     assertEquals("two (identity)", readAscii(connection2.getInputStream(), Integer.MAX_VALUE));
     assertEquals(1, server.takeRequest().getSequenceNumber());
   }
@@ -1255,10 +1282,13 @@ private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferK
         .setBody(gzip("b")));
 
     // Seed the pool with a bad connection.
-    assertContent("a", client.open(server.getUrl("/")));
+    assertContent("a", client.open(server.url("/").url()));
+
+    // Give the server time to disconnect.
+    Thread.sleep(500);
 
     // This connection will need to be recovered. When it is, transparent gzip should still work!
-    assertContent("b", client.open(server.getUrl("/")));
+    assertContent("b", client.open(server.url("/").url()));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(0, server.takeRequest().getSequenceNumber()); // Connection is not pooled.
@@ -1274,7 +1304,7 @@ private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferK
     pool.evictAll();
     client.client().setConnectionPool(pool);
 
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    HttpURLConnection connection = client.open(server.url("/").url());
     assertContent("{}", connection);
     assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());
   }
@@ -1296,13 +1326,13 @@ private void testEarlyDisconnectDoesntHarmPooling(TransferKind transferKind) thr
     transferKind.setBody(response2, "LMNOPQRSTUV", 1024);
     server.enqueue(response2);
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     InputStream in1 = connection1.getInputStream();
     assertEquals("ABCDE", readAscii(in1, 5));
     in1.close();
     connection1.disconnect();
 
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     InputStream in2 = connection2.getInputStream();
     assertEquals("LMNOP", readAscii(in2, 5));
     in2.close();
@@ -1320,7 +1350,7 @@ private void testEarlyDisconnectDoesntHarmPooling(TransferKind transferKind) thr
     server.enqueue(new MockResponse().setBody("A"));
 
     long startNanos = System.nanoTime();
-    URLConnection connection1 = client.open(server.getUrl("/"));
+    URLConnection connection1 = client.open(server.url("/").url());
     InputStream in = connection1.getInputStream();
     in.close();
     long elapsedNanos = System.nanoTime() - startNanos;
@@ -1332,7 +1362,7 @@ private void testEarlyDisconnectDoesntHarmPooling(TransferKind transferKind) thr
     assertTrue(String.format("Time to close: %sms", elapsedMillis), elapsedMillis < 500);
 
     // Do another request to confirm that the discarded connection was not pooled.
-    assertContent("A", client.open(server.getUrl("/")));
+    assertContent("A", client.open(server.url("/").url()));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(0, server.takeRequest().getSequenceNumber()); // Connection is not pooled.
@@ -1342,12 +1372,13 @@ private void testEarlyDisconnectDoesntHarmPooling(TransferKind transferKind) thr
     server.enqueue(new MockResponse());
 
     String body = "ABCDEFGHIJKLMNOPQ";
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setChunkedStreamingMode(0); // OkHttp does not honor specific chunk sizes.
     connection.setDoOutput(true);
     OutputStream outputStream = connection.getOutputStream();
     outputStream.write(body.getBytes("US-ASCII"));
     assertEquals(200, connection.getResponseCode());
+    connection.getInputStream().close();
 
     RecordedRequest request = server.takeRequest();
     assertEquals(body, request.getBody().readUtf8());
@@ -1369,7 +1400,7 @@ private void testAuthenticateWithStreamingPost(StreamingMode streamingMode) thro
     server.enqueue(pleaseAuthenticate);
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] requestBody = { 'A', 'B', 'C', 'D' };
     if (streamingMode == StreamingMode.FIXED_LENGTH) {
@@ -1428,7 +1459,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     String credential = Credentials.basic("jesse", "secret");
     client.client().setAuthenticator(new RecordingOkAuthenticator(credential));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     OutputStream outputStream = connection.getOutputStream();
     outputStream.write(body.getBytes("UTF-8"));
@@ -1469,7 +1500,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
   @Test public void allAttributesSetInServerAuthenticationCallbacks() throws Exception {
     List<String> calls = authCallsForHeader("WWW-Authenticate: Basic realm=\"Bar\"");
     assertEquals(1, calls.size());
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     String call = calls.get(0);
     assertTrue(call, call.contains("host=" + url.getHost()));
     assertTrue(call, call.contains("port=" + url.getPort()));
@@ -1484,7 +1515,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
   @Test public void allAttributesSetInProxyAuthenticationCallbacks() throws Exception {
     List<String> calls = authCallsForHeader("Proxy-Authenticate: Basic realm=\"Bar\"");
     assertEquals(1, calls.size());
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     String call = calls.get(0);
     assertTrue(call, call.contains("host=" + url.getHost()));
     assertTrue(call, call.contains("port=" + url.getPort()));
@@ -1501,7 +1532,8 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     int responseCode = proxy ? 407 : 401;
     RecordingAuthenticator authenticator = new RecordingAuthenticator(null);
     Authenticator.setDefault(authenticator);
-    MockResponse pleaseAuthenticate = new MockResponse().setResponseCode(responseCode)
+    MockResponse pleaseAuthenticate = new MockResponse()
+        .setResponseCode(responseCode)
         .addHeader(authHeader)
         .setBody("Please authenticate.");
     server.enqueue(pleaseAuthenticate);
@@ -1510,9 +1542,10 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
       client.client().setProxy(server.toProxyAddress());
       connection = client.open(new URL("http://android.com"));
     } else {
-      connection = client.open(server.getUrl("/"));
+      connection = client.open(server.url("/").url());
     }
     assertEquals(responseCode, connection.getResponseCode());
+    connection.getErrorStream().close();
     return authenticator.calls;
   }
 
@@ -1528,7 +1561,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
   }
 
   private void assertValidRequestMethod(String requestMethod) throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setRequestMethod(requestMethod);
     assertEquals(requestMethod, connection.getRequestMethod());
   }
@@ -1542,7 +1575,7 @@ private void assertValidRequestMethod(String requestMethod) throws Exception {
   }
 
   private void assertInvalidRequestMethod(String requestMethod) throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.setRequestMethod(requestMethod);
       fail();
@@ -1569,14 +1602,14 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
         .addHeader("Expires: Mon, 26 Jul 1997 05:00:00 GMT")
         .addHeader("icy-metaint:16000")
         .setBody("mp3 data"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals(200, connection.getResponseCode());
     assertEquals("OK", connection.getResponseMessage());
     assertContent("mp3 data", connection);
   }
 
   @Test public void cannotSetNegativeFixedLengthStreamingMode() throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.setFixedLengthStreamingMode(-2);
       fail();
@@ -1585,13 +1618,13 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
   }
 
   @Test public void canSetNegativeChunkedStreamingMode() throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setChunkedStreamingMode(-2);
   }
 
   @Test public void cannotSetFixedLengthStreamingModeAfterConnect() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
     try {
       connection.setFixedLengthStreamingMode(1);
@@ -1602,7 +1635,7 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
 
   @Test public void cannotSetChunkedStreamingModeAfterConnect() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
     try {
       connection.setChunkedStreamingMode(1);
@@ -1612,7 +1645,7 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
   }
 
   @Test public void cannotSetFixedLengthStreamingModeAfterChunkedStreamingMode() throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setChunkedStreamingMode(1);
     try {
       connection.setFixedLengthStreamingMode(1);
@@ -1622,7 +1655,7 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
   }
 
   @Test public void cannotSetChunkedStreamingModeAfterFixedLengthStreamingMode() throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setFixedLengthStreamingMode(1);
     try {
       connection.setChunkedStreamingMode(1);
@@ -1649,7 +1682,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
 
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] requestBody = { 'A', 'B', 'C', 'D' };
     if (streamingMode == StreamingMode.FIXED_LENGTH) {
@@ -1688,7 +1721,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] requestBody = { 'A', 'B', 'C', 'D' };
     OutputStream outputStream = connection.getOutputStream();
@@ -1722,7 +1755,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
     // no authorization header for the first request...
@@ -1754,7 +1787,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(successfulResponse);
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
     // no authorization header for the first request...
@@ -1778,7 +1811,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
 
@@ -1801,7 +1834,7 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
     server.enqueue(response);
     server.enqueue(new MockResponse().setBody("This is the new location!"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     assertEquals("This is the new location!",
         readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -1823,7 +1856,7 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
 
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("This is the new location!",
         readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -1843,7 +1876,7 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
     client.client().setFollowSslRedirects(false);
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("This page has moved!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
 
@@ -1853,7 +1886,7 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
         .setBody("This page has moved!"));
 
     client.client().setFollowSslRedirects(false);
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("This page has moved!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
 
@@ -1862,13 +1895,13 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
 
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)
-        .addHeader("Location: " + server2.getUrl("/"))
+        .addHeader("Location: " + server2.url("/").url())
         .setBody("This page has moved!"));
 
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
     client.client().setFollowSslRedirects(true);
-    HttpsURLConnection connection = (HttpsURLConnection) client.open(server.getUrl("/"));
+    HttpsURLConnection connection = (HttpsURLConnection) client.open(server.url("/").url());
     assertContent("This is insecure HTTP!", connection);
     assertNull(connection.getCipherSuite());
     assertNull(connection.getLocalCertificates());
@@ -1882,13 +1915,13 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
     server2.enqueue(new MockResponse().setBody("This is secure HTTPS!"));
 
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)
-        .addHeader("Location: " + server2.getUrl("/"))
+        .addHeader("Location: " + server2.url("/").url())
         .setBody("This page has moved!"));
 
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(new RecordingHostnameVerifier());
     client.client().setFollowSslRedirects(true);
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertContent("This is secure HTTPS!", connection);
     assertFalse(connection instanceof HttpsURLConnection);
   }
@@ -1914,17 +1947,17 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
     server2.enqueue(new MockResponse().setBody("This is the 2nd server, again!"));
 
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)
-        .addHeader("Location: " + server2.getUrl("/").toString())
+        .addHeader("Location: " + server2.url("/").url().toString())
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("This is the first server again!"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertContent("This is the 2nd server!", connection);
-    assertEquals(server2.getUrl("/"), connection.getURL());
+    assertEquals(server2.url("/").url(), connection.getURL());
 
     // make sure the first server was careful to recycle the connection
-    assertContent("This is the first server again!", client.open(server.getUrl("/")));
-    assertContent("This is the 2nd server, again!", client.open(server2.getUrl("/")));
+    assertContent("This is the first server again!", client.open(server.url("/").url()));
+    assertContent("This is the 2nd server, again!", client.open(server2.url("/").url()));
 
     String server1Host = server.getHostName() + ":" + server.getPort();
     String server2Host = server2.getHostName() + ":" + server2.getPort();
@@ -1953,12 +1986,12 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
     server2.enqueue(new MockResponse().setBody("This is the 2nd server!"));
 
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)
-        .addHeader("Location: " + server2.getUrl("/b").toString())
+        .addHeader("Location: " + server2.url("/b").url().toString())
         .setBody("This page has moved!"));
 
-    assertContent("This is the 2nd server!", client.open(server.getUrl("/a")));
+    assertContent("This is the 2nd server!", client.open(server.url("/a").url()));
 
-    assertEquals(Arrays.asList(server.getUrl("/").toURI(), server2.getUrl("/").toURI()),
+    assertEquals(Arrays.asList(server.url("/").url().toURI(), server2.url("/").url().toURI()),
         proxySelectionRequests);
   }
 
@@ -1967,11 +2000,11 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
 
     server.enqueue(new MockResponse().setResponseCode(401));
     server.enqueue(new MockResponse().setResponseCode(302)
-        .addHeader("Location: " + server2.getUrl("/b")));
+        .addHeader("Location: " + server2.url("/b").url()));
 
     client.client().setAuthenticator(
         new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")));
-    assertContent("Page 2", client.open(server.getUrl("/a")));
+    assertContent("Page 2", client.open(server.url("/a").url()));
 
     RecordedRequest redirectRequest = server2.takeRequest();
     assertNull(redirectRequest.getHeader("Authorization"));
@@ -2010,7 +2043,7 @@ private void testResponseRedirectedWithPost(int redirectCode, TransferKind trans
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("Page 2"));
 
-    connection = client.open(server.getUrl("/page1"));
+    connection = client.open(server.url("/page1").url());
     connection.setDoOutput(true);
     transferKind.setForRequest(connection, 4);
     byte[] requestBody = { 'A', 'B', 'C', 'D' };
@@ -2033,7 +2066,7 @@ private void testResponseRedirectedWithPost(int redirectCode, TransferKind trans
         .addHeader("Location: /page2"));
     server.enqueue(new MockResponse().setBody("Page 2"));
 
-    connection = client.open(server.getUrl("/page1"));
+    connection = client.open(server.url("/page1").url());
     connection.setDoOutput(true);
     connection.addRequestProperty("Content-Length", "4");
     connection.addRequestProperty("Content-Type", "text/plain; charset=utf-8");
@@ -2054,11 +2087,11 @@ private void testResponseRedirectedWithPost(int redirectCode, TransferKind trans
 
   @Test public void response305UseProxy() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_USE_PROXY)
-        .addHeader("Location: " + server.getUrl("/"))
+        .addHeader("Location: " + server.url("/").url())
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("Proxy Response"));
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     // Fails on the RI, which gets "Proxy Response"
     assertEquals("This page has moved!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -2109,7 +2142,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     server.enqueue(response1);
     server.enqueue(new MockResponse().setBody("Page 2"));
 
-    connection = client.open(server.getUrl("/page1"));
+    connection = client.open(server.url("/page1").url());
     connection.setRequestMethod(method);
     byte[] requestBody = { 'A', 'B', 'C', 'D' };
     if (method.equals("POST")) {
@@ -2154,9 +2187,9 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     }
     server.enqueue(new MockResponse().setBody("Success!"));
 
-    connection = client.open(server.getUrl("/0"));
+    connection = client.open(server.url("/0").url());
     assertContent("Success!", connection);
-    assertEquals(server.getUrl("/20"), connection.getURL());
+    assertEquals(server.url("/20").url(), connection.getURL());
   }
 
   @Test public void doesNotFollow21Redirects() throws Exception {
@@ -2166,7 +2199,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
           .setBody("Redirecting to /" + (i + 1)));
     }
 
-    connection = client.open(server.getUrl("/0"));
+    connection = client.open(server.url("/0").url());
     try {
       connection.getInputStream();
       fail();
@@ -2174,7 +2207,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
       assertEquals(HttpURLConnection.HTTP_MOVED_TEMP, connection.getResponseCode());
       assertEquals("Too many follow-up requests: 21", expected.getMessage());
       assertContent("Redirecting to /21", connection);
-      assertEquals(server.getUrl("/20"), connection.getURL());
+      assertEquals(server.url("/20").url(), connection.getURL());
     }
   }
 
@@ -2191,7 +2224,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     server.enqueue(new MockResponse().setBody("DEF"));
     server.enqueue(new MockResponse().setBody("GHI"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertContent("ABC", client.open(url));
     assertContent("DEF", client.open(url));
     assertContent("GHI", client.open(url));
@@ -2211,7 +2244,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     server.enqueue(timeout);
     server.enqueue(new MockResponse().setBody("unused")); // to keep the server alive
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     connection.setReadTimeout(1000);
     InputStream in = connection.getInputStream();
     assertEquals('A', in.read());
@@ -2222,6 +2255,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
       fail();
     } catch (SocketTimeoutException expected) {
     }
+    in.close();
   }
 
   /** Confirm that an unacknowledged write times out. */
@@ -2253,7 +2287,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
         .throttleBody(1, 1, TimeUnit.SECONDS)); // Prevent the server from reading!
 
     client.client().setWriteTimeout(500, TimeUnit.MILLISECONDS);
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     connection.setChunkedStreamingMode(0);
     OutputStream out = connection.getOutputStream();
@@ -2268,7 +2302,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
   @Test public void setChunkedEncodingAsRequestProperty() throws IOException, InterruptedException {
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setRequestProperty("Transfer-encoding", "chunked");
     connection.setDoOutput(true);
     connection.getOutputStream().write("ABC".getBytes("UTF-8"));
@@ -2282,11 +2316,11 @@ protected Socket configureSocket(Socket socket) throws IOException {
     server.enqueue(new MockResponse()); // server doesn't honor the connection: close header!
     server.enqueue(new MockResponse());
 
-    HttpURLConnection a = client.open(server.getUrl("/"));
+    HttpURLConnection a = client.open(server.url("/").url());
     a.setRequestProperty("Connection", "close");
     assertEquals(200, a.getResponseCode());
 
-    HttpURLConnection b = client.open(server.getUrl("/"));
+    HttpURLConnection b = client.open(server.url("/").url());
     assertEquals(200, b.getResponseCode());
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -2298,10 +2332,10 @@ protected Socket configureSocket(Socket socket) throws IOException {
     server.enqueue(new MockResponse().addHeader("Connection: close"));
     server.enqueue(new MockResponse());
 
-    HttpURLConnection a = client.open(server.getUrl("/"));
+    HttpURLConnection a = client.open(server.url("/").url());
     assertEquals(200, a.getResponseCode());
 
-    HttpURLConnection b = client.open(server.getUrl("/"));
+    HttpURLConnection b = client.open(server.url("/").url());
     assertEquals(200, b.getResponseCode());
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -2316,7 +2350,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
     server.enqueue(response);
     server.enqueue(new MockResponse().setBody("This is the new location!"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     assertEquals("This is the new location!",
         readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -2335,7 +2369,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
         .addHeader("Location: /foo"));
     server.enqueue(new MockResponse().setBody("This is the new page!"));
 
-    assertContent("This is the new page!", client.open(server.getUrl("/")));
+    assertContent("This is the new page!", client.open(server.url("/").url()));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -2345,7 +2379,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NO_CONTENT)
         .setBody("This body is not allowed!"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     assertEquals("This body is not allowed!",
         readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
@@ -2353,7 +2387,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
   @Test public void singleByteReadIsSigned() throws IOException {
     server.enqueue(new MockResponse().setBody(new Buffer().writeByte(-2).writeByte(-1)));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals(254, in.read());
     assertEquals(255, in.read());
@@ -2380,7 +2414,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
   private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws IOException {
     server.enqueue(new MockResponse().setBody("abc"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] upload = "def".getBytes("UTF-8");
 
@@ -2405,7 +2439,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
   @Test public void getHeadersThrows() throws IOException {
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AT_START));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getInputStream();
       fail();
@@ -2441,13 +2475,13 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
     server.enqueue(new MockResponse().setBody("ABC"));
 
     // The request should work once and then fail
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     connection1.setReadTimeout(100);
     InputStream input = connection1.getInputStream();
     assertEquals("ABC", readAscii(input, Integer.MAX_VALUE));
     server.shutdown();
     try {
-      HttpURLConnection connection2 = client.open(server.getUrl(""));
+      HttpURLConnection connection2 = client.open(server.url("").url());
       connection2.setReadTimeout(100);
       connection2.getInputStream();
       fail();
@@ -2460,9 +2494,9 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
     server.enqueue(new MockResponse().setBody("ABC")
         .clearHeaders()
         .addHeader("Connection: close")
-        .setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));
+        .setSocketPolicy(DISCONNECT_AT_END));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals("ABC", readAscii(in, 3));
     assertEquals(-1, in.read());
@@ -2471,14 +2505,14 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
 
   @Test public void getContent() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Type: text/plain").setBody("A"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     InputStream in = (InputStream) connection.getContent();
     assertEquals("A", readAscii(in, Integer.MAX_VALUE));
   }
 
   @Test public void getContentOfType() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Type: text/plain").setBody("A"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getContent(null);
       fail();
@@ -2490,21 +2524,23 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
     } catch (NullPointerException expected) {
     }
     assertNull(connection.getContent(new Class[] { getClass() }));
+    connection.getInputStream().close();
   }
 
   @Test public void getOutputStreamOnGetFails() throws Exception {
     server.enqueue(new MockResponse());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getOutputStream();
       fail();
     } catch (ProtocolException expected) {
     }
+    connection.getInputStream().close();
   }
 
   @Test public void getOutputAfterGetInputStreamFails() throws Exception {
     server.enqueue(new MockResponse());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     try {
       connection.getInputStream();
@@ -2516,7 +2552,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
 
   @Test public void setDoOutputOrDoInputAfterConnectFails() throws Exception {
     server.enqueue(new MockResponse());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.connect();
     try {
       connection.setDoOutput(true);
@@ -2528,11 +2564,12 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
       fail();
     } catch (IllegalStateException expected) {
     }
+    connection.getInputStream().close();
   }
 
   @Test public void clientSendsContentLength() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     OutputStream out = connection.getOutputStream();
     out.write(new byte[] { 'A', 'B', 'C' });
@@ -2540,24 +2577,28 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
     assertEquals("A", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
     RecordedRequest request = server.takeRequest();
     assertEquals("3", request.getHeader("Content-Length"));
+    connection.getInputStream().close();
   }
 
   @Test public void getContentLengthConnects() throws Exception {
     server.enqueue(new MockResponse().setBody("ABC"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals(3, connection.getContentLength());
+    connection.getInputStream().close();
   }
 
   @Test public void getContentTypeConnects() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Type: text/plain").setBody("ABC"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("text/plain", connection.getContentType());
+    connection.getInputStream().close();
   }
 
   @Test public void getContentEncodingConnects() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Encoding: identity").setBody("ABC"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("identity", connection.getContentEncoding());
+    connection.getInputStream().close();
   }
 
   // http://b/4361656
@@ -2571,7 +2612,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
   }
 
   @Test public void doOutputForMethodThatDoesntSupportOutput() throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setRequestMethod("HEAD");
     connection.setDoOutput(true);
     try {
@@ -2599,7 +2640,7 @@ private void testInputStreamAvailable(TransferKind transferKind) throws IOExcept
     MockResponse response = new MockResponse();
     transferKind.setBody(response, body, 4);
     server.enqueue(response);
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     for (int i = 0; i < body.length(); i++) {
       assertTrue(in.available() >= 0);
@@ -2639,7 +2680,10 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     server.enqueue(new MockResponse().setBody("B"));
     server.enqueue(new MockResponse().setBody("C"));
 
-    assertContent("A", client.open(server.getUrl("/a")));
+    assertContent("A", client.open(server.url("/a").url()));
+
+    // Give the server time to disconnect.
+    Thread.sleep(500);
 
     // If the request body is larger than OkHttp's replay buffer, the failure may still occur.
     byte[] requestBody = new byte[requestSize];
@@ -2647,7 +2691,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
     for (int j = 0; j < 2; j++) {
       try {
-        connection = client.open(server.getUrl("/b"));
+        connection = client.open(server.url("/b").url());
         connection.setRequestMethod("POST");
         transferKind.setForRequest(connection, requestBody.length);
         for (int i = 0; i < requestBody.length; i += 1024) {
@@ -2673,15 +2717,15 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
   @Test public void postBodyRetransmittedOnFailureRecovery() throws Exception {
     server.enqueue(new MockResponse().setBody("abc"));
-    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));
+    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
     server.enqueue(new MockResponse().setBody("def"));
 
     // Seed the connection pool so we have something that can fail.
-    assertContent("abc", client.open(server.getUrl("/")));
+    assertContent("abc", client.open(server.url("/").url()));
 
-    HttpURLConnection post = client.open(server.getUrl("/"));
+    HttpURLConnection post = client.open(server.url("/").url());
     post.setDoOutput(true);
-    post.getOutputStream().write("body!".getBytes(Util.UTF_8));
+    post.getOutputStream().write("body!".getBytes(UTF_8));
     assertContent("def", post);
 
     RecordedRequest get = server.takeRequest();
@@ -2699,7 +2743,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
   @Test public void fullyBufferedPostIsTooShort() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
 
-    connection = client.open(server.getUrl("/b"));
+    connection = client.open(server.url("/b").url());
     connection.setRequestProperty("Content-Length", "4");
     connection.setRequestMethod("POST");
     OutputStream out = connection.getOutputStream();
@@ -2716,7 +2760,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
   @Test public void fullyBufferedPostIsTooLong() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
 
-    connection = client.open(server.getUrl("/b"));
+    connection = client.open(server.url("/b").url());
     connection.setRequestProperty("Content-Length", "3");
     connection.setRequestMethod("POST");
     OutputStream out = connection.getOutputStream();
@@ -2757,7 +2801,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
   @Test public void emptyRequestHeaderValueIsAllowed() throws Exception {
     server.enqueue(new MockResponse().setBody("body"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.addRequestProperty("B", "");
     assertContent("body", connection);
     assertEquals("", connection.getRequestProperty("B"));
@@ -2765,14 +2809,14 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
   @Test public void emptyResponseHeaderValueIsAllowed() throws Exception {
     server.enqueue(new MockResponse().addHeader("A:").setBody("body"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertContent("body", connection);
     assertEquals("", connection.getHeaderField("A"));
   }
 
   @Test public void emptyRequestHeaderNameIsStrict() throws Exception {
     server.enqueue(new MockResponse().setBody("body"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.setRequestProperty("", "A");
       fail();
@@ -2784,13 +2828,14 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     Headers.Builder headers = new Headers.Builder();
     Internal.instance.addLenient(headers, ":A");
     server.enqueue(new MockResponse().setHeaders(headers.build()).setBody("body"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.getResponseCode();
     assertEquals("A", connection.getHeaderField(""));
+    connection.getInputStream().close();
   }
 
   @Test public void requestHeaderValidationIsStrict() throws Exception {
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.addRequestProperty("a\tb", "Value");
       fail();
@@ -2827,7 +2872,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
         .build();
     server.enqueue(new MockResponse().setHeaders(headers));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.getResponseCode();
     assertEquals("c\u007fd", connection.getHeaderField("a\tb"));
     assertEquals("\u2615\ufe0f", connection.getHeaderField("\ud83c\udf69"));
@@ -2856,14 +2901,14 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     String credential = Credentials.basic("jesse", "peanutbutter");
     RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(credential);
     client.client().setAuthenticator(authenticator);
-    assertContent("A", client.open(server.getUrl("/private")));
+    assertContent("A", client.open(server.url("/private").url()));
 
     assertNull(server.takeRequest().getHeader("Authorization"));
     assertEquals(credential, server.takeRequest().getHeader("Authorization"));
 
     assertEquals(Proxy.NO_PROXY, authenticator.onlyProxy());
     Response response = authenticator.onlyResponse();
-    assertEquals("/private", response.request().url().getPath());
+    assertEquals("/private", response.request().url().url().getPath());
     assertEquals(Arrays.asList(new Challenge("Basic", "protected area")), response.challenges());
   }
 
@@ -2876,13 +2921,13 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
     RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator("oauthed abc123");
     client.client().setAuthenticator(authenticator);
-    assertContent("A", client.open(server.getUrl("/private")));
+    assertContent("A", client.open(server.url("/private").url()));
 
     assertNull(server.takeRequest().getHeader("Authorization"));
     assertEquals("oauthed abc123", server.takeRequest().getHeader("Authorization"));
 
     Response response = authenticator.onlyResponse();
-    assertEquals("/private", response.request().url().getPath());
+    assertEquals("/private", response.request().url().url().getPath());
     assertEquals(Arrays.asList(new Challenge("Bearer", "oauthed")), response.challenges());
   }
 
@@ -2898,13 +2943,13 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(
         Credentials.basic("jesse", "peanutbutter"));
     client.client().setAuthenticator(authenticator);
-    assertContent("c", client.open(server.getUrl("/a")));
+    assertContent("c", client.open(server.url("/a").url()));
 
     Response challengeResponse = authenticator.responses.get(0);
-    assertEquals("/b", challengeResponse.request().url().getPath());
+    assertEquals("/b", challengeResponse.request().url().url().getPath());
 
     Response redirectedBy = challengeResponse.priorResponse();
-    assertEquals("/a", redirectedBy.request().url().getPath());
+    assertEquals("/a", redirectedBy.request().url().url().getPath());
   }
 
   @Test public void attemptAuthorization20Times() throws Exception {
@@ -2916,7 +2961,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     String credential = Credentials.basic("jesse", "peanutbutter");
     client.client().setAuthenticator(new RecordingOkAuthenticator(credential));
 
-    connection = client.open(server.getUrl("/0"));
+    connection = client.open(server.url("/0").url());
     assertContent("Success!", connection);
   }
 
@@ -2928,7 +2973,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     String credential = Credentials.basic("jesse", "peanutbutter");
     client.client().setAuthenticator(new RecordingOkAuthenticator(credential));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     try {
       connection.getInputStream();
       fail();
@@ -2950,7 +2995,7 @@ private void setsNegotiatedProtocolHeader(Protocol protocol) throws IOException
     enableProtocol(protocol);
     server.enqueue(new MockResponse().setBody("A"));
     client.client().setProtocols(Arrays.asList(protocol, Protocol.HTTP_1_1));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);
     assertEquals(Arrays.asList(protocol.toString()), protocolValues);
     assertContent("A", connection);
@@ -2958,14 +3003,14 @@ private void setsNegotiatedProtocolHeader(Protocol protocol) throws IOException
 
   @Test public void http10SelectedProtocol() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTTP/1.0 200 OK"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);
     assertEquals(Arrays.asList("http/1.0"), protocolValues);
   }
 
   @Test public void http11SelectedProtocol() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);
     assertEquals(Arrays.asList("http/1.1"), protocolValues);
   }
@@ -3003,7 +3048,7 @@ private void setsNegotiatedProtocolHeader(Protocol protocol) throws IOException
   private void zeroLengthPayload(String method)
       throws IOException, InterruptedException {
     server.enqueue(new MockResponse());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setRequestProperty("Content-Length", "0");
     connection.setRequestMethod(method);
     connection.setFixedLengthStreamingMode(0);
@@ -3018,7 +3063,7 @@ private void zeroLengthPayload(String method)
   @Test public void unspecifiedRequestBodyContentTypeGetsDefault() throws Exception {
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     connection.getOutputStream().write("abc".getBytes(UTF_8));
     assertEquals(200, connection.getResponseCode());
@@ -3032,7 +3077,7 @@ private void zeroLengthPayload(String method)
   @Test public void setProtocols() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
     client.client().setProtocols(Arrays.asList(Protocol.HTTP_1_1));
-    assertContent("A", client.open(server.getUrl("/")));
+    assertContent("A", client.open(server.url("/").url()));
   }
 
   @Test public void setProtocolsWithoutHttp11() throws Exception {
@@ -3055,7 +3100,7 @@ private void zeroLengthPayload(String method)
     server.setBodyLimit(0);
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     long contentLength = Integer.MAX_VALUE + 1L;
     connection.setFixedLengthStreamingMode(contentLength);
@@ -3085,11 +3130,11 @@ private void zeroLengthPayload(String method)
         .addHeader("Content-Encoding: gzip"));
     server.enqueue(new MockResponse().setBody("b"));
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection1.getResponseCode());
     assertContent("", connection1);
 
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());
     assertContent("b", connection2);
 
@@ -3112,7 +3157,7 @@ private void zeroLengthPayload(String method)
         .setBody(gzip("Moved! Moved! Moved!")));
     server.enqueue(new MockResponse().setBody("This is the new page!"));
 
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    HttpURLConnection connection = client.open(server.url("/").url());
     assertContent("This is the new page!", connection);
 
     RecordedRequest requestA = server.takeRequest();
@@ -3129,7 +3174,7 @@ private void zeroLengthPayload(String method)
   @Test public void bodyPermittedOnDelete() throws Exception {
     server.enqueue(new MockResponse());
 
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    HttpURLConnection connection = client.open(server.url("/").url());
     connection.setRequestMethod("DELETE");
     connection.setDoOutput(true);
     connection.getOutputStream().write("BODY".getBytes(UTF_8));
@@ -3144,7 +3189,7 @@ private void zeroLengthPayload(String method)
     server.enqueue(new MockResponse().setBody("abc"));
 
     System.setProperty("http.agent", "foo");
-    assertContent("abc", client.open(server.getUrl("/")));
+    assertContent("abc", client.open(server.url("/").url()));
 
     RecordedRequest request = server.takeRequest();
     assertEquals("foo", request.getHeader("User-Agent"));
@@ -3155,7 +3200,7 @@ private void zeroLengthPayload(String method)
     server.enqueue(new MockResponse().setBody("abc"));
 
     System.setProperty("http.agent", "a\nb\ud83c\udf69c\ud83c\udf68d\u007fe");
-    assertContent("abc", client.open(server.getUrl("/")));
+    assertContent("abc", client.open(server.url("/").url()));
 
     RecordedRequest request = server.takeRequest();
     assertEquals("a?b?c?d?e", request.getHeader("User-Agent"));
@@ -3164,7 +3209,7 @@ private void zeroLengthPayload(String method)
   @Test public void userAgentDefaultsToOkHttpVersion() throws Exception {
     server.enqueue(new MockResponse().setBody("abc"));
 
-    assertContent("abc", client.open(server.getUrl("/")));
+    assertContent("abc", client.open(server.url("/").url()));
 
     RecordedRequest request = server.takeRequest();
     assertEquals(Version.userAgent(), request.getHeader("User-Agent"));
@@ -3180,7 +3225,7 @@ private void zeroLengthPayload(String method)
     client.client().networkInterceptors().add(interceptor);
 
     server.enqueue(new MockResponse().setBody("abc"));
-    assertContent("abc", client.open(server.getUrl("/")));
+    assertContent("abc", client.open(server.url("/").url()));
   }
 
   @Test public void urlWithSpaceInHost() throws Exception {
@@ -3219,7 +3264,7 @@ private void zeroLengthPayload(String method)
     server.enqueue(new MockResponse().setResponseCode(302)
         .addHeaderLenient("Location", redirectUrl));
 
-    HttpURLConnection urlConnection = client.open(server.getUrl("/"));
+    HttpURLConnection urlConnection = client.open(server.url("/").url());
     assertEquals(302, urlConnection.getResponseCode());
     assertEquals(redirectUrl, urlConnection.getHeaderField("Location"));
   }
@@ -3420,7 +3465,7 @@ private void enableProtocol(Protocol protocol) {
   /**
    * Used during tests that involve TLS connection fallback attempts. OkHttp includes the
    * TLS_FALLBACK_SCSV cipher on fallback connections. See
-   * {@link com.squareup.okhttp.FallbackTestClientSocketFactory} for details.
+   * {@link FallbackTestClientSocketFactory} for details.
    */
   private void suppressTlsFallbackScsv(OkHttpClient client) {
     FallbackTestClientSocketFactory clientSocketFactory =
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/UrlComponentEncodingTester.java b/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/UrlComponentEncodingTester.java
rename to okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java
index 22502eb1be..65b80e149f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/UrlComponentEncodingTester.java
+++ b/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.net.URI;
 import java.net.URL;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformUrlTest.java b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java
similarity index 98%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformUrlTest.java
rename to okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java
index 2c619c233a..a6205e9f8f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformUrlTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTest.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformUrlTestData.java b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTestData.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformUrlTestData.java
rename to okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTestData.java
index 2ea36939aa..881811139d 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/WebPlatformUrlTestData.java
+++ b/okhttp-tests/src/test/java/okhttp3/WebPlatformUrlTestData.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.EOFException;
 import java.io.IOException;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ConnectionSpecSelectorTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ConnectionSpecSelectorTest.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/ConnectionSpecSelectorTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/ConnectionSpecSelectorTest.java
index c94cc23213..e01ffdb8de 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ConnectionSpecSelectorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ConnectionSpecSelectorTest.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.ConnectionSpec;
-import com.squareup.okhttp.TlsVersion;
+import okhttp3.ConnectionSpec;
+import okhttp3.TlsVersion;
 import java.io.IOException;
 import java.security.cert.CertificateException;
 import java.util.Arrays;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java
index c996d202dd..1895bb38f4 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/DiskLruCacheTest.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.internal.io.FileSystem;
+import okhttp3.internal.io.FileSystem;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayDeque;
@@ -37,10 +37,10 @@
 import org.junit.rules.TemporaryFolder;
 import org.junit.rules.Timeout;
 
-import static com.squareup.okhttp.internal.DiskLruCache.JOURNAL_FILE;
-import static com.squareup.okhttp.internal.DiskLruCache.JOURNAL_FILE_BACKUP;
-import static com.squareup.okhttp.internal.DiskLruCache.MAGIC;
-import static com.squareup.okhttp.internal.DiskLruCache.VERSION_1;
+import static okhttp3.internal.DiskLruCache.JOURNAL_FILE;
+import static okhttp3.internal.DiskLruCache.JOURNAL_FILE_BACKUP;
+import static okhttp3.internal.DiskLruCache.MAGIC;
+import static okhttp3.internal.DiskLruCache.VERSION_1;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DoubleInetAddressDns.java b/okhttp-tests/src/test/java/okhttp3/internal/DoubleInetAddressDns.java
similarity index 94%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/DoubleInetAddressDns.java
rename to okhttp-tests/src/test/java/okhttp3/internal/DoubleInetAddressDns.java
index 759ac5dfa2..929eccffc7 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DoubleInetAddressDns.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/DoubleInetAddressDns.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.Dns;
+import okhttp3.Dns;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.Arrays;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/FaultyFileSystem.java b/okhttp-tests/src/test/java/okhttp3/internal/FaultyFileSystem.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/FaultyFileSystem.java
rename to okhttp-tests/src/test/java/okhttp3/internal/FaultyFileSystem.java
index 537f361c38..4eb260bdbe 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/FaultyFileSystem.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/FaultyFileSystem.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.internal.io.FileSystem;
+import okhttp3.internal.io.FileSystem;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/OptionalMethodTest.java b/okhttp-tests/src/test/java/okhttp3/internal/OptionalMethodTest.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/OptionalMethodTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/OptionalMethodTest.java
index 3e129a2353..aa4a0a4cce 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/OptionalMethodTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/OptionalMethodTest.java
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
 import org.junit.Test;
 
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingAuthenticator.java b/okhttp-tests/src/test/java/okhttp3/internal/RecordingAuthenticator.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingAuthenticator.java
rename to okhttp-tests/src/test/java/okhttp3/internal/RecordingAuthenticator.java
index 292875bff6..aeb34f742f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingAuthenticator.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/RecordingAuthenticator.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
 import java.net.Authenticator;
 import java.net.PasswordAuthentication;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java b/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
similarity index 71%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java
rename to okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
index f5b3617d9d..7d9d2bfe6a 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
@@ -13,14 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.Authenticator;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import java.io.IOException;
 import java.net.Proxy;
 import java.util.ArrayList;
 import java.util.List;
+import okhttp3.Authenticator;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.Route;
 
 public final class RecordingOkAuthenticator implements Authenticator {
   public final List<Response> responses = new ArrayList<>();
@@ -41,19 +43,12 @@ public Proxy onlyProxy() {
     return proxies.get(0);
   }
 
-  @Override public Request authenticate(Proxy proxy, Response response) {
+  @Override public Request authenticate(Route route, Response response) throws IOException {
     responses.add(response);
-    proxies.add(proxy);
+    proxies.add(route.proxy());
+    String header = response.code() == 407 ? "Proxy-Authorization" : "Authorization";
     return response.request().newBuilder()
-        .addHeader("Authorization", credential)
-        .build();
-  }
-
-  @Override public Request authenticateProxy(Proxy proxy, Response response) {
-    responses.add(response);
-    proxies.add(proxy);
-    return response.request().newBuilder()
-        .addHeader("Proxy-Authorization", credential)
+        .addHeader(header, credential)
         .build();
   }
 }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/SingleInetAddressDns.java b/okhttp-tests/src/test/java/okhttp3/internal/SingleInetAddressDns.java
similarity index 94%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/SingleInetAddressDns.java
rename to okhttp-tests/src/test/java/okhttp3/internal/SingleInetAddressDns.java
index 43cbe63332..225fee9e6f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/SingleInetAddressDns.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/SingleInetAddressDns.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.Dns;
+import okhttp3.Dns;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.Collections;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/BaseTestHandler.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/BaseTestHandler.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/BaseTestHandler.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/BaseTestHandler.java
index 252b4c7f54..d619feff7c 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/BaseTestHandler.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/BaseTestHandler.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.IOException;
 import java.util.List;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HpackTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HpackTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java
index aacddaba95..70c10ec25f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HpackTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HpackTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -23,7 +23,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static com.squareup.okhttp.TestUtil.headerEntries;
+import static okhttp3.TestUtil.headerEntries;
 import static okio.ByteString.decodeHex;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2ConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java
similarity index 92%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2ConnectionTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java
index 1e00b4be44..fb2e3509ae 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2ConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2ConnectionTest.java
@@ -13,9 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.internal.Util;
 import java.io.IOException;
 import java.net.Socket;
 import java.util.ArrayList;
@@ -30,18 +29,23 @@
 import org.junit.After;
 import org.junit.Test;
 
-import static com.squareup.okhttp.TestUtil.headerEntries;
-import static com.squareup.okhttp.TestUtil.repeat;
-import static com.squareup.okhttp.internal.framed.ErrorCode.CANCEL;
-import static com.squareup.okhttp.internal.framed.ErrorCode.PROTOCOL_ERROR;
-import static com.squareup.okhttp.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
-import static com.squareup.okhttp.internal.framed.Settings.PERSIST_VALUE;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_DATA;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_HEADERS;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_PING;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_RST_STREAM;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_SETTINGS;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_WINDOW_UPDATE;
+import static okhttp3.TestUtil.headerEntries;
+import static okhttp3.TestUtil.repeat;
+import static okhttp3.internal.Util.EMPTY_BYTE_ARRAY;
+import static okhttp3.internal.framed.ErrorCode.CANCEL;
+import static okhttp3.internal.framed.ErrorCode.PROTOCOL_ERROR;
+import static okhttp3.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
+import static okhttp3.internal.framed.Settings.ENABLE_PUSH;
+import static okhttp3.internal.framed.Settings.HEADER_TABLE_SIZE;
+import static okhttp3.internal.framed.Settings.INITIAL_WINDOW_SIZE;
+import static okhttp3.internal.framed.Settings.MAX_FRAME_SIZE;
+import static okhttp3.internal.framed.Settings.PERSIST_VALUE;
+import static okhttp3.internal.framed.Spdy3.TYPE_DATA;
+import static okhttp3.internal.framed.Spdy3.TYPE_HEADERS;
+import static okhttp3.internal.framed.Spdy3.TYPE_PING;
+import static okhttp3.internal.framed.Spdy3.TYPE_RST_STREAM;
+import static okhttp3.internal.framed.Spdy3.TYPE_SETTINGS;
+import static okhttp3.internal.framed.Spdy3.TYPE_WINDOW_UPDATE;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -101,9 +105,9 @@
     peer.setVariantAndClient(HTTP_2, false);
 
     Settings initial = new Settings();
-    initial.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, 1684);
+    initial.set(INITIAL_WINDOW_SIZE, PERSIST_VALUE, 1684);
     Settings shouldntImpactConnection = new Settings();
-    shouldntImpactConnection.set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, 3368);
+    shouldntImpactConnection.set(INITIAL_WINDOW_SIZE, PERSIST_VALUE, 3368);
 
     peer.sendFrame().settings(initial);
     peer.acceptFrame(); // ACK
@@ -139,7 +143,7 @@
   @Test public void peerHttp2ServerZerosCompressionTable() throws Exception {
     boolean client = false; // Peer is server, so we are client.
     Settings settings = new Settings();
-    settings.set(Settings.HEADER_TABLE_SIZE, PERSIST_VALUE, 0);
+    settings.set(HEADER_TABLE_SIZE, PERSIST_VALUE, 0);
 
     FramedConnection connection = sendHttp2SettingsAndCheckForAck(client, settings);
 
@@ -153,7 +157,7 @@
   @Test public void peerHttp2ClientDisablesPush() throws Exception {
     boolean client = false; // Peer is client, so we are server.
     Settings settings = new Settings();
-    settings.set(Settings.ENABLE_PUSH, 0, 0); // The peer client disables push.
+    settings.set(ENABLE_PUSH, 0, 0); // The peer client disables push.
 
     FramedConnection connection = sendHttp2SettingsAndCheckForAck(client, settings);
 
@@ -164,7 +168,7 @@
   @Test public void peerIncreasesMaxFrameSize() throws Exception {
     int newMaxFrameSize = 0x4001;
     Settings settings = new Settings();
-    settings.set(Settings.MAX_FRAME_SIZE, 0, newMaxFrameSize);
+    settings.set(MAX_FRAME_SIZE, 0, newMaxFrameSize);
 
     FramedConnection connection = sendHttp2SettingsAndCheckForAck(true, settings);
 
@@ -179,7 +183,7 @@
     // write the mocking script
     peer.acceptFrame(); // SYN_STREAM 3
     peer.acceptFrame(); // SYN_STREAM 5
-    peer.sendFrame().goAway(3, PROTOCOL_ERROR, Util.EMPTY_BYTE_ARRAY);
+    peer.sendFrame().goAway(3, PROTOCOL_ERROR, EMPTY_BYTE_ARRAY);
     peer.acceptFrame(); // PING
     peer.sendFrame().ping(true, 1, 0);
     peer.acceptFrame(); // DATA STREAM 3
@@ -247,7 +251,7 @@
 
     // Play it back.
     FramedConnection connection = connection(peer, HTTP_2);
-    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);
+    connection.okHttpSettings.set(INITIAL_WINDOW_SIZE, 0, windowSize);
     FramedStream stream = connection.newStream(headerEntries("b", "banana"), false, true);
     assertEquals(0, stream.unacknowledgedBytesRead);
     assertEquals(headerEntries("a", "android"), stream.getResponseHeaders());
@@ -309,7 +313,7 @@ private Buffer data(int byteCount) {
     FramedConnection connection = connection(peer, HTTP_2);
     FramedStream client = connection.newStream(headerEntries("b", "banana"), true, true);
     BufferedSink out = Okio.buffer(client.getSink());
-    out.write(Util.EMPTY_BYTE_ARRAY);
+    out.write(EMPTY_BYTE_ARRAY);
     out.flush();
     out.close();
 
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2FrameLoggerTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2FrameLoggerTest.java
similarity index 84%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2FrameLoggerTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/Http2FrameLoggerTest.java
index 12a9e3bf90..864a368774 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2FrameLoggerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2FrameLoggerTest.java
@@ -13,26 +13,26 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import org.junit.Test;
 
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_ACK;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_END_HEADERS;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_END_STREAM;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_NONE;
-import static com.squareup.okhttp.internal.framed.Http2.FrameLogger.formatFlags;
-import static com.squareup.okhttp.internal.framed.Http2.FrameLogger.formatHeader;
-import static com.squareup.okhttp.internal.framed.Http2.TYPE_CONTINUATION;
-import static com.squareup.okhttp.internal.framed.Http2.TYPE_DATA;
-import static com.squareup.okhttp.internal.framed.Http2.TYPE_GOAWAY;
-import static com.squareup.okhttp.internal.framed.Http2.TYPE_HEADERS;
-import static com.squareup.okhttp.internal.framed.Http2.TYPE_PING;
-import static com.squareup.okhttp.internal.framed.Http2.TYPE_PUSH_PROMISE;
-import static com.squareup.okhttp.internal.framed.Http2.TYPE_SETTINGS;
+import static okhttp3.internal.framed.Http2.FLAG_ACK;
+import static okhttp3.internal.framed.Http2.FLAG_END_HEADERS;
+import static okhttp3.internal.framed.Http2.FLAG_END_STREAM;
+import static okhttp3.internal.framed.Http2.FLAG_NONE;
+import static okhttp3.internal.framed.Http2.FrameLogger.formatFlags;
+import static okhttp3.internal.framed.Http2.FrameLogger.formatHeader;
+import static okhttp3.internal.framed.Http2.TYPE_CONTINUATION;
+import static okhttp3.internal.framed.Http2.TYPE_DATA;
+import static okhttp3.internal.framed.Http2.TYPE_GOAWAY;
+import static okhttp3.internal.framed.Http2.TYPE_HEADERS;
+import static okhttp3.internal.framed.Http2.TYPE_PING;
+import static okhttp3.internal.framed.Http2.TYPE_PUSH_PROMISE;
+import static okhttp3.internal.framed.Http2.TYPE_SETTINGS;
 import static org.junit.Assert.assertEquals;
 
 public class Http2FrameLoggerTest {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2Test.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2Test.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2Test.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/Http2Test.java
index 8e4f306a54..7d1cc0c1a7 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Http2Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Http2Test.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
@@ -25,15 +25,16 @@
 import okio.ByteString;
 import okio.GzipSink;
 import okio.Okio;
+import org.junit.Assert;
 import org.junit.Test;
 
-import static com.squareup.okhttp.TestUtil.headerEntries;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_COMPRESSED;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_END_HEADERS;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_END_STREAM;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_NONE;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_PADDED;
-import static com.squareup.okhttp.internal.framed.Http2.FLAG_PRIORITY;
+import static okhttp3.TestUtil.headerEntries;
+import static okhttp3.internal.framed.Http2.FLAG_COMPRESSED;
+import static okhttp3.internal.framed.Http2.FLAG_END_HEADERS;
+import static okhttp3.internal.framed.Http2.FLAG_END_STREAM;
+import static okhttp3.internal.framed.Http2.FLAG_NONE;
+import static okhttp3.internal.framed.Http2.FLAG_PADDED;
+import static okhttp3.internal.framed.Http2.FLAG_PRIORITY;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverHttp2Test.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java
similarity index 86%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverHttp2Test.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java
index 7947c03ad1..ac330e411a 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverHttp2Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.PushPromise;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+import okhttp3.Headers;
+import okhttp3.Protocol;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.PushPromise;
+import okhttp3.mockwebserver.RecordedRequest;
 import java.net.HttpURLConnection;
 import org.junit.Test;
 
@@ -41,7 +41,7 @@ public HttpOverHttp2Test() {
         .withPush(pushPromise);
     server.enqueue(response);
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     assertContent("ABCDE", connection, Integer.MAX_VALUE);
     assertEquals(200, connection.getResponseCode());
     assertEquals("Sweet", connection.getResponseMessage());
@@ -65,7 +65,7 @@ public HttpOverHttp2Test() {
         .withPush(pushPromise);
     server.enqueue(response);
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     assertContent("ABCDE", connection, Integer.MAX_VALUE);
     assertEquals(200, connection.getResponseCode());
     assertEquals("Sweet", connection.getResponseMessage());
@@ -90,18 +90,18 @@ public HttpOverHttp2Test() {
 
     // Read & write a full request to confirm settings are accepted.
     server.enqueue(new MockResponse().withSettings(settings));
-    HttpURLConnection settingsConnection = client.open(server.getUrl("/"));
+    HttpURLConnection settingsConnection = client.open(server.url("/").url());
     assertContent("", settingsConnection, Integer.MAX_VALUE);
 
     server.enqueue(new MockResponse().setBody("ABC"));
     server.enqueue(new MockResponse().setBody("DEF"));
     server.enqueue(new MockResponse().setBody("GHI"));
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     connection1.connect();
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     connection2.connect();
-    HttpURLConnection connection3 = client.open(server.getUrl("/"));
+    HttpURLConnection connection3 = client.open(server.url("/").url());
     connection3.connect();
     assertContent("ABC", connection1, Integer.MAX_VALUE);
     assertContent("DEF", connection2, Integer.MAX_VALUE);
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverSpdy3Test.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdy3Test.java
similarity index 89%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverSpdy3Test.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdy3Test.java
index 5e9bf61833..6f7e793165 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverSpdy3Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdy3Test.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.Protocol;
+import okhttp3.Protocol;
 
 public class HttpOverSpdy3Test extends HttpOverSpdyTest {
 
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverSpdyTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
similarity index 86%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverSpdyTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
index 1f7d999872..fac19015bc 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HttpOverSpdyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
@@ -13,22 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
-
-import com.squareup.okhttp.Cache;
-import com.squareup.okhttp.ConnectionPool;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.internal.RecordingAuthenticator;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
-import com.squareup.okhttp.mockwebserver.SocketPolicy;
-import com.squareup.okhttp.testing.RecordingHostnameVerifier;
+package okhttp3.internal.framed;
+
+import okhttp3.Cache;
+import okhttp3.ConnectionPool;
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.Protocol;
+import okhttp3.internal.RecordingAuthenticator;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.internal.Util;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
+import okhttp3.mockwebserver.SocketPolicy;
+import okhttp3.testing.RecordingHostnameVerifier;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Authenticator;
@@ -67,7 +67,7 @@
   @Rule public final TemporaryFolder tempDir = new TemporaryFolder();
   @Rule public final MockWebServer server = new MockWebServer();
 
-  /** Protocol to test, for example {@link com.squareup.okhttp.Protocol#SPDY_3} */
+  /** Protocol to test, for example {@link Protocol#SPDY_3} */
   private final Protocol protocol;
   protected String hostHeader = ":host";
 
@@ -97,7 +97,7 @@ protected HttpOverSpdyTest(Protocol protocol){
     MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet");
     server.enqueue(response);
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     assertContent("ABCDE", connection, Integer.MAX_VALUE);
     assertEquals(200, connection.getResponseCode());
     assertEquals("Sweet", connection.getResponseMessage());
@@ -111,7 +111,7 @@ protected HttpOverSpdyTest(Protocol protocol){
   @Test public void emptyResponse() throws IOException {
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     assertEquals(-1, connection.getInputStream().read());
   }
 
@@ -120,7 +120,7 @@ protected HttpOverSpdyTest(Protocol protocol){
   @Test public void noDefaultContentLengthOnStreamingPost() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE"));
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     connection.setDoOutput(true);
     connection.setChunkedStreamingMode(0);
     connection.getOutputStream().write(postBytes);
@@ -135,7 +135,7 @@ protected HttpOverSpdyTest(Protocol protocol){
   @Test public void userSuppliedContentLengthHeader() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE"));
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     connection.setRequestProperty("Content-Length", String.valueOf(postBytes.length));
     connection.setDoOutput(true);
     connection.getOutputStream().write(postBytes);
@@ -150,7 +150,7 @@ protected HttpOverSpdyTest(Protocol protocol){
   @Test public void closeAfterFlush() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE"));
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     connection.setRequestProperty("Content-Length", String.valueOf(postBytes.length));
     connection.setDoOutput(true);
     connection.getOutputStream().write(postBytes); // push bytes into SpdyDataOutputStream.buffer
@@ -167,7 +167,7 @@ protected HttpOverSpdyTest(Protocol protocol){
   @Test public void setFixedLengthStreamingModeSetsContentLength() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE"));
 
-    connection = client.open(server.getUrl("/foo"));
+    connection = client.open(server.url("/foo").url());
     connection.setFixedLengthStreamingMode(postBytes.length);
     connection.setDoOutput(true);
     connection.getOutputStream().write(postBytes);
@@ -183,8 +183,8 @@ protected HttpOverSpdyTest(Protocol protocol){
     server.enqueue(new MockResponse().setBody("ABCDEF"));
     server.enqueue(new MockResponse().setBody("GHIJKL"));
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/r1"));
-    HttpURLConnection connection2 = client.open(server.getUrl("/r2"));
+    HttpURLConnection connection1 = client.open(server.url("/r1").url());
+    HttpURLConnection connection2 = client.open(server.url("/r2").url());
     assertEquals("ABC", readAscii(connection1.getInputStream(), 3));
     assertEquals("GHI", readAscii(connection2.getInputStream(), 3));
     assertEquals("DEF", readAscii(connection1.getInputStream(), 3));
@@ -209,7 +209,7 @@ protected HttpOverSpdyTest(Protocol protocol){
   @Test public void gzippedResponseBody() throws Exception {
     server.enqueue(
         new MockResponse().addHeader("Content-Encoding: gzip").setBody(gzip("ABCABCABC")));
-    assertContent("ABCABCABC", client.open(server.getUrl("/r1")), Integer.MAX_VALUE);
+    assertContent("ABCABCABC", client.open(server.url("/r1").url()), Integer.MAX_VALUE);
   }
 
   @Test public void authenticate() throws Exception {
@@ -219,7 +219,7 @@ protected HttpOverSpdyTest(Protocol protocol){
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
     RecordedRequest denied = server.takeRequest();
@@ -236,7 +236,7 @@ protected HttpOverSpdyTest(Protocol protocol){
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("This is the new location!"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertContent("This is the new location!", connection, Integer.MAX_VALUE);
 
     RecordedRequest request1 = server.takeRequest();
@@ -248,7 +248,7 @@ protected HttpOverSpdyTest(Protocol protocol){
   @Test public void readAfterLastByte() throws Exception {
     server.enqueue(new MockResponse().setBody("ABC"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals("ABC", readAscii(in, 3));
     assertEquals(-1, in.read());
@@ -260,7 +260,7 @@ protected HttpOverSpdyTest(Protocol protocol){
     server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.NO_RESPONSE));
     server.enqueue(new MockResponse().setBody("A"));
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setReadTimeout(1000);
     assertContent("A", connection, Integer.MAX_VALUE);
   }
@@ -277,7 +277,7 @@ protected HttpOverSpdyTest(Protocol protocol){
     Arrays.fill(body, 'y');
     server.enqueue(new MockResponse().setBody(new String(body)).throttleBody(1024, 1, SECONDS)); // slow connection 1KiB/second
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setReadTimeout(2000); // 2 seconds to read something.
     assertContent(new String(body), connection, Integer.MAX_VALUE);
   }
@@ -296,7 +296,7 @@ protected HttpOverSpdyTest(Protocol protocol){
         .setBody(new String(body))
         .throttleBody(1024, 1, SECONDS)); // slow connection 1KiB/second
 
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     connection.setReadTimeout(500); // half a second to read something
     connection.connect();
     try {
@@ -312,9 +312,9 @@ protected HttpOverSpdyTest(Protocol protocol){
     response.setBodyDelay(1, TimeUnit.SECONDS);
     server.enqueue(response);
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     connection1.setReadTimeout(2000);
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     connection2.setReadTimeout(200);
     connection1.connect();
     connection2.connect();
@@ -326,12 +326,12 @@ protected HttpOverSpdyTest(Protocol protocol){
 
     server.enqueue(new MockResponse().addHeader("cache-control: max-age=60").setBody("A"));
 
-    assertContent("A", client.open(server.getUrl("/")), Integer.MAX_VALUE);
+    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertContent("A", client.open(server.getUrl("/")), Integer.MAX_VALUE);
-    assertContent("A", client.open(server.getUrl("/")), Integer.MAX_VALUE);
+    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
+    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
     assertEquals(3, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(2, cache.getHitCount());
@@ -343,11 +343,11 @@ protected HttpOverSpdyTest(Protocol protocol){
     server.enqueue(new MockResponse().addHeader("ETag: v1").setBody("A"));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    assertContent("A", client.open(server.getUrl("/")), Integer.MAX_VALUE);
+    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertContent("A", client.open(server.getUrl("/")), Integer.MAX_VALUE);
+    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
     assertEquals(2, cache.getRequestCount());
     assertEquals(2, cache.getNetworkCount());
     assertEquals(1, cache.getHitCount());
@@ -359,12 +359,12 @@ protected HttpOverSpdyTest(Protocol protocol){
     server.enqueue(new MockResponse().addHeader("cache-control: max-age=60").setBody("ABCD"));
     server.enqueue(new MockResponse().addHeader("cache-control: max-age=60").setBody("EFGH"));
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     InputStream in1 = connection1.getInputStream();
     assertEquals("AB", readAscii(in1, 2));
     in1.close();
 
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     InputStream in2 = connection2.getInputStream();
     assertEquals("ABCD", readAscii(in2, Integer.MAX_VALUE));
     in2.close();
@@ -401,13 +401,13 @@ protected HttpOverSpdyTest(Protocol protocol){
     server.enqueue(new MockResponse().setBody("abc"));
 
     // Disconnect before the stream is created. A connection is still established!
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     connection1.connect();
     connection1.disconnect();
 
     // That connection is pooled, and it works.
-    assertEquals(1, connectionPool.getSpdyConnectionCount());
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    assertEquals(1, connectionPool.getMultiplexedConnectionCount());
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     assertContent("abc", connection2, 3);
     assertEquals(0, server.takeRequest().getSequenceNumber());
   }
@@ -449,7 +449,7 @@ public SpdyRequest(String path, CountDownLatch countDownLatch) {
 
     @Override public void run() {
       try {
-        HttpURLConnection conn = client.open(server.getUrl(path));
+        HttpURLConnection conn = client.open(server.url(path).url());
         assertEquals("A", readAscii(conn.getInputStream(), 1));
         countDownLatch.countDown();
       } catch (Exception e) {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HuffmanTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HuffmanTest.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HuffmanTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/HuffmanTest.java
index eeddd3e28d..b85a1b35b7 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/HuffmanTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HuffmanTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.ByteArrayOutputStream;
 import java.io.DataOutputStream;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/MockSpdyPeer.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/MockSpdyPeer.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/MockSpdyPeer.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/MockSpdyPeer.java
index f30d099a9f..1a5b6d811d 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/MockSpdyPeer.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/MockSpdyPeer.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.internal.Util;
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.ArrayList;
@@ -31,6 +31,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.logging.Logger;
+import okhttp3.internal.Util;
 import okio.Buffer;
 import okio.BufferedSource;
 import okio.ByteString;
@@ -116,8 +117,9 @@ public InFrame takeFrame() throws InterruptedException {
 
   public void play() throws IOException {
     if (serverSocket != null) throw new IllegalStateException();
-    serverSocket = new ServerSocket(0);
-    serverSocket.setReuseAddress(true);
+    serverSocket = new ServerSocket();
+    serverSocket.setReuseAddress(false);
+    serverSocket.bind(new InetSocketAddress("localhost", 0), 1);
     port = serverSocket.getLocalPort();
     executor.execute(new Runnable() {
       @Override public void run() {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/SettingsTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/SettingsTest.java
similarity index 91%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/SettingsTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/SettingsTest.java
index be5f8ecd1b..9eae7f89db 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/SettingsTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/SettingsTest.java
@@ -13,17 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import org.junit.Test;
 
-import static com.squareup.okhttp.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
-import static com.squareup.okhttp.internal.framed.Settings.DOWNLOAD_BANDWIDTH;
-import static com.squareup.okhttp.internal.framed.Settings.DOWNLOAD_RETRANS_RATE;
-import static com.squareup.okhttp.internal.framed.Settings.MAX_CONCURRENT_STREAMS;
-import static com.squareup.okhttp.internal.framed.Settings.PERSISTED;
-import static com.squareup.okhttp.internal.framed.Settings.PERSIST_VALUE;
-import static com.squareup.okhttp.internal.framed.Settings.UPLOAD_BANDWIDTH;
+import static okhttp3.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
+import static okhttp3.internal.framed.Settings.DOWNLOAD_BANDWIDTH;
+import static okhttp3.internal.framed.Settings.DOWNLOAD_RETRANS_RATE;
+import static okhttp3.internal.framed.Settings.MAX_CONCURRENT_STREAMS;
+import static okhttp3.internal.framed.Settings.PERSISTED;
+import static okhttp3.internal.framed.Settings.PERSIST_VALUE;
+import static okhttp3.internal.framed.Settings.UPLOAD_BANDWIDTH;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3ConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3ConnectionTest.java
similarity index 95%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3ConnectionTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3ConnectionTest.java
index 752e92b805..0b2876cfb8 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3ConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3ConnectionTest.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.net.Socket;
@@ -36,21 +36,26 @@
 import org.junit.After;
 import org.junit.Test;
 
-import static com.squareup.okhttp.TestUtil.headerEntries;
-import static com.squareup.okhttp.internal.framed.ErrorCode.CANCEL;
-import static com.squareup.okhttp.internal.framed.ErrorCode.INTERNAL_ERROR;
-import static com.squareup.okhttp.internal.framed.ErrorCode.INVALID_STREAM;
-import static com.squareup.okhttp.internal.framed.ErrorCode.PROTOCOL_ERROR;
-import static com.squareup.okhttp.internal.framed.ErrorCode.REFUSED_STREAM;
-import static com.squareup.okhttp.internal.framed.ErrorCode.STREAM_IN_USE;
-import static com.squareup.okhttp.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
-import static com.squareup.okhttp.internal.framed.Settings.PERSIST_VALUE;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_DATA;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_GOAWAY;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_HEADERS;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_PING;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_RST_STREAM;
-import static com.squareup.okhttp.internal.framed.Spdy3.TYPE_WINDOW_UPDATE;
+import static okhttp3.TestUtil.headerEntries;
+import static okhttp3.internal.framed.ErrorCode.CANCEL;
+import static okhttp3.internal.framed.ErrorCode.INTERNAL_ERROR;
+import static okhttp3.internal.framed.ErrorCode.INVALID_STREAM;
+import static okhttp3.internal.framed.ErrorCode.PROTOCOL_ERROR;
+import static okhttp3.internal.framed.ErrorCode.REFUSED_STREAM;
+import static okhttp3.internal.framed.ErrorCode.STREAM_IN_USE;
+import static okhttp3.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
+import static okhttp3.internal.framed.Settings.DOWNLOAD_BANDWIDTH;
+import static okhttp3.internal.framed.Settings.DOWNLOAD_RETRANS_RATE;
+import static okhttp3.internal.framed.Settings.INITIAL_WINDOW_SIZE;
+import static okhttp3.internal.framed.Settings.MAX_CONCURRENT_STREAMS;
+import static okhttp3.internal.framed.Settings.PERSIST_VALUE;
+import static okhttp3.internal.framed.Settings.UPLOAD_BANDWIDTH;
+import static okhttp3.internal.framed.Spdy3.TYPE_DATA;
+import static okhttp3.internal.framed.Spdy3.TYPE_GOAWAY;
+import static okhttp3.internal.framed.Spdy3.TYPE_HEADERS;
+import static okhttp3.internal.framed.Spdy3.TYPE_PING;
+import static okhttp3.internal.framed.Spdy3.TYPE_RST_STREAM;
+import static okhttp3.internal.framed.Spdy3.TYPE_WINDOW_UPDATE;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -105,7 +110,6 @@
 
     FramedConnection connection = connection(peer, SPDY3);
     FramedStream stream = connection.newStream(headerEntries("a", "android"), false, false);
-    assertEquals(1, connection.openStreamCount());
     assertEquals(headerEntries("b", "banana"), stream.getResponseHeaders());
     connection.ping().roundTripTime(); // Ensure that inFinished has been received.
     assertEquals(0, connection.openStreamCount());
@@ -258,7 +262,7 @@
   @Test public void serverSendsSettingsToClient() throws Exception {
     // write the mocking script
     final Settings settings = new Settings();
-    settings.set(Settings.MAX_CONCURRENT_STREAMS, PERSIST_VALUE, 10);
+    settings.set(MAX_CONCURRENT_STREAMS, PERSIST_VALUE, 10);
     peer.sendFrame().settings(settings);
     peer.sendFrame().ping(false, 2, 0);
     peer.acceptFrame(); // PING
@@ -288,14 +292,14 @@
   @Test public void multipleSettingsFramesAreMerged() throws Exception {
     // write the mocking script
     Settings settings1 = new Settings();
-    settings1.set(Settings.UPLOAD_BANDWIDTH, PERSIST_VALUE, 100);
-    settings1.set(Settings.DOWNLOAD_BANDWIDTH, PERSIST_VALUE, 200);
-    settings1.set(Settings.DOWNLOAD_RETRANS_RATE, 0, 300);
+    settings1.set(UPLOAD_BANDWIDTH, PERSIST_VALUE, 100);
+    settings1.set(DOWNLOAD_BANDWIDTH, PERSIST_VALUE, 200);
+    settings1.set(DOWNLOAD_RETRANS_RATE, 0, 300);
     peer.sendFrame().settings(settings1);
     Settings settings2 = new Settings();
-    settings2.set(Settings.DOWNLOAD_BANDWIDTH, 0, 400);
-    settings2.set(Settings.DOWNLOAD_RETRANS_RATE, PERSIST_VALUE, 500);
-    settings2.set(Settings.MAX_CONCURRENT_STREAMS, PERSIST_VALUE, 600);
+    settings2.set(DOWNLOAD_BANDWIDTH, 0, 400);
+    settings2.set(DOWNLOAD_RETRANS_RATE, PERSIST_VALUE, 500);
+    settings2.set(MAX_CONCURRENT_STREAMS, PERSIST_VALUE, 600);
     peer.sendFrame().settings(settings2);
     peer.sendFrame().ping(false, 2, 0);
     peer.acceptFrame();
@@ -307,22 +311,22 @@
     peer.takeFrame(); // Guarantees that the Settings frame has been processed.
     synchronized (connection) {
       assertEquals(100, connection.peerSettings.getUploadBandwidth(-1));
-      assertEquals(PERSIST_VALUE, connection.peerSettings.flags(Settings.UPLOAD_BANDWIDTH));
+      assertEquals(PERSIST_VALUE, connection.peerSettings.flags(UPLOAD_BANDWIDTH));
       assertEquals(400, connection.peerSettings.getDownloadBandwidth(-1));
-      assertEquals(0, connection.peerSettings.flags(Settings.DOWNLOAD_BANDWIDTH));
+      assertEquals(0, connection.peerSettings.flags(DOWNLOAD_BANDWIDTH));
       assertEquals(500, connection.peerSettings.getDownloadRetransRate(-1));
-      assertEquals(PERSIST_VALUE, connection.peerSettings.flags(Settings.DOWNLOAD_RETRANS_RATE));
+      assertEquals(PERSIST_VALUE, connection.peerSettings.flags(DOWNLOAD_RETRANS_RATE));
       assertEquals(600, connection.peerSettings.getMaxConcurrentStreams(-1));
-      assertEquals(PERSIST_VALUE, connection.peerSettings.flags(Settings.MAX_CONCURRENT_STREAMS));
+      assertEquals(PERSIST_VALUE, connection.peerSettings.flags(MAX_CONCURRENT_STREAMS));
     }
   }
 
   @Test public void clearSettingsBeforeMerge() throws Exception {
     // write the mocking script
     Settings settings1 = new Settings();
-    settings1.set(Settings.UPLOAD_BANDWIDTH, PERSIST_VALUE, 100);
-    settings1.set(Settings.DOWNLOAD_BANDWIDTH, PERSIST_VALUE, 200);
-    settings1.set(Settings.DOWNLOAD_RETRANS_RATE, 0, 300);
+    settings1.set(UPLOAD_BANDWIDTH, PERSIST_VALUE, 100);
+    settings1.set(DOWNLOAD_BANDWIDTH, PERSIST_VALUE, 200);
+    settings1.set(DOWNLOAD_RETRANS_RATE, 0, 300);
     peer.sendFrame().settings(settings1);
     peer.sendFrame().ping(false, 2, 0);
     peer.acceptFrame();
@@ -335,7 +339,7 @@
 
     // fake a settings frame with clear flag set.
     Settings settings2 = new Settings();
-    settings2.set(Settings.MAX_CONCURRENT_STREAMS, PERSIST_VALUE, 600);
+    settings2.set(MAX_CONCURRENT_STREAMS, PERSIST_VALUE, 600);
     connection.readerRunnable.settings(true, settings2);
 
     synchronized (connection) {
@@ -944,7 +948,7 @@
 
   @Test public void writeTimesOutAwaitingStreamWindow() throws Exception {
     // Set the peer's receive window to 5 bytes!
-    Settings peerSettings = new Settings().set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, 5);
+    Settings peerSettings = new Settings().set(INITIAL_WINDOW_SIZE, PERSIST_VALUE, 5);
 
     // write the mocking script
     peer.sendFrame().settings(peerSettings);
@@ -985,7 +989,7 @@
   @Test public void writeTimesOutAwaitingConnectionWindow() throws Exception {
     // Set the peer's receive window to 5 bytes. Give the stream 5 bytes back, so only the
     // connection-level window is applicable.
-    Settings peerSettings = new Settings().set(Settings.INITIAL_WINDOW_SIZE, PERSIST_VALUE, 5);
+    Settings peerSettings = new Settings().set(INITIAL_WINDOW_SIZE, PERSIST_VALUE, 5);
 
     // write the mocking script
     peer.sendFrame().settings(peerSettings);
@@ -1124,7 +1128,7 @@
 
     // Play it back.
     FramedConnection connection = connection(peer, SPDY3);
-    connection.okHttpSettings.set(Settings.INITIAL_WINDOW_SIZE, 0, windowSize);
+    connection.okHttpSettings.set(INITIAL_WINDOW_SIZE, 0, windowSize);
     FramedStream stream = connection.newStream(headerEntries("b", "banana"), false, true);
     assertEquals(0, stream.unacknowledgedBytesRead);
     assertEquals(headerEntries("a", "android"), stream.getResponseHeaders());
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3Test.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3Test.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3Test.java
rename to okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3Test.java
index 2627959fe0..c026b84ba7 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/framed/Spdy3Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/Spdy3Test.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.io.IOException;
 import okio.Buffer;
 import okio.ByteString;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
index 043234ec33..8fe535cd8f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
 import java.io.IOException;
 import java.net.CookieHandler;
 import java.net.CookieManager;
@@ -276,7 +276,7 @@ public void testNetscapeResponse() throws Exception {
     server.enqueue(new MockResponse());
     server.start();
 
-    HttpURLConnection connection = new OkUrlFactory(client).open(server.getUrl("/"));
+    HttpURLConnection connection = new OkUrlFactory(client).open(server.url("/").url());
     assertEquals(Collections.<String, List<String>>emptyMap(),
         connection.getRequestProperties());
 
@@ -351,7 +351,7 @@ private void assertContainsAll(Collection<String> collection, String... toFind)
   }
 
   private Map<String,List<String>> get(MockWebServer server, String path) throws Exception {
-    URLConnection connection = new OkUrlFactory(client).open(server.getUrl(path));
+    URLConnection connection = new OkUrlFactory(client).open(server.url(path).url());
     Map<String, List<String>> headers = connection.getHeaderFields();
     connection.getInputStream().close();
     return headers;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/DisconnectTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
similarity index 91%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/DisconnectTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
index d64badbefc..47b604df7e 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/DisconnectTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.DelegatingServerSocketFactory;
-import com.squareup.okhttp.DelegatingSocketFactory;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
+package okhttp3.internal.http;
+
+import okhttp3.DelegatingServerSocketFactory;
+import okhttp3.DelegatingSocketFactory;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -78,7 +78,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
         .throttleBody(64 * 1024, 125, TimeUnit.MILLISECONDS)); // 500 Kbps
     server.start();
 
-    HttpURLConnection connection = new OkUrlFactory(client).open(server.getUrl("/"));
+    HttpURLConnection connection = new OkUrlFactory(client).open(server.url("/").url());
     disconnectLater(connection, 500);
 
     connection.setDoOutput(true);
@@ -105,7 +105,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
         .throttleBody(64 * 1024, 125, TimeUnit.MILLISECONDS)); // 500 Kbps
     server.start();
 
-    HttpURLConnection connection = new OkUrlFactory(client).open(server.getUrl("/"));
+    HttpURLConnection connection = new OkUrlFactory(client).open(server.url("/").url());
     disconnectLater(connection, 500);
 
     InputStream responseBody = connection.getInputStream();
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java b/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalHttp2Example.java
similarity index 87%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/ExternalHttp2Example.java
index 020c7f0e36..bb6a346b64 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalHttp2Example.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalHttp2Example.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.internal.Util;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.Protocol;
+import okhttp3.internal.Util;
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.net.URL;
@@ -28,7 +28,7 @@
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLSession;
 
-import static com.squareup.okhttp.internal.http.OkHeaders.SELECTED_PROTOCOL;
+import static okhttp3.internal.http.OkHeaders.SELECTED_PROTOCOL;
 
 public final class ExternalHttp2Example {
   public static void main(String[] args) throws Exception {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalSpdyExample.java b/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalSpdyExample.java
similarity index 87%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalSpdyExample.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/ExternalSpdyExample.java
index a8009626c0..57cd3a3ab2 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ExternalSpdyExample.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalSpdyExample.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.internal.Util;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.Protocol;
+import okhttp3.internal.Util;
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.net.URL;
@@ -28,7 +28,7 @@
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLSession;
 
-import static com.squareup.okhttp.internal.http.OkHeaders.SELECTED_PROTOCOL;
+import static okhttp3.internal.http.OkHeaders.SELECTED_PROTOCOL;
 
 public final class ExternalSpdyExample {
   public static void main(String[] args) throws Exception {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/FakeDns.java b/okhttp-tests/src/test/java/okhttp3/internal/http/FakeDns.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/FakeDns.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/FakeDns.java
index 03d43471b2..a8e5a8687f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/FakeDns.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/FakeDns.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.Dns;
+import okhttp3.Dns;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.ArrayList;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java
similarity index 96%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java
index ea6e024575..098d9df05f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HeadersTest.java
@@ -13,22 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.framed.Header;
+import okhttp3.Headers;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.framed.Header;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.junit.Assert;
 import org.junit.Test;
 
-import static com.squareup.okhttp.TestUtil.headerEntries;
+import static okhttp3.TestUtil.headerEntries;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
@@ -44,7 +45,7 @@
     Response response = Http2xStream.readSpdy3HeadersList(headerBlock).request(request).build();
     Headers headers = response.headers();
     assertEquals(3, headers.size());
-    assertEquals(Protocol.SPDY_3, response.protocol());
+    Assert.assertEquals(Protocol.SPDY_3, response.protocol());
     assertEquals(200, response.code());
     assertEquals("OK", response.message());
     assertEquals("no-cache, no-store", headers.get("cache-control"));
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpDateTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/HttpDateTest.java
similarity index 98%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpDateTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/HttpDateTest.java
index 2181774f43..2098d68103 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HttpDateTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/HttpDateTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 import org.junit.After;
 import org.junit.Before;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RecordingProxySelector.java b/okhttp-tests/src/test/java/okhttp3/internal/http/RecordingProxySelector.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RecordingProxySelector.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/RecordingProxySelector.java
index ed9cfa4ba9..94b9f2fcd7 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RecordingProxySelector.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RecordingProxySelector.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteExceptionTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteExceptionTest.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteExceptionTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/RouteExceptionTest.java
index eeb95642cf..7ae8a9666e 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteExceptionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteExceptionTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 import org.junit.Test;
 
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java
similarity index 95%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java
index 8560e0ffad..adc7f17043 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.Address;
-import com.squareup.okhttp.Authenticator;
-import com.squareup.okhttp.ConnectionSpec;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Route;
-import com.squareup.okhttp.internal.RouteDatabase;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.internal.Util;
+package okhttp3.internal.http;
+
+import okhttp3.Address;
+import okhttp3.Authenticator;
+import okhttp3.ConnectionSpec;
+import okhttp3.Protocol;
+import okhttp3.Route;
+import okhttp3.internal.RouteDatabase;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.internal.Util;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.Proxy;
@@ -331,10 +331,10 @@
 
   private void assertRoute(Route route, Address address, Proxy proxy, InetAddress socketAddress,
       int socketPort) {
-    assertEquals(address, route.getAddress());
-    assertEquals(proxy, route.getProxy());
-    assertEquals(socketAddress, route.getSocketAddress().getAddress());
-    assertEquals(socketPort, route.getSocketAddress().getPort());
+    assertEquals(address, route.address());
+    assertEquals(proxy, route.proxy());
+    assertEquals(socketAddress, route.socketAddress().getAddress());
+    assertEquals(socketPort, route.socketAddress().getPort());
   }
 
   /** Returns an address that's without an SSL socket factory or hostname verifier. */
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/StatusLineTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/StatusLineTest.java
similarity index 97%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/StatusLineTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/StatusLineTest.java
index f339f9ebe6..be97c012e1 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/StatusLineTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/StatusLineTest.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.Protocol;
+import okhttp3.Protocol;
 import java.io.IOException;
 import java.net.ProtocolException;
 import org.junit.Test;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ThreadInterruptTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
similarity index 91%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ThreadInterruptTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
index a7e6007a20..4e304781ee 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/ThreadInterruptTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.DelegatingServerSocketFactory;
-import com.squareup.okhttp.DelegatingSocketFactory;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
+import okhttp3.DelegatingServerSocketFactory;
+import okhttp3.DelegatingSocketFactory;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -82,7 +82,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
 
     interruptLater(500);
 
-    HttpURLConnection connection = new OkUrlFactory(client).open(server.getUrl("/"));
+    HttpURLConnection connection = new OkUrlFactory(client).open(server.url("/").url());
     connection.setDoOutput(true);
     connection.setFixedLengthStreamingMode(requestBodySize);
     OutputStream requestBody = connection.getOutputStream();
@@ -109,7 +109,7 @@ protected Socket configureSocket(Socket socket) throws IOException {
 
     interruptLater(500);
 
-    HttpURLConnection connection = new OkUrlFactory(client).open(server.getUrl("/"));
+    HttpURLConnection connection = new OkUrlFactory(client).open(server.url("/").url());
     InputStream responseBody = connection.getInputStream();
     byte[] buffer = new byte[1024];
     try {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/tls/FakeSSLSession.java b/okhttp-tests/src/test/java/okhttp3/internal/tls/FakeSSLSession.java
similarity index 98%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/tls/FakeSSLSession.java
rename to okhttp-tests/src/test/java/okhttp3/internal/tls/FakeSSLSession.java
index 215e968dfe..ead8c1b871 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/tls/FakeSSLSession.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/FakeSSLSession.java
@@ -14,7 +14,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.squareup.okhttp.internal.tls;
+package okhttp3.internal.tls;
 
 import java.security.Principal;
 import java.security.cert.Certificate;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/tls/HostnameVerifierTest.java b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
similarity index 99%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/internal/tls/HostnameVerifierTest.java
rename to okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
index d7f1c78cb8..da6056aa56 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/tls/HostnameVerifierTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
@@ -15,9 +15,9 @@
  * the License.
  */
 
-package com.squareup.okhttp.internal.tls;
+package okhttp3.internal.tls;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.io.ByteArrayInputStream;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
diff --git a/okhttp-urlconnection/pom.xml b/okhttp-urlconnection/pom.xml
index ab11d1e0e8..a700dffd97 100644
--- a/okhttp-urlconnection/pom.xml
+++ b/okhttp-urlconnection/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-urlconnection</artifactId>
@@ -14,12 +14,12 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
@@ -31,7 +31,7 @@
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
@@ -44,7 +44,7 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
         <configuration>
-          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>
+          <excludePackageNames>okhttp3.internal.*</excludePackageNames>
           <links>
             <link>http://square.github.io/okhttp/javadoc/</link>
           </links>
diff --git a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/OkUrlFactory.java b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
similarity index 87%
rename from okhttp-urlconnection/src/main/java/com/squareup/okhttp/OkUrlFactory.java
rename to okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
index 4b34559e4c..5a11ba972d 100644
--- a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/OkUrlFactory.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
@@ -13,11 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
-
-import com.squareup.okhttp.internal.huc.HttpURLConnectionImpl;
-import com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl;
+package okhttp3;
 
+import okhttp3.internal.huc.HttpURLConnectionImpl;
+import okhttp3.internal.huc.HttpsURLConnectionImpl;
 import java.net.HttpURLConnection;
 import java.net.Proxy;
 import java.net.URL;
@@ -25,6 +24,11 @@
 import java.net.URLStreamHandler;
 import java.net.URLStreamHandlerFactory;
 
+/**
+ * @deprecated OkHttp will be dropping its ability to be used with {@link HttpURLConnection} in an
+ *     upcoming release. Applications that need this should either downgrade to the system's
+ *     built-in {@link HttpURLConnection} or upgrade to OkHttp's Request/Response API.
+ */
 public final class OkUrlFactory implements URLStreamHandlerFactory, Cloneable {
   private final OkHttpClient client;
 
diff --git a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/DelegatingHttpsURLConnection.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java
similarity index 98%
rename from okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/DelegatingHttpsURLConnection.java
rename to okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java
index 631a2ae03d..c03eded309 100644
--- a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/DelegatingHttpsURLConnection.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/DelegatingHttpsURLConnection.java
@@ -14,9 +14,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.squareup.okhttp.internal.huc;
+package okhttp3.internal.huc;
 
-import com.squareup.okhttp.Handshake;
+import okhttp3.Handshake;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -57,7 +57,7 @@ public DelegatingHttpsURLConnection(HttpURLConnection delegate) {
 
   @Override public String getCipherSuite() {
     Handshake handshake = handshake();
-    return handshake != null ? handshake.cipherSuite() : null;
+    return handshake != null ? handshake.cipherSuite().javaName() : null;
   }
 
   @Override public Certificate[] getLocalCertificates() {
diff --git a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
similarity index 94%
rename from okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
rename to okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
index fb26a64149..668661f618 100644
--- a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
@@ -15,31 +15,31 @@
  *  limitations under the License.
  */
 
-package com.squareup.okhttp.internal.huc;
-
-import com.squareup.okhttp.Connection;
-import com.squareup.okhttp.Handshake;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.Route;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.Platform;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.Version;
-import com.squareup.okhttp.internal.http.HttpDate;
-import com.squareup.okhttp.internal.http.HttpEngine;
-import com.squareup.okhttp.internal.http.HttpMethod;
-import com.squareup.okhttp.internal.http.OkHeaders;
-import com.squareup.okhttp.internal.http.RequestException;
-import com.squareup.okhttp.internal.http.RetryableSink;
-import com.squareup.okhttp.internal.http.RouteException;
-import com.squareup.okhttp.internal.http.StatusLine;
-import com.squareup.okhttp.internal.http.StreamAllocation;
+package okhttp3.internal.huc;
+
+import okhttp3.Connection;
+import okhttp3.Handshake;
+import okhttp3.Headers;
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.Route;
+import okhttp3.internal.Internal;
+import okhttp3.internal.Platform;
+import okhttp3.internal.Util;
+import okhttp3.internal.Version;
+import okhttp3.internal.http.HttpDate;
+import okhttp3.internal.http.HttpEngine;
+import okhttp3.internal.http.HttpMethod;
+import okhttp3.internal.http.OkHeaders;
+import okhttp3.internal.http.RequestException;
+import okhttp3.internal.http.RetryableSink;
+import okhttp3.internal.http.RouteException;
+import okhttp3.internal.http.StatusLine;
+import okhttp3.internal.http.StreamAllocation;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -413,7 +413,7 @@ private HttpEngine getResponse() throws IOException {
       }
 
       // The first request was insufficient. Prepare for another...
-      url = followUp.url();
+      url = followUp.url().url();
       requestHeaders = followUp.headers().newBuilder();
 
       // Although RFC 2616 10.3.2 specifies that a HTTP_MOVED_PERM redirect
@@ -429,7 +429,7 @@ private HttpEngine getResponse() throws IOException {
       }
 
       StreamAllocation streamAllocation = httpEngine.close();
-      if (!httpEngine.sameConnection(followUp.httpUrl())) {
+      if (!httpEngine.sameConnection(followUp.url())) {
         streamAllocation.release();
         streamAllocation = null;
       }
@@ -445,6 +445,7 @@ private HttpEngine getResponse() throws IOException {
    * retried. Throws an exception if the request failed permanently.
    */
   private boolean execute(boolean readResponse) throws IOException {
+    boolean releaseConnection = true;
     try {
       httpEngine.sendRequest();
       Connection connection = httpEngine.getConnection();
@@ -458,6 +459,7 @@ private boolean execute(boolean readResponse) throws IOException {
       if (readResponse) {
         httpEngine.readResponse();
       }
+      releaseConnection = false;
 
       return true;
     } catch (RequestException e) {
@@ -469,6 +471,7 @@ private boolean execute(boolean readResponse) throws IOException {
       // The attempt to connect via a route failed. The request will not have been sent.
       HttpEngine retryEngine = httpEngine.recover(e);
       if (retryEngine != null) {
+        releaseConnection = false;
         httpEngine = retryEngine;
         return false;
       }
@@ -481,6 +484,7 @@ private boolean execute(boolean readResponse) throws IOException {
       // An attempt to communicate with a server failed. The request may have been sent.
       HttpEngine retryEngine = httpEngine.recover(e);
       if (retryEngine != null) {
+        releaseConnection = false;
         httpEngine = retryEngine;
         return false;
       }
@@ -488,6 +492,12 @@ private boolean execute(boolean readResponse) throws IOException {
       // Give up; recovery is not possible.
       httpEngineFailure = e;
       throw e;
+    } finally {
+      // We're throwing an unchecked exception. Release any resources.
+      if (releaseConnection) {
+        StreamAllocation streamAllocation = httpEngine.close();
+        streamAllocation.release();
+      }
     }
   }
 
@@ -504,7 +514,7 @@ private boolean execute(boolean readResponse) throws IOException {
    */
   @Override public final boolean usingProxy() {
     Proxy proxy = route != null
-        ? route.getProxy()
+        ? route.proxy()
         : client.getProxy();
     return proxy != null && proxy.type() != Proxy.Type.DIRECT;
   }
diff --git a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpsURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java
similarity index 95%
rename from okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpsURLConnectionImpl.java
rename to okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java
index 2aba0872a8..3b18d3d9d6 100644
--- a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpsURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java
@@ -14,10 +14,10 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.squareup.okhttp.internal.huc;
+package okhttp3.internal.huc;
 
-import com.squareup.okhttp.Handshake;
-import com.squareup.okhttp.OkHttpClient;
+import okhttp3.Handshake;
+import okhttp3.OkHttpClient;
 import java.net.URL;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSocketFactory;
diff --git a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/OkUrlFactoryTest.java b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
similarity index 83%
rename from okhttp-urlconnection/src/test/java/com/squareup/okhttp/OkUrlFactoryTest.java
rename to okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
index 0b169293c8..1856c2c1ce 100644
--- a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/OkUrlFactoryTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
@@ -1,9 +1,9 @@
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.http.OkHeaders;
-import com.squareup.okhttp.internal.io.InMemoryFileSystem;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
+import okhttp3.internal.http.OkHeaders;
+import okhttp3.internal.io.InMemoryFileSystem;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import java.io.File;
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -50,7 +50,7 @@
   @Test public void originServerSends407() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(407));
 
-    HttpURLConnection conn = factory.open(server.getUrl("/"));
+    HttpURLConnection conn = factory.open(server.url("/").url());
     try {
       conn.getResponseCode();
       fail();
@@ -61,7 +61,7 @@
   @Test public void networkResponseSourceHeader() throws Exception {
     server.enqueue(new MockResponse().setBody("Isla Sorna"));
 
-    HttpURLConnection connection = factory.open(server.getUrl("/"));
+    HttpURLConnection connection = factory.open(server.url("/").url());
     assertResponseHeader(connection, "NETWORK 200");
     assertResponseBody(connection, "Isla Sorna");
   }
@@ -69,7 +69,7 @@
   @Test public void networkFailureResponseSourceHeader() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(404));
 
-    HttpURLConnection connection = factory.open(server.getUrl("/"));
+    HttpURLConnection connection = factory.open(server.url("/").url());
     assertResponseHeader(connection, "NETWORK 404");
     connection.getErrorStream().close();
   }
@@ -81,11 +81,11 @@
         .setBody("Isla Nublar"));
     server.enqueue(new MockResponse().setResponseCode(304));
 
-    HttpURLConnection connection1 = factory.open(server.getUrl("/"));
+    HttpURLConnection connection1 = factory.open(server.url("/").url());
     assertResponseHeader(connection1, "NETWORK 200");
     assertResponseBody(connection1, "Isla Nublar");
 
-    HttpURLConnection connection2 = factory.open(server.getUrl("/"));
+    HttpURLConnection connection2 = factory.open(server.url("/").url());
     assertResponseHeader(connection2, "CONDITIONAL_CACHE 304");
     assertResponseBody(connection2, "Isla Nublar");
   }
@@ -97,11 +97,11 @@
         .setBody("Isla Nublar"));
     server.enqueue(new MockResponse().setBody("Isla Sorna"));
 
-    HttpURLConnection connection1 = factory.open(server.getUrl("/"));
+    HttpURLConnection connection1 = factory.open(server.url("/").url());
     assertResponseHeader(connection1, "NETWORK 200");
     assertResponseBody(connection1, "Isla Nublar");
 
-    HttpURLConnection connection2 = factory.open(server.getUrl("/"));
+    HttpURLConnection connection2 = factory.open(server.url("/").url());
     assertResponseHeader(connection2, "CONDITIONAL_CACHE 200");
     assertResponseBody(connection2, "Isla Sorna");
   }
@@ -111,11 +111,11 @@
         .addHeader("Expires: " + formatDate(2, TimeUnit.HOURS))
         .setBody("Isla Nublar"));
 
-    HttpURLConnection connection1 = factory.open(server.getUrl("/"));
+    HttpURLConnection connection1 = factory.open(server.url("/").url());
     assertResponseHeader(connection1, "NETWORK 200");
     assertResponseBody(connection1, "Isla Nublar");
 
-    HttpURLConnection connection2 = factory.open(server.getUrl("/"));
+    HttpURLConnection connection2 = factory.open(server.url("/").url());
     assertResponseHeader(connection2, "CACHE 200");
     assertResponseBody(connection2, "Isla Nublar");
   }
@@ -123,11 +123,11 @@
   @Test public void noneResponseSourceHeaders() throws Exception {
     server.enqueue(new MockResponse().setBody("Isla Nublar"));
 
-    HttpURLConnection connection1 = factory.open(server.getUrl("/"));
+    HttpURLConnection connection1 = factory.open(server.url("/").url());
     assertResponseHeader(connection1, "NETWORK 200");
     assertResponseBody(connection1, "Isla Nublar");
 
-    HttpURLConnection connection2 = factory.open(server.getUrl("/"));
+    HttpURLConnection connection2 = factory.open(server.url("/").url());
     connection2.setRequestProperty("Cache-Control", "only-if-cached");
     assertResponseHeader(connection2, "NONE");
   }
@@ -141,7 +141,7 @@ public void setInstanceFollowRedirectsFalse() throws Exception {
     server.enqueue(new MockResponse()
         .setBody("B"));
 
-    HttpURLConnection connection = factory.open(server.getUrl("/a"));
+    HttpURLConnection connection = factory.open(server.url("/a").url());
     connection.setInstanceFollowRedirects(false);
     assertResponseBody(connection, "A");
     assertResponseCode(connection, 302);
diff --git a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
similarity index 90%
rename from okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java
rename to okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
index 66bf7c2f4c..73c25ad49d 100644
--- a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp;
-
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.io.InMemoryFileSystem;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+package okhttp3;
+
+import okhttp3.internal.Internal;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.internal.Util;
+import okhttp3.internal.io.InMemoryFileSystem;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -61,7 +61,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
+import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AT_END;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -178,7 +178,7 @@ private void assertCached(boolean shouldPut, int responseCode) throws Exception
     server.enqueue(response);
     server.start();
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection conn = client.open(url);
     assertEquals(responseCode, conn.getResponseCode());
 
@@ -220,7 +220,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     server.enqueue(response);
 
     // Make sure that calling skip() doesn't omit bytes from the cache.
-    HttpURLConnection urlConnection = client.open(server.getUrl("/"));
+    HttpURLConnection urlConnection = client.open(server.url("/").url());
     InputStream in = urlConnection.getInputStream();
     assertEquals("I love ", readAscii(urlConnection, "I love ".length()));
     reliableSkip(in, "puppies but hate ".length());
@@ -230,7 +230,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     assertEquals(1, cache.getWriteSuccessCount());
     assertEquals(0, cache.getWriteAbortCount());
 
-    urlConnection = client.open(server.getUrl("/")); // cached!
+    urlConnection = client.open(server.url("/").url()); // cached!
     in = urlConnection.getInputStream();
     assertEquals("I love puppies but hate spiders",
         readAscii(urlConnection, "I love puppies but hate spiders".length()));
@@ -251,7 +251,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS))
         .setBody("ABC"));
 
-    HttpsURLConnection c1 = (HttpsURLConnection) client.open(server.getUrl("/"));
+    HttpsURLConnection c1 = (HttpsURLConnection) client.open(server.url("/").url());
     c1.setSSLSocketFactory(sslContext.getSocketFactory());
     c1.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
     assertEquals("ABC", readAscii(c1));
@@ -263,7 +263,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     Principal peerPrincipal = c1.getPeerPrincipal();
     Principal localPrincipal = c1.getLocalPrincipal();
 
-    HttpsURLConnection c2 = (HttpsURLConnection) client.open(server.getUrl("/")); // cached!
+    HttpsURLConnection c2 = (HttpsURLConnection) client.open(server.url("/").url()); // cached!
     c2.setSSLSocketFactory(sslContext.getSocketFactory());
     c2.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
     assertEquals("ABC", readAscii(c2));
@@ -289,10 +289,10 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .setBody("ABC"));
     server.enqueue(new MockResponse().setBody("DEF"));
 
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    HttpURLConnection connection = client.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection));
 
-    connection = client.open(server.getUrl("/")); // cached!
+    connection = client.open(server.url("/").url()); // cached!
     assertEquals("ABC", readAscii(connection));
 
     assertEquals(4, cache.getRequestCount()); // 2 requests + 2 redirects
@@ -306,18 +306,18 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .addHeader("Location: /foo"));
     server.enqueue(new MockResponse().setBody("DEF"));
 
-    assertEquals("ABC", readAscii(client.open(server.getUrl("/foo"))));
+    assertEquals("ABC", readAscii(client.open(server.url("/foo").url())));
     RecordedRequest request1 = server.takeRequest();
     assertEquals("GET /foo HTTP/1.1", request1.getRequestLine());
     assertEquals(0, request1.getSequenceNumber());
 
-    assertEquals("ABC", readAscii(client.open(server.getUrl("/bar"))));
+    assertEquals("ABC", readAscii(client.open(server.url("/bar").url())));
     RecordedRequest request2 = server.takeRequest();
     assertEquals("GET /bar HTTP/1.1", request2.getRequestLine());
     assertEquals(1, request2.getSequenceNumber());
 
     // an unrelated request should reuse the pooled connection
-    assertEquals("DEF", readAscii(client.open(server.getUrl("/baz"))));
+    assertEquals("DEF", readAscii(client.open(server.url("/baz").url())));
     RecordedRequest request3 = server.takeRequest();
     assertEquals("GET /baz HTTP/1.1", request3.getRequestLine());
     assertEquals(2, request3.getSequenceNumber());
@@ -337,12 +337,12 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
 
-    HttpsURLConnection connection1 = (HttpsURLConnection) client.open(server.getUrl("/"));
+    HttpsURLConnection connection1 = (HttpsURLConnection) client.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection1));
     assertNotNull(connection1.getCipherSuite());
 
     // Cached!
-    HttpsURLConnection connection2 = (HttpsURLConnection) client.open(server.getUrl("/"));
+    HttpsURLConnection connection2 = (HttpsURLConnection) client.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection2));
     assertNotNull(connection2.getCipherSuite());
 
@@ -369,16 +369,16 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     server.enqueue(new MockResponse().addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS))
         .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS))
         .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)
-        .addHeader("Location: " + server2.getUrl("/")));
+        .addHeader("Location: " + server2.url("/").url()));
 
     client.client().setSslSocketFactory(sslContext.getSocketFactory());
     client.client().setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
 
-    HttpURLConnection connection1 = client.open(server.getUrl("/"));
+    HttpURLConnection connection1 = client.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection1));
 
     // Cached!
-    HttpURLConnection connection2 = client.open(server.getUrl("/"));
+    HttpURLConnection connection2 = client.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection2));
 
     assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4
@@ -406,7 +406,7 @@ private void testServerPrematureDisconnect(TransferKind transferKind) throws IOE
     server.enqueue(new MockResponse().setBody("Request #2"));
 
     BufferedReader reader = new BufferedReader(
-        new InputStreamReader(client.open(server.getUrl("/")).getInputStream()));
+        new InputStreamReader(client.open(server.url("/").url()).getInputStream()));
     assertEquals("ABCDE", reader.readLine());
     try {
       reader.readLine();
@@ -418,7 +418,7 @@ private void testServerPrematureDisconnect(TransferKind transferKind) throws IOE
 
     assertEquals(1, cache.getWriteAbortCount());
     assertEquals(0, cache.getWriteSuccessCount());
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     assertEquals("Request #2", readAscii(connection));
     assertEquals(1, cache.getWriteAbortCount());
     assertEquals(1, cache.getWriteSuccessCount());
@@ -443,7 +443,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
     server.enqueue(response);
     server.enqueue(new MockResponse().setBody("Request #2"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals("ABCDE", readAscii(connection, 5));
     in.close();
@@ -455,7 +455,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
 
     assertEquals(1, cache.getWriteAbortCount());
     assertEquals(0, cache.getWriteSuccessCount());
-    connection = client.open(server.getUrl("/"));
+    connection = client.open(server.url("/").url());
     assertEquals("Request #2", readAscii(connection));
     assertEquals(1, cache.getWriteAbortCount());
     assertEquals(1, cache.getWriteSuccessCount());
@@ -471,7 +471,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
             .addHeader("Date: " + formatDate(-5, TimeUnit.SECONDS))
             .setBody("A"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(client.open(url)));
     URLConnection connection = client.open(url);
     assertEquals("A", readAscii(connection));
@@ -499,8 +499,8 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
         .addHeader("Date: " + formatDate(-5, TimeUnit.DAYS))
         .setBody("A"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    URLConnection connection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    URLConnection connection = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection));
     assertEquals("113 HttpURLConnection \"Heuristic expiration\"",
         connection.getHeaderField("Warning"));
@@ -513,7 +513,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
             .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/?foo=bar");
+    URL url = server.url("/?foo=bar").url();
     assertEquals("A", readAscii(client.open(url)));
     assertEquals("B", readAscii(client.open(url)));
   }
@@ -627,7 +627,7 @@ private void testRequestMethod(String requestMethod, boolean expectCached) throw
         .addHeader("X-Response-ID: 1"));
     server.enqueue(new MockResponse().addHeader("X-Response-ID: 2"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     HttpURLConnection request1 = client.open(url);
     request1.setRequestMethod(requestMethod);
@@ -665,7 +665,7 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
     server.enqueue(new MockResponse().setBody("B"));
     server.enqueue(new MockResponse().setBody("C"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     assertEquals("A", readAscii(client.open(url)));
 
@@ -686,7 +686,7 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
     server.enqueue(new MockResponse().setBody("B").setResponseCode(500));
     server.enqueue(new MockResponse().setBody("C"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     assertEquals("A", readAscii(client.open(url)));
 
@@ -765,7 +765,7 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
         .addHeader("Content-Range: bytes 1000-1001/2000"));
     server.enqueue(new MockResponse().setBody("BB"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     URLConnection range = client.open(url);
     range.addRequestProperty("Range", "bytes=1000-1001");
@@ -781,7 +781,7 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
     server.enqueue(new MockResponse().setBody("B")
         .addHeader("Last-Modified: " + formatDate(-4, TimeUnit.HOURS)));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
 
     assertEquals("A", readAscii(client.open(url)));
     assertEquals("A", readAscii(client.open(url)));
@@ -808,9 +808,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     // At least three request/response pairs are required because after the first request is cached
     // a different execution path might be taken. Thus modifications to the cache applied during
     // the second request might not be visible until another request is performed.
-    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
   }
 
   @Test public void notModifiedSpecifiesEncoding() throws Exception {
@@ -825,9 +825,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("DEFDEFDEF"));
 
-    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("DEFDEFDEF", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
+    assertEquals("DEFDEFDEF", readAscii(client.open(server.url("/").url())));
   }
 
   /** https://github.com/square/okhttp/issues/947 */
@@ -839,8 +839,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Cache-Control: max-age=60"));
     server.enqueue(new MockResponse().setBody("FAIL"));
 
-    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
   }
 
   @Test public void conditionalCacheHitIsNotDoublePooled() throws Exception {
@@ -853,8 +853,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     pool.evictAll();
     client.client().setConnectionPool(pool);
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
     assertEquals(1, client.client().getConnectionPool().getIdleConnectionCount());
   }
 
@@ -871,9 +871,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-age=30");
     assertEquals("B", readAscii(connection));
   }
@@ -884,9 +884,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "min-fresh=120");
     assertEquals("B", readAscii(connection));
   }
@@ -897,9 +897,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Date: " + formatDate(-4, TimeUnit.MINUTES)));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-stale=180");
     assertEquals("A", readAscii(connection));
     assertEquals("110 HttpURLConnection \"Response is stale\"",
@@ -912,9 +912,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Date: " + formatDate(-4, TimeUnit.MINUTES)));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-stale=180");
     assertEquals("B", readAscii(connection));
   }
@@ -922,7 +922,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
   @Test public void requestOnlyIfCachedWithNoResponseCached() throws IOException {
     // (no responses enqueued)
 
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    HttpURLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
     assertEquals(1, cache.getRequestCount());
@@ -935,8 +935,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    URLConnection connection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    URLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertEquals("A", readAscii(connection));
     assertEquals(2, cache.getRequestCount());
@@ -949,8 +949,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(-1, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    HttpURLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
     assertEquals(2, cache.getRequestCount());
@@ -961,8 +961,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
   @Test public void requestOnlyIfCachedWithUnhelpfulResponseCached() throws IOException {
     server.enqueue(new MockResponse().setBody("A"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    HttpURLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
     assertEquals(2, cache.getRequestCount());
@@ -978,7 +978,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
             .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(client.open(url)));
     URLConnection connection = client.open(url);
     connection.setRequestProperty("Cache-Control", "no-cache");
@@ -993,7 +993,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
             .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(client.open(url)));
     URLConnection connection = client.open(url);
     connection.setRequestProperty("Pragma", "no-cache");
@@ -1025,7 +1025,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(seed.setBody("A"));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(client.open(url)));
 
     HttpURLConnection connection = client.open(url);
@@ -1046,7 +1046,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   @Test public void setIfModifiedSince() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection connection = client.open(url);
     connection.setIfModifiedSince(1393666200000L);
     assertEquals("A", readAscii(connection));
@@ -1076,8 +1076,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
 
     // The first request has no conditions.
     RecordedRequest request1 = server.takeRequest();
@@ -1091,7 +1091,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   @Test public void clientSuppliedConditionWithoutCachedResult() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    HttpURLConnection connection = client.open(server.url("/").url());
     String clientIfModifiedSince = formatDate(-24, TimeUnit.HOURS);
     connection.addRequestProperty("If-Modified-Since", clientIfModifiedSince);
     assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode());
@@ -1102,7 +1102,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection connection = client.open(url);
     connection.addRequestProperty("Authorization", "password");
     assertEquals("A", readAscii(connection));
@@ -1115,8 +1115,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/foo"))));
-    assertEquals("B", readAscii(client.open(server.getUrl("/bar"))));
+    assertEquals("A", readAscii(client.open(server.url("/foo").url())));
+    assertEquals("B", readAscii(client.open(server.url("/bar").url())));
   }
 
   @Test public void useCachesFalseDoesNotWriteToCache() throws Exception {
@@ -1124,10 +1124,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A").setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     connection.setUseCaches(false);
     assertEquals("A", readAscii(connection));
-    assertEquals("B", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("B", readAscii(client.open(server.url("/").url())));
   }
 
   @Test public void useCachesFalseDoesNotReadFromCache() throws Exception {
@@ -1135,8 +1135,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A").setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    URLConnection connection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    URLConnection connection = client.open(server.url("/").url());
     connection.setUseCaches(false);
     assertEquals("B", readAscii(connection));
   }
@@ -1164,9 +1164,9 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/a"))));
-    assertEquals("A", readAscii(client.open(server.getUrl("/a"))));
-    assertEquals("B", readAscii(client.open(server.getUrl("/b"))));
+    assertEquals("A", readAscii(client.open(server.url("/a").url())));
+    assertEquals("A", readAscii(client.open(server.url("/a").url())));
+    assertEquals("B", readAscii(client.open(server.url("/b").url())));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(1, server.takeRequest().getSequenceNumber());
@@ -1180,12 +1180,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
     server.enqueue(new MockResponse().setBody("C"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertEquals("B", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("C", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("B", readAscii(client.open(server.url("/").url())));
+    assertEquals("C", readAscii(client.open(server.url("/").url())));
     assertEquals(3, cache.getRequestCount());
     assertEquals(3, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
@@ -1198,12 +1198,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
     assertEquals(3, cache.getRequestCount());
     assertEquals(3, cache.getNetworkCount());
     assertEquals(2, cache.getHitCount());
@@ -1212,12 +1212,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   @Test public void statisticsFullCacheHit() throws Exception {
     server.enqueue(new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
     assertEquals(3, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(2, cache.getHitCount());
@@ -1229,7 +1229,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpURLConnection frConnection = client.open(url);
     frConnection.addRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(frConnection));
@@ -1245,7 +1245,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection connection1 = client.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(connection1));
@@ -1260,8 +1260,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
   }
 
   @Test public void varyMatchesAddedRequestHeaderField() throws Exception {
@@ -1270,8 +1270,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    URLConnection fooConnection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    URLConnection fooConnection = client.open(server.url("/").url());
     fooConnection.addRequestProperty("Foo", "bar");
     assertEquals("B", readAscii(fooConnection));
   }
@@ -1282,10 +1282,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URLConnection fooConnection = client.open(server.getUrl("/"));
+    URLConnection fooConnection = client.open(server.url("/").url());
     fooConnection.addRequestProperty("Foo", "bar");
     assertEquals("A", readAscii(fooConnection));
-    assertEquals("B", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("B", readAscii(client.open(server.url("/").url())));
   }
 
   @Test public void varyFieldsAreCaseInsensitive() throws Exception {
@@ -1294,7 +1294,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection connection1 = client.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(connection1));
@@ -1310,7 +1310,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection connection1 = client.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA");
     connection1.addRequestProperty("Accept-Charset", "UTF-8");
@@ -1330,7 +1330,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection frConnection = client.open(url);
     frConnection.addRequestProperty("Accept-Language", "fr-CA");
     frConnection.addRequestProperty("Accept-Charset", "UTF-8");
@@ -1349,7 +1349,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection connection1 = client.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA, fr-FR");
     connection1.addRequestProperty("Accept-Language", "en-US");
@@ -1367,7 +1367,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     URLConnection connection1 = client.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA, fr-FR");
     connection1.addRequestProperty("Accept-Language", "en-US");
@@ -1385,8 +1385,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    assertEquals("B", readAscii(client.open(server.getUrl("/"))));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("B", readAscii(client.open(server.url("/").url())));
   }
 
   @Test public void varyAndHttps() throws Exception {
@@ -1396,7 +1396,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     HttpsURLConnection connection1 = (HttpsURLConnection) client.open(url);
     connection1.setSSLSocketFactory(sslContext.getSocketFactory());
     connection1.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
@@ -1420,7 +1420,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         "Set-Cookie: a=SECOND; domain=" + server.getCookieDomain() + ";")
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(client.open(url)));
     assertCookies(url, "a=FIRST");
     assertEquals("A", readAscii(client.open(url)));
@@ -1435,11 +1435,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().addHeader("Allow: GET, HEAD, PUT")
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = client.open(server.getUrl("/"));
+    URLConnection connection1 = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("GET, HEAD", connection1.getHeaderField("Allow"));
 
-    URLConnection connection2 = client.open(server.getUrl("/"));
+    URLConnection connection2 = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("GET, HEAD, PUT", connection2.getHeaderField("Allow"));
   }
@@ -1452,11 +1452,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().addHeader("Transfer-Encoding: none")
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = client.open(server.getUrl("/"));
+    URLConnection connection1 = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("identity", connection1.getHeaderField("Transfer-Encoding"));
 
-    URLConnection connection2 = client.open(server.getUrl("/"));
+    URLConnection connection2 = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("identity", connection2.getHeaderField("Transfer-Encoding"));
   }
@@ -1468,11 +1468,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = client.open(server.getUrl("/"));
+    URLConnection connection1 = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("199 test danger", connection1.getHeaderField("Warning"));
 
-    URLConnection connection2 = client.open(server.getUrl("/"));
+    URLConnection connection2 = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals(null, connection2.getHeaderField("Warning"));
   }
@@ -1484,11 +1484,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = client.open(server.getUrl("/"));
+    URLConnection connection1 = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("299 test danger", connection1.getHeaderField("Warning"));
 
-    URLConnection connection2 = client.open(server.getUrl("/"));
+    URLConnection connection2 = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("299 test danger", connection2.getHeaderField("Warning"));
   }
@@ -1518,18 +1518,18 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
     server.enqueue(new MockResponse().setBody("B"));
 
     // cache miss; seed the cache
-    HttpURLConnection connection1 = client.open(server.getUrl("/a"));
+    HttpURLConnection connection1 = client.open(server.url("/a").url());
     assertEquals("A", readAscii(connection1));
     assertEquals(null, connection1.getHeaderField("Allow"));
 
     // conditional cache hit; update the cache
-    HttpURLConnection connection2 = client.open(server.getUrl("/a"));
+    HttpURLConnection connection2 = client.open(server.url("/a").url());
     assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());
     assertEquals("A", readAscii(connection2));
     assertEquals("GET, HEAD", connection2.getHeaderField("Allow"));
 
     // full cache hit
-    HttpURLConnection connection3 = client.open(server.getUrl("/a"));
+    HttpURLConnection connection3 = client.open(server.url("/a").url());
     assertEquals("A", readAscii(connection3));
     assertEquals("GET, HEAD", connection3.getHeaderField("Allow"));
 
@@ -1541,8 +1541,8 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    URLConnection connection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    URLConnection connection = client.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertEquals("A", readAscii(connection));
   }
@@ -1555,8 +1555,8 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    HttpURLConnection connection = client.open(server.url("/").url());
     assertEquals("B", readAscii(connection));
   }
 
@@ -1566,15 +1566,15 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
     server.enqueue(new MockResponse().setResponseCode(304));
 
-    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    HttpURLConnection connection = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection));
   }
 
   @Test public void responseSourceHeaderFetched() throws IOException {
     server.enqueue(new MockResponse().setBody("A"));
 
-    URLConnection connection = client.open(server.getUrl("/"));
+    URLConnection connection = client.open(server.url("/").url());
     assertEquals("A", readAscii(connection));
   }
 
@@ -1584,7 +1584,7 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
     Internal.instance.addLenient(headers, ": A");
     server.enqueue(new MockResponse().setHeaders(headers.build()).setBody("body"));
 
-    HttpURLConnection connection = client.open(server.getUrl("/"));
+    HttpURLConnection connection = client.open(server.url("/").url());
     assertEquals("A", connection.getHeaderField(""));
     assertEquals("body", readAscii(connection));
   }
@@ -1603,7 +1603,7 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
         .clearHeaders()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     String urlKey = Util.md5Hex(url.toString());
     String entryMetadata = ""
         + "" + url + "\n"
@@ -1684,7 +1684,7 @@ private void assertNotCached(MockResponse response) throws Exception {
     server.enqueue(response.setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(client.open(url)));
     assertEquals("B", readAscii(client.open(url)));
   }
@@ -1699,7 +1699,7 @@ private RecordedRequest assertConditionallyCached(MockResponse response) throws
     server.enqueue(response.setBody("B").setStatus("HTTP/1.1 200 B-OK"));
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 C-OK").setBody("C"));
 
-    URL valid = server.getUrl("/valid");
+    URL valid = server.url("/valid").url();
     HttpURLConnection connection1 = client.open(valid);
     assertEquals("A", readAscii(connection1));
     assertEquals(HttpURLConnection.HTTP_OK, connection1.getResponseCode());
@@ -1709,7 +1709,7 @@ private RecordedRequest assertConditionallyCached(MockResponse response) throws
     assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());
     assertEquals("A-OK", connection2.getResponseMessage());
 
-    URL invalid = server.getUrl("/invalid");
+    URL invalid = server.url("/invalid").url();
     HttpURLConnection connection3 = client.open(invalid);
     assertEquals("B", readAscii(connection3));
     assertEquals(HttpURLConnection.HTTP_OK, connection3.getResponseCode());
@@ -1727,7 +1727,7 @@ private void assertFullyCached(MockResponse response) throws Exception {
     server.enqueue(response.setBody("A"));
     server.enqueue(response.setBody("B"));
 
-    URL url = server.getUrl("/");
+    URL url = server.url("/").url();
     assertEquals("A", readAscii(client.open(url)));
     assertEquals("A", readAscii(client.open(url)));
   }
diff --git a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java b/okhttp-urlconnection/src/test/java/okhttp3/internal/huc/URLEncodingTest.java
similarity index 92%
rename from okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java
rename to okhttp-urlconnection/src/test/java/okhttp3/internal/huc/URLEncodingTest.java
index 5a4ed10ac2..5f05639106 100644
--- a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/internal/huc/URLEncodingTest.java
@@ -14,25 +14,22 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.huc;
+package okhttp3.internal.huc;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.InternalCache;
-import com.squareup.okhttp.internal.http.CacheRequest;
-import com.squareup.okhttp.internal.http.CacheStrategy;
+import okhttp3.OkHttpClient;
+import okhttp3.OkUrlFactory;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.Internal;
+import okhttp3.internal.InternalCache;
+import okhttp3.internal.http.CacheRequest;
+import okhttp3.internal.http.CacheStrategy;
 
 import java.io.IOException;
-import java.net.CacheResponse;
 import java.net.HttpURLConnection;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
-import java.util.List;
-import java.util.Map;
 import java.util.concurrent.atomic.AtomicReference;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -132,7 +129,7 @@ private URI backdoorUrlToUri(URL url) throws Exception {
     Internal.instance.setCache(client, new InternalCache() {
       @Override
       public Response get(Request request) throws IOException {
-        uriReference.set(request.uri());
+        uriReference.set(request.url().uri());
         throw new UnsupportedOperationException();
       }
 
diff --git a/okhttp-ws-tests/pom.xml b/okhttp-ws-tests/pom.xml
index f9f5d9a5b3..3fc750ab5b 100644
--- a/okhttp-ws-tests/pom.xml
+++ b/okhttp-ws-tests/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-ws-tests</artifactId>
@@ -14,13 +14,13 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-ws</artifactId>
       <version>${project.version}</version>
     </dependency>
 
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp-testing-support</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
@@ -32,7 +32,7 @@
       <scope>test</scope>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
       <scope>test</scope>
@@ -50,7 +50,7 @@
           </descriptorRefs>
           <archive>
             <manifest>
-              <mainClass>com.squareup.okhttp.ws.AutobahnTester</mainClass>
+              <mainClass>okhttp3.ws.AutobahnTester</mainClass>
             </manifest>
           </archive>
         </configuration>
diff --git a/okhttp-ws-tests/src/main/java/com/squareup/okhttp/ws/AutobahnTester.java b/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java
similarity index 94%
rename from okhttp-ws-tests/src/main/java/com/squareup/okhttp/ws/AutobahnTester.java
rename to okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java
index 08f7beb715..3401822360 100644
--- a/okhttp-ws-tests/src/main/java/com/squareup/okhttp/ws/AutobahnTester.java
+++ b/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.ws;
-
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.Version;
+package okhttp3.ws;
+
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.Version;
 import java.io.IOException;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
@@ -31,8 +31,8 @@
 import okio.Buffer;
 import okio.BufferedSource;
 
-import static com.squareup.okhttp.ws.WebSocket.BINARY;
-import static com.squareup.okhttp.ws.WebSocket.TEXT;
+import static okhttp3.ws.WebSocket.BINARY;
+import static okhttp3.ws.WebSocket.TEXT;
 
 /**
  * Exercises the web socket implementation against the
diff --git a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
similarity index 98%
rename from okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java
rename to okhttp-ws-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
index 8da32b3a6e..d9e0b9e7bb 100644
--- a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java
+++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.ws;
+package okhttp3.internal.ws;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.ws.WebSocketRecorder;
+import okhttp3.MediaType;
+import okhttp3.RequestBody;
+import okhttp3.ws.WebSocketRecorder;
 import java.io.Closeable;
 import java.io.IOException;
 import java.net.ProtocolException;
@@ -35,8 +35,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static com.squareup.okhttp.ws.WebSocket.BINARY;
-import static com.squareup.okhttp.ws.WebSocket.TEXT;
+import static okhttp3.ws.WebSocket.BINARY;
+import static okhttp3.ws.WebSocket.TEXT;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotEquals;
diff --git a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
similarity index 98%
rename from okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java
rename to okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
index 213bda5df8..602382ea8c 100644
--- a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java
+++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
@@ -13,23 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.ws;
+package okhttp3.internal.ws;
 
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.ws.WebSocketRecorder;
+import okhttp3.ResponseBody;
+import okhttp3.ws.WebSocketRecorder;
 import java.io.EOFException;
 import java.io.IOException;
 import java.net.ProtocolException;
 import java.util.Random;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.regex.Pattern;
+import okhttp3.ws.WebSocketRecorder.MessageDelegate;
 import okio.Buffer;
 import okio.BufferedSource;
 import okio.ByteString;
 import org.junit.After;
 import org.junit.Test;
 
-import static com.squareup.okhttp.ws.WebSocketRecorder.MessageDelegate;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
diff --git a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
similarity index 95%
rename from okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java
rename to okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
index 741b33f8c7..f7b80796f0 100644
--- a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketWriterTest.java
+++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.ws;
+package okhttp3.internal.ws;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -29,11 +29,11 @@
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
 
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_BINARY;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_TEXT;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_SHORT_MAX;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.toggleMask;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_BINARY;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_TEXT;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_SHORT_MAX;
+import static okhttp3.internal.ws.WebSocketProtocol.toggleMask;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
diff --git a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketCallTest.java b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java
similarity index 94%
rename from okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketCallTest.java
rename to okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java
index bbc908cd19..a139d04dcb 100644
--- a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketCallTest.java
+++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java
@@ -13,17 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.ws;
-
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.testing.RecordingHostnameVerifier;
+package okhttp3.ws;
+
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.testing.RecordingHostnameVerifier;
 import java.io.IOException;
 import java.net.ProtocolException;
 import java.util.Random;
@@ -36,7 +36,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import static com.squareup.okhttp.ws.WebSocket.TEXT;
+import static okhttp3.ws.WebSocket.TEXT;
 
 public final class WebSocketCallTest {
   @Rule public final MockWebServer server = new MockWebServer();
diff --git a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketRecorder.java b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java
similarity index 95%
rename from okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketRecorder.java
rename to okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java
index 3e82e05152..14a111d1b0 100644
--- a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketRecorder.java
+++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketRecorder.java
@@ -13,20 +13,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.ws;
+package okhttp3.ws;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.ws.WebSocketReader;
+import okhttp3.MediaType;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.ws.WebSocketReader;
 import java.io.IOException;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
 import okio.Buffer;
 
-import static com.squareup.okhttp.ws.WebSocket.BINARY;
-import static com.squareup.okhttp.ws.WebSocket.TEXT;
+import static okhttp3.ws.WebSocket.BINARY;
+import static okhttp3.ws.WebSocket.TEXT;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
diff --git a/okhttp-ws/pom.xml b/okhttp-ws/pom.xml
index abac825745..c28edd0c95 100644
--- a/okhttp-ws/pom.xml
+++ b/okhttp-ws/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp-ws</artifactId>
@@ -14,7 +14,7 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
@@ -26,7 +26,7 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
         <configuration>
-          <excludePackageNames>com.squareup.okhttp.internal.*</excludePackageNames>
+          <excludePackageNames>okhttp3.internal.*</excludePackageNames>
           <links>
             <link>http://square.github.io/okhttp/javadoc/</link>
           </links>
diff --git a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java b/okhttp-ws/src/main/java/okhttp3/internal/ws/RealWebSocket.java
similarity index 92%
rename from okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java
rename to okhttp-ws/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index ea55b5a858..2f80c1d710 100644
--- a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java
+++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.ws;
-
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.NamedRunnable;
-import com.squareup.okhttp.ws.WebSocket;
-import com.squareup.okhttp.ws.WebSocketListener;
+package okhttp3.internal.ws;
+
+import okhttp3.MediaType;
+import okhttp3.RequestBody;
+import okhttp3.ResponseBody;
+import okhttp3.internal.NamedRunnable;
+import okhttp3.ws.WebSocket;
+import okhttp3.ws.WebSocketListener;
 import java.io.IOException;
 import java.net.ProtocolException;
 import java.util.Random;
@@ -31,9 +31,9 @@
 import okio.BufferedSource;
 import okio.Okio;
 
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_BINARY;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_TEXT;
-import static com.squareup.okhttp.internal.ws.WebSocketReader.FrameCallback;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_BINARY;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_TEXT;
+import static okhttp3.internal.ws.WebSocketReader.FrameCallback;
 
 public abstract class RealWebSocket implements WebSocket {
   private static final int CLOSE_PROTOCOL_EXCEPTION = 1002;
diff --git a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketProtocol.java b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
similarity index 98%
rename from okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketProtocol.java
rename to okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
index 0778278edd..c01db03537 100644
--- a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketProtocol.java
+++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.ws;
+package okhttp3.internal.ws;
 
 public final class WebSocketProtocol {
   /** Magic value which must be appended to the key in a response header. */
diff --git a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java
similarity index 84%
rename from okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
rename to okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java
index d81785aa80..6d5f822257 100644
--- a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
+++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.ws;
+package okhttp3.internal.ws;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.ws.WebSocket;
+import okhttp3.MediaType;
+import okhttp3.ResponseBody;
+import okhttp3.ws.WebSocket;
 import java.io.EOFException;
 import java.io.IOException;
 import java.net.ProtocolException;
@@ -27,25 +27,25 @@
 import okio.Source;
 import okio.Timeout;
 
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B0_FLAG_FIN;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B0_FLAG_RSV1;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B0_FLAG_RSV2;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B0_FLAG_RSV3;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B0_MASK_OPCODE;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B1_FLAG_MASK;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B1_MASK_LENGTH;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_BINARY;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTINUATION;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTROL_CLOSE;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PING;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PONG;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_FLAG_CONTROL;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_TEXT;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_LONG;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_SHORT;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.toggleMask;
 import static java.lang.Integer.toHexString;
+import static okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_FIN;
+import static okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV1;
+import static okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV2;
+import static okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV3;
+import static okhttp3.internal.ws.WebSocketProtocol.B0_MASK_OPCODE;
+import static okhttp3.internal.ws.WebSocketProtocol.B1_FLAG_MASK;
+import static okhttp3.internal.ws.WebSocketProtocol.B1_MASK_LENGTH;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_BINARY;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTINUATION;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_CLOSE;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PING;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PONG;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_FLAG_CONTROL;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_TEXT;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_LONG;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_SHORT;
+import static okhttp3.internal.ws.WebSocketProtocol.toggleMask;
 
 /**
  * An <a href="http://tools.ietf.org/html/rfc6455">RFC 6455</a>-compatible WebSocket frame reader.
@@ -229,11 +229,11 @@ private void readMessageFrame() throws IOException {
         return type;
       }
 
-      @Override public long contentLength() throws IOException {
+      @Override public long contentLength() {
         return -1;
       }
 
-      @Override public BufferedSource source() throws IOException {
+      @Override public BufferedSource source() {
         return source;
       }
     };
diff --git a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketWriter.java b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
similarity index 89%
rename from okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketWriter.java
rename to okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
index feece7a765..d4d63a3bca 100644
--- a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketWriter.java
+++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.ws;
+package okhttp3.internal.ws;
 
 import java.io.IOException;
 import java.util.Random;
@@ -23,17 +23,17 @@
 import okio.Sink;
 import okio.Timeout;
 
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B0_FLAG_FIN;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.B1_FLAG_MASK;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTINUATION;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTROL_CLOSE;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PING;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PONG;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_LONG;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_SHORT;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.PAYLOAD_SHORT_MAX;
-import static com.squareup.okhttp.internal.ws.WebSocketProtocol.toggleMask;
+import static okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_FIN;
+import static okhttp3.internal.ws.WebSocketProtocol.B1_FLAG_MASK;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTINUATION;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_CLOSE;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PING;
+import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PONG;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_LONG;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_SHORT;
+import static okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_SHORT_MAX;
+import static okhttp3.internal.ws.WebSocketProtocol.toggleMask;
 
 /**
  * An <a href="http://tools.ietf.org/html/rfc6455">RFC 6455</a>-compatible WebSocket frame writer.
diff --git a/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocket.java b/okhttp-ws/src/main/java/okhttp3/ws/WebSocket.java
similarity index 95%
rename from okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocket.java
rename to okhttp-ws/src/main/java/okhttp3/ws/WebSocket.java
index a3eebe7d1b..20536c11e0 100644
--- a/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocket.java
+++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocket.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.ws;
+package okhttp3.ws;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.RequestBody;
+import okhttp3.MediaType;
+import okhttp3.RequestBody;
 import java.io.IOException;
 import okio.Buffer;
 
diff --git a/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketCall.java b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java
similarity index 91%
rename from okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketCall.java
rename to okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java
index 5950850ca4..a36a3cd57a 100644
--- a/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketCall.java
+++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java
@@ -13,18 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.ws;
-
-import com.squareup.okhttp.Call;
-import com.squareup.okhttp.Callback;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.http.StreamAllocation;
-import com.squareup.okhttp.internal.ws.RealWebSocket;
-import com.squareup.okhttp.internal.ws.WebSocketProtocol;
+package okhttp3.ws;
+
+import okhttp3.Call;
+import okhttp3.Callback;
+import okhttp3.OkHttpClient;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.Internal;
+import okhttp3.internal.Util;
+import okhttp3.internal.http.StreamAllocation;
+import okhttp3.internal.ws.RealWebSocket;
+import okhttp3.internal.ws.WebSocketProtocol;
 import java.io.IOException;
 import java.net.ProtocolException;
 import java.security.SecureRandom;
@@ -67,7 +68,7 @@ public static WebSocketCall create(OkHttpClient client, Request request) {
     // etc.) may incorrectly be reflected in the request when it is executed.
     client = client.clone();
     // Force HTTP/1.1 until the WebSocket over HTTP/2 version is finalized.
-    client.setProtocols(Collections.singletonList(com.squareup.okhttp.Protocol.HTTP_1_1));
+    client.setProtocols(Collections.singletonList(Protocol.HTTP_1_1));
 
     request = request.newBuilder()
         .header("Upgrade", "websocket")
@@ -158,7 +159,7 @@ private void createWebSocket(Response response, WebSocketListener listener) thro
   private static class StreamWebSocket extends RealWebSocket {
     static RealWebSocket create(StreamAllocation streamAllocation, Response response,
         Random random, WebSocketListener listener) {
-      String url = response.request().urlString();
+      String url = response.request().url().toString();
       ThreadPoolExecutor replyExecutor =
           new ThreadPoolExecutor(1, 1, 1, SECONDS, new LinkedBlockingDeque<Runnable>(),
               Util.threadFactory(String.format("OkHttp %s WebSocket", url), true));
diff --git a/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketListener.java b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketListener.java
similarity index 96%
rename from okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketListener.java
rename to okhttp-ws/src/main/java/okhttp3/ws/WebSocketListener.java
index 5a5a8b1a26..feb7e1fba8 100644
--- a/okhttp-ws/src/main/java/com/squareup/okhttp/ws/WebSocketListener.java
+++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketListener.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.ws;
+package okhttp3.ws;
 
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
 import java.io.IOException;
 import okio.Buffer;
 
diff --git a/okhttp/pom.xml b/okhttp/pom.xml
index 86b0240b95..01fd8200b4 100644
--- a/okhttp/pom.xml
+++ b/okhttp/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>okhttp</artifactId>
@@ -42,7 +42,7 @@
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
         <configuration>
-          <excludePackageNames>com.squareup.okhttp.internal:com.squareup.okhttp.internal.*</excludePackageNames>
+          <excludePackageNames>okhttp3.internal:okhttp3.internal.*</excludePackageNames>
           <links>
             <link>http://square.github.io/okio/</link>
           </links>
diff --git a/okhttp/src/main/java-templates/com/squareup/okhttp/internal/Version.java b/okhttp/src/main/java-templates/okhttp3/internal/Version.java
similarity index 95%
rename from okhttp/src/main/java-templates/com/squareup/okhttp/internal/Version.java
rename to okhttp/src/main/java-templates/okhttp3/internal/Version.java
index 59fece92bf..fce1c067c0 100644
--- a/okhttp/src/main/java-templates/com/squareup/okhttp/internal/Version.java
+++ b/okhttp/src/main/java-templates/okhttp3/internal/Version.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
 public final class Version {
   public static String userAgent() {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Authenticator.java b/okhttp/src/main/java/com/squareup/okhttp/Authenticator.java
deleted file mode 100644
index cb66dc6249..0000000000
--- a/okhttp/src/main/java/com/squareup/okhttp/Authenticator.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2013 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.okhttp;
-
-import java.io.IOException;
-import java.net.Proxy;
-
-/**
- * Responds to authentication challenges from the remote web or proxy server.
- */
-public interface Authenticator {
-  /**
-   * Returns a request that includes a credential to satisfy an authentication
-   * challenge in {@code response}. Returns null if the challenge cannot be
-   * satisfied. This method is called in response to an HTTP 401 unauthorized
-   * status code sent by the origin server.
-   *
-   * <p>Typical implementations will look up a credential and create a request
-   * derived from the initial request by setting the "Authorization" header.
-   * <pre>   {@code
-   *
-   *    String credential = Credentials.basic(...)
-   *    return response.request().newBuilder()
-   *        .header("Authorization", credential)
-   *        .build();
-   * }</pre>
-   */
-  Request authenticate(Proxy proxy, Response response) throws IOException;
-
-  /**
-   * Returns a request that includes a credential to satisfy an authentication
-   * challenge made by {@code response}. Returns null if the challenge cannot be
-   * satisfied. This method is called in response to an HTTP 407 unauthorized
-   * status code sent by the proxy server.
-   *
-   * <p>Typical implementations will look up a credential and create a request
-   * derived from the initial request by setting the "Proxy-Authorization"
-   * header. <pre>   {@code
-   *
-   *    String credential = Credentials.basic(...)
-   *    return response.request().newBuilder()
-   *        .header("Proxy-Authorization", credential)
-   *        .build();
-   * }</pre>
-   */
-  Request authenticateProxy(Proxy proxy, Response response) throws IOException;
-}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/FormEncodingBuilder.java b/okhttp/src/main/java/com/squareup/okhttp/FormEncodingBuilder.java
deleted file mode 100644
index f5134d9f77..0000000000
--- a/okhttp/src/main/java/com/squareup/okhttp/FormEncodingBuilder.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.okhttp;
-
-import okio.Buffer;
-
-/**
- * Fluent API to build <a href="http://www.w3.org/MarkUp/html-spec/html-spec_8.html#SEC8.2.1">HTML
- * 2.0</a>-compliant form data.
- */
-public final class FormEncodingBuilder {
-  private static final MediaType CONTENT_TYPE =
-      MediaType.parse("application/x-www-form-urlencoded");
-
-  private final Buffer content = new Buffer();
-
-  /** Add new key-value pair. */
-  public FormEncodingBuilder add(String name, String value) {
-    if (content.size() > 0) {
-      content.writeByte('&');
-    }
-    HttpUrl.canonicalize(content, name, 0, name.length(),
-        HttpUrl.FORM_ENCODE_SET, false, true, true);
-    content.writeByte('=');
-    HttpUrl.canonicalize(content, value, 0, value.length(),
-        HttpUrl.FORM_ENCODE_SET, false, true, true);
-    return this;
-  }
-
-  /** Add new key-value pair. */
-  public FormEncodingBuilder addEncoded(String name, String value) {
-    if (content.size() > 0) {
-      content.writeByte('&');
-    }
-    HttpUrl.canonicalize(content, name, 0, name.length(),
-        HttpUrl.FORM_ENCODE_SET, true, true, true);
-    content.writeByte('=');
-    HttpUrl.canonicalize(content, value, 0, value.length(),
-        HttpUrl.FORM_ENCODE_SET, true, true, true);
-    return this;
-  }
-
-  public RequestBody build() {
-    return RequestBody.create(CONTENT_TYPE, content.snapshot());
-  }
-}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java b/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java
deleted file mode 100644
index 5b160b6741..0000000000
--- a/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java
+++ /dev/null
@@ -1,300 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.okhttp;
-
-import com.squareup.okhttp.internal.Util;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-import okio.Buffer;
-import okio.BufferedSink;
-import okio.ByteString;
-
-/**
- * Fluent API to build <a href="http://www.ietf.org/rfc/rfc2387.txt">RFC
- * 2387</a>-compliant request bodies.
- */
-public final class MultipartBuilder {
-  /**
-   * The "mixed" subtype of "multipart" is intended for use when the body
-   * parts are independent and need to be bundled in a particular order. Any
-   * "multipart" subtypes that an implementation does not recognize must be
-   * treated as being of subtype "mixed".
-   */
-  public static final MediaType MIXED = MediaType.parse("multipart/mixed");
-
-  /**
-   * The "multipart/alternative" type is syntactically identical to
-   * "multipart/mixed", but the semantics are different. In particular, each
-   * of the body parts is an "alternative" version of the same information.
-   */
-  public static final MediaType ALTERNATIVE = MediaType.parse("multipart/alternative");
-
-  /**
-   * This type is syntactically identical to "multipart/mixed", but the
-   * semantics are different. In particular, in a digest, the default {@code
-   * Content-Type} value for a body part is changed from "text/plain" to
-   * "message/rfc822".
-   */
-  public static final MediaType DIGEST = MediaType.parse("multipart/digest");
-
-  /**
-   * This type is syntactically identical to "multipart/mixed", but the
-   * semantics are different. In particular, in a parallel entity, the order
-   * of body parts is not significant.
-   */
-  public static final MediaType PARALLEL = MediaType.parse("multipart/parallel");
-
-  /**
-   * The media-type multipart/form-data follows the rules of all multipart
-   * MIME data streams as outlined in RFC 2046. In forms, there are a series
-   * of fields to be supplied by the user who fills out the form. Each field
-   * has a name. Within a given form, the names are unique.
-   */
-  public static final MediaType FORM = MediaType.parse("multipart/form-data");
-
-  private static final byte[] COLONSPACE = { ':', ' ' };
-  private static final byte[] CRLF = { '\r', '\n' };
-  private static final byte[] DASHDASH = { '-', '-' };
-
-  private final ByteString boundary;
-  private MediaType type = MIXED;
-
-  // Parallel lists of nullable headers and non-null bodies.
-  private final List<Headers> partHeaders = new ArrayList<>();
-  private final List<RequestBody> partBodies = new ArrayList<>();
-
-  /** Creates a new multipart builder that uses a random boundary token. */
-  public MultipartBuilder() {
-    this(UUID.randomUUID().toString());
-  }
-
-  /**
-   * Creates a new multipart builder that uses {@code boundary} to separate
-   * parts. Prefer the no-argument constructor to defend against injection
-   * attacks.
-   */
-  public MultipartBuilder(String boundary) {
-    this.boundary = ByteString.encodeUtf8(boundary);
-  }
-
-  /**
-   * Set the MIME type. Expected values for {@code type} are {@link #MIXED} (the
-   * default), {@link #ALTERNATIVE}, {@link #DIGEST}, {@link #PARALLEL} and
-   * {@link #FORM}.
-   */
-  public MultipartBuilder type(MediaType type) {
-    if (type == null) {
-      throw new NullPointerException("type == null");
-    }
-    if (!type.type().equals("multipart")) {
-      throw new IllegalArgumentException("multipart != " + type);
-    }
-    this.type = type;
-    return this;
-  }
-
-  /** Add a part to the body. */
-  public MultipartBuilder addPart(RequestBody body) {
-    return addPart(null, body);
-  }
-
-  /** Add a part to the body. */
-  public MultipartBuilder addPart(Headers headers, RequestBody body) {
-    if (body == null) {
-      throw new NullPointerException("body == null");
-    }
-    if (headers != null && headers.get("Content-Type") != null) {
-      throw new IllegalArgumentException("Unexpected header: Content-Type");
-    }
-    if (headers != null && headers.get("Content-Length") != null) {
-      throw new IllegalArgumentException("Unexpected header: Content-Length");
-    }
-
-    partHeaders.add(headers);
-    partBodies.add(body);
-    return this;
-  }
-
-  /**
-   * Appends a quoted-string to a StringBuilder.
-   *
-   * <p>RFC 2388 is rather vague about how one should escape special characters
-   * in form-data parameters, and as it turns out Firefox and Chrome actually
-   * do rather different things, and both say in their comments that they're
-   * not really sure what the right approach is. We go with Chrome's behavior
-   * (which also experimentally seems to match what IE does), but if you
-   * actually want to have a good chance of things working, please avoid
-   * double-quotes, newlines, percent signs, and the like in your field names.
-   */
-  private static StringBuilder appendQuotedString(StringBuilder target, String key) {
-    target.append('"');
-    for (int i = 0, len = key.length(); i < len; i++) {
-      char ch = key.charAt(i);
-      switch (ch) {
-        case '\n':
-          target.append("%0A");
-          break;
-        case '\r':
-          target.append("%0D");
-          break;
-        case '"':
-          target.append("%22");
-          break;
-        default:
-          target.append(ch);
-          break;
-      }
-    }
-    target.append('"');
-    return target;
-  }
-
-  /** Add a form data part to the body. */
-  public MultipartBuilder addFormDataPart(String name, String value) {
-    return addFormDataPart(name, null, RequestBody.create(null, value));
-  }
-
-  /** Add a form data part to the body. */
-  public MultipartBuilder addFormDataPart(String name, String filename, RequestBody value) {
-    if (name == null) {
-      throw new NullPointerException("name == null");
-    }
-    StringBuilder disposition = new StringBuilder("form-data; name=");
-    appendQuotedString(disposition, name);
-
-    if (filename != null) {
-      disposition.append("; filename=");
-      appendQuotedString(disposition, filename);
-    }
-
-    return addPart(Headers.of("Content-Disposition", disposition.toString()), value);
-  }
-
-  /** Assemble the specified parts into a request body. */
-  public RequestBody build() {
-    if (partHeaders.isEmpty()) {
-      throw new IllegalStateException("Multipart body must have at least one part.");
-    }
-    return new MultipartRequestBody(type, boundary, partHeaders, partBodies);
-  }
-
-  private static final class MultipartRequestBody extends RequestBody {
-    private final ByteString boundary;
-    private final MediaType contentType;
-    private final List<Headers> partHeaders;
-    private final List<RequestBody> partBodies;
-    private long contentLength = -1L;
-
-    public MultipartRequestBody(MediaType type, ByteString boundary, List<Headers> partHeaders,
-        List<RequestBody> partBodies) {
-      if (type == null) throw new NullPointerException("type == null");
-
-      this.boundary = boundary;
-      this.contentType = MediaType.parse(type + "; boundary=" + boundary.utf8());
-      this.partHeaders = Util.immutableList(partHeaders);
-      this.partBodies = Util.immutableList(partBodies);
-    }
-
-    @Override public MediaType contentType() {
-      return contentType;
-    }
-
-    @Override public long contentLength() throws IOException {
-      long result = contentLength;
-      if (result != -1L) return result;
-      return contentLength = writeOrCountBytes(null, true);
-    }
-
-    /**
-     * Either writes this request to {@code sink} or measures its content length. We have one method
-     * do double-duty to make sure the counting and content are consistent, particularly when it
-     * comes to awkward operations like measuring the encoded length of header strings, or the
-     * length-in-digits of an encoded integer.
-     */
-    private long writeOrCountBytes(BufferedSink sink, boolean countBytes) throws IOException {
-      long byteCount = 0L;
-
-      Buffer byteCountBuffer = null;
-      if (countBytes) {
-        sink = byteCountBuffer = new Buffer();
-      }
-
-      for (int p = 0, partCount = partHeaders.size(); p < partCount; p++) {
-        Headers headers = partHeaders.get(p);
-        RequestBody body = partBodies.get(p);
-
-        sink.write(DASHDASH);
-        sink.write(boundary);
-        sink.write(CRLF);
-
-        if (headers != null) {
-          for (int h = 0, headerCount = headers.size(); h < headerCount; h++) {
-            sink.writeUtf8(headers.name(h))
-                .write(COLONSPACE)
-                .writeUtf8(headers.value(h))
-                .write(CRLF);
-          }
-        }
-
-        MediaType contentType = body.contentType();
-        if (contentType != null) {
-          sink.writeUtf8("Content-Type: ")
-              .writeUtf8(contentType.toString())
-              .write(CRLF);
-        }
-
-        long contentLength = body.contentLength();
-        if (contentLength != -1) {
-          sink.writeUtf8("Content-Length: ")
-              .writeDecimalLong(contentLength)
-              .write(CRLF);
-        } else if (countBytes) {
-          // We can't measure the body's size without the sizes of its components.
-          byteCountBuffer.clear();
-          return -1L;
-        }
-
-        sink.write(CRLF);
-
-        if (countBytes) {
-          byteCount += contentLength;
-        } else {
-          partBodies.get(p).writeTo(sink);
-        }
-
-        sink.write(CRLF);
-      }
-
-      sink.write(DASHDASH);
-      sink.write(boundary);
-      sink.write(DASHDASH);
-      sink.write(CRLF);
-
-      if (countBytes) {
-        byteCount += byteCountBuffer.size();
-        byteCountBuffer.clear();
-      }
-
-      return byteCount;
-    }
-
-    @Override public void writeTo(BufferedSink sink) throws IOException {
-      writeOrCountBytes(sink, false);
-    }
-  }
-}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/allocations/Connection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/allocations/Connection.java
deleted file mode 100644
index 0579c4204e..0000000000
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/allocations/Connection.java
+++ /dev/null
@@ -1,231 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.okhttp.internal.allocations;
-
-import com.squareup.okhttp.ConnectionPool;
-import com.squareup.okhttp.internal.Internal;
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-/**
- * Each connection can carry a varying number streams, depending on the underlying protocol being
- * used. HTTP/1.x connections can carry either zero or one streams. HTTP/2 connections can carry any
- * number of streams, dynamically configured with {@code SETTINGS_MAX_CONCURRENT_STREAMS}. A
- * connection currently carrying zero streams is an idle stream. We keep it alive because reusing an
- * existing connection is typically faster than establishing a new one.
- *
- * <p>When a single logical call requires multiple streams due to redirects or authorization
- * challenges, we prefer to use the same physical connection for all streams in the sequence. There
- * are potential performance and behavior consequences to this preference. To support this feature,
- * this class separates <i>allocations</i> from <i>streams</i>. An allocation is created by a call,
- * used for one or more streams, and then released. An allocated connection won't be stolen by
- * other calls while a redirect or authorization challenge is being handled.
- *
- * <p>When the maximum concurrent streams limit is reduced, some allocations will be rescinded.
- * Attempting to create new streams on these allocations will fail.
- *
- * <p>Note that an allocation may be released before its stream is completed. This is intended to
- * make bookkeeping easier for the caller: releasing the allocation as soon as the terminal stream
- * has been found. But only complete the stream once its data stream has been exhausted.
- */
-public final class Connection {
-  private final ConnectionPool pool;
-  private final List<StreamAllocationReference> allocations = new ArrayList<>();
-  private int allocationLimit = 1;
-  private boolean noNewAllocations;
-
-  /** Nanotime that this connection most recently became idle. */
-  long idleAt = Long.MAX_VALUE;
-
-  public Connection(ConnectionPool pool) {
-    this.pool = pool;
-  }
-
-  /**
-   * Attempts to reserves an allocation on this connection for a call. Returns null if no
-   * allocation is available.
-   */
-  public StreamAllocation reserve(String name) {
-    synchronized (pool) {
-      if (noNewAllocations || allocations.size() >= allocationLimit) return null;
-
-      StreamAllocation result = new StreamAllocation();
-      allocations.add(new StreamAllocationReference(result, name));
-      return result;
-    }
-  }
-
-  /**
-   * Release the reservation on {@code streamAllocation}. If a stream is currently active it may
-   * continue to use this connection until it is complete.
-   */
-  public void release(StreamAllocation streamAllocation) {
-    synchronized (pool) {
-      if (streamAllocation.released) throw new IllegalStateException("already released");
-
-      streamAllocation.released = true;
-      if (streamAllocation.stream == null) {
-        remove(streamAllocation);
-      }
-    }
-  }
-
-  private void remove(StreamAllocation streamAllocation) {
-    for (int i = 0, size = allocations.size(); i < size; i++) {
-      StreamAllocationReference weakReference = allocations.get(i);
-      if (weakReference.get() == streamAllocation) {
-        allocations.remove(i);
-
-        if (allocations.isEmpty()) {
-          idleAt = System.nanoTime();
-          // TODO(jwilson): schedule a cleanup thread if allocationLimit == 0.
-        }
-
-        return;
-      }
-    }
-    throw new IllegalArgumentException("unexpected allocation: " + streamAllocation);
-  }
-
-  /**
-   * Prevents new streams from being created on this connection. This is similar to setting the
-   * allocation limit to 0, except that this call is permanent.
-   */
-  public void noNewStreams() {
-    synchronized (pool) {
-      noNewAllocations = true;
-      for (int i = 0; i < allocations.size(); i++) {
-        allocations.get(i).rescind();
-      }
-    }
-  }
-
-  /**
-   * Sets the maximum number of streams that this connection will carry. Existing streams will not
-   * be interrupted, but existing allocations may be prevented from creating new streams.
-   */
-  public void setAllocationLimit(int allocationLimit) {
-    synchronized (pool) {
-      if (allocationLimit < 0) throw new IllegalArgumentException();
-      this.allocationLimit = allocationLimit;
-      for (int i = allocationLimit; i < allocations.size(); i++) {
-        allocations.get(i).rescind();
-      }
-    }
-  }
-
-  /**
-   * Look through the allocations held by this connection and confirm that they're all still
-   * alive. If they aren't, we have a leaked allocation. In which case we prevent this connection
-   * from taking new allocations so that it may gracefully shut down.
-   */
-  public void pruneLeakedAllocations() {
-    synchronized (pool) {
-      for (Iterator<StreamAllocationReference> i = allocations.iterator(); i.hasNext(); ) {
-        StreamAllocationReference reference = i.next();
-        if (reference.get() == null) {
-          Internal.logger.warning("Call " + reference.name
-              + " leaked a connection. Did you forget to close a response body?");
-          noNewAllocations = true;
-          i.remove();
-          if (allocations.isEmpty()) {
-            idleAt = System.nanoTime();
-            // TODO(jwilson): schedule a cleanup thread if allocationLimit == 0.
-          }
-        }
-      }
-    }
-  }
-
-  /** Returns the number of allocations currently held. */
-  int size() {
-    synchronized (pool) {
-      return allocations.size();
-    }
-  }
-
-  /** Links a stream to a connection. */
-  public final class StreamAllocation {
-    /** True if the call is done with this allocation. */
-    private boolean released;
-
-    /**
-     * Non-null if a stream is using this allocation. This may be non-null even after the
-     * allocation has been released, because the application may continue to read the response body
-     * long after redirects and authorization challenges have all been handled.
-     */
-    private Stream stream;
-
-    /**
-     * True if this allocation has been taken away by the connection. The current stream may
-     * proceed but further streams need new allocations.
-     */
-    private boolean rescinded;
-
-    private StreamAllocation() {
-    }
-
-    /** Returns a new stream, or null if this allocation has been rescinded. */
-    public Stream newStream(String name) {
-      synchronized (pool) {
-        if (this.stream != null || released) throw new IllegalStateException();
-        if (rescinded) return null;
-        this.stream = new Stream(name);
-        return this.stream;
-      }
-    }
-
-    public void streamComplete(Stream stream) {
-      synchronized (pool) {
-        if (stream == null || stream != this.stream) throw new IllegalArgumentException();
-        this.stream = null;
-        if (released) {
-          remove(this);
-        }
-      }
-    }
-  }
-
-  private static final class StreamAllocationReference extends WeakReference<StreamAllocation> {
-    private final String name;
-
-    public StreamAllocationReference(StreamAllocation streamAllocation, String name) {
-      super(streamAllocation);
-      this.name = name;
-    }
-
-    public void rescind() {
-      StreamAllocation streamAllocation = get();
-      if (streamAllocation != null) {
-        streamAllocation.rescinded = true;
-      }
-    }
-  }
-
-  public static class Stream {
-    public final String name;
-
-    public Stream(String name) {
-      this.name = name;
-    }
-
-    @Override public String toString() {
-      return name;
-    }
-  }
-}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/AuthenticatorAdapter.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AuthenticatorAdapter.java
deleted file mode 100644
index 8d884105d0..0000000000
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/AuthenticatorAdapter.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (C) 2013 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.Authenticator;
-import com.squareup.okhttp.Challenge;
-import com.squareup.okhttp.Credentials;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import java.io.IOException;
-import java.net.Authenticator.RequestorType;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.PasswordAuthentication;
-import java.net.Proxy;
-import java.util.List;
-
-/** Adapts {@link java.net.Authenticator} to {@link com.squareup.okhttp.Authenticator}. */
-public final class AuthenticatorAdapter implements Authenticator {
-  /** Uses the global authenticator to get the password. */
-  public static final Authenticator INSTANCE = new AuthenticatorAdapter();
-
-  @Override public Request authenticate(Proxy proxy, Response response) throws IOException {
-    List<Challenge> challenges = response.challenges();
-    Request request = response.request();
-    HttpUrl url = request.httpUrl();
-    for (int i = 0, size = challenges.size(); i < size; i++) {
-      Challenge challenge = challenges.get(i);
-      if (!"Basic".equalsIgnoreCase(challenge.getScheme())) continue;
-
-      PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(
-          url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(),
-          challenge.getRealm(), challenge.getScheme(), url.url(), RequestorType.SERVER);
-      if (auth == null) continue;
-
-      String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));
-      return request.newBuilder()
-          .header("Authorization", credential)
-          .build();
-    }
-    return null;
-
-  }
-
-  @Override public Request authenticateProxy(Proxy proxy, Response response) throws IOException {
-    List<Challenge> challenges = response.challenges();
-    Request request = response.request();
-    HttpUrl url = request.httpUrl();
-    for (int i = 0, size = challenges.size(); i < size; i++) {
-      Challenge challenge = challenges.get(i);
-      if (!"Basic".equalsIgnoreCase(challenge.getScheme())) continue;
-
-      InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();
-      PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(
-          proxyAddress.getHostName(), getConnectToInetAddress(proxy, url), proxyAddress.getPort(),
-          url.scheme(), challenge.getRealm(), challenge.getScheme(), url.url(),
-          RequestorType.PROXY);
-      if (auth == null) continue;
-
-      String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));
-      return request.newBuilder()
-          .header("Proxy-Authorization", credential)
-          .build();
-    }
-    return null;
-  }
-
-  private InetAddress getConnectToInetAddress(Proxy proxy, HttpUrl url) throws IOException {
-    return (proxy != null && proxy.type() != Proxy.Type.DIRECT)
-        ? ((InetSocketAddress) proxy.address()).getAddress()
-        : InetAddress.getByName(url.host());
-  }
-}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Address.java b/okhttp/src/main/java/okhttp3/Address.java
similarity index 78%
rename from okhttp/src/main/java/com/squareup/okhttp/Address.java
rename to okhttp/src/main/java/okhttp3/Address.java
index 9efdf28050..51f2452184 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Address.java
+++ b/okhttp/src/main/java/okhttp3/Address.java
@@ -13,17 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
 import java.net.Proxy;
 import java.net.ProxySelector;
 import java.util.List;
 import javax.net.SocketFactory;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.internal.Util;
 
-import static com.squareup.okhttp.internal.Util.equal;
+import static okhttp3.internal.Util.equal;
 
 /**
  * A specification for a connection to an origin server. For simple connections,
@@ -39,7 +39,7 @@
   final HttpUrl url;
   final Dns dns;
   final SocketFactory socketFactory;
-  final Authenticator authenticator;
+  final Authenticator proxyAuthenticator;
   final List<Protocol> protocols;
   final List<ConnectionSpec> connectionSpecs;
   final ProxySelector proxySelector;
@@ -50,7 +50,7 @@
 
   public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory,
       SSLSocketFactory sslSocketFactory, HostnameVerifier hostnameVerifier,
-      CertificatePinner certificatePinner, Authenticator authenticator, Proxy proxy,
+      CertificatePinner certificatePinner, Authenticator proxyAuthenticator, Proxy proxy,
       List<Protocol> protocols, List<ConnectionSpec> connectionSpecs, ProxySelector proxySelector) {
     this.url = new HttpUrl.Builder()
         .scheme(sslSocketFactory != null ? "https" : "http")
@@ -64,8 +64,10 @@ public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory
     if (socketFactory == null) throw new IllegalArgumentException("socketFactory == null");
     this.socketFactory = socketFactory;
 
-    if (authenticator == null) throw new IllegalArgumentException("authenticator == null");
-    this.authenticator = authenticator;
+    if (proxyAuthenticator == null) {
+      throw new IllegalArgumentException("proxyAuthenticator == null");
+    }
+    this.proxyAuthenticator = proxyAuthenticator;
 
     if (protocols == null) throw new IllegalArgumentException("protocols == null");
     this.protocols = Util.immutableList(protocols);
@@ -90,51 +92,30 @@ public HttpUrl url() {
     return url;
   }
 
-  /**
-   * Returns the hostname of the origin server.
-   *
-   * @deprecated prefer {@code address.url().host()}.
-   */
-  @Deprecated
-  public String getUriHost() {
-    return url.host();
-  }
-
-  /**
-   * Returns the port of the origin server; typically 80 or 443. Unlike
-   * may {@code getPort()} accessors, this method never returns -1.
-   *
-   * @deprecated prefer {@code address.url().port()}.
-   */
-  @Deprecated
-  public int getUriPort() {
-    return url.port();
-  }
-
   /** Returns the service that will be used to resolve IP addresses for hostnames. */
-  public Dns getDns() {
+  public Dns dns() {
     return dns;
   }
 
   /** Returns the socket factory for new connections. */
-  public SocketFactory getSocketFactory() {
+  public SocketFactory socketFactory() {
     return socketFactory;
   }
 
-  /** Returns the client's authenticator. */
-  public Authenticator getAuthenticator() {
-    return authenticator;
+  /** Returns the client's proxy authenticator. */
+  public Authenticator proxyAuthenticator() {
+    return proxyAuthenticator;
   }
 
   /**
    * Returns the protocols the client supports. This method always returns a
    * non-null list that contains minimally {@link Protocol#HTTP_1_1}.
    */
-  public List<Protocol> getProtocols() {
+  public List<Protocol> protocols() {
     return protocols;
   }
 
-  public List<ConnectionSpec> getConnectionSpecs() {
+  public List<ConnectionSpec> connectionSpecs() {
     return connectionSpecs;
   }
 
@@ -142,30 +123,30 @@ public Authenticator getAuthenticator() {
    * Returns this address's proxy selector. Only used if the proxy is null. If none of this
    * selector's proxies are reachable, a direct connection will be attempted.
    */
-  public ProxySelector getProxySelector() {
+  public ProxySelector proxySelector() {
     return proxySelector;
   }
 
   /**
    * Returns this address's explicitly-specified HTTP proxy, or null to
-   * delegate to the {@linkplain #getProxySelector proxy selector}.
+   * delegate to the {@linkplain #proxySelector proxy selector}.
    */
-  public Proxy getProxy() {
+  public Proxy proxy() {
     return proxy;
   }
 
   /** Returns the SSL socket factory, or null if this is not an HTTPS address. */
-  public SSLSocketFactory getSslSocketFactory() {
+  public SSLSocketFactory sslSocketFactory() {
     return sslSocketFactory;
   }
 
   /** Returns the hostname verifier, or null if this is not an HTTPS address. */
-  public HostnameVerifier getHostnameVerifier() {
+  public HostnameVerifier hostnameVerifier() {
     return hostnameVerifier;
   }
 
   /** Returns this address's certificate pinner, or null if this is not an HTTPS address. */
-  public CertificatePinner getCertificatePinner() {
+  public CertificatePinner certificatePinner() {
     return certificatePinner;
   }
 
@@ -174,7 +155,7 @@ public CertificatePinner getCertificatePinner() {
       Address that = (Address) other;
       return this.url.equals(that.url)
           && this.dns.equals(that.dns)
-          && this.authenticator.equals(that.authenticator)
+          && this.proxyAuthenticator.equals(that.proxyAuthenticator)
           && this.protocols.equals(that.protocols)
           && this.connectionSpecs.equals(that.connectionSpecs)
           && this.proxySelector.equals(that.proxySelector)
@@ -190,7 +171,7 @@ public CertificatePinner getCertificatePinner() {
     int result = 17;
     result = 31 * result + url.hashCode();
     result = 31 * result + dns.hashCode();
-    result = 31 * result + authenticator.hashCode();
+    result = 31 * result + proxyAuthenticator.hashCode();
     result = 31 * result + protocols.hashCode();
     result = 31 * result + connectionSpecs.hashCode();
     result = 31 * result + proxySelector.hashCode();
diff --git a/okhttp/src/main/java/okhttp3/Authenticator.java b/okhttp/src/main/java/okhttp3/Authenticator.java
new file mode 100644
index 0000000000..01568038be
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/Authenticator.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3;
+
+import java.io.IOException;
+
+/**
+ * Responds to an authentication challenge from either a remote web server or a proxy server.
+ * Implementations may either attempt to satisfy the challenge by returning a request that includes
+ * an authorization header, or they may refuse the challenge by returning null. In this case the
+ * unauthenticated response will be returned to the caller that triggered it.
+ *
+ * <p>When authentication is requested by an origin server, the response code is 401 and the
+ * implementation should respond with a new request that sets the "Authorization" header.
+ * <pre>   {@code
+ *
+ *    String credential = Credentials.basic(...)
+ *    return response.request().newBuilder()
+ *        .header("Authorization", credential)
+ *        .build();
+ * }</pre>
+ *
+ * <p>Whn authentication is requested by a proxy server, the response code is 407 and the
+ * implementation should respond with a new request that sets the "Proxy-Authorization" header.
+ *  <pre>   {@code
+ *
+ *    String credential = Credentials.basic(...)
+ *    return response.request().newBuilder()
+ *        .header("Proxy-Authorization", credential)
+ *        .build();
+ * }</pre>
+ *
+ * <p>Applications may configure OkHttp with an authenticator for origin servers, or proxy servers,
+ * or both.
+ */
+public interface Authenticator {
+  /**
+   * Returns a request that includes a credential to satisfy an authentication challenge in {@code
+   * response}. Returns null if the challenge cannot be satisfied.
+   */
+  Request authenticate(Route route, Response response) throws IOException;
+}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/Cache.java
rename to okhttp/src/main/java/okhttp3/Cache.java
index dcf363486e..14488c9a29 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp;
-
-import com.squareup.okhttp.internal.DiskLruCache;
-import com.squareup.okhttp.internal.InternalCache;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.http.CacheRequest;
-import com.squareup.okhttp.internal.http.CacheStrategy;
-import com.squareup.okhttp.internal.http.HttpMethod;
-import com.squareup.okhttp.internal.http.OkHeaders;
-import com.squareup.okhttp.internal.http.StatusLine;
-import com.squareup.okhttp.internal.io.FileSystem;
+package okhttp3;
+
+import okhttp3.internal.DiskLruCache;
+import okhttp3.internal.InternalCache;
+import okhttp3.internal.Util;
+import okhttp3.internal.http.CacheRequest;
+import okhttp3.internal.http.CacheStrategy;
+import okhttp3.internal.http.HttpMethod;
+import okhttp3.internal.http.OkHeaders;
+import okhttp3.internal.http.StatusLine;
+import okhttp3.internal.io.FileSystem;
 import java.io.File;
 import java.io.IOException;
 import java.security.cert.Certificate;
@@ -173,7 +173,7 @@ public Cache(File directory, long maxSize) {
   }
 
   private static String urlToKey(Request request) {
-    return Util.md5Hex(request.urlString());
+    return Util.md5Hex(request.url().toString());
   }
 
   Response get(Request request) {
@@ -197,7 +197,7 @@ Response get(Request request) {
       return null;
     }
 
-    Response response = entry.response(request, snapshot);
+    Response response = entry.response(snapshot);
 
     if (!entry.matches(request, response)) {
       Util.closeQuietly(response.body());
@@ -551,7 +551,8 @@ public Entry(Source in) throws IOException {
           if (blank.length() > 0) {
             throw new IOException("expected \"\" but was \"" + blank + "\"");
           }
-          String cipherSuite = source.readUtf8LineStrict();
+          String cipherSuiteString = source.readUtf8LineStrict();
+          CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);
           List<Certificate> peerCertificates = readCertificateList(source);
           List<Certificate> localCertificates = readCertificateList(source);
           handshake = Handshake.get(cipherSuite, peerCertificates, localCertificates);
@@ -564,7 +565,7 @@ public Entry(Source in) throws IOException {
     }
 
     public Entry(Response response) {
-      this.url = response.request().urlString();
+      this.url = response.request().url().toString();
       this.varyHeaders = OkHeaders.varyHeaders(response);
       this.requestMethod = response.request().method();
       this.protocol = response.protocol();
@@ -603,7 +604,7 @@ public void writeTo(DiskLruCache.Editor editor) throws IOException {
 
       if (isHttps()) {
         sink.writeByte('\n');
-        sink.writeUtf8(handshake.cipherSuite());
+        sink.writeUtf8(handshake.cipherSuite().javaName());
         sink.writeByte('\n');
         writeCertList(sink, handshake.peerCertificates());
         writeCertList(sink, handshake.localCertificates());
@@ -651,12 +652,12 @@ private void writeCertList(BufferedSink sink, List<Certificate> certificates)
     }
 
     public boolean matches(Request request, Response response) {
-      return url.equals(request.urlString())
+      return url.equals(request.url().toString())
           && requestMethod.equals(request.method())
           && OkHeaders.varyMatches(response, varyHeaders, request);
     }
 
-    public Response response(Request request, DiskLruCache.Snapshot snapshot) {
+    public Response response(DiskLruCache.Snapshot snapshot) {
       String contentType = responseHeaders.get("Content-Type");
       String contentLength = responseHeaders.get("Content-Length");
       Request cacheRequest = new Request.Builder()
diff --git a/okhttp/src/main/java/com/squareup/okhttp/CacheControl.java b/okhttp/src/main/java/okhttp3/CacheControl.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/CacheControl.java
rename to okhttp/src/main/java/okhttp3/CacheControl.java
index 2ee8982b0c..3f3bd166a1 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/CacheControl.java
+++ b/okhttp/src/main/java/okhttp3/CacheControl.java
@@ -1,6 +1,6 @@
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.http.HeaderParser;
+import okhttp3.internal.http.HeaderParser;
 import java.util.concurrent.TimeUnit;
 
 /**
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Call.java b/okhttp/src/main/java/okhttp3/Call.java
similarity index 94%
rename from okhttp/src/main/java/com/squareup/okhttp/Call.java
rename to okhttp/src/main/java/okhttp3/Call.java
index 651bd0de94..78804a9f5b 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Call.java
+++ b/okhttp/src/main/java/okhttp3/Call.java
@@ -13,19 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.NamedRunnable;
-import com.squareup.okhttp.internal.http.HttpEngine;
-import com.squareup.okhttp.internal.http.RequestException;
-import com.squareup.okhttp.internal.http.RouteException;
-import com.squareup.okhttp.internal.http.StreamAllocation;
+import okhttp3.internal.NamedRunnable;
+import okhttp3.internal.http.HttpEngine;
+import okhttp3.internal.http.RequestException;
+import okhttp3.internal.http.RouteException;
+import okhttp3.internal.http.StreamAllocation;
 import java.io.IOException;
 import java.net.ProtocolException;
 import java.util.logging.Level;
 
-import static com.squareup.okhttp.internal.Internal.logger;
-import static com.squareup.okhttp.internal.http.HttpEngine.MAX_FOLLOW_UPS;
+import static okhttp3.internal.Internal.logger;
+import static okhttp3.internal.http.HttpEngine.MAX_FOLLOW_UPS;
 
 /**
  * A call is a request that has been prepared for execution. A call can be
@@ -140,13 +140,13 @@ public boolean isCanceled() {
     private final boolean forWebSocket;
 
     private AsyncCall(Callback responseCallback, boolean forWebSocket) {
-      super("OkHttp %s", originalRequest.urlString());
+      super("OkHttp %s", originalRequest.url().toString());
       this.responseCallback = responseCallback;
       this.forWebSocket = forWebSocket;
     }
 
     String host() {
-      return originalRequest.httpUrl().host();
+      return originalRequest.url().host();
     }
 
     Request request() {
@@ -196,7 +196,7 @@ Call get() {
    */
   private String toLoggableString() {
     String string = canceled ? "canceled call" : "call";
-    HttpUrl redactedUrl = originalRequest.httpUrl().resolve("/...");
+    HttpUrl redactedUrl = originalRequest.url().resolve("/...");
     return string + " to " + redactedUrl;
   }
 
@@ -335,7 +335,7 @@ Response getResponse(Request request, boolean forWebSocket) throws IOException {
         throw new ProtocolException("Too many follow-up requests: " + followUpCount);
       }
 
-      if (!engine.sameConnection(followUp.httpUrl())) {
+      if (!engine.sameConnection(followUp.url())) {
         streamAllocation.release();
         streamAllocation = null;
       }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Callback.java b/okhttp/src/main/java/okhttp3/Callback.java
similarity index 98%
rename from okhttp/src/main/java/com/squareup/okhttp/Callback.java
rename to okhttp/src/main/java/okhttp3/Callback.java
index d86960fe05..6c267364eb 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Callback.java
+++ b/okhttp/src/main/java/okhttp3/Callback.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java b/okhttp/src/main/java/okhttp3/CertificatePinner.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
rename to okhttp/src/main/java/okhttp3/CertificatePinner.java
index 1b7bbb0ca7..78f774232d 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.security.cert.Certificate;
 import java.security.cert.X509Certificate;
 import java.util.Arrays;
@@ -75,10 +75,10 @@
  *     sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=: CN=AddTrust External CA Root
  *   Pinned certificates for publicobject.com:
  *     sha1/AAAAAAAAAAAAAAAAAAAAAAAAAAA=
- *   at com.squareup.okhttp.CertificatePinner.check(CertificatePinner.java)
- *   at com.squareup.okhttp.Connection.upgradeToTls(Connection.java)
- *   at com.squareup.okhttp.Connection.connect(Connection.java)
- *   at com.squareup.okhttp.Connection.connectAndSetOwner(Connection.java)
+ *   at okhttp3.CertificatePinner.check(CertificatePinner.java)
+ *   at okhttp3.Connection.upgradeToTls(Connection.java)
+ *   at okhttp3.Connection.connect(Connection.java)
+ *   at okhttp3.Connection.connectAndSetOwner(Connection.java)
  * }</pre>
  *
  * Follow up by pasting the public key hashes from the exception into the
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Challenge.java b/okhttp/src/main/java/okhttp3/Challenge.java
similarity index 85%
rename from okhttp/src/main/java/com/squareup/okhttp/Challenge.java
rename to okhttp/src/main/java/okhttp3/Challenge.java
index a1ef7145a0..f4bb369c45 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Challenge.java
+++ b/okhttp/src/main/java/okhttp3/Challenge.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import static com.squareup.okhttp.internal.Util.equal;
+import okhttp3.internal.Util;
 
 /** An RFC 2617 challenge. */
 public final class Challenge {
@@ -28,19 +28,19 @@ public Challenge(String scheme, String realm) {
   }
 
   /** Returns the authentication scheme, like {@code Basic}. */
-  public String getScheme() {
+  public String scheme() {
     return scheme;
   }
 
   /** Returns the protection space. */
-  public String getRealm() {
+  public String realm() {
     return realm;
   }
 
   @Override public boolean equals(Object o) {
     return o instanceof Challenge
-        && equal(scheme, ((Challenge) o).scheme)
-        && equal(realm, ((Challenge) o).realm);
+        && Util.equal(scheme, ((Challenge) o).scheme)
+        && Util.equal(realm, ((Challenge) o).realm);
   }
 
   @Override public int hashCode() {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/CipherSuite.java b/okhttp/src/main/java/okhttp3/CipherSuite.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/CipherSuite.java
rename to okhttp/src/main/java/okhttp3/CipherSuite.java
index 13344578be..ed4167c981 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/CipherSuite.java
+++ b/okhttp/src/main/java/okhttp3/CipherSuite.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import static java.lang.Integer.MAX_VALUE;
 
@@ -367,6 +367,15 @@ private CipherSuite(
     this.javaName = javaName;
   }
 
+  /**
+   * Returns the Java name of this cipher suite. For some older cipher suites the Java name has the
+   * prefix {@code SSL_}, causing the Java name to be different from the {@linkplain #name() enum
+   * name} which is always prefixed {@code TLS_}.
+   */
+  public String javaName() {
+    return javaName;
+  }
+
   public static CipherSuite forJavaName(String javaName) {
     return javaName.startsWith("SSL_")
         ? valueOf("TLS_" + javaName.substring(4))
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Connection.java b/okhttp/src/main/java/okhttp3/Connection.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/Connection.java
rename to okhttp/src/main/java/okhttp3/Connection.java
index 203b510c53..20e4564823 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Connection.java
+++ b/okhttp/src/main/java/okhttp3/Connection.java
@@ -14,7 +14,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.net.Socket;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java b/okhttp/src/main/java/okhttp3/ConnectionPool.java
similarity index 92%
rename from okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
rename to okhttp/src/main/java/okhttp3/ConnectionPool.java
index a51569d89a..aefb4e2190 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java
@@ -14,13 +14,13 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.RouteDatabase;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.http.StreamAllocation;
-import com.squareup.okhttp.internal.io.RealConnection;
+import okhttp3.internal.Internal;
+import okhttp3.internal.RouteDatabase;
+import okhttp3.internal.Util;
+import okhttp3.internal.http.StreamAllocation;
+import okhttp3.internal.io.RealConnection;
 import java.lang.ref.Reference;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -34,7 +34,7 @@
 
 /**
  * Manages reuse of HTTP and SPDY connections for reduced network latency. HTTP
- * requests that share the same {@link com.squareup.okhttp.Address} may share a
+ * requests that share the same {@link Address} may share a
  * {@link Connection}. This class implements the policy of which connections to
  * keep open for future use.
  *
@@ -147,12 +147,6 @@ public synchronized int getConnectionCount() {
     return connections.size();
   }
 
-  /** @deprecated Use {@link #getMultiplexedConnectionCount()}. */
-  @Deprecated
-  public synchronized int getSpdyConnectionCount() {
-    return getMultiplexedConnectionCount();
-  }
-
   /** Returns total number of multiplexed connections in the pool. */
   public synchronized int getMultiplexedConnectionCount() {
     int total = 0;
@@ -168,7 +162,8 @@ public synchronized int getHttpConnectionCount() {
   }
 
   /** Returns a recycled connection to {@code address}, or null if no such connection exists. */
-  public synchronized Connection get(Address address, StreamAllocation streamAllocation) {
+  RealConnection get(Address address, StreamAllocation streamAllocation) {
+    assert (Thread.holdsLock(this));
     for (RealConnection connection : connections) {
       // TODO(jwilson): this is awkward. We're already holding a lock on 'this', and
       //     connection.allocationLimit() may also lock the FramedConnection.
@@ -182,8 +177,8 @@ public synchronized Connection get(Address address, StreamAllocation streamAlloc
     return null;
   }
 
-  // TODO(jwilson): reduce visibility.
-  public synchronized void put(RealConnection connection) {
+  void put(RealConnection connection) {
+    assert (Thread.holdsLock(this));
     if (connections.isEmpty()) {
       executor.execute(cleanupRunnable);
     }
@@ -194,8 +189,8 @@ public synchronized void put(RealConnection connection) {
    * Notify this pool that {@code connection} has become idle. Returns true if the connection
    * has been removed from the pool and should be closed.
    */
-  // TODO(jwilson): reduce visibility.
-  public synchronized boolean connectionBecameIdle(RealConnection connection) {
+  boolean connectionBecameIdle(RealConnection connection) {
+    assert (Thread.holdsLock(this));
     if (connection.noNewStreams || maxIdleConnections == 0) {
       connections.remove(connection);
       return true;
@@ -301,7 +296,7 @@ private int pruneAndGetAllocationCount(RealConnection connection, long now) {
       }
 
       // We've discovered a leaked allocation. This is an application bug.
-      Internal.logger.warning("A connection to " + connection.getRoute().getAddress().url()
+      Internal.logger.warning("A connection to " + connection.getRoute().address().url()
           + " was leaked. Did you forget to close a response body?");
       references.remove(i);
       connection.noNewStreams = true;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java b/okhttp/src/main/java/okhttp3/ConnectionSpec.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java
rename to okhttp/src/main/java/okhttp3/ConnectionSpec.java
index af63afdb36..9b7569495e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java
@@ -13,15 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
 import java.util.Arrays;
 import java.util.List;
 import javax.net.ssl.SSLSocket;
 
-import static com.squareup.okhttp.internal.Util.concat;
-import static com.squareup.okhttp.internal.Util.contains;
+import static okhttp3.internal.Util.concat;
+import static okhttp3.internal.Util.contains;
+import static okhttp3.internal.Util.immutableList;
+import static okhttp3.internal.Util.intersect;
 
 /**
  * Specifies configuration for the socket connection that HTTP traffic travels through. For {@code
@@ -103,7 +104,7 @@ public boolean isTls() {
     for (int i = 0; i < cipherSuites.length; i++) {
       result[i] = CipherSuite.forJavaName(cipherSuites[i]);
     }
-    return Util.immutableList(result);
+    return immutableList(result);
   }
 
   /**
@@ -117,7 +118,7 @@ public boolean isTls() {
     for (int i = 0; i < tlsVersions.length; i++) {
       result[i] = TlsVersion.forJavaName(tlsVersions[i]);
     }
-    return Util.immutableList(result);
+    return immutableList(result);
   }
 
   public boolean supportsTlsExtensions() {
@@ -142,10 +143,10 @@ void apply(SSLSocket sslSocket, boolean isFallback) {
    */
   private ConnectionSpec supportedSpec(SSLSocket sslSocket, boolean isFallback) {
     String[] cipherSuitesIntersection = cipherSuites != null
-        ? Util.intersect(String.class, cipherSuites, sslSocket.getEnabledCipherSuites())
+        ? intersect(String.class, cipherSuites, sslSocket.getEnabledCipherSuites())
         : sslSocket.getEnabledCipherSuites();
     String[] tlsVersionsIntersection = tlsVersions != null
-        ? Util.intersect(String.class, tlsVersions, sslSocket.getEnabledProtocols())
+        ? intersect(String.class, tlsVersions, sslSocket.getEnabledProtocols())
         : sslSocket.getEnabledProtocols();
 
     // In accordance with https://tools.ietf.org/html/draft-ietf-tls-downgrade-scsv-00
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Credentials.java b/okhttp/src/main/java/okhttp3/Credentials.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/Credentials.java
rename to okhttp/src/main/java/okhttp3/Credentials.java
index 92c128f568..9be4e6a22f 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Credentials.java
+++ b/okhttp/src/main/java/okhttp3/Credentials.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.UnsupportedEncodingException;
 import okio.ByteString;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java b/okhttp/src/main/java/okhttp3/Dispatcher.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
rename to okhttp/src/main/java/okhttp3/Dispatcher.java
index a669b94d49..4c1dc0bda4 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.Call.AsyncCall;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.http.HttpEngine;
+import okhttp3.Call.AsyncCall;
+import okhttp3.internal.Util;
+import okhttp3.internal.http.HttpEngine;
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.Iterator;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Dns.java b/okhttp/src/main/java/okhttp3/Dns.java
similarity index 98%
rename from okhttp/src/main/java/com/squareup/okhttp/Dns.java
rename to okhttp/src/main/java/okhttp3/Dns.java
index 1ebd392da1..37cb31e316 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Dns.java
+++ b/okhttp/src/main/java/okhttp3/Dns.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
diff --git a/okhttp/src/main/java/okhttp3/FormBody.java b/okhttp/src/main/java/okhttp3/FormBody.java
new file mode 100644
index 0000000000..2743a0aada
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/FormBody.java
@@ -0,0 +1,124 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3;
+
+import okhttp3.internal.Util;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import okio.Buffer;
+import okio.BufferedSink;
+
+import static okhttp3.HttpUrl.FORM_ENCODE_SET;
+import static okhttp3.HttpUrl.percentDecode;
+
+public final class FormBody extends RequestBody {
+  private static final MediaType CONTENT_TYPE =
+      MediaType.parse("application/x-www-form-urlencoded");
+
+  private final List<String> encodedNames;
+  private final List<String> encodedValues;
+
+  private FormBody(List<String> encodedNames, List<String> encodedValues) {
+    this.encodedNames = Util.immutableList(encodedNames);
+    this.encodedValues = Util.immutableList(encodedValues);
+  }
+
+  /** The number of key-value pairs in this form-encoded body. */
+  public int size() {
+    return encodedNames.size();
+  }
+
+  public String encodedName(int index) {
+    return encodedNames.get(index);
+  }
+
+  public String name(int index) {
+    return percentDecode(encodedName(index), true);
+  }
+
+  public String encodedValue(int index) {
+    return encodedValues.get(index);
+  }
+
+  public String value(int index) {
+    return percentDecode(encodedValue(index), true);
+  }
+
+  @Override public MediaType contentType() {
+    return CONTENT_TYPE;
+  }
+
+  @Override public long contentLength() {
+    return writeOrCountBytes(null, true);
+  }
+
+  @Override public void writeTo(BufferedSink sink) throws IOException {
+    writeOrCountBytes(sink, false);
+  }
+
+  /**
+   * Either writes this request to {@code sink} or measures its content length. We have one method
+   * do double-duty to make sure the counting and content are consistent, particularly when it
+   * comes to awkward operations like measuring the encoded length of header strings, or the
+   * length-in-digits of an encoded integer.
+   */
+  private long writeOrCountBytes(BufferedSink sink, boolean countBytes) {
+    long byteCount = 0L;
+
+    Buffer buffer;
+    if (countBytes) {
+      buffer = new Buffer();
+    } else {
+      buffer = sink.buffer();
+    }
+
+    for (int i = 0, size = encodedNames.size(); i < size; i++) {
+      if (i > 0) buffer.writeByte('&');
+      buffer.writeUtf8(encodedNames.get(i));
+      buffer.writeByte('=');
+      buffer.writeUtf8(encodedValues.get(i));
+    }
+
+    if (countBytes) {
+      byteCount = buffer.size();
+      buffer.clear();
+    }
+
+    return byteCount;
+  }
+
+  public static final class Builder {
+    private final List<String> names = new ArrayList<>();
+    private final List<String> values = new ArrayList<>();
+
+    public Builder add(String name, String value) {
+      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, false, true, true));
+      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, false, true, true));
+      return this;
+    }
+
+    public Builder addEncoded(String name, String value) {
+      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, true, true, true));
+      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, true, true, true));
+      return this;
+    }
+
+    public FormBody build() {
+      return new FormBody(names, values);
+    }
+  }
+}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Handshake.java b/okhttp/src/main/java/okhttp3/Handshake.java
similarity index 84%
rename from okhttp/src/main/java/com/squareup/okhttp/Handshake.java
rename to okhttp/src/main/java/okhttp3/Handshake.java
index d9f5366757..1d579ac643 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Handshake.java
+++ b/okhttp/src/main/java/okhttp3/Handshake.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.security.Principal;
 import java.security.cert.Certificate;
 import java.security.cert.X509Certificate;
@@ -33,20 +33,21 @@
  * javax.net.ssl.SSLSocketFactory} to set policy for new handshakes.
  */
 public final class Handshake {
-  private final String cipherSuite;
+  private final CipherSuite cipherSuite;
   private final List<Certificate> peerCertificates;
   private final List<Certificate> localCertificates;
 
-  private Handshake(
-      String cipherSuite, List<Certificate> peerCertificates, List<Certificate> localCertificates) {
+  private Handshake(CipherSuite cipherSuite, List<Certificate> peerCertificates,
+      List<Certificate> localCertificates) {
     this.cipherSuite = cipherSuite;
     this.peerCertificates = peerCertificates;
     this.localCertificates = localCertificates;
   }
 
   public static Handshake get(SSLSession session) {
-    String cipherSuite = session.getCipherSuite();
-    if (cipherSuite == null) throw new IllegalStateException("cipherSuite == null");
+    String cipherSuiteString = session.getCipherSuite();
+    if (cipherSuiteString == null) throw new IllegalStateException("cipherSuite == null");
+    CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);
 
     Certificate[] peerCertificates;
     try {
@@ -66,15 +67,15 @@ public static Handshake get(SSLSession session) {
     return new Handshake(cipherSuite, peerCertificatesList, localCertificatesList);
   }
 
-  public static Handshake get(
-      String cipherSuite, List<Certificate> peerCertificates, List<Certificate> localCertificates) {
+  public static Handshake get(CipherSuite cipherSuite, List<Certificate> peerCertificates,
+      List<Certificate> localCertificates) {
     if (cipherSuite == null) throw new IllegalArgumentException("cipherSuite == null");
     return new Handshake(cipherSuite, Util.immutableList(peerCertificates),
         Util.immutableList(localCertificates));
   }
 
-  /** Returns a cipher suite name like "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA". */
-  public String cipherSuite() {
+  /** Returns the cipher suite used for the connection. */
+  public CipherSuite cipherSuite() {
     return cipherSuite;
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Headers.java b/okhttp/src/main/java/okhttp3/Headers.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/Headers.java
rename to okhttp/src/main/java/okhttp3/Headers.java
index 0dca4281ec..42cbd17abf 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Headers.java
+++ b/okhttp/src/main/java/okhttp3/Headers.java
@@ -15,9 +15,9 @@
  *  limitations under the License.
  */
 
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.http.HttpDate;
+import okhttp3.internal.http.HttpDate;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java b/okhttp/src/main/java/okhttp3/HttpUrl.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java
rename to okhttp/src/main/java/okhttp3/HttpUrl.java
index b0533564c2..8ac1514834 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/HttpUrl.java
+++ b/okhttp/src/main/java/okhttp3/HttpUrl.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.net.IDN;
 import java.net.InetAddress;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Interceptor.java b/okhttp/src/main/java/okhttp3/Interceptor.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/Interceptor.java
rename to okhttp/src/main/java/okhttp3/Interceptor.java
index 03325be973..e18440cc78 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Interceptor.java
+++ b/okhttp/src/main/java/okhttp3/Interceptor.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/MediaType.java b/okhttp/src/main/java/okhttp3/MediaType.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/MediaType.java
rename to okhttp/src/main/java/okhttp3/MediaType.java
index 4d2f1fcf44..805d1c7d6f 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/MediaType.java
+++ b/okhttp/src/main/java/okhttp3/MediaType.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.nio.charset.Charset;
 import java.util.Locale;
diff --git a/okhttp/src/main/java/okhttp3/MultipartBody.java b/okhttp/src/main/java/okhttp3/MultipartBody.java
new file mode 100644
index 0000000000..57f6095d4b
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/MultipartBody.java
@@ -0,0 +1,339 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3;
+
+import okhttp3.internal.Util;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+import okio.Buffer;
+import okio.BufferedSink;
+import okio.ByteString;
+
+/** An <a href="http://www.ietf.org/rfc/rfc2387.txt">RFC 2387</a>-compliant request body. */
+public final class MultipartBody extends RequestBody {
+  /**
+   * The "mixed" subtype of "multipart" is intended for use when the body
+   * parts are independent and need to be bundled in a particular order. Any
+   * "multipart" subtypes that an implementation does not recognize must be
+   * treated as being of subtype "mixed".
+   */
+  public static final MediaType MIXED = MediaType.parse("multipart/mixed");
+
+  /**
+   * The "multipart/alternative" type is syntactically identical to
+   * "multipart/mixed", but the semantics are different. In particular, each
+   * of the body parts is an "alternative" version of the same information.
+   */
+  public static final MediaType ALTERNATIVE = MediaType.parse("multipart/alternative");
+
+  /**
+   * This type is syntactically identical to "multipart/mixed", but the
+   * semantics are different. In particular, in a digest, the default {@code
+   * Content-Type} value for a body part is changed from "text/plain" to
+   * "message/rfc822".
+   */
+  public static final MediaType DIGEST = MediaType.parse("multipart/digest");
+
+  /**
+   * This type is syntactically identical to "multipart/mixed", but the
+   * semantics are different. In particular, in a parallel entity, the order
+   * of body parts is not significant.
+   */
+  public static final MediaType PARALLEL = MediaType.parse("multipart/parallel");
+
+  /**
+   * The media-type multipart/form-data follows the rules of all multipart
+   * MIME data streams as outlined in RFC 2046. In forms, there are a series
+   * of fields to be supplied by the user who fills out the form. Each field
+   * has a name. Within a given form, the names are unique.
+   */
+  public static final MediaType FORM = MediaType.parse("multipart/form-data");
+
+  private static final byte[] COLONSPACE = { ':', ' ' };
+  private static final byte[] CRLF = { '\r', '\n' };
+  private static final byte[] DASHDASH = { '-', '-' };
+
+  private final ByteString boundary;
+  private final MediaType originalType;
+  private final MediaType contentType;
+  private final List<Part> parts;
+  private long contentLength = -1L;
+
+  MultipartBody(ByteString boundary, MediaType type, List<Part> parts) {
+    this.boundary = boundary;
+    this.originalType = type;
+    this.contentType = MediaType.parse(type + "; boundary=" + boundary.utf8());
+    this.parts = Util.immutableList(parts);
+  }
+
+  public MediaType type() {
+    return originalType;
+  }
+
+  public String boundary() {
+    return boundary.utf8();
+  }
+
+  /** The number of parts in this multipart body. */
+  public int size() {
+    return parts.size();
+  }
+
+  public List<Part> parts() {
+    return parts;
+  }
+
+  public Part part(int index) {
+    return parts.get(index);
+  }
+
+  /** A combination of {@link #type()} and {@link #boundary()}. */
+  @Override public MediaType contentType() {
+    return contentType;
+  }
+
+  @Override public long contentLength() throws IOException {
+    long result = contentLength;
+    if (result != -1L) return result;
+    return contentLength = writeOrCountBytes(null, true);
+  }
+
+  @Override public void writeTo(BufferedSink sink) throws IOException {
+    writeOrCountBytes(sink, false);
+  }
+
+  /**
+   * Either writes this request to {@code sink} or measures its content length. We have one method
+   * do double-duty to make sure the counting and content are consistent, particularly when it
+   * comes to awkward operations like measuring the encoded length of header strings, or the
+   * length-in-digits of an encoded integer.
+   */
+  private long writeOrCountBytes(BufferedSink sink, boolean countBytes) throws IOException {
+    long byteCount = 0L;
+
+    Buffer byteCountBuffer = null;
+    if (countBytes) {
+      sink = byteCountBuffer = new Buffer();
+    }
+
+    for (int p = 0, partCount = parts.size(); p < partCount; p++) {
+      Part part = parts.get(p);
+      Headers headers = part.headers;
+      RequestBody body = part.body;
+
+      sink.write(DASHDASH);
+      sink.write(boundary);
+      sink.write(CRLF);
+
+      if (headers != null) {
+        for (int h = 0, headerCount = headers.size(); h < headerCount; h++) {
+          sink.writeUtf8(headers.name(h))
+              .write(COLONSPACE)
+              .writeUtf8(headers.value(h))
+              .write(CRLF);
+        }
+      }
+
+      MediaType contentType = body.contentType();
+      if (contentType != null) {
+        sink.writeUtf8("Content-Type: ")
+            .writeUtf8(contentType.toString())
+            .write(CRLF);
+      }
+
+      long contentLength = body.contentLength();
+      if (contentLength != -1) {
+        sink.writeUtf8("Content-Length: ")
+            .writeDecimalLong(contentLength)
+            .write(CRLF);
+      } else if (countBytes) {
+        // We can't measure the body's size without the sizes of its components.
+        byteCountBuffer.clear();
+        return -1L;
+      }
+
+      sink.write(CRLF);
+
+      if (countBytes) {
+        byteCount += contentLength;
+      } else {
+        body.writeTo(sink);
+      }
+
+      sink.write(CRLF);
+    }
+
+    sink.write(DASHDASH);
+    sink.write(boundary);
+    sink.write(DASHDASH);
+    sink.write(CRLF);
+
+    if (countBytes) {
+      byteCount += byteCountBuffer.size();
+      byteCountBuffer.clear();
+    }
+
+    return byteCount;
+  }
+
+  /**
+   * Appends a quoted-string to a StringBuilder.
+   *
+   * <p>RFC 2388 is rather vague about how one should escape special characters
+   * in form-data parameters, and as it turns out Firefox and Chrome actually
+   * do rather different things, and both say in their comments that they're
+   * not really sure what the right approach is. We go with Chrome's behavior
+   * (which also experimentally seems to match what IE does), but if you
+   * actually want to have a good chance of things working, please avoid
+   * double-quotes, newlines, percent signs, and the like in your field names.
+   */
+  static StringBuilder appendQuotedString(StringBuilder target, String key) {
+    target.append('"');
+    for (int i = 0, len = key.length(); i < len; i++) {
+      char ch = key.charAt(i);
+      switch (ch) {
+        case '\n':
+          target.append("%0A");
+          break;
+        case '\r':
+          target.append("%0D");
+          break;
+        case '"':
+          target.append("%22");
+          break;
+        default:
+          target.append(ch);
+          break;
+      }
+    }
+    target.append('"');
+    return target;
+  }
+
+
+  public static final class Part {
+    public static Part create(RequestBody body) {
+      return create(null, body);
+    }
+
+    public static Part create(Headers headers, RequestBody body) {
+      if (body == null) {
+        throw new NullPointerException("body == null");
+      }
+      if (headers != null && headers.get("Content-Type") != null) {
+        throw new IllegalArgumentException("Unexpected header: Content-Type");
+      }
+      if (headers != null && headers.get("Content-Length") != null) {
+        throw new IllegalArgumentException("Unexpected header: Content-Length");
+      }
+      return new Part(headers, body);
+    }
+
+    public static Part createFormData(String name, String value) {
+      return createFormData(name, null, RequestBody.create(null, value));
+    }
+
+    public static Part createFormData(String name, String filename, RequestBody body) {
+      if (name == null) {
+        throw new NullPointerException("name == null");
+      }
+      StringBuilder disposition = new StringBuilder("form-data; name=");
+      appendQuotedString(disposition, name);
+
+      if (filename != null) {
+        disposition.append("; filename=");
+        appendQuotedString(disposition, filename);
+      }
+
+      return create(Headers.of("Content-Disposition", disposition.toString()), body);
+    }
+
+    private final Headers headers;
+    private final RequestBody body;
+
+    private Part(Headers headers, RequestBody body) {
+      this.headers = headers;
+      this.body = body;
+    }
+  }
+
+  public static final class Builder {
+    private final ByteString boundary;
+    private MediaType type = MIXED;
+    private final List<Part> parts = new ArrayList<>();
+
+    public Builder() {
+      this(UUID.randomUUID().toString());
+    }
+
+    public Builder(String boundary) {
+      this.boundary = ByteString.encodeUtf8(boundary);
+    }
+
+    /**
+     * Set the MIME type. Expected values for {@code type} are {@link #MIXED} (the
+     * default), {@link #ALTERNATIVE}, {@link #DIGEST}, {@link #PARALLEL} and
+     * {@link #FORM}.
+     */
+    public Builder setType(MediaType type) {
+      if (type == null) {
+        throw new NullPointerException("type == null");
+      }
+      if (!type.type().equals("multipart")) {
+        throw new IllegalArgumentException("multipart != " + type);
+      }
+      this.type = type;
+      return this;
+    }
+
+    /** Add a part to the body. */
+    public Builder addPart(RequestBody body) {
+      return addPart(Part.create(body));
+    }
+
+    /** Add a part to the body. */
+    public Builder addPart(Headers headers, RequestBody body) {
+      return addPart(Part.create(headers, body));
+    }
+
+    /** Add a form data part to the body. */
+    public Builder addFormDataPart(String name, String value) {
+      return addPart(Part.createFormData(name, value));
+    }
+
+    /** Add a form data part to the body. */
+    public Builder addFormDataPart(String name, String filename, RequestBody body) {
+      return addPart(Part.createFormData(name, filename, body));
+    }
+
+    /** Add a part to the body. */
+    public Builder addPart(Part part) {
+      if (part == null) throw new NullPointerException("part == null");
+      parts.add(part);
+      return this;
+    }
+
+    /** Assemble the specified parts into a request body. */
+    public MultipartBody build() {
+      if (parts.isEmpty()) {
+        throw new IllegalStateException("Multipart body must have at least one part.");
+      }
+      return new MultipartBody(boundary, type, parts);
+    }
+  }
+}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
similarity index 90%
rename from okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
rename to okhttp/src/main/java/okhttp3/OkHttpClient.java
index 9af08452d2..7e1c2549c7 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -13,15 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
-
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.InternalCache;
-import com.squareup.okhttp.internal.RouteDatabase;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.http.AuthenticatorAdapter;
-import com.squareup.okhttp.internal.http.StreamAllocation;
-import com.squareup.okhttp.internal.tls.OkHostnameVerifier;
+package okhttp3;
+
 import java.net.CookieHandler;
 import java.net.MalformedURLException;
 import java.net.Proxy;
@@ -37,6 +30,14 @@
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.internal.Internal;
+import okhttp3.internal.InternalCache;
+import okhttp3.internal.RouteDatabase;
+import okhttp3.internal.Util;
+import okhttp3.internal.http.AuthenticatorAdapter;
+import okhttp3.internal.http.StreamAllocation;
+import okhttp3.internal.io.RealConnection;
+import okhttp3.internal.tls.OkHostnameVerifier;
 
 /**
  * Configures and creates HTTP connections. Most applications can use a single
@@ -74,6 +75,20 @@
         return client.internalCache();
       }
 
+      @Override public boolean connectionBecameIdle(
+          ConnectionPool pool, RealConnection connection) {
+        return pool.connectionBecameIdle(connection);
+      }
+
+      @Override public RealConnection get(
+          ConnectionPool pool, Address address, StreamAllocation streamAllocation) {
+        return pool.get(address, streamAllocation);
+      }
+
+      @Override public void put(ConnectionPool pool, RealConnection connection) {
+        pool.put(connection);
+      }
+
       @Override public RouteDatabase routeDatabase(ConnectionPool connectionPool) {
         return connectionPool.routeDatabase;
       }
@@ -120,6 +135,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   private SSLSocketFactory sslSocketFactory;
   private HostnameVerifier hostnameVerifier;
   private CertificatePinner certificatePinner;
+  private Authenticator proxyAuthenticator;
   private Authenticator authenticator;
   private ConnectionPool connectionPool;
   private Dns dns;
@@ -151,6 +167,7 @@ private OkHttpClient(OkHttpClient okHttpClient) {
     this.sslSocketFactory = okHttpClient.sslSocketFactory;
     this.hostnameVerifier = okHttpClient.hostnameVerifier;
     this.certificatePinner = okHttpClient.certificatePinner;
+    this.proxyAuthenticator = okHttpClient.proxyAuthenticator;
     this.authenticator = okHttpClient.authenticator;
     this.connectionPool = okHttpClient.connectionPool;
     this.dns = okHttpClient.dns;
@@ -168,13 +185,14 @@ private OkHttpClient(OkHttpClient okHttpClient) {
    *
    * @see URLConnection#setConnectTimeout(int)
    */
-  public void setConnectTimeout(long timeout, TimeUnit unit) {
+  public OkHttpClient setConnectTimeout(long timeout, TimeUnit unit) {
     if (timeout < 0) throw new IllegalArgumentException("timeout < 0");
     if (unit == null) throw new IllegalArgumentException("unit == null");
     long millis = unit.toMillis(timeout);
     if (millis > Integer.MAX_VALUE) throw new IllegalArgumentException("Timeout too large.");
     if (millis == 0 && timeout > 0) throw new IllegalArgumentException("Timeout too small.");
     connectTimeout = (int) millis;
+    return this;
   }
 
   /** Default connect timeout (in milliseconds). */
@@ -188,13 +206,14 @@ public int getConnectTimeout() {
    *
    * @see URLConnection#setReadTimeout(int)
    */
-  public void setReadTimeout(long timeout, TimeUnit unit) {
+  public OkHttpClient setReadTimeout(long timeout, TimeUnit unit) {
     if (timeout < 0) throw new IllegalArgumentException("timeout < 0");
     if (unit == null) throw new IllegalArgumentException("unit == null");
     long millis = unit.toMillis(timeout);
     if (millis > Integer.MAX_VALUE) throw new IllegalArgumentException("Timeout too large.");
     if (millis == 0 && timeout > 0) throw new IllegalArgumentException("Timeout too small.");
     readTimeout = (int) millis;
+    return this;
   }
 
   /** Default read timeout (in milliseconds). */
@@ -206,13 +225,14 @@ public int getReadTimeout() {
    * Sets the default write timeout for new connections. A value of 0 means no timeout, otherwise
    * values must be between 1 and {@link Integer#MAX_VALUE} when converted to milliseconds.
    */
-  public void setWriteTimeout(long timeout, TimeUnit unit) {
+  public OkHttpClient setWriteTimeout(long timeout, TimeUnit unit) {
     if (timeout < 0) throw new IllegalArgumentException("timeout < 0");
     if (unit == null) throw new IllegalArgumentException("unit == null");
     long millis = unit.toMillis(timeout);
     if (millis > Integer.MAX_VALUE) throw new IllegalArgumentException("Timeout too large.");
     if (millis == 0 && timeout > 0) throw new IllegalArgumentException("Timeout too small.");
     writeTimeout = (int) millis;
+    return this;
   }
 
   /** Default write timeout (in milliseconds). */
@@ -366,10 +386,10 @@ public CertificatePinner getCertificatePinner() {
   }
 
   /**
-   * Sets the authenticator used to respond to challenges from the remote web
-   * server or proxy server.
+   * Sets the authenticator used to respond to challenges from origin servers. Use {@link
+   * #setProxyAuthenticator} to set the authenticator for proxy servers.
    *
-   * <p>If unset, the {@link java.net.Authenticator#setDefault system-wide default}
+   * <p>If unset, the {@linkplain java.net.Authenticator#setDefault system-wide default}
    * authenticator will be used.
    */
   public OkHttpClient setAuthenticator(Authenticator authenticator) {
@@ -381,6 +401,22 @@ public Authenticator getAuthenticator() {
     return authenticator;
   }
 
+  /**
+   * Sets the authenticator used to respond to challenges from proxy servers. Use {@link
+   * #setAuthenticator} to set the authenticator for origin servers.
+   *
+   * <p>If unset, the {@linkplain java.net.Authenticator#setDefault system-wide default}
+   * authenticator will be used.
+   */
+  public OkHttpClient setProxyAuthenticator(Authenticator proxyAuthenticator) {
+    this.proxyAuthenticator = proxyAuthenticator;
+    return this;
+  }
+
+  public Authenticator getProxyAuthenticator() {
+    return proxyAuthenticator;
+  }
+
   /**
    * Sets the connection pool used to recycle HTTP and HTTPS connections.
    *
@@ -413,8 +449,9 @@ public boolean getFollowSslRedirects() {
   }
 
   /** Configure this client to follow redirects. If unset, redirects be followed. */
-  public void setFollowRedirects(boolean followRedirects) {
+  public OkHttpClient setFollowRedirects(boolean followRedirects) {
     this.followRedirects = followRedirects;
+    return this;
   }
 
   public boolean getFollowRedirects() {
@@ -439,8 +476,9 @@ public boolean getFollowRedirects() {
    * Set this to false to avoid retrying requests when doing so is destructive. In this case the
    * calling application should do its own recovery of connectivity failures.
    */
-  public void setRetryOnConnectionFailure(boolean retryOnConnectionFailure) {
+  public OkHttpClient setRetryOnConnectionFailure(boolean retryOnConnectionFailure) {
     this.retryOnConnectionFailure = retryOnConnectionFailure;
+    return this;
   }
 
   public boolean getRetryOnConnectionFailure() {
@@ -584,6 +622,9 @@ OkHttpClient copyWithDefaults() {
     if (result.authenticator == null) {
       result.authenticator = AuthenticatorAdapter.INSTANCE;
     }
+    if (result.proxyAuthenticator == null) {
+      result.proxyAuthenticator = AuthenticatorAdapter.INSTANCE;
+    }
     if (result.connectionPool == null) {
       result.connectionPool = ConnectionPool.getDefault();
     }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Protocol.java b/okhttp/src/main/java/okhttp3/Protocol.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/Protocol.java
rename to okhttp/src/main/java/okhttp3/Protocol.java
index 6b02098133..6bb47c6f37 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Protocol.java
+++ b/okhttp/src/main/java/okhttp3/Protocol.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.io.IOException;
 
@@ -62,7 +62,7 @@
    * HTTP/1.1 semantics are layered on HTTP/2.
    *
    * <p>HTTP/2 requires deployments of HTTP/2 that use TLS 1.2 support
-   * {@linkplain com.squareup.okhttp.CipherSuite#TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256}
+   * {@linkplain CipherSuite#TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256}
    * , present in Java 8+ and Android 5+. Servers that enforce this may send an
    * exception message including the string {@code INADEQUATE_SECURITY}.
    */
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Request.java b/okhttp/src/main/java/okhttp3/Request.java
similarity index 92%
rename from okhttp/src/main/java/com/squareup/okhttp/Request.java
rename to okhttp/src/main/java/okhttp3/Request.java
index e099267c94..4ff8702300 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Request.java
+++ b/okhttp/src/main/java/okhttp3/Request.java
@@ -13,10 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.http.HttpMethod;
-import java.io.IOException;
+import okhttp3.internal.http.HttpMethod;
 import java.net.URI;
 import java.net.URL;
 import java.util.List;
@@ -32,7 +31,6 @@
   private final RequestBody body;
   private final Object tag;
 
-  private volatile URL javaNetUrl; // Lazily initialized.
   private volatile URI javaNetUri; // Lazily initialized.
   private volatile CacheControl cacheControl; // Lazily initialized.
 
@@ -44,28 +42,10 @@ private Request(Builder builder) {
     this.tag = builder.tag != null ? builder.tag : this;
   }
 
-  public HttpUrl httpUrl() {
+  public HttpUrl url() {
     return url;
   }
 
-  public URL url() {
-    URL result = javaNetUrl;
-    return result != null ? result : (javaNetUrl = url.url());
-  }
-
-  public URI uri() throws IOException {
-    try {
-      URI result = javaNetUri;
-      return result != null ? result : (javaNetUri = url.uri());
-    } catch (IllegalStateException e) {
-      throw new IOException(e.getMessage());
-    }
-  }
-
-  public String urlString() {
-    return url.toString();
-  }
-
   public String method() {
     return method;
   }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java b/okhttp/src/main/java/okhttp3/RequestBody.java
similarity index 98%
rename from okhttp/src/main/java/com/squareup/okhttp/RequestBody.java
rename to okhttp/src/main/java/okhttp3/RequestBody.java
index 50933f71fd..572a45fc89 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java
+++ b/okhttp/src/main/java/okhttp3/RequestBody.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.io.File;
 import java.io.IOException;
 import java.nio.charset.Charset;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Response.java b/okhttp/src/main/java/okhttp3/Response.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/Response.java
rename to okhttp/src/main/java/okhttp3/Response.java
index bf52795341..ccdca395fe 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Response.java
+++ b/okhttp/src/main/java/okhttp3/Response.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.http.OkHeaders;
+import okhttp3.internal.http.OkHeaders;
 import java.util.Collections;
 import java.util.List;
 
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_PERM_REDIRECT;
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
+import static okhttp3.internal.http.StatusLine.HTTP_PERM_REDIRECT;
+import static okhttp3.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
 import static java.net.HttpURLConnection.HTTP_MOVED_PERM;
 import static java.net.HttpURLConnection.HTTP_MOVED_TEMP;
 import static java.net.HttpURLConnection.HTTP_MULT_CHOICE;
@@ -214,7 +214,7 @@ public CacheControl cacheControl() {
         + ", message="
         + message
         + ", url="
-        + request.urlString()
+        + request.url()
         + '}';
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ResponseBody.java b/okhttp/src/main/java/okhttp3/ResponseBody.java
similarity index 88%
rename from okhttp/src/main/java/com/squareup/okhttp/ResponseBody.java
rename to okhttp/src/main/java/okhttp3/ResponseBody.java
index bdd98b4c69..22fb4d6293 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/ResponseBody.java
+++ b/okhttp/src/main/java/okhttp3/ResponseBody.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
-import com.squareup.okhttp.internal.Util;
+import okhttp3.internal.Util;
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
@@ -25,7 +25,7 @@
 import okio.Buffer;
 import okio.BufferedSource;
 
-import static com.squareup.okhttp.internal.Util.UTF_8;
+import static okhttp3.internal.Util.UTF_8;
 
 public abstract class ResponseBody implements Closeable {
   /** Multiple calls to {@link #charStream()} must return the same instance. */
@@ -37,13 +37,13 @@
    * Returns the number of bytes in that will returned by {@link #bytes}, or
    * {@link #byteStream}, or -1 if unknown.
    */
-  public abstract long contentLength() throws IOException;
+  public abstract long contentLength();
 
-  public final InputStream byteStream() throws IOException {
+  public final InputStream byteStream() {
     return source().inputStream();
   }
 
-  public abstract BufferedSource source() throws IOException;
+  public abstract BufferedSource source();
 
   public final byte[] bytes() throws IOException {
     long contentLength = contentLength();
@@ -69,7 +69,7 @@ public final InputStream byteStream() throws IOException {
    * of the Content-Type header. If that header is either absent or lacks a
    * charset, this will attempt to decode the response body as UTF-8.
    */
-  public final Reader charStream() throws IOException {
+  public final Reader charStream() {
     Reader r = reader;
     return r != null ? r : (reader = new InputStreamReader(byteStream(), charset()));
   }
@@ -88,8 +88,8 @@ private Charset charset() {
     return contentType != null ? contentType.charset(UTF_8) : UTF_8;
   }
 
-  @Override public void close() throws IOException {
-    source().close();
+  @Override public void close() {
+    Util.closeQuietly(source());
   }
 
   /**
@@ -97,11 +97,11 @@ private Charset charset() {
    * contentType} is non-null and lacks a charset, this will use UTF-8.
    */
   public static ResponseBody create(MediaType contentType, String content) {
-    Charset charset = Util.UTF_8;
+    Charset charset = UTF_8;
     if (contentType != null) {
       charset = contentType.charset();
       if (charset == null) {
-        charset = Util.UTF_8;
+        charset = UTF_8;
         contentType = MediaType.parse(contentType + "; charset=utf-8");
       }
     }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Route.java b/okhttp/src/main/java/okhttp3/Route.java
similarity index 95%
rename from okhttp/src/main/java/com/squareup/okhttp/Route.java
rename to okhttp/src/main/java/okhttp3/Route.java
index 2d27a03090..74e38f1aa7 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Route.java
+++ b/okhttp/src/main/java/okhttp3/Route.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import java.net.InetSocketAddress;
 import java.net.Proxy;
@@ -51,22 +51,22 @@ public Route(Address address, Proxy proxy, InetSocketAddress inetSocketAddress)
     this.inetSocketAddress = inetSocketAddress;
   }
 
-  public Address getAddress() {
+  public Address address() {
     return address;
   }
 
   /**
    * Returns the {@link Proxy} of this route.
    *
-   * <strong>Warning:</strong> This may disagree with {@link Address#getProxy}
+   * <strong>Warning:</strong> This may disagree with {@link Address#proxy}
    * when it is null. When the address's proxy is null, the proxy selector is
    * used.
    */
-  public Proxy getProxy() {
+  public Proxy proxy() {
     return proxy;
   }
 
-  public InetSocketAddress getSocketAddress() {
+  public InetSocketAddress socketAddress() {
     return inetSocketAddress;
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/TlsVersion.java b/okhttp/src/main/java/okhttp3/TlsVersion.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/TlsVersion.java
rename to okhttp/src/main/java/okhttp3/TlsVersion.java
index 512aa0d483..49b815c254 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/TlsVersion.java
+++ b/okhttp/src/main/java/okhttp3/TlsVersion.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp;
+package okhttp3;
 
 import javax.net.ssl.SSLSocket;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/ConnectionSpecSelector.java b/okhttp/src/main/java/okhttp3/internal/ConnectionSpecSelector.java
similarity index 98%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/ConnectionSpecSelector.java
rename to okhttp/src/main/java/okhttp3/internal/ConnectionSpecSelector.java
index 1b2dc03866..844010e15d 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/ConnectionSpecSelector.java
+++ b/okhttp/src/main/java/okhttp3/internal/ConnectionSpecSelector.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.ConnectionSpec;
+import okhttp3.ConnectionSpec;
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.net.ProtocolException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java b/okhttp/src/main/java/okhttp3/internal/DiskLruCache.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
rename to okhttp/src/main/java/okhttp3/internal/DiskLruCache.java
index b940168957..2b1f6aee58 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
+++ b/okhttp/src/main/java/okhttp3/internal/DiskLruCache.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.internal.io.FileSystem;
+import okhttp3.internal.io.FileSystem;
 import java.io.Closeable;
 import java.io.EOFException;
 import java.io.File;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/FaultHidingSink.java b/okhttp/src/main/java/okhttp3/internal/FaultHidingSink.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/FaultHidingSink.java
rename to okhttp/src/main/java/okhttp3/internal/FaultHidingSink.java
index 91e990db8d..ef8430c085 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/FaultHidingSink.java
+++ b/okhttp/src/main/java/okhttp3/internal/FaultHidingSink.java
@@ -1,4 +1,4 @@
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
 import java.io.IOException;
 import okio.Buffer;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java b/okhttp/src/main/java/okhttp3/internal/Internal.java
similarity index 71%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java
rename to okhttp/src/main/java/okhttp3/internal/Internal.java
index 58eb0cf63c..320143e5c5 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java
+++ b/okhttp/src/main/java/okhttp3/internal/Internal.java
@@ -13,25 +13,26 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.Call;
-import com.squareup.okhttp.Callback;
-import com.squareup.okhttp.ConnectionPool;
-import com.squareup.okhttp.ConnectionSpec;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.internal.http.StreamAllocation;
+import okhttp3.Address;
+import okhttp3.Call;
+import okhttp3.Callback;
+import okhttp3.ConnectionPool;
+import okhttp3.ConnectionSpec;
+import okhttp3.Headers;
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import okhttp3.internal.http.StreamAllocation;
+import okhttp3.internal.io.RealConnection;
 import java.net.MalformedURLException;
 import java.net.UnknownHostException;
 import java.util.logging.Logger;
 import javax.net.ssl.SSLSocket;
 
 /**
- * Escalate internal APIs in {@code com.squareup.okhttp} so they can be used
- * from OkHttp's implementation packages. The only implementation of this
- * interface is in {@link com.squareup.okhttp.OkHttpClient}.
+ * Escalate internal APIs in {@code okhttp3} so they can be used from OkHttp's implementation
+ * packages. The only implementation of this interface is in {@link OkHttpClient}.
  */
 public abstract class Internal {
   public static final Logger logger = Logger.getLogger(OkHttpClient.class.getName());
@@ -51,6 +52,13 @@ public static void initializeInstanceForTests() {
 
   public abstract InternalCache internalCache(OkHttpClient client);
 
+  public abstract RealConnection get(
+      ConnectionPool pool, Address address, StreamAllocation streamAllocation);
+
+  public abstract void put(ConnectionPool pool, RealConnection connection);
+
+  public abstract boolean connectionBecameIdle(ConnectionPool pool, RealConnection connection);
+
   public abstract RouteDatabase routeDatabase(ConnectionPool connectionPool);
 
   public abstract void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket,
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/InternalCache.java b/okhttp/src/main/java/okhttp3/internal/InternalCache.java
similarity index 85%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/InternalCache.java
rename to okhttp/src/main/java/okhttp3/internal/InternalCache.java
index 4925358225..d21096d45d 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/InternalCache.java
+++ b/okhttp/src/main/java/okhttp3/internal/InternalCache.java
@@ -13,17 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.http.CacheRequest;
-import com.squareup.okhttp.internal.http.CacheStrategy;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.http.CacheRequest;
+import okhttp3.internal.http.CacheStrategy;
 import java.io.IOException;
+import okhttp3.Cache;
 
 /**
  * OkHttp's internal cache interface. Applications shouldn't implement this:
- * instead use {@link com.squareup.okhttp.Cache}.
+ * instead use {@link Cache}.
  */
 public interface InternalCache {
   Response get(Request request) throws IOException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java b/okhttp/src/main/java/okhttp3/internal/NamedRunnable.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java
rename to okhttp/src/main/java/okhttp3/internal/NamedRunnable.java
index 7a02ecfbde..601ab2e724 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/NamedRunnable.java
+++ b/okhttp/src/main/java/okhttp3/internal/NamedRunnable.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
 /**
  * Runnable implementation which always sets its thread name.
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/OptionalMethod.java b/okhttp/src/main/java/okhttp3/internal/OptionalMethod.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/OptionalMethod.java
rename to okhttp/src/main/java/okhttp3/internal/OptionalMethod.java
index 21b31cc491..7605556b59 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/OptionalMethod.java
+++ b/okhttp/src/main/java/okhttp3/internal/OptionalMethod.java
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java b/okhttp/src/main/java/okhttp3/internal/Platform.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
rename to okhttp/src/main/java/okhttp3/internal/Platform.java
index 4e578aef0f..d410a60ea0 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
+++ b/okhttp/src/main/java/okhttp3/internal/Platform.java
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
 import android.util.Log;
-import com.squareup.okhttp.Protocol;
+import okhttp3.Protocol;
 import java.io.IOException;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.InvocationTargetException;
@@ -32,7 +32,7 @@
 import javax.net.ssl.SSLSocket;
 import okio.Buffer;
 
-import static com.squareup.okhttp.internal.Internal.logger;
+import static okhttp3.internal.Internal.logger;
 
 /**
  * Access to platform-specific features.
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java b/okhttp/src/main/java/okhttp3/internal/RouteDatabase.java
similarity index 95%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java
rename to okhttp/src/main/java/okhttp3/internal/RouteDatabase.java
index 1c96c7f6b2..d2c2a5ea6a 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java
+++ b/okhttp/src/main/java/okhttp3/internal/RouteDatabase.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.Route;
+import okhttp3.Route;
 import java.util.LinkedHashSet;
 import java.util.Set;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/Util.java
rename to okhttp/src/main/java/okhttp3/internal/Util.java
index b05dc6df24..338fe7174c 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal;
+package okhttp3.internal;
 
-import com.squareup.okhttp.HttpUrl;
+import okhttp3.HttpUrl;
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InterruptedIOException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/ErrorCode.java b/okhttp/src/main/java/okhttp3/internal/framed/ErrorCode.java
similarity index 98%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/ErrorCode.java
rename to okhttp/src/main/java/okhttp3/internal/framed/ErrorCode.java
index 0edd5ef74f..1142319d7e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/ErrorCode.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/ErrorCode.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 // http://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-7
 public enum ErrorCode {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FrameReader.java b/okhttp/src/main/java/okhttp3/internal/framed/FrameReader.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/FrameReader.java
rename to okhttp/src/main/java/okhttp3/internal/framed/FrameReader.java
index 9f7f0868b2..68a23337c4 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FrameReader.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/FrameReader.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.Closeable;
 import java.io.IOException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FrameWriter.java b/okhttp/src/main/java/okhttp3/internal/framed/FrameWriter.java
similarity index 98%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/FrameWriter.java
rename to okhttp/src/main/java/okhttp3/internal/framed/FrameWriter.java
index dcaaf3ac90..d22c12a280 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FrameWriter.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/FrameWriter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.Closeable;
 import java.io.IOException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java b/okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java
similarity index 98%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java
rename to okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java
index 6feb16ce2c..7ad9a40840 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.internal.NamedRunnable;
-import com.squareup.okhttp.internal.Util;
+import okhttp3.Protocol;
+import okhttp3.internal.NamedRunnable;
+import okhttp3.internal.Util;
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InterruptedIOException;
@@ -40,8 +40,8 @@
 import okio.ByteString;
 import okio.Okio;
 
-import static com.squareup.okhttp.internal.Internal.logger;
-import static com.squareup.okhttp.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
+import static okhttp3.internal.Internal.logger;
+import static okhttp3.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
 
 /**
  * A socket connection to a remote peer. A connection hosts streams which can
@@ -70,7 +70,7 @@
       Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
       Util.threadFactory("OkHttp FramedConnection", true));
 
-  /** The protocol variant, like {@link com.squareup.okhttp.internal.framed.Spdy3}. */
+  /** The protocol variant, like {@link Spdy3}. */
   final Protocol protocol;
 
   /** True if this peer initiated the connection. */
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedStream.java b/okhttp/src/main/java/okhttp3/internal/framed/FramedStream.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedStream.java
rename to okhttp/src/main/java/okhttp3/internal/framed/FramedStream.java
index a47b12e627..2532ee7ebf 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedStream.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/FramedStream.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -29,7 +29,7 @@
 import okio.Source;
 import okio.Timeout;
 
-import static com.squareup.okhttp.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
+import static okhttp3.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE;
 
 /** A logical bidirectional stream. */
 public final class FramedStream {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Header.java b/okhttp/src/main/java/okhttp3/internal/framed/Header.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/Header.java
rename to okhttp/src/main/java/okhttp3/internal/framed/Header.java
index af5594f614..38ac6a6863 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Header.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/Header.java
@@ -1,4 +1,4 @@
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import okio.ByteString;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/HeadersMode.java b/okhttp/src/main/java/okhttp3/internal/framed/HeadersMode.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/HeadersMode.java
rename to okhttp/src/main/java/okhttp3/internal/framed/HeadersMode.java
index b42915b610..772d58f60e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/HeadersMode.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/HeadersMode.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 public enum HeadersMode {
   SPDY_SYN_STREAM,
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Hpack.java b/okhttp/src/main/java/okhttp3/internal/framed/Hpack.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/Hpack.java
rename to okhttp/src/main/java/okhttp3/internal/framed/Hpack.java
index 171516f7af..0eb67743f0 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Hpack.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/Hpack.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Http2.java b/okhttp/src/main/java/okhttp3/internal/framed/Http2.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/Http2.java
rename to okhttp/src/main/java/okhttp3/internal/framed/Http2.java
index 0fde974400..f0d4ce40d3 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Http2.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/Http2.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.Protocol;
+import okhttp3.Protocol;
 import java.io.IOException;
 import java.util.List;
 import java.util.logging.Logger;
@@ -26,7 +26,7 @@
 import okio.Source;
 import okio.Timeout;
 
-import static com.squareup.okhttp.internal.framed.Http2.FrameLogger.formatHeader;
+import static okhttp3.internal.framed.Http2.FrameLogger.formatHeader;
 import static java.lang.String.format;
 import static java.util.logging.Level.FINE;
 import static okio.ByteString.EMPTY;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Huffman.java b/okhttp/src/main/java/okhttp3/internal/framed/Huffman.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/Huffman.java
rename to okhttp/src/main/java/okhttp3/internal/framed/Huffman.java
index f21a16ded0..63b6c39459 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Huffman.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/Huffman.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/NameValueBlockReader.java b/okhttp/src/main/java/okhttp3/internal/framed/NameValueBlockReader.java
similarity index 98%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/NameValueBlockReader.java
rename to okhttp/src/main/java/okhttp3/internal/framed/NameValueBlockReader.java
index d9554a361b..8994722cb5 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/NameValueBlockReader.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/NameValueBlockReader.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Ping.java b/okhttp/src/main/java/okhttp3/internal/framed/Ping.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/Ping.java
rename to okhttp/src/main/java/okhttp3/internal/framed/Ping.java
index 35f9cf5be6..31adb1dd8f 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Ping.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/Ping.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/PushObserver.java b/okhttp/src/main/java/okhttp3/internal/framed/PushObserver.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/PushObserver.java
rename to okhttp/src/main/java/okhttp3/internal/framed/PushObserver.java
index 33ebc617e3..72d2948125 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/PushObserver.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/PushObserver.java
@@ -13,14 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.io.IOException;
 import java.util.List;
+import okhttp3.Protocol;
 import okio.BufferedSource;
 
 /**
- * {@link com.squareup.okhttp.Protocol#HTTP_2 HTTP/2} only.
+ * {@link Protocol#HTTP_2 HTTP/2} only.
  * Processes server-initiated HTTP requests on the client. Implementations must
  * quickly dispatch callbacks to avoid creating a bottleneck.
  *
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Settings.java b/okhttp/src/main/java/okhttp3/internal/framed/Settings.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/Settings.java
rename to okhttp/src/main/java/okhttp3/internal/framed/Settings.java
index 935d489045..598b0680b3 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Settings.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/Settings.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
 import java.util.Arrays;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Spdy3.java b/okhttp/src/main/java/okhttp3/internal/framed/Spdy3.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/Spdy3.java
rename to okhttp/src/main/java/okhttp3/internal/framed/Spdy3.java
index bea53f7969..11ac226a76 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Spdy3.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/Spdy3.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.internal.Util;
+import okhttp3.Protocol;
+import okhttp3.internal.Util;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.net.ProtocolException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Variant.java b/okhttp/src/main/java/okhttp3/internal/framed/Variant.java
similarity index 93%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/framed/Variant.java
rename to okhttp/src/main/java/okhttp3/internal/framed/Variant.java
index 0782ba1a86..4ff3794007 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/framed/Variant.java
+++ b/okhttp/src/main/java/okhttp3/internal/framed/Variant.java
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.framed;
+package okhttp3.internal.framed;
 
-import com.squareup.okhttp.Protocol;
+import okhttp3.Protocol;
 import okio.BufferedSink;
 import okio.BufferedSource;
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java b/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java
new file mode 100644
index 0000000000..09d875999c
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.http;
+
+import java.io.IOException;
+import java.net.Authenticator.RequestorType;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.PasswordAuthentication;
+import java.net.Proxy;
+import java.util.List;
+import okhttp3.Authenticator;
+import okhttp3.Challenge;
+import okhttp3.Credentials;
+import okhttp3.HttpUrl;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.Route;
+
+/** Adapts {@link java.net.Authenticator} to {@link Authenticator}. */
+public final class AuthenticatorAdapter implements Authenticator {
+  /** Uses the global authenticator to get the password. */
+  public static final Authenticator INSTANCE = new AuthenticatorAdapter();
+
+  @Override public Request authenticate(Route route, Response response) throws IOException {
+    List<Challenge> challenges = response.challenges();
+    Request request = response.request();
+    HttpUrl url = request.url();
+    boolean proxyAuthorization = response.code() == 407;
+    Proxy proxy = route.proxy();
+
+    for (int i = 0, size = challenges.size(); i < size; i++) {
+      Challenge challenge = challenges.get(i);
+      if (!"Basic".equalsIgnoreCase(challenge.scheme())) continue;
+
+      PasswordAuthentication auth;
+      if (proxyAuthorization) {
+        InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();
+        auth = java.net.Authenticator.requestPasswordAuthentication(
+            proxyAddress.getHostName(), getConnectToInetAddress(proxy, url), proxyAddress.getPort(),
+            url.scheme(), challenge.realm(), challenge.scheme(), url.url(),
+            RequestorType.PROXY);
+      } else {
+        auth = java.net.Authenticator.requestPasswordAuthentication(
+            url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(),
+            challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);
+      }
+
+      if (auth != null) {
+        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));
+        return request.newBuilder()
+            .header(proxyAuthorization ? "Proxy-Authorization" : "Authorization", credential)
+            .build();
+      }
+    }
+
+    return null; // No challenges were satisfied!
+  }
+
+  private InetAddress getConnectToInetAddress(Proxy proxy, HttpUrl url) throws IOException {
+    return (proxy != null && proxy.type() != Proxy.Type.DIRECT)
+        ? ((InetSocketAddress) proxy.address()).getAddress()
+        : InetAddress.getByName(url.host());
+  }
+}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheRequest.java b/okhttp/src/main/java/okhttp3/internal/http/CacheRequest.java
similarity index 94%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheRequest.java
rename to okhttp/src/main/java/okhttp3/internal/http/CacheRequest.java
index b8153e4f07..18a40c19f2 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheRequest.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/CacheRequest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 import java.io.IOException;
 import okio.Sink;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java b/okhttp/src/main/java/okhttp3/internal/http/CacheStrategy.java
similarity index 95%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java
rename to okhttp/src/main/java/okhttp3/internal/http/CacheStrategy.java
index aee0dae500..56fa0fefaf 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/CacheStrategy.java
@@ -1,13 +1,11 @@
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.CacheControl;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.CacheControl;
+import okhttp3.Headers;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.util.Date;
 
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_PERM_REDIRECT;
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
 import static java.net.HttpURLConnection.HTTP_BAD_METHOD;
 import static java.net.HttpURLConnection.HTTP_GONE;
 import static java.net.HttpURLConnection.HTTP_MOVED_PERM;
@@ -59,12 +57,12 @@ public static boolean isCacheable(Response response, Request request) {
       case HTTP_GONE:
       case HTTP_REQ_TOO_LONG:
       case HTTP_NOT_IMPLEMENTED:
-      case HTTP_PERM_REDIRECT:
+      case StatusLine.HTTP_PERM_REDIRECT:
       // These codes can be cached unless headers forbid it.
       break;
 
       case HTTP_MOVED_TEMP:
-      case HTTP_TEMP_REDIRECT:
+      case StatusLine.HTTP_TEMP_REDIRECT:
         // These codes can only be cached with the right response headers.
         // http://tools.ietf.org/html/rfc7234#section-3
         // s-maxage is not checked because OkHttp is a private cache that should ignore s-maxage.
@@ -253,7 +251,7 @@ private long computeFreshnessLifetime() {
         long delta = expires.getTime() - servedMillis;
         return delta > 0 ? delta : 0;
       } else if (lastModified != null
-          && cacheResponse.request().httpUrl().query() == null) {
+          && cacheResponse.request().url().query() == null) {
         // As recommended by the HTTP RFC and implemented in Firefox, the
         // max age of a document should be defaulted to 10% of the
         // document's age at the time it was served. Default expiration
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HeaderParser.java b/okhttp/src/main/java/okhttp3/internal/http/HeaderParser.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/HeaderParser.java
rename to okhttp/src/main/java/okhttp3/internal/http/HeaderParser.java
index 55f82ada47..085f6f1448 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HeaderParser.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HeaderParser.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 public final class HeaderParser {
   /**
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java
rename to okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java
index b43f0d3c77..98e2ab3dfc 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/Http1xStream.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.io.RealConnection;
+package okhttp3.internal.http;
+
+import okhttp3.Headers;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.Internal;
+import okhttp3.internal.Util;
+import okhttp3.internal.io.RealConnection;
 import java.io.EOFException;
 import java.io.IOException;
 import java.net.ProtocolException;
@@ -35,9 +35,9 @@
 import okio.Source;
 import okio.Timeout;
 
-import static com.squareup.okhttp.internal.Util.checkOffsetAndCount;
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_CONTINUE;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static okhttp3.internal.Util.checkOffsetAndCount;
+import static okhttp3.internal.http.StatusLine.HTTP_CONTINUE;
 
 /**
  * A socket connection that can be used to send HTTP/1.1 messages. This class
@@ -119,7 +119,7 @@ public Http1xStream(StreamAllocation streamAllocation, BufferedSource source, Bu
   @Override public void writeRequestHeaders(Request request) throws IOException {
     httpEngine.writingRequestHeaders();
     String requestLine = RequestLine.get(
-        request, httpEngine.getConnection().getRoute().getProxy().type());
+        request, httpEngine.getConnection().getRoute().proxy().type());
     writeRequest(request.headers(), requestLine);
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java b/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java
similarity index 88%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java
rename to okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java
index 6b8b68f5cd..4dbd4ecabc 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.framed.ErrorCode;
-import com.squareup.okhttp.internal.framed.FramedConnection;
-import com.squareup.okhttp.internal.framed.FramedStream;
-import com.squareup.okhttp.internal.framed.Header;
+package okhttp3.internal.http;
+
+import okhttp3.Headers;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.internal.Util;
+import okhttp3.internal.framed.ErrorCode;
+import okhttp3.internal.framed.FramedConnection;
+import okhttp3.internal.framed.FramedStream;
+import okhttp3.internal.framed.Header;
 import java.io.IOException;
 import java.net.ProtocolException;
 import java.util.ArrayList;
@@ -40,13 +40,13 @@
 import okio.Sink;
 import okio.Source;
 
-import static com.squareup.okhttp.internal.framed.Header.RESPONSE_STATUS;
-import static com.squareup.okhttp.internal.framed.Header.TARGET_AUTHORITY;
-import static com.squareup.okhttp.internal.framed.Header.TARGET_HOST;
-import static com.squareup.okhttp.internal.framed.Header.TARGET_METHOD;
-import static com.squareup.okhttp.internal.framed.Header.TARGET_PATH;
-import static com.squareup.okhttp.internal.framed.Header.TARGET_SCHEME;
-import static com.squareup.okhttp.internal.framed.Header.VERSION;
+import static okhttp3.internal.framed.Header.RESPONSE_STATUS;
+import static okhttp3.internal.framed.Header.TARGET_AUTHORITY;
+import static okhttp3.internal.framed.Header.TARGET_HOST;
+import static okhttp3.internal.framed.Header.TARGET_METHOD;
+import static okhttp3.internal.framed.Header.TARGET_PATH;
+import static okhttp3.internal.framed.Header.TARGET_SCHEME;
+import static okhttp3.internal.framed.Header.VERSION;
 
 /** An HTTP stream for HTTP/2 and SPDY. */
 public final class Http2xStream implements HttpStream {
@@ -160,10 +160,10 @@ public Http2xStream(StreamAllocation streamAllocation, FramedConnection framedCo
     Headers headers = request.headers();
     List<Header> result = new ArrayList<>(headers.size() + 5);
     result.add(new Header(TARGET_METHOD, request.method()));
-    result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.httpUrl())));
+    result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url())));
     result.add(new Header(VERSION, "HTTP/1.1"));
-    result.add(new Header(TARGET_HOST, Util.hostHeader(request.httpUrl())));
-    result.add(new Header(TARGET_SCHEME, request.httpUrl().scheme()));
+    result.add(new Header(TARGET_HOST, Util.hostHeader(request.url())));
+    result.add(new Header(TARGET_SCHEME, request.url().scheme()));
 
     Set<ByteString> names = new LinkedHashSet<>();
     for (int i = 0, size = headers.size(); i < size; i++) {
@@ -200,9 +200,9 @@ private static String joinOnNull(String first, String second) {
     Headers headers = request.headers();
     List<Header> result = new ArrayList<>(headers.size() + 4);
     result.add(new Header(TARGET_METHOD, request.method()));
-    result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.httpUrl())));
-    result.add(new Header(TARGET_AUTHORITY, Util.hostHeader(request.httpUrl()))); // Optional.
-    result.add(new Header(TARGET_SCHEME, request.httpUrl().scheme()));
+    result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url())));
+    result.add(new Header(TARGET_AUTHORITY, Util.hostHeader(request.url()))); // Optional.
+    result.add(new Header(TARGET_SCHEME, request.url().scheme()));
 
     for (int i = 0, size = headers.size(); i < size; i++) {
       // header names must be lowercase.
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpDate.java b/okhttp/src/main/java/okhttp3/internal/http/HttpDate.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpDate.java
rename to okhttp/src/main/java/okhttp3/internal/http/HttpDate.java
index 27511b37ca..99411fb92e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpDate.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpDate.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 import java.text.DateFormat;
 import java.text.ParsePosition;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
similarity index 93%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
rename to okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
index fcb7384a79..cdd6722cbb 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
@@ -15,25 +15,8 @@
  *  limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.Address;
-import com.squareup.okhttp.CertificatePinner;
-import com.squareup.okhttp.Connection;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.Route;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.InternalCache;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.Version;
+package okhttp3.internal.http;
+
 import java.io.IOException;
 import java.net.CookieHandler;
 import java.net.ProtocolException;
@@ -43,6 +26,22 @@
 import java.util.Map;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.Address;
+import okhttp3.CertificatePinner;
+import okhttp3.Connection;
+import okhttp3.Headers;
+import okhttp3.HttpUrl;
+import okhttp3.Interceptor;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.Route;
+import okhttp3.internal.Internal;
+import okhttp3.internal.InternalCache;
+import okhttp3.internal.Version;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
@@ -52,10 +51,6 @@
 import okio.Source;
 import okio.Timeout;
 
-import static com.squareup.okhttp.internal.Util.closeQuietly;
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_CONTINUE;
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_PERM_REDIRECT;
-import static com.squareup.okhttp.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
 import static java.net.HttpURLConnection.HTTP_MOVED_PERM;
 import static java.net.HttpURLConnection.HTTP_MOVED_TEMP;
 import static java.net.HttpURLConnection.HTTP_MULT_CHOICE;
@@ -65,6 +60,12 @@
 import static java.net.HttpURLConnection.HTTP_SEE_OTHER;
 import static java.net.HttpURLConnection.HTTP_UNAUTHORIZED;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static okhttp3.internal.Util.closeQuietly;
+import static okhttp3.internal.Util.discard;
+import static okhttp3.internal.Util.hostHeader;
+import static okhttp3.internal.http.StatusLine.HTTP_CONTINUE;
+import static okhttp3.internal.http.StatusLine.HTTP_PERM_REDIRECT;
+import static okhttp3.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
 
 /**
  * Handles a single HTTP request/response pair. Each HTTP engine follows this
@@ -521,7 +522,7 @@ private Request networkRequest(Request request) throws IOException {
     Request.Builder result = request.newBuilder();
 
     if (request.header("Host") == null) {
-      result.header("Host", Util.hostHeader(request.httpUrl()));
+      result.header("Host", hostHeader(request.url()));
     }
 
     if (request.header("Connection") == null) {
@@ -540,7 +541,7 @@ private Request networkRequest(Request request) throws IOException {
       // affect cookie choice besides "Host".
       Map<String, List<String>> headers = OkHeaders.toMultimap(result.build().headers(), null);
 
-      Map<String, List<String>> cookies = cookieHandler.get(request.uri(), headers);
+      Map<String, List<String>> cookies = cookieHandler.get(request.url().uri(), headers);
 
       // Add any new cookies to the request.
       OkHeaders.addCookies(result, cookies);
@@ -674,11 +675,11 @@ public void readResponse() throws IOException {
 
       if (index > 0) {
         Interceptor caller = client.networkInterceptors().get(index - 1);
-        Address address = connection().getRoute().getAddress();
+        Address address = connection().getRoute().address();
 
         // Confirm that the interceptor uses the connection we've already prepared.
-        if (!request.httpUrl().host().equals(address.getUriHost())
-            || request.httpUrl().port() != address.getUriPort()) {
+        if (!request.url().host().equals(address.url().host())
+            || request.url().port() != address.url().port()) {
           throw new IllegalStateException("network interceptor " + caller
               + " must retain the same host and port");
         }
@@ -806,7 +807,7 @@ private Response cacheWritingResponse(final CacheRequest cacheRequest, Response
 
       @Override public void close() throws IOException {
         if (!cacheRequestClosed
-            && !Util.discard(this, HttpStream.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {
+            && !discard(this, HttpStream.DISCARD_STREAM_TIMEOUT_MILLIS, MILLISECONDS)) {
           cacheRequestClosed = true;
           cacheRequest.abort();
         }
@@ -877,7 +878,7 @@ private static Headers combine(Headers cachedHeaders, Headers networkHeaders) th
   public void receiveHeaders(Headers headers) throws IOException {
     CookieHandler cookieHandler = client.getCookieHandler();
     if (cookieHandler != null) {
-      cookieHandler.put(userRequest.uri(), OkHeaders.toMultimap(headers, null));
+      cookieHandler.put(userRequest.url().uri(), OkHeaders.toMultimap(headers, null));
     }
   }
 
@@ -892,25 +893,26 @@ public Request followUpRequest() throws IOException {
     Route route = connection != null
         ? connection.getRoute()
         : null;
-    Proxy selectedProxy = route != null
-        ? route.getProxy()
-        : client.getProxy();
     int responseCode = userResponse.code();
 
+    final String method = userRequest.method();
     switch (responseCode) {
       case HTTP_PROXY_AUTH:
+        Proxy selectedProxy = route != null
+            ? route.proxy()
+            : client.getProxy();
         if (selectedProxy.type() != Proxy.Type.HTTP) {
           throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");
         }
         // fall-through
       case HTTP_UNAUTHORIZED:
-        return OkHeaders.processAuthHeader(client.getAuthenticator(), userResponse, selectedProxy);
+        return client.getAuthenticator().authenticate(route, userResponse);
 
       case HTTP_PERM_REDIRECT:
       case HTTP_TEMP_REDIRECT:
         // "If the 307 or 308 status code is received in response to a request other than GET
         // or HEAD, the user agent MUST NOT automatically redirect the request"
-        if (!userRequest.method().equals("GET") && !userRequest.method().equals("HEAD")) {
+        if (!method.equals("GET") && !method.equals("HEAD")) {
             return null;
         }
         // fall-through
@@ -923,19 +925,23 @@ public Request followUpRequest() throws IOException {
 
         String location = userResponse.header("Location");
         if (location == null) return null;
-        HttpUrl url = userRequest.httpUrl().resolve(location);
+        HttpUrl url = userRequest.url().resolve(location);
 
         // Don't follow redirects to unsupported protocols.
         if (url == null) return null;
 
         // If configured, don't follow redirects between SSL and non-SSL.
-        boolean sameScheme = url.scheme().equals(userRequest.httpUrl().scheme());
+        boolean sameScheme = url.scheme().equals(userRequest.url().scheme());
         if (!sameScheme && !client.getFollowSslRedirects()) return null;
 
         // Redirects don't include a request body.
         Request.Builder requestBuilder = userRequest.newBuilder();
-        if (HttpMethod.permitsRequestBody(userRequest.method())) {
-          requestBuilder.method("GET", null);
+        if (HttpMethod.permitsRequestBody(method)) {
+          if (HttpMethod.redirectsToGet(method)) {
+            requestBuilder.method("GET", null);
+          } else {
+            requestBuilder.method(method, null);
+          }
           requestBuilder.removeHeader("Transfer-Encoding");
           requestBuilder.removeHeader("Content-Length");
           requestBuilder.removeHeader("Content-Type");
@@ -960,7 +966,7 @@ public Request followUpRequest() throws IOException {
    * connection used by this engine.
    */
   public boolean sameConnection(HttpUrl followUp) {
-    HttpUrl url = userRequest.httpUrl();
+    HttpUrl url = userRequest.url();
     return url.host().equals(followUp.host())
         && url.port() == followUp.port()
         && url.scheme().equals(followUp.scheme());
@@ -976,9 +982,9 @@ private static Address createAddress(OkHttpClient client, Request request) {
       certificatePinner = client.getCertificatePinner();
     }
 
-    return new Address(request.httpUrl().host(), request.httpUrl().port(), client.getDns(),
+    return new Address(request.url().host(), request.url().port(), client.getDns(),
         client.getSocketFactory(), sslSocketFactory, hostnameVerifier, certificatePinner,
-        client.getAuthenticator(), client.getProxy(), client.getProtocols(),
+        client.getProxyAuthenticator(), client.getProxy(), client.getProtocols(),
         client.getConnectionSpecs(), client.getProxySelector());
   }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpMethod.java b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java
similarity index 89%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpMethod.java
rename to okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java
index 6a9b4f637a..3629810c0e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpMethod.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 public final class HttpMethod {
   public static boolean invalidatesCache(String method) {
@@ -41,6 +41,11 @@ public static boolean permitsRequestBody(String method) {
         || method.equals("LOCK");     // (WebDAV) body: create lock, without body: refresh lock
   }
 
+  public static boolean redirectsToGet(String method) {
+    // All requests but PROPFIND should redirect to a GET request.
+    return !method.equals("PROPFIND");
+  }
+
   private HttpMethod() {
   }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpStream.java b/okhttp/src/main/java/okhttp3/internal/http/HttpStream.java
similarity index 92%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpStream.java
rename to okhttp/src/main/java/okhttp3/internal/http/HttpStream.java
index ef1deb7a1f..147197a032 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpStream.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpStream.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
 import java.io.IOException;
 import okio.Sink;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java b/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
similarity index 90%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java
rename to okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
index 5e41c852fb..a8316c0f00 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
@@ -1,13 +1,5 @@
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.Authenticator;
-import com.squareup.okhttp.Challenge;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.Platform;
-import java.io.IOException;
-import java.net.Proxy;
+package okhttp3.internal.http;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -16,9 +8,14 @@
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.TreeSet;
+import okhttp3.Challenge;
+import okhttp3.Headers;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.Platform;
 
-import static com.squareup.okhttp.internal.Util.equal;
-import static java.net.HttpURLConnection.HTTP_PROXY_AUTH;
+import static okhttp3.internal.Util.equal;
 
 /** Headers and utilities for internal use by OkHttp. */
 public final class OkHeaders {
@@ -51,7 +48,7 @@
 
   /**
    * Synthetic response header: the selected
-   * {@link com.squareup.okhttp.Protocol protocol} ("spdy/3.1", "http/1.1", etc).
+   * {@link Protocol protocol} ("spdy/3.1", "http/1.1", etc).
    */
   public static final String SELECTED_PROTOCOL = PREFIX + "-Selected-Protocol";
 
@@ -275,16 +272,4 @@ static boolean isEndToEnd(String fieldName) {
     }
     return result;
   }
-
-  /**
-   * React to a failed authorization response by looking up new credentials.
-   * Returns a request for a subsequent attempt, or null if no further attempts
-   * should be made.
-   */
-  public static Request processAuthHeader(Authenticator authenticator, Response response,
-      Proxy proxy) throws IOException {
-    return response.code() == HTTP_PROXY_AUTH
-        ? authenticator.authenticateProxy(proxy, response)
-        : authenticator.authenticate(proxy, response);
-  }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RealResponseBody.java b/okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java
similarity index 88%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/RealResponseBody.java
rename to okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java
index 18d026f11a..d66fed988c 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RealResponseBody.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RealResponseBody.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.ResponseBody;
+import okhttp3.Headers;
+import okhttp3.MediaType;
+import okhttp3.ResponseBody;
 import okio.BufferedSource;
 
 public final class RealResponseBody extends ResponseBody {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestException.java b/okhttp/src/main/java/okhttp3/internal/http/RequestException.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestException.java
rename to okhttp/src/main/java/okhttp3/internal/http/RequestException.java
index 16893acdfb..56884c811f 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestException.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RequestException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 import java.io.IOException;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestLine.java b/okhttp/src/main/java/okhttp3/internal/http/RequestLine.java
similarity index 86%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestLine.java
rename to okhttp/src/main/java/okhttp3/internal/http/RequestLine.java
index 1a621a53e7..756524a591 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestLine.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RequestLine.java
@@ -1,7 +1,7 @@
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.Request;
+import okhttp3.HttpUrl;
+import okhttp3.Request;
 import java.net.HttpURLConnection;
 import java.net.Proxy;
 
@@ -20,9 +20,9 @@ static String get(Request request, Proxy.Type proxyType) {
     result.append(' ');
 
     if (includeAuthorityInRequestLine(request, proxyType)) {
-      result.append(request.httpUrl());
+      result.append(request.url());
     } else {
-      result.append(requestPath(request.httpUrl()));
+      result.append(requestPath(request.url()));
     }
 
     result.append(" HTTP/1.1");
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RetryableSink.java b/okhttp/src/main/java/okhttp3/internal/http/RetryableSink.java
similarity index 95%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/RetryableSink.java
rename to okhttp/src/main/java/okhttp3/internal/http/RetryableSink.java
index 371769f66e..08ef9fc275 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RetryableSink.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryableSink.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 import java.io.IOException;
 import java.net.ProtocolException;
@@ -22,7 +22,7 @@
 import okio.Sink;
 import okio.Timeout;
 
-import static com.squareup.okhttp.internal.Util.checkOffsetAndCount;
+import static okhttp3.internal.Util.checkOffsetAndCount;
 
 /**
  * An HTTP request body that's completely buffered in memory. This allows
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteException.java b/okhttp/src/main/java/okhttp3/internal/http/RouteException.java
similarity index 97%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteException.java
rename to okhttp/src/main/java/okhttp3/internal/http/RouteException.java
index 62b31751e9..a6aeeeeddd 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteException.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RouteException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java b/okhttp/src/main/java/okhttp3/internal/http/RouteSelector.java
similarity index 89%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java
rename to okhttp/src/main/java/okhttp3/internal/http/RouteSelector.java
index 3365914ce9..f6f06caa0a 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RouteSelector.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.Address;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.Route;
-import com.squareup.okhttp.internal.RouteDatabase;
+import okhttp3.Address;
+import okhttp3.HttpUrl;
+import okhttp3.Route;
+import okhttp3.internal.RouteDatabase;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
@@ -58,7 +58,7 @@ public RouteSelector(Address address, RouteDatabase routeDatabase) {
     this.address = address;
     this.routeDatabase = routeDatabase;
 
-    resetNextProxy(address.url(), address.getProxy());
+    resetNextProxy(address.url(), address.proxy());
   }
 
   /**
@@ -99,10 +99,10 @@ public Route next() throws IOException {
    * failure on a connection returned by this route selector.
    */
   public void connectFailed(Route failedRoute, IOException failure) {
-    if (failedRoute.getProxy().type() != Proxy.Type.DIRECT && address.getProxySelector() != null) {
+    if (failedRoute.proxy().type() != Proxy.Type.DIRECT && address.proxySelector() != null) {
       // Tell the proxy selector when we fail to connect on a fresh connection.
-      address.getProxySelector().connectFailed(
-          address.url().uri(), failedRoute.getProxy().address(), failure);
+      address.proxySelector().connectFailed(
+          address.url().uri(), failedRoute.proxy().address(), failure);
     }
 
     routeDatabase.failed(failedRoute);
@@ -117,7 +117,7 @@ private void resetNextProxy(HttpUrl url, Proxy proxy) {
       // Try each of the ProxySelector choices until one connection succeeds. If none succeed
       // then we'll try a direct connection below.
       proxies = new ArrayList<>();
-      List<Proxy> selectedProxies = address.getProxySelector().select(url.uri());
+      List<Proxy> selectedProxies = address.proxySelector().select(url.uri());
       if (selectedProxies != null) proxies.addAll(selectedProxies);
       // Finally try a direct connection. We only try it once!
       proxies.removeAll(Collections.singleton(Proxy.NO_PROXY));
@@ -134,7 +134,7 @@ private boolean hasNextProxy() {
   /** Returns the next proxy to try. May be PROXY.NO_PROXY but never null. */
   private Proxy nextProxy() throws IOException {
     if (!hasNextProxy()) {
-      throw new SocketException("No route to " + address.getUriHost()
+      throw new SocketException("No route to " + address.url().host()
           + "; exhausted proxy configurations: " + proxies);
     }
     Proxy result = proxies.get(nextProxyIndex++);
@@ -150,8 +150,8 @@ private void resetNextInetSocketAddress(Proxy proxy) throws IOException {
     String socketHost;
     int socketPort;
     if (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) {
-      socketHost = address.getUriHost();
-      socketPort = address.getUriPort();
+      socketHost = address.url().host();
+      socketPort = address.url().port();
     } else {
       SocketAddress proxyAddress = proxy.address();
       if (!(proxyAddress instanceof InetSocketAddress)) {
@@ -172,7 +172,7 @@ private void resetNextInetSocketAddress(Proxy proxy) throws IOException {
       inetSocketAddresses.add(InetSocketAddress.createUnresolved(socketHost, socketPort));
     } else {
       // Try each address for best behavior in mixed IPv4/IPv6 environments.
-      List<InetAddress> addresses = address.getDns().lookup(socketHost);
+      List<InetAddress> addresses = address.dns().lookup(socketHost);
       for (int i = 0, size = addresses.size(); i < size; i++) {
         InetAddress inetAddress = addresses.get(i);
         inetSocketAddresses.add(new InetSocketAddress(inetAddress, socketPort));
@@ -208,7 +208,7 @@ private boolean hasNextInetSocketAddress() {
   /** Returns the next socket address to try. */
   private InetSocketAddress nextInetSocketAddress() throws IOException {
     if (!hasNextInetSocketAddress()) {
-      throw new SocketException("No route to " + address.getUriHost()
+      throw new SocketException("No route to " + address.url().host()
           + "; exhausted inet socket addresses: " + inetSocketAddresses);
     }
     return inetSocketAddresses.get(nextInetSocketAddressIndex++);
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StatusLine.java b/okhttp/src/main/java/okhttp3/internal/http/StatusLine.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/StatusLine.java
rename to okhttp/src/main/java/okhttp3/internal/http/StatusLine.java
index ab9ebc1535..de27241a9e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StatusLine.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/StatusLine.java
@@ -1,7 +1,7 @@
-package com.squareup.okhttp.internal.http;
+package okhttp3.internal.http;
 
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Response;
+import okhttp3.Protocol;
+import okhttp3.Response;
 import java.io.IOException;
 import java.net.ProtocolException;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java b/okhttp/src/main/java/okhttp3/internal/http/StreamAllocation.java
similarity index 94%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
rename to okhttp/src/main/java/okhttp3/internal/http/StreamAllocation.java
index 56750a948c..7ac6c613ec 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/StreamAllocation.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.http;
-
-import com.squareup.okhttp.Address;
-import com.squareup.okhttp.ConnectionPool;
-import com.squareup.okhttp.Route;
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.RouteDatabase;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.io.RealConnection;
+package okhttp3.internal.http;
+
+import okhttp3.Address;
+import okhttp3.ConnectionPool;
+import okhttp3.Route;
+import okhttp3.internal.Internal;
+import okhttp3.internal.RouteDatabase;
+import okhttp3.internal.Util;
+import okhttp3.internal.io.RealConnection;
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.lang.ref.Reference;
@@ -147,35 +147,31 @@ private RealConnection findConnection(int connectTimeout, int readTimeout, int w
       if (allocatedConnection != null && !allocatedConnection.noNewStreams) {
         return allocatedConnection;
       }
-    }
 
-    // Attempt to get a connection from the pool.
-    RealConnection pooledConnection = (RealConnection) connectionPool.get(address, this);
-    if (pooledConnection != null) {
-      synchronized (connectionPool) {
+      // Attempt to get a connection from the pool.
+      RealConnection pooledConnection = Internal.instance.get(connectionPool, address, this);
+      if (pooledConnection != null) {
         this.connection = pooledConnection;
-        if (canceled) throw new IOException("Canceled");
         return pooledConnection;
       }
-    }
 
-    // Attempt to create a connection.
-    synchronized (connectionPool) {
+      // Attempt to create a connection.
       if (routeSelector == null) {
         routeSelector = new RouteSelector(address, routeDatabase());
       }
     }
+
     Route route = routeSelector.next();
     RealConnection newConnection = new RealConnection(route);
     acquire(newConnection);
 
     synchronized (connectionPool) {
-      connectionPool.put(newConnection);
+      Internal.instance.put(connectionPool, newConnection);
       this.connection = newConnection;
       if (canceled) throw new IOException("Canceled");
     }
 
-    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.getConnectionSpecs(),
+    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.connectionSpecs(),
         connectionRetryEnabled);
     routeDatabase().connected(newConnection.getRoute());
 
@@ -238,7 +234,7 @@ private void deallocate(boolean noNewStreams, boolean released, boolean streamFi
           }
           if (connection.allocations.isEmpty()) {
             connection.idleAtNanos = System.nanoTime();
-            if (connectionPool.connectionBecameIdle(connection)) {
+            if (Internal.instance.connectionBecameIdle(connectionPool, connection)) {
               connectionToClose = connection;
             }
           }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/io/FileSystem.java b/okhttp/src/main/java/okhttp3/internal/io/FileSystem.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/io/FileSystem.java
rename to okhttp/src/main/java/okhttp3/internal/io/FileSystem.java
index 74245997a5..f4f120572b 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/io/FileSystem.java
+++ b/okhttp/src/main/java/okhttp3/internal/io/FileSystem.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.internal.io;
+package okhttp3.internal.io;
 
 import java.io.File;
 import java.io.FileNotFoundException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/io/RealConnection.java
similarity index 83%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java
rename to okhttp/src/main/java/okhttp3/internal/io/RealConnection.java
index 4a4e9c8f41..59a1c5b4b4 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/io/RealConnection.java
@@ -14,28 +14,8 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.squareup.okhttp.internal.io;
-
-import com.squareup.okhttp.Address;
-import com.squareup.okhttp.CertificatePinner;
-import com.squareup.okhttp.Connection;
-import com.squareup.okhttp.ConnectionSpec;
-import com.squareup.okhttp.Handshake;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.Protocol;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.Route;
-import com.squareup.okhttp.internal.ConnectionSpecSelector;
-import com.squareup.okhttp.internal.Platform;
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.Version;
-import com.squareup.okhttp.internal.framed.FramedConnection;
-import com.squareup.okhttp.internal.http.Http1xStream;
-import com.squareup.okhttp.internal.http.OkHeaders;
-import com.squareup.okhttp.internal.http.RouteException;
-import com.squareup.okhttp.internal.http.StreamAllocation;
-import com.squareup.okhttp.internal.tls.OkHostnameVerifier;
+package okhttp3.internal.io;
+
 import java.io.IOException;
 import java.lang.ref.Reference;
 import java.net.ConnectException;
@@ -50,15 +30,35 @@
 import javax.net.ssl.SSLPeerUnverifiedException;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.Address;
+import okhttp3.CertificatePinner;
+import okhttp3.Connection;
+import okhttp3.ConnectionSpec;
+import okhttp3.Handshake;
+import okhttp3.HttpUrl;
+import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.Route;
+import okhttp3.internal.ConnectionSpecSelector;
+import okhttp3.internal.Platform;
+import okhttp3.internal.Util;
+import okhttp3.internal.Version;
+import okhttp3.internal.framed.FramedConnection;
+import okhttp3.internal.http.Http1xStream;
+import okhttp3.internal.http.OkHeaders;
+import okhttp3.internal.http.RouteException;
+import okhttp3.internal.http.StreamAllocation;
+import okhttp3.internal.tls.OkHostnameVerifier;
 import okio.BufferedSink;
 import okio.BufferedSource;
 import okio.Okio;
 import okio.Source;
 
-import static com.squareup.okhttp.internal.Util.closeQuietly;
 import static java.net.HttpURLConnection.HTTP_OK;
 import static java.net.HttpURLConnection.HTTP_PROXY_AUTH;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static okhttp3.internal.Util.closeQuietly;
 
 public final class RealConnection implements Connection {
   private final Route route;
@@ -91,10 +91,10 @@ public void connect(int connectTimeout, int readTimeout, int writeTimeout,
 
     RouteException routeException = null;
     ConnectionSpecSelector connectionSpecSelector = new ConnectionSpecSelector(connectionSpecs);
-    Proxy proxy = route.getProxy();
-    Address address = route.getAddress();
+    Proxy proxy = route.proxy();
+    Address address = route.address();
 
-    if (route.getAddress().getSslSocketFactory() == null
+    if (route.address().sslSocketFactory() == null
         && !connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {
       throw new RouteException(new UnknownServiceException(
           "CLEARTEXT communication not supported: " + connectionSpecs));
@@ -103,12 +103,12 @@ public void connect(int connectTimeout, int readTimeout, int writeTimeout,
     while (protocol == null) {
       try {
         rawSocket = proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.HTTP
-            ? address.getSocketFactory().createSocket()
+            ? address.socketFactory().createSocket()
             : new Socket(proxy);
         connectSocket(connectTimeout, readTimeout, writeTimeout, connectionSpecSelector);
       } catch (IOException e) {
-        Util.closeQuietly(socket);
-        Util.closeQuietly(rawSocket);
+        closeQuietly(socket);
+        closeQuietly(rawSocket);
         socket = null;
         rawSocket = null;
         source = null;
@@ -134,14 +134,14 @@ private void connectSocket(int connectTimeout, int readTimeout, int writeTimeout
       ConnectionSpecSelector connectionSpecSelector) throws IOException {
     rawSocket.setSoTimeout(readTimeout);
     try {
-      Platform.get().connectSocket(rawSocket, route.getSocketAddress(), connectTimeout);
+      Platform.get().connectSocket(rawSocket, route.socketAddress(), connectTimeout);
     } catch (ConnectException e) {
-      throw new ConnectException("Failed to connect to " + route.getSocketAddress());
+      throw new ConnectException("Failed to connect to " + route.socketAddress());
     }
     source = Okio.buffer(Okio.source(rawSocket));
     sink = Okio.buffer(Okio.sink(rawSocket));
 
-    if (route.getAddress().getSslSocketFactory() != null) {
+    if (route.address().sslSocketFactory() != null) {
       connectTls(readTimeout, writeTimeout, connectionSpecSelector);
     } else {
       protocol = Protocol.HTTP_1_1;
@@ -152,7 +152,7 @@ private void connectSocket(int connectTimeout, int readTimeout, int writeTimeout
       socket.setSoTimeout(0); // Framed connection timeouts are set per-stream.
 
       FramedConnection framedConnection = new FramedConnection.Builder(true)
-          .socket(socket, route.getAddress().url().host(), source, sink)
+          .socket(socket, route.address().url().host(), source, sink)
           .protocol(protocol)
           .build();
       framedConnection.sendConnectionPreface();
@@ -168,20 +168,20 @@ private void connectTls(int readTimeout, int writeTimeout,
       createTunnel(readTimeout, writeTimeout);
     }
 
-    Address address = route.getAddress();
-    SSLSocketFactory sslSocketFactory = address.getSslSocketFactory();
+    Address address = route.address();
+    SSLSocketFactory sslSocketFactory = address.sslSocketFactory();
     boolean success = false;
     SSLSocket sslSocket = null;
     try {
       // Create the wrapper over the connected socket.
       sslSocket = (SSLSocket) sslSocketFactory.createSocket(
-          rawSocket, address.getUriHost(), address.getUriPort(), true /* autoClose */);
+          rawSocket, address.url().host(), address.url().port(), true /* autoClose */);
 
       // Configure the socket's ciphers, TLS versions, and extensions.
       ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket);
       if (connectionSpec.supportsTlsExtensions()) {
         Platform.get().configureTlsExtensions(
-            sslSocket, address.getUriHost(), address.getProtocols());
+            sslSocket, address.url().host(), address.protocols());
       }
 
       // Force handshake. This can throw!
@@ -189,16 +189,16 @@ private void connectTls(int readTimeout, int writeTimeout,
       Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession());
 
       // Verify that the socket's certificates are acceptable for the target host.
-      if (!address.getHostnameVerifier().verify(address.getUriHost(), sslSocket.getSession())) {
+      if (!address.hostnameVerifier().verify(address.url().host(), sslSocket.getSession())) {
         X509Certificate cert = (X509Certificate) unverifiedHandshake.peerCertificates().get(0);
-        throw new SSLPeerUnverifiedException("Hostname " + address.getUriHost() + " not verified:"
+        throw new SSLPeerUnverifiedException("Hostname " + address.url().host() + " not verified:"
             + "\n    certificate: " + CertificatePinner.pin(cert)
             + "\n    DN: " + cert.getSubjectDN().getName()
             + "\n    subjectAltNames: " + OkHostnameVerifier.allSubjectAltNames(cert));
       }
 
       // Check that the certificate pinner is satisfied by the certificates presented.
-      address.getCertificatePinner().check(address.getUriHost(),
+      address.certificatePinner().check(address.url().host(),
           unverifiedHandshake.peerCertificates());
 
       // Success! Save the handshake and the ALPN protocol.
@@ -234,7 +234,7 @@ private void connectTls(int readTimeout, int writeTimeout,
   private void createTunnel(int readTimeout, int writeTimeout) throws IOException {
     // Make an SSL Tunnel on the first message pair of each SSL + proxy connection.
     Request tunnelRequest = createTunnelRequest();
-    HttpUrl url = tunnelRequest.httpUrl();
+    HttpUrl url = tunnelRequest.url();
     String requestLine = "CONNECT " + url.host() + ":" + url.port() + " HTTP/1.1";
     while (true) {
       Http1xStream tunnelConnection = new Http1xStream(null, source, sink);
@@ -265,8 +265,7 @@ private void createTunnel(int readTimeout, int writeTimeout) throws IOException
           return;
 
         case HTTP_PROXY_AUTH:
-          tunnelRequest = OkHeaders.processAuthHeader(
-              route.getAddress().getAuthenticator(), response, route.getProxy());
+          tunnelRequest = route.address().proxyAuthenticator().authenticate(route, response);
           if (tunnelRequest != null) continue;
           throw new IOException("Failed to authenticate with proxy");
 
@@ -286,8 +285,8 @@ private void createTunnel(int readTimeout, int writeTimeout) throws IOException
    */
   private Request createTunnelRequest() throws IOException {
     return new Request.Builder()
-        .url(route.getAddress().url())
-        .header("Host", Util.hostHeader(route.getAddress().url()))
+        .url(route.address().url())
+        .header("Host", Util.hostHeader(route.address().url()))
         .header("Proxy-Connection", "Keep-Alive")
         .header("User-Agent", Version.userAgent()) // For HTTP/1.0 proxies like Squid.
         .build();
@@ -304,7 +303,7 @@ boolean isConnected() {
 
   public void cancel() {
     // Close the raw socket so we don't end up doing synchronous I/O.
-    Util.closeQuietly(rawSocket);
+    closeQuietly(rawSocket);
   }
 
   @Override public Socket getSocket() {
@@ -368,11 +367,11 @@ public boolean isMultiplexed() {
 
   @Override public String toString() {
     return "Connection{"
-        + route.getAddress().url().host() + ":" + route.getAddress().url().port()
+        + route.address().url().host() + ":" + route.address().url().port()
         + ", proxy="
-        + route.getProxy()
+        + route.proxy()
         + " hostAddress="
-        + route.getSocketAddress()
+        + route.socketAddress()
         + " cipherSuite="
         + (handshake != null ? handshake.cipherSuite() : "none")
         + " protocol="
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/tls/DistinguishedNameParser.java b/okhttp/src/main/java/okhttp3/internal/tls/DistinguishedNameParser.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/tls/DistinguishedNameParser.java
rename to okhttp/src/main/java/okhttp3/internal/tls/DistinguishedNameParser.java
index e0aef14916..7a6814b185 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/tls/DistinguishedNameParser.java
+++ b/okhttp/src/main/java/okhttp3/internal/tls/DistinguishedNameParser.java
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package com.squareup.okhttp.internal.tls;
+package okhttp3.internal.tls;
 
 import javax.security.auth.x500.X500Principal;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
similarity index 99%
rename from okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java
rename to okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
index 740de1bcdf..aee522b055 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java
+++ b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
@@ -15,7 +15,7 @@
  *  limitations under the License.
  */
 
-package com.squareup.okhttp.internal.tls;
+package okhttp3.internal.tls;
 
 import java.security.cert.Certificate;
 import java.security.cert.CertificateParsingException;
diff --git a/pom.xml b/pom.xml
index f8182535a8..c58d828c39 100644
--- a/pom.xml
+++ b/pom.xml
@@ -9,9 +9,9 @@
     <version>7</version>
   </parent>
 
-  <groupId>com.squareup.okhttp</groupId>
+  <groupId>com.squareup.okhttp3</groupId>
   <artifactId>parent</artifactId>
-  <version>2.7.0-SNAPSHOT</version>
+  <version>3.0.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>OkHttp (Parent)</name>
@@ -150,7 +150,7 @@
                 -->
               <property>
                 <name>listener</name>
-                <value>com.squareup.okhttp.testing.InstallUncaughtExceptionHandlerListener</value>
+                <value>okhttp3.testing.InstallUncaughtExceptionHandlerListener</value>
               </property>
             </properties>
           </configuration>
diff --git a/samples/crawler/pom.xml b/samples/crawler/pom.xml
index 103979a5ab..0a1e7f6b21 100644
--- a/samples/crawler/pom.xml
+++ b/samples/crawler/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp.sample</groupId>
+    <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>crawler</artifactId>
@@ -14,7 +14,7 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>com.squareup.okhttp3</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
diff --git a/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java
similarity index 92%
rename from samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java
rename to samples/crawler/src/main/java/okhttp3/sample/Crawler.java
index 8c731bebac..68bcdea9e9 100644
--- a/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java
+++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.sample;
+package okhttp3.sample;
 
-import com.squareup.okhttp.Cache;
-import com.squareup.okhttp.HttpUrl;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.internal.NamedRunnable;
+import okhttp3.Cache;
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.NamedRunnable;
 import java.io.File;
 import java.io.IOException;
 import java.util.Collections;
@@ -106,7 +106,7 @@ public void fetch(HttpUrl url) throws IOException {
     Document document = Jsoup.parse(response.body().string(), url.toString());
     for (Element element : document.select("a[href]")) {
       String href = element.attr("href");
-      HttpUrl link = response.request().httpUrl().resolve(href);
+      HttpUrl link = response.request().url().resolve(href);
       if (link != null) queue.add(link);
     }
   }
diff --git a/samples/guide/pom.xml b/samples/guide/pom.xml
index ca9d4c4a7b..388758502f 100644
--- a/samples/guide/pom.xml
+++ b/samples/guide/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp.sample</groupId>
+    <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>guide</artifactId>
@@ -14,12 +14,12 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>com.squareup.okhttp3</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>com.squareup.okhttp3</groupId>
       <artifactId>okhttp-ws</artifactId>
       <version>${project.version}</version>
     </dependency>
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/guide/GetExample.java b/samples/guide/src/main/java/okhttp3/guide/GetExample.java
similarity index 79%
rename from samples/guide/src/main/java/com/squareup/okhttp/guide/GetExample.java
rename to samples/guide/src/main/java/okhttp3/guide/GetExample.java
index aa2f200e40..a5d1c23d39 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/guide/GetExample.java
+++ b/samples/guide/src/main/java/okhttp3/guide/GetExample.java
@@ -1,8 +1,8 @@
-package com.squareup.okhttp.guide;
+package okhttp3.guide;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 
 public class GetExample {
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/guide/PostExample.java b/samples/guide/src/main/java/okhttp3/guide/PostExample.java
similarity index 84%
rename from samples/guide/src/main/java/com/squareup/okhttp/guide/PostExample.java
rename to samples/guide/src/main/java/okhttp3/guide/PostExample.java
index 5de644c7d7..43c1432095 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/guide/PostExample.java
+++ b/samples/guide/src/main/java/okhttp3/guide/PostExample.java
@@ -1,10 +1,10 @@
-package com.squareup.okhttp.guide;
+package okhttp3.guide;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 import java.io.IOException;
 
 public class PostExample {
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java b/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java
similarity index 90%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java
rename to samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java
index 9fe9d1ab67..eda73525b2 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/AccessHeaders.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 
 public final class AccessHeaders {
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/AsynchronousGet.java b/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java
similarity index 87%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/AsynchronousGet.java
rename to samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java
index 34cfc584ce..bf94aad758 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/AsynchronousGet.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.Callback;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.Callback;
+import okhttp3.Headers;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 
 public final class AsynchronousGet {
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/Authenticate.java b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
similarity index 76%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/Authenticate.java
rename to samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
index 44581aed33..09b29cccd1 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/Authenticate.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
@@ -13,22 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.Authenticator;
-import com.squareup.okhttp.Credentials;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
 import java.io.IOException;
-import java.net.Proxy;
+import okhttp3.Authenticator;
+import okhttp3.Credentials;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.Route;
 
 public final class Authenticate {
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
     client.setAuthenticator(new Authenticator() {
-      @Override public Request authenticate(Proxy proxy, Response response) {
+      @Override public Request authenticate(Route route, Response response) throws IOException {
         System.out.println("Authenticating for response: " + response);
         System.out.println("Challenges: " + response.challenges());
         String credential = Credentials.basic("jesse", "password1");
@@ -36,10 +36,6 @@ public void run() throws Exception {
             .header("Authorization", credential)
             .build();
       }
-
-      @Override public Request authenticateProxy(Proxy proxy, Response response) {
-        return null; // Null indicates no attempt to authenticate.
-      }
     });
 
     Request request = new Request.Builder()
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CacheResponse.java b/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
similarity index 92%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/CacheResponse.java
rename to samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
index 3335ebe668..59b3ce519f 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CacheResponse.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.Cache;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.Cache;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.File;
 import java.io.IOException;
 
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CancelCall.java b/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java
similarity index 92%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/CancelCall.java
rename to samples/guide/src/main/java/okhttp3/recipes/CancelCall.java
index 9f8d37305c..b2515a7567 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CancelCall.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.Call;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.Call;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CertificatePinning.java b/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
similarity index 89%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/CertificatePinning.java
rename to samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
index b643d52d03..2df890dfa9 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CertificatePinning.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.CertificatePinner;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.CertificatePinner;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 import java.security.cert.Certificate;
 
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CheckHandshake.java b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java
similarity index 89%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/CheckHandshake.java
rename to samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java
index 0a2e86e7d2..d1ba3cee16 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CheckHandshake.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.CertificatePinner;
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.CertificatePinner;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 import java.security.cert.Certificate;
 import java.util.Collections;
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/ConfigureTimeouts.java b/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
similarity index 90%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/ConfigureTimeouts.java
rename to samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
index f358a4564f..47852c3214 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/ConfigureTimeouts.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.util.concurrent.TimeUnit;
 
 public final class ConfigureTimeouts {
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CustomTrust.java b/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
similarity index 97%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/CustomTrust.java
rename to samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
index f99dc627a9..da4476e354 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CustomTrust.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.CertificatePinner;
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.CertificatePinner;
+import okhttp3.Headers;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 import java.io.InputStream;
 import java.security.GeneralSecurityException;
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/LoggingInterceptors.java b/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
similarity index 83%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/LoggingInterceptors.java
rename to samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
index bcfa6e9aa9..8a086206a9 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/LoggingInterceptors.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 import java.util.logging.Logger;
 
@@ -32,12 +32,12 @@ public LoggingInterceptors() {
         long t1 = System.nanoTime();
         Request request = chain.request();
         logger.info(String.format("Sending request %s on %s%n%s",
-            request.httpUrl(), chain.connection(), request.headers()));
+            request.url(), chain.connection(), request.headers()));
         Response response = chain.proceed(request);
 
         long t2 = System.nanoTime();
         logger.info(String.format("Received response for %s in %.1fms%n%s",
-            request.httpUrl(), (t2 - t1) / 1e6d, response.headers()));
+            request.url(), (t2 - t1) / 1e6d, response.headers()));
         return response;
       }
     });
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/ParseResponseWithGson.java b/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithGson.java
similarity index 91%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/ParseResponseWithGson.java
rename to samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithGson.java
index cf63f0d4b1..5253aa5516 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/ParseResponseWithGson.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithGson.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
 import com.google.gson.Gson;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 import java.util.Map;
 
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PerCallSettings.java b/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
similarity index 92%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/PerCallSettings.java
rename to samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
index af4956e17f..1970a434b6 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PerCallSettings.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;
 
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostFile.java b/samples/guide/src/main/java/okhttp3/recipes/PostFile.java
similarity index 85%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/PostFile.java
rename to samples/guide/src/main/java/okhttp3/recipes/PostFile.java
index a0d98df45f..c10993fcfe 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostFile.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PostFile.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 import java.io.File;
 import java.io.IOException;
 
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostForm.java b/samples/guide/src/main/java/okhttp3/recipes/PostForm.java
similarity index 81%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/PostForm.java
rename to samples/guide/src/main/java/okhttp3/recipes/PostForm.java
index 30054f1905..18c4b1d15b 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostForm.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PostForm.java
@@ -13,20 +13,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.FormEncodingBuilder;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
+import okhttp3.FormBody;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 import java.io.IOException;
 
 public final class PostForm {
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
-    RequestBody formBody = new FormEncodingBuilder()
+    RequestBody formBody = new FormBody.Builder()
         .add("search", "Jurassic Park")
         .build();
     Request request = new Request.Builder()
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostMultipart.java b/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
similarity index 84%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/PostMultipart.java
rename to samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
index 2c6cfa0c27..67ddf88c5f 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostMultipart.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
-
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.MultipartBuilder;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
+package okhttp3.recipes;
+
+import okhttp3.MediaType;
+import okhttp3.MultipartBody;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 import java.io.File;
 import java.io.IOException;
 
@@ -37,8 +37,8 @@
 
   public void run() throws Exception {
     // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image
-    RequestBody requestBody = new MultipartBuilder()
-        .type(MultipartBuilder.FORM)
+    RequestBody requestBody = new MultipartBody.Builder()
+        .setType(MultipartBody.FORM)
         .addFormDataPart("title", "Square Logo")
         .addFormDataPart("image", "logo-square.png",
             RequestBody.create(MEDIA_TYPE_PNG, new File("website/static/logo-square.png")))
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostStreaming.java b/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java
similarity index 89%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/PostStreaming.java
rename to samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java
index 500344c7e9..5086d3345e 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostStreaming.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 import java.io.IOException;
 import okio.BufferedSink;
 
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostString.java b/samples/guide/src/main/java/okhttp3/recipes/PostString.java
similarity index 87%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/PostString.java
rename to samples/guide/src/main/java/okhttp3/recipes/PostString.java
index 943636abb5..2eae7f6a3f 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostString.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PostString.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 import java.io.IOException;
 
 public final class PostString {
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/Progress.java b/samples/guide/src/main/java/okhttp3/recipes/Progress.java
similarity index 89%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/Progress.java
rename to samples/guide/src/main/java/okhttp3/recipes/Progress.java
index 9d329fa16e..5f9104c9be 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/Progress.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/Progress.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
-
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.Request;
+package okhttp3.recipes;
+
+import okhttp3.Interceptor;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.Request;
 import java.io.IOException;
 import okio.Buffer;
 import okio.BufferedSource;
@@ -80,11 +80,11 @@ public ProgressResponseBody(ResponseBody responseBody, ProgressListener progress
       return responseBody.contentType();
     }
 
-    @Override public long contentLength() throws IOException {
+    @Override public long contentLength() {
       return responseBody.contentLength();
     }
 
-    @Override public BufferedSource source() throws IOException {
+    @Override public BufferedSource source() {
       if (bufferedSource == null) {
         bufferedSource = Okio.buffer(source(responseBody.source()));
       }
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/RequestBodyCompression.java b/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
similarity index 92%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/RequestBodyCompression.java
rename to samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
index c4805bdeb3..328c717fcd 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/RequestBodyCompression.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
 import com.google.gson.Gson;
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
+import okhttp3.Interceptor;
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 import java.io.IOException;
 import java.util.LinkedHashMap;
 import java.util.Map;
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/RewriteResponseCacheControl.java b/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
similarity index 91%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/RewriteResponseCacheControl.java
rename to samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
index 63f819e5e5..25030261d9 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/RewriteResponseCacheControl.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.Cache;
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.Cache;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.File;
 import java.io.IOException;
 
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/SynchronousGet.java b/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java
similarity index 88%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/SynchronousGet.java
rename to samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java
index 6b4cecbe13..4b7376060e 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/SynchronousGet.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
+import okhttp3.Headers;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
 import java.io.IOException;
 
 public final class SynchronousGet {
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/WebSocketEcho.java b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
similarity index 81%
rename from samples/guide/src/main/java/com/squareup/okhttp/recipes/WebSocketEcho.java
rename to samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
index 877812e5bf..6a5ed06e52 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/WebSocketEcho.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
@@ -1,21 +1,21 @@
-package com.squareup.okhttp.recipes;
+package okhttp3.recipes;
 
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
-import com.squareup.okhttp.ws.WebSocket;
-import com.squareup.okhttp.ws.WebSocketCall;
-import com.squareup.okhttp.ws.WebSocketListener;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
+import okhttp3.ws.WebSocket;
+import okhttp3.ws.WebSocketCall;
+import okhttp3.ws.WebSocketListener;
 import java.io.IOException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
 import okio.Buffer;
 import okio.ByteString;
 
-import static com.squareup.okhttp.ws.WebSocket.BINARY;
-import static com.squareup.okhttp.ws.WebSocket.TEXT;
+import static okhttp3.ws.WebSocket.BINARY;
+import static okhttp3.ws.WebSocket.TEXT;
 
 public final class WebSocketEcho implements WebSocketListener {
   private final Executor writeExecutor = Executors.newSingleThreadExecutor();
diff --git a/samples/pom.xml b/samples/pom.xml
index a2819cb2a7..50cfe2af05 100644
--- a/samples/pom.xml
+++ b/samples/pom.xml
@@ -4,12 +4,12 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp</groupId>
+    <groupId>com.squareup.okhttp3</groupId>
     <artifactId>parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
-  <groupId>com.squareup.okhttp.sample</groupId>
+  <groupId>com.squareup.okhttp3.sample</groupId>
   <artifactId>sample-parent</artifactId>
   <packaging>pom</packaging>
   <name>Samples (Parent)</name>
diff --git a/samples/simple-client/pom.xml b/samples/simple-client/pom.xml
index 1c8fb86c40..d48482349c 100644
--- a/samples/simple-client/pom.xml
+++ b/samples/simple-client/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp.sample</groupId>
+    <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>simple-client</artifactId>
@@ -14,7 +14,7 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>com.squareup.okhttp3</groupId>
       <artifactId>okhttp</artifactId>
       <version>${project.version}</version>
     </dependency>
diff --git a/samples/simple-client/src/main/java/com/squareup/okhttp/sample/OkHttpContributors.java b/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java
similarity index 89%
rename from samples/simple-client/src/main/java/com/squareup/okhttp/sample/OkHttpContributors.java
rename to samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java
index d897a9a953..6187b9bf84 100644
--- a/samples/simple-client/src/main/java/com/squareup/okhttp/sample/OkHttpContributors.java
+++ b/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java
@@ -1,11 +1,11 @@
-package com.squareup.okhttp.sample;
+package okhttp3.sample;
 
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.ResponseBody;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.ResponseBody;
 import java.io.Reader;
 import java.util.Collections;
 import java.util.Comparator;
diff --git a/samples/static-server/pom.xml b/samples/static-server/pom.xml
index 06799b80e4..b66186cff5 100644
--- a/samples/static-server/pom.xml
+++ b/samples/static-server/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.okhttp.sample</groupId>
+    <groupId>com.squareup.okhttp3.sample</groupId>
     <artifactId>sample-parent</artifactId>
-    <version>2.7.0-SNAPSHOT</version>
+    <version>3.0.0-SNAPSHOT</version>
   </parent>
 
   <artifactId>static-server</artifactId>
@@ -14,7 +14,7 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.okhttp</groupId>
+      <groupId>com.squareup.okhttp3</groupId>
       <artifactId>mockwebserver</artifactId>
       <version>${project.version}</version>
     </dependency>
@@ -33,7 +33,7 @@
           <transformers>
             <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
               <manifestEntries>
-                <Main-Class>com.squareup.okhttp.sample.SampleServer</Main-Class>
+                <Main-Class>okhttp3.sample.SampleServer</Main-Class>
               </manifestEntries>
             </transformer>
           </transformers>
diff --git a/samples/static-server/src/main/java/com/squareup/okhttp/sample/SampleServer.java b/samples/static-server/src/main/java/okhttp3/sample/SampleServer.java
similarity index 94%
rename from samples/static-server/src/main/java/com/squareup/okhttp/sample/SampleServer.java
rename to samples/static-server/src/main/java/okhttp3/sample/SampleServer.java
index a2fd19d424..a7d1e7ca5d 100644
--- a/samples/static-server/src/main/java/com/squareup/okhttp/sample/SampleServer.java
+++ b/samples/static-server/src/main/java/okhttp3/sample/SampleServer.java
@@ -1,10 +1,10 @@
-package com.squareup.okhttp.sample;
+package okhttp3.sample;
 
-import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.mockwebserver.Dispatcher;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
+import okhttp3.internal.Util;
+import okhttp3.mockwebserver.Dispatcher;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
