diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
index 80346ba443..5b4a8cd358 100644
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
@@ -15,23 +15,22 @@
  */
 package okhttp3;
 
+import okhttp3.internal.Internal;
+import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.connection.RealConnection;
+import okhttp3.internal.connection.StreamAllocation;
+import org.junit.Test;
+
+import javax.net.SocketFactory;
 import java.net.InetSocketAddress;
 import java.net.Proxy;
 import java.net.ProxySelector;
 import java.net.Socket;
 import java.util.Collections;
 import java.util.concurrent.TimeUnit;
-import javax.net.SocketFactory;
-import okhttp3.internal.Internal;
-import okhttp3.internal.RecordingOkAuthenticator;
-import okhttp3.internal.connection.RealConnection;
-import okhttp3.internal.connection.StreamAllocation;
-import org.junit.Test;
 
 import static okhttp3.TestUtil.awaitGarbageCollection;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 public final class ConnectionPoolTest {
   private final Address addressA = newAddress("a");
@@ -173,6 +172,8 @@
     assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected.
   }
 
+  @Test
+
   /** Use a helper method so there's no hidden reference remaining on the stack. */
   private void allocateAndLeakAllocation(ConnectionPool pool, RealConnection connection) {
     synchronized (pool) {
diff --git a/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
index 35d2f67906..c27a534a8c 100644
--- a/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
@@ -15,11 +15,12 @@
  */
 package okhttp3;
 
-import java.io.IOException;
 import okio.Buffer;
 import okio.BufferedSink;
 import org.junit.Test;
 
+import java.io.IOException;
+
 import static okhttp3.internal.Util.UTF_8;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
@@ -49,7 +50,7 @@
     assertEquals("123", body.boundary());
     assertEquals(MultipartBody.MIXED, body.type());
     assertEquals("multipart/mixed; boundary=123", body.contentType().toString());
-    assertEquals(1, body.parts().size());
+    assertEquals(1, body.size());
     assertEquals(53, body.contentLength());
 
     Buffer buffer = new Buffer();
diff --git a/okhttp-tests/src/test/java/okhttp3/ResponseTest.java b/okhttp-tests/src/test/java/okhttp3/ResponseTest.java
index 8977fdf441..cbb3c4539c 100644
--- a/okhttp-tests/src/test/java/okhttp3/ResponseTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ResponseTest.java
@@ -15,14 +15,11 @@
  */
 package okhttp3;
 
-import java.io.IOException;
-import okio.Buffer;
-import okio.BufferedSource;
-import okio.Okio;
-import okio.Source;
-import okio.Timeout;
+import okio.*;
 import org.junit.Test;
 
+import java.io.IOException;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
@@ -95,6 +92,7 @@ private Response newResponse(ResponseBody responseBody) {
             .build())
         .protocol(Protocol.HTTP_1_1)
         .code(200)
+            .header("Content-type","plain/html")
         .body(responseBody)
         .build();
   }
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java
index 73e09e5a94..653dfe9ab1 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java
@@ -1461,7 +1461,7 @@ public void http2connectionMergeSettingstest() throws IOException, InterruptedEx
     Request request = new Request.Builder().url(server.url("/")).build();
     codec.writeRequestHeaders(request);
     codec.createRequestBody(request, 10);
-    Response response = new Response.Builder().request(request).protocol(Protocol.HTTP_2).code(200).addHeader("Content-type","plain/html").addHeader(":path","/temp").message("ABCDDE").build();
+    Response response = new Response.Builder().request(request).protocol(Protocol.HTTP_2).code(200).addHeader("Content-type","plain/html").addHeader(":path","/temp").removeHeader("Content").message("ABCDDE").build();
     assertEquals("plain/html",codec.openResponseBody(response).contentType().toString());
     codec.finishRequest();
   }
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
index 3e66ac7764..073e69c05e 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
@@ -418,6 +418,40 @@
 
   }
 
+    @Test (expected = UnsupportedOperationException.class)
+    public void invalidGetProtocol() throws Exception {
+        X509Certificate certificate = certificate(""
+                + "-----BEGIN CERTIFICATE-----\n"
+                + "MIIBWDCCAQKgAwIBAgIJANS1EtICX2AZMA0GCSqGSIb3DQEBBQUAMBQxEjAQBgNV\n"
+                + "BAMTCWxvY2FsaG9zdDAgFw0xMjAxMDIxOTA4NThaGA8yMTExMTIwOTE5MDg1OFow\n"
+                + "FDESMBAGA1UEAxMJbG9jYWxob3N0MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAPpt\n"
+                + "atK8r4/hf4hSIs0os/BSlQLbRBaK9AfBReM4QdAklcQqe6CHsStKfI8pp0zs7Ptg\n"
+                + "PmMdpbttL0O7mUboBC8CAwEAAaM1MDMwMQYDVR0RBCowKIIVbG9jYWxob3N0Lmxv\n"
+                + "Y2FsZG9tYWlugglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQEFBQADQQD0ntfL\n"
+                + "DCzOCv9Ma6Lv5o5jcYWVxvBSTsnt22hsJpWD1K7iY9lbkLwl0ivn73pG2evsAn9G\n"
+                + "X8YKH52fnHsCrhSD\n"
+                + "-----END CERTIFICATE-----");
+        FakeSSLSession session = new FakeSSLSession(certificate);
+        session.getProtocol();
+    }
+
+    @Test (expected = UnsupportedOperationException.class)
+    public void invalidGetSessionContext() throws Exception {
+        X509Certificate certificate = certificate(""
+                + "-----BEGIN CERTIFICATE-----\n"
+                + "MIIBWDCCAQKgAwIBAgIJANS1EtICX2AZMA0GCSqGSIb3DQEBBQUAMBQxEjAQBgNV\n"
+                + "BAMTCWxvY2FsaG9zdDAgFw0xMjAxMDIxOTA4NThaGA8yMTExMTIwOTE5MDg1OFow\n"
+                + "FDESMBAGA1UEAxMJbG9jYWxob3N0MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAPpt\n"
+                + "atK8r4/hf4hSIs0os/BSlQLbRBaK9AfBReM4QdAklcQqe6CHsStKfI8pp0zs7Ptg\n"
+                + "PmMdpbttL0O7mUboBC8CAwEAAaM1MDMwMQYDVR0RBCowKIIVbG9jYWxob3N0Lmxv\n"
+                + "Y2FsZG9tYWlugglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQEFBQADQQD0ntfL\n"
+                + "DCzOCv9Ma6Lv5o5jcYWVxvBSTsnt22hsJpWD1K7iY9lbkLwl0ivn73pG2evsAn9G\n"
+                + "X8YKH52fnHsCrhSD\n"
+                + "-----END CERTIFICATE-----");
+        FakeSSLSession session = new FakeSSLSession(certificate);
+        session.getSessionContext();
+    }
+
 
   @Test public void emptySubjectAltNames() throws Exception{
 
