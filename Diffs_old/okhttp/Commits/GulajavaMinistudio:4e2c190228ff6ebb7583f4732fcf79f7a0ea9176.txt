diff --git a/.travis.yml b/.travis.yml
index f62ec6de57..143348a630 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -5,8 +5,12 @@ dist: trusty
 jdk:
   - oraclejdk8
 
+# avoid ./gradlew assemble default which builds docs
+install:
+ - ./gradlew jar --parallel
+
 script:
- - ./gradlew check --parallel
+ - ./gradlew test --parallel
 
 after_success:
   - .buildscript/deploy_snapshot.sh
diff --git a/docs/interceptors.md b/docs/interceptors.md
index 24ef5c5014..b3d759e9d0 100644
--- a/docs/interceptors.md
+++ b/docs/interceptors.md
@@ -23,7 +23,7 @@ class LoggingInterceptor implements Interceptor {
 }
 ```
 
-A call to `chain.proceed(request)` is a critical part of each interceptor’s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request.
+A call to `chain.proceed(request)` is a critical part of each interceptor’s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request. If `chain.proceed(request)` is being called more than once previous response bodies must be closed.
 
 Interceptors can be chained. Suppose you have both a compressing interceptor and a checksumming interceptor: you'll need to decide whether data is compressed and then checksummed, or checksummed and then compressed. OkHttp uses lists to track interceptors, and interceptors are called in order.
 
