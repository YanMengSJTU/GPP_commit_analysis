diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
index 343df45113..838f887e38 100644
--- a/okhttp/src/main/java/okhttp3/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -134,13 +134,13 @@
  * caching directives. It even offers convenient constants {@link CacheControl#FORCE_NETWORK} and
  * {@link CacheControl#FORCE_CACHE} that address the use cases above.
  */
-public final class Cache implements Closeable, Flushable {
+public class Cache implements Closeable, Flushable {
   private static final int VERSION = 201105;
   private static final int ENTRY_METADATA = 0;
   private static final int ENTRY_BODY = 1;
   private static final int ENTRY_COUNT = 2;
 
-  final InternalCache internalCache = new InternalCache() {
+  InternalCache internalCache = new InternalCache() {
     @Override public Response get(Request request) throws IOException {
       return Cache.this.get(request);
     }
@@ -190,8 +190,7 @@ public static String key(HttpUrl url) {
     return ByteString.encodeUtf8(url.toString()).md5().hex();
   }
 
-  @Nullable Response get(Request request) {
-    String key = key(request.url());
+  public Response get(String key) {
     DiskLruCache.Snapshot snapshot;
     Entry entry;
     try {
@@ -221,6 +220,27 @@ public static String key(HttpUrl url) {
     return response;
   }
 
+  @Nullable Response get(Request request) {
+    String key = key(request.url());
+    return get(key);
+  }
+
+  public @Nullable CacheRequest put(String key, Response response) {
+    Entry entry = new Entry(response);
+    DiskLruCache.Editor editor = null;
+    try {
+      editor = cache.edit(key);
+      if (editor == null) {
+        return null;
+      }
+      entry.writeTo(editor);
+      return new CacheRequestImpl(editor);
+    } catch (IOException e) {
+      abortQuietly(editor);
+      return null;
+    }
+  }
+
   @Nullable CacheRequest put(Response response) {
     String requestMethod = response.request().method();
 
@@ -243,26 +263,15 @@ public static String key(HttpUrl url) {
       return null;
     }
 
-    Entry entry = new Entry(response);
-    DiskLruCache.Editor editor = null;
-    try {
-      editor = cache.edit(key(response.request().url()));
-      if (editor == null) {
-        return null;
-      }
-      entry.writeTo(editor);
-      return new CacheRequestImpl(editor);
-    } catch (IOException e) {
-      abortQuietly(editor);
-      return null;
-    }
+    String key = key(response.request().url());
+    return put(key, response);
   }
 
-  void remove(Request request) throws IOException {
+  public void remove(Request request) throws IOException {
     cache.remove(key(request.url()));
   }
 
-  void update(Response cached, Response network) {
+  public void update(Response cached, Response network) {
     Entry entry = new Entry(network);
     DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;
     DiskLruCache.Editor editor = null;
@@ -431,7 +440,7 @@ public synchronized int requestCount() {
     return requestCount;
   }
 
-  private final class CacheRequestImpl implements CacheRequest {
+  public class CacheRequestImpl implements CacheRequest {
     private final DiskLruCache.Editor editor;
     private Sink cacheOut;
     private Sink body;
@@ -475,7 +484,7 @@ public synchronized int requestCount() {
     }
   }
 
-  private static final class Entry {
+  public static class Entry {
     /** Synthetic response header: the local time when the request was sent. */
     private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";
 
@@ -541,7 +550,7 @@ public synchronized int requestCount() {
      * base64-encoded and appear each on their own line. A length of -1 is used to encode a null
      * array. The last line is optional. If present, it contains the TLS version.
      */
-    Entry(Source in) throws IOException {
+    public Entry(Source in) throws IOException {
       try {
         BufferedSource source = Okio.buffer(in);
         url = source.readUtf8LineStrict();
@@ -595,7 +604,7 @@ public synchronized int requestCount() {
       }
     }
 
-    Entry(Response response) {
+    public Entry(Response response) {
       this.url = response.request().url().toString();
       this.varyHeaders = HttpHeaders.varyHeaders(response);
       this.requestMethod = response.request().method();
@@ -734,7 +743,7 @@ static int readInt(BufferedSource source) throws IOException {
     }
   }
 
-  private static class CacheResponseBody extends ResponseBody {
+  public static class CacheResponseBody extends ResponseBody {
     final DiskLruCache.Snapshot snapshot;
     private final BufferedSource bodySource;
     private final @Nullable String contentType;
