diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java
index 313e0d7427..49e326fd23 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/HttpUrlConnectionImplTest.java
@@ -4,13 +4,16 @@
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.MockWebServer;
 import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URL;
+
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.SocketTimeoutException;
+import java.net.URL;
+
 import static org.junit.Assert.fail;
 
 public class HttpUrlConnectionImplTest {
@@ -38,4 +41,24 @@
     } catch (IOException ignored) {
     }
   }
+
+  /**
+   * Follow Up URL with illegal characters should not throw IOException.
+   */
+  @Test public void followUpURLHasIllegalCharacter() {
+    MockResponse mockResponse = new MockResponse();
+    mockResponse.setResponseCode(302);
+    mockResponse.addHeader("Location", "http://example.com/index.php?t=A|B|C");
+
+    server.enqueue(mockResponse);
+    server.enqueue(new MockResponse());
+    URL url = server.getUrl("/");
+    HttpURLConnection conn = client.open(url);
+
+    try {
+      conn.getResponseCode();
+    } catch (IOException e) {
+      fail();
+    }
+  }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index f90e8d7803..036cd822d4 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -30,6 +30,7 @@
 import com.squareup.okhttp.internal.Internal;
 import com.squareup.okhttp.internal.InternalCache;
 import com.squareup.okhttp.internal.Util;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.CacheRequest;
@@ -37,14 +38,17 @@
 import java.net.ProtocolException;
 import java.net.Proxy;
 import java.net.URL;
+import java.net.URLEncoder;
 import java.net.UnknownHostException;
 import java.security.cert.CertificateException;
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
+
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLHandshakeException;
 import javax.net.ssl.SSLSocketFactory;
+
 import okio.BufferedSink;
 import okio.BufferedSource;
 import okio.GzipSource;
@@ -801,7 +805,7 @@ public Request followUpRequest() throws IOException {
       case HTTP_SEE_OTHER:
         String location = response.header("Location");
         if (location == null) return null;
-        URL url = new URL(request.url(), location);
+        URL url = new URL(request.url(), URLEncoder.encode(location, "UTF-8"));
 
         // Don't follow redirects to unsupported protocols.
         if (!url.getProtocol().equals("https") && !url.getProtocol().equals("http")) return null;
