diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
index c5217b16c9..220b7ba16a 100644
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
@@ -34,6 +34,7 @@
 import okhttp3.internal.platform.Platform;
 import okio.Buffer;
 import okio.BufferedSource;
+import org.jetbrains.annotations.NotNull;
 
 import static okhttp3.internal.platform.Platform.INFO;
 
@@ -137,7 +138,7 @@ public Level getLevel() {
     return level;
   }
 
-  @Override public Response intercept(Chain chain) throws IOException {
+  @Override public Response intercept(@NotNull Chain chain) throws IOException {
     Level level = this.level;
 
     Request request = chain.request();
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
index 046b098f2c..3ec5b23da7 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
@@ -57,6 +57,7 @@
 import okhttp3.internal.http.HttpMethod;
 import okhttp3.internal.http.StatusLine;
 import okhttp3.internal.platform.Platform;
+import org.jetbrains.annotations.NotNull;
 
 import static okhttp3.internal.platform.Platform.WARN;
 
@@ -559,7 +560,7 @@ private Response getResponse() throws IOException {
 
   static final class UnexpectedException extends IOException {
     static final Interceptor INTERCEPTOR = new Interceptor() {
-      @Override public Response intercept(Chain chain) throws IOException {
+      @Override public Response intercept(@NotNull Chain chain) throws IOException {
         try {
           return chain.proceed(chain.request());
         } catch (Error | RuntimeException e) {
@@ -597,7 +598,7 @@ public void proceed() {
       }
     }
 
-    @Override public Response intercept(Chain chain) throws IOException {
+    @Override public Response intercept(@NotNull Chain chain) throws IOException {
       Request request = chain.request();
 
       // Double-check the URL filter to prevent redirects from hitting filtered URLs.
diff --git a/okhttp/pom.xml b/okhttp/pom.xml
index 2e07de0875..0e5b25905b 100644
--- a/okhttp/pom.xml
+++ b/okhttp/pom.xml
@@ -22,6 +22,11 @@
       <artifactId>android</artifactId>
       <scope>provided</scope>
     </dependency>
+    <dependency>
+      <groupId>org.jetbrains</groupId>
+      <artifactId>annotations-java5</artifactId>
+      <version>15.0</version>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/okhttp/src/main/java/okhttp3/Interceptor.java b/okhttp/src/main/java/okhttp3/Interceptor.java
index c1f8840a3c..8376f2dbce 100644
--- a/okhttp/src/main/java/okhttp3/Interceptor.java
+++ b/okhttp/src/main/java/okhttp3/Interceptor.java
@@ -15,6 +15,8 @@
  */
 package okhttp3;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.io.IOException;
 
 /**
@@ -23,12 +25,12 @@
  * or response.
  */
 public interface Interceptor {
-  Response intercept(Chain chain) throws IOException;
+  Response intercept(@NotNull Chain chain) throws IOException;
 
   interface Chain {
     Request request();
 
-    Response proceed(Request request) throws IOException;
+    Response proceed(@NotNull Request request) throws IOException;
 
     Connection connection();
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
index 2b848e0971..d32f2a56ce 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
@@ -36,6 +36,7 @@
 import okio.Sink;
 import okio.Source;
 import okio.Timeout;
+import org.jetbrains.annotations.NotNull;
 
 import static java.net.HttpURLConnection.HTTP_NOT_MODIFIED;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
@@ -50,7 +51,7 @@ public CacheInterceptor(InternalCache cache) {
     this.cache = cache;
   }
 
-  @Override public Response intercept(Chain chain) throws IOException {
+  @Override public Response intercept(@NotNull Chain chain) throws IOException {
     Response cacheCandidate = cache != null
         ? cache.get(chain.request())
         : null;
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
index cabd065813..ded84d2644 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
@@ -23,6 +23,7 @@
 import okhttp3.Response;
 import okhttp3.internal.http.HttpCodec;
 import okhttp3.internal.http.RealInterceptorChain;
+import org.jetbrains.annotations.NotNull;
 
 /** Opens a connection to the target server and proceeds to the next interceptor. */
 public final class ConnectInterceptor implements Interceptor {
@@ -32,7 +33,7 @@ public ConnectInterceptor(OkHttpClient client) {
     this.client = client;
   }
 
-  @Override public Response intercept(Chain chain) throws IOException {
+  @Override public Response intercept(@NotNull Chain chain) throws IOException {
     RealInterceptorChain realChain = (RealInterceptorChain) chain;
     Request request = realChain.request();
     StreamAllocation streamAllocation = realChain.streamAllocation();
diff --git a/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
index f8a720ff8a..b2ac912fdc 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
@@ -29,6 +29,7 @@
 import okhttp3.internal.Version;
 import okio.GzipSource;
 import okio.Okio;
+import org.jetbrains.annotations.NotNull;
 
 import static okhttp3.internal.Util.hostHeader;
 
@@ -44,7 +45,7 @@ public BridgeInterceptor(CookieJar cookieJar) {
     this.cookieJar = cookieJar;
   }
 
-  @Override public Response intercept(Chain chain) throws IOException {
+  @Override public Response intercept(@NotNull Chain chain) throws IOException {
     Request userRequest = chain.request();
     Request.Builder requestBuilder = userRequest.newBuilder();
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
index 6adbc28b56..9b1f971819 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
@@ -25,6 +25,7 @@
 import okio.BufferedSink;
 import okio.Okio;
 import okio.Sink;
+import org.jetbrains.annotations.NotNull;
 
 /** This is the last interceptor in the chain. It makes a network call to the server. */
 public final class CallServerInterceptor implements Interceptor {
@@ -34,7 +35,7 @@ public CallServerInterceptor(boolean forWebSocket) {
     this.forWebSocket = forWebSocket;
   }
 
-  @Override public Response intercept(Chain chain) throws IOException {
+  @Override public Response intercept(@NotNull Chain chain) throws IOException {
     HttpCodec httpCodec = ((RealInterceptorChain) chain).httpStream();
     StreamAllocation streamAllocation = ((RealInterceptorChain) chain).streamAllocation();
     Request request = chain.request();
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
index d5326c64f5..f7accfa4ef 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
@@ -23,6 +23,7 @@
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.internal.connection.StreamAllocation;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * A concrete interceptor chain that carries the entire interceptor chain: all application
@@ -63,7 +64,7 @@ public HttpCodec httpStream() {
     return request;
   }
 
-  @Override public Response proceed(Request request) throws IOException {
+  @Override public Response proceed(@NotNull Request request) throws IOException {
     return proceed(request, streamAllocation, httpCodec, connection);
   }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
index 2a7cd13822..0f7bf8d686 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
@@ -38,6 +38,7 @@
 import okhttp3.Route;
 import okhttp3.internal.connection.RouteException;
 import okhttp3.internal.connection.StreamAllocation;
+import org.jetbrains.annotations.NotNull;
 
 import static java.net.HttpURLConnection.HTTP_CLIENT_TIMEOUT;
 import static java.net.HttpURLConnection.HTTP_MOVED_PERM;
@@ -99,7 +100,7 @@ public StreamAllocation streamAllocation() {
     return streamAllocation;
   }
 
-  @Override public Response intercept(Chain chain) throws IOException {
+  @Override public Response intercept(@NotNull Chain chain) throws IOException {
     Request request = chain.request();
 
     streamAllocation = new StreamAllocation(
diff --git a/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java b/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
index 8cb72b4bc8..5d6a9e15bb 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
@@ -21,6 +21,7 @@
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
+import org.jetbrains.annotations.NotNull;
 
 public final class LoggingInterceptors {
   private static final Logger logger = Logger.getLogger(LoggingInterceptors.class.getName());
@@ -38,7 +39,7 @@ public void run() throws Exception {
   }
 
   private static class LoggingInterceptor implements Interceptor {
-    @Override public Response intercept(Chain chain) throws IOException {
+    @Override public Response intercept(@NotNull Chain chain) throws IOException {
       long t1 = System.nanoTime();
       Request request = chain.request();
       logger.info(String.format("Sending request %s on %s%n%s",
diff --git a/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java b/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
index b1a62c0fa3..9f47ac584d 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
@@ -30,6 +30,7 @@
 import okio.BufferedSink;
 import okio.GzipSink;
 import okio.Okio;
+import org.jetbrains.annotations.NotNull;
 
 public final class RequestBodyCompression {
   /**
@@ -71,7 +72,7 @@ public static void main(String... args) throws Exception {
 
   /** This interceptor compresses the HTTP request body. Many webservers can't handle this! */
   static class GzipRequestInterceptor implements Interceptor {
-    @Override public Response intercept(Chain chain) throws IOException {
+    @Override public Response intercept(@NotNull Chain chain) throws IOException {
       Request originalRequest = chain.request();
       if (originalRequest.body() == null || originalRequest.header("Content-Encoding") != null) {
         return chain.proceed(originalRequest);
