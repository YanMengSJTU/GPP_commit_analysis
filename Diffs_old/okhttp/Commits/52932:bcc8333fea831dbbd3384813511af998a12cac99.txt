diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 54e47b888d..84e6b66a8d 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -190,23 +190,23 @@ String redactedUrl() {
   Response getResponseWithInterceptorChain() throws IOException {
     // Build a full stack of interceptors.
     List<Interceptor> interceptors = new ArrayList<>();
-    interceptors.addAll(client.interceptors());//在配置 OkHttpClient 时设置的拦截器
-    interceptors.add(retryAndFollowUpInterceptor);//在失败重试以及重定向的拦截器
+    interceptors.addAll(client.interceptors());//在配置 OkHttpClient 时自定义 的拦截器
+    interceptors.add(retryAndFollowUpInterceptor);//处理请求失败的重试，重定向
     //负责把用户构造的请求转换为发送到服务器的请求、把服务器返回的响应转换为用户友好的响应的 BridgeInterceptor
     interceptors.add(new BridgeInterceptor(client.cookieJar()));
-    interceptors.add(new CacheInterceptor(client.internalCache()));//负责读取缓存直接返回、更新缓存
-    interceptors.add(new ConnectInterceptor(client));//负责和服务器建立连接
+    interceptors.add(new CacheInterceptor(client.internalCache()));//判断缓存是否存在，读取缓存，更新缓存等等
+    interceptors.add(new ConnectInterceptor(client));//建立客户端和服务器的连接
     if (!forWebSocket) {
-      //配置 OkHttpClient 时设置的 networkInterceptors
+      //添加开发者自定义的网络层拦截器
       interceptors.addAll(client.networkInterceptors());
     }
     //负责向服务器发送请求数据、从服务器读取响应数据
     interceptors.add(new CallServerInterceptor(forWebSocket));
-
+    //一个包裹这request的chain
     Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,
         originalRequest, this, eventListener, client.connectTimeoutMillis(),
         client.readTimeoutMillis(), client.writeTimeoutMillis());
-
+    //将chain传递给第一个 拦截器,每一个拦截都调用proceed()传递给下一个拦截器,最后一个返回结果，结果通过return 一直向上返回
     return chain.proceed(originalRequest);
   }
 }
