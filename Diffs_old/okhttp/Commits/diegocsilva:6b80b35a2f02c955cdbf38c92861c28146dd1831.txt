diff --git a/okhttp/src/main/java/okhttp3/AutomaticProxySelector.java b/okhttp/src/main/java/okhttp3/AutomaticProxySelector.java
index ef1e197629..ba6b5acbf1 100644
--- a/okhttp/src/main/java/okhttp3/AutomaticProxySelector.java
+++ b/okhttp/src/main/java/okhttp3/AutomaticProxySelector.java
@@ -1,20 +1,14 @@
 package okhttp3;
 
-import sun.net.spi.DefaultProxySelector;
-
 import java.io.IOException;
 import java.net.Proxy;
+import java.net.ProxySelector;
 import java.net.SocketAddress;
 import java.net.URI;
 import java.util.Collections;
 import java.util.List;
 
-public class AutomaticProxySelector extends DefaultProxySelector {
-
-    public AutomaticProxySelector(List<String> noProxyForHosts, List<Proxy> proxies) {
-        this.noProxyForHosts = noProxyForHosts;
-        this.proxies = proxies;
-    }
+public class AutomaticProxySelector extends ProxySelector {
 
     private List<String> noProxyForHosts;
     private List<Proxy> proxies;
@@ -44,4 +38,12 @@ private boolean hostsContainHost(String host) {
         }
         return false;
     }
+
+    public void setNoProxyForHosts(List<String> noProxyForHosts) {
+        this.noProxyForHosts = noProxyForHosts;
+    }
+
+    public void setProxies(List<Proxy> proxies) {
+        this.proxies = proxies;
+    }
 }
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index 0c72a635e4..97a76f5d8e 100755
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -15,29 +15,6 @@
  */
 package okhttp3;
 
-import java.net.MalformedURLException;
-import java.net.Proxy;
-import java.net.ProxySelector;
-import java.net.Socket;
-import java.net.UnknownHostException;
-import java.security.GeneralSecurityException;
-import java.security.KeyStore;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
-import javax.net.SocketFactory;
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.SSLSocketFactory;
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.TrustManagerFactory;
-import javax.net.ssl.X509TrustManager;
 import okhttp3.internal.Internal;
 import okhttp3.internal.Util;
 import okhttp3.internal.cache.InternalCache;
@@ -51,6 +28,30 @@
 import okio.Sink;
 import okio.Source;
 
+import javax.annotation.Nullable;
+import javax.net.SocketFactory;
+import javax.net.ssl.SSLSocket;
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.X509TrustManager;
+import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.SSLContext;
+import java.net.MalformedURLException;
+import java.net.Socket;
+import java.net.Proxy;
+import java.net.UnknownHostException;
+import java.net.ProxySelector;
+import java.security.GeneralSecurityException;
+import java.security.KeyStore;
+import java.util.Collections;
+import java.util.List;
+import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.Random;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.ExecutorService;
+
 import static okhttp3.internal.Util.assertionError;
 import static okhttp3.internal.Util.checkDuration;
 
@@ -198,7 +199,6 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
 
   final Dispatcher dispatcher;
   final @Nullable Proxy proxy;
-  protected final @Nullable Proxy defaultProxy;
   final @Nullable List<String> noProxyForHosts;
   final List<Protocol> protocols;
   final List<ConnectionSpec> connectionSpecs;
@@ -232,20 +232,32 @@ public OkHttpClient() {
 
   OkHttpClient(Builder builder) {
     this.dispatcher = builder.dispatcher;
-    this.proxy = builder.proxy;
-    this.defaultProxy = builder.proxy;
-    this.noProxyForHosts = builder.noProxyForHosts;
     this.protocols = builder.protocols;
     this.connectionSpecs = builder.connectionSpecs;
     this.interceptors = Util.immutableList(builder.interceptors);
     this.networkInterceptors = Util.immutableList(builder.networkInterceptors);
     this.eventListenerFactory = builder.eventListenerFactory;
-    this.proxySelector = builder.proxySelector;
     this.cookieJar = builder.cookieJar;
     this.cache = builder.cache;
     this.internalCache = builder.internalCache;
     this.socketFactory = builder.socketFactory;
 
+    if (builder.proxy != null
+            && builder.noProxyForHosts != null
+            && builder.proxySelector.equals(ProxySelector.getDefault())) {
+      AutomaticProxySelector automaticProxySelector = new AutomaticProxySelector();
+      automaticProxySelector.setNoProxyForHosts(builder.noProxyForHosts);
+      automaticProxySelector.setProxies(Collections.singletonList(builder.proxy));
+
+      this.proxySelector = automaticProxySelector;
+      this.proxy = null;
+      this.noProxyForHosts = builder.noProxyForHosts;
+    } else {
+      this.proxy = builder.proxy;
+      this.proxySelector = builder.proxySelector;
+      this.noProxyForHosts = builder.noProxyForHosts;
+    }
+
     boolean isTLS = false;
     for (ConnectionSpec spec : connectionSpecs) {
       isTLS = isTLS || spec.isTls();
@@ -337,10 +349,6 @@ public Proxy proxy() {
     return proxy;
   }
 
-  public Proxy defaultProxyproxy() {
-    return defaultProxy;
-  }
-
   public List<String> noProxyForHosts() {
     return noProxyForHosts;
   }
@@ -455,42 +463,6 @@ public Dispatcher dispatcher() {
     return webSocket;
   }
 
-  OkHttpClient disableProxyCaseNoProxyListContainsHost(String host) {
-      if (this.containsActiveProxyAndContainsNoProxyList()) {
-          if (hostsContainHost(this.noProxyForHosts, host)) {
-              return new OkHttpClient.Builder().client(this).proxyOff().build();
-          }
-      }
-      return clientWithDefaultConfigurationProxy();
-  }
-
-  private OkHttpClient clientWithDefaultConfigurationProxy() {
-    if (this.defaultProxy == this.proxy)
-        return this;
-    else if (this.defaultProxy != null && this.proxy == null) {
-        return new OkHttpClient.Builder().client(this).proxyOff().build();
-    } else {
-        return this;
-    }
-  }
-
-  private static boolean hostsContainHost(List<String> noProxyForHosts, String host) {
-    for (String url : noProxyForHosts) {
-        if (url.equals(host)) {
-            return true;
-        }
-    }
-    return false;
-  }
-
-  private boolean containsActiveProxyAndContainsNoProxyList() {
-      return this.proxy != null
-              && proxy != Proxy.NO_PROXY
-              && !proxy.type().equals(Proxy.Type.DIRECT)
-              && noProxyForHosts != null
-              && !noProxyForHosts.isEmpty();
-  }
-
   public Builder newBuilder() {
     return new Builder(this);
   }
@@ -552,7 +524,6 @@ public Builder() {
     Builder(OkHttpClient okHttpClient) {
       this.dispatcher = okHttpClient.dispatcher;
       this.proxy = okHttpClient.proxy;
-      this.defaultProxy = okHttpClient.defaultProxy;
       this.noProxyForHosts = okHttpClient.noProxyForHosts;
       this.protocols = okHttpClient.protocols;
       this.connectionSpecs = okHttpClient.connectionSpecs;
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index d016944170..9d27d585ed 100755
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -57,7 +57,6 @@ private RealCall(OkHttpClient client, Request originalRequest, boolean forWebSoc
 
   static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {
     // Safely publish the Call instance to the EventListener.
-    client = client.disableProxyCaseNoProxyListContainsHost(originalRequest.url.host);
     RealCall call = new RealCall(client, originalRequest, forWebSocket);
     call.eventListener = client.eventListenerFactory().create(call);
     return call;
