diff --git a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
index e1fc4ff014..e862022f49 100644
--- a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
@@ -43,6 +43,7 @@
 import okhttp3.Response;
 import okhttp3.ResponseBody;
 import okhttp3.internal.Internal;
+import okhttp3.internal.JavaNetHeaders;
 import okhttp3.internal.Util;
 import okhttp3.internal.http.CacheRequest;
 import okhttp3.internal.http.HttpMethod;
@@ -332,7 +333,7 @@ public Principal getLocalPrincipal() {
         @Override
         public Map<String, List<String>> getHeaders() throws IOException {
           // Java requires that the entry with a null key be the status line.
-          return OkHeaders.toMultimap(headers, StatusLine.get(response).toString());
+          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());
         }
 
         @Override
@@ -346,7 +347,7 @@ public InputStream getBody() throws IOException {
         @Override
         public Map<String, List<String>> getHeaders() throws IOException {
           // Java requires that the entry with a null key be the status line.
-          return OkHeaders.toMultimap(headers, StatusLine.get(response).toString());
+          return JavaNetHeaders.toMultimap(headers, StatusLine.get(response).toString());
         }
 
         @Override
@@ -394,7 +395,7 @@ static HttpURLConnection createJavaUrlConnectionForCachePut(Response okResponse)
    * Extracts an immutable request header map from the supplied {@link Headers}.
    */
   static Map<String, List<String>> extractJavaHeaders(Request request) {
-    return OkHeaders.toMultimap(request.headers(), null);
+    return JavaNetHeaders.toMultimap(request.headers(), null);
   }
 
   /**
@@ -585,7 +586,7 @@ public String getRequestProperty(String key) {
       // spec. There seems no good reason why this should fail while getRequestProperty() is ok.
       // We don't fail here, because we need all request header values for caching Vary responses
       // correctly.
-      return OkHeaders.toMultimap(request.headers(), null);
+      return JavaNetHeaders.toMultimap(request.headers(), null);
     }
 
     @Override
@@ -659,7 +660,7 @@ public String getHeaderField(String fieldName) {
 
     @Override
     public Map<String, List<String>> getHeaderFields() {
-      return OkHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());
+      return JavaNetHeaders.toMultimap(response.headers(), StatusLine.get(response).toString());
     }
 
     @Override
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
index 6f71a72543..9b637bd843 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
@@ -62,6 +62,7 @@
 import okhttp3.OkHttpClient;
 import okhttp3.OkUrlFactory;
 import okhttp3.internal.Internal;
+import okhttp3.internal.JavaNetCookieJar;
 import okhttp3.internal.SslContextBuilder;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
@@ -109,11 +110,9 @@
     AndroidInternal.setResponseCache(new OkUrlFactory(client), cache);
 
     cookieManager = new CookieManager();
-    CookieManager.setDefault(cookieManager);
   }
 
   @After public void tearDown() throws Exception {
-    CookieManager.setDefault(null);
     ResponseCache.setDefault(null);
   }
 
@@ -1468,6 +1467,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   }
 
   @Test public void cachePlusCookies() throws Exception {
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
     server.enqueue(new MockResponse()
         .addHeader("Set-Cookie: a=FIRST; domain=" + server.getCookieDomain() + ";")
         .addHeader("Last-Modified: " + formatDate(-1, TimeUnit.HOURS))
diff --git a/okhttp-tests/src/test/java/okhttp3/CacheTest.java b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
index b6feada1d9..344cd0c416 100644
--- a/okhttp-tests/src/test/java/okhttp3/CacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
@@ -18,7 +18,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.HttpCookie;
 import java.net.HttpURLConnection;
@@ -41,6 +40,7 @@
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSession;
 import okhttp3.internal.Internal;
+import okhttp3.internal.JavaNetCookieJar;
 import okhttp3.internal.SslContextBuilder;
 import okhttp3.internal.Util;
 import okhttp3.internal.io.InMemoryFileSystem;
@@ -86,12 +86,11 @@
     server.setProtocolNegotiationEnabled(false);
     cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);
     client.setCache(cache);
-    CookieHandler.setDefault(cookieManager);
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
   }
 
   @After public void tearDown() throws Exception {
     ResponseCache.setDefault(null);
-    CookieHandler.setDefault(null);
     cache.delete();
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/CallTest.java b/okhttp-tests/src/test/java/okhttp3/CallTest.java
index 4cc81b4b3d..2c21282a8e 100644
--- a/okhttp-tests/src/test/java/okhttp3/CallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java
@@ -50,6 +50,7 @@
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 import okhttp3.internal.DoubleInetAddressDns;
+import okhttp3.internal.JavaNetCookieJar;
 import okhttp3.internal.RecordingOkAuthenticator;
 import okhttp3.internal.SingleInetAddressDns;
 import okhttp3.internal.SslContextBuilder;
@@ -1439,7 +1440,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     String portList = Integer.toString(server.getPort());
     cookie.setPortlist(portList);
     cookieManager.getCookieStore().add(server.url("/").uri(), cookie);
-    client.setCookieHandler(cookieManager);
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
 
     Response response = client.newCall(new Request.Builder()
         .url(server.url("/page1"))
diff --git a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
index 0715a45a0a..2f37c3e5c0 100644
--- a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
@@ -110,20 +110,17 @@
    */
   @Test public void copyWithDefaultsWhenDefaultIsGlobal() throws Exception {
     ProxySelector proxySelector = new RecordingProxySelector();
-    CookieManager cookieManager = new CookieManager();
     Authenticator authenticator = new RecordingAuthenticator();
     SocketFactory socketFactory = SocketFactory.getDefault(); // Global isn't configurable.
     OkHostnameVerifier hostnameVerifier = OkHostnameVerifier.INSTANCE; // Global isn't configurable.
     CertificatePinner certificatePinner = CertificatePinner.DEFAULT; // Global isn't configurable.
 
-    CookieManager.setDefault(cookieManager);
     ProxySelector.setDefault(proxySelector);
     Authenticator.setDefault(authenticator);
 
     OkHttpClient client = new OkHttpClient().copyWithDefaults();
 
     assertSame(proxySelector, client.getProxySelector());
-    assertSame(cookieManager, client.getCookieHandler());
     assertSame(AuthenticatorAdapter.INSTANCE, client.getAuthenticator());
     assertSame(AuthenticatorAdapter.INSTANCE, client.getProxyAuthenticator());
     assertSame(socketFactory, client.getSocketFactory());
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
index c4f59b1e23..78d1af9309 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
@@ -37,6 +37,7 @@
 import okhttp3.OkHttpClient;
 import okhttp3.OkUrlFactory;
 import okhttp3.Protocol;
+import okhttp3.internal.JavaNetCookieJar;
 import okhttp3.internal.RecordingAuthenticator;
 import okhttp3.internal.SslContextBuilder;
 import okhttp3.internal.Util;
@@ -370,7 +371,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
 
   @Test public void acceptAndTransmitCookies() throws Exception {
     CookieManager cookieManager = new CookieManager();
-    client.client().setCookieHandler(cookieManager);
+    client.client().setCookieJar(new JavaNetCookieJar(cookieManager));
 
     server.enqueue(new MockResponse()
         .addHeader("set-cookie: c=oreo; domain=" + server.getCookieDomain())
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
index f22e2698a7..dfe3950c29 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
@@ -17,29 +17,32 @@
 package okhttp3.internal.http;
 
 import java.io.IOException;
-import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.HttpCookie;
 import java.net.HttpURLConnection;
-import java.net.URI;
 import java.net.URLConnection;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.atomic.AtomicReference;
+import okhttp3.CookieJar;
+import okhttp3.Headers;
+import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.OkUrlFactory;
+import okhttp3.internal.JavaNetCookieJar;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
 import static java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -54,15 +57,10 @@ public void setUp() throws Exception {
     client = new OkHttpClient();
   }
 
-  @After
-  public void tearDown() throws Exception {
-    CookieHandler.setDefault(null);
-  }
-
   @Test
   public void testNetscapeResponse() throws Exception {
     CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
-    CookieHandler.setDefault(cookieManager);
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
     MockWebServer server = new MockWebServer();
     server.start();
 
@@ -90,7 +88,7 @@ public void testNetscapeResponse() throws Exception {
 
   @Test public void testRfc2109Response() throws Exception {
     CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
-    CookieHandler.setDefault(cookieManager);
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
     MockWebServer server = new MockWebServer();
     server.start();
 
@@ -120,7 +118,7 @@ public void testNetscapeResponse() throws Exception {
 
   @Test public void testRfc2965Response() throws Exception {
     CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
-    CookieHandler.setDefault(cookieManager);
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
     MockWebServer server = new MockWebServer();
     server.start();
 
@@ -154,7 +152,7 @@ public void testNetscapeResponse() throws Exception {
 
   @Test public void testQuotedAttributeValues() throws Exception {
     CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
-    CookieHandler.setDefault(cookieManager);
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
     MockWebServer server = new MockWebServer();
     server.start();
 
@@ -200,7 +198,7 @@ public void testNetscapeResponse() throws Exception {
     cookieB.setDomain(server.getCookieDomain());
     cookieB.setPath("/");
     cookieManager.getCookieStore().add(server.url("/").uri(), cookieB);
-    CookieHandler.setDefault(cookieManager);
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
 
     get(server, "/");
     RecordedRequest request = server.takeRequest();
@@ -232,7 +230,7 @@ public void testNetscapeResponse() throws Exception {
     String portList = Integer.toString(redirectSource.getPort());
     cookie.setPortlist(portList);
     cookieManager.getCookieStore().add(redirectSource.url("/").uri(), cookie);
-    CookieHandler.setDefault(cookieManager);
+    client.setCookieJar(new JavaNetCookieJar(cookieManager));
 
     get(redirectSource, "/");
     RecordedRequest request = redirectSource.takeRequest();
@@ -253,22 +251,25 @@ public void testNetscapeResponse() throws Exception {
 
   /**
    * Test which headers show up where. The cookie manager should be notified of both user-specified
-   * and derived headers like {@code Host}. Headers named {@code Cookie} or {@code Cookie2} that are
-   * returned by the cookie manager should show up in the request and in {@code
-   * getRequestProperties}.
+   * and derived headers like {@code Host}. All headers returned from the cookie jar are retained
+   * including {@code Cookie}, {@code Cookie2}, and any other headers.
+   *
+   * <p>This behavior is different from {@link JavaNetCookieJar}, which retains only headers named
+   * {@code Cookie} and {@code Cookie2}.
    */
   @Test public void testHeadersSentToCookieHandler() throws IOException, InterruptedException {
-    final Map<String, List<String>> cookieHandlerHeaders = new HashMap<>();
-    CookieHandler.setDefault(new CookieManager() {
-      @Override
-      public Map<String, List<String>> get(URI uri,
-          Map<String, List<String>> requestHeaders) throws IOException {
-        cookieHandlerHeaders.putAll(requestHeaders);
-        Map<String, List<String>> result = new HashMap<>();
-        result.put("Cookie", Collections.singletonList("Bar=bar"));
-        result.put("Cookie2", Collections.singletonList("Baz=baz"));
-        result.put("Quux", Collections.singletonList("quux"));
-        return result;
+    final AtomicReference<Headers> requestHeadersRef = new AtomicReference<>();
+    client.setCookieJar(new CookieJar() {
+      @Override public void saveFromResponse(HttpUrl url, Headers headers) {
+      }
+
+      @Override public Headers loadForRequest(HttpUrl url, Headers headers) {
+        requestHeadersRef.set(headers);
+        Headers.Builder result = headers.newBuilder();
+        result.add("Cookie", "Bar=bar");
+        result.add("Cookie2", "Baz=baz");
+        result.add("Quux", "quux");
+        return result.build();
       }
     });
     MockWebServer server = new MockWebServer();
@@ -287,10 +288,13 @@ public void testNetscapeResponse() throws Exception {
 
     RecordedRequest request = server.takeRequest();
 
-    assertContainsAll(cookieHandlerHeaders.keySet(), "Foo");
-    assertContainsAll(cookieHandlerHeaders.keySet(),
-        "Content-type", "User-Agent", "Connection", "Host");
-    assertFalse(cookieHandlerHeaders.containsKey("Cookie"));
+    Headers requestHeaders = requestHeadersRef.get();
+    assertEquals(Arrays.asList("foo"), requestHeaders.values("Foo"));
+    assertNotNull(requestHeadersRef.get().get("Content-Type"));
+    assertNotNull(requestHeadersRef.get().get("User-Agent"));
+    assertNotNull(requestHeadersRef.get().get("Connection"));
+    assertNotNull(requestHeadersRef.get().get("Host"));
+    assertNull(requestHeadersRef.get().get("Cookie"));
 
     /*
      * The API specifies that calling getRequestProperties() on a connected instance should fail
@@ -309,17 +313,19 @@ public void testNetscapeResponse() throws Exception {
     assertEquals("foo", request.getHeader("Foo"));
     assertEquals("Bar=bar", request.getHeader("Cookie"));
     assertEquals("Baz=baz", request.getHeader("Cookie2"));
-    assertNull(request.getHeader("Quux"));
+    assertEquals("quux", request.getHeader("Quux"));
   }
 
   @Test public void testCookiesSentIgnoresCase() throws Exception {
-    CookieHandler.setDefault(new CookieManager() {
-      @Override public Map<String, List<String>> get(URI uri,
-          Map<String, List<String>> requestHeaders) throws IOException {
-        Map<String, List<String>> result = new HashMap<>();
-        result.put("COOKIE", Collections.singletonList("Bar=bar"));
-        result.put("cooKIE2", Collections.singletonList("Baz=baz"));
-        return result;
+    client.setCookieJar(new CookieJar() {
+      @Override public void saveFromResponse(HttpUrl url, Headers headers) {
+      }
+
+      @Override public Headers loadForRequest(HttpUrl url, Headers headers) {
+        return headers.newBuilder()
+            .add("COOKIE", "Bar=bar")
+            .add("cooKIE2", "Baz=baz")
+            .build();
       }
     });
     MockWebServer server = new MockWebServer();
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetCookieJar.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetCookieJar.java
new file mode 100644
index 0000000000..326dae56d9
--- /dev/null
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetCookieJar.java
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal;
+
+import java.io.IOException;
+import java.net.CookieHandler;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+import okhttp3.CookieJar;
+import okhttp3.Headers;
+import okhttp3.HttpUrl;
+
+/** A cookie jar that delegates to a {@link java.net.CookieHandler}. */
+public final class JavaNetCookieJar implements CookieJar {
+  private final CookieHandler cookieHandler;
+
+  public JavaNetCookieJar(CookieHandler cookieHandler) {
+    this.cookieHandler = cookieHandler;
+  }
+
+  @Override public void saveFromResponse(HttpUrl url, Headers headers) {
+    if (cookieHandler != null) {
+      try {
+        cookieHandler.put(url.uri(), JavaNetHeaders.toMultimap(headers, null));
+      } catch (IOException e) {
+        Internal.logger.log(Level.WARNING, "Saving cookies failed for " + url.resolve("/..."), e);
+      }
+    }
+  }
+
+  @Override public Headers loadForRequest(HttpUrl url, Headers headers) {
+    try {
+      // Capture the request headers added so far so that they can be offered to the CookieHandler.
+      // This is mostly to stay close to the RI; it is unlikely any of the headers above would
+      // affect cookie choice besides "Host".
+      Map<String, List<String>> headersMultimap = JavaNetHeaders.toMultimap(headers, null);
+      Map<String, List<String>> cookies = cookieHandler.get(url.uri(), headersMultimap);
+
+      // Add any new cookies to the request.
+      Headers.Builder headersBuilder = headers.newBuilder();
+      addCookies(headersBuilder, cookies);
+      return headersBuilder.build();
+    } catch (IOException e) {
+      Internal.logger.log(Level.WARNING, "Loading cookies failed for " + url.resolve("/..."), e);
+      return headers;
+    }
+  }
+
+  public static void addCookies(Headers.Builder builder, Map<String, List<String>> cookieHeaders) {
+    for (Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {
+      String key = entry.getKey();
+      if (("Cookie".equalsIgnoreCase(key) || "Cookie2".equalsIgnoreCase(key))
+          && !entry.getValue().isEmpty()) {
+        builder.add(key, buildCookieHeader(entry.getValue()));
+      }
+    }
+  }
+
+  /**
+   * Send all cookies in one big header, as recommended by <a
+   * href="http://tools.ietf.org/html/rfc6265#section-4.2.1">RFC 6265</a>.
+   */
+  private static String buildCookieHeader(List<String> cookies) {
+    if (cookies.size() == 1) return cookies.get(0);
+    StringBuilder sb = new StringBuilder();
+    for (int i = 0, size = cookies.size(); i < size; i++) {
+      if (i > 0) sb.append("; ");
+      sb.append(cookies.get(i));
+    }
+    return sb.toString();
+  }
+}
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetHeaders.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetHeaders.java
new file mode 100644
index 0000000000..0b7a02e1f9
--- /dev/null
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/JavaNetHeaders.java
@@ -0,0 +1,70 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
+import okhttp3.Headers;
+
+public final class JavaNetHeaders {
+  private JavaNetHeaders() {
+  }
+
+  private static final Comparator<String> FIELD_NAME_COMPARATOR = new Comparator<String>() {
+    // @FindBugsSuppressWarnings("ES_COMPARING_PARAMETER_STRING_WITH_EQ")
+    @Override public int compare(String a, String b) {
+      if (a == b) {
+        return 0;
+      } else if (a == null) {
+        return -1;
+      } else if (b == null) {
+        return 1;
+      } else {
+        return String.CASE_INSENSITIVE_ORDER.compare(a, b);
+      }
+    }
+  };
+
+  /**
+   * Returns an immutable map containing each field to its list of values.
+   *
+   * @param valueForNullKey the request line for requests, or the status line for responses. If
+   * non-null, this value is mapped to the null key.
+   */
+  public static Map<String, List<String>> toMultimap(Headers headers, String valueForNullKey) {
+    Map<String, List<String>> result = new TreeMap<>(FIELD_NAME_COMPARATOR);
+    for (int i = 0, size = headers.size(); i < size; i++) {
+      String fieldName = headers.name(i);
+      String value = headers.value(i);
+
+      List<String> allValues = new ArrayList<>();
+      List<String> otherValues = result.get(fieldName);
+      if (otherValues != null) {
+        allValues.addAll(otherValues);
+      }
+      allValues.add(value);
+      result.put(fieldName, Collections.unmodifiableList(allValues));
+    }
+    if (valueForNullKey != null) {
+      result.put(null, Collections.unmodifiableList(Collections.singletonList(valueForNullKey)));
+    }
+    return Collections.unmodifiableMap(result);
+  }
+}
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
index 05412e8b12..8129c1fe84 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
@@ -51,6 +51,7 @@
 import okhttp3.Response;
 import okhttp3.Route;
 import okhttp3.internal.Internal;
+import okhttp3.internal.JavaNetHeaders;
 import okhttp3.internal.Platform;
 import okhttp3.internal.Util;
 import okhttp3.internal.Version;
@@ -210,7 +211,7 @@ private static String responseSourceHeader(Response response) {
 
   @Override public final Map<String, List<String>> getHeaderFields() {
     try {
-      return OkHeaders.toMultimap(getHeaders(),
+      return JavaNetHeaders.toMultimap(getHeaders(),
           StatusLine.get(getResponse().getResponse()).toString());
     } catch (IOException e) {
       return Collections.emptyMap();
@@ -223,7 +224,7 @@ private static String responseSourceHeader(Response response) {
           "Cannot access request header fields after connection is set");
     }
 
-    return OkHeaders.toMultimap(requestHeaders.build(), null);
+    return JavaNetHeaders.toMultimap(requestHeaders.build(), null);
   }
 
   @Override public final InputStream getInputStream() throws IOException {
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
index 68715f3087..3943afa4c4 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
@@ -23,7 +23,6 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
-import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.HttpCookie;
 import java.net.HttpURLConnection;
@@ -46,6 +45,7 @@
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSession;
 import okhttp3.internal.Internal;
+import okhttp3.internal.JavaNetCookieJar;
 import okhttp3.internal.SslContextBuilder;
 import okhttp3.internal.Util;
 import okhttp3.internal.io.InMemoryFileSystem;
@@ -91,12 +91,11 @@
     server.setProtocolNegotiationEnabled(false);
     cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);
     client.client().setCache(cache);
-    CookieHandler.setDefault(cookieManager);
+    client.client().setCookieJar(new JavaNetCookieJar(cookieManager));
   }
 
   @After public void tearDown() throws Exception {
     ResponseCache.setDefault(null);
-    CookieHandler.setDefault(null);
     cache.delete();
   }
 
diff --git a/okhttp/src/main/java/okhttp3/CookieJar.java b/okhttp/src/main/java/okhttp3/CookieJar.java
new file mode 100644
index 0000000000..fff90b1dba
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/CookieJar.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3;
+
+import java.net.HttpCookie;
+
+/**
+ * Provides <strong>policy</strong> and <strong>persistence</strong> for HTTP cookies.
+ *
+ * <p>As policy, implementations of this interface are responsible for selecting which cookies
+ * to accept and which to reject. A reasonable policy is to reject all cookies, though that may be
+ * interfere with session-based authentication schemes that require cookies.
+ *
+ * <p>As persistence, implementations of this interface must also provide storage of cookies. Simple
+ * implementations may store cookies in memory; sophisticated ones may use the file system or
+ * database to hold accepted cookies. The implementation should delete cookies that have expired
+ * and limit the resources required for cookie storage.
+ */
+public interface CookieJar {
+  /** A cookie jar that never accepts any cookies. */
+  CookieJar NO_COOKIES = new CookieJar() {
+    @Override public void saveFromResponse(HttpUrl url, Headers headers) {
+    }
+    @Override public Headers loadForRequest(HttpUrl url, Headers headers) {
+      return headers;
+    }
+  };
+
+  /**
+   * Saves cookies from HTTP response headers to this store according to this jar's policy.
+   *
+   * <p>Most implementations should use {@link java.net.HttpCookie#parse HttpCookie.parse()} to
+   * convert raw HTTP header strings into a cookie model.
+   *
+   * <p>Note that this method may be called a second time for a single HTTP response if the response
+   * includes a trailer. For this obscure HTTP feature, {@code headers} contains only the trailer
+   * fields.
+   *
+   * <p><strong>Warning:</strong> it is the implementor's responsibility to reject cookies that
+   * don't {@linkplain HttpCookie#domainMatches match} {@code url}. Otherwise an attacker on {@code
+   * https://attacker.example.com/} may set cookies for {@code https://victim.example.com/},
+   * resulting in session fixation.
+   */
+  void saveFromResponse(HttpUrl url, Headers headers);
+
+  /**
+   * Load cookies from the jar for an HTTP request to {@code url}. This method returns the full set
+   * of headers for the network request; this is typically a superset of {@code headers}.
+   *
+   * <p>Simple implementations will return the accepted cookies that have not yet expired and that
+   * {@linkplain HttpCookie#domainMatches match} {@code url}.
+   */
+  Headers loadForRequest(HttpUrl url, Headers headers);
+}
diff --git a/okhttp/src/main/java/okhttp3/Handshake.java b/okhttp/src/main/java/okhttp3/Handshake.java
index c3b8190df8..0221482750 100644
--- a/okhttp/src/main/java/okhttp3/Handshake.java
+++ b/okhttp/src/main/java/okhttp3/Handshake.java
@@ -29,8 +29,8 @@
  * A record of a TLS handshake. For HTTPS clients, the client is <i>local</i> and the remote server
  * is its <i>peer</i>.
  *
- * <p>This value object describes a completed handshake. Use {@link javax.net.ssl.SSLSocketFactory}
- * to set policy for new handshakes.
+ * <p>This value object describes a completed handshake. Use {@link ConnectionSpec} to set policy
+ * for new handshakes.
  */
 public final class Handshake {
   private final TlsVersion tlsVersion;
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index 673b35b890..4c828f7107 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -15,7 +15,6 @@
  */
 package okhttp3;
 
-import java.net.CookieHandler;
 import java.net.MalformedURLException;
 import java.net.Proxy;
 import java.net.ProxySelector;
@@ -124,7 +123,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   private final List<Interceptor> interceptors = new ArrayList<>();
   private final List<Interceptor> networkInterceptors = new ArrayList<>();
   private ProxySelector proxySelector;
-  private CookieHandler cookieHandler;
+  private CookieJar cookieJar;
 
   /** Non-null if this client is caching; possibly by {@code cache}. */
   private InternalCache internalCache;
@@ -159,7 +158,7 @@ private OkHttpClient(OkHttpClient okHttpClient) {
     this.interceptors.addAll(okHttpClient.interceptors);
     this.networkInterceptors.addAll(okHttpClient.networkInterceptors);
     this.proxySelector = okHttpClient.proxySelector;
-    this.cookieHandler = okHttpClient.cookieHandler;
+    this.cookieJar = okHttpClient.cookieJar;
     this.cache = okHttpClient.cache;
     this.internalCache = cache != null ? cache.internalCache : okHttpClient.internalCache;
     this.socketFactory = okHttpClient.socketFactory;
@@ -271,18 +270,18 @@ public ProxySelector getProxySelector() {
   }
 
   /**
-   * Sets the cookie handler to be used to read outgoing cookies and write incoming cookies.
+   * Sets the handler that can accept cookies from incoming HTTP responses and provides cookies to
+   * outgoing HTTP requests.
    *
-   * <p>If unset, the {@link CookieHandler#getDefault() system-wide default} cookie handler will be
-   * used.
+   * <p>If unset, {@linkplain CookieJar#NO_COOKIES no cookies} will be accepted nor provided.
    */
-  public OkHttpClient setCookieHandler(CookieHandler cookieHandler) {
-    this.cookieHandler = cookieHandler;
+  public OkHttpClient setCookieJar(CookieJar cookieJar) {
+    this.cookieJar = cookieJar;
     return this;
   }
 
-  public CookieHandler getCookieHandler() {
-    return cookieHandler;
+  public CookieJar getCookieJar() {
+    return cookieJar;
   }
 
   /** Sets the response cache to be used to read and write cached responses. */
@@ -594,8 +593,8 @@ OkHttpClient copyWithDefaults() {
     if (result.proxySelector == null) {
       result.proxySelector = ProxySelector.getDefault();
     }
-    if (result.cookieHandler == null) {
-      result.cookieHandler = CookieHandler.getDefault();
+    if (result.cookieJar == null) {
+      result.cookieJar = CookieJar.NO_COOKIES;
     }
     if (result.socketFactory == null) {
       result.socketFactory = SocketFactory.getDefault();
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
index e4001be3fd..d4d6aff0fc 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package okhttp3.internal;
 
 import java.io.Closeable;
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
index aa05b767ac..dce598e5b7 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
@@ -18,17 +18,15 @@
 package okhttp3.internal.http;
 
 import java.io.IOException;
-import java.net.CookieHandler;
 import java.net.ProtocolException;
 import java.net.Proxy;
 import java.util.Date;
-import java.util.List;
-import java.util.Map;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSocketFactory;
 import okhttp3.Address;
 import okhttp3.CertificatePinner;
 import okhttp3.Connection;
+import okhttp3.CookieJar;
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
 import okhttp3.Interceptor;
@@ -498,17 +496,13 @@ private Request networkRequest(Request request) throws IOException {
       result.header("Accept-Encoding", "gzip");
     }
 
-    CookieHandler cookieHandler = client.getCookieHandler();
-    if (cookieHandler != null) {
-      // Capture the request headers added so far so that they can be offered to the CookieHandler.
-      // This is mostly to stay close to the RI; it is unlikely any of the headers above would
-      // affect cookie choice besides "Host".
-      Map<String, List<String>> headers = OkHeaders.toMultimap(result.build().headers(), null);
-
-      Map<String, List<String>> cookies = cookieHandler.get(request.url().uri(), headers);
-
-      // Add any new cookies to the request.
-      OkHeaders.addCookies(result, cookies);
+    CookieJar cookieJar = client.getCookieJar();
+    if (cookieJar != CookieJar.NO_COOKIES) {
+      Headers headersWithoutCookies = result.build().headers();
+      Headers headersWithCookies = cookieJar.loadForRequest(request.url(), headersWithoutCookies);
+      if (headersWithoutCookies != headersWithCookies) {
+        result.headers(headersWithCookies);
+      }
     }
 
     if (request.header("User-Agent") == null) {
@@ -837,9 +831,8 @@ private static Headers combine(Headers cachedHeaders, Headers networkHeaders) th
   }
 
   public void receiveHeaders(Headers headers) throws IOException {
-    CookieHandler cookieHandler = client.getCookieHandler();
-    if (cookieHandler != null) {
-      cookieHandler.put(userRequest.url().uri(), OkHeaders.toMultimap(headers, null));
+    if (headers.size() > 0) {
+      client.getCookieJar().saveFromResponse(userRequest.url(), headers);
     }
   }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java b/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
index 4e924fd6e3..db8011c542 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
@@ -1,12 +1,24 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package okhttp3.internal.http;
 
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Comparator;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
-import java.util.TreeMap;
 import java.util.TreeSet;
 import okhttp3.Challenge;
 import okhttp3.Headers;
@@ -19,20 +31,6 @@
 
 /** Headers and utilities for internal use by OkHttp. */
 public final class OkHeaders {
-  private static final Comparator<String> FIELD_NAME_COMPARATOR = new Comparator<String>() {
-    // @FindBugsSuppressWarnings("ES_COMPARING_PARAMETER_STRING_WITH_EQ")
-    @Override public int compare(String a, String b) {
-      if (a == b) {
-        return 0;
-      } else if (a == null) {
-        return -1;
-      } else if (b == null) {
-        return 1;
-      } else {
-        return String.CASE_INSENSITIVE_ORDER.compare(a, b);
-      }
-    }
-  };
 
   static final String PREFIX = Platform.get().getPrefix();
 
@@ -79,56 +77,6 @@ private static long stringToLong(String s) {
     }
   }
 
-  /**
-   * Returns an immutable map containing each field to its list of values.
-   *
-   * @param valueForNullKey the request line for requests, or the status line for responses. If
-   * non-null, this value is mapped to the null key.
-   */
-  public static Map<String, List<String>> toMultimap(Headers headers, String valueForNullKey) {
-    Map<String, List<String>> result = new TreeMap<>(FIELD_NAME_COMPARATOR);
-    for (int i = 0, size = headers.size(); i < size; i++) {
-      String fieldName = headers.name(i);
-      String value = headers.value(i);
-
-      List<String> allValues = new ArrayList<>();
-      List<String> otherValues = result.get(fieldName);
-      if (otherValues != null) {
-        allValues.addAll(otherValues);
-      }
-      allValues.add(value);
-      result.put(fieldName, Collections.unmodifiableList(allValues));
-    }
-    if (valueForNullKey != null) {
-      result.put(null, Collections.unmodifiableList(Collections.singletonList(valueForNullKey)));
-    }
-    return Collections.unmodifiableMap(result);
-  }
-
-  public static void addCookies(Request.Builder builder, Map<String, List<String>> cookieHeaders) {
-    for (Map.Entry<String, List<String>> entry : cookieHeaders.entrySet()) {
-      String key = entry.getKey();
-      if (("Cookie".equalsIgnoreCase(key) || "Cookie2".equalsIgnoreCase(key))
-          && !entry.getValue().isEmpty()) {
-        builder.addHeader(key, buildCookieHeader(entry.getValue()));
-      }
-    }
-  }
-
-  /**
-   * Send all cookies in one big header, as recommended by <a
-   * href="http://tools.ietf.org/html/rfc6265#section-4.2.1">RFC 6265</a>.
-   */
-  private static String buildCookieHeader(List<String> cookies) {
-    if (cookies.size() == 1) return cookies.get(0);
-    StringBuilder sb = new StringBuilder();
-    for (int i = 0, size = cookies.size(); i < size; i++) {
-      if (i > 0) sb.append("; ");
-      sb.append(cookies.get(i));
-    }
-    return sb.toString();
-  }
-
   /**
    * Returns true if none of the Vary headers have changed between {@code cachedRequest} and {@code
    * newRequest}.
