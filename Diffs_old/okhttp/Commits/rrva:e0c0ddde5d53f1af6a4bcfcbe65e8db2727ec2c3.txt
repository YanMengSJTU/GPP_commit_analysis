diff --git a/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java
index a0590b2c4b..50ef420b01 100644
--- a/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java
+++ b/okhttp-android-support/src/main/java/okhttp3/AndroidShimResponseCache.java
@@ -58,7 +58,7 @@ public Cache getCache() {
   @Override public CacheResponse get(URI uri, String requestMethod,
       Map<String, List<String>> requestHeaders) throws IOException {
     Request okRequest = JavaApiConverter.createOkRequest(uri, requestMethod, requestHeaders);
-    Response okResponse = delegate.internalCache.get(okRequest);
+    Response okResponse = delegate.internalCache().get(okRequest);
     if (okResponse == null) {
       return null;
     }
@@ -73,7 +73,7 @@ public Cache getCache() {
       return null;
     }
     okhttp3.internal.cache.CacheRequest okCacheRequest =
-        delegate.internalCache.put(okResponse);
+        delegate.internalCache().put(okResponse);
     if (okCacheRequest == null) {
       return null;
     }
diff --git a/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java
index 65975ae5cc..4164720849 100644
--- a/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java
+++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/TestDohMain.java
@@ -24,6 +24,7 @@
 import java.util.Collections;
 import java.util.List;
 import okhttp3.Cache;
+import okhttp3.CacheProvider;
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 
@@ -64,7 +65,7 @@ public static void main(String[] args) throws IOException {
     } finally {
       bootstrapClient.connectionPool().evictAll();
       bootstrapClient.dispatcher().executorService().shutdownNow();
-      Cache cache = bootstrapClient.cache();
+      CacheProvider cache = bootstrapClient.cache();
       if (cache != null) {
         cache.close();
       }
diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
index 2ba97ffd0f..98cc1abb7b 100644
--- a/okhttp/src/main/java/okhttp3/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -134,7 +134,7 @@
  * caching directives. It even offers convenient constants {@link CacheControl#FORCE_NETWORK} and
  * {@link CacheControl#FORCE_CACHE} that address the use cases above.
  */
-public final class Cache implements Closeable, Flushable {
+public final class Cache extends CacheProvider {
   private static final int VERSION = 201105;
   private static final int ENTRY_METADATA = 0;
   private static final int ENTRY_BODY = 1;
@@ -166,6 +166,11 @@
     }
   };
 
+  @Override
+  public InternalCache internalCache() {
+    return internalCache;
+  }
+
   final DiskLruCache cache;
 
   /* read and write statistics, all guarded by 'this' */
@@ -221,6 +226,7 @@ public static String key(HttpUrl url) {
     return response;
   }
 
+  @Override
   @Nullable CacheRequest put(Response response) {
     String requestMethod = response.request().method();
 
@@ -306,27 +312,17 @@ public void initialize() throws IOException {
    * Closes the cache and deletes all of its stored values. This will delete all files in the cache
    * directory including files that weren't created by the cache.
    */
+  @Override
   public void delete() throws IOException {
     cache.delete();
   }
 
-  /**
-   * Deletes all values stored in the cache. In-flight writes to the cache will complete normally,
-   * but the corresponding responses will not be stored.
-   */
+  @Override
   public void evictAll() throws IOException {
     cache.evictAll();
   }
 
-  /**
-   * Returns an iterator over the URLs in this cache. This iterator doesn't throw {@code
-   * ConcurrentModificationException}, but if new responses are added while iterating, their URLs
-   * will not be returned. If existing responses are evicted during iteration, they will be absent
-   * (unless they were already returned).
-   *
-   * <p>The iterator supports {@linkplain Iterator#remove}. Removing a URL from the iterator evicts
-   * the corresponding response from the cache. Use this to evict selected responses.
-   */
+  @Override
   public Iterator<String> urls() throws IOException {
     return new Iterator<String>() {
       final Iterator<DiskLruCache.Snapshot> delegate = cache.snapshots();
@@ -367,19 +363,22 @@ public void evictAll() throws IOException {
     };
   }
 
+  @Override
   public synchronized int writeAbortCount() {
     return writeAbortCount;
   }
 
+  @Override
   public synchronized int writeSuccessCount() {
     return writeSuccessCount;
   }
 
+  @Override
   public long size() throws IOException {
     return cache.size();
   }
 
-  /** Max size of the cache (in bytes). */
+  @Override
   public long maxSize() {
     return cache.getMaxSize();
   }
@@ -416,14 +415,17 @@ synchronized void trackConditionalCacheHit() {
     hitCount++;
   }
 
+  @Override
   public synchronized int networkCount() {
     return networkCount;
   }
 
+  @Override
   public synchronized int hitCount() {
     return hitCount;
   }
 
+  @Override
   public synchronized int requestCount() {
     return requestCount;
   }
diff --git a/okhttp/src/main/java/okhttp3/CacheProvider.java b/okhttp/src/main/java/okhttp3/CacheProvider.java
new file mode 100644
index 0000000000..6d11ed11f2
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/CacheProvider.java
@@ -0,0 +1,62 @@
+package okhttp3;
+
+import okhttp3.internal.cache.CacheRequest;
+import okhttp3.internal.cache.InternalCache;
+import okio.ByteString;
+
+import javax.annotation.Nullable;
+import java.io.Closeable;
+import java.io.Flushable;
+import java.io.IOException;
+import java.util.Iterator;
+
+public abstract class CacheProvider implements Closeable, Flushable {
+
+    @Nullable
+    abstract Response get(Request request);
+
+    @Nullable
+    abstract CacheRequest put(Response response);
+
+    public abstract void delete() throws IOException;
+
+    /**
+     * Deletes all values stored in the cache. In-flight writes to the cache will complete normally,
+     * but the corresponding responses will not be stored.
+     */
+    public abstract void evictAll() throws IOException;
+
+    /**
+     * Returns an iterator over the URLs in this cache. This iterator doesn't throw {@code
+     * ConcurrentModificationException}, but if new responses are added while iterating, their URLs
+     * will not be returned. If existing responses are evicted during iteration, they will be absent
+     * (unless they were already returned).
+     *
+     * <p>The iterator supports {@linkplain Iterator#remove}. Removing a URL from the iterator evicts
+     * the corresponding response from the cache. Use this to evict selected responses.
+     */
+    public abstract Iterator<String> urls() throws IOException;
+
+    public abstract int writeAbortCount();
+
+    public abstract int writeSuccessCount();
+
+    public abstract long size() throws IOException;
+
+    /**
+     * Max size of the cache (in bytes).
+     */
+    public abstract long maxSize();
+
+    public abstract int networkCount();
+
+    public abstract int hitCount();
+
+    public abstract int requestCount();
+
+    abstract InternalCache internalCache();
+
+    public static String key(HttpUrl url) {
+        return ByteString.encodeUtf8(url.toString()).md5().hex();
+    }
+}
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index a7d035eb3d..4d72d24b38 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -191,7 +191,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   final EventListener.Factory eventListenerFactory;
   final ProxySelector proxySelector;
   final CookieJar cookieJar;
-  final @Nullable Cache cache;
+  final @Nullable CacheProvider cache;
   final @Nullable InternalCache internalCache;
   final SocketFactory socketFactory;
   final SSLSocketFactory sslSocketFactory;
@@ -321,12 +321,12 @@ public CookieJar cookieJar() {
     return cookieJar;
   }
 
-  public @Nullable Cache cache() {
+  public @Nullable CacheProvider cache() {
     return cache;
   }
 
   @Nullable InternalCache internalCache() {
-    return cache != null ? cache.internalCache : internalCache;
+    return cache != null ? cache.internalCache() : internalCache;
   }
 
   public Dns dns() {
@@ -437,7 +437,7 @@ public Builder newBuilder() {
     EventListener.Factory eventListenerFactory;
     ProxySelector proxySelector;
     CookieJar cookieJar;
-    @Nullable Cache cache;
+    @Nullable CacheProvider cache;
     @Nullable InternalCache internalCache;
     SocketFactory socketFactory;
     @Nullable SSLSocketFactory sslSocketFactory;
@@ -713,7 +713,7 @@ void setInternalCache(@Nullable InternalCache internalCache) {
     }
 
     /** Sets the response cache to be used to read and write cached responses. */
-    public Builder cache(@Nullable Cache cache) {
+    public Builder cache(@Nullable CacheProvider cache) {
       this.cache = cache;
       this.internalCache = null;
       return this;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java b/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
index c43f9214ab..857baadbdc 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
@@ -17,10 +17,8 @@
 
 import java.io.File;
 import java.io.IOException;
-import okhttp3.Cache;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
+
+import okhttp3.*;
 
 public final class CacheResponse {
   private final OkHttpClient client;
