diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java
index 4c4b1d3d54..e845eec5e0 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/ConnectionPoolTest.java
@@ -48,8 +48,7 @@
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 50L);
-    pool.put(c1);
+    RealConnection c1 = newConnection(pool, routeA1, 50L);
 
     // Running at time 50, the pool returns that nothing can be evicted until time 150.
     assertEquals(100L, pool.cleanup(50L));
@@ -81,10 +80,9 @@
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 50L);
+    RealConnection c1 = newConnection(pool, routeA1, 50L);
     StreamAllocation streamAllocation = new StreamAllocation(pool, addressA);
     streamAllocation.acquire(c1);
-    pool.put(c1);
 
     // Running at time 50, the pool returns that nothing can be evicted until time 150.
     assertEquals(100L, pool.cleanup(50L));
@@ -106,11 +104,8 @@
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 75L);
-    pool.put(c1);
-
-    RealConnection c2 = newConnection(routeB1, 50L);
-    pool.put(c2);
+    RealConnection c1 = newConnection(pool, routeA1, 75L);
+    RealConnection c2 = newConnection(pool, routeB1, 50L);
 
     // Running at time 75, the pool returns that nothing can be evicted until time 150.
     assertEquals(75L, pool.cleanup(75L));
@@ -141,11 +136,8 @@
     ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 50L);
-    pool.put(c1);
-
-    RealConnection c2 = newConnection(routeB1, 75L);
-    pool.put(c2);
+    RealConnection c1 = newConnection(pool, routeA1, 50L);
+    RealConnection c2 = newConnection(pool, routeB1, 75L);
 
     // With 2 connections, there's no need to evict until the connections time out.
     assertEquals(50L, pool.cleanup(100L));
@@ -154,8 +146,7 @@
     assertFalse(c2.socket.isClosed());
 
     // Add a third connection
-    RealConnection c3 = newConnection(routeC1, 75L);
-    pool.put(c3);
+    RealConnection c3 = newConnection(pool, routeC1, 75L);
 
     // The third connection bounces the first.
     assertEquals(0L, pool.cleanup(100L));
@@ -169,8 +160,7 @@
     ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);
     pool.setCleanupRunnableForTest(emptyRunnable);
 
-    RealConnection c1 = newConnection(routeA1, 0L);
-    pool.put(c1);
+    RealConnection c1 = newConnection(pool, routeA1, 0L);
     allocateAndLeakAllocation(pool, c1);
 
     awaitGarbageCollection();
@@ -197,10 +187,13 @@ private void awaitGarbageCollection() throws InterruptedException {
     System.runFinalization();
   }
 
-  private RealConnection newConnection(Route route, long idleAtNanos) {
+  private RealConnection newConnection(ConnectionPool pool, Route route, long idleAtNanos) {
     RealConnection connection = new RealConnection(route);
     connection.idleAtNanos = idleAtNanos;
     connection.socket = new Socket();
+    synchronized (pool) {
+      pool.put(connection);
+    }
     return connection;
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
index a51569d89a..6f8efc4c3d 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
@@ -168,7 +168,8 @@ public synchronized int getHttpConnectionCount() {
   }
 
   /** Returns a recycled connection to {@code address}, or null if no such connection exists. */
-  public synchronized Connection get(Address address, StreamAllocation streamAllocation) {
+  RealConnection get(Address address, StreamAllocation streamAllocation) {
+    assert (Thread.holdsLock(this));
     for (RealConnection connection : connections) {
       // TODO(jwilson): this is awkward. We're already holding a lock on 'this', and
       //     connection.allocationLimit() may also lock the FramedConnection.
@@ -182,8 +183,8 @@ public synchronized Connection get(Address address, StreamAllocation streamAlloc
     return null;
   }
 
-  // TODO(jwilson): reduce visibility.
-  public synchronized void put(RealConnection connection) {
+  void put(RealConnection connection) {
+    assert (Thread.holdsLock(this));
     if (connections.isEmpty()) {
       executor.execute(cleanupRunnable);
     }
@@ -194,8 +195,8 @@ public synchronized void put(RealConnection connection) {
    * Notify this pool that {@code connection} has become idle. Returns true if the connection
    * has been removed from the pool and should be closed.
    */
-  // TODO(jwilson): reduce visibility.
-  public synchronized boolean connectionBecameIdle(RealConnection connection) {
+  boolean connectionBecameIdle(RealConnection connection) {
+    assert (Thread.holdsLock(this));
     if (connection.noNewStreams || maxIdleConnections == 0) {
       connections.remove(connection);
       return true;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
index 9af08452d2..aabc2d2deb 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
@@ -21,6 +21,7 @@
 import com.squareup.okhttp.internal.Util;
 import com.squareup.okhttp.internal.http.AuthenticatorAdapter;
 import com.squareup.okhttp.internal.http.StreamAllocation;
+import com.squareup.okhttp.internal.io.RealConnection;
 import com.squareup.okhttp.internal.tls.OkHostnameVerifier;
 import java.net.CookieHandler;
 import java.net.MalformedURLException;
@@ -74,6 +75,20 @@
         return client.internalCache();
       }
 
+      @Override public boolean connectionBecameIdle(
+          ConnectionPool pool, RealConnection connection) {
+        return pool.connectionBecameIdle(connection);
+      }
+
+      @Override public RealConnection get(
+          ConnectionPool pool, Address address, StreamAllocation streamAllocation) {
+        return pool.get(address, streamAllocation);
+      }
+
+      @Override public void put(ConnectionPool pool, RealConnection connection) {
+        pool.put(connection);
+      }
+
       @Override public RouteDatabase routeDatabase(ConnectionPool connectionPool) {
         return connectionPool.routeDatabase;
       }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java b/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java
index 58eb0cf63c..03bc1c5cce 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Internal.java
@@ -15,6 +15,7 @@
  */
 package com.squareup.okhttp.internal;
 
+import com.squareup.okhttp.Address;
 import com.squareup.okhttp.Call;
 import com.squareup.okhttp.Callback;
 import com.squareup.okhttp.ConnectionPool;
@@ -23,6 +24,7 @@
 import com.squareup.okhttp.HttpUrl;
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.internal.http.StreamAllocation;
+import com.squareup.okhttp.internal.io.RealConnection;
 import java.net.MalformedURLException;
 import java.net.UnknownHostException;
 import java.util.logging.Logger;
@@ -51,6 +53,13 @@ public static void initializeInstanceForTests() {
 
   public abstract InternalCache internalCache(OkHttpClient client);
 
+  public abstract RealConnection get(
+      ConnectionPool pool, Address address, StreamAllocation streamAllocation);
+
+  public abstract void put(ConnectionPool pool, RealConnection connection);
+
+  public abstract boolean connectionBecameIdle(ConnectionPool pool, RealConnection connection);
+
   public abstract RouteDatabase routeDatabase(ConnectionPool connectionPool);
 
   public abstract void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket,
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
index 56750a948c..377161665c 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
@@ -147,30 +147,26 @@ private RealConnection findConnection(int connectTimeout, int readTimeout, int w
       if (allocatedConnection != null && !allocatedConnection.noNewStreams) {
         return allocatedConnection;
       }
-    }
 
-    // Attempt to get a connection from the pool.
-    RealConnection pooledConnection = (RealConnection) connectionPool.get(address, this);
-    if (pooledConnection != null) {
-      synchronized (connectionPool) {
+      // Attempt to get a connection from the pool.
+      RealConnection pooledConnection = Internal.instance.get(connectionPool, address, this);
+      if (pooledConnection != null) {
         this.connection = pooledConnection;
-        if (canceled) throw new IOException("Canceled");
         return pooledConnection;
       }
-    }
 
-    // Attempt to create a connection.
-    synchronized (connectionPool) {
+      // Attempt to create a connection.
       if (routeSelector == null) {
         routeSelector = new RouteSelector(address, routeDatabase());
       }
     }
+
     Route route = routeSelector.next();
     RealConnection newConnection = new RealConnection(route);
     acquire(newConnection);
 
     synchronized (connectionPool) {
-      connectionPool.put(newConnection);
+      Internal.instance.put(connectionPool, newConnection);
       this.connection = newConnection;
       if (canceled) throw new IOException("Canceled");
     }
@@ -238,7 +234,7 @@ private void deallocate(boolean noNewStreams, boolean released, boolean streamFi
           }
           if (connection.allocations.isEmpty()) {
             connection.idleAtNanos = System.nanoTime();
-            if (connectionPool.connectionBecameIdle(connection)) {
+            if (Internal.instance.connectionBecameIdle(connectionPool, connection)) {
               connectionToClose = connection;
             }
           }
