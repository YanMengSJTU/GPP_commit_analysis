diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java
index 7f0073cc7d..5120077307 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java
+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/Benchmark.java
@@ -85,7 +85,7 @@
   List<Protocol> protocols = Arrays.asList(Protocol.HTTP_1_1);
 
   public static void main(String[] args) {
-    List<String> allArgs = new ArrayList<>();
+    List<String> allArgs = new ArrayList<String>();
     allArgs.add("--instrument");
     allArgs.add("arbitrary");
     allArgs.addAll(Arrays.asList(args));
@@ -139,7 +139,7 @@ public double run() throws Exception {
   }
 
   @Override public String toString() {
-    List<Object> modifiers = new ArrayList<>();
+    List<Object> modifiers = new ArrayList<Object>();
     if (tls) modifiers.add("tls");
     if (gzip) modifiers.add("gzip");
     if (chunked) modifiers.add("chunked");
diff --git a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java
index 5d8cec5291..9044d0a33c 100644
--- a/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java
+++ b/benchmarks/src/main/java/com/squareup/okhttp/benchmarks/NettyHttpClient.java
@@ -53,8 +53,8 @@
   private static final boolean VERBOSE = false;
 
   // Guarded by this. Real apps need more capable connection management.
-  private final Deque<HttpChannel> freeChannels = new ArrayDeque<>();
-  private final Deque<URL> backlog = new ArrayDeque<>();
+  private final Deque<HttpChannel> freeChannels = new ArrayDeque<HttpChannel>();
+  private final Deque<URL> backlog = new ArrayDeque<URL>();
 
   private int totalChannels = 0;
   private int concurrencyLevel;
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java
index 09dda5634b..1a3ea89773 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java
+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockResponse.java
@@ -40,7 +40,7 @@
   private long bodyDelayAmount = 0;
   private TimeUnit bodyDelayUnit = TimeUnit.MILLISECONDS;
 
-  private List<PushPromise> promises = new ArrayList<>();
+  private List<PushPromise> promises = new ArrayList<PushPromise>();
   private WebSocketListener webSocketListener;
 
   /** Creates a new mock response with an empty body. */
@@ -52,7 +52,7 @@ public MockResponse() {
     try {
       MockResponse result = (MockResponse) super.clone();
       result.headers = headers.build().newBuilder();
-      result.promises = new ArrayList<>(promises);
+      result.promises = new ArrayList<PushPromise>(promises);
       return result;
     } catch (CloneNotSupportedException e) {
       throw new AssertionError();
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java
index 259cf3e36a..f6621f0e82 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java
+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/MockWebServer.java
@@ -103,7 +103,8 @@
 
   private static final Logger logger = Logger.getLogger(MockWebServer.class.getName());
 
-  private final BlockingQueue<RecordedRequest> requestQueue = new LinkedBlockingQueue<>();
+  private final BlockingQueue<RecordedRequest> requestQueue =
+      new LinkedBlockingQueue<RecordedRequest>();
 
   private final Set<Socket> openClientSockets =
       Collections.newSetFromMap(new ConcurrentHashMap<Socket, Boolean>());
@@ -591,7 +592,7 @@ private RecordedRequest readRequest(Socket socket, BufferedSource source, Buffer
 
     boolean hasBody = false;
     TruncatingBuffer requestBody = new TruncatingBuffer(bodyLimit);
-    List<Integer> chunkSizes = new ArrayList<>();
+    List<Integer> chunkSizes = new ArrayList<Integer>();
     MockResponse throttlePolicy = dispatcher.peek();
     if (contentLength != -1) {
       hasBody = contentLength > 0;
@@ -877,7 +878,7 @@ private void writeResponse(SpdyStream stream, MockResponse response) throws IOEx
       if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) {
         return;
       }
-      List<Header> spdyHeaders = new ArrayList<>();
+      List<Header> spdyHeaders = new ArrayList<Header>();
       String[] statusParts = response.getStatus().split(" ", 2);
       if (statusParts.length != 2) {
         throw new AssertionError("Unexpected status: " + response.getStatus());
@@ -908,7 +909,7 @@ private void writeResponse(SpdyStream stream, MockResponse response) throws IOEx
 
     private void pushPromises(SpdyStream stream, List<PushPromise> promises) throws IOException {
       for (PushPromise pushPromise : promises) {
-        List<Header> pushedHeaders = new ArrayList<>();
+        List<Header> pushedHeaders = new ArrayList<Header>();
         pushedHeaders.add(new Header(stream.getConnection().getProtocol() == Protocol.SPDY_3
             ? Header.TARGET_HOST
             : Header.TARGET_AUTHORITY, getUrl(pushPromise.getPath()).getHost()));
diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java
index c9c206c17c..7a89ec254f 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java
+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/QueueDispatcher.java
@@ -24,7 +24,8 @@
  * by calling {@link #enqueueResponse(MockResponse)}.
  */
 public class QueueDispatcher extends Dispatcher {
-  protected final BlockingQueue<MockResponse> responseQueue = new LinkedBlockingQueue<>();
+  protected final BlockingQueue<MockResponse> responseQueue =
+      new LinkedBlockingQueue<MockResponse>();
   private MockResponse failFastResponse;
 
   @Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
diff --git a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java
index 1c8c8206c9..9063d9aa08 100644
--- a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java
+++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/CustomDispatcherTest.java
@@ -36,7 +36,7 @@
 
   @Test public void simpleDispatch() throws Exception {
     mockWebServer.start();
-    final List<RecordedRequest> requestsMade = new ArrayList<>();
+    final List<RecordedRequest> requestsMade = new ArrayList<RecordedRequest>();
     final Dispatcher dispatcher = new Dispatcher() {
       @Override
       public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
diff --git a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java
index a3816d2db4..ddd80ad4c0 100644
--- a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java
+++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java
@@ -258,7 +258,7 @@
   private List<String> headersToList(MockResponse response) {
     Headers headers = response.getHeaders();
     int size = headers.size();
-    List<String> headerList = new ArrayList<>(size);
+    List<String> headerList = new ArrayList<String>(size);
     for (int i = 0; i < size; i++) {
       headerList.add(headers.name(i) + ": " + headers.value(i));
     }
diff --git a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
index d5dfcd8557..ff4d868841 100644
--- a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
+++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
@@ -210,7 +210,7 @@ private void testCreateOkResponseInternal(HttpURLConnectionFactory httpUrlConnec
     Request request = new Request.Builder().url(uri.toURL()).build();
     CacheResponse cacheResponse = new CacheResponse() {
       @Override public Map<String, List<String>> getHeaders() throws IOException {
-        Map<String, List<String>> headers = new HashMap<>();
+        Map<String, List<String>> headers = new HashMap<String, List<String>>();
         headers.put(null, Collections.singletonList(statusLine));
         headers.put("xyzzy", Arrays.asList("bar", "baz"));
         return headers;
@@ -243,7 +243,7 @@ private void testCreateOkResponseInternal(HttpURLConnectionFactory httpUrlConnec
     Request request = new Request.Builder().url(uri.toURL()).build();
     SecureCacheResponse cacheResponse = new SecureCacheResponse() {
       @Override public Map<String, List<String>> getHeaders() throws IOException {
-        Map<String, List<String>> headers = new HashMap<>();
+        Map<String, List<String>> headers = new HashMap<String, List<String>>();
         headers.put(null, Collections.singletonList(statusLine));
         headers.put("xyzzy", Arrays.asList("bar", "baz"));
         return headers;
@@ -308,7 +308,7 @@ private void testCreateOkResponseInternal(HttpURLConnectionFactory httpUrlConnec
   @Test public void createOkRequest_nonNullRequestHeaders() throws Exception {
     URI uri = new URI("https://foo/bar");
 
-    Map<String,List<String>> javaRequestHeaders = new HashMap<>();
+    Map<String,List<String>> javaRequestHeaders = new HashMap<String,List<String>>();
     javaRequestHeaders.put("Foo", Arrays.asList("Bar"));
     Request request = JavaApiConverter.createOkRequest(uri, "POST", javaRequestHeaders);
     assertTrue(request.isHttps());
@@ -326,7 +326,7 @@ private void testCreateOkResponseInternal(HttpURLConnectionFactory httpUrlConnec
   @Test public void createOkRequest_nullRequestHeaderKey() throws Exception {
     URI uri = new URI("https://foo/bar");
 
-    Map<String,List<String>> javaRequestHeaders = new HashMap<>();
+    Map<String,List<String>> javaRequestHeaders = new HashMap<String,List<String>>();
     javaRequestHeaders.put(null, Arrays.asList("GET / HTTP 1.1"));
     javaRequestHeaders.put("Foo", Arrays.asList("Bar"));
     Request request = JavaApiConverter.createOkRequest(uri, "POST", javaRequestHeaders);
@@ -658,7 +658,7 @@ private void assertHeadersContainsMapping(Map<String, List<String>> headers, Str
   }
 
   @Test public void extractOkHeaders() {
-    Map<String, List<String>> javaResponseHeaders = new HashMap<>();
+    Map<String, List<String>> javaResponseHeaders = new HashMap<String, List<String>>();
     javaResponseHeaders.put(null, Arrays.asList("StatusLine"));
     javaResponseHeaders.put("key1", Arrays.asList("value1_1", "value1_2"));
     javaResponseHeaders.put("key2", Arrays.asList("value2"));
@@ -670,7 +670,7 @@ private void assertHeadersContainsMapping(Map<String, List<String>> headers, Str
   }
 
   @Test public void extractStatusLine() {
-    Map<String, List<String>> javaResponseHeaders = new HashMap<>();
+    Map<String, List<String>> javaResponseHeaders = new HashMap<String, List<String>>();
     javaResponseHeaders.put(null, Arrays.asList("StatusLine"));
     javaResponseHeaders.put("key1", Arrays.asList("value1_1", "value1_2"));
     javaResponseHeaders.put("key2", Arrays.asList("value2"));
@@ -733,7 +733,7 @@ private static X509Certificate certificate(String certificate) {
   }
 
   private static <T> Set<T> newSet(List<T> elements) {
-    return new LinkedHashSet<>(elements);
+    return new LinkedHashSet<T>(elements);
   }
 
   private static Request createArbitraryOkRequest() {
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java
index e26b66963a..40b9137eaa 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java
+++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/HpackDecodeTestBase.java
@@ -37,7 +37,7 @@
    */
   protected static Collection<Story[]> createStories(String[] interopTests)
       throws Exception {
-    List<Story[]> result = new ArrayList<>();
+    List<Story[]> result = new ArrayList<Story[]>();
     for (String interopTestName : interopTests) {
       List<Story> stories = HpackJsonUtil.readStories(interopTestName);
       if (stories.isEmpty()) {
@@ -83,7 +83,7 @@ protected void testDecoder(Story story) throws Exception {
    */
   private static void assertSetEquals(
       String message, List<Header> expected, List<Header> observed) {
-    assertEquals(message, new LinkedHashSet<>(expected), new LinkedHashSet<>(observed));
+    assertEquals(message, new LinkedHashSet<Header>(expected), new LinkedHashSet<Header>(observed));
   }
 
   protected Story getStory() {
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Case.java b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Case.java
index d5d272872c..fdad915a65 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Case.java
+++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Case.java
@@ -35,7 +35,7 @@
   private List<Map<String, String>> headers;
 
   public List<Header> getHeaders() {
-    List<Header> result = new ArrayList<>();
+    List<Header> result = new ArrayList<Header>();
     for (Map<String, String> inputHeader : headers) {
       Map.Entry<String, String> entry = inputHeader.entrySet().iterator().next();
       result.add(new Header(entry.getKey(), entry.getValue()));
@@ -60,7 +60,7 @@ protected Case clone() throws CloneNotSupportedException {
     Case result = new Case();
     result.seqno = seqno;
     result.wire = wire;
-    result.headers = new ArrayList<>();
+    result.headers = new ArrayList<Header>();
     for (Map<String, String> header : headers) {
       result.headers.add(new LinkedHashMap<String, String>(header));
     }
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java
index f64302410c..d4a0b28e11 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java
+++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/HpackJsonUtil.java
@@ -65,7 +65,7 @@ private static Story readStory(InputStream jsonResource) throws IOException {
    * Reads stories named "story_xx.json" from the folder provided.
    */
   public static List<Story> readStories(String testFolderName) throws Exception {
-    List<Story> result = new ArrayList<>();
+    List<Story> result = new ArrayList<Story>();
     int i = 0;
     while (true) { // break after last test.
       String storyResourceName = String.format(STORY_RESOURCE_FORMAT, testFolderName, i);
@@ -86,4 +86,4 @@ private static Story readStory(InputStream jsonResource) throws IOException {
   }
 
   private HpackJsonUtil() { } // Utilities only.
-}
\ No newline at end of file
+}
diff --git a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Story.java b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Story.java
index 5ff2b07675..d8c063d494 100644
--- a/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Story.java
+++ b/okhttp-hpacktests/src/test/java/com/squareup/okhttp/internal/spdy/hpackjson/Story.java
@@ -49,7 +49,7 @@ public int getDraft() {
   public Story clone() throws CloneNotSupportedException {
     Story story = new Story();
     story.fileName = this.fileName;
-    story.cases = new ArrayList<>();
+    story.cases = new ArrayList<Case>();
     for (Case caze : cases) {
       story.cases.add(caze.clone());
     }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
index af0f506755..f604938ccd 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
@@ -1772,7 +1772,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   }
 
   public void assertCookies(URL url, String... expectedCookies) throws Exception {
-    List<String> actualCookies = new ArrayList<>();
+    List<String> actualCookies = new ArrayList<String>();
     for (HttpCookie cookie : cookieManager.getCookieStore().get(url.toURI())) {
       actualCookies.add(cookie.toString());
     }
@@ -1966,7 +1966,7 @@ public void assertCookies(URL url, String... expectedCookies) throws Exception {
     URL url = server.getUrl("/");
     assertEquals("A", get(url).body().string());
 
-    final AtomicReference<String> ifNoneMatch = new AtomicReference<>();
+    final AtomicReference<String> ifNoneMatch = new AtomicReference<String>();
     client.networkInterceptors().add(new Interceptor() {
       @Override public Response intercept(Chain chain) throws IOException {
         ifNoneMatch.compareAndSet(null, chain.request().header("If-None-Match"));
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
index 19003e2922..33a13e9688 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
@@ -83,7 +83,7 @@
   private static final SSLContext sslContext = SslContextBuilder.localhost();
 
   @Rule public final TemporaryFolder tempDir = new TemporaryFolder();
-  @Rule public final TestRule timeout = new Timeout(30_000);
+  @Rule public final TestRule timeout = new Timeout(30000);
 
   @Rule public final MockWebServerRule server = new MockWebServerRule();
   @Rule public final MockWebServerRule server2 = new MockWebServerRule();
@@ -1512,7 +1512,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     server.enqueue(new MockResponse().setBody("A"));
 
     final CountDownLatch latch = new CountDownLatch(1);
-    final AtomicReference<String> bodyRef = new AtomicReference<>();
+    final AtomicReference<String> bodyRef = new AtomicReference<String>();
     final AtomicBoolean failureRef = new AtomicBoolean();
 
     Request request = new Request.Builder().url(server.getUrl("/a")).tag("request A").build();
@@ -1590,7 +1590,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .header("User-Agent", "SyncApiTest")
         .build();
 
-    final BlockingQueue<Response> responseRef = new SynchronousQueue<>();
+    final BlockingQueue<Response> responseRef = new SynchronousQueue<Response>();
     client.newCall(request).enqueue(new Callback() {
       @Override public void onFailure(Request request, IOException e) {
         throw new AssertionError();
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java
index 3d7701f298..23a39bd929 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/DispatcherTest.java
@@ -123,14 +123,14 @@
   }
 
   class RecordingExecutor extends AbstractExecutorService {
-    private List<AsyncCall> calls = new ArrayList<>();
+    private List<AsyncCall> calls = new ArrayList<AsyncCall>();
 
     @Override public void execute(Runnable command) {
       calls.add((AsyncCall) command);
     }
 
     public void assertJobs(String... expectedUrls) {
-      List<String> actualUrls = new ArrayList<>();
+      List<String> actualUrls = new ArrayList<String>();
       for (AsyncCall call : calls) {
         actualUrls.add(call.request().urlString());
       }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
index 8cd8d97bdb..912edf8bcc 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
@@ -555,7 +555,7 @@ private Buffer gzip(String data) throws IOException {
 
   /** Catches exceptions that are otherwise headed for the uncaught exception handler. */
   private static class ExceptionCatchingExecutor extends ThreadPoolExecutor {
-    private final BlockingQueue<Exception> exceptions = new LinkedBlockingQueue<>();
+    private final BlockingQueue<Exception> exceptions = new LinkedBlockingQueue<Exception>();
 
     public ExceptionCatchingExecutor() {
       super(1, 1, 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
index 73e38f0e95..8f2ba59cc1 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
@@ -29,7 +29,7 @@
 public class RecordingCallback implements Callback {
   public static final long TIMEOUT_MILLIS = TimeUnit.SECONDS.toMillis(10);
 
-  private final List<RecordedResponse> responses = new ArrayList<>();
+  private final List<RecordedResponse> responses = new ArrayList<RecordedResponse>();
 
   @Override public synchronized void onFailure(Request request, IOException e) {
     responses.add(new RecordedResponse(request, null, null, null, e));
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/TestLogHandler.java b/okhttp-tests/src/test/java/com/squareup/okhttp/TestLogHandler.java
index 24cb377cab..e1589de98f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/TestLogHandler.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/TestLogHandler.java
@@ -25,7 +25,7 @@
  * assertions about them.
  */
 public final class TestLogHandler extends Handler {
-  private final List<String> logs = new ArrayList<>();
+  private final List<String> logs = new ArrayList<String>();
 
   @Override public synchronized void publish(LogRecord logRecord) {
     logs.add(logRecord.getLevel() + ": " + logRecord.getMessage());
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java b/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java
index 10f0d4df19..412f61cf04 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/TestUtil.java
@@ -9,7 +9,7 @@ private TestUtil() {
   }
 
   public static List<Header> headerEntries(String... elements) {
-    List<Header> result = new ArrayList<>(elements.length / 2);
+    List<Header> result = new ArrayList<Header>(elements.length / 2);
     for (int i = 0; i < elements.length; i += 2) {
       result.add(new Header(elements[i], elements[i + 1]));
     }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java
index c996d202dd..f273da764c 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/DiskLruCacheTest.java
@@ -60,7 +60,7 @@
   private final TestExecutor executor = new TestExecutor();
 
   private DiskLruCache cache;
-  private final Deque<DiskLruCache> toClose = new ArrayDeque<>();
+  private final Deque<DiskLruCache> toClose = new ArrayDeque<DiskLruCache>();
 
   private void createNewCache() throws IOException {
     createNewCacheWithSize(Integer.MAX_VALUE);
@@ -1159,7 +1159,7 @@ private void createNewCacheWithSize(int maxSize) throws IOException {
   }
 
   private void assertJournalEquals(String... expectedBodyLines) throws Exception {
-    List<String> expectedLines = new ArrayList<>();
+    List<String> expectedLines = new ArrayList<String>();
     expectedLines.add(MAGIC);
     expectedLines.add(VERSION_1);
     expectedLines.add("100");
@@ -1189,7 +1189,7 @@ private void createJournalWithHeader(String magic, String version, String appVer
   }
 
   private List<String> readJournalLines() throws Exception {
-    List<String> result = new ArrayList<>();
+    List<String> result = new ArrayList<String>();
     BufferedSource source = Okio.buffer(fileSystem.source(journalFile));
     for (String line; (line = source.readUtf8Line()) != null; ) {
       result.add(line);
@@ -1321,7 +1321,7 @@ private void copyFile(File from, File to) throws IOException {
   }
 
   private static class TestExecutor implements Executor {
-    final Deque<Runnable> jobs = new ArrayDeque<>();
+    final Deque<Runnable> jobs = new ArrayDeque<Runnable>();
 
     @Override public void execute(Runnable command) {
       jobs.addLast(command);
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/FaultyFileSystem.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/FaultyFileSystem.java
index 537f361c38..b2645ea5cf 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/FaultyFileSystem.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/FaultyFileSystem.java
@@ -28,7 +28,7 @@
 
 public final class FaultyFileSystem implements FileSystem {
   private final FileSystem delegate;
-  private final Set<File> writeFaults = new LinkedHashSet<>();
+  private final Set<File> writeFaults = new LinkedHashSet<File>();
 
   public FaultyFileSystem(FileSystem delegate) {
     this.delegate = delegate;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingAuthenticator.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingAuthenticator.java
index 292875bff6..8265a0e7f3 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingAuthenticator.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingAuthenticator.java
@@ -24,7 +24,7 @@
   /** base64("username:password") */
   public static final String BASE_64_CREDENTIALS = "dXNlcm5hbWU6cGFzc3dvcmQ=";
 
-  public final List<String> calls = new ArrayList<>();
+  public final List<String> calls = new ArrayList<String>();
   public final PasswordAuthentication authentication;
 
   public RecordingAuthenticator(PasswordAuthentication authentication) {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingHostnameVerifier.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingHostnameVerifier.java
index c9d914f5f2..b3e2369b79 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingHostnameVerifier.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingHostnameVerifier.java
@@ -21,7 +21,7 @@
 import javax.net.ssl.SSLSession;
 
 public final class RecordingHostnameVerifier implements HostnameVerifier {
-  public final List<String> calls = new ArrayList<>();
+  public final List<String> calls = new ArrayList<String>();
 
   public boolean verify(String hostname, SSLSession session) {
     calls.add("verify " + hostname);
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java
index f5b3617d9d..b9ae6baebf 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/RecordingOkAuthenticator.java
@@ -23,8 +23,8 @@
 import java.util.List;
 
 public final class RecordingOkAuthenticator implements Authenticator {
-  public final List<Response> responses = new ArrayList<>();
-  public final List<Proxy> proxies = new ArrayList<>();
+  public final List<Response> responses = new ArrayList<Response>();
+  public final List<Proxy> proxies = new ArrayList<Proxy>();
   public final String credential;
 
   public RecordingOkAuthenticator(String credential) {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java
index d0fa1b2421..1b4373a31e 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/CookiesTest.java
@@ -259,13 +259,13 @@ public void testNetscapeResponse() throws Exception {
    * getRequestProperties}.
    */
   @Test public void testHeadersSentToCookieHandler() throws IOException, InterruptedException {
-    final Map<String, List<String>> cookieHandlerHeaders = new HashMap<>();
+    final Map<String, List<String>> cookieHandlerHeaders = new HashMap<String, List<String>>();
     CookieHandler.setDefault(new CookieManager() {
       @Override
       public Map<String, List<String>> get(URI uri,
           Map<String, List<String>> requestHeaders) throws IOException {
         cookieHandlerHeaders.putAll(requestHeaders);
-        Map<String, List<String>> result = new HashMap<>();
+        Map<String, List<String>> result = new HashMap<String, List<String>>();
         result.put("Cookie", Collections.singletonList("Bar=bar"));
         result.put("Cookie2", Collections.singletonList("Baz=baz"));
         result.put("Quux", Collections.singletonList("quux"));
@@ -317,7 +317,7 @@ public void testNetscapeResponse() throws Exception {
     CookieHandler.setDefault(new CookieManager() {
       @Override public Map<String, List<String>> get(URI uri,
           Map<String, List<String>> requestHeaders) throws IOException {
-        Map<String, List<String>> result = new HashMap<>();
+        Map<String, List<String>> result = new HashMap<String, List<String>>();
         result.put("COOKIE", Collections.singletonList("Bar=bar"));
         result.put("cooKIE2", Collections.singletonList("Baz=baz"));
         return result;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java
index 1d946228ae..88dce0e2ce 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/HeadersTest.java
@@ -279,7 +279,7 @@
   }
 
   @Test public void ofMapMakesDefensiveCopy() {
-    Map<String, String> namesAndValues = new HashMap<>();
+    Map<String, String> namesAndValues = new HashMap<String, String>();
     namesAndValues.put("User-Agent", "OkHttp");
 
     Headers headers = Headers.of(namesAndValues);
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RecordingProxySelector.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RecordingProxySelector.java
index ed9cfa4ba9..cc915c17fc 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RecordingProxySelector.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RecordingProxySelector.java
@@ -28,9 +28,9 @@
 import static org.junit.Assert.assertEquals;
 
 public final class RecordingProxySelector extends ProxySelector {
-  final List<URI> requestedUris = new ArrayList<>();
-  List<Proxy> proxies = new ArrayList<>();
-  final List<String> failures = new ArrayList<>();
+  final List<URI> requestedUris = new ArrayList<URI>();
+  List<Proxy> proxies = new ArrayList<Proxy>();
+  final List<String> failures = new ArrayList<String>();
 
   @Override public List<Proxy> select(URI uri) {
     requestedUris.add(uri);
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java
index 8efd308f76..9afeaf722f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java
@@ -382,7 +382,7 @@
     dns.inetAddresses = makeFakeAddresses(255, 1);
 
     // Extract the regular sequence of routes from selector.
-    List<Route> regularRoutes = new ArrayList<>();
+    List<Route> regularRoutes = new ArrayList<Route>();
     while (routeSelector.hasNext()) {
       regularRoutes.add(routeSelector.next());
     }
@@ -394,7 +394,7 @@
     // Reset selector
     routeSelector = RouteSelector.get(address, httpsRequest, client);
 
-    List<Route> routesWithFailedRoute = new ArrayList<>();
+    List<Route> routesWithFailedRoute = new ArrayList<Route>();
     while (routeSelector.hasNext()) {
       routesWithFailedRoute.add(routeSelector.next());
     }
@@ -456,7 +456,7 @@ private Address httpsAddress() {
   }
 
   private static class FakeDns implements Network {
-    List<String> requestedHosts = new ArrayList<>();
+    List<String> requestedHosts = new ArrayList<String>();
     InetAddress[] inetAddresses;
 
     @Override public InetAddress[] resolveInetAddresses(String host) throws UnknownHostException {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java
index b9c6793328..37ccbfa4da 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/URLConnectionTest.java
@@ -3229,7 +3229,7 @@ private String certificatesToString(X509Certificate[] certificates) {
   }
 
   private static class FakeProxySelector extends ProxySelector {
-    List<Proxy> proxies = new ArrayList<>();
+    List<Proxy> proxies = new ArrayList<Proxy>();
 
     @Override public List<Proxy> select(URI uri) {
       // Don't handle 'socket' schemes, which the RI's Socket class may request (for SOCKS).
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java
index 3a043cbd1f..d8078b82b1 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java
@@ -27,7 +27,7 @@
 
 /** A simple file system where all files are held in memory. Not safe for concurrent use. */
 public final class InMemoryFileSystem implements FileSystem {
-  private final Map<File, Buffer> files = new LinkedHashMap<>();
+  private final Map<File, Buffer> files = new LinkedHashMap<File, Buffer>();
 
   @Override public Source source(File file) throws FileNotFoundException {
     Buffer result = files.get(file);
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java
index a13fa53c08..56aa4fa110 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java
@@ -258,7 +258,7 @@
     MockSpdyPeer.InFrame synStream = peer.takeFrame();
     assertEquals(TYPE_HEADERS, synStream.type);
     for (int i = 0; i < 3; i++) {
-      List<Integer> windowUpdateStreamIds = new ArrayList<>(2);
+      List<Integer> windowUpdateStreamIds = new ArrayList<Integer>(2);
       for (int j = 0; j < 2; j++) {
         MockSpdyPeer.InFrame windowUpdate = peer.takeFrame();
         assertEquals(TYPE_WINDOW_UPDATE, windowUpdate.type);
@@ -481,7 +481,7 @@ private SpdyConnection connection(MockSpdyPeer peer, Variant variant) throws IOE
   };
 
   private static class RecordingPushObserver implements PushObserver {
-    final List<Object> events = new ArrayList<>();
+    final List<Object> events = new ArrayList<Object>();
 
     public synchronized Object takeEvent() throws InterruptedException {
       while (events.isEmpty()) {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2FrameLoggerTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2FrameLoggerTest.java
index 0a0a9da8ab..95c0362ba1 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2FrameLoggerTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2FrameLoggerTest.java
@@ -91,7 +91,7 @@
    * also demonstrates how sparse the lookup table is.
    */
   @Test public void allFormattedFlagsWithValidBits() {
-    List<String> formattedFlags = new ArrayList<>(0x40); // Highest valid flag is 0x20.
+    List<String> formattedFlags = new ArrayList<String>(0x40); // Highest valid flag is 0x20.
     for (byte i = 0; i < 0x40; i++) formattedFlags.add(formatFlags(TYPE_HEADERS, i));
 
     assertEquals(Arrays.asList(
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java
index bc5499cd47..039bc857ec 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/MockSpdyPeer.java
@@ -42,8 +42,8 @@
   private Variant variant = new Spdy3();
   private final Buffer bytesOut = new Buffer();
   private FrameWriter frameWriter = variant.newWriter(bytesOut, client);
-  private final List<OutFrame> outFrames = new ArrayList<>();
-  private final BlockingQueue<InFrame> inFrames = new LinkedBlockingQueue<>();
+  private final List<OutFrame> outFrames = new ArrayList<OutFrame>();
+  private final BlockingQueue<InFrame> inFrames = new LinkedBlockingQueue<InFrame>();
   private int port;
   private final ExecutorService executor = Executors.newSingleThreadExecutor(
       Util.threadFactory("MockSpdyPeer", false));
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java
index eb53e35ee6..ebbf202f6f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java
@@ -1077,7 +1077,7 @@
     MockSpdyPeer.InFrame synStream = peer.takeFrame();
     assertEquals(TYPE_HEADERS, synStream.type);
     for (int i = 0; i < 3; i++) {
-      List<Integer> windowUpdateStreamIds = new ArrayList<>(2);
+      List<Integer> windowUpdateStreamIds = new ArrayList<Integer>(2);
       for (int j = 0; j < 2; j++) {
         MockSpdyPeer.InFrame windowUpdate = peer.takeFrame();
         assertEquals(TYPE_WINDOW_UPDATE, windowUpdate.type);
diff --git a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
index 04ac55206c..d8ab9f691b 100644
--- a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
@@ -71,7 +71,7 @@
  * header fields, request method, etc.) are immutable.
  */
 public class HttpURLConnectionImpl extends HttpURLConnection {
-  private static final Set<String> METHODS = new LinkedHashSet<>(
+  private static final Set<String> METHODS = new LinkedHashSet<String>(
       Arrays.asList("OPTIONS", "GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "PATCH"));
 
   final OkHttpClient client;
@@ -537,7 +537,7 @@ private boolean execute(boolean readResponse) throws IOException {
    * defined in {@link Protocol OkHttp's protocol enumeration}.
    */
   private void setProtocols(String protocolsString, boolean append) {
-    List<Protocol> protocolsList = new ArrayList<>();
+    List<Protocol> protocolsList = new ArrayList<Protocol>();
     if (append) {
       protocolsList.addAll(client.getProtocols());
     }
diff --git a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java
index db0ed8fa6c..6db67bf6d7 100644
--- a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java
+++ b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java
@@ -1500,7 +1500,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   }
 
   public void assertCookies(URL url, String... expectedCookies) throws Exception {
-    List<String> actualCookies = new ArrayList<>();
+    List<String> actualCookies = new ArrayList<String>();
     for (HttpCookie cookie : cookieManager.getCookieStore().get(url.toURI())) {
       actualCookies.add(cookie.toString());
     }
diff --git a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java
index 5a4ed10ac2..77ce58f8ea 100644
--- a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java
+++ b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/internal/huc/URLEncodingTest.java
@@ -126,7 +126,7 @@ private void testUrlToUriMapping(String string, String asAuthority, String asFil
   }
 
   private URI backdoorUrlToUri(URL url) throws Exception {
-    final AtomicReference<URI> uriReference = new AtomicReference<>();
+    final AtomicReference<URI> uriReference = new AtomicReference<URI>();
 
     OkHttpClient client = new OkHttpClient();
     Internal.instance.setCache(client, new InternalCache() {
diff --git a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java
index 1674511a43..7fa8800bb8 100644
--- a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java
+++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/internal/ws/WebSocketReaderTest.java
@@ -309,7 +309,7 @@
   @Test public void closedMessageSourceThrows() throws IOException {
     data.write(ByteString.decodeHex("810548656c6c6f")); // Hello
 
-    final AtomicReference<Exception> exception = new AtomicReference<>();
+    final AtomicReference<Exception> exception = new AtomicReference<Exception>();
     callback.setNextMessageDelegate(new MessageDelegate() {
       @Override public void onMessage(BufferedSource payload, PayloadType type) throws IOException {
         payload.close();
diff --git a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketCallTest.java b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketCallTest.java
index 63d21cb73f..c9d842e56c 100644
--- a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketCallTest.java
+++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketCallTest.java
@@ -185,9 +185,9 @@ private WebSocket awaitWebSocket() {
     Request request = new Request.Builder().get().url(server.getUrl("/")).build();
     WebSocketCall call = new WebSocketCall(client, request, random);
 
-    final AtomicReference<Response> responseRef = new AtomicReference<>();
-    final AtomicReference<WebSocket> webSocketRef = new AtomicReference<>();
-    final AtomicReference<IOException> failureRef = new AtomicReference<>();
+    final AtomicReference<Response> responseRef = new AtomicReference<Response>();
+    final AtomicReference<WebSocket> webSocketRef = new AtomicReference<WebSocket>();
+    final AtomicReference<IOException> failureRef = new AtomicReference<IOException>();
     final CountDownLatch latch = new CountDownLatch(1);
     call.enqueue(new WebSocketListener() {
       @Override public void onOpen(WebSocket webSocket, Request request, Response response)
diff --git a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketRecorder.java b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketRecorder.java
index 551cd91660..ba2eeb19b6 100644
--- a/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketRecorder.java
+++ b/okhttp-ws-tests/src/test/java/com/squareup/okhttp/ws/WebSocketRecorder.java
@@ -36,7 +36,7 @@
     void onMessage(BufferedSource payload, WebSocket.PayloadType type) throws IOException;
   }
 
-  private final BlockingQueue<Object> events = new LinkedBlockingQueue<>();
+  private final BlockingQueue<Object> events = new LinkedBlockingQueue<Object>();
   private MessageDelegate delegate;
 
   /** Sets a delegate for the next call to {@link #onMessage}. Cleared after invoked. */
diff --git a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketProtocol.java b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketProtocol.java
index 2b93398fa5..b0dfabab51 100644
--- a/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketProtocol.java
+++ b/okhttp-ws/src/main/java/com/squareup/okhttp/internal/ws/WebSocketProtocol.java
@@ -32,17 +32,17 @@
   */
 
   /** Byte 0 flag for whether this is the final fragment in a message. */
-  static final int B0_FLAG_FIN = 0b10000000;
+  static final int B0_FLAG_FIN = 0x80;
   /** Byte 0 reserved flag 1. Must be 0 unless negotiated otherwise. */
-  static final int B0_FLAG_RSV1 = 0b01000000;
+  static final int B0_FLAG_RSV1 = 0x40;
   /** Byte 0 reserved flag 2. Must be 0 unless negotiated otherwise. */
-  static final int B0_FLAG_RSV2 = 0b00100000;
+  static final int B0_FLAG_RSV2 = 0x20;
   /** Byte 0 reserved flag 3. Must be 0 unless negotiated otherwise. */
-  static final int B0_FLAG_RSV3 = 0b00010000;
+  static final int B0_FLAG_RSV3 = 0x10;
   /** Byte 0 mask for the frame opcode. */
-  static final int B0_MASK_OPCODE = 0b00001111;
+  static final int B0_MASK_OPCODE = 0x0f;
   /** Flag in the opcode which indicates a control frame. */
-  static final int OPCODE_FLAG_CONTROL = 0b00001000;
+  static final int OPCODE_FLAG_CONTROL = 0x08;
 
   /**
    * Byte 1 flag for whether the payload data is masked.
@@ -50,14 +50,14 @@
    * If this flag is set, the next four bytes represent the mask key. These bytes appear after
    * any additional bytes specified by {@link #B1_MASK_LENGTH}.
    */
-  static final int B1_FLAG_MASK = 0b10000000;
+  static final int B1_FLAG_MASK = 0x80;
   /**
    * Byte 1 mask for the payload length.
    * <p>
    * If this value is {@link #PAYLOAD_SHORT}, the next two bytes represent the length.
    * If this value is {@link #PAYLOAD_LONG}, the next eight bytes represent the length.
    */
-  static final int B1_MASK_LENGTH = 0b01111111;
+  static final int B1_MASK_LENGTH = 0x7f;
 
   static final int OPCODE_CONTINUATION = 0x0;
   static final int OPCODE_TEXT = 0x1;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Cache.java b/okhttp/src/main/java/com/squareup/okhttp/Cache.java
index 03c37a55d7..bcd46810f4 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Cache.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Cache.java
@@ -600,7 +600,7 @@ private boolean isHttps() {
 
       try {
         CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
-        List<Certificate> result = new ArrayList<>(length);
+        List<Certificate> result = new ArrayList<Certificate>(length);
         for (int i = 0; i < length; i++) {
           String line = source.readUtf8LineStrict();
           Buffer bytes = new Buffer();
diff --git a/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
index 2c5a2af095..26d4a988e2 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
@@ -170,7 +170,8 @@ private static ByteString sha1(X509Certificate x509Certificate) {
 
   /** Builds a configured certificate pinner. */
   public static final class Builder {
-    private final Map<String, List<ByteString>> hostnameToPins = new LinkedHashMap<>();
+    private final Map<String, List<ByteString>> hostnameToPins =
+        new LinkedHashMap<String, List<ByteString>>();
 
     /**
      * Pins certificates for {@code hostname}. Each pin is a SHA-1 hash of a
@@ -180,7 +181,7 @@ private static ByteString sha1(X509Certificate x509Certificate) {
     public Builder add(String hostname, String... pins) {
       if (hostname == null) throw new IllegalArgumentException("hostname == null");
 
-      List<ByteString> hostPins = new ArrayList<>();
+      List<ByteString> hostPins = new ArrayList<ByteString>();
       List<ByteString> previousPins = hostnameToPins.put(hostname, unmodifiableList(hostPins));
       if (previousPins != null) {
         hostPins.addAll(previousPins);
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
index ba664ea992..2e2513afa7 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
@@ -75,7 +75,7 @@
   private final int maxIdleConnections;
   private final long keepAliveDurationNs;
 
-  private final LinkedList<Connection> connections = new LinkedList<>();
+  private final LinkedList<Connection> connections = new LinkedList<Connection>();
 
   /**
    * A background thread is used to cleanup expired connections. There will be, at most, a single
@@ -227,7 +227,7 @@ void share(Connection connection) {
   public void evictAll() {
     List<Connection> toEvict;
     synchronized (this) {
-      toEvict = new ArrayList<>(connections);
+      toEvict = new ArrayList<Connection>(connections);
       connections.clear();
       notifyAll();
     }
@@ -267,7 +267,7 @@ boolean performCleanup() {
     synchronized (this) {
       if (connections.isEmpty()) return false; // Halt cleanup.
 
-      evictableConnections = new ArrayList<>();
+      evictableConnections = new ArrayList<Connection>();
       int idleConnectionCount = 0;
       long now = System.nanoTime();
       long nanosUntilNextEviction = keepAliveDurationNs;
@@ -332,6 +332,6 @@ void replaceCleanupExecutorForTests(Executor cleanupExecutor) {
    */
   // VisibleForTesting
   synchronized List<Connection> getConnections() {
-    return new ArrayList<>(connections);
+    return new ArrayList<Connection>(connections);
   }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
index a696c0ca7e..57285f7b5c 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
@@ -41,13 +41,13 @@
   private ExecutorService executorService;
 
   /** Ready calls in the order they'll be run. */
-  private final Deque<AsyncCall> readyCalls = new ArrayDeque<>();
+  private final Deque<AsyncCall> readyCalls = new ArrayDeque<AsyncCall>();
 
   /** Running calls. Includes canceled calls that haven't finished yet. */
-  private final Deque<AsyncCall> runningCalls = new ArrayDeque<>();
+  private final Deque<AsyncCall> runningCalls = new ArrayDeque<AsyncCall>();
 
   /** In-flight synchronous calls. Includes canceled calls that haven't finished yet. */
-  private final Deque<Call> executedCalls = new ArrayDeque<>();
+  private final Deque<Call> executedCalls = new ArrayDeque<Call>();
 
   public Dispatcher(ExecutorService executorService) {
     this.executorService = executorService;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Headers.java b/okhttp/src/main/java/com/squareup/okhttp/Headers.java
index 2be385ce2b..45000d3398 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Headers.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Headers.java
@@ -95,7 +95,7 @@ public String value(int index) {
 
   /** Returns an immutable case-insensitive set of header names. */
   public Set<String> names() {
-    TreeSet<String> result = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
+    TreeSet<String> result = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
     for (int i = 0, size = size(); i < size; i++) {
       result.add(name(i));
     }
@@ -107,7 +107,7 @@ public String value(int index) {
     List<String> result = null;
     for (int i = 0, size = size(); i < size; i++) {
       if (name.equalsIgnoreCase(name(i))) {
-        if (result == null) result = new ArrayList<>(2);
+        if (result == null) result = new ArrayList<String>(2);
         result.add(value(i));
       }
     }
@@ -197,7 +197,7 @@ public static Headers of(Map<String, String> headers) {
   }
 
   public static final class Builder {
-    private final List<String> namesAndValues = new ArrayList<>(20);
+    private final List<String> namesAndValues = new ArrayList<String>(20);
 
     /**
      * Add a header line without any validation. Only appropriate for headers from the remote peer
diff --git a/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java b/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java
index 5b160b6741..9ff3f7a6ba 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/MultipartBuilder.java
@@ -75,8 +75,8 @@
   private MediaType type = MIXED;
 
   // Parallel lists of nullable headers and non-null bodies.
-  private final List<Headers> partHeaders = new ArrayList<>();
-  private final List<RequestBody> partBodies = new ArrayList<>();
+  private final List<Headers> partHeaders = new ArrayList<Headers>();
+  private final List<RequestBody> partBodies = new ArrayList<RequestBody>();
 
   /** Creates a new multipart builder that uses a random boundary token. */
   public MultipartBuilder() {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
index 2b2f434202..a1ef97cf74 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
@@ -147,8 +147,8 @@ public void callEnqueue(Call call, Callback responseCallback, boolean forWebSock
   private Proxy proxy;
   private List<Protocol> protocols;
   private List<ConnectionSpec> connectionSpecs;
-  private final List<Interceptor> interceptors = new ArrayList<>();
-  private final List<Interceptor> networkInterceptors = new ArrayList<>();
+  private final List<Interceptor> interceptors = new ArrayList<Interceptor>();
+  private final List<Interceptor> networkInterceptors = new ArrayList<Interceptor>();
   private ProxySelector proxySelector;
   private CookieHandler cookieHandler;
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/TlsVersion.java b/okhttp/src/main/java/com/squareup/okhttp/TlsVersion.java
index a8d7b9b311..c0b7551620 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/TlsVersion.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/TlsVersion.java
@@ -35,12 +35,10 @@ private TlsVersion(String javaName) {
   }
 
   public static TlsVersion forJavaName(String javaName) {
-    switch (javaName) {
-      case "TLSv1.2": return TLS_1_2;
-      case "TLSv1.1": return TLS_1_1;
-      case "TLSv1": return TLS_1_0;
-      case "SSLv3": return SSL_3_0;
-    }
+    if (javaName.equals("TLSv1.2")) return TLS_1_2;
+    if (javaName.equals("TLSv1.1")) return TLS_1_1;
+    if (javaName.equals("TLSv1"))   return TLS_1_0;
+    if (javaName.equals("SSLv3"))   return SSL_3_0;
     throw new IllegalArgumentException("Unexpected TLS version: " + javaName);
   }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
index 284771fc34..48eea62edf 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
@@ -148,7 +148,8 @@
   private final int valueCount;
   private long size = 0;
   private BufferedSink journalWriter;
-  private final LinkedHashMap<String, Entry> lruEntries = new LinkedHashMap<>(0, 0.75f, true);
+  private final LinkedHashMap<String, Entry> lruEntries =
+      new LinkedHashMap<String, Entry>(0, 0.75f, true);
   private int redundantOpCount;
   private boolean hasJournalErrors;
 
@@ -715,7 +716,7 @@ private void validateKey(String key) {
     initialize();
     return new Iterator<Snapshot>() {
       /** Iterate a copy of the entries to defend against concurrent modification errors. */
-      final Iterator<Entry> delegate = new ArrayList<>(lruEntries.values()).iterator();
+      final Iterator<Entry> delegate = new ArrayList<Entry>(lruEntries.values()).iterator();
 
       /** The snapshot to return from {@link #next}. Null if we haven't computed that yet. */
       Snapshot nextSnapshot;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
index 073f75f9c4..2f73fb7829 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
@@ -119,9 +119,9 @@ private static Platform findPlatform() {
       }
 
       OptionalMethod<Socket> setUseSessionTickets
-          = new OptionalMethod<>(null, "setUseSessionTickets", boolean.class);
+          = new OptionalMethod<Socket>(null, "setUseSessionTickets", boolean.class);
       OptionalMethod<Socket> setHostname
-          = new OptionalMethod<>(null, "setHostname", String.class);
+          = new OptionalMethod<Socket>(null, "setHostname", String.class);
       Method trafficStatsTagSocket = null;
       Method trafficStatsUntagSocket = null;
       OptionalMethod<Socket> getAlpnSelectedProtocol = null;
@@ -136,11 +136,13 @@ private static Platform findPlatform() {
         // Attempt to find Android 5.0+ APIs.
         try {
           Class.forName("android.net.Network"); // Arbitrary class added in Android 5.0.
-          getAlpnSelectedProtocol = new OptionalMethod<>(byte[].class, "getAlpnSelectedProtocol");
-          setAlpnProtocols = new OptionalMethod<>(null, "setAlpnProtocols", byte[].class);
+          getAlpnSelectedProtocol =
+              new OptionalMethod<Socket>(byte[].class, "getAlpnSelectedProtocol");
+          setAlpnProtocols = new OptionalMethod<Socket>(null, "setAlpnProtocols", byte[].class);
         } catch (ClassNotFoundException ignored) {
         }
-      } catch (ClassNotFoundException | NoSuchMethodException ignored) {
+      } catch (ClassNotFoundException ignored) {
+      } catch (NoSuchMethodException ignored) {
       }
 
       return new Android(setUseSessionTickets, setHostname, trafficStatsTagSocket,
@@ -161,7 +163,8 @@ private static Platform findPlatform() {
       Method removeMethod = negoClass.getMethod("remove", SSLSocket.class);
       return new JdkWithJettyBootPlatform(
           putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
-    } catch (ClassNotFoundException | NoSuchMethodException ignored) {
+    } catch (ClassNotFoundException ignored) {
+    } catch (NoSuchMethodException ignored) {
     }
 
     return new Platform();
@@ -273,7 +276,7 @@ public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method remov
 
     @Override public void configureTlsExtensions(
         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {
-      List<String> names = new ArrayList<>(protocols.size());
+      List<String> names = new ArrayList<String>(protocols.size());
       for (int i = 0, size = protocols.size(); i < size; i++) {
         Protocol protocol = protocols.get(i);
         if (protocol == Protocol.HTTP_1_0) continue; // No HTTP/1.0 for ALPN.
@@ -283,7 +286,9 @@ public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method remov
         Object provider = Proxy.newProxyInstance(Platform.class.getClassLoader(),
             new Class[] { clientProviderClass, serverProviderClass }, new JettyNegoProvider(names));
         putMethod.invoke(null, sslSocket, provider);
-      } catch (InvocationTargetException | IllegalAccessException e) {
+      } catch (InvocationTargetException e) {
+        throw new AssertionError(e);
+      } catch (IllegalAccessException e) {
         throw new AssertionError(e);
       }
     }
@@ -291,7 +296,9 @@ public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method remov
     @Override public void afterHandshake(SSLSocket sslSocket) {
       try {
         removeMethod.invoke(null, sslSocket);
-      } catch (IllegalAccessException | InvocationTargetException ignored) {
+      } catch (IllegalAccessException ignored) {
+        throw new AssertionError();
+      } catch (InvocationTargetException ignored) {
         throw new AssertionError();
       }
     }
@@ -306,7 +313,9 @@ public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method remov
           return null;
         }
         return provider.unsupported ? null : provider.selected;
-      } catch (InvocationTargetException | IllegalAccessException e) {
+      } catch (InvocationTargetException e) {
+        throw new AssertionError();
+      } catch (IllegalAccessException e) {
         throw new AssertionError();
       }
     }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java b/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java
index 52c211eb54..1625029c8e 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java
@@ -27,7 +27,7 @@
  * preferred.
  */
 public final class RouteDatabase {
-  private final Set<Route> failedRoutes = new LinkedHashSet<>();
+  private final Set<Route> failedRoutes = new LinkedHashSet<Route>();
 
   /** Records a failure connecting to {@code failedRoute}. */
   public synchronized void failed(Route failedRoute) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java
index eee686f104..4ae7adbf30 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Util.java
@@ -194,7 +194,9 @@ public static String md5Hex(String s) {
       MessageDigest messageDigest = MessageDigest.getInstance("MD5");
       byte[] md5bytes = messageDigest.digest(s.getBytes("UTF-8"));
       return ByteString.of(md5bytes).hex();
-    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
+    } catch (NoSuchAlgorithmException e) {
+      throw new AssertionError(e);
+    } catch (UnsupportedEncodingException e) {
       throw new AssertionError(e);
     }
   }
@@ -205,7 +207,9 @@ public static String shaBase64(String s) {
       MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
       byte[] sha1Bytes = messageDigest.digest(s.getBytes("UTF-8"));
       return ByteString.of(sha1Bytes).base64();
-    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
+    } catch (NoSuchAlgorithmException e) {
+      throw new AssertionError(e);
+    } catch (UnsupportedEncodingException e) {
       throw new AssertionError(e);
     }
   }
@@ -223,7 +227,7 @@ public static ByteString sha1(ByteString s) {
 
   /** Returns an immutable copy of {@code list}. */
   public static <T> List<T> immutableList(List<T> list) {
-    return Collections.unmodifiableList(new ArrayList<>(list));
+    return Collections.unmodifiableList(new ArrayList<T>(list));
   }
 
   /** Returns an immutable list containing {@code elements}. */
@@ -233,7 +237,7 @@ public static ByteString sha1(ByteString s) {
 
   /** Returns an immutable copy of {@code map}. */
   public static <K, V> Map<K, V> immutableMap(Map<K, V> map) {
-    return Collections.unmodifiableMap(new LinkedHashMap<>(map));
+    return Collections.unmodifiableMap(new LinkedHashMap<K, V>(map));
   }
 
   public static ThreadFactory threadFactory(final String name, final boolean daemon) {
@@ -261,7 +265,7 @@ public static ThreadFactory threadFactory(final String name, final boolean daemo
    * {@code second}. The returned elements are in the same order as in {@code first}.
    */
   private static <T> List<T> intersect(T[] first, T[] second) {
-    List<T> result = new ArrayList<>();
+    List<T> result = new ArrayList<T>();
     for (T a : first) {
       for (T b : second) {
         if (a.equals(b)) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java
index a39c657efa..5788a4c16b 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/OkHeaders.java
@@ -86,12 +86,12 @@ private static long stringToLong(String s) {
    *     for responses. If non-null, this value is mapped to the null key.
    */
   public static Map<String, List<String>> toMultimap(Headers headers, String valueForNullKey) {
-    Map<String, List<String>> result = new TreeMap<>(FIELD_NAME_COMPARATOR);
+    Map<String, List<String>> result = new TreeMap<String, List<String>>(FIELD_NAME_COMPARATOR);
     for (int i = 0, size = headers.size(); i < size; i++) {
       String fieldName = headers.name(i);
       String value = headers.value(i);
 
-      List<String> allValues = new ArrayList<>();
+      List<String> allValues = new ArrayList<String>();
       List<String> otherValues = result.get(fieldName);
       if (otherValues != null) {
         allValues.addAll(otherValues);
@@ -157,7 +157,7 @@ public static boolean hasVaryAll(Response response) {
 
       String value = headers.value(i);
       if (result.isEmpty()) {
-        result = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
+        result = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
       }
       for (String varyField : value.split(",")) {
         result.add(varyField.trim());
@@ -214,7 +214,7 @@ static boolean isEndToEnd(String fieldName) {
     // challenge   = auth-scheme 1*SP 1#auth-param
     // realm       = "realm" "=" realm-value
     // realm-value = quoted-string
-    List<Challenge> result = new ArrayList<>();
+    List<Challenge> result = new ArrayList<Challenge>();
     for (int i = 0, size = responseHeaders.size(); i < size; i++) {
       if (!challengeHeader.equalsIgnoreCase(responseHeaders.name(i))) {
         continue;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java
index 4a653246cc..a9de6eaf2f 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java
@@ -71,7 +71,7 @@
   private int nextSpecIndex;
 
   /* State for negotiating failed routes */
-  private final List<Route> postponedRoutes = new ArrayList<>();
+  private final List<Route> postponedRoutes = new ArrayList<Route>();
 
   private RouteSelector(Address address, URI uri, OkHttpClient client, Request request) {
     this.address = address;
@@ -168,7 +168,7 @@ private void resetNextProxy(URI uri, Proxy proxy) {
     } else {
       // Try each of the ProxySelector choices until one connection succeeds. If none succeed
       // then we'll try a direct connection below.
-      proxies = new ArrayList<>();
+      proxies = new ArrayList<Proxy>();
       List<Proxy> selectedProxies = client.getProxySelector().select(uri);
       if (selectedProxies != null) proxies.addAll(selectedProxies);
       // Finally try a direct connection. We only try it once!
@@ -197,7 +197,7 @@ private Proxy nextProxy() throws IOException {
   /** Prepares the socket addresses to attempt for the current proxy or host. */
   private void resetNextInetSocketAddress(Proxy proxy) throws IOException {
     // Clear the addresses. Necessary if getAllByName() below throws!
-    inetSocketAddresses = new ArrayList<>();
+    inetSocketAddresses = new ArrayList<InetSocketAddress>();
 
     String socketHost;
     int socketPort;
@@ -263,7 +263,7 @@ private InetSocketAddress nextInetSocketAddress() throws IOException {
 
   /** Prepares the connection specs to attempt. */
   private void resetConnectionSpecs() {
-    connectionSpecs = new ArrayList<>();
+    connectionSpecs = new ArrayList<ConnectionSpec>();
     List<ConnectionSpec> specs = address.getConnectionSpecs();
     for (int i = 0, size = specs.size(); i < size; i++) {
       ConnectionSpec spec = specs.get(i);
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
index 61b6610810..1543a30785 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
@@ -112,7 +112,7 @@ public SpdyTransport(HttpEngine httpEngine, SpdyConnection spdyConnection) {
   public static List<Header> writeNameValueBlock(Request request, Protocol protocol,
       String version) {
     Headers headers = request.headers();
-    List<Header> result = new ArrayList<>(headers.size() + 10);
+    List<Header> result = new ArrayList<Header>(headers.size() + 10);
     result.add(new Header(TARGET_METHOD, request.method()));
     result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url())));
     String host = HttpEngine.hostHeader(request.url());
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java
index e8f9e51472..738c9cd866 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/Hpack.java
@@ -113,7 +113,7 @@ private Hpack() {
   // http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#section-3.1
   static final class Reader {
 
-    private final List<Header> headerList = new ArrayList<>();
+    private final List<Header> headerList = new ArrayList<Header>();
     private final BufferedSource source;
 
     private int headerTableSizeSetting;
@@ -218,7 +218,7 @@ void readHeaders() throws IOException {
     }
 
     public List<Header> getAndResetHeaderList() {
-      List<Header> result = new ArrayList<>(headerList);
+      List<Header> result = new ArrayList<Header>(headerList);
       headerList.clear();
       return result;
     }
@@ -357,7 +357,8 @@ ByteString readByteString() throws IOException {
   private static final Map<ByteString, Integer> NAME_TO_FIRST_INDEX = nameToFirstIndex();
 
   private static Map<ByteString, Integer> nameToFirstIndex() {
-    Map<ByteString, Integer> result = new LinkedHashMap<>(STATIC_HEADER_TABLE.length);
+    Map<ByteString, Integer> result =
+        new LinkedHashMap<ByteString, Integer>(STATIC_HEADER_TABLE.length);
     for (int i = 0; i < STATIC_HEADER_TABLE.length; i++) {
       if (!result.containsKey(STATIC_HEADER_TABLE[i].name)) {
         result.put(STATIC_HEADER_TABLE[i].name, i);
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java
index 6413f36345..a7b0b86266 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/NameValueBlockReader.java
@@ -85,7 +85,7 @@ public NameValueBlockReader(BufferedSource source) {
     if (numberOfPairs < 0) throw new IOException("numberOfPairs < 0: " + numberOfPairs);
     if (numberOfPairs > 1024) throw new IOException("numberOfPairs > 1024: " + numberOfPairs);
 
-    List<Header> entries = new ArrayList<>(numberOfPairs);
+    List<Header> entries = new ArrayList<Header>(numberOfPairs);
     for (int i = 0; i < numberOfPairs; i++) {
       ByteString name = readByteString().toAsciiLowercase();
       ByteString values = readByteString();
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
index 04bff0badb..ee3f288c91 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
@@ -78,7 +78,7 @@
    * run on the callback executor.
    */
   private final IncomingStreamHandler handler;
-  private final Map<Integer, SpdyStream> streams = new HashMap<>();
+  private final Map<Integer, SpdyStream> streams = new HashMap<Integer, SpdyStream>();
   private final String hostName;
   private int lastGoodStreamId;
   private int nextStreamId;
@@ -375,7 +375,7 @@ public Ping ping() throws IOException {
       }
       pingId = nextPingId;
       nextPingId += 2;
-      if (pings == null) pings = new HashMap<>();
+      if (pings == null) pings = new HashMap<Integer, Ping>();
       pings.put(pingId, ping);
     }
     writePing(false, pingId, 0x4f4b6f6b /* ASCII "OKok" */, ping);
@@ -788,7 +788,7 @@ private boolean pushedStream(int streamId) {
   }
 
   // Guarded by this.
-  private final Set<Integer> currentPushRequests = new LinkedHashSet<>();
+  private final Set<Integer> currentPushRequests = new LinkedHashSet<Integer>();
 
   private void pushRequestLater(final int streamId, final List<Header> requestHeaders) {
     synchronized (this) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java
index abc5df6516..82917ed71f 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyStream.java
@@ -266,7 +266,7 @@ void receiveHeaders(List<Header> headers, HeadersMode headersMode) {
         if (headersMode.failIfHeadersPresent()) {
           errorCode = ErrorCode.STREAM_IN_USE;
         } else {
-          List<Header> newHeaders = new ArrayList<>();
+          List<Header> newHeaders = new ArrayList<Header>();
           newHeaders.addAll(responseHeaders);
           newHeaders.addAll(headers);
           this.responseHeaders = newHeaders;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java b/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java
index 740de1bcdf..401aae1a6c 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/tls/OkHostnameVerifier.java
@@ -120,14 +120,14 @@ private boolean verifyHostName(String hostName, X509Certificate certificate) {
   public static List<String> allSubjectAltNames(X509Certificate certificate) {
     List<String> altIpaNames = getSubjectAltNames(certificate, ALT_IPA_NAME);
     List<String> altDnsNames = getSubjectAltNames(certificate, ALT_DNS_NAME);
-    List<String> result = new ArrayList<>(altIpaNames.size() + altDnsNames.size());
+    List<String> result = new ArrayList<String>(altIpaNames.size() + altDnsNames.size());
     result.addAll(altIpaNames);
     result.addAll(altDnsNames);
     return result;
   }
 
   private static List<String> getSubjectAltNames(X509Certificate certificate, int type) {
-    List<String> result = new ArrayList<>();
+    List<String> result = new ArrayList<String>();
     try {
       Collection<?> subjectAltNames = certificate.getSubjectAlternativeNames();
       if (subjectAltNames == null) {
diff --git a/pom.xml b/pom.xml
index 014973ae94..c876103260 100644
--- a/pom.xml
+++ b/pom.xml
@@ -40,7 +40,7 @@
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
     <!-- Compilation -->
-    <java.version>1.7</java.version>
+    <java.version>1.6</java.version>
     <okio.version>1.3.0</okio.version>
     <!-- ALPN library targeted to Java 7 -->
     <alpn.jdk7.version>7.1.2.v20141202</alpn.jdk7.version>
diff --git a/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java b/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java
index 21d11c7c31..ef609ba26a 100644
--- a/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java
+++ b/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java
@@ -42,8 +42,9 @@
 public final class Crawler {
   private final OkHttpClient client;
   private final Set<URL> fetchedUrls = Collections.synchronizedSet(new LinkedHashSet<URL>());
-  private final LinkedBlockingQueue<URL> queue = new LinkedBlockingQueue<>();
-  private final ConcurrentHashMap<String, AtomicInteger> hostnames = new ConcurrentHashMap<>();
+  private final LinkedBlockingQueue<URL> queue = new LinkedBlockingQueue<URL>();
+  private final ConcurrentHashMap<String, AtomicInteger> hostnames =
+      new ConcurrentHashMap<String, AtomicInteger>();
 
   public Crawler(OkHttpClient client) {
     this.client = client;
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/RequestBodyCompression.java b/samples/guide/src/main/java/com/squareup/okhttp/recipes/RequestBodyCompression.java
index c4805bdeb3..4d436932a5 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/RequestBodyCompression.java
+++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/RequestBodyCompression.java
@@ -45,7 +45,7 @@ public RequestBodyCompression() {
   }
 
   public void run() throws Exception {
-    Map<String, String> requestBody = new LinkedHashMap<>();
+    Map<String, String> requestBody = new LinkedHashMap<String, String>();
     requestBody.put("longUrl", "https://publicobject.com/2014/12/04/html-formatting-javadocs/");
     RequestBody jsonRequestBody = RequestBody.create(
         MEDIA_TYPE_JSON, new Gson().toJson(requestBody));
