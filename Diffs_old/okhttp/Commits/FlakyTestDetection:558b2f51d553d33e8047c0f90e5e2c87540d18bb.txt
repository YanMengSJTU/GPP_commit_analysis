diff --git a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
index e484bc37a5..bca788e4ad 100644
--- a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
@@ -933,19 +933,19 @@ private void requestBodyFail() throws IOException {
     enableTlsWithTunnel(false);
     server.setProtocols(Arrays.asList(Protocol.HTTP_1_1));
     requestBodySuccess(RequestBody.create(MediaType.parse("text/plain"), "Hello"), equalTo(5L),
-        equalTo(15L));
+        equalTo(19L));
   }
 
   @Test public void requestBodySuccessHttp2OverHttps() throws IOException {
     enableTlsWithTunnel(false);
     server.setProtocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1));
     requestBodySuccess(RequestBody.create(MediaType.parse("text/plain"), "Hello"), equalTo(5L),
-        equalTo(15L));
+        equalTo(19L));
   }
 
   @Test public void requestBodySuccessHttp() throws IOException {
     requestBodySuccess(RequestBody.create(MediaType.parse("text/plain"), "Hello"), equalTo(5L),
-        equalTo(15L));
+        equalTo(19L));
   }
 
   @Test public void requestBodySuccessStreaming() throws IOException {
@@ -960,12 +960,12 @@ private void requestBodyFail() throws IOException {
       }
     };
 
-    requestBodySuccess(requestBody, equalTo(8192L), equalTo(15L));
+    requestBodySuccess(requestBody, equalTo(8192L), equalTo(19L));
   }
 
   @Test public void requestBodySuccessEmpty() throws IOException {
     requestBodySuccess(RequestBody.create(MediaType.parse("text/plain"), ""), equalTo(0L),
-        equalTo(15L));
+        equalTo(19L));
   }
 
   private void requestBodySuccess(RequestBody body, Matcher<Long> requestBodyBytes,
diff --git a/okhttp-tests/src/test/java/okhttp3/HeadersTest.java b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
index 5b14352bbd..24dfe878d1 100644
--- a/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
@@ -458,4 +458,17 @@
         .build();
     assertEquals(Collections.emptyList(), HttpHeaders.parseChallenges(headers, "WWW-Authenticate"));
   }
+
+  @Test public void byteCount() {
+    assertEquals(0L, new Headers.Builder().build().byteCount());
+    assertEquals(10L, new Headers.Builder()
+        .add("abc", "def")
+        .build()
+        .byteCount());
+    assertEquals(20L, new Headers.Builder()
+        .add("abc", "def")
+        .add("ghi", "jkl")
+        .build()
+        .byteCount());
+  }
 }
diff --git a/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
index c3f8222fc3..c945b7addd 100644
--- a/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
+++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
@@ -126,32 +126,32 @@ private void logEvent(CallEvent e) {
     logEvent(new RequestHeadersStart(call));
   }
 
-  @Override public void requestHeadersEnd(Call call, long headerLength) {
-    logEvent(new RequestHeadersEnd(call, headerLength));
+  @Override public void requestHeadersEnd(Call call, Request request) {
+    logEvent(new RequestHeadersEnd(call, request.headers.byteCount()));
   }
 
   @Override public void requestBodyStart(Call call) {
     logEvent(new RequestBodyStart(call));
   }
 
-  @Override public void requestBodyEnd(Call call, long bytesWritten) {
-    logEvent(new RequestBodyEnd(call, bytesWritten));
+  @Override public void requestBodyEnd(Call call, long byteCount) {
+    logEvent(new RequestBodyEnd(call, byteCount));
   }
 
   @Override public void responseHeadersStart(Call call) {
     logEvent(new ResponseHeadersStart(call));
   }
 
-  @Override public void responseHeadersEnd(Call call, long headerLength) {
-    logEvent(new ResponseHeadersEnd(call, headerLength));
+  @Override public void responseHeadersEnd(Call call, Response response) {
+    logEvent(new ResponseHeadersEnd(call, response.headers.byteCount()));
   }
 
   @Override public void responseBodyStart(Call call) {
     logEvent(new ResponseBodyStart(call));
   }
 
-  @Override public void responseBodyEnd(Call call, long bytesRead) {
-    logEvent(new ResponseBodyEnd(call, bytesRead));
+  @Override public void responseBodyEnd(Call call, long byteCount) {
+    logEvent(new ResponseBodyEnd(call, byteCount));
   }
 
   @Override public void callEnd(Call call) {
diff --git a/okhttp/src/main/java/okhttp3/EventListener.java b/okhttp/src/main/java/okhttp3/EventListener.java
index 2a2e1cebe2..3a65290895 100644
--- a/okhttp/src/main/java/okhttp3/EventListener.java
+++ b/okhttp/src/main/java/okhttp3/EventListener.java
@@ -185,9 +185,10 @@ public void requestHeadersStart(Call call) {
    *
    * <p>This method is always invoked after {@link #requestHeadersStart(Call)}.
    *
-   * @param headerLength the length in java characters of headers to be written.
+   * @param request the request sent over the network. It is an error to access the body of this
+   *     request.
    */
-  public void requestHeadersEnd(Call call, long headerLength) {
+  public void requestHeadersEnd(Call call, Request request) {
   }
 
   /**
@@ -207,10 +208,8 @@ public void requestBodyStart(Call call) {
    * Invoked immediately after sending a request body.
    *
    * <p>This method is always invoked after {@link #requestBodyStart(Call)}.
-   *
-   * @param bytesWritten the length in bytes of body written, including partial success.
    */
-  public void requestBodyEnd(Call call, long bytesWritten) {
+  public void requestBodyEnd(Call call, long byteCount) {
   }
 
   /**
@@ -228,11 +227,12 @@ public void responseHeadersStart(Call call) {
   /**
    * Invoked immediately after receiving response headers.
    *
-   * <p>This method is always invoked after {@link #responseHeadersStart(Call)}.
+   * <p>This method is always invoked after {@link #responseHeadersStart}.
    *
-   * @param headerLength the length in bytes of headers read, or -1 if failed to read.
+   * @param response the response received over the network. It is an error to access the body of
+   *     this response.
    */
-  public void responseHeadersEnd(Call call, long headerLength) {
+  public void responseHeadersEnd(Call call, Response response) {
   }
 
   /**
@@ -254,10 +254,8 @@ public void responseBodyStart(Call call) {
    * websocket upgrade.
    *
    * <p>This method is always invoked after {@link #requestBodyStart(Call)}.
-   *
-   * @param bytesRead the length in bytes of the body read, including partial success.
    */
-  public void responseBodyEnd(Call call, long bytesRead) {
+  public void responseBodyEnd(Call call, long byteCount) {
   }
 
   /**
@@ -265,10 +263,6 @@ public void responseBodyEnd(Call call, long bytesRead) {
    * of response body by the caller.
    *
    * <p>This method is always invoked after {@link #callStart(Call)}.
-   *
-   * <p>{@code ioe} will be null in the case of a successful attempt to execute the call.
-   *
-   * <p>{@code ioe} will be non-null in the case of a failed attempt to execute the call.
    */
   public void callEnd(Call call) {
   }
diff --git a/okhttp/src/main/java/okhttp3/Headers.java b/okhttp/src/main/java/okhttp3/Headers.java
index 18342c2f0d..d5ef33aa70 100644
--- a/okhttp/src/main/java/okhttp3/Headers.java
+++ b/okhttp/src/main/java/okhttp3/Headers.java
@@ -110,6 +110,23 @@ public String value(int index) {
         : Collections.<String>emptyList();
   }
 
+  /**
+   * Returns the number of bytes required to encode these headers using HTTP/1.1. This is also the
+   * approximate size of HTTP/2 headers before they are compressed with HPACK. This value is
+   * intended to be used as a metric: smaller headers are more efficient to encode and transmit.
+   */
+  public long byteCount() {
+    // Each header name has 2 bytes of overhead for ': ' and every header value has 2 bytes of
+    // overhead for '\r\n'.
+    long result = namesAndValues.length * 2;
+
+    for (int i = 0, size = namesAndValues.length; i < size; i++) {
+      result += namesAndValues[i].length();
+    }
+
+    return result;
+  }
+
   public Builder newBuilder() {
     Builder result = new Builder();
     Collections.addAll(result.namesAndValues, namesAndValues);
diff --git a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
index 24413763be..b7aba87d6a 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
@@ -17,7 +17,6 @@
 
 import java.io.IOException;
 import java.net.ProtocolException;
-import okhttp3.Headers;
 import okhttp3.Interceptor;
 import okhttp3.Request;
 import okhttp3.Response;
@@ -49,7 +48,7 @@ public CallServerInterceptor(boolean forWebSocket) {
 
     realChain.eventListener().requestHeadersStart(realChain.call());
     httpCodec.writeRequestHeaders(request);
-    realChain.eventListener().requestHeadersEnd(realChain.call(), headerLength(request.headers()));
+    realChain.eventListener().requestHeadersEnd(realChain.call(), request);
 
     Response.Builder responseBuilder = null;
     if (HttpMethod.permitsRequestBody(request.method()) && request.body() != null) {
@@ -97,7 +96,7 @@ public CallServerInterceptor(boolean forWebSocket) {
         .build();
 
     realChain.eventListener()
-        .responseHeadersEnd(realChain.call(), headerLength(response.headers()));
+        .responseHeadersEnd(realChain.call(), response);
 
     int code = response.code();
     if (forWebSocket && code == 101) {
@@ -124,17 +123,6 @@ public CallServerInterceptor(boolean forWebSocket) {
     return response;
   }
 
-  private long headerLength(Headers headers) {
-    long length = 0;
-
-    for (int i = 0, size = headers.size(); i < size; i++) {
-      length += headers.name(i).length();
-      length += headers.value(i).length();
-    }
-
-    return length;
-  }
-
   static final class CountingSink extends ForwardingSink {
     long successfulCount;
 
