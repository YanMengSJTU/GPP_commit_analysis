diff --git a/okcurl/src/test/java/okhttp3/curl/MainTest.java b/okcurl/src/test/java/okhttp3/curl/MainTest.java
index d7f3771818..5ced4f54c8 100644
--- a/okcurl/src/test/java/okhttp3/curl/MainTest.java
+++ b/okcurl/src/test/java/okhttp3/curl/MainTest.java
@@ -107,13 +107,13 @@ public void cleanUpStreams(){
     assertEquals("Mon, 18 Aug 2014 15:16:06 GMT", request.header("If-Modified-Since"));
   }
 
-  @Test public void sampleRequestProtocols(){
+  @Test public void getRequestProtocols(){
     fromArgs("-d", "Sample Test", "--frames", "true", "-i", "true", "-X", "POST", "-V", "true", "-H", "Content-Type: application/json", "-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT", "http://example.com").run();
     assertTrue(outContent.toString().contains("Protocols: http/1.0, http/1.1, spdy/3.1, h2"));
   }
 
-  @Test public void sampleInsecureRequest(){
-    fromArgs("-d", "Sample Test", "--frames", "true", "-i", "true", "-X", "POST", "-k", "true", "-H", "Content-Type: application/json", "-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT", "http://example.com").run();
+  @Test public void insecureRequest(){
+    fromArgs("-d", "Sample Test 2", "--frames", "true", "-i", "true", "-X", "POST", "-k", "true", "-H", "Content-Type: application/json", "-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT", "http://example.com").run();
     assertTrue(outContent.toString().contains("HTTP/1.1 304 Not Modified"));
   }
 
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
index 04fdc71ed8..894bb2a91a 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
@@ -102,7 +102,7 @@
       }
     };
     CacheAdapter cacheAdapter = new CacheAdapter(responseCache);
-    assert (cacheAdapter.getDelegate().equals(responseCache));
+    assertTrue (cacheAdapter.getDelegate().equals(responseCache));
   }
 
   @Test public void get_httpsGet() throws Exception {
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java
index 7dcb1c2601..cae4631ee1 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/JavaApiConverterTest.java
@@ -133,9 +133,7 @@ public void createOkResponseForCacheGet_NullHeaders() throws Exception {
       }
     };
 
-    Response response = JavaApiConverter.createOkResponseForCacheGet(request, cacheResponse);
-    Request cacheRequest = response.request();
-    assertEquals(request.url(), cacheRequest.url());
+    JavaApiConverter.createOkResponseForCacheGet(request, cacheResponse);
 
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/CallTest.java b/okhttp-tests/src/test/java/okhttp3/CallTest.java
index 4c99469858..1f63a87d42 100644
--- a/okhttp-tests/src/test/java/okhttp3/CallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java
@@ -1116,7 +1116,7 @@ public void onResponse(Call call, Response response) throws IOException {
         .build();
     Request request2 = new Request.Builder().url(server.url("/")).build();
     Response response2 = client.newCall(request2).execute();
-    assertNotSame(response2.handshake(), response1.handshake());
+      assertNotSame(response2.handshake().hashCode(), response1.handshake().hashCode());
     response2.body().close();
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java
index 3d5eb7cfd8..45a2fd1b07 100644
--- a/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/HttpUrlTest.java
@@ -15,6 +15,11 @@
  */
 package okhttp3;
 
+import okhttp3.UrlComponentEncodingTester.Component;
+import okhttp3.UrlComponentEncodingTester.Encoding;
+import org.junit.Ignore;
+import org.junit.Test;
+
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URL;
@@ -22,15 +27,9 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedHashSet;
-import okhttp3.UrlComponentEncodingTester.Component;
-import okhttp3.UrlComponentEncodingTester.Encoding;
-import org.junit.Ignore;
-import org.junit.Test;
 
 import static java.util.Collections.singletonList;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.fail;
+import static org.junit.Assert.*;
 
 public final class HttpUrlTest {
   @Test public void parseTrimsAsciiWhitespace() throws Exception {
diff --git a/okhttp-tests/src/test/java/okhttp3/RequestTest.java b/okhttp-tests/src/test/java/okhttp3/RequestTest.java
index 20d85a0b92..1455471b6d 100644
--- a/okhttp-tests/src/test/java/okhttp3/RequestTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/RequestTest.java
@@ -17,6 +17,7 @@
 
 import okhttp3.internal.Util;
 import okio.Buffer;
+import okio.ByteString;
 import org.junit.Test;
 
 import java.io.File;
@@ -63,6 +64,15 @@
     assertEquals("Retransmit body", "616263", bodyToHex(body));
   }
 
+  @Test public void byteString() throws Exception {
+    MediaType contentType = MediaType.parse("text/plain");
+    RequestBody body = RequestBody.create(contentType, ByteString.encodeUtf8("ab??cd"));
+    assertEquals(contentType, body.contentType());
+    assertEquals(6, body.contentLength());
+    assertEquals("61623f3f6364", bodyToHex(body));
+    assertEquals("Retransmit body", "61623f3f6364", bodyToHex(body));
+  }
+
   @Test public void byteArrayRange() throws Exception {
     MediaType contentType = MediaType.parse("text/plain");
     RequestBody body = RequestBody.create(contentType, ".abcd".getBytes(Util.UTF_8), 1, 3);
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java
index c5caeba49a..5afd87b7aa 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java
@@ -79,14 +79,7 @@ private void createNewCacheWithSize(int maxSize) throws IOException {
     cache.close();
     assertJournalEquals();
   }
-
-  @Test public void emptyCache1() throws Exception {
-    //DiskLruCache newCache = new DiskLruCache(fileSystem, cacheDir, appVersion, 2, Integer.MAX_VALUE-1, executor);
-    createNewCacheWithSize(Integer.MAX_VALUE-1);
-
-    assertJournalEquals();
-  }
-
+  
   @Test public void validateKey() throws Exception {
     String key = null;
     try {
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java
index 3336d880b7..73e09e5a94 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ConnectionTest.java
@@ -15,13 +15,12 @@
  */
 package okhttp3.internal.http2;
 
-import okhttp3.Address;
-import okhttp3.ConnectionSpec;
-import okhttp3.Dns;
-import okhttp3.Protocol;
+import okhttp3.*;
 import okhttp3.internal.RecordingOkAuthenticator;
 import okhttp3.internal.Util;
+import okhttp3.internal.connection.StreamAllocation;
 import okhttp3.internal.http2.MockHttp2Peer.InFrame;
+import okhttp3.mockwebserver.MockWebServer;
 import okio.*;
 import org.junit.After;
 import org.junit.Rule;
@@ -42,6 +41,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import static okhttp3.TestUtil.defaultClient;
 import static okhttp3.TestUtil.headerEntries;
 import static okhttp3.TestUtil.repeat;
 import static okhttp3.internal.Util.EMPTY_BYTE_ARRAY;
@@ -1149,7 +1149,7 @@ public void http2connectionMergeSettingstest() throws IOException, InterruptedEx
     Http2Connection connection = connection(peer);
     Ping ping = connection.ping();
     connection.close();
-    assertEquals(-1, ping.roundTripTime());
+    assertEquals(-1, ping.roundTripTime(500,TimeUnit.MILLISECONDS));
   }
 
   @Test public void getResponseHeadersTimesOut() throws Exception {
@@ -1448,6 +1448,24 @@ public void http2connectionMergeSettingstest() throws IOException, InterruptedEx
   }
 
 
+  @Test public void Http2CodecTest() throws IOException {
+    peer.acceptFrame();
+    peer.play();
+
+    MockWebServer server = new MockWebServer();
+    Address addressA = newAddress("a");
+    Http2Connection connection = connection(peer);
+    ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
+    StreamAllocation streamAllocation = new StreamAllocation(pool, addressA, null);
+    Http2Codec codec = new Http2Codec(defaultClient(), streamAllocation, connection);
+    Request request = new Request.Builder().url(server.url("/")).build();
+    codec.writeRequestHeaders(request);
+    codec.createRequestBody(request, 10);
+    Response response = new Response.Builder().request(request).protocol(Protocol.HTTP_2).code(200).addHeader("Content-type","plain/html").addHeader(":path","/temp").message("ABCDDE").build();
+    assertEquals("plain/html",codec.openResponseBody(response).contentType().toString());
+    codec.finishRequest();
+  }
+
   @Test public void blockedStreamDoesntStarveNewStream() throws Exception {
     int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, peer.maxOutboundDataLength());
 
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ServerTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ServerTest.java
index 2822415293..5303d19c78 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ServerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ServerTest.java
@@ -23,18 +23,7 @@
     SSLSocketFactory sslFactory = (SSLSocketFactory)SSLSocketFactory.getDefault();
     Http2Server server = new Http2Server(file, sslFactory);
 
-    @Test (expected = AssertionError.class)
-    public void http2ServerEmptyPathHeader() throws Exception {
-
-        File file = new File("testDir");
-        Http2Server server = new Http2Server(file, sslFactory);
-        Header header1 = new Header(":Content-type","text/html");
-        Http2Connection connection = new Http2Connection(new Http2Connection.Builder(true));
-        Http2Stream stream = new Http2Stream(1,connection,true,true, Arrays.asList(header1));
-        server.onStream(stream);
-    }
-
-    @Test (expected = NullPointerException.class)
+    @Test (expected = Exception.class)
     public void http2ServerRequireConnectionPreface() throws IOException {
         peer.acceptFrame(); // SYN_STREAM
         peer.play();
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
index 98de4bc345..6ebd08ca1f 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
@@ -686,17 +686,19 @@ private void noRecoveryFromErrorWithRetryDisabled(ErrorCode errorCode) throws Ex
     @Test public void PushPromiseServerConnectionViaHttp2() throws Exception {
         PushPromise pushPromise = new PushPromise("GET", "/foo/bar", Headers.of("foo", "bar"),
                 new MockResponse().setBody("bar").setStatus("HTTP/1.1 200 Sweet"));
-        server.enqueue(new MockResponse()
-                .withPush(pushPromise));
+        MockResponse response = new MockResponse()
+                .withPush(pushPromise);
+        server.enqueue(response);
         URLConnection connection = server.url("/").url().openConnection();
         assertEquals(-1, connection.getContentLength());
-
+        assertNotNull(response.getPushPromises().get(0).headers().toString());
+        assertNull(connection.getHeaderField(0));
         Call call = client.newCall(new Request.Builder()
                 .url(server.url("/"))
                 .build());
-        Response response = call.execute();
-        assertEquals(response.headers().toString(), "content-length: 0\n");
-        response.close();
+        Response response1 = call.execute();
+        assertEquals(response1.headers().toString(), "content-length: 0\n");
+        response1.close();
     }
 
   @Test public void serverSendsPushPromise_GET() throws Exception {
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
index bb0e76dc43..3e66ac7764 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
@@ -418,6 +418,7 @@
 
   }
 
+
   @Test public void emptySubjectAltNames() throws Exception{
 
       X509Certificate certificate = certificate(""
@@ -435,33 +436,6 @@
 
   }
 
-  //@Test
-  public void testHostname() throws Exception {
-
-      X509Certificate certificate = certificate("-----BEGIN CERTIFICATE-----\n" +
-              "MIIDCzCCAfOgAwIBAgIJAOnFgS2/lIp4MA0GCSqGSIb3DQEBBQUAMA0xCzAJBgNV\n" +
-              "BAMUAi5cMB4XDTE2MTEyOTA1MDkxNFoXDTI2MTEyNzA1MDkxNFowDTELMAkGA1UE\n" +
-              "AxQCLlwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDqy5Yqm1HG2Ica\n" +
-              "WGwlBYfgNiSpwEEnMzGyttmGujyNh4Jr0RKOdqJLB524tyGGjGod/OAWOmXaRK8s\n" +
-              "5zat2Glvs3EV+i1DE2GjxwiNPeca1o0GqfU2iDtc92CqUOsYxG1VFG5Wrc5A2Snq\n" +
-              "i0NRHQS4y4ov6SPqMenfh1s4alwFSVsRlhRHSRrK3YLrrA/7ehIfbt0/1gkxq2Q1\n" +
-              "wD0M0ioIwf6/6RNa2IMCCwYvr32/qx9GHx+G27/Wdjkh1TsyJjAMaNtMYYQfUbtY\n" +
-              "hAOMUegE+YB+6jt0KzMKM4VH5sO+g2Ex+YB2Ej1igQh77kPl+4yrlExx0yK1EgIU\n" +
-              "DQE6eZeXAgMBAAGjbjBsMB0GA1UdDgQWBBSlAPR3zt52Viw7nEtnoTfrwLnDSzA9\n" +
-              "BgNVHSMENjA0gBSlAPR3zt52Viw7nEtnoTfrwLnDS6ERpA8wDTELMAkGA1UEAxQC\n" +
-              "LlyCCQDpxYEtv5SKeDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQBz\n" +
-              "NGKxNs+G7ypCcSJzqHLyGgnBeCmeY0Vq0N9LEmWNumUW5C9lzwJzR34C5avm3/E0\n" +
-              "NZDVeQGmIS0ago3Z3yYJ2XUSquc3ypLQ7KBF2/XmyIPYzxlHf6TZkgrG2zK5t1Av\n" +
-              "aSDF9UtDdRpyM8vnMAjDHZK4SMOzmW/8yUrDC7Lax5JprcP1TRgbwy0Lxvt3Dp4R\n" +
-              "OlJYJDxUe7lfOXsB92/h4dBOqsCoDEcQ6tiaWDf2i79l4MeeEwnrDQ7w8qBp00Ub\n" +
-              "YjvCXiGMHQ7RiCYaoxKQsHaWvb53Ark+a1oCH0IiRbgQDhQXV5KNHqCwwM4i9u4x\n" +
-              "TFtJKqovSGOOoG4X0/+5\n" +
-              "-----END CERTIFICATE-----");
-      X500Principal principal = certificate.getSubjectX500Principal();
-      String cn = new DistinguishedNameParser(principal).findMostSpecific("cn");
-      System.out.println(cn);
-  }
-
   @Test public void wildcardsCannotMatchIpAddresses() throws Exception {
     // openssl req -x509 -nodes -days 36500 -subj '/CN=*.0.0.1' -newkey rsa:512 -out cert.pem
     SSLSession session = session(""
diff --git a/samples/crawler/src/test/okhttp3/sample/TestSamples.java b/samples/crawler/src/test/okhttp3/sample/TestSamples.java
index 56de2234c4..008f8f4d06 100644
--- a/samples/crawler/src/test/okhttp3/sample/TestSamples.java
+++ b/samples/crawler/src/test/okhttp3/sample/TestSamples.java
@@ -1,13 +1,33 @@
 package okhttp3.sample;
-import org.junit.Test;
 
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.io.PrintStream;
+import static org.junit.Assert.assertEquals;
 
 public class TestSamples{
+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
+
+    @Before
+    public void setUpStreams() {
+        System.setOut(new PrintStream(outContent));}
+
+    @After
+    public void cleanUpStreams(){
+        System.setOut(null);
+    }
 
     @Test
     public void crawlOkhttp() throws IOException {
-        Crawler.main(new String[]{"temp", "http://square.github.io/okhttp/"});
-    }
+        OkHttpClient client= new OkHttpClient();
+        Crawler crawler = new Crawler(client);
+        crawler.fetch(HttpUrl.parse("http://square.github.io/okhttp/"));
+        assertEquals("200: http://square.github.io/okhttp/ (network: 200 over http/1.1)\n", outContent.toString());
 
+    }
 }
\ No newline at end of file
