diff --git a/.gitignore b/.gitignore
index d2b9133572..2989c1ec8e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -25,3 +25,9 @@ classes
 obj
 
 .DS_Store
+
+# Special Mkdocs files
+docs/api
+docs/changelog.md
+docs/contributing.md
+docs/index.md
diff --git a/CHANGELOG.md b/CHANGELOG.md
index a66b52df92..1e9275cb12 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -9,7 +9,7 @@ _2019-06-03_
 bugs or performance regressions before the final 4.0.0 release.
 
 We tried our best to make it fast and safe to upgrade from OkHttp 3.x.
-[We even wrote a guide](docs/upgrading_to_okhttp_4.md) to help you with it!
+[We even wrote a guide][upgrading_to_okhttp_4] to help you with it!
 
 
 ## Version 3.14.2
@@ -1304,7 +1304,7 @@ _2014-12-30_
     running SSLv3, you must manually configure your own `ConnectionSpec`.
 
  *  **OkHttp now offers interceptors.** Interceptors are a powerful mechanism
-    that can monitor, rewrite, and retry calls. The [interceptors doc](docs/interceptors.md) is a full
+    that can monitor, rewrite, and retry calls. The [interceptors doc][interceptors] is a full
     introduction to this new API.
 
  *  New: APIs to iterate and selectively clear the response cache.
@@ -1787,5 +1787,7 @@ Initial release.
  [require_android_5]: https://medium.com/square-corner-blog/okhttp-3-13-requires-android-5-818bb78d07ce
  [obsolete_apache_client]: https://gist.github.com/swankjesse/09721f72039e3a46cf50f94323deb82d
  [obsolete_url_factory]: https://gist.github.com/swankjesse/dd91c0a8854e1559b00f5fc9c7bfae70
- [tls_configuration_history]: docs/tls_configuration_history.md
+ [tls_configuration_history]: http://square.github.io/okhttp/tls_configuration_history/
  [grpc_http2]: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
+ [upgrading_to_okhttp_4]: http://square.github.io/okhttp/upgrading_to_okhttp_4/
+ [interceptors]: http://square.github.io/okhttp/interceptors/
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index fce2def528..e0e216ec47 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -4,16 +4,16 @@ Contributing
 Keeping the project small and stable limits our ability to accept new contributors. We are not
 seeking new committers at this time, but some small contributions are welcome.
 
-If you've found a security problem, please follow our [bug bounty](BUG-BOUNTY.md) program.
+If you've found a security problem, please follow our [bug bounty][security] program.
 
 If you've found a bug, please contribute a failing test case so we can study and fix it.
 
 If you have a new feature idea, please build it in an external library. There are
-[many libraries](./docs/works_with_okhttp.md) that sit on top or hook in via existing APIs. If you build
+[many libraries][works_with_okhttp] that sit on top or hook in via existing APIs. If you build
 something that integrates with OkHttp, tell us so that we can link it!
 
 Before code can be accepted all contributors must complete our
-[Individual Contributor License Agreement (CLA)](https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1).
+[Individual Contributor License Agreement (CLA)][cla].
 
 
 Code Contributions
@@ -35,5 +35,11 @@ squash all pull requests on merge.
 Committer's Guides
 ------------------
 
- * [Concurrency](./docs/concurrency.md)
- * [Releasing](RELEASING.md)
+ * [Concurrency][concurrency]
+ * [Releasing][releasing]
+
+ [cla]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1
+ [concurrency]: http://square.github.io/okhttp/concurrency/
+ [releasing]: http://square.github.io/okhttp/releasing/
+ [security]: http://square.github.io/okhttp/security/
+ [works_with_okhttp]: http://square.github.io/okhttp/works_with_okhttp/
diff --git a/README.md b/README.md
index f48c8dfac5..999455282f 100644
--- a/README.md
+++ b/README.md
@@ -1,9 +1,72 @@
 OkHttp
 ======
 
-An HTTP & HTTP/2 client for Android and Java applications.
+See the [project website][okhttp] for documentation and APIs.
 
-See the [**project website**][website] for documentation and APIs.
+HTTP is the way modern applications network. It’s how we exchange data & media. Doing HTTP
+efficiently makes your stuff load faster and saves bandwidth.
+
+OkHttp is an HTTP client that’s efficient by default:
+
+ * HTTP/2 support allows all requests to the same host to share a socket.
+ * Connection pooling reduces request latency (if HTTP/2 isn’t available).
+ * Transparent GZIP shrinks download sizes.
+ * Response caching avoids the network completely for repeat requests.
+
+OkHttp perseveres when the network is troublesome: it will silently recover from common connection
+problems. If your service has multiple IP addresses OkHttp will attempt alternate addresses if the
+first connect fails. This is necessary for IPv4+IPv6 and for services hosted in redundant data
+centers. OkHttp supports modern TLS features (TLS 1.3, ALPN, certificate pinning). It can be
+configured to fall back for broad connectivity.
+
+Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It
+supports both synchronous blocking calls and async calls with callbacks.
+
+
+Get a URL
+---------
+
+This program downloads a URL and prints its contents as a string. [Full source][get_example].
+
+```java
+OkHttpClient client = new OkHttpClient();
+
+String run(String url) throws IOException {
+  Request request = new Request.Builder()
+      .url(url)
+      .build();
+
+  try (Response response = client.newCall(request).execute()) {
+    return response.body().string();
+  }
+}
+```
+
+
+Post to a Server
+----------------
+
+This program posts data to a service. [Full source][post_example].
+
+```java
+public static final MediaType JSON
+    = MediaType.get("application/json; charset=utf-8");
+
+OkHttpClient client = new OkHttpClient();
+
+String post(String url, String json) throws IOException {
+  RequestBody body = RequestBody.create(JSON, json);
+  Request request = new Request.Builder()
+      .url(url)
+      .post(body)
+      .build();
+  try (Response response = client.newCall(request).execute()) {
+    return response.body().string();
+  }
+}
+```
+
+Further examples are on the [OkHttp Recipes page][recipes].
 
 
 Requirements
@@ -30,10 +93,11 @@ The OkHttp 3.12.x branch supports Android 2.3+ (API level 9+) and Java 7+. These
 support for TLS 1.2 and should not be used. But because upgrading is difficult we will backport
 critical fixes to the [3.12.x branch][okhttp_312x] through December 31, 2020.
 
+
 Releases
 --------
 
-Our [change log](CHANGELOG.md) has release history.
+Our [change log][changelog] has release history.
 
 ```kotlin
 implementation("com.squareup.okhttp3:okhttp:3.14.2")
@@ -42,6 +106,14 @@ implementation("com.squareup.okhttp3:okhttp:3.14.2")
 Snapshot builds are [available][snap].
 
 
+R8 / ProGuard
+-------------
+
+If you are using R8 or ProGuard add the options from [`okhttp3.pro`][okhttp3_pro].
+
+You might also need rules for Okio which is a dependency of this library.
+
+
 MockWebServer
 -------------
 
@@ -51,34 +123,34 @@ OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients.
 testImplementation("com.squareup.okhttp3:mockwebserver:3.14.2")
 ```
 
-R8 / ProGuard
--------------
-
-If you are using R8 or ProGuard add the options from [`okhttp3.pro`][okhttp3_pro].
-
-You might also need rules for Okio which is a dependency of this library.
-
 
 License
 -------
 
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
+```
+Copyright 2019 Square, Inc.
 
-       http://www.apache.org/licenses/LICENSE-2.0
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
 
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
+   http://www.apache.org/licenses/LICENSE-2.0
 
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+```
 
+ [changelog]: http://square.github.io/okhttp/changelog/
  [conscrypt]: https://github.com/google/conscrypt/
+ [get_example]: https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/GetExample.java
+ [okhttp3_pro]: https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro
  [okhttp_312x]: https://github.com/square/okhttp/tree/okhttp_3.12.x
- [okio]: https://github.com/square/okio/
+ [okhttp]: https://square.github.io/okhttp/
+ [okio]: https://github.com/square/okio
+ [post_example]: https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/PostExample.java
+ [recipes]: http://square.github.io/okhttp/recipes/
  [snap]: https://oss.sonatype.org/content/repositories/snapshots/
  [tls_history]: https://square.github.io/okhttp/tls_configuration_history/
- [website]: https://square.github.io/okhttp
- [okhttp3_pro]: https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro
diff --git a/deploy_website.sh b/deploy_website.sh
index 688732fd0f..eaa6e560bf 100755
--- a/deploy_website.sh
+++ b/deploy_website.sh
@@ -30,6 +30,11 @@ cd $DIR
   :okhttp-urlconnection:dokka \
   :okhttp:dokka
 
+# Copy in special files that GitHub wants in the project root.
+cat README.md | grep -v 'project website' > docs/index.md
+cp CHANGELOG.md docs/changelog.md
+cp CONTRIBUTING.md docs/contributing.md
+
 # Build the site and push the new files up to GitHub
 mkdocs gh-deploy
 
diff --git a/docs/calls.md b/docs/calls.md
index 8921da1b25..2ffa0a4130 100644
--- a/docs/calls.md
+++ b/docs/calls.md
@@ -2,11 +2,11 @@
 
 The HTTP client’s job is to accept your request and produce its response. This is simple in theory but it gets tricky in practice.
 
-## [Requests](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Request.html)
+## [Requests](http://square.github.io/okhttp/api/okhttp/okhttp3/-request/)
 
 Each HTTP request contains a URL, a method (like `GET` or `POST`), and a list of headers. Requests may also contain a body: a data stream of a specific content type.
 
-## [Responses](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Response.html)
+## [Responses](http://square.github.io/okhttp/api/okhttp/okhttp3/-response/)
 
 The response answers the request with a code (like 200 for success or 404 for not found), headers, and its own optional body.
 
@@ -28,20 +28,20 @@ If a conditional GET was successful, responses from the network and cache are me
 
 When your requested URL has moved, the webserver will return a response code like `302` to indicate the document’s new URL. OkHttp will follow the redirect to retrieve a final response.
 
-If the response issues an authorization challenge, OkHttp will ask the [`Authenticator`](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Authenticator.html) (if one is configured) to satisfy the challenge. If the authenticator supplies a credential, the request is retried with that credential included.
+If the response issues an authorization challenge, OkHttp will ask the [`Authenticator`](http://square.github.io/okhttp/api/okhttp/okhttp3/-authenticator/) (if one is configured) to satisfy the challenge. If the authenticator supplies a credential, the request is retried with that credential included.
 
 ## Retrying Requests
 
 Sometimes connections fail: either a pooled connection was stale and disconnected, or the webserver itself couldn’t be reached. OkHttp will retry the request with a different route if one is available.
 
-## [Calls](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Call.html)
+## [Calls](http://square.github.io/okhttp/api/okhttp/okhttp3/-call/)
 
 With rewrites, redirects, follow-ups and retries, your simple request may yield many requests and responses. OkHttp uses `Call` to model the task of satisfying your request through however many intermediate requests and responses are necessary. Typically this isn’t many! But it’s comforting to know that your code will continue to work if your URLs are redirected or if you failover to an alternate IP address.
 
 Calls are executed in one of two ways:
 
  * **Synchronous:** your thread blocks until the response is readable.
- * **Asynchronous:** you enqueue the request on any thread, and get [called back](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Callback.html) on another thread when the response is readable.
+ * **Asynchronous:** you enqueue the request on any thread, and get [called back](http://square.github.io/okhttp/api/okhttp/okhttp3/-callback/) on another thread when the response is readable.
 
 Calls can be canceled from any thread. This will fail the call if it hasn’t yet completed! Code that is writing the request body or reading the response body will suffer an `IOException` when its call is canceled.
 
@@ -49,4 +49,4 @@ Calls can be canceled from any thread. This will fail the call if it hasn’t ye
 
 For synchronous calls, you bring your own thread and are responsible for managing how many simultaneous requests you make. Too many simultaneous connections wastes resources; too few harms latency.
 
-For asynchronous calls, [`Dispatcher`](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Dispatcher.html) implements policy for maximum simultaneous requests. You can set maximums per-webserver (default is 5), and overall (default is 64).
+For asynchronous calls, [`Dispatcher`](http://square.github.io/okhttp/api/okhttp/okhttp3/-dispatcher/) implements policy for maximum simultaneous requests. You can set maximums per-webserver (default is 5), and overall (default is 64).
diff --git a/docs/connections.md b/docs/connections.md
index d4ab132451..57576979a0 100644
--- a/docs/connections.md
+++ b/docs/connections.md
@@ -3,7 +3,7 @@ Connections
 
 Although you provide only the URL, OkHttp plans its connection to your webserver using three types: URL, Address, and Route.
 
-#### [URLs](http://square.github.io/okhttp/3.x/okhttp/okhttp3/HttpUrl.html)
+#### [URLs](http://square.github.io/okhttp/api/okhttp/okhttp3/-http-url/)
 
 URLs (like `https://github.com/square/okhttp`) are fundamental to HTTP and the Internet. In addition to being a universal, decentralized naming scheme for everything on the web, they also specify how to access web resources.
 
@@ -14,21 +14,21 @@ URLs are abstract:
 
 They're also concrete: each URL identifies a specific path (like `/square/okhttp`) and query (like `?q=sharks&lang=en`). Each webserver hosts many URLs.
 
-#### [Addresses](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Address.html)
+#### [Addresses](http://square.github.io/okhttp/api/okhttp/okhttp3/-address/)
 
 Addresses specify a webserver (like `github.com`) and all of the **static** configuration necessary to connect to that server: the port number, HTTPS settings, and preferred network protocols (like HTTP/2 or SPDY).
 
-URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to [TCP slow start](http://www.igvita.com/2011/10/20/faster-web-vs-tcp-slow-start/)) and conserved battery. OkHttp uses a [ConnectionPool](http://square.github.io/okhttp/3.x/okhttp/okhttp3/ConnectionPool.html) that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY connections.
+URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to [TCP slow start](http://www.igvita.com/2011/10/20/faster-web-vs-tcp-slow-start/)) and conserved battery. OkHttp uses a [ConnectionPool](http://square.github.io/okhttp/api/okhttp/okhttp3/-connection-pool/) that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY connections.
 
-In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the [OkHttpClient](http://square.github.io/okhttp/3.x/okhttp/okhttp3/OkHttpClient.html).
+In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the [OkHttpClient](http://square.github.io/okhttp/api/okhttp/okhttp3/-ok-http-client/).
 
-#### [Routes](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Route.html)
+#### [Routes](http://square.github.io/okhttp/api/okhttp/okhttp3/-route/)
 
 Routes supply the **dynamic** information necessary to actually connect to a webserver. This is the specific IP address to attempt (as discovered by a DNS query), the exact proxy server to use (if a [ProxySelector](http://developer.android.com/reference/java/net/ProxySelector.html) is in use), and which version of TLS to negotiate (for HTTPS connections).
 
 There may be many routes for a single address. For example, a webserver that is hosted in multiple datacenters may yield multiple IP addresses in its DNS response.
 
-#### [Connections](http://square.github.io/okhttp/3.x/okhttp/okhttp3/Connection.html)
+#### [Connections](http://square.github.io/okhttp/api/okhttp/okhttp3/-connection/)
 
 When you request a URL with OkHttp, here's what it does:
 
diff --git a/docs/https.md b/docs/https.md
index 9843f2329d..7aad7b142d 100644
--- a/docs/https.md
+++ b/docs/https.md
@@ -6,9 +6,9 @@ OkHttp attempts to balance two competing concerns:
  * **Connectivity** to as many hosts as possible. That includes advanced hosts that run the latest versions of [boringssl](https://boringssl.googlesource.com/boringssl/) and less out of date hosts running older versions of [OpenSSL](https://www.openssl.org/).
  * **Security** of the connection. This includes verification of the remote webserver with certificates and the privacy of data exchanged with strong ciphers.
 
-When negotiating a connection to an HTTPS server, OkHttp needs to know which [TLS versions](http://square.github.io/okhttp/3.x/okhttp/okhttp3/TlsVersion.html) and [cipher suites](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CipherSuite.html) to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites.
+When negotiating a connection to an HTTPS server, OkHttp needs to know which [TLS versions](http://square.github.io/okhttp/api/okhttp/okhttp3/-tls-version/) and [cipher suites](http://square.github.io/okhttp/api/okhttp/okhttp3/-cipher-suite/) to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites.
 
-Specific security vs. connectivity decisions are implemented by [ConnectionSpec](http://square.github.io/okhttp/3.x/okhttp/okhttp3/ConnectionSpec.html). OkHttp includes four built-in connection specs:
+Specific security vs. connectivity decisions are implemented by [ConnectionSpec](http://square.github.io/okhttp/api/okhttp/okhttp3/-connection-spec/). OkHttp includes four built-in connection specs:
 
  * `RESTRICTED_TLS` is a secure configuration, intended to meet stricter compliance requirements.
  * `MODERN_TLS` is a secure configuration that connects to modern HTTPS servers.
@@ -47,7 +47,7 @@ OkHttpClient client = new OkHttpClient.Builder()
 
 By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the [2011 DigiNotar attack](http://www.computerworld.com/article/2510951/cybercrime-hacking/hackers-spied-on-300-000-iranians-using-fake-google-certificate.html). It also assumes your HTTPS servers’ certificates are signed by a certificate authority.
 
-Use [CertificatePinner](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CertificatePinner.html) to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team’s abilities to update their TLS certificates. **Do not use certificate pinning without the blessing of your server’s TLS administrator!**
+Use [CertificatePinner](http://square.github.io/okhttp/api/okhttp/okhttp3/-certificate-pinner/) to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team’s abilities to update their TLS certificates. **Do not use certificate pinning without the blessing of your server’s TLS administrator!**
 
 ```java
   public CertificatePinning() {
diff --git a/docs/index.md b/docs/index.md
deleted file mode 100644
index c872471b96..0000000000
--- a/docs/index.md
+++ /dev/null
@@ -1,152 +0,0 @@
-## An HTTP & HTTP/2 client for Android and Java applications
-
-# Overview
-
-HTTP is the way modern applications network. It’s how we exchange data &amp; media.
-Doing HTTP efficiently makes your stuff load faster and saves bandwidth.
-
-OkHttp is an HTTP client that’s efficient by default:
-
-- HTTP/2 support allows all requests to the same host to share a socket.
-- Connection pooling reduces request latency (if HTTP/2 isn’t available).
-- Transparent GZIP shrinks download sizes.
-- Response caching avoids the network completely for repeat requests.
-
-
-OkHttp perseveres when the network is troublesome: it will silently recover from
-common connection problems. If your service has multiple IP addresses OkHttp will
-attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6
-and for services hosted in redundant data centers. OkHttp supports modern TLS
-features (TLS 1.3, ALPN, certificate pinning). It can be configured to fall back for
-broad connectivity.
-
-Using OkHttp is easy. Its request/response API is designed with fluent builders and
-immutability. It supports both synchronous blocking calls and async calls with
-callbacks.
-
-OkHttp supports Android 5.0+ (API level 21+) and Java 8+.
-
-# Examples
-
-## Get a URL
-
-This program downloads a URL and prints its contents as a string. [Full source][get_example].
-
-```java
-OkHttpClient client = new OkHttpClient();
-
-String run(String url) throws IOException {
-  Request request = new Request.Builder()
-      .url(url)
-      .build();
-
-  try (Response response = client.newCall(request).execute()) {
-    return response.body().string();
-  }
-}
-```
-
-## Post to a Server
-
-This program posts data to a service. [Full source][post_example].
-
-```java
-public static final MediaType JSON
-    = MediaType.get("application/json; charset=utf-8");
-
-OkHttpClient client = new OkHttpClient();
-
-String post(String url, String json) throws IOException {
-  RequestBody body = RequestBody.create(JSON, json);
-  Request request = new Request.Builder()
-      .url(url)
-      .post(body)
-      .build();
-  try (Response response = client.newCall(request).execute()) {
-    return response.body().string();
-  }
-}
-```
-
-# Download
-
-<button data-md-color-primary="teal" href="https://search.maven.org/remote_content?g=com.squareup.okhttp3&a=okhttp&v=LATEST" class="dl">&darr;&nbsp;Latest&nbsp;JAR</button>
-
-You'll also need [Okio][okio], which OkHttp uses for fast I/O and resizable buffers. Download the
-[latest JAR][download_okio]. The source code to OkHttp, its samples, and this website is [available
-on GitHub][okhttp].
-
-## Maven
-
-```xml
-<dependency>
-  <groupId>com.squareup.okhttp3</groupId>
-  <artifactId>okhttp</artifactId>
-  <version>(insert latest version)</version>
-</dependency>
-```
-
-## Gradle
-
-```groovy
-implementation 'com.squareup.okhttp3:okhttp:(insert latest version)'
-```
-
-# Contributing
-
-If you would like to contribute code you can do so through GitHub by forking the repository and
-sending a pull request. When submitting code, please make every effort to follow existing
-conventions and style in order to keep the code as readable as possible. Please also make sure your
-code compiles by running `/gradlew check`.
-
-Some general advice
-
-- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential. It causes pain for developers who use OkHttp and sometimes runtime errors.
-- Favour a working external library if appropriate. There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs.
-- Get working code on a personal branch with tests before you submit a PR.
-- OkHttp is a small and light dependency. Don't introduce new dependencies or major new functionality.
-- OkHttp targets the intersection of RFC correct and widely implemented. Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled.
-
-
-Before your code can be accepted into the project you must also sign the [Individual Contributor License Agreement (CLA)][cla].
-
-# License
-
-```
-Copyright 2016 Square, Inc.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-```
-
-<div class="logo">
-<a href="https://squareup.com"><img src="images/logo-square.png" alt="Square, Inc."/></a>
-</div>
-
-<script type="text/javascript">
-  var _gaq = _gaq || [];
-  _gaq.push(['_setAccount', 'UA-40704740-2']);
-  _gaq.push(['_trackPageview']);
-
-  (function() {
-    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
-    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
-    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
-  })();
-</script>
-
-[get_example]:      https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/GetExample.java
-[post_example]:     https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/PostExample.java
-[download_okio]:    https://search.maven.org/remote_content?g=com.squareup.okio&a=okio&v=LATEST
-[okio]:             https://github.com/square/okio
-[okhttp]:           https://github.com/square/okhttp
-[cla]:              https://squ.re/sign-the-cla
diff --git a/docs/recipes.md b/docs/recipes.md
index 48f065817c..5cd0f44055 100644
--- a/docs/recipes.md
+++ b/docs/recipes.md
@@ -343,7 +343,7 @@ Response caching uses HTTP headers for all configuration. You can add request he
     System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));
   }
 ```
-To prevent a response from using the cache, use [`CacheControl.FORCE_NETWORK`](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CacheControl.html#FORCE_NETWORK). To prevent it from using the network, use [`CacheControl.FORCE_CACHE`](http://square.github.io/okhttp/3.x/okhttp/okhttp3/CacheControl.html#FORCE_CACHE). Be warned: if you use `FORCE_CACHE` and the response requires the network, OkHttp will return a `504 Unsatisfiable Request` response.
+To prevent a response from using the cache, use [`CacheControl.FORCE_NETWORK`](http://square.github.io/okhttp/api/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-n-e-t-w-o-r-k/). To prevent it from using the network, use [`CacheControl.FORCE_CACHE`](http://square.github.io/okhttp/api/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-c-a-c-h-e/). Be warned: if you use `FORCE_CACHE` and the response requires the network, OkHttp will return a `504 Unsatisfiable Request` response.
 
 #### [Canceling a Call](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java)
 
diff --git a/RELEASING.md b/docs/releasing.md
similarity index 100%
rename from RELEASING.md
rename to docs/releasing.md
diff --git a/docs/security.md b/docs/security.md
index 6ffb429066..eb0bfcad27 100644
--- a/docs/security.md
+++ b/docs/security.md
@@ -5,10 +5,9 @@ Security Policy
 
 | Version | Supported  | Notes          |
 | ------- | ---------- | -------------- |
-| 4.x     | ❌         | Not released.  |
+| 4.x     | ✅         |                |
 | 3.14.x  | ✅         |                |
-| 3.12.x  | ✅         | Android 2.3+ (API level 9+) and Java 7+.  Platforms may not support TLSv1.2. Until December 31, 2020  |
-| 2.7.x   | ❌         | Not supported. |
+| 3.12.x  | ✅         | Android 2.3+ (API level 9+) and Java 7+. Platforms may not support TLSv1.2. Until December 31, 2020  |
 
 
 ## Reporting a Vulnerability
diff --git a/mkdocs.yml b/mkdocs.yml
index d643e95247..7bc1d8a556 100644
--- a/mkdocs.yml
+++ b/mkdocs.yml
@@ -5,7 +5,7 @@ site_description: "An HTTP & HTTP/2 client for Android and Java applications"
 site_author: Square, Inc.
 remote_branch: gh-pages
 
-copyright: 'Copyright &copy; 2016 Square, Inc.'
+copyright: 'Copyright &copy; 2019 Square, Inc.'
 
 theme:
   name: 'material'
@@ -36,17 +36,13 @@ markdown_extensions:
 
 nav:
   - 'Calls': calls.md
-  - 'Concurrency': concurrency.md
   - 'Connections': connections.md
-  - 'Events': events.md
-  - 'Https': https.md
-  - 'Interceptors': interceptors.md
   - 'Recipes': recipes.md
-  - 'Security': security.md
-  - 'TLS Configuration History': tls_configuration_history.md
-  - 'Upgrading to OkHttp 4': upgrading_to_okhttp_4.md
+  - 'Interceptors': interceptors.md
+  - 'HTTPS': https.md
+  - 'Events': events.md
   - 'Works with OkHttp': works_with_okhttp.md
-  - 'Stack Overflow': https://stackoverflow.com/questions/tagged/okhttp?sort=active
+  - 'Stack Overflow ⏏': https://stackoverflow.com/questions/tagged/okhttp?sort=active
   - '4.x API':
     - 'okhttp': api/okhttp/okhttp3/index.md
     - 'dnsoverhttps': api/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/index.md
@@ -56,11 +52,14 @@ nav:
     - 'urlconnection': api/okhttp-urlconnection/okhttp3/index.md
     - 'mockwebserver': api/mockwebserver/okhttp3.mockwebserver/index.md
   - '3.x API':
-    - 'okhttp': https://square.github.io/okhttp/3.x/okhttp/
-    - 'dnsoverhttps': https://square.github.io/okhttp/3.x/okhttp-dnsoverhttps/
-    - 'logging-interceptor': https://square.github.io/okhttp/3.x/logging-interceptor/
-    - 'sse': https://square.github.io/okhttp/3.x/okhttp-sse/
-    - 'tls': https://square.github.io/okhttp/3.x/okhttp-tls/
-    - 'urlconnection': https://square.github.io/okhttp/3.x/okhttp-urlconnection/
-    - 'mockwebserver': https://square.github.io/okhttp/3.x/mockwebserver/
+    - 'okhttp ⏏': https://square.github.io/okhttp/3.x/okhttp/
+    - 'dnsoverhttps ⏏': https://square.github.io/okhttp/3.x/okhttp-dnsoverhttps/
+    - 'logging-interceptor ⏏': https://square.github.io/okhttp/3.x/logging-interceptor/
+    - 'sse ⏏': https://square.github.io/okhttp/3.x/okhttp-sse/
+    - 'tls ⏏': https://square.github.io/okhttp/3.x/okhttp-tls/
+    - 'urlconnection ⏏': https://square.github.io/okhttp/3.x/okhttp-urlconnection/
+    - 'mockwebserver ⏏': https://square.github.io/okhttp/3.x/mockwebserver/
+  - 'Change Log': changelog.md
+  - 'Upgrading to OkHttp 4': upgrading_to_okhttp_4.md
+  - 'Contributing': contributing.md
 
diff --git a/okhttp-tls/README.md b/okhttp-tls/README.md
index 15fe886206..ecd6de0a11 100644
--- a/okhttp-tls/README.md
+++ b/okhttp-tls/README.md
@@ -230,7 +230,7 @@ Download
 implementation("com.squareup.okhttp3:okhttp-tls:3.14.2")
 ```
 
- [held_certificate]: http://square.github.io/okhttp/3.x/okhttp-tls/okhttp3/tls/HeldCertificate.html
- [held_certificate_builder]: http://square.github.io/okhttp/3.x/okhttp-tls/okhttp3/tls/HeldCertificate.Builder.html
- [handshake_certificates]: http://square.github.io/okhttp/3.x/okhttp-tls/okhttp3/tls/HandshakeCertificates.html
- [handshake_certificates_builder]: http://square.github.io/okhttp/3.x/okhttp-tls/okhttp3/tls/HandshakeCertificates.Builder.html
+ [held_certificate]: http://square.github.io/okhttp/api/okhttp-tls/okhttp3.tls/-held-certificate/
+ [held_certificate_builder]: http://square.github.io/okhttp/api/okhttp-tls/okhttp3.tls/-held-certificate/-builder/
+ [handshake_certificates]: http://square.github.io/okhttp/api/okhttp-tls/okhttp3.tls/-handshake-certificates/
+ [handshake_certificates_builder]: http://square.github.io/okhttp/api/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/
diff --git a/okhttp/src/main/java/okhttp3/HttpUrl.kt b/okhttp/src/main/java/okhttp3/HttpUrl.kt
index 92ff49a765..b415928d83 100644
--- a/okhttp/src/main/java/okhttp3/HttpUrl.kt
+++ b/okhttp/src/main/java/okhttp3/HttpUrl.kt
@@ -293,26 +293,24 @@ class HttpUrl internal constructor(
   /**
    * The decoded username, or an empty string if none is present.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`username()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`""`</td></tr>
-   * <tr><td>`http://username@host/`</td><td>`"username"`</td></tr>
-   * <tr><td>`http://username:password@host/`</td><td>`"username"`</td></tr>
-   * <tr><td>`http://a%20b:c%20d@host/`</td><td>`"a b"`</td></tr>
-   * </table>
+   * | URL                              | `username()` |
+   * | :------------------------------- | :----------- |
+   * | `http://host/`                   | `""`         |
+   * | `http://username@host/`          | `"username"` |
+   * | `http://username:password@host/` | `"username"` |
+   * | `http://a%20b:c%20d@host/`       | `"a b"`      |
    */
   @get:JvmName("username") val username: String,
 
   /**
    * Returns the decoded password, or an empty string if none is present.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`password()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`""`</td></tr>
-   * <tr><td>`http://username@host/`</td><td>`""`</td></tr>
-   * <tr><td>`http://username:password@host/`</td><td>`"password"`</td></tr>
-   * <tr><td>`http://a%20b:c%20d@host/`</td><td>`"c d"`</td></tr>
-   * </table>
+   * | URL                              | `password()` |
+   * | :------------------------------- | :----------- |
+   * | `http://host/`                   | `""`         |
+   * | `http://username@host/`          | `""`         |
+   * | `http://username:password@host/` | `"password"` |
+   * | `http://a%20b:c%20d@host/`       | `"c d"`      |
    */
   @get:JvmName("password") val password: String,
 
@@ -327,13 +325,12 @@ class HttpUrl internal constructor(
    *
    *  * An encoded IDN, like `xn--n3h.net`.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`host()`</th></tr>
-   * <tr><td>`http://android.com/`</td><td>`"android.com"`</td></tr>
-   * <tr><td>`http://127.0.0.1/`</td><td>`"127.0.0.1"`</td></tr>
-   * <tr><td>`http://[::1]/`</td><td>`"::1"`</td></tr>
-   * <tr><td>`http://xn--n3h.net/`</td><td>`"xn--n3h.net"`</td></tr>
-   * </table>
+   * | URL                   | `host()`        |
+   * | :-------------------- | :-------------- |
+   * | `http://android.com/` | `"android.com"` |
+   * | `http://127.0.0.1/`   | `"127.0.0.1"`   |
+   * | `http://[::1]/`       | `"::1"`         |
+   * | `http://xn--n3h.net/` | `"xn--n3h.net"` |
    */
   @get:JvmName("host") val host: String,
 
@@ -342,12 +339,11 @@ class HttpUrl internal constructor(
    * For example, this returns 8443 for `https://square.com:8443/` and 443 for
    * `https://square.com/`. The result is in `[1..65535]`.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`port()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`80`</td></tr>
-   * <tr><td>`http://host:8000/`</td><td>`8000`</td></tr>
-   * <tr><td>`https://host/`</td><td>`443`</td></tr>
-   * </table>
+   * | URL                 | `port()` |
+   * | :------------------ | :------- |
+   * | `http://host/`      | `80`     |
+   * | `http://host:8000/` | `8000`   |
+   * | `https://host/`     | `443`    |
    */
   @get:JvmName("port") val port: Int,
 
@@ -355,12 +351,11 @@ class HttpUrl internal constructor(
    * A list of path segments like `["a", "b", "c"]` for the URL `http://host/a/b/c`. This list is
    * never empty though it may contain a single empty string.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`pathSegments()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`[""]`</td></tr>
-   * <tr><td>`http://host/a/b/c"`</td><td>`["a", "b", "c"]`</td></tr>
-   * <tr><td>`http://host/a/b%20c/d"`</td><td>`["a", "b c", "d"]`</td></tr>
-   * </table>
+   * | URL                      | `pathSegments()`    |
+   * | :----------------------- | :------------------ |
+   * | `http://host/`           | `[""]`              |
+   * | `http://host/a/b/c"`     | `["a", "b", "c"]`   |
+   * | `http://host/a/b%20c/d"` | `["a", "b c", "d"]` |
    */
   @get:JvmName("pathSegments") val pathSegments: List<String>,
 
@@ -375,13 +370,12 @@ class HttpUrl internal constructor(
    * This URL's fragment, like `"abc"` for `http://host/#abc`. This is null if the URL has no
    * fragment.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`fragment()`</th></tr>
-   * <tr><td>`http://host/`</td><td>null</td></tr>
-   * <tr><td>`http://host/#`</td><td>`""`</td></tr>
-   * <tr><td>`http://host/#abc`</td><td>`"abc"`</td></tr>
-   * <tr><td>`http://host/#abc|def`</td><td>`"abc|def"`</td></tr>
-   * </table>
+   * | URL                    | `fragment()` |
+   * | :--------------------- | :----------- |
+   * | `http://host/`         | null         |
+   * | `http://host/#`        | `""`         |
+   * | `http://host/#abc`     | `"abc"`      |
+   * | `http://host/#abc|def` | `"abc|def"`  |
    */
   @get:JvmName("fragment") val fragment: String?,
 
@@ -430,13 +424,12 @@ class HttpUrl internal constructor(
   /**
    * The username, or an empty string if none is set.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`encodedUsername()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`""`</td></tr>
-   * <tr><td>`http://username@host/`</td><td>`"username"`</td></tr>
-   * <tr><td>`http://username:password@host/`</td><td>`"username"`</td></tr>
-   * <tr><td>`http://a%20b:c%20d@host/`</td><td>`"a%20b"`</td></tr>
-   * </table>
+   * | URL                              | `encodedUsername()` |
+   * | :------------------------------- | :------------------ |
+   * | `http://host/`                   | `""`                |
+   * | `http://username@host/`          | `"username"`        |
+   * | `http://username:password@host/` | `"username"`        |
+   * | `http://a%20b:c%20d@host/`       | `"a%20b"`           |
    */
   @get:JvmName("encodedUsername") val encodedUsername: String
     get() {
@@ -449,13 +442,12 @@ class HttpUrl internal constructor(
   /**
    * The password, or an empty string if none is set.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`encodedPassword()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`""`</td></tr>
-   * <tr><td>`http://username@host/`</td><td>`""`</td></tr>
-   * <tr><td>`http://username:password@host/`</td><td>`"password"`</td></tr>
-   * <tr><td>`http://a%20b:c%20d@host/`</td><td>`"c%20d"`</td></tr>
-   * </table>
+   * | URL                              | `encodedPassword()` |
+   * | :--------------------------------| :------------------ |
+   * | `http://host/`                   | `""`                |
+   * | `http://username@host/`          | `""`                |
+   * | `http://username:password@host/` | `"password"`        |
+   * | `http://a%20b:c%20d@host/`       | `"c%20d"`           |
    */
   @get:JvmName("encodedPassword") val encodedPassword: String
     get() {
@@ -469,12 +461,11 @@ class HttpUrl internal constructor(
    * The number of segments in this URL's path. This is also the number of slashes in this URL's
    * path, like 3 in `http://host/a/b/c`. This is always at least 1.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`pathSize()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`1`</td></tr>
-   * <tr><td>`http://host/a/b/c`</td><td>`3`</td></tr>
-   * <tr><td>`http://host/a/b/c/`</td><td>`4`</td></tr>
-   * </table>
+   * | URL                  | `pathSize()` |
+   * | :------------------- | :----------- |
+   * | `http://host/`       | `1`          |
+   * | `http://host/a/b/c`  | `3`          |
+   * | `http://host/a/b/c/` | `4`          |
    */
   @get:JvmName("pathSize") val pathSize: Int get() = pathSegments.size
 
@@ -482,12 +473,11 @@ class HttpUrl internal constructor(
    * The entire path of this URL encoded for use in HTTP resource resolution. The returned path will
    * start with `"/"`.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`encodedPath()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`"/"`</td></tr>
-   * <tr><td>`http://host/a/b/c`</td><td>`"/a/b/c"`</td></tr>
-   * <tr><td>`http://host/a/b%20c/d`</td><td>`"/a/b%20c/d"`</td></tr>
-   * </table>
+   * | URL                     | `encodedPath()` |
+   * | :---------------------- | :-------------- |
+   * | `http://host/`          | `"/"`           |
+   * | `http://host/a/b/c`     | `"/a/b/c"`      |
+   * | `http://host/a/b%20c/d` | `"/a/b%20c/d"`  |
    */
   @get:JvmName("encodedPath") val encodedPath: String
     get() {
@@ -500,12 +490,11 @@ class HttpUrl internal constructor(
    * A list of encoded path segments like `["a", "b", "c"]` for the URL `http://host/a/b/c`. This
    * list is never empty though it may contain a single empty string.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`encodedPathSegments()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`[""]`</td></tr>
-   * <tr><td>`http://host/a/b/c`</td><td>`["a", "b", "c"]`</td></tr>
-   * <tr><td>`http://host/a/b%20c/d`</td><td>`["a", "b%20c", "d"]`</td></tr>
-   * </table>
+   * | URL                     | `encodedPathSegments()` |
+   * | :---------------------- | :---------------------- |
+   * | `http://host/`          | `[""]`                  |
+   * | `http://host/a/b/c`     | `["a", "b", "c"]`       |
+   * | `http://host/a/b%20c/d` | `["a", "b%20c", "d"]`   |
    */
   @get:JvmName("encodedPathSegments") val encodedPathSegments: List<String>
     get() {
@@ -526,14 +515,13 @@ class HttpUrl internal constructor(
    * The query of this URL, encoded for use in HTTP resource resolution. This string may be null
    * (for URLs with no query), empty (for URLs with an empty query) or non-empty (all other URLs).
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`encodedQuery()`</th></tr>
-   * <tr><td>`http://host/`</td><td>null</td></tr>
-   * <tr><td>`http://host/?`</td><td>`""`</td></tr>
-   * <tr><td>`http://host/?a=apple&k=key+lime`</td><td>`"a=apple&k=key+lime"`</td></tr>
-   * <tr><td>`http://host/?a=apple&a=apricot`</td><td>`"a=apple&a=apricot"`</td></tr>
-   * <tr><td>`http://host/?a=apple&b`</td><td>`"a=apple&b"`</td></tr>
-   * </table>
+   * | URL                               | `encodedQuery()`       |
+   * | :-------------------------------- | :--------------------- |
+   * | `http://host/`                    | null                   |
+   * | `http://host/?`                   | `""`                   |
+   * | `http://host/?a=apple&k=key+lime` | `"a=apple&k=key+lime"` |
+   * | `http://host/?a=apple&a=apricot`  | `"a=apple&a=apricot"`  |
+   * | `http://host/?a=apple&b`          | `"a=apple&b"`          |
    */
   @get:JvmName("encodedQuery") val encodedQuery: String?
     get() {
@@ -548,15 +536,13 @@ class HttpUrl internal constructor(
    * [queryParameterName] and [queryParameterValue] because these methods offer direct access to
    * individual query parameters.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`query()`</th></tr>
-   * <tr><td>`http://host/`</td><td>null</td></tr>
-   * <tr><td>`http://host/?`</td><td>`""`</td></tr>
-   * <tr><td>`http://host/?a=apple&k=key+lime`</td><td>`"a=apple&k=key
-   * lime"`</td></tr>
-   * <tr><td>`http://host/?a=apple&a=apricot`</td><td>`"a=apple&a=apricot"`</td></tr>
-   * <tr><td>`http://host/?a=apple&b`</td><td>`"a=apple&b"`</td></tr>
-   * </table>
+   * | URL                               | `query()`              |
+   * | :-------------------------------- | :--------------------- |
+   * | `http://host/`                    | null                   |
+   * | `http://host/?`                   | `""`                   |
+   * | `http://host/?a=apple&k=key+lime` | `"a=apple&k=key lime"` |
+   * | `http://host/?a=apple&a=apricot`  | `"a=apple&a=apricot"`  |
+   * | `http://host/?a=apple&b`          | `"a=apple&b"`          |
    */
   @get:JvmName("query") val query: String?
     get() {
@@ -571,14 +557,13 @@ class HttpUrl internal constructor(
    * URL has no query this is 0. Otherwise it is one more than the number of `"&"` separators in the
    * query.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`querySize()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`0`</td></tr>
-   * <tr><td>`http://host/?`</td><td>`1`</td></tr>
-   * <tr><td>`http://host/?a=apple&k=key+lime`</td><td>`2`</td></tr>
-   * <tr><td>`http://host/?a=apple&a=apricot`</td><td>`2`</td></tr>
-   * <tr><td>`http://host/?a=apple&b`</td><td>`2`</td></tr>
-   * </table>
+   * | URL                               | `querySize()` |
+   * | :-------------------------------- | :------------ |
+   * | `http://host/`                    | `0`           |
+   * | `http://host/?`                   | `1`           |
+   * | `http://host/?a=apple&k=key+lime` | `2`           |
+   * | `http://host/?a=apple&a=apricot`  | `2`           |
+   * | `http://host/?a=apple&b`          | `2`           |
    */
   @get:JvmName("querySize") val querySize: Int
     get() {
@@ -589,14 +574,13 @@ class HttpUrl internal constructor(
    * The first query parameter named `name` decoded using UTF-8, or null if there is no such query
    * parameter.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`queryParameter("a")`</th></tr>
-   * <tr><td>`http://host/`</td><td>null</td></tr>
-   * <tr><td>`http://host/?`</td><td>null</td></tr>
-   * <tr><td>`http://host/?a=apple&k=key+lime`</td><td>`"apple"`</td></tr>
-   * <tr><td>`http://host/?a=apple&a=apricot`</td><td>`"apple"`</td></tr>
-   * <tr><td>`http://host/?a=apple&b`</td><td>`"apple"`</td></tr>
-   * </table>
+   * | URL                               | `queryParameter("a")` |
+   * | :-------------------------------- | :-------------------- |
+   * | `http://host/`                    | null                  |
+   * | `http://host/?`                   | null                  |
+   * | `http://host/?a=apple&k=key+lime` | `"apple"`             |
+   * | `http://host/?a=apple&a=apricot`  | `"apple"`             |
+   * | `http://host/?a=apple&b`          | `"apple"`             |
    */
   fun queryParameter(name: String): String? {
     if (queryNamesAndValues == null) return null
@@ -612,14 +596,13 @@ class HttpUrl internal constructor(
    * The distinct query parameter names in this URL, like `["a", "b"]` for
    * `http://host/?a=apple&b=banana`. If this URL has no query this is the empty set.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`queryParameterNames()`</th></tr>
-   * <tr><td>`http://host/`</td><td>`[]`</td></tr>
-   * <tr><td>`http://host/?`</td><td>`[""]`</td></tr>
-   * <tr><td>`http://host/?a=apple&k=key+lime`</td><td>`["a", "k"]`</td></tr>
-   * <tr><td>`http://host/?a=apple&a=apricot`</td><td>`["a"]`</td></tr>
-   * <tr><td>`http://host/?a=apple&b`</td><td>`["a", "b"]`</td></tr>
-   * </table>
+   * | URL                               | `queryParameterNames()` |
+   * | :-------------------------------- | :---------------------- |
+   * | `http://host/`                    | `[]`                    |
+   * | `http://host/?`                   | `[""]`                  |
+   * | `http://host/?a=apple&k=key+lime` | `["a", "k"]`            |
+   * | `http://host/?a=apple&a=apricot`  | `["a"]`                 |
+   * | `http://host/?a=apple&b`          | `["a", "b"]`            |
    */
   @get:JvmName("queryParameterNames") val queryParameterNames: Set<String>
     get() {
@@ -636,14 +619,13 @@ class HttpUrl internal constructor(
    * URL. For example this returns `["banana"]` for `queryParameterValue("b")` on
    * `http://host/?a=apple&b=banana`.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`queryParameterValues("a")`</th><th>`queryParameterValues("b")`</th></tr>
-   * <tr><td>`http://host/`</td><td>`[]`</td><td>`[]`</td></tr>
-   * <tr><td>`http://host/?`</td><td>`[]`</td><td>`[]`</td></tr>
-   * <tr><td>`http://host/?a=apple&k=key+lime`</td><td>`["apple"]`</td><td>`[]`</td></tr>
-   * <tr><td>`http://host/?a=apple&a=apricot`</td><td>`["apple", "apricot"]`</td><td>`[]`</td></tr>
-   * <tr><td>`http://host/?a=apple&b`</td><td>`["apple"]`</td><td>`[null]`</td></tr>
-   * </table>
+   * | URL                               | `queryParameterValues("a")` | `queryParameterValues("b")` |
+   * | :-------------------------------- | :-------------------------- | :-------------------------- |
+   * | `http://host/`                    | `[]`                        | `[]`                        |
+   * | `http://host/?`                   | `[]`                        | `[]`                        |
+   * | `http://host/?a=apple&k=key+lime` | `["apple"]`                 | `[]`                        |
+   * | `http://host/?a=apple&a=apricot`  | `["apple", "apricot"]`      | `[]`                        |
+   * | `http://host/?a=apple&b`          | `["apple"]`                 | `[null]`                    |
    */
   fun queryParameterValues(name: String): List<String?> {
     if (queryNamesAndValues == null) return emptyList()
@@ -661,14 +643,13 @@ class HttpUrl internal constructor(
    * for `queryParameterName(0)` on `http://host/?a=apple&b=banana`. This throws if
    * `index` is not less than the [query size][querySize].
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`queryParameterName(0)`</th><th>`queryParameterName(1)`</th></tr>
-   * <tr><td>`http://host/`</td><td>exception</td><td>exception</td></tr>
-   * <tr><td>`http://host/?`</td><td>`""`</td><td>exception</td></tr>
-   * <tr><td>`http://host/?a=apple&k=key+lime`</td><td>`"a"`</td><td>`"k"`</td></tr>
-   * <tr><td>`http://host/?a=apple&a=apricot`</td><td>`"a"`</td><td>`"a"`</td></tr>
-   * <tr><td>`http://host/?a=apple&b`</td><td>`"a"`</td><td>`"b"`</td></tr>
-   * </table>
+   * | URL                               | `queryParameterName(0)` | `queryParameterName(1)` |
+   * | :-------------------------------- | :---------------------- | :---------------------- |
+   * | `http://host/`                    | exception               | exception               |
+   * | `http://host/?`                   | `""`                    | exception               |
+   * | `http://host/?a=apple&k=key+lime` | `"a"`                   | `"k"`                   |
+   * | `http://host/?a=apple&a=apricot`  | `"a"`                   | `"a"`                   |
+   * | `http://host/?a=apple&b`          | `"a"`                   | `"b"`                   |
    */
   fun queryParameterName(index: Int): String {
     if (queryNamesAndValues == null) throw IndexOutOfBoundsException()
@@ -680,14 +661,13 @@ class HttpUrl internal constructor(
    * `queryParameterName(0)` on `http://host/?a=apple&b=banana`. This throws if `index` is not less
    * than the [query size][querySize].
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`queryParameterValue(0)`</th><th>`queryParameterValue(1)`</th></tr>
-   * <tr><td>`http://host/`</td><td>exception</td><td>exception</td></tr>
-   * <tr><td>`http://host/?`</td><td>null</td><td>exception</td></tr>
-   * <tr><td>`http://host/?a=apple&k=key+lime`</td><td>`"apple"`</td><td>`"key lime"`</td></tr>
-   * <tr><td>`http://host/?a=apple&a=apricot`</td><td>`"apple"`</td><td>`"apricot"`</td></tr>
-   * <tr><td>`http://host/?a=apple&b`</td><td>`"apple"`</td><td>null</td></tr>
-   * </table>
+   * | URL                               | `queryParameterValue(0)` | `queryParameterValue(1)` |
+   * | :-------------------------------- | :----------------------- | :----------------------- |
+   * | `http://host/`                    | exception                | exception                |
+   * | `http://host/?`                   | null                     | exception                |
+   * | `http://host/?a=apple&k=key+lime` | `"apple"`                | `"key lime"`             |
+   * | `http://host/?a=apple&a=apricot`  | `"apple"`                | `"apricot"`              |
+   * | `http://host/?a=apple&b`          | `"apple"`                | null                     |
    */
   fun queryParameterValue(index: Int): String? {
     if (queryNamesAndValues == null) throw IndexOutOfBoundsException()
@@ -698,13 +678,12 @@ class HttpUrl internal constructor(
    * This URL's encoded fragment, like `"abc"` for `http://host/#abc`. This is null if the URL has
    * no fragment.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`encodedFragment()`</th></tr>
-   * <tr><td>`http://host/`</td><td>null</td></tr>
-   * <tr><td>`http://host/#`</td><td>`""`</td></tr>
-   * <tr><td>`http://host/#abc`</td><td>`"abc"`</td></tr>
-   * <tr><td>`http://host/#abc|def`</td><td>`"abc|def"`</td></tr>
-   * </table>
+   * | URL                    | `encodedFragment()` |
+   * | :--------------------- | :------------------ |
+   * | `http://host/`         | null                |
+   * | `http://host/#`        | `""`                |
+   * | `http://host/#abc`     | `"abc"`             |
+   * | `http://host/#abc|def` | `"abc|def"`         |
    */
   @get:JvmName("encodedFragment") val encodedFragment: String?
     get() {
@@ -778,15 +757,14 @@ class HttpUrl internal constructor(
    * In general this method **should not** be used to test whether a domain is valid or routable.
    * Instead, DNS is the recommended source for that information.
    *
-   * <table summary="">
-   * <tr><th>URL</th><th>`topPrivateDomain()`</th></tr>
-   * <tr><td>`http://google.com`</td><td>`"google.com"`</td></tr>
-   * <tr><td>`http://adwords.google.co.uk`</td><td>`"google.co.uk"`</td></tr>
-   * <tr><td>`http://square`</td><td>null</td></tr>
-   * <tr><td>`http://co.uk`</td><td>null</td></tr>
-   * <tr><td>`http://localhost`</td><td>null</td></tr>
-   * <tr><td>`http://127.0.0.1`</td><td>null</td></tr>
-   * </table>
+   * | URL                           | `topPrivateDomain()` |
+   * | :---------------------------- | :------------------- |
+   * | `http://google.com`           | `"google.com"`       |
+   * | `http://adwords.google.co.uk` | `"google.co.uk"`     |
+   * | `http://square`               | null                 |
+   * | `http://co.uk`                | null                 |
+   * | `http://localhost`            | null                 |
+   * | `http://127.0.0.1`            | null                 |
    */
   fun topPrivateDomain(): String? {
     return if (host.canParseAsIpAddress()) {
