diff --git a/okhttp-hpacktests/README.md b/okhttp-hpacktests/README.md
deleted file mode 100644
index 6b85c9a000..0000000000
--- a/okhttp-hpacktests/README.md
+++ /dev/null
@@ -1,19 +0,0 @@
-OkHttp HPACK tests
-==================
-
-These tests use the [hpack-test-case][1] project to validate OkHttp's HPACK
-implementation.  The HPACK test cases are in a separate git submodule, so to
-initialize them, you must run:
-
-    git submodule init
-    git submodule update
-
-TODO
-----
-
- * Add maven goal to avoid manual call to git submodule init.
- * Make hpack-test-case update itself from git, and run new tests.
- * Add maven goal to generate stories and a pull request to hpack-test-case
-   to have others validate our output.
-
-[1]: https://github.com/http2jp/hpack-test-case 
diff --git a/okhttp-hpacktests/build.gradle b/okhttp-hpacktests/build.gradle
deleted file mode 100644
index cc38a49483..0000000000
--- a/okhttp-hpacktests/build.gradle
+++ /dev/null
@@ -1,9 +0,0 @@
-dependencies {
-  testImplementation deps.okio
-  testImplementation deps.moshi
-  testImplementation project(':okhttp')
-  testImplementation project(':okhttp-testing-support')
-  testImplementation project(':mockwebserver')
-  testImplementation deps.junit
-  testImplementation deps.assertj
-}
diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java
deleted file mode 100644
index 988db3f6b6..0000000000
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-///*
-// * Copyright (C) 2014 Square, Inc.
-// *
-// * Licensed under the Apache License, Version 2.0 (the "License");
-// * you may not use this file except in compliance with the License.
-// * You may obtain a copy of the License at
-// *
-// *      http://www.apache.org/licenses/LICENSE-2.0
-// *
-// * Unless required by applicable law or agreed to in writing, software
-// * distributed under the License is distributed on an "AS IS" BASIS,
-// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// * See the License for the specific language governing permissions and
-// * limitations under the License.
-// */
-//package okhttp3.internal.http2;
-//
-//import java.util.Collection;
-//import okhttp3.internal.http2.hpackjson.Story;
-//import org.junit.Assume;
-//import org.junit.Test;
-//import org.junit.runner.RunWith;
-//import org.junit.runners.Parameterized;
-//
-//import static okhttp3.internal.http2.hpackjson.HpackJsonUtil.storiesForCurrentDraft;
-//
-//@RunWith(Parameterized.class)
-//public class HpackDecodeInteropTest extends HpackDecodeTestBase {
-//
-//  public HpackDecodeInteropTest(Story story) {
-//    super(story);
-//  }
-//
-//  @Parameterized.Parameters(name = "{0}")
-//  public static Collection<Story[]> createStories() throws Exception {
-//    return createStories(storiesForCurrentDraft());
-//  }
-//
-//  @Test
-//  public void testGoodDecoderInterop() throws Exception {
-//    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);
-//
-//    testDecoder();
-//  }
-//}
diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java
deleted file mode 100644
index 763822dce9..0000000000
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java
+++ /dev/null
@@ -1,95 +0,0 @@
-///*
-// * Copyright (C) 2014 Square, Inc.
-// *
-// * Licensed under the Apache License, Version 2.0 (the "License");
-// * you may not use this file except in compliance with the License.
-// * You may obtain a copy of the License at
-// *
-// *      http://www.apache.org/licenses/LICENSE-2.0
-// *
-// * Unless required by applicable law or agreed to in writing, software
-// * distributed under the License is distributed on an "AS IS" BASIS,
-// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// * See the License for the specific language governing permissions and
-// * limitations under the License.
-// */
-//package okhttp3.internal.http2;
-//
-//import java.util.ArrayList;
-//import java.util.Collection;
-//import java.util.Collections;
-//import java.util.LinkedHashSet;
-//import java.util.List;
-//import okhttp3.internal.http2.hpackjson.Case;
-//import okhttp3.internal.http2.hpackjson.HpackJsonUtil;
-//import okhttp3.internal.http2.hpackjson.Story;
-//import okio.Buffer;
-//
-//import static okhttp3.internal.http2.hpackjson.Story.MISSING;
-//import static org.assertj.core.api.Assertions.assertThat;
-//
-///**
-// * Tests Hpack implementation using https://github.com/http2jp/hpack-test-case/
-// */
-//public class HpackDecodeTestBase {
-//
-//  /**
-//   * Reads all stories in the folders provided, asserts if no story found.
-//   */
-//  protected static Collection<Story[]> createStories(String[] interopTests)
-//      throws Exception {
-//    if (interopTests.length == 0) {
-//      return Collections.singletonList(new Story[] {MISSING});
-//    }
-//
-//    List<Story[]> result = new ArrayList<>();
-//    for (String interopTestName : interopTests) {
-//      List<Story> stories = HpackJsonUtil.readStories(interopTestName);
-//      for (Story story : stories) {
-//        result.add(new Story[] {story});
-//      }
-//    }
-//    return result;
-//  }
-//
-//  private final Buffer bytesIn = new Buffer();
-//  private final Hpack.Reader hpackReader = new Hpack.Reader(bytesIn, 4096);
-//
-//  private final Story story;
-//
-//  public HpackDecodeTestBase(Story story) {
-//    this.story = story;
-//  }
-//
-//  /**
-//   * Expects wire to be set for all cases, and compares the decoder's output to expected headers.
-//   */
-//  protected void testDecoder() throws Exception {
-//    testDecoder(story);
-//  }
-//
-//  protected void testDecoder(Story story) throws Exception {
-//    for (Case testCase : story.getCases()) {
-//      bytesIn.write(testCase.getWire());
-//      hpackReader.readHeaders();
-//      assertSetEquals(String.format("seqno=%d", testCase.getSeqno()), testCase.getHeaders(),
-//          hpackReader.getAndResetHeaderList());
-//    }
-//  }
-//
-//  /**
-//   * Checks if {@code expected} and {@code observed} are equal when viewed as a set and headers are
-//   * deduped.
-//   *
-//   * TODO: See if duped headers should be preserved on decode and verify.
-//   */
-//  private static void assertSetEquals(
-//      String message, List<Header> expected, List<Header> observed) {
-//    assertThat(new LinkedHashSet<>(observed)).overridingErrorMessage(message).isEqualTo(
-//        new LinkedHashSet<>(expected));
-//  }
-//
-//  protected Story getStory() {
-//    return story;
-//  }
-//}
diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java
deleted file mode 100644
index 00371f05ad..0000000000
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackRoundTripTest.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.http2;
-
-import java.util.Collection;
-import okhttp3.internal.http2.hpackjson.Case;
-import okhttp3.internal.http2.hpackjson.Story;
-import okio.Buffer;
-import org.junit.Assume;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-
-/**
- * Tests for round-tripping headers through hpack..
- */
-// TODO: update hpack-test-case with the output of our encoder.
-// This test will hide complementary bugs in the encoder and decoder,
-// We should test that the encoder is producing responses that are
-// d]
-@RunWith(Parameterized.class)
-public class HpackRoundTripTest extends HpackDecodeTestBase {
-
-  private static final String[] RAW_DATA = {"raw-data"};
-
-  @Parameterized.Parameters(name = "{0}")
-  public static Collection<Story[]> getStories() throws Exception {
-    return createStories(RAW_DATA);
-  }
-
-  private Buffer bytesOut = new Buffer();
-  private Hpack.Writer hpackWriter = new Hpack.Writer(bytesOut);
-
-  public HpackRoundTripTest(Story story) {
-    super(story);
-  }
-
-  @Test
-  public void testRoundTrip() throws Exception {
-    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);
-
-    Story story = getStory().clone();
-    // Mutate cases in base class.
-    for (Case caze : story.getCases()) {
-      hpackWriter.writeHeaders(caze.getHeaders());
-      caze.setWire(bytesOut.readByteString());
-    }
-
-    testDecoder(story);
-  }
-}
diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java
deleted file mode 100644
index f1685f3800..0000000000
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Case.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.http2.hpackjson;
-
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import okhttp3.internal.http2.Header;
-import okio.ByteString;
-
-/**
- * Representation of an individual case (set of headers and wire format). There are many cases for a
- * single story.  This class is used reflectively with Moshi to parse stories.
- */
-public class Case implements Cloneable {
-
-  private int seqno;
-  private String wire;
-  private List<Map<String, String>> headers;
-
-  public List<Header> getHeaders() {
-    List<Header> result = new ArrayList<>();
-    for (Map<String, String> inputHeader : headers) {
-      Map.Entry<String, String> entry = inputHeader.entrySet().iterator().next();
-      result.add(new Header(entry.getKey(), entry.getValue()));
-    }
-    return result;
-  }
-
-  public ByteString getWire() {
-    return ByteString.decodeHex(wire);
-  }
-
-  public int getSeqno() {
-    return seqno;
-  }
-
-  public void setWire(ByteString wire) {
-    this.wire = wire.hex();
-  }
-
-  @Override
-  protected Case clone() throws CloneNotSupportedException {
-    Case result = new Case();
-    result.seqno = seqno;
-    result.wire = wire;
-    result.headers = new ArrayList<>();
-    for (Map<String, String> header : headers) {
-      result.headers.add(new LinkedHashMap<String, String>(header));
-    }
-    return result;
-  }
-}
diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java
deleted file mode 100644
index 83c6d12462..0000000000
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java
+++ /dev/null
@@ -1,108 +0,0 @@
-///*
-// * Copyright (C) 2014 Square, Inc.
-// *
-// * Licensed under the Apache License, Version 2.0 (the "License");
-// * you may not use this file except in compliance with the License.
-// * You may obtain a copy of the License at
-// *
-// *      http://www.apache.org/licenses/LICENSE-2.0
-// *
-// * Unless required by applicable law or agreed to in writing, software
-// * distributed under the License is distributed on an "AS IS" BASIS,
-// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// * See the License for the specific language governing permissions and
-// * limitations under the License.
-// */
-//package okhttp3.internal.http2.hpackjson;
-//
-//import com.squareup.moshi.JsonAdapter;
-//import com.squareup.moshi.Moshi;
-//import java.io.File;
-//import java.io.IOException;
-//import java.io.InputStream;
-//import java.net.URISyntaxException;
-//import java.net.URL;
-//import java.util.ArrayList;
-//import java.util.Collections;
-//import java.util.List;
-//import okio.Okio;
-//
-//import static java.util.Arrays.asList;
-//import static okhttp3.internal.http2.hpackjson.Story.MISSING;
-//
-///**
-// * Utilities for reading HPACK tests.
-// */
-//public final class HpackJsonUtil {
-//  /** Earliest draft that is code-compatible with latest. */
-//  private static final int BASE_DRAFT = 9;
-//
-////  private static final String STORY_RESOURCE_FORMAT = "/hpack-test-case/%s/story_%02d.json";
-//
-//  private static final Moshi MOSHI = new Moshi.Builder().build();
-//  private static final JsonAdapter<Story> STORY_JSON_ADAPTER = MOSHI.adapter(Story.class);
-//
-//  private static Story readStory(InputStream jsonResource) throws IOException {
-//    return STORY_JSON_ADAPTER.fromJson(Okio.buffer(Okio.source(jsonResource)));
-//  }
-//
-//  private static Story readStory(File file) throws IOException {
-//    return STORY_JSON_ADAPTER.fromJson(Okio.buffer(Okio.source(file)));
-//  }
-//
-//  /** Iterate through the hpack-test-case resources, only picking stories for the current draft. */
-//  public static String[] storiesForCurrentDraft() throws URISyntaxException {
-//    URL resource = null;// HpackJsonUtil.class.getResource("/hpack-test-case");
-//    if (resource == null) {
-//      return new String[0];
-//    }
-//    File testCaseDirectory = new File(resource.toURI());
-//    List<String> storyNames = new ArrayList<>();
-//    for (File path : testCaseDirectory.listFiles()) {
-//      if (path.isDirectory() && asList(path.list()).contains("story_00.json")) {
-//        try {
-//          Story firstStory = readStory(new File(path, "story_00.json"));
-//          if (firstStory.getDraft() >= BASE_DRAFT) {
-//            storyNames.add(path.getName());
-//          }
-//        } catch (IOException ignored) {
-//          // Skip this path.
-//        }
-//      }
-//    }
-//    return storyNames.toArray(new String[storyNames.size()]);
-//  }
-//
-//  /**
-//   * Reads stories named "story_xx.json" from the folder provided.
-//   */
-//  public static List<Story> readStories(String testFolderName) throws Exception {
-//    List<Story> result = new ArrayList<>();
-//    int i = 0;
-//    while (true) { // break after last test.
-////      String storyResourceName = String.format(STORY_RESOURCE_FORMAT, testFolderName, i);
-//      InputStream storyInputStream = null;//HpackJsonUtil.class.getResourceAsStream(storyResourceName);
-//      if (storyInputStream == null) {
-//        break;
-//      }
-////      try {
-////        Story story = readStory(storyInputStream);
-////        story.setFileName(storyResourceName);
-////        result.add(story);
-////        i++;
-////      } finally {
-////        storyInputStream.close();
-////      }
-//    }
-//
-//    if (result.isEmpty()) {
-//      // missing files
-//      return Collections.singletonList(MISSING);
-//    }
-//
-//    return result;
-//  }
-//
-//  private HpackJsonUtil() {
-//  } // Utilities only.
-//}
diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Story.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Story.java
deleted file mode 100644
index 25a63a073b..0000000000
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/Story.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.http2.hpackjson;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Representation of one story, a set of request headers to encode or decode. This class is used
- * reflectively with Moshi to parse stories from files.
- */
-public class Story implements Cloneable {
-  public final static Story MISSING = new Story();
-
-  static {
-    MISSING.setFileName("missing");
-  }
-
-  private transient String fileName;
-  private List<Case> cases;
-  private int draft;
-  private String description;
-
-  /**
-   * The filename is only used in the toString representation.
-   */
-  void setFileName(String fileName) {
-    this.fileName = fileName;
-  }
-
-  public List<Case> getCases() {
-    return cases;
-  }
-
-  /** We only expect stories that match the draft we've implemented to pass. */
-  public int getDraft() {
-    return draft;
-  }
-
-  @Override
-  public Story clone() throws CloneNotSupportedException {
-    Story story = new Story();
-    story.fileName = this.fileName;
-    story.cases = new ArrayList<>();
-    for (Case caze : cases) {
-      story.cases.add(caze.clone());
-    }
-    story.draft = draft;
-    story.description = description;
-    return story;
-  }
-
-  @Override
-  public String toString() {
-    // Used as the test name.
-    return fileName;
-  }
-}
diff --git a/okhttp-hpacktests/src/test/resources/hpack-test-case b/okhttp-hpacktests/src/test/resources/hpack-test-case
deleted file mode 160000
index 0251074ca8..0000000000
--- a/okhttp-hpacktests/src/test/resources/hpack-test-case
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 0251074ca8d7673307b915c235688cb1d6b0a950
diff --git a/settings.gradle b/settings.gradle
index 8b742d82cb..0c126509a1 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -2,25 +2,12 @@ rootProject.name = 'okhttp-parent'
 
 include ':mockwebserver'
 
-if (properties.containsKey('android.injected.invoked.from.ide') ||
-        System.getenv('ANDROID_SDK_ROOT') != null) {
-  // Currently incompatible with Intellij, use with Android Studio and from CLI with explicit flag
-  include ':android-test'
-}
-
 include ':okcurl'
 include ':okhttp'
 include ':okhttp-brotli'
 include ':okhttp-dnsoverhttps'
-include ':okhttp-hpacktests'
 include ':okhttp-logging-interceptor'
 include ':okhttp-sse'
 include ':okhttp-testing-support'
 include ':okhttp-tls'
 include ':okhttp-urlconnection'
-include ':samples:crawler'
-include ':samples:guide'
-include ':samples:simple-client'
-include ':samples:slack'
-include ':samples:static-server'
-include ':samples:unixdomainsockets'
