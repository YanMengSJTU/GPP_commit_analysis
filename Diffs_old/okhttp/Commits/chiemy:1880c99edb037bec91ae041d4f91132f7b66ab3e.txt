diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
index 4ac101190a..1a799dc184 100644
--- a/okhttp/src/main/java/okhttp3/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -29,6 +29,7 @@
 import java.util.List;
 import java.util.NoSuchElementException;
 import javax.annotation.Nullable;
+
 import okhttp3.internal.Util;
 import okhttp3.internal.cache.CacheRequest;
 import okhttp3.internal.cache.CacheStrategy;
@@ -52,47 +53,47 @@
 /**
  * Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and
  * bandwidth.
- *<br>
- *    将 HTTP 和 HTTPS 响应数据缓存到文件系统中，可以重用这些数据，以便节省时间和带宽
+ * <br>
+ * 将 HTTP 和 HTTPS 响应数据缓存到文件系统中，可以重用这些数据，以便节省时间和带宽
  * <h3>Cache Optimization
  * <br>缓存优化
  * </h3>
- *
- *
+ * <p>
+ * <p>
  * <p>To measure cache effectiveness, this class tracks three statistics:
  * <br>
- *     此类通过三个指标评估缓存有效性：
+ * 此类通过三个指标评估缓存有效性：
  * <ul>
- *     <li><strong>{@linkplain #requestCount() Request Count:}</strong> the number of HTTP
- *         requests issued since this cache was created.
- *         <br> 自缓存创建，HTTP 请求发送次数
- *     <li><strong>{@linkplain #networkCount() Network Count:}</strong> the number of those
- *         requests that required network use.
- *         <br> 这些请求中使用网络的数量
- *     <li><strong>{@linkplain #hitCount() Hit Count:}</strong> the number of those requests
- *         whose responses were served by the cache.
- *         <br> 这些请求中使用缓存的数量
+ * <li><strong>{@linkplain #requestCount() Request Count:}</strong> the number of HTTP
+ * requests issued since this cache was created.
+ * <br> 自缓存创建，HTTP 请求发送次数
+ * <li><strong>{@linkplain #networkCount() Network Count:}</strong> the number of those
+ * requests that required network use.
+ * <br> 这些请求中使用网络的数量
+ * <li><strong>{@linkplain #hitCount() Hit Count:}</strong> the number of those requests
+ * whose responses were served by the cache.
+ * <br> 这些请求中使用缓存的数量
  * </ul>
- *
+ * <p>
  * Sometimes a request will result in a conditional cache hit. If the cache contains a stale copy of
  * the response, the client will issue a conditional {@code GET}. The server will then send either
  * the updated response if it has changed, or a short 'not modified' response if the client's copy
  * is still valid. Such responses increment both the network count and hit count.
- *
+ * <p>
  * <br> 有时请求会导致条件缓存命中。如果缓存包含旧的响应数据，客户端会发送一个条件的 GET 请求，如果内容有变化，
  * 服务端会返回新的数据，如果客户端的缓存依然有效，则返回 ‘not modified’ 的响应，此时，网络请求数和缓存命中数都会增加。
- *
+ * <p>
  * <p>The best way to improve the cache hit rate is by configuring the web server to return
  * cacheable responses. Although this client honors all <a
  * href="http://tools.ietf.org/html/rfc7234">HTTP/1.1 (RFC 7234)</a> cache headers, it doesn't cache
  * partial responses.
  * <br> 最好的提高缓存命中率的方法是，配置 web 服务返回可缓存的相应
  * （翻译的有问题，不明白）尽管客户端遵从所有 HTTP/1.1 (RFC 7234) 缓存头，部分请求也不会缓存
- *
+ * <p>
  * <h3>Force a Network Response
  * <br>强制网络请求
  * </h3>
- *
+ * <p>
  * <p>In some situations, such as after a user clicks a 'refresh' button, it may be necessary to
  * skip the cache, and fetch data directly from the server. To force a full refresh, add the {@code
  * no-cache} directive:
@@ -104,7 +105,7 @@
  *       .url("http://publicobject.com/helloworld.txt")
  *       .build();
  * }</pre>
- *
+ * <p>
  * If it is only necessary to force a cached response to be validated by the server, use the more
  * efficient {@code max-age=0} directive instead:
  * <pre>   {@code
@@ -116,14 +117,14 @@
  *       .url("http://publicobject.com/helloworld.txt")
  *       .build();
  * }</pre>
- *
+ * <p>
  * <h3>Force a Cache Response</h3>
- *
+ * <p>
  * <p>Sometimes you'll want to show resources if they are available immediately, but not otherwise.
  * This can be used so your application can show <i>something</i> while waiting for the latest data
  * to be downloaded. To restrict a request to locally-cached resources, add the {@code
  * only-if-cached} directive: <pre>   {@code
- *
+ * <p>
  *     Request request = new Request.Builder()
  *         .cacheControl(new CacheControl.Builder()
  *             .onlyIfCached()
@@ -140,7 +141,7 @@
  * This technique works even better in situations where a stale response is better than no response.
  * To permit stale cached responses, use the {@code max-stale} directive with the maximum staleness
  * in seconds: <pre>   {@code
- *
+ * <p>
  *   Request request = new Request.Builder()
  *       .cacheControl(new CacheControl.Builder()
  *           .maxStale(365, TimeUnit.DAYS)
@@ -148,642 +149,677 @@
  *       .url("http://publicobject.com/helloworld.txt")
  *       .build();
  * }</pre>
- *
+ * <p>
  * <p>The {@link CacheControl} class can configure request caching directives and parse response
  * caching directives. It even offers convenient constants {@link CacheControl#FORCE_NETWORK} and
  * {@link CacheControl#FORCE_CACHE} that address the use cases above.
  */
 public final class Cache implements Closeable, Flushable {
-  private static final int VERSION = 201105;
-  private static final int ENTRY_METADATA = 0;
-  private static final int ENTRY_BODY = 1;
-  private static final int ENTRY_COUNT = 2;
-
-  final InternalCache internalCache = new InternalCache() {
-    @Override public Response get(Request request) throws IOException {
-      return Cache.this.get(request);
-    }
+    private static final int VERSION = 201105;
+    private static final int ENTRY_METADATA = 0;
+    private static final int ENTRY_BODY = 1;
+    private static final int ENTRY_COUNT = 2;
+
+    final InternalCache internalCache = new InternalCache() {
+        @Override
+        public Response get(Request request) throws IOException {
+            return Cache.this.get(request);
+        }
 
-    @Override public CacheRequest put(Response response) throws IOException {
-      return Cache.this.put(response);
-    }
+        @Override
+        public CacheRequest put(Response response) throws IOException {
+            return Cache.this.put(response);
+        }
 
-    @Override public void remove(Request request) throws IOException {
-      Cache.this.remove(request);
-    }
+        @Override
+        public void remove(Request request) throws IOException {
+            Cache.this.remove(request);
+        }
 
-    @Override public void update(Response cached, Response network) {
-      Cache.this.update(cached, network);
-    }
+        @Override
+        public void update(Response cached, Response network) {
+            Cache.this.update(cached, network);
+        }
 
-    @Override public void trackConditionalCacheHit() {
-      Cache.this.trackConditionalCacheHit();
-    }
+        @Override
+        public void trackConditionalCacheHit() {
+            Cache.this.trackConditionalCacheHit();
+        }
 
-    @Override public void trackResponse(CacheStrategy cacheStrategy) {
-      Cache.this.trackResponse(cacheStrategy);
-    }
-  };
-
-  final DiskLruCache cache;
-
-  /* read and write statistics, all guarded by 'this' */
-  int writeSuccessCount;
-  int writeAbortCount;
-  private int networkCount;
-  private int hitCount;
-  private int requestCount;
-
-  public Cache(File directory, long maxSize) {
-    this(directory, maxSize, FileSystem.SYSTEM);
-  }
-
-  Cache(File directory, long maxSize, FileSystem fileSystem) {
-    this.cache = DiskLruCache.create(fileSystem, directory, VERSION, ENTRY_COUNT, maxSize);
-  }
-
-  public static String key(HttpUrl url) {
-    return ByteString.encodeUtf8(url.toString()).md5().hex();
-  }
-
-  @Nullable Response get(Request request) {
-    String key = key(request.url());
-    DiskLruCache.Snapshot snapshot;
-    Entry entry;
-    try {
-      snapshot = cache.get(key);
-      if (snapshot == null) {
-        return null;
-      }
-    } catch (IOException e) {
-      // Give up because the cache cannot be read.
-      return null;
-    }
+        @Override
+        public void trackResponse(CacheStrategy cacheStrategy) {
+            Cache.this.trackResponse(cacheStrategy);
+        }
+    };
 
-    try {
-      entry = new Entry(snapshot.getSource(ENTRY_METADATA));
-    } catch (IOException e) {
-      Util.closeQuietly(snapshot);
-      return null;
-    }
+    final DiskLruCache cache;
 
-    Response response = entry.response(snapshot);
+    /* read and write statistics, all guarded by 'this' */
+    int writeSuccessCount;
+    int writeAbortCount;
+    private int networkCount;
+    private int hitCount;
+    private int requestCount;
 
-    if (!entry.matches(request, response)) {
-      Util.closeQuietly(response.body());
-      return null;
+    public Cache(File directory, long maxSize) {
+        this(directory, maxSize, FileSystem.SYSTEM);
     }
 
-    return response;
-  }
-
-  @Nullable CacheRequest put(Response response) {
-    String requestMethod = response.request().method();
-
-    if (HttpMethod.invalidatesCache(response.request().method())) {
-      try {
-        remove(response.request());
-      } catch (IOException ignored) {
-        // The cache cannot be written.
-      }
-      return null;
-    }
-    if (!requestMethod.equals("GET")) {
-      // Don't cache non-GET responses. We're technically allowed to cache
-      // HEAD requests and some POST requests, but the complexity of doing
-      // so is high and the benefit is low.
-      return null;
+    Cache(File directory, long maxSize, FileSystem fileSystem) {
+        this.cache = DiskLruCache.create(fileSystem, directory, VERSION, ENTRY_COUNT, maxSize);
     }
 
-    if (HttpHeaders.hasVaryAll(response)) {
-      return null;
+    public static String key(HttpUrl url) {
+        return ByteString.encodeUtf8(url.toString()).md5().hex();
     }
 
-    Entry entry = new Entry(response);
-    DiskLruCache.Editor editor = null;
-    try {
-      editor = cache.edit(key(response.request().url()));
-      if (editor == null) {
-        return null;
-      }
-      entry.writeTo(editor);
-      return new CacheRequestImpl(editor);
-    } catch (IOException e) {
-      abortQuietly(editor);
-      return null;
-    }
-  }
-
-  void remove(Request request) throws IOException {
-    cache.remove(key(request.url()));
-  }
-
-  void update(Response cached, Response network) {
-    Entry entry = new Entry(network);
-    DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;
-    DiskLruCache.Editor editor = null;
-    try {
-      editor = snapshot.edit(); // Returns null if snapshot is not current.
-      if (editor != null) {
-        entry.writeTo(editor);
-        editor.commit();
-      }
-    } catch (IOException e) {
-      abortQuietly(editor);
-    }
-  }
-
-  private void abortQuietly(@Nullable DiskLruCache.Editor editor) {
-    // Give up because the cache cannot be written.
-    try {
-      if (editor != null) {
-        editor.abort();
-      }
-    } catch (IOException ignored) {
-    }
-  }
-
-  /**
-   * Initialize the cache. This will include reading the journal files from the storage and building
-   * up the necessary in-memory cache information.
-   *
-   * <p>The initialization time may vary depending on the journal file size and the current actual
-   * cache size. The application needs to be aware of calling this function during the
-   * initialization phase and preferably in a background worker thread.
-   *
-   * <p>Note that if the application chooses to not call this method to initialize the cache. By
-   * default, the okhttp will perform lazy initialization upon the first usage of the cache.
-   */
-  public void initialize() throws IOException {
-    cache.initialize();
-  }
-
-  /**
-   * Closes the cache and deletes all of its stored values. This will delete all files in the cache
-   * directory including files that weren't created by the cache.
-   */
-  public void delete() throws IOException {
-    cache.delete();
-  }
-
-  /**
-   * Deletes all values stored in the cache. In-flight writes to the cache will complete normally,
-   * but the corresponding responses will not be stored.
-   */
-  public void evictAll() throws IOException {
-    cache.evictAll();
-  }
-
-  /**
-   * Returns an iterator over the URLs in this cache. This iterator doesn't throw {@code
-   * ConcurrentModificationException}, but if new responses are added while iterating, their URLs
-   * will not be returned. If existing responses are evicted during iteration, they will be absent
-   * (unless they were already returned).
-   *
-   * <p>The iterator supports {@linkplain Iterator#remove}. Removing a URL from the iterator evicts
-   * the corresponding response from the cache. Use this to evict selected responses.
-   */
-  public Iterator<String> urls() throws IOException {
-    return new Iterator<String>() {
-      final Iterator<DiskLruCache.Snapshot> delegate = cache.snapshots();
-
-      @Nullable String nextUrl;
-      boolean canRemove;
-
-      @Override public boolean hasNext() {
-        if (nextUrl != null) return true;
-
-        canRemove = false; // Prevent delegate.remove() on the wrong item!
-        while (delegate.hasNext()) {
-          DiskLruCache.Snapshot snapshot = delegate.next();
-          try {
-            BufferedSource metadata = Okio.buffer(snapshot.getSource(ENTRY_METADATA));
-            nextUrl = metadata.readUtf8LineStrict();
-            return true;
-          } catch (IOException ignored) {
-            // We couldn't read the metadata for this snapshot; possibly because the host filesystem
-            // has disappeared! Skip it.
-          } finally {
-            snapshot.close();
-          }
-        }
-
-        return false;
-      }
-
-      @Override public String next() {
-        if (!hasNext()) throw new NoSuchElementException();
-        String result = nextUrl;
-        nextUrl = null;
-        canRemove = true;
-        return result;
-      }
-
-      @Override public void remove() {
-        if (!canRemove) throw new IllegalStateException("remove() before next()");
-        delegate.remove();
-      }
-    };
-  }
+    @Nullable
+    Response get(Request request) {
+        String key = key(request.url());
+        DiskLruCache.Snapshot snapshot;
+        Entry entry;
+        try {
+            snapshot = cache.get(key);
+            if (snapshot == null) {
+                return null;
+            }
+        } catch (IOException e) {
+            // Give up because the cache cannot be read.
+            return null;
+        }
 
-  public synchronized int writeAbortCount() {
-    return writeAbortCount;
-  }
+        try {
+            entry = new Entry(snapshot.getSource(ENTRY_METADATA));
+        } catch (IOException e) {
+            Util.closeQuietly(snapshot);
+            return null;
+        }
 
-  public synchronized int writeSuccessCount() {
-    return writeSuccessCount;
-  }
+        Response response = entry.response(snapshot);
 
-  public long size() throws IOException {
-    return cache.size();
-  }
+        if (!entry.matches(request, response)) {
+            Util.closeQuietly(response.body());
+            return null;
+        }
 
-  public long maxSize() {
-    return cache.getMaxSize();
-  }
+        return response;
+    }
 
-  @Override public void flush() throws IOException {
-    cache.flush();
-  }
+    @Nullable
+    CacheRequest put(Response response) {
+        String requestMethod = response.request().method();
 
-  @Override public void close() throws IOException {
-    cache.close();
-  }
+        // 根据方法名判断缓存是否有效
+        if (HttpMethod.invalidatesCache(response.request().method())) {
+            try {
+                remove(response.request());
+            } catch (IOException ignored) {
+                // The cache cannot be written.
+            }
+            return null;
+        }
+        // 不对非 GET 请求进行缓存
+        if (!requestMethod.equals("GET")) {
+            // Don't cache non-GET responses. We're technically allowed to cache
+            // HEAD requests and some POST requests, but the complexity of doing
+            // so is high and the benefit is low.
+            return null;
+        }
 
-  public File directory() {
-    return cache.getDirectory();
-  }
+        // 响应头部包含 Vary: *
+        if (HttpHeaders.hasVaryAll(response)) {
+            return null;
+        }
 
-  public boolean isClosed() {
-    return cache.isClosed();
-  }
+        Entry entry = new Entry(response);
+        DiskLruCache.Editor editor = null;
+        try {
+            editor = cache.edit(key(response.request().url()));
+            if (editor == null) {
+                return null;
+            }
+            entry.writeTo(editor);
+            return new CacheRequestImpl(editor);
+        } catch (IOException e) {
+            abortQuietly(editor);
+            return null;
+        }
+    }
 
-  synchronized void trackResponse(CacheStrategy cacheStrategy) {
-    requestCount++;
+    void remove(Request request) throws IOException {
+        cache.remove(key(request.url()));
+    }
 
-    if (cacheStrategy.networkRequest != null) {
-      // If this is a conditional request, we'll increment hitCount if/when it hits.
-      networkCount++;
-    } else if (cacheStrategy.cacheResponse != null) {
-      // This response uses the cache and not the network. That's a cache hit.
-      hitCount++;
+    void update(Response cached, Response network) {
+        Entry entry = new Entry(network);
+        DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot;
+        DiskLruCache.Editor editor = null;
+        try {
+            editor = snapshot.edit(); // Returns null if snapshot is not current.
+            if (editor != null) {
+                entry.writeTo(editor);
+                editor.commit();
+            }
+        } catch (IOException e) {
+            abortQuietly(editor);
+        }
     }
-  }
-
-  synchronized void trackConditionalCacheHit() {
-    hitCount++;
-  }
-
-  public synchronized int networkCount() {
-    return networkCount;
-  }
-
-  public synchronized int hitCount() {
-    return hitCount;
-  }
-
-  public synchronized int requestCount() {
-    return requestCount;
-  }
-
-  private final class CacheRequestImpl implements CacheRequest {
-    private final DiskLruCache.Editor editor;
-    private Sink cacheOut;
-    private Sink body;
-    boolean done;
-
-    CacheRequestImpl(final DiskLruCache.Editor editor) {
-      this.editor = editor;
-      this.cacheOut = editor.newSink(ENTRY_BODY);
-      this.body = new ForwardingSink(cacheOut) {
-        @Override public void close() throws IOException {
-          synchronized (Cache.this) {
-            if (done) {
-              return;
+
+    private void abortQuietly(@Nullable DiskLruCache.Editor editor) {
+        // Give up because the cache cannot be written.
+        try {
+            if (editor != null) {
+                editor.abort();
             }
-            done = true;
-            writeSuccessCount++;
-          }
-          super.close();
-          editor.commit();
+        } catch (IOException ignored) {
         }
-      };
     }
 
-    @Override public void abort() {
-      synchronized (Cache.this) {
-        if (done) {
-          return;
-        }
-        done = true;
-        writeAbortCount++;
-      }
-      Util.closeQuietly(cacheOut);
-      try {
-        editor.abort();
-      } catch (IOException ignored) {
-      }
+    /**
+     * Initialize the cache. This will include reading the journal files from the storage and building
+     * up the necessary in-memory cache information.
+     * <p>
+     * <p>The initialization time may vary depending on the journal file size and the current actual
+     * cache size. The application needs to be aware of calling this function during the
+     * initialization phase and preferably in a background worker thread.
+     * <p>
+     * <p>Note that if the application chooses to not call this method to initialize the cache. By
+     * default, the okhttp will perform lazy initialization upon the first usage of the cache.
+     */
+    public void initialize() throws IOException {
+        cache.initialize();
     }
 
-    @Override public Sink body() {
-      return body;
+    /**
+     * Closes the cache and deletes all of its stored values. This will delete all files in the cache
+     * directory including files that weren't created by the cache.
+     */
+    public void delete() throws IOException {
+        cache.delete();
+    }
+
+    /**
+     * Deletes all values stored in the cache. In-flight writes to the cache will complete normally,
+     * but the corresponding responses will not be stored.
+     */
+    public void evictAll() throws IOException {
+        cache.evictAll();
     }
-  }
-
-  private static final class Entry {
-    /** Synthetic response header: the local time when the request was sent. */
-    private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";
-
-    /** Synthetic response header: the local time when the response was received. */
-    private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";
-
-    private final String url;
-    private final Headers varyHeaders;
-    private final String requestMethod;
-    private final Protocol protocol;
-    private final int code;
-    private final String message;
-    private final Headers responseHeaders;
-    private final @Nullable Handshake handshake;
-    private final long sentRequestMillis;
-    private final long receivedResponseMillis;
 
     /**
-     * Reads an entry from an input stream. A typical entry looks like this:
-     * <pre>{@code
-     *   http://google.com/foo
-     *   GET
-     *   2
-     *   Accept-Language: fr-CA
-     *   Accept-Charset: UTF-8
-     *   HTTP/1.1 200 OK
-     *   3
-     *   Content-Type: image/png
-     *   Content-Length: 100
-     *   Cache-Control: max-age=600
-     * }</pre>
-     *
-     * <p>A typical HTTPS file looks like this:
-     * <pre>{@code
-     *   https://google.com/foo
-     *   GET
-     *   2
-     *   Accept-Language: fr-CA
-     *   Accept-Charset: UTF-8
-     *   HTTP/1.1 200 OK
-     *   3
-     *   Content-Type: image/png
-     *   Content-Length: 100
-     *   Cache-Control: max-age=600
-     *
-     *   AES_256_WITH_MD5
-     *   2
-     *   base64-encoded peerCertificate[0]
-     *   base64-encoded peerCertificate[1]
-     *   -1
-     *   TLSv1.2
-     * }</pre>
-     * The file is newline separated. The first two lines are the URL and the request method. Next
-     * is the number of HTTP Vary request header lines, followed by those lines.
-     *
-     * <p>Next is the response status line, followed by the number of HTTP response header lines,
-     * followed by those lines.
-     *
-     * <p>HTTPS responses also contain SSL session information. This begins with a blank line, and
-     * then a line containing the cipher suite. Next is the length of the peer certificate chain.
-     * These certificates are base64-encoded and appear each on their own line. The next line
-     * contains the length of the local certificate chain. These certificates are also
-     * base64-encoded and appear each on their own line. A length of -1 is used to encode a null
-     * array. The last line is optional. If present, it contains the TLS version.
+     * Returns an iterator over the URLs in this cache. This iterator doesn't throw {@code
+     * ConcurrentModificationException}, but if new responses are added while iterating, their URLs
+     * will not be returned. If existing responses are evicted during iteration, they will be absent
+     * (unless they were already returned).
+     * <p>
+     * <p>The iterator supports {@linkplain Iterator#remove}. Removing a URL from the iterator evicts
+     * the corresponding response from the cache. Use this to evict selected responses.
      */
-    Entry(Source in) throws IOException {
-      try {
-        BufferedSource source = Okio.buffer(in);
-        url = source.readUtf8LineStrict();
-        requestMethod = source.readUtf8LineStrict();
-        Headers.Builder varyHeadersBuilder = new Headers.Builder();
-        int varyRequestHeaderLineCount = readInt(source);
-        for (int i = 0; i < varyRequestHeaderLineCount; i++) {
-          varyHeadersBuilder.addLenient(source.readUtf8LineStrict());
-        }
-        varyHeaders = varyHeadersBuilder.build();
-
-        StatusLine statusLine = StatusLine.parse(source.readUtf8LineStrict());
-        protocol = statusLine.protocol;
-        code = statusLine.code;
-        message = statusLine.message;
-        Headers.Builder responseHeadersBuilder = new Headers.Builder();
-        int responseHeaderLineCount = readInt(source);
-        for (int i = 0; i < responseHeaderLineCount; i++) {
-          responseHeadersBuilder.addLenient(source.readUtf8LineStrict());
-        }
-        String sendRequestMillisString = responseHeadersBuilder.get(SENT_MILLIS);
-        String receivedResponseMillisString = responseHeadersBuilder.get(RECEIVED_MILLIS);
-        responseHeadersBuilder.removeAll(SENT_MILLIS);
-        responseHeadersBuilder.removeAll(RECEIVED_MILLIS);
-        sentRequestMillis = sendRequestMillisString != null
-            ? Long.parseLong(sendRequestMillisString)
-            : 0L;
-        receivedResponseMillis = receivedResponseMillisString != null
-            ? Long.parseLong(receivedResponseMillisString)
-            : 0L;
-        responseHeaders = responseHeadersBuilder.build();
-
-        if (isHttps()) {
-          String blank = source.readUtf8LineStrict();
-          if (blank.length() > 0) {
-            throw new IOException("expected \"\" but was \"" + blank + "\"");
-          }
-          String cipherSuiteString = source.readUtf8LineStrict();
-          CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);
-          List<Certificate> peerCertificates = readCertificateList(source);
-          List<Certificate> localCertificates = readCertificateList(source);
-          TlsVersion tlsVersion = !source.exhausted()
-              ? TlsVersion.forJavaName(source.readUtf8LineStrict())
-              : TlsVersion.SSL_3_0;
-          handshake = Handshake.get(tlsVersion, cipherSuite, peerCertificates, localCertificates);
-        } else {
-          handshake = null;
-        }
-      } finally {
-        in.close();
-      }
+    public Iterator<String> urls() throws IOException {
+        return new Iterator<String>() {
+            final Iterator<DiskLruCache.Snapshot> delegate = cache.snapshots();
+
+            @Nullable
+            String nextUrl;
+            boolean canRemove;
+
+            @Override
+            public boolean hasNext() {
+                if (nextUrl != null) return true;
+
+                canRemove = false; // Prevent delegate.remove() on the wrong item!
+                while (delegate.hasNext()) {
+                    DiskLruCache.Snapshot snapshot = delegate.next();
+                    try {
+                        BufferedSource metadata = Okio.buffer(snapshot.getSource(ENTRY_METADATA));
+                        nextUrl = metadata.readUtf8LineStrict();
+                        return true;
+                    } catch (IOException ignored) {
+                        // We couldn't read the metadata for this snapshot; possibly because the host filesystem
+                        // has disappeared! Skip it.
+                    } finally {
+                        snapshot.close();
+                    }
+                }
+
+                return false;
+            }
+
+            @Override
+            public String next() {
+                if (!hasNext()) throw new NoSuchElementException();
+                String result = nextUrl;
+                nextUrl = null;
+                canRemove = true;
+                return result;
+            }
+
+            @Override
+            public void remove() {
+                if (!canRemove) throw new IllegalStateException("remove() before next()");
+                delegate.remove();
+            }
+        };
+    }
+
+    public synchronized int writeAbortCount() {
+        return writeAbortCount;
+    }
+
+    public synchronized int writeSuccessCount() {
+        return writeSuccessCount;
+    }
+
+    public long size() throws IOException {
+        return cache.size();
+    }
+
+    public long maxSize() {
+        return cache.getMaxSize();
+    }
+
+    @Override
+    public void flush() throws IOException {
+        cache.flush();
     }
 
-    Entry(Response response) {
-      this.url = response.request().url().toString();
-      this.varyHeaders = HttpHeaders.varyHeaders(response);
-      this.requestMethod = response.request().method();
-      this.protocol = response.protocol();
-      this.code = response.code();
-      this.message = response.message();
-      this.responseHeaders = response.headers();
-      this.handshake = response.handshake();
-      this.sentRequestMillis = response.sentRequestAtMillis();
-      this.receivedResponseMillis = response.receivedResponseAtMillis();
+    @Override
+    public void close() throws IOException {
+        cache.close();
     }
 
-    public void writeTo(DiskLruCache.Editor editor) throws IOException {
-      BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA));
-
-      sink.writeUtf8(url)
-          .writeByte('\n');
-      sink.writeUtf8(requestMethod)
-          .writeByte('\n');
-      sink.writeDecimalLong(varyHeaders.size())
-          .writeByte('\n');
-      for (int i = 0, size = varyHeaders.size(); i < size; i++) {
-        sink.writeUtf8(varyHeaders.name(i))
-            .writeUtf8(": ")
-            .writeUtf8(varyHeaders.value(i))
-            .writeByte('\n');
-      }
-
-      sink.writeUtf8(new StatusLine(protocol, code, message).toString())
-          .writeByte('\n');
-      sink.writeDecimalLong(responseHeaders.size() + 2)
-          .writeByte('\n');
-      for (int i = 0, size = responseHeaders.size(); i < size; i++) {
-        sink.writeUtf8(responseHeaders.name(i))
-            .writeUtf8(": ")
-            .writeUtf8(responseHeaders.value(i))
-            .writeByte('\n');
-      }
-      sink.writeUtf8(SENT_MILLIS)
-          .writeUtf8(": ")
-          .writeDecimalLong(sentRequestMillis)
-          .writeByte('\n');
-      sink.writeUtf8(RECEIVED_MILLIS)
-          .writeUtf8(": ")
-          .writeDecimalLong(receivedResponseMillis)
-          .writeByte('\n');
-
-      if (isHttps()) {
-        sink.writeByte('\n');
-        sink.writeUtf8(handshake.cipherSuite().javaName())
-            .writeByte('\n');
-        writeCertList(sink, handshake.peerCertificates());
-        writeCertList(sink, handshake.localCertificates());
-        sink.writeUtf8(handshake.tlsVersion().javaName()).writeByte('\n');
-      }
-      sink.close();
+    public File directory() {
+        return cache.getDirectory();
     }
 
-    private boolean isHttps() {
-      return url.startsWith("https://");
+    public boolean isClosed() {
+        return cache.isClosed();
     }
 
-    private List<Certificate> readCertificateList(BufferedSource source) throws IOException {
-      int length = readInt(source);
-      if (length == -1) return Collections.emptyList(); // OkHttp v1.2 used -1 to indicate null.
-
-      try {
-        CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
-        List<Certificate> result = new ArrayList<>(length);
-        for (int i = 0; i < length; i++) {
-          String line = source.readUtf8LineStrict();
-          Buffer bytes = new Buffer();
-          bytes.write(ByteString.decodeBase64(line));
-          result.add(certificateFactory.generateCertificate(bytes.inputStream()));
-        }
-        return result;
-      } catch (CertificateException e) {
-        throw new IOException(e.getMessage());
-      }
+    synchronized void trackResponse(CacheStrategy cacheStrategy) {
+        requestCount++;
+
+        if (cacheStrategy.networkRequest != null) {
+            // If this is a conditional request, we'll increment hitCount if/when it hits.
+            networkCount++;
+        } else if (cacheStrategy.cacheResponse != null) {
+            // This response uses the cache and not the network. That's a cache hit.
+            hitCount++;
+        }
     }
 
-    private void writeCertList(BufferedSink sink, List<Certificate> certificates)
-        throws IOException {
-      try {
-        sink.writeDecimalLong(certificates.size())
-            .writeByte('\n');
-        for (int i = 0, size = certificates.size(); i < size; i++) {
-          byte[] bytes = certificates.get(i).getEncoded();
-          String line = ByteString.of(bytes).base64();
-          sink.writeUtf8(line)
-              .writeByte('\n');
-        }
-      } catch (CertificateEncodingException e) {
-        throw new IOException(e.getMessage());
-      }
+    synchronized void trackConditionalCacheHit() {
+        hitCount++;
     }
 
-    public boolean matches(Request request, Response response) {
-      return url.equals(request.url().toString())
-          && requestMethod.equals(request.method())
-          && HttpHeaders.varyMatches(response, varyHeaders, request);
+    public synchronized int networkCount() {
+        return networkCount;
     }
 
-    public Response response(DiskLruCache.Snapshot snapshot) {
-      String contentType = responseHeaders.get("Content-Type");
-      String contentLength = responseHeaders.get("Content-Length");
-      Request cacheRequest = new Request.Builder()
-          .url(url)
-          .method(requestMethod, null)
-          .headers(varyHeaders)
-          .build();
-      return new Response.Builder()
-          .request(cacheRequest)
-          .protocol(protocol)
-          .code(code)
-          .message(message)
-          .headers(responseHeaders)
-          .body(new CacheResponseBody(snapshot, contentType, contentLength))
-          .handshake(handshake)
-          .sentRequestAtMillis(sentRequestMillis)
-          .receivedResponseAtMillis(receivedResponseMillis)
-          .build();
+    public synchronized int hitCount() {
+        return hitCount;
     }
-  }
-
-  static int readInt(BufferedSource source) throws IOException {
-    try {
-      long result = source.readDecimalLong();
-      String line = source.readUtf8LineStrict();
-      if (result < 0 || result > Integer.MAX_VALUE || !line.isEmpty()) {
-        throw new IOException("expected an int but was \"" + result + line + "\"");
-      }
-      return (int) result;
-    } catch (NumberFormatException e) {
-      throw new IOException(e.getMessage());
+
+    public synchronized int requestCount() {
+        return requestCount;
     }
-  }
-
-  private static class CacheResponseBody extends ResponseBody {
-    final DiskLruCache.Snapshot snapshot;
-    private final BufferedSource bodySource;
-    private final @Nullable String contentType;
-    private final @Nullable String contentLength;
-
-    CacheResponseBody(final DiskLruCache.Snapshot snapshot,
-        String contentType, String contentLength) {
-      this.snapshot = snapshot;
-      this.contentType = contentType;
-      this.contentLength = contentLength;
-
-      Source source = snapshot.getSource(ENTRY_BODY);
-      bodySource = Okio.buffer(new ForwardingSource(source) {
-        @Override public void close() throws IOException {
-          snapshot.close();
-          super.close();
-        }
-      });
+
+    private final class CacheRequestImpl implements CacheRequest {
+        private final DiskLruCache.Editor editor;
+        private Sink cacheOut;
+        private Sink body;
+        boolean done;
+
+        CacheRequestImpl(final DiskLruCache.Editor editor) {
+            this.editor = editor;
+            this.cacheOut = editor.newSink(ENTRY_BODY);
+            this.body = new ForwardingSink(cacheOut) {
+                @Override
+                public void close() throws IOException {
+                    synchronized (Cache.this) {
+                        if (done) {
+                            return;
+                        }
+                        done = true;
+                        writeSuccessCount++;
+                    }
+                    super.close();
+                    editor.commit();
+                }
+            };
+        }
+
+        @Override
+        public void abort() {
+            synchronized (Cache.this) {
+                if (done) {
+                    return;
+                }
+                done = true;
+                writeAbortCount++;
+            }
+            Util.closeQuietly(cacheOut);
+            try {
+                editor.abort();
+            } catch (IOException ignored) {
+            }
+        }
+
+        @Override
+        public Sink body() {
+            return body;
+        }
     }
 
-    @Override public MediaType contentType() {
-      return contentType != null ? MediaType.parse(contentType) : null;
+    private static final class Entry {
+        /**
+         * Synthetic response header: the local time when the request was sent.
+         * <br>
+         *     自造的响应头：请求发送的本地时间
+         */
+        private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";
+
+        /**
+         * Synthetic response header: the local time when the response was received.
+         * <br>
+         *     自造响应头：响应接收的本地时间
+         */
+        private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";
+
+        private final String url;
+        private final Headers varyHeaders;
+        private final String requestMethod;
+        private final Protocol protocol;
+        private final int code;
+        private final String message;
+        private final Headers responseHeaders;
+        private final @Nullable
+        Handshake handshake;
+        private final long sentRequestMillis;
+        private final long receivedResponseMillis;
+
+        /**
+         * Reads an entry from an input stream. A typical entry looks like this:
+         * <pre>{@code
+         *   http://google.com/foo
+         *   GET
+         *   2
+         *   Accept-Language: fr-CA
+         *   Accept-Charset: UTF-8
+         *   HTTP/1.1 200 OK
+         *   3
+         *   Content-Type: image/png
+         *   Content-Length: 100
+         *   Cache-Control: max-age=600
+         * }</pre>
+         * <p>
+         * <p>A typical HTTPS file looks like this:
+         * <pre>{@code
+         *   https://google.com/foo
+         *   GET
+         *   2
+         *   Accept-Language: fr-CA
+         *   Accept-Charset: UTF-8
+         *   HTTP/1.1 200 OK
+         *   3
+         *   Content-Type: image/png
+         *   Content-Length: 100
+         *   Cache-Control: max-age=600
+         *
+         *   AES_256_WITH_MD5
+         *   2
+         *   base64-encoded peerCertificate[0]
+         *   base64-encoded peerCertificate[1]
+         *   -1
+         *   TLSv1.2
+         * }</pre>
+         * The file is newline separated. The first two lines are the URL and the request method. Next
+         * is the number of HTTP Vary request header lines, followed by those lines.
+         * <p>
+         * <p>Next is the response status line, followed by the number of HTTP response header lines,
+         * followed by those lines.
+         * <p>
+         * <p>HTTPS responses also contain SSL session information. This begins with a blank line, and
+         * then a line containing the cipher suite. Next is the length of the peer certificate chain.
+         * These certificates are base64-encoded and appear each on their own line. The next line
+         * contains the length of the local certificate chain. These certificates are also
+         * base64-encoded and appear each on their own line. A length of -1 is used to encode a null
+         * array. The last line is optional. If present, it contains the TLS version.
+         */
+        Entry(Source in) throws IOException {
+            try {
+                BufferedSource source = Okio.buffer(in);
+                url = source.readUtf8LineStrict();
+                requestMethod = source.readUtf8LineStrict();
+                Headers.Builder varyHeadersBuilder = new Headers.Builder();
+                int varyRequestHeaderLineCount = readInt(source);
+                for (int i = 0; i < varyRequestHeaderLineCount; i++) {
+                    varyHeadersBuilder.addLenient(source.readUtf8LineStrict());
+                }
+                varyHeaders = varyHeadersBuilder.build();
+
+                StatusLine statusLine = StatusLine.parse(source.readUtf8LineStrict());
+                protocol = statusLine.protocol;
+                code = statusLine.code;
+                message = statusLine.message;
+                Headers.Builder responseHeadersBuilder = new Headers.Builder();
+                int responseHeaderLineCount = readInt(source);
+                for (int i = 0; i < responseHeaderLineCount; i++) {
+                    responseHeadersBuilder.addLenient(source.readUtf8LineStrict());
+                }
+                String sendRequestMillisString = responseHeadersBuilder.get(SENT_MILLIS);
+                String receivedResponseMillisString = responseHeadersBuilder.get(RECEIVED_MILLIS);
+                responseHeadersBuilder.removeAll(SENT_MILLIS);
+                responseHeadersBuilder.removeAll(RECEIVED_MILLIS);
+                sentRequestMillis = sendRequestMillisString != null
+                        ? Long.parseLong(sendRequestMillisString)
+                        : 0L;
+                receivedResponseMillis = receivedResponseMillisString != null
+                        ? Long.parseLong(receivedResponseMillisString)
+                        : 0L;
+                responseHeaders = responseHeadersBuilder.build();
+
+                if (isHttps()) {
+                    String blank = source.readUtf8LineStrict();
+                    if (blank.length() > 0) {
+                        throw new IOException("expected \"\" but was \"" + blank + "\"");
+                    }
+                    String cipherSuiteString = source.readUtf8LineStrict();
+                    CipherSuite cipherSuite = CipherSuite.forJavaName(cipherSuiteString);
+                    List<Certificate> peerCertificates = readCertificateList(source);
+                    List<Certificate> localCertificates = readCertificateList(source);
+                    TlsVersion tlsVersion = !source.exhausted()
+                            ? TlsVersion.forJavaName(source.readUtf8LineStrict())
+                            : TlsVersion.SSL_3_0;
+                    handshake = Handshake.get(tlsVersion, cipherSuite, peerCertificates, localCertificates);
+                } else {
+                    handshake = null;
+                }
+            } finally {
+                in.close();
+            }
+        }
+
+        Entry(Response response) {
+            this.url = response.request().url().toString();
+            this.varyHeaders = HttpHeaders.varyHeaders(response);
+            this.requestMethod = response.request().method();
+            this.protocol = response.protocol();
+            this.code = response.code();
+            this.message = response.message();
+            this.responseHeaders = response.headers();
+            this.handshake = response.handshake();
+            this.sentRequestMillis = response.sentRequestAtMillis();
+            this.receivedResponseMillis = response.receivedResponseAtMillis();
+        }
+
+        public void writeTo(DiskLruCache.Editor editor) throws IOException {
+            BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA));
+
+            sink.writeUtf8(url)
+                    .writeByte('\n');
+            sink.writeUtf8(requestMethod)
+                    .writeByte('\n');
+            sink.writeDecimalLong(varyHeaders.size())
+                    .writeByte('\n');
+            for (int i = 0, size = varyHeaders.size(); i < size; i++) {
+                sink.writeUtf8(varyHeaders.name(i))
+                        .writeUtf8(": ")
+                        .writeUtf8(varyHeaders.value(i))
+                        .writeByte('\n');
+            }
+
+            sink.writeUtf8(new StatusLine(protocol, code, message).toString())
+                    .writeByte('\n');
+            sink.writeDecimalLong(responseHeaders.size() + 2)
+                    .writeByte('\n');
+            for (int i = 0, size = responseHeaders.size(); i < size; i++) {
+                sink.writeUtf8(responseHeaders.name(i))
+                        .writeUtf8(": ")
+                        .writeUtf8(responseHeaders.value(i))
+                        .writeByte('\n');
+            }
+            sink.writeUtf8(SENT_MILLIS)
+                    .writeUtf8(": ")
+                    .writeDecimalLong(sentRequestMillis)
+                    .writeByte('\n');
+            sink.writeUtf8(RECEIVED_MILLIS)
+                    .writeUtf8(": ")
+                    .writeDecimalLong(receivedResponseMillis)
+                    .writeByte('\n');
+
+            if (isHttps()) {
+                sink.writeByte('\n');
+                sink.writeUtf8(handshake.cipherSuite().javaName())
+                        .writeByte('\n');
+                writeCertList(sink, handshake.peerCertificates());
+                writeCertList(sink, handshake.localCertificates());
+                sink.writeUtf8(handshake.tlsVersion().javaName()).writeByte('\n');
+            }
+            sink.close();
+        }
+
+        private boolean isHttps() {
+            return url.startsWith("https://");
+        }
+
+        private List<Certificate> readCertificateList(BufferedSource source) throws IOException {
+            int length = readInt(source);
+            if (length == -1) return Collections.emptyList(); // OkHttp v1.2 used -1 to indicate null.
+
+            try {
+                CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
+                List<Certificate> result = new ArrayList<>(length);
+                for (int i = 0; i < length; i++) {
+                    String line = source.readUtf8LineStrict();
+                    Buffer bytes = new Buffer();
+                    bytes.write(ByteString.decodeBase64(line));
+                    result.add(certificateFactory.generateCertificate(bytes.inputStream()));
+                }
+                return result;
+            } catch (CertificateException e) {
+                throw new IOException(e.getMessage());
+            }
+        }
+
+        private void writeCertList(BufferedSink sink, List<Certificate> certificates)
+                throws IOException {
+            try {
+                sink.writeDecimalLong(certificates.size())
+                        .writeByte('\n');
+                for (int i = 0, size = certificates.size(); i < size; i++) {
+                    byte[] bytes = certificates.get(i).getEncoded();
+                    String line = ByteString.of(bytes).base64();
+                    sink.writeUtf8(line)
+                            .writeByte('\n');
+                }
+            } catch (CertificateEncodingException e) {
+                throw new IOException(e.getMessage());
+            }
+        }
+
+        public boolean matches(Request request, Response response) {
+            return url.equals(request.url().toString())
+                    && requestMethod.equals(request.method())
+                    && HttpHeaders.varyMatches(response, varyHeaders, request);
+        }
+
+        public Response response(DiskLruCache.Snapshot snapshot) {
+            String contentType = responseHeaders.get("Content-Type");
+            String contentLength = responseHeaders.get("Content-Length");
+            Request cacheRequest = new Request.Builder()
+                    .url(url)
+                    .method(requestMethod, null)
+                    .headers(varyHeaders)
+                    .build();
+            return new Response.Builder()
+                    .request(cacheRequest)
+                    .protocol(protocol)
+                    .code(code)
+                    .message(message)
+                    .headers(responseHeaders)
+                    .body(new CacheResponseBody(snapshot, contentType, contentLength))
+                    .handshake(handshake)
+                    .sentRequestAtMillis(sentRequestMillis)
+                    .receivedResponseAtMillis(receivedResponseMillis)
+                    .build();
+        }
     }
 
-    @Override public long contentLength() {
-      try {
-        return contentLength != null ? Long.parseLong(contentLength) : -1;
-      } catch (NumberFormatException e) {
-        return -1;
-      }
+    static int readInt(BufferedSource source) throws IOException {
+        try {
+            long result = source.readDecimalLong();
+            String line = source.readUtf8LineStrict();
+            if (result < 0 || result > Integer.MAX_VALUE || !line.isEmpty()) {
+                throw new IOException("expected an int but was \"" + result + line + "\"");
+            }
+            return (int) result;
+        } catch (NumberFormatException e) {
+            throw new IOException(e.getMessage());
+        }
     }
 
-    @Override public BufferedSource source() {
-      return bodySource;
+    private static class CacheResponseBody extends ResponseBody {
+        final DiskLruCache.Snapshot snapshot;
+        private final BufferedSource bodySource;
+        private final @Nullable
+        String contentType;
+        private final @Nullable
+        String contentLength;
+
+        CacheResponseBody(final DiskLruCache.Snapshot snapshot,
+                          String contentType, String contentLength) {
+            this.snapshot = snapshot;
+            this.contentType = contentType;
+            this.contentLength = contentLength;
+
+            Source source = snapshot.getSource(ENTRY_BODY);
+            bodySource = Okio.buffer(new ForwardingSource(source) {
+                @Override
+                public void close() throws IOException {
+                    snapshot.close();
+                    super.close();
+                }
+            });
+        }
+
+        @Override
+        public MediaType contentType() {
+            return contentType != null ? MediaType.parse(contentType) : null;
+        }
+
+        @Override
+        public long contentLength() {
+            try {
+                return contentLength != null ? Long.parseLong(contentLength) : -1;
+            } catch (NumberFormatException e) {
+                return -1;
+            }
+        }
+
+        @Override
+        public BufferedSource source() {
+            return bodySource;
+        }
     }
-  }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
index 0af1e822b2..ef1fbd9dad 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
@@ -104,7 +104,7 @@ public Response intercept(Chain chain) throws IOException {
 
         // If we have a cache response too, then we're doing a conditional get.
         if (cacheResponse != null) {
-            // 304 内容为变化
+            // 304 内容未变化
             if (networkResponse.code() == HTTP_NOT_MODIFIED) {
                 Response response = cacheResponse.newBuilder()
                         .headers(combine(cacheResponse.headers(), networkResponse.headers()))
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
index c3fb740e28..30e87e3f6b 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
@@ -33,6 +33,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
+
 import okhttp3.internal.Util;
 import okhttp3.internal.io.FileSystem;
 import okhttp3.internal.platform.Platform;
@@ -49,53 +50,53 @@
  * and a fixed number of values. Each key must match the regex <strong>[a-z0-9_-]{1,64}</strong>.
  * Values are byte sequences, accessible as streams or files. Each value must be between {@code 0}
  * and {@code Integer.MAX_VALUE} bytes in length.
- *
+ * <p>
  * <p>The cache stores its data in a directory on the filesystem. This directory must be exclusive
  * to the cache; the cache may delete or overwrite files from its directory. It is an error for
  * multiple processes to use the same cache directory at the same time.
- *
+ * <p>
  * <p>This cache limits the number of bytes that it will store on the filesystem. When the number of
  * stored bytes exceeds the limit, the cache will remove entries in the background until the limit
  * is satisfied. The limit is not strict: the cache may temporarily exceed it while waiting for
  * files to be deleted. The limit does not include filesystem overhead or the cache journal so
  * space-sensitive applications should set a conservative limit.
- *
+ * <p>
  * <p>Clients call {@link #edit} to create or update the values of an entry. An entry may have only
  * one editor at one time; if a value is not available to be edited then {@link #edit} will return
  * null.
- *
+ * <p>
  * <ul>
- *     <li>When an entry is being <strong>created</strong> it is necessary to supply a full set of
- *         values; the empty value should be used as a placeholder if necessary.
- *     <li>When an entry is being <strong>edited</strong>, it is not necessary to supply data for
- *         every value; values default to their previous value.
+ * <li>When an entry is being <strong>created</strong> it is necessary to supply a full set of
+ * values; the empty value should be used as a placeholder if necessary.
+ * <li>When an entry is being <strong>edited</strong>, it is not necessary to supply data for
+ * every value; values default to their previous value.
  * </ul>
- *
+ * <p>
  * <p>Every {@link #edit} call must be matched by a call to {@link Editor#commit} or {@link
  * Editor#abort}. Committing is atomic: a read observes the full set of values as they were before
  * or after the commit, but never a mix of values.
- *
+ * <p>
  * <p>Clients call {@link #get} to read a snapshot of an entry. The read will observe the value at
  * the time that {@link #get} was called. Updates and removals after the call do not impact ongoing
  * reads.
- *
+ * <p>
  * <p>This class is tolerant of some I/O errors. If files are missing from the filesystem, the
  * corresponding entries will be dropped from the cache. If an error occurs while writing a cache
  * value, the edit will fail silently. Callers should handle other problems by catching {@code
  * IOException} and responding appropriately.
  */
 public final class DiskLruCache implements Closeable, Flushable {
-  static final String JOURNAL_FILE = "journal";
-  static final String JOURNAL_FILE_TEMP = "journal.tmp";
-  static final String JOURNAL_FILE_BACKUP = "journal.bkp";
-  static final String MAGIC = "libcore.io.DiskLruCache";
-  static final String VERSION_1 = "1";
-  static final long ANY_SEQUENCE_NUMBER = -1;
-  static final Pattern LEGAL_KEY_PATTERN = Pattern.compile("[a-z0-9_-]{1,120}");
-  private static final String CLEAN = "CLEAN";
-  private static final String DIRTY = "DIRTY";
-  private static final String REMOVE = "REMOVE";
-  private static final String READ = "READ";
+    static final String JOURNAL_FILE = "journal";
+    static final String JOURNAL_FILE_TEMP = "journal.tmp";
+    static final String JOURNAL_FILE_BACKUP = "journal.bkp";
+    static final String MAGIC = "libcore.io.DiskLruCache";
+    static final String VERSION_1 = "1";
+    static final long ANY_SEQUENCE_NUMBER = -1;
+    static final Pattern LEGAL_KEY_PATTERN = Pattern.compile("[a-z0-9_-]{1,120}");
+    private static final String CLEAN = "CLEAN";
+    private static final String DIRTY = "DIRTY";
+    private static final String REMOVE = "REMOVE";
+    private static final String READ = "READ";
 
     /*
      * This cache uses a journal file named "journal". A typical journal file
@@ -137,917 +138,956 @@
      * it exists when the cache is opened.
      */
 
-  final FileSystem fileSystem;
-  final File directory;
-  private final File journalFile;
-  private final File journalFileTmp;
-  private final File journalFileBackup;
-  private final int appVersion;
-  private long maxSize;
-  final int valueCount;
-  private long size = 0;
-  BufferedSink journalWriter;
-  final LinkedHashMap<String, Entry> lruEntries = new LinkedHashMap<>(0, 0.75f, true);
-  int redundantOpCount;
-  boolean hasJournalErrors;
-
-  // Must be read and written when synchronized on 'this'.
-  boolean initialized;
-  boolean closed;
-  boolean mostRecentTrimFailed;
-  boolean mostRecentRebuildFailed;
-
-  /**
-   * To differentiate between old and current snapshots, each entry is given a sequence number each
-   * time an edit is committed. A snapshot is stale if its sequence number is not equal to its
-   * entry's sequence number.
-   */
-  private long nextSequenceNumber = 0;
-
-  /** Used to run 'cleanupRunnable' for journal rebuilds. */
-  private final Executor executor;
-  private final Runnable cleanupRunnable = new Runnable() {
-    public void run() {
-      synchronized (DiskLruCache.this) {
-        if (!initialized | closed) {
-          return; // Nothing to do
-        }
+    final FileSystem fileSystem;
+    final File directory;
+    private final File journalFile;
+    private final File journalFileTmp;
+    private final File journalFileBackup;
+    private final int appVersion;
+    private long maxSize;
+    final int valueCount;
+    private long size = 0;
+    BufferedSink journalWriter;
+    final LinkedHashMap<String, Entry> lruEntries = new LinkedHashMap<>(0, 0.75f, true);
+    int redundantOpCount;
+    boolean hasJournalErrors;
+
+    // Must be read and written when synchronized on 'this'.
+    boolean initialized;
+    boolean closed;
+    boolean mostRecentTrimFailed;
+    boolean mostRecentRebuildFailed;
 
-        try {
-          trimToSize();
-        } catch (IOException ignored) {
-          mostRecentTrimFailed = true;
-        }
+    /**
+     * To differentiate between old and current snapshots, each entry is given a sequence number each
+     * time an edit is committed. A snapshot is stale if its sequence number is not equal to its
+     * entry's sequence number.
+     */
+    private long nextSequenceNumber = 0;
 
-        try {
-          if (journalRebuildRequired()) {
-            rebuildJournal();
-            redundantOpCount = 0;
-          }
-        } catch (IOException e) {
-          mostRecentRebuildFailed = true;
-          journalWriter = Okio.buffer(Okio.blackhole());
+    /**
+     * Used to run 'cleanupRunnable' for journal rebuilds.
+     */
+    private final Executor executor;
+    private final Runnable cleanupRunnable = new Runnable() {
+        public void run() {
+            synchronized (DiskLruCache.this) {
+                if (!initialized | closed) {
+                    return; // Nothing to do
+                }
+
+                try {
+                    trimToSize();
+                } catch (IOException ignored) {
+                    mostRecentTrimFailed = true;
+                }
+
+                try {
+                    if (journalRebuildRequired()) {
+                        rebuildJournal();
+                        redundantOpCount = 0;
+                    }
+                } catch (IOException e) {
+                    mostRecentRebuildFailed = true;
+                    journalWriter = Okio.buffer(Okio.blackhole());
+                }
+            }
         }
-      }
-    }
-  };
-
-  DiskLruCache(FileSystem fileSystem, File directory, int appVersion, int valueCount, long maxSize,
-      Executor executor) {
-    this.fileSystem = fileSystem;
-    this.directory = directory;
-    this.appVersion = appVersion;
-    this.journalFile = new File(directory, JOURNAL_FILE);
-    this.journalFileTmp = new File(directory, JOURNAL_FILE_TEMP);
-    this.journalFileBackup = new File(directory, JOURNAL_FILE_BACKUP);
-    this.valueCount = valueCount;
-    this.maxSize = maxSize;
-    this.executor = executor;
-  }
-
-  public synchronized void initialize() throws IOException {
-    assert Thread.holdsLock(this);
-
-    if (initialized) {
-      return; // Already initialized.
-    }
+    };
 
-    // If a bkp file exists, use it instead.
-    if (fileSystem.exists(journalFileBackup)) {
-      // If journal file also exists just delete backup file.
-      if (fileSystem.exists(journalFile)) {
-        fileSystem.delete(journalFileBackup);
-      } else {
-        fileSystem.rename(journalFileBackup, journalFile);
-      }
+    DiskLruCache(FileSystem fileSystem, File directory, int appVersion, int valueCount, long maxSize,
+                 Executor executor) {
+        this.fileSystem = fileSystem;
+        this.directory = directory;
+        this.appVersion = appVersion;
+        this.journalFile = new File(directory, JOURNAL_FILE);
+        this.journalFileTmp = new File(directory, JOURNAL_FILE_TEMP);
+        this.journalFileBackup = new File(directory, JOURNAL_FILE_BACKUP);
+        this.valueCount = valueCount;
+        this.maxSize = maxSize;
+        this.executor = executor;
     }
 
-    // Prefer to pick up where we left off.
-    if (fileSystem.exists(journalFile)) {
-      try {
-        readJournal();
-        processJournal();
-        initialized = true;
-        return;
-      } catch (IOException journalIsCorrupt) {
-        Platform.get().log(WARN, "DiskLruCache " + directory + " is corrupt: "
-            + journalIsCorrupt.getMessage() + ", removing", journalIsCorrupt);
-      }
-
-      // The cache is corrupted, attempt to delete the contents of the directory. This can throw and
-      // we'll let that propagate out as it likely means there is a severe filesystem problem.
-      try {
-        delete();
-      } finally {
-        closed = false;
-      }
-    }
+    public synchronized void initialize() throws IOException {
+        assert Thread.holdsLock(this);
 
-    rebuildJournal();
-
-    initialized = true;
-  }
-
-  /**
-   * Create a cache which will reside in {@code directory}. This cache is lazily initialized on
-   * first access and will be created if it does not exist.
-   *
-   * @param directory a writable directory
-   * @param valueCount the number of values per cache entry. Must be positive.
-   * @param maxSize the maximum number of bytes this cache should use to store
-   */
-  public static DiskLruCache create(FileSystem fileSystem, File directory, int appVersion,
-      int valueCount, long maxSize) {
-    if (maxSize <= 0) {
-      throw new IllegalArgumentException("maxSize <= 0");
-    }
-    if (valueCount <= 0) {
-      throw new IllegalArgumentException("valueCount <= 0");
-    }
+        if (initialized) {
+            return; // Already initialized.
+        }
 
-    // Use a single background thread to evict entries.
-    Executor executor = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS,
-        new LinkedBlockingQueue<Runnable>(), Util.threadFactory("OkHttp DiskLruCache", true));
-
-    return new DiskLruCache(fileSystem, directory, appVersion, valueCount, maxSize, executor);
-  }
-
-  private void readJournal() throws IOException {
-    BufferedSource source = Okio.buffer(fileSystem.source(journalFile));
-    try {
-      String magic = source.readUtf8LineStrict();
-      String version = source.readUtf8LineStrict();
-      String appVersionString = source.readUtf8LineStrict();
-      String valueCountString = source.readUtf8LineStrict();
-      String blank = source.readUtf8LineStrict();
-      if (!MAGIC.equals(magic)
-          || !VERSION_1.equals(version)
-          || !Integer.toString(appVersion).equals(appVersionString)
-          || !Integer.toString(valueCount).equals(valueCountString)
-          || !"".equals(blank)) {
-        throw new IOException("unexpected journal header: [" + magic + ", " + version + ", "
-            + valueCountString + ", " + blank + "]");
-      }
-
-      int lineCount = 0;
-      while (true) {
-        try {
-          readJournalLine(source.readUtf8LineStrict());
-          lineCount++;
-        } catch (EOFException endOfJournal) {
-          break;
+        // If a bkp file exists, use it instead.
+        if (fileSystem.exists(journalFileBackup)) {
+            // If journal file also exists just delete backup file.
+            if (fileSystem.exists(journalFile)) {
+                fileSystem.delete(journalFileBackup);
+            } else {
+                fileSystem.rename(journalFileBackup, journalFile);
+            }
+        }
+
+        // Prefer to pick up where we left off.
+        if (fileSystem.exists(journalFile)) {
+            try {
+                readJournal();
+                processJournal();
+                initialized = true;
+                return;
+            } catch (IOException journalIsCorrupt) {
+                Platform.get().log(WARN, "DiskLruCache " + directory + " is corrupt: "
+                        + journalIsCorrupt.getMessage() + ", removing", journalIsCorrupt);
+            }
+
+            // The cache is corrupted, attempt to delete the contents of the directory. This can throw and
+            // we'll let that propagate out as it likely means there is a severe filesystem problem.
+            try {
+                delete();
+            } finally {
+                closed = false;
+            }
         }
-      }
-      redundantOpCount = lineCount - lruEntries.size();
 
-      // If we ended on a truncated line, rebuild the journal before appending to it.
-      if (!source.exhausted()) {
         rebuildJournal();
-      } else {
-        journalWriter = newJournalWriter();
-      }
-    } finally {
-      Util.closeQuietly(source);
-    }
-  }
-
-  private BufferedSink newJournalWriter() throws FileNotFoundException {
-    Sink fileSink = fileSystem.appendingSink(journalFile);
-    Sink faultHidingSink = new FaultHidingSink(fileSink) {
-      @Override protected void onException(IOException e) {
-        assert (Thread.holdsLock(DiskLruCache.this));
-        hasJournalErrors = true;
-      }
-    };
-    return Okio.buffer(faultHidingSink);
-  }
 
-  private void readJournalLine(String line) throws IOException {
-    int firstSpace = line.indexOf(' ');
-    if (firstSpace == -1) {
-      throw new IOException("unexpected journal line: " + line);
+        initialized = true;
     }
 
-    int keyBegin = firstSpace + 1;
-    int secondSpace = line.indexOf(' ', keyBegin);
-    final String key;
-    if (secondSpace == -1) {
-      key = line.substring(keyBegin);
-      if (firstSpace == REMOVE.length() && line.startsWith(REMOVE)) {
-        lruEntries.remove(key);
-        return;
-      }
-    } else {
-      key = line.substring(keyBegin, secondSpace);
+    /**
+     * Create a cache which will reside in {@code directory}. This cache is lazily initialized on
+     * first access and will be created if it does not exist.
+     *
+     * @param directory  a writable directory
+     * @param valueCount the number of values per cache entry. Must be positive.
+     * @param maxSize    the maximum number of bytes this cache should use to store
+     */
+    public static DiskLruCache create(FileSystem fileSystem, File directory, int appVersion,
+                                      int valueCount, long maxSize) {
+        if (maxSize <= 0) {
+            throw new IllegalArgumentException("maxSize <= 0");
+        }
+        if (valueCount <= 0) {
+            throw new IllegalArgumentException("valueCount <= 0");
+        }
+
+        // Use a single background thread to evict entries.
+        Executor executor = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS,
+                new LinkedBlockingQueue<Runnable>(), Util.threadFactory("OkHttp DiskLruCache", true));
+
+        return new DiskLruCache(fileSystem, directory, appVersion, valueCount, maxSize, executor);
     }
 
-    Entry entry = lruEntries.get(key);
-    if (entry == null) {
-      entry = new Entry(key);
-      lruEntries.put(key, entry);
+    private void readJournal() throws IOException {
+        BufferedSource source = Okio.buffer(fileSystem.source(journalFile));
+        try {
+            String magic = source.readUtf8LineStrict();
+            String version = source.readUtf8LineStrict();
+            String appVersionString = source.readUtf8LineStrict();
+            String valueCountString = source.readUtf8LineStrict();
+            String blank = source.readUtf8LineStrict();
+            if (!MAGIC.equals(magic)
+                    || !VERSION_1.equals(version)
+                    || !Integer.toString(appVersion).equals(appVersionString)
+                    || !Integer.toString(valueCount).equals(valueCountString)
+                    || !"".equals(blank)) {
+                throw new IOException("unexpected journal header: [" + magic + ", " + version + ", "
+                        + valueCountString + ", " + blank + "]");
+            }
+
+            int lineCount = 0;
+            while (true) {
+                try {
+                    readJournalLine(source.readUtf8LineStrict());
+                    lineCount++;
+                } catch (EOFException endOfJournal) {
+                    break;
+                }
+            }
+            redundantOpCount = lineCount - lruEntries.size();
+
+            // If we ended on a truncated line, rebuild the journal before appending to it.
+            if (!source.exhausted()) {
+                rebuildJournal();
+            } else {
+                journalWriter = newJournalWriter();
+            }
+        } finally {
+            Util.closeQuietly(source);
+        }
     }
 
-    if (secondSpace != -1 && firstSpace == CLEAN.length() && line.startsWith(CLEAN)) {
-      String[] parts = line.substring(secondSpace + 1).split(" ");
-      entry.readable = true;
-      entry.currentEditor = null;
-      entry.setLengths(parts);
-    } else if (secondSpace == -1 && firstSpace == DIRTY.length() && line.startsWith(DIRTY)) {
-      entry.currentEditor = new Editor(entry);
-    } else if (secondSpace == -1 && firstSpace == READ.length() && line.startsWith(READ)) {
-      // This work was already done by calling lruEntries.get().
-    } else {
-      throw new IOException("unexpected journal line: " + line);
+    private BufferedSink newJournalWriter() throws FileNotFoundException {
+        Sink fileSink = fileSystem.appendingSink(journalFile);
+        Sink faultHidingSink = new FaultHidingSink(fileSink) {
+            @Override
+            protected void onException(IOException e) {
+                assert (Thread.holdsLock(DiskLruCache.this));
+                hasJournalErrors = true;
+            }
+        };
+        return Okio.buffer(faultHidingSink);
     }
-  }
-
-  /**
-   * Computes the initial size and collects garbage as a part of opening the cache. Dirty entries
-   * are assumed to be inconsistent and will be deleted.
-   */
-  private void processJournal() throws IOException {
-    fileSystem.delete(journalFileTmp);
-    for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {
-      Entry entry = i.next();
-      if (entry.currentEditor == null) {
-        for (int t = 0; t < valueCount; t++) {
-          size += entry.lengths[t];
+
+    private void readJournalLine(String line) throws IOException {
+        int firstSpace = line.indexOf(' ');
+        if (firstSpace == -1) {
+            throw new IOException("unexpected journal line: " + line);
         }
-      } else {
-        entry.currentEditor = null;
-        for (int t = 0; t < valueCount; t++) {
-          fileSystem.delete(entry.cleanFiles[t]);
-          fileSystem.delete(entry.dirtyFiles[t]);
+
+        int keyBegin = firstSpace + 1;
+        int secondSpace = line.indexOf(' ', keyBegin);
+        final String key;
+        if (secondSpace == -1) {
+            key = line.substring(keyBegin);
+            if (firstSpace == REMOVE.length() && line.startsWith(REMOVE)) {
+                lruEntries.remove(key);
+                return;
+            }
+        } else {
+            key = line.substring(keyBegin, secondSpace);
         }
-        i.remove();
-      }
-    }
-  }
-
-  /**
-   * Creates a new journal that omits redundant information. This replaces the current journal if it
-   * exists.
-   */
-  synchronized void rebuildJournal() throws IOException {
-    if (journalWriter != null) {
-      journalWriter.close();
-    }
 
-    BufferedSink writer = Okio.buffer(fileSystem.sink(journalFileTmp));
-    try {
-      writer.writeUtf8(MAGIC).writeByte('\n');
-      writer.writeUtf8(VERSION_1).writeByte('\n');
-      writer.writeDecimalLong(appVersion).writeByte('\n');
-      writer.writeDecimalLong(valueCount).writeByte('\n');
-      writer.writeByte('\n');
+        Entry entry = lruEntries.get(key);
+        if (entry == null) {
+            entry = new Entry(key);
+            lruEntries.put(key, entry);
+        }
 
-      for (Entry entry : lruEntries.values()) {
-        if (entry.currentEditor != null) {
-          writer.writeUtf8(DIRTY).writeByte(' ');
-          writer.writeUtf8(entry.key);
-          writer.writeByte('\n');
+        if (secondSpace != -1 && firstSpace == CLEAN.length() && line.startsWith(CLEAN)) {
+            String[] parts = line.substring(secondSpace + 1).split(" ");
+            entry.readable = true;
+            entry.currentEditor = null;
+            entry.setLengths(parts);
+        } else if (secondSpace == -1 && firstSpace == DIRTY.length() && line.startsWith(DIRTY)) {
+            entry.currentEditor = new Editor(entry);
+        } else if (secondSpace == -1 && firstSpace == READ.length() && line.startsWith(READ)) {
+            // This work was already done by calling lruEntries.get().
         } else {
-          writer.writeUtf8(CLEAN).writeByte(' ');
-          writer.writeUtf8(entry.key);
-          entry.writeLengths(writer);
-          writer.writeByte('\n');
+            throw new IOException("unexpected journal line: " + line);
         }
-      }
-    } finally {
-      writer.close();
     }
 
-    if (fileSystem.exists(journalFile)) {
-      fileSystem.rename(journalFile, journalFileBackup);
-    }
-    fileSystem.rename(journalFileTmp, journalFile);
-    fileSystem.delete(journalFileBackup);
-
-    journalWriter = newJournalWriter();
-    hasJournalErrors = false;
-    mostRecentRebuildFailed = false;
-  }
-
-  /**
-   * Returns a snapshot of the entry named {@code key}, or null if it doesn't exist is not currently
-   * readable. If a value is returned, it is moved to the head of the LRU queue.
-   */
-  public synchronized Snapshot get(String key) throws IOException {
-    initialize();
-
-    checkNotClosed();
-    validateKey(key);
-    Entry entry = lruEntries.get(key);
-    if (entry == null || !entry.readable) return null;
-
-    Snapshot snapshot = entry.snapshot();
-    if (snapshot == null) return null;
-
-    redundantOpCount++;
-    journalWriter.writeUtf8(READ).writeByte(' ').writeUtf8(key).writeByte('\n');
-    if (journalRebuildRequired()) {
-      executor.execute(cleanupRunnable);
+    /**
+     * Computes the initial size and collects garbage as a part of opening the cache. Dirty entries
+     * are assumed to be inconsistent and will be deleted.
+     */
+    private void processJournal() throws IOException {
+        fileSystem.delete(journalFileTmp);
+        for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {
+            Entry entry = i.next();
+            if (entry.currentEditor == null) {
+                for (int t = 0; t < valueCount; t++) {
+                    size += entry.lengths[t];
+                }
+            } else {
+                entry.currentEditor = null;
+                for (int t = 0; t < valueCount; t++) {
+                    fileSystem.delete(entry.cleanFiles[t]);
+                    fileSystem.delete(entry.dirtyFiles[t]);
+                }
+                i.remove();
+            }
+        }
     }
 
-    return snapshot;
-  }
-
-  /**
-   * Returns an editor for the entry named {@code key}, or null if another edit is in progress.
-   */
-  public @Nullable Editor edit(String key) throws IOException {
-    return edit(key, ANY_SEQUENCE_NUMBER);
-  }
-
-  synchronized Editor edit(String key, long expectedSequenceNumber) throws IOException {
-    initialize();
-
-    checkNotClosed();
-    validateKey(key);
-    Entry entry = lruEntries.get(key);
-    if (expectedSequenceNumber != ANY_SEQUENCE_NUMBER && (entry == null
-        || entry.sequenceNumber != expectedSequenceNumber)) {
-      return null; // Snapshot is stale.
-    }
-    if (entry != null && entry.currentEditor != null) {
-      return null; // Another edit is in progress.
-    }
-    if (mostRecentTrimFailed || mostRecentRebuildFailed) {
-      // The OS has become our enemy! If the trim job failed, it means we are storing more data than
-      // requested by the user. Do not allow edits so we do not go over that limit any further. If
-      // the journal rebuild failed, the journal writer will not be active, meaning we will not be
-      // able to record the edit, causing file leaks. In both cases, we want to retry the clean up
-      // so we can get out of this state!
-      executor.execute(cleanupRunnable);
-      return null;
-    }
+    /**
+     * Creates a new journal that omits redundant information. This replaces the current journal if it
+     * exists.
+     */
+    synchronized void rebuildJournal() throws IOException {
+        if (journalWriter != null) {
+            journalWriter.close();
+        }
 
-    // Flush the journal before creating files to prevent file leaks.
-    journalWriter.writeUtf8(DIRTY).writeByte(' ').writeUtf8(key).writeByte('\n');
-    journalWriter.flush();
+        BufferedSink writer = Okio.buffer(fileSystem.sink(journalFileTmp));
+        try {
+            writer.writeUtf8(MAGIC).writeByte('\n');
+            writer.writeUtf8(VERSION_1).writeByte('\n');
+            writer.writeDecimalLong(appVersion).writeByte('\n');
+            writer.writeDecimalLong(valueCount).writeByte('\n');
+            writer.writeByte('\n');
+
+            for (Entry entry : lruEntries.values()) {
+                if (entry.currentEditor != null) {
+                    writer.writeUtf8(DIRTY).writeByte(' ');
+                    writer.writeUtf8(entry.key);
+                    writer.writeByte('\n');
+                } else {
+                    writer.writeUtf8(CLEAN).writeByte(' ');
+                    writer.writeUtf8(entry.key);
+                    entry.writeLengths(writer);
+                    writer.writeByte('\n');
+                }
+            }
+        } finally {
+            writer.close();
+        }
 
-    if (hasJournalErrors) {
-      return null; // Don't edit; the journal can't be written.
-    }
+        if (fileSystem.exists(journalFile)) {
+            fileSystem.rename(journalFile, journalFileBackup);
+        }
+        fileSystem.rename(journalFileTmp, journalFile);
+        fileSystem.delete(journalFileBackup);
 
-    if (entry == null) {
-      entry = new Entry(key);
-      lruEntries.put(key, entry);
+        journalWriter = newJournalWriter();
+        hasJournalErrors = false;
+        mostRecentRebuildFailed = false;
     }
-    Editor editor = new Editor(entry);
-    entry.currentEditor = editor;
-    return editor;
-  }
-
-  /** Returns the directory where this cache stores its data. */
-  public File getDirectory() {
-    return directory;
-  }
-
-  /**
-   * Returns the maximum number of bytes that this cache should use to store its data.
-   */
-  public synchronized long getMaxSize() {
-    return maxSize;
-  }
-
-  /**
-   * Changes the maximum number of bytes the cache can store and queues a job to trim the existing
-   * store, if necessary.
-   */
-  public synchronized void setMaxSize(long maxSize) {
-    this.maxSize = maxSize;
-    if (initialized) {
-      executor.execute(cleanupRunnable);
+
+    /**
+     * Returns a snapshot of the entry named {@code key}, or null if it doesn't exist is not currently
+     * readable. If a value is returned, it is moved to the head of the LRU queue.
+     */
+    public synchronized Snapshot get(String key) throws IOException {
+        initialize();
+
+        checkNotClosed();
+        validateKey(key);
+        Entry entry = lruEntries.get(key);
+        if (entry == null || !entry.readable) return null;
+
+        Snapshot snapshot = entry.snapshot();
+        if (snapshot == null) return null;
+
+        redundantOpCount++;
+        journalWriter.writeUtf8(READ).writeByte(' ').writeUtf8(key).writeByte('\n');
+        if (journalRebuildRequired()) {
+            executor.execute(cleanupRunnable);
+        }
+
+        return snapshot;
     }
-  }
-
-  /**
-   * Returns the number of bytes currently being used to store the values in this cache. This may be
-   * greater than the max size if a background deletion is pending.
-   */
-  public synchronized long size() throws IOException {
-    initialize();
-    return size;
-  }
-
-  synchronized void completeEdit(Editor editor, boolean success) throws IOException {
-    Entry entry = editor.entry;
-    if (entry.currentEditor != editor) {
-      throw new IllegalStateException();
+
+    /**
+     * Returns an editor for the entry named {@code key}, or null if another edit is in progress.
+     */
+    public @Nullable
+    Editor edit(String key) throws IOException {
+        return edit(key, ANY_SEQUENCE_NUMBER);
     }
 
-    // If this edit is creating the entry for the first time, every index must have a value.
-    if (success && !entry.readable) {
-      for (int i = 0; i < valueCount; i++) {
-        if (!editor.written[i]) {
-          editor.abort();
-          throw new IllegalStateException("Newly created entry didn't create value for index " + i);
+    synchronized Editor edit(String key, long expectedSequenceNumber) throws IOException {
+        initialize();
+
+        checkNotClosed();
+        validateKey(key);
+        Entry entry = lruEntries.get(key);
+        if (expectedSequenceNumber != ANY_SEQUENCE_NUMBER && (entry == null
+                || entry.sequenceNumber != expectedSequenceNumber)) {
+            return null; // Snapshot is stale.
         }
-        if (!fileSystem.exists(entry.dirtyFiles[i])) {
-          editor.abort();
-          return;
+        if (entry != null && entry.currentEditor != null) {
+            return null; // Another edit is in progress.
         }
-      }
-    }
+        if (mostRecentTrimFailed || mostRecentRebuildFailed) {
+            // The OS has become our enemy! If the trim job failed, it means we are storing more data than
+            // requested by the user. Do not allow edits so we do not go over that limit any further. If
+            // the journal rebuild failed, the journal writer will not be active, meaning we will not be
+            // able to record the edit, causing file leaks. In both cases, we want to retry the clean up
+            // so we can get out of this state!
+            executor.execute(cleanupRunnable);
+            return null;
+        }
+
+        // Flush the journal before creating files to prevent file leaks.
+        journalWriter.writeUtf8(DIRTY).writeByte(' ').writeUtf8(key).writeByte('\n');
+        journalWriter.flush();
 
-    for (int i = 0; i < valueCount; i++) {
-      File dirty = entry.dirtyFiles[i];
-      if (success) {
-        if (fileSystem.exists(dirty)) {
-          File clean = entry.cleanFiles[i];
-          fileSystem.rename(dirty, clean);
-          long oldLength = entry.lengths[i];
-          long newLength = fileSystem.size(clean);
-          entry.lengths[i] = newLength;
-          size = size - oldLength + newLength;
+        if (hasJournalErrors) {
+            return null; // Don't edit; the journal can't be written.
         }
-      } else {
-        fileSystem.delete(dirty);
-      }
+
+        if (entry == null) {
+            entry = new Entry(key);
+            lruEntries.put(key, entry);
+        }
+        Editor editor = new Editor(entry);
+        entry.currentEditor = editor;
+        return editor;
     }
 
-    redundantOpCount++;
-    entry.currentEditor = null;
-    if (entry.readable | success) {
-      entry.readable = true;
-      journalWriter.writeUtf8(CLEAN).writeByte(' ');
-      journalWriter.writeUtf8(entry.key);
-      entry.writeLengths(journalWriter);
-      journalWriter.writeByte('\n');
-      if (success) {
-        entry.sequenceNumber = nextSequenceNumber++;
-      }
-    } else {
-      lruEntries.remove(entry.key);
-      journalWriter.writeUtf8(REMOVE).writeByte(' ');
-      journalWriter.writeUtf8(entry.key);
-      journalWriter.writeByte('\n');
+    /**
+     * Returns the directory where this cache stores its data.
+     */
+    public File getDirectory() {
+        return directory;
     }
-    journalWriter.flush();
 
-    if (size > maxSize || journalRebuildRequired()) {
-      executor.execute(cleanupRunnable);
+    /**
+     * Returns the maximum number of bytes that this cache should use to store its data.
+     */
+    public synchronized long getMaxSize() {
+        return maxSize;
     }
-  }
-
-  /**
-   * We only rebuild the journal when it will halve the size of the journal and eliminate at least
-   * 2000 ops.
-   */
-  boolean journalRebuildRequired() {
-    final int redundantOpCompactThreshold = 2000;
-    return redundantOpCount >= redundantOpCompactThreshold
-        && redundantOpCount >= lruEntries.size();
-  }
-
-  /**
-   * Drops the entry for {@code key} if it exists and can be removed. If the entry for {@code key}
-   * is currently being edited, that edit will complete normally but its value will not be stored.
-   *
-   * @return true if an entry was removed.
-   */
-  public synchronized boolean remove(String key) throws IOException {
-    initialize();
-
-    checkNotClosed();
-    validateKey(key);
-    Entry entry = lruEntries.get(key);
-    if (entry == null) return false;
-    boolean removed = removeEntry(entry);
-    if (removed && size <= maxSize) mostRecentTrimFailed = false;
-    return removed;
-  }
-
-  boolean removeEntry(Entry entry) throws IOException {
-    if (entry.currentEditor != null) {
-      entry.currentEditor.detach(); // Prevent the edit from completing normally.
+
+    /**
+     * Changes the maximum number of bytes the cache can store and queues a job to trim the existing
+     * store, if necessary.
+     */
+    public synchronized void setMaxSize(long maxSize) {
+        this.maxSize = maxSize;
+        if (initialized) {
+            executor.execute(cleanupRunnable);
+        }
     }
 
-    for (int i = 0; i < valueCount; i++) {
-      fileSystem.delete(entry.cleanFiles[i]);
-      size -= entry.lengths[i];
-      entry.lengths[i] = 0;
+    /**
+     * Returns the number of bytes currently being used to store the values in this cache. This may be
+     * greater than the max size if a background deletion is pending.
+     */
+    public synchronized long size() throws IOException {
+        initialize();
+        return size;
     }
 
-    redundantOpCount++;
-    journalWriter.writeUtf8(REMOVE).writeByte(' ').writeUtf8(entry.key).writeByte('\n');
-    lruEntries.remove(entry.key);
+    synchronized void completeEdit(Editor editor, boolean success) throws IOException {
+        Entry entry = editor.entry;
+        if (entry.currentEditor != editor) {
+            throw new IllegalStateException();
+        }
 
-    if (journalRebuildRequired()) {
-      executor.execute(cleanupRunnable);
-    }
+        // If this edit is creating the entry for the first time, every index must have a value.
+        if (success && !entry.readable) {
+            for (int i = 0; i < valueCount; i++) {
+                if (!editor.written[i]) {
+                    editor.abort();
+                    throw new IllegalStateException("Newly created entry didn't create value for index " + i);
+                }
+                if (!fileSystem.exists(entry.dirtyFiles[i])) {
+                    editor.abort();
+                    return;
+                }
+            }
+        }
 
-    return true;
-  }
+        for (int i = 0; i < valueCount; i++) {
+            File dirty = entry.dirtyFiles[i];
+            if (success) {
+                if (fileSystem.exists(dirty)) {
+                    File clean = entry.cleanFiles[i];
+                    fileSystem.rename(dirty, clean);
+                    long oldLength = entry.lengths[i];
+                    long newLength = fileSystem.size(clean);
+                    entry.lengths[i] = newLength;
+                    size = size - oldLength + newLength;
+                }
+            } else {
+                fileSystem.delete(dirty);
+            }
+        }
 
-  /** Returns true if this cache has been closed. */
-  public synchronized boolean isClosed() {
-    return closed;
-  }
+        redundantOpCount++;
+        entry.currentEditor = null;
+        if (entry.readable | success) {
+            entry.readable = true;
+            journalWriter.writeUtf8(CLEAN).writeByte(' ');
+            journalWriter.writeUtf8(entry.key);
+            entry.writeLengths(journalWriter);
+            journalWriter.writeByte('\n');
+            if (success) {
+                entry.sequenceNumber = nextSequenceNumber++;
+            }
+        } else {
+            lruEntries.remove(entry.key);
+            journalWriter.writeUtf8(REMOVE).writeByte(' ');
+            journalWriter.writeUtf8(entry.key);
+            journalWriter.writeByte('\n');
+        }
+        journalWriter.flush();
 
-  private synchronized void checkNotClosed() {
-    if (isClosed()) {
-      throw new IllegalStateException("cache is closed");
-    }
-  }
-
-  /** Force buffered operations to the filesystem. */
-  @Override public synchronized void flush() throws IOException {
-    if (!initialized) return;
-
-    checkNotClosed();
-    trimToSize();
-    journalWriter.flush();
-  }
-
-  /** Closes this cache. Stored values will remain on the filesystem. */
-  @Override public synchronized void close() throws IOException {
-    if (!initialized || closed) {
-      closed = true;
-      return;
-    }
-    // Copying for safe iteration.
-    for (Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {
-      if (entry.currentEditor != null) {
-        entry.currentEditor.abort();
-      }
-    }
-    trimToSize();
-    journalWriter.close();
-    journalWriter = null;
-    closed = true;
-  }
-
-  void trimToSize() throws IOException {
-    while (size > maxSize) {
-      Entry toEvict = lruEntries.values().iterator().next();
-      removeEntry(toEvict);
+        if (size > maxSize || journalRebuildRequired()) {
+            executor.execute(cleanupRunnable);
+        }
     }
-    mostRecentTrimFailed = false;
-  }
-
-  /**
-   * Closes the cache and deletes all of its stored values. This will delete all files in the cache
-   * directory including files that weren't created by the cache.
-   */
-  public void delete() throws IOException {
-    close();
-    fileSystem.deleteContents(directory);
-  }
-
-  /**
-   * Deletes all stored values from the cache. In-flight edits will complete normally but their
-   * values will not be stored.
-   */
-  public synchronized void evictAll() throws IOException {
-    initialize();
-    // Copying for safe iteration.
-    for (Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {
-      removeEntry(entry);
+
+    /**
+     * We only rebuild the journal when it will halve the size of the journal and eliminate at least
+     * 2000 ops.
+     */
+    boolean journalRebuildRequired() {
+        final int redundantOpCompactThreshold = 2000;
+        return redundantOpCount >= redundantOpCompactThreshold
+                && redundantOpCount >= lruEntries.size();
     }
-    mostRecentTrimFailed = false;
-  }
-
-  private void validateKey(String key) {
-    Matcher matcher = LEGAL_KEY_PATTERN.matcher(key);
-    if (!matcher.matches()) {
-      throw new IllegalArgumentException(
-          "keys must match regex [a-z0-9_-]{1,120}: \"" + key + "\"");
+
+    /**
+     * Drops the entry for {@code key} if it exists and can be removed. If the entry for {@code key}
+     * is currently being edited, that edit will complete normally but its value will not be stored.
+     *
+     * @return true if an entry was removed.
+     */
+    public synchronized boolean remove(String key) throws IOException {
+        initialize();
+
+        checkNotClosed();
+        validateKey(key);
+        Entry entry = lruEntries.get(key);
+        if (entry == null) return false;
+        boolean removed = removeEntry(entry);
+        if (removed && size <= maxSize) mostRecentTrimFailed = false;
+        return removed;
     }
-  }
-
-  /**
-   * Returns an iterator over the cache's current entries. This iterator doesn't throw {@code
-   * ConcurrentModificationException}, but if new entries are added while iterating, those new
-   * entries will not be returned by the iterator. If existing entries are removed during iteration,
-   * they will be absent (unless they were already returned).
-   *
-   * <p>If there are I/O problems during iteration, this iterator fails silently. For example, if
-   * the hosting filesystem becomes unreachable, the iterator will omit elements rather than
-   * throwing exceptions.
-   *
-   * <p><strong>The caller must {@link Snapshot#close close}</strong> each snapshot returned by
-   * {@link Iterator#next}. Failing to do so leaks open files!
-   *
-   * <p>The returned iterator supports {@link Iterator#remove}.
-   */
-  public synchronized Iterator<Snapshot> snapshots() throws IOException {
-    initialize();
-    return new Iterator<Snapshot>() {
-      /** Iterate a copy of the entries to defend against concurrent modification errors. */
-      final Iterator<Entry> delegate = new ArrayList<>(lruEntries.values()).iterator();
-
-      /** The snapshot to return from {@link #next}. Null if we haven't computed that yet. */
-      Snapshot nextSnapshot;
-
-      /** The snapshot to remove with {@link #remove}. Null if removal is illegal. */
-      Snapshot removeSnapshot;
-
-      @Override public boolean hasNext() {
-        if (nextSnapshot != null) return true;
-
-        synchronized (DiskLruCache.this) {
-          // If the cache is closed, truncate the iterator.
-          if (closed) return false;
-
-          while (delegate.hasNext()) {
-            Entry entry = delegate.next();
-            Snapshot snapshot = entry.snapshot();
-            if (snapshot == null) continue; // Evicted since we copied the entries.
-            nextSnapshot = snapshot;
-            return true;
-          }
+
+    boolean removeEntry(Entry entry) throws IOException {
+        if (entry.currentEditor != null) {
+            entry.currentEditor.detach(); // Prevent the edit from completing normally.
         }
 
-        return false;
-      }
+        for (int i = 0; i < valueCount; i++) {
+            fileSystem.delete(entry.cleanFiles[i]);
+            size -= entry.lengths[i];
+            entry.lengths[i] = 0;
+        }
 
-      @Override public Snapshot next() {
-        if (!hasNext()) throw new NoSuchElementException();
-        removeSnapshot = nextSnapshot;
-        nextSnapshot = null;
-        return removeSnapshot;
-      }
+        redundantOpCount++;
+        journalWriter.writeUtf8(REMOVE).writeByte(' ').writeUtf8(entry.key).writeByte('\n');
+        lruEntries.remove(entry.key);
 
-      @Override public void remove() {
-        if (removeSnapshot == null) throw new IllegalStateException("remove() before next()");
-        try {
-          DiskLruCache.this.remove(removeSnapshot.key);
-        } catch (IOException ignored) {
-          // Nothing useful to do here. We failed to remove from the cache. Most likely that's
-          // because we couldn't update the journal, but the cached entry will still be gone.
-        } finally {
-          removeSnapshot = null;
+        if (journalRebuildRequired()) {
+            executor.execute(cleanupRunnable);
         }
-      }
-    };
-  }
-
-  /** A snapshot of the values for an entry. */
-  public final class Snapshot implements Closeable {
-    private final String key;
-    private final long sequenceNumber;
-    private final Source[] sources;
-    private final long[] lengths;
-
-    Snapshot(String key, long sequenceNumber, Source[] sources, long[] lengths) {
-      this.key = key;
-      this.sequenceNumber = sequenceNumber;
-      this.sources = sources;
-      this.lengths = lengths;
-    }
 
-    public String key() {
-      return key;
+        return true;
     }
 
     /**
-     * Returns an editor for this snapshot's entry, or null if either the entry has changed since
-     * this snapshot was created or if another edit is in progress.
+     * Returns true if this cache has been closed.
      */
-    public @Nullable Editor edit() throws IOException {
-      return DiskLruCache.this.edit(key, sequenceNumber);
+    public synchronized boolean isClosed() {
+        return closed;
     }
 
-    /** Returns the unbuffered stream with the value for {@code index}. */
-    public Source getSource(int index) {
-      return sources[index];
+    private synchronized void checkNotClosed() {
+        if (isClosed()) {
+            throw new IllegalStateException("cache is closed");
+        }
     }
 
-    /** Returns the byte length of the value for {@code index}. */
-    public long getLength(int index) {
-      return lengths[index];
-    }
+    /**
+     * Force buffered operations to the filesystem.
+     */
+    @Override
+    public synchronized void flush() throws IOException {
+        if (!initialized) return;
 
-    public void close() {
-      for (Source in : sources) {
-        Util.closeQuietly(in);
-      }
+        checkNotClosed();
+        trimToSize();
+        journalWriter.flush();
     }
-  }
 
-  /** Edits the values for an entry. */
-  public final class Editor {
-    final Entry entry;
-    final boolean[] written;
-    private boolean done;
+    /**
+     * Closes this cache. Stored values will remain on the filesystem.
+     */
+    @Override
+    public synchronized void close() throws IOException {
+        if (!initialized || closed) {
+            closed = true;
+            return;
+        }
+        // Copying for safe iteration.
+        for (Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {
+            if (entry.currentEditor != null) {
+                entry.currentEditor.abort();
+            }
+        }
+        trimToSize();
+        journalWriter.close();
+        journalWriter = null;
+        closed = true;
+    }
 
-    Editor(Entry entry) {
-      this.entry = entry;
-      this.written = (entry.readable) ? null : new boolean[valueCount];
+    void trimToSize() throws IOException {
+        while (size > maxSize) {
+            Entry toEvict = lruEntries.values().iterator().next();
+            removeEntry(toEvict);
+        }
+        mostRecentTrimFailed = false;
     }
 
     /**
-     * Prevents this editor from completing normally. This is necessary either when the edit causes
-     * an I/O error, or if the target entry is evicted while this editor is active. In either case
-     * we delete the editor's created files and prevent new files from being created. Note that once
-     * an editor has been detached it is possible for another editor to edit the entry.
+     * Closes the cache and deletes all of its stored values. This will delete all files in the cache
+     * directory including files that weren't created by the cache.
      */
-    void detach() {
-      if (entry.currentEditor == this) {
-        for (int i = 0; i < valueCount; i++) {
-          try {
-            fileSystem.delete(entry.dirtyFiles[i]);
-          } catch (IOException e) {
-            // This file is potentially leaked. Not much we can do about that.
-          }
-        }
-        entry.currentEditor = null;
-      }
+    public void delete() throws IOException {
+        close();
+        fileSystem.deleteContents(directory);
     }
 
     /**
-     * Returns an unbuffered input stream to read the last committed value, or null if no value has
-     * been committed.
+     * Deletes all stored values from the cache. In-flight edits will complete normally but their
+     * values will not be stored.
      */
-    public Source newSource(int index) {
-      synchronized (DiskLruCache.this) {
-        if (done) {
-          throw new IllegalStateException();
-        }
-        if (!entry.readable || entry.currentEditor != this) {
-          return null;
+    public synchronized void evictAll() throws IOException {
+        initialize();
+        // Copying for safe iteration.
+        for (Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {
+            removeEntry(entry);
         }
-        try {
-          return fileSystem.source(entry.cleanFiles[index]);
-        } catch (FileNotFoundException e) {
-          return null;
+        mostRecentTrimFailed = false;
+    }
+
+    private void validateKey(String key) {
+        Matcher matcher = LEGAL_KEY_PATTERN.matcher(key);
+        if (!matcher.matches()) {
+            throw new IllegalArgumentException(
+                    "keys must match regex [a-z0-9_-]{1,120}: \"" + key + "\"");
         }
-      }
     }
 
     /**
-     * Returns a new unbuffered output stream to write the value at {@code index}. If the underlying
-     * output stream encounters errors when writing to the filesystem, this edit will be aborted
-     * when {@link #commit} is called. The returned output stream does not throw IOExceptions.
+     * Returns an iterator over the cache's current entries. This iterator doesn't throw {@code
+     * ConcurrentModificationException}, but if new entries are added while iterating, those new
+     * entries will not be returned by the iterator. If existing entries are removed during iteration,
+     * they will be absent (unless they were already returned).
+     * <p>
+     * <p>If there are I/O problems during iteration, this iterator fails silently. For example, if
+     * the hosting filesystem becomes unreachable, the iterator will omit elements rather than
+     * throwing exceptions.
+     * <p>
+     * <p><strong>The caller must {@link Snapshot#close close}</strong> each snapshot returned by
+     * {@link Iterator#next}. Failing to do so leaks open files!
+     * <p>
+     * <p>The returned iterator supports {@link Iterator#remove}.
      */
-    public Sink newSink(int index) {
-      synchronized (DiskLruCache.this) {
-        if (done) {
-          throw new IllegalStateException();
-        }
-        if (entry.currentEditor != this) {
-          return Okio.blackhole();
-        }
-        if (!entry.readable) {
-          written[index] = true;
-        }
-        File dirtyFile = entry.dirtyFiles[index];
-        Sink sink;
-        try {
-          sink = fileSystem.sink(dirtyFile);
-        } catch (FileNotFoundException e) {
-          return Okio.blackhole();
-        }
-        return new FaultHidingSink(sink) {
-          @Override protected void onException(IOException e) {
-            synchronized (DiskLruCache.this) {
-              detach();
+    public synchronized Iterator<Snapshot> snapshots() throws IOException {
+        initialize();
+        return new Iterator<Snapshot>() {
+            /** Iterate a copy of the entries to defend against concurrent modification errors. */
+            final Iterator<Entry> delegate = new ArrayList<>(lruEntries.values()).iterator();
+
+            /** The snapshot to return from {@link #next}. Null if we haven't computed that yet. */
+            Snapshot nextSnapshot;
+
+            /** The snapshot to remove with {@link #remove}. Null if removal is illegal. */
+            Snapshot removeSnapshot;
+
+            @Override
+            public boolean hasNext() {
+                if (nextSnapshot != null) return true;
+
+                synchronized (DiskLruCache.this) {
+                    // If the cache is closed, truncate the iterator.
+                    if (closed) return false;
+
+                    while (delegate.hasNext()) {
+                        Entry entry = delegate.next();
+                        Snapshot snapshot = entry.snapshot();
+                        if (snapshot == null) continue; // Evicted since we copied the entries.
+                        nextSnapshot = snapshot;
+                        return true;
+                    }
+                }
+
+                return false;
+            }
+
+            @Override
+            public Snapshot next() {
+                if (!hasNext()) throw new NoSuchElementException();
+                removeSnapshot = nextSnapshot;
+                nextSnapshot = null;
+                return removeSnapshot;
+            }
+
+            @Override
+            public void remove() {
+                if (removeSnapshot == null) throw new IllegalStateException("remove() before next()");
+                try {
+                    DiskLruCache.this.remove(removeSnapshot.key);
+                } catch (IOException ignored) {
+                    // Nothing useful to do here. We failed to remove from the cache. Most likely that's
+                    // because we couldn't update the journal, but the cached entry will still be gone.
+                } finally {
+                    removeSnapshot = null;
+                }
             }
-          }
         };
-      }
     }
 
     /**
-     * Commits this edit so it is visible to readers.  This releases the edit lock so another edit
-     * may be started on the same key.
+     * A snapshot of the values for an entry.
      */
-    public void commit() throws IOException {
-      synchronized (DiskLruCache.this) {
-        if (done) {
-          throw new IllegalStateException();
+    public final class Snapshot implements Closeable {
+        private final String key;
+        private final long sequenceNumber;
+        private final Source[] sources;
+        private final long[] lengths;
+
+        Snapshot(String key, long sequenceNumber, Source[] sources, long[] lengths) {
+            this.key = key;
+            this.sequenceNumber = sequenceNumber;
+            this.sources = sources;
+            this.lengths = lengths;
         }
-        if (entry.currentEditor == this) {
-          completeEdit(this, true);
+
+        public String key() {
+            return key;
+        }
+
+        /**
+         * Returns an editor for this snapshot's entry, or null if either the entry has changed since
+         * this snapshot was created or if another edit is in progress.
+         */
+        public @Nullable
+        Editor edit() throws IOException {
+            return DiskLruCache.this.edit(key, sequenceNumber);
+        }
+
+        /**
+         * Returns the unbuffered stream with the value for {@code index}.
+         */
+        public Source getSource(int index) {
+            return sources[index];
+        }
+
+        /**
+         * Returns the byte length of the value for {@code index}.
+         */
+        public long getLength(int index) {
+            return lengths[index];
+        }
+
+        public void close() {
+            for (Source in : sources) {
+                Util.closeQuietly(in);
+            }
         }
-        done = true;
-      }
     }
 
     /**
-     * Aborts this edit. This releases the edit lock so another edit may be started on the same
-     * key.
+     * Edits the values for an entry.
      */
-    public void abort() throws IOException {
-      synchronized (DiskLruCache.this) {
-        if (done) {
-          throw new IllegalStateException();
+    public final class Editor {
+        final Entry entry;
+        final boolean[] written;
+        private boolean done;
+
+        Editor(Entry entry) {
+            this.entry = entry;
+            this.written = (entry.readable) ? null : new boolean[valueCount];
         }
-        if (entry.currentEditor == this) {
-          completeEdit(this, false);
+
+        /**
+         * Prevents this editor from completing normally. This is necessary either when the edit causes
+         * an I/O error, or if the target entry is evicted while this editor is active. In either case
+         * we delete the editor's created files and prevent new files from being created. Note that once
+         * an editor has been detached it is possible for another editor to edit the entry.
+         */
+        void detach() {
+            if (entry.currentEditor == this) {
+                for (int i = 0; i < valueCount; i++) {
+                    try {
+                        fileSystem.delete(entry.dirtyFiles[i]);
+                    } catch (IOException e) {
+                        // This file is potentially leaked. Not much we can do about that.
+                    }
+                }
+                entry.currentEditor = null;
+            }
         }
-        done = true;
-      }
-    }
 
-    public void abortUnlessCommitted() {
-      synchronized (DiskLruCache.this) {
-        if (!done && entry.currentEditor == this) {
-          try {
-            completeEdit(this, false);
-          } catch (IOException ignored) {
-          }
+        /**
+         * Returns an unbuffered input stream to read the last committed value, or null if no value has
+         * been committed.
+         */
+        public Source newSource(int index) {
+            synchronized (DiskLruCache.this) {
+                if (done) {
+                    throw new IllegalStateException();
+                }
+                if (!entry.readable || entry.currentEditor != this) {
+                    return null;
+                }
+                try {
+                    return fileSystem.source(entry.cleanFiles[index]);
+                } catch (FileNotFoundException e) {
+                    return null;
+                }
+            }
         }
-      }
-    }
-  }
-
-  private final class Entry {
-    final String key;
-
-    /** Lengths of this entry's files. */
-    final long[] lengths;
-    final File[] cleanFiles;
-    final File[] dirtyFiles;
-
-    /** True if this entry has ever been published. */
-    boolean readable;
-
-    /** The ongoing edit or null if this entry is not being edited. */
-    Editor currentEditor;
-
-    /** The sequence number of the most recently committed edit to this entry. */
-    long sequenceNumber;
-
-    Entry(String key) {
-      this.key = key;
-
-      lengths = new long[valueCount];
-      cleanFiles = new File[valueCount];
-      dirtyFiles = new File[valueCount];
-
-      // The names are repetitive so re-use the same builder to avoid allocations.
-      StringBuilder fileBuilder = new StringBuilder(key).append('.');
-      int truncateTo = fileBuilder.length();
-      for (int i = 0; i < valueCount; i++) {
-        fileBuilder.append(i);
-        cleanFiles[i] = new File(directory, fileBuilder.toString());
-        fileBuilder.append(".tmp");
-        dirtyFiles[i] = new File(directory, fileBuilder.toString());
-        fileBuilder.setLength(truncateTo);
-      }
-    }
 
-    /** Set lengths using decimal numbers like "10123". */
-    void setLengths(String[] strings) throws IOException {
-      if (strings.length != valueCount) {
-        throw invalidLengths(strings);
-      }
+        /**
+         * Returns a new unbuffered output stream to write the value at {@code index}. If the underlying
+         * output stream encounters errors when writing to the filesystem, this edit will be aborted
+         * when {@link #commit} is called. The returned output stream does not throw IOExceptions.
+         */
+        public Sink newSink(int index) {
+            synchronized (DiskLruCache.this) {
+                if (done) {
+                    throw new IllegalStateException();
+                }
+                if (entry.currentEditor != this) {
+                    return Okio.blackhole();
+                }
+                if (!entry.readable) {
+                    written[index] = true;
+                }
+                File dirtyFile = entry.dirtyFiles[index];
+                Sink sink;
+                try {
+                    sink = fileSystem.sink(dirtyFile);
+                } catch (FileNotFoundException e) {
+                    return Okio.blackhole();
+                }
+                return new FaultHidingSink(sink) {
+                    @Override
+                    protected void onException(IOException e) {
+                        synchronized (DiskLruCache.this) {
+                            detach();
+                        }
+                    }
+                };
+            }
+        }
 
-      try {
-        for (int i = 0; i < strings.length; i++) {
-          lengths[i] = Long.parseLong(strings[i]);
+        /**
+         * Commits this edit so it is visible to readers.  This releases the edit lock so another edit
+         * may be started on the same key.
+         */
+        public void commit() throws IOException {
+            synchronized (DiskLruCache.this) {
+                if (done) {
+                    throw new IllegalStateException();
+                }
+                if (entry.currentEditor == this) {
+                    completeEdit(this, true);
+                }
+                done = true;
+            }
         }
-      } catch (NumberFormatException e) {
-        throw invalidLengths(strings);
-      }
-    }
 
-    /** Append space-prefixed lengths to {@code writer}. */
-    void writeLengths(BufferedSink writer) throws IOException {
-      for (long length : lengths) {
-        writer.writeByte(' ').writeDecimalLong(length);
-      }
-    }
+        /**
+         * Aborts this edit. This releases the edit lock so another edit may be started on the same
+         * key.
+         */
+        public void abort() throws IOException {
+            synchronized (DiskLruCache.this) {
+                if (done) {
+                    throw new IllegalStateException();
+                }
+                if (entry.currentEditor == this) {
+                    completeEdit(this, false);
+                }
+                done = true;
+            }
+        }
 
-    private IOException invalidLengths(String[] strings) throws IOException {
-      throw new IOException("unexpected journal line: " + Arrays.toString(strings));
+        public void abortUnlessCommitted() {
+            synchronized (DiskLruCache.this) {
+                if (!done && entry.currentEditor == this) {
+                    try {
+                        completeEdit(this, false);
+                    } catch (IOException ignored) {
+                    }
+                }
+            }
+        }
     }
 
-    /**
-     * Returns a snapshot of this entry. This opens all streams eagerly to guarantee that we see a
-     * single published snapshot. If we opened streams lazily then the streams could come from
-     * different edits.
-     */
-    Snapshot snapshot() {
-      if (!Thread.holdsLock(DiskLruCache.this)) throw new AssertionError();
+    private final class Entry {
+        final String key;
+
+        /**
+         * Lengths of this entry's files.
+         */
+        final long[] lengths;
+        final File[] cleanFiles;
+        final File[] dirtyFiles;
+
+        /**
+         * True if this entry has ever been published.
+         */
+        boolean readable;
+
+        /**
+         * The ongoing edit or null if this entry is not being edited.
+         */
+        Editor currentEditor;
+
+        /**
+         * The sequence number of the most recently committed edit to this entry.
+         */
+        long sequenceNumber;
+
+        Entry(String key) {
+            this.key = key;
+
+            lengths = new long[valueCount];
+            cleanFiles = new File[valueCount];
+            dirtyFiles = new File[valueCount];
+
+            // The names are repetitive so re-use the same builder to avoid allocations.
+            StringBuilder fileBuilder = new StringBuilder(key).append('.');
+            int truncateTo = fileBuilder.length();
+            for (int i = 0; i < valueCount; i++) {
+                fileBuilder.append(i);
+                cleanFiles[i] = new File(directory, fileBuilder.toString());
+                fileBuilder.append(".tmp");
+                dirtyFiles[i] = new File(directory, fileBuilder.toString());
+                fileBuilder.setLength(truncateTo);
+            }
+        }
 
-      Source[] sources = new Source[valueCount];
-      long[] lengths = this.lengths.clone(); // Defensive copy since these can be zeroed out.
-      try {
-        for (int i = 0; i < valueCount; i++) {
-          sources[i] = fileSystem.source(cleanFiles[i]);
+        /**
+         * Set lengths using decimal numbers like "10123".
+         */
+        void setLengths(String[] strings) throws IOException {
+            if (strings.length != valueCount) {
+                throw invalidLengths(strings);
+            }
+
+            try {
+                for (int i = 0; i < strings.length; i++) {
+                    lengths[i] = Long.parseLong(strings[i]);
+                }
+            } catch (NumberFormatException e) {
+                throw invalidLengths(strings);
+            }
         }
-        return new Snapshot(key, sequenceNumber, sources, lengths);
-      } catch (FileNotFoundException e) {
-        // A file must have been deleted manually!
-        for (int i = 0; i < valueCount; i++) {
-          if (sources[i] != null) {
-            Util.closeQuietly(sources[i]);
-          } else {
-            break;
-          }
+
+        /**
+         * Append space-prefixed lengths to {@code writer}.
+         */
+        void writeLengths(BufferedSink writer) throws IOException {
+            for (long length : lengths) {
+                writer.writeByte(' ').writeDecimalLong(length);
+            }
         }
-        // Since the entry is no longer valid, remove it so the metadata is accurate (i.e. the cache
-        // size.)
-        try {
-          removeEntry(this);
-        } catch (IOException ignored) {
+
+        private IOException invalidLengths(String[] strings) throws IOException {
+            throw new IOException("unexpected journal line: " + Arrays.toString(strings));
+        }
+
+        /**
+         * Returns a snapshot of this entry. This opens all streams eagerly to guarantee that we see a
+         * single published snapshot. If we opened streams lazily then the streams could come from
+         * different edits.
+         */
+        Snapshot snapshot() {
+            if (!Thread.holdsLock(DiskLruCache.this)) throw new AssertionError();
+
+            Source[] sources = new Source[valueCount];
+            long[] lengths = this.lengths.clone(); // Defensive copy since these can be zeroed out.
+            try {
+                for (int i = 0; i < valueCount; i++) {
+                    sources[i] = fileSystem.source(cleanFiles[i]);
+                }
+                return new Snapshot(key, sequenceNumber, sources, lengths);
+            } catch (FileNotFoundException e) {
+                // A file must have been deleted manually!
+                for (int i = 0; i < valueCount; i++) {
+                    if (sources[i] != null) {
+                        Util.closeQuietly(sources[i]);
+                    } else {
+                        break;
+                    }
+                }
+                // Since the entry is no longer valid, remove it so the metadata is accurate (i.e. the cache
+                // size.)
+                try {
+                    removeEntry(this);
+                } catch (IOException ignored) {
+                }
+                return null;
+            }
         }
-        return null;
-      }
     }
-  }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java b/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
index 0ce0d07858..9d32b72d5f 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
@@ -65,6 +65,8 @@ private static long stringToLong(String s) {
   /**
    * Returns true if none of the Vary headers have changed between {@code cachedRequest} and {@code
    * newRequest}.
+   * <br>
+   *     cachedRequest 和 newRequest 的 Vary 头是否一致
    */
   public static boolean varyMatches(
       Response cachedResponse, Headers cachedRequest, Request newRequest) {
@@ -76,6 +78,8 @@ public static boolean varyMatches(
 
   /**
    * Returns true if a Vary header contains an asterisk. Such responses cannot be cached.
+   * <br>
+   *     响应的 Vary 头中是否包含星号，如果包含则不缓存此响应。
    */
   public static boolean hasVaryAll(Response response) {
     return hasVaryAll(response.headers());
@@ -83,6 +87,8 @@ public static boolean hasVaryAll(Response response) {
 
   /**
    * Returns true if a Vary header contains an asterisk. Such responses cannot be cached.
+   * <br>
+   *     响应的 Vary 头中是否包含星号，如果包含则不缓存此响应。
    */
   public static boolean hasVaryAll(Headers responseHeaders) {
     return varyFields(responseHeaders).contains("*");
diff --git a/okhttp/src/main/java/okhttp3/internal/io/FileSystem.java b/okhttp/src/main/java/okhttp3/internal/io/FileSystem.java
index 0b1b1cfbc4..0416b604b7 100644
--- a/okhttp/src/main/java/okhttp3/internal/io/FileSystem.java
+++ b/okhttp/src/main/java/okhttp3/internal/io/FileSystem.java
@@ -18,6 +18,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+
 import okio.Okio;
 import okio.Sink;
 import okio.Source;
@@ -27,111 +28,131 @@
  * #SYSTEM} implementation, which uses the host machine's local file system. Alternate
  * implementations may be used to inject faults (for testing) or to transform stored data (to add
  * encryption, for example).
- *
+ * <p>
  * <p>All operations on a file system are racy. For example, guarding a call to {@link #source} with
  * {@link #exists} does not guarantee that {@link FileNotFoundException} will not be thrown. The
  * file may be moved between the two calls!
- *
+ * <p>
  * <p>This interface is less ambitious than {@link java.nio.file.FileSystem} introduced in Java 7.
  * It lacks important features like file watching, metadata, permissions, and disk space
  * information. In exchange for these limitations, this interface is easier to implement and works
  * on all versions of Java and Android.
  */
 public interface FileSystem {
-  /** The host machine's local file system. */
-  FileSystem SYSTEM = new FileSystem() {
-    @Override public Source source(File file) throws FileNotFoundException {
-      return Okio.source(file);
-    }
-
-    @Override public Sink sink(File file) throws FileNotFoundException {
-      try {
-        return Okio.sink(file);
-      } catch (FileNotFoundException e) {
-        // Maybe the parent directory doesn't exist? Try creating it first.
-        file.getParentFile().mkdirs();
-        return Okio.sink(file);
-      }
-    }
-
-    @Override public Sink appendingSink(File file) throws FileNotFoundException {
-      try {
-        return Okio.appendingSink(file);
-      } catch (FileNotFoundException e) {
-        // Maybe the parent directory doesn't exist? Try creating it first.
-        file.getParentFile().mkdirs();
-        return Okio.appendingSink(file);
-      }
-    }
-
-    @Override public void delete(File file) throws IOException {
-      // If delete() fails, make sure it's because the file didn't exist!
-      if (!file.delete() && file.exists()) {
-        throw new IOException("failed to delete " + file);
-      }
-    }
-
-    @Override public boolean exists(File file) {
-      return file.exists();
-    }
-
-    @Override public long size(File file) {
-      return file.length();
-    }
-
-    @Override public void rename(File from, File to) throws IOException {
-      delete(to);
-      if (!from.renameTo(to)) {
-        throw new IOException("failed to rename " + from + " to " + to);
-      }
-    }
-
-    @Override public void deleteContents(File directory) throws IOException {
-      File[] files = directory.listFiles();
-      if (files == null) {
-        throw new IOException("not a readable directory: " + directory);
-      }
-      for (File file : files) {
-        if (file.isDirectory()) {
-          deleteContents(file);
+    /**
+     * The host machine's local file system.
+     */
+    FileSystem SYSTEM = new FileSystem() {
+        @Override
+        public Source source(File file) throws FileNotFoundException {
+            return Okio.source(file);
+        }
+
+        @Override
+        public Sink sink(File file) throws FileNotFoundException {
+            try {
+                return Okio.sink(file);
+            } catch (FileNotFoundException e) {
+                // Maybe the parent directory doesn't exist? Try creating it first.
+                file.getParentFile().mkdirs();
+                return Okio.sink(file);
+            }
+        }
+
+        @Override
+        public Sink appendingSink(File file) throws FileNotFoundException {
+            try {
+                return Okio.appendingSink(file);
+            } catch (FileNotFoundException e) {
+                // Maybe the parent directory doesn't exist? Try creating it first.
+                file.getParentFile().mkdirs();
+                return Okio.appendingSink(file);
+            }
+        }
+
+        @Override
+        public void delete(File file) throws IOException {
+            // If delete() fails, make sure it's because the file didn't exist!
+            if (!file.delete() && file.exists()) {
+                throw new IOException("failed to delete " + file);
+            }
+        }
+
+        @Override
+        public boolean exists(File file) {
+            return file.exists();
+        }
+
+        @Override
+        public long size(File file) {
+            return file.length();
+        }
+
+        @Override
+        public void rename(File from, File to) throws IOException {
+            delete(to);
+            if (!from.renameTo(to)) {
+                throw new IOException("failed to rename " + from + " to " + to);
+            }
         }
-        if (!file.delete()) {
-          throw new IOException("failed to delete " + file);
+
+        @Override
+        public void deleteContents(File directory) throws IOException {
+            File[] files = directory.listFiles();
+            if (files == null) {
+                throw new IOException("not a readable directory: " + directory);
+            }
+            for (File file : files) {
+                if (file.isDirectory()) {
+                    deleteContents(file);
+                }
+                if (!file.delete()) {
+                    throw new IOException("failed to delete " + file);
+                }
+            }
         }
-      }
-    }
-  };
-
-  /** Reads from {@code file}. */
-  Source source(File file) throws FileNotFoundException;
-
-  /**
-   * Writes to {@code file}, discarding any data already present. Creates parent directories if
-   * necessary.
-   */
-  Sink sink(File file) throws FileNotFoundException;
-
-  /**
-   * Writes to {@code file}, appending if data is already present. Creates parent directories if
-   * necessary.
-   */
-  Sink appendingSink(File file) throws FileNotFoundException;
-
-  /** Deletes {@code file} if it exists. Throws if the file exists and cannot be deleted. */
-  void delete(File file) throws IOException;
-
-  /** Returns true if {@code file} exists on the file system. */
-  boolean exists(File file);
-
-  /** Returns the number of bytes stored in {@code file}, or 0 if it does not exist. */
-  long size(File file);
-
-  /** Renames {@code from} to {@code to}. Throws if the file cannot be renamed. */
-  void rename(File from, File to) throws IOException;
-
-  /**
-   * Recursively delete the contents of {@code directory}. Throws an IOException if any file could
-   * not be deleted, or if {@code dir} is not a readable directory.
-   */
-  void deleteContents(File directory) throws IOException;
+    };
+
+    /**
+     * Reads from {@code file}.
+     */
+    Source source(File file) throws FileNotFoundException;
+
+    /**
+     * Writes to {@code file}, discarding any data already present. Creates parent directories if
+     * necessary.
+     */
+    Sink sink(File file) throws FileNotFoundException;
+
+    /**
+     * Writes to {@code file}, appending if data is already present. Creates parent directories if
+     * necessary.
+     */
+    Sink appendingSink(File file) throws FileNotFoundException;
+
+    /**
+     * Deletes {@code file} if it exists. Throws if the file exists and cannot be deleted.
+     */
+    void delete(File file) throws IOException;
+
+    /**
+     * Returns true if {@code file} exists on the file system.
+     */
+    boolean exists(File file);
+
+    /**
+     * Returns the number of bytes stored in {@code file}, or 0 if it does not exist.
+     */
+    long size(File file);
+
+    /**
+     * Renames {@code from} to {@code to}. Throws if the file cannot be renamed.
+     */
+    void rename(File from, File to) throws IOException;
+
+    /**
+     * Recursively delete the contents of {@code directory}. Throws an IOException if any file could
+     * not be deleted, or if {@code dir} is not a readable directory.
+     */
+    void deleteContents(File directory) throws IOException;
 }
