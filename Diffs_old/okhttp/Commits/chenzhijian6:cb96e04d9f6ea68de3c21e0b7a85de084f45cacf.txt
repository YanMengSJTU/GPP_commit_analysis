diff --git a/.gitignore b/.gitignore
index 226a3f3d65..49defe2fba 100644
--- a/.gitignore
+++ b/.gitignore
@@ -22,3 +22,11 @@ classes
 obj
 
 .DS_Store
+
+.gradle
+build.gradle
+gradle
+gradlew
+gradlew.bat
+local.properties
+settings.gradle
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Connection.java b/okhttp/src/main/java/com/squareup/okhttp/Connection.java
index 943f764916..4e0414ea11 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Connection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java
@@ -63,6 +63,7 @@
   private final ConnectionPool pool;
   private final Route route;
 
+  private final ConnectionObserver connectionObserver;
   private Socket socket;
   private boolean connected = false;
   private HttpConnection httpConnection;
@@ -82,6 +83,7 @@
   public Connection(ConnectionPool pool, Route route) {
     this.pool = pool;
     this.route = route;
+    this.connectionObserver = pool.getConnectionObserver();
   }
 
   Object getOwner() {
@@ -198,8 +200,11 @@ private void upgradeToTls(Request tunnelRequest, int readTimeout, int writeTimeo
 
     if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {
       sslSocket.setSoTimeout(0); // SPDY timeouts are set per-stream.
-      spdyConnection = new SpdyConnection.Builder(this, route.address.getUriHost(), true, socket)
-          .protocol(protocol).build();
+      spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, socket)
+          .connection(this)
+          .connectionObserver(connectionObserver)
+          .protocol(protocol)
+          .build();
       spdyConnection.sendConnectionPreface();
     } else {
       httpConnection = new HttpConnection(pool, this, socket);
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
index aac94c060a..2392e1b16d 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
@@ -76,6 +76,7 @@
   private final int maxIdleConnections;
   private final long keepAliveDurationNs;
 
+  private final ConnectionObserver connectionObserver;
   private final LinkedList<Connection> connections = new LinkedList<Connection>();
 
   /** We use a single background thread to cleanup expired connections. */
@@ -115,9 +116,15 @@
     }
   };
 
+
   public ConnectionPool(int maxIdleConnections, long keepAliveDurationMs) {
+    this(maxIdleConnections, keepAliveDurationMs, null);
+  }
+
+  public ConnectionPool(int maxIdleConnections, long keepAliveDurationMs, ConnectionObserver connectionObserver) {
     this.maxIdleConnections = maxIdleConnections;
     this.keepAliveDurationNs = keepAliveDurationMs * 1000 * 1000;
+    this.connectionObserver = connectionObserver;
   }
 
   /**
@@ -150,6 +157,10 @@ public static ConnectionPool getDefault() {
     return systemDefault;
   }
 
+  protected ConnectionObserver getConnectionObserver() {
+    return connectionObserver;
+  }
+
   /** Returns total number of connections in the pool. */
   public synchronized int getConnectionCount() {
     return connections.size();
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
index d27686abba..5c5843044a 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
@@ -52,6 +52,7 @@
  * was triggered by a certain caller can be caught and handled by that caller.
  */
 public final class SpdyConnection implements Closeable {
+    private static final long PUSH_IDLE_TIMEOUT = 10 * 1000;
 
   // Internal state of this connection is guarded by 'this'. No blocking
   // operations may be performed while holding this lock!
@@ -69,15 +70,11 @@
       Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
       Util.threadFactory("OkHttp SpdyConnection", true));
 
-    // Optional callback that will be invoked when a socket gets closed
-    private static ConnectionObserver connectionObserver = null;
-
-    public static void setConnectionObserver(ConnectionObserver observer) {
-        connectionObserver = observer;
-    }
-
     private final Connection connection;
 
+    // Optional callback that will be invoked when a socket gets closed
+    private final ConnectionObserver connectionObserver;
+
   /** The protocol variant, like {@link com.squareup.okhttp.internal.spdy.Spdy3}. */
   final Protocol protocol;
 
@@ -139,6 +136,7 @@ public static void setConnectionObserver(ConnectionObserver observer) {
 
   private SpdyConnection(Builder builder) throws IOException {
     connection = builder.connection;
+    connectionObserver = builder.connectionObserver;
     protocol = builder.protocol;
     client = builder.client;
     handler = builder.handler;
@@ -165,19 +163,19 @@ private SpdyConnection(Builder builder) throws IOException {
     }
     // Like newSingleThreadExecutor, except lazy creates the thread.
     pushExecutor = new ThreadPoolExecutor(0, 1,
-        0L, TimeUnit.MILLISECONDS,
-        new LinkedBlockingQueue<Runnable>(),
-        Util.threadFactory(String.format("OkHttp %s Push Observer", hostName), true));
+      PUSH_IDLE_TIMEOUT, TimeUnit.MILLISECONDS,
+      new LinkedBlockingQueue<Runnable>(),
+      Util.threadFactory(String.format("OkHttp %s Push Observer", hostName), true));
 
     bytesLeftInWriteWindow = peerSettings.getInitialWindowSize(DEFAULT_INITIAL_WINDOW_SIZE);
     socket = builder.socket;
     frameWriter = variant.newWriter(Okio.buffer(Okio.sink(builder.socket, new IOExceptionObserver() {
-            public void onIOException(IOException e) {
-                if (connectionObserver != null) {
-                    connectionObserver.onIOException(SpdyConnection.this.connection, e);
-                }
-            }
-        })), client);
+      public void onIOException(IOException e) {
+        if (connectionObserver != null) {
+          connectionObserver.onIOException(connection, e);
+        }
+      }
+    })), client);
     maxFrameSize = variant.maxFrameSize();
     pushObserver = builder.pushObserver;
 
@@ -519,6 +517,7 @@ public void sendConnectionPreface() throws IOException {
 
   public static class Builder {
     private Connection connection;
+    private ConnectionObserver connectionObserver;
     private String hostName;
     private Socket socket;
     private IncomingStreamHandler handler = IncomingStreamHandler.REFUSE_INCOMING_STREAMS;
@@ -526,16 +525,15 @@ public void sendConnectionPreface() throws IOException {
     private SpdyPushObserver pushObserver = SpdyPushObserver.CANCEL;
     private boolean client;
 
-    public Builder(Connection connection, boolean client, Socket socket) throws IOException {
-      this(connection, ((InetSocketAddress) socket.getRemoteSocketAddress()).getHostName(), client, socket);
+    public Builder(boolean client, Socket socket) throws IOException {
+      this(((InetSocketAddress) socket.getRemoteSocketAddress()).getHostName(), client, socket);
     }
 
     /**
      * @param client true if this peer initiated the connection; false if this
      *     peer accepted the connection.
      */
-    public Builder(Connection connection, String hostName, boolean client, Socket socket) throws IOException {
-      this.connection = connection;
+    public Builder(String hostName, boolean client, Socket socket) throws IOException {
       this.hostName = hostName;
       this.client = client;
       this.socket = socket;
@@ -556,6 +554,16 @@ public Builder pushObserver(SpdyPushObserver pushObserver) {
       return this;
     }
 
+    public Builder connection(Connection connection) {
+      this.connection = connection;
+      return this;
+    }
+
+    public Builder connectionObserver(ConnectionObserver connectionObserver) {
+      this.connectionObserver = connectionObserver;
+      return this;
+    }
+
     public SpdyConnection build() throws IOException {
       return new SpdyConnection(this);
     }
@@ -578,8 +586,8 @@ private Reader() {
       try {
         frameReader = variant.newReader(Okio.buffer(Okio.source(socket, new IOExceptionObserver() {
                 public void onIOException(IOException e) {
-                    if (connectionObserver != null) {
-                        connectionObserver.onIOException(SpdyConnection.this.connection, e);
+                        if (SpdyConnection.this.connectionObserver != null) {
+                            SpdyConnection.this.connectionObserver.onIOException(SpdyConnection.this.connection, e);
                     }
                 }
             })), client);
@@ -603,7 +611,7 @@ public void onIOException(IOException e) {
     }
 
     @Override public void data(boolean inFinished, int streamId, BufferedSource source, int length)
-        throws IOException {
+      throws IOException {
       SpdyStream dataStream = getStream(streamId);
       if (dataStream == null) {
         writeSynResetLater(streamId, ErrorCode.INVALID_STREAM);
@@ -617,7 +625,7 @@ public void onIOException(IOException e) {
     }
 
     @Override public void headers(boolean outFinished, boolean inFinished, int streamId,
-        int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {
+      int associatedStreamId, List<Header> headerBlock, HeadersMode headersMode) {
       SpdyStream stream;
       SpdyStream associated = null;
       synchronized (SpdyConnection.this) {
@@ -727,7 +735,8 @@ public void onIOException(IOException e) {
 
     private void ackSettingsLater() {
       executor.submit(new NamedRunnable("OkHttp %s ACK Settings", hostName) {
-        @Override public void execute() {
+        @Override
+        public void execute() {
           try {
             frameWriter.ackSettings();
           } catch (IOException ignored) {
@@ -752,8 +761,9 @@ private void ackSettingsLater() {
       }
     }
 
-    @Override public void goAway(int lastGoodStreamId, ErrorCode errorCode, ByteString debugData) {
-      if (debugData.size() > 0) { // TODO: log the debugData
+     @Override public void goAway(int lastGoodStreamId, ErrorCode errorCode, ByteString debugData) {
+      if (debugData.size() > 0) {
+        // TODO: log the debugData
       }
       synchronized (SpdyConnection.this) {
         shutdown = true;
@@ -788,17 +798,16 @@ private void ackSettingsLater() {
     }
 
     @Override public void priority(int streamId, int streamDependency, int weight,
-        boolean exclusive) {
+      boolean exclusive) {
       // TODO: honor priority.
     }
 
-    @Override
-    public void pushPromise(int streamId, int promisedStreamId, List<Header> requestHeaders) {
+    @Override public void pushPromise(int streamId, int promisedStreamId, List<Header> requestHeaders) {
       pushPromiseLater(promisedStreamId, requestHeaders);
     }
 
     @Override public void alternateService(int streamId, String origin, ByteString protocol,
-        String host, int port, long maxAge) {
+      String host, int port, long maxAge) {
       // TODO: register alternate service.
     }
   }
