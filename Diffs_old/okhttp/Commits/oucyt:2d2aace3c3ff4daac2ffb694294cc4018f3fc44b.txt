diff --git a/okhttp/src/main/java/okhttp3/ConnectionPool.java b/okhttp/src/main/java/okhttp3/ConnectionPool.java
index d2f6c744a4..68d89f3981 100644
--- a/okhttp/src/main/java/okhttp3/ConnectionPool.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java
@@ -42,6 +42,7 @@
  * Manages reuse of HTTP and HTTP/2 connections for reduced network latency. HTTP requests that
  * share the same {@link Address} may share a {@link Connection}. This class implements the policy
  * of which connections to keep open for future use.
+ * https://www.jianshu.com/p/e6fccf55ca01
  */
 public final class ConnectionPool {
     /**
@@ -62,14 +63,16 @@
         @Override
         public void run() {
             while (true) {
+                // 清理空闲connection，并返回距离下一次清理的时间
                 long waitNanos = ConnectionPool.this.cleanup(System.nanoTime());
+                // 空池，终止清理线程
                 if (waitNanos == -1) return;
                 if (waitNanos > 0) {
                     long waitMillis = waitNanos / 1000000L;
                     waitNanos -= (waitMillis * 1000000L);
                     synchronized (ConnectionPool.this) {
                         try {
-                            // 线程休眠一段时间
+                            // 线程休眠指定时长重新唤醒
                             ConnectionPool.this.wait(waitMillis, (int) waitNanos);
                         } catch (InterruptedException ignored) {
                         }
@@ -153,6 +156,7 @@ Socket deduplicate(Address address, StreamAllocation streamAllocation) {
 
     void put(RealConnection connection) {
         assert (Thread.holdsLock(this));
+        // 表明put方法已取得对象锁
         if (!cleanupRunning) {
             cleanupRunning = true;
             // 触发清理任务
@@ -168,6 +172,7 @@ void put(RealConnection connection) {
     boolean connectionBecameIdle(RealConnection connection) {
         assert (Thread.holdsLock(this));
         if (connection.noNewStreams || maxIdleConnections == 0) {
+            // 连接不可用或者禁止空闲线程
             connections.remove(connection);
             return true;
         } else {
@@ -185,6 +190,7 @@ public void evictAll() {
             for (Iterator<RealConnection> i = connections.iterator(); i.hasNext(); ) {
                 RealConnection connection = i.next();
                 if (connection.allocations.isEmpty()) {
+                    // 禁止在连接上创建新stream
                     connection.noNewStreams = true;
                     evictedConnections.add(connection);
                     i.remove();
