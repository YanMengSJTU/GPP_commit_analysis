diff --git a/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
index b8a346c03a..ef4edd63d4 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
@@ -38,6 +38,7 @@ public ConnectInterceptor(OkHttpClient client) {
     StreamAllocation streamAllocation = realChain.streamAllocation();
 
     // We need the network to satisfy this request. Possibly for validating a conditional GET.
+    // 非 GET 请求做进一步检查
     boolean doExtensiveHealthChecks = !request.method().equals("GET");
     HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);
     RealConnection connection = streamAllocation.connection();
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
index 2e0458a8cf..a63fcc26f1 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
@@ -519,6 +519,7 @@ public boolean isHealthy(boolean doExtensiveChecks) {
         try {
           socket.setSoTimeout(1);
           if (source.exhausted()) {
+            // 流读取完了；socket 关闭了
             return false; // Stream is exhausted; socket is closed.
           }
           return true;
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
index 8a04a190eb..60b7b8fe3b 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
@@ -163,6 +163,7 @@ private RealConnection findHealthyConnection(int connectTimeout, int readTimeout
 
             // Do a (potentially slow) check to confirm that the pooled connection is still good. If it
             // isn't, take it out of the pool and start again.
+            // 检查连接池中的连接是否良好，如果不好，从池中取出，并重连
             if (!candidate.isHealthy(doExtensiveHealthChecks)) {
                 noNewStreams();
                 continue;
