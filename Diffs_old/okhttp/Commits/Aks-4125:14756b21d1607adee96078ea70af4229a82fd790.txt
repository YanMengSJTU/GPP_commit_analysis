diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
index e088ea7c64..477a77ddba 100644
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
@@ -125,6 +125,8 @@ public HttpLoggingInterceptor(Logger logger) {
 
   private volatile Level level = Level.NONE;
 
+  private boolean showMultipartLog = true;
+
   /** Change the level at which this interceptor logs. */
   public HttpLoggingInterceptor setLevel(Level level) {
     if (level == null) throw new NullPointerException("level == null. Use Level.NONE instead.");
@@ -136,6 +138,23 @@ public Level getLevel() {
     return level;
   }
 
+  /**
+   *
+   * @return check mutipart logging is enabled or not
+   */
+  public boolean isShowMultipartLog() {
+    return showMultipartLog;
+  }
+
+  /**
+   *
+   * @param showMultipartLogging set to false to display multipart length in integer instead of non-plain text (by default true)]
+   *        set to false before you attach logging interceptor.
+   */
+  public void setShowMultipartLog(boolean showMultipartLogging) {
+    this.showMultipartLog = showMultipartLogging;
+  }
+
   @Override public Response intercept(Chain chain) throws IOException {
     Level level = this.level;
 
@@ -197,7 +216,11 @@ public Level getLevel() {
 
         logger.log("");
         if (isPlaintext(buffer)) {
-          logger.log(buffer.readString(charset));
+          if (showMultipartLog)
+            logger.log(buffer.readString(charset));
+          else
+            logger.log(String.valueOf("Multipart length transmitted->"+buffer.readString(charset).length()));
+
           logger.log("--> END " + request.method()
               + " (" + requestBody.contentLength() + "-byte body)");
         } else {
