diff --git a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
index 69229bf3fa..cdc41ab2e3 100644
--- a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
+++ b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
@@ -222,7 +222,7 @@ class OkHttpTest {
       moshi.adapter(HowsMySslResults::class.java).fromJson(response.body!!.string())!!
     }
 
-    Platform.get().log(Platform.WARN, "results $results", null)
+    Platform.get().log("results $results", Platform.WARN)
 
     assertTrue(results.session_ticket_supported)
     assertEquals("Probably Okay", results.rating)
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java
index 78a6b7994e..185dde5bfc 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java
+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java
@@ -125,7 +125,7 @@ private SSLSocket doSsl(Socket socket) throws IOException {
         send404(stream, path);
       }
     } catch (IOException e) {
-      Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null);
+      Platform.get().log("Failure serving Http2Stream: " + e.getMessage(), INFO, null);
     }
   }
 
diff --git a/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt
index bb4d37cfc2..e8a35ed0cf 100644
--- a/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt
+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.kt
@@ -204,7 +204,7 @@ class DnsOverHttps internal constructor(
   @Throws(Exception::class)
   private fun readResponse(hostname: String, response: Response): List<InetAddress> {
     if (response.cacheResponse == null && response.protocol !== Protocol.HTTP_2) {
-      Platform.get().log(Platform.WARN, "Incorrect protocol: ${response.protocol}", null)
+      Platform.get().log("Incorrect protocol: ${response.protocol}", Platform.WARN)
     }
 
     response.use {
diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
index 745a860a9f..e346c74f70 100644
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
@@ -21,7 +21,6 @@ import okhttp3.OkHttpClient
 import okhttp3.Response
 import okhttp3.internal.http.promisesBody
 import okhttp3.internal.platform.Platform
-import okhttp3.internal.platform.Platform.Companion.INFO
 import okio.Buffer
 import okio.GzipSource
 import java.io.IOException
@@ -113,7 +112,7 @@ class HttpLoggingInterceptor @JvmOverloads constructor(
       @JvmField
       val DEFAULT: Logger = object : Logger {
         override fun log(message: String) {
-          Platform.get().log(INFO, message, null)
+          Platform.get().log(message)
         }
       }
     }
diff --git a/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java
index bc87c5a644..c96672d273 100644
--- a/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java
+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceRecorder.java
@@ -31,24 +31,24 @@
   private final BlockingQueue<Object> events = new LinkedBlockingDeque<>();
 
   @Override public void onOpen(EventSource eventSource, Response response) {
-    Platform.get().log(Platform.INFO, "[ES] onOpen", null);
+    Platform.get().log("[ES] onOpen", Platform.INFO, null);
     events.add(new Open(eventSource, response));
   }
 
   @Override public void onEvent(EventSource eventSource, @Nullable String id, @Nullable String type,
       String data) {
-    Platform.get().log(Platform.INFO, "[ES] onEvent", null);
+    Platform.get().log("[ES] onEvent", Platform.INFO, null);
     events.add(new Event(id, type, data));
   }
 
   @Override public void onClosed(EventSource eventSource) {
-    Platform.get().log(Platform.INFO, "[ES] onClosed", null);
+    Platform.get().log("[ES] onClosed", Platform.INFO, null);
     events.add(new Closed());
   }
 
   @Override
   public void onFailure(EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {
-    Platform.get().log(Platform.INFO, "[ES] onFailure", t);
+    Platform.get().log("[ES] onFailure", Platform.INFO, t);
     events.add(new Failure(t, response));
   }
 
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.kt b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.kt
index 0b3f7afa85..ea8b2fb1ba 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.kt
+++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetCookieJar.kt
@@ -37,7 +37,7 @@ class JavaNetCookieJar(private val cookieHandler: CookieHandler) : CookieJar {
     try {
       cookieHandler.put(url.toUri(), multimap)
     } catch (e: IOException) {
-      Platform.get().log(WARN, "Saving cookies failed for " + url.resolve("/...")!!, e)
+      Platform.get().log("Saving cookies failed for " + url.resolve("/...")!!, WARN, e)
     }
   }
 
@@ -46,7 +46,7 @@ class JavaNetCookieJar(private val cookieHandler: CookieHandler) : CookieJar {
       // The RI passes all headers. We don't have 'em, so we don't pass 'em!
       cookieHandler.get(url.toUri(), emptyMap<String, List<String>>())
     } catch (e: IOException) {
-      Platform.get().log(WARN, "Loading cookies failed for " + url.resolve("/...")!!, e)
+      Platform.get().log("Loading cookies failed for " + url.resolve("/...")!!, WARN, e)
       return emptyList()
     }
 
diff --git a/okhttp/src/main/java/okhttp3/RealCall.kt b/okhttp/src/main/java/okhttp3/RealCall.kt
index 0e150e0be6..0442d6798b 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.kt
+++ b/okhttp/src/main/java/okhttp3/RealCall.kt
@@ -139,7 +139,7 @@ internal class RealCall private constructor(
         } catch (e: IOException) {
           if (signalledCallback) {
             // Do not signal the callback twice!
-            Platform.get().log(INFO, "Callback failure for ${toLoggableString()}", e)
+            Platform.get().log("Callback failure for ${toLoggableString()}", INFO, e)
           } else {
             responseCallback.onFailure(this@RealCall, e)
           }
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.kt b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.kt
index b9321de78c..ea756eed0f 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.kt
+++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.kt
@@ -231,8 +231,9 @@ class DiskLruCache internal constructor(
         initialized = true
         return
       } catch (journalIsCorrupt: IOException) {
-        Platform.get().log(WARN,
+        Platform.get().log(
             "DiskLruCache $directory is corrupt: ${journalIsCorrupt.message}, removing",
+            WARN,
             journalIsCorrupt)
       }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.kt b/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.kt
index b9cf66e682..f87da0117d 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.kt
@@ -64,7 +64,7 @@ fun Headers.parseChallenges(headerName: String): List<Challenge> {
       try {
         header.readChallengeHeader(result)
       } catch (e: EOFException) {
-        Platform.get().log(Platform.WARN, "Unable to parse challenge", e)
+        Platform.get().log("Unable to parse challenge", Platform.WARN, e)
       }
     }
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
index 54cd7fae83..d1cf7ca9d6 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
@@ -643,7 +643,7 @@ class Http2Connection internal constructor(builder: Builder) : Closeable {
             try {
               listener.onStream(newStream)
             } catch (e: IOException) {
-              Platform.get().log(INFO, "Http2Connection.Listener failure for $connectionName", e)
+              Platform.get().log("Http2Connection.Listener failure for $connectionName", INFO, e)
               ignoreIoExceptions {
                 newStream.close(ErrorCode.PROTOCOL_ERROR, e)
               }
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Android10Platform.kt b/okhttp/src/main/java/okhttp3/internal/platform/Android10Platform.kt
index 501699d6f3..fda2a2c105 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/Android10Platform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/Android10Platform.kt
@@ -51,7 +51,7 @@ class Android10Platform : Platform() {
       // No TLS extensions if the socket class is custom.
       socketAdapters.find { it.matchesSocket(sslSocket) }?.getSelectedProtocol(sslSocket)
 
-  override fun log(level: Int, message: String, t: Throwable?) {
+  override fun log(message: String, level: Int, t: Throwable?) {
     androidLog(level, message, t)
   }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
index 80567048d0..c612a7ae6c 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
@@ -83,7 +83,7 @@ class AndroidPlatform : Platform() {
       // No TLS extensions if the socket class is custom.
       socketAdapters.find { it.matchesSocket(sslSocket) }?.getSelectedProtocol(sslSocket)
 
-  override fun log(level: Int, message: String, t: Throwable?) {
+  override fun log(message: String, level: Int, t: Throwable?) {
     androidLog(level, message, t)
   }
 
@@ -93,7 +93,7 @@ class AndroidPlatform : Platform() {
     val reported = closeGuard.warnIfOpen(stackTrace)
     if (!reported) {
       // Unable to report via CloseGuard. As a last-ditch effort, send it to the logger.
-      log(WARN, message, null)
+      log(message, WARN)
     }
   }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatform.kt b/okhttp/src/main/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatform.kt
index 602b736c5b..65ba5c3062 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk8WithJettyBootPlatform.kt
@@ -61,9 +61,7 @@ class Jdk8WithJettyBootPlatform(
     try {
       val provider = Proxy.getInvocationHandler(getMethod.invoke(null, sslSocket)) as AlpnProvider
       if (!provider.unsupported && provider.selected == null) {
-        Platform.get().log(INFO,
-            "ALPN callback dropped: HTTP/2 is disabled. " + "Is alpn-boot on the boot class path?",
-            null)
+        log("ALPN callback dropped: HTTP/2 is disabled. " + "Is alpn-boot on the boot class path?")
         return null
       }
       return if (provider.unsupported) null else provider.selected
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
index 2102d5b308..aa625412a8 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
@@ -116,7 +116,7 @@ open class Platform {
     socket.connect(address, connectTimeout)
   }
 
-  open fun log(level: Int, message: String, t: Throwable?) {
+  open fun log(message: String, level: Int = INFO, t: Throwable? = null) {
     val logLevel = if (level == WARN) Level.WARNING else Level.INFO
     logger.log(logLevel, message, t)
   }
@@ -141,7 +141,7 @@ open class Platform {
       logMessage += " To see where this was allocated, set the OkHttpClient logger level to " +
           "FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);"
     }
-    log(WARN, logMessage, stackTrace as Throwable?)
+    log(logMessage, WARN, stackTrace as Throwable?)
   }
 
   open fun buildCertificateChainCleaner(trustManager: X509TrustManager): CertificateChainCleaner =
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/DeferredSocketAdapter.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/DeferredSocketAdapter.kt
index c3cef3dbea..b008e99c8a 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/android/DeferredSocketAdapter.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/DeferredSocketAdapter.kt
@@ -64,7 +64,7 @@ class DeferredSocketAdapter(private val socketPackage: String) : SocketAdapter {
         delegate = AndroidSocketAdapter(possibleClass)
       } catch (e: Exception) {
         Platform.get()
-            .log(Platform.WARN, "Failed to initialize DeferredSocketAdapter $socketPackage", e)
+            .log("Failed to initialize DeferredSocketAdapter $socketPackage", Platform.WARN, e)
       }
 
       initialized = true
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/util.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/util.kt
index 4a3bf12e42..71a701232e 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/android/util.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/util.kt
@@ -22,7 +22,10 @@ private const val MAX_LOG_LENGTH = 4000
 
 internal fun androidLog(level: Int, message: String, t: Throwable?) {
   var logMessage = message
-  val logLevel = if (level == Platform.WARN) Log.WARN else Log.DEBUG
+  val logLevel = when (level) {
+    Platform.WARN -> Log.WARN
+    else -> Log.DEBUG
+  }
   if (t != null) logMessage = logMessage + '\n'.toString() + Log.getStackTraceString(t)
 
   // Split by line, then ensure each line can fit into Log's maximum length.
diff --git a/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.kt b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.kt
index 9021066066..8e4a4c367c 100644
--- a/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.kt
+++ b/okhttp/src/main/java/okhttp3/internal/publicsuffix/PublicSuffixDatabase.kt
@@ -178,7 +178,7 @@ class PublicSuffixDatabase {
           Thread.interrupted() // Temporarily clear the interrupted state.
           interrupted = true
         } catch (e: IOException) {
-          Platform.get().log(Platform.WARN, "Failed to read public suffix list", e)
+          Platform.get().log("Failed to read public suffix list", Platform.WARN, e)
           return
         }
       }
diff --git a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
index 0ab1d1857b..17a43c5fa7 100644
--- a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
+++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
@@ -44,7 +44,7 @@ public void setNextEventDelegate(WebSocketListener delegate) {
   }
 
   @Override public void onOpen(WebSocket webSocket, Response response) {
-    Platform.get().log(Platform.INFO, "[WS " + name + "] onOpen", null);
+    Platform.get().log("[WS " + name + "] onOpen", Platform.INFO, null);
 
     WebSocketListener delegate = this.delegate;
     if (delegate != null) {
@@ -56,7 +56,7 @@ public void setNextEventDelegate(WebSocketListener delegate) {
   }
 
   @Override public void onMessage(WebSocket webSocket, ByteString bytes) {
-    Platform.get().log(Platform.INFO, "[WS " + name + "] onMessage", null);
+    Platform.get().log("[WS " + name + "] onMessage", Platform.INFO, null);
 
     WebSocketListener delegate = this.delegate;
     if (delegate != null) {
@@ -69,7 +69,7 @@ public void setNextEventDelegate(WebSocketListener delegate) {
   }
 
   @Override public void onMessage(WebSocket webSocket, String text) {
-    Platform.get().log(Platform.INFO, "[WS " + name + "] onMessage", null);
+    Platform.get().log("[WS " + name + "] onMessage", Platform.INFO, null);
 
     WebSocketListener delegate = this.delegate;
     if (delegate != null) {
@@ -82,7 +82,7 @@ public void setNextEventDelegate(WebSocketListener delegate) {
   }
 
   @Override public void onClosing(WebSocket webSocket, int code, String reason) {
-    Platform.get().log(Platform.INFO, "[WS " + name + "] onClosing " + code, null);
+    Platform.get().log("[WS " + name + "] onClosing " + code, Platform.INFO, null);
 
     WebSocketListener delegate = this.delegate;
     if (delegate != null) {
@@ -94,7 +94,7 @@ public void setNextEventDelegate(WebSocketListener delegate) {
   }
 
   @Override public void onClosed(WebSocket webSocket, int code, String reason) {
-    Platform.get().log(Platform.INFO, "[WS " + name + "] onClosed " + code, null);
+    Platform.get().log("[WS " + name + "] onClosed " + code, Platform.INFO, null);
 
     WebSocketListener delegate = this.delegate;
     if (delegate != null) {
@@ -106,7 +106,7 @@ public void setNextEventDelegate(WebSocketListener delegate) {
   }
 
   @Override public void onFailure(WebSocket webSocket, Throwable t, @Nullable Response response)  {
-    Platform.get().log(Platform.INFO, "[WS " + name + "] onFailure", t);
+    Platform.get().log("[WS " + name + "] onFailure", Platform.INFO, t);
 
     WebSocketListener delegate = this.delegate;
     if (delegate != null) {
