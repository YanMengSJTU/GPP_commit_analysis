diff --git a/pom.xml b/pom.xml
index ef62995044..55cda1081a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,7 +20,7 @@
     <okio.version>1.17.4</okio.version>
 
     <!-- Test Dependencies -->
-    <junit.version>4.12</junit.version>
+    <junit.version>5.5.2</junit.version>
     <assertj.version>3.13.1</assertj.version>
   </properties>
 
@@ -30,10 +30,24 @@
       <artifactId>okio</artifactId>
       <version>${okio.version}</version>
     </dependency>
+
+    <dependency>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-api</artifactId>
+      <version>${junit.version}</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-params</artifactId>
+      <version>${junit.version}</version>
+      <scope>test</scope>
+    </dependency>
     <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
+      <groupId>org.junit.jupiter</groupId>
+      <artifactId>junit-jupiter-engine</artifactId>
       <version>${junit.version}</version>
+      <scope>test</scope>
     </dependency>
     <dependency>
       <groupId>org.assertj</groupId>
diff --git a/src/test/java/net/disy/commons/web/PublicSuffixDatabaseTest.java b/src/test/java/net/disy/commons/web/PublicSuffixDatabaseTest.java
index 6606ce2955..d4921c6c2c 100644
--- a/src/test/java/net/disy/commons/web/PublicSuffixDatabaseTest.java
+++ b/src/test/java/net/disy/commons/web/PublicSuffixDatabaseTest.java
@@ -16,12 +16,12 @@
 package net.disy.commons.web;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 
 import java.io.IOException;
 import java.io.InputStream;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import okio.Buffer;
 import okio.BufferedSource;
@@ -31,7 +31,8 @@
 public final class PublicSuffixDatabaseTest {
   private final PublicSuffixDatabase publicSuffixDatabase = new PublicSuffixDatabase();
 
-  @Test public void longestMatchWins() {
+  @Test
+  public void longestMatchWins() {
     Buffer buffer = new Buffer()
         .writeUtf8("com\n")
         .writeUtf8("my.square.com\n")
diff --git a/src/test/java/net/disy/commons/web/UrlComponentEncodingTester.java b/src/test/java/net/disy/commons/web/UrlComponentEncodingTester.java
index cf85723c94..90866d2874 100644
--- a/src/test/java/net/disy/commons/web/UrlComponentEncodingTester.java
+++ b/src/test/java/net/disy/commons/web/UrlComponentEncodingTester.java
@@ -15,7 +15,7 @@
  */
 package net.disy.commons.web;
 
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 
 import java.net.URI;
 import java.net.URL;
diff --git a/src/test/java/net/disy/commons/web/WebUrlTest.java b/src/test/java/net/disy/commons/web/WebUrlTest.java
index a54330982b..7f5d482b11 100644
--- a/src/test/java/net/disy/commons/web/WebUrlTest.java
+++ b/src/test/java/net/disy/commons/web/WebUrlTest.java
@@ -17,357 +17,391 @@
 
 import static java.util.Collections.singletonList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URL;
-import java.util.Arrays;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.LinkedHashSet;
+import java.util.List;
 
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.EnumSource;
 
 import net.disy.commons.web.UrlComponentEncodingTester.Component;
 import net.disy.commons.web.UrlComponentEncodingTester.Encoding;
 
-@RunWith(Parameterized.class)
 public final class WebUrlTest {
-  @Parameterized.Parameters(name = "Use get = {0}")
-  public static Collection<Object[]> parameters() {
-    return Arrays.asList(
-        new Object[] { true },
-        new Object[] { false }
-    );
+
+  enum WebUrlFactoryMethod {
+    GET, PARSE
   }
 
-  @Parameterized.Parameter
-  public boolean useGet;
+  @Retention(RetentionPolicy.RUNTIME)
+  @ParameterizedTest(name = "Create WebUrl with {arguments}")
+  @EnumSource(value = WebUrlFactoryMethod.class)
+  public @interface ParameterizedTestWithWebUrlFactory { }
 
-  WebUrl parse(String url) {
-    return useGet
+  private static WebUrl create(String url, WebUrlFactoryMethod method) {
+    return method == WebUrlFactoryMethod.GET
         ? WebUrl.get(url)
         : WebUrl.parse(url).orElse(null);
   }
 
-  @Test public void parseTrimsAsciiWhitespace() throws Exception {
-    WebUrl expected = parse("http://host/");
+  private static void assertInvalid(String string, String exceptionMessage, WebUrlFactoryMethod method) {
+    if (method == WebUrlFactoryMethod.GET) {
+      try {
+        create(string, method);
+        fail("Expected get of \"" + string + "\" to throw with: " + exceptionMessage);
+      } catch (IllegalArgumentException e) {
+        assertThat(e.getMessage()).isEqualTo(exceptionMessage);
+      }
+    } else {
+      assertThat(create(string, method)).overridingErrorMessage(string).isNull();
+    }
+  }
+
+
+  @ParameterizedTestWithWebUrlFactory
+  public void parseTrimsAsciiWhitespace(WebUrlFactoryMethod method) {
+    WebUrl expected = create("http://host/", method);
     // Leading.
-    assertThat(parse("http://host/\f\n\t \r")).isEqualTo(expected);
+    assertThat(create("http://host/\f\n\t \r", method)).isEqualTo(expected);
     // Trailing.
-    assertThat(parse("\r\n\f \thttp://host/")).isEqualTo(expected);
+    assertThat(create("\r\n\f \thttp://host/", method)).isEqualTo(expected);
     // Both.
-    assertThat(parse(" http://host/ ")).isEqualTo(expected);
+    assertThat(create(" http://host/ ", method)).isEqualTo(expected);
     // Both.
-    assertThat(parse("    http://host/    ")).isEqualTo(expected);
-    assertThat(parse("http://host/").resolve("   ")).isEqualTo(expected);
-    assertThat(parse("http://host/").resolve("  .  ")).isEqualTo(expected);
+    assertThat(create("    http://host/    ", method)).isEqualTo(expected);
+    assertThat(create("http://host/", method).resolve("   ")).isEqualTo(expected);
+    assertThat(create("http://host/", method).resolve("  .  ")).isEqualTo(expected);
   }
 
-  @Test public void parseHostAsciiNonPrintable() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void parseHostAsciiNonPrintable(WebUrlFactoryMethod method) {
     String host = "host\u0001";
-    assertInvalid("http://" + host + "/", "Invalid URL host: \"host\u0001\"");
+    assertInvalid("http://" + host + "/", "Invalid URL host: \"host\u0001\"", method);
     // TODO make exception message escape non-printable characters
   }
 
-  @Test public void parseDoesNotTrimOtherWhitespaceCharacters() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void parseDoesNotTrimOtherWhitespaceCharacters(WebUrlFactoryMethod method) {
     // Whitespace characters list from Google's Guava team: http://goo.gl/IcR9RD
     // line tabulation
-    assertThat(parse("http://h/\u000b").encodedPath()).isEqualTo("/%0B");
+    assertThat(create("http://h/\u000b", method).encodedPath()).isEqualTo("/%0B");
     // information separator 4
-    assertThat(parse("http://h/\u001c").encodedPath()).isEqualTo("/%1C");
+    assertThat(create("http://h/\u001c", method).encodedPath()).isEqualTo("/%1C");
     // information separator 3
-    assertThat(parse("http://h/\u001d").encodedPath()).isEqualTo("/%1D");
+    assertThat(create("http://h/\u001d", method).encodedPath()).isEqualTo("/%1D");
     // information separator 2
-    assertThat(parse("http://h/\u001e").encodedPath()).isEqualTo("/%1E");
+    assertThat(create("http://h/\u001e", method).encodedPath()).isEqualTo("/%1E");
     // information separator 1
-    assertThat(parse("http://h/\u001f").encodedPath()).isEqualTo("/%1F");
+    assertThat(create("http://h/\u001f", method).encodedPath()).isEqualTo("/%1F");
     // next line
-    assertThat(parse("http://h/\u0085").encodedPath()).isEqualTo("/%C2%85");
+    assertThat(create("http://h/\u0085", method).encodedPath()).isEqualTo("/%C2%85");
     // non-breaking space
-    assertThat(parse("http://h/\u00a0").encodedPath()).isEqualTo("/%C2%A0");
+    assertThat(create("http://h/\u00a0", method).encodedPath()).isEqualTo("/%C2%A0");
     // ogham space mark
-    assertThat(parse("http://h/\u1680").encodedPath()).isEqualTo("/%E1%9A%80");
+    assertThat(create("http://h/\u1680", method).encodedPath()).isEqualTo("/%E1%9A%80");
     // mongolian vowel separator
-    assertThat(parse("http://h/\u180e").encodedPath()).isEqualTo("/%E1%A0%8E");
+    assertThat(create("http://h/\u180e", method).encodedPath()).isEqualTo("/%E1%A0%8E");
     // en quad
-    assertThat(parse("http://h/\u2000").encodedPath()).isEqualTo("/%E2%80%80");
+    assertThat(create("http://h/\u2000", method).encodedPath()).isEqualTo("/%E2%80%80");
     // em quad
-    assertThat(parse("http://h/\u2001").encodedPath()).isEqualTo("/%E2%80%81");
+    assertThat(create("http://h/\u2001", method).encodedPath()).isEqualTo("/%E2%80%81");
     // en space
-    assertThat(parse("http://h/\u2002").encodedPath()).isEqualTo("/%E2%80%82");
+    assertThat(create("http://h/\u2002", method).encodedPath()).isEqualTo("/%E2%80%82");
     // em space
-    assertThat(parse("http://h/\u2003").encodedPath()).isEqualTo("/%E2%80%83");
+    assertThat(create("http://h/\u2003", method).encodedPath()).isEqualTo("/%E2%80%83");
     // three-per-em space
-    assertThat(parse("http://h/\u2004").encodedPath()).isEqualTo("/%E2%80%84");
+    assertThat(create("http://h/\u2004", method).encodedPath()).isEqualTo("/%E2%80%84");
     // four-per-em space
-    assertThat(parse("http://h/\u2005").encodedPath()).isEqualTo("/%E2%80%85");
+    assertThat(create("http://h/\u2005", method).encodedPath()).isEqualTo("/%E2%80%85");
     // six-per-em space
-    assertThat(parse("http://h/\u2006").encodedPath()).isEqualTo("/%E2%80%86");
+    assertThat(create("http://h/\u2006", method).encodedPath()).isEqualTo("/%E2%80%86");
     // figure space
-    assertThat(parse("http://h/\u2007").encodedPath()).isEqualTo("/%E2%80%87");
+    assertThat(create("http://h/\u2007", method).encodedPath()).isEqualTo("/%E2%80%87");
     // punctuation space
-    assertThat(parse("http://h/\u2008").encodedPath()).isEqualTo("/%E2%80%88");
+    assertThat(create("http://h/\u2008", method).encodedPath()).isEqualTo("/%E2%80%88");
     // thin space
-    assertThat(parse("http://h/\u2009").encodedPath()).isEqualTo("/%E2%80%89");
+    assertThat(create("http://h/\u2009", method).encodedPath()).isEqualTo("/%E2%80%89");
     // hair space
-    assertThat(parse("http://h/\u200a").encodedPath()).isEqualTo("/%E2%80%8A");
+    assertThat(create("http://h/\u200a", method).encodedPath()).isEqualTo("/%E2%80%8A");
     // zero-width space
-    assertThat(parse("http://h/\u200b").encodedPath()).isEqualTo("/%E2%80%8B");
+    assertThat(create("http://h/\u200b", method).encodedPath()).isEqualTo("/%E2%80%8B");
     // zero-width non-joiner
-    assertThat(parse("http://h/\u200c").encodedPath()).isEqualTo("/%E2%80%8C");
+    assertThat(create("http://h/\u200c", method).encodedPath()).isEqualTo("/%E2%80%8C");
     // zero-width joiner
-    assertThat(parse("http://h/\u200d").encodedPath()).isEqualTo("/%E2%80%8D");
+    assertThat(create("http://h/\u200d", method).encodedPath()).isEqualTo("/%E2%80%8D");
     // left-to-right mark
-    assertThat(parse("http://h/\u200e").encodedPath()).isEqualTo("/%E2%80%8E");
+    assertThat(create("http://h/\u200e", method).encodedPath()).isEqualTo("/%E2%80%8E");
     // right-to-left mark
-    assertThat(parse("http://h/\u200f").encodedPath()).isEqualTo("/%E2%80%8F");
+    assertThat(create("http://h/\u200f", method).encodedPath()).isEqualTo("/%E2%80%8F");
     // line separator
-    assertThat(parse("http://h/\u2028").encodedPath()).isEqualTo("/%E2%80%A8");
+    assertThat(create("http://h/\u2028", method).encodedPath()).isEqualTo("/%E2%80%A8");
     // paragraph separator
-    assertThat(parse("http://h/\u2029").encodedPath()).isEqualTo("/%E2%80%A9");
+    assertThat(create("http://h/\u2029", method).encodedPath()).isEqualTo("/%E2%80%A9");
     // narrow non-breaking space
-    assertThat(parse("http://h/\u202f").encodedPath()).isEqualTo("/%E2%80%AF");
+    assertThat(create("http://h/\u202f", method).encodedPath()).isEqualTo("/%E2%80%AF");
     // medium mathematical space
-    assertThat(parse("http://h/\u205f").encodedPath()).isEqualTo("/%E2%81%9F");
+    assertThat(create("http://h/\u205f", method).encodedPath()).isEqualTo("/%E2%81%9F");
     // ideographic space
-    assertThat(parse("http://h/\u3000").encodedPath()).isEqualTo("/%E3%80%80");
-  }
-
-  @Test public void scheme() throws Exception {
-    assertThat(parse("http://host/")).isEqualTo(parse("http://host/"));
-    assertThat(parse("Http://host/")).isEqualTo(parse("http://host/"));
-    assertThat(parse("http://host/")).isEqualTo(parse("http://host/"));
-    assertThat(parse("HTTP://host/")).isEqualTo(parse("http://host/"));
-    assertThat(parse("https://host/")).isEqualTo(parse("https://host/"));
-    assertThat(parse("HTTPS://host/")).isEqualTo(parse("https://host/"));
-
-    assertInvalid("image640://480.png", "Expected URL scheme 'http' or 'https' but was 'image640'");
-    assertInvalid("httpp://host/", "Expected URL scheme 'http' or 'https' but was 'httpp'");
-    assertInvalid("0ttp://host/", "Expected URL scheme 'http' or 'https' but no colon was found");
-    assertInvalid("ht+tp://host/", "Expected URL scheme 'http' or 'https' but was 'ht+tp'");
-    assertInvalid("ht.tp://host/", "Expected URL scheme 'http' or 'https' but was 'ht.tp'");
-    assertInvalid("ht-tp://host/", "Expected URL scheme 'http' or 'https' but was 'ht-tp'");
-    assertInvalid("ht1tp://host/", "Expected URL scheme 'http' or 'https' but was 'ht1tp'");
-    assertInvalid("httpss://host/", "Expected URL scheme 'http' or 'https' but was 'httpss'");
-  }
-
-  @Test public void parseNoScheme() throws Exception {
-    assertInvalid("//host", "Expected URL scheme 'http' or 'https' but no colon was found");
-    assertInvalid("/path", "Expected URL scheme 'http' or 'https' but no colon was found");
-    assertInvalid("path", "Expected URL scheme 'http' or 'https' but no colon was found");
-    assertInvalid("?query", "Expected URL scheme 'http' or 'https' but no colon was found");
-    assertInvalid("#fragment", "Expected URL scheme 'http' or 'https' but no colon was found");
-  }
-
-  @Test public void newBuilderResolve() throws Exception {
+    assertThat(create("http://h/\u3000", method).encodedPath()).isEqualTo("/%E3%80%80");
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void scheme(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/", method)).isEqualTo(create("http://host/", method));
+    assertThat(create("Http://host/", method)).isEqualTo(create("http://host/", method));
+    assertThat(create("http://host/", method)).isEqualTo(create("http://host/", method));
+    assertThat(create("HTTP://host/", method)).isEqualTo(create("http://host/", method));
+    assertThat(create("https://host/", method)).isEqualTo(create("https://host/", method));
+    assertThat(create("HTTPS://host/", method)).isEqualTo(create("https://host/", method));
+
+    assertInvalid("image640://480.png", "Expected URL scheme 'http' or 'https' but was 'image640'", method);
+    assertInvalid("httpp://host/", "Expected URL scheme 'http' or 'https' but was 'httpp'", method);
+    assertInvalid("0ttp://host/", "Expected URL scheme 'http' or 'https' but no colon was found", method);
+    assertInvalid("ht+tp://host/", "Expected URL scheme 'http' or 'https' but was 'ht+tp'", method);
+    assertInvalid("ht.tp://host/", "Expected URL scheme 'http' or 'https' but was 'ht.tp'", method);
+    assertInvalid("ht-tp://host/", "Expected URL scheme 'http' or 'https' but was 'ht-tp'", method);
+    assertInvalid("ht1tp://host/", "Expected URL scheme 'http' or 'https' but was 'ht1tp'", method);
+    assertInvalid("httpss://host/", "Expected URL scheme 'http' or 'https' but was 'httpss'", method);
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void parseNoScheme(WebUrlFactoryMethod method) {
+    assertInvalid("//host", "Expected URL scheme 'http' or 'https' but no colon was found", method);
+    assertInvalid("/path", "Expected URL scheme 'http' or 'https' but no colon was found", method);
+    assertInvalid("path", "Expected URL scheme 'http' or 'https' but no colon was found", method);
+    assertInvalid("?query", "Expected URL scheme 'http' or 'https' but no colon was found", method);
+    assertInvalid("#fragment", "Expected URL scheme 'http' or 'https' but no colon was found", method);
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void newBuilderResolve(WebUrlFactoryMethod method) {
     // Non-exhaustive tests because implementation is the same as resolve.
-    WebUrl base = parse("http://host/a/b");
-    assertThat(base.newBuilder("https://host2").build()).isEqualTo(parse("https://host2/"));
-    assertThat(base.newBuilder("//host2").build()).isEqualTo(parse("http://host2/"));
-    assertThat(base.newBuilder("/path").build()).isEqualTo(parse("http://host/path"));
-    assertThat(base.newBuilder("path").build()).isEqualTo(parse("http://host/a/path"));
-    assertThat(base.newBuilder("?query").build()).isEqualTo(parse("http://host/a/b?query"));
-    assertThat(base.newBuilder("#fragment").build()).isEqualTo(
-        parse("http://host/a/b#fragment"));
-    assertThat(base.newBuilder("").build()).isEqualTo(parse("http://host/a/b"));
+    WebUrl base = create("http://host/a/b", method);
+    assertThat(base.newBuilder("https://host2").build()).isEqualTo(create("https://host2/", method));
+    assertThat(base.newBuilder("//host2").build()).isEqualTo(create("http://host2/", method));
+    assertThat(base.newBuilder("/path").build()).isEqualTo(create("http://host/path", method));
+    assertThat(base.newBuilder("path").build()).isEqualTo(create("http://host/a/path", method));
+    assertThat(base.newBuilder("?query").build()).isEqualTo(create("http://host/a/b?query", method));
+    assertThat(base.newBuilder("#fragment").build()).isEqualTo(create("http://host/a/b#fragment", method));
+    assertThat(base.newBuilder("").build()).isEqualTo(create("http://host/a/b", method));
     assertThat(base.newBuilder("ftp://b")).isNull();
     assertThat(base.newBuilder("ht+tp://b")).isNull();
     assertThat(base.newBuilder("ht-tp://b")).isNull();
     assertThat(base.newBuilder("ht.tp://b")).isNull();
   }
 
-  @Test public void redactedUrl() {
-    WebUrl baseWithPasswordAndUsername = parse("http://username:password@host/a/b#fragment");
-    WebUrl baseWithUsernameOnly = parse("http://username@host/a/b#fragment");
-    WebUrl baseWithPasswordOnly = parse("http://password@host/a/b#fragment");
+  @ParameterizedTestWithWebUrlFactory
+  public void redactedUrl(WebUrlFactoryMethod method) {
+    WebUrl baseWithPasswordAndUsername = create("http://username:password@host/a/b#fragment", method);
+    WebUrl baseWithUsernameOnly = create("http://username@host/a/b#fragment", method);
+    WebUrl baseWithPasswordOnly = create("http://password@host/a/b#fragment", method);
     assertThat(baseWithPasswordAndUsername.redact()).isEqualTo("http://host/...");
     assertThat(baseWithUsernameOnly.redact()).isEqualTo("http://host/...");
     assertThat(baseWithPasswordOnly.redact()).isEqualTo("http://host/...");
   }
 
-  @Test public void resolveNoScheme() throws Exception {
-    WebUrl base = parse("http://host/a/b");
-    assertThat(base.resolve("//host2")).isEqualTo(parse("http://host2/"));
-    assertThat(base.resolve("/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("path")).isEqualTo(parse("http://host/a/path"));
-    assertThat(base.resolve("?query")).isEqualTo(parse("http://host/a/b?query"));
-    assertThat(base.resolve("#fragment")).isEqualTo(parse("http://host/a/b#fragment"));
-    assertThat(base.resolve("")).isEqualTo(parse("http://host/a/b"));
-    assertThat(base.resolve("\\path")).isEqualTo(parse("http://host/path"));
+  @ParameterizedTestWithWebUrlFactory
+  public void resolveNoScheme(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b", method);
+    assertThat(base.resolve("//host2")).isEqualTo(create("http://host2/", method));
+    assertThat(base.resolve("/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("path")).isEqualTo(create("http://host/a/path", method));
+    assertThat(base.resolve("?query")).isEqualTo(create("http://host/a/b?query", method));
+    assertThat(base.resolve("#fragment")).isEqualTo(create("http://host/a/b#fragment", method));
+    assertThat(base.resolve("")).isEqualTo(create("http://host/a/b", method));
+    assertThat(base.resolve("\\path")).isEqualTo(create("http://host/path", method));
   }
 
-  @Test public void resolveUnsupportedScheme() throws Exception {
-    WebUrl base = parse("http://a/");
+  @ParameterizedTestWithWebUrlFactory
+  public void resolveUnsupportedScheme(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://a/", method);
     assertThat(base.resolve("ftp://b")).isNull();
     assertThat(base.resolve("ht+tp://b")).isNull();
     assertThat(base.resolve("ht-tp://b")).isNull();
     assertThat(base.resolve("ht.tp://b")).isNull();
   }
 
-  @Test public void resolveSchemeLikePath() throws Exception {
-    WebUrl base = parse("http://a/");
-    assertThat(base.resolve("http//b/")).isEqualTo(parse("http://a/http//b/"));
-    assertThat(base.resolve("ht+tp//b/")).isEqualTo(parse("http://a/ht+tp//b/"));
-    assertThat(base.resolve("ht-tp//b/")).isEqualTo(parse("http://a/ht-tp//b/"));
-    assertThat(base.resolve("ht.tp//b/")).isEqualTo(parse("http://a/ht.tp//b/"));
+  @ParameterizedTestWithWebUrlFactory
+  public void resolveSchemeLikePath(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://a/", method);
+    assertThat(base.resolve("http//b/")).isEqualTo(create("http://a/http//b/", method));
+    assertThat(base.resolve("ht+tp//b/")).isEqualTo(create("http://a/ht+tp//b/", method));
+    assertThat(base.resolve("ht-tp//b/")).isEqualTo(create("http://a/ht-tp//b/", method));
+    assertThat(base.resolve("ht.tp//b/")).isEqualTo(create("http://a/ht.tp//b/", method));
   }
 
   /** https://tools.ietf.org/html/rfc3986#section-5.4.1 */
-  @Test public void rfc3886NormalExamples() {
-    WebUrl url = parse("http://a/b/c/d;p?q");
+  @ParameterizedTestWithWebUrlFactory
+  public void rfc3886NormalExamples(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://a/b/c/d;p?q", method);
     // No 'g:' scheme in WebUrl.
     assertThat(url.resolve("g:h")).isNull();
-    assertThat(url.resolve("g")).isEqualTo(parse("http://a/b/c/g"));
-    assertThat(url.resolve("./g")).isEqualTo(parse("http://a/b/c/g"));
-    assertThat(url.resolve("g/")).isEqualTo(parse("http://a/b/c/g/"));
-    assertThat(url.resolve("/g")).isEqualTo(parse("http://a/g"));
-    assertThat(url.resolve("//g")).isEqualTo(parse("http://g"));
-    assertThat(url.resolve("?y")).isEqualTo(parse("http://a/b/c/d;p?y"));
-    assertThat(url.resolve("g?y")).isEqualTo(parse("http://a/b/c/g?y"));
-    assertThat(url.resolve("#s")).isEqualTo(parse("http://a/b/c/d;p?q#s"));
-    assertThat(url.resolve("g#s")).isEqualTo(parse("http://a/b/c/g#s"));
-    assertThat(url.resolve("g?y#s")).isEqualTo(parse("http://a/b/c/g?y#s"));
-    assertThat(url.resolve(";x")).isEqualTo(parse("http://a/b/c/;x"));
-    assertThat(url.resolve("g;x")).isEqualTo(parse("http://a/b/c/g;x"));
-    assertThat(url.resolve("g;x?y#s")).isEqualTo(parse("http://a/b/c/g;x?y#s"));
-    assertThat(url.resolve("")).isEqualTo(parse("http://a/b/c/d;p?q"));
-    assertThat(url.resolve(".")).isEqualTo(parse("http://a/b/c/"));
-    assertThat(url.resolve("./")).isEqualTo(parse("http://a/b/c/"));
-    assertThat(url.resolve("..")).isEqualTo(parse("http://a/b/"));
-    assertThat(url.resolve("../")).isEqualTo(parse("http://a/b/"));
-    assertThat(url.resolve("../g")).isEqualTo(parse("http://a/b/g"));
-    assertThat(url.resolve("../..")).isEqualTo(parse("http://a/"));
-    assertThat(url.resolve("../../")).isEqualTo(parse("http://a/"));
-    assertThat(url.resolve("../../g")).isEqualTo(parse("http://a/g"));
+    assertThat(url.resolve("g")).isEqualTo(create("http://a/b/c/g", method));
+    assertThat(url.resolve("./g")).isEqualTo(create("http://a/b/c/g", method));
+    assertThat(url.resolve("g/")).isEqualTo(create("http://a/b/c/g/", method));
+    assertThat(url.resolve("/g")).isEqualTo(create("http://a/g", method));
+    assertThat(url.resolve("//g")).isEqualTo(create("http://g", method));
+    assertThat(url.resolve("?y")).isEqualTo(create("http://a/b/c/d;p?y", method));
+    assertThat(url.resolve("g?y")).isEqualTo(create("http://a/b/c/g?y", method));
+    assertThat(url.resolve("#s")).isEqualTo(create("http://a/b/c/d;p?q#s", method));
+    assertThat(url.resolve("g#s")).isEqualTo(create("http://a/b/c/g#s", method));
+    assertThat(url.resolve("g?y#s")).isEqualTo(create("http://a/b/c/g?y#s", method));
+    assertThat(url.resolve(";x")).isEqualTo(create("http://a/b/c/;x", method));
+    assertThat(url.resolve("g;x")).isEqualTo(create("http://a/b/c/g;x", method));
+    assertThat(url.resolve("g;x?y#s")).isEqualTo(create("http://a/b/c/g;x?y#s", method));
+    assertThat(url.resolve("")).isEqualTo(create("http://a/b/c/d;p?q", method));
+    assertThat(url.resolve(".")).isEqualTo(create("http://a/b/c/", method));
+    assertThat(url.resolve("./")).isEqualTo(create("http://a/b/c/", method));
+    assertThat(url.resolve("..")).isEqualTo(create("http://a/b/", method));
+    assertThat(url.resolve("../")).isEqualTo(create("http://a/b/", method));
+    assertThat(url.resolve("../g")).isEqualTo(create("http://a/b/g", method));
+    assertThat(url.resolve("../..")).isEqualTo(create("http://a/", method));
+    assertThat(url.resolve("../../")).isEqualTo(create("http://a/", method));
+    assertThat(url.resolve("../../g")).isEqualTo(create("http://a/g", method));
   }
 
   /** https://tools.ietf.org/html/rfc3986#section-5.4.2 */
-  @Test public void rfc3886AbnormalExamples() {
-    WebUrl url = parse("http://a/b/c/d;p?q");
-    assertThat(url.resolve("../../../g")).isEqualTo(parse("http://a/g"));
-    assertThat(url.resolve("../../../../g")).isEqualTo(parse("http://a/g"));
-    assertThat(url.resolve("/./g")).isEqualTo(parse("http://a/g"));
-    assertThat(url.resolve("/../g")).isEqualTo(parse("http://a/g"));
-    assertThat(url.resolve("g.")).isEqualTo(parse("http://a/b/c/g."));
-    assertThat(url.resolve(".g")).isEqualTo(parse("http://a/b/c/.g"));
-    assertThat(url.resolve("g..")).isEqualTo(parse("http://a/b/c/g.."));
-    assertThat(url.resolve("..g")).isEqualTo(parse("http://a/b/c/..g"));
-    assertThat(url.resolve("./../g")).isEqualTo(parse("http://a/b/g"));
-    assertThat(url.resolve("./g/.")).isEqualTo(parse("http://a/b/c/g/"));
-    assertThat(url.resolve("g/./h")).isEqualTo(parse("http://a/b/c/g/h"));
-    assertThat(url.resolve("g/../h")).isEqualTo(parse("http://a/b/c/h"));
-    assertThat(url.resolve("g;x=1/./y")).isEqualTo(parse("http://a/b/c/g;x=1/y"));
-    assertThat(url.resolve("g;x=1/../y")).isEqualTo(parse("http://a/b/c/y"));
-    assertThat(url.resolve("g?y/./x")).isEqualTo(parse("http://a/b/c/g?y/./x"));
-    assertThat(url.resolve("g?y/../x")).isEqualTo(parse("http://a/b/c/g?y/../x"));
-    assertThat(url.resolve("g#s/./x")).isEqualTo(parse("http://a/b/c/g#s/./x"));
-    assertThat(url.resolve("g#s/../x")).isEqualTo(parse("http://a/b/c/g#s/../x"));
+  @ParameterizedTestWithWebUrlFactory
+  public void rfc3886AbnormalExamples(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://a/b/c/d;p?q", method);
+    assertThat(url.resolve("../../../g")).isEqualTo(create("http://a/g", method));
+    assertThat(url.resolve("../../../../g")).isEqualTo(create("http://a/g", method));
+    assertThat(url.resolve("/./g")).isEqualTo(create("http://a/g", method));
+    assertThat(url.resolve("/../g")).isEqualTo(create("http://a/g", method));
+    assertThat(url.resolve("g.")).isEqualTo(create("http://a/b/c/g.", method));
+    assertThat(url.resolve(".g")).isEqualTo(create("http://a/b/c/.g", method));
+    assertThat(url.resolve("g..")).isEqualTo(create("http://a/b/c/g..", method));
+    assertThat(url.resolve("..g")).isEqualTo(create("http://a/b/c/..g", method));
+    assertThat(url.resolve("./../g")).isEqualTo(create("http://a/b/g", method));
+    assertThat(url.resolve("./g/.")).isEqualTo(create("http://a/b/c/g/", method));
+    assertThat(url.resolve("g/./h")).isEqualTo(create("http://a/b/c/g/h", method));
+    assertThat(url.resolve("g/../h")).isEqualTo(create("http://a/b/c/h", method));
+    assertThat(url.resolve("g;x=1/./y")).isEqualTo(create("http://a/b/c/g;x=1/y", method));
+    assertThat(url.resolve("g;x=1/../y")).isEqualTo(create("http://a/b/c/y", method));
+    assertThat(url.resolve("g?y/./x")).isEqualTo(create("http://a/b/c/g?y/./x", method));
+    assertThat(url.resolve("g?y/../x")).isEqualTo(create("http://a/b/c/g?y/../x", method));
+    assertThat(url.resolve("g#s/./x")).isEqualTo(create("http://a/b/c/g#s/./x", method));
+    assertThat(url.resolve("g#s/../x")).isEqualTo(create("http://a/b/c/g#s/../x", method));
     // "http:g" also okay.
-    assertThat(url.resolve("http:g")).isEqualTo(parse("http://a/b/c/g"));
-  }
-
-  @Test public void parseAuthoritySlashCountDoesntMatter() throws Exception {
-    assertThat(parse("http:host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http://host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:/\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:///host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:\\//host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:/\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http://\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:\\\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:/\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:\\\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http:////host/path")).isEqualTo(parse("http://host/path"));
-  }
-
-  @Test public void resolveAuthoritySlashCountDoesntMatterWithDifferentScheme() throws Exception {
-    WebUrl base = parse("https://a/b/c");
-    assertThat(base.resolve("http:host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http://host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:/\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:///host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\//host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:/\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http://\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:/\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:////host/path")).isEqualTo(parse("http://host/path"));
-  }
-
-  @Test public void resolveAuthoritySlashCountMattersWithSameScheme() throws Exception {
-    WebUrl base = parse("http://a/b/c");
-    assertThat(base.resolve("http:host/path")).isEqualTo(parse("http://a/b/host/path"));
-    assertThat(base.resolve("http:/host/path")).isEqualTo(parse("http://a/host/path"));
-    assertThat(base.resolve("http:\\host/path")).isEqualTo(parse("http://a/host/path"));
-    assertThat(base.resolve("http://host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:/\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:///host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\//host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:/\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http://\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\\\/host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:/\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:\\\\\\host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(base.resolve("http:////host/path")).isEqualTo(parse("http://host/path"));
-  }
-
-  @Test public void username() throws Exception {
-    assertThat(parse("http://@host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http://user@host/path")).isEqualTo(parse("http://user@host/path"));
+    assertThat(url.resolve("http:g")).isEqualTo(create("http://a/b/c/g", method));
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void parseAuthoritySlashCountDoesntMatter(WebUrlFactoryMethod method) {
+    assertThat(create("http:host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:/host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:\\host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http://host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:\\/host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:/\\host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:\\\\host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:///host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:\\//host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:/\\/host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http://\\host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:\\\\/host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:/\\\\host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:\\\\\\host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http:////host/path", method)).isEqualTo(create("http://host/path", method));
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void resolveAuthoritySlashCountDoesntMatterWithDifferentScheme(WebUrlFactoryMethod method) {
+    WebUrl base = create("https://a/b/c", method);
+    assertThat(base.resolve("http:host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:/host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http://host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\/host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:/\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:///host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\//host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:/\\/host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http://\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\\\/host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:/\\\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\\\\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:////host/path")).isEqualTo(create("http://host/path", method));
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void resolveAuthoritySlashCountMattersWithSameScheme(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://a/b/c", method);
+    assertThat(base.resolve("http:host/path")).isEqualTo(create("http://a/b/host/path", method));
+    assertThat(base.resolve("http:/host/path")).isEqualTo(create("http://a/host/path", method));
+    assertThat(base.resolve("http:\\host/path")).isEqualTo(create("http://a/host/path", method));
+    assertThat(base.resolve("http://host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\/host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:/\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:///host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\//host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:/\\/host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http://\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\\\/host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:/\\\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:\\\\\\host/path")).isEqualTo(create("http://host/path", method));
+    assertThat(base.resolve("http:////host/path")).isEqualTo(create("http://host/path", method));
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void username(WebUrlFactoryMethod method) {
+    assertThat(create("http://@host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http://user@host/path", method)).isEqualTo(create("http://user@host/path", method));
   }
 
   /** Given multiple '@' characters, the last one is the delimiter. */
-  @Test public void authorityWithMultipleAtSigns() throws Exception {
-    WebUrl httpUrl = parse("http://foo@bar@baz/path");
+  @ParameterizedTestWithWebUrlFactory
+  public void authorityWithMultipleAtSigns(WebUrlFactoryMethod method) {
+    WebUrl httpUrl = create("http://foo@bar@baz/path", method);
     assertThat(httpUrl.username()).isEqualTo("foo@bar");
     assertThat(httpUrl.password()).isEqualTo("");
-    assertThat(httpUrl).isEqualTo(parse("http://foo%40bar@baz/path"));
+    assertThat(httpUrl).isEqualTo(create("http://foo%40bar@baz/path", method));
   }
 
   /** Given multiple ':' characters, the first one is the delimiter. */
-  @Test public void authorityWithMultipleColons() throws Exception {
-    WebUrl httpUrl = parse("http://foo:pass1@bar:pass2@baz/path");
+  @ParameterizedTestWithWebUrlFactory
+  public void authorityWithMultipleColons(WebUrlFactoryMethod method) {
+    WebUrl httpUrl = create("http://foo:pass1@bar:pass2@baz/path", method);
     assertThat(httpUrl.username()).isEqualTo("foo");
     assertThat(httpUrl.password()).isEqualTo("pass1@bar:pass2");
-    assertThat(httpUrl).isEqualTo(parse("http://foo:pass1%40bar%3Apass2@baz/path"));
+    assertThat(httpUrl).isEqualTo(create("http://foo:pass1%40bar%3Apass2@baz/path", method));
   }
 
-  @Test public void usernameAndPassword() throws Exception {
-    assertThat(parse("http://username:password@host/path")).isEqualTo(
-        parse("http://username:password@host/path"));
-    assertThat(parse("http://username:@host/path")).isEqualTo(
-        parse("http://username@host/path"));
+  @ParameterizedTestWithWebUrlFactory
+  public void usernameAndPassword(WebUrlFactoryMethod method) {
+    assertThat(create("http://username:password@host/path", method)).isEqualTo(
+        create("http://username:password@host/path", method));
+    assertThat(create("http://username:@host/path", method)).isEqualTo(
+        create("http://username@host/path", method));
   }
 
-  @Test public void passwordWithEmptyUsername() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void passwordWithEmptyUsername(WebUrlFactoryMethod method) {
     // Chrome doesn't mind, but Firefox rejects URLs with empty usernames and non-empty passwords.
-    assertThat(parse("http://:@host/path")).isEqualTo(parse("http://host/path"));
-    assertThat(parse("http://:password@@host/path").encodedPassword()).isEqualTo(
+    assertThat(create("http://:@host/path", method)).isEqualTo(create("http://host/path", method));
+    assertThat(create("http://:password@@host/path", method).encodedPassword()).isEqualTo(
         "password%40");
   }
 
-  @Test public void unprintableCharactersArePercentEncoded() throws Exception {
-    assertThat(parse("http://host/\u0000").encodedPath()).isEqualTo("/%00");
-    assertThat(parse("http://host/\u0008").encodedPath()).isEqualTo("/%08");
-    assertThat(parse("http://host/\ufffd").encodedPath()).isEqualTo("/%EF%BF%BD");
+  @ParameterizedTestWithWebUrlFactory
+  public void unprintableCharactersArePercentEncoded(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/\u0000", method).encodedPath()).isEqualTo("/%00");
+    assertThat(create("http://host/\u0008", method).encodedPath()).isEqualTo("/%08");
+    assertThat(create("http://host/\ufffd", method).encodedPath()).isEqualTo("/%EF%BF%BD");
   }
 
-  @Test public void usernameCharacters() throws Exception {
+  @Test public void usernameCharacters() {
     new UrlComponentEncodingTester()
         .override(Encoding.PERCENT, '[', ']', '{', '}', '|', '^', '\'', ';', '=', '@')
         .override(Encoding.SKIP, ':', '/', '\\', '?', '#')
@@ -375,7 +409,7 @@ WebUrl parse(String url) {
         .test(Component.USER);
   }
 
-  @Test public void passwordCharacters() throws Exception {
+  @Test public void passwordCharacters() {
     new UrlComponentEncodingTester()
         .override(Encoding.PERCENT, '[', ']', '{', '}', '|', '^', '\'', ':', ';', '=', '@')
         .override(Encoding.SKIP, '/', '\\', '?', '#')
@@ -383,230 +417,258 @@ WebUrl parse(String url) {
         .test(Component.PASSWORD);
   }
 
-  @Test public void hostContainsIllegalCharacter() throws Exception {
-    assertInvalid("http://\n/", "Invalid URL host: \"\n\"");
-    assertInvalid("http:// /", "Invalid URL host: \" \"");
-    assertInvalid("http://%20/", "Invalid URL host: \"%20\"");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostContainsIllegalCharacter(WebUrlFactoryMethod method) {
+    assertInvalid("http://\n/", "Invalid URL host: \"\n\"", method);
+    assertInvalid("http:// /", "Invalid URL host: \" \"", method);
+    assertInvalid("http://%20/", "Invalid URL host: \"%20\"", method);
   }
 
-  @Test public void hostnameLowercaseCharactersMappedDirectly() throws Exception {
-    assertThat(parse("http://abcd").host()).isEqualTo("abcd");
-    assertThat(parse("http://σ").host()).isEqualTo("xn--4xa");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostnameLowercaseCharactersMappedDirectly(WebUrlFactoryMethod method) {
+    assertThat(create("http://abcd", method).host()).isEqualTo("abcd");
+    assertThat(create("http://σ", method).host()).isEqualTo("xn--4xa");
   }
 
-  @Test public void hostnameUppercaseCharactersConvertedToLowercase() throws Exception {
-    assertThat(parse("http://ABCD").host()).isEqualTo("abcd");
-    assertThat(parse("http://Σ").host()).isEqualTo("xn--4xa");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostnameUppercaseCharactersConvertedToLowercase(WebUrlFactoryMethod method) {
+    assertThat(create("http://ABCD", method).host()).isEqualTo("abcd");
+    assertThat(create("http://Σ", method).host()).isEqualTo("xn--4xa");
   }
 
-  @Test public void hostnameIgnoredCharacters() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostnameIgnoredCharacters(WebUrlFactoryMethod method) {
     // The soft hyphen (­) should be ignored.
-    assertThat(parse("http://AB\u00adCD").host()).isEqualTo("abcd");
+    assertThat(create("http://AB\u00adCD", method).host()).isEqualTo("abcd");
   }
 
-  @Test public void hostnameMultipleCharacterMapping() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostnameMultipleCharacterMapping(WebUrlFactoryMethod method) {
     // Map the single character telephone symbol (℡) to the string "tel".
-    assertThat(parse("http://\u2121").host()).isEqualTo("tel");
+    assertThat(create("http://\u2121", method).host()).isEqualTo("tel");
   }
 
-  @Test public void hostnameMappingLastMappedCodePoint() throws Exception {
-    assertThat(parse("http://\uD87E\uDE1D").host()).isEqualTo("xn--pu5l");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostnameMappingLastMappedCodePoint(WebUrlFactoryMethod method) {
+    assertThat(create("http://\uD87E\uDE1D", method).host()).isEqualTo("xn--pu5l");
   }
 
-  @Ignore("The java.net.IDN implementation doesn't ignore characters that it should.")
-  @Test public void hostnameMappingLastIgnoredCodePoint() throws Exception {
-    assertThat(parse("http://ab\uDB40\uDDEFcd").host()).isEqualTo("abcd");
+  @Disabled("The java.net.IDN implementation doesn't ignore characters that it should.")
+  @ParameterizedTestWithWebUrlFactory
+  public void hostnameMappingLastIgnoredCodePoint(WebUrlFactoryMethod method) {
+    assertThat(create("http://ab\uDB40\uDDEFcd", method).host()).isEqualTo("abcd");
   }
 
-  @Test public void hostnameMappingLastDisallowedCodePoint() throws Exception {
-    assertInvalid("http://\uDBFF\uDFFF", "Invalid URL host: \"\uDBFF\uDFFF\"");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostnameMappingLastDisallowedCodePoint(WebUrlFactoryMethod method) {
+    assertInvalid("http://\uDBFF\uDFFF", "Invalid URL host: \"\uDBFF\uDFFF\"", method);
   }
 
-  @Test public void hostIpv6() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6(WebUrlFactoryMethod method) {
     // Square braces are absent from host()...
-    assertThat(parse("http://[::1]/").host()).isEqualTo("::1");
+    assertThat(create("http://[::1]/", method).host()).isEqualTo("::1");
 
     // ... but they're included in toString().
-    assertThat(parse("http://[::1]/").toString()).isEqualTo("http://[::1]/");
+    assertThat(create("http://[::1]/", method).toString()).isEqualTo("http://[::1]/");
 
     // IPv6 colons don't interfere with port numbers or passwords.
-    assertThat(parse("http://[::1]:8080/").port()).isEqualTo(8080);
-    assertThat(parse("http://user:password@[::1]/").password()).isEqualTo("password");
-    assertThat(parse("http://user:password@[::1]:8080/").host()).isEqualTo("::1");
+    assertThat(create("http://[::1]:8080/", method).port()).isEqualTo(8080);
+    assertThat(create("http://user:password@[::1]/", method).password()).isEqualTo("password");
+    assertThat(create("http://user:password@[::1]:8080/", method).host()).isEqualTo("::1");
 
     // Permit the contents of IPv6 addresses to be percent-encoded...
-    assertThat(parse("http://[%3A%3A%31]/").host()).isEqualTo("::1");
+    assertThat(create("http://[%3A%3A%31]/", method).host()).isEqualTo("::1");
 
     // Including the Square braces themselves! (This is what Chrome does.)
-    assertThat(parse("http://%5B%3A%3A1%5D/").host()).isEqualTo("::1");
+    assertThat(create("http://%5B%3A%3A1%5D/", method).host()).isEqualTo("::1");
   }
 
-  @Test public void hostIpv6AddressDifferentFormats() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6AddressDifferentFormats(WebUrlFactoryMethod method) {
     // Multiple representations of the same address; see http://tools.ietf.org/html/rfc5952.
     String a3 = "2001:db8::1:0:0:1";
-    assertThat(parse("http://[2001:db8:0:0:1:0:0:1]").host()).isEqualTo(a3);
-    assertThat(parse("http://[2001:0db8:0:0:1:0:0:1]").host()).isEqualTo(a3);
-    assertThat(parse("http://[2001:db8::1:0:0:1]").host()).isEqualTo(a3);
-    assertThat(parse("http://[2001:db8::0:1:0:0:1]").host()).isEqualTo(a3);
-    assertThat(parse("http://[2001:0db8::1:0:0:1]").host()).isEqualTo(a3);
-    assertThat(parse("http://[2001:db8:0:0:1::1]").host()).isEqualTo(a3);
-    assertThat(parse("http://[2001:db8:0000:0:1::1]").host()).isEqualTo(a3);
-    assertThat(parse("http://[2001:DB8:0:0:1::1]").host()).isEqualTo(a3);
-  }
-
-  @Test public void hostIpv6AddressLeadingCompression() throws Exception {
-    assertThat(parse("http://[::0001]").host()).isEqualTo("::1");
-    assertThat(parse("http://[0000::0001]").host()).isEqualTo("::1");
-    assertThat(parse("http://[0000:0000:0000:0000:0000:0000:0000:0001]").host()).isEqualTo(
-        "::1");
-    assertThat(parse("http://[0000:0000:0000:0000:0000:0000::0001]").host()).isEqualTo(
-        "::1");
-  }
-
-  @Test public void hostIpv6AddressTrailingCompression() throws Exception {
-    assertThat(parse("http://[0001:0000::]").host()).isEqualTo("1::");
-    assertThat(parse("http://[0001::0000]").host()).isEqualTo("1::");
-    assertThat(parse("http://[0001::]").host()).isEqualTo("1::");
-    assertThat(parse("http://[1::]").host()).isEqualTo("1::");
-  }
-
-  @Test public void hostIpv6AddressTooManyDigitsInGroup() throws Exception {
+    assertThat(create("http://[2001:db8:0:0:1:0:0:1]", method).host()).isEqualTo(a3);
+    assertThat(create("http://[2001:0db8:0:0:1:0:0:1]", method).host()).isEqualTo(a3);
+    assertThat(create("http://[2001:db8::1:0:0:1]", method).host()).isEqualTo(a3);
+    assertThat(create("http://[2001:db8::0:1:0:0:1]", method).host()).isEqualTo(a3);
+    assertThat(create("http://[2001:0db8::1:0:0:1]", method).host()).isEqualTo(a3);
+    assertThat(create("http://[2001:db8:0:0:1::1]", method).host()).isEqualTo(a3);
+    assertThat(create("http://[2001:db8:0000:0:1::1]", method).host()).isEqualTo(a3);
+    assertThat(create("http://[2001:DB8:0:0:1::1]", method).host()).isEqualTo(a3);
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6AddressLeadingCompression(WebUrlFactoryMethod method) {
+    assertThat(create("http://[::0001]", method).host()).isEqualTo("::1");
+    assertThat(create("http://[0000::0001]", method).host()).isEqualTo("::1");
+    assertThat(create("http://[0000:0000:0000:0000:0000:0000:0000:0001]", method).host()).isEqualTo("::1");
+    assertThat(create("http://[0000:0000:0000:0000:0000:0000::0001]", method).host()).isEqualTo("::1");
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6AddressTrailingCompression(WebUrlFactoryMethod method) {
+    assertThat(create("http://[0001:0000::]", method).host()).isEqualTo("1::");
+    assertThat(create("http://[0001::0000]", method).host()).isEqualTo("1::");
+    assertThat(create("http://[0001::]", method).host()).isEqualTo("1::");
+    assertThat(create("http://[1::]", method).host()).isEqualTo("1::");
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6AddressTooManyDigitsInGroup(WebUrlFactoryMethod method) {
     assertInvalid("http://[00000:0000:0000:0000:0000:0000:0000:0001]",
-        "Invalid URL host: \"[00000:0000:0000:0000:0000:0000:0000:0001]\"");
-    assertInvalid("http://[::00001]", "Invalid URL host: \"[::00001]\"");
+        "Invalid URL host: \"[00000:0000:0000:0000:0000:0000:0000:0001]\"", method);
+    assertInvalid("http://[::00001]", "Invalid URL host: \"[::00001]\"", method);
   }
 
-  @Test public void hostIpv6AddressMisplacedColons() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6AddressMisplacedColons(WebUrlFactoryMethod method) {
     assertInvalid("http://[:0000:0000:0000:0000:0000:0000:0000:0001]",
-        "Invalid URL host: \"[:0000:0000:0000:0000:0000:0000:0000:0001]\"");
+        "Invalid URL host: \"[:0000:0000:0000:0000:0000:0000:0000:0001]\"", method);
     assertInvalid("http://[:::0000:0000:0000:0000:0000:0000:0000:0001]",
-        "Invalid URL host: \"[:::0000:0000:0000:0000:0000:0000:0000:0001]\"");
-    assertInvalid("http://[:1]", "Invalid URL host: \"[:1]\"");
-    assertInvalid("http://[:::1]", "Invalid URL host: \"[:::1]\"");
+        "Invalid URL host: \"[:::0000:0000:0000:0000:0000:0000:0000:0001]\"", method);
+    assertInvalid("http://[:1]", "Invalid URL host: \"[:1]\"", method);
+    assertInvalid("http://[:::1]", "Invalid URL host: \"[:::1]\"", method);
     assertInvalid("http://[0000:0000:0000:0000:0000:0000:0001:]",
-        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0001:]\"");
+        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0001:]\"", method);
     assertInvalid("http://[0000:0000:0000:0000:0000:0000:0000:0001:]",
-        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0000:0001:]\"");
+        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0000:0001:]\"", method);
     assertInvalid("http://[0000:0000:0000:0000:0000:0000:0000:0001::]",
-        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0000:0001::]\"");
+        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0000:0001::]\"", method);
     assertInvalid("http://[0000:0000:0000:0000:0000:0000:0000:0001:::]",
-        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0000:0001:::]\"");
-    assertInvalid("http://[1:]", "Invalid URL host: \"[1:]\"");
-    assertInvalid("http://[1:::]", "Invalid URL host: \"[1:::]\"");
-    assertInvalid("http://[1:::1]", "Invalid URL host: \"[1:::1]\"");
+        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0000:0001:::]\"", method);
+    assertInvalid("http://[1:]", "Invalid URL host: \"[1:]\"", method);
+    assertInvalid("http://[1:::]", "Invalid URL host: \"[1:::]\"", method);
+    assertInvalid("http://[1:::1]", "Invalid URL host: \"[1:::1]\"", method);
     assertInvalid("http://[0000:0000:0000:0000::0000:0000:0000:0001]",
-        "Invalid URL host: \"[0000:0000:0000:0000::0000:0000:0000:0001]\"");
+        "Invalid URL host: \"[0000:0000:0000:0000::0000:0000:0000:0001]\"", method);
   }
 
-  @Test public void hostIpv6AddressTooManyGroups() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6AddressTooManyGroups(WebUrlFactoryMethod method) {
     assertInvalid("http://[0000:0000:0000:0000:0000:0000:0000:0000:0001]",
-        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0000:0000:0001]\"");
+        "Invalid URL host: \"[0000:0000:0000:0000:0000:0000:0000:0000:0001]\"", method);
   }
 
-  @Test public void hostIpv6AddressTooMuchCompression() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6AddressTooMuchCompression(WebUrlFactoryMethod method) {
     assertInvalid("http://[0000::0000:0000:0000:0000::0001]",
-        "Invalid URL host: \"[0000::0000:0000:0000:0000::0001]\"");
+        "Invalid URL host: \"[0000::0000:0000:0000:0000::0001]\"", method);
     assertInvalid("http://[::0000:0000:0000:0000::0001]",
-        "Invalid URL host: \"[::0000:0000:0000:0000::0001]\"");
+        "Invalid URL host: \"[::0000:0000:0000:0000::0001]\"", method);
   }
 
-  @Test public void hostIpv6ScopedAddress() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6ScopedAddress(WebUrlFactoryMethod method) {
     // java.net.InetAddress parses scoped addresses. These aren't valid in URLs.
-    assertInvalid("http://[::1%2544]", "Invalid URL host: \"[::1%2544]\"");
+    assertInvalid("http://[::1%2544]", "Invalid URL host: \"[::1%2544]\"", method);
   }
 
-  @Test public void hostIpv6AddressTooManyLeadingZeros() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6AddressTooManyLeadingZeros(WebUrlFactoryMethod method) {
     // Guava's been buggy on this case. https://github.com/google/guava/issues/3116
     assertInvalid("http://[2001:db8:0:0:1:0:0:00001]",
-        "Invalid URL host: \"[2001:db8:0:0:1:0:0:00001]\"");
+        "Invalid URL host: \"[2001:db8:0:0:1:0:0:00001]\"", method);
   }
 
-  @Test public void hostIpv6WithIpv4Suffix() throws Exception {
-    assertThat(parse("http://[::1:255.255.255.255]/").host()).isEqualTo("::1:ffff:ffff");
-    assertThat(parse("http://[0:0:0:0:0:1:0.0.0.0]/").host()).isEqualTo("::1:0:0");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6WithIpv4Suffix(WebUrlFactoryMethod method) {
+    assertThat(create("http://[::1:255.255.255.255]/", method).host()).isEqualTo("::1:ffff:ffff");
+    assertThat(create("http://[0:0:0:0:0:1:0.0.0.0]/", method).host()).isEqualTo("::1:0:0");
   }
 
-  @Test public void hostIpv6WithIpv4SuffixWithOctalPrefix() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6WithIpv4SuffixWithOctalPrefix(WebUrlFactoryMethod method) {
     // Chrome interprets a leading '0' as octal; Firefox rejects them. (We reject them.)
     assertInvalid("http://[0:0:0:0:0:1:0.0.0.000000]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:0.0.0.000000]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:0.0.0.000000]\"", method);
     assertInvalid("http://[0:0:0:0:0:1:0.010.0.010]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:0.010.0.010]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:0.010.0.010]\"", method);
     assertInvalid("http://[0:0:0:0:0:1:0.0.0.000001]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:0.0.0.000001]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:0.0.0.000001]\"", method);
   }
 
-  @Test public void hostIpv6WithIpv4SuffixWithHexadecimalPrefix() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6WithIpv4SuffixWithHexadecimalPrefix(WebUrlFactoryMethod method) {
     // Chrome interprets a leading '0x' as hexadecimal; Firefox rejects them. (We reject them.)
     assertInvalid("http://[0:0:0:0:0:1:0.0x10.0.0x10]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:0.0x10.0.0x10]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:0.0x10.0.0x10]\"", method);
   }
 
-  @Test public void hostIpv6WithMalformedIpv4Suffix() throws Exception {
-    assertInvalid("http://[0:0:0:0:0:1:0.0:0.0]/", "Invalid URL host: \"[0:0:0:0:0:1:0.0:0.0]\"");
-    assertInvalid("http://[0:0:0:0:0:1:0.0-0.0]/", "Invalid URL host: \"[0:0:0:0:0:1:0.0-0.0]\"");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6WithMalformedIpv4Suffix(WebUrlFactoryMethod method) {
+    assertInvalid("http://[0:0:0:0:0:1:0.0:0.0]/",
+        "Invalid URL host: \"[0:0:0:0:0:1:0.0:0.0]\"", method);
+    assertInvalid("http://[0:0:0:0:0:1:0.0-0.0]/",
+        "Invalid URL host: \"[0:0:0:0:0:1:0.0-0.0]\"", method);
     assertInvalid("http://[0:0:0:0:0:1:.255.255.255]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:.255.255.255]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:.255.255.255]\"", method);
     assertInvalid("http://[0:0:0:0:0:1:255..255.255]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:255..255.255]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:255..255.255]\"", method);
     assertInvalid("http://[0:0:0:0:0:1:255.255..255]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:255.255..255]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:255.255..255]\"", method);
     assertInvalid("http://[0:0:0:0:0:0:1:255.255]/",
-        "Invalid URL host: \"[0:0:0:0:0:0:1:255.255]\"");
+        "Invalid URL host: \"[0:0:0:0:0:0:1:255.255]\"", method);
     assertInvalid("http://[0:0:0:0:0:1:256.255.255.255]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:256.255.255.255]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:256.255.255.255]\"", method);
     assertInvalid("http://[0:0:0:0:0:1:ff.255.255.255]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:ff.255.255.255]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:ff.255.255.255]\"", method);
     assertInvalid("http://[0:0:0:0:0:0:1:255.255.255.255]/",
-        "Invalid URL host: \"[0:0:0:0:0:0:1:255.255.255.255]\"");
+        "Invalid URL host: \"[0:0:0:0:0:0:1:255.255.255.255]\"", method);
     assertInvalid("http://[0:0:0:0:1:255.255.255.255]/",
-        "Invalid URL host: \"[0:0:0:0:1:255.255.255.255]\"");
-    assertInvalid("http://[0:0:0:0:1:0.0.0.0:1]/", "Invalid URL host: \"[0:0:0:0:1:0.0.0.0:1]\"");
+        "Invalid URL host: \"[0:0:0:0:1:255.255.255.255]\"", method);
+    assertInvalid("http://[0:0:0:0:1:0.0.0.0:1]/",
+        "Invalid URL host: \"[0:0:0:0:1:0.0.0.0:1]\"", method);
     assertInvalid("http://[0:0.0.0.0:1:0:0:0:0:1]/",
-        "Invalid URL host: \"[0:0.0.0.0:1:0:0:0:0:1]\"");
-    assertInvalid("http://[0.0.0.0:0:0:0:0:0:1]/", "Invalid URL host: \"[0.0.0.0:0:0:0:0:0:1]\"");
+        "Invalid URL host: \"[0:0.0.0.0:1:0:0:0:0:1]\"", method);
+    assertInvalid("http://[0.0.0.0:0:0:0:0:0:1]/",
+        "Invalid URL host: \"[0.0.0.0:0:0:0:0:0:1]\"", method);
   }
 
-  @Test public void hostIpv6WithIncompleteIpv4Suffix() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6WithIncompleteIpv4Suffix(WebUrlFactoryMethod method) {
     // To Chrome & Safari these are well-formed; Firefox disagrees. (We're consistent with Firefox).
     assertInvalid("http://[0:0:0:0:0:1:255.255.255.]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:255.255.255.]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:255.255.255.]\"", method);
     assertInvalid("http://[0:0:0:0:0:1:255.255.255]/",
-        "Invalid URL host: \"[0:0:0:0:0:1:255.255.255]\"");
+        "Invalid URL host: \"[0:0:0:0:0:1:255.255.255]\"", method);
   }
 
-  @Test public void hostIpv6Malformed() throws Exception {
-    assertInvalid("http://[::g]/", "Invalid URL host: \"[::g]\"");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6Malformed(WebUrlFactoryMethod method) {
+    assertInvalid("http://[::g]/", "Invalid URL host: \"[::g]\"", method);
   }
 
-  @Test public void hostIpv6CanonicalForm() throws Exception {
-    assertThat(parse("http://[abcd:ef01:2345:6789:abcd:ef01:2345:6789]/").host()).isEqualTo(
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6CanonicalForm(WebUrlFactoryMethod method) {
+    assertThat(create("http://[abcd:ef01:2345:6789:abcd:ef01:2345:6789]/", method).host()).isEqualTo(
         "abcd:ef01:2345:6789:abcd:ef01:2345:6789");
-    assertThat(parse("http://[a:0:0:0:b:0:0:0]/").host()).isEqualTo("a::b:0:0:0");
-    assertThat(parse("http://[a:b:0:0:c:0:0:0]/").host()).isEqualTo("a:b:0:0:c::");
-    assertThat(parse("http://[a:b:0:0:0:c:0:0]/").host()).isEqualTo("a:b::c:0:0");
-    assertThat(parse("http://[a:0:0:0:b:0:0:0]/").host()).isEqualTo("a::b:0:0:0");
-    assertThat(parse("http://[0:0:0:a:b:0:0:0]/").host()).isEqualTo("::a:b:0:0:0");
-    assertThat(parse("http://[0:0:0:a:0:0:0:b]/").host()).isEqualTo("::a:0:0:0:b");
-    assertThat(parse("http://[0:a:b:c:d:e:f:1]/").host()).isEqualTo("0:a:b:c:d:e:f:1");
-    assertThat(parse("http://[a:b:c:d:e:f:1:0]/").host()).isEqualTo("a:b:c:d:e:f:1:0");
-    assertThat(parse("http://[FF01:0:0:0:0:0:0:101]/").host()).isEqualTo("ff01::101");
-    assertThat(parse("http://[2001:db8::1]/").host()).isEqualTo("2001:db8::1");
-    assertThat(parse("http://[2001:db8:0:0:0:0:2:1]/").host()).isEqualTo("2001:db8::2:1");
-    assertThat(parse("http://[2001:db8:0:1:1:1:1:1]/").host()).isEqualTo(
+    assertThat(create("http://[a:0:0:0:b:0:0:0]/", method).host()).isEqualTo("a::b:0:0:0");
+    assertThat(create("http://[a:b:0:0:c:0:0:0]/", method).host()).isEqualTo("a:b:0:0:c::");
+    assertThat(create("http://[a:b:0:0:0:c:0:0]/", method).host()).isEqualTo("a:b::c:0:0");
+    assertThat(create("http://[a:0:0:0:b:0:0:0]/", method).host()).isEqualTo("a::b:0:0:0");
+    assertThat(create("http://[0:0:0:a:b:0:0:0]/", method).host()).isEqualTo("::a:b:0:0:0");
+    assertThat(create("http://[0:0:0:a:0:0:0:b]/", method).host()).isEqualTo("::a:0:0:0:b");
+    assertThat(create("http://[0:a:b:c:d:e:f:1]/", method).host()).isEqualTo("0:a:b:c:d:e:f:1");
+    assertThat(create("http://[a:b:c:d:e:f:1:0]/", method).host()).isEqualTo("a:b:c:d:e:f:1:0");
+    assertThat(create("http://[FF01:0:0:0:0:0:0:101]/", method).host()).isEqualTo("ff01::101");
+    assertThat(create("http://[2001:db8::1]/", method).host()).isEqualTo("2001:db8::1");
+    assertThat(create("http://[2001:db8:0:0:0:0:2:1]/", method).host()).isEqualTo("2001:db8::2:1");
+    assertThat(create("http://[2001:db8:0:1:1:1:1:1]/", method).host()).isEqualTo(
         "2001:db8:0:1:1:1:1:1");
-    assertThat(parse("http://[2001:db8:0:0:1:0:0:1]/").host()).isEqualTo(
+    assertThat(create("http://[2001:db8:0:0:1:0:0:1]/", method).host()).isEqualTo(
         "2001:db8::1:0:0:1");
-    assertThat(parse("http://[2001:0:0:1:0:0:0:1]/").host()).isEqualTo("2001:0:0:1::1");
-    assertThat(parse("http://[1:0:0:0:0:0:0:0]/").host()).isEqualTo("1::");
-    assertThat(parse("http://[0:0:0:0:0:0:0:1]/").host()).isEqualTo("::1");
-    assertThat(parse("http://[0:0:0:0:0:0:0:0]/").host()).isEqualTo("::");
-    assertThat(parse("http://[::ffff:c0a8:1fe]/").host()).isEqualTo("192.168.1.254");
+    assertThat(create("http://[2001:0:0:1:0:0:0:1]/", method).host()).isEqualTo("2001:0:0:1::1");
+    assertThat(create("http://[1:0:0:0:0:0:0:0]/", method).host()).isEqualTo("1::");
+    assertThat(create("http://[0:0:0:0:0:0:0:1]/", method).host()).isEqualTo("::1");
+    assertThat(create("http://[0:0:0:0:0:0:0:0]/", method).host()).isEqualTo("::");
+    assertThat(create("http://[::ffff:c0a8:1fe]/", method).host()).isEqualTo("192.168.1.254");
   }
 
   /** The builder permits square braces but does not require them. */
-  @Test public void hostIpv6Builder() throws Exception {
-    WebUrl base = parse("http://example.com/");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv6Builder(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://example.com/", method);
     assertThat(base.newBuilder().host("[::1]").build().toString()).isEqualTo(
         "http://[::1]/");
     assertThat(base.newBuilder().host("[::0001]").build().toString()).isEqualTo(
@@ -616,29 +678,32 @@ WebUrl parse(String url) {
         "http://[::1]/");
   }
 
-  @Test public void hostIpv4CanonicalForm() throws Exception {
-    assertThat(parse("http://255.255.255.255/").host()).isEqualTo("255.255.255.255");
-    assertThat(parse("http://1.2.3.4/").host()).isEqualTo("1.2.3.4");
-    assertThat(parse("http://0.0.0.0/").host()).isEqualTo("0.0.0.0");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostIpv4CanonicalForm(WebUrlFactoryMethod method) {
+    assertThat(create("http://255.255.255.255/", method).host()).isEqualTo("255.255.255.255");
+    assertThat(create("http://1.2.3.4/", method).host()).isEqualTo("1.2.3.4");
+    assertThat(create("http://0.0.0.0/", method).host()).isEqualTo("0.0.0.0");
   }
 
-  @Test public void hostWithTrailingDot() throws Exception {
-    assertThat(parse("http://host./").host()).isEqualTo("host.");
+  @ParameterizedTestWithWebUrlFactory
+  public void hostWithTrailingDot(WebUrlFactoryMethod method) {
+    assertThat(create("http://host./", method).host()).isEqualTo("host.");
   }
 
-  @Test public void port() throws Exception {
-    assertThat(parse("http://host:80/")).isEqualTo(parse("http://host/"));
-    assertThat(parse("http://host:99/")).isEqualTo(parse("http://host:99/"));
-    assertThat(parse("http://host:/")).isEqualTo(parse("http://host/"));
-    assertThat(parse("http://host:65535/").port()).isEqualTo(65535);
-    assertInvalid("http://host:0/", "Invalid URL port: \"0\"");
-    assertInvalid("http://host:65536/", "Invalid URL port: \"65536\"");
-    assertInvalid("http://host:-1/", "Invalid URL port: \"-1\"");
-    assertInvalid("http://host:a/", "Invalid URL port: \"a\"");
-    assertInvalid("http://host:%39%39/", "Invalid URL port: \"%39%39\"");
+  @ParameterizedTestWithWebUrlFactory
+  public void port(WebUrlFactoryMethod method) {
+    assertThat(create("http://host:80/", method)).isEqualTo(create("http://host/", method));
+    assertThat(create("http://host:99/", method)).isEqualTo(create("http://host:99/", method));
+    assertThat(create("http://host:/", method)).isEqualTo(create("http://host/", method));
+    assertThat(create("http://host:65535/", method).port()).isEqualTo(65535);
+    assertInvalid("http://host:0/", "Invalid URL port: \"0\"", method);
+    assertInvalid("http://host:65536/", "Invalid URL port: \"65536\"", method);
+    assertInvalid("http://host:-1/", "Invalid URL port: \"-1\"", method);
+    assertInvalid("http://host:a/", "Invalid URL port: \"a\"", method);
+    assertInvalid("http://host:%39%39/", "Invalid URL port: \"%39%39\"", method);
   }
 
-  @Test public void pathCharacters() throws Exception {
+  @Test public void pathCharacters() {
     new UrlComponentEncodingTester()
         .override(Encoding.PERCENT, '^', '{', '}', '|')
         .override(Encoding.SKIP, '\\', '?', '#')
@@ -646,7 +711,7 @@ WebUrl parse(String url) {
         .test(Component.PATH);
   }
 
-  @Test public void queryCharacters() throws Exception {
+  @Test public void queryCharacters() {
     new UrlComponentEncodingTester()
         .override(Encoding.IDENTITY, '?', '`')
         .override(Encoding.PERCENT, '\'')
@@ -655,7 +720,7 @@ WebUrl parse(String url) {
         .test(Component.QUERY);
   }
 
-  @Test public void queryValueCharacters() throws Exception {
+  @Test public void queryValueCharacters() {
     new UrlComponentEncodingTester()
         .override(Encoding.IDENTITY, '?', '`')
         .override(Encoding.PERCENT, '\'')
@@ -664,7 +729,7 @@ WebUrl parse(String url) {
         .test(Component.QUERY_VALUE);
   }
 
-  @Test public void fragmentCharacters() throws Exception {
+  @Test public void fragmentCharacters() {
     new UrlComponentEncodingTester()
         .override(Encoding.IDENTITY, ' ', '"', '#', '<', '>', '?', '`')
         .skipForUri('%', ' ', '"', '#', '<', '>', '\\', '^', '`', '{', '|', '}')
@@ -672,33 +737,37 @@ WebUrl parse(String url) {
         .test(Component.FRAGMENT);
   }
 
-  @Test public void fragmentNonAscii() throws Exception {
-    WebUrl url = parse("http://host/#Σ");
+  @ParameterizedTestWithWebUrlFactory
+  public void fragmentNonAscii(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/#Σ", method);
     assertThat(url.toString()).isEqualTo("http://host/#Σ");
     assertThat(url.fragment()).isEqualTo("Σ");
     assertThat(url.encodedFragment()).isEqualTo("Σ");
     assertThat(url.uri().toString()).isEqualTo("http://host/#Σ");
   }
 
-  @Test public void fragmentNonAsciiThatOffendsJavaNetUri() throws Exception {
-    WebUrl url = parse("http://host/#\u0080");
+  @ParameterizedTestWithWebUrlFactory
+  public void fragmentNonAsciiThatOffendsJavaNetUri(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/#\u0080", method);
     assertThat(url.toString()).isEqualTo("http://host/#\u0080");
     assertThat(url.fragment()).isEqualTo("\u0080");
     assertThat(url.encodedFragment()).isEqualTo("\u0080");
     // Control characters may be stripped!
-    assertThat(url.uri()).isEqualTo(new URI("http://host/#"));
+    assertThat(url.uri()).isEqualTo(URI.create("http://host/#"));
   }
 
-  @Test public void fragmentPercentEncodedNonAscii() throws Exception {
-    WebUrl url = parse("http://host/#%C2%80");
+  @ParameterizedTestWithWebUrlFactory
+  public void fragmentPercentEncodedNonAscii(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/#%C2%80", method);
     assertThat(url.toString()).isEqualTo("http://host/#%C2%80");
     assertThat(url.fragment()).isEqualTo("\u0080");
     assertThat(url.encodedFragment()).isEqualTo("%C2%80");
     assertThat(url.uri().toString()).isEqualTo("http://host/#%C2%80");
   }
 
-  @Test public void fragmentPercentEncodedPartialCodePoint() throws Exception {
-    WebUrl url = parse("http://host/#%80");
+  @ParameterizedTestWithWebUrlFactory
+  public void fragmentPercentEncodedPartialCodePoint(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/#%80", method);
     assertThat(url.toString()).isEqualTo("http://host/#%80");
     // Unicode replacement character.
     assertThat(url.fragment()).isEqualTo("\ufffd");
@@ -706,107 +775,114 @@ WebUrl parse(String url) {
     assertThat(url.uri().toString()).isEqualTo("http://host/#%80");
   }
 
-  @Test public void relativePath() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.resolve("d/e/f")).isEqualTo(parse("http://host/a/b/d/e/f"));
-    assertThat(base.resolve("../../d/e/f")).isEqualTo(parse("http://host/d/e/f"));
-    assertThat(base.resolve("..")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve("../..")).isEqualTo(parse("http://host/"));
-    assertThat(base.resolve("../../..")).isEqualTo(parse("http://host/"));
-    assertThat(base.resolve(".")).isEqualTo(parse("http://host/a/b/"));
-    assertThat(base.resolve("././..")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve("c/d/../e/../")).isEqualTo(parse("http://host/a/b/c/"));
-    assertThat(base.resolve("..e/")).isEqualTo(parse("http://host/a/b/..e/"));
-    assertThat(base.resolve("e/f../")).isEqualTo(parse("http://host/a/b/e/f../"));
-    assertThat(base.resolve("%2E.")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve(".%2E")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve("%2E%2E")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve("%2e.")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve(".%2e")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve("%2e%2e")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve("%2E")).isEqualTo(parse("http://host/a/b/"));
-    assertThat(base.resolve("%2e")).isEqualTo(parse("http://host/a/b/"));
-  }
-
-  @Test public void relativePathWithTrailingSlash() throws Exception {
-    WebUrl base = parse("http://host/a/b/c/");
-    assertThat(base.resolve("..")).isEqualTo(parse("http://host/a/b/"));
-    assertThat(base.resolve("../")).isEqualTo(parse("http://host/a/b/"));
-    assertThat(base.resolve("../..")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve("../../")).isEqualTo(parse("http://host/a/"));
-    assertThat(base.resolve("../../..")).isEqualTo(parse("http://host/"));
-    assertThat(base.resolve("../../../")).isEqualTo(parse("http://host/"));
-    assertThat(base.resolve("../../../..")).isEqualTo(parse("http://host/"));
-    assertThat(base.resolve("../../../../")).isEqualTo(parse("http://host/"));
-    assertThat(base.resolve("../../../../a")).isEqualTo(parse("http://host/a"));
-    assertThat(base.resolve("../../../../a/..")).isEqualTo(parse("http://host/"));
-    assertThat(base.resolve("../../../../a/b/..")).isEqualTo(parse("http://host/a/"));
-  }
-
-  @Test public void pathWithBackslash() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.resolve("d\\e\\f")).isEqualTo(parse("http://host/a/b/d/e/f"));
-    assertThat(base.resolve("../..\\d\\e\\f")).isEqualTo(parse("http://host/d/e/f"));
-    assertThat(base.resolve("..\\..")).isEqualTo(parse("http://host/"));
-  }
-
-  @Test public void relativePathWithSameScheme() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.resolve("http:d/e/f")).isEqualTo(parse("http://host/a/b/d/e/f"));
-    assertThat(base.resolve("http:../../d/e/f")).isEqualTo(parse("http://host/d/e/f"));
-  }
-
-  @Test public void decodeUsername() {
-    assertThat(parse("http://user@host/").username()).isEqualTo("user");
-    assertThat(parse("http://%F0%9F%8D%A9@host/").username()).isEqualTo("\uD83C\uDF69");
-  }
-
-  @Test public void decodePassword() {
-    assertThat(parse("http://user:password@host/").password()).isEqualTo("password");
-    assertThat(parse("http://user:@host/").password()).isEqualTo("");
-    assertThat(parse("http://user:%F0%9F%8D%A9@host/").password()).isEqualTo(
+  @ParameterizedTestWithWebUrlFactory
+  public void relativePath(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.resolve("d/e/f")).isEqualTo(create("http://host/a/b/d/e/f", method));
+    assertThat(base.resolve("../../d/e/f")).isEqualTo(create("http://host/d/e/f", method));
+    assertThat(base.resolve("..")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve("../..")).isEqualTo(create("http://host/", method));
+    assertThat(base.resolve("../../..")).isEqualTo(create("http://host/", method));
+    assertThat(base.resolve(".")).isEqualTo(create("http://host/a/b/", method));
+    assertThat(base.resolve("././..")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve("c/d/../e/../")).isEqualTo(create("http://host/a/b/c/", method));
+    assertThat(base.resolve("..e/")).isEqualTo(create("http://host/a/b/..e/", method));
+    assertThat(base.resolve("e/f../")).isEqualTo(create("http://host/a/b/e/f../", method));
+    assertThat(base.resolve("%2E.")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve(".%2E")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve("%2E%2E")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve("%2e.")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve(".%2e")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve("%2e%2e")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve("%2E")).isEqualTo(create("http://host/a/b/", method));
+    assertThat(base.resolve("%2e")).isEqualTo(create("http://host/a/b/", method));
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void relativePathWithTrailingSlash(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c/", method);
+    assertThat(base.resolve("..")).isEqualTo(create("http://host/a/b/", method));
+    assertThat(base.resolve("../")).isEqualTo(create("http://host/a/b/", method));
+    assertThat(base.resolve("../..")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve("../../")).isEqualTo(create("http://host/a/", method));
+    assertThat(base.resolve("../../..")).isEqualTo(create("http://host/", method));
+    assertThat(base.resolve("../../../")).isEqualTo(create("http://host/", method));
+    assertThat(base.resolve("../../../..")).isEqualTo(create("http://host/", method));
+    assertThat(base.resolve("../../../../")).isEqualTo(create("http://host/", method));
+    assertThat(base.resolve("../../../../a")).isEqualTo(create("http://host/a", method));
+    assertThat(base.resolve("../../../../a/..")).isEqualTo(create("http://host/", method));
+    assertThat(base.resolve("../../../../a/b/..")).isEqualTo(create("http://host/a/", method));
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void pathWithBackslash(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.resolve("d\\e\\f")).isEqualTo(create("http://host/a/b/d/e/f", method));
+    assertThat(base.resolve("../..\\d\\e\\f")).isEqualTo(create("http://host/d/e/f", method));
+    assertThat(base.resolve("..\\..")).isEqualTo(create("http://host/", method));
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void relativePathWithSameScheme(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.resolve("http:d/e/f")).isEqualTo(create("http://host/a/b/d/e/f", method));
+    assertThat(base.resolve("http:../../d/e/f")).isEqualTo(create("http://host/d/e/f", method));
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void decodeUsername(WebUrlFactoryMethod method) {
+    assertThat(create("http://user@host/", method).username()).isEqualTo("user");
+    assertThat(create("http://%F0%9F%8D%A9@host/", method).username()).isEqualTo("\uD83C\uDF69");
+  }
+
+  @ParameterizedTestWithWebUrlFactory
+  public void decodePassword(WebUrlFactoryMethod method) {
+    assertThat(create("http://user:password@host/", method).password()).isEqualTo("password");
+    assertThat(create("http://user:@host/", method).password()).isEqualTo("");
+    assertThat(create("http://user:%F0%9F%8D%A9@host/", method).password()).isEqualTo(
         "\uD83C\uDF69");
   }
 
-  @Test public void decodeSlashCharacterInDecodedPathSegment() {
-    assertThat(parse("http://host/a%2Fb%2Fc").pathSegments()).isEqualTo(
-        Arrays.asList("a/b/c"));
+  @ParameterizedTestWithWebUrlFactory
+  public void decodeSlashCharacterInDecodedPathSegment(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/a%2Fb%2Fc", method).pathSegments()).isEqualTo(List.of("a/b/c"));
   }
 
-  @Test public void decodeEmptyPathSegments() {
-    assertThat(parse("http://host/").pathSegments()).isEqualTo(Arrays.asList(""));
+  @ParameterizedTestWithWebUrlFactory
+  public void decodeEmptyPathSegments(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/", method).pathSegments()).isEqualTo(List.of(""));
   }
 
-  @Test public void percentDecode() throws Exception {
-    assertThat(parse("http://host/%00").pathSegments()).isEqualTo(Arrays.asList("\u0000"));
-    assertThat(parse("http://host/a/%E2%98%83/c").pathSegments()).isEqualTo(
-        Arrays.asList("a", "\u2603", "c"));
-    assertThat(parse("http://host/a/%F0%9F%8D%A9/c").pathSegments()).isEqualTo(
-        Arrays.asList("a", "\uD83C\uDF69", "c"));
-    assertThat(parse("http://host/a/%62/c").pathSegments()).isEqualTo(
-        Arrays.asList("a", "b", "c"));
-    assertThat(parse("http://host/a/%7A/c").pathSegments()).isEqualTo(
-        Arrays.asList("a", "z", "c"));
-    assertThat(parse("http://host/a/%7a/c").pathSegments()).isEqualTo(
-        Arrays.asList("a", "z", "c"));
+  @ParameterizedTestWithWebUrlFactory
+  public void percentDecode(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/%00", method).pathSegments()).isEqualTo(List.of("\u0000"));
+    assertThat(create("http://host/a/%E2%98%83/c", method).pathSegments()).isEqualTo(
+        List.of("a", "\u2603", "c"));
+    assertThat(create("http://host/a/%F0%9F%8D%A9/c", method).pathSegments()).isEqualTo(
+        List.of("a", "\uD83C\uDF69", "c"));
+    assertThat(create("http://host/a/%62/c", method).pathSegments()).isEqualTo(
+        List.of("a", "b", "c"));
+    assertThat(create("http://host/a/%7A/c", method).pathSegments()).isEqualTo(
+        List.of("a", "z", "c"));
+    assertThat(create("http://host/a/%7a/c", method).pathSegments()).isEqualTo(
+        List.of("a", "z", "c"));
   }
 
-  @Test public void malformedPercentEncoding() {
-    assertThat(parse("http://host/a%f/b").pathSegments()).isEqualTo(
-        Arrays.asList("a%f", "b"));
-    assertThat(parse("http://host/%/b").pathSegments()).isEqualTo(Arrays.asList("%", "b"));
-    assertThat(parse("http://host/%").pathSegments()).isEqualTo(Arrays.asList("%"));
-    assertThat(parse("http://github.com/%%30%30").pathSegments()).isEqualTo(
-        Arrays.asList("%00"));
+  @ParameterizedTestWithWebUrlFactory
+  public void malformedPercentEncoding(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/a%f/b", method).pathSegments()).isEqualTo(List.of("a%f", "b"));
+    assertThat(create("http://host/%/b", method).pathSegments()).isEqualTo(List.of("%", "b"));
+    assertThat(create("http://host/%", method).pathSegments()).isEqualTo(List.of("%"));
+    assertThat(create("http://github.com/%%30%30", method).pathSegments()).isEqualTo(List.of("%00"));
   }
 
-  @Test public void malformedUtf8Encoding() {
+  @ParameterizedTestWithWebUrlFactory
+  public void malformedUtf8Encoding(WebUrlFactoryMethod method) {
     // Replace a partial UTF-8 sequence with the Unicode replacement character.
-    assertThat(parse("http://host/a/%E2%98x/c").pathSegments()).isEqualTo(
-        Arrays.asList("a", "\ufffdx", "c"));
+    assertThat(create("http://host/a/%E2%98x/c", method).pathSegments()).isEqualTo(List.of("a", "\ufffdx", "c"));
   }
 
-  @Test public void incompleteUrlComposition() throws Exception {
+  @Test public void incompleteUrlComposition() {
     try {
       WebUrl.builder().scheme("http").build();
       fail();
@@ -821,8 +897,9 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void builderToString() {
-    assertThat(parse("https://host.com/path").newBuilder().toString()).isEqualTo(
+  @ParameterizedTestWithWebUrlFactory
+  public void builderToString(WebUrlFactoryMethod method) {
+    assertThat(create("https://host.com/path", method).newBuilder().toString()).isEqualTo(
         "https://host.com/path");
   }
 
@@ -836,7 +913,7 @@ WebUrl parse(String url) {
         "//host.com:8080/path");
   }
 
-  @Test public void minimalUrlComposition() throws Exception {
+  @Test public void minimalUrlComposition() {
     WebUrl url = WebUrl.builder().scheme("http").host("host").build();
     assertThat(url.toString()).isEqualTo("http://host/");
     assertThat(url.scheme()).isEqualTo("http");
@@ -849,7 +926,7 @@ WebUrl parse(String url) {
     assertThat(url.fragment()).isNull();
   }
 
-  @Test public void fullUrlComposition() throws Exception {
+  @Test public void fullUrlComposition() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .username("username")
@@ -872,24 +949,25 @@ WebUrl parse(String url) {
     assertThat(url.fragment()).isEqualTo("fragment");
   }
 
-  @Test public void changingSchemeChangesDefaultPort() throws Exception {
-    assertThat(parse("http://example.com")
+  @ParameterizedTestWithWebUrlFactory
+  public void changingSchemeChangesDefaultPort(WebUrlFactoryMethod method) {
+    assertThat(create("http://example.com", method)
         .newBuilder()
         .scheme("https")
         .build().port()).isEqualTo(443);
 
-    assertThat(parse("https://example.com")
+    assertThat(create("https://example.com", method)
         .newBuilder()
         .scheme("http")
         .build().port()).isEqualTo(80);
 
-    assertThat(parse("https://example.com:1234")
+    assertThat(create("https://example.com:1234", method)
         .newBuilder()
         .scheme("http")
         .build().port()).isEqualTo(1234);
   }
 
-  @Test public void composeEncodesWhitespace() throws Exception {
+  @Test public void composeEncodesWhitespace() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .username("a\r\n\f\t b")
@@ -908,7 +986,7 @@ WebUrl parse(String url) {
     assertThat(url.fragment()).isEqualTo("i\r\n\f\t j");
   }
 
-  @Test public void composeFromUnencodedComponents() throws Exception {
+  @Test public void composeFromUnencodedComponents() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .username("a:\u0001@/\\?#%b")
@@ -925,7 +1003,7 @@ WebUrl parse(String url) {
     assertThat(url.scheme()).isEqualTo("http");
     assertThat(url.username()).isEqualTo("a:\u0001@/\\?#%b");
     assertThat(url.password()).isEqualTo("c:\u0001@/\\?#%d");
-    assertThat(url.pathSegments()).isEqualTo(Arrays.asList("g:\u0001@/\\?#%h"));
+    assertThat(url.pathSegments()).isEqualTo(List.of("g:\u0001@/\\?#%h"));
     assertThat(url.query()).isEqualTo("i:\u0001@/\\?#%j");
     assertThat(url.fragment()).isEqualTo("k:\u0001@/\\?#%l");
     assertThat(url.encodedUsername()).isEqualTo("a%3A%01%40%2F%5C%3F%23%25b");
@@ -935,7 +1013,7 @@ WebUrl parse(String url) {
     assertThat(url.encodedFragment()).isEqualTo("k:%01@/\\?#%25l");
   }
 
-  @Test public void composeFromEncodedComponents() throws Exception {
+  @Test public void composeFromEncodedComponents() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .encodedUsername("a:\u0001@/\\?#%25b")
@@ -952,7 +1030,7 @@ WebUrl parse(String url) {
     assertThat(url.scheme()).isEqualTo("http");
     assertThat(url.username()).isEqualTo("a:\u0001@/\\?#%b");
     assertThat(url.password()).isEqualTo("c:\u0001@/\\?#%d");
-    assertThat(url.pathSegments()).isEqualTo(Arrays.asList("g:\u0001@/\\?#%h"));
+    assertThat(url.pathSegments()).isEqualTo(List.of("g:\u0001@/\\?#%h"));
     assertThat(url.query()).isEqualTo("i:\u0001@/\\?#%j");
     assertThat(url.fragment()).isEqualTo("k:\u0001@/\\?#%l");
     assertThat(url.encodedUsername()).isEqualTo("a%3A%01%40%2F%5C%3F%23%25b");
@@ -962,7 +1040,7 @@ WebUrl parse(String url) {
     assertThat(url.encodedFragment()).isEqualTo("k:%01@/\\?#%25l");
   }
 
-  @Test public void composeWithEncodedPath() throws Exception {
+  @Test public void composeWithEncodedPath() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -970,10 +1048,10 @@ WebUrl parse(String url) {
         .build();
     assertThat(url.toString()).isEqualTo("http://host/a%2Fb/c");
     assertThat(url.encodedPath()).isEqualTo("/a%2Fb/c");
-    assertThat(url.pathSegments()).isEqualTo(Arrays.asList("a/b", "c"));
+    assertThat(url.pathSegments()).isEqualTo(List.of("a/b", "c"));
   }
 
-  @Test public void composeMixingPathSegments() throws Exception {
+  @Test public void composeMixingPathSegments() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -983,13 +1061,13 @@ WebUrl parse(String url) {
         .build();
     assertThat(url.toString()).isEqualTo("http://host/a%2fb/c/d%2525e/f%25g");
     assertThat(url.encodedPath()).isEqualTo("/a%2fb/c/d%2525e/f%25g");
-    assertThat(url.encodedPathSegments()).isEqualTo(
-        Arrays.asList("a%2fb", "c", "d%2525e", "f%25g"));
-    assertThat(url.pathSegments()).isEqualTo(Arrays.asList("a/b", "c", "d%25e", "f%g"));
+    assertThat(url.encodedPathSegments()).isEqualTo(List.of("a%2fb", "c", "d%2525e", "f%25g"));
+    assertThat(url.pathSegments()).isEqualTo(List.of("a/b", "c", "d%25e", "f%g"));
   }
 
-  @Test public void composeWithAddSegment() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void composeWithAddSegment(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     assertThat(base.newBuilder().addPathSegment("").build().encodedPath()).isEqualTo(
         "/a/b/c/");
     assertThat(
@@ -1003,13 +1081,15 @@ WebUrl parse(String url) {
         .encodedPath()).isEqualTo("/a/b/c/");
   }
 
-  @Test public void pathSize() throws Exception {
-    assertThat(parse("http://host/").pathSize()).isEqualTo(1);
-    assertThat(parse("http://host/a/b/c").pathSize()).isEqualTo(3);
+  @ParameterizedTestWithWebUrlFactory
+  public void pathSize(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/", method).pathSize()).isEqualTo(1);
+    assertThat(create("http://host/a/b/c", method).pathSize()).isEqualTo(3);
   }
 
-  @Test public void addPathSegments() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void addPathSegments(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
 
     // Add a string with zero slashes: resulting URL gains one slash.
     assertThat(base.newBuilder().addPathSegments("").build().encodedPath()).isEqualTo(
@@ -1038,8 +1118,9 @@ WebUrl parse(String url) {
         "/a/b/c/d/e/f");
   }
 
-  @Test public void addPathSegmentsOntoTrailingSlash() throws Exception {
-    WebUrl base = parse("http://host/a/b/c/");
+  @ParameterizedTestWithWebUrlFactory
+  public void addPathSegmentsOntoTrailingSlash(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c/", method);
 
     // Add a string with zero slashes: resulting URL gains zero slashes.
     assertThat(base.newBuilder().addPathSegments("").build().encodedPath()).isEqualTo(
@@ -1068,67 +1149,68 @@ WebUrl parse(String url) {
         "/a/b/c/d/e/f");
   }
 
-  @Test public void addPathSegmentsWithBackslash() throws Exception {
-    WebUrl base = parse("http://host/");
-    assertThat(base.newBuilder().addPathSegments("d\\e").build().encodedPath()).isEqualTo(
-        "/d/e");
-    assertThat(base.newBuilder().addEncodedPathSegments("d\\e").build().encodedPath()).isEqualTo(
-        "/d/e");
+  @ParameterizedTestWithWebUrlFactory
+  public void addPathSegmentsWithBackslash(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/", method);
+    assertThat(base.newBuilder().addPathSegments("d\\e").build().encodedPath()).isEqualTo("/d/e");
+    assertThat(base.newBuilder().addEncodedPathSegments("d\\e").build().encodedPath()).isEqualTo("/d/e");
   }
 
-  @Test public void addPathSegmentsWithEmptyPaths() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void addPathSegmentsWithEmptyPaths(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     assertThat(base.newBuilder().addPathSegments("/d/e///f").build().encodedPath()).isEqualTo(
         "/a/b/c//d/e///f");
   }
 
-  @Test public void addEncodedPathSegments() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void addEncodedPathSegments(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     assertThat(
         (Object) base.newBuilder().addEncodedPathSegments("d/e/%20/\n").build().encodedPath()).isEqualTo(
         "/a/b/c/d/e/%20/");
   }
 
-  @Test public void addPathSegmentDotDoesNothing() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.newBuilder().addPathSegment(".").build().encodedPath()).isEqualTo(
-        "/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void addPathSegmentDotDoesNothing(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.newBuilder().addPathSegment(".").build().encodedPath()).isEqualTo("/a/b/c");
   }
 
-  @Test public void addPathSegmentEncodes() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.newBuilder().addPathSegment("%2e").build().encodedPath()).isEqualTo(
-        "/a/b/c/%252e");
-    assertThat(base.newBuilder().addPathSegment("%2e%2e").build().encodedPath()).isEqualTo(
-        "/a/b/c/%252e%252e");
+  @ParameterizedTestWithWebUrlFactory
+  public void addPathSegmentEncodes(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.newBuilder().addPathSegment("%2e").build().encodedPath()).isEqualTo("/a/b/c/%252e");
+    assertThat(base.newBuilder().addPathSegment("%2e%2e").build().encodedPath()).isEqualTo("/a/b/c/%252e%252e");
   }
 
-  @Test public void addPathSegmentDotDotPopsDirectory() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.newBuilder().addPathSegment("..").build().encodedPath()).isEqualTo(
-        "/a/b/");
+  @ParameterizedTestWithWebUrlFactory
+  public void addPathSegmentDotDotPopsDirectory(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.newBuilder().addPathSegment("..").build().encodedPath()).isEqualTo("/a/b/");
   }
 
-  @Test public void addPathSegmentDotAndIgnoredCharacter() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.newBuilder().addPathSegment(".\n").build().encodedPath()).isEqualTo(
-        "/a/b/c/.%0A");
+  @ParameterizedTestWithWebUrlFactory
+  public void addPathSegmentDotAndIgnoredCharacter(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.newBuilder().addPathSegment(".\n").build().encodedPath()).isEqualTo("/a/b/c/.%0A");
   }
 
-  @Test public void addEncodedPathSegmentDotAndIgnoredCharacter() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.newBuilder().addEncodedPathSegment(".\n").build().encodedPath()).isEqualTo(
-        "/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void addEncodedPathSegmentDotAndIgnoredCharacter(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.newBuilder().addEncodedPathSegment(".\n").build().encodedPath()).isEqualTo("/a/b/c");
   }
 
-  @Test public void addEncodedPathSegmentDotDotAndIgnoredCharacter() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
-    assertThat(base.newBuilder().addEncodedPathSegment("..\n").build().encodedPath()).isEqualTo(
-        "/a/b/");
+  @ParameterizedTestWithWebUrlFactory
+  public void addEncodedPathSegmentDotDotAndIgnoredCharacter(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
+    assertThat(base.newBuilder().addEncodedPathSegment("..\n").build().encodedPath()).isEqualTo("/a/b/");
   }
 
-  @Test public void setPathSegment() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setPathSegment(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     assertThat(base.newBuilder().setPathSegment(0, "d").build().encodedPath()).isEqualTo(
         "/d/b/c");
     assertThat(base.newBuilder().setPathSegment(1, "d").build().encodedPath()).isEqualTo(
@@ -1137,8 +1219,9 @@ WebUrl parse(String url) {
         "/a/b/d");
   }
 
-  @Test public void setPathSegmentEncodes() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setPathSegmentEncodes(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     assertThat(base.newBuilder().setPathSegment(0, "%25").build().encodedPath()).isEqualTo(
         "/%2525/b/c");
     assertThat(base.newBuilder().setPathSegment(0, ".\n").build().encodedPath()).isEqualTo(
@@ -1147,16 +1230,18 @@ WebUrl parse(String url) {
         "/%252e/b/c");
   }
 
-  @Test public void setPathSegmentAcceptsEmpty() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setPathSegmentAcceptsEmpty(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     assertThat(base.newBuilder().setPathSegment(0, "").build().encodedPath()).isEqualTo(
         "//b/c");
     assertThat(base.newBuilder().setPathSegment(2, "").build().encodedPath()).isEqualTo(
         "/a/b/");
   }
 
-  @Test public void setPathSegmentRejectsDot() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setPathSegmentRejectsDot(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     try {
       base.newBuilder().setPathSegment(0, ".");
       fail();
@@ -1164,8 +1249,9 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void setPathSegmentRejectsDotDot() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setPathSegmentRejectsDotDot(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     try {
       base.newBuilder().setPathSegment(0, "..");
       fail();
@@ -1173,13 +1259,14 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void setPathSegmentWithSlash() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setPathSegmentWithSlash(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     WebUrl url = base.newBuilder().setPathSegment(1, "/").build();
     assertThat(url.encodedPath()).isEqualTo("/a/%2F/c");
   }
 
-  @Test public void setPathSegmentOutOfBounds() throws Exception {
+  @Test public void setPathSegmentOutOfBounds() {
     try {
       WebUrl.builder().setPathSegment(1, "a");
       fail();
@@ -1187,14 +1274,16 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void setEncodedPathSegmentEncodes() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setEncodedPathSegmentEncodes(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     assertThat(base.newBuilder().setEncodedPathSegment(0, "%25").build().encodedPath()).isEqualTo(
         "/%25/b/c");
   }
 
-  @Test public void setEncodedPathSegmentRejectsDot() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setEncodedPathSegmentRejectsDot(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     try {
       base.newBuilder().setEncodedPathSegment(0, ".");
       fail();
@@ -1202,8 +1291,9 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void setEncodedPathSegmentRejectsDotAndIgnoredCharacter() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setEncodedPathSegmentRejectsDotAndIgnoredCharacter(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     try {
       base.newBuilder().setEncodedPathSegment(0, ".\n");
       fail();
@@ -1211,8 +1301,9 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void setEncodedPathSegmentRejectsDotDot() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setEncodedPathSegmentRejectsDotDot(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     try {
       base.newBuilder().setEncodedPathSegment(0, "..");
       fail();
@@ -1220,8 +1311,9 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void setEncodedPathSegmentRejectsDotDotAndIgnoredCharacter() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setEncodedPathSegmentRejectsDotDotAndIgnoredCharacter(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     try {
       base.newBuilder().setEncodedPathSegment(0, "..\n");
       fail();
@@ -1229,13 +1321,14 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void setEncodedPathSegmentWithSlash() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void setEncodedPathSegmentWithSlash(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     WebUrl url = base.newBuilder().setEncodedPathSegment(1, "/").build();
     assertThat(url.encodedPath()).isEqualTo("/a/%2F/c");
   }
 
-  @Test public void setEncodedPathSegmentOutOfBounds() throws Exception {
+  @Test public void setEncodedPathSegmentOutOfBounds() {
     try {
       WebUrl.builder().setEncodedPathSegment(1, "a");
       fail();
@@ -1243,26 +1336,28 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void removePathSegment() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void removePathSegment(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     WebUrl url = base.newBuilder()
         .removePathSegment(0)
         .build();
     assertThat(url.encodedPath()).isEqualTo("/b/c");
   }
 
-  @Test public void removePathSegmentDoesntRemovePath() throws Exception {
-    WebUrl base = parse("http://host/a/b/c");
+  @ParameterizedTestWithWebUrlFactory
+  public void removePathSegmentDoesntRemovePath(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/a/b/c", method);
     WebUrl url = base.newBuilder()
         .removePathSegment(0)
         .removePathSegment(0)
         .removePathSegment(0)
         .build();
-    assertThat(url.pathSegments()).isEqualTo(Arrays.asList(""));
+    assertThat(url.pathSegments()).isEqualTo(List.of(""));
     assertThat(url.encodedPath()).isEqualTo("/");
   }
 
-  @Test public void removePathSegmentOutOfBounds() throws Exception {
+  @Test public void removePathSegmentOutOfBounds() {
     try {
       WebUrl.builder().removePathSegment(1);
       fail();
@@ -1270,27 +1365,30 @@ WebUrl parse(String url) {
     }
   }
 
-  @Test public void toJavaNetUrl() throws Exception {
-    WebUrl httpUrl = parse("http://username:password@host/path?query#fragment");
+  @ParameterizedTestWithWebUrlFactory
+  public void toJavaNetUrl(WebUrlFactoryMethod method) {
+    WebUrl httpUrl = create("http://username:password@host/path?query#fragment", method);
     URL javaNetUrl = httpUrl.url();
     assertThat(javaNetUrl.toString()).isEqualTo(
         "http://username:password@host/path?query#fragment");
   }
 
-  @Test public void toUri() throws Exception {
-    WebUrl httpUrl = parse("http://username:password@host/path?query#fragment");
+  @ParameterizedTestWithWebUrlFactory
+  public void toUri(WebUrlFactoryMethod method) {
+    WebUrl httpUrl = create("http://username:password@host/path?query#fragment", method);
     URI uri = httpUrl.uri();
     assertThat(uri.toString()).isEqualTo(
         "http://username:password@host/path?query#fragment");
   }
 
-  @Test public void toUriSpecialQueryCharacters() throws Exception {
-    WebUrl httpUrl = parse("http://host/?d=abc!@[]^`{}|\\");
+  @ParameterizedTestWithWebUrlFactory
+  public void toUriSpecialQueryCharacters(WebUrlFactoryMethod method) {
+    WebUrl httpUrl = create("http://host/?d=abc!@[]^`{}|\\", method);
     URI uri = httpUrl.uri();
     assertThat(uri.toString()).isEqualTo("http://host/?d=abc!@[]%5E%60%7B%7D%7C%5C");
   }
 
-  @Test public void toUriWithUsernameNoPassword() throws Exception {
+  @Test public void toUriWithUsernameNoPassword() {
     WebUrl httpUrl = WebUrl.builder()
         .scheme("http")
         .username("user")
@@ -1300,7 +1398,7 @@ WebUrl parse(String url) {
     assertThat(httpUrl.uri().toString()).isEqualTo("http://user@host/");
   }
 
-  @Test public void toUriUsernameSpecialCharacters() throws Exception {
+  @Test public void toUriUsernameSpecialCharacters() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1312,7 +1410,7 @@ WebUrl parse(String url) {
         "http://%3D%5B%5D%3A%3B%22~%7C%3F%23%40%5E%2F$%25*@host/");
   }
 
-  @Test public void toUriPasswordSpecialCharacters() throws Exception {
+  @Test public void toUriPasswordSpecialCharacters() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1325,7 +1423,7 @@ WebUrl parse(String url) {
         "http://user:%3D%5B%5D%3A%3B%22~%7C%3F%23%40%5E%2F$%25*@host/");
   }
 
-  @Test public void toUriPathSpecialCharacters() throws Exception {
+  @Test public void toUriPathSpecialCharacters() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1336,7 +1434,7 @@ WebUrl parse(String url) {
         "http://host/=%5B%5D:;%22~%7C%3F%23@%5E%2F$%25*");
   }
 
-  @Test public void toUriQueryParameterNameSpecialCharacters() throws Exception {
+  @Test public void toUriQueryParameterNameSpecialCharacters() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1349,7 +1447,7 @@ WebUrl parse(String url) {
     assertThat(url.queryParameter("=[]:;\"~|?#@^/$%*")).isEqualTo("a");
   }
 
-  @Test public void toUriQueryParameterValueSpecialCharacters() throws Exception {
+  @Test public void toUriQueryParameterValueSpecialCharacters() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1362,7 +1460,7 @@ WebUrl parse(String url) {
     assertThat(url.queryParameter("a")).isEqualTo("=[]:;\"~|?#@^/$%*");
   }
 
-  @Test public void toUriQueryValueSpecialCharacters() throws Exception {
+  @Test public void toUriQueryValueSpecialCharacters() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1372,7 +1470,7 @@ WebUrl parse(String url) {
     assertThat(url.uri().toString()).isEqualTo("http://host/?=[]:;%22~%7C?%23@%5E/$%25*");
   }
 
-  @Test public void queryCharactersEncodedWhenComposed() throws Exception {
+  @Test public void queryCharactersEncodedWhenComposed() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1387,7 +1485,7 @@ WebUrl parse(String url) {
    * When callers use {@code addEncodedQueryParameter()} we only encode what's strictly required.
    * We retain the encoded (or non-encoded) state of the input.
    */
-  @Test public void queryCharactersNotReencodedWhenComposedWithAddEncoded() throws Exception {
+  @Test public void queryCharactersNotReencodedWhenComposedWithAddEncoded() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1401,13 +1499,14 @@ WebUrl parse(String url) {
    * When callers parse a URL with query components that aren't encoded, we shouldn't convert them
    * into a canonical form because doing so could be semantically different.
    */
-  @Test public void queryCharactersNotReencodedWhenParsed() throws Exception {
-    WebUrl url = parse("http://host/?a=!$(),/:;?@[]\\^`{|}~");
+  @ParameterizedTestWithWebUrlFactory
+  public void queryCharactersNotReencodedWhenParsed(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/?a=!$(),/:;?@[]\\^`{|}~", method);
     assertThat(url.toString()).isEqualTo("http://host/?a=!$(),/:;?@[]\\^`{|}~");
     assertThat(url.queryParameter("a")).isEqualTo("!$(),/:;?@[]\\^`{|}~");
   }
 
-  @Test public void toUriFragmentSpecialCharacters() throws Exception {
+  @Test public void toUriFragmentSpecialCharacters() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
@@ -1417,91 +1516,84 @@ WebUrl parse(String url) {
     assertThat(url.uri().toString()).isEqualTo("http://host/#=[]:;%22~%7C?%23@%5E/$%25*");
   }
 
-  @Test public void toUriWithControlCharacters() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void toUriWithControlCharacters(WebUrlFactoryMethod method) {
     // Percent-encoded in the path.
-    assertThat(parse("http://host/a\u0000b").uri()).isEqualTo(new URI("http://host/a%00b"));
-    assertThat(parse("http://host/a\u0080b").uri()).isEqualTo(
-        new URI("http://host/a%C2%80b"));
-    assertThat(parse("http://host/a\u009fb").uri()).isEqualTo(
-        new URI("http://host/a%C2%9Fb"));
+    assertThat(create("http://host/a\u0000b", method).uri()).isEqualTo(URI.create("http://host/a%00b"));
+    assertThat(create("http://host/a\u0080b", method).uri()).isEqualTo(URI.create("http://host/a%C2%80b"));
+    assertThat(create("http://host/a\u009fb", method).uri()).isEqualTo(URI.create("http://host/a%C2%9Fb"));
     // Percent-encoded in the query.
-    assertThat(parse("http://host/?a\u0000b").uri()).isEqualTo(
-        new URI("http://host/?a%00b"));
-    assertThat(parse("http://host/?a\u0080b").uri()).isEqualTo(
-        new URI("http://host/?a%C2%80b"));
-    assertThat(parse("http://host/?a\u009fb").uri()).isEqualTo(
-        new URI("http://host/?a%C2%9Fb"));
+    assertThat(create("http://host/?a\u0000b", method).uri()).isEqualTo(URI.create("http://host/?a%00b"));
+    assertThat(create("http://host/?a\u0080b", method).uri()).isEqualTo(URI.create("http://host/?a%C2%80b"));
+    assertThat(create("http://host/?a\u009fb", method).uri()).isEqualTo(URI.create("http://host/?a%C2%9Fb"));
     // Stripped from the fragment.
-    assertThat(parse("http://host/#a\u0000b").uri()).isEqualTo(
-        new URI("http://host/#a%00b"));
-    assertThat(parse("http://host/#a\u0080b").uri()).isEqualTo(new URI("http://host/#ab"));
-    assertThat(parse("http://host/#a\u009fb").uri()).isEqualTo(new URI("http://host/#ab"));
+    assertThat(create("http://host/#a\u0000b", method).uri()).isEqualTo(URI.create("http://host/#a%00b"));
+    assertThat(create("http://host/#a\u0080b", method).uri()).isEqualTo(URI.create("http://host/#ab"));
+    assertThat(create("http://host/#a\u009fb", method).uri()).isEqualTo(URI.create("http://host/#ab"));
   }
 
-  @Test public void toUriWithSpaceCharacters() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void toUriWithSpaceCharacters(WebUrlFactoryMethod method) {
     // Percent-encoded in the path.
-    assertThat(parse("http://host/a\u000bb").uri()).isEqualTo(new URI("http://host/a%0Bb"));
-    assertThat(parse("http://host/a b").uri()).isEqualTo(new URI("http://host/a%20b"));
-    assertThat(parse("http://host/a\u2009b").uri()).isEqualTo(
-        new URI("http://host/a%E2%80%89b"));
-    assertThat(parse("http://host/a\u3000b").uri()).isEqualTo(
-        new URI("http://host/a%E3%80%80b"));
+    assertThat(create("http://host/a\u000bb", method).uri()).isEqualTo(URI.create("http://host/a%0Bb"));
+    assertThat(create("http://host/a b", method).uri()).isEqualTo(URI.create("http://host/a%20b"));
+    assertThat(create("http://host/a\u2009b", method).uri()).isEqualTo(URI.create("http://host/a%E2%80%89b"));
+    assertThat(create("http://host/a\u3000b", method).uri()).isEqualTo(URI.create("http://host/a%E3%80%80b"));
     // Percent-encoded in the query.
-    assertThat(parse("http://host/?a\u000bb").uri()).isEqualTo(
-        new URI("http://host/?a%0Bb"));
-    assertThat(parse("http://host/?a b").uri()).isEqualTo(new URI("http://host/?a%20b"));
-    assertThat(parse("http://host/?a\u2009b").uri()).isEqualTo(
-        new URI("http://host/?a%E2%80%89b"));
-    assertThat(parse("http://host/?a\u3000b").uri()).isEqualTo(
-        new URI("http://host/?a%E3%80%80b"));
+    assertThat(create("http://host/?a\u000bb", method).uri()).isEqualTo(URI.create("http://host/?a%0Bb"));
+    assertThat(create("http://host/?a b", method).uri()).isEqualTo(URI.create("http://host/?a%20b"));
+    assertThat(create("http://host/?a\u2009b", method).uri()).isEqualTo(URI.create("http://host/?a%E2%80%89b"));
+    assertThat(create("http://host/?a\u3000b", method).uri()).isEqualTo(URI.create("http://host/?a%E3%80%80b"));
     // Stripped from the fragment.
-    assertThat(parse("http://host/#a\u000bb").uri()).isEqualTo(
-        new URI("http://host/#a%0Bb"));
-    assertThat(parse("http://host/#a b").uri()).isEqualTo(new URI("http://host/#a%20b"));
-    assertThat(parse("http://host/#a\u2009b").uri()).isEqualTo(new URI("http://host/#ab"));
-    assertThat(parse("http://host/#a\u3000b").uri()).isEqualTo(new URI("http://host/#ab"));
+    assertThat(create("http://host/#a\u000bb", method).uri()).isEqualTo(URI.create("http://host/#a%0Bb"));
+    assertThat(create("http://host/#a b", method).uri()).isEqualTo(URI.create("http://host/#a%20b"));
+    assertThat(create("http://host/#a\u2009b", method).uri()).isEqualTo(URI.create("http://host/#ab"));
+    assertThat(create("http://host/#a\u3000b", method).uri()).isEqualTo(URI.create("http://host/#ab"));
   }
 
-  @Test public void toUriWithNonHexPercentEscape() throws Exception {
-    assertThat(parse("http://host/%xx").uri()).isEqualTo(new URI("http://host/%25xx"));
+  @ParameterizedTestWithWebUrlFactory
+  public void toUriWithNonHexPercentEscape(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/%xx", method).uri()).isEqualTo(URI.create("http://host/%25xx"));
   }
 
-  @Test public void toUriWithTruncatedPercentEscape() throws Exception {
-    assertThat(parse("http://host/%a").uri()).isEqualTo(new URI("http://host/%25a"));
-    assertThat(parse("http://host/%").uri()).isEqualTo(new URI("http://host/%25"));
+  @ParameterizedTestWithWebUrlFactory
+  public void toUriWithTruncatedPercentEscape(WebUrlFactoryMethod method) {
+    assertThat(create("http://host/%a", method).uri()).isEqualTo(URI.create("http://host/%25a"));
+    assertThat(create("http://host/%", method).uri()).isEqualTo(URI.create("http://host/%25"));
   }
 
-  @Test public void fromJavaNetUrl() throws Exception {
+  @Test public void fromJavaNetUrl() throws MalformedURLException {
     URL javaNetUrl = new URL("http://username:password@host/path?query#fragment");
     WebUrl httpUrl = WebUrl.from(javaNetUrl).orElse(null);
     assertThat(httpUrl.toString()).isEqualTo(
         "http://username:password@host/path?query#fragment");
   }
 
-  @Test public void fromJavaNetUrlUnsupportedScheme() throws Exception {
+  @Test public void fromJavaNetUrlUnsupportedScheme() throws MalformedURLException {
     URL javaNetUrl = new URL("mailto:user@example.com");
     assertThat(WebUrl.from(javaNetUrl).orElse(null)).isNull();
   }
 
-  @Test public void fromUri() throws Exception {
-    URI uri = new URI("http://username:password@host/path?query#fragment");
+  @Test public void fromUri() {
+    URI uri = URI.create("http://username:password@host/path?query#fragment");
     WebUrl httpUrl = WebUrl.from(uri).orElse(null);
     assertThat(httpUrl.toString()).isEqualTo(
         "http://username:password@host/path?query#fragment");
   }
 
-  @Test public void fromUriUnsupportedScheme() throws Exception {
-    URI uri = new URI("mailto:user@example.com");
+  @Test public void fromUriUnsupportedScheme() {
+    URI uri = URI.create("mailto:user@example.com");
     assertThat(WebUrl.from(uri).orElse(null)).isNull();
   }
 
-  @Test public void fromUriPartial() throws Exception {
-    URI uri = new URI("/path");
+  @Test public void fromUriPartial() {
+    URI uri = URI.create("/path");
     assertThat(WebUrl.from(uri).orElse(null)).isNull();
   }
 
-  @Test public void composeQueryWithComponents() throws Exception {
-    WebUrl base = parse("http://host/");
+  @ParameterizedTestWithWebUrlFactory
+  public void composeQueryWithComponents(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/", method);
     WebUrl url = base.newBuilder().addQueryParameter("a+=& b", "c+=& d").build();
     assertThat(url.toString()).isEqualTo("http://host/?a%2B%3D%26%20b=c%2B%3D%26%20d");
     assertThat(url.queryParameterValue(0)).isEqualTo("c+=& d");
@@ -1515,15 +1607,17 @@ WebUrl parse(String url) {
     assertThat(url.encodedQuery()).isEqualTo("a%2B%3D%26%20b=c%2B%3D%26%20d");
   }
 
-  @Test public void composeQueryWithEncodedComponents() throws Exception {
-    WebUrl base = parse("http://host/");
+  @ParameterizedTestWithWebUrlFactory
+  public void composeQueryWithEncodedComponents(WebUrlFactoryMethod method) {
+    WebUrl base = create("http://host/", method);
     WebUrl url = base.newBuilder().addEncodedQueryParameter("a+=& b", "c+=& d").build();
     assertThat(url.toString()).isEqualTo("http://host/?a+%3D%26%20b=c+%3D%26%20d");
     assertThat(url.queryParameter("a =& b")).isEqualTo("c =& d");
   }
 
-  @Test public void composeQueryRemoveQueryParameter() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void composeQueryRemoveQueryParameter(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .addQueryParameter("a+=& b", "c+=& d")
         .removeAllQueryParameters("a+=& b")
         .build();
@@ -1531,8 +1625,9 @@ WebUrl parse(String url) {
     assertThat(url.queryParameter("a+=& b")).isNull();
   }
 
-  @Test public void composeQueryRemoveEncodedQueryParameter() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void composeQueryRemoveEncodedQueryParameter(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .addEncodedQueryParameter("a+=& b", "c+=& d")
         .removeAllEncodedQueryParameters("a+=& b")
         .build();
@@ -1540,8 +1635,9 @@ WebUrl parse(String url) {
     assertThat(url.queryParameter("a =& b")).isNull();
   }
 
-  @Test public void composeQuerySetQueryParameter() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void composeQuerySetQueryParameter(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .addQueryParameter("a+=& b", "c+=& d")
         .setQueryParameter("a+=& b", "ef")
         .build();
@@ -1549,8 +1645,9 @@ WebUrl parse(String url) {
     assertThat(url.queryParameter("a+=& b")).isEqualTo("ef");
   }
 
-  @Test public void composeQuerySetEncodedQueryParameter() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void composeQuerySetEncodedQueryParameter(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .addEncodedQueryParameter("a+=& b", "c+=& d")
         .setEncodedQueryParameter("a+=& b", "ef")
         .build();
@@ -1558,8 +1655,9 @@ WebUrl parse(String url) {
     assertThat(url.queryParameter("a =& b")).isEqualTo("ef");
   }
 
-  @Test public void composeQueryMultipleEncodedValuesForParameter() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void composeQueryMultipleEncodedValuesForParameter(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .addQueryParameter("a+=& b", "c+=& d")
         .addQueryParameter("a+=& b", "e+=& f")
         .build();
@@ -1567,19 +1665,20 @@ WebUrl parse(String url) {
         "http://host/?a%2B%3D%26%20b=c%2B%3D%26%20d&a%2B%3D%26%20b=e%2B%3D%26%20f");
     assertThat(url.querySize()).isEqualTo(2);
     assertThat(url.queryParameterNames()).isEqualTo(Collections.singleton("a+=& b"));
-    assertThat(url.queryParameterValues("a+=& b")).isEqualTo(
-        Arrays.asList("c+=& d", "e+=& f"));
+    assertThat(url.queryParameterValues("a+=& b")).isEqualTo(List.of("c+=& d", "e+=& f"));
   }
 
-  @Test public void absentQueryIsZeroNameValuePairs() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void absentQueryIsZeroNameValuePairs(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .query(null)
         .build();
     assertThat(url.querySize()).isEqualTo(0);
   }
 
-  @Test public void emptyQueryIsSingleNameValuePairWithEmptyKey() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void emptyQueryIsSingleNameValuePairWithEmptyKey(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .query("")
         .build();
     assertThat(url.querySize()).isEqualTo(1);
@@ -1587,8 +1686,9 @@ WebUrl parse(String url) {
     assertThat(url.queryParameterValue(0)).isNull();
   }
 
-  @Test public void ampersandQueryIsTwoNameValuePairsWithEmptyKeys() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void ampersandQueryIsTwoNameValuePairsWithEmptyKeys(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .query("&")
         .build();
     assertThat(url.querySize()).isEqualTo(2);
@@ -1598,19 +1698,21 @@ WebUrl parse(String url) {
     assertThat(url.queryParameterValue(1)).isNull();
   }
 
-  @Test public void removeAllDoesNotRemoveQueryIfNoParametersWereRemoved() throws Exception {
-    WebUrl url = parse("http://host/").newBuilder()
+  @ParameterizedTestWithWebUrlFactory
+  public void removeAllDoesNotRemoveQueryIfNoParametersWereRemoved(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/", method).newBuilder()
         .query("")
         .removeAllQueryParameters("a")
         .build();
     assertThat(url.toString()).isEqualTo("http://host/?");
   }
 
-  @Test public void queryParametersWithoutValues() throws Exception {
-    WebUrl url = parse("http://host/?foo&bar&baz");
+  @ParameterizedTestWithWebUrlFactory
+  public void queryParametersWithoutValues(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/?foo&bar&baz", method);
     assertThat(url.querySize()).isEqualTo(3);
     assertThat(url.queryParameterNames()).isEqualTo(
-        new LinkedHashSet<>(Arrays.asList("foo", "bar", "baz")));
+        new LinkedHashSet<>(List.of("foo", "bar", "baz")));
     assertThat(url.queryParameterValue(0)).isNull();
     assertThat(url.queryParameterValue(1)).isNull();
     assertThat(url.queryParameterValue(2)).isNull();
@@ -1619,11 +1721,12 @@ WebUrl parse(String url) {
     assertThat(url.queryParameterValues("baz")).isEqualTo(singletonList((String) null));
   }
 
-  @Test public void queryParametersWithEmptyValues() throws Exception {
-    WebUrl url = parse("http://host/?foo=&bar=&baz=");
+  @ParameterizedTestWithWebUrlFactory
+  public void queryParametersWithEmptyValues(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/?foo=&bar=&baz=", method);
     assertThat(url.querySize()).isEqualTo(3);
     assertThat(url.queryParameterNames()).isEqualTo(
-        new LinkedHashSet<>(Arrays.asList("foo", "bar", "baz")));
+        new LinkedHashSet<>(List.of("foo", "bar", "baz")));
     assertThat(url.queryParameterValue(0)).isEqualTo("");
     assertThat(url.queryParameterValue(1)).isEqualTo("");
     assertThat(url.queryParameterValue(2)).isEqualTo("");
@@ -1632,32 +1735,35 @@ WebUrl parse(String url) {
     assertThat(url.queryParameterValues("baz")).isEqualTo(singletonList(""));
   }
 
-  @Test public void queryParametersWithRepeatedName() throws Exception {
-    WebUrl url = parse("http://host/?foo[]=1&foo[]=2&foo[]=3");
+  @ParameterizedTestWithWebUrlFactory
+  public void queryParametersWithRepeatedName(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/?foo[]=1&foo[]=2&foo[]=3", method);
     assertThat(url.querySize()).isEqualTo(3);
     assertThat(url.queryParameterNames()).isEqualTo(Collections.singleton("foo[]"));
     assertThat(url.queryParameterValue(0)).isEqualTo("1");
     assertThat(url.queryParameterValue(1)).isEqualTo("2");
     assertThat(url.queryParameterValue(2)).isEqualTo("3");
-    assertThat(url.queryParameterValues("foo[]")).isEqualTo(Arrays.asList("1", "2", "3"));
+    assertThat(url.queryParameterValues("foo[]")).isEqualTo(List.of("1", "2", "3"));
   }
 
-  @Test public void queryParameterLookupWithNonCanonicalEncoding() throws Exception {
-    WebUrl url = parse("http://host/?%6d=m&+=%20");
+  @ParameterizedTestWithWebUrlFactory
+  public void queryParameterLookupWithNonCanonicalEncoding(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/?%6d=m&+=%20", method);
     assertThat(url.queryParameterName(0)).isEqualTo("m");
     assertThat(url.queryParameterName(1)).isEqualTo(" ");
     assertThat(url.queryParameter("m")).isEqualTo("m");
     assertThat(url.queryParameter(" ")).isEqualTo(" ");
   }
 
-  @Test public void parsedQueryDoesntIncludeFragment() {
-    WebUrl url = parse("http://host/?#fragment");
+  @ParameterizedTestWithWebUrlFactory
+  public void parsedQueryDoesntIncludeFragment(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/?#fragment", method);
     assertThat(url.fragment()).isEqualTo("fragment");
     assertThat(url.query()).isEqualTo("");
     assertThat(url.encodedQuery()).isEqualTo("");
   }
 
-  @Test public void roundTripBuilder() throws Exception {
+  @Test public void roundTripBuilder() {
     WebUrl url = WebUrl.builder()
         .scheme("http")
         .username("%")
@@ -1677,13 +1783,14 @@ WebUrl parse(String url) {
    * Although WebUrl prefers percent-encodings in uppercase, it should preserve the exact structure
    * of the original encoding.
    */
-  @Test public void rawEncodingRetained() throws Exception {
+  @ParameterizedTestWithWebUrlFactory
+  public void rawEncodingRetained(WebUrlFactoryMethod method) {
     String urlString = "http://%6d%6D:%6d%6D@host/%6d%6D?%6d%6D#%6d%6D";
-    WebUrl url = parse(urlString);
+    WebUrl url = create(urlString, method);
     assertThat(url.encodedUsername()).isEqualTo("%6d%6D");
     assertThat(url.encodedPassword()).isEqualTo("%6d%6D");
     assertThat(url.encodedPath()).isEqualTo("/%6d%6D");
-    assertThat(url.encodedPathSegments()).isEqualTo(Arrays.asList("%6d%6D"));
+    assertThat(url.encodedPathSegments()).isEqualTo(List.of("%6d%6D"));
     assertThat(url.encodedQuery()).isEqualTo("%6d%6D");
     assertThat(url.encodedFragment()).isEqualTo("%6d%6D");
     assertThat(url.toString()).isEqualTo(urlString);
@@ -1692,8 +1799,9 @@ WebUrl parse(String url) {
         "http://%6d%6D:%6d%6D@host/%6d%6D?%6d%6D");
   }
 
-  @Test public void clearFragment() throws Exception {
-    WebUrl url = parse("http://host/#fragment")
+  @ParameterizedTestWithWebUrlFactory
+  public void clearFragment(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/#fragment", method)
         .newBuilder()
         .fragment(null)
         .build();
@@ -1702,8 +1810,9 @@ WebUrl parse(String url) {
     assertThat(url.encodedFragment()).isNull();
   }
 
-  @Test public void clearEncodedFragment() throws Exception {
-    WebUrl url = parse("http://host/#fragment")
+  @ParameterizedTestWithWebUrlFactory
+  public void clearEncodedFragment(WebUrlFactoryMethod method) {
+    WebUrl url = create("http://host/#fragment", method)
         .newBuilder()
         .encodedFragment(null)
         .build();
@@ -1712,33 +1821,21 @@ WebUrl parse(String url) {
     assertThat(url.encodedFragment()).isNull();
   }
 
-  @Test public void topPrivateDomain() {
-    assertThat(parse("https://google.com").topPrivateDomain()).isEqualTo("google.com");
-    assertThat(parse("https://adwords.google.co.uk").topPrivateDomain()).isEqualTo(
+  @ParameterizedTestWithWebUrlFactory
+  public void topPrivateDomain(WebUrlFactoryMethod method) {
+    assertThat(create("https://google.com", method).topPrivateDomain()).isEqualTo("google.com");
+    assertThat(create("https://adwords.google.co.uk", method).topPrivateDomain()).isEqualTo(
         "google.co.uk");
-    assertThat(parse("https://栃.栃木.jp").topPrivateDomain()).isEqualTo(
+    assertThat(create("https://栃.栃木.jp", method).topPrivateDomain()).isEqualTo(
         "xn--ewv.xn--4pvxs.jp");
-    assertThat(parse("https://xn--ewv.xn--4pvxs.jp").topPrivateDomain()).isEqualTo(
+    assertThat(create("https://xn--ewv.xn--4pvxs.jp", method).topPrivateDomain()).isEqualTo(
         "xn--ewv.xn--4pvxs.jp");
 
-    assertThat(parse("https://co.uk").topPrivateDomain()).isNull();
-    assertThat(parse("https://square").topPrivateDomain()).isNull();
-    assertThat(parse("https://栃木.jp").topPrivateDomain()).isNull();
-    assertThat(parse("https://xn--4pvxs.jp").topPrivateDomain()).isNull();
-    assertThat(parse("https://localhost").topPrivateDomain()).isNull();
-    assertThat(parse("https://127.0.0.1").topPrivateDomain()).isNull();
-  }
-
-  private void assertInvalid(String string, String exceptionMessage) {
-    if (useGet) {
-      try {
-        parse(string);
-        fail("Expected get of \"" + string + "\" to throw with: " + exceptionMessage);
-      } catch (IllegalArgumentException e) {
-        assertThat(e.getMessage()).isEqualTo(exceptionMessage);
-      }
-    } else {
-      assertThat(parse(string)).overridingErrorMessage(string).isNull();
-    }
+    assertThat(create("https://co.uk", method).topPrivateDomain()).isNull();
+    assertThat(create("https://square", method).topPrivateDomain()).isNull();
+    assertThat(create("https://栃木.jp", method).topPrivateDomain()).isNull();
+    assertThat(create("https://xn--4pvxs.jp", method).topPrivateDomain()).isNull();
+    assertThat(create("https://localhost", method).topPrivateDomain()).isNull();
+    assertThat(create("https://127.0.0.1", method).topPrivateDomain()).isNull();
   }
 }
