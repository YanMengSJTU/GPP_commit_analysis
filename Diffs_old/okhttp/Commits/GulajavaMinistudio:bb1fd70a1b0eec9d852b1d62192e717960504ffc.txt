diff --git a/.gitignore b/.gitignore
index 2989c1ec8e..b541aaa994 100644
--- a/.gitignore
+++ b/.gitignore
@@ -27,7 +27,7 @@ obj
 .DS_Store
 
 # Special Mkdocs files
-docs/api
+docs/4.x
 docs/changelog.md
 docs/contributing.md
 docs/index.md
diff --git a/deploy_website.sh b/deploy_website.sh
index eaa6e560bf..202321d658 100755
--- a/deploy_website.sh
+++ b/deploy_website.sh
@@ -41,6 +41,7 @@ mkdocs gh-deploy
 # Restore Javadocs from 1.x, 2.x, and 3.x.
 git checkout gh-pages
 git cherry-pick bb229b9dcc9a21a73edbf8d936bea88f52e0a3ff
+git cherry-pick c695732f1d4aea103b826876c077fbfea630e244
 git push
 
 # Delete our temp folder
diff --git a/docs/calls.md b/docs/calls.md
index 2ffa0a4130..38b7c25cd6 100644
--- a/docs/calls.md
+++ b/docs/calls.md
@@ -2,11 +2,11 @@
 
 The HTTP client’s job is to accept your request and produce its response. This is simple in theory but it gets tricky in practice.
 
-## [Requests](http://square.github.io/okhttp/api/okhttp/okhttp3/-request/)
+## [Requests](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-request/)
 
 Each HTTP request contains a URL, a method (like `GET` or `POST`), and a list of headers. Requests may also contain a body: a data stream of a specific content type.
 
-## [Responses](http://square.github.io/okhttp/api/okhttp/okhttp3/-response/)
+## [Responses](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-response/)
 
 The response answers the request with a code (like 200 for success or 404 for not found), headers, and its own optional body.
 
@@ -28,20 +28,20 @@ If a conditional GET was successful, responses from the network and cache are me
 
 When your requested URL has moved, the webserver will return a response code like `302` to indicate the document’s new URL. OkHttp will follow the redirect to retrieve a final response.
 
-If the response issues an authorization challenge, OkHttp will ask the [`Authenticator`](http://square.github.io/okhttp/api/okhttp/okhttp3/-authenticator/) (if one is configured) to satisfy the challenge. If the authenticator supplies a credential, the request is retried with that credential included.
+If the response issues an authorization challenge, OkHttp will ask the [`Authenticator`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-authenticator/) (if one is configured) to satisfy the challenge. If the authenticator supplies a credential, the request is retried with that credential included.
 
 ## Retrying Requests
 
 Sometimes connections fail: either a pooled connection was stale and disconnected, or the webserver itself couldn’t be reached. OkHttp will retry the request with a different route if one is available.
 
-## [Calls](http://square.github.io/okhttp/api/okhttp/okhttp3/-call/)
+## [Calls](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-call/)
 
 With rewrites, redirects, follow-ups and retries, your simple request may yield many requests and responses. OkHttp uses `Call` to model the task of satisfying your request through however many intermediate requests and responses are necessary. Typically this isn’t many! But it’s comforting to know that your code will continue to work if your URLs are redirected or if you failover to an alternate IP address.
 
 Calls are executed in one of two ways:
 
  * **Synchronous:** your thread blocks until the response is readable.
- * **Asynchronous:** you enqueue the request on any thread, and get [called back](http://square.github.io/okhttp/api/okhttp/okhttp3/-callback/) on another thread when the response is readable.
+ * **Asynchronous:** you enqueue the request on any thread, and get [called back](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-callback/) on another thread when the response is readable.
 
 Calls can be canceled from any thread. This will fail the call if it hasn’t yet completed! Code that is writing the request body or reading the response body will suffer an `IOException` when its call is canceled.
 
@@ -49,4 +49,4 @@ Calls can be canceled from any thread. This will fail the call if it hasn’t ye
 
 For synchronous calls, you bring your own thread and are responsible for managing how many simultaneous requests you make. Too many simultaneous connections wastes resources; too few harms latency.
 
-For asynchronous calls, [`Dispatcher`](http://square.github.io/okhttp/api/okhttp/okhttp3/-dispatcher/) implements policy for maximum simultaneous requests. You can set maximums per-webserver (default is 5), and overall (default is 64).
+For asynchronous calls, [`Dispatcher`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-dispatcher/) implements policy for maximum simultaneous requests. You can set maximums per-webserver (default is 5), and overall (default is 64).
diff --git a/docs/connections.md b/docs/connections.md
index 57576979a0..5c2f525883 100644
--- a/docs/connections.md
+++ b/docs/connections.md
@@ -3,7 +3,7 @@ Connections
 
 Although you provide only the URL, OkHttp plans its connection to your webserver using three types: URL, Address, and Route.
 
-#### [URLs](http://square.github.io/okhttp/api/okhttp/okhttp3/-http-url/)
+#### [URLs](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-http-url/)
 
 URLs (like `https://github.com/square/okhttp`) are fundamental to HTTP and the Internet. In addition to being a universal, decentralized naming scheme for everything on the web, they also specify how to access web resources.
 
@@ -14,21 +14,21 @@ URLs are abstract:
 
 They're also concrete: each URL identifies a specific path (like `/square/okhttp`) and query (like `?q=sharks&lang=en`). Each webserver hosts many URLs.
 
-#### [Addresses](http://square.github.io/okhttp/api/okhttp/okhttp3/-address/)
+#### [Addresses](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-address/)
 
 Addresses specify a webserver (like `github.com`) and all of the **static** configuration necessary to connect to that server: the port number, HTTPS settings, and preferred network protocols (like HTTP/2 or SPDY).
 
-URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to [TCP slow start](http://www.igvita.com/2011/10/20/faster-web-vs-tcp-slow-start/)) and conserved battery. OkHttp uses a [ConnectionPool](http://square.github.io/okhttp/api/okhttp/okhttp3/-connection-pool/) that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY connections.
+URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to [TCP slow start](http://www.igvita.com/2011/10/20/faster-web-vs-tcp-slow-start/)) and conserved battery. OkHttp uses a [ConnectionPool](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection-pool/) that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY connections.
 
-In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the [OkHttpClient](http://square.github.io/okhttp/api/okhttp/okhttp3/-ok-http-client/).
+In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the [OkHttpClient](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/).
 
-#### [Routes](http://square.github.io/okhttp/api/okhttp/okhttp3/-route/)
+#### [Routes](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-route/)
 
 Routes supply the **dynamic** information necessary to actually connect to a webserver. This is the specific IP address to attempt (as discovered by a DNS query), the exact proxy server to use (if a [ProxySelector](http://developer.android.com/reference/java/net/ProxySelector.html) is in use), and which version of TLS to negotiate (for HTTPS connections).
 
 There may be many routes for a single address. For example, a webserver that is hosted in multiple datacenters may yield multiple IP addresses in its DNS response.
 
-#### [Connections](http://square.github.io/okhttp/api/okhttp/okhttp3/-connection/)
+#### [Connections](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection/)
 
 When you request a URL with OkHttp, here's what it does:
 
diff --git a/docs/https.md b/docs/https.md
index 7aad7b142d..142b7c3d9c 100644
--- a/docs/https.md
+++ b/docs/https.md
@@ -6,9 +6,9 @@ OkHttp attempts to balance two competing concerns:
  * **Connectivity** to as many hosts as possible. That includes advanced hosts that run the latest versions of [boringssl](https://boringssl.googlesource.com/boringssl/) and less out of date hosts running older versions of [OpenSSL](https://www.openssl.org/).
  * **Security** of the connection. This includes verification of the remote webserver with certificates and the privacy of data exchanged with strong ciphers.
 
-When negotiating a connection to an HTTPS server, OkHttp needs to know which [TLS versions](http://square.github.io/okhttp/api/okhttp/okhttp3/-tls-version/) and [cipher suites](http://square.github.io/okhttp/api/okhttp/okhttp3/-cipher-suite/) to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites.
+When negotiating a connection to an HTTPS server, OkHttp needs to know which [TLS versions](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-tls-version/) and [cipher suites](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cipher-suite/) to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites.
 
-Specific security vs. connectivity decisions are implemented by [ConnectionSpec](http://square.github.io/okhttp/api/okhttp/okhttp3/-connection-spec/). OkHttp includes four built-in connection specs:
+Specific security vs. connectivity decisions are implemented by [ConnectionSpec](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection-spec/). OkHttp includes four built-in connection specs:
 
  * `RESTRICTED_TLS` is a secure configuration, intended to meet stricter compliance requirements.
  * `MODERN_TLS` is a secure configuration that connects to modern HTTPS servers.
@@ -47,7 +47,7 @@ OkHttpClient client = new OkHttpClient.Builder()
 
 By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the [2011 DigiNotar attack](http://www.computerworld.com/article/2510951/cybercrime-hacking/hackers-spied-on-300-000-iranians-using-fake-google-certificate.html). It also assumes your HTTPS servers’ certificates are signed by a certificate authority.
 
-Use [CertificatePinner](http://square.github.io/okhttp/api/okhttp/okhttp3/-certificate-pinner/) to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team’s abilities to update their TLS certificates. **Do not use certificate pinning without the blessing of your server’s TLS administrator!**
+Use [CertificatePinner](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-certificate-pinner/) to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team’s abilities to update their TLS certificates. **Do not use certificate pinning without the blessing of your server’s TLS administrator!**
 
 ```java
   public CertificatePinning() {
diff --git a/docs/images/disable_advanced_profiling@2x.png b/docs/images/disable_advanced_profiling@2x.png
new file mode 100644
index 0000000000..672fb514b5
Binary files /dev/null and b/docs/images/disable_advanced_profiling@2x.png differ
diff --git a/docs/recipes.md b/docs/recipes.md
index 5cd0f44055..c9bb42a6e3 100644
--- a/docs/recipes.md
+++ b/docs/recipes.md
@@ -343,7 +343,7 @@ Response caching uses HTTP headers for all configuration. You can add request he
     System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));
   }
 ```
-To prevent a response from using the cache, use [`CacheControl.FORCE_NETWORK`](http://square.github.io/okhttp/api/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-n-e-t-w-o-r-k/). To prevent it from using the network, use [`CacheControl.FORCE_CACHE`](http://square.github.io/okhttp/api/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-c-a-c-h-e/). Be warned: if you use `FORCE_CACHE` and the response requires the network, OkHttp will return a `504 Unsatisfiable Request` response.
+To prevent a response from using the cache, use [`CacheControl.FORCE_NETWORK`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-n-e-t-w-o-r-k/). To prevent it from using the network, use [`CacheControl.FORCE_CACHE`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-c-a-c-h-e/). Be warned: if you use `FORCE_CACHE` and the response requires the network, OkHttp will return a `504 Unsatisfiable Request` response.
 
 #### [Canceling a Call](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java)
 
diff --git a/docs/upgrading_to_okhttp_4.md b/docs/upgrading_to_okhttp_4.md
index ca21692d15..29f20b31c2 100644
--- a/docs/upgrading_to_okhttp_4.md
+++ b/docs/upgrading_to_okhttp_4.md
@@ -2,16 +2,16 @@ Upgrading to OkHttp 4
 =====================
 
 OkHttp 4.x upgrades our implementation language from Java to Kotlin and keeps everything else the
-same. We've chosen Kotlin because it gives us powerful new capabilities while integrating closely
+same. We’ve chosen Kotlin because it gives us powerful new capabilities while integrating closely
 with Java.
 
-We spent a lot of time and energy on retaining strict compatibility with OkHttp 3.x. We're even
+We spent a lot of time and energy on retaining strict compatibility with OkHttp 3.x. We’re even
 keeping the package name the same: `okhttp3`!
 
-There are three kinds of compatibility we're tracking:
+There are three kinds of compatibility we’re tracking:
 
  * **Binary compatibility** is the ability to compile a program against OkHttp 3.x, and then to run
-   it against OkHttp 4.x. We're using the excellent [japicmp][japicmp] library via its
+   it against OkHttp 4.x. We’re using the excellent [japicmp][japicmp] library via its
    [Gradle plugin][japicmp_gradle] to enforce binary compatibility.
 
  * **Java source compatibility** is the ability to upgrade Java uses of OkHttp 3.x to 4.x without
@@ -20,39 +20,41 @@ There are three kinds of compatibility we're tracking:
  * **Kotlin source compatibility** is the ability to upgrade Kotlin uses of OkHttp 3.x to 4.x
    without changing `.kt` files.
 
-With one exception, OkHttp 4.x is both binary- and Java source-compatible with OkHttp 3.x. You can
-use an OkHttp 4.x .jar file with applications or libraries built for OkHttp 3.x. (The exception?
-`OkHttpClient` makes more things `final`.)
+With a few small exceptions (below), OkHttp 4.x is both binary- and Java source-compatible with
+OkHttp 3.x. You can use an OkHttp 4.x .jar file with applications or libraries built for OkHttp 3.x.
 
 OkHttp is **not** source-compatible for Kotlin callers, but upgrading should be automatic thanks to
-Kotlin's powerful deprecation features. Most developers should be able to use IntelliJ's _Code
+Kotlin’s powerful deprecation features. Most developers should be able to use IntelliJ’s _Code
 Cleanup_ for a safe and fast upgrade.
 
-For example, when we upgraded Square's Kotlin and Java codebases to OkHttp 4.x we had these
-problems:
-
- * Single Abstract Method (SAM) conversions required us to replace lambdas with objects for Kotlin
-   callers.
-
- * OkHttp 4.x's new `RequestBody.create()` overload conflicted with an overload in one of our
-   subclasses. The compiler caught this!
-
-We expect most projects to have similarly trivial problems with the upgrade, if any. This guide
-walks through all of the changes and how to address them.
-
 
 Backwards-Incompatible Changes
 ------------------------------
 
+#### OkHttpClient final methods
+
 `OkHttpClient` has 26 accessors like `interceptors()` and `writeTimeoutMillis()` that were non-final
 in OkHttp 3.x and are final in 4.x. These were made non-final for use with mocking frameworks like
-[Mockito][mockito]. We believe subtyping `OkHttpClient` is the wrong way to test with OkHttp.
+[Mockito][mockito]. We believe subtyping `OkHttpClient` is the wrong way to test with OkHttp. If
+you must, mock `Call.Factory` which is the interface that `OkHttpClient` implements.
+
+#### Internal API changes
 
 The `okhttp3.internal` package is not a published API and we change it frequently without warning.
-Depending on code in this package is bad and will cause you problems with any upgrade. But the 4.x
+Depending on code in this package is bad and will cause you problems with any upgrade! But the 4.x
 will be particularly painful to naughty developers that import from this package! We changed a lot
 to take advantage of sweet Kotlin features.
 
+#### Credentials.basic()
+
+The username and password parameters to `Credentials.basic()` are now non-null strings. In OkHttp
+3.x, null would yield a username or password of "null".
+
+#### HttpUrl.queryParameterValues()
+
+The return type of `HttpUrl.queryParameterValues()` is `List<String?>`. Lists that may contain null
+are uncommon and Kotlin callers may have incorrectly assigned the result to `List<String>`.
+
 
 Code Cleanup
 ------------
@@ -61,63 +63,15 @@ IntelliJ and Android Studio offer a **Code Cleanup** feature that will automatic
 deprecated APIs with their replacements. Access this feature from the _Search Anywhere_ dialog
 (double-press shift) or under the _Analyze_ menu.
 
-The deprecation replacements that Code Cleanup possible are included in OkHttp 4.0. We will remove
-them in a future update to OkHttp, so if you're skipping releases you should upgrade to OkHttp 4.0
+We’ve included deprecated APIs in OkHttp 4.0 because they make migration easy. We will remove them
+in a future release! If you’re skipping releases, it’ll be much easier if you upgrade to OkHttp 4.0
 as an intermediate step.
 
+#### Vars and Vals
 
-SAM Conversions
----------------
-
-When you use Java APIs from Kotlin you can operate on Java interfaces as if they were Kotlin
-lambdas. The [feature][kotlin_sam] is available for interfaces that define a Single Abstract Method
-(SAM).
-
-But when you use Kotlin APIs from Kotlin there's no automatic conversion. Code that used SAM lambdas
-with OkHttp 3.x: must use `object :` with OkHttp 4.x:
-
-Kotlin calling OkHttp 3.x:
-
-```kotlin
-val client = OkHttpClient.Builder()
-    .dns { hostname -> InetAddress.getAllByName(hostname).toList() }
-    .build()
-```
-
-Kotlin calling OkHttp 4.x:
-
-```kotlin
-val client = OkHttpClient.Builder()
-    .dns(object : Dns {
-      override fun lookup(hostname: String) =
-          InetAddress.getAllByName(hostname).toList()
-    })
-    .build()
-```
-
-SAM conversion impacts these APIs:
-
- * Authenticator
- * Dispatcher.setIdleCallback(Runnable)
- * Dns
- * EventListener.Factory
- * HttpLoggingInterceptor.Logger
- * LoggingEventListener.Factory
- * OkHttpClient.Builder.hostnameVerifier(HostnameVerifier)
-
-JetBrains [is working on][kotlin_sams] SAM conversions of Kotlin interfaces. Expect it in a future
-release of the Kotlin language.
-
-
-Vars and Vals
--------------
-
-Java doesn't have language support for properties so developers make do with getters and setters.
+Java doesn’t have language support for properties so developers make do with getters and setters.
 Kotlin does have properties and we take advantage of them in OkHttp.
 
-We recommend using _Code Cleanup_ to fix these; it'll use `@Deprecated` to find replacements and fix
-them automatically.
-
  * **Address**: certificatePinner, connectionSpecs, dns, hostnameVerifier, protocols, proxy,
    proxyAuthenticator, proxySelector, socketFactory, sslSocketFactory, url
  * **Cache**: directory
@@ -155,11 +109,14 @@ them automatically.
  * **Route**: address, proxy, socketAddress
  * **TlsVersion**: javaName
 
+#### Renamed Functions
+
+* **Headers.of()**: for symmetry with `listOf()`, `setOf()`, etc., we’ve replaced
+  `Headers.of(String...)` with `headersOf(vararg String)`.
 
-Extension Functions
--------------------
+#### Extension Functions
 
-_Code Cleanup_ will fix these too:
+We’ve migrated from static functions to extension functions where we think they fit.
 
 | Java                                | Kotlin                          |
 | :---------------------------------- | :------------------------------ |
@@ -183,24 +140,47 @@ _Code Cleanup_ will fix these too:
 | ResponseBody.create(String)         | String.toResponseBody()         |
 
 
-headersOf()
------------
+SAM Conversions
+---------------
 
-For symmetry with `listOf()`, `setOf()`, etc., we've replaced `Headers.of(String...)` with
-`headersOf(vararg String)`.
+When you use Java APIs from Kotlin you can operate on Java interfaces as if they were Kotlin
+lambdas. The [feature][java_sams] is available for interfaces that define a Single Abstract Method
+(SAM).
+
+But when you use Kotlin APIs from Kotlin there’s no automatic conversion. Code that used SAM lambdas
+with OkHttp 3.x: must use `object :` with OkHttp 4.x:
+
+Kotlin calling OkHttp 3.x:
+
+```kotlin
+val client = OkHttpClient.Builder()
+    .dns { hostname -> InetAddress.getAllByName(hostname).toList() }
+    .build()
+```
 
+Kotlin calling OkHttp 4.x:
 
-queryParameterValues()
-----------------------
+```kotlin
+val client = OkHttpClient.Builder()
+    .dns(object : Dns {
+      override fun lookup(hostname: String) =
+          InetAddress.getAllByName(hostname).toList()
+    })
+    .build()
+```
 
-The return type of `HttpUrl.queryParameterValues()` is `List<String?>`. Lists that may contain
-null are uncommon and Kotlin callers may have incorrectly assigned the result to `List<String>`.
+SAM conversion impacts these APIs:
 
+ * Authenticator
+ * Dispatcher.setIdleCallback(Runnable)
+ * Dns
+ * EventListener.Factory
+ * HttpLoggingInterceptor.Logger
+ * LoggingEventListener.Factory
+ * OkHttpClient.Builder.hostnameVerifier(HostnameVerifier)
 
-[japicmp]: https://github.com/siom79/japicmp
-[japicmp_gradle]: https://github.com/melix/japicmp-gradle-plugin
-[mockito]: https://site.mockito.org/
-[kotlin_sam]: https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
+JetBrains [is working on][kotlin_sams] SAM conversions of Kotlin interfaces. Expect it in a future
+release of the Kotlin language.
 
 
 Companion Imports
@@ -230,6 +210,16 @@ sed -i "" \
 ```
 
 
+Advanced Profiling
+------------------
+
+Android Studio’s Advanced Profiling feature rewrites OkHttp bytecode for instrumentation.
+Unfortunately it crashes on OkHttp 4.x’s bytecode. Until [Google’s bug][advanced_profiling_bug] is
+fixed you must disable advanced profiling in Android Studio.
+
+![Disable Advanced Profiling](images/disable_advanced_profiling@2x.png)
+
+
 R8 / ProGuard
 -------------
 
@@ -238,11 +228,16 @@ R8 and ProGuard are both code optimizers for `.class` files.
 R8 is the [default optimizer][r8] in Android Studio 3.4 and newer. It works well with all
 releases of OkHttp.
 
-ProGuard was the previous default. We're [tracking problems][proguard_problems] with interactions
-between ProGuard, OkHttp 4.x, and Kotlin-originated `.class` files. Make sure you're on the latest
-release if you're using ProGuard,
+ProGuard was the previous default. We’re [tracking problems][proguard_problems] with interactions
+between ProGuard, OkHttp 4.x, and Kotlin-originated `.class` files. Make sure you’re on the latest
+release if you’re using ProGuard,
 
 
- [kotlin_sams]: https://discuss.kotlinlang.org/t/new-type-inference-in-kotlin-1-3-0-rc-190/9914/2
+ [advanced_profiling_bug]: https://issuetracker.google.com/issues/135141615
+ [japicmp]: https://github.com/siom79/japicmp
+ [japicmp_gradle]: https://github.com/melix/japicmp-gradle-plugin
+ [java_sams]: https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
+ [kotlin_sams]: https://youtrack.jetbrains.com/issue/KT-11129
+ [mockito]: https://site.mockito.org/
  [proguard_problems]: https://github.com/square/okhttp/issues/5167
  [r8]: https://developer.android.com/studio/releases#r8-default
diff --git a/mkdocs.yml b/mkdocs.yml
index 12960b1db0..abedb009ab 100644
--- a/mkdocs.yml
+++ b/mkdocs.yml
@@ -45,13 +45,13 @@ nav:
   - 'Works with OkHttp': works_with_okhttp.md
   - 'Stack Overflow ⏏': https://stackoverflow.com/questions/tagged/okhttp?sort=active
   - '4.x API':
-    - 'okhttp': api/okhttp/okhttp3/index.md
-    - 'dnsoverhttps': api/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/index.md
-    - 'logging-interceptor': api/okhttp-logging-interceptor/okhttp3.logging/index.md
-    - 'sse': api/okhttp-sse/okhttp3.sse/index.md
-    - 'tls': api/okhttp-tls/okhttp3.tls/index.md
-    - 'urlconnection': api/okhttp-urlconnection/okhttp3/index.md
-    - 'mockwebserver': api/mockwebserver/okhttp3.mockwebserver/index.md
+    - 'okhttp': 4.x/okhttp/okhttp3/index.md
+    - 'dnsoverhttps': 4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/index.md
+    - 'logging-interceptor': 4.x/okhttp-logging-interceptor/okhttp3.logging/index.md
+    - 'sse': 4.x/okhttp-sse/okhttp3.sse/index.md
+    - 'tls': 4.x/okhttp-tls/okhttp3.tls/index.md
+    - 'urlconnection': 4.x/okhttp-urlconnection/okhttp3/index.md
+    - 'mockwebserver': 4.x/mockwebserver/okhttp3.mockwebserver/index.md
   - '3.x API':
     - 'okhttp ⏏': https://square.github.io/okhttp/3.x/okhttp/
     - 'dnsoverhttps ⏏': https://square.github.io/okhttp/3.x/okhttp-dnsoverhttps/
diff --git a/mockwebserver/build.gradle b/mockwebserver/build.gradle
index 78644e9270..d48d2ed554 100644
--- a/mockwebserver/build.gradle
+++ b/mockwebserver/build.gradle
@@ -18,7 +18,7 @@ dependencies {
 
 afterEvaluate { project ->
   project.tasks.dokka {
-    outputDirectory = "$rootDir/docs/api"
+    outputDirectory = "$rootDir/docs/4.x"
     outputFormat = 'gfm'
   }
 }
diff --git a/okhttp-dnsoverhttps/build.gradle b/okhttp-dnsoverhttps/build.gradle
index be16589de1..16fb4c80fb 100644
--- a/okhttp-dnsoverhttps/build.gradle
+++ b/okhttp-dnsoverhttps/build.gradle
@@ -19,7 +19,7 @@ dependencies {
 
 afterEvaluate { project ->
   project.tasks.dokka {
-    outputDirectory = "$rootDir/docs/api"
+    outputDirectory = "$rootDir/docs/4.x"
     outputFormat = 'gfm'
   }
 }
diff --git a/okhttp-logging-interceptor/build.gradle b/okhttp-logging-interceptor/build.gradle
index b96034803e..b9d5410558 100644
--- a/okhttp-logging-interceptor/build.gradle
+++ b/okhttp-logging-interceptor/build.gradle
@@ -21,7 +21,7 @@ dependencies {
 
 afterEvaluate { project ->
   project.tasks.dokka {
-    outputDirectory = "$rootDir/docs/api"
+    outputDirectory = "$rootDir/docs/4.x"
     outputFormat = 'gfm'
   }
 }
diff --git a/okhttp-sse/build.gradle b/okhttp-sse/build.gradle
index 594eb2c1de..db2745599c 100644
--- a/okhttp-sse/build.gradle
+++ b/okhttp-sse/build.gradle
@@ -20,7 +20,7 @@ dependencies {
 
 afterEvaluate { project ->
   project.tasks.dokka {
-    outputDirectory = "$rootDir/docs/api"
+    outputDirectory = "$rootDir/docs/4.x"
     outputFormat = 'gfm'
   }
 }
diff --git a/okhttp-tls/README.md b/okhttp-tls/README.md
index ecd6de0a11..fa453510a5 100644
--- a/okhttp-tls/README.md
+++ b/okhttp-tls/README.md
@@ -230,7 +230,7 @@ Download
 implementation("com.squareup.okhttp3:okhttp-tls:3.14.2")
 ```
 
- [held_certificate]: http://square.github.io/okhttp/api/okhttp-tls/okhttp3.tls/-held-certificate/
- [held_certificate_builder]: http://square.github.io/okhttp/api/okhttp-tls/okhttp3.tls/-held-certificate/-builder/
- [handshake_certificates]: http://square.github.io/okhttp/api/okhttp-tls/okhttp3.tls/-handshake-certificates/
- [handshake_certificates_builder]: http://square.github.io/okhttp/api/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/
+ [held_certificate]: http://square.github.io/okhttp/4.x/okhttp-tls/okhttp3.tls/-held-certificate/
+ [held_certificate_builder]: http://square.github.io/okhttp/4.x/okhttp-tls/okhttp3.tls/-held-certificate/-builder/
+ [handshake_certificates]: http://square.github.io/okhttp/4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/
+ [handshake_certificates_builder]: http://square.github.io/okhttp/4.x/okhttp-tls/okhttp3.tls/-handshake-certificates/-builder/
diff --git a/okhttp-tls/build.gradle b/okhttp-tls/build.gradle
index a0d9194d64..011d8c0abc 100644
--- a/okhttp-tls/build.gradle
+++ b/okhttp-tls/build.gradle
@@ -20,7 +20,7 @@ dependencies {
 
 afterEvaluate { project ->
   project.tasks.dokka {
-    outputDirectory = "$rootDir/docs/api"
+    outputDirectory = "$rootDir/docs/4.x"
     outputFormat = 'gfm'
   }
 }
diff --git a/okhttp-urlconnection/build.gradle b/okhttp-urlconnection/build.gradle
index e94507e0cc..8a197bdcd3 100644
--- a/okhttp-urlconnection/build.gradle
+++ b/okhttp-urlconnection/build.gradle
@@ -21,7 +21,7 @@ dependencies {
 
 afterEvaluate { project ->
   project.tasks.dokka {
-    outputDirectory = "$rootDir/docs/api"
+    outputDirectory = "$rootDir/docs/4.x"
     outputFormat = 'gfm'
   }
 }
diff --git a/okhttp/build.gradle b/okhttp/build.gradle
index dd2a7702cc..a03f3d8ec3 100644
--- a/okhttp/build.gradle
+++ b/okhttp/build.gradle
@@ -43,7 +43,7 @@ dependencies {
 
 afterEvaluate { project ->
   project.tasks.dokka {
-    outputDirectory = "$rootDir/docs/api"
+    outputDirectory = "$rootDir/docs/4.x"
     outputFormat = 'gfm'
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.kt b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.kt
index 7998f6650f..a031cf3f5b 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.kt
@@ -22,12 +22,14 @@ object HttpMethod {
       method == "DELETE" ||
       method == "MOVE") // WebDAV
 
+  @JvmStatic // Despite being 'internal', this method is called by popular 3rd party SDKs.
   fun requiresRequestBody(method: String): Boolean = (method == "POST" ||
       method == "PUT" ||
       method == "PATCH" ||
       method == "PROPPATCH" || // WebDAV
       method == "REPORT") // CalDAV/CardDAV (defined in WebDAV Versioning)
 
+  @JvmStatic // Despite being 'internal', this method is called by popular 3rd party SDKs.
   fun permitsRequestBody(method: String): Boolean = !(method == "GET" || method == "HEAD")
 
   fun redirectsWithBody(method: String): Boolean =
