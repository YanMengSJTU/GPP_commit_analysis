diff --git a/okhttp-tests/src/test/java/okhttp3/CacheTest.java b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
index 8182800d2a..11ed5ca4e3 100644
--- a/okhttp-tests/src/test/java/okhttp3/CacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
@@ -160,8 +160,19 @@ private void assertCached(boolean shouldPut, int responseCode) throws Exception
         .setBody("ABCDE")
         .addHeader("WWW-Authenticate: challenge");
     if (responseCode == HttpURLConnection.HTTP_PROXY_AUTH) {
+      //https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin
+      //407 Proxy Authentication Required
+      //与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器
+      //必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个
+      //Proxy-Authorization 信息头用以验证。
       mockResponse.addHeader("Proxy-Authenticate: Basic realm=\"protected area\"");
     } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
+      //401 Unauthorized
+      //当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate
+      //信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。
+      //如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。
+      //如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，
+      //那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。
       mockResponse.addHeader("WWW-Authenticate: Basic realm=\"protected area\"");
     } else if (responseCode == HttpURLConnection.HTTP_NO_CONTENT
         || responseCode == HttpURLConnection.HTTP_RESET) {
@@ -307,12 +318,23 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     Response response1 = client.newCall(request).execute();
     assertEquals("ABC", response1.body().string());
 
+    assertEquals(2, cache.requestCount());
+    assertEquals(2, cache.networkCount());
+    assertEquals(0, cache.hitCount());
+
     Response response2 = client.newCall(request).execute(); // Cached!
     assertEquals("ABC", response2.body().string());
 
     assertEquals(4, cache.requestCount()); // 2 requests + 2 redirects
     assertEquals(2, cache.networkCount());
     assertEquals(2, cache.hitCount());
+
+    Response response3 = client.newCall(request).execute(); // Cached!
+    assertEquals("ABC", response3.body().string());
+
+    assertEquals(6, cache.requestCount());
+    assertEquals(2, cache.networkCount());
+    assertEquals(4, cache.hitCount());
   }
 
   @Test public void redirectToCachedResult() throws Exception {
@@ -523,6 +545,7 @@ private void testServerPrematureDisconnect(TransferKind transferKind) throws IOE
       bodySource.readUtf8Line();
       fail("This implementation silently ignored a truncated HTTP body.");
     } catch (IOException expected) {
+      //错误信息：unexpected end of stream
     } finally {
       bodySource.close();
     }
diff --git a/okhttp/src/main/java/okhttp3/internal/Version.java b/okhttp/src/main/java/okhttp3/internal/Version.java
deleted file mode 100644
index a2450c6e8c..0000000000
--- a/okhttp/src/main/java/okhttp3/internal/Version.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package okhttp3.internal;
-
-/**
- * @author TuFei
- * @date 18-9-21.
- */
-public final class Version {
-    public static String userAgent() {
-        return "okhttp/3.8.1";
-    }
-
-    private Version() {
-    }
-}
