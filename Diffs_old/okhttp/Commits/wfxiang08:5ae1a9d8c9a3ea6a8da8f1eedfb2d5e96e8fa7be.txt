diff --git a/okhttp/src/main/java/okhttp3/RealWebSocketCall.java b/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
index 6cb3e010f7..f383c58e76 100644
--- a/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
+++ b/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
@@ -35,6 +35,8 @@
 final class RealWebSocketCall implements WebSocketCall {
   private static final List<Protocol> ONLY_HTTP1 = Collections.singletonList(Protocol.HTTP_1_1);
 
+  /** The application's original request unadulterated by web socket headers. */
+  private final Request originalRequest;
   private final RealCall call;
   private final Random random;
   private final String key;
@@ -59,6 +61,7 @@
         .protocols(ONLY_HTTP1)
         .build();
 
+    originalRequest = request;
     request = request.newBuilder()
         .header("Upgrade", "websocket")
         .header("Connection", "Upgrade")
@@ -90,10 +93,6 @@
     call.enqueue(responseCallback);
   }
 
-  @Override public void cancel() {
-    call.cancel();
-  }
-
   StreamWebSocket create(Response response, WebSocketListener listener) throws IOException {
     if (response.code() != 101) {
       throw new ProtocolException("Expected HTTP 101 response but was '"
@@ -134,6 +133,26 @@ StreamWebSocket create(Response response, WebSocketListener listener) throws IOE
     return new StreamWebSocket(streamAllocation, random, replyExecutor, listener, response, name);
   }
 
+  @Override public Request request() {
+    return originalRequest;
+  }
+
+  @Override public void cancel() {
+    call.cancel();
+  }
+
+  @Override public boolean isExecuted() {
+    return call.isExecuted();
+  }
+
+  @Override public boolean isCanceled() {
+    return call.isCanceled();
+  }
+
+  @Override public WebSocketCall clone() {
+    return new RealWebSocketCall(call.client, originalRequest, random);
+  }
+
   // Keep static so that the WebSocketCall instance can be garbage collected.
   static final class StreamWebSocket extends RealWebSocket {
     private final StreamAllocation streamAllocation;
diff --git a/okhttp/src/main/java/okhttp3/WebSocketCall.java b/okhttp/src/main/java/okhttp3/WebSocketCall.java
index a4007af174..3dc18bcba4 100644
--- a/okhttp/src/main/java/okhttp3/WebSocketCall.java
+++ b/okhttp/src/main/java/okhttp3/WebSocketCall.java
@@ -15,7 +15,10 @@
  */
 package okhttp3;
 
-public interface WebSocketCall {
+public interface WebSocketCall extends Cloneable {
+  /** Returns the original request that initiated this call. */
+  Request request();
+
   /**
    * Schedules the request to be executed at some point in the future.
    *
@@ -33,6 +36,20 @@
   /** Cancels the request, if possible. Requests that are already complete cannot be canceled. */
   void cancel();
 
+  /**
+   * Returns true if this call has been {@linkplain #enqueue(WebSocketListener) enqueued}. It is an
+   * error to enqueue a call more than once.
+   */
+  boolean isExecuted();
+
+  boolean isCanceled();
+
+  /**
+   * Create a new, identical call to this one which can be enqueued even if this call has already
+   * been.
+   */
+  WebSocketCall clone();
+
   interface Factory {
     WebSocketCall newWebSocketCall(Request request);
   }
