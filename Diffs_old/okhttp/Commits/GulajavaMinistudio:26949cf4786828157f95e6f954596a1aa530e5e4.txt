diff --git a/samples/guide/README.md b/samples/guide/README.md
new file mode 100644
index 0000000000..84c8ccb004
--- /dev/null
+++ b/samples/guide/README.md
@@ -0,0 +1,2 @@
+Samples
+=======
\ No newline at end of file
diff --git a/samples/guide/docs/images/logo-square.png b/samples/guide/docs/images/logo-square.png
new file mode 100644
index 0000000000..788b301adb
Binary files /dev/null and b/samples/guide/docs/images/logo-square.png differ
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java b/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
index b13a0533ba..aa7ea2974f 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
@@ -40,7 +40,9 @@ public void run() throws Exception {
         .setType(MultipartBody.FORM)
         .addFormDataPart("title", "Square Logo")
         .addFormDataPart("image", "logo-square.png",
-            RequestBody.create(new File("website/static/logo-square.png"), MEDIA_TYPE_PNG))
+            RequestBody.create(
+                new File("docs/images/logo-square.png"),
+                MEDIA_TYPE_PNG))
         .build();
 
     Request request = new Request.Builder()
diff --git a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
index 288fadb7ce..f0407db87f 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
@@ -1,10 +1,10 @@
 package okhttp3.recipes;
 
 import java.util.concurrent.TimeUnit;
-import okhttp3.WebSocket;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
+import okhttp3.WebSocket;
 import okhttp3.WebSocketListener;
 import okio.ByteString;
 
diff --git a/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt b/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt
new file mode 100644
index 0000000000..19a507d60c
--- /dev/null
+++ b/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3
+
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.Parameterized
+import java.io.File
+import java.lang.reflect.InvocationTargetException
+
+@RunWith(Parameterized::class)
+class AllMainsTest(val className: String) {
+  @Test
+  fun runMain() {
+    val mainMethod = Class.forName(className).methods.find { it.name == "main" }
+    try {
+      mainMethod?.invoke(null, arrayOf<String>())
+    } catch (ite: InvocationTargetException) {
+      if (!expectedFailure(className, ite.cause!!)) {
+        throw ite.cause!!
+      }
+    }
+  }
+
+  private fun expectedFailure(className: String, cause: Throwable): Boolean {
+    return when (className) {
+      "okhttp3.recipes.CheckHandshake" -> true // by design
+      "okhttp3.recipes.RequestBodyCompression" -> true // expired token
+      else -> false
+    }
+  }
+
+  companion object {
+    private val prefix = if (File("samples").exists()) "" else "../../"
+
+    @JvmStatic
+    @Parameterized.Parameters(name = "{0}")
+    fun data(): List<String> {
+      val mainFiles = mainFiles()
+      return mainFiles.map {
+        it.path.substring("$prefix/samples/guide/src/main/java".length, it.path.length - 5).replace('/', '.')
+      }.sorted()
+    }
+
+    private fun mainFiles(): List<File> {
+      return File("$prefix/samples/guide/src/main/java/okhttp3").listFiles()?.flatMap {
+        it?.listFiles()?.toList().orEmpty()
+      }.orEmpty()
+    }
+  }
+}
