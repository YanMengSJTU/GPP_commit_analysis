diff --git a/okhttp-tests/src/test/java/okhttp3/SocksProxy.java b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java
index ce949ebaef..9c1b5a83cb 100644
--- a/okhttp-tests/src/test/java/okhttp3/SocksProxy.java
+++ b/okhttp-tests/src/test/java/okhttp3/SocksProxy.java
@@ -208,7 +208,7 @@ private void transfer(final InetAddress fromAddress, final InetAddress toAddress
         Buffer buffer = new Buffer();
         try {
           while (true) {
-            long byteCount = source.read(buffer, 2048L);
+            long byteCount = source.read(buffer, 8192L);
             if (byteCount == -1L) break;
             sink.write(buffer, byteCount);
             sink.emit();
diff --git a/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
index bdeff21c15..384151cf4a 100644
--- a/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
+++ b/okhttp-ws-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
@@ -118,16 +118,16 @@
     sink.write(body.readByteString(20_000));
     sink.close();
 
-    assertData("017e4800");
-    assertData(bytes.readByteArray(18_432));
-    assertData("007e5000");
-    assertData(bytes.readByteArray(20_480));
-    assertData("007e5000");
-    assertData(bytes.readByteArray(20_480));
-    assertData("007e5000");
-    assertData(bytes.readByteArray(20_480));
-    assertData("007e4800");
-    assertData(bytes.readByteArray(18_432));
+    assertData("017e4000");
+    assertData(bytes.readByteArray(16_384));
+    assertData("007e4000");
+    assertData(bytes.readByteArray(16_384));
+    assertData("007e6000");
+    assertData(bytes.readByteArray(24_576));
+    assertData("007e4000");
+    assertData(bytes.readByteArray(16_384));
+    assertData("007e6000");
+    assertData(bytes.readByteArray(24_576));
     assertData("807e06a0");
     assertData(bytes.readByteArray(1_696));
     assertTrue(data.exhausted());
diff --git a/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java
index 6a72c6c77e..8be28a2c5a 100644
--- a/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java
+++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketReader.java
@@ -80,7 +80,7 @@
   private boolean isMasked;
 
   private final byte[] maskKey = new byte[4];
-  private final byte[] maskBuffer = new byte[2048];
+  private final byte[] maskBuffer = new byte[8192];
 
   public WebSocketReader(boolean isClient, BufferedSource source, FrameCallback frameCallback) {
     if (source == null) throw new NullPointerException("source == null");
diff --git a/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
index 5d86be4019..6ce0cfdd0a 100644
--- a/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
+++ b/okhttp-ws/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
@@ -70,7 +70,7 @@ public WebSocketWriter(boolean isClient, BufferedSink sink, Random random) {
 
     // Masks are only a concern for client writers.
     maskKey = isClient ? new byte[4] : null;
-    maskBuffer = isClient ? new byte[2048] : null;
+    maskBuffer = isClient ? new byte[8192] : null;
   }
 
   /** Send a ping with the supplied {@code payload}. Payload may be {@code null} */
@@ -239,7 +239,7 @@ private void writeMaskedSynchronized(BufferedSource source, long byteCount) thro
       // Determine if this is a buffered write which we can defer until close() flushes.
       boolean deferWrite = isFirstFrame
           && contentLength != -1
-          && buffer.size() > contentLength - 2048 /* segment size */;
+          && buffer.size() > contentLength - 8192 /* segment size */;
 
       long emitCount = buffer.completeSegmentByteCount();
       if (emitCount > 0 && !deferWrite) {
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
index f2b1e70d46..0d72116405 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -175,7 +175,7 @@ public static boolean skipAll(Source source, int duration, TimeUnit timeUnit) th
     source.timeout().deadlineNanoTime(now + Math.min(originalDuration, timeUnit.toNanos(duration)));
     try {
       Buffer skipBuffer = new Buffer();
-      while (source.read(skipBuffer, 2048) != -1) {
+      while (source.read(skipBuffer, 8192) != -1) {
         skipBuffer.clear();
       }
       return true; // Success! The source has been exhausted.
diff --git a/pom.xml b/pom.xml
index c62655cb22..f21828a824 100644
--- a/pom.xml
+++ b/pom.xml
@@ -54,7 +54,7 @@
     <guava.version>16.0</guava.version>
     <java.version>1.7</java.version>
     <moshi.version>1.1.0</moshi.version>
-    <okio.version>1.6.0</okio.version>
+    <okio.version>1.8.0</okio.version>
 
     <!-- Test Dependencies -->
     <junit.version>4.12</junit.version>
