diff --git a/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
index f03f197d94..5ee084f423 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/tls/HostnameVerifierTest.java
@@ -17,20 +17,20 @@
 
 package okhttp3.internal.tls;
 
-import java.io.ByteArrayInputStream;
-import java.security.cert.CertificateFactory;
-import java.security.cert.X509Certificate;
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.SSLSession;
-import javax.security.auth.x500.X500Principal;
 import okhttp3.FakeSSLSession;
 import okhttp3.internal.Util;
 import org.junit.Ignore;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLSession;
+import javax.security.auth.x500.X500Principal;
+import java.io.ByteArrayInputStream;
+import java.security.cert.CertificateFactory;
+import java.security.cert.X509Certificate;
+import java.util.Arrays;
+
+import static org.junit.Assert.*;
 
 /**
  * Tests for our hostname verifier. Most of these tests are from AOSP, which itself includes tests
@@ -223,6 +223,7 @@
     assertFalse(verifier.verify("a.foo.com", session));
     assertTrue(verifier.verify("foo.com", session));
     assertFalse(verifier.verify("a.foo.com", session));
+
   }
 
   @Test public void verifyMultipleCn() throws Exception {
@@ -413,6 +414,51 @@
 
     assertTrue(verifier.verify("127.0.0.1", session));
     assertFalse(verifier.verify("127.0.0.2", session));
+      assertEquals(Arrays.asList("127.0.0.1", "localhost.localdomain", "localhost"), OkHostnameVerifier.allSubjectAltNames(certificate));
+
+  }
+
+  @Test public void emptySubjectAltNames() throws Exception{
+
+      X509Certificate certificate = certificate(""
+              + "-----BEGIN CERTIFICATE-----\n"
+              + "MIIBWDCCAQKgAwIBAgIJANS1EtICX2AZMA0GCSqGSIb3DQEBBQUAMBQxEjAQBgNV\n"
+              + "BAMTCWxvY2FsaG9zdDAgFw0xMjAxMDIxOTA4NThaGA8yMTExMTIwOTE5MDg1OFow\n"
+              + "FDESMBAGA1UEAxMJbG9jYWxob3N0MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAPpt\n"
+              + "atK8r4/hf4hSIs0os/BSlQLbRBaK9AfBReM4QdAklcQqe6CHsStKfI8pp0zs7Ptg\n"
+              + "PmMdpbttL0O7mUboBC8CAwEAMaA1MDMwMQYDVR0RBCowKIIVbG9jYWxob3N0Lmxv\n"
+              + "Y2FsZG9tYWlugglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQEFBQADQQD0ntfL\n"
+              + "DCzOCv9Ma6Lv5o5jcYWVxvBSTsnt22hsJpWD1K7iY9lbkLwl0ivn73pG2evsAn9G\n"
+              + "X8YKH52fnHsCrhSD\n"
+              + "-----END CERTIFICATE-----");
+      assertTrue (OkHostnameVerifier.allSubjectAltNames(certificate).isEmpty());
+
+  }
+
+  @Test public void testHostname() throws Exception {
+
+      X509Certificate certificate = certificate("-----BEGIN CERTIFICATE-----\n" +
+              "MIIDCzCCAfOgAwIBAgIJAOnFgS2/lIp4MA0GCSqGSIb3DQEBBQUAMA0xCzAJBgNV\n" +
+              "BAMUAi5cMB4XDTE2MTEyOTA1MDkxNFoXDTI2MTEyNzA1MDkxNFowDTELMAkGA1UE\n" +
+              "AxQCLlwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDqy5Yqm1HG2Ica\n" +
+              "WGwlBYfgNiSpwEEnMzGyttmGujyNh4Jr0RKOdqJLB524tyGGjGod/OAWOmXaRK8s\n" +
+              "5zat2Glvs3EV+i1DE2GjxwiNPeca1o0GqfU2iDtc92CqUOsYxG1VFG5Wrc5A2Snq\n" +
+              "i0NRHQS4y4ov6SPqMenfh1s4alwFSVsRlhRHSRrK3YLrrA/7ehIfbt0/1gkxq2Q1\n" +
+              "wD0M0ioIwf6/6RNa2IMCCwYvr32/qx9GHx+G27/Wdjkh1TsyJjAMaNtMYYQfUbtY\n" +
+              "hAOMUegE+YB+6jt0KzMKM4VH5sO+g2Ex+YB2Ej1igQh77kPl+4yrlExx0yK1EgIU\n" +
+              "DQE6eZeXAgMBAAGjbjBsMB0GA1UdDgQWBBSlAPR3zt52Viw7nEtnoTfrwLnDSzA9\n" +
+              "BgNVHSMENjA0gBSlAPR3zt52Viw7nEtnoTfrwLnDS6ERpA8wDTELMAkGA1UEAxQC\n" +
+              "LlyCCQDpxYEtv5SKeDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQBz\n" +
+              "NGKxNs+G7ypCcSJzqHLyGgnBeCmeY0Vq0N9LEmWNumUW5C9lzwJzR34C5avm3/E0\n" +
+              "NZDVeQGmIS0ago3Z3yYJ2XUSquc3ypLQ7KBF2/XmyIPYzxlHf6TZkgrG2zK5t1Av\n" +
+              "aSDF9UtDdRpyM8vnMAjDHZK4SMOzmW/8yUrDC7Lax5JprcP1TRgbwy0Lxvt3Dp4R\n" +
+              "OlJYJDxUe7lfOXsB92/h4dBOqsCoDEcQ6tiaWDf2i79l4MeeEwnrDQ7w8qBp00Ub\n" +
+              "YjvCXiGMHQ7RiCYaoxKQsHaWvb53Ark+a1oCH0IiRbgQDhQXV5KNHqCwwM4i9u4x\n" +
+              "TFtJKqovSGOOoG4X0/+5\n" +
+              "-----END CERTIFICATE-----");
+      X500Principal principal = certificate.getSubjectX500Principal();
+      String cn = new DistinguishedNameParser(principal).findMostSpecific("cn");
+      System.out.println(cn);
   }
 
   @Test public void wildcardsCannotMatchIpAddresses() throws Exception {
@@ -477,6 +523,7 @@
         + "DQYJKoZIhvcNAQEFBQADQQBXpZZPOY2Dy1lGG81JTr8L4or9jpKacD7n51eS8iqI\n"
         + "oTznPNuXHU5bFN0AAGX2ij47f/EahqTpo5RdS95P4sVm\n"
         + "-----END CERTIFICATE-----");
+
     assertFalse(verifier.verify("foo.com", session));
     assertTrue(verifier.verify("bar.com", session));
     assertTrue(verifier.verify("baz.com", session));
