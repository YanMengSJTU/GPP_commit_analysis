diff --git a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
index b3dedd6893..51ad8162b2 100644
--- a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
@@ -53,7 +53,6 @@
 import org.hamcrest.Matcher;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -113,7 +112,7 @@
     List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",
         "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
-        "CallEnd", "ResponseBodyEnd", "ConnectionReleased");
+        "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
     assertEquals(expectedEvents, listener.recordedEventTypes());
   }
 
@@ -147,7 +146,7 @@ private void assertSuccessfulEventOrder(Matcher<Response> responseMatcher) throw
     List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectionAcquired",
         "ConnectStart", "SecureConnectStart", "SecureConnectEnd", "ConnectEnd",
         "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",
-        "ResponseBodyStart", "CallEnd", "ResponseBodyEnd", "ConnectionReleased");
+        "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
 
     assertEquals(expectedEvents, listener.recordedEventTypes());
   }
@@ -753,21 +752,18 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     listener.removeUpToEvent(ConnectionAcquired.class);
   }
 
-  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd")
   @Test public void responseBodyFailHttp1OverHttps() throws IOException {
     enableTlsWithTunnel(false);
     server.setProtocols(Arrays.asList(Protocol.HTTP_1_1));
     responseBodyFail(Protocol.HTTP_1_1);
   }
 
-  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd")
   @Test public void responseBodyFailHttp2OverHttps() throws IOException {
     enableTlsWithTunnel(false);
     server.setProtocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1));
     responseBodyFail(Protocol.HTTP_2);
   }
 
-  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd")
   @Test public void responseBodyFailHttp() throws IOException {
     responseBodyFail(Protocol.HTTP_1_1);
   }
diff --git a/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
index 5be182829d..c3f8222fc3 100644
--- a/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
+++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
@@ -29,7 +29,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-final class RecordingEventListener extends EventListener {
+public final class RecordingEventListener extends EventListener {
   final Deque<CallEvent> eventSequence = new ArrayDeque<>();
 
   final List<Object> forbiddenLocks = new ArrayList<>();
@@ -43,7 +43,7 @@ public void forbidLock(Object lock) {
    * Removes recorded events up to (and including) an event is found whose class equals
    * {@code eventClass} and returns it.
    */
-  <T> T removeUpToEvent(Class<T> eventClass) {
+  public <T> T removeUpToEvent(Class<T> eventClass) {
     Object event = eventSequence.poll();
     while (event != null && !eventClass.isInstance(event)) {
       event = eventSequence.poll();
@@ -52,7 +52,7 @@ public void forbidLock(Object lock) {
     return eventClass.cast(event);
   }
 
-  List<String> recordedEventTypes() {
+  public List<String> recordedEventTypes() {
     List<String> eventTypes = new ArrayList<>();
     for (CallEvent event : eventSequence) {
       eventTypes.add(event.getName());
@@ -60,7 +60,7 @@ public void forbidLock(Object lock) {
     return eventTypes;
   }
 
-  void clearAllEvents() {
+  public void clearAllEvents() {
     eventSequence.clear();
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
index 2d38049bf7..ae1c7a41fc 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
@@ -19,12 +19,14 @@
 import java.io.IOException;
 import java.net.ProtocolException;
 import java.net.SocketTimeoutException;
+import java.util.Collections;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Logger;
 import okhttp3.Interceptor;
 import okhttp3.OkHttpClient;
+import okhttp3.RecordingEventListener;
 import okhttp3.RecordingHostnameVerifier;
 import okhttp3.Request;
 import okhttp3.Response;
@@ -574,6 +576,33 @@
     serverListener.assertClosed(1000, "goodbye");
   }
 
+  @Test public void webSocketsDontTriggerEventListener() throws IOException {
+    RecordingEventListener listener = new RecordingEventListener();
+
+    client = client.newBuilder()
+        .eventListener(listener)
+        .build();
+
+    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));
+    WebSocket webSocket = newWebSocket();
+
+    clientListener.assertOpen();
+    WebSocket server = serverListener.assertOpen();
+
+    webSocket.send("Web Sockets and Events?!");
+    serverListener.assertTextMessage("Web Sockets and Events?!");
+
+    webSocket.close(1000, "");
+    serverListener.assertClosing(1000, "");
+
+    server.close(1000, "");
+    clientListener.assertClosing(1000, "");
+    clientListener.assertClosed(1000, "");
+    serverListener.assertClosed(1000, "");
+
+    assertEquals(Collections.emptyList(), listener.recordedEventTypes());
+  }
+
   private MockResponse upgradeResponse(RecordedRequest request) {
     String key = request.getHeader("Sec-WebSocket-Key");
     return new MockResponse()
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 375cb6e88a..808b3dc7ba 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -76,7 +76,6 @@ static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolea
       client.dispatcher().executed(this);
       Response result = getResponseWithInterceptorChain();
       if (result == null) throw new IOException("Canceled");
-      eventListener.callEnd(this);
       return result;
     } catch (IOException e) {
       eventListener.callFailed(this, e);
@@ -153,7 +152,6 @@ RealCall get() {
           signalledCallback = true;
           responseCallback.onResponse(RealCall.this, response);
         }
-        eventListener.callEnd(RealCall.this);
       } catch (IOException e) {
         if (signalledCallback) {
           // Do not signal the callback twice!
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
index 3f72dab950..6afb0fd017 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
@@ -480,7 +480,7 @@ public HttpCodec newCodec(OkHttpClient client, Interceptor.Chain chain,
   public RealWebSocket.Streams newWebSocketStreams(final StreamAllocation streamAllocation) {
     return new RealWebSocket.Streams(true, source, sink) {
       @Override public void close() throws IOException {
-        streamAllocation.streamFinished(true, streamAllocation.codec());
+        streamAllocation.streamFinished(true, streamAllocation.codec(), -1L, null);
       }
     };
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
index 0920121c27..13b52392a1 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
@@ -257,9 +257,12 @@ private RealConnection findConnection(int connectTimeout, int readTimeout, int w
     return result;
   }
 
-  public void streamFinished(boolean noNewStreams, HttpCodec codec) {
+  public void streamFinished(boolean noNewStreams, HttpCodec codec, long bytesRead, IOException e) {
+    eventListener.responseBodyEnd(call, bytesRead);
+
     Socket socket;
     Connection releasedConnection;
+    boolean callEnd;
     synchronized (connectionPool) {
       if (codec == null || codec != this.codec) {
         throw new IllegalStateException("expected " + this.codec + " but was " + codec);
@@ -270,11 +273,18 @@ public void streamFinished(boolean noNewStreams, HttpCodec codec) {
       releasedConnection = connection;
       socket = deallocate(noNewStreams, false, true);
       if (connection != null) releasedConnection = null;
+      callEnd = this.released;
     }
     closeQuietly(socket);
     if (releasedConnection != null) {
       eventListener.connectionReleased(call, releasedConnection);
     }
+
+    if (e != null) {
+      eventListener.callFailed(call, e);
+    } else if (callEnd) {
+      eventListener.callEnd(call);
+    }
   }
 
   public HttpCodec codec() {
diff --git a/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java
index f69aabcfb4..027aab8ac5 100644
--- a/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java
+++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java
@@ -375,8 +375,7 @@ protected final void endOfInput(boolean reuseConnection, IOException e) throws I
 
       state = STATE_CLOSED;
       if (streamAllocation != null) {
-        streamAllocation.eventListener.responseBodyEnd(streamAllocation.call, bytesRead);
-        streamAllocation.streamFinished(!reuseConnection, Http1Codec.this);
+        streamAllocation.streamFinished(!reuseConnection, Http1Codec.this, bytesRead, e);
       }
     }
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
index c4859d5892..c1f76938d8 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
@@ -223,8 +223,7 @@ public Http2Codec(OkHttpClient client, Interceptor.Chain chain, StreamAllocation
     private void endOfInput(IOException e) {
       if (completed) return;
       completed = true;
-      streamAllocation.eventListener.responseBodyEnd(streamAllocation.call, bytesRead);
-      streamAllocation.streamFinished(false, Http2Codec.this);
+      streamAllocation.streamFinished(false, Http2Codec.this, bytesRead, e);
     }
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index 2807ea41d9..0d39abc8d5 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -29,6 +29,7 @@
 import javax.annotation.Nullable;
 import okhttp3.Call;
 import okhttp3.Callback;
+import okhttp3.EventListener;
 import okhttp3.OkHttpClient;
 import okhttp3.Protocol;
 import okhttp3.Request;
@@ -168,6 +169,7 @@ public RealWebSocket(Request request, WebSocketListener listener, Random random)
 
   public void connect(OkHttpClient client) {
     client = client.newBuilder()
+        .eventListener(EventListener.NONE)
         .protocols(ONLY_HTTP1)
         .build();
     final int pingIntervalMillis = client.pingIntervalMillis();
