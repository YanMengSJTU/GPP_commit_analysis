diff --git a/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt b/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
index 49f98011c5..172f11e8b6 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
+++ b/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
@@ -278,7 +278,7 @@ open class PlatformRule @JvmOverloads constructor(
           is ConscryptPlatform -> CONSCRYPT_PROPERTY
           is OpenJSSEPlatform -> OPENJSSE_PROPERTY
           is Jdk8WithJettyBootPlatform -> CONSCRYPT_PROPERTY
-          is Jdk9Platform -> JDK9_PROPERTY
+//          is Jdk9Platform -> JDK9_PROPERTY
           else -> JDK8_PROPERTY
         }
       }
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.kt b/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.kt
index 84d605bee3..f9a296f7ff 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.kt
@@ -1,66 +1,66 @@
-/*
- * Copyright (C) 2016 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.platform
-
-import okhttp3.Protocol
-import javax.net.ssl.SSLSocket
-import javax.net.ssl.SSLSocketFactory
-import javax.net.ssl.X509TrustManager
-
-/** OpenJDK 9+. */
-open class Jdk9Platform : Platform() {
-  override fun configureTlsExtensions(
-    sslSocket: SSLSocket,
-    protocols: List<@JvmSuppressWildcards Protocol>
-  ) {
-    val sslParameters = sslSocket.sslParameters
-
-    val names = alpnProtocolNames(protocols)
-
-    sslParameters.applicationProtocols = names.toTypedArray()
-
-    sslSocket.sslParameters = sslParameters
-  }
-
-  override fun getSelectedProtocol(sslSocket: SSLSocket): String? {
-    // SSLSocket.getApplicationProtocol returns "" if application protocols values will not
-    // be used. Observed if you didn't specify SSLParameters.setApplicationProtocols
-    return when (val protocol = sslSocket.applicationProtocol) {
-      null, "" -> null
-      else -> protocol
-    }
-  }
-
-  public override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? {
-    // Not supported due to access checks on JDK 9+:
-    // java.lang.reflect.InaccessibleObjectException: Unable to make member of class
-    // sun.security.ssl.SSLSocketFactoryImpl accessible:  module java.base does not export
-    // sun.security.ssl to unnamed module @xxx
-    throw UnsupportedOperationException(
-        "clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+")
-  }
-
-  companion object {
-    val isAvailable: Boolean
-
-    init {
-      val majorVersion: Int = Integer.getInteger("java.specification.version") ?: 8
-      isAvailable = majorVersion >= 9
-    }
-
-    fun buildIfSupported(): Jdk9Platform? = if (isAvailable) Jdk9Platform() else null
-  }
-}
+///*
+// * Copyright (C) 2016 Square, Inc.
+// *
+// * Licensed under the Apache License, Version 2.0 (the "License");
+// * you may not use this file except in compliance with the License.
+// * You may obtain a copy of the License at
+// *
+// *      http://www.apache.org/licenses/LICENSE-2.0
+// *
+// * Unless required by applicable law or agreed to in writing, software
+// * distributed under the License is distributed on an "AS IS" BASIS,
+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// * See the License for the specific language governing permissions and
+// * limitations under the License.
+// */
+//package okhttp3.internal.platform
+//
+//import okhttp3.Protocol
+//import javax.net.ssl.SSLSocket
+//import javax.net.ssl.SSLSocketFactory
+//import javax.net.ssl.X509TrustManager
+//
+///** OpenJDK 9+. */
+//open class Jdk9Platform : Platform() {
+//  override fun configureTlsExtensions(
+//    sslSocket: SSLSocket,
+//    protocols: List<@JvmSuppressWildcards Protocol>
+//  ) {
+//    val sslParameters = sslSocket.sslParameters
+//
+//    val names = alpnProtocolNames(protocols)
+//
+//    sslParameters.applicationProtocols = names.toTypedArray()
+//
+//    sslSocket.sslParameters = sslParameters
+//  }
+//
+//  override fun getSelectedProtocol(sslSocket: SSLSocket): String? {
+//    // SSLSocket.getApplicationProtocol returns "" if application protocols values will not
+//    // be used. Observed if you didn't specify SSLParameters.setApplicationProtocols
+//    return when (val protocol = sslSocket.applicationProtocol) {
+//      null, "" -> null
+//      else -> protocol
+//    }
+//  }
+//
+//  public override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? {
+//    // Not supported due to access checks on JDK 9+:
+//    // java.lang.reflect.InaccessibleObjectException: Unable to make member of class
+//    // sun.security.ssl.SSLSocketFactoryImpl accessible:  module java.base does not export
+//    // sun.security.ssl to unnamed module @xxx
+//    throw UnsupportedOperationException(
+//        "clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+")
+//  }
+//
+//  companion object {
+//    val isAvailable: Boolean
+//
+//    init {
+//      val majorVersion: Int = Integer.getInteger("java.specification.version") ?: 8
+//      isAvailable = majorVersion >= 9
+//    }
+//
+//    fun buildIfSupported(): Jdk9Platform? = if (isAvailable) Jdk9Platform() else null
+//  }
+//}
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
index aa625412a8..ea3f4b479c 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
@@ -225,11 +225,11 @@ open class Platform {
         }
       }
 
-      val jdk9 = Jdk9Platform.buildIfSupported()
-
-      if (jdk9 != null) {
-        return jdk9
-      }
+//      val jdk9 = Jdk9Platform.buildIfSupported()
+//
+//      if (jdk9 != null) {
+//        return jdk9
+//      }
 
       // An Oracle JDK 8 like OpenJDK.
       val jdkWithJettyBoot = Jdk8WithJettyBootPlatform.buildIfSupported()
diff --git a/okhttp/src/test/java/okhttp3/internal/platform/Jdk9PlatformTest.java b/okhttp/src/test/java/okhttp3/internal/platform/Jdk9PlatformTest.java
index 484c1e0ded..6c1fa33a50 100644
--- a/okhttp/src/test/java/okhttp3/internal/platform/Jdk9PlatformTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/platform/Jdk9PlatformTest.java
@@ -1,36 +1,36 @@
-/*
- * Copyright (C) 2016 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.platform;
-
-import okhttp3.testing.PlatformRule;
-import org.junit.Rule;
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class Jdk9PlatformTest {
-  @Rule public final PlatformRule platform = new PlatformRule("jdk9");
-
-  @Test
-  public void buildsWhenJdk9() {
-    assertThat(Jdk9Platform.Companion.buildIfSupported()).isNotNull();
-  }
-
-  @Test
-  public void testToStringIsClassname() throws NoSuchMethodException {
-    assertThat(new Jdk9Platform().toString()).isEqualTo("Jdk9Platform");
-  }
-}
+///*
+// * Copyright (C) 2016 Square, Inc.
+// *
+// * Licensed under the Apache License, Version 2.0 (the "License");
+// * you may not use this file except in compliance with the License.
+// * You may obtain a copy of the License at
+// *
+// *      http://www.apache.org/licenses/LICENSE-2.0
+// *
+// * Unless required by applicable law or agreed to in writing, software
+// * distributed under the License is distributed on an "AS IS" BASIS,
+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// * See the License for the specific language governing permissions and
+// * limitations under the License.
+// */
+//package okhttp3.internal.platform;
+//
+//import okhttp3.testing.PlatformRule;
+//import org.junit.Rule;
+//import org.junit.Test;
+//
+//import static org.assertj.core.api.Assertions.assertThat;
+//
+//public class Jdk9PlatformTest {
+//  @Rule public final PlatformRule platform = new PlatformRule("jdk9");
+//
+//  @Test
+//  public void buildsWhenJdk9() {
+//    assertThat(Jdk9Platform.Companion.buildIfSupported()).isNotNull();
+//  }
+//
+//  @Test
+//  public void testToStringIsClassname() throws NoSuchMethodException {
+//    assertThat(new Jdk9Platform().toString()).isEqualTo("Jdk9Platform");
+//  }
+//}
