diff --git a/okhttp/src/main/java/okhttp3/Dispatcher.java b/okhttp/src/main/java/okhttp3/Dispatcher.java
index 3e33dff6bf..0bcd720c4e 100644
--- a/okhttp/src/main/java/okhttp3/Dispatcher.java
+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java
@@ -62,6 +62,7 @@ public Dispatcher() {
 
   public synchronized ExecutorService executorService() {
     if (executorService == null) {
+      //默认不限制线程数量,60秒超时
       executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,
           new SynchronousQueue<Runnable>(), Util.threadFactory("OkHttp Dispatcher", false));
     }
@@ -162,6 +163,8 @@ public synchronized void cancelAll() {
    *
    * @return true if the dispatcher is currently running calls.
    */
+//把readyAsyncCalls加入runningAsyncCalls,你过期
+
   private boolean promoteAndExecute() {
     assert (!Thread.holdsLock(this));
 
@@ -175,6 +178,7 @@ private boolean promoteAndExecute() {
         if (runningCallsForHost(asyncCall) >= maxRequestsPerHost) continue; // Host max capacity.
 
         i.remove();
+        //所有的executableCalls在下面都会被执行，所以asyncCall同时加入executableCalls和runningAsyncCalls
         executableCalls.add(asyncCall);
         runningAsyncCalls.add(asyncCall);
       }
@@ -237,7 +241,7 @@ void finished(RealCall call) {
     return Collections.unmodifiableList(result);
   }
 
-  /** Returns a snapshot of the calls currently being executed. */
+  /** 获取当前正在执行的所有同步和异步任务 */
   public synchronized List<Call> runningCalls() {
     List<Call> result = new ArrayList<>();
     result.addAll(runningSyncCalls);
