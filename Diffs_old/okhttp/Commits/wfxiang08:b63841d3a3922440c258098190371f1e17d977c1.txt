diff --git a/okhttp/src/main/java/com/squareup/okhttp/Address.java b/okhttp/src/main/java/com/squareup/okhttp/Address.java
index 705f93157f..f7560dc2bd 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Address.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java
@@ -91,17 +91,17 @@ public HttpUrl url() {
   }
 
   /** Returns the service that will be used to resolve IP addresses for hostnames. */
-  public Dns getDns() {
+  public Dns dns() {
     return dns;
   }
 
   /** Returns the socket factory for new connections. */
-  public SocketFactory getSocketFactory() {
+  public SocketFactory socketFactory() {
     return socketFactory;
   }
 
   /** Returns the client's authenticator. */
-  public Authenticator getAuthenticator() {
+  public Authenticator authenticator() {
     return authenticator;
   }
 
@@ -109,11 +109,11 @@ public Authenticator getAuthenticator() {
    * Returns the protocols the client supports. This method always returns a
    * non-null list that contains minimally {@link Protocol#HTTP_1_1}.
    */
-  public List<Protocol> getProtocols() {
+  public List<Protocol> protocols() {
     return protocols;
   }
 
-  public List<ConnectionSpec> getConnectionSpecs() {
+  public List<ConnectionSpec> connectionSpecs() {
     return connectionSpecs;
   }
 
@@ -121,30 +121,30 @@ public Authenticator getAuthenticator() {
    * Returns this address's proxy selector. Only used if the proxy is null. If none of this
    * selector's proxies are reachable, a direct connection will be attempted.
    */
-  public ProxySelector getProxySelector() {
+  public ProxySelector proxySelector() {
     return proxySelector;
   }
 
   /**
    * Returns this address's explicitly-specified HTTP proxy, or null to
-   * delegate to the {@linkplain #getProxySelector proxy selector}.
+   * delegate to the {@linkplain #proxySelector proxy selector}.
    */
-  public Proxy getProxy() {
+  public Proxy proxy() {
     return proxy;
   }
 
   /** Returns the SSL socket factory, or null if this is not an HTTPS address. */
-  public SSLSocketFactory getSslSocketFactory() {
+  public SSLSocketFactory sslSocketFactory() {
     return sslSocketFactory;
   }
 
   /** Returns the hostname verifier, or null if this is not an HTTPS address. */
-  public HostnameVerifier getHostnameVerifier() {
+  public HostnameVerifier hostnameVerifier() {
     return hostnameVerifier;
   }
 
   /** Returns this address's certificate pinner, or null if this is not an HTTPS address. */
-  public CertificatePinner getCertificatePinner() {
+  public CertificatePinner certificatePinner() {
     return certificatePinner;
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Route.java b/okhttp/src/main/java/com/squareup/okhttp/Route.java
index 60337ddfaa..28233e6ec4 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Route.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Route.java
@@ -58,7 +58,7 @@ public Address address() {
   /**
    * Returns the {@link Proxy} of this route.
    *
-   * <strong>Warning:</strong> This may disagree with {@link Address#getProxy}
+   * <strong>Warning:</strong> This may disagree with {@link Address#proxy}
    * when it is null. When the address's proxy is null, the proxy selector is
    * used.
    */
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java
index 5325bddc3a..2b170a5320 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RouteSelector.java
@@ -58,7 +58,7 @@ public RouteSelector(Address address, RouteDatabase routeDatabase) {
     this.address = address;
     this.routeDatabase = routeDatabase;
 
-    resetNextProxy(address.url(), address.getProxy());
+    resetNextProxy(address.url(), address.proxy());
   }
 
   /**
@@ -99,9 +99,9 @@ public Route next() throws IOException {
    * failure on a connection returned by this route selector.
    */
   public void connectFailed(Route failedRoute, IOException failure) {
-    if (failedRoute.proxy().type() != Proxy.Type.DIRECT && address.getProxySelector() != null) {
+    if (failedRoute.proxy().type() != Proxy.Type.DIRECT && address.proxySelector() != null) {
       // Tell the proxy selector when we fail to connect on a fresh connection.
-      address.getProxySelector().connectFailed(
+      address.proxySelector().connectFailed(
           address.url().uri(), failedRoute.proxy().address(), failure);
     }
 
@@ -117,7 +117,7 @@ private void resetNextProxy(HttpUrl url, Proxy proxy) {
       // Try each of the ProxySelector choices until one connection succeeds. If none succeed
       // then we'll try a direct connection below.
       proxies = new ArrayList<>();
-      List<Proxy> selectedProxies = address.getProxySelector().select(url.uri());
+      List<Proxy> selectedProxies = address.proxySelector().select(url.uri());
       if (selectedProxies != null) proxies.addAll(selectedProxies);
       // Finally try a direct connection. We only try it once!
       proxies.removeAll(Collections.singleton(Proxy.NO_PROXY));
@@ -172,7 +172,7 @@ private void resetNextInetSocketAddress(Proxy proxy) throws IOException {
       inetSocketAddresses.add(InetSocketAddress.createUnresolved(socketHost, socketPort));
     } else {
       // Try each address for best behavior in mixed IPv4/IPv6 environments.
-      List<InetAddress> addresses = address.getDns().lookup(socketHost);
+      List<InetAddress> addresses = address.dns().lookup(socketHost);
       for (int i = 0, size = addresses.size(); i < size; i++) {
         InetAddress inetAddress = addresses.get(i);
         inetSocketAddresses.add(new InetSocketAddress(inetAddress, socketPort));
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
index 377161665c..429e7bda82 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
@@ -171,7 +171,7 @@ private RealConnection findConnection(int connectTimeout, int readTimeout, int w
       if (canceled) throw new IOException("Canceled");
     }
 
-    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.getConnectionSpecs(),
+    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.connectionSpecs(),
         connectionRetryEnabled);
     routeDatabase().connected(newConnection.getRoute());
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java
index 978a50a56c..eb4342b9c3 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java
@@ -94,7 +94,7 @@ public void connect(int connectTimeout, int readTimeout, int writeTimeout,
     Proxy proxy = route.proxy();
     Address address = route.address();
 
-    if (route.address().getSslSocketFactory() == null
+    if (route.address().sslSocketFactory() == null
         && !connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) {
       throw new RouteException(new UnknownServiceException(
           "CLEARTEXT communication not supported: " + connectionSpecs));
@@ -103,7 +103,7 @@ public void connect(int connectTimeout, int readTimeout, int writeTimeout,
     while (protocol == null) {
       try {
         rawSocket = proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.HTTP
-            ? address.getSocketFactory().createSocket()
+            ? address.socketFactory().createSocket()
             : new Socket(proxy);
         connectSocket(connectTimeout, readTimeout, writeTimeout, connectionSpecSelector);
       } catch (IOException e) {
@@ -141,7 +141,7 @@ private void connectSocket(int connectTimeout, int readTimeout, int writeTimeout
     source = Okio.buffer(Okio.source(rawSocket));
     sink = Okio.buffer(Okio.sink(rawSocket));
 
-    if (route.address().getSslSocketFactory() != null) {
+    if (route.address().sslSocketFactory() != null) {
       connectTls(readTimeout, writeTimeout, connectionSpecSelector);
     } else {
       protocol = Protocol.HTTP_1_1;
@@ -169,7 +169,7 @@ private void connectTls(int readTimeout, int writeTimeout,
     }
 
     Address address = route.address();
-    SSLSocketFactory sslSocketFactory = address.getSslSocketFactory();
+    SSLSocketFactory sslSocketFactory = address.sslSocketFactory();
     boolean success = false;
     SSLSocket sslSocket = null;
     try {
@@ -181,7 +181,7 @@ private void connectTls(int readTimeout, int writeTimeout,
       ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket);
       if (connectionSpec.supportsTlsExtensions()) {
         Platform.get().configureTlsExtensions(
-            sslSocket, address.url().host(), address.getProtocols());
+            sslSocket, address.url().host(), address.protocols());
       }
 
       // Force handshake. This can throw!
@@ -189,7 +189,7 @@ private void connectTls(int readTimeout, int writeTimeout,
       Handshake unverifiedHandshake = Handshake.get(sslSocket.getSession());
 
       // Verify that the socket's certificates are acceptable for the target host.
-      if (!address.getHostnameVerifier().verify(address.url().host(), sslSocket.getSession())) {
+      if (!address.hostnameVerifier().verify(address.url().host(), sslSocket.getSession())) {
         X509Certificate cert = (X509Certificate) unverifiedHandshake.peerCertificates().get(0);
         throw new SSLPeerUnverifiedException("Hostname " + address.url().host() + " not verified:"
             + "\n    certificate: " + CertificatePinner.pin(cert)
@@ -198,7 +198,7 @@ private void connectTls(int readTimeout, int writeTimeout,
       }
 
       // Check that the certificate pinner is satisfied by the certificates presented.
-      address.getCertificatePinner().check(address.url().host(),
+      address.certificatePinner().check(address.url().host(),
           unverifiedHandshake.peerCertificates());
 
       // Success! Save the handshake and the ALPN protocol.
@@ -266,7 +266,7 @@ private void createTunnel(int readTimeout, int writeTimeout) throws IOException
 
         case HTTP_PROXY_AUTH:
           tunnelRequest = OkHeaders.processAuthHeader(
-              route.address().getAuthenticator(), response, route.proxy());
+              route.address().authenticator(), response, route.proxy());
           if (tunnelRequest != null) continue;
           throw new IOException("Failed to authenticate with proxy");
 
