diff --git a/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java
index 0dbec41be1..be0e5e69db 100644
--- a/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java
+++ b/okhttp-sse/src/test/java/okhttp3/internal/sse/EventSourceHttpTest.java
@@ -24,6 +24,7 @@
 import okhttp3.sse.EventSource;
 import okhttp3.sse.EventSources;
 import org.junit.After;
+import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -34,7 +35,11 @@
   @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
   private final EventSourceRecorder listener = new EventSourceRecorder();
-  private OkHttpClient client = clientTestRule.client;
+  private OkHttpClient client;
+
+  @Before public void setUp() {
+    client = clientTestRule.newClient();
+  }
 
   @After public void after() {
     listener.assertExhausted();
diff --git a/okhttp-testing-support/README.md b/okhttp-testing-support/README.md
new file mode 100644
index 0000000000..f47dbe11bb
--- /dev/null
+++ b/okhttp-testing-support/README.md
@@ -0,0 +1,5 @@
+OkHttp Testing Support
+======================
+
+This module offers utilities and support for testing OkHttp itself. It's not intended for use by
+other projects or consumers of the OkHttp library.
diff --git a/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java
deleted file mode 100644
index 41dacf9b13..0000000000
--- a/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright (C) 2019 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3;
-
-import org.junit.rules.TestRule;
-import org.junit.runner.Description;
-import org.junit.runners.model.Statement;
-
-import static okhttp3.TestUtil.defaultClient;
-
-public class OkHttpClientTestRule implements TestRule {
-  public OkHttpClient client = defaultClient();
-
-  @Override
-  public Statement apply(Statement base, Description description) {
-    return statement(base);
-  }
-
-  private Statement statement(final Statement base) {
-    return new Statement() {
-      @Override
-      public void evaluate() throws Throwable {
-        try {
-          base.evaluate();
-        } finally {
-          TestUtil.ensureAllConnectionsReleased(client);
-        }
-      }
-    };
-  }
-}
diff --git a/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt
new file mode 100644
index 0000000000..90e067b8a8
--- /dev/null
+++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3
+
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.rules.TestRule
+import org.junit.runner.Description
+import org.junit.runners.model.Statement
+import java.net.InetAddress
+import java.util.concurrent.ConcurrentLinkedDeque
+
+/** Apply this rule to tests that need an OkHttpClient instance. */
+class OkHttpClientTestRule : TestRule {
+  private var prototype: OkHttpClient? = null
+
+  /**
+   * Returns an OkHttpClient for all tests to use as a starting point.
+   *
+   * The shared instance allows all tests to share a single connection pool, which prevents idle
+   * connections from consuming unnecessary resources while connections wait to be evicted.
+   *
+   * This client is also configured to be slightly more deterministic, returning a single IP
+   * address for all hosts, regardless of the actual number of IP addresses reported by DNS.
+   */
+  fun newClient(): OkHttpClient {
+    return newClientBuilder().build()
+  }
+
+  fun newClientBuilder(): OkHttpClient.Builder {
+    return checkNotNull(prototype) { "don't create clients in test initialization!" }.newBuilder()
+  }
+
+  fun ensureAllConnectionsReleased() {
+    val connectionPool = prototype!!.connectionPool
+    connectionPool.evictAll()
+    assertThat(connectionPool.idleConnectionCount()).isEqualTo(0)
+  }
+
+  override fun apply(base: Statement, description: Description): Statement {
+    return object : Statement() {
+      override fun evaluate() {
+        acquireClient()
+        try {
+          base.evaluate()
+        } finally {
+          ensureAllConnectionsReleased()
+          releaseClient()
+        }
+      }
+
+      private fun acquireClient() {
+        prototype = prototypes.poll() ?: OkHttpClient.Builder()
+            .dns(SINGLE_INET_ADDRESS_DNS) // Prevent unexpected fallback addresses.
+            .build()
+      }
+
+      private fun releaseClient() {
+        prototypes.push(prototype)
+        prototype = null
+      }
+    }
+  }
+
+  companion object {
+    /**
+     * Quick and dirty pool of OkHttpClient instances. Each has its own independent dispatcher and
+     * connection pool. This way we can reuse expensive resources while preventing concurrent tests
+     * from interfering with each other.
+     */
+    internal val prototypes = ConcurrentLinkedDeque<OkHttpClient>()
+
+    /**
+     * A network that resolves only one IP address per host. Use this when testing route selection
+     * fallbacks to prevent the host machine's various IP addresses from interfering.
+     */
+    internal val SINGLE_INET_ADDRESS_DNS = object : Dns {
+      override fun lookup(hostname: String): List<InetAddress> {
+        val addresses = Dns.SYSTEM.lookup(hostname)
+        return listOf(addresses[0])
+      }
+    }
+  }
+}
diff --git a/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java
index f3038c090a..8ce86ae1eb 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java
+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java
@@ -15,52 +15,19 @@
  */
 package okhttp3;
 
-import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import okhttp3.internal.http2.Header;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 public final class TestUtil {
   public static final InetSocketAddress UNREACHABLE_ADDRESS
       = new InetSocketAddress("198.51.100.1", 8080);
 
-  /**
-   * A network that resolves only one IP address per host. Use this when testing route selection
-   * fallbacks to prevent the host machine's various IP addresses from interfering.
-   */
-  private static final Dns SINGLE_INET_ADDRESS_DNS = hostname -> {
-    List<InetAddress> addresses = Dns.SYSTEM.lookup(hostname);
-    return Collections.singletonList(addresses.get(0));
-  };
-
   private TestUtil() {
   }
 
-  private static final ConnectionPool connectionPool = new ConnectionPool();
-  private static final Dispatcher dispatcher = new Dispatcher();
-
-  /**
-   * Returns an OkHttpClient for all tests to use as a starting point.
-   *
-   * <p>The shared instance allows all tests to share a single connection pool, which prevents idle
-   * connections from consuming unnecessary resources while connections wait to be evicted.
-   *
-   * <p>This client is also configured to be slightly more deterministic, returning a single IP
-   * address for all hosts, regardless of the actual number of IP addresses reported by DNS.
-   */
-  public static OkHttpClient defaultClient() {
-    return new OkHttpClient.Builder()
-        .connectionPool(connectionPool)
-        .dispatcher(dispatcher)
-        .dns(SINGLE_INET_ADDRESS_DNS) // Prevent unexpected fallback addresses.
-        .build();
-  }
-
   public static List<Header> headerEntries(String... elements) {
     List<Header> result = new ArrayList<>(elements.length / 2);
     for (int i = 0; i < elements.length; i += 2) {
@@ -85,9 +52,4 @@ public static void awaitGarbageCollection() throws Exception {
     Thread.sleep(100);
     System.runFinalization();
   }
-
-  public static void ensureAllConnectionsReleased(OkHttpClient client) {
-    client.connectionPool().evictAll();
-    assertThat(client.connectionPool().idleConnectionCount()).isEqualTo(0);
-  }
 }
diff --git a/okhttp/src/test/java/okhttp3/CacheTest.java b/okhttp/src/test/java/okhttp3/CacheTest.java
index b0d960fe85..02fb43cd4c 100644
--- a/okhttp/src/test/java/okhttp3/CacheTest.java
+++ b/okhttp/src/test/java/okhttp3/CacheTest.java
@@ -74,7 +74,7 @@
   @Before public void setUp() throws Exception {
     server.setProtocolNegotiationEnabled(false);
     cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);
-    client = clientTestRule.client.newBuilder()
+    client = clientTestRule.newClientBuilder()
         .cache(cache)
         .cookieJar(new JavaNetCookieJar(cookieManager))
         .build();
@@ -1109,7 +1109,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
   }
 
   @Test public void conditionalCacheHitIsNotDoublePooled() throws Exception {
-    TestUtil.ensureAllConnectionsReleased(client);
+    clientTestRule.ensureAllConnectionsReleased();
 
     server.enqueue(new MockResponse()
         .addHeader("ETag: v1")
diff --git a/okhttp/src/test/java/okhttp3/CallKotlinTest.kt b/okhttp/src/test/java/okhttp3/CallKotlinTest.kt
index 1fd43e5fe3..5ca735b357 100644
--- a/okhttp/src/test/java/okhttp3/CallKotlinTest.kt
+++ b/okhttp/src/test/java/okhttp3/CallKotlinTest.kt
@@ -18,6 +18,7 @@ package okhttp3
 import okhttp3.mockwebserver.MockResponse
 import okhttp3.mockwebserver.MockWebServer
 import org.assertj.core.api.Assertions.assertThat
+import org.junit.Before
 import org.junit.Rule
 import org.junit.Test
 import org.junit.rules.TestRule
@@ -30,7 +31,11 @@ class CallKotlinTest {
   @JvmField @Rule val server = MockWebServer()
   @JvmField @Rule val clientTestRule = OkHttpClientTestRule()
 
-  private val client = clientTestRule.client
+  private lateinit var client: OkHttpClient
+
+  @Before fun setUp() {
+    client = clientTestRule.newClient()
+  }
 
   @Test
   fun legalToExecuteTwiceCloning() {
diff --git a/okhttp/src/test/java/okhttp3/CallTest.java b/okhttp/src/test/java/okhttp3/CallTest.java
index 3de965268a..1989bab164 100644
--- a/okhttp/src/test/java/okhttp3/CallTest.java
+++ b/okhttp/src/test/java/okhttp3/CallTest.java
@@ -110,16 +110,17 @@
 
   private RecordingEventListener listener = new RecordingEventListener();
   private HandshakeCertificates handshakeCertificates = localhost();
-  private OkHttpClient client = clientTestRule.client.newBuilder()
-      .eventListener(listener)
-      .build();
+  private OkHttpClient client;
   private RecordingCallback callback = new RecordingCallback();
   private TestLogHandler logHandler = new TestLogHandler();
   private Cache cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);
   private Logger logger = Logger.getLogger(OkHttpClient.class.getName());
 
-  @Before public void setUp() throws Exception {
+  @Before public void setUp() {
     logger.addHandler(logHandler);
+    client = clientTestRule.newClientBuilder()
+        .eventListener(listener)
+        .build();
   }
 
   @After public void tearDown() throws Exception {
@@ -994,7 +995,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
   /** https://github.com/square/okhttp/issues/1801 */
   @Test public void asyncCallEngineInitialized() throws Exception {
-    OkHttpClient c = clientTestRule.client.newBuilder()
+    OkHttpClient c = client.newBuilder()
         .addInterceptor(chain -> { throw new IOException(); })
         .build();
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -3490,7 +3491,7 @@ private RequestBody requestBody(final boolean chunked, final long size, final in
     server.enqueue(new MockResponse()
         .setBody("This gets leaked."));
 
-    client = clientTestRule.client.newBuilder()
+    client = clientTestRule.newClientBuilder()
         .connectionPool(new ConnectionPool(0, 10, TimeUnit.MILLISECONDS))
         .build();
 
@@ -3519,7 +3520,7 @@ private RequestBody requestBody(final boolean chunked, final long size, final in
     server.enqueue(new MockResponse()
         .setBody("This gets leaked."));
 
-    client = clientTestRule.client.newBuilder()
+    client = clientTestRule.newClientBuilder()
         .connectionPool(new ConnectionPool(0, 10, TimeUnit.MILLISECONDS))
         .build();
 
diff --git a/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java b/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
index 48ad1cf99a..3d4aa6c4c4 100644
--- a/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
+++ b/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
@@ -81,11 +81,11 @@
         .addTrustedCertificate(rootCa.certificate())
         .build();
 
-    client = new OkHttpClient.Builder().dns(dns)
+    client = clientTestRule.newClientBuilder()
+        .dns(dns)
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .build();
-    clientTestRule.client = client;
 
     HandshakeCertificates serverHandshakeCertificates = new HandshakeCertificates.Builder()
         .heldCertificate(certificate)
diff --git a/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java
index 15b5282c88..f66172e41f 100644
--- a/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java
+++ b/okhttp/src/test/java/okhttp3/ConnectionReuseTest.java
@@ -23,6 +23,7 @@
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.SocketPolicy;
 import okhttp3.tls.HandshakeCertificates;
+import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestRule;
@@ -41,7 +42,11 @@
   @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
   private HandshakeCertificates handshakeCertificates = localhost();
-  private OkHttpClient client = clientTestRule.client;
+  private OkHttpClient client;
+
+  @Before public void setUp() {
+    client = clientTestRule.newClient();
+  }
 
   @Test public void connectionsAreReused() throws Exception {
     server.enqueue(new MockResponse().setBody("a"));
diff --git a/okhttp/src/test/java/okhttp3/ConscryptTest.kt b/okhttp/src/test/java/okhttp3/ConscryptTest.kt
index 48c88978d9..8c7a45e8c3 100644
--- a/okhttp/src/test/java/okhttp3/ConscryptTest.kt
+++ b/okhttp/src/test/java/okhttp3/ConscryptTest.kt
@@ -34,18 +34,18 @@ class ConscryptTest {
   @JvmField
   @Rule public val platform = PlatformRule.conscrypt()
 
+  @JvmField @Rule val clientTestRule = OkHttpClientTestRule()
   private lateinit var client: OkHttpClient
 
   @Before
-  fun createClient() {
+  fun setUp() {
+    client = clientTestRule.newClient()
     assertThat(Conscrypt.isConscrypt(Platform.get().platformTrustManager())).isTrue()
-
-    client = OkHttpClient()
   }
 
   @After
   fun tearDown() {
-    TestUtil.ensureAllConnectionsReleased(client)
+    clientTestRule.ensureAllConnectionsReleased()
   }
 
   private fun assumeNetwork() {
diff --git a/okhttp/src/test/java/okhttp3/CookiesTest.java b/okhttp/src/test/java/okhttp3/CookiesTest.java
index be8d238382..758a0936cc 100644
--- a/okhttp/src/test/java/okhttp3/CookiesTest.java
+++ b/okhttp/src/test/java/okhttp3/CookiesTest.java
@@ -30,6 +30,7 @@
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
+import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -44,7 +45,11 @@
   @Rule public final MockWebServer server = new MockWebServer();
   @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
-  private OkHttpClient client = clientTestRule.client;
+  private OkHttpClient client;
+
+  @Before public void setUp() {
+    client = clientTestRule.newClient();
+  }
 
   @Test
   public void testNetscapeResponse() throws Exception {
diff --git a/okhttp/src/test/java/okhttp3/DispatcherTest.java b/okhttp/src/test/java/okhttp3/DispatcherTest.java
index b7d0291113..2a7c9a06b6 100644
--- a/okhttp/src/test/java/okhttp3/DispatcherTest.java
+++ b/okhttp/src/test/java/okhttp3/DispatcherTest.java
@@ -20,15 +20,16 @@
   RecordingWebSocketListener webSocketListener = new RecordingWebSocketListener();
   Dispatcher dispatcher = new Dispatcher(executor);
   RecordingEventListener listener = new RecordingEventListener();
-  OkHttpClient client = clientTestRule.client.newBuilder()
-      .dispatcher(dispatcher)
-      .eventListener(listener)
-      .build();
+  OkHttpClient client;
 
   @Before public void setUp() throws Exception {
     dispatcher.setMaxRequests(20);
     dispatcher.setMaxRequestsPerHost(10);
     listener.forbidLock(dispatcher);
+    client = clientTestRule.newClientBuilder()
+        .dispatcher(dispatcher)
+        .eventListener(listener)
+        .build();
   }
 
   @Test public void maxRequestsZero() throws Exception {
diff --git a/okhttp/src/test/java/okhttp3/DuplexTest.java b/okhttp/src/test/java/okhttp3/DuplexTest.java
index 84a1ed3f9e..2dc4bcaee0 100644
--- a/okhttp/src/test/java/okhttp3/DuplexTest.java
+++ b/okhttp/src/test/java/okhttp3/DuplexTest.java
@@ -50,14 +50,13 @@
 
   private RecordingEventListener listener = new RecordingEventListener();
   private HandshakeCertificates handshakeCertificates = localhost();
-  private OkHttpClient client = clientTestRule.client
-      .newBuilder()
-      .eventListener(listener)
-      .build();
+  private OkHttpClient client;
 
-  @Before
-  public void checkHttp2() {
+  @Before public void setUp() {
     platform.assumeHttp2Support();
+    client = clientTestRule.newClientBuilder()
+        .eventListener(listener)
+        .build();
   }
 
   @Test public void http1DoesntSupportDuplex() throws IOException {
diff --git a/okhttp/src/test/java/okhttp3/EventListenerTest.java b/okhttp/src/test/java/okhttp3/EventListenerTest.java
index e76c85efaa..8cdffca101 100644
--- a/okhttp/src/test/java/okhttp3/EventListenerTest.java
+++ b/okhttp/src/test/java/okhttp3/EventListenerTest.java
@@ -81,11 +81,11 @@
   private final RecordingEventListener listener = new RecordingEventListener();
   private final HandshakeCertificates handshakeCertificates = localhost();
 
-  private OkHttpClient client = clientTestRule.client;
+  private OkHttpClient client;
   private SocksProxy socksProxy;
 
   @Before public void setUp() {
-    client = clientTestRule.client.newBuilder()
+    client = clientTestRule.newClientBuilder()
         .eventListener(listener)
         .build();
 
diff --git a/okhttp/src/test/java/okhttp3/InterceptorTest.java b/okhttp/src/test/java/okhttp3/InterceptorTest.java
index f64220e55c..77c9a7811d 100644
--- a/okhttp/src/test/java/okhttp3/InterceptorTest.java
+++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java
@@ -38,6 +38,7 @@
 import okio.Okio;
 import okio.Sink;
 import okio.Source;
+import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -48,9 +49,13 @@
   @Rule public MockWebServer server = new MockWebServer();
   @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
-  private OkHttpClient client = clientTestRule.client;
+  private OkHttpClient client;
   private RecordingCallback callback = new RecordingCallback();
 
+  @Before public void setUp() {
+    client = clientTestRule.newClient();
+  }
+
   @Test public void applicationInterceptorsCanShortCircuitResponses() throws Exception {
     server.shutdown(); // Accept no connections.
 
diff --git a/okhttp/src/test/java/okhttp3/OkHttpClientTest.java b/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
index 45af6ac400..59747ee7ae 100644
--- a/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
+++ b/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
@@ -28,12 +28,12 @@
 import org.junit.Test;
 
 import static java.util.Arrays.asList;
-import static okhttp3.TestUtil.defaultClient;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
 public final class OkHttpClientTest {
   @Rule public final MockWebServer server = new MockWebServer();
+  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
   private static final ProxySelector DEFAULT_PROXY_SELECTOR = ProxySelector.getDefault();
   private static final CookieHandler DEFAULT_COOKIE_HANDLER = CookieManager.getDefault();
@@ -46,7 +46,7 @@
   }
 
   @Test public void durationDefaults() {
-    OkHttpClient client = defaultClient();
+    OkHttpClient client = clientTestRule.newClient();
     assertThat(client.callTimeoutMillis()).isEqualTo(0);
     assertThat(client.connectTimeoutMillis()).isEqualTo(10_000);
     assertThat(client.readTimeoutMillis()).isEqualTo(10_000);
@@ -92,7 +92,7 @@
 
   @Test public void clonedInterceptorsListsAreIndependent() throws Exception {
     Interceptor interceptor = chain -> chain.proceed(chain.request());
-    OkHttpClient original = defaultClient();
+    OkHttpClient original = clientTestRule.newClient();
     original.newBuilder()
         .addInterceptor(interceptor)
         .addNetworkInterceptor(interceptor)
@@ -106,7 +106,7 @@
    * clients.
    */
   @Test public void cloneSharesStatefulInstances() throws Exception {
-    OkHttpClient client = defaultClient();
+    OkHttpClient client = clientTestRule.newClient();
 
     // Values should be non-null.
     OkHttpClient a = client.newBuilder().build();
@@ -131,8 +131,8 @@
   }
 
   @Test public void certificatePinnerEquality() {
-    OkHttpClient clientA = TestUtil.defaultClient();
-    OkHttpClient clientB = TestUtil.defaultClient();
+    OkHttpClient clientA = clientTestRule.newClient();
+    OkHttpClient clientB = clientTestRule.newClient();
     assertThat(clientB.certificatePinner()).isEqualTo(clientA.certificatePinner());
   }
 
@@ -213,8 +213,7 @@
 
     ProxySelector.setDefault(null);
 
-    OkHttpClient client = defaultClient().newBuilder()
-        .build();
+    OkHttpClient client = clientTestRule.newClient();
 
     Request request = new Request.Builder().url(server.url("/")).build();
     Response response = client.newCall(request).execute();
diff --git a/okhttp/src/test/java/okhttp3/SocksProxyTest.java b/okhttp/src/test/java/okhttp3/SocksProxyTest.java
index 6768632b6f..89dd9cbed2 100644
--- a/okhttp/src/test/java/okhttp3/SocksProxyTest.java
+++ b/okhttp/src/test/java/okhttp3/SocksProxyTest.java
@@ -29,11 +29,11 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import static okhttp3.TestUtil.defaultClient;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public final class SocksProxyTest {
   @Rule public final MockWebServer server = new MockWebServer();
+  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
   private final SocksProxy socksProxy = new SocksProxy();
 
@@ -49,7 +49,7 @@
     server.enqueue(new MockResponse().setBody("abc"));
     server.enqueue(new MockResponse().setBody("def"));
 
-    OkHttpClient client = defaultClient().newBuilder()
+    OkHttpClient client = clientTestRule.newClientBuilder()
         .proxy(socksProxy.proxy())
         .build();
 
@@ -78,7 +78,7 @@
       }
     };
 
-    OkHttpClient client = defaultClient().newBuilder()
+    OkHttpClient client = clientTestRule.newClientBuilder()
         .proxySelector(proxySelector)
         .build();
 
@@ -93,7 +93,7 @@
     // This testcase will fail if the target is resolved locally instead of through the proxy.
     server.enqueue(new MockResponse().setBody("abc"));
 
-    OkHttpClient client = defaultClient().newBuilder()
+    OkHttpClient client = clientTestRule.newClientBuilder()
         .proxy(socksProxy.proxy())
         .build();
 
diff --git a/okhttp/src/test/java/okhttp3/URLConnectionTest.java b/okhttp/src/test/java/okhttp3/URLConnectionTest.java
index f993e74a09..d0d26ca6cd 100644
--- a/okhttp/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java
@@ -112,11 +112,12 @@
   @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
   private HandshakeCertificates handshakeCertificates = localhost();
-  private OkHttpClient client = clientTestRule.client;
+  private OkHttpClient client;
   private @Nullable Cache cache;
 
   @Before public void setUp() {
     server.setProtocolNegotiationEnabled(false);
+    client = clientTestRule.newClient();
   }
 
   @After public void tearDown() throws Exception {
diff --git a/okhttp/src/test/java/okhttp3/WholeOperationTimeoutTest.java b/okhttp/src/test/java/okhttp3/WholeOperationTimeoutTest.java
index 6d9dcef39f..3e175f8174 100644
--- a/okhttp/src/test/java/okhttp3/WholeOperationTimeoutTest.java
+++ b/okhttp/src/test/java/okhttp3/WholeOperationTimeoutTest.java
@@ -24,6 +24,7 @@
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okio.BufferedSink;
+import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -37,7 +38,11 @@
   @Rule public final MockWebServer server = new MockWebServer();
   @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
-  private OkHttpClient client = clientTestRule.client;
+  private OkHttpClient client;
+
+  @Before public void setUp() {
+    client = clientTestRule.newClient();
+  }
 
   @Test public void defaultConfigIsNoTimeout() throws Exception {
     Request request = new Request.Builder()
diff --git a/okhttp/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java b/okhttp/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
index 6d8bea3fb5..a901295c4b 100644
--- a/okhttp/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
@@ -36,13 +36,14 @@
 import okhttp3.ConnectionSpec;
 import okhttp3.EventListener;
 import okhttp3.FakeDns;
+import okhttp3.OkHttpClientTestRule;
 import okhttp3.Protocol;
 import okhttp3.Request;
 import okhttp3.Route;
-import okhttp3.TestUtil;
 import okhttp3.internal.http.RecordingProxySelector;
 import okhttp3.tls.HandshakeCertificates;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 
 import static java.net.Proxy.NO_PROXY;
@@ -52,6 +53,8 @@
 import static org.junit.Assert.fail;
 
 public final class RouteSelectorTest {
+  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
+
   public final List<ConnectionSpec> connectionSpecs = immutableListOf(
       ConnectionSpec.MODERN_TLS,
       ConnectionSpec.COMPATIBLE_TLS,
@@ -81,7 +84,7 @@
   private RouteDatabase routeDatabase = new RouteDatabase();
 
   @Before public void setUp() throws Exception {
-    call = TestUtil.defaultClient().newCall(new Request.Builder()
+    call = clientTestRule.newClient().newCall(new Request.Builder()
         .url("https://" + uriHost + ":" + uriPort + "/")
         .build());
     socketFactory = SocketFactory.getDefault();
diff --git a/okhttp/src/test/java/okhttp3/internal/http/CancelTest.java b/okhttp/src/test/java/okhttp3/internal/http/CancelTest.java
index 6f11d320b7..05abf5e904 100644
--- a/okhttp/src/test/java/okhttp3/internal/http/CancelTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/http/CancelTest.java
@@ -63,7 +63,7 @@
             return serverSocket;
           }
         });
-    client = clientTestRule.client.newBuilder()
+    client = clientTestRule.newClientBuilder()
         .socketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {
           @Override protected Socket configureSocket(Socket socket) throws IOException {
             socket.setSendBufferSize(SOCKET_BUFFER_SIZE);
diff --git a/okhttp/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java b/okhttp/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
index 86364052f6..dab57bb7e0 100644
--- a/okhttp/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
@@ -50,7 +50,7 @@
   private static final int SOCKET_BUFFER_SIZE = 256 * 1024;
 
   private MockWebServer server;
-  private OkHttpClient client = clientTestRule.client;
+  private OkHttpClient client;
 
   @Before public void setUp() throws Exception {
     // Sockets on some platforms can have large buffers that mean writes do not block when
@@ -65,7 +65,7 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
             return serverSocket;
           }
         });
-    client = clientTestRule.client.newBuilder()
+    client = clientTestRule.newClientBuilder()
         .socketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {
           @Override
           protected Socket configureSocket(Socket socket) throws IOException {
diff --git a/okhttp/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java b/okhttp/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
index 49bdd8cdd1..a543accf42 100644
--- a/okhttp/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
+++ b/okhttp/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
@@ -118,42 +118,29 @@
   private Protocol protocol;
 
   public HttpOverHttp2Test(Protocol protocol) {
-    this.client = protocol == Protocol.HTTP_2 ? buildHttp2Client() : buildH2PriorKnowledgeClient();
-    this.scheme = protocol == Protocol.HTTP_2 ? "https" : "http";
     this.protocol = protocol;
   }
 
-  @Before
-  public void checkHttp2() {
+  @Before public void setUp() {
     if (protocol == Protocol.HTTP_2) {
       platform.assumeHttp2Support();
-    }
-  }
-
-  private OkHttpClient buildH2PriorKnowledgeClient() {
-    return clientTestRule.client.newBuilder()
-        .protocols(asList(Protocol.H2_PRIOR_KNOWLEDGE))
-        .build();
-  }
-
-  private OkHttpClient buildHttp2Client() {
-    return clientTestRule.client.newBuilder()
-        .protocols(asList(Protocol.HTTP_2, Protocol.HTTP_1_1))
-        .sslSocketFactory(
-            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
-        .hostnameVerifier(new RecordingHostnameVerifier())
-        .build();
-  }
-
-  @Before public void setUp() {
-    if (protocol == Protocol.H2_PRIOR_KNOWLEDGE) {
-      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));
-    } else {
       server.useHttps(handshakeCertificates.sslSocketFactory(), false);
+      client = clientTestRule.newClientBuilder()
+          .protocols(asList(Protocol.HTTP_2, Protocol.HTTP_1_1))
+          .sslSocketFactory(
+              handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
+          .hostnameVerifier(new RecordingHostnameVerifier())
+          .build();
+      scheme = "https";
+    } else {
+      server.setProtocols(asList(Protocol.H2_PRIOR_KNOWLEDGE));
+      client = clientTestRule.newClientBuilder()
+          .protocols(asList(Protocol.H2_PRIOR_KNOWLEDGE))
+          .build();
+      scheme = "http";
     }
 
     cache = new Cache(tempDir.getRoot(), Integer.MAX_VALUE);
-
     http2Logger.addHandler(http2Handler);
     previousLevel = http2Logger.getLevel();
     http2Logger.setLevel(Level.FINE);
diff --git a/okhttp/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java b/okhttp/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
index 06cd8b5265..771225bfa1 100644
--- a/okhttp/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
@@ -30,6 +30,7 @@
 import okhttp3.Call;
 import okhttp3.CertificatePinner;
 import okhttp3.OkHttpClient;
+import okhttp3.OkHttpClientTestRule;
 import okhttp3.PlatformRule;
 import okhttp3.RecordingHostnameVerifier;
 import okhttp3.Request;
@@ -43,7 +44,6 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import static okhttp3.TestUtil.defaultClient;
 import static okhttp3.internal.platform.PlatformTest.getJvmSpecVersion;
 import static okhttp3.tls.internal.TlsUtil.newKeyManager;
 import static okhttp3.tls.internal.TlsUtil.newTrustManager;
@@ -53,6 +53,7 @@
 
 public final class CertificatePinnerChainValidationTest {
   @Rule public final PlatformRule platform = new PlatformRule();
+  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
   @Rule public final MockWebServer server = new MockWebServer();
 
@@ -83,7 +84,7 @@
     HandshakeCertificates handshakeCertificates = new HandshakeCertificates.Builder()
         .addTrustedCertificate(rootCa.certificate())
         .build();
-    OkHttpClient client = defaultClient().newBuilder()
+    OkHttpClient client = clientTestRule.newClientBuilder()
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .hostnameVerifier(new RecordingHostnameVerifier())
@@ -143,7 +144,7 @@
     HandshakeCertificates handshakeCertificates = new HandshakeCertificates.Builder()
         .addTrustedCertificate(rootCa.certificate())
         .build();
-    OkHttpClient client = defaultClient().newBuilder()
+    OkHttpClient client = clientTestRule.newClientBuilder()
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .hostnameVerifier(new RecordingHostnameVerifier())
@@ -212,7 +213,7 @@
     HandshakeCertificates handshakeCertificates = new HandshakeCertificates.Builder()
         .addTrustedCertificate(rootCa.certificate())
         .build();
-    OkHttpClient client = defaultClient().newBuilder()
+    OkHttpClient client = clientTestRule.newClientBuilder()
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .hostnameVerifier(new RecordingHostnameVerifier())
@@ -291,7 +292,7 @@
         .addTrustedCertificate(rootCa.certificate())
         .addTrustedCertificate(compromisedRootCa.certificate())
         .build();
-    OkHttpClient client = defaultClient().newBuilder()
+    OkHttpClient client = clientTestRule.newClientBuilder()
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .hostnameVerifier(new RecordingHostnameVerifier())
diff --git a/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java b/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
index c978db94f6..e9e2f19c10 100644
--- a/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
@@ -31,6 +31,7 @@
 import javax.security.auth.x500.X500Principal;
 import okhttp3.Call;
 import okhttp3.OkHttpClient;
+import okhttp3.OkHttpClientTestRule;
 import okhttp3.PlatformRule;
 import okhttp3.Request;
 import okhttp3.Response;
@@ -44,7 +45,6 @@
 
 import static java.util.Arrays.asList;
 import static okhttp3.PlatformRule.getPlatformSystemProperty;
-import static okhttp3.TestUtil.defaultClient;
 import static okhttp3.internal.platform.PlatformTest.getJvmSpecVersion;
 import static okhttp3.tls.internal.TlsUtil.newKeyManager;
 import static okhttp3.tls.internal.TlsUtil.newTrustManager;
@@ -54,6 +54,7 @@
 
 public final class ClientAuthTest {
   @Rule public final PlatformRule platform = new PlatformRule();
+  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
   @Rule public final MockWebServer server = new MockWebServer();
 
   private HeldCertificate serverRootCa;
@@ -272,7 +273,7 @@ private OkHttpClient buildClient(
     }
 
     HandshakeCertificates handshakeCertificates = builder.build();
-    return defaultClient().newBuilder()
+    return clientTestRule.newClientBuilder()
         .sslSocketFactory(
             handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager())
         .build();
diff --git a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
index fc6de282ba..ad966506bd 100644
--- a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
@@ -27,6 +27,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Logger;
 import okhttp3.OkHttpClient;
+import okhttp3.OkHttpClientTestRule;
 import okhttp3.Protocol;
 import okhttp3.RecordingEventListener;
 import okhttp3.RecordingHostnameVerifier;
@@ -44,13 +45,12 @@
 import okio.Buffer;
 import okio.ByteString;
 import org.junit.After;
+import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
 import static java.util.Arrays.asList;
-import static okhttp3.TestUtil.defaultClient;
-import static okhttp3.TestUtil.ensureAllConnectionsReleased;
 import static okhttp3.TestUtil.repeat;
 import static okhttp3.tls.internal.TlsUtil.localhost;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -59,21 +59,26 @@
 
 public final class WebSocketHttpTest {
   @Rule public final MockWebServer webServer = new MockWebServer();
+  @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
 
   private final HandshakeCertificates handshakeCertificates = localhost();
   private final WebSocketRecorder clientListener = new WebSocketRecorder("client");
   private final WebSocketRecorder serverListener = new WebSocketRecorder("server");
   private final Random random = new Random(0);
-  private OkHttpClient client = defaultClient().newBuilder()
-      .writeTimeout(500, TimeUnit.MILLISECONDS)
-      .readTimeout(500, TimeUnit.MILLISECONDS)
-      .addInterceptor(chain -> {
-        Response response = chain.proceed(chain.request());
-        // Ensure application interceptors never see a null body.
-        assertThat(response.body()).isNotNull();
-        return response;
-      })
-      .build();
+  private OkHttpClient client;
+
+  @Before public void setUp() {
+    client = clientTestRule.newClientBuilder()
+        .writeTimeout(500, TimeUnit.MILLISECONDS)
+        .readTimeout(500, TimeUnit.MILLISECONDS)
+        .addInterceptor(chain -> {
+          Response response = chain.proceed(chain.request());
+          // Ensure application interceptors never see a null body.
+          assertThat(response.body()).isNotNull();
+          return response;
+        })
+        .build();
+  }
 
   @After public void tearDown() {
     clientListener.assertExhausted();
@@ -300,8 +305,6 @@
 
     clientListener.assertFailure(101, null, ProtocolException.class,
         "Expected 'Connection' header value 'Upgrade' but was 'null'");
-
-    ensureAllConnectionsReleased(client);
   }
 
   @Test public void wrongConnectionHeader() throws IOException {
