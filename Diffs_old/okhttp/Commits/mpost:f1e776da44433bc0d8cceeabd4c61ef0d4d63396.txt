diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java
index 00f1d05421..a1704c7594 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java
@@ -16,6 +16,10 @@
 package com.squareup.okhttp;
 
 import com.squareup.okhttp.internal.Util;
+
+import org.junit.Test;
+
+import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
@@ -23,7 +27,6 @@
 import java.net.URL;
 
 import okio.Buffer;
-import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
@@ -77,6 +80,19 @@
     assertEquals("Retransmit body", "616263", bodyToHex(body));
   }
 
+  @Test public void inputStream() throws Exception {
+    byte[] bytes = "abc".getBytes(Util.UTF_8);
+    ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
+    MediaType contentType = MediaType.parse("text/plain");
+
+    RequestBody body = RequestBody.create(contentType, inputStream, bytes.length);
+
+    assertEquals(contentType, body.contentType());
+    assertEquals(bytes.length, body.contentLength());
+    assertEquals("616263", bodyToHex(body));
+    assertEquals("Retransmit body", "616263", bodyToHex(body));
+  }
+
   /** Common verbs used for apis such as GitHub, AWS, and Google Cloud. */
   @Test public void crudVerbs() {
     MediaType contentType = MediaType.parse("application/json");
diff --git a/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java
index 1e0130ca68..0d5277f236 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/RequestBody.java
@@ -101,9 +101,9 @@ public static RequestBody create(final MediaType contentType, final File file) {
   }
 
   /** Returns a new request body that transmits the content of an {@code InputStream}. */
-  public static RequestBody create(final MediaType contentType, final InputStream is,
-                                   final long length) {
-    if (is == null) throw new NullPointerException("inputStream == null");
+  public static RequestBody create(final MediaType contentType, final InputStream inputStream,
+      final long length) {
+    if (inputStream == null) throw new NullPointerException("inputStream == null");
 
     return new RequestBody() {
       @Override public MediaType contentType() {
@@ -117,10 +117,15 @@ public static RequestBody create(final MediaType contentType, final InputStream
       @Override public void writeTo(BufferedSink sink) throws IOException {
         Source source = null;
         try {
-          source = Okio.source(is);
+          source = Okio.source(inputStream);
           sink.writeAll(source);
         } finally {
-          Util.closeQuietly(source);
+            try {
+                inputStream.reset();
+            } catch (IOException e) {
+                // reset might not be supported. do nothing.
+            }
+            Util.closeQuietly(source);
         }
       }
     };
