diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
index a456b8fdf0..8371a81314 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
@@ -781,7 +781,13 @@ class MockWebServer : ExternalResource(), Closeable {
     val streams = object : RealWebSocket.Streams(false, source, sink) {
       override fun close() = connectionClose.countDown()
     }
-    val webSocket = RealWebSocket(fancyRequest, response.webSocketListener!!, SecureRandom(), 0)
+    val webSocket = RealWebSocket(
+        taskRunner = taskRunner,
+        originalRequest = fancyRequest,
+        listener = response.webSocketListener!!,
+        random = SecureRandom(),
+        pingIntervalMillis = 0
+    )
     response.webSocketListener!!.onOpen(webSocket, fancyResponse)
     val name = "MockWebServer WebSocket ${request.path!!}"
     webSocket.initReaderAndWriter(name, streams)
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.kt b/okhttp/src/main/java/okhttp3/OkHttpClient.kt
index 009f303cf9..ffc23c8013 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.kt
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt
@@ -19,6 +19,7 @@ import okhttp3.Protocol.HTTP_1_1
 import okhttp3.Protocol.HTTP_2
 import okhttp3.internal.asFactory
 import okhttp3.internal.checkDuration
+import okhttp3.internal.concurrent.TaskRunner
 import okhttp3.internal.immutableListOf
 import okhttp3.internal.platform.Platform
 import okhttp3.internal.proxy.NullProxySelector
@@ -244,7 +245,13 @@ open class OkHttpClient internal constructor(
 
   /** Uses [request] to connect a new web socket. */
   override fun newWebSocket(request: Request, listener: WebSocketListener): WebSocket {
-    val webSocket = RealWebSocket(request, listener, Random(), pingIntervalMillis.toLong())
+    val webSocket = RealWebSocket(
+        TaskRunner.INSTANCE,
+        request,
+        listener,
+        Random(),
+        pingIntervalMillis.toLong()
+    )
     webSocket.connect(this)
     return webSocket
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
index d1cf7ca9d6..65d4c7d6e4 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
@@ -433,7 +433,7 @@ class Http2Connection internal constructor(builder: Builder) : Closeable {
 
   /**
    * Closes this connection. This cancels all open streams and unanswered pings. It closes the
-   * underlying input and output streams and shuts down internal executor services.
+   * underlying input and output streams and shuts down internal executor services and task queues.
    */
   override fun close() {
     close(ErrorCode.NO_ERROR, ErrorCode.CANCEL, null)
@@ -687,7 +687,7 @@ class Http2Connection internal constructor(builder: Builder) : Closeable {
      *
      * Since we can't ACK settings on the current reader thread (the reader thread can't write) we
      * execute all peer settings logic on the writer thread. This relies on the fact that the
-     * writer executor won't reorder tasks; otherwise settings could be applied in the opposite
+     * writer task queue won't reorder tasks; otherwise settings could be applied in the opposite
      * order than received.
      */
     fun applyAndAckSettings(clearPrevious: Boolean, settings: Settings) {
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.kt b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.kt
index c7feccef49..4c29d5233d 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.kt
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.kt
@@ -26,8 +26,9 @@ import okhttp3.Response
 import okhttp3.WebSocket
 import okhttp3.WebSocketListener
 import okhttp3.internal.closeQuietly
+import okhttp3.internal.concurrent.Task
+import okhttp3.internal.concurrent.TaskRunner
 import okhttp3.internal.connection.Exchange
-import okhttp3.internal.threadFactory
 import okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY
 import okhttp3.internal.ws.WebSocketProtocol.CLOSE_MESSAGE_MAX
 import okhttp3.internal.ws.WebSocketProtocol.OPCODE_BINARY
@@ -45,13 +46,11 @@ import java.net.ProtocolException
 import java.net.SocketTimeoutException
 import java.util.ArrayDeque
 import java.util.Random
-import java.util.concurrent.ScheduledExecutorService
-import java.util.concurrent.ScheduledFuture
-import java.util.concurrent.ScheduledThreadPoolExecutor
 import java.util.concurrent.TimeUnit
 import java.util.concurrent.TimeUnit.MILLISECONDS
 
 class RealWebSocket(
+  taskRunner: TaskRunner,
   /** The application's original request unadulterated by web socket headers. */
   private val originalRequest: Request,
   internal val listener: WebSocketListener,
@@ -63,8 +62,8 @@ class RealWebSocket(
   /** Non-null for client web sockets. These can be canceled. */
   private var call: Call? = null
 
-  /** This runnable processes the outgoing queues. Call [runWriter] to after enqueueing. */
-  private val writerRunnable: Runnable
+  /** This task processes the outgoing queues. Call [runWriter] to after enqueueing. */
+  private val writerTask: Task
 
   /** Null until this web socket is connected. Only accessed by the reader thread. */
   private var reader: WebSocketReader? = null
@@ -74,8 +73,8 @@ class RealWebSocket(
   /** Null until this web socket is connected. Note that messages may be enqueued before that. */
   private var writer: WebSocketWriter? = null
 
-  /** Null until this web socket is connected. Used for writes, pings, and close timeouts. */
-  private var executor: ScheduledExecutorService? = null
+  /** Used for writes, pings, and close timeouts. */
+  private var taskQueue = taskRunner.newQueue("OkHttp WebSocket ${originalRequest.url.redact()}")
 
   /**
    * The streams held by this web socket. This is non-null until all incoming messages have been
@@ -96,12 +95,6 @@ class RealWebSocket(
   /** True if we've enqueued a close frame. No further message frames will be enqueued. */
   private var enqueuedClose = false
 
-  /**
-   * When executed this will cancel this web socket. This future itself should be canceled if that
-   * is unnecessary because the web socket is already closed or canceled.
-   */
-  private var cancelFuture: ScheduledFuture<*>? = null
-
   /** The close code from the peer, or -1 if this web socket has not yet read a close frame. */
   private var receivedCloseCode = -1
 
@@ -129,13 +122,17 @@ class RealWebSocket(
     }
 
     this.key = ByteArray(16).apply { random.nextBytes(this) }.toByteString().base64()
-    this.writerRunnable = Runnable {
-      try {
-        while (writeOneFrame()) {
+    this.writerTask = object : Task("${taskQueue.owner} Writer") {
+      override fun runOnce(): Long {
+        try {
+          if (writeOneFrame()) return 0L
+        } catch (e: IOException) {
+          failWebSocket(e, null)
         }
-      } catch (e: IOException) {
-        failWebSocket(e, null)
+        return -1L
       }
+
+      override fun tryCancel() = true
     }
   }
 
@@ -226,10 +223,9 @@ class RealWebSocket(
     synchronized(this) {
       this.streams = streams
       this.writer = WebSocketWriter(streams.client, streams.sink, random)
-      this.executor = ScheduledThreadPoolExecutor(1, threadFactory(name, false))
       if (pingIntervalMillis != 0L) {
-        executor!!.scheduleAtFixedRate(
-            PingRunnable(), pingIntervalMillis, pingIntervalMillis, MILLISECONDS)
+        val pingIntervalNanos = MILLISECONDS.toNanos(pingIntervalMillis)
+        taskQueue.schedule(PingTask(pingIntervalNanos), pingIntervalNanos)
       }
       if (messageAndCloseQueue.isNotEmpty()) {
         runWriter() // Send messages that were enqueued before we were connected.
@@ -265,18 +261,15 @@ class RealWebSocket(
 
   /** For testing: wait until the web socket's executor has terminated. */
   @Throws(InterruptedException::class)
-  fun awaitTermination(timeout: Int, timeUnit: TimeUnit) {
-    executor!!.awaitTermination(timeout.toLong(), timeUnit)
+  fun awaitTermination(timeout: Long, timeUnit: TimeUnit) {
+    taskQueue.awaitIdle(timeUnit.toNanos(timeout))
   }
 
   /** For testing: force this web socket to release its threads. */
   @Throws(InterruptedException::class)
   fun tearDown() {
-    if (cancelFuture != null) {
-      cancelFuture!!.cancel(false)
-    }
-    executor!!.shutdown()
-    executor!!.awaitTermination(10, TimeUnit.SECONDS)
+    taskQueue.shutdown()
+    taskQueue.awaitIdle(TimeUnit.SECONDS.toNanos(10L))
   }
 
   @Synchronized fun sentPingCount(): Int = sentPingCount
@@ -321,8 +314,7 @@ class RealWebSocket(
       if (enqueuedClose && messageAndCloseQueue.isEmpty()) {
         toClose = this.streams
         this.streams = null
-        if (cancelFuture != null) cancelFuture!!.cancel(false)
-        this.executor!!.shutdown()
+        this.taskQueue.shutdown()
       }
     }
 
@@ -405,7 +397,7 @@ class RealWebSocket(
 
   private fun runWriter() {
     assert(Thread.holdsLock(this))
-    executor?.execute(writerRunnable)
+    taskQueue.trySchedule(writerTask)
   }
 
   /**
@@ -445,11 +437,12 @@ class RealWebSocket(
           if (receivedCloseCode != -1) {
             streamsToClose = this.streams
             this.streams = null
-            this.executor!!.shutdown()
+            this.taskQueue.shutdown()
           } else {
             // When we request a graceful close also schedule a cancel of the web socket.
-            cancelFuture = executor!!.schedule(CancelRunnable(),
-                (messageOrClose as Close).cancelAfterCloseMillis, MILLISECONDS)
+            val cancelAfterCloseNanos =
+                MILLISECONDS.toNanos((messageOrClose as Close).cancelAfterCloseMillis)
+            taskQueue.schedule(CancelRunnable(), cancelAfterCloseNanos)
           }
         } else if (messageOrClose == null) {
           return false // The queue is exhausted.
@@ -487,10 +480,13 @@ class RealWebSocket(
     }
   }
 
-  private inner class PingRunnable : Runnable {
-    override fun run() {
+  private inner class PingTask(val delayNanos: Long) : Task("${taskQueue.owner} Ping") {
+    override fun runOnce(): Long {
       writePingFrame()
+      return delayNanos
     }
+
+    override fun tryCancel() = true
   }
 
   internal fun writePingFrame() {
@@ -524,8 +520,7 @@ class RealWebSocket(
       failed = true
       streamsToClose = this.streams
       this.streams = null
-      cancelFuture?.cancel(false)
-      executor?.shutdown()
+      taskQueue.shutdown()
     }
 
     try {
@@ -552,10 +547,13 @@ class RealWebSocket(
     val sink: BufferedSink
   ) : Closeable
 
-  internal inner class CancelRunnable : Runnable {
-    override fun run() {
+  internal inner class CancelRunnable : Task("${taskQueue.owner} Cancel") {
+    override fun runOnce(): Long {
       cancel()
+      return -1L
     }
+
+    override fun tryCancel() = true
   }
 
   companion object {
diff --git a/okhttp/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java b/okhttp/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
index 6fcf0f1da2..bbabd9ddae 100644
--- a/okhttp/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
@@ -24,6 +24,7 @@
 import okhttp3.Protocol;
 import okhttp3.Request;
 import okhttp3.Response;
+import okhttp3.internal.concurrent.TaskRunner;
 import okio.ByteString;
 import okio.Okio;
 import okio.Pipe;
@@ -372,7 +373,8 @@ public void initWebSocket(Random random, int pingIntervalMillis) throws IOExcept
           .request(new Request.Builder().url(url).build())
           .protocol(Protocol.HTTP_1_1)
           .build();
-      webSocket = new RealWebSocket(response.request(), listener, random, pingIntervalMillis);
+      webSocket = new RealWebSocket(
+          TaskRunner.INSTANCE, response.request(), listener, random, pingIntervalMillis);
       webSocket.initReaderAndWriter(name, this);
     }
 
diff --git a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
index 8d7d81634a..52ae73969f 100644
--- a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
@@ -36,6 +36,7 @@
 import okhttp3.TestLogHandler;
 import okhttp3.WebSocket;
 import okhttp3.WebSocketListener;
+import okhttp3.internal.concurrent.TaskRunner;
 import okhttp3.mockwebserver.Dispatcher;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
@@ -798,7 +799,7 @@ private RealWebSocket newWebSocket() {
 
   private RealWebSocket newWebSocket(Request request) {
     RealWebSocket webSocket = new RealWebSocket(
-        request, clientListener, random, client.pingIntervalMillis());
+        TaskRunner.INSTANCE, request, clientListener, random, client.pingIntervalMillis());
     webSocket.connect(client);
     return webSocket;
   }
