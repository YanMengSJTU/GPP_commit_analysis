diff --git a/.circleci/config.yml b/.circleci/config.yml
index 9f7d51ff11..ad6251d0bf 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -203,6 +203,20 @@ jobs:
       - runtests:
           platform: conscrypt
 
+  testcorretto:
+    docker:
+      - image: circleci/openjdk:11.0.4-jdk-stretch
+
+    environment:
+      JVM_OPTS: -Xmx1g
+      TERM: dumb
+
+    steps:
+      - checkout
+
+      - runtests:
+          platform: corretto
+
 workflows:
   version: 2
   commit:
@@ -242,6 +256,10 @@ workflows:
           filters:
             branches:
               only: master
+      - testcorretto:
+          filters:
+            branches:
+              only: master
   nightly:
     triggers:
       - schedule:
@@ -272,3 +290,6 @@ workflows:
       - testconscrypt:
           requires:
             - compile
+      - testcorretto:
+          requires:
+            - compile
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index e490a1cbfa..5b44841a9e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -8,6 +8,7 @@ buildscript {
       'brotli': '0.1.2',
       'checkstyle': '8.15',
       'conscrypt': '2.2.1',
+      'corretto': '1.1.1',
       'findbugs': '3.0.2',
       'guava': '27.0.1-jre',
       'java': '1.8',
@@ -30,6 +31,7 @@ buildscript {
       'bouncycastle': "org.bouncycastle:bcprov-jdk15on:${versions.bouncycastle}",
       'brotli': "org.brotli:dec:${versions.brotli}",
       'conscrypt': "org.conscrypt:conscrypt-openjdk-uber:${versions.conscrypt}",
+      'corretto': "software.amazon.cryptools:AmazonCorrettoCryptoProvider:${versions.corretto}:linux-x86_64",
       'guava': "com.google.guava:guava:${versions.guava}",
       'jnrUnixsocket': "com.github.jnr:jnr-unixsocket:${versions.jnrUnixsocket}",
       'jsoup': "org.jsoup:jsoup:${versions.jsoup}",
diff --git a/okhttp-testing-support/build.gradle b/okhttp-testing-support/build.gradle
index 3efe882543..9ef8214290 100644
--- a/okhttp-testing-support/build.gradle
+++ b/okhttp-testing-support/build.gradle
@@ -3,6 +3,7 @@ dependencies {
   api deps.junit
   api deps.assertj
   api deps.conscrypt
+  api deps.corretto
   api deps.openjsse
   
   compileOnly deps.jsr305
diff --git a/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt b/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
index 49f98011c5..e29a2cbfe5 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
+++ b/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
@@ -19,6 +19,8 @@ import okhttp3.internal.platform.ConscryptPlatform
 import okhttp3.internal.platform.Jdk8WithJettyBootPlatform
 import okhttp3.internal.platform.Jdk9Platform
 import okhttp3.internal.platform.OpenJSSEPlatform
+import com.amazon.corretto.crypto.provider.AmazonCorrettoCryptoProvider
+import com.amazon.corretto.crypto.provider.SelfTestStatus
 import okhttp3.internal.platform.Platform
 import org.conscrypt.Conscrypt
 import org.hamcrest.BaseMatcher
@@ -99,6 +101,10 @@ open class PlatformRule @JvmOverloads constructor(
     expectFailure(platformMatches(CONSCRYPT_PROPERTY))
   }
 
+  fun expectFailureOnCorrettoPlatform() {
+    expectFailure(platformMatches(CORRETTO_PROPERTY))
+  }
+
   fun expectFailureOnOpenJSSEPlatform() {
     expectFailure(platformMatches(OPENJSSE_PROPERTY))
   }
@@ -194,6 +200,11 @@ open class PlatformRule @JvmOverloads constructor(
         JDK8_ALPN_PROPERTY))
   }
 
+  fun assumeCorretto() {
+    assumeThat(getPlatformSystemProperty(), equalTo(
+        CORRETTO_PROPERTY))
+  }
+
   fun assumeHttp2Support() {
     assumeThat(getPlatformSystemProperty(), not(
         JDK8_PROPERTY))
@@ -224,6 +235,11 @@ open class PlatformRule @JvmOverloads constructor(
         OPENJSSE_PROPERTY))
   }
 
+  fun assumeNotCorretto() {
+    assumeThat(getPlatformSystemProperty(), not(
+        CORRETTO_PROPERTY))
+  }
+
   fun assumeNotHttp2Support() {
     assumeThat(getPlatformSystemProperty(), equalTo(
         JDK8_PROPERTY))
@@ -236,6 +252,7 @@ open class PlatformRule @JvmOverloads constructor(
   companion object {
     const val PROPERTY_NAME = "okhttp.platform"
     const val CONSCRYPT_PROPERTY = "conscrypt"
+    const val CORRETTO_PROPERTY = "corretto"
     const val JDK9_PROPERTY = "jdk9"
     const val JDK8_ALPN_PROPERTY = "jdk8alpn"
     const val JDK8_PROPERTY = "jdk8"
@@ -263,6 +280,10 @@ open class PlatformRule @JvmOverloads constructor(
         }
 
         Security.insertProviderAt(OpenJSSE(), 1)
+      } else if (getPlatformSystemProperty() == CORRETTO_PROPERTY) {
+        AmazonCorrettoCryptoProvider.install()
+
+        AmazonCorrettoCryptoProvider.INSTANCE.assertHealthy()
       }
 
       Platform.resetForTests()
@@ -278,7 +299,9 @@ open class PlatformRule @JvmOverloads constructor(
           is ConscryptPlatform -> CONSCRYPT_PROPERTY
           is OpenJSSEPlatform -> OPENJSSE_PROPERTY
           is Jdk8WithJettyBootPlatform -> CONSCRYPT_PROPERTY
-          is Jdk9Platform -> JDK9_PROPERTY
+          is Jdk9Platform -> {
+            if (isCorrettoInstalled) CORRETTO_PROPERTY else JDK9_PROPERTY
+          }
           else -> JDK8_PROPERTY
         }
       }
@@ -308,5 +331,18 @@ open class PlatformRule @JvmOverloads constructor(
     } catch (cnfe: ClassNotFoundException) {
       false
     }
+
+    val isCorrettoSupported: Boolean = try {
+      // Trigger an early exception over a fatal error, prefer a RuntimeException over Error.
+      Class.forName("com.amazon.corretto.crypto.provider.AmazonCorrettoCryptoProvider")
+
+      AmazonCorrettoCryptoProvider.INSTANCE.loadingError == null &&
+          AmazonCorrettoCryptoProvider.INSTANCE.runSelfTests() == SelfTestStatus.PASSED
+    } catch (e: ClassNotFoundException) {
+      false
+    }
+
+    val isCorrettoInstalled: Boolean =
+        isCorrettoSupported && Security.getProviders().first().name == AmazonCorrettoCryptoProvider.PROVIDER_NAME
   }
 }
\ No newline at end of file
diff --git a/okhttp/src/test/java/okhttp3/CorrettoTest.kt b/okhttp/src/test/java/okhttp3/CorrettoTest.kt
new file mode 100644
index 0000000000..0a62887ed4
--- /dev/null
+++ b/okhttp/src/test/java/okhttp3/CorrettoTest.kt
@@ -0,0 +1,73 @@
+/*
+ * Copyright (C) 2018 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3
+
+import okhttp3.TestUtil.assumeNetwork
+import okhttp3.testing.PlatformRule
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Before
+import org.junit.Ignore
+import org.junit.Rule
+import org.junit.Test
+
+class CorrettoTest {
+  @Suppress("RedundantVisibilityModifier")
+  @JvmField
+  @Rule public val platform = PlatformRule.conscrypt()
+
+  @JvmField @Rule val clientTestRule = OkHttpClientTestRule()
+
+  private val client = clientTestRule.newClient()
+
+  @Before fun setUp() {
+    platform.assumeCorretto()
+  }
+
+  @Test
+  @Ignore
+  fun testMozilla() {
+    assumeNetwork()
+
+    val request = Request.Builder().url("https://mozilla.org/robots.txt").build()
+
+    client.newCall(request).execute().use {
+      assertThat(it.protocol).isEqualTo(Protocol.HTTP_2)
+      assertThat(it.handshake!!.tlsVersion).isEqualTo(TlsVersion.TLS_1_3)
+    }
+  }
+
+  @Test
+  @Ignore
+  fun testGoogle() {
+    assumeNetwork()
+
+    val request = Request.Builder().url("https://google.com/robots.txt").build()
+
+    client.newCall(request).execute().use {
+      assertThat(it.protocol).isEqualTo(Protocol.HTTP_2)
+      if (it.handshake!!.tlsVersion != TlsVersion.TLS_1_3) {
+        System.err.println("Flaky TLSv1.3 with google")
+//    assertThat(it.handshake()!!.tlsVersion).isEqualTo(TlsVersion.TLS_1_3)
+      }
+    }
+  }
+
+  @Test
+  fun testIfSupported() {
+    assertThat(PlatformRule.isCorrettoSupported).isTrue()
+    assertThat(PlatformRule.isCorrettoInstalled).isTrue()
+  }
+}
diff --git a/okhttp/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java b/okhttp/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
index b9223ff838..17bf30c214 100644
--- a/okhttp/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java
@@ -181,6 +181,7 @@
   @Test public void unrelatedPinnedLeafCertificateInChain() throws Exception {
     // https://github.com/square/okhttp/issues/4729
     platform.expectFailureOnConscryptPlatform();
+    platform.expectFailureOnCorrettoPlatform();
 
     // Start with a trusted root CA certificate.
     HeldCertificate rootCa = new HeldCertificate.Builder()
@@ -259,6 +260,7 @@
   @Test public void unrelatedPinnedIntermediateCertificateInChain() throws Exception {
     // https://github.com/square/okhttp/issues/4729
     platform.expectFailureOnConscryptPlatform();
+    platform.expectFailureOnCorrettoPlatform();
 
     // Start with two root CA certificates, one is good and the other is compromised.
     HeldCertificate rootCa = new HeldCertificate.Builder()
