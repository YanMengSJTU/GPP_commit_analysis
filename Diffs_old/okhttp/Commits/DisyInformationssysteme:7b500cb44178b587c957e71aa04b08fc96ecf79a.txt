diff --git a/src/main/java/net/disy/commons/web/WebUrl.java b/src/main/java/net/disy/commons/web/WebUrl.java
index 6279a9adb3..5d1f394104 100644
--- a/src/main/java/net/disy/commons/web/WebUrl.java
+++ b/src/main/java/net/disy/commons/web/WebUrl.java
@@ -864,7 +864,7 @@ public String redact() {
   }
 
   public Builder newBuilder() {
-    Builder result = new Builder();
+    Builder result = builder();
     result.scheme = scheme;
     result.encodedUsername = encodedUsername();
     result.encodedPassword = encodedPassword();
@@ -884,7 +884,7 @@ public Builder newBuilder() {
    */
   public /*@Nullable*/ Builder newBuilder(String link) {
     try {
-      return new Builder().parse(this, link);
+      return builder().parse(this, link);
     } catch (IllegalArgumentException ignored) {
       return null;
     }
@@ -908,7 +908,7 @@ public Builder newBuilder() {
    * @throws IllegalArgumentException If {@code url} is not a well-formed HTTP or HTTPS URL.
    */
   public static WebUrl get(String url) {
-    return new Builder().parse(null, url).build();
+    return builder().parse(null, url).build();
   }
 
   /**
@@ -927,6 +927,10 @@ public static WebUrl get(String url) {
     return parse(uri.toString());
   }
 
+  public static Builder builder() {
+    return new Builder();
+  }
+
   @Override public boolean equals(/*@Nullable*/ Object other) {
     return other instanceof WebUrl && ((WebUrl) other).url.equals(url);
   }
@@ -973,7 +977,7 @@ public static WebUrl get(String url) {
     /*@Nullable*/ List<String> encodedQueryNamesAndValues;
     /*@Nullable*/ String encodedFragment;
 
-    public Builder() {
+    private Builder() {
       encodedPathSegments.add(""); // The default path is '/' which needs a trailing space.
     }
 
diff --git a/src/test/java/net/disy/commons/web/WebUrlTest.java b/src/test/java/net/disy/commons/web/WebUrlTest.java
index b0decebd69..9aaa83e3a2 100644
--- a/src/test/java/net/disy/commons/web/WebUrlTest.java
+++ b/src/test/java/net/disy/commons/web/WebUrlTest.java
@@ -33,7 +33,6 @@
 
 import net.disy.commons.web.UrlComponentEncodingTester.Component;
 import net.disy.commons.web.UrlComponentEncodingTester.Encoding;
-import net.disy.commons.web.WebUrl.Builder;
 
 @RunWith(Parameterized.class)
 public final class WebUrlTest {
@@ -809,13 +808,13 @@ WebUrl parse(String url) {
 
   @Test public void incompleteUrlComposition() throws Exception {
     try {
-      new Builder().scheme("http").build();
+      WebUrl.builder().scheme("http").build();
       fail();
     } catch (IllegalStateException expected) {
       assertThat(expected.getMessage()).isEqualTo("host == null");
     }
     try {
-      new Builder().host("host").build();
+      WebUrl.builder().host("host").build();
       fail();
     } catch (IllegalStateException expected) {
       assertThat(expected.getMessage()).isEqualTo("scheme == null");
@@ -828,17 +827,17 @@ WebUrl parse(String url) {
   }
 
   @Test public void incompleteBuilderToString() {
-    assertThat(new Builder().scheme("https").encodedPath("/path").toString()).isEqualTo(
+    assertThat(WebUrl.builder().scheme("https").encodedPath("/path").toString()).isEqualTo(
         "https:///path");
-    assertThat(new Builder().host("host.com").encodedPath("/path").toString()).isEqualTo(
+    assertThat(WebUrl.builder().host("host.com").encodedPath("/path").toString()).isEqualTo(
         "//host.com/path");
     assertThat(
-        (Object) new Builder().host("host.com").encodedPath("/path").port(8080).toString()).isEqualTo(
+        (Object) WebUrl.builder().host("host.com").encodedPath("/path").port(8080).toString()).isEqualTo(
         "//host.com:8080/path");
   }
 
   @Test public void minimalUrlComposition() throws Exception {
-    WebUrl url = new Builder().scheme("http").host("host").build();
+    WebUrl url = WebUrl.builder().scheme("http").host("host").build();
     assertThat(url.toString()).isEqualTo("http://host/");
     assertThat(url.scheme()).isEqualTo("http");
     assertThat(url.username()).isEqualTo("");
@@ -851,7 +850,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void fullUrlComposition() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .username("username")
         .password("password")
@@ -891,7 +890,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void composeEncodesWhitespace() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .username("a\r\n\f\t b")
         .password("c\r\n\f\t d")
@@ -910,7 +909,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void composeFromUnencodedComponents() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .username("a:\u0001@/\\?#%b")
         .password("c:\u0001@/\\?#%d")
@@ -937,7 +936,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void composeFromEncodedComponents() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .encodedUsername("a:\u0001@/\\?#%25b")
         .encodedPassword("c:\u0001@/\\?#%25d")
@@ -964,7 +963,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void composeWithEncodedPath() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .encodedPath("/a%2Fb/c")
@@ -975,7 +974,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void composeMixingPathSegments() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .encodedPath("/a%2fb/c")
@@ -1182,7 +1181,7 @@ WebUrl parse(String url) {
 
   @Test public void setPathSegmentOutOfBounds() throws Exception {
     try {
-      new Builder().setPathSegment(1, "a");
+      WebUrl.builder().setPathSegment(1, "a");
       fail();
     } catch (IndexOutOfBoundsException expected) {
     }
@@ -1238,7 +1237,7 @@ WebUrl parse(String url) {
 
   @Test public void setEncodedPathSegmentOutOfBounds() throws Exception {
     try {
-      new Builder().setEncodedPathSegment(1, "a");
+      WebUrl.builder().setEncodedPathSegment(1, "a");
       fail();
     } catch (IndexOutOfBoundsException expected) {
     }
@@ -1265,7 +1264,7 @@ WebUrl parse(String url) {
 
   @Test public void removePathSegmentOutOfBounds() throws Exception {
     try {
-      new Builder().removePathSegment(1);
+      WebUrl.builder().removePathSegment(1);
       fail();
     } catch (IndexOutOfBoundsException expected) {
     }
@@ -1292,7 +1291,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void toUriWithUsernameNoPassword() throws Exception {
-    WebUrl httpUrl = new Builder()
+    WebUrl httpUrl = WebUrl.builder()
         .scheme("http")
         .username("user")
         .host("host")
@@ -1302,7 +1301,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void toUriUsernameSpecialCharacters() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .username("=[]:;\"~|?#@^/$%*")
@@ -1314,7 +1313,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void toUriPasswordSpecialCharacters() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .username("user")
@@ -1327,7 +1326,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void toUriPathSpecialCharacters() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .addPathSegment("=[]:;\"~|?#@^/$%*")
@@ -1338,7 +1337,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void toUriQueryParameterNameSpecialCharacters() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .addQueryParameter("=[]:;\"~|?#@^/$%*", "a")
@@ -1351,7 +1350,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void toUriQueryParameterValueSpecialCharacters() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .addQueryParameter("a", "=[]:;\"~|?#@^/$%*")
@@ -1364,7 +1363,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void toUriQueryValueSpecialCharacters() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .query("=[]:;\"~|?#@^/$%*")
@@ -1374,7 +1373,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void queryCharactersEncodedWhenComposed() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .addQueryParameter("a", "!$(),/:;?@[]\\^`{|}~")
@@ -1389,7 +1388,7 @@ WebUrl parse(String url) {
    * We retain the encoded (or non-encoded) state of the input.
    */
   @Test public void queryCharactersNotReencodedWhenComposedWithAddEncoded() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .addEncodedQueryParameter("a", "!$(),/:;?@[]\\^`{|}~")
@@ -1409,7 +1408,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void toUriFragmentSpecialCharacters() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .host("host")
         .fragment("=[]:;\"~|?#@^/$%*")
@@ -1659,7 +1658,7 @@ WebUrl parse(String url) {
   }
 
   @Test public void roundTripBuilder() throws Exception {
-    WebUrl url = new Builder()
+    WebUrl url = WebUrl.builder()
         .scheme("http")
         .username("%")
         .password("%")
