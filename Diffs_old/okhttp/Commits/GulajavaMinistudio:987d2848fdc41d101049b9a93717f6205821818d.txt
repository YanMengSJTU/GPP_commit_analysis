diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
index d2ea1a2c66..233142b7a3 100644
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
@@ -164,25 +164,25 @@ class HttpLoggingInterceptor @JvmOverloads constructor(
     logger.log(requestStartMessage)
 
     if (logHeaders) {
+      val headers = request.headers
+
       if (requestBody != null) {
-        // Request body headers are only present when installed as a network interceptor. Force
-        // them to be included (when available) so there values are known.
+        // Request body headers are only present when installed as a network interceptor. When not
+        // already present, force them to be included (if available) so their values are known.
         requestBody.contentType()?.let {
-          logger.log("Content-Type: $it")
+          if (headers["Content-Type"] == null) {
+            logger.log("Content-Type: $it")
+          }
         }
         if (requestBody.contentLength() != -1L) {
-          logger.log("Content-Length: ${requestBody.contentLength()}")
+          if (headers["Content-Length"] == null) {
+            logger.log("Content-Length: ${requestBody.contentLength()}")
+          }
         }
       }
 
-      val headers = request.headers
       for (i in 0 until headers.size) {
-        val name = headers.name(i)
-        // Skip headers from the request body as they are explicitly logged above.
-        if (!"Content-Type".equals(name, ignoreCase = true) &&
-            !"Content-Length".equals(name, ignoreCase = true)) {
-          logHeader(headers, i)
-        }
+        logHeader(headers, i)
       }
 
       if (!logBody || requestBody == null) {
diff --git a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
index e9a7bce269..48e8a50e9e 100644
--- a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
@@ -23,6 +23,7 @@
 import javax.annotation.Nullable;
 import javax.net.ssl.HostnameVerifier;
 import okhttp3.HttpUrl;
+import okhttp3.Interceptor;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
 import okhttp3.testing.PlatformRule;
@@ -69,6 +70,8 @@
   private final HttpLoggingInterceptor applicationInterceptor =
       new HttpLoggingInterceptor(applicationLogs);
 
+  private Interceptor extraNetworkInterceptor = null;
+
   private void setLevel(Level level) {
     networkInterceptor.setLevel(level);
     applicationInterceptor.setLevel(level);
@@ -76,6 +79,9 @@ private void setLevel(Level level) {
 
   @Before public void setUp() {
     client = new OkHttpClient.Builder()
+        .addNetworkInterceptor(chain -> extraNetworkInterceptor != null
+            ? extraNetworkInterceptor.intercept(chain)
+            : chain.proceed(chain.request()))
         .addNetworkInterceptor(networkInterceptor)
         .addInterceptor(applicationInterceptor)
         .sslSocketFactory(
@@ -325,6 +331,45 @@ private void setLevel(Level level) {
         .assertNoMoreLogs();
   }
 
+  @Test public void headersPostWithHeaderOverrides() throws IOException {
+    setLevel(Level.HEADERS);
+
+    extraNetworkInterceptor = chain -> chain.proceed(chain.request()
+        .newBuilder()
+        .header("Content-Length", "2")
+        .header("Content-Type", "text/plain-ish")
+        .build());
+
+    server.enqueue(new MockResponse());
+    client.newCall(request()
+        .post(RequestBody.create("Hi?", PLAIN))
+        .build()).execute();
+
+    applicationLogs
+        .assertLogEqual("--> POST " + url)
+        .assertLogEqual("Content-Type: text/plain; charset=utf-8")
+        .assertLogEqual("Content-Length: 3")
+        .assertLogEqual("--> END POST")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
+        .assertLogEqual("Content-Length: 0")
+        .assertLogEqual("<-- END HTTP")
+        .assertNoMoreLogs();
+
+    networkLogs
+        .assertLogEqual("--> POST " + url + " http/1.1")
+        .assertLogEqual("Host: " + host)
+        .assertLogEqual("Connection: Keep-Alive")
+        .assertLogEqual("Accept-Encoding: gzip")
+        .assertLogMatch("User-Agent: okhttp/.+")
+        .assertLogEqual("Content-Length: 2")
+        .assertLogEqual("Content-Type: text/plain-ish")
+        .assertLogEqual("--> END POST")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
+        .assertLogEqual("Content-Length: 0")
+        .assertLogEqual("<-- END HTTP")
+        .assertNoMoreLogs();
+  }
+
   @Test public void headersResponseBody() throws IOException {
     setLevel(Level.HEADERS);
 
