diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java
index 159d37b2c9..1395e2bf55 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java
@@ -33,11 +33,12 @@
 import static org.junit.Assert.fail;
 
 public final class RealWebSocketTest {
-  // NOTE: Types are named 'client' and 'server' for cognitive simplicity. This differentiation has
+  // NOTE: Fields are named 'client' and 'server' for cognitive simplicity. This differentiation has
   // zero effect on the behavior of the WebSocket API which is why tests are only written once
   // from the perspective of a single peer.
 
   private RealWebSocket client;
+  private boolean clientConnectionCloseThrows;
   private boolean clientConnectionClosed;
   private final Buffer client2Server = new Buffer();
   private final WebSocketRecorder clientListener = new WebSocketRecorder();
@@ -48,15 +49,16 @@
 
   @Before public void setUp() {
     Random random = new Random(0);
-
-    client = new RealWebSocket(true, server2client, client2Server, random, clientListener,
-        "http://example.com/websocket") {
+    String url = "http://example.com/websocket";
+    client = new RealWebSocket(true, server2client, client2Server, random, clientListener, url) {
       @Override protected void closeConnection() throws IOException {
         clientConnectionClosed = true;
+        if (clientConnectionCloseThrows) {
+          throw new IOException("Oops!");
+        }
       }
     };
-    server = new RealWebSocket(false, client2Server, server2client, random, serverListener,
-        "http://example.com/websocket") {
+    server = new RealWebSocket(false, client2Server, server2client, random, serverListener, url) {
       @Override protected void closeConnection() throws IOException {
       }
     };
@@ -277,4 +279,16 @@
     server.readMessage();
     serverListener.assertClose(1000, "Hello!");
   }
+
+  @Test public void peerConnectionCloseThrowingDoesNotPropagate() throws IOException {
+    clientConnectionCloseThrows = true;
+
+    server.close(1000, "Bye!");
+    client.readMessage();
+    clientListener.assertClose(1000, "Bye!");
+    assertTrue(clientConnectionClosed);
+
+    server.readMessage();
+    serverListener.assertClose(1000, "Bye!");
+  }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java
index 7fa055cb7c..75ab608927 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java
@@ -75,7 +75,7 @@ public RealWebSocket(boolean isClient, BufferedSource source, BufferedSink sink,
         listener.onPong(buffer);
       }
 
-      @Override public void onClose(int code, String reason) throws IOException {
+      @Override public void onClose(int code, String reason) {
         peerClose(code, reason);
       }
     });
@@ -135,7 +135,7 @@ public void sendPong(Buffer payload) throws IOException {
   }
 
   /** Called on the reader thread when a close frame is encountered. */
-  private void peerClose(int code, String reason) throws IOException {
+  private void peerClose(int code, String reason) {
     boolean writeCloseResponse;
     synchronized (closeLock) {
       readerSentClose = true;
@@ -145,11 +145,17 @@ private void peerClose(int code, String reason) throws IOException {
     }
 
     if (writeCloseResponse) {
-      // The reader thread will read no more frames so use it to send the response.
-      writer.writeClose(code, reason);
+      try {
+        // The reader thread will read no more frames so use it to send the response.
+        writer.writeClose(code, reason);
+      } catch (IOException ignored) {
+      }
     }
 
-    closeConnection();
+    try {
+      closeConnection();
+    } catch (IOException ignored) {
+    }
 
     listener.onClose(code, reason);
   }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
index 76c77ad375..43592dbebc 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
@@ -53,7 +53,7 @@
     void onMessage(BufferedSource source, PayloadType type) throws IOException;
     void onPing(Buffer buffer);
     void onPong(Buffer buffer);
-    void onClose(int code, String reason) throws IOException;
+    void onClose(int code, String reason);
   }
 
   private final boolean isClient;
