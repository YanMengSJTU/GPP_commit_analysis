diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
index 19003e2922..2359e0ab17 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
@@ -21,7 +21,6 @@
 import com.squareup.okhttp.internal.RecordingOkAuthenticator;
 import com.squareup.okhttp.internal.SingleInetAddressNetwork;
 import com.squareup.okhttp.internal.SslContextBuilder;
-import com.squareup.okhttp.internal.Version;
 import com.squareup.okhttp.mockwebserver.Dispatcher;
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.RecordedRequest;
@@ -1625,7 +1624,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     RecordedRequest recordedRequest = server.takeRequest();
     assertTrue(recordedRequest.getHeader("User-Agent")
-        .matches(Version.userAgent()));
+        .matches(/*Version.userAgent()*/""));
   }
 
   @Test public void setFollowRedirectsFalse() throws Exception {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
index 2c5a2af095..95d4750a18 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/CertificatePinner.java
@@ -29,7 +29,7 @@
 import static java.util.Collections.unmodifiableList;
 
 /**
- * Constrains which certificates are trusted. Pinning certificates defends
+ * Constrains which certificates(约束证书) are trusted. Pinning certificates(固定的证书) defends
  * against attacks on certificate authorities. It also prevents connections
  * through man-in-the-middle certificate authorities either known or unknown to
  * the application's user.
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java
index e3d5936add..c88784dfc9 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionSpec.java
@@ -23,7 +23,7 @@
 
 /**
  * Specifies configuration for the socket connection that HTTP traffic travels through. For {@code
- * https:} URLs, this includes the TLS version and ciphers to use when negotiating a secure
+ * https:} URLs, this includes the TLS version and ciphers（密码\暗号） to use when negotiating（谈判、意思是请求） a secure
  * connection.
  */
 public final class ConnectionSpec {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
index a696c0ca7e..cb57b3c7a6 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
@@ -40,13 +40,13 @@
   /** Executes calls. Created lazily. */
   private ExecutorService executorService;
 
-  /** Ready calls in the order they'll be run. */
+  /** Ready calls in the order they'll be run. 准备阶段的列表 */
   private final Deque<AsyncCall> readyCalls = new ArrayDeque<>();
 
-  /** Running calls. Includes canceled calls that haven't finished yet. */
+  /** Running calls. Includes canceled calls that haven't finished yet. 正在执行阶段的列表 */
   private final Deque<AsyncCall> runningCalls = new ArrayDeque<>();
 
-  /** In-flight synchronous calls. Includes canceled calls that haven't finished yet. */
+  /** In-flight synchronous calls. Includes canceled calls that haven't finished yet.被执行的任务列表 */
   private final Deque<Call> executedCalls = new ArrayDeque<>();
 
   public Dispatcher(ExecutorService executorService) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Interceptor.java b/okhttp/src/main/java/com/squareup/okhttp/Interceptor.java
index 03325be973..7563e96425 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Interceptor.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Interceptor.java
@@ -21,6 +21,7 @@
  * Observes, modifies, and potentially short-circuits requests going out and the corresponding
  * requests coming back in. Typically interceptors will be used to add, remove, or transform headers
  * on the request or response.
+ * 观察，修改以及可能短路的请求输出和响应请求的回来。通常情况下连接器用来添加，移除或者转换请求或者回应的头部信息
  */
 public interface Interceptor {
   Response intercept(Chain chain) throws IOException;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java b/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java
index 52c211eb54..929d2e8b5b 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/RouteDatabase.java
@@ -25,6 +25,8 @@
  * there was a failure attempting to connect to a specific IP address, proxy
  * server or TLS mode, that failure is remembered and alternate routes are
  * preferred.
+ *
+ * 当创建一个新的连接的时候会去检查当前连接失败的黑名单
  */
 public final class RouteDatabase {
   private final Set<Route> failedRoutes = new LinkedHashSet<>();
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index 643fa09e53..82c91d3e43 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -33,7 +33,6 @@
 import com.squareup.okhttp.internal.Internal;
 import com.squareup.okhttp.internal.InternalCache;
 import com.squareup.okhttp.internal.Util;
-import com.squareup.okhttp.internal.Version;
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.net.CookieHandler;
@@ -647,7 +646,7 @@ private Request networkRequest(Request request) throws IOException {
     }
 
     if (request.header("User-Agent") == null) {
-      result.header("User-Agent", Version.userAgent());
+      result.header("User-Agent", /*Version.userAgent()*/"");
     }
 
     return result.build();
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CacheResponse.java b/samples/guide/src/main/java/com/squareup/okhttp/recipes/CacheResponse.java
index 3335ebe668..57d2ede65b 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/CacheResponse.java
+++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/CacheResponse.java
@@ -19,45 +19,53 @@
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.Response;
+
 import java.io.File;
 import java.io.IOException;
+import java.util.logging.Logger;
 
 public final class CacheResponse {
-  private final OkHttpClient client;
+    private static final Logger logger = Logger.getLogger(LoggingInterceptors.class.getName());
+    private final OkHttpClient client;
 
-  public CacheResponse(File cacheDirectory) throws Exception {
-    int cacheSize = 10 * 1024 * 1024; // 10 MiB
-    Cache cache = new Cache(cacheDirectory, cacheSize);
+    public CacheResponse(File cacheDirectory) throws Exception {
+        logger.info(String.format("Cache file path %s", cacheDirectory.getAbsoluteFile()));
+        int cacheSize = 10 * 1024 * 1024; // 10 MiB
+        Cache cache = new Cache(cacheDirectory, cacheSize);
 
-    client = new OkHttpClient();
-    client.setCache(cache);
-  }
+        client = new OkHttpClient();
+        client.setCache(cache);
+    }
 
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build();
+    public void run() throws Exception {
+        Request request = new Request.Builder()
+                .url("http://publicobject.com/helloworld.txt")
+                .build();
 
-    Response response1 = client.newCall(request).execute();
-    if (!response1.isSuccessful()) throw new IOException("Unexpected code " + response1);
+        Response response1 = client.newCall(request).execute();
+        if (!response1.isSuccessful()) {
+            throw new IOException("Unexpected code " + response1);
+        }
 
-    String response1Body = response1.body().string();
-    System.out.println("Response 1 response:          " + response1);
-    System.out.println("Response 1 cache response:    " + response1.cacheResponse());
-    System.out.println("Response 1 network response:  " + response1.networkResponse());
+        String response1Body = response1.body().string();
+        System.out.println("Response 1 response:          " + response1);
+        System.out.println("Response 1 cache response:    " + response1.cacheResponse());
+        System.out.println("Response 1 network response:  " + response1.networkResponse());
 
-    Response response2 = client.newCall(request).execute();
-    if (!response2.isSuccessful()) throw new IOException("Unexpected code " + response2);
+        Response response2 = client.newCall(request).execute();
+        if (!response2.isSuccessful()) {
+            throw new IOException("Unexpected code " + response2);
+        }
 
-    String response2Body = response2.body().string();
-    System.out.println("Response 2 response:          " + response2);
-    System.out.println("Response 2 cache response:    " + response2.cacheResponse());
-    System.out.println("Response 2 network response:  " + response2.networkResponse());
+        String response2Body = response2.body().string();
+        System.out.println("Response 2 response:          " + response2);
+        System.out.println("Response 2 cache response:    " + response2.cacheResponse());
+        System.out.println("Response 2 network response:  " + response2.networkResponse());
 
-    System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));
-  }
+        System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));
+    }
 
-  public static void main(String... args) throws Exception {
-    new CacheResponse(new File("CacheResponse.tmp")).run();
-  }
+    public static void main(String... args) throws Exception {
+        new CacheResponse(new File("CacheResponse.tmp")).run();
+    }
 }
