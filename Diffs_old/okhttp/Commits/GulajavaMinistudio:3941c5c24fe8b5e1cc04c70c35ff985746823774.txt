diff --git a/CHANGELOG.md b/CHANGELOG.md
index 887bbc5e04..5c5aa522fb 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,50 @@
 Change Log
 ==========
 
+## Version 4.2.0
+
+_2019-09-10_
+
+ *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a
+    string containing both a certificate and PKCS #8-encoded private key.
+
+    ```kotlin
+    val heldCertificate = HeldCertificate.decode("""
+        |-----BEGIN CERTIFICATE-----
+        |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl
+        |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx
+        |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h
+        |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD
+        |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw
+        |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF
+        |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT
+        |yyaoEufLKVXhrTQhRfodTeigi4RX
+        |-----END CERTIFICATE-----
+        |-----BEGIN PRIVATE KEY-----
+        |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J
+        |lu/GJQZoU9lDrCPeUcQ28tzOWw==
+        |-----END PRIVATE KEY-----
+        """.trimMargin())
+    val handshakeCertificates = HandshakeCertificates.Builder()
+        .heldCertificate(heldCertificate)
+        .build()
+    val server = MockWebServer()
+    server.useHttps(handshakeCertificates.sslSocketFactory(), false)
+    ```
+
+    Get these strings with `HeldCertificate.certificatePem()` and `privateKeyPkcs8Pem()`.
+
+ *  Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by
+    the certificate that follows and the last certificate is signed by a trusted root.
+
+ *  Fix: Don't lose HTTP/2 flow control bytes when incoming data races with a stream close. If this
+    happened enough then eventually the connection would stall.
+
+ *  Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we
+    could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to
+    fail the call.
+
+
 ## Version 4.1.1
 
 _2019-09-05_
@@ -34,7 +78,7 @@ _2019-08-12_
  *  New: Permit [new WebSocket response codes][iana_websocket]: 1012 (Service Restart), 1013 (Try
     Again Later), and 1014 (invalid response from the upstream).
  *  New: Build with Kotlin 1.3.41, BouncyCastle 1.62, and Conscrypt 2.2.1.
- *  Fix: Recover gracefully when a a coalesced connection immediately goes unhealthy.
+ *  Fix: Recover gracefully when a coalesced connection immediately goes unhealthy.
  *  Fix: Defer the `SecurityException` when looking up the default proxy selector.
  *  Fix: Don't use brackets formatting IPv6 host names in MockWebServer.
  *  Fix: Don't permit cache iterators to remove entries that are being written.
diff --git a/README.md b/README.md
index 4077be843d..3b9e7a708f 100644
--- a/README.md
+++ b/README.md
@@ -55,7 +55,7 @@ public static final MediaType JSON
 OkHttpClient client = new OkHttpClient();
 
 String post(String url, String json) throws IOException {
-  RequestBody body = RequestBody.create(json, JSON);
+  RequestBody body = RequestBody.create(JSON, json);
   Request request = new Request.Builder()
       .url(url)
       .post(body)
@@ -100,7 +100,7 @@ Releases
 Our [change log][changelog] has release history.
 
 ```kotlin
-implementation("com.squareup.okhttp3:okhttp:4.1.1")
+implementation("com.squareup.okhttp3:okhttp:4.2.0")
 ```
 
 Snapshot builds are [available][snap].
@@ -120,7 +120,7 @@ MockWebServer
 OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients.
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:mockwebserver:4.1.1")
+testImplementation("com.squareup.okhttp3:mockwebserver:4.2.0")
 ```
 
 
diff --git a/android-test/build.gradle b/android-test/build.gradle
index d521be6791..fb245ae02c 100644
--- a/android-test/build.gradle
+++ b/android-test/build.gradle
@@ -39,4 +39,6 @@ dependencies {
   androidTestImplementation project(':okhttp-tls')
   androidTestImplementation 'com.android.support.test:runner:1.0.2'
   androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+  androidTestImplementation 'com.squareup.moshi:moshi:1.8.0'
+  androidTestImplementation 'com.squareup.moshi:moshi-kotlin:1.8.0'
 }
diff --git a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
index 3aec4cab37..3046117142 100644
--- a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
+++ b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
@@ -17,6 +17,8 @@ package okhttp.android.test
 
 import android.os.Build
 import android.support.test.runner.AndroidJUnit4
+import com.squareup.moshi.Moshi
+import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
 import okhttp3.Call
 import okhttp3.CertificatePinner
 import okhttp3.Connection
@@ -26,6 +28,7 @@ import okhttp3.Protocol
 import okhttp3.RecordingEventListener
 import okhttp3.Request
 import okhttp3.TlsVersion
+import okhttp3.internal.platform.Platform
 import okhttp3.mockwebserver.MockResponse
 import okhttp3.mockwebserver.MockWebServer
 import okhttp3.tls.internal.TlsUtil.localhost
@@ -37,6 +40,7 @@ import org.junit.Assert.fail
 import org.junit.Assume.assumeNoException
 import org.junit.Assume.assumeTrue
 import org.junit.Before
+import org.junit.Ignore
 import org.junit.Rule
 import org.junit.Test
 import org.junit.runner.RunWith
@@ -52,6 +56,10 @@ import javax.net.ssl.SSLSocket
 class OkHttpTest {
   private lateinit var client: OkHttpClient
 
+  private val moshi = Moshi.Builder()
+      .add(KotlinJsonAdapterFactory())
+      .build()
+
   @JvmField
   @Rule
   val server = MockWebServer()
@@ -137,6 +145,44 @@ class OkHttpTest {
     }
   }
 
+  data class HowsMySslResults(
+    val unknown_cipher_suite_supported: Boolean,
+    val beast_vuln: Boolean,
+    val session_ticket_supported: Boolean,
+    val tls_compression_supported: Boolean,
+    val ephemeral_keys_supported: Boolean,
+    val rating: String,
+    val tls_version: String,
+    val able_to_detect_n_minus_one_splitting: Boolean,
+    val insecure_cipher_suites: Map<String, List<String>>,
+    val given_cipher_suites: List<String>?
+  )
+
+  @Test
+  @Ignore
+  fun testSSLFeatures() {
+    assumeNetwork()
+
+    val request = Request.Builder().url("https://www.howsmyssl.com/a/check").build()
+
+    val response = client.newCall(request).execute()
+
+    val results = response.use {
+      moshi.adapter(HowsMySslResults::class.java).fromJson(response.body!!.string())!!
+    }
+
+    Platform.get().log(Platform.WARN, "results $results", null)
+
+    assertTrue(results.session_ticket_supported)
+    assertEquals("Probably Okay", results.rating)
+    // TODO map to expected versions automatically, test ignored for now.  Run manually.
+    assertEquals("TLS 1.3", results.tls_version)
+    assertEquals(0, results.insecure_cipher_suites.size)
+
+    assertEquals(TlsVersion.TLS_1_3, response.handshake?.tlsVersion)
+    assertEquals(Protocol.HTTP_2, response.protocol)
+  }
+
   @Test
   fun testMockWebserverRequest() {
     enableTls()
diff --git a/docs/changelog_3x.md b/docs/changelog_3x.md
index 4da5a56fde..96602564af 100644
--- a/docs/changelog_3x.md
+++ b/docs/changelog_3x.md
@@ -1,6 +1,19 @@
 OkHttp 3.x Change Log
 =====================
 
+## Version 3.14.3
+
+_2019-09-10_
+
+ *  Fix: Don't lose HTTP/2 flow control bytes when incoming data races with a stream close. If this
+    happened enough then eventually the connection would stall.
+
+ *  Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we
+    could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to
+    fail the call.
+
+ *  Fix: Recover gracefully when a coalesced connection immediately goes unhealthy.
+
 ## Version 3.14.2
 
 _2019-05-19_
@@ -150,6 +163,18 @@ _2019-02-04_
  *  New: Log the TLS handshake in `LoggingEventListener`.
 
 
+## Version 3.12.5
+
+_2019-09-10_
+
+ *  Fix: Don't lose HTTP/2 flow control bytes when incoming data races with a stream close. If this
+    happened enough then eventually the connection would stall.
+
+ *  Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we
+    could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to
+    fail the call.
+
+
 ## Version 3.12.4
 
 _2019-09-04_
diff --git a/gradle.properties b/gradle.properties
index 1a261d695b..f1a5f65598 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,7 +1,7 @@
 org.gradle.jvmargs='-Dfile.encoding=UTF-8'
 
 GROUP=com.squareup.okhttp3
-VERSION_NAME=4.2.0-SNAPSHOT
+VERSION_NAME=4.3.0-SNAPSHOT
 
 POM_URL=https://github.com/square/okhttp
 POM_SCM_URL=https://github.com/square/okhttp
diff --git a/mockwebserver/README.md b/mockwebserver/README.md
index 5843aa1558..454b760a0e 100644
--- a/mockwebserver/README.md
+++ b/mockwebserver/README.md
@@ -142,7 +142,7 @@ server.setDispatcher(dispatcher);
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:mockwebserver:4.1.1")
+testImplementation("com.squareup.okhttp3:mockwebserver:4.2.0")
 ```
 
 ### License
diff --git a/okhttp-brotli/README.md b/okhttp-brotli/README.md
index 95d73f722e..27bdc13619 100644
--- a/okhttp-brotli/README.md
+++ b/okhttp-brotli/README.md
@@ -14,7 +14,7 @@ OkHttpClient client = new OkHttpClient.Builder()
 ```
 
 ```kotlin
-implementation("com.squareup.okhttp3:okhttp-brotli:4.1.1")
+implementation("com.squareup.okhttp3:okhttp-brotli:4.2.0")
 ```
 
  [1]: https://github.com/google/brotli
diff --git a/okhttp-dnsoverhttps/README.md b/okhttp-dnsoverhttps/README.md
index bd9c0ea601..92e3cc0df8 100644
--- a/okhttp-dnsoverhttps/README.md
+++ b/okhttp-dnsoverhttps/README.md
@@ -7,5 +7,5 @@ API is not considered stable and may change at any time.
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-dnsoverhttps:4.1.1")
+testImplementation("com.squareup.okhttp3:okhttp-dnsoverhttps:4.2.0")
 ```
diff --git a/okhttp-logging-interceptor/README.md b/okhttp-logging-interceptor/README.md
index e09ca8fd50..358938ed2d 100644
--- a/okhttp-logging-interceptor/README.md
+++ b/okhttp-logging-interceptor/README.md
@@ -37,7 +37,7 @@ Download
 --------
 
 ```kotlin
-implementation("com.squareup.okhttp3:logging-interceptor:4.1.1")
+implementation("com.squareup.okhttp3:logging-interceptor:4.2.0")
 ```
 
 
diff --git a/okhttp-sse/README.md b/okhttp-sse/README.md
index a8d7227903..18168bcf09 100644
--- a/okhttp-sse/README.md
+++ b/okhttp-sse/README.md
@@ -7,5 +7,5 @@ API is not considered stable and may change at any time.
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-sse:4.1.1")
+testImplementation("com.squareup.okhttp3:okhttp-sse:4.2.0")
 ```
diff --git a/okhttp-tls/README.md b/okhttp-tls/README.md
index ec3f7857dd..ecdcc38137 100644
--- a/okhttp-tls/README.md
+++ b/okhttp-tls/README.md
@@ -227,7 +227,7 @@ Download
 --------
 
 ```kotlin
-implementation("com.squareup.okhttp3:okhttp-tls:4.1.1")
+implementation("com.squareup.okhttp3:okhttp-tls:4.2.0")
 ```
 
  [held_certificate]: http://square.github.io/okhttp/4.x/okhttp-tls/okhttp3.tls/-held-certificate/
diff --git a/okhttp-urlconnection/README.md b/okhttp-urlconnection/README.md
index fffe6dbd9c..74dac40dc0 100644
--- a/okhttp-urlconnection/README.md
+++ b/okhttp-urlconnection/README.md
@@ -6,5 +6,5 @@ This module integrates OkHttp with `Authenticator` and `CookieHandler` from `jav
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-urlconnection:4.1.1")
+testImplementation("com.squareup.okhttp3:okhttp-urlconnection:4.2.0")
 ```
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
index 74dc44a93c..048605e85a 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
@@ -178,7 +178,7 @@ class Http2Connection internal constructor(builder: Builder) : Closeable {
 
   @Synchronized internal fun updateConnectionFlowControl(read: Long) {
     readBytesTotal += read
-    val readBytesToAcknowledge = (readBytesTotal - readBytesAcknowledged)
+    val readBytesToAcknowledge = readBytesTotal - readBytesAcknowledged
     if (readBytesToAcknowledge >= okHttpSettings.initialWindowSize / 2) {
       writeWindowUpdateLater(0, readBytesToAcknowledge)
       readBytesAcknowledged += readBytesToAcknowledge
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
index 1f1b0142a2..243535415d 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
@@ -360,7 +360,7 @@ class Http2Stream internal constructor(
               readBytesDelivered = readBuffer.read(sink, minOf(byteCount, readBuffer.size))
               readBytesTotal += readBytesDelivered
 
-              val unacknowledgedBytesRead = (readBytesTotal - readBytesAcknowledged)
+              val unacknowledgedBytesRead = readBytesTotal - readBytesAcknowledged
               if (errorExceptionToDeliver == null &&
                   unacknowledgedBytesRead >= connection.okHttpSettings.initialWindowSize / 2) {
                 // Flow control: notify the peer that we're ready for more data! Only send a
@@ -407,6 +407,10 @@ class Http2Stream internal constructor(
       connection.updateConnectionFlowControl(read)
     }
 
+    /**
+     * Accept bytes on the connection's reader thread. This function avoids holding locks while it
+     * performs blocking reads for the incoming bytes.
+     */
     @Throws(IOException::class)
     internal fun receive(source: BufferedSource, byteCount: Long) {
       var byteCount = byteCount
@@ -438,14 +442,25 @@ class Http2Stream internal constructor(
         if (read == -1L) throw EOFException()
         byteCount -= read
 
-        // Move the received data to the read buffer to the reader can read it.
+        // Move the received data to the read buffer to the reader can read it. If this source has
+        // been closed since this read began we must discard the incoming data and tell the
+        // connection we've done so.
+        var bytesDiscarded = 0L
         synchronized(this@Http2Stream) {
-          val wasEmpty = readBuffer.size == 0L
-          readBuffer.writeAll(receiveBuffer)
-          if (wasEmpty) {
-            this@Http2Stream.notifyAll()
+          if (closed) {
+            bytesDiscarded = receiveBuffer.size
+            receiveBuffer.clear()
+          } else {
+            val wasEmpty = readBuffer.size == 0L
+            readBuffer.writeAll(receiveBuffer)
+            if (wasEmpty) {
+              this@Http2Stream.notifyAll()
+            }
           }
         }
+        if (bytesDiscarded > 0L) {
+          updateConnectionFlowControl(bytesDiscarded)
+        }
       }
     }
 
