diff --git a/Okhttp Source reading notes.md b/Okhttp Source reading notes.md
new file mode 100644
index 0000000000..1092050147
--- /dev/null
+++ b/Okhttp Source reading notes.md	
@@ -0,0 +1,3 @@
+#### okhttp Version 3.11.0
+
+
diff --git a/okhttp/src/main/java/okhttp3/Dispatcher.java b/okhttp/src/main/java/okhttp3/Dispatcher.java
index 21013bda11..41cd07ff2c 100644
--- a/okhttp/src/main/java/okhttp3/Dispatcher.java
+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java
@@ -37,20 +37,23 @@
  * of calls concurrently.
  */
 public final class Dispatcher {
+  //最大请求数
   private int maxRequests = 64;
+  //每个host的最大请求数
   private int maxRequestsPerHost = 5;
+  //网络请求处于空闲时的回调
   private @Nullable Runnable idleCallback;
 
-  /** Executes calls. Created lazily. */
+  /** 线程池的实现 */
   private @Nullable ExecutorService executorService;
 
-  /** Ready async calls in the order they'll be run. */
+  /** 等待网络请求的异步队列 */
   private final Deque<AsyncCall> readyAsyncCalls = new ArrayDeque<>();
 
-  /** Running asynchronous calls. Includes canceled calls that haven't finished yet. */
+  /** 正在执行网络请求的异步队列. */
   private final Deque<AsyncCall> runningAsyncCalls = new ArrayDeque<>();
 
-  /** Running synchronous calls. Includes canceled calls that haven't finished yet. */
+  /** 正在执行网络请求的同步队列. */
   private final Deque<RealCall> runningSyncCalls = new ArrayDeque<>();
 
   public Dispatcher(ExecutorService executorService) {
diff --git a/okhttp/src/main/java/okhttp3/Interceptor.java b/okhttp/src/main/java/okhttp3/Interceptor.java
index 1005592697..c3a8d4b746 100644
--- a/okhttp/src/main/java/okhttp3/Interceptor.java
+++ b/okhttp/src/main/java/okhttp3/Interceptor.java
@@ -25,6 +25,7 @@
  * or response.
  */
 public interface Interceptor {
+
   Response intercept(Chain chain) throws IOException;
 
   interface Chain {
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 808b3dc7ba..54e47b888d 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -37,6 +37,8 @@
   /**
    * There is a cycle between the {@link Call} and {@link EventListener} that makes this awkward.
    * This will be set after we create the call instance then create the event listener instance.
+   *
+   * 监听OkHttp网络请求各个阶段的事件监听器
    */
   private EventListener eventListener;
 
@@ -44,7 +46,7 @@
   final Request originalRequest;
   final boolean forWebSocket;
 
-  // Guarded by this.
+  // Guarded by this.//判断Call对象是否被执行过的标志变量
   private boolean executed;
 
   private RealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {
@@ -73,14 +75,18 @@ static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolea
     captureCallStackTrace();
     eventListener.callStart(this);
     try {
+      //调用分发器的executed(this)方法
       client.dispatcher().executed(this);
+      //真实的网络请求是在这里处理的
       Response result = getResponseWithInterceptorChain();
       if (result == null) throw new IOException("Canceled");
       return result;
     } catch (IOException e) {
+      //网络请求失败的回调
       eventListener.callFailed(this, e);
       throw e;
     } finally {
+      //网络请求结束
       client.dispatcher().finished(this);
     }
   }
@@ -91,6 +97,7 @@ private void captureCallStackTrace() {
   }
 
   @Override public void enqueue(Callback responseCallback) {
+    //确保线程安全的情况下通过executed来保证每个Call只被执行一次
     synchronized (this) {
       if (executed) throw new IllegalStateException("Already Executed");
       executed = true;
@@ -183,14 +190,17 @@ String redactedUrl() {
   Response getResponseWithInterceptorChain() throws IOException {
     // Build a full stack of interceptors.
     List<Interceptor> interceptors = new ArrayList<>();
-    interceptors.addAll(client.interceptors());
-    interceptors.add(retryAndFollowUpInterceptor);
+    interceptors.addAll(client.interceptors());//在配置 OkHttpClient 时设置的拦截器
+    interceptors.add(retryAndFollowUpInterceptor);//在失败重试以及重定向的拦截器
+    //负责把用户构造的请求转换为发送到服务器的请求、把服务器返回的响应转换为用户友好的响应的 BridgeInterceptor
     interceptors.add(new BridgeInterceptor(client.cookieJar()));
-    interceptors.add(new CacheInterceptor(client.internalCache()));
-    interceptors.add(new ConnectInterceptor(client));
+    interceptors.add(new CacheInterceptor(client.internalCache()));//负责读取缓存直接返回、更新缓存
+    interceptors.add(new ConnectInterceptor(client));//负责和服务器建立连接
     if (!forWebSocket) {
+      //配置 OkHttpClient 时设置的 networkInterceptors
       interceptors.addAll(client.networkInterceptors());
     }
+    //负责向服务器发送请求数据、从服务器读取响应数据
     interceptors.add(new CallServerInterceptor(forWebSocket));
 
     Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,
diff --git a/okhttp/src/main/java/okhttp3/Request.java b/okhttp/src/main/java/okhttp3/Request.java
index 7ffb00c1a5..3e5ef54b90 100644
--- a/okhttp/src/main/java/okhttp3/Request.java
+++ b/okhttp/src/main/java/okhttp3/Request.java
@@ -27,6 +27,7 @@
 /**
  * An HTTP request. Instances of this class are immutable if their {@link #body} is null or itself
  * immutable.
+ *  封装了url 请求方式 请求头 请求体等网络相关信息
  */
 public final class Request {
   final HttpUrl url;
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
index d46494d95b..f5eca7d75a 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
@@ -51,7 +51,7 @@ public CacheInterceptor(InternalCache cache) {
 
   @Override public Response intercept(Chain chain) throws IOException {
     Response cacheCandidate = cache != null
-        ? cache.get(chain.request())
+        ? cache.get(chain.request())////通过request得到缓存
         : null;
 
     long now = System.currentTimeMillis();
@@ -68,7 +68,7 @@ public CacheInterceptor(InternalCache cache) {
       closeQuietly(cacheCandidate.body()); // The cache candidate wasn't applicable. Close it.
     }
 
-    // If we're forbidden from using the network and the cache is insufficient, fail.
+    // 如果我们禁止使用网络，且缓存为null，失败
     if (networkRequest == null && cacheResponse == null) {
       return new Response.Builder()
           .request(chain.request())
@@ -81,7 +81,7 @@ public CacheInterceptor(InternalCache cache) {
           .build();
     }
 
-    // If we don't need the network, we're done.
+    //没有网络请求，跳过网络，返回缓存
     if (networkRequest == null) {
       return cacheResponse.newBuilder()
           .cacheResponse(stripBody(cacheResponse))
@@ -92,13 +92,13 @@ public CacheInterceptor(InternalCache cache) {
     try {
       networkResponse = chain.proceed(networkRequest);
     } finally {
-      // If we're crashing on I/O or otherwise, don't leak the cache body.
+      //如果我们因为I/O或其他原因崩溃，不要泄漏缓存体
       if (networkResponse == null && cacheCandidate != null) {
         closeQuietly(cacheCandidate.body());
       }
     }
 
-    // If we have a cache response too, then we're doing a conditional get.
+    //如果我们有一个缓存的response，然后我们正在做一个条件GET
     if (cacheResponse != null) {
       if (networkResponse.code() == HTTP_NOT_MODIFIED) {
         Response response = cacheResponse.newBuilder()
@@ -112,6 +112,7 @@ public CacheInterceptor(InternalCache cache) {
 
         // Update the cache after combining headers but before stripping the
         // Content-Encoding header (as performed by initContentStream()).
+        //更新缓存，在剥离content-Encoding之前
         cache.trackConditionalCacheHit();
         cache.update(cacheResponse, response);
         return response;
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
index b8a346c03a..b33e62afc9 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
@@ -39,6 +39,11 @@ public ConnectInterceptor(OkHttpClient client) {
 
     // We need the network to satisfy this request. Possibly for validating a conditional GET.
     boolean doExtensiveHealthChecks = !request.method().equals("GET");
+    /**
+     * 际上建立连接就是创建了一个HttpCodec对象，它将在后面的步骤中被使用，
+     * 它是对 HTTP 协议操作的抽象，有两个实现：Http1Codec和Http2Codec，
+     * 它们分别对应 HTTP/1.1 和 HTTP/2 版本的实现
+     */
     HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);
     RealConnection connection = streamAllocation.connection();
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
index c10dc34cdc..4bb5a7ae95 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
@@ -36,6 +36,8 @@
  * Bridges from application code to network code. First it builds a network request from a user
  * request. Then it proceeds to call the network. Finally it builds a user response from the network
  * response.
+ *
+ * 负责把用户构造的请求转换为发送到服务器的请求、把服务器返回的响应转换为用户友好的响应的
  */
 public final class BridgeInterceptor implements Interceptor {
   private final CookieJar cookieJar;
@@ -47,7 +49,7 @@ public BridgeInterceptor(CookieJar cookieJar) {
   @Override public Response intercept(Chain chain) throws IOException {
     Request userRequest = chain.request();
     Request.Builder requestBuilder = userRequest.newBuilder();
-
+    //检查request。将用户的request转换为发送到server的请求
     RequestBody body = userRequest.body();
     if (body != null) {
       MediaType contentType = body.contentType();
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpCodec.java b/okhttp/src/main/java/okhttp3/internal/http/HttpCodec.java
index ad9759acce..3f9e4f35f5 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpCodec.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpCodec.java
@@ -21,7 +21,7 @@
 import okhttp3.ResponseBody;
 import okio.Sink;
 
-/** Encodes HTTP requests and decodes HTTP responses. */
+/** 编码HTTP请求并解码HTTP响应。 */
 public interface HttpCodec {
   /**
    * The timeout to use while discarding a stream of input data. Since this is used for connection
@@ -30,7 +30,7 @@
    */
   int DISCARD_STREAM_TIMEOUT_MILLIS = 100;
 
-  /** Returns an output stream where the request body can be streamed. */
+  /** 返回一个输出流，其中请求主体可以被流化. */
   Sink createRequestBody(Request request, long contentLength);
 
   /** This should update the HTTP engine's sentRequestMillis field. */
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
index 52f9880892..577d58528b 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
@@ -128,6 +128,7 @@ public Response proceed(Request request, StreamAllocation streamAllocation, Http
     calls++;
 
     // If we already have a stream, confirm that the incoming request will use it.
+    //如果我们已经有一个stream。确定即将到来的request会使用它
     if (this.httpCodec != null && !this.connection.supportsUrl(request.url())) {
       throw new IllegalStateException("network interceptor " + interceptors.get(index - 1)
           + " must retain the same host and port");
@@ -140,6 +141,7 @@ public Response proceed(Request request, StreamAllocation streamAllocation, Http
     }
 
     // Call the next interceptor in the chain.
+    //调用链的下一个拦截器
     RealInterceptorChain next = new RealInterceptorChain(interceptors, streamAllocation, httpCodec,
         connection, index + 1, request, call, eventListener, connectTimeout, readTimeout,
         writeTimeout);
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
index ffb75058aa..43d2069a7b 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
@@ -123,6 +123,7 @@ public StreamAllocation streamAllocation() {
       Response response;
       boolean releaseConnection = true;
       try {
+        //直接调用了下一个拦截器，然后捕获可能的异常来进行操作
         response = realChain.proceed(request, streamAllocation, null, null);
         releaseConnection = false;
       } catch (RouteException e) {
@@ -157,6 +158,7 @@ public StreamAllocation streamAllocation() {
 
       Request followUp;
       try {
+        //判断状态码
         followUp = followUpRequest(response, streamAllocation.route());
       } catch (IOException e) {
         streamAllocation.release();
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 0000000000..185c52e8a7
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,3 @@
+include ':sourcereading'
+
+
diff --git a/sourcereading/.gitignore b/sourcereading/.gitignore
new file mode 100644
index 0000000000..796b96d1c4
--- /dev/null
+++ b/sourcereading/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/sourcereading/build.gradle b/sourcereading/build.gradle
new file mode 100644
index 0000000000..43d915610e
--- /dev/null
+++ b/sourcereading/build.gradle
@@ -0,0 +1,37 @@
+
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 26
+
+
+
+    defaultConfig {
+        applicationId "com.example.layout.sourcereading"
+        minSdkVersion 18
+        targetSdkVersion 26
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+
+}
+
+dependencies {
+    implementation fileTree(dir: 'libs', include: ['*.jar'])
+
+    implementation 'com.android.support:appcompat-v7:26.1.0'
+    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
+    testImplementation 'junit:junit:4.12'
+    androidTestImplementation 'com.android.support.test:runner:1.0.2'
+    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+}
diff --git a/sourcereading/proguard-rules.pro b/sourcereading/proguard-rules.pro
new file mode 100644
index 0000000000..f1b424510d
--- /dev/null
+++ b/sourcereading/proguard-rules.pro
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/sourcereading/src/androidTest/java/com/example/layout/sourcereading/ExampleInstrumentedTest.java b/sourcereading/src/androidTest/java/com/example/layout/sourcereading/ExampleInstrumentedTest.java
new file mode 100644
index 0000000000..0ebbc4966e
--- /dev/null
+++ b/sourcereading/src/androidTest/java/com/example/layout/sourcereading/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package com.example.layout.sourcereading;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("com.example.layout.sourcereading", appContext.getPackageName());
+    }
+}
diff --git a/sourcereading/src/main/AndroidManifest.xml b/sourcereading/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..ea6d87d739
--- /dev/null
+++ b/sourcereading/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.layout.sourcereading">
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/sourcereading/src/main/java/com/example/layout/sourcereading/MainActivity.java b/sourcereading/src/main/java/com/example/layout/sourcereading/MainActivity.java
new file mode 100644
index 0000000000..77f517feed
--- /dev/null
+++ b/sourcereading/src/main/java/com/example/layout/sourcereading/MainActivity.java
@@ -0,0 +1,13 @@
+package com.example.layout.sourcereading;
+
+import android.support.v7.app.AppCompatActivity;
+import android.os.Bundle;
+
+public class MainActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+    }
+}
diff --git a/sourcereading/src/main/res/drawable-v24/ic_launcher_foreground.xml b/sourcereading/src/main/res/drawable-v24/ic_launcher_foreground.xml
new file mode 100644
index 0000000000..c7bd21dbd8
--- /dev/null
+++ b/sourcereading/src/main/res/drawable-v24/ic_launcher_foreground.xml
@@ -0,0 +1,34 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportHeight="108"
+    android:viewportWidth="108">
+    <path
+        android:fillType="evenOdd"
+        android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
+        android:strokeColor="#00000000"
+        android:strokeWidth="1">
+        <aapt:attr name="android:fillColor">
+            <gradient
+                android:endX="78.5885"
+                android:endY="90.9159"
+                android:startX="48.7653"
+                android:startY="61.0927"
+                android:type="linear">
+                <item
+                    android:color="#44000000"
+                    android:offset="0.0" />
+                <item
+                    android:color="#00000000"
+                    android:offset="1.0" />
+            </gradient>
+        </aapt:attr>
+    </path>
+    <path
+        android:fillColor="#FFFFFF"
+        android:fillType="nonZero"
+        android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
+        android:strokeColor="#00000000"
+        android:strokeWidth="1" />
+</vector>
diff --git a/sourcereading/src/main/res/drawable/ic_launcher_background.xml b/sourcereading/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
index 0000000000..d5fccc538c
--- /dev/null
+++ b/sourcereading/src/main/res/drawable/ic_launcher_background.xml
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportHeight="108"
+    android:viewportWidth="108">
+    <path
+        android:fillColor="#26A69A"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+</vector>
diff --git a/sourcereading/src/main/res/layout/activity_main.xml b/sourcereading/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000000..4d7b275e89
--- /dev/null
+++ b/sourcereading/src/main/res/layout/activity_main.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.example.layout.sourcereading.MainActivity">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Hello World!"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toRightOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</android.support.constraint.ConstraintLayout>
diff --git a/sourcereading/src/main/res/mipmap-anydpi-v26/ic_launcher.xml b/sourcereading/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
index 0000000000..eca70cfe52
--- /dev/null
+++ b/sourcereading/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/sourcereading/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml b/sourcereading/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
new file mode 100644
index 0000000000..eca70cfe52
--- /dev/null
+++ b/sourcereading/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/sourcereading/src/main/res/mipmap-hdpi/ic_launcher.png b/sourcereading/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000000..a2f5908281
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/sourcereading/src/main/res/mipmap-hdpi/ic_launcher_round.png b/sourcereading/src/main/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..1b52399808
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/sourcereading/src/main/res/mipmap-mdpi/ic_launcher.png b/sourcereading/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000000..ff10afd6e1
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/sourcereading/src/main/res/mipmap-mdpi/ic_launcher_round.png b/sourcereading/src/main/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..115a4c768a
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/sourcereading/src/main/res/mipmap-xhdpi/ic_launcher.png b/sourcereading/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000000..dcd3cd8083
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/sourcereading/src/main/res/mipmap-xhdpi/ic_launcher_round.png b/sourcereading/src/main/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..459ca609d3
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/sourcereading/src/main/res/mipmap-xxhdpi/ic_launcher.png b/sourcereading/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000000..8ca12fe024
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/sourcereading/src/main/res/mipmap-xxhdpi/ic_launcher_round.png b/sourcereading/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..8e19b410a1
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/sourcereading/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/sourcereading/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 0000000000..b824ebdd48
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/sourcereading/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png b/sourcereading/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..4c19a13c23
Binary files /dev/null and b/sourcereading/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/sourcereading/src/main/res/values/colors.xml b/sourcereading/src/main/res/values/colors.xml
new file mode 100644
index 0000000000..3ab3e9cbce
--- /dev/null
+++ b/sourcereading/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/sourcereading/src/main/res/values/strings.xml b/sourcereading/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..a66b68ea69
--- /dev/null
+++ b/sourcereading/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">sourcereading</string>
+</resources>
diff --git a/sourcereading/src/main/res/values/styles.xml b/sourcereading/src/main/res/values/styles.xml
new file mode 100644
index 0000000000..5885930df6
--- /dev/null
+++ b/sourcereading/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/sourcereading/src/test/java/com/example/layout/sourcereading/ExampleUnitTest.java b/sourcereading/src/test/java/com/example/layout/sourcereading/ExampleUnitTest.java
new file mode 100644
index 0000000000..bbd84f1e55
--- /dev/null
+++ b/sourcereading/src/test/java/com/example/layout/sourcereading/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package com.example.layout.sourcereading;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
