diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java
index d66eca9b79..05eb5044d2 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttp.java
@@ -36,7 +36,7 @@
   @Override public void prepare(Benchmark benchmark) {
     super.prepare(benchmark);
     client = new OkHttpClient.Builder()
-        .setProtocols(benchmark.protocols)
+        .protocols(benchmark.protocols)
         .build();
 
     if (benchmark.tls) {
@@ -48,8 +48,8 @@
         }
       };
       client = new OkHttpClient.Builder()
-          .setSslSocketFactory(socketFactory)
-          .setHostnameVerifier(hostnameVerifier)
+          .sslSocketFactory(socketFactory)
+          .hostnameVerifier(hostnameVerifier)
           .build();
     }
   }
diff --git a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java
index b65c1176fc..98544e973c 100644
--- a/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java
+++ b/benchmarks/src/main/java/okhttp3/benchmarks/OkHttpAsync.java
@@ -48,8 +48,8 @@
     targetBacklog = benchmark.targetBacklog;
 
     client = new OkHttpClient.Builder()
-        .setProtocols(benchmark.protocols)
-        .setDispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,
+        .protocols(benchmark.protocols)
+        .dispatcher(new Dispatcher(new ThreadPoolExecutor(benchmark.concurrencyLevel,
             benchmark.concurrencyLevel, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>())))
         .build();
 
@@ -62,8 +62,8 @@
         }
       };
       client = client.newBuilder()
-          .setSslSocketFactory(socketFactory)
-          .setHostnameVerifier(hostnameVerifier)
+          .sslSocketFactory(socketFactory)
+          .hostnameVerifier(hostnameVerifier)
           .build();
     }
 
diff --git a/okcurl/src/main/java/okhttp3/curl/Main.java b/okcurl/src/main/java/okhttp3/curl/Main.java
index d2a908cb49..21a9d0f75e 100644
--- a/okcurl/src/main/java/okhttp3/curl/Main.java
+++ b/okcurl/src/main/java/okhttp3/curl/Main.java
@@ -169,16 +169,16 @@ private static String protocols() {
 
   private OkHttpClient createClient() {
     OkHttpClient.Builder builder = new OkHttpClient.Builder();
-    builder.setFollowSslRedirects(followRedirects);
+    builder.followSslRedirects(followRedirects);
     if (connectTimeout != DEFAULT_TIMEOUT) {
-      builder.setConnectTimeout(connectTimeout, SECONDS);
+      builder.connectTimeout(connectTimeout, SECONDS);
     }
     if (readTimeout != DEFAULT_TIMEOUT) {
-      builder.setReadTimeout(readTimeout, SECONDS);
+      builder.readTimeout(readTimeout, SECONDS);
     }
     if (allowInsecure) {
-      builder.setSslSocketFactory(createInsecureSslSocketFactory());
-      builder.setHostnameVerifier(createInsecureHostnameVerifier());
+      builder.sslSocketFactory(createInsecureSslSocketFactory());
+      builder.hostnameVerifier(createInsecureHostnameVerifier());
     }
     return builder.build();
   }
@@ -235,7 +235,7 @@ Request createRequest() {
   }
 
   private void close() {
-    client.getConnectionPool().evictAll(); // Close any persistent connections.
+    client.connectionPool().evictAll(); // Close any persistent connections.
   }
 
   private static SSLSocketFactory createInsecureSslSocketFactory() {
diff --git a/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java b/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java
index e4c87e3e4f..de5788539a 100644
--- a/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java
+++ b/okhttp-android-support/src/main/java/okhttp3/AndroidInternal.java
@@ -36,7 +36,7 @@ public static void setResponseCache(OkUrlFactory okUrlFactory, ResponseCache res
       // make the ResponseCache look like an InternalCache, we can unwrap the Cache instead.
       // This means that Cache stats will be correctly updated.
       OkCacheContainer okCacheContainer = (OkCacheContainer) responseCache;
-      builder.setCache(okCacheContainer.getCache());
+      builder.cache(okCacheContainer.getCache());
     } else {
       builder.setInternalCache(responseCache != null ? new CacheAdapter(responseCache) : null);
     }
diff --git a/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java
index 32e3c1dbdb..eec8682202 100644
--- a/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/android/HttpResponseCacheTest.java
@@ -48,16 +48,15 @@
  * A port of Android's android.net.http.HttpResponseCacheTest to JUnit4.
  */
 public final class HttpResponseCacheTest {
-
   @Rule public TemporaryFolder cacheRule = new TemporaryFolder();
   @Rule public MockWebServer server = new MockWebServer();
 
   private File cacheDir;
-  private OkUrlFactory client;
+  private OkUrlFactory urlFactory;
 
   @Before public void setUp() throws Exception {
     cacheDir = cacheRule.getRoot();
-    client = new OkUrlFactory(new OkHttpClient.Builder().build());
+    urlFactory = new OkUrlFactory(new OkHttpClient.Builder().build());
   }
 
   @After public void tearDown() throws Exception {
@@ -165,8 +164,8 @@ public CacheRequest put(URI uri, URLConnection connection) {
   // This mimics the Android HttpHandler, which is found in the okhttp3 package.
   private URLConnection openUrl(HttpUrl url) {
     ResponseCache responseCache = ResponseCache.getDefault();
-    AndroidInternal.setResponseCache(client, responseCache);
-    return client.open(url.url());
+    AndroidInternal.setResponseCache(urlFactory, responseCache);
+    return urlFactory.open(url.url());
   }
 
   private void initializeCache(HttpResponseCache cache) {
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
index 4d24ab4456..b556330ba0 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/CacheAdapterTest.java
@@ -116,8 +116,8 @@
     };
     setInternalCache(new CacheAdapter(responseCache));
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(hostnameVerifier)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(hostnameVerifier)
         .build();
 
     connection = new OkUrlFactory(client).open(serverUrl);
@@ -234,8 +234,8 @@
     };
     setInternalCache(new CacheAdapter(responseCache));
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(hostnameVerifier)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(hostnameVerifier)
         .build();
 
     connection = new OkUrlFactory(client).open(serverUrl);
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
index cea54d45e2..9f0928c627 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
@@ -346,8 +346,8 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .setBody("DEF"));
 
     urlFactory.setClient(urlFactory.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(hostnameVerifier)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(hostnameVerifier)
         .build());
 
     HttpsURLConnection connection1 = (HttpsURLConnection) openConnection(server.url("/").url());
@@ -385,8 +385,8 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .addHeader("Location: " + server2.url("/").url()));
 
     urlFactory.setClient(urlFactory.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(hostnameVerifier)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(hostnameVerifier)
         .build());
 
     HttpURLConnection connection1 = openConnection(server.url("/").url());
@@ -1457,8 +1457,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("B"));
 
     urlFactory.setClient(urlFactory.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(hostnameVerifier)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(hostnameVerifier)
         .build());
 
     URL url = server.url("/").url();
diff --git a/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java
index 4d248f4d4b..db7a140246 100644
--- a/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java
+++ b/okhttp-apache/src/main/java/okhttp3/apache/OkApacheClient.java
@@ -101,7 +101,7 @@ private static HttpResponse transformResponse(Response response) throws IOExcept
   private final HttpParams params = new AbstractHttpParams() {
     @Override public Object getParameter(String name) {
       if (name.equals(ConnRouteParams.DEFAULT_PROXY)) {
-        Proxy proxy = client.getProxy();
+        Proxy proxy = client.proxy();
         if (proxy == null) {
           return null;
         }
@@ -119,7 +119,7 @@ private static HttpResponse transformResponse(Response response) throws IOExcept
           proxy = new Proxy(HTTP, new InetSocketAddress(host.getHostName(), host.getPort()));
         }
         client = client.newBuilder()
-            .setProxy(proxy)
+            .proxy(proxy)
             .build();
         return this;
       }
diff --git a/okhttp-tests/src/test/java/okhttp3/CacheTest.java b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
index e1773cf3f6..e46bccb83e 100644
--- a/okhttp-tests/src/test/java/okhttp3/CacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
@@ -86,8 +86,8 @@
     server.setProtocolNegotiationEnabled(false);
     cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);
     client = new OkHttpClient.Builder()
-        .setCache(cache)
-        .setCookieJar(new JavaNetCookieJar(cookieManager))
+        .cache(cache)
+        .cookieJar(new JavaNetCookieJar(cookieManager))
         .build();
   }
 
@@ -252,8 +252,8 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .setBody("ABC"));
 
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(NULL_HOSTNAME_VERIFIER)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(NULL_HOSTNAME_VERIFIER)
         .build();
 
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -355,8 +355,8 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .setBody("DEF"));
 
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(NULL_HOSTNAME_VERIFIER)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(NULL_HOSTNAME_VERIFIER)
         .build();
 
     Response response1 = get(server.url("/"));
@@ -396,8 +396,8 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .addHeader("Location: " + server2.url("/")));
 
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(NULL_HOSTNAME_VERIFIER)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(NULL_HOSTNAME_VERIFIER)
         .build();
 
     Response response1 = get(server.url("/"));
@@ -1009,7 +1009,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
 
     assertEquals("A", get(server.url("/")).body().string());
     assertEquals("A", get(server.url("/")).body().string());
-    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());
+    assertEquals(1, client.connectionPool().getIdleConnectionCount());
   }
 
   @Test public void expiresDateBeforeModifiedDate() throws Exception {
@@ -1659,8 +1659,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("B"));
 
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(NULL_HOSTNAME_VERIFIER)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(NULL_HOSTNAME_VERIFIER)
         .build();
 
     HttpUrl url = server.url("/");
@@ -1682,7 +1682,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   @Test public void cachePlusCookies() throws Exception {
     RecordingCookieJar cookieJar = new RecordingCookieJar();
     client = client.newBuilder()
-        .setCookieJar(cookieJar)
+        .cookieJar(cookieJar)
         .build();
 
     server.enqueue(new MockResponse()
@@ -1937,7 +1937,7 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
     writeFile(cache.getDirectory(), "journal", journalBody);
     cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     Response response = get(url);
@@ -1986,7 +1986,7 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
     cache.close();
     cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     Response response = get(url);
@@ -2035,7 +2035,7 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
     cache.close();
     cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     Response response = get(url);
@@ -2071,7 +2071,7 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
     cache.close();
     cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     Response response = get(url);
@@ -2088,8 +2088,8 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
 
     HttpUrl url = server.url("/");
     assertEquals("A", get(url).body().string());
-    client.getCache().evictAll();
-    assertEquals(0, client.getCache().getSize());
+    client.cache().evictAll();
+    assertEquals(0, client.cache().getSize());
     assertEquals("B", get(url).body().string());
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/CallTest.java b/okhttp-tests/src/test/java/okhttp3/CallTest.java
index 13be3ad30e..94da609887 100644
--- a/okhttp-tests/src/test/java/okhttp3/CallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java
@@ -382,7 +382,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     String credential = Credentials.basic("jesse", "secret");
     client = client.newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator(credential))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build();
 
     Response response = client.newCall(request).execute();
@@ -407,7 +407,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     String credential = Credentials.basic("jesse", "secret");
     client = client.newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator(credential))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build();
 
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -423,7 +423,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     String credential = Credentials.basic("jesse", "secret");
     client = client.newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator(credential))
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build();
 
     try {
@@ -740,13 +740,13 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     // First request: time out after 1000ms.
     client = client.newBuilder()
-        .setReadTimeout(1000, TimeUnit.MILLISECONDS)
+        .readTimeout(1000, TimeUnit.MILLISECONDS)
         .build();
     executeSynchronously(new Request.Builder().url(server.url("/a")).build()).assertBody("abc");
 
     // Second request: time out after 250ms.
     client = client.newBuilder()
-        .setReadTimeout(250, TimeUnit.MILLISECONDS)
+        .readTimeout(250, TimeUnit.MILLISECONDS)
         .build();
     Request request = new Request.Builder().url(server.url("/b")).build();
     Response response = client.newCall(request).execute();
@@ -777,7 +777,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setBody("unreachable!"));
 
     client = client.newBuilder()
-        .setReadTimeout(100, TimeUnit.MILLISECONDS)
+        .readTimeout(100, TimeUnit.MILLISECONDS)
         .build();
 
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -804,8 +804,8 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setBody("success!"));
 
     client = client.newBuilder()
-        .setProxySelector(proxySelector)
-        .setReadTimeout(100, TimeUnit.MILLISECONDS)
+        .proxySelector(proxySelector)
+        .readTimeout(100, TimeUnit.MILLISECONDS)
         .build();
 
     Request request = new Request.Builder().url("http://android.com/").build();
@@ -927,9 +927,9 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     server.enqueue(new MockResponse().setBody("retry success"));
 
     client = client.newBuilder()
-        .setDns(new DoubleInetAddressDns())
+        .dns(new DoubleInetAddressDns())
         .build();
-    assertTrue(client.getRetryOnConnectionFailure());
+    assertTrue(client.retryOnConnectionFailure());
 
     Request request = new Request.Builder().url(server.url("/")).build();
     executeSynchronously(request).assertBody("seed connection pool");
@@ -942,8 +942,8 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     server.enqueue(new MockResponse().setBody("unreachable!"));
 
     client = client.newBuilder()
-        .setDns(new DoubleInetAddressDns())
-        .setRetryOnConnectionFailure(false)
+        .dns(new DoubleInetAddressDns())
+        .retryOnConnectionFailure(false)
         .build();
 
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -962,9 +962,9 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     server.enqueue(new MockResponse().setBody("abc"));
 
     client = client.newBuilder()
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setDns(new SingleInetAddressDns())
-        .setSslSocketFactory(suppressTlsFallbackClientSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .dns(new SingleInetAddressDns())
+        .sslSocketFactory(suppressTlsFallbackClientSocketFactory())
         .build();
 
     executeSynchronously(new Request.Builder().url(server.url("/")).build())
@@ -986,9 +986,9 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     RecordingSSLSocketFactory clientSocketFactory =
         new RecordingSSLSocketFactory(sslContext.getSocketFactory());
     client = client.newBuilder()
-        .setSslSocketFactory(clientSocketFactory)
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setDns(new SingleInetAddressDns())
+        .sslSocketFactory(clientSocketFactory)
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .dns(new SingleInetAddressDns())
         .build();
 
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -1011,8 +1011,8 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     server.enqueue(new MockResponse().setBody("abc"));
 
     client = client.newBuilder()
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setSslSocketFactory(suppressTlsFallbackClientSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(suppressTlsFallbackClientSocketFactory())
         .build();
 
     Request request = new Request.Builder()
@@ -1025,10 +1025,10 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
   @Test public void noRecoveryFromTlsHandshakeFailureWhenTlsFallbackIsDisabled() throws Exception {
     client = client.newBuilder()
-        .setConnectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT))
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setDns(new SingleInetAddressDns())
-        .setSslSocketFactory(suppressTlsFallbackClientSocketFactory())
+        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT))
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .dns(new SingleInetAddressDns())
+        .sslSocketFactory(suppressTlsFallbackClientSocketFactory())
         .build();
 
     server.useHttps(sslContext.getSocketFactory(), false);
@@ -1048,7 +1048,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
   @Test public void cleartextCallsFailWhenCleartextIsDisabled() throws Exception {
     // Configure the client with only TLS configurations. No cleartext!
     client = client.newBuilder()
-        .setConnectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS))
+        .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS))
         .build();
 
     server.enqueue(new MockResponse());
@@ -1069,7 +1069,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .addHeader("Location: http://square.com"));
 
     client = client.newBuilder()
-        .setFollowSslRedirects(false)
+        .followSslRedirects(false)
         .build();
 
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -1094,7 +1094,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     // Make another request with certificate pinning. It should complete normally.
     client = client.newBuilder()
-        .setCertificatePinner(certificatePinnerBuilder.build())
+        .certificatePinner(certificatePinnerBuilder.build())
         .build();
     Request request2 = new Request.Builder().url(server.url("/")).build();
     Response response2 = client.newCall(request2).execute();
@@ -1108,7 +1108,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     // Pin publicobject.com's cert.
     client = client.newBuilder()
-        .setCertificatePinner(new CertificatePinner.Builder()
+        .certificatePinner(new CertificatePinner.Builder()
             .add(server.getHostName(), "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=")
             .build())
         .build();
@@ -1179,7 +1179,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setBody("A"));
 
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     // Store a response in the cache.
@@ -1233,7 +1233,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     // Store a response in the cache.
@@ -1293,7 +1293,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     Request request1 = new Request.Builder()
@@ -1322,7 +1322,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setBody("B"));
 
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     Request cacheStoreRequest = new Request.Builder()
@@ -1369,7 +1369,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     server.enqueue(new MockResponse().setBody("B"));
 
     client = client.newBuilder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     Request request1 = new Request.Builder()
@@ -1477,7 +1477,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     RecordingCookieJar cookieJar = new RecordingCookieJar();
     client = client.newBuilder()
-        .setCookieJar(cookieJar)
+        .cookieJar(cookieJar)
         .build();
 
     Request request = new Request.Builder()
@@ -1503,7 +1503,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         new Cookie.Builder().name("a").value("b").domain(server.getHostName()).build(),
         new Cookie.Builder().name("c").value("d").domain(server.getHostName()).build());
     client = client.newBuilder()
-        .setCookieJar(cookieJar)
+        .cookieJar(cookieJar)
         .build();
 
     Request request = new Request.Builder()
@@ -1530,7 +1530,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     cookie.setPortlist(portList);
     cookieManager.getCookieStore().add(server.url("/").uri(), cookie);
     client = client.newBuilder()
-        .setCookieJar(new JavaNetCookieJar(cookieManager))
+        .cookieJar(new JavaNetCookieJar(cookieManager))
         .build();
 
     Response response = client.newCall(new Request.Builder()
@@ -1554,7 +1554,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .addHeader("Location: " + server2.url("/b")));
 
     client = client.newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")))
+        .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")))
         .build();
 
     Request request = new Request.Builder().url(server.url("/a")).build();
@@ -1802,7 +1802,7 @@ private InetSocketAddress startNullServer() throws IOException {
    * I/O takes place.
    */
   @Test public void canceledBeforeIOSignalsOnFailure() throws Exception {
-    client.getDispatcher().setMaxRequests(1); // Force requests to be executed serially.
+    client.dispatcher().setMaxRequests(1); // Force requests to be executed serially.
     server.setDispatcher(new Dispatcher() {
       char nextResponse = 'A';
 
@@ -1982,7 +1982,7 @@ private InetSocketAddress startNullServer() throws IOException {
         .setBody(gzip("abcabcabc"))
         .addHeader("Content-Encoding: gzip"));
     client = client.newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator("password"))
+        .authenticator(new RecordingOkAuthenticator("password"))
         .build();
 
     Request request = new Request.Builder()
@@ -2047,7 +2047,7 @@ private InetSocketAddress startNullServer() throws IOException {
     server.enqueue(new MockResponse().setBody("B"));
 
     client = client.newBuilder()
-        .setFollowRedirects(false)
+        .followRedirects(false)
         .build();
     RecordedResponse recordedResponse = executeSynchronously(
         new Request.Builder().url(server.url("/a")).build());
@@ -2112,7 +2112,7 @@ private InetSocketAddress startNullServer() throws IOException {
     FakeDns dns = new FakeDns();
     dns.addresses(Dns.SYSTEM.lookup(server.url("/").host()));
     client = client.newBuilder()
-        .setDns(dns)
+        .dns(dns)
         .build();
 
     server.enqueue(new MockResponse());
@@ -2164,9 +2164,9 @@ private InetSocketAddress startNullServer() throws IOException {
 
     RecordingHostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setProxy(server.toProxyAddress())
-        .setHostnameVerifier(hostnameVerifier)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .proxy(server.toProxyAddress())
+        .hostnameVerifier(hostnameVerifier)
         .build();
 
     Request request = new Request.Builder()
@@ -2203,10 +2203,10 @@ private InetSocketAddress startNullServer() throws IOException {
         .setBody("response body"));
 
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setProxy(server.toProxyAddress())
-        .setProxyAuthenticator(new RecordingOkAuthenticator("password"))
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .proxy(server.toProxyAddress())
+        .proxyAuthenticator(new RecordingOkAuthenticator("password"))
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build();
 
     Request request = new Request.Builder()
@@ -2242,9 +2242,9 @@ private InetSocketAddress startNullServer() throws IOException {
         .setBody("response body"));
 
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setProxy(server.toProxyAddress())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .proxy(server.toProxyAddress())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build();
 
     Request request = new Request.Builder()
@@ -2276,7 +2276,7 @@ private void makeFailingCall() {
       }
     };
     OkHttpClient nonRetryingClient = client.newBuilder()
-        .setRetryOnConnectionFailure(false)
+        .retryOnConnectionFailure(false)
         .build();
     Call call = nonRetryingClient.newCall(new Request.Builder()
         .url(server.url("/"))
@@ -2302,15 +2302,15 @@ private RecordedResponse executeSynchronously(Request request) throws IOExceptio
   private void enableProtocol(Protocol protocol) {
     enableTls();
     client = client.newBuilder()
-        .setProtocols(Arrays.asList(protocol, Protocol.HTTP_1_1))
+        .protocols(Arrays.asList(protocol, Protocol.HTTP_1_1))
         .build();
-    server.setProtocols(client.getProtocols());
+    server.setProtocols(client.protocols());
   }
 
   private void enableTls() {
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build();
     server.useHttps(sslContext.getSocketFactory(), false);
   }
diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
index 33e7e56a79..7423f7bfe8 100644
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
@@ -103,7 +103,7 @@
 
   @Test public void connectionsAreNotReusedIfPoolIsSizeZero() throws Exception {
     client = client.newBuilder()
-        .setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS))
+        .connectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS))
         .build();
     server.enqueue(new MockResponse().setBody("a"));
     server.enqueue(new MockResponse().setBody("b"));
@@ -116,7 +116,7 @@
 
   @Test public void connectionsReusedWithRedirectEvenIfPoolIsSizeZero() throws Exception {
     client = client.newBuilder()
-        .setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS))
+        .connectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS))
         .build();
     server.enqueue(new MockResponse()
         .setResponseCode(301)
@@ -135,7 +135,7 @@
 
   @Test public void connectionsNotReusedWithRedirectIfDiscardingResponseIsSlow() throws Exception {
     client = client.newBuilder()
-        .setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS))
+        .connectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS))
         .build();
     server.enqueue(new MockResponse()
         .setResponseCode(301)
@@ -214,7 +214,7 @@
     server.enqueue(new MockResponse().setBody("b"));
 
     client = client.newBuilder()
-        .setConnectionPool(new ConnectionPool(5, 250, TimeUnit.MILLISECONDS))
+        .connectionPool(new ConnectionPool(5, 250, TimeUnit.MILLISECONDS))
         .build();
     Request request = new Request.Builder()
         .url(server.url("/"))
@@ -235,12 +235,12 @@
 
   private void enableHttp2() {
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setProtocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1))
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .protocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1))
         .build();
     server.useHttps(sslContext.getSocketFactory(), false);
-    server.setProtocols(client.getProtocols());
+    server.setProtocols(client.protocols());
   }
 
   private void assertConnectionReused(Request... requests) throws Exception {
diff --git a/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java
index 22aec90efa..5774dd6806 100644
--- a/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/DispatcherTest.java
@@ -18,7 +18,7 @@
   RecordingCallback callback = new RecordingCallback();
   Dispatcher dispatcher = new Dispatcher(executor);
   OkHttpClient client = new OkHttpClient.Builder()
-      .setDispatcher(dispatcher)
+      .dispatcher(dispatcher)
       .build();
 
   @Before public void setUp() throws Exception {
diff --git a/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
index cdb67458b3..dd1f3a977b 100644
--- a/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
@@ -560,7 +560,7 @@ private void interceptorThrowsRuntimeExceptionAsynchronous(boolean network) thro
 
     ExceptionCatchingExecutor executor = new ExceptionCatchingExecutor();
     client = client.newBuilder()
-        .setDispatcher(new Dispatcher(executor))
+        .dispatcher(new Dispatcher(executor))
         .build();
 
     Request request = new Request.Builder()
@@ -586,7 +586,7 @@ private void interceptorThrowsRuntimeExceptionAsynchronous(boolean network) thro
 
     ExceptionCatchingExecutor executor = new ExceptionCatchingExecutor();
     client = client.newBuilder()
-        .setDispatcher(new Dispatcher(executor))
+        .dispatcher(new Dispatcher(executor))
         .build();
 
     Request request = new Request.Builder()
@@ -616,7 +616,7 @@ private void interceptorThrowsRuntimeExceptionAsynchronous(boolean network) thro
 
     ExceptionCatchingExecutor executor = new ExceptionCatchingExecutor();
     client = client.newBuilder()
-        .setDispatcher(new Dispatcher(executor))
+        .dispatcher(new Dispatcher(executor))
         .build();
 
     Request request = new Request.Builder()
diff --git a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
index 5c5ee8a07f..e369a4d4b1 100644
--- a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
@@ -44,35 +44,35 @@
 
   @Test public void timeoutDefaults() {
     OkHttpClient client = defaultClient();
-    assertEquals(10_000, client.getConnectTimeout());
-    assertEquals(10_000, client.getReadTimeout());
-    assertEquals(10_000, client.getWriteTimeout());
+    assertEquals(10_000, client.connectTimeoutMillis());
+    assertEquals(10_000, client.readTimeoutMillis());
+    assertEquals(10_000, client.writeTimeoutMillis());
   }
 
   @Test public void timeoutValidRange() {
     OkHttpClient.Builder builder = new OkHttpClient.Builder();
     try {
-      builder.setConnectTimeout(1, TimeUnit.NANOSECONDS);
+      builder.connectTimeout(1, TimeUnit.NANOSECONDS);
     } catch (IllegalArgumentException ignored) {
     }
     try {
-      builder.setWriteTimeout(1, TimeUnit.NANOSECONDS);
+      builder.writeTimeout(1, TimeUnit.NANOSECONDS);
     } catch (IllegalArgumentException ignored) {
     }
     try {
-      builder.setReadTimeout(1, TimeUnit.NANOSECONDS);
+      builder.readTimeout(1, TimeUnit.NANOSECONDS);
     } catch (IllegalArgumentException ignored) {
     }
     try {
-      builder.setConnectTimeout(365, TimeUnit.DAYS);
+      builder.connectTimeout(365, TimeUnit.DAYS);
     } catch (IllegalArgumentException ignored) {
     }
     try {
-      builder.setWriteTimeout(365, TimeUnit.DAYS);
+      builder.writeTimeout(365, TimeUnit.DAYS);
     } catch (IllegalArgumentException ignored) {
     }
     try {
-      builder.setReadTimeout(365, TimeUnit.DAYS);
+      builder.readTimeout(365, TimeUnit.DAYS);
     } catch (IllegalArgumentException ignored) {
     }
   }
@@ -101,21 +101,21 @@
 
     // Values should be non-null.
     OkHttpClient a = client.newBuilder().build();
-    assertNotNull(a.getDispatcher());
-    assertNotNull(a.getConnectionPool());
-    assertNotNull(a.getSslSocketFactory());
+    assertNotNull(a.dispatcher());
+    assertNotNull(a.connectionPool());
+    assertNotNull(a.sslSocketFactory());
 
     // Multiple clients share the instances.
     OkHttpClient b = client.newBuilder().build();
-    assertSame(a.getDispatcher(), b.getDispatcher());
-    assertSame(a.getConnectionPool(), b.getConnectionPool());
-    assertSame(a.getSslSocketFactory(), b.getSslSocketFactory());
+    assertSame(a.dispatcher(), b.dispatcher());
+    assertSame(a.connectionPool(), b.connectionPool());
+    assertSame(a.sslSocketFactory(), b.sslSocketFactory());
   }
 
   @Test public void setProtocolsRejectsHttp10() throws Exception {
     OkHttpClient.Builder builder = new OkHttpClient.Builder();
     try {
-      builder.setProtocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));
+      builder.protocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1));
       fail();
     } catch (IllegalArgumentException expected) {
     }
diff --git a/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java
index 4f84990c0f..f74cb6f075 100644
--- a/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/SocksProxyTest.java
@@ -49,7 +49,7 @@
     server.enqueue(new MockResponse().setBody("def"));
 
     OkHttpClient client = new OkHttpClient.Builder()
-        .setProxy(socksProxy.proxy())
+        .proxy(socksProxy.proxy())
         .build();
 
     Request request1 = new Request.Builder().url(server.url("/")).build();
@@ -78,7 +78,7 @@
     };
 
     OkHttpClient client = new OkHttpClient.Builder()
-        .setProxySelector(proxySelector)
+        .proxySelector(proxySelector)
         .build();
 
     Request request = new Request.Builder().url(server.url("/")).build();
@@ -93,7 +93,7 @@
     server.enqueue(new MockResponse().setBody("abc"));
 
     OkHttpClient client = new OkHttpClient.Builder()
-        .setProxy(socksProxy.proxy())
+        .proxy(socksProxy.proxy())
         .build();
 
     HttpUrl url = server.url("/")
diff --git a/okhttp-tests/src/test/java/okhttp3/TestUtil.java b/okhttp-tests/src/test/java/okhttp3/TestUtil.java
index ceb969a0e8..a4581960eb 100644
--- a/okhttp-tests/src/test/java/okhttp3/TestUtil.java
+++ b/okhttp-tests/src/test/java/okhttp3/TestUtil.java
@@ -26,8 +26,8 @@ private TestUtil() {
    */
   public static OkHttpClient defaultClient() {
     return new OkHttpClient.Builder()
-        .setConnectionPool(connectionPool)
-        .setDns(new SingleInetAddressDns()) // Prevent unexpected fallback addresses.
+        .connectionPool(connectionPool)
+        .dns(new SingleInetAddressDns()) // Prevent unexpected fallback addresses.
         .build();
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
index 9dff5f5a5f..16aec50b86 100644
--- a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
@@ -109,13 +109,13 @@
   @Rule public final TemporaryFolder tempDir = new TemporaryFolder();
 
   private SSLContext sslContext = SslContextBuilder.localhost();
-  private OkUrlFactory client;
+  private OkUrlFactory urlFactory;
   private HttpURLConnection connection;
   private Cache cache;
 
   @Before public void setUp() throws Exception {
     server.setProtocolNegotiationEnabled(false);
-    client = new OkUrlFactory(defaultClient());
+    urlFactory = new OkUrlFactory(defaultClient());
   }
 
   @After public void tearDown() throws Exception {
@@ -135,7 +135,7 @@
   @Test public void requestHeaders() throws IOException, InterruptedException {
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("D", "e");
     connection.addRequestProperty("D", "f");
     assertEquals("f", connection.getRequestProperty("D"));
@@ -194,7 +194,7 @@
   }
 
   @Test public void getRequestPropertyReturnsLastValue() throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("A", "value1");
     connection.addRequestProperty("A", "value2");
     assertEquals("value2", connection.getRequestProperty("A"));
@@ -207,7 +207,7 @@
         .addHeader("A: e")
         .setChunkedBody("ABCDE\nFGHIJ\nKLMNO\nPQR", 8));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals(200, connection.getResponseCode());
     assertEquals("Fantastic", connection.getResponseMessage());
     assertEquals("HTTP/1.0 200 Fantastic", connection.getHeaderField(null));
@@ -237,7 +237,7 @@
   @Test public void serverSendsInvalidResponseHeaders() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTP/1.1 200 OK"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -248,7 +248,7 @@
   @Test public void serverSendsInvalidCodeTooLarge() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 2147483648 OK"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -259,7 +259,7 @@
   @Test public void serverSendsInvalidCodeNotANumber() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 00a OK"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -270,7 +270,7 @@
   @Test public void serverSendsUnnecessaryWhitespace() throws Exception {
     server.enqueue(new MockResponse().setStatus(" HTTP/1.1 2147483648 OK"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
@@ -282,7 +282,7 @@
     URL url = server.url("/foo").url();
     server.shutdown();
 
-    connection = client.open(url);
+    connection = urlFactory.open(url);
     try {
       connection.connect();
       fail();
@@ -308,12 +308,12 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
     // Use a misconfigured proxy to guarantee that the request is retried.
     FakeProxySelector proxySelector = new FakeProxySelector();
     proxySelector.proxies.add(server2.toProxyAddress());
-    client.setClient(client.client().newBuilder()
-        .setProxySelector(proxySelector)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .proxySelector(proxySelector)
         .build());
     server2.shutdown();
 
-    connection = client.open(server.url("/def").url());
+    connection = urlFactory.open(server.url("/def").url());
     connection.setDoOutput(true);
     transferKind.setForRequest(connection, 4);
     connection.getOutputStream().write("body".getBytes("UTF-8"));
@@ -324,14 +324,14 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
 
   @Test public void getErrorStreamOnSuccessfulRequest() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertNull(connection.getErrorStream());
     connection.getInputStream().close();
   }
 
   @Test public void getErrorStreamOnUnsuccessfulRequest() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(404).setBody("A"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection.getErrorStream(), Integer.MAX_VALUE));
   }
 
@@ -344,9 +344,9 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
     server.enqueue(response);
     server.enqueue(response);
 
-    HttpURLConnection c1 = client.open(server.url("/").url());
+    HttpURLConnection c1 = urlFactory.open(server.url("/").url());
     assertContent("ABCDE", c1, 5);
-    HttpURLConnection c2 = client.open(server.url("/").url());
+    HttpURLConnection c2 = urlFactory.open(server.url("/").url());
     assertContent("ABCDE", c2, 5);
 
     c1.getInputStream().close();
@@ -367,11 +367,11 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
     server.enqueue(response);
     server.enqueue(response);
 
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/foo").url()));
+    assertContent("ABCDEFGHIJKLMNOPQR", urlFactory.open(server.url("/foo").url()));
     assertEquals(0, server.takeRequest().getSequenceNumber());
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/bar?baz=quux").url()));
+    assertContent("ABCDEFGHIJKLMNOPQR", urlFactory.open(server.url("/bar?baz=quux").url()));
     assertEquals(1, server.takeRequest().getSequenceNumber());
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/z").url()));
+    assertContent("ABCDEFGHIJKLMNOPQR", urlFactory.open(server.url("/z").url()));
     assertEquals(2, server.takeRequest().getSequenceNumber());
   }
 
@@ -382,11 +382,11 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
     server.enqueue(response);
     server.enqueue(response);
 
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/foo").url()));
+    assertContent("ABCDEFGHIJKLMNOPQR", urlFactory.open(server.url("/foo").url()));
     assertEquals(0, server.takeRequest().getSequenceNumber());
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/bar?baz=quux").url()));
+    assertContent("ABCDEFGHIJKLMNOPQR", urlFactory.open(server.url("/bar?baz=quux").url()));
     assertEquals(1, server.takeRequest().getSequenceNumber());
-    assertContent("ABCDEFGHIJKLMNOPQR", client.open(server.url("/z").url()));
+    assertContent("ABCDEFGHIJKLMNOPQR", urlFactory.open(server.url("/z").url()));
     assertEquals(2, server.takeRequest().getSequenceNumber());
   }
 
@@ -405,7 +405,7 @@ private void testRequestBodySurvivesRetries(TransferKind transferKind) throws Ex
   @Test public void invalidHost() throws Exception {
     // Note that 1234.1.1.1 is an invalid host in a URI, but URL isn't as strict.
     URL url = new URL("http://1234.1.1.1/index.html");
-    HttpURLConnection connection = client.open(url);
+    HttpURLConnection connection = urlFactory.open(url);
     try {
       connection.connect();
       fail();
@@ -420,7 +420,7 @@ private void testServerClosesOutput(SocketPolicy socketPolicy) throws Exception
     server.enqueue(responseAfter);
     server.enqueue(responseAfter); // Enqueue 2x because the broken connection may be reused.
 
-    HttpURLConnection connection1 = client.open(server.url("/a").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/a").url());
     connection1.setReadTimeout(100);
     assertContent("This connection won't pool properly", connection1);
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -429,7 +429,7 @@ private void testServerClosesOutput(SocketPolicy socketPolicy) throws Exception
     // client has received the response.
     Thread.sleep(500);
 
-    HttpURLConnection connection2 = client.open(server.url("/b").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/b").url());
     connection2.setReadTimeout(100);
     assertContent("This comes after a busted connection", connection2);
 
@@ -473,7 +473,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.setBodyLimit(0);
     server.enqueue(new MockResponse());
 
-    HttpURLConnection conn = client.open(server.url("/").url());
+    HttpURLConnection conn = urlFactory.open(server.url("/").url());
     conn.setDoOutput(true);
     conn.setRequestMethod("POST");
     if (uploadKind == TransferKind.CHUNKED) {
@@ -508,7 +508,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.enqueue(new MockResponse().addHeader("abc: def"));
 
     URL url = server.url("/").url();
-    HttpURLConnection conn = client.open(url);
+    HttpURLConnection conn = urlFactory.open(url);
     conn.setDoInput(false);
     assertEquals("def", conn.getHeaderField("abc"));
     assertEquals(200, conn.getResponseCode());
@@ -523,11 +523,11 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse().setBody("this response comes via HTTPS"));
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
 
     assertContent("this response comes via HTTPS", connection);
 
@@ -539,12 +539,13 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse());
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
 
-    HttpsURLConnection httpsConnection = (HttpsURLConnection) client.open(server.url("/foo").url());
+    HttpsURLConnection httpsConnection
+        = (HttpsURLConnection) urlFactory.open(server.url("/foo").url());
 
     // Prior to calling connect(), getting the cipher suite is forbidden.
     try {
@@ -575,14 +576,14 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     SSLSocketFactory clientSocketFactory = sslContext.getSocketFactory();
     RecordingHostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(clientSocketFactory)
-        .setHostnameVerifier(hostnameVerifier)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(clientSocketFactory)
+        .hostnameVerifier(hostnameVerifier)
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertContent("this response comes via HTTPS", connection);
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertContent("another response via HTTPS", connection);
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -596,17 +597,17 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.enqueue(new MockResponse().setBody("another response via HTTPS"));
 
     // install a custom SSL socket factory so the server can be authorized
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     assertContent("this response comes via HTTPS", connection1);
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(null)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(null)
         .build());
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     try {
       readAscii(connection2.getInputStream(), Integer.MAX_VALUE);
       fail("without an SSL socket factory, the connection should fail");
@@ -619,11 +620,11 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.enqueue(new MockResponse().setSocketPolicy(FAIL_HANDSHAKE));
     server.enqueue(new MockResponse().setBody("this response comes via SSL"));
 
-    client.setClient(client.client().newBuilder()
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setSslSocketFactory(suppressTlsFallbackClientSocketFactory())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(suppressTlsFallbackClientSocketFactory())
         .build());
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
 
     assertContent("this response comes via SSL", connection);
 
@@ -637,12 +638,12 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.enqueue(new MockResponse().setSocketPolicy(FAIL_HANDSHAKE));
     server.enqueue(new MockResponse().setSocketPolicy(FAIL_HANDSHAKE));
 
-    client.setClient(client.client().newBuilder()
-        .setDns(new SingleInetAddressDns())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setSslSocketFactory(suppressTlsFallbackClientSocketFactory())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .dns(new SingleInetAddressDns())
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(suppressTlsFallbackClientSocketFactory())
         .build());
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
 
     try {
       connection.getResponseCode();
@@ -665,17 +666,17 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
         .setSocketPolicy(DISCONNECT_AT_END));
     server.enqueue(new MockResponse().setBody("def"));
 
-    client.setClient(client.client().newBuilder()
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setSslSocketFactory(suppressTlsFallbackClientSocketFactory())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(suppressTlsFallbackClientSocketFactory())
         .build());
 
-    assertContent("abc", client.open(server.url("/").url()));
+    assertContent("abc", urlFactory.open(server.url("/").url()));
 
     // Give the server time to disconnect.
     Thread.sleep(500);
 
-    assertContent("def", client.open(server.url("/").url()));
+    assertContent("def", urlFactory.open(server.url("/").url()));
 
     Set<TlsVersion> tlsVersions =
         EnumSet.of(TlsVersion.TLS_1_0, TlsVersion.TLS_1_2); // v1.2 on OpenJDK 8.
@@ -696,7 +697,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse()); // unused
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     try {
       connection.getInputStream();
       fail();
@@ -723,7 +724,7 @@ private void testConnectViaProxy(ProxyConfig proxyConfig) throws Exception {
     server.enqueue(mockResponse);
 
     URL url = new URL("http://android.com/foo");
-    connection = proxyConfig.connect(server, client, url);
+    connection = proxyConfig.connect(server, urlFactory, url);
     assertContent("this response comes via a proxy", connection);
     assertTrue(connection.usingProxy());
 
@@ -736,7 +737,7 @@ private void testConnectViaProxy(ProxyConfig proxyConfig) throws Exception {
     server.enqueue(new MockResponse().setBody("abc\r\nYOU SHOULD NOT SEE THIS")
         .clearHeaders()
         .addHeader("Content-Length: 3"));
-    assertContent("abc", client.open(server.url("/").url()));
+    assertContent("abc", urlFactory.open(server.url("/").url()));
   }
 
   @Test public void contentDisagreesWithContentLengthHeaderBodyTooShort() throws IOException {
@@ -744,7 +745,7 @@ private void testConnectViaProxy(ProxyConfig proxyConfig) throws Exception {
         .setHeader("Content-Length", "5")
         .setSocketPolicy(DISCONNECT_AT_END));
     try {
-      readAscii(client.open(server.url("/").url()).getInputStream(), 5);
+      readAscii(urlFactory.open(server.url("/").url()).getInputStream(), 5);
       fail();
     } catch (ProtocolException expected) {
     }
@@ -776,28 +777,28 @@ public Socket createSocket(String host, int port, InetAddress localHost, int loc
 
     if (useHttps) {
       server.useHttps(sslContext.getSocketFactory(), false);
-      client.setClient(client.client().newBuilder()
-          .setSslSocketFactory(sslContext.getSocketFactory())
-          .setHostnameVerifier(new RecordingHostnameVerifier())
+      urlFactory.setClient(urlFactory.client().newBuilder()
+          .sslSocketFactory(sslContext.getSocketFactory())
+          .hostnameVerifier(new RecordingHostnameVerifier())
           .build());
     }
 
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));
 
-    client.setClient(client.client().newBuilder()
-        .setSocketFactory(uselessSocketFactory)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .socketFactory(uselessSocketFactory)
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getResponseCode();
       fail();
     } catch (IllegalArgumentException expected) {
     }
 
-    client.setClient(client.client().newBuilder()
-        .setSocketFactory(SocketFactory.getDefault())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .socketFactory(SocketFactory.getDefault())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals(200, connection.getResponseCode());
   }
 
@@ -820,7 +821,7 @@ public Socket createSocket(String host, int port, InetAddress localHost, int loc
 
     server.enqueue(mockResponse);
 
-    assertContent("abc", client.open(server.url("/").url()));
+    assertContent("abc", urlFactory.open(server.url("/").url()));
   }
 
   @Test public void contentDisagreesWithChunkedHeaderBodyTooShort() throws IOException {
@@ -839,7 +840,7 @@ public Socket createSocket(String host, int port, InetAddress localHost, int loc
     server.enqueue(mockResponse);
 
     try {
-      readAscii(client.open(server.url("/").url()).getInputStream(), 5);
+      readAscii(urlFactory.open(server.url("/").url()).getInputStream(), 5);
       fail();
     } catch (ProtocolException expected) {
     }
@@ -859,11 +860,11 @@ private void testConnectViaDirectProxyToHttps(ProxyConfig proxyConfig) throws Ex
     server.enqueue(new MockResponse().setBody("this response comes via HTTPS"));
 
     URL url = server.url("/foo").url();
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
-    connection = proxyConfig.connect(server, client, url);
+    connection = proxyConfig.connect(server, urlFactory, url);
 
     assertContent("this response comes via HTTPS", connection);
 
@@ -900,11 +901,11 @@ private void testConnectViaHttpProxyToHttps(ProxyConfig proxyConfig) throws Exce
     server.enqueue(new MockResponse().setBody("this response comes via a secure proxy"));
 
     URL url = new URL("https://android.com/foo");
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(hostnameVerifier)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(hostnameVerifier)
         .build());
-    connection = proxyConfig.connect(server, client, url);
+    connection = proxyConfig.connect(server, urlFactory, url);
 
     assertContent("this response comes via a secure proxy", connection);
 
@@ -933,16 +934,16 @@ private void testConnectViaHttpProxyToHttps(ProxyConfig proxyConfig) throws Exce
 
     // Configure a single IP address for the host and a single configuration, so we only need one
     // failure to fail permanently.
-    client.setClient(client.client().newBuilder()
-        .setDns(new SingleInetAddressDns())
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setConnectionSpecs(Util.immutableList(ConnectionSpec.MODERN_TLS))
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setProxy(server.toProxyAddress())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .dns(new SingleInetAddressDns())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .connectionSpecs(Util.immutableList(ConnectionSpec.MODERN_TLS))
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .proxy(server.toProxyAddress())
         .build());
 
     URL url = new URL("https://android.com/foo");
-    connection = client.open(url);
+    connection = urlFactory.open(url);
     assertContent("response", connection);
 
     RecordedRequest connect = server.takeRequest();
@@ -952,8 +953,8 @@ private void testConnectViaHttpProxyToHttps(ProxyConfig proxyConfig) throws Exce
 
   private void initResponseCache() throws IOException {
     cache = new Cache(tempDir.getRoot(), Integer.MAX_VALUE);
-    client.setClient(client.client().newBuilder()
-        .setCache(cache)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .cache(cache)
         .build());
   }
 
@@ -967,14 +968,14 @@ private void initResponseCache() throws IOException {
         new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("encrypted response from the origin server"));
 
-    client.setClient(client.client().newBuilder()
-        .setProxy(server.toProxyAddress())
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(hostnameVerifier)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .proxy(server.toProxyAddress())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(hostnameVerifier)
         .build());
 
     URL url = new URL("https://android.com/foo");
-    connection = client.open(url);
+    connection = urlFactory.open(url);
     connection.addRequestProperty("Private", "Secret");
     connection.addRequestProperty("Proxy-Authorization", "bar");
     connection.addRequestProperty("User-Agent", "baz");
@@ -1001,15 +1002,15 @@ private void initResponseCache() throws IOException {
         new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("A"));
 
-    client.setClient(client.client().newBuilder()
-        .setProxyAuthenticator(new JavaNetAuthenticator())
-        .setProxy(server.toProxyAddress())
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .proxyAuthenticator(new JavaNetAuthenticator())
+        .proxy(server.toProxyAddress())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
 
     URL url = new URL("https://android.com/foo");
-    connection = client.open(url);
+    connection = urlFactory.open(url);
     assertContent("A", connection);
 
     RecordedRequest connect1 = server.takeRequest();
@@ -1034,14 +1035,14 @@ private void initResponseCache() throws IOException {
         new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("this response comes via a proxy"));
 
-    client.setClient(client.client().newBuilder()
-        .setProxy(server.toProxyAddress())
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .proxy(server.toProxyAddress())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
 
     URL url = new URL("https://android.com/foo");
-    connection = client.open(url);
+    connection = urlFactory.open(url);
     connection.setRequestProperty("Connection", "close");
 
     assertContent("this response comes via a proxy", connection);
@@ -1057,14 +1058,14 @@ private void initResponseCache() throws IOException {
     server.enqueue(new MockResponse().setBody("response 1"));
     server.enqueue(new MockResponse().setBody("response 2"));
 
-    client.setClient(client.client().newBuilder()
-        .setProxy(server.toProxyAddress())
-        .setSslSocketFactory(socketFactory)
-        .setHostnameVerifier(hostnameVerifier)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .proxy(server.toProxyAddress())
+        .sslSocketFactory(socketFactory)
+        .hostnameVerifier(hostnameVerifier)
         .build());
     URL url = new URL("https://android.com/foo");
-    assertContent("response 1", client.open(url));
-    assertContent("response 2", client.open(url));
+    assertContent("response 1", urlFactory.open(url));
+    assertContent("response 2", urlFactory.open(url));
   }
 
   @Test public void disconnectedConnection() throws IOException {
@@ -1072,7 +1073,7 @@ private void initResponseCache() throws IOException {
         .throttleBody(2, 100, TimeUnit.MILLISECONDS)
         .setBody("ABCD"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals('A', (char) in.read());
     connection.disconnect();
@@ -1091,7 +1092,7 @@ private void initResponseCache() throws IOException {
   @Test public void disconnectBeforeConnect() throws IOException {
     server.enqueue(new MockResponse().setBody("A"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.disconnect();
     assertContent("A", connection);
     assertEquals(200, connection.getResponseCode());
@@ -1137,7 +1138,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
     server.enqueue(response);
     server.enqueue(response);
 
-    InputStream in = client.open(server.url("/").url()).getInputStream();
+    InputStream in = urlFactory.open(server.url("/").url()).getInputStream();
     assertFalse("This implementation claims to support mark().", in.markSupported());
     in.mark(5);
     assertEquals("ABCDE", readAscii(in, 5));
@@ -1148,7 +1149,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
     }
     assertEquals("FGHIJKLMNOPQRSTUVWXYZ", readAscii(in, Integer.MAX_VALUE));
     in.close();
-    assertContent("ABCDEFGHIJKLMNOPQRSTUVWXYZ", client.open(server.url("/").url()));
+    assertContent("ABCDEFGHIJKLMNOPQRSTUVWXYZ", urlFactory.open(server.url("/").url()));
   }
 
   /**
@@ -1164,7 +1165,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
     server.enqueue(response);
 
     URL url = server.url("/").url();
-    HttpURLConnection conn = client.open(url);
+    HttpURLConnection conn = urlFactory.open(url);
 
     assertEquals(401, conn.getResponseCode());
     assertEquals(401, conn.getResponseCode());
@@ -1178,7 +1179,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .clearHeaders()
         .addHeader("Transfer-encoding: chunked"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     try {
       readAscii(connection.getInputStream(), Integer.MAX_VALUE);
       fail();
@@ -1192,7 +1193,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .clearHeaders()
         .addHeader("Transfer-encoding: chunked"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     try {
       readAscii(connection.getInputStream(), Integer.MAX_VALUE);
       fail();
@@ -1207,7 +1208,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .clearHeaders()
         .addHeader("Transfer-encoding: chunked"));
 
-    HttpURLConnection connection = client.open(server.url("/").url());
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     assertContent("ABCDE", connection);
   }
 
@@ -1217,7 +1218,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .addHeader("Transfer-encoding: chunked")
         .setSocketPolicy(DISCONNECT_AT_END));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     try {
       readAscii(connection.getInputStream(), Integer.MAX_VALUE);
       fail();
@@ -1236,7 +1237,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .setBody(gzip("ABCABCABC"))
         .addHeader("Content-Encoding: gzip"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("ABCABCABC", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
     assertNull(connection.getContentEncoding());
     assertEquals(-1, connection.getContentLength());
@@ -1251,7 +1252,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
         .setBody(bodyBytes)
         .addHeader("Content-Encoding: gzip"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Accept-Encoding", "gzip");
     InputStream gunzippedIn = new GZIPInputStream(connection.getInputStream());
     assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ", readAscii(gunzippedIn, Integer.MAX_VALUE));
@@ -1280,7 +1281,7 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
   @Test public void clientConfiguredCustomContentEncoding() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE").addHeader("Content-Encoding: custom"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Accept-Encoding", "custom");
     assertEquals("ABCDE", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -1290,7 +1291,8 @@ private void testMarkAndReset(TransferKind transferKind) throws IOException {
 
   /**
    * Test a bug where gzip input streams weren't exhausting the input stream, which corrupted the
-   * request that followed or prevented connection reuse. http://code.google.com/p/android/issues/detail?id=7059
+   * request that followed or prevented connection reuse.
+   * http://code.google.com/p/android/issues/detail?id=7059
    * http://code.google.com/p/android/issues/detail?id=38817
    */
   private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferKind transferKind,
@@ -1299,9 +1301,9 @@ private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferK
       SSLSocketFactory socketFactory = sslContext.getSocketFactory();
       RecordingHostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();
       server.useHttps(socketFactory, false);
-      client.setClient(client.client().newBuilder()
-          .setSslSocketFactory(socketFactory)
-          .setHostnameVerifier(hostnameVerifier)
+      urlFactory.setClient(urlFactory.client().newBuilder()
+          .sslSocketFactory(socketFactory)
+          .hostnameVerifier(hostnameVerifier)
           .build());
     }
 
@@ -1313,13 +1315,13 @@ private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferK
     transferKind.setBody(responseTwo, "two (identity)", 5);
     server.enqueue(responseTwo);
 
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     connection1.addRequestProperty("Accept-Encoding", "gzip");
     InputStream gunzippedIn = new GZIPInputStream(connection1.getInputStream());
     assertEquals("one (gzipped)", readAscii(gunzippedIn, Integer.MAX_VALUE));
     assertEquals(0, server.takeRequest().getSequenceNumber());
 
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     assertEquals("two (identity)", readAscii(connection2.getInputStream(), Integer.MAX_VALUE));
     assertEquals(1, server.takeRequest().getSequenceNumber());
   }
@@ -1333,28 +1335,28 @@ private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferK
         .setBody(gzip("b")));
 
     // Seed the pool with a bad connection.
-    assertContent("a", client.open(server.url("/").url()));
+    assertContent("a", urlFactory.open(server.url("/").url()));
 
     // Give the server time to disconnect.
     Thread.sleep(500);
 
     // This connection will need to be recovered. When it is, transparent gzip should still work!
-    assertContent("b", client.open(server.url("/").url()));
+    assertContent("b", urlFactory.open(server.url("/").url()));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(0, server.takeRequest().getSequenceNumber()); // Connection is not pooled.
   }
 
   @Test public void endOfStreamResponseIsNotPooled() throws Exception {
-    client.client().getConnectionPool().evictAll();
+    urlFactory.client().connectionPool().evictAll();
     server.enqueue(new MockResponse()
         .setBody("{}")
         .clearHeaders()
         .setSocketPolicy(DISCONNECT_AT_END));
 
-    HttpURLConnection connection = client.open(server.url("/").url());
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     assertContent("{}", connection);
-    assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());
+    assertEquals(0, urlFactory.client().connectionPool().getIdleConnectionCount());
   }
 
   @Test public void earlyDisconnectDoesntHarmPoolingWithChunkedEncoding() throws Exception {
@@ -1374,13 +1376,13 @@ private void testEarlyDisconnectDoesntHarmPooling(TransferKind transferKind) thr
     transferKind.setBody(response2, "LMNOPQRSTUV", 1024);
     server.enqueue(response2);
 
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     InputStream in1 = connection1.getInputStream();
     assertEquals("ABCDE", readAscii(in1, 5));
     in1.close();
     connection1.disconnect();
 
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     InputStream in2 = connection2.getInputStream();
     assertEquals("LMNOP", readAscii(in2, 5));
     in2.close();
@@ -1398,7 +1400,7 @@ private void testEarlyDisconnectDoesntHarmPooling(TransferKind transferKind) thr
     server.enqueue(new MockResponse().setBody("A"));
 
     long startNanos = System.nanoTime();
-    URLConnection connection1 = client.open(server.url("/").url());
+    URLConnection connection1 = urlFactory.open(server.url("/").url());
     InputStream in = connection1.getInputStream();
     in.close();
     long elapsedNanos = System.nanoTime() - startNanos;
@@ -1410,7 +1412,7 @@ private void testEarlyDisconnectDoesntHarmPooling(TransferKind transferKind) thr
     assertTrue(String.format("Time to close: %sms", elapsedMillis), elapsedMillis < 500);
 
     // Do another request to confirm that the discarded connection was not pooled.
-    assertContent("A", client.open(server.url("/").url()));
+    assertContent("A", urlFactory.open(server.url("/").url()));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(0, server.takeRequest().getSequenceNumber()); // Connection is not pooled.
@@ -1420,7 +1422,7 @@ private void testEarlyDisconnectDoesntHarmPooling(TransferKind transferKind) thr
     server.enqueue(new MockResponse());
 
     String body = "ABCDEFGHIJKLMNOPQ";
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setChunkedStreamingMode(0); // OkHttp does not honor specific chunk sizes.
     connection.setDoOutput(true);
     OutputStream outputStream = connection.getOutputStream();
@@ -1448,10 +1450,10 @@ private void testAuthenticateWithStreamingPost(StreamingMode streamingMode) thro
     server.enqueue(pleaseAuthenticate);
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new JavaNetAuthenticator())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new JavaNetAuthenticator())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] requestBody = {'A', 'B', 'C', 'D'};
     if (streamingMode == StreamingMode.FIXED_LENGTH) {
@@ -1508,11 +1510,11 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     server.enqueue(new MockResponse());
 
     String credential = Credentials.basic("jesse", "secret");
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator(credential))
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build());
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     OutputStream outputStream = connection.getOutputStream();
     outputStream.write(body.getBytes("UTF-8"));
@@ -1591,16 +1593,16 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setBody("Please authenticate.");
     server.enqueue(pleaseAuthenticate);
 
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new JavaNetAuthenticator())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new JavaNetAuthenticator())
         .build());
     if (proxy) {
-      client.setClient(client.client().newBuilder()
-          .setProxy(server.toProxyAddress())
+      urlFactory.setClient(urlFactory.client().newBuilder()
+          .proxy(server.toProxyAddress())
           .build());
-      connection = client.open(new URL("http://android.com"));
+      connection = urlFactory.open(new URL("http://android.com"));
     } else {
-      connection = client.open(server.url("/").url());
+      connection = urlFactory.open(server.url("/").url());
     }
     assertEquals(responseCode, connection.getResponseCode());
     connection.getErrorStream().close();
@@ -1619,7 +1621,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
   }
 
   private void assertValidRequestMethod(String requestMethod) throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setRequestMethod(requestMethod);
     assertEquals(requestMethod, connection.getRequestMethod());
   }
@@ -1633,7 +1635,7 @@ private void assertValidRequestMethod(String requestMethod) throws Exception {
   }
 
   private void assertInvalidRequestMethod(String requestMethod) throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.setRequestMethod(requestMethod);
       fail();
@@ -1660,14 +1662,14 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
         .addHeader("Expires: Mon, 26 Jul 1997 05:00:00 GMT")
         .addHeader("icy-metaint:16000")
         .setBody("mp3 data"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals(200, connection.getResponseCode());
     assertEquals("OK", connection.getResponseMessage());
     assertContent("mp3 data", connection);
   }
 
   @Test public void cannotSetNegativeFixedLengthStreamingMode() throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.setFixedLengthStreamingMode(-2);
       fail();
@@ -1676,13 +1678,13 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
   }
 
   @Test public void canSetNegativeChunkedStreamingMode() throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setChunkedStreamingMode(-2);
   }
 
   @Test public void cannotSetFixedLengthStreamingModeAfterConnect() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
     try {
       connection.setFixedLengthStreamingMode(1);
@@ -1693,7 +1695,7 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
 
   @Test public void cannotSetChunkedStreamingModeAfterConnect() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
     try {
       connection.setChunkedStreamingMode(1);
@@ -1703,7 +1705,7 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
   }
 
   @Test public void cannotSetFixedLengthStreamingModeAfterChunkedStreamingMode() throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setChunkedStreamingMode(1);
     try {
       connection.setFixedLengthStreamingMode(1);
@@ -1713,7 +1715,7 @@ private void assertInvalidRequestMethod(String requestMethod) throws Exception {
   }
 
   @Test public void cannotSetChunkedStreamingModeAfterFixedLengthStreamingMode() throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setFixedLengthStreamingMode(1);
     try {
       connection.setChunkedStreamingMode(1);
@@ -1738,11 +1740,11 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse().setBody("Success!"));
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] requestBody = {'A', 'B', 'C', 'D'};
     if (streamingMode == StreamingMode.FIXED_LENGTH) {
@@ -1781,10 +1783,10 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new JavaNetAuthenticator())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new JavaNetAuthenticator())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] requestBody = {'A', 'B', 'C', 'D'};
     OutputStream outputStream = connection.getOutputStream();
@@ -1818,10 +1820,10 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new JavaNetAuthenticator())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new JavaNetAuthenticator())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
     // no authorization header for the first request...
@@ -1853,10 +1855,10 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(successfulResponse);
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new JavaNetAuthenticator())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new JavaNetAuthenticator())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
     // no authorization header for the first request...
@@ -1880,10 +1882,10 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new JavaNetAuthenticator())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new JavaNetAuthenticator())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
 
@@ -1906,7 +1908,7 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
     server.enqueue(response);
     server.enqueue(new MockResponse().setBody("This is the new location!"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("This is the new location!",
         readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -1926,11 +1928,11 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("This is the new location!"));
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("This is the new location!",
         readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -1947,12 +1949,12 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
         .addHeader("Location: http://anyhost/foo")
         .setBody("This page has moved!"));
 
-    client.setClient(client.client().newBuilder()
-        .setFollowSslRedirects(false)
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .followSslRedirects(false)
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("This page has moved!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
 
@@ -1961,10 +1963,10 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
         .addHeader("Location: https://anyhost/foo")
         .setBody("This page has moved!"));
 
-    client.setClient(client.client().newBuilder()
-        .setFollowSslRedirects(false)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .followSslRedirects(false)
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("This page has moved!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
 
@@ -1976,12 +1978,12 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
         .addHeader("Location: " + server2.url("/").url())
         .setBody("This page has moved!"));
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setFollowSslRedirects(true)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .followSslRedirects(true)
         .build());
-    HttpsURLConnection connection = (HttpsURLConnection) client.open(server.url("/").url());
+    HttpsURLConnection connection = (HttpsURLConnection) urlFactory.open(server.url("/").url());
     assertContent("This is insecure HTTP!", connection);
     assertNull(connection.getCipherSuite());
     assertNull(connection.getLocalCertificates());
@@ -1998,12 +2000,12 @@ private void testRedirected(TransferKind transferKind, boolean reuse) throws Exc
         .addHeader("Location: " + server2.url("/").url())
         .setBody("This page has moved!"));
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setFollowSslRedirects(true)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .followSslRedirects(true)
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertContent("This is secure HTTPS!", connection);
     assertFalse(connection instanceof HttpsURLConnection);
   }
@@ -2021,9 +2023,9 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
       server.useHttps(sslContext.getSocketFactory(), false);
       server2.useHttps(sslContext.getSocketFactory(), false);
       server2.setProtocolNegotiationEnabled(false);
-      client.setClient(client.client().newBuilder()
-          .setSslSocketFactory(sslContext.getSocketFactory())
-          .setHostnameVerifier(new RecordingHostnameVerifier())
+      urlFactory.setClient(urlFactory.client().newBuilder()
+          .sslSocketFactory(sslContext.getSocketFactory())
+          .hostnameVerifier(new RecordingHostnameVerifier())
           .build());
     }
 
@@ -2035,13 +2037,13 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("This is the first server again!"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertContent("This is the 2nd server!", connection);
     assertEquals(server2.url("/").url(), connection.getURL());
 
     // make sure the first server was careful to recycle the connection
-    assertContent("This is the first server again!", client.open(server.url("/").url()));
-    assertContent("This is the 2nd server, again!", client.open(server2.url("/").url()));
+    assertContent("This is the first server again!", urlFactory.open(server.url("/").url()));
+    assertContent("This is the 2nd server, again!", urlFactory.open(server2.url("/").url()));
 
     String server1Host = server.getHostName() + ":" + server.getPort();
     String server2Host = server2.getHostName() + ":" + server2.getPort();
@@ -2053,8 +2055,8 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
 
   @Test public void redirectWithProxySelector() throws Exception {
     final List<URI> proxySelectionRequests = new ArrayList<URI>();
-    client.setClient(client.client().newBuilder()
-        .setProxySelector(new ProxySelector() {
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .proxySelector(new ProxySelector() {
           @Override public List<Proxy> select(URI uri) {
             proxySelectionRequests.add(uri);
             MockWebServer proxyServer = (uri.getPort() == server.getPort())
@@ -2075,7 +2077,7 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
         .addHeader("Location: " + server2.url("/b").url().toString())
         .setBody("This page has moved!"));
 
-    assertContent("This is the 2nd server!", client.open(server.url("/a").url()));
+    assertContent("This is the 2nd server!", urlFactory.open(server.url("/a").url()));
 
     assertEquals(Arrays.asList(server.url("/").url().toURI(), server2.url("/").url().toURI()),
         proxySelectionRequests);
@@ -2088,10 +2090,10 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
     server.enqueue(new MockResponse().setResponseCode(302)
         .addHeader("Location: " + server2.url("/b").url()));
 
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")))
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new RecordingOkAuthenticator(Credentials.basic("jesse", "secret")))
         .build());
-    assertContent("Page 2", client.open(server.url("/a").url()));
+    assertContent("Page 2", urlFactory.open(server.url("/a").url()));
 
     RecordedRequest redirectRequest = server2.takeRequest();
     assertNull(redirectRequest.getHeader("Authorization"));
@@ -2130,7 +2132,7 @@ private void testResponseRedirectedWithPost(int redirectCode, TransferKind trans
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("Page 2"));
 
-    connection = client.open(server.url("/page1").url());
+    connection = urlFactory.open(server.url("/page1").url());
     connection.setDoOutput(true);
     transferKind.setForRequest(connection, 4);
     byte[] requestBody = {'A', 'B', 'C', 'D'};
@@ -2153,7 +2155,7 @@ private void testResponseRedirectedWithPost(int redirectCode, TransferKind trans
         .addHeader("Location: /page2"));
     server.enqueue(new MockResponse().setBody("Page 2"));
 
-    connection = client.open(server.url("/page1").url());
+    connection = urlFactory.open(server.url("/page1").url());
     connection.setDoOutput(true);
     connection.addRequestProperty("Content-Length", "4");
     connection.addRequestProperty("Content-Type", "text/plain; charset=utf-8");
@@ -2178,7 +2180,7 @@ private void testResponseRedirectedWithPost(int redirectCode, TransferKind trans
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("Proxy Response"));
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     // Fails on the RI, which gets "Proxy Response"
     assertEquals("This page has moved!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -2229,7 +2231,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     server.enqueue(response1);
     server.enqueue(new MockResponse().setBody("Page 2"));
 
-    connection = client.open(server.url("/page1").url());
+    connection = urlFactory.open(server.url("/page1").url());
     connection.setRequestMethod(method);
     byte[] requestBody = {'A', 'B', 'C', 'D'};
     if (method.equals("POST")) {
@@ -2274,7 +2276,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     }
     server.enqueue(new MockResponse().setBody("Success!"));
 
-    connection = client.open(server.url("/0").url());
+    connection = urlFactory.open(server.url("/0").url());
     assertContent("Success!", connection);
     assertEquals(server.url("/20").url(), connection.getURL());
   }
@@ -2286,7 +2288,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
           .setBody("Redirecting to /" + (i + 1)));
     }
 
-    connection = client.open(server.url("/0").url());
+    connection = urlFactory.open(server.url("/0").url());
     try {
       connection.getInputStream();
       fail();
@@ -2304,9 +2306,9 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     SSLContext sc = SSLContext.getInstance("TLS");
     sc.init(null, new TrustManager[] {trustManager}, new java.security.SecureRandom());
 
-    client.setClient(client.client().newBuilder()
-        .setHostnameVerifier(hostnameVerifier)
-        .setSslSocketFactory(sc.getSocketFactory())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .hostnameVerifier(hostnameVerifier)
+        .sslSocketFactory(sc.getSocketFactory())
         .build());
     server.useHttps(sslContext.getSocketFactory(), false);
     server.enqueue(new MockResponse().setBody("ABC"));
@@ -2314,9 +2316,9 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     server.enqueue(new MockResponse().setBody("GHI"));
 
     URL url = server.url("/").url();
-    assertContent("ABC", client.open(url));
-    assertContent("DEF", client.open(url));
-    assertContent("GHI", client.open(url));
+    assertContent("ABC", urlFactory.open(url));
+    assertContent("DEF", urlFactory.open(url));
+    assertContent("GHI", urlFactory.open(url));
 
     assertEquals(Arrays.asList("verify " + server.getHostName()),
         hostnameVerifier.calls);
@@ -2333,7 +2335,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     server.enqueue(timeout);
     server.enqueue(new MockResponse().setBody("unused")); // to keep the server alive
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.setReadTimeout(1000);
     InputStream in = connection.getInputStream();
     assertEquals('A', in.read());
@@ -2362,22 +2364,22 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
             return serverSocket;
           }
         });
-    client.setClient(client.client().newBuilder()
-        .setSocketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .socketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {
           @Override protected Socket configureSocket(Socket socket) throws IOException {
             socket.setReceiveBufferSize(SOCKET_BUFFER_SIZE);
             socket.setSendBufferSize(SOCKET_BUFFER_SIZE);
             return socket;
           }
         })
-        .setWriteTimeout(500, TimeUnit.MILLISECONDS)
+        .writeTimeout(500, TimeUnit.MILLISECONDS)
         .build());
 
     server.start();
     server.enqueue(new MockResponse()
         .throttleBody(1, 1, TimeUnit.SECONDS)); // Prevent the server from reading!
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     connection.setChunkedStreamingMode(0);
     OutputStream out = connection.getOutputStream();
@@ -2392,7 +2394,7 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
   @Test public void setChunkedEncodingAsRequestProperty() throws IOException, InterruptedException {
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setRequestProperty("Transfer-encoding", "chunked");
     connection.setDoOutput(true);
     connection.getOutputStream().write("ABC".getBytes("UTF-8"));
@@ -2406,11 +2408,11 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
     server.enqueue(new MockResponse()); // server doesn't honor the connection: close header!
     server.enqueue(new MockResponse());
 
-    HttpURLConnection a = client.open(server.url("/").url());
+    HttpURLConnection a = urlFactory.open(server.url("/").url());
     a.setRequestProperty("Connection", "close");
     assertEquals(200, a.getResponseCode());
 
-    HttpURLConnection b = client.open(server.url("/").url());
+    HttpURLConnection b = urlFactory.open(server.url("/").url());
     assertEquals(200, b.getResponseCode());
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -2422,10 +2424,10 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
     server.enqueue(new MockResponse().addHeader("Connection: close"));
     server.enqueue(new MockResponse());
 
-    HttpURLConnection a = client.open(server.url("/").url());
+    HttpURLConnection a = urlFactory.open(server.url("/").url());
     assertEquals(200, a.getResponseCode());
 
-    HttpURLConnection b = client.open(server.url("/").url());
+    HttpURLConnection b = urlFactory.open(server.url("/").url());
     assertEquals(200, b.getResponseCode());
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -2442,7 +2444,7 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
     server.enqueue(new MockResponse()
         .setBody("This is the new location!"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("This is the new location!",
         readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -2457,8 +2459,8 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
    */
   @Test public void sameConnectionRedirectAndReuse() throws Exception {
     // TODO(jwilson): this behavior shouldn't rely on having another IP address to attempt.
-    client.setClient(client.client().newBuilder()
-        .setDns(new DoubleInetAddressDns())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .dns(new DoubleInetAddressDns())
         .build());
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP)
@@ -2467,7 +2469,7 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
     server.enqueue(new MockResponse()
         .setBody("This is the new page!"));
 
-    assertContent("This is the new page!", client.open(server.url("/").url()));
+    assertContent("This is the new page!", urlFactory.open(server.url("/").url()));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(0, server.takeRequest().getSequenceNumber());
@@ -2477,7 +2479,7 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NO_CONTENT)
         .setBody("This body is not allowed!"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("This body is not allowed!",
         readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
@@ -2485,7 +2487,7 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
   @Test public void singleByteReadIsSigned() throws IOException {
     server.enqueue(new MockResponse().setBody(new Buffer().writeByte(-2).writeByte(-1)));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals(254, in.read());
     assertEquals(255, in.read());
@@ -2512,7 +2514,7 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
   private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws IOException {
     server.enqueue(new MockResponse().setBody("abc"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] upload = "def".getBytes("UTF-8");
 
@@ -2537,7 +2539,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
   @Test public void getHeadersThrows() throws IOException {
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AT_START));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getInputStream();
       fail();
@@ -2552,7 +2554,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
   }
 
   @Test public void dnsFailureThrowsIOException() throws IOException {
-    connection = client.open(new URL("http://host.unlikelytld"));
+    connection = urlFactory.open(new URL("http://host.unlikelytld"));
     try {
       connection.connect();
       fail();
@@ -2561,7 +2563,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
   }
 
   @Test public void malformedUrlThrowsUnknownHostException() throws IOException {
-    connection = client.open(new URL("http://./foo.html"));
+    connection = urlFactory.open(new URL("http://./foo.html"));
     try {
       connection.connect();
       fail();
@@ -2573,13 +2575,13 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
     server.enqueue(new MockResponse().setBody("ABC"));
 
     // The request should work once and then fail
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     connection1.setReadTimeout(100);
     InputStream input = connection1.getInputStream();
     assertEquals("ABC", readAscii(input, Integer.MAX_VALUE));
     server.shutdown();
     try {
-      HttpURLConnection connection2 = client.open(server.url("").url());
+      HttpURLConnection connection2 = urlFactory.open(server.url("").url());
       connection2.setReadTimeout(100);
       connection2.getInputStream();
       fail();
@@ -2594,7 +2596,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
         .addHeader("Connection: close")
         .setSocketPolicy(DISCONNECT_AT_END));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals("ABC", readAscii(in, 3));
     assertEquals(-1, in.read());
@@ -2603,14 +2605,14 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
 
   @Test public void getContent() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Type: text/plain").setBody("A"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     InputStream in = (InputStream) connection.getContent();
     assertEquals("A", readAscii(in, Integer.MAX_VALUE));
   }
 
   @Test public void getContentOfType() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Type: text/plain").setBody("A"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getContent(null);
       fail();
@@ -2627,7 +2629,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
 
   @Test public void getOutputStreamOnGetFails() throws Exception {
     server.enqueue(new MockResponse());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getOutputStream();
       fail();
@@ -2638,7 +2640,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
 
   @Test public void getOutputAfterGetInputStreamFails() throws Exception {
     server.enqueue(new MockResponse());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     try {
       connection.getInputStream();
@@ -2650,7 +2652,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
 
   @Test public void setDoOutputOrDoInputAfterConnectFails() throws Exception {
     server.enqueue(new MockResponse());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.connect();
     try {
       connection.setDoOutput(true);
@@ -2667,7 +2669,7 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
 
   @Test public void clientSendsContentLength() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     OutputStream out = connection.getOutputStream();
     out.write(new byte[] {'A', 'B', 'C'});
@@ -2680,21 +2682,21 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
 
   @Test public void getContentLengthConnects() throws Exception {
     server.enqueue(new MockResponse().setBody("ABC"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals(3, connection.getContentLength());
     connection.getInputStream().close();
   }
 
   @Test public void getContentTypeConnects() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Type: text/plain").setBody("ABC"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("text/plain", connection.getContentType());
     connection.getInputStream().close();
   }
 
   @Test public void getContentEncodingConnects() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Encoding: identity").setBody("ABC"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("identity", connection.getContentEncoding());
     connection.getInputStream().close();
   }
@@ -2704,13 +2706,13 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
     server.enqueue(new MockResponse().setBody("A"));
 
     URL url = new URL("http", server.getHostName(), server.getPort(), "?query");
-    assertEquals("A", readAscii(client.open(url).getInputStream(), Integer.MAX_VALUE));
+    assertEquals("A", readAscii(urlFactory.open(url).getInputStream(), Integer.MAX_VALUE));
     RecordedRequest request = server.takeRequest();
     assertEquals("GET /?query HTTP/1.1", request.getRequestLine());
   }
 
   @Test public void doOutputForMethodThatDoesntSupportOutput() throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setRequestMethod("HEAD");
     connection.setDoOutput(true);
     try {
@@ -2738,7 +2740,7 @@ private void testInputStreamAvailable(TransferKind transferKind) throws IOExcept
     MockResponse response = new MockResponse();
     transferKind.setBody(response, body, 4);
     server.enqueue(response);
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     for (int i = 0; i < body.length(); i++) {
       assertTrue(in.available() >= 0);
@@ -2778,7 +2780,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     server.enqueue(new MockResponse().setBody("B"));
     server.enqueue(new MockResponse().setBody("C"));
 
-    assertContent("A", client.open(server.url("/a").url()));
+    assertContent("A", urlFactory.open(server.url("/a").url()));
 
     // Give the server time to disconnect.
     Thread.sleep(500);
@@ -2789,7 +2791,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
     for (int j = 0; j < 2; j++) {
       try {
-        connection = client.open(server.url("/b").url());
+        connection = urlFactory.open(server.url("/b").url());
         connection.setRequestMethod("POST");
         transferKind.setForRequest(connection, requestBody.length);
         for (int i = 0; i < requestBody.length; i += 1024) {
@@ -2819,9 +2821,9 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     server.enqueue(new MockResponse().setBody("def"));
 
     // Seed the connection pool so we have something that can fail.
-    assertContent("abc", client.open(server.url("/").url()));
+    assertContent("abc", urlFactory.open(server.url("/").url()));
 
-    HttpURLConnection post = client.open(server.url("/").url());
+    HttpURLConnection post = urlFactory.open(server.url("/").url());
     post.setDoOutput(true);
     post.getOutputStream().write("body!".getBytes(UTF_8));
     assertContent("def", post);
@@ -2841,7 +2843,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
   @Test public void fullyBufferedPostIsTooShort() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
 
-    connection = client.open(server.url("/b").url());
+    connection = urlFactory.open(server.url("/b").url());
     connection.setRequestProperty("Content-Length", "4");
     connection.setRequestMethod("POST");
     OutputStream out = connection.getOutputStream();
@@ -2858,7 +2860,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
   @Test public void fullyBufferedPostIsTooLong() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
 
-    connection = client.open(server.url("/b").url());
+    connection = urlFactory.open(server.url("/b").url());
     connection.setRequestProperty("Content-Length", "3");
     connection.setRequestMethod("POST");
     OutputStream out = connection.getOutputStream();
@@ -2899,7 +2901,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
   @Test public void emptyRequestHeaderValueIsAllowed() throws Exception {
     server.enqueue(new MockResponse().setBody("body"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("B", "");
     assertContent("body", connection);
     assertEquals("", connection.getRequestProperty("B"));
@@ -2907,14 +2909,14 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
   @Test public void emptyResponseHeaderValueIsAllowed() throws Exception {
     server.enqueue(new MockResponse().addHeader("A:").setBody("body"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertContent("body", connection);
     assertEquals("", connection.getHeaderField("A"));
   }
 
   @Test public void emptyRequestHeaderNameIsStrict() throws Exception {
     server.enqueue(new MockResponse().setBody("body"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.setRequestProperty("", "A");
       fail();
@@ -2926,14 +2928,14 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     Headers.Builder headers = new Headers.Builder();
     Internal.instance.addLenient(headers, ":A");
     server.enqueue(new MockResponse().setHeaders(headers.build()).setBody("body"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.getResponseCode();
     assertEquals("A", connection.getHeaderField(""));
     connection.getInputStream().close();
   }
 
   @Test public void requestHeaderValidationIsStrict() throws Exception {
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.addRequestProperty("a\tb", "Value");
       fail();
@@ -2970,7 +2972,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
         .build();
     server.enqueue(new MockResponse().setHeaders(headers));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.getResponseCode();
     assertEquals("c\u007fd", connection.getHeaderField("a\tb"));
     assertEquals("\u2615\ufe0f", connection.getHeaderField("\ud83c\udf69"));
@@ -2998,10 +3000,10 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
     String credential = Credentials.basic("jesse", "peanutbutter");
     RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(credential);
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(authenticator)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(authenticator)
         .build());
-    assertContent("A", client.open(server.url("/private").url()));
+    assertContent("A", urlFactory.open(server.url("/private").url()));
 
     assertNull(server.takeRequest().getHeader("Authorization"));
     assertEquals(credential, server.takeRequest().getHeader("Authorization"));
@@ -3020,10 +3022,10 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     server.enqueue(new MockResponse().setBody("A"));
 
     RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator("oauthed abc123");
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(authenticator)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(authenticator)
         .build());
-    assertContent("A", client.open(server.url("/private").url()));
+    assertContent("A", urlFactory.open(server.url("/private").url()));
 
     assertNull(server.takeRequest().getHeader("Authorization"));
     assertEquals("oauthed abc123", server.takeRequest().getHeader("Authorization"));
@@ -3044,10 +3046,10 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
     RecordingOkAuthenticator authenticator = new RecordingOkAuthenticator(
         Credentials.basic("jesse", "peanutbutter"));
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(authenticator)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(authenticator)
         .build());
-    assertContent("c", client.open(server.url("/a").url()));
+    assertContent("c", urlFactory.open(server.url("/a").url()));
 
     Response challengeResponse = authenticator.responses.get(0);
     assertEquals("/b", challengeResponse.request().url().url().getPath());
@@ -3063,11 +3065,11 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     server.enqueue(new MockResponse().setBody("Success!"));
 
     String credential = Credentials.basic("jesse", "peanutbutter");
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator(credential))
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build());
 
-    connection = client.open(server.url("/0").url());
+    connection = urlFactory.open(server.url("/0").url());
     assertContent("Success!", connection);
   }
 
@@ -3077,11 +3079,11 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     }
 
     String credential = Credentials.basic("jesse", "peanutbutter");
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new RecordingOkAuthenticator(credential))
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new RecordingOkAuthenticator(credential))
         .build());
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     try {
       connection.getInputStream();
       fail();
@@ -3102,10 +3104,10 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
   private void setsNegotiatedProtocolHeader(Protocol protocol) throws IOException {
     enableProtocol(protocol);
     server.enqueue(new MockResponse().setBody("A"));
-    client.setClient(client.client().newBuilder()
-        .setProtocols(Arrays.asList(protocol, Protocol.HTTP_1_1))
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .protocols(Arrays.asList(protocol, Protocol.HTTP_1_1))
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);
     assertEquals(Arrays.asList(protocol.toString()), protocolValues);
     assertContent("A", connection);
@@ -3113,14 +3115,14 @@ private void setsNegotiatedProtocolHeader(Protocol protocol) throws IOException
 
   @Test public void http10SelectedProtocol() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTTP/1.0 200 OK"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);
     assertEquals(Arrays.asList("http/1.0"), protocolValues);
   }
 
   @Test public void http11SelectedProtocol() throws Exception {
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 OK"));
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     List<String> protocolValues = connection.getHeaderFields().get(SELECTED_PROTOCOL);
     assertEquals(Arrays.asList("http/1.1"), protocolValues);
   }
@@ -3158,7 +3160,7 @@ private void setsNegotiatedProtocolHeader(Protocol protocol) throws IOException
   private void zeroLengthPayload(String method)
       throws IOException, InterruptedException {
     server.enqueue(new MockResponse());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setRequestProperty("Content-Length", "0");
     connection.setRequestMethod(method);
     connection.setFixedLengthStreamingMode(0);
@@ -3173,7 +3175,7 @@ private void zeroLengthPayload(String method)
   @Test public void unspecifiedRequestBodyContentTypeGetsDefault() throws Exception {
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     connection.getOutputStream().write("abc".getBytes(UTF_8));
     assertEquals(200, connection.getResponseCode());
@@ -3186,15 +3188,15 @@ private void zeroLengthPayload(String method)
 
   @Test public void setProtocols() throws Exception {
     server.enqueue(new MockResponse().setBody("A"));
-    client.setClient(client.client().newBuilder()
-        .setProtocols(Arrays.asList(Protocol.HTTP_1_1))
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .protocols(Arrays.asList(Protocol.HTTP_1_1))
         .build());
-    assertContent("A", client.open(server.url("/").url()));
+    assertContent("A", urlFactory.open(server.url("/").url()));
   }
 
   @Test public void setProtocolsWithoutHttp11() throws Exception {
     try {
-      new OkHttpClient.Builder().setProtocols(Arrays.asList(Protocol.SPDY_3));
+      new OkHttpClient.Builder().protocols(Arrays.asList(Protocol.SPDY_3));
       fail();
     } catch (IllegalArgumentException expected) {
     }
@@ -3202,7 +3204,7 @@ private void zeroLengthPayload(String method)
 
   @Test public void setProtocolsWithNull() throws Exception {
     try {
-      new OkHttpClient.Builder().setProtocols(Arrays.asList(Protocol.HTTP_1_1, null));
+      new OkHttpClient.Builder().protocols(Arrays.asList(Protocol.HTTP_1_1, null));
       fail();
     } catch (IllegalArgumentException expected) {
     }
@@ -3212,7 +3214,7 @@ private void zeroLengthPayload(String method)
     server.setBodyLimit(0);
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setDoOutput(true);
     long contentLength = Integer.MAX_VALUE + 1L;
     connection.setFixedLengthStreamingMode(contentLength);
@@ -3241,11 +3243,11 @@ private void zeroLengthPayload(String method)
         .addHeader("Content-Encoding: gzip"));
     server.enqueue(new MockResponse().setBody("b"));
 
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection1.getResponseCode());
     assertContent("", connection1);
 
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());
     assertContent("b", connection2);
 
@@ -3268,7 +3270,7 @@ private void zeroLengthPayload(String method)
         .setBody(gzip("Moved! Moved! Moved!")));
     server.enqueue(new MockResponse().setBody("This is the new page!"));
 
-    HttpURLConnection connection = client.open(server.url("/").url());
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     assertContent("This is the new page!", connection);
 
     RecordedRequest requestA = server.takeRequest();
@@ -3285,7 +3287,7 @@ private void zeroLengthPayload(String method)
   @Test public void bodyPermittedOnDelete() throws Exception {
     server.enqueue(new MockResponse());
 
-    HttpURLConnection connection = client.open(server.url("/").url());
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     connection.setRequestMethod("DELETE");
     connection.setDoOutput(true);
     connection.getOutputStream().write("BODY".getBytes(UTF_8));
@@ -3300,7 +3302,7 @@ private void zeroLengthPayload(String method)
     server.enqueue(new MockResponse().setBody("abc"));
 
     System.setProperty("http.agent", "foo");
-    assertContent("abc", client.open(server.url("/").url()));
+    assertContent("abc", urlFactory.open(server.url("/").url()));
 
     RecordedRequest request = server.takeRequest();
     assertEquals("foo", request.getHeader("User-Agent"));
@@ -3311,7 +3313,7 @@ private void zeroLengthPayload(String method)
     server.enqueue(new MockResponse().setBody("abc"));
 
     System.setProperty("http.agent", "a\nb\ud83c\udf69c\ud83c\udf68d\u007fe");
-    assertContent("abc", client.open(server.url("/").url()));
+    assertContent("abc", urlFactory.open(server.url("/").url()));
 
     RecordedRequest request = server.takeRequest();
     assertEquals("a?b?c?d?e", request.getHeader("User-Agent"));
@@ -3320,7 +3322,7 @@ private void zeroLengthPayload(String method)
   @Test public void userAgentDefaultsToOkHttpVersion() throws Exception {
     server.enqueue(new MockResponse().setBody("abc"));
 
-    assertContent("abc", client.open(server.url("/").url()));
+    assertContent("abc", urlFactory.open(server.url("/").url()));
 
     RecordedRequest request = server.takeRequest();
     assertEquals(Version.userAgent(), request.getHeader("User-Agent"));
@@ -3332,17 +3334,17 @@ private void zeroLengthPayload(String method)
         throw new AssertionError();
       }
     };
-    client.setClient(client.client().newBuilder()
+    urlFactory.setClient(urlFactory.client().newBuilder()
         .addInterceptor(interceptor)
         .addNetworkInterceptor(interceptor)
         .build());
 
     server.enqueue(new MockResponse().setBody("abc"));
-    assertContent("abc", client.open(server.url("/").url()));
+    assertContent("abc", urlFactory.open(server.url("/").url()));
   }
 
   @Test public void urlWithSpaceInHost() throws Exception {
-    URLConnection urlConnection = client.open(new URL("http://and roid.com/"));
+    URLConnection urlConnection = urlFactory.open(new URL("http://and roid.com/"));
     try {
       urlConnection.getInputStream();
       fail();
@@ -3353,7 +3355,7 @@ private void zeroLengthPayload(String method)
   @Test public void urlWithSpaceInHostViaHttpProxy() throws Exception {
     server.enqueue(new MockResponse());
     URLConnection urlConnection =
-        client.open(new URL("http://and roid.com/"), server.toProxyAddress());
+        urlFactory.open(new URL("http://and roid.com/"), server.toProxyAddress());
 
     try {
       // This test is to check that a NullPointerException is not thrown.
@@ -3364,7 +3366,7 @@ private void zeroLengthPayload(String method)
   }
 
   @Test public void urlHostWithNul() throws Exception {
-    URLConnection urlConnection = client.open(new URL("http://host\u0000/"));
+    URLConnection urlConnection = urlFactory.open(new URL("http://host\u0000/"));
     try {
       urlConnection.getInputStream();
       fail();
@@ -3377,13 +3379,13 @@ private void zeroLengthPayload(String method)
     server.enqueue(new MockResponse().setResponseCode(302)
         .addHeaderLenient("Location", redirectUrl));
 
-    HttpURLConnection urlConnection = client.open(server.url("/").url());
+    HttpURLConnection urlConnection = urlFactory.open(server.url("/").url());
     assertEquals(302, urlConnection.getResponseCode());
     assertEquals(redirectUrl, urlConnection.getHeaderField("Location"));
   }
 
   @Test public void urlWithBadAsciiHost() throws Exception {
-    URLConnection urlConnection = client.open(new URL("http://host\u0001/"));
+    URLConnection urlConnection = urlFactory.open(new URL("http://host\u0001/"));
     try {
       urlConnection.getInputStream();
       fail();
@@ -3398,7 +3400,7 @@ private void zeroLengthPayload(String method)
 
   private void testInstanceFollowsRedirects(String spec) throws Exception {
     URL url = new URL(spec);
-    HttpURLConnection urlConnection = client.open(url);
+    HttpURLConnection urlConnection = urlFactory.open(url);
     urlConnection.setInstanceFollowRedirects(true);
     assertTrue(urlConnection.getInstanceFollowRedirects());
     urlConnection.setInstanceFollowRedirects(false);
@@ -3478,7 +3480,7 @@ void setBody(MockResponse response, String content, int chunkSize) throws IOExce
           MockWebServer server, OkUrlFactory streamHandlerFactory, URL url)
           throws IOException {
         streamHandlerFactory.setClient(streamHandlerFactory.client().newBuilder()
-            .setProxy(Proxy.NO_PROXY)
+            .proxy(Proxy.NO_PROXY)
             .build());
         return streamHandlerFactory.open(url);
       }
@@ -3489,7 +3491,7 @@ void setBody(MockResponse response, String content, int chunkSize) throws IOExce
           MockWebServer server, OkUrlFactory streamHandlerFactory, URL url)
           throws IOException {
         streamHandlerFactory.setClient(streamHandlerFactory.client().newBuilder()
-            .setProxy(server.toProxyAddress())
+            .proxy(server.toProxyAddress())
             .build());
         return streamHandlerFactory.open(url);
       }
@@ -3574,14 +3576,14 @@ private String certificatesToString(X509Certificate[] certificates) {
    * -Xbootclasspath/p:/tmp/alpn-boot-8.0.0.v20140317}
    */
   private void enableProtocol(Protocol protocol) {
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
-        .setProtocols(Arrays.asList(protocol, Protocol.HTTP_1_1))
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
+        .protocols(Arrays.asList(protocol, Protocol.HTTP_1_1))
         .build());
     server.useHttps(sslContext.getSocketFactory(), false);
     server.setProtocolNegotiationEnabled(true);
-    server.setProtocols(client.client().getProtocols());
+    server.setProtocols(urlFactory.client().protocols());
   }
 
   /**
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java
index 952ac2ab0c..3b6a63d335 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverHttp2Test.java
@@ -41,7 +41,7 @@ public HttpOverHttp2Test() {
         .withPush(pushPromise);
     server.enqueue(response);
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     assertContent("ABCDE", connection, Integer.MAX_VALUE);
     assertEquals(200, connection.getResponseCode());
     assertEquals("Sweet", connection.getResponseMessage());
@@ -65,7 +65,7 @@ public HttpOverHttp2Test() {
         .withPush(pushPromise);
     server.enqueue(response);
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     assertContent("ABCDE", connection, Integer.MAX_VALUE);
     assertEquals(200, connection.getResponseCode());
     assertEquals("Sweet", connection.getResponseMessage());
@@ -90,18 +90,18 @@ public HttpOverHttp2Test() {
 
     // Read & write a full request to confirm settings are accepted.
     server.enqueue(new MockResponse().withSettings(settings));
-    HttpURLConnection settingsConnection = client.open(server.url("/").url());
+    HttpURLConnection settingsConnection = urlFactory.open(server.url("/").url());
     assertContent("", settingsConnection, Integer.MAX_VALUE);
 
     server.enqueue(new MockResponse().setBody("ABC"));
     server.enqueue(new MockResponse().setBody("DEF"));
     server.enqueue(new MockResponse().setBody("GHI"));
 
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     connection1.connect();
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     connection2.connect();
-    HttpURLConnection connection3 = client.open(server.url("/").url());
+    HttpURLConnection connection3 = urlFactory.open(server.url("/").url());
     connection3.connect();
     assertContent("ABC", connection1, Integer.MAX_VALUE);
     assertContent("DEF", connection2, Integer.MAX_VALUE);
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
index 18c116d97a..79cddfdeec 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
@@ -71,7 +71,7 @@
 
   protected SSLContext sslContext = SslContextBuilder.localhost();
   protected HostnameVerifier hostnameVerifier = new RecordingHostnameVerifier();
-  protected OkUrlFactory client;
+  protected OkUrlFactory urlFactory;
   protected HttpURLConnection connection;
   protected Cache cache;
 
@@ -82,10 +82,10 @@ protected HttpOverSpdyTest(Protocol protocol) {
   @Before public void setUp() throws Exception {
     server.useHttps(sslContext.getSocketFactory(), false);
     cache = new Cache(tempDir.getRoot(), Integer.MAX_VALUE);
-    client = new OkUrlFactory(new OkHttpClient.Builder()
-        .setProtocols(Arrays.asList(protocol, Protocol.HTTP_1_1))
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(hostnameVerifier)
+    urlFactory = new OkUrlFactory(new OkHttpClient.Builder()
+        .protocols(Arrays.asList(protocol, Protocol.HTTP_1_1))
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(hostnameVerifier)
         .build());
   }
 
@@ -97,7 +97,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
     MockResponse response = new MockResponse().setBody("ABCDE").setStatus("HTTP/1.1 200 Sweet");
     server.enqueue(response);
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     assertContent("ABCDE", connection, Integer.MAX_VALUE);
     assertEquals(200, connection.getResponseCode());
     assertEquals("Sweet", connection.getResponseMessage());
@@ -111,7 +111,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
   @Test public void emptyResponse() throws IOException {
     server.enqueue(new MockResponse());
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     assertEquals(-1, connection.getInputStream().read());
   }
 
@@ -120,7 +120,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
   @Test public void noDefaultContentLengthOnStreamingPost() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE"));
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     connection.setDoOutput(true);
     connection.setChunkedStreamingMode(0);
     connection.getOutputStream().write(postBytes);
@@ -135,7 +135,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
   @Test public void userSuppliedContentLengthHeader() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE"));
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     connection.setRequestProperty("Content-Length", String.valueOf(postBytes.length));
     connection.setDoOutput(true);
     connection.getOutputStream().write(postBytes);
@@ -150,7 +150,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
   @Test public void closeAfterFlush() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE"));
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     connection.setRequestProperty("Content-Length", String.valueOf(postBytes.length));
     connection.setDoOutput(true);
     connection.getOutputStream().write(postBytes); // push bytes into SpdyDataOutputStream.buffer
@@ -167,7 +167,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
   @Test public void setFixedLengthStreamingModeSetsContentLength() throws Exception {
     server.enqueue(new MockResponse().setBody("ABCDE"));
 
-    connection = client.open(server.url("/foo").url());
+    connection = urlFactory.open(server.url("/foo").url());
     connection.setFixedLengthStreamingMode(postBytes.length);
     connection.setDoOutput(true);
     connection.getOutputStream().write(postBytes);
@@ -183,8 +183,8 @@ protected HttpOverSpdyTest(Protocol protocol) {
     server.enqueue(new MockResponse().setBody("ABCDEF"));
     server.enqueue(new MockResponse().setBody("GHIJKL"));
 
-    HttpURLConnection connection1 = client.open(server.url("/r1").url());
-    HttpURLConnection connection2 = client.open(server.url("/r2").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/r1").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/r2").url());
     assertEquals("ABC", readAscii(connection1.getInputStream(), 3));
     assertEquals("GHI", readAscii(connection2.getInputStream(), 3));
     assertEquals("DEF", readAscii(connection1.getInputStream(), 3));
@@ -209,7 +209,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
   @Test public void gzippedResponseBody() throws Exception {
     server.enqueue(
         new MockResponse().addHeader("Content-Encoding: gzip").setBody(gzip("ABCABCABC")));
-    assertContent("ABCABCABC", client.open(server.url("/r1").url()), Integer.MAX_VALUE);
+    assertContent("ABCABCABC", urlFactory.open(server.url("/r1").url()), Integer.MAX_VALUE);
   }
 
   @Test public void authenticate() throws Exception {
@@ -219,10 +219,10 @@ protected HttpOverSpdyTest(Protocol protocol) {
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
-    client.setClient(client.client().newBuilder()
-        .setAuthenticator(new JavaNetAuthenticator())
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .authenticator(new JavaNetAuthenticator())
         .build());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
     RecordedRequest denied = server.takeRequest();
@@ -239,7 +239,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
         .setBody("This page has moved!"));
     server.enqueue(new MockResponse().setBody("This is the new location!"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertContent("This is the new location!", connection, Integer.MAX_VALUE);
 
     RecordedRequest request1 = server.takeRequest();
@@ -251,7 +251,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
   @Test public void readAfterLastByte() throws Exception {
     server.enqueue(new MockResponse().setBody("ABC"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals("ABC", readAscii(in, 3));
     assertEquals(-1, in.read());
@@ -263,7 +263,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
     server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.NO_RESPONSE));
     server.enqueue(new MockResponse().setBody("A"));
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setReadTimeout(1000);
     assertContent("A", connection, Integer.MAX_VALUE);
   }
@@ -279,7 +279,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
     server.enqueue(new MockResponse().setBody(new String(body))
         .throttleBody(1024, 1, SECONDS)); // slow connection 1KiB/second
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setReadTimeout(2000); // 2 seconds to read something.
     assertContent(new String(body), connection, Integer.MAX_VALUE);
   }
@@ -297,7 +297,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
         .setBody(new String(body))
         .throttleBody(1024, 1, SECONDS)); // slow connection 1KiB/second
 
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     connection.setReadTimeout(500); // half a second to read something
     connection.connect();
     try {
@@ -313,9 +313,9 @@ protected HttpOverSpdyTest(Protocol protocol) {
     response.setBodyDelay(1, TimeUnit.SECONDS);
     server.enqueue(response);
 
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     connection1.setReadTimeout(2000);
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     connection2.setReadTimeout(200);
     connection1.connect();
     connection2.connect();
@@ -323,55 +323,55 @@ protected HttpOverSpdyTest(Protocol protocol) {
   }
 
   @Test public void responsesAreCached() throws IOException {
-    client.setClient(client.client().newBuilder()
-        .setCache(cache)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .cache(cache)
         .build());
 
     server.enqueue(new MockResponse().addHeader("cache-control: max-age=60").setBody("A"));
 
-    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
+    assertContent("A", urlFactory.open(server.url("/").url()), Integer.MAX_VALUE);
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
-    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
+    assertContent("A", urlFactory.open(server.url("/").url()), Integer.MAX_VALUE);
+    assertContent("A", urlFactory.open(server.url("/").url()), Integer.MAX_VALUE);
     assertEquals(3, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(2, cache.getHitCount());
   }
 
   @Test public void conditionalCache() throws IOException {
-    client.setClient(client.client().newBuilder()
-        .setCache(cache)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .cache(cache)
         .build());
 
     server.enqueue(new MockResponse().addHeader("ETag: v1").setBody("A"));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
+    assertContent("A", urlFactory.open(server.url("/").url()), Integer.MAX_VALUE);
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertContent("A", client.open(server.url("/").url()), Integer.MAX_VALUE);
+    assertContent("A", urlFactory.open(server.url("/").url()), Integer.MAX_VALUE);
     assertEquals(2, cache.getRequestCount());
     assertEquals(2, cache.getNetworkCount());
     assertEquals(1, cache.getHitCount());
   }
 
   @Test public void responseCachedWithoutConsumingFullBody() throws IOException {
-    client.setClient(client.client().newBuilder()
-        .setCache(cache)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .cache(cache)
         .build());
 
     server.enqueue(new MockResponse().addHeader("cache-control: max-age=60").setBody("ABCD"));
     server.enqueue(new MockResponse().addHeader("cache-control: max-age=60").setBody("EFGH"));
 
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     InputStream in1 = connection1.getInputStream();
     assertEquals("AB", readAscii(in1, 2));
     in1.close();
 
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     InputStream in2 = connection2.getInputStream();
     assertEquals("ABCD", readAscii(in2, Integer.MAX_VALUE));
     in2.close();
@@ -385,13 +385,13 @@ protected HttpOverSpdyTest(Protocol protocol) {
         .domain(server.getHostName())
         .build();
     cookieJar.enqueueRequestCookies(requestCookie);
-    client.setClient(client.client().newBuilder()
-        .setCookieJar(cookieJar)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .cookieJar(cookieJar)
         .build());
 
     server.enqueue(new MockResponse());
     HttpUrl url = server.url("/");
-    assertContent("", client.open(url.url()), Integer.MAX_VALUE);
+    assertContent("", urlFactory.open(url.url()), Integer.MAX_VALUE);
 
     RecordedRequest request = server.takeRequest();
     assertEquals("a=b", request.getHeader("Cookie"));
@@ -399,15 +399,15 @@ protected HttpOverSpdyTest(Protocol protocol) {
 
   @Test public void receiveResponseCookies() throws Exception {
     RecordingCookieJar cookieJar = new RecordingCookieJar();
-    client.setClient(client.client().newBuilder()
-        .setCookieJar(cookieJar)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .cookieJar(cookieJar)
         .build());
 
     server.enqueue(new MockResponse()
         .addHeader("set-cookie: a=b"));
 
     HttpUrl url = server.url("/");
-    assertContent("", client.open(url.url()), Integer.MAX_VALUE);
+    assertContent("", urlFactory.open(url.url()), Integer.MAX_VALUE);
 
     cookieJar.assertResponseCookies("a=b; path=/");
   }
@@ -417,13 +417,13 @@ protected HttpOverSpdyTest(Protocol protocol) {
     server.enqueue(new MockResponse().setBody("abc"));
 
     // Disconnect before the stream is created. A connection is still established!
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     connection1.connect();
     connection1.disconnect();
 
     // That connection is pooled, and it works.
-    assertEquals(1, client.client().getConnectionPool().getMultiplexedConnectionCount());
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    assertEquals(1, urlFactory.client().connectionPool().getMultiplexedConnectionCount());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     assertContent("abc", connection2, 3);
     assertEquals(0, server.takeRequest().getSequenceNumber());
   }
@@ -466,7 +466,7 @@ public SpdyRequest(String path, CountDownLatch countDownLatch) {
 
     @Override public void run() {
       try {
-        HttpURLConnection conn = client.open(server.url(path).url());
+        HttpURLConnection conn = urlFactory.open(server.url(path).url());
         assertEquals("A", readAscii(conn.getInputStream(), 1));
         countDownLatch.countDown();
       } catch (Exception e) {
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
index ba3fa3f43f..8a81242d6a 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/CookiesTest.java
@@ -51,7 +51,7 @@
   public void testNetscapeResponse() throws Exception {
     CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
     client = client.newBuilder()
-        .setCookieJar(new JavaNetCookieJar(cookieManager))
+        .cookieJar(new JavaNetCookieJar(cookieManager))
         .build();
     MockWebServer server = new MockWebServer();
     server.start();
@@ -81,7 +81,7 @@ public void testNetscapeResponse() throws Exception {
   @Test public void testRfc2109Response() throws Exception {
     CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
     client = client.newBuilder()
-        .setCookieJar(new JavaNetCookieJar(cookieManager))
+        .cookieJar(new JavaNetCookieJar(cookieManager))
         .build();
     MockWebServer server = new MockWebServer();
     server.start();
@@ -111,7 +111,7 @@ public void testNetscapeResponse() throws Exception {
   @Test public void testQuotedAttributeValues() throws Exception {
     CookieManager cookieManager = new CookieManager(null, ACCEPT_ORIGINAL_SERVER);
     client = client.newBuilder()
-        .setCookieJar(new JavaNetCookieJar(cookieManager))
+        .cookieJar(new JavaNetCookieJar(cookieManager))
         .build();
     MockWebServer server = new MockWebServer();
     server.start();
@@ -154,7 +154,7 @@ public void testNetscapeResponse() throws Exception {
     cookieB.setPath("/");
     cookieManager.getCookieStore().add(server.url("/").uri(), cookieB);
     client = client.newBuilder()
-        .setCookieJar(new JavaNetCookieJar(cookieManager))
+        .cookieJar(new JavaNetCookieJar(cookieManager))
         .build();
 
     get(server.url("/"));
@@ -182,7 +182,7 @@ public void testNetscapeResponse() throws Exception {
     cookie.setPortlist(portList);
     cookieManager.getCookieStore().add(redirectSource.url("/").uri(), cookie);
     client = client.newBuilder()
-        .setCookieJar(new JavaNetCookieJar(cookieManager))
+        .cookieJar(new JavaNetCookieJar(cookieManager))
         .build();
 
     get(redirectSource.url("/"));
@@ -199,7 +199,7 @@ public void testNetscapeResponse() throws Exception {
 
   @Test public void testCookiesSentIgnoresCase() throws Exception {
     client = client.newBuilder()
-        .setCookieJar(new JavaNetCookieJar(new CookieManager() {
+        .cookieJar(new JavaNetCookieJar(new CookieManager() {
           @Override public Map<String, List<String>> get(URI uri,
               Map<String, List<String>> requestHeaders) throws IOException {
             Map<String, List<String>> result = new HashMap<>();
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
index 314658c4ec..eb85913192 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/DisconnectTest.java
@@ -57,7 +57,7 @@
           }
         });
     client = new OkHttpClient.Builder()
-        .setSocketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {
+        .socketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {
           @Override protected Socket configureSocket(Socket socket) throws IOException {
             socket.setSendBufferSize(SOCKET_BUFFER_SIZE);
             socket.setReceiveBufferSize(SOCKET_BUFFER_SIZE);
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalHttp2Example.java b/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalHttp2Example.java
index a12190a221..08e0123bdf 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalHttp2Example.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalHttp2Example.java
@@ -34,7 +34,7 @@
   public static void main(String[] args) throws Exception {
     URL url = new URL("https://twitter.com");
     OkHttpClient client = new OkHttpClient.Builder()
-        .setProtocols(Util.immutableList(Protocol.HTTP_2, Protocol.HTTP_1_1))
+        .protocols(Util.immutableList(Protocol.HTTP_2, Protocol.HTTP_1_1))
         .build();
     HttpsURLConnection connection = (HttpsURLConnection) new OkUrlFactory(client)
         .open(url);
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalSpdyExample.java b/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalSpdyExample.java
index 6a51fbd12a..9830d73c5c 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalSpdyExample.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ExternalSpdyExample.java
@@ -34,7 +34,7 @@
   public static void main(String[] args) throws Exception {
     URL url = new URL("https://www.google.ca/");
     OkHttpClient client = new OkHttpClient.Builder()
-        .setProtocols(Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1))
+        .protocols(Util.immutableList(Protocol.SPDY_3, Protocol.HTTP_1_1))
         .build();
     HttpsURLConnection connection = (HttpsURLConnection) new OkUrlFactory(client)
         .open(url);
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
index 1b86763e8b..47f4f0fc6b 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/ThreadInterruptTest.java
@@ -59,7 +59,7 @@ protected ServerSocket configureServerSocket(ServerSocket serverSocket)
           }
         });
     client = new OkHttpClient.Builder()
-        .setSocketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {
+        .socketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {
           @Override
           protected Socket configureSocket(Socket socket) throws IOException {
             socket.setSendBufferSize(SOCKET_BUFFER_SIZE);
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
index e264097308..09e18b5f55 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
@@ -54,13 +54,13 @@ public OkUrlFactory setClient(OkHttpClient client) {
   }
 
   public HttpURLConnection open(URL url) {
-    return open(url, client.getProxy());
+    return open(url, client.proxy());
   }
 
   HttpURLConnection open(URL url, Proxy proxy) {
     String protocol = url.getProtocol();
     OkHttpClient copy = client.newBuilder()
-        .setProxy(proxy)
+        .proxy(proxy)
         .build();
 
     if (protocol.equals("http")) return new HttpURLConnectionImpl(url, copy);
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
index 214664f0cb..48edc1436b 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
@@ -265,7 +265,7 @@ private static String responseSourceHeader(Response response) {
         ? url.getPort()
         : HttpUrl.defaultPort(url.getProtocol());
     if (usingProxy()) {
-      InetSocketAddress proxyAddress = (InetSocketAddress) client.getProxy().address();
+      InetSocketAddress proxyAddress = (InetSocketAddress) client.proxy().address();
       hostName = proxyAddress.getHostName();
       hostPort = proxyAddress.getPort();
     }
@@ -279,33 +279,33 @@ private static String responseSourceHeader(Response response) {
 
   @Override public void setConnectTimeout(int timeoutMillis) {
     client = client.newBuilder()
-        .setConnectTimeout(timeoutMillis, TimeUnit.MILLISECONDS)
+        .connectTimeout(timeoutMillis, TimeUnit.MILLISECONDS)
         .build();
   }
 
   @Override
   public void setInstanceFollowRedirects(boolean followRedirects) {
     client = client.newBuilder()
-        .setFollowRedirects(followRedirects)
+        .followRedirects(followRedirects)
         .build();
   }
 
   @Override public boolean getInstanceFollowRedirects() {
-    return client.getFollowRedirects();
+    return client.followRedirects();
   }
 
   @Override public int getConnectTimeout() {
-    return client.getConnectTimeout();
+    return client.connectTimeoutMillis();
   }
 
   @Override public void setReadTimeout(int timeoutMillis) {
     client = client.newBuilder()
-        .setReadTimeout(timeoutMillis, TimeUnit.MILLISECONDS)
+        .readTimeout(timeoutMillis, TimeUnit.MILLISECONDS)
         .build();
   }
 
   @Override public int getReadTimeout() {
-    return client.getReadTimeout();
+    return client.readTimeoutMillis();
   }
 
   private void initHttpEngine() throws IOException {
@@ -377,7 +377,7 @@ private HttpEngine newHttpEngine(String method, StreamAllocation streamAllocatio
     OkHttpClient engineClient = client;
     if (Internal.instance.internalCache(engineClient) != null && !getUseCaches()) {
       engineClient = client.newBuilder()
-          .setCache(null)
+          .cache(null)
           .build();
     }
 
@@ -522,7 +522,7 @@ private boolean execute(boolean readResponse) throws IOException {
   @Override public final boolean usingProxy() {
     Proxy proxy = route != null
         ? route.proxy()
-        : client.getProxy();
+        : client.proxy();
     return proxy != null && proxy.type() != Proxy.Type.DIRECT;
   }
 
@@ -602,7 +602,7 @@ private boolean execute(boolean readResponse) throws IOException {
   private void setProtocols(String protocolsString, boolean append) {
     List<Protocol> protocolsList = new ArrayList<>();
     if (append) {
-      protocolsList.addAll(client.getProtocols());
+      protocolsList.addAll(client.protocols());
     }
     for (String protocol : protocolsString.split(",", -1)) {
       try {
@@ -612,7 +612,7 @@ private void setProtocols(String protocolsString, boolean append) {
       }
     }
     client = client.newBuilder()
-        .setProtocols(protocolsList)
+        .protocols(protocolsList)
         .build();
   }
 
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java
index 7cc1e88f2c..3d8b24db7f 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java
@@ -49,22 +49,22 @@ public HttpsURLConnectionImpl(HttpURLConnectionImpl delegate) {
 
   @Override public void setHostnameVerifier(HostnameVerifier hostnameVerifier) {
     delegate.client = delegate.client.newBuilder()
-        .setHostnameVerifier(hostnameVerifier)
+        .hostnameVerifier(hostnameVerifier)
         .build();
   }
 
   @Override public HostnameVerifier getHostnameVerifier() {
-    return delegate.client.getHostnameVerifier();
+    return delegate.client.hostnameVerifier();
   }
 
   @Override public void setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {
     delegate.client = delegate.client.newBuilder()
-        .setSslSocketFactory(sslSocketFactory)
+        .sslSocketFactory(sslSocketFactory)
         .build();
   }
 
   @Override public SSLSocketFactory getSSLSocketFactory() {
-    return delegate.client.getSslSocketFactory();
+    return delegate.client.sslSocketFactory();
   }
 
   @Override public long getContentLengthLong() {
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
index aed61550d9..67be818b29 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
@@ -35,7 +35,7 @@
   @Before public void setUp() throws IOException {
     cache = new Cache(new File("/cache/"), 10 * 1024 * 1024, fileSystem);
     OkHttpClient client = new OkHttpClient.Builder()
-        .setCache(cache)
+        .cache(cache)
         .build();
     factory = new OkUrlFactory(client);
   }
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
index 63bb87adef..768d5a2be7 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
@@ -81,16 +81,16 @@
   @Rule public InMemoryFileSystem fileSystem = new InMemoryFileSystem();
 
   private final SSLContext sslContext = SslContextBuilder.localhost();
-  private OkUrlFactory client = new OkUrlFactory(new OkHttpClient.Builder().build());
+  private OkUrlFactory urlFactory = new OkUrlFactory(new OkHttpClient.Builder().build());
   private Cache cache;
   private final CookieManager cookieManager = new CookieManager();
 
   @Before public void setUp() throws Exception {
     server.setProtocolNegotiationEnabled(false);
     cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);
-    client = new OkUrlFactory(new OkHttpClient.Builder()
-        .setCache(cache)
-        .setCookieJar(new JavaNetCookieJar(cookieManager))
+    urlFactory = new OkUrlFactory(new OkHttpClient.Builder()
+        .cache(cache)
+        .cookieJar(new JavaNetCookieJar(cookieManager))
         .build());
   }
 
@@ -100,7 +100,7 @@
   }
 
   @Test public void responseCacheAccessWithOkHttpMember() throws IOException {
-    assertSame(cache, client.client().getCache());
+    assertSame(cache, urlFactory.client().cache());
   }
 
   /**
@@ -178,7 +178,7 @@ private void assertCached(boolean shouldPut, int responseCode) throws Exception
     server.start();
 
     URL url = server.url("/").url();
-    HttpURLConnection conn = client.open(url);
+    HttpURLConnection conn = urlFactory.open(url);
     assertEquals(responseCode, conn.getResponseCode());
 
     // exhaust the content stream
@@ -219,7 +219,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     server.enqueue(response);
 
     // Make sure that calling skip() doesn't omit bytes from the cache.
-    HttpURLConnection urlConnection = client.open(server.url("/").url());
+    HttpURLConnection urlConnection = urlFactory.open(server.url("/").url());
     InputStream in = urlConnection.getInputStream();
     assertEquals("I love ", readAscii(urlConnection, "I love ".length()));
     reliableSkip(in, "puppies but hate ".length());
@@ -229,7 +229,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     assertEquals(1, cache.getWriteSuccessCount());
     assertEquals(0, cache.getWriteAbortCount());
 
-    urlConnection = client.open(server.url("/").url()); // cached!
+    urlConnection = urlFactory.open(server.url("/").url()); // cached!
     in = urlConnection.getInputStream();
     assertEquals("I love puppies but hate spiders",
         readAscii(urlConnection, "I love puppies but hate spiders".length()));
@@ -250,7 +250,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS))
         .setBody("ABC"));
 
-    HttpsURLConnection c1 = (HttpsURLConnection) client.open(server.url("/").url());
+    HttpsURLConnection c1 = (HttpsURLConnection) urlFactory.open(server.url("/").url());
     c1.setSSLSocketFactory(sslContext.getSocketFactory());
     c1.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
     assertEquals("ABC", readAscii(c1));
@@ -262,7 +262,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     Principal peerPrincipal = c1.getPeerPrincipal();
     Principal localPrincipal = c1.getLocalPrincipal();
 
-    HttpsURLConnection c2 = (HttpsURLConnection) client.open(server.url("/").url()); // cached!
+    HttpsURLConnection c2 = (HttpsURLConnection) urlFactory.open(server.url("/").url()); // cached!
     c2.setSSLSocketFactory(sslContext.getSocketFactory());
     c2.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
     assertEquals("ABC", readAscii(c2));
@@ -288,10 +288,10 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .setBody("ABC"));
     server.enqueue(new MockResponse().setBody("DEF"));
 
-    HttpURLConnection connection = client.open(server.url("/").url());
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection));
 
-    connection = client.open(server.url("/").url()); // cached!
+    connection = urlFactory.open(server.url("/").url()); // cached!
     assertEquals("ABC", readAscii(connection));
 
     assertEquals(4, cache.getRequestCount()); // 2 requests + 2 redirects
@@ -305,18 +305,18 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .addHeader("Location: /foo"));
     server.enqueue(new MockResponse().setBody("DEF"));
 
-    assertEquals("ABC", readAscii(client.open(server.url("/foo").url())));
+    assertEquals("ABC", readAscii(urlFactory.open(server.url("/foo").url())));
     RecordedRequest request1 = server.takeRequest();
     assertEquals("GET /foo HTTP/1.1", request1.getRequestLine());
     assertEquals(0, request1.getSequenceNumber());
 
-    assertEquals("ABC", readAscii(client.open(server.url("/bar").url())));
+    assertEquals("ABC", readAscii(urlFactory.open(server.url("/bar").url())));
     RecordedRequest request2 = server.takeRequest();
     assertEquals("GET /bar HTTP/1.1", request2.getRequestLine());
     assertEquals(1, request2.getSequenceNumber());
 
     // an unrelated request should reuse the pooled connection
-    assertEquals("DEF", readAscii(client.open(server.url("/baz").url())));
+    assertEquals("DEF", readAscii(urlFactory.open(server.url("/baz").url())));
     RecordedRequest request3 = server.takeRequest();
     assertEquals("GET /baz HTTP/1.1", request3.getRequestLine());
     assertEquals(2, request3.getSequenceNumber());
@@ -333,17 +333,17 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .setBody("ABC"));
     server.enqueue(new MockResponse().setBody("DEF"));
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(NULL_HOSTNAME_VERIFIER)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(NULL_HOSTNAME_VERIFIER)
         .build());
 
-    HttpsURLConnection connection1 = (HttpsURLConnection) client.open(server.url("/").url());
+    HttpsURLConnection connection1 = (HttpsURLConnection) urlFactory.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection1));
     assertNotNull(connection1.getCipherSuite());
 
     // Cached!
-    HttpsURLConnection connection2 = (HttpsURLConnection) client.open(server.url("/").url());
+    HttpsURLConnection connection2 = (HttpsURLConnection) urlFactory.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection2));
     assertNotNull(connection2.getCipherSuite());
 
@@ -371,16 +371,16 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
         .setResponseCode(HttpURLConnection.HTTP_MOVED_PERM)
         .addHeader("Location: " + server2.url("/").url()));
 
-    client.setClient(client.client().newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(NULL_HOSTNAME_VERIFIER)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(NULL_HOSTNAME_VERIFIER)
         .build());
 
-    HttpURLConnection connection1 = client.open(server.url("/").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection1));
 
     // Cached!
-    HttpURLConnection connection2 = client.open(server.url("/").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/").url());
     assertEquals("ABC", readAscii(connection2));
 
     assertEquals(4, cache.getRequestCount()); // 2 direct + 2 redirect = 4
@@ -408,7 +408,7 @@ private void testServerPrematureDisconnect(TransferKind transferKind) throws IOE
     server.enqueue(new MockResponse().setBody("Request #2"));
 
     BufferedReader reader = new BufferedReader(
-        new InputStreamReader(client.open(server.url("/").url()).getInputStream()));
+        new InputStreamReader(urlFactory.open(server.url("/").url()).getInputStream()));
     assertEquals("ABCDE", reader.readLine());
     try {
       reader.readLine();
@@ -420,7 +420,7 @@ private void testServerPrematureDisconnect(TransferKind transferKind) throws IOE
 
     assertEquals(1, cache.getWriteAbortCount());
     assertEquals(0, cache.getWriteSuccessCount());
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("Request #2", readAscii(connection));
     assertEquals(1, cache.getWriteAbortCount());
     assertEquals(1, cache.getWriteSuccessCount());
@@ -445,7 +445,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
     server.enqueue(response);
     server.enqueue(new MockResponse().setBody("Request #2"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     InputStream in = connection.getInputStream();
     assertEquals("ABCDE", readAscii(connection, 5));
     in.close();
@@ -457,7 +457,7 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
 
     assertEquals(1, cache.getWriteAbortCount());
     assertEquals(0, cache.getWriteSuccessCount());
-    connection = client.open(server.url("/").url());
+    connection = urlFactory.open(server.url("/").url());
     assertEquals("Request #2", readAscii(connection));
     assertEquals(1, cache.getWriteAbortCount());
     assertEquals(1, cache.getWriteSuccessCount());
@@ -474,8 +474,8 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
             .setBody("A"));
 
     URL url = server.url("/").url();
-    assertEquals("A", readAscii(client.open(url)));
-    URLConnection connection = client.open(url);
+    assertEquals("A", readAscii(urlFactory.open(url)));
+    URLConnection connection = urlFactory.open(url);
     assertEquals("A", readAscii(connection));
     assertNull(connection.getHeaderField("Warning"));
   }
@@ -501,8 +501,8 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
         .addHeader("Date: " + formatDate(-5, TimeUnit.DAYS))
         .setBody("A"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    URLConnection connection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    URLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection));
     assertEquals("113 HttpURLConnection \"Heuristic expiration\"",
         connection.getHeaderField("Warning"));
@@ -516,8 +516,8 @@ private void testClientPrematureDisconnect(TransferKind transferKind) throws IOE
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/?foo=bar").url();
-    assertEquals("A", readAscii(client.open(url)));
-    assertEquals("B", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
+    assertEquals("B", readAscii(urlFactory.open(url)));
   }
 
   @Test public void expirationDateInThePastWithLastModifiedHeader() throws Exception {
@@ -631,13 +631,13 @@ private void testRequestMethod(String requestMethod, boolean expectCached) throw
 
     URL url = server.url("/").url();
 
-    HttpURLConnection request1 = client.open(url);
+    HttpURLConnection request1 = urlFactory.open(url);
     request1.setRequestMethod(requestMethod);
     addRequestBodyIfNecessary(requestMethod, request1);
     request1.getInputStream().close();
     assertEquals("1", request1.getHeaderField("X-Response-ID"));
 
-    URLConnection request2 = client.open(url);
+    URLConnection request2 = urlFactory.open(url);
     request2.getInputStream().close();
     if (expectCached) {
       assertEquals("1", request2.getHeaderField("X-Response-ID"));
@@ -669,14 +669,14 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
 
     URL url = server.url("/").url();
 
-    assertEquals("A", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
 
-    HttpURLConnection invalidate = client.open(url);
+    HttpURLConnection invalidate = urlFactory.open(url);
     invalidate.setRequestMethod(requestMethod);
     addRequestBodyIfNecessary(requestMethod, invalidate);
     assertEquals("B", readAscii(invalidate));
 
-    assertEquals("C", readAscii(client.open(url)));
+    assertEquals("C", readAscii(urlFactory.open(url)));
   }
 
   @Test public void postInvalidatesCacheWithUncacheableResponse() throws Exception {
@@ -690,14 +690,14 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
 
     URL url = server.url("/").url();
 
-    assertEquals("A", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
 
-    HttpURLConnection invalidate = client.open(url);
+    HttpURLConnection invalidate = urlFactory.open(url);
     invalidate.setRequestMethod("POST");
     addRequestBodyIfNecessary("POST", invalidate);
     assertEquals("B", readAscii(invalidate));
 
-    assertEquals("C", readAscii(client.open(url)));
+    assertEquals("C", readAscii(urlFactory.open(url)));
   }
 
   @Test public void etag() throws Exception {
@@ -769,11 +769,11 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
 
     URL url = server.url("/").url();
 
-    URLConnection range = client.open(url);
+    URLConnection range = urlFactory.open(url);
     range.addRequestProperty("Range", "bytes=1000-1001");
     assertEquals("AA", readAscii(range));
 
-    assertEquals("BB", readAscii(client.open(url)));
+    assertEquals("BB", readAscii(urlFactory.open(url)));
   }
 
   @Test public void serverReturnsDocumentOlderThanCache() throws Exception {
@@ -785,8 +785,8 @@ private void testMethodInvalidates(String requestMethod) throws Exception {
 
     URL url = server.url("/").url();
 
-    assertEquals("A", readAscii(client.open(url)));
-    assertEquals("A", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
   }
 
   @Test public void nonIdentityEncodingAndConditionalCache() throws Exception {
@@ -810,9 +810,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     // At least three request/response pairs are required because after the first request is cached
     // a different execution path might be taken. Thus modifications to the cache applied during
     // the second request might not be visible until another request is performed.
-    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
-    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
-    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(urlFactory.open(server.url("/").url())));
   }
 
   @Test public void notModifiedSpecifiesEncoding() throws Exception {
@@ -827,9 +827,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse()
         .setBody("DEFDEFDEF"));
 
-    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
-    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
-    assertEquals("DEFDEFDEF", readAscii(client.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("DEFDEFDEF", readAscii(urlFactory.open(server.url("/").url())));
   }
 
   /** https://github.com/square/okhttp/issues/947 */
@@ -841,8 +841,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Cache-Control: max-age=60"));
     server.enqueue(new MockResponse().setBody("FAIL"));
 
-    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
-    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("ABCABCABC", readAscii(urlFactory.open(server.url("/").url())));
   }
 
   @Test public void conditionalCacheHitIsNotDoublePooled() throws Exception {
@@ -851,9 +851,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .clearHeaders()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    assertEquals(1, client.client().getConnectionPool().getIdleConnectionCount());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals(1, urlFactory.client().connectionPool().getIdleConnectionCount());
   }
 
   @Test public void expiresDateBeforeModifiedDate() throws Exception {
@@ -869,9 +869,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-age=30");
     assertEquals("B", readAscii(connection));
   }
@@ -882,9 +882,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "min-fresh=120");
     assertEquals("B", readAscii(connection));
   }
@@ -895,9 +895,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Date: " + formatDate(-4, TimeUnit.MINUTES)));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-stale=180");
     assertEquals("A", readAscii(connection));
     assertEquals("110 HttpURLConnection \"Response is stale\"",
@@ -910,9 +910,9 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Date: " + formatDate(-4, TimeUnit.MINUTES)));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "max-stale=180");
     assertEquals("B", readAscii(connection));
   }
@@ -920,7 +920,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
   @Test public void requestOnlyIfCachedWithNoResponseCached() throws IOException {
     // (no responses enqueued)
 
-    HttpURLConnection connection = client.open(server.url("/").url());
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
     assertEquals(1, cache.getRequestCount());
@@ -933,8 +933,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    URLConnection connection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertEquals("A", readAscii(connection));
     assertEquals(2, cache.getRequestCount());
@@ -947,8 +947,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(-1, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    HttpURLConnection connection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
     assertEquals(2, cache.getRequestCount());
@@ -959,8 +959,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
   @Test public void requestOnlyIfCachedWithUnhelpfulResponseCached() throws IOException {
     server.enqueue(new MockResponse().setBody("A"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    HttpURLConnection connection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertGatewayTimeout(connection);
     assertEquals(2, cache.getRequestCount());
@@ -977,8 +977,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    assertEquals("A", readAscii(client.open(url)));
-    URLConnection connection = client.open(url);
+    assertEquals("A", readAscii(urlFactory.open(url)));
+    URLConnection connection = urlFactory.open(url);
     connection.setRequestProperty("Cache-Control", "no-cache");
     assertEquals("B", readAscii(connection));
   }
@@ -992,8 +992,8 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    assertEquals("A", readAscii(client.open(url)));
-    URLConnection connection = client.open(url);
+    assertEquals("A", readAscii(urlFactory.open(url)));
+    URLConnection connection = urlFactory.open(url);
     connection.setRequestProperty("Pragma", "no-cache");
     assertEquals("B", readAscii(connection));
   }
@@ -1024,9 +1024,9 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
     URL url = server.url("/").url();
-    assertEquals("A", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
 
-    HttpURLConnection connection = client.open(url);
+    HttpURLConnection connection = urlFactory.open(url);
     connection.addRequestProperty(conditionName, conditionValue);
     assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode());
     assertEquals("", readAscii(connection));
@@ -1045,7 +1045,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("A"));
 
     URL url = server.url("/").url();
-    URLConnection connection = client.open(url);
+    URLConnection connection = urlFactory.open(url);
     connection.setIfModifiedSince(1393666200000L);
     assertEquals("A", readAscii(connection));
     RecordedRequest request = server.takeRequest();
@@ -1074,8 +1074,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
 
     // The first request has no conditions.
     RecordedRequest request1 = server.takeRequest();
@@ -1089,7 +1089,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   @Test public void clientSuppliedConditionWithoutCachedResult() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    HttpURLConnection connection = client.open(server.url("/").url());
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     String clientIfModifiedSince = formatDate(-24, TimeUnit.HOURS);
     connection.addRequestProperty("If-Modified-Since", clientIfModifiedSince);
     assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode());
@@ -1101,10 +1101,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    URLConnection connection = client.open(url);
+    URLConnection connection = urlFactory.open(url);
     connection.addRequestProperty("Authorization", "password");
     assertEquals("A", readAscii(connection));
-    assertEquals("A", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
   }
 
   @Test public void contentLocationDoesNotPopulateCache() throws Exception {
@@ -1113,8 +1113,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/foo").url())));
-    assertEquals("B", readAscii(client.open(server.url("/bar").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/foo").url())));
+    assertEquals("B", readAscii(urlFactory.open(server.url("/bar").url())));
   }
 
   @Test public void useCachesFalseDoesNotWriteToCache() throws Exception {
@@ -1122,10 +1122,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A").setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.setUseCaches(false);
     assertEquals("A", readAscii(connection));
-    assertEquals("B", readAscii(client.open(server.url("/").url())));
+    assertEquals("B", readAscii(urlFactory.open(server.url("/").url())));
   }
 
   @Test public void useCachesFalseDoesNotReadFromCache() throws Exception {
@@ -1133,22 +1133,22 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A").setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    URLConnection connection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.setUseCaches(false);
     assertEquals("B", readAscii(connection));
   }
 
   @Test public void defaultUseCachesSetsInitialValueOnly() throws Exception {
     URL url = new URL("http://localhost/");
-    URLConnection c1 = client.open(url);
-    URLConnection c2 = client.open(url);
+    URLConnection c1 = urlFactory.open(url);
+    URLConnection c2 = urlFactory.open(url);
     assertTrue(c1.getDefaultUseCaches());
     c1.setDefaultUseCaches(false);
     try {
       assertTrue(c1.getUseCaches());
       assertTrue(c2.getUseCaches());
-      URLConnection c3 = client.open(url);
+      URLConnection c3 = urlFactory.open(url);
       assertFalse(c3.getUseCaches());
     } finally {
       c1.setDefaultUseCaches(true);
@@ -1162,9 +1162,9 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/a").url())));
-    assertEquals("A", readAscii(client.open(server.url("/a").url())));
-    assertEquals("B", readAscii(client.open(server.url("/b").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/a").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/a").url())));
+    assertEquals("B", readAscii(urlFactory.open(server.url("/b").url())));
 
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(1, server.takeRequest().getSequenceNumber());
@@ -1178,12 +1178,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
     server.enqueue(new MockResponse().setBody("C"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertEquals("B", readAscii(client.open(server.url("/").url())));
-    assertEquals("C", readAscii(client.open(server.url("/").url())));
+    assertEquals("B", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("C", readAscii(urlFactory.open(server.url("/").url())));
     assertEquals(3, cache.getRequestCount());
     assertEquals(3, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
@@ -1196,12 +1196,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
     assertEquals(3, cache.getRequestCount());
     assertEquals(3, cache.getNetworkCount());
     assertEquals(2, cache.getHitCount());
@@ -1210,12 +1210,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
   @Test public void statisticsFullCacheHit() throws Exception {
     server.enqueue(new MockResponse().addHeader("Cache-Control: max-age=60").setBody("A"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
     assertEquals(1, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(0, cache.getHitCount());
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
     assertEquals(3, cache.getRequestCount());
     assertEquals(1, cache.getNetworkCount());
     assertEquals(2, cache.getHitCount());
@@ -1228,11 +1228,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    HttpURLConnection frConnection = client.open(url);
+    HttpURLConnection frConnection = urlFactory.open(url);
     frConnection.addRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(frConnection));
 
-    HttpURLConnection enConnection = client.open(url);
+    HttpURLConnection enConnection = urlFactory.open(url);
     enConnection.addRequestProperty("Accept-Language", "en-US");
     assertEquals("B", readAscii(enConnection));
   }
@@ -1244,10 +1244,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    URLConnection connection1 = client.open(url);
+    URLConnection connection1 = urlFactory.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(connection1));
-    URLConnection connection2 = client.open(url);
+    URLConnection connection2 = urlFactory.open(url);
     connection2.addRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(connection2));
   }
@@ -1258,8 +1258,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
   }
 
   @Test public void varyMatchesAddedRequestHeaderField() throws Exception {
@@ -1268,8 +1268,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    URLConnection fooConnection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    URLConnection fooConnection = urlFactory.open(server.url("/").url());
     fooConnection.addRequestProperty("Foo", "bar");
     assertEquals("B", readAscii(fooConnection));
   }
@@ -1280,10 +1280,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    URLConnection fooConnection = client.open(server.url("/").url());
+    URLConnection fooConnection = urlFactory.open(server.url("/").url());
     fooConnection.addRequestProperty("Foo", "bar");
     assertEquals("A", readAscii(fooConnection));
-    assertEquals("B", readAscii(client.open(server.url("/").url())));
+    assertEquals("B", readAscii(urlFactory.open(server.url("/").url())));
   }
 
   @Test public void varyFieldsAreCaseInsensitive() throws Exception {
@@ -1293,10 +1293,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    URLConnection connection1 = client.open(url);
+    URLConnection connection1 = urlFactory.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA");
     assertEquals("A", readAscii(connection1));
-    URLConnection connection2 = client.open(url);
+    URLConnection connection2 = urlFactory.open(url);
     connection2.addRequestProperty("accept-language", "fr-CA");
     assertEquals("A", readAscii(connection2));
   }
@@ -1309,12 +1309,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    URLConnection connection1 = client.open(url);
+    URLConnection connection1 = urlFactory.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA");
     connection1.addRequestProperty("Accept-Charset", "UTF-8");
     connection1.addRequestProperty("Accept-Encoding", "identity");
     assertEquals("A", readAscii(connection1));
-    URLConnection connection2 = client.open(url);
+    URLConnection connection2 = urlFactory.open(url);
     connection2.addRequestProperty("Accept-Language", "fr-CA");
     connection2.addRequestProperty("Accept-Charset", "UTF-8");
     connection2.addRequestProperty("Accept-Encoding", "identity");
@@ -1329,12 +1329,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    URLConnection frConnection = client.open(url);
+    URLConnection frConnection = urlFactory.open(url);
     frConnection.addRequestProperty("Accept-Language", "fr-CA");
     frConnection.addRequestProperty("Accept-Charset", "UTF-8");
     frConnection.addRequestProperty("Accept-Encoding", "identity");
     assertEquals("A", readAscii(frConnection));
-    URLConnection enConnection = client.open(url);
+    URLConnection enConnection = urlFactory.open(url);
     enConnection.addRequestProperty("Accept-Language", "en-CA");
     enConnection.addRequestProperty("Accept-Charset", "UTF-8");
     enConnection.addRequestProperty("Accept-Encoding", "identity");
@@ -1348,12 +1348,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    URLConnection connection1 = client.open(url);
+    URLConnection connection1 = urlFactory.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA, fr-FR");
     connection1.addRequestProperty("Accept-Language", "en-US");
     assertEquals("A", readAscii(connection1));
 
-    URLConnection connection2 = client.open(url);
+    URLConnection connection2 = urlFactory.open(url);
     connection2.addRequestProperty("Accept-Language", "fr-CA, fr-FR");
     connection2.addRequestProperty("Accept-Language", "en-US");
     assertEquals("A", readAscii(connection2));
@@ -1366,12 +1366,12 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    URLConnection connection1 = client.open(url);
+    URLConnection connection1 = urlFactory.open(url);
     connection1.addRequestProperty("Accept-Language", "fr-CA, fr-FR");
     connection1.addRequestProperty("Accept-Language", "en-US");
     assertEquals("A", readAscii(connection1));
 
-    URLConnection connection2 = client.open(url);
+    URLConnection connection2 = urlFactory.open(url);
     connection2.addRequestProperty("Accept-Language", "fr-CA");
     connection2.addRequestProperty("Accept-Language", "en-US");
     assertEquals("B", readAscii(connection2));
@@ -1383,8 +1383,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setBody("B"));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    assertEquals("B", readAscii(client.open(server.url("/").url())));
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    assertEquals("B", readAscii(urlFactory.open(server.url("/").url())));
   }
 
   @Test public void varyAndHttps() throws Exception {
@@ -1395,13 +1395,13 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    HttpsURLConnection connection1 = (HttpsURLConnection) client.open(url);
+    HttpsURLConnection connection1 = (HttpsURLConnection) urlFactory.open(url);
     connection1.setSSLSocketFactory(sslContext.getSocketFactory());
     connection1.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
     connection1.addRequestProperty("Accept-Language", "en-US");
     assertEquals("A", readAscii(connection1));
 
-    HttpsURLConnection connection2 = (HttpsURLConnection) client.open(url);
+    HttpsURLConnection connection2 = (HttpsURLConnection) urlFactory.open(url);
     connection2.setSSLSocketFactory(sslContext.getSocketFactory());
     connection2.setHostnameVerifier(NULL_HOSTNAME_VERIFIER);
     connection2.addRequestProperty("Accept-Language", "en-US");
@@ -1410,8 +1410,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
 
   @Test public void cachePlusCookies() throws Exception {
     RecordingCookieJar cookieJar = new RecordingCookieJar();
-    client.setClient(client.client().newBuilder()
-        .setCookieJar(cookieJar)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .cookieJar(cookieJar)
         .build());
 
     server.enqueue(new MockResponse()
@@ -1424,10 +1424,10 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
     URL url = server.url("/").url();
-    assertEquals("A", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
     cookieJar.assertResponseCookies("a=FIRST; path=/");
 
-    assertEquals("A", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
     cookieJar.assertResponseCookies("a=SECOND; path=/");
   }
 
@@ -1439,11 +1439,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().addHeader("Allow: GET, HEAD, PUT")
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = client.open(server.url("/").url());
+    URLConnection connection1 = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("GET, HEAD", connection1.getHeaderField("Allow"));
 
-    URLConnection connection2 = client.open(server.url("/").url());
+    URLConnection connection2 = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("GET, HEAD, PUT", connection2.getHeaderField("Allow"));
   }
@@ -1456,11 +1456,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().addHeader("Transfer-Encoding: none")
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = client.open(server.url("/").url());
+    URLConnection connection1 = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("identity", connection1.getHeaderField("Transfer-Encoding"));
 
-    URLConnection connection2 = client.open(server.url("/").url());
+    URLConnection connection2 = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("identity", connection2.getHeaderField("Transfer-Encoding"));
   }
@@ -1472,11 +1472,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = client.open(server.url("/").url());
+    URLConnection connection1 = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("199 test danger", connection1.getHeaderField("Warning"));
 
-    URLConnection connection2 = client.open(server.url("/").url());
+    URLConnection connection2 = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals(null, connection2.getHeaderField("Warning"));
   }
@@ -1488,11 +1488,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setBody("A"));
     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    URLConnection connection1 = client.open(server.url("/").url());
+    URLConnection connection1 = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection1));
     assertEquals("299 test danger", connection1.getHeaderField("Warning"));
 
-    URLConnection connection2 = client.open(server.url("/").url());
+    URLConnection connection2 = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection2));
     assertEquals("299 test danger", connection2.getHeaderField("Warning"));
   }
@@ -1514,18 +1514,18 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     server.enqueue(new MockResponse().setBody("B"));
 
     // cache miss; seed the cache
-    HttpURLConnection connection1 = client.open(server.url("/a").url());
+    HttpURLConnection connection1 = urlFactory.open(server.url("/a").url());
     assertEquals("A", readAscii(connection1));
     assertEquals(null, connection1.getHeaderField("Allow"));
 
     // conditional cache hit; update the cache
-    HttpURLConnection connection2 = client.open(server.url("/a").url());
+    HttpURLConnection connection2 = urlFactory.open(server.url("/a").url());
     assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());
     assertEquals("A", readAscii(connection2));
     assertEquals("GET, HEAD", connection2.getHeaderField("Allow"));
 
     // full cache hit
-    HttpURLConnection connection3 = client.open(server.url("/a").url());
+    HttpURLConnection connection3 = urlFactory.open(server.url("/a").url());
     assertEquals("A", readAscii(connection3));
     assertEquals("GET, HEAD", connection3.getHeaderField("Allow"));
 
@@ -1537,8 +1537,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    URLConnection connection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    URLConnection connection = urlFactory.open(server.url("/").url());
     connection.addRequestProperty("Cache-Control", "only-if-cached");
     assertEquals("A", readAscii(connection));
   }
@@ -1551,8 +1551,8 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .addHeader("Cache-Control: max-age=30")
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    HttpURLConnection connection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("B", readAscii(connection));
   }
 
@@ -1562,15 +1562,15 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .addHeader("Date: " + formatDate(0, TimeUnit.MINUTES)));
     server.enqueue(new MockResponse().setResponseCode(304));
 
-    assertEquals("A", readAscii(client.open(server.url("/").url())));
-    HttpURLConnection connection = client.open(server.url("/").url());
+    assertEquals("A", readAscii(urlFactory.open(server.url("/").url())));
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection));
   }
 
   @Test public void responseSourceHeaderFetched() throws IOException {
     server.enqueue(new MockResponse().setBody("A"));
 
-    URLConnection connection = client.open(server.url("/").url());
+    URLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("A", readAscii(connection));
   }
 
@@ -1580,7 +1580,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     Internal.instance.addLenient(headers, ": A");
     server.enqueue(new MockResponse().setHeaders(headers.build()).setBody("body"));
 
-    HttpURLConnection connection = client.open(server.url("/").url());
+    HttpURLConnection connection = urlFactory.open(server.url("/").url());
     assertEquals("A", connection.getHeaderField(""));
     assertEquals("body", readAscii(connection));
   }
@@ -1636,11 +1636,11 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     writeFile(cache.getDirectory(), urlKey + ".1", entryBody);
     writeFile(cache.getDirectory(), "journal", journalBody);
     cache = new Cache(cache.getDirectory(), Integer.MAX_VALUE, fileSystem);
-    client.setClient(client.client().newBuilder()
-        .setCache(cache)
+    urlFactory.setClient(urlFactory.client().newBuilder()
+        .cache(cache)
         .build());
 
-    HttpURLConnection connection = client.open(url);
+    HttpURLConnection connection = urlFactory.open(url);
     assertEquals(entryBody, readAscii(connection));
     assertEquals("3", connection.getHeaderField("Content-Length"));
     assertEquals("foo", connection.getHeaderField("etag"));
@@ -1681,8 +1681,8 @@ private void assertNotCached(MockResponse response) throws Exception {
     server.enqueue(new MockResponse().setBody("B"));
 
     URL url = server.url("/").url();
-    assertEquals("A", readAscii(client.open(url)));
-    assertEquals("B", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
+    assertEquals("B", readAscii(urlFactory.open(url)));
   }
 
   /** @return the request with the conditional get headers. */
@@ -1696,21 +1696,21 @@ private RecordedRequest assertConditionallyCached(MockResponse response) throws
     server.enqueue(new MockResponse().setStatus("HTTP/1.1 200 C-OK").setBody("C"));
 
     URL valid = server.url("/valid").url();
-    HttpURLConnection connection1 = client.open(valid);
+    HttpURLConnection connection1 = urlFactory.open(valid);
     assertEquals("A", readAscii(connection1));
     assertEquals(HttpURLConnection.HTTP_OK, connection1.getResponseCode());
     assertEquals("A-OK", connection1.getResponseMessage());
-    HttpURLConnection connection2 = client.open(valid);
+    HttpURLConnection connection2 = urlFactory.open(valid);
     assertEquals("A", readAscii(connection2));
     assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());
     assertEquals("A-OK", connection2.getResponseMessage());
 
     URL invalid = server.url("/invalid").url();
-    HttpURLConnection connection3 = client.open(invalid);
+    HttpURLConnection connection3 = urlFactory.open(invalid);
     assertEquals("B", readAscii(connection3));
     assertEquals(HttpURLConnection.HTTP_OK, connection3.getResponseCode());
     assertEquals("B-OK", connection3.getResponseMessage());
-    HttpURLConnection connection4 = client.open(invalid);
+    HttpURLConnection connection4 = urlFactory.open(invalid);
     assertEquals("C", readAscii(connection4));
     assertEquals(HttpURLConnection.HTTP_OK, connection4.getResponseCode());
     assertEquals("C-OK", connection4.getResponseMessage());
@@ -1724,8 +1724,8 @@ private void assertFullyCached(MockResponse response) throws Exception {
     server.enqueue(response.setBody("B"));
 
     URL url = server.url("/").url();
-    assertEquals("A", readAscii(client.open(url)));
-    assertEquals("A", readAscii(client.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
+    assertEquals("A", readAscii(urlFactory.open(url)));
   }
 
   /**
diff --git a/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java b/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java
index d24eb77bdb..c5a4746ab2 100644
--- a/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java
+++ b/okhttp-ws-tests/src/main/java/okhttp3/ws/AutobahnTester.java
@@ -63,7 +63,7 @@ public void run() throws IOException {
 
       updateReports();
     } finally {
-      client.getDispatcher().getExecutorService().shutdown();
+      client.dispatcher().getExecutorService().shutdown();
     }
   }
 
diff --git a/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java
index 15904b1ade..87ae0d7495 100644
--- a/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java
+++ b/okhttp-ws-tests/src/test/java/okhttp3/ws/WebSocketCallTest.java
@@ -175,8 +175,8 @@
   @Test public void wssScheme() throws IOException {
     server.useHttps(sslContext.getSocketFactory(), false);
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build();
 
     websocketScheme("wss");
@@ -185,8 +185,8 @@
   @Test public void httpsScheme() throws IOException {
     server.useHttps(sslContext.getSocketFactory(), false);
     client = client.newBuilder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
-        .setHostnameVerifier(new RecordingHostnameVerifier())
+        .sslSocketFactory(sslContext.getSocketFactory())
+        .hostnameVerifier(new RecordingHostnameVerifier())
         .build();
 
     websocketScheme("https");
diff --git a/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java
index 4191719ee6..b276cc1bc8 100644
--- a/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java
+++ b/okhttp-ws/src/main/java/okhttp3/ws/WebSocketCall.java
@@ -65,7 +65,7 @@ public static WebSocketCall create(OkHttpClient client, Request request) {
     key = ByteString.of(nonce).base64();
 
     client = client.newBuilder()
-        .setProtocols(Collections.singletonList(Protocol.HTTP_1_1))
+        .protocols(Collections.singletonList(Protocol.HTTP_1_1))
         .build();
 
     request = request.newBuilder()
@@ -81,7 +81,7 @@ public static WebSocketCall create(OkHttpClient client, Request request) {
   /**
    * Schedules the request to be executed at some point in the future.
    *
-   * <p>The {@link OkHttpClient#getDispatcher dispatcher} defines when the request will run: usually
+   * <p>The {@link OkHttpClient#dispatcher dispatcher} defines when the request will run: usually
    * immediately unless there are several other requests currently being executed.
    *
    * <p>This client will later call back {@code responseCallback} with either an HTTP response or a
diff --git a/okhttp/src/main/java/okhttp3/Call.java b/okhttp/src/main/java/okhttp3/Call.java
index f23a7017b2..3baaf647da 100644
--- a/okhttp/src/main/java/okhttp3/Call.java
+++ b/okhttp/src/main/java/okhttp3/Call.java
@@ -47,7 +47,7 @@
   /**
    * Schedules the request to be executed at some point in the future.
    *
-   * <p>The {@link OkHttpClient#getDispatcher dispatcher} defines when the request will run: usually
+   * <p>The {@link OkHttpClient#dispatcher dispatcher} defines when the request will run: usually
    * immediately unless there are several other requests currently being executed.
    *
    * <p>This client will later call back {@code responseCallback} with either an HTTP response or a
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index a8ac80ddea..e9ddcff0dc 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -18,7 +18,6 @@
 import java.net.MalformedURLException;
 import java.net.Proxy;
 import java.net.ProxySelector;
-import java.net.URLConnection;
 import java.net.UnknownHostException;
 import java.security.GeneralSecurityException;
 import java.util.ArrayList;
@@ -174,33 +173,33 @@ private OkHttpClient(Builder builder) {
   }
 
   /** Default connect timeout (in milliseconds). */
-  public int getConnectTimeout() {
+  public int connectTimeoutMillis() {
     return connectTimeout;
   }
 
   /** Default read timeout (in milliseconds). */
-  public int getReadTimeout() {
+  public int readTimeoutMillis() {
     return readTimeout;
   }
 
   /** Default write timeout (in milliseconds). */
-  public int getWriteTimeout() {
+  public int writeTimeoutMillis() {
     return writeTimeout;
   }
 
-  public Proxy getProxy() {
+  public Proxy proxy() {
     return proxy;
   }
 
-  public ProxySelector getProxySelector() {
+  public ProxySelector proxySelector() {
     return proxySelector;
   }
 
-  public CookieJar getCookieJar() {
+  public CookieJar cookieJar() {
     return cookieJar;
   }
 
-  public Cache getCache() {
+  public Cache cache() {
     return cache;
   }
 
@@ -208,59 +207,59 @@ InternalCache internalCache() {
     return cache != null ? cache.internalCache : internalCache;
   }
 
-  public Dns getDns() {
+  public Dns dns() {
     return dns;
   }
 
-  public SocketFactory getSocketFactory() {
+  public SocketFactory socketFactory() {
     return socketFactory;
   }
 
-  public SSLSocketFactory getSslSocketFactory() {
+  public SSLSocketFactory sslSocketFactory() {
     return sslSocketFactory;
   }
 
-  public HostnameVerifier getHostnameVerifier() {
+  public HostnameVerifier hostnameVerifier() {
     return hostnameVerifier;
   }
 
-  public CertificatePinner getCertificatePinner() {
+  public CertificatePinner certificatePinner() {
     return certificatePinner;
   }
 
-  public Authenticator getAuthenticator() {
+  public Authenticator authenticator() {
     return authenticator;
   }
 
-  public Authenticator getProxyAuthenticator() {
+  public Authenticator proxyAuthenticator() {
     return proxyAuthenticator;
   }
 
-  public ConnectionPool getConnectionPool() {
+  public ConnectionPool connectionPool() {
     return connectionPool;
   }
 
-  public boolean getFollowSslRedirects() {
+  public boolean followSslRedirects() {
     return followSslRedirects;
   }
 
-  public boolean getFollowRedirects() {
+  public boolean followRedirects() {
     return followRedirects;
   }
 
-  public boolean getRetryOnConnectionFailure() {
+  public boolean retryOnConnectionFailure() {
     return retryOnConnectionFailure;
   }
 
-  public Dispatcher getDispatcher() {
+  public Dispatcher dispatcher() {
     return dispatcher;
   }
 
-  public List<Protocol> getProtocols() {
+  public List<Protocol> protocols() {
     return protocols;
   }
 
-  public List<ConnectionSpec> getConnectionSpecs() {
+  public List<ConnectionSpec> connectionSpecs() {
     return connectionSpecs;
   }
 
@@ -294,7 +293,7 @@ public Dispatcher getDispatcher() {
    * complete cannot be canceled.
    */
   public OkHttpClient cancel(Object tag) {
-    getDispatcher().cancel(tag);
+    dispatcher().cancel(tag);
     return this;
   }
 
@@ -380,10 +379,8 @@ public Builder() {
      * Sets the default connect timeout for new connections. A value of 0 means no timeout,
      * otherwise values must be between 1 and {@link Integer#MAX_VALUE} when converted to
      * milliseconds.
-     *
-     * @see URLConnection#setConnectTimeout(int)
      */
-    public Builder setConnectTimeout(long timeout, TimeUnit unit) {
+    public Builder connectTimeout(long timeout, TimeUnit unit) {
       if (timeout < 0) throw new IllegalArgumentException("timeout < 0");
       if (unit == null) throw new IllegalArgumentException("unit == null");
       long millis = unit.toMillis(timeout);
@@ -396,10 +393,8 @@ public Builder setConnectTimeout(long timeout, TimeUnit unit) {
     /**
      * Sets the default read timeout for new connections. A value of 0 means no timeout, otherwise
      * values must be between 1 and {@link Integer#MAX_VALUE} when converted to milliseconds.
-     *
-     * @see URLConnection#setReadTimeout(int)
      */
-    public Builder setReadTimeout(long timeout, TimeUnit unit) {
+    public Builder readTimeout(long timeout, TimeUnit unit) {
       if (timeout < 0) throw new IllegalArgumentException("timeout < 0");
       if (unit == null) throw new IllegalArgumentException("unit == null");
       long millis = unit.toMillis(timeout);
@@ -413,7 +408,7 @@ public Builder setReadTimeout(long timeout, TimeUnit unit) {
      * Sets the default write timeout for new connections. A value of 0 means no timeout, otherwise
      * values must be between 1 and {@link Integer#MAX_VALUE} when converted to milliseconds.
      */
-    public Builder setWriteTimeout(long timeout, TimeUnit unit) {
+    public Builder writeTimeout(long timeout, TimeUnit unit) {
       if (timeout < 0) throw new IllegalArgumentException("timeout < 0");
       if (unit == null) throw new IllegalArgumentException("unit == null");
       long millis = unit.toMillis(timeout);
@@ -425,24 +420,24 @@ public Builder setWriteTimeout(long timeout, TimeUnit unit) {
 
     /**
      * Sets the HTTP proxy that will be used by connections created by this client. This takes
-     * precedence over {@link #setProxySelector}, which is only honored when this proxy is null
+     * precedence over {@link #proxySelector}, which is only honored when this proxy is null
      * (which it is by default). To disable proxy use completely, call {@code
      * setProxy(Proxy.NO_PROXY)}.
      */
-    public Builder setProxy(Proxy proxy) {
+    public Builder proxy(Proxy proxy) {
       this.proxy = proxy;
       return this;
     }
 
     /**
-     * Sets the proxy selection policy to be used if no {@link #setProxy proxy} is specified
+     * Sets the proxy selection policy to be used if no {@link #proxy proxy} is specified
      * explicitly. The proxy selector may return multiple proxies; in that case they will be tried
      * in sequence until a successful connection is established.
      *
      * <p>If unset, the {@link ProxySelector#getDefault() system-wide default} proxy selector will
      * be used.
      */
-    public Builder setProxySelector(ProxySelector proxySelector) {
+    public Builder proxySelector(ProxySelector proxySelector) {
       this.proxySelector = proxySelector;
       return this;
     }
@@ -453,7 +448,7 @@ public Builder setProxySelector(ProxySelector proxySelector) {
      *
      * <p>If unset, {@linkplain CookieJar#NO_COOKIES no cookies} will be accepted nor provided.
      */
-    public Builder setCookieJar(CookieJar cookieJar) {
+    public Builder cookieJar(CookieJar cookieJar) {
       this.cookieJar = cookieJar;
       return this;
     }
@@ -464,7 +459,7 @@ void setInternalCache(InternalCache internalCache) {
       this.cache = null;
     }
 
-    public Builder setCache(Cache cache) {
+    public Builder cache(Cache cache) {
       this.cache = cache;
       this.internalCache = null;
       return this;
@@ -475,7 +470,7 @@ public Builder setCache(Cache cache) {
      *
      * <p>If unset, the {@link Dns#SYSTEM system-wide default} DNS will be used.
      */
-    public Builder setDns(Dns dns) {
+    public Builder dns(Dns dns) {
       this.dns = dns;
       return this;
     }
@@ -488,7 +483,7 @@ public Builder setDns(Dns dns) {
      * <p>If unset, the {@link SocketFactory#getDefault() system-wide default} socket factory will
      * be used.
      */
-    public Builder setSocketFactory(SocketFactory socketFactory) {
+    public Builder socketFactory(SocketFactory socketFactory) {
       this.socketFactory = socketFactory;
       return this;
     }
@@ -498,7 +493,7 @@ public Builder setSocketFactory(SocketFactory socketFactory) {
      *
      * <p>If unset, a lazily created SSL socket factory will be used.
      */
-    public Builder setSslSocketFactory(SSLSocketFactory sslSocketFactory) {
+    public Builder sslSocketFactory(SSLSocketFactory sslSocketFactory) {
       this.sslSocketFactory = sslSocketFactory;
       return this;
     }
@@ -509,39 +504,39 @@ public Builder setSslSocketFactory(SSLSocketFactory sslSocketFactory) {
      *
      * <p>If unset, a default hostname verifier will be used.
      */
-    public Builder setHostnameVerifier(HostnameVerifier hostnameVerifier) {
+    public Builder hostnameVerifier(HostnameVerifier hostnameVerifier) {
       this.hostnameVerifier = hostnameVerifier;
       return this;
     }
 
     /**
      * Sets the certificate pinner that constrains which certificates are trusted. By default HTTPS
-     * connections rely on only the {@link #setSslSocketFactory SSL socket factory} to establish
+     * connections rely on only the {@link #sslSocketFactory SSL socket factory} to establish
      * trust. Pinning certificates avoids the need to trust certificate authorities.
      */
-    public Builder setCertificatePinner(CertificatePinner certificatePinner) {
+    public Builder certificatePinner(CertificatePinner certificatePinner) {
       this.certificatePinner = certificatePinner;
       return this;
     }
 
     /**
      * Sets the authenticator used to respond to challenges from origin servers. Use {@link
-     * #setProxyAuthenticator} to set the authenticator for proxy servers.
+     * #proxyAuthenticator} to set the authenticator for proxy servers.
      *
      * <p>If unset, the {@linkplain Authenticator#NONE no authentication will be attempted}.
      */
-    public Builder setAuthenticator(Authenticator authenticator) {
+    public Builder authenticator(Authenticator authenticator) {
       this.authenticator = authenticator;
       return this;
     }
 
     /**
      * Sets the authenticator used to respond to challenges from proxy servers. Use {@link
-     * #setAuthenticator} to set the authenticator for origin servers.
+     * #authenticator} to set the authenticator for origin servers.
      *
      * <p>If unset, the {@linkplain Authenticator#NONE no authentication will be attempted}.
      */
-    public Builder setProxyAuthenticator(Authenticator proxyAuthenticator) {
+    public Builder proxyAuthenticator(Authenticator proxyAuthenticator) {
       this.proxyAuthenticator = proxyAuthenticator;
       return this;
     }
@@ -551,7 +546,7 @@ public Builder setProxyAuthenticator(Authenticator proxyAuthenticator) {
      *
      * <p>If unset, a new connection pool will be used.
      */
-    public Builder setConnectionPool(ConnectionPool connectionPool) {
+    public Builder connectionPool(ConnectionPool connectionPool) {
       if (connectionPool == null) throw new NullPointerException("connectionPool == null");
       this.connectionPool = connectionPool;
       return this;
@@ -563,13 +558,13 @@ public Builder setConnectionPool(ConnectionPool connectionPool) {
      * <p>If unset, protocol redirects will be followed. This is different than the built-in {@code
      * HttpURLConnection}'s default.
      */
-    public Builder setFollowSslRedirects(boolean followProtocolRedirects) {
+    public Builder followSslRedirects(boolean followProtocolRedirects) {
       this.followSslRedirects = followProtocolRedirects;
       return this;
     }
 
     /** Configure this client to follow redirects. If unset, redirects be followed. */
-    public Builder setFollowRedirects(boolean followRedirects) {
+    public Builder followRedirects(boolean followRedirects) {
       this.followRedirects = followRedirects;
       return this;
     }
@@ -592,7 +587,7 @@ public Builder setFollowRedirects(boolean followRedirects) {
      * Set this to false to avoid retrying requests when doing so is destructive. In this case the
      * calling application should do its own recovery of connectivity failures.
      */
-    public Builder setRetryOnConnectionFailure(boolean retryOnConnectionFailure) {
+    public Builder retryOnConnectionFailure(boolean retryOnConnectionFailure) {
       this.retryOnConnectionFailure = retryOnConnectionFailure;
       return this;
     }
@@ -600,7 +595,7 @@ public Builder setRetryOnConnectionFailure(boolean retryOnConnectionFailure) {
     /**
      * Sets the dispatcher used to set policy and execute asynchronous requests. Must not be null.
      */
-    public Builder setDispatcher(Dispatcher dispatcher) {
+    public Builder dispatcher(Dispatcher dispatcher) {
       if (dispatcher == null) throw new IllegalArgumentException("dispatcher == null");
       this.dispatcher = dispatcher;
       return this;
@@ -635,7 +630,7 @@ public Builder setDispatcher(Dispatcher dispatcher) {
      * @param protocols the protocols to use, in order of preference. The list must contain {@link
      * Protocol#HTTP_1_1}. It must not contain null or {@link Protocol#HTTP_1_0}.
      */
-    public Builder setProtocols(List<Protocol> protocols) {
+    public Builder protocols(List<Protocol> protocols) {
       protocols = Util.immutableList(protocols);
       if (!protocols.contains(Protocol.HTTP_1_1)) {
         throw new IllegalArgumentException("protocols doesn't contain http/1.1: " + protocols);
@@ -650,7 +645,7 @@ public Builder setProtocols(List<Protocol> protocols) {
       return this;
     }
 
-    public Builder setConnectionSpecs(List<ConnectionSpec> connectionSpecs) {
+    public Builder connectionSpecs(List<ConnectionSpec> connectionSpecs) {
       this.connectionSpecs = Util.immutableList(connectionSpecs);
       return this;
     }
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 5c3166e197..fdf29b9b08 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -53,12 +53,12 @@ protected RealCall(OkHttpClient client, Request originalRequest) {
       executed = true;
     }
     try {
-      client.getDispatcher().executed(this);
+      client.dispatcher().executed(this);
       Response result = getResponseWithInterceptorChain(false);
       if (result == null) throw new IOException("Canceled");
       return result;
     } finally {
-      client.getDispatcher().finished(this);
+      client.dispatcher().finished(this);
     }
   }
 
@@ -75,7 +75,7 @@ void enqueue(Callback responseCallback, boolean forWebSocket) {
       if (executed) throw new IllegalStateException("Already Executed");
       executed = true;
     }
-    client.getDispatcher().enqueue(new AsyncCall(responseCallback, forWebSocket));
+    client.dispatcher().enqueue(new AsyncCall(responseCallback, forWebSocket));
   }
 
   @Override public void cancel() {
@@ -141,7 +141,7 @@ RealCall get() {
           responseCallback.onFailure(request, e);
         }
       } finally {
-        client.getDispatcher().finished(this);
+        client.dispatcher().finished(this);
       }
     }
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java b/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java
index 6aaece8e06..2f91dab9b1 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/Http2xStream.java
@@ -133,8 +133,8 @@ public Http2xStream(StreamAllocation streamAllocation, FramedConnection framedCo
         : spdy3HeadersList(request);
     boolean hasResponseBody = true;
     stream = framedConnection.newStream(requestHeaders, permitsRequestBody, hasResponseBody);
-    stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);
-    stream.writeTimeout().timeout(httpEngine.client.getWriteTimeout(), TimeUnit.MILLISECONDS);
+    stream.readTimeout().timeout(httpEngine.client.readTimeoutMillis(), TimeUnit.MILLISECONDS);
+    stream.writeTimeout().timeout(httpEngine.client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);
   }
 
   @Override public void writeRequestBody(RetryableSink requestBody) throws IOException {
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
index fd2a2934ce..7e4be81216 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
@@ -172,7 +172,7 @@ public HttpEngine(OkHttpClient client, Request request, boolean bufferRequestBod
     this.forWebSocket = forWebSocket;
     this.streamAllocation = streamAllocation != null
         ? streamAllocation
-        : new StreamAllocation(client.getConnectionPool(), createAddress(client, request));
+        : new StreamAllocation(client.connectionPool(), createAddress(client, request));
     this.requestBodyOut = requestBodyOut;
     this.priorResponse = priorResponse;
   }
@@ -270,9 +270,9 @@ public void sendRequest() throws RequestException, RouteException, IOException {
 
   private HttpStream connect() throws RouteException, RequestException, IOException {
     boolean doExtensiveHealthChecks = !networkRequest.method().equals("GET");
-    return streamAllocation.newStream(client.getConnectTimeout(),
-        client.getReadTimeout(), client.getWriteTimeout(),
-        client.getRetryOnConnectionFailure(), doExtensiveHealthChecks);
+    return streamAllocation.newStream(client.connectTimeoutMillis(),
+        client.readTimeoutMillis(), client.writeTimeoutMillis(),
+        client.retryOnConnectionFailure(), doExtensiveHealthChecks);
   }
 
   private static Response stripBody(Response response) {
@@ -338,7 +338,7 @@ public HttpEngine recover(IOException e, Sink requestBodyOut) {
       return null;
     }
 
-    if (!client.getRetryOnConnectionFailure()) {
+    if (!client.retryOnConnectionFailure()) {
       return null;
     }
 
@@ -498,7 +498,7 @@ private Request networkRequest(Request request) throws IOException {
       result.header("Accept-Encoding", "gzip");
     }
 
-    List<Cookie> cookies = client.getCookieJar().loadForRequest(request.url());
+    List<Cookie> cookies = client.cookieJar().loadForRequest(request.url());
     if (!cookies.isEmpty()) {
       result.header("Cookie", cookieHeader(cookies));
     }
@@ -842,12 +842,12 @@ private static Headers combine(Headers cachedHeaders, Headers networkHeaders) th
   }
 
   public void receiveHeaders(Headers headers) throws IOException {
-    if (client.getCookieJar() == CookieJar.NO_COOKIES) return;
+    if (client.cookieJar() == CookieJar.NO_COOKIES) return;
 
     List<Cookie> cookies = Cookie.parseAll(userRequest.url(), headers);
     if (cookies.isEmpty()) return;
 
-    client.getCookieJar().saveFromResponse(userRequest.url(), cookies);
+    client.cookieJar().saveFromResponse(userRequest.url(), cookies);
   }
 
   /**
@@ -868,13 +868,13 @@ public Request followUpRequest() throws IOException {
       case HTTP_PROXY_AUTH:
         Proxy selectedProxy = route != null
             ? route.proxy()
-            : client.getProxy();
+            : client.proxy();
         if (selectedProxy.type() != Proxy.Type.HTTP) {
           throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");
         }
         // fall-through
       case HTTP_UNAUTHORIZED:
-        return client.getAuthenticator().authenticate(route, userResponse);
+        return client.authenticator().authenticate(route, userResponse);
 
       case HTTP_PERM_REDIRECT:
       case HTTP_TEMP_REDIRECT:
@@ -889,7 +889,7 @@ public Request followUpRequest() throws IOException {
       case HTTP_MOVED_TEMP:
       case HTTP_SEE_OTHER:
         // Does the client allow redirects?
-        if (!client.getFollowRedirects()) return null;
+        if (!client.followRedirects()) return null;
 
         String location = userResponse.header("Location");
         if (location == null) return null;
@@ -900,7 +900,7 @@ public Request followUpRequest() throws IOException {
 
         // If configured, don't follow redirects between SSL and non-SSL.
         boolean sameScheme = url.scheme().equals(userRequest.url().scheme());
-        if (!sameScheme && !client.getFollowSslRedirects()) return null;
+        if (!sameScheme && !client.followSslRedirects()) return null;
 
         // Redirects don't include a request body.
         Request.Builder requestBuilder = userRequest.newBuilder();
@@ -945,14 +945,14 @@ private static Address createAddress(OkHttpClient client, Request request) {
     HostnameVerifier hostnameVerifier = null;
     CertificatePinner certificatePinner = null;
     if (request.isHttps()) {
-      sslSocketFactory = client.getSslSocketFactory();
-      hostnameVerifier = client.getHostnameVerifier();
-      certificatePinner = client.getCertificatePinner();
+      sslSocketFactory = client.sslSocketFactory();
+      hostnameVerifier = client.hostnameVerifier();
+      certificatePinner = client.certificatePinner();
     }
 
-    return new Address(request.url().host(), request.url().port(), client.getDns(),
-        client.getSocketFactory(), sslSocketFactory, hostnameVerifier, certificatePinner,
-        client.getProxyAuthenticator(), client.getProxy(), client.getProtocols(),
-        client.getConnectionSpecs(), client.getProxySelector());
+    return new Address(request.url().host(), request.url().port(), client.dns(),
+        client.socketFactory(), sslSocketFactory, hostnameVerifier, certificatePinner,
+        client.proxyAuthenticator(), client.proxy(), client.protocols(),
+        client.connectionSpecs(), client.proxySelector());
   }
 }
diff --git a/samples/crawler/src/main/java/okhttp3/sample/Crawler.java b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java
index d573fdd8fe..7fad2ee5e1 100644
--- a/samples/crawler/src/main/java/okhttp3/sample/Crawler.java
+++ b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java
@@ -122,7 +122,7 @@ public static void main(String[] args) throws IOException {
 
     Cache cache = new Cache(new File(args[0]), cacheByteCount);
     OkHttpClient client = new OkHttpClient.Builder()
-        .setCache(cache)
+        .cache(cache)
         .build();
 
     Crawler crawler = new Crawler(client);
diff --git a/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
index 1040faa9ac..a8cec6cb7a 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
@@ -25,7 +25,7 @@
 
 public final class Authenticate {
   private final OkHttpClient client = new OkHttpClient.Builder()
-      .setAuthenticator(new Authenticator() {
+      .authenticator(new Authenticator() {
         @Override public Request authenticate(Route route, Response response) throws IOException {
           System.out.println("Authenticating for response: " + response);
           System.out.println("Challenges: " + response.challenges());
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java b/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
index ed9812b217..8e82f4ab5f 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
@@ -30,7 +30,7 @@ public CacheResponse(File cacheDirectory) throws Exception {
     Cache cache = new Cache(cacheDirectory, cacheSize);
 
     client = new OkHttpClient.Builder()
-        .setCache(cache)
+        .cache(cache)
         .build();
   }
 
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java b/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
index ab9273e585..b890be7577 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
@@ -27,7 +27,7 @@
 
   public CertificatePinning() {
     client = new OkHttpClient.Builder()
-        .setCertificatePinner(
+        .certificatePinner(
             new CertificatePinner.Builder()
                 .add("publicobject.com", "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=")
                 .add("publicobject.com", "sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=")
diff --git a/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java b/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
index 1e468ee214..2f93880260 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
@@ -25,9 +25,9 @@
 
   public ConfigureTimeouts() throws Exception {
     client = new OkHttpClient.Builder()
-        .setConnectTimeout(10, TimeUnit.SECONDS)
-        .setWriteTimeout(10, TimeUnit.SECONDS)
-        .setReadTimeout(30, TimeUnit.SECONDS)
+        .connectTimeout(10, TimeUnit.SECONDS)
+        .writeTimeout(10, TimeUnit.SECONDS)
+        .readTimeout(30, TimeUnit.SECONDS)
         .build();
   }
 
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java b/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
index d542f1b67c..6fe27a3933 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
@@ -39,7 +39,7 @@
   public CustomTrust() {
     SSLContext sslContext = sslContextForTrustedCertificates(trustedCertificatesInputStream());
     client = new OkHttpClient.Builder()
-        .setSslSocketFactory(sslContext.getSocketFactory())
+        .sslSocketFactory(sslContext.getSocketFactory())
         .build();
   }
 
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java b/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
index 0195308e54..9efeecc820 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
@@ -32,7 +32,7 @@ public void run() throws Exception {
     try {
       // Copy to customize OkHttp for this request.
       OkHttpClient copy = client.newBuilder()
-          .setReadTimeout(500, TimeUnit.MILLISECONDS)
+          .readTimeout(500, TimeUnit.MILLISECONDS)
           .build();
 
       Response response = copy.newCall(request).execute();
@@ -44,7 +44,7 @@ public void run() throws Exception {
     try {
       // Copy to customize OkHttp for this request.
       OkHttpClient copy = client.newBuilder()
-          .setReadTimeout(3000, TimeUnit.MILLISECONDS)
+          .readTimeout(3000, TimeUnit.MILLISECONDS)
           .build();
 
       Response response = copy.newCall(request).execute();
diff --git a/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java b/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
index ea18306a1a..d034c505c2 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
@@ -41,7 +41,7 @@ public RewriteResponseCacheControl(File cacheDirectory) throws Exception {
     cache.evictAll();
 
     client = new OkHttpClient.Builder()
-        .setCache(cache)
+        .cache(cache)
         .build();
   }
 
diff --git a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
index a1c2d8403d..3fb7758725 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
@@ -29,7 +29,7 @@ private void run() throws IOException {
     WebSocketCall.create(client, request).enqueue(this);
 
     // Trigger shutdown of the dispatcher's executor so this process can exit cleanly.
-    client.getDispatcher().getExecutorService().shutdown();
+    client.dispatcher().getExecutorService().shutdown();
   }
 
   @Override public void onOpen(final WebSocket webSocket, Response response) {
