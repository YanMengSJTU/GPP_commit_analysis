diff --git a/okhttp/src/main/java/com/squareup/okhttp/Connection.java b/okhttp/src/main/java/com/squareup/okhttp/Connection.java
index cfda2818d5..c643d23a6a 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Connection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java
@@ -76,6 +76,8 @@
   private static final byte[] HTTP_11 = new byte[] {
       'h', 't', 't', 'p', '/', '1', '.', '1'
   };
+  
+  private static byte[] protocol = HTTP_11;
 
   private final Route route;
 
@@ -154,17 +156,25 @@ private void upgradeToTls(TunnelRequest tunnelRequest) throws IOException {
     in = sslSocket.getInputStream();
 
     byte[] selectedProtocol;
-    if (useNpn && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {
+    selectedProtocol = protocol;
+//    if (useNpn && (selectedProtocol = platform.getNpnSelectedProtocol(sslSocket)) != null) {
+    if (useNpn && selectedProtocol != null) {
       if (Arrays.equals(selectedProtocol, SPDY3)) {
         sslSocket.setSoTimeout(0); // SPDY timeouts are set per-stream.
         spdyConnection = new SpdyConnection.Builder(route.address.getUriHost(), true, in, out)
             .build();
+//        OkHttpClient.usesSPDY = true;
+        System.out.println("THIS IS A SPDY CONNECTION"); //DELETE AFTER DEBUGGING
       } else if (!Arrays.equals(selectedProtocol, HTTP_11)) {
         throw new IOException(
             "Unexpected NPN transport " + new String(selectedProtocol, "ISO-8859-1"));
-      }
+      } else 	System.out.println("THIS IS AN HTTP CONNECTION"); //DELETE AFTER DEBUGGING
     }
   }
+  
+  public static void forceSPDY(){
+	  protocol = SPDY3;
+  }
 
   /** Returns true if {@link #connect} has been attempted on this connection. */
   public boolean isConnected() {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
index a86123d7ef..1283a694bb 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/OkHttpClient.java
@@ -57,7 +57,7 @@
   private boolean followProtocolRedirects = true;
   private int connectTimeout;
   private int readTimeout;
-
+  
   public OkHttpClient() {
     routeDatabase = new RouteDatabase();
     dispatcher = new Dispatcher();
@@ -251,6 +251,14 @@ public OkHttpClient setConnectionPool(ConnectionPool connectionPool) {
   public ConnectionPool getConnectionPool() {
     return connectionPool;
   }
+  
+  public int getSpdyCount(){
+	  if(connectionPool != null){
+		  return connectionPool.getSpdyConnectionCount();
+	  }
+	  System.out.println("connection pool is null");
+	  return 0;
+  }
 
   /**
    * Configure this client to follow redirects from HTTPS to HTTP and from HTTP
@@ -406,4 +414,6 @@ public URLStreamHandler createURLStreamHandler(final String protocol) {
       }
     };
   }
+
+  
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java
index a5d39b30a4..187f3b6e1b 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AbstractHttpInputStream.java
@@ -79,11 +79,11 @@ protected final void cacheWrite(byte[] buffer, int offset, int count) throws IOE
    * Closes the cache entry and makes the socket available for reuse. This
    * should be invoked when the end of the body has been reached.
    */
-  protected final void endOfInput() throws IOException {
+  protected final void endOfInput(boolean streamCancelled) throws IOException {
     if (cacheRequest != null) {
       cacheBody.close();
     }
-    httpEngine.release(false);
+    httpEngine.release(streamCancelled);
   }
 
   /**
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index 2782faf30a..d6b6001e00 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -426,7 +426,7 @@ public final void automaticallyReleaseConnectionToPool() {
    * closed. Also call {@link #automaticallyReleaseConnectionToPool} unless
    * the connection will be used to follow a redirect.
    */
-  public final void release(boolean streamCanceled) {
+  public final void release(boolean streamCancelled) {
     // If the response body comes from the cache, close it.
     if (responseBodyIn == cachedResponseBody) {
       Util.closeQuietly(responseBodyIn);
@@ -435,8 +435,8 @@ public final void release(boolean streamCanceled) {
     if (!connectionReleased && connection != null) {
       connectionReleased = true;
 
-      if (transport == null
-          || !transport.makeReusable(streamCanceled, requestBodyOut, responseTransferIn)) {
+      if (transport == null || !transport.makeReusable(streamCancelled, requestBodyOut,
+          responseTransferIn)) {
         Util.closeQuietly(connection);
         connection = null;
       } else if (automaticallyReleaseConnectionToPool) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java
index f8f9f17266..9d64fa0b31 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpTransport.java
@@ -141,9 +141,9 @@ public void writeRequestHeaders() throws IOException {
     return headers;
   }
 
-  public boolean makeReusable(boolean streamCanceled, OutputStream requestBodyOut,
+  public boolean makeReusable(boolean streamCancelled, OutputStream requestBodyOut,
       InputStream responseBodyIn) {
-    if (streamCanceled) {
+    if (streamCancelled) {
       return false;
     }
 
@@ -177,10 +177,6 @@ public boolean makeReusable(boolean streamCanceled, OutputStream requestBodyOut,
    * Discards the response body so that the connection can be reused. This
    * needs to be done judiciously, since it delays the current request in
    * order to speed up a potential future request that may never occur.
-   *
-   * <p>A stream may be discarded to encourage response caching (a response
-   * cannot be cached unless it is consumed completely) or to enable connection
-   * reuse.
    */
   private static boolean discardStream(HttpEngine httpEngine, InputStream responseBodyIn) {
     Connection connection = httpEngine.connection;
@@ -377,7 +373,7 @@ public FixedLengthInputStream(InputStream is, CacheRequest cacheRequest, HttpEng
       super(is, httpEngine, cacheRequest);
       bytesRemaining = length;
       if (bytesRemaining == 0) {
-        endOfInput();
+        endOfInput(false);
       }
     }
 
@@ -395,7 +391,7 @@ public FixedLengthInputStream(InputStream is, CacheRequest cacheRequest, HttpEng
       bytesRemaining -= read;
       cacheWrite(buffer, offset, read);
       if (bytesRemaining == 0) {
-        endOfInput();
+        endOfInput(false);
       }
       return read;
     }
@@ -472,7 +468,7 @@ private void readChunkSize() throws IOException {
         RawHeaders rawResponseHeaders = httpEngine.responseHeaders.getHeaders();
         RawHeaders.readHeaders(transport.socketIn, rawResponseHeaders);
         httpEngine.receiveHeaders(rawResponseHeaders);
-        endOfInput();
+        endOfInput(false);
       }
     }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
index f87d619137..a37a91c786 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
@@ -80,15 +80,15 @@ public SpdyTransport(HttpEngine httpEngine, SpdyConnection spdyConnection) {
     return new UnknownLengthHttpInputStream(stream.getInputStream(), cacheRequest, httpEngine);
   }
 
-  @Override public boolean makeReusable(boolean streamCanceled, OutputStream requestBodyOut,
+  @Override public boolean makeReusable(boolean streamCancelled, OutputStream requestBodyOut,
       InputStream responseBodyIn) {
-    if (streamCanceled) {
+    if (streamCancelled) {
       if (stream != null) {
         stream.closeLater(SpdyStream.RST_CANCEL);
         return true;
       } else {
         // If stream is null, it either means that writeRequestHeaders wasn't called
-        // or that SpdyConnection#newStream threw an IOException. In both cases there's
+        // or that SpdyConnection#newStream threw an IOEXception. In both cases there's
         // nothing to do here and this stream can't be reused.
         return false;
       }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Transport.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Transport.java
index d408bfec03..518827e888 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Transport.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Transport.java
@@ -59,6 +59,6 @@
   InputStream getTransferStream(CacheRequest cacheRequest) throws IOException;
 
   /** Returns true if the underlying connection can be recycled. */
-  boolean makeReusable(boolean streamCanceled, OutputStream requestBodyOut,
+  boolean makeReusable(boolean streamReusable, OutputStream requestBodyOut,
       InputStream responseBodyIn);
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/UnknownLengthHttpInputStream.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/UnknownLengthHttpInputStream.java
index ca6bb59f2e..729e0b92de 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/UnknownLengthHttpInputStream.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/UnknownLengthHttpInputStream.java
@@ -25,9 +25,9 @@
 final class UnknownLengthHttpInputStream extends AbstractHttpInputStream {
   private boolean inputExhausted;
 
-  UnknownLengthHttpInputStream(InputStream in, CacheRequest cacheRequest, HttpEngine httpEngine)
+  UnknownLengthHttpInputStream(InputStream is, CacheRequest cacheRequest, HttpEngine httpEngine)
       throws IOException {
-    super(in, httpEngine, cacheRequest);
+    super(is, httpEngine, cacheRequest);
   }
 
   @Override public int read(byte[] buffer, int offset, int count) throws IOException {
@@ -39,7 +39,7 @@
     int read = in.read(buffer, offset, count);
     if (read == -1) {
       inputExhausted = true;
-      endOfInput();
+      endOfInput(false);
       return -1;
     }
     cacheWrite(buffer, offset, read);
