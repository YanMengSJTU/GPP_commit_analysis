diff --git a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
index 50279926a0..e99fb1d5fc 100644
--- a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
@@ -17,7 +17,6 @@
 
 import com.squareup.okhttp.Connection;
 import com.squareup.okhttp.Headers;
-import com.squareup.okhttp.HttpUrl;
 import com.squareup.okhttp.Interceptor;
 import com.squareup.okhttp.MediaType;
 import com.squareup.okhttp.OkHttpClient;
@@ -148,7 +147,7 @@ public HttpLoggingInterceptor setLevel(Level level) {
     Connection connection = chain.connection();
     Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;
     String requestStartMessage =
-        "--> " + request.method() + ' ' + requestPath(request.httpUrl()) + ' ' + protocol(protocol);
+        "--> " + request.method() + ' ' + request.httpUrl() + ' ' + protocol(protocol);
     if (!logHeaders && hasRequestBody) {
       requestStartMessage += " (" + requestBody.contentLength() + "-byte body)";
     }
@@ -237,10 +236,4 @@ public HttpLoggingInterceptor setLevel(Level level) {
   private static String protocol(Protocol protocol) {
     return protocol == Protocol.HTTP_1_0 ? "HTTP/1.0" : "HTTP/1.1";
   }
-
-  private static String requestPath(HttpUrl url) {
-    String path = url.encodedPath();
-    String query = url.encodedQuery();
-    return query != null ? (path + '?' + query) : path;
-  }
 }
diff --git a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
index 96b75a70ab..fb5b0d3f0a 100644
--- a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
@@ -15,6 +15,7 @@
  */
 package com.squareup.okhttp.logging;
 
+import com.squareup.okhttp.HttpUrl;
 import com.squareup.okhttp.MediaType;
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.Request;
@@ -43,6 +44,7 @@
 
   private final OkHttpClient client = new OkHttpClient();
   private String host;
+  private HttpUrl url;
 
   private final LogRecorder networkLogs = new LogRecorder();
   private final HttpLoggingInterceptor networkInterceptor =
@@ -63,6 +65,7 @@ private void setLevel(Level level) {
     client.setConnectionPool(null);
 
     host = server.getHostName() + ":" + server.getPort();
+    url = server.url("/");
   }
 
   @Test public void setLevelShouldPreventNullValue() {
@@ -95,12 +98,12 @@ private void setLevel(Level level) {
     client.newCall(request().build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
   }
@@ -112,12 +115,12 @@ private void setLevel(Level level) {
     client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> POST / HTTP/1.1 (3-byte body)")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1 (3-byte body)")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> POST / HTTP/1.1 (3-byte body)")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1 (3-byte body)")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
   }
@@ -131,12 +134,12 @@ private void setLevel(Level level) {
     client.newCall(request().build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 6-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 6-byte body\\)")
         .assertNoMoreLogs();
   }
@@ -148,7 +151,7 @@ private void setLevel(Level level) {
     client.newCall(request().build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
@@ -158,7 +161,7 @@ private void setLevel(Level level) {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("Host: " + host)
         .assertLogEqual("Connection: Keep-Alive")
         .assertLogEqual("Accept-Encoding: gzip")
@@ -179,7 +182,7 @@ private void setLevel(Level level) {
     client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> POST / HTTP/1.1")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("--> END POST")
@@ -191,7 +194,7 @@ private void setLevel(Level level) {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> POST / HTTP/1.1")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("Host: " + host)
@@ -214,7 +217,7 @@ private void setLevel(Level level) {
     client.newCall(request().post(RequestBody.create(null, "Hi?")).build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> POST / HTTP/1.1")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("--> END POST")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
@@ -225,7 +228,7 @@ private void setLevel(Level level) {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> POST / HTTP/1.1")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("Host: " + host)
         .assertLogEqual("Connection: Keep-Alive")
@@ -256,7 +259,7 @@ private void setLevel(Level level) {
     client.newCall(request().post(body).build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> POST / HTTP/1.1")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("--> END POST")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
@@ -267,7 +270,7 @@ private void setLevel(Level level) {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> POST / HTTP/1.1")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("Transfer-Encoding: chunked")
         .assertLogEqual("Host: " + host)
@@ -292,7 +295,7 @@ private void setLevel(Level level) {
     client.newCall(request().build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
@@ -303,7 +306,7 @@ private void setLevel(Level level) {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("Host: " + host)
         .assertLogEqual("Connection: Keep-Alive")
         .assertLogEqual("Accept-Encoding: gzip")
@@ -325,7 +328,7 @@ private void setLevel(Level level) {
     client.newCall(request().build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
@@ -335,7 +338,7 @@ private void setLevel(Level level) {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("Host: " + host)
         .assertLogEqual("Connection: Keep-Alive")
         .assertLogEqual("Accept-Encoding: gzip")
@@ -365,7 +368,7 @@ private void bodyGetNoBody(int code) throws IOException {
     client.newCall(request().build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
         .assertLogMatch("<-- HTTP/1\\.1 " + code + " No Content \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
@@ -375,7 +378,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("Host: " + host)
         .assertLogEqual("Connection: Keep-Alive")
         .assertLogEqual("Accept-Encoding: gzip")
@@ -396,7 +399,7 @@ private void bodyGetNoBody(int code) throws IOException {
     client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> POST / HTTP/1.1")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("")
@@ -410,7 +413,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> POST / HTTP/1.1")
+        .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("Host: " + host)
@@ -437,7 +440,7 @@ private void bodyGetNoBody(int code) throws IOException {
     client.newCall(request().build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
@@ -450,7 +453,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("Host: " + host)
         .assertLogEqual("Connection: Keep-Alive")
         .assertLogEqual("Accept-Encoding: gzip")
@@ -476,7 +479,7 @@ private void bodyGetNoBody(int code) throws IOException {
     client.newCall(request().build()).execute();
 
     applicationLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
         .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
         .assertLogEqual("Transfer-encoding: chunked")
@@ -489,7 +492,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertNoMoreLogs();
 
     networkLogs
-        .assertLogEqual("--> GET / HTTP/1.1")
+        .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("Host: " + host)
         .assertLogEqual("Connection: Keep-Alive")
         .assertLogEqual("Accept-Encoding: gzip")
@@ -507,7 +510,7 @@ private void bodyGetNoBody(int code) throws IOException {
   }
 
   private Request.Builder request() {
-    return new Request.Builder().url(server.url("/"));
+    return new Request.Builder().url(url);
   }
 
   private static class LogRecorder implements HttpLoggingInterceptor.Logger {
