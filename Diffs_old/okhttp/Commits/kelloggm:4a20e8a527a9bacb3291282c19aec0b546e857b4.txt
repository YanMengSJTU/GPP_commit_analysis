diff --git a/.gitignore b/.gitignore
index d2b9133572..49ff556f15 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,27 +1,9 @@
-.classpath
-.project
-.settings
+# Ignore Gradle project-specific cache directory
 .gradle
-eclipsebin
 
-bin
-gen
+# Ignore Gradle build output directory
 build
-out
-lib
-generated
 
-target
-pom.xml.*
-release.properties
-local.properties
-
-.idea
-*.iml
-*.ipr
-*.iws
-classes
-
-obj
-
-.DS_Store
+# IDEA
+.idea/
+*.iml
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index b8370febb5..4bb99b42b1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -46,7 +46,6 @@ buildscript {
     classpath 'com.vanniktech:gradle-maven-publish-plugin:0.8.0'
     classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.7.1'
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
-    classpath 'com.jaredsburrows:gradle-checker-framework-plugin:0.2.3-SNAPSHOT'    
   }
 }
 
@@ -54,6 +53,7 @@ plugins {
   id 'ru.vyarus.animalsniffer' version '1.5.0'
   id 'com.github.johnrengelman.shadow' version '4.0.1'
   id 'me.champeau.gradle.japicmp' version '0.2.6'
+  id 'org.checkerframework' version '0.3.4'
 }
 
 allprojects {
@@ -80,8 +80,8 @@ subprojects { project ->
   sourceCompatibility = JavaVersion.VERSION_1_8
   targetCompatibility = JavaVersion.VERSION_1_8
 
-  
-  apply plugin: 'com.jaredsburrows.checkerframework'
+  apply plugin: 'org.checkerframework'
+  //apply plugin: 'com.jaredsburrows.checkerframework'
 
   apply plugin: 'checkstyle'
   checkstyleMain.exclude '**/CipherSuite.java'
@@ -123,21 +123,25 @@ subprojects { project ->
   checkerFramework {
     checkers = [
              'com.amazon.checkerframework.compliance.kms.ComplianceChecker',
-             'com.amazon.checkerframework.cryptopolicy.CryptoPolicyComplianceChecker'
+             'com.amazon.checkerframework.cryptopolicy.CryptoPolicyComplianceChecker',
+             'org.checkerframework.checker.https.HTTPSChecker'
     ]
-    extraJavacArgs = ['-Xmaxerrs', '1000', '-AsuppressWarnings=cast.unsafe', "-Astubs=$rootProject.projectDir/stubs"]
+    extraJavacArgs = ['-AprintVerboseGenerics', '-Xmaxerrs', '1000', '-AsuppressWarnings=cast.unsafe', "-Astubs=$rootProject.projectDir/stubs"]
   }
 
 //  apply plugin: 'net.ltgt.errorprone'
   dependencies {
 //    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
 //    errorprone 'com.google.errorprone:error_prone_core:2.3.3'
-    
-    checkerFramework 'com.amazonaws:kms-compliance-checker:1.0'
-    checkerFramework 'com.amazonaws:aws-crypto-compliance-checker:1.0'
-    implementation 'com.amazonaws:aws-crypto-compliance-checker:1.0'  
+
+    checkerFramework 'software.amazon.checkerframework:aws-kms-compliance-checker:1.0.2'
+    implementation 'software.amazon.checkerframework:aws-kms-compliance-checker:1.0.2'
+    checkerFramework 'software.amazon.checkerframework:aws-crypto-compliance-checker:1.0'
+    implementation 'software.amazon.checkerframework:aws-crypto-compliance-checker:1.0'
     checkerFramework 'org.checkerframework:checker:2.+'
     checkerFramework 'org.checkerframework:checker-qual:2.+'
+    checkerFramework 'org.checkerframework:HTTPSChecker:0.1-SNAPSHOT'
+    implementation 'org.checkerframework:HTTPSChecker:0.1-SNAPSHOT'
   }
 }
 
@@ -183,7 +187,7 @@ def alpnBootVersionForPatchVersion(String javaVersion, int patchVersion) {
       return '8.1.11.v20170118'
     case 161..181:
       return '8.1.12.v20180117'
-    case 191..202:
+    case 191..212:
       return '8.1.13.v20181017'
     default:
       throw new IllegalStateException("Unexpected Java version: ${javaVersion}")
diff --git a/checkstyle.xml b/checkstyle.xml
index f66aad53f8..60745ee3c0 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -5,7 +5,6 @@
 
 <module name="Checker">
   <module name="SuppressWarningsFilter"/>
-  <module name="NewlineAtEndOfFile"/>
   <module name="FileLength"/>
   <module name="FileTabCharacter"/>
 
diff --git a/gradle/compile.gradle b/gradle/compile.gradle
new file mode 100644
index 0000000000..c4c45d4138
--- /dev/null
+++ b/gradle/compile.gradle
@@ -0,0 +1,45 @@
+tasks.withType(JavaCompile) {
+  sourceCompatibility = rootProject.versions.java
+  targetCompatibility = rootProject.versions.java
+
+  // Show all warnings except boot classpath
+  configure(options) {
+    compilerArgs << '-Xlint:all'            // Turn on all warnings
+    compilerArgs << '-Werror'               // Turn warnings into errors
+    encoding = 'utf-8'
+  }
+}
+
+tasks.withType(GroovyCompile) {
+  sourceCompatibility = rootProject.versions.java
+  targetCompatibility = rootProject.versions.java
+
+  // Show all warnings except boot classpath
+  configure(options) {
+    compilerArgs << '-Xlint:all'            // Turn on all warnings
+    compilerArgs << '-Werror'               // Turn warnings into errors
+    compilerArgs << '-proc:none'            // Google AutoValue APs are leaking onto compile classpath, causing warning
+                                            // from Gradle
+    encoding = 'utf-8'
+  }
+}
+
+tasks.withType(Test) {
+  // Turn on logging for all tests, filter to show failures/skips only
+  testLogging {
+    exceptionFormat 'full'
+    showCauses true
+    showExceptions true
+    showStackTraces true
+    events 'failed', 'skipped'
+  }
+}
+
+tasks.withType(Groovydoc) {
+  docTitle = "${project.name} ${project.version}"
+  header = project.name
+  link('http://docs.oracle.com/javase/8/docs/api/',
+          'http://docs.oracle.com/javaee/7/api/',
+          'http://groovy.codehaus.org/gapi/')
+  exclude '**/*Spec.java'
+}
diff --git a/gradle/dependencies.gradle b/gradle/dependencies.gradle
new file mode 100644
index 0000000000..3ca428449b
--- /dev/null
+++ b/gradle/dependencies.gradle
@@ -0,0 +1,14 @@
+ext.versions = [
+  'java': '1.8'
+]
+
+ext.deps = [
+  'android': [
+    'tools': [
+      'build': [
+        'gradle': 'com.android.tools.build:gradle:3.2.1',
+      ]
+    ]
+  ],
+  'spock'  : 'org.spockframework:spock-core:1.1-groovy-2.4',
+]
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 5c2d1cf016..457aad0d98 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b8a51fe209..eca5892dea 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,6 @@
+#Wed Jan 02 10:01:02 PST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-5.3-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.0-all.zip
diff --git a/okhttp/src/main/java/okhttp3/ConnectionSpec.java b/okhttp/src/main/java/okhttp3/ConnectionSpec.java
index d2ad0f02aa..e1340dc0ad 100644
--- a/okhttp/src/main/java/okhttp3/ConnectionSpec.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java
@@ -41,10 +41,10 @@
  * defer all feature selection to the underlying SSL socket.
  *
  * <p>The configuration of each spec changes with each OkHttp release. This is annoying: upgrading
- * your OkHttp library can break connectivity to certain web servers! But it’s a necessary annoyance
- * because the TLS ecosystem is dynamic and staying up to date is necessary to stay secure. See
- * <a href="https://github.com/square/okhttp/wiki/TLS-Configuration-History">OkHttp's TLS
- * Configuration History</a> to track these changes.
+ * your OkHttp library can break connectivity to certain web servers! But it’s a necessary
+ * annoyance because the TLS ecosystem is dynamic and staying up to date is necessary to stay
+ * secure. See <a href="https://github.com/square/okhttp/wiki/TLS-Configuration-History">OkHttp's
+ * TLS Configuration History</a> to track these changes.
  */
 public final class ConnectionSpec {
 
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
index fd15c72554..61a3c13b56 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -233,7 +233,9 @@ public static ThreadFactory threadFactory(String name, boolean daemon) {
     List<String> result = new ArrayList<>();
     for (String a : first) {
       for (String b : second) {
-        if (comparator.compare(a, b) == 0) {
+        @SuppressWarnings("https") int value = comparator.compare(a, b);
+        //False Positive
+        if (value == 0) {
           result.add(a);
           break;
         }
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
index 72bd8d6b12..78673e4c4b 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
@@ -430,13 +430,14 @@ private Request createTunnel(int readTimeout, int writeTimeout, Request tunnelRe
   }
 
   /**
-   * Returns a request that creates a TLS tunnel via an HTTP proxy. Everything in the tunnel request
-   * is sent unencrypted to the proxy server, so tunnels include only the minimum set of headers.
-   * This avoids sending potentially sensitive data like HTTP cookies to the proxy unencrypted.
+   * Returns a request that creates a TLS tunnel via an HTTP proxy. Everything in the tunnel
+   * request is sent unencrypted to the proxy server, so tunnels include only the minimum set of
+   * headers. This avoids sending potentially sensitive data like HTTP cookies to the proxy
+   * unencrypted.
    *
-   * <p>In order to support preemptive authentication we pass a fake “Auth Failed” response to the
-   * authenticator. This gives the authenticator the option to customize the CONNECT request. It can
-   * decline to do so by returning null, in which case OkHttp will use it as-is
+   * In order to support preemptive authentication we pass a fake “Auth Failed” response to the
+   * authenticator. This gives the authenticator the option to customize the CONNECT request. It
+   * can decline to do so by returning null, in which case OkHttp will use it as-is
    */
   private Request createTunnelRequest() throws IOException {
     Request proxyConnectRequest = new Request.Builder()
diff --git a/okhttp/src/test/java/okhttp3/HttpUrlTest.java b/okhttp/src/test/java/okhttp3/HttpUrlTest.java
index f6db518bdd..cb0ec12cc8 100644
--- a/okhttp/src/test/java/okhttp3/HttpUrlTest.java
+++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java
@@ -1459,14 +1459,16 @@ HttpUrl parse(String url) {
   }
 
   @Test public void fromJavaNetUrl() throws Exception {
-    URL javaNetUrl = new URL("http://username:password@host/path?query#fragment");
+    @SuppressWarnings("https") URL javaNetUrl = new URL("http://username:password@host/" +
+            "path?query#fragment"); //Test Cases not that interesting
     HttpUrl httpUrl = HttpUrl.get(javaNetUrl);
     assertThat(httpUrl.toString())
         .isEqualTo("http://username:password@host/path?query#fragment");
   }
 
   @Test public void fromJavaNetUrlUnsupportedScheme() throws Exception {
-    URL javaNetUrl = new URL("mailto:user@example.com");
+    @SuppressWarnings("https") URL javaNetUrl = new URL("mailto:user@example.com");
+    //Test Cases not that interesting
     assertThat(HttpUrl.get(javaNetUrl)).isNull();
   }
 
