diff --git a/okhttp-tests/src/test/java/okhttp3/CallTest.java b/okhttp-tests/src/test/java/okhttp3/CallTest.java
index 5c590bd4aa..21c4f2d8cf 100644
--- a/okhttp-tests/src/test/java/okhttp3/CallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java
@@ -15,20 +15,6 @@
  */
 package okhttp3;
 
-import okhttp3.internal.DoubleInetAddressDns;
-import okhttp3.internal.RecordingOkAuthenticator;
-import okhttp3.internal.SingleInetAddressDns;
-import okhttp3.internal.SslContextBuilder;
-import okhttp3.internal.Util;
-import okhttp3.internal.Version;
-import okhttp3.internal.http.FakeDns;
-import okhttp3.internal.io.InMemoryFileSystem;
-import okhttp3.mockwebserver.Dispatcher;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
-import okhttp3.mockwebserver.SocketPolicy;
-import okhttp3.testing.RecordingHostnameVerifier;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -62,6 +48,20 @@
 import javax.net.ssl.SSLProtocolException;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.internal.DoubleInetAddressDns;
+import okhttp3.internal.RecordingOkAuthenticator;
+import okhttp3.internal.SingleInetAddressDns;
+import okhttp3.internal.SslContextBuilder;
+import okhttp3.internal.Util;
+import okhttp3.internal.Version;
+import okhttp3.internal.http.FakeDns;
+import okhttp3.internal.io.InMemoryFileSystem;
+import okhttp3.mockwebserver.Dispatcher;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
+import okhttp3.mockwebserver.SocketPolicy;
+import okhttp3.testing.RecordingHostnameVerifier;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
@@ -74,8 +74,8 @@
 import org.junit.rules.TestRule;
 import org.junit.rules.Timeout;
 
-import static okhttp3.internal.Internal.logger;
 import static java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER;
+import static okhttp3.internal.Internal.logger;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotSame;
@@ -2077,7 +2077,7 @@ private InetSocketAddress startNullServer() throws IOException {
 
     client.setSslSocketFactory(sslContext.getSocketFactory());
     client.setProxy(server.toProxyAddress());
-    client.setAuthenticator(new RecordingOkAuthenticator("password"));
+    client.setProxyAuthenticator(new RecordingOkAuthenticator("password"));
     client.setHostnameVerifier(new RecordingHostnameVerifier());
 
     Request request = new Request.Builder()
diff --git a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
index 972ebce236..7a5477d04c 100644
--- a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
@@ -15,10 +15,6 @@
  */
 package okhttp3;
 
-import okhttp3.internal.RecordingAuthenticator;
-import okhttp3.internal.http.AuthenticatorAdapter;
-import okhttp3.internal.http.RecordingProxySelector;
-import okhttp3.internal.tls.OkHostnameVerifier;
 import java.io.IOException;
 import java.net.Authenticator;
 import java.net.CacheRequest;
@@ -34,6 +30,10 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import javax.net.SocketFactory;
+import okhttp3.internal.RecordingAuthenticator;
+import okhttp3.internal.http.AuthenticatorAdapter;
+import okhttp3.internal.http.RecordingProxySelector;
+import okhttp3.internal.tls.OkHostnameVerifier;
 import org.junit.After;
 import org.junit.Test;
 
@@ -126,6 +126,7 @@
     assertSame(proxySelector, client.getProxySelector());
     assertSame(cookieManager, client.getCookieHandler());
     assertSame(AuthenticatorAdapter.INSTANCE, client.getAuthenticator());
+    assertSame(AuthenticatorAdapter.INSTANCE, client.getProxyAuthenticator());
     assertSame(socketFactory, client.getSocketFactory());
     assertSame(hostnameVerifier, client.getHostnameVerifier());
     assertSame(certificatePinner, client.getCertificatePinner());
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java b/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
index 5253448436..7d9d2bfe6a 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/RecordingOkAuthenticator.java
@@ -15,12 +15,14 @@
  */
 package okhttp3.internal;
 
-import okhttp3.Authenticator;
-import okhttp3.Request;
-import okhttp3.Response;
+import java.io.IOException;
 import java.net.Proxy;
 import java.util.ArrayList;
 import java.util.List;
+import okhttp3.Authenticator;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.Route;
 
 public final class RecordingOkAuthenticator implements Authenticator {
   public final List<Response> responses = new ArrayList<>();
@@ -41,19 +43,12 @@ public Proxy onlyProxy() {
     return proxies.get(0);
   }
 
-  @Override public Request authenticate(Proxy proxy, Response response) {
-    responses.add(response);
-    proxies.add(proxy);
-    return response.request().newBuilder()
-        .addHeader("Authorization", credential)
-        .build();
-  }
-
-  @Override public Request authenticateProxy(Proxy proxy, Response response) {
+  @Override public Request authenticate(Route route, Response response) throws IOException {
     responses.add(response);
-    proxies.add(proxy);
+    proxies.add(route.proxy());
+    String header = response.code() == 407 ? "Proxy-Authorization" : "Authorization";
     return response.request().newBuilder()
-        .addHeader("Proxy-Authorization", credential)
+        .addHeader(header, credential)
         .build();
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/Address.java b/okhttp/src/main/java/okhttp3/Address.java
index f0ac341274..51f2452184 100644
--- a/okhttp/src/main/java/okhttp3/Address.java
+++ b/okhttp/src/main/java/okhttp3/Address.java
@@ -15,13 +15,13 @@
  */
 package okhttp3;
 
-import okhttp3.internal.Util;
 import java.net.Proxy;
 import java.net.ProxySelector;
 import java.util.List;
 import javax.net.SocketFactory;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.internal.Util;
 
 import static okhttp3.internal.Util.equal;
 
@@ -39,7 +39,7 @@
   final HttpUrl url;
   final Dns dns;
   final SocketFactory socketFactory;
-  final Authenticator authenticator;
+  final Authenticator proxyAuthenticator;
   final List<Protocol> protocols;
   final List<ConnectionSpec> connectionSpecs;
   final ProxySelector proxySelector;
@@ -50,7 +50,7 @@
 
   public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory,
       SSLSocketFactory sslSocketFactory, HostnameVerifier hostnameVerifier,
-      CertificatePinner certificatePinner, Authenticator authenticator, Proxy proxy,
+      CertificatePinner certificatePinner, Authenticator proxyAuthenticator, Proxy proxy,
       List<Protocol> protocols, List<ConnectionSpec> connectionSpecs, ProxySelector proxySelector) {
     this.url = new HttpUrl.Builder()
         .scheme(sslSocketFactory != null ? "https" : "http")
@@ -64,8 +64,10 @@ public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory
     if (socketFactory == null) throw new IllegalArgumentException("socketFactory == null");
     this.socketFactory = socketFactory;
 
-    if (authenticator == null) throw new IllegalArgumentException("authenticator == null");
-    this.authenticator = authenticator;
+    if (proxyAuthenticator == null) {
+      throw new IllegalArgumentException("proxyAuthenticator == null");
+    }
+    this.proxyAuthenticator = proxyAuthenticator;
 
     if (protocols == null) throw new IllegalArgumentException("protocols == null");
     this.protocols = Util.immutableList(protocols);
@@ -100,9 +102,9 @@ public SocketFactory socketFactory() {
     return socketFactory;
   }
 
-  /** Returns the client's authenticator. */
-  public Authenticator authenticator() {
-    return authenticator;
+  /** Returns the client's proxy authenticator. */
+  public Authenticator proxyAuthenticator() {
+    return proxyAuthenticator;
   }
 
   /**
@@ -153,7 +155,7 @@ public CertificatePinner certificatePinner() {
       Address that = (Address) other;
       return this.url.equals(that.url)
           && this.dns.equals(that.dns)
-          && this.authenticator.equals(that.authenticator)
+          && this.proxyAuthenticator.equals(that.proxyAuthenticator)
           && this.protocols.equals(that.protocols)
           && this.connectionSpecs.equals(that.connectionSpecs)
           && this.proxySelector.equals(that.proxySelector)
@@ -169,7 +171,7 @@ public CertificatePinner certificatePinner() {
     int result = 17;
     result = 31 * result + url.hashCode();
     result = 31 * result + dns.hashCode();
-    result = 31 * result + authenticator.hashCode();
+    result = 31 * result + proxyAuthenticator.hashCode();
     result = 31 * result + protocols.hashCode();
     result = 31 * result + connectionSpecs.hashCode();
     result = 31 * result + proxySelector.hashCode();
diff --git a/okhttp/src/main/java/okhttp3/Authenticator.java b/okhttp/src/main/java/okhttp3/Authenticator.java
index 088bd5b910..01568038be 100644
--- a/okhttp/src/main/java/okhttp3/Authenticator.java
+++ b/okhttp/src/main/java/okhttp3/Authenticator.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013 Square, Inc.
+ * Copyright (C) 2015 Square, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,45 +16,40 @@
 package okhttp3;
 
 import java.io.IOException;
-import java.net.Proxy;
 
 /**
- * Responds to authentication challenges from the remote web or proxy server.
+ * Responds to an authentication challenge from either a remote web server or a proxy server.
+ * Implementations may either attempt to satisfy the challenge by returning a request that includes
+ * an authorization header, or they may refuse the challenge by returning null. In this case the
+ * unauthenticated response will be returned to the caller that triggered it.
+ *
+ * <p>When authentication is requested by an origin server, the response code is 401 and the
+ * implementation should respond with a new request that sets the "Authorization" header.
+ * <pre>   {@code
+ *
+ *    String credential = Credentials.basic(...)
+ *    return response.request().newBuilder()
+ *        .header("Authorization", credential)
+ *        .build();
+ * }</pre>
+ *
+ * <p>Whn authentication is requested by a proxy server, the response code is 407 and the
+ * implementation should respond with a new request that sets the "Proxy-Authorization" header.
+ *  <pre>   {@code
+ *
+ *    String credential = Credentials.basic(...)
+ *    return response.request().newBuilder()
+ *        .header("Proxy-Authorization", credential)
+ *        .build();
+ * }</pre>
+ *
+ * <p>Applications may configure OkHttp with an authenticator for origin servers, or proxy servers,
+ * or both.
  */
 public interface Authenticator {
   /**
-   * Returns a request that includes a credential to satisfy an authentication
-   * challenge in {@code response}. Returns null if the challenge cannot be
-   * satisfied. This method is called in response to an HTTP 401 unauthorized
-   * status code sent by the origin server.
-   *
-   * <p>Typical implementations will look up a credential and create a request
-   * derived from the initial request by setting the "Authorization" header.
-   * <pre>   {@code
-   *
-   *    String credential = Credentials.basic(...)
-   *    return response.request().newBuilder()
-   *        .header("Authorization", credential)
-   *        .build();
-   * }</pre>
-   */
-  Request authenticate(Proxy proxy, Response response) throws IOException;
-
-  /**
-   * Returns a request that includes a credential to satisfy an authentication
-   * challenge made by {@code response}. Returns null if the challenge cannot be
-   * satisfied. This method is called in response to an HTTP 407 unauthorized
-   * status code sent by the proxy server.
-   *
-   * <p>Typical implementations will look up a credential and create a request
-   * derived from the initial request by setting the "Proxy-Authorization"
-   * header. <pre>   {@code
-   *
-   *    String credential = Credentials.basic(...)
-   *    return response.request().newBuilder()
-   *        .header("Proxy-Authorization", credential)
-   *        .build();
-   * }</pre>
+   * Returns a request that includes a credential to satisfy an authentication challenge in {@code
+   * response}. Returns null if the challenge cannot be satisfied.
    */
-  Request authenticateProxy(Proxy proxy, Response response) throws IOException;
+  Request authenticate(Route route, Response response) throws IOException;
 }
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index d9a534e03d..7e1c2549c7 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -15,14 +15,6 @@
  */
 package okhttp3;
 
-import okhttp3.internal.Internal;
-import okhttp3.internal.InternalCache;
-import okhttp3.internal.RouteDatabase;
-import okhttp3.internal.Util;
-import okhttp3.internal.http.AuthenticatorAdapter;
-import okhttp3.internal.http.StreamAllocation;
-import okhttp3.internal.io.RealConnection;
-import okhttp3.internal.tls.OkHostnameVerifier;
 import java.net.CookieHandler;
 import java.net.MalformedURLException;
 import java.net.Proxy;
@@ -38,6 +30,14 @@
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.internal.Internal;
+import okhttp3.internal.InternalCache;
+import okhttp3.internal.RouteDatabase;
+import okhttp3.internal.Util;
+import okhttp3.internal.http.AuthenticatorAdapter;
+import okhttp3.internal.http.StreamAllocation;
+import okhttp3.internal.io.RealConnection;
+import okhttp3.internal.tls.OkHostnameVerifier;
 
 /**
  * Configures and creates HTTP connections. Most applications can use a single
@@ -135,6 +135,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   private SSLSocketFactory sslSocketFactory;
   private HostnameVerifier hostnameVerifier;
   private CertificatePinner certificatePinner;
+  private Authenticator proxyAuthenticator;
   private Authenticator authenticator;
   private ConnectionPool connectionPool;
   private Dns dns;
@@ -166,6 +167,7 @@ private OkHttpClient(OkHttpClient okHttpClient) {
     this.sslSocketFactory = okHttpClient.sslSocketFactory;
     this.hostnameVerifier = okHttpClient.hostnameVerifier;
     this.certificatePinner = okHttpClient.certificatePinner;
+    this.proxyAuthenticator = okHttpClient.proxyAuthenticator;
     this.authenticator = okHttpClient.authenticator;
     this.connectionPool = okHttpClient.connectionPool;
     this.dns = okHttpClient.dns;
@@ -384,10 +386,10 @@ public CertificatePinner getCertificatePinner() {
   }
 
   /**
-   * Sets the authenticator used to respond to challenges from the remote web
-   * server or proxy server.
+   * Sets the authenticator used to respond to challenges from origin servers. Use {@link
+   * #setProxyAuthenticator} to set the authenticator for proxy servers.
    *
-   * <p>If unset, the {@link java.net.Authenticator#setDefault system-wide default}
+   * <p>If unset, the {@linkplain java.net.Authenticator#setDefault system-wide default}
    * authenticator will be used.
    */
   public OkHttpClient setAuthenticator(Authenticator authenticator) {
@@ -399,6 +401,22 @@ public Authenticator getAuthenticator() {
     return authenticator;
   }
 
+  /**
+   * Sets the authenticator used to respond to challenges from proxy servers. Use {@link
+   * #setAuthenticator} to set the authenticator for origin servers.
+   *
+   * <p>If unset, the {@linkplain java.net.Authenticator#setDefault system-wide default}
+   * authenticator will be used.
+   */
+  public OkHttpClient setProxyAuthenticator(Authenticator proxyAuthenticator) {
+    this.proxyAuthenticator = proxyAuthenticator;
+    return this;
+  }
+
+  public Authenticator getProxyAuthenticator() {
+    return proxyAuthenticator;
+  }
+
   /**
    * Sets the connection pool used to recycle HTTP and HTTPS connections.
    *
@@ -604,6 +622,9 @@ OkHttpClient copyWithDefaults() {
     if (result.authenticator == null) {
       result.authenticator = AuthenticatorAdapter.INSTANCE;
     }
+    if (result.proxyAuthenticator == null) {
+      result.proxyAuthenticator = AuthenticatorAdapter.INSTANCE;
+    }
     if (result.connectionPool == null) {
       result.connectionPool = ConnectionPool.getDefault();
     }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java b/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java
index f446af7c6b..09d875999c 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java
@@ -15,12 +15,6 @@
  */
 package okhttp3.internal.http;
 
-import okhttp3.Authenticator;
-import okhttp3.Challenge;
-import okhttp3.Credentials;
-import okhttp3.HttpUrl;
-import okhttp3.Request;
-import okhttp3.Response;
 import java.io.IOException;
 import java.net.Authenticator.RequestorType;
 import java.net.InetAddress;
@@ -28,55 +22,52 @@
 import java.net.PasswordAuthentication;
 import java.net.Proxy;
 import java.util.List;
+import okhttp3.Authenticator;
+import okhttp3.Challenge;
+import okhttp3.Credentials;
+import okhttp3.HttpUrl;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.Route;
 
 /** Adapts {@link java.net.Authenticator} to {@link Authenticator}. */
 public final class AuthenticatorAdapter implements Authenticator {
   /** Uses the global authenticator to get the password. */
   public static final Authenticator INSTANCE = new AuthenticatorAdapter();
 
-  @Override public Request authenticate(Proxy proxy, Response response) throws IOException {
+  @Override public Request authenticate(Route route, Response response) throws IOException {
     List<Challenge> challenges = response.challenges();
     Request request = response.request();
     HttpUrl url = request.url();
-    for (int i = 0, size = challenges.size(); i < size; i++) {
-      Challenge challenge = challenges.get(i);
-      if (!"Basic".equalsIgnoreCase(challenge.scheme())) continue;
-
-      PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(
-          url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(),
-          challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);
-      if (auth == null) continue;
-
-      String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));
-      return request.newBuilder()
-          .header("Authorization", credential)
-          .build();
-    }
-    return null;
+    boolean proxyAuthorization = response.code() == 407;
+    Proxy proxy = route.proxy();
 
-  }
-
-  @Override public Request authenticateProxy(Proxy proxy, Response response) throws IOException {
-    List<Challenge> challenges = response.challenges();
-    Request request = response.request();
-    HttpUrl url = request.url();
     for (int i = 0, size = challenges.size(); i < size; i++) {
       Challenge challenge = challenges.get(i);
       if (!"Basic".equalsIgnoreCase(challenge.scheme())) continue;
 
-      InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();
-      PasswordAuthentication auth = java.net.Authenticator.requestPasswordAuthentication(
-          proxyAddress.getHostName(), getConnectToInetAddress(proxy, url), proxyAddress.getPort(),
-          url.scheme(), challenge.realm(), challenge.scheme(), url.url(),
-          RequestorType.PROXY);
-      if (auth == null) continue;
+      PasswordAuthentication auth;
+      if (proxyAuthorization) {
+        InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();
+        auth = java.net.Authenticator.requestPasswordAuthentication(
+            proxyAddress.getHostName(), getConnectToInetAddress(proxy, url), proxyAddress.getPort(),
+            url.scheme(), challenge.realm(), challenge.scheme(), url.url(),
+            RequestorType.PROXY);
+      } else {
+        auth = java.net.Authenticator.requestPasswordAuthentication(
+            url.host(), getConnectToInetAddress(proxy, url), url.port(), url.scheme(),
+            challenge.realm(), challenge.scheme(), url.url(), RequestorType.SERVER);
+      }
 
-      String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));
-      return request.newBuilder()
-          .header("Proxy-Authorization", credential)
-          .build();
+      if (auth != null) {
+        String credential = Credentials.basic(auth.getUserName(), new String(auth.getPassword()));
+        return request.newBuilder()
+            .header(proxyAuthorization ? "Proxy-Authorization" : "Authorization", credential)
+            .build();
+      }
     }
-    return null;
+
+    return null; // No challenges were satisfied!
   }
 
   private InetAddress getConnectToInetAddress(Proxy proxy, HttpUrl url) throws IOException {
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
index 3fe294a033..cdd6722cbb 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpEngine.java
@@ -17,6 +17,15 @@
 
 package okhttp3.internal.http;
 
+import java.io.IOException;
+import java.net.CookieHandler;
+import java.net.ProtocolException;
+import java.net.Proxy;
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLSocketFactory;
 import okhttp3.Address;
 import okhttp3.CertificatePinner;
 import okhttp3.Connection;
@@ -33,15 +42,6 @@
 import okhttp3.internal.Internal;
 import okhttp3.internal.InternalCache;
 import okhttp3.internal.Version;
-import java.io.IOException;
-import java.net.CookieHandler;
-import java.net.ProtocolException;
-import java.net.Proxy;
-import java.util.Date;
-import java.util.List;
-import java.util.Map;
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.SSLSocketFactory;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
@@ -51,7 +51,6 @@
 import okio.Source;
 import okio.Timeout;
 
-import static okhttp3.internal.Util.closeQuietly;
 import static java.net.HttpURLConnection.HTTP_MOVED_PERM;
 import static java.net.HttpURLConnection.HTTP_MOVED_TEMP;
 import static java.net.HttpURLConnection.HTTP_MULT_CHOICE;
@@ -61,6 +60,7 @@
 import static java.net.HttpURLConnection.HTTP_SEE_OTHER;
 import static java.net.HttpURLConnection.HTTP_UNAUTHORIZED;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static okhttp3.internal.Util.closeQuietly;
 import static okhttp3.internal.Util.discard;
 import static okhttp3.internal.Util.hostHeader;
 import static okhttp3.internal.http.StatusLine.HTTP_CONTINUE;
@@ -893,20 +893,20 @@ public Request followUpRequest() throws IOException {
     Route route = connection != null
         ? connection.getRoute()
         : null;
-    Proxy selectedProxy = route != null
-        ? route.proxy()
-        : client.getProxy();
     int responseCode = userResponse.code();
 
     final String method = userRequest.method();
     switch (responseCode) {
       case HTTP_PROXY_AUTH:
+        Proxy selectedProxy = route != null
+            ? route.proxy()
+            : client.getProxy();
         if (selectedProxy.type() != Proxy.Type.HTTP) {
           throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");
         }
         // fall-through
       case HTTP_UNAUTHORIZED:
-        return OkHeaders.processAuthHeader(client.getAuthenticator(), userResponse, selectedProxy);
+        return client.getAuthenticator().authenticate(route, userResponse);
 
       case HTTP_PERM_REDIRECT:
       case HTTP_TEMP_REDIRECT:
@@ -984,7 +984,7 @@ private static Address createAddress(OkHttpClient client, Request request) {
 
     return new Address(request.url().host(), request.url().port(), client.getDns(),
         client.getSocketFactory(), sslSocketFactory, hostnameVerifier, certificatePinner,
-        client.getAuthenticator(), client.getProxy(), client.getProtocols(),
+        client.getProxyAuthenticator(), client.getProxy(), client.getProtocols(),
         client.getConnectionSpecs(), client.getProxySelector());
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java b/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
index 5d50dbe708..a8316c0f00 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
@@ -1,13 +1,5 @@
 package okhttp3.internal.http;
 
-import okhttp3.Authenticator;
-import okhttp3.Challenge;
-import okhttp3.Headers;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.internal.Platform;
-import java.io.IOException;
-import java.net.Proxy;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -16,9 +8,13 @@
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.TreeSet;
+import okhttp3.Challenge;
+import okhttp3.Headers;
 import okhttp3.Protocol;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.Platform;
 
-import static java.net.HttpURLConnection.HTTP_PROXY_AUTH;
 import static okhttp3.internal.Util.equal;
 
 /** Headers and utilities for internal use by OkHttp. */
@@ -276,16 +272,4 @@ static boolean isEndToEnd(String fieldName) {
     }
     return result;
   }
-
-  /**
-   * React to a failed authorization response by looking up new credentials.
-   * Returns a request for a subsequent attempt, or null if no further attempts
-   * should be made.
-   */
-  public static Request processAuthHeader(Authenticator authenticator, Response response,
-      Proxy proxy) throws IOException {
-    return response.code() == HTTP_PROXY_AUTH
-        ? authenticator.authenticateProxy(proxy, response)
-        : authenticator.authenticate(proxy, response);
-  }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/io/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/io/RealConnection.java
index ad0e91eec0..59a1c5b4b4 100644
--- a/okhttp/src/main/java/okhttp3/internal/io/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/io/RealConnection.java
@@ -16,6 +16,20 @@
  */
 package okhttp3.internal.io;
 
+import java.io.IOException;
+import java.lang.ref.Reference;
+import java.net.ConnectException;
+import java.net.Proxy;
+import java.net.Socket;
+import java.net.SocketTimeoutException;
+import java.net.UnknownServiceException;
+import java.security.cert.X509Certificate;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import javax.net.ssl.SSLPeerUnverifiedException;
+import javax.net.ssl.SSLSocket;
+import javax.net.ssl.SSLSocketFactory;
 import okhttp3.Address;
 import okhttp3.CertificatePinner;
 import okhttp3.Connection;
@@ -36,29 +50,15 @@
 import okhttp3.internal.http.RouteException;
 import okhttp3.internal.http.StreamAllocation;
 import okhttp3.internal.tls.OkHostnameVerifier;
-import java.io.IOException;
-import java.lang.ref.Reference;
-import java.net.ConnectException;
-import java.net.Proxy;
-import java.net.Socket;
-import java.net.SocketTimeoutException;
-import java.net.UnknownServiceException;
-import java.security.cert.X509Certificate;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-import javax.net.ssl.SSLPeerUnverifiedException;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.SSLSocketFactory;
 import okio.BufferedSink;
 import okio.BufferedSource;
 import okio.Okio;
 import okio.Source;
 
-import static okhttp3.internal.Util.closeQuietly;
 import static java.net.HttpURLConnection.HTTP_OK;
 import static java.net.HttpURLConnection.HTTP_PROXY_AUTH;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static okhttp3.internal.Util.closeQuietly;
 
 public final class RealConnection implements Connection {
   private final Route route;
@@ -265,8 +265,7 @@ private void createTunnel(int readTimeout, int writeTimeout) throws IOException
           return;
 
         case HTTP_PROXY_AUTH:
-          tunnelRequest = OkHeaders.processAuthHeader(
-              route.address().authenticator(), response, route.proxy());
+          tunnelRequest = route.address().proxyAuthenticator().authenticate(route, response);
           if (tunnelRequest != null) continue;
           throw new IOException("Failed to authenticate with proxy");
 
diff --git a/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
index 5a2b9e7d35..09b29cccd1 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
@@ -15,20 +15,20 @@
  */
 package okhttp3.recipes;
 
+import java.io.IOException;
 import okhttp3.Authenticator;
 import okhttp3.Credentials;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
-import java.io.IOException;
-import java.net.Proxy;
+import okhttp3.Route;
 
 public final class Authenticate {
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
     client.setAuthenticator(new Authenticator() {
-      @Override public Request authenticate(Proxy proxy, Response response) {
+      @Override public Request authenticate(Route route, Response response) throws IOException {
         System.out.println("Authenticating for response: " + response);
         System.out.println("Challenges: " + response.challenges());
         String credential = Credentials.basic("jesse", "password1");
@@ -36,10 +36,6 @@ public void run() throws Exception {
             .header("Authorization", credential)
             .build();
       }
-
-      @Override public Request authenticateProxy(Proxy proxy, Response response) {
-        return null; // Null indicates no attempt to authenticate.
-      }
     });
 
     Request request = new Request.Builder()
