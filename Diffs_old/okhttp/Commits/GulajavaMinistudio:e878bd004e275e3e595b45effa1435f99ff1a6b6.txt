diff --git a/CHANGELOG.md b/CHANGELOG.md
index b37b8ce877..642a173870 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,14 @@
 Change Log
 ==========
 
+## Version 4.0.0-RC3
+
+_2019-06-24_
+
+ *  Fix: Retain binary-compatibility in `okhttp3.internal.HttpMethod`. Naughty third party SDKs
+    import this and we want to ease upgrades for their users.
+
+
 ## Version 4.0.0-RC2
 
 _2019-06-21_
diff --git a/docs/code_of_conduct.md b/docs/code_of_conduct.md
new file mode 100644
index 0000000000..6a97690c5c
--- /dev/null
+++ b/docs/code_of_conduct.md
@@ -0,0 +1,102 @@
+Open Source Code of Conduct
+===========================
+
+At Square, we are committed to contributing to the open source community and simplifying the process
+of releasing and managing open source software. We’ve seen incredible support and enthusiasm from
+thousands of people who have already contributed to our projects — and we want to ensure our community
+continues to be truly open for everyone.
+
+This code of conduct outlines our expectations for participants, as well as steps to reporting
+unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and
+expect our code of conduct to be honored.
+
+Square’s open source community strives to:
+
+ * **Be open**: We invite anyone to participate in any aspect of our projects. Our community is
+   open, and any responsibility can be carried by a contributor who demonstrates the required
+   capacity and competence.
+
+ * **Be considerate**: People use our work, and we depend on the work of others. Consider users and
+   colleagues before taking action. For example, changes to code, infrastructure, policy, and
+   documentation may negatively impact others.
+
+ * **Be respectful**: We expect people to work together to resolve conflict, assume good intentions,
+   and act with empathy. Do not turn disagreements into personal attacks.
+
+ * **Be collaborative**: Collaboration reduces redundancy and improves the quality of our work. We
+   strive for transparency within our open source community, and we work closely with upstream
+   developers and others in the free software community to coordinate our efforts.
+
+ * **Be pragmatic**: Questions are encouraged and should be asked early in the process to avoid
+   problems later. Be thoughtful and considerate when seeking out the appropriate forum for your
+   questions. Those who are asked should be responsive and helpful.
+
+ * **Step down considerately**: Members of every project come and go. When somebody leaves or
+   disengages from the project, they should make it known and take the proper steps to ensure that
+   others can pick up where they left off.
+
+This code is not exhaustive or complete. It serves to distill our common understanding of a
+collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in
+the letter.
+
+Diversity Statement
+-------------------
+
+We encourage everyone to participate and are committed to building a community for all. Although we
+may not be able to satisfy everyone, we all agree that everyone is equal.
+
+Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone
+has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do
+our best to right the wrong.
+
+Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity,
+gender identity or expression, language, national origin, political beliefs, profession, race,
+religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate
+discrimination based on any of the protected characteristics above, including participants with
+disabilities.
+
+Reporting Issues
+----------------
+
+If you experience or witness unacceptable behavior — or have any other concerns — please report it by
+emailing [codeofconduct@squareup.com][codeofconduct_at]. For more details, please see our Reporting
+Guidelines below.
+
+Thanks
+------
+
+Some of the ideas and wording for the statements and guidelines above were based on work by the
+[Twitter][twitter_coc], [Ubuntu][ubuntu_coc], [GDC][gdc_coc], and [Django][django_coc] communities.
+We are thankful for their work.
+
+Reporting Guide
+---------------
+
+If you experience or witness unacceptable behavior — or have any other concerns — please report it by
+emailing [codeofconduct@squareup.com][codeofconduct_at]. All reports will be handled with
+discretion.
+
+In your report please include:
+
+ * Your contact information.
+ * Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional
+   witnesses, please include them as well.
+ * Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly
+   available record (e.g. a mailing list archive or a public IRC logger), please include a link.
+ * Any additional information that may be helpful.
+
+After filing a report, a representative from the Square Code of Conduct committee will contact you
+personally. The committee will then review the incident, follow up with any additional questions,
+and make a decision as to how to respond.
+
+Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual
+engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem
+appropriate, up to and including a permanent ban from all of Square spaces without warning.
+
+
+[codeofconduct_at]: mailto:codeofconduct@squareup.com
+[twitter_coc]: https://github.com/twitter/code-of-conduct/blob/master/code-of-conduct.md
+[ubuntu_coc]: https://ubuntu.com/community/code-of-conduct
+[gdc_coc]: https://www.gdconf.com/code-of-conduct
+[django_coc]: https://www.djangoproject.com/conduct/reporting/
+
diff --git a/mkdocs.yml b/mkdocs.yml
index abedb009ab..f54d97518b 100644
--- a/mkdocs.yml
+++ b/mkdocs.yml
@@ -9,6 +9,7 @@ copyright: 'Copyright &copy; 2019 Square, Inc.'
 
 theme:
   name: 'material'
+  favicon: images/icon-square.png
   logo: images/icon-square.png
   palette:
     primary: 'teal'
@@ -63,4 +64,5 @@ nav:
   - 'Change Log': changelog.md
   - 'Upgrading to OkHttp 4': upgrading_to_okhttp_4.md
   - 'Contributing': contributing.md
+  - 'Code of Conduct': code_of_conduct.md
 
diff --git a/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java b/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
index 3d4aa6c4c4..3288e753da 100644
--- a/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
+++ b/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
@@ -51,7 +51,6 @@
   private List<InetAddress> serverIps;
 
   @Before public void setUp() throws Exception {
-    platform.assumeNotConscrypt();
     platform.assumeHttp2Support();
 
     rootCa = new HeldCertificate.Builder()
@@ -302,20 +301,6 @@
     assertThat(client.connectionPool().connectionCount()).isEqualTo(1);
   }
 
-  /** Run against public external sites, doesn't run by default. */
-  @Ignore
-  @Test public void coalescesConnectionsToRealSites() throws IOException {
-    client = new OkHttpClient();
-
-    assert200Http2Response(execute("https://graph.facebook.com/robots.txt"), "graph.facebook.com");
-    assert200Http2Response(execute("https://www.facebook.com/robots.txt"), "m.facebook.com");
-    assert200Http2Response(execute("https://fb.com/robots.txt"), "m.facebook.com");
-    assert200Http2Response(execute("https://messenger.com/robots.txt"), "messenger.com");
-    assert200Http2Response(execute("https://m.facebook.com/robots.txt"), "m.facebook.com");
-
-    assertThat(client.connectionPool().connectionCount()).isEqualTo(3);
-  }
-
   private Response execute(String url) throws IOException {
     return execute(HttpUrl.get(url));
   }
diff --git a/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java b/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
index e9e2f19c10..4a870d9a79 100644
--- a/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
@@ -66,8 +66,6 @@
 
   @Before
   public void setUp() {
-    platform.assumeNotConscrypt();
-
     serverRootCa = new HeldCertificate.Builder()
         .serialNumber(1L)
         .certificateAuthority(1)
diff --git a/samples/guide/README.md b/samples/guide/README.md
new file mode 100644
index 0000000000..84c8ccb004
--- /dev/null
+++ b/samples/guide/README.md
@@ -0,0 +1,2 @@
+Samples
+=======
\ No newline at end of file
diff --git a/samples/guide/docs/images/logo-square.png b/samples/guide/docs/images/logo-square.png
new file mode 100644
index 0000000000..788b301adb
Binary files /dev/null and b/samples/guide/docs/images/logo-square.png differ
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java b/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
index b13a0533ba..aa7ea2974f 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
@@ -40,7 +40,9 @@ public void run() throws Exception {
         .setType(MultipartBody.FORM)
         .addFormDataPart("title", "Square Logo")
         .addFormDataPart("image", "logo-square.png",
-            RequestBody.create(new File("website/static/logo-square.png"), MEDIA_TYPE_PNG))
+            RequestBody.create(
+                new File("docs/images/logo-square.png"),
+                MEDIA_TYPE_PNG))
         .build();
 
     Request request = new Request.Builder()
diff --git a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
index 288fadb7ce..f0407db87f 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
@@ -1,10 +1,10 @@
 package okhttp3.recipes;
 
 import java.util.concurrent.TimeUnit;
-import okhttp3.WebSocket;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
+import okhttp3.WebSocket;
 import okhttp3.WebSocketListener;
 import okio.ByteString;
 
diff --git a/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt b/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt
new file mode 100644
index 0000000000..21c932c464
--- /dev/null
+++ b/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3
+
+import org.junit.Ignore
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.Parameterized
+import java.io.File
+import java.lang.reflect.InvocationTargetException
+
+@RunWith(Parameterized::class)
+@Ignore
+class AllMainsTest(val className: String) {
+  @Test
+  fun runMain() {
+    val mainMethod = Class.forName(className).methods.find { it.name == "main" }
+    try {
+      mainMethod?.invoke(null, arrayOf<String>())
+    } catch (ite: InvocationTargetException) {
+      if (!expectedFailure(className, ite.cause!!)) {
+        throw ite.cause!!
+      }
+    }
+  }
+
+  private fun expectedFailure(className: String, cause: Throwable): Boolean {
+    return when (className) {
+      "okhttp3.recipes.CheckHandshake" -> true // by design
+      "okhttp3.recipes.RequestBodyCompression" -> true // expired token
+      else -> false
+    }
+  }
+
+  companion object {
+    private val prefix = if (File("samples").exists()) "" else "../../"
+
+    @JvmStatic
+    @Parameterized.Parameters(name = "{0}")
+    fun data(): List<String> {
+      val mainFiles = mainFiles()
+      return mainFiles.map {
+        it.path.substring("$prefix/samples/guide/src/main/java".length, it.path.length - 5)
+            .replace('/', '.')
+      }.sorted()
+    }
+
+    private fun mainFiles(): List<File> {
+      return File("$prefix/samples/guide/src/main/java/okhttp3").listFiles()?.flatMap {
+        it?.listFiles()?.toList().orEmpty()
+      }.orEmpty()
+    }
+  }
+}
