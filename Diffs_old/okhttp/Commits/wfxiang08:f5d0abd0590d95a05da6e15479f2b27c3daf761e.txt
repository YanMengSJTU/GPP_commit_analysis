diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/FormBodyTest.java
similarity index 80%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java
rename to okhttp-tests/src/test/java/com/squareup/okhttp/FormBodyTest.java
index cb54aef8fa..5340d497fd 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/FormEncodingBuilderTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/FormBodyTest.java
@@ -21,26 +21,44 @@
 
 import static org.junit.Assert.assertEquals;
 
-public final class FormEncodingBuilderTest {
+public final class FormBodyTest {
   @Test public void urlEncoding() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .add("a+=& b", "c+=& d")
         .add("space, the", "final frontier")
         .add("%25", "%25")
         .build();
 
-    assertEquals("application/x-www-form-urlencoded", formEncoding.contentType().toString());
+    assertEquals(3, body.size());
+
+    assertEquals("a%2B%3D%26%20b", body.encodedName(0));
+    assertEquals("space%2C%20the", body.encodedName(1));
+    assertEquals("%2525", body.encodedName(2));
+
+    assertEquals("a+=& b", body.name(0));
+    assertEquals("space, the", body.name(1));
+    assertEquals("%25", body.name(2));
+
+    assertEquals("c%2B%3D%26%20d", body.encodedValue(0));
+    assertEquals("final%20frontier", body.encodedValue(1));
+    assertEquals("%2525", body.encodedValue(2));
+
+    assertEquals("c+=& d", body.value(0));
+    assertEquals("final frontier", body.value(1));
+    assertEquals("%25", body.value(2));
+
+    assertEquals("application/x-www-form-urlencoded", body.contentType().toString());
 
     String expected = "a%2B%3D%26%20b=c%2B%3D%26%20d&space%2C%20the=final%20frontier&%2525=%2525";
-    assertEquals(expected.length(), formEncoding.contentLength());
+    assertEquals(expected.length(), body.contentLength());
 
     Buffer out = new Buffer();
-    formEncoding.writeTo(out);
+    body.writeTo(out);
     assertEquals(expected, out.readUtf8());
   }
 
   @Test public void addEncoded() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .addEncoded("a+=& b", "c+=& d")
         .addEncoded("e+=& f", "g+=& h")
         .addEncoded("%25", "%25")
@@ -48,46 +66,46 @@
 
     String expected = "a+%3D%26%20b=c+%3D%26%20d&e+%3D%26%20f=g+%3D%26%20h&%25=%25";
     Buffer out = new Buffer();
-    formEncoding.writeTo(out);
+    body.writeTo(out);
     assertEquals(expected, out.readUtf8());
   }
 
   @Test public void encodedPair() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .add("sim", "ple")
         .build();
 
     String expected = "sim=ple";
-    assertEquals(expected.length(), formEncoding.contentLength());
+    assertEquals(expected.length(), body.contentLength());
 
     Buffer buffer = new Buffer();
-    formEncoding.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
   @Test public void encodeMultiplePairs() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .add("sim", "ple")
         .add("hey", "there")
         .add("help", "me")
         .build();
 
     String expected = "sim=ple&hey=there&help=me";
-    assertEquals(expected.length(), formEncoding.contentLength());
+    assertEquals(expected.length(), body.contentLength());
 
     Buffer buffer = new Buffer();
-    formEncoding.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
   @Test public void buildEmptyForm() throws Exception {
-    RequestBody formEncoding = new FormEncodingBuilder().build();
+    FormBody body = new FormBody.Builder().build();
 
     String expected = "";
-    assertEquals(expected.length(), formEncoding.contentLength());
+    assertEquals(expected.length(), body.contentLength());
 
     Buffer buffer = new Buffer();
-    formEncoding.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -170,7 +188,7 @@
 
   private String formEncode(int codePoint) throws IOException {
     // Wrap the codepoint with regular printable characters to prevent trimming.
-    RequestBody body = new FormEncodingBuilder()
+    FormBody body = new FormBody.Builder()
         .add("a", new String(new int[] { 'b', codePoint, 'c' }, 0, 3))
         .build();
     Buffer buffer = new Buffer();
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBodyTest.java
similarity index 76%
rename from okhttp-tests/src/test/java/com/squareup/okhttp/MultipartTest.java
rename to okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBodyTest.java
index eb94cd62b3..8d080d79e6 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MultipartBodyTest.java
@@ -24,10 +24,10 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
-public final class MultipartTest {
+public final class MultipartBodyTest {
   @Test public void onePartRequired() throws Exception {
     try {
-      new Multipart.Builder().build();
+      new MultipartBody.Builder().build();
       fail();
     } catch (IllegalStateException e) {
       assertEquals("Multipart body must have at least one part.", e.getMessage());
@@ -42,19 +42,19 @@
         + "Hello, World!\r\n"
         + "--123--\r\n";
 
-    Multipart multipart = new Multipart.Builder("123")
+    MultipartBody body = new MultipartBody.Builder("123")
         .addPart(RequestBody.create(null, "Hello, World!"))
         .build();
 
-    assertEquals("123", multipart.boundary());
-    assertEquals(Multipart.MIXED, multipart.type());
-    assertEquals("multipart/mixed; boundary=123", multipart.contentType().toString());
-    assertEquals(1, multipart.parts().size());
-    assertEquals(53, multipart.contentLength());
+    assertEquals("123", body.boundary());
+    assertEquals(MultipartBody.MIXED, body.type());
+    assertEquals("multipart/mixed; boundary=123", body.contentType().toString());
+    assertEquals(1, body.parts().size());
+    assertEquals(53, body.contentLength());
 
     Buffer buffer = new Buffer();
-    multipart.writeTo(buffer);
-    assertEquals(buffer.size(), multipart.contentLength());
+    body.writeTo(buffer);
+    assertEquals(buffer.size(), body.contentLength());
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -74,21 +74,21 @@
         + "Fox\r\n"
         + "--123--\r\n";
 
-    Multipart multipart = new Multipart.Builder("123")
+    MultipartBody body = new MultipartBody.Builder("123")
         .addPart(RequestBody.create(null, "Quick"))
         .addPart(RequestBody.create(null, "Brown"))
         .addPart(RequestBody.create(null, "Fox"))
         .build();
 
-    assertEquals("123", multipart.boundary());
-    assertEquals(Multipart.MIXED, multipart.type());
-    assertEquals("multipart/mixed; boundary=123", multipart.contentType().toString());
-    assertEquals(3, multipart.parts().size());
-    assertEquals(112, multipart.contentLength());
+    assertEquals("123", body.boundary());
+    assertEquals(MultipartBody.MIXED, body.type());
+    assertEquals("multipart/mixed; boundary=123", body.contentType().toString());
+    assertEquals(3, body.parts().size());
+    assertEquals(112, body.contentLength());
 
     Buffer buffer = new Buffer();
-    multipart.writeTo(buffer);
-    assertEquals(buffer.size(), multipart.contentLength());
+    body.writeTo(buffer);
+    assertEquals(buffer.size(), body.contentLength());
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -121,11 +121,11 @@
         + "\r\n"
         + "--AaB03x--\r\n";
 
-    Multipart multipart = new Multipart.Builder("AaB03x")
-        .setType(Multipart.FORM)
+    MultipartBody body = new MultipartBody.Builder("AaB03x")
+        .setType(MultipartBody.FORM)
         .addFormDataPart("submit-name", "Larry")
         .addFormDataPart("files", null,
-            new Multipart.Builder("BbC04y")
+            new MultipartBody.Builder("BbC04y")
                 .addPart(
                     Headers.of("Content-Disposition", "file; filename=\"file1.txt\""),
                     RequestBody.create(
@@ -140,15 +140,15 @@
                 .build())
         .build();
 
-    assertEquals("AaB03x", multipart.boundary());
-    assertEquals(Multipart.FORM, multipart.type());
-    assertEquals("multipart/form-data; boundary=AaB03x", multipart.contentType().toString());
-    assertEquals(2, multipart.parts().size());
-    assertEquals(568, multipart.contentLength());
+    assertEquals("AaB03x", body.boundary());
+    assertEquals(MultipartBody.FORM, body.type());
+    assertEquals("multipart/form-data; boundary=AaB03x", body.contentType().toString());
+    assertEquals(2, body.parts().size());
+    assertEquals(568, body.contentLength());
 
     Buffer buffer = new Buffer();
-    multipart.writeTo(buffer);
-    assertEquals(buffer.size(), multipart.contentLength());
+    body.writeTo(buffer);
+    assertEquals(buffer.size(), body.contentLength());
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -177,8 +177,8 @@
         + "Alpha\r\n"
         + "--AaB03x--\r\n";
 
-    Multipart multipart = new Multipart.Builder("AaB03x")
-        .setType(Multipart.FORM)
+    MultipartBody body = new MultipartBody.Builder("AaB03x")
+        .setType(MultipartBody.FORM)
         .addFormDataPart("field with spaces", "filename with spaces.txt",
             RequestBody.create(MediaType.parse("text/plain; charset=utf-8"), "okay"))
         .addFormDataPart("field with \"", "\"")
@@ -187,7 +187,7 @@
         .build();
 
     Buffer buffer = new Buffer();
-    multipart.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
@@ -222,25 +222,25 @@
         + "Fox\r\n"
         + "--123--\r\n";
 
-    Multipart multipart = new Multipart.Builder("123")
+    MultipartBody body = new MultipartBody.Builder("123")
         .addPart(RequestBody.create(null, "Quick"))
         .addPart(new StreamingBody("Brown"))
         .addPart(RequestBody.create(null, "Fox"))
         .build();
 
-    assertEquals("123", multipart.boundary());
-    assertEquals(Multipart.MIXED, multipart.type());
-    assertEquals("multipart/mixed; boundary=123", multipart.contentType().toString());
-    assertEquals(3, multipart.parts().size());
-    assertEquals(-1, multipart.contentLength());
+    assertEquals("123", body.boundary());
+    assertEquals(MultipartBody.MIXED, body.type());
+    assertEquals("multipart/mixed; boundary=123", body.contentType().toString());
+    assertEquals(3, body.parts().size());
+    assertEquals(-1, body.contentLength());
 
     Buffer buffer = new Buffer();
-    multipart.writeTo(buffer);
+    body.writeTo(buffer);
     assertEquals(expected, buffer.readUtf8());
   }
 
   @Test public void contentTypeHeaderIsForbidden() throws Exception {
-    Multipart.Builder multipart = new Multipart.Builder();
+    MultipartBody.Builder multipart = new MultipartBody.Builder();
     try {
       multipart.addPart(Headers.of("Content-Type", "text/plain"),
           RequestBody.create(null, "Hello, World!"));
@@ -250,7 +250,7 @@
   }
 
   @Test public void contentLengthHeaderIsForbidden() throws Exception {
-    Multipart.Builder multipart = new Multipart.Builder();
+    MultipartBody.Builder multipart = new MultipartBody.Builder();
     try {
       multipart.addPart(Headers.of("Content-Length", "13"),
           RequestBody.create(null, "Hello, World!"));
diff --git a/okhttp/src/main/java/com/squareup/okhttp/FormBody.java b/okhttp/src/main/java/com/squareup/okhttp/FormBody.java
new file mode 100644
index 0000000000..fef79eabda
--- /dev/null
+++ b/okhttp/src/main/java/com/squareup/okhttp/FormBody.java
@@ -0,0 +1,124 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.squareup.okhttp;
+
+import com.squareup.okhttp.internal.Util;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import okio.Buffer;
+import okio.BufferedSink;
+
+import static com.squareup.okhttp.HttpUrl.FORM_ENCODE_SET;
+import static com.squareup.okhttp.HttpUrl.percentDecode;
+
+public final class FormBody extends RequestBody {
+  private static final MediaType CONTENT_TYPE =
+      MediaType.parse("application/x-www-form-urlencoded");
+
+  private final List<String> encodedNames;
+  private final List<String> encodedValues;
+
+  private FormBody(List<String> encodedNames, List<String> encodedValues) {
+    this.encodedNames = Util.immutableList(encodedNames);
+    this.encodedValues = Util.immutableList(encodedValues);
+  }
+
+  /** The number of key-value pairs in this form-encoded body. */
+  public int size() {
+    return encodedNames.size();
+  }
+
+  public String encodedName(int index) {
+    return encodedNames.get(index);
+  }
+
+  public String name(int index) {
+    return percentDecode(encodedName(index), true);
+  }
+
+  public String encodedValue(int index) {
+    return encodedValues.get(index);
+  }
+
+  public String value(int index) {
+    return percentDecode(encodedValue(index), true);
+  }
+
+  @Override public MediaType contentType() {
+    return CONTENT_TYPE;
+  }
+
+  @Override public long contentLength() {
+    return writeOrCountBytes(null, true);
+  }
+
+  @Override public void writeTo(BufferedSink sink) throws IOException {
+    writeOrCountBytes(sink, false);
+  }
+
+  /**
+   * Either writes this request to {@code sink} or measures its content length. We have one method
+   * do double-duty to make sure the counting and content are consistent, particularly when it
+   * comes to awkward operations like measuring the encoded length of header strings, or the
+   * length-in-digits of an encoded integer.
+   */
+  private long writeOrCountBytes(BufferedSink sink, boolean countBytes) {
+    long byteCount = 0L;
+
+    Buffer buffer;
+    if (countBytes) {
+      buffer = new Buffer();
+    } else {
+      buffer = sink.buffer();
+    }
+
+    for (int i = 0, size = encodedNames.size(); i < size; i++) {
+      if (i > 0) buffer.writeByte('&');
+      buffer.writeUtf8(encodedNames.get(i));
+      buffer.writeByte('=');
+      buffer.writeUtf8(encodedValues.get(i));
+    }
+
+    if (countBytes) {
+      byteCount = buffer.size();
+      buffer.clear();
+    }
+
+    return byteCount;
+  }
+
+  public static final class Builder {
+    private final List<String> names = new ArrayList<>();
+    private final List<String> values = new ArrayList<>();
+
+    public Builder add(String name, String value) {
+      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, false, true, true));
+      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, false, true, true));
+      return this;
+    }
+
+    public Builder addEncoded(String name, String value) {
+      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, true, true, true));
+      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, true, true, true));
+      return this;
+    }
+
+    public FormBody build() {
+      return new FormBody(names, values);
+    }
+  }
+}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/FormEncodingBuilder.java b/okhttp/src/main/java/com/squareup/okhttp/FormEncodingBuilder.java
deleted file mode 100644
index f5134d9f77..0000000000
--- a/okhttp/src/main/java/com/squareup/okhttp/FormEncodingBuilder.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.squareup.okhttp;
-
-import okio.Buffer;
-
-/**
- * Fluent API to build <a href="http://www.w3.org/MarkUp/html-spec/html-spec_8.html#SEC8.2.1">HTML
- * 2.0</a>-compliant form data.
- */
-public final class FormEncodingBuilder {
-  private static final MediaType CONTENT_TYPE =
-      MediaType.parse("application/x-www-form-urlencoded");
-
-  private final Buffer content = new Buffer();
-
-  /** Add new key-value pair. */
-  public FormEncodingBuilder add(String name, String value) {
-    if (content.size() > 0) {
-      content.writeByte('&');
-    }
-    HttpUrl.canonicalize(content, name, 0, name.length(),
-        HttpUrl.FORM_ENCODE_SET, false, true, true);
-    content.writeByte('=');
-    HttpUrl.canonicalize(content, value, 0, value.length(),
-        HttpUrl.FORM_ENCODE_SET, false, true, true);
-    return this;
-  }
-
-  /** Add new key-value pair. */
-  public FormEncodingBuilder addEncoded(String name, String value) {
-    if (content.size() > 0) {
-      content.writeByte('&');
-    }
-    HttpUrl.canonicalize(content, name, 0, name.length(),
-        HttpUrl.FORM_ENCODE_SET, true, true, true);
-    content.writeByte('=');
-    HttpUrl.canonicalize(content, value, 0, value.length(),
-        HttpUrl.FORM_ENCODE_SET, true, true, true);
-    return this;
-  }
-
-  public RequestBody build() {
-    return RequestBody.create(CONTENT_TYPE, content.snapshot());
-  }
-}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Multipart.java b/okhttp/src/main/java/com/squareup/okhttp/MultipartBody.java
similarity index 96%
rename from okhttp/src/main/java/com/squareup/okhttp/Multipart.java
rename to okhttp/src/main/java/com/squareup/okhttp/MultipartBody.java
index a86f2fa1b0..7614eceda9 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Multipart.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/MultipartBody.java
@@ -25,7 +25,7 @@
 import okio.ByteString;
 
 /** An <a href="http://www.ietf.org/rfc/rfc2387.txt">RFC 2387</a>-compliant request body. */
-public final class Multipart extends RequestBody {
+public final class MultipartBody extends RequestBody {
   /**
    * The "mixed" subtype of "multipart" is intended for use when the body
    * parts are independent and need to be bundled in a particular order. Any
@@ -74,7 +74,7 @@
   private final List<Part> parts;
   private long contentLength = -1L;
 
-  Multipart(ByteString boundary, MediaType type, List<Part> parts) {
+  MultipartBody(ByteString boundary, MediaType type, List<Part> parts) {
     this.boundary = boundary;
     this.originalType = type;
     this.contentType = MediaType.parse(type + "; boundary=" + boundary.utf8());
@@ -89,10 +89,19 @@ public String boundary() {
     return boundary.utf8();
   }
 
+  /** The number of parts in this multipart body. */
+  public int size() {
+    return parts.size();
+  }
+
   public List<Part> parts() {
     return parts;
   }
 
+  public Part part(int index) {
+    return parts.get(index);
+  }
+
   /** A combination of {@link #type()} and {@link #boundary()}. */
   @Override public MediaType contentType() {
     return contentType;
@@ -320,11 +329,11 @@ public Builder addPart(Part part) {
     }
 
     /** Assemble the specified parts into a request body. */
-    public Multipart build() {
+    public MultipartBody build() {
       if (parts.isEmpty()) {
         throw new IllegalStateException("Multipart body must have at least one part.");
       }
-      return new Multipart(boundary, type, parts);
+      return new MultipartBody(boundary, type, parts);
     }
   }
 }
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostForm.java b/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostForm.java
index 30054f1905..692b6f6046 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostForm.java
+++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostForm.java
@@ -15,7 +15,7 @@
  */
 package com.squareup.okhttp.recipes;
 
-import com.squareup.okhttp.FormEncodingBuilder;
+import com.squareup.okhttp.FormBody;
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.RequestBody;
@@ -26,7 +26,7 @@
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
-    RequestBody formBody = new FormEncodingBuilder()
+    RequestBody formBody = new FormBody.Builder()
         .add("search", "Jurassic Park")
         .build();
     Request request = new Request.Builder()
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostMultipart.java b/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostMultipart.java
index 81fc79ea42..8a1e7a8df5 100644
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostMultipart.java
+++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/PostMultipart.java
@@ -16,7 +16,7 @@
 package com.squareup.okhttp.recipes;
 
 import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.Multipart;
+import com.squareup.okhttp.MultipartBody;
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.RequestBody;
@@ -37,8 +37,8 @@
 
   public void run() throws Exception {
     // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image
-    RequestBody requestBody = new Multipart.Builder()
-        .setType(Multipart.FORM)
+    RequestBody requestBody = new MultipartBody.Builder()
+        .setType(MultipartBody.FORM)
         .addFormDataPart("title", "Square Logo")
         .addFormDataPart("image", "logo-square.png",
             RequestBody.create(MEDIA_TYPE_PNG, new File("website/static/logo-square.png")))
