diff --git a/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
index c9be7b6d1e..af9aed1499 100644
--- a/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
+++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
@@ -89,7 +89,7 @@ private void runTest(final long number, final long count) {
             sendExecutor.execute(new Runnable() {
               @Override public void run() {
                 try {
-                  webSocket.sendMessage(response);
+                  webSocket.message(response);
                 } catch (IOException e) {
                   e.printStackTrace(System.out);
                 }
diff --git a/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
index d7eadbedb9..43aad79515 100644
--- a/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
@@ -64,7 +64,7 @@
     WebSocket client = clientListener.assertOpen();
     serverListener.assertOpen();
 
-    client.sendMessage(RequestBody.create(TEXT, "Hello, WebSockets!"));
+    client.message(RequestBody.create(TEXT, "Hello, WebSockets!"));
     serverListener.assertTextMessage("Hello, WebSockets!");
   }
 
@@ -75,7 +75,7 @@
     WebSocket client = clientListener.assertOpen();
     serverListener.assertOpen();
 
-    client.sendMessage(RequestBody.create(BINARY, "Hello!"));
+    client.message(RequestBody.create(BINARY, "Hello!"));
     serverListener.assertBinaryMessage(new byte[] {'H', 'e', 'l', 'l', 'o', '!'});
   }
 
@@ -85,7 +85,7 @@
 
     WebSocket client = clientListener.assertOpen();
     try {
-      client.sendMessage(null);
+      client.message(null);
       fail();
     } catch (NullPointerException e) {
       assertEquals("message == null", e.getMessage());
@@ -98,7 +98,7 @@
 
     WebSocket client = clientListener.assertOpen();
     try {
-      client.sendMessage(RequestBody.create(null, "Hey!"));
+      client.message(RequestBody.create(null, "Hey!"));
       fail();
     } catch (IllegalArgumentException e) {
       assertEquals("Message content type was null. Must use WebSocket.TEXT or WebSocket.BINARY.",
@@ -112,7 +112,7 @@
 
     WebSocket client = clientListener.assertOpen();
     try {
-      client.sendMessage(RequestBody.create(MediaType.parse("text/plain"), "Hey!"));
+      client.message(RequestBody.create(MediaType.parse("text/plain"), "Hey!"));
       fail();
     } catch (IllegalArgumentException e) {
       assertEquals(
@@ -127,7 +127,7 @@
 
     WebSocket client = clientListener.assertOpen();
 
-    client.sendPing(ByteString.encodeUtf8("Hello, WebSockets!"));
+    client.ping(ByteString.encodeUtf8("Hello, WebSockets!"));
     clientListener.assertPong(ByteString.encodeUtf8("Hello, WebSockets!"));
   }
 
@@ -137,7 +137,7 @@
 
     WebSocket client = clientListener.assertOpen();
     try {
-      client.sendPing(null);
+      client.ping(null);
       fail();
     } catch (NullPointerException e) {
       assertEquals("payload == null", e.getMessage());
@@ -151,7 +151,7 @@
     clientListener.assertOpen();
     WebSocket server = serverListener.assertOpen();
 
-    server.sendMessage(RequestBody.create(TEXT, "Hello, WebSockets!"));
+    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));
     clientListener.assertTextMessage("Hello, WebSockets!");
   }
 
@@ -206,7 +206,7 @@
       }
     });
 
-    server.sendMessage(RequestBody.create(TEXT, "Hello, WebSockets!"));
+    server.message(RequestBody.create(TEXT, "Hello, WebSockets!"));
     clientListener.assertFailure(e);
     serverListener.assertClose(1001, "");
   }
@@ -225,7 +225,7 @@
       }
     });
 
-    client.sendPing(ByteString.EMPTY);
+    client.ping(ByteString.EMPTY);
     clientListener.assertFailure(e);
     serverListener.assertClose(1001, "");
   }
@@ -272,7 +272,7 @@
 
     WebSocket client = clientListener.assertOpen();
 
-    client.sendPing(ByteString.encodeUtf8("WebSockets are fun!"));
+    client.ping(ByteString.encodeUtf8("WebSockets are fun!"));
     clientListener.assertPong(ByteString.encodeUtf8("WebSockets are fun!"));
   }
 
@@ -384,7 +384,7 @@ private void websocketScheme(String scheme) throws IOException {
     WebSocket webSocket = clientListener.assertOpen();
     serverListener.assertOpen();
 
-    webSocket.sendMessage(RequestBody.create(TEXT, "abc"));
+    webSocket.message(RequestBody.create(TEXT, "abc"));
     serverListener.assertTextMessage("abc");
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
index 7a23b269cc..a8ac1c3c26 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
@@ -112,7 +112,7 @@
         sink.close();
       }
     };
-    client.sendMessage(message);
+    client.message(message);
     server.processNextFrame();
     serverListener.assertTextMessage("Hello!");
   }
@@ -125,13 +125,13 @@
 
       @Override public void writeTo(BufferedSink sink) throws IOException {
         sink.writeUtf8("Hel").flush();
-        client.sendPing(ByteString.encodeUtf8("Pong?"));
+        client.ping(ByteString.encodeUtf8("Pong?"));
         sink.writeUtf8("lo!").flush();
         sink.close();
       }
     };
 
-    client.sendMessage(message);
+    client.message(message);
     server.processNextFrame();
     serverListener.assertTextMessage("Hello!");
     client.processNextFrame();
@@ -139,7 +139,7 @@
   }
 
   @Test public void pingWritesPong() throws IOException {
-    client.sendPing(ByteString.encodeUtf8("Hello!"));
+    client.ping(ByteString.encodeUtf8("Hello!"));
     server.processNextFrame(); // Read the ping, write the pong.
     client.processNextFrame(); // Read the pong.
     clientListener.assertPong(ByteString.encodeUtf8("Hello!"));
@@ -172,7 +172,7 @@
     client.close(1000, "Hello!");
 
     try {
-      client.sendPing(ByteString.encodeUtf8("Pong?"));
+      client.ping(ByteString.encodeUtf8("Pong?"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("closed", e.getMessage());
@@ -184,7 +184,7 @@
       assertEquals("closed", e.getMessage());
     }
     try {
-      client.sendMessage(RequestBody.create(TEXT, "Hello!"));
+      client.message(RequestBody.create(TEXT, "Hello!"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("closed", e.getMessage());
@@ -195,20 +195,20 @@
     client2Server.close();
 
     try {
-      client.sendPing(ByteString.encodeUtf8("Ping!"));
+      client.ping(ByteString.encodeUtf8("Ping!"));
       fail();
     } catch (IOException ignored) {
     }
 
     // A failed write prevents further use of the WebSocket instance.
     try {
-      client.sendMessage(RequestBody.create(TEXT, "Hello!"));
+      client.message(RequestBody.create(TEXT, "Hello!"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("must call close()", e.getMessage());
     }
     try {
-      client.sendPing(ByteString.encodeUtf8("Ping!"));
+      client.ping(ByteString.encodeUtf8("Ping!"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("must call close()", e.getMessage());
@@ -219,20 +219,20 @@
     client2Server.close();
 
     try {
-      client.sendMessage(RequestBody.create(TEXT, "Hello!"));
+      client.message(RequestBody.create(TEXT, "Hello!"));
       fail();
     } catch (IOException ignored) {
     }
 
     // A failed write prevents further use of the WebSocket instance.
     try {
-      client.sendMessage(RequestBody.create(TEXT, "Hello!"));
+      client.message(RequestBody.create(TEXT, "Hello!"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("must call close()", e.getMessage());
     }
     try {
-      client.sendPing(ByteString.encodeUtf8("Ping!"));
+      client.ping(ByteString.encodeUtf8("Ping!"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("must call close()", e.getMessage());
@@ -245,7 +245,7 @@
     clientListener.assertClose(1000, "Hello!");
 
     try {
-      client.sendPing(ByteString.encodeUtf8("Pong?"));
+      client.ping(ByteString.encodeUtf8("Pong?"));
       fail();
     } catch (IOException e) {
       assertEquals("closed", e.getMessage());
@@ -258,7 +258,7 @@
     clientListener.assertClose(1000, "Hello!");
 
     try {
-      client.sendMessage(RequestBody.create(TEXT, "Hi!"));
+      client.message(RequestBody.create(TEXT, "Hi!"));
       fail();
     } catch (IOException e) {
       assertEquals("closed", e.getMessage());
@@ -306,7 +306,7 @@
         }
       }
     };
-    client.sendMessage(message);
+    client.message(message);
   }
 
   @Test public void clientCloseClosesConnection() throws IOException {
@@ -349,7 +349,7 @@
   }
 
   @Test public void serverCloseBreaksReadMessageLoop() throws IOException {
-    server.sendMessage(RequestBody.create(TEXT, "Hello!"));
+    server.message(RequestBody.create(TEXT, "Hello!"));
     server.close(1000, "Bye!");
     assertTrue(client.processNextFrame());
     clientListener.assertTextMessage("Hello!");
diff --git a/okhttp/src/main/java/okhttp3/WebSocket.java b/okhttp/src/main/java/okhttp3/WebSocket.java
index 8f80497b3b..35b02f2503 100644
--- a/okhttp/src/main/java/okhttp3/WebSocket.java
+++ b/okhttp/src/main/java/okhttp3/WebSocket.java
@@ -34,7 +34,7 @@
    * happens to ensure resources are cleaned up.
    * @throws IllegalStateException if this web socket was already closed.
    */
-  void sendMessage(RequestBody message) throws IOException;
+  void message(RequestBody message) throws IOException;
 
   /**
    * Send a ping to the server.
@@ -45,7 +45,7 @@
    * happens to ensure resources are cleaned up.
    * @throws IllegalStateException if this web socket was already closed.
    */
-  void sendPing(ByteString payload) throws IOException;
+  void ping(ByteString payload) throws IOException;
 
   /**
    * Send a close indicator to the server.
diff --git a/okhttp/src/main/java/okhttp3/WebSocketListener.java b/okhttp/src/main/java/okhttp3/WebSocketListener.java
index b25548b5f9..8d853f7d93 100644
--- a/okhttp/src/main/java/okhttp3/WebSocketListener.java
+++ b/okhttp/src/main/java/okhttp3/WebSocketListener.java
@@ -60,7 +60,7 @@
 
   /**
    * Called when a server pong is received. This is usually a result of calling {@link
-   * WebSocket#sendPing(ByteString)} but might also be unsolicited directly from the server.
+   * WebSocket#ping(ByteString)} but might also be unsolicited directly from the server.
    */
   void onPong(ByteString payload);
 
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index bf7d1d60f5..157465b623 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -225,7 +225,7 @@ private void replyToReaderError(final Throwable t) {
 
   ////// SENDER THREAD (aka user thread)
 
-  @Override public final void sendMessage(RequestBody message) throws IOException {
+  @Override public final void message(RequestBody message) throws IOException {
     if (message == null) throw new NullPointerException("message == null");
     if (senderSentClose) throw new IllegalStateException("closed");
     if (senderWantsClose) throw new IllegalStateException("must call close()");
@@ -258,7 +258,7 @@ private void replyToReaderError(final Throwable t) {
     }
   }
 
-  @Override public final void sendPing(ByteString payload) throws IOException {
+  @Override public final void ping(ByteString payload) throws IOException {
     if (payload == null) throw new NullPointerException("payload == null");
     if (senderSentClose) throw new IllegalStateException("closed");
     if (senderWantsClose) throw new IllegalStateException("must call close()");
diff --git a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
index 77c873020d..d737171256 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
@@ -37,9 +37,9 @@ private void run() {
     writeExecutor.execute(new Runnable() {
       @Override public void run() {
         try {
-          webSocket.sendMessage(RequestBody.create(TEXT, "Hello..."));
-          webSocket.sendMessage(RequestBody.create(TEXT, "...World!"));
-          webSocket.sendMessage(RequestBody.create(BINARY, ByteString.decodeHex("deadbeef")));
+          webSocket.message(RequestBody.create(TEXT, "Hello..."));
+          webSocket.message(RequestBody.create(TEXT, "...World!"));
+          webSocket.message(RequestBody.create(BINARY, ByteString.decodeHex("deadbeef")));
           webSocket.close(1000, "Goodbye, World!");
         } catch (IOException e) {
           System.err.println("Unable to send messages: " + e.getMessage());
