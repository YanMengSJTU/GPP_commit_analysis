diff --git a/README.md b/README.md
index 4f3a71b4bc..1dca78177c 100644
--- a/README.md
+++ b/README.md
@@ -30,38 +30,8 @@ The OkHttp 3.12.x branch supports Android 2.3+ (API level 9+) and Java 7+. These
 support for TLS 1.2 and should not be used. But because upgrading is difficult we will backport
 critical fixes to the [3.12.x branch][okhttp_312x] through December 31, 2020.
 
-Download
---------
-
-Download [the latest JAR][okhttp_latest_jar] or configure this dependency:
-
-```kotlin
-implementation("com.squareup.okhttp3:okhttp:3.12.1")
-```
-
-Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
-
-
-MockWebServer
--------------
-
-A library for testing HTTP, HTTPS, and HTTP/2 clients.
-
-MockWebServer coupling with OkHttp is essential for proper testing of HTTP/2 so that code can be shared.
-
-### Download
-
-Download [the latest JAR][mockwebserver_latest_jar] or configure this dependency:
-```xml
-testImplementation("com.squareup.okhttp3:mockwebserver:3.12.1")
-```
-
-R8 / ProGuard
--------------
-
-If you are using R8 or ProGuard add the options from [`okhttp3.pro`][okhttp3_pro].
-
-You might also need rules for Okio which is a dependency of this library.
+笔记
+------------
 
 
 License
diff --git a/okhttp/src/main/java/okhttp3/Dispatcher.java b/okhttp/src/main/java/okhttp3/Dispatcher.java
index f8fd901b17..9a6512125b 100644
--- a/okhttp/src/main/java/okhttp3/Dispatcher.java
+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java
@@ -15,19 +15,15 @@
  */
 package okhttp3;
 
-import java.util.ArrayDeque;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Deque;
-import java.util.Iterator;
-import java.util.List;
+import okhttp3.RealCall.AsyncCall;
+import okhttp3.internal.Util;
+
+import javax.annotation.Nullable;
+import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
-import okhttp3.RealCall.AsyncCall;
-import okhttp3.internal.Util;
 
 /**
  * Policy on when async requests are executed.
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
index c00e3b0cff..e256c20c66 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
@@ -51,7 +51,7 @@ public CacheInterceptor(@Nullable InternalCache cache) {
   }
 
   @Override public Response intercept(Chain chain) throws IOException {
-    Response cacheCandidate = cache != null
+    Response cacheCandidate = cache != null //获取当前请求的缓存
         ? cache.get(chain.request())
         : null;
 
@@ -101,7 +101,7 @@ public CacheInterceptor(@Nullable InternalCache cache) {
 
     // If we have a cache response too, then we're doing a conditional get.
     if (cacheResponse != null) {
-      if (networkResponse.code() == HTTP_NOT_MODIFIED) {
+      if (networkResponse.code() == HTTP_NOT_MODIFIED) { //304 response可以复用
         Response response = cacheResponse.newBuilder()
             .headers(combine(cacheResponse.headers(), networkResponse.headers()))
             .sentRequestAtMillis(networkResponse.sentRequestAtMillis())
diff --git a/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
index cb786d7892..2b1b64b594 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.java
@@ -76,16 +76,17 @@ public BridgeInterceptor(CookieJar cookieJar) {
     // If we add an "Accept-Encoding: gzip" header field we're responsible for also decompressing
     // the transfer stream.
     boolean transparentGzip = false;
+    //gzip header
     if (userRequest.header("Accept-Encoding") == null && userRequest.header("Range") == null) {
       transparentGzip = true;
       requestBuilder.header("Accept-Encoding", "gzip");
     }
-
+    //cookies
     List<Cookie> cookies = cookieJar.loadForRequest(userRequest.url());
     if (!cookies.isEmpty()) {
       requestBuilder.header("Cookie", cookieHeader(cookies));
     }
-
+    //User-Agent
     if (userRequest.header("User-Agent") == null) {
       requestBuilder.header("User-Agent", Version.userAgent());
     }
@@ -97,6 +98,7 @@ public BridgeInterceptor(CookieJar cookieJar) {
     Response.Builder responseBuilder = networkResponse.newBuilder()
         .request(userRequest);
 
+    //移除Content-Encoding和Content-Length header
     if (transparentGzip
         && "gzip".equalsIgnoreCase(networkResponse.header("Content-Encoding"))
         && HttpHeaders.hasBody(networkResponse)) {
