diff --git a/samples/simple-client/pom.xml b/samples/simple-client/pom.xml
index 5bb5efe414..39ab4e7b06 100644
--- a/samples/simple-client/pom.xml
+++ b/samples/simple-client/pom.xml
@@ -23,5 +23,21 @@
       <groupId>com.squareup.moshi</groupId>
       <artifactId>moshi</artifactId>
     </dependency>
+
+    <dependency>
+      <groupId>org.bouncycastle</groupId>
+      <artifactId>bcpkix-jdk15on</artifactId>
+      <version>1.52</version>
+    </dependency>
+    <dependency>
+      <groupId>com.kohlschutter.junixsocket</groupId>
+      <artifactId>junixsocket-native-common</artifactId>
+      <version>2.0.4</version>
+    </dependency>
+    <dependency>
+      <groupId>com.kohlschutter.junixsocket</groupId>
+      <artifactId>junixsocket-common</artifactId>
+      <version>2.0.4</version>
+    </dependency>
   </dependencies>
 </project>
diff --git a/samples/simple-client/src/main/java/okhttp3/sample/OkDocker.java b/samples/simple-client/src/main/java/okhttp3/sample/OkDocker.java
index 5687e7e9aa..3a66cd114a 100644
--- a/samples/simple-client/src/main/java/okhttp3/sample/OkDocker.java
+++ b/samples/simple-client/src/main/java/okhttp3/sample/OkDocker.java
@@ -4,6 +4,15 @@
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.ResponseBody;
+import org.newsclub.net.unix.AFUNIXSocket;
+import org.newsclub.net.unix.AFUNIXSocketAddress;
+
+import javax.net.SocketFactory;
+import java.io.File;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.net.UnknownHostException;
 
 public class OkDocker {
   // curl --unix-socket /var/run/docker.sock "http://socket/_ping"
@@ -14,11 +23,11 @@
 //      Types.newParameterizedType(List.class, Contributor.class));
 
   public static void main(String... args) throws Exception {
-    OkHttpClient client = new OkHttpClient();
+    OkHttpClient client = new OkHttpClient.Builder().socketFactory(new UnixSocketFactory()).build();
 
     // Create request for remote resource.
     Request request = new Request.Builder()
-        .url("http://unix--var-run-docker.sock/_ping")
+        .url("http://localhost/unix--var-run-docker.sock/_ping")
         .build();
 
 //    Request request = new Request.Builder()
@@ -30,7 +39,6 @@ public static void main(String... args) throws Exception {
 //        .build();
 
     // Execute the request and retrieve the response.
-//    client.newBuilder().socketFactory()
     Response response = client.newCall(request).execute();
 
     // Deserialize HTTP response to concrete type.
@@ -41,4 +49,55 @@ public static void main(String... args) throws Exception {
   private OkDocker() {
     // No instances.
   }
+
+  private static class UnixSocketFactory extends SocketFactory {
+    @Override
+    public Socket createSocket() throws IOException {
+      return newSocket();
+    }
+
+    @Override
+    public Socket createSocket(String s, int i) throws IOException, UnknownHostException {
+      System.err.println(".. " + s + "/" + i);
+      return newSocket();
+    }
+
+    @Override
+    public Socket createSocket(String s, int i, InetAddress inetAddress, int i1) throws IOException, UnknownHostException {
+      System.err.println(".. " + s + "/" + i);
+      return newSocket();
+    }
+
+    @Override
+    public Socket createSocket(InetAddress inetAddress, int i) throws IOException {
+      System.err.println(".. " + inetAddress + "/" + i);
+      return newSocket();
+    }
+
+    @Override
+    public Socket createSocket(InetAddress inetAddress, int i, InetAddress inetAddress1, int i1) throws IOException {
+      System.err.println(".. " + inetAddress + "/" + i);
+      return newSocket();
+    }
+
+    private Socket newSocket() throws IOException {
+      String host = "/var/run/docker.sock";
+      System.out.println("connect via '" + host + "'...");
+
+      File socketFile = new File(host);
+      System.out.println("unix socket exists " + socketFile.exists());
+      System.out.println("unix socket canRead: " + socketFile.canRead());
+      System.out.println("unix socket canWrite: " + socketFile.canWrite());
+
+      AFUNIXSocket socket = AFUNIXSocket.newInstance();
+      try {
+        Thread.sleep(500);
+      }
+      catch (InterruptedException ignore) {
+      }
+      socket.connect(new AFUNIXSocketAddress(socketFile), 0);
+      socket.setSoTimeout(0);
+      return socket;
+    }
+  }
 }
