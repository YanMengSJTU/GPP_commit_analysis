diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
index d43d91d257..f58988e096 100644
--- a/okhttp/src/main/java/okhttp3/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -133,6 +133,9 @@
  * <p>The {@link CacheControl} class can configure request caching directives and parse response
  * caching directives. It even offers convenient constants {@link CacheControl#FORCE_NETWORK} and
  * {@link CacheControl#FORCE_CACHE} that address the use cases above.
+ *
+ * 对DiskLruCache的封装
+ * 对本地缓存进行增删改查操作
  */
 public final class Cache implements Closeable, Flushable {
   private static final int VERSION = 201105;
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
index 42e32f864b..b2c0f02d63 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
@@ -55,10 +55,9 @@ public CacheInterceptor(InternalCache cache) {
   }
 
   /**
-   *
-   * @param chain
-   * @return
-   * @throws IOException
+   * 去拦截请求处理缓存相关逻辑，其中使用缓存策略器CacheStrategy类来取出与缓存相关的数据，
+   * 若缓存中有相应数据则取出，若缓存中数据不存在或过期则重新向服务器发出请求。当前本地有指定缓存时，
+   * 重新请求的资源数据会被同步到当前本地中，涉及到的同步类是Cache、DiskLruCache类
    */
   @Override
   public Response intercept(Chain chain) throws IOException {
@@ -68,7 +67,12 @@ public Response intercept(Chain chain) throws IOException {
 
     long now = System.currentTimeMillis();
 
-    // 创建缓存策略对象，并从中得到请求和响应
+    /**
+     * 创建缓存策略对象，并从中得到请求和响应
+     * now 当前请求资源时间，用于校验缓存是否过期
+     * chain.request() ： 一个Request对象，当前请求头的参数
+     * cacheCandidate ： 一个Response对象，如果当前的缓存目录（这里的缓存目录是cache，类型为InternalCache）不等于null，则从缓存目录中取出对应请求的Response数据。
+     */
     CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();
     Request networkRequest = strategy.networkRequest;
     Response cacheResponse = strategy.cacheResponse;
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
index 3ae1926650..ceee2ddfa2 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
@@ -170,6 +170,7 @@ public Factory(long nowMillis, Request request, Response cacheResponse) {
      * Returns a strategy to satisfy {@code request} using the a cached response {@code response}.
      */
     public CacheStrategy get() {
+      //获取缓存策略类并返回
       CacheStrategy candidate = getCandidate();
 
       if (candidate.networkRequest != null && request.cacheControl().onlyIfCached()) {
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
index c3fb740e28..3410d41213 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
@@ -83,6 +83,10 @@
  * corresponding entries will be dropped from the cache. If an error occurs while writing a cache
  * value, the edit will fail silently. Callers should handle other problems by catching {@code
  * IOException} and responding appropriately.
+ *
+ *
+ *
+ * 维护着文件的创建，清理，读取。内部有清理线程池
  */
 public final class DiskLruCache implements Closeable, Flushable {
   static final String JOURNAL_FILE = "journal";
@@ -827,7 +831,7 @@ public void close() {
     }
   }
 
-  /** Edits the values for an entry. */
+  /** Edits the values for an entry. 添加了同步锁，并对FileSystem进行高度封装*/
   public final class Editor {
     final Entry entry;
     final boolean[] written;
@@ -954,6 +958,9 @@ public void abortUnlessCommitted() {
     }
   }
 
+  /**
+   * 维护着key对应的多个文件
+   */
   private final class Entry {
     final String key;
 
