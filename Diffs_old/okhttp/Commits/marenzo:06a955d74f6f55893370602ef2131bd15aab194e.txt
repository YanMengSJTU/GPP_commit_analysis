diff --git a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java
index 99d4d273b2..8c7c9c9ae3 100644
--- a/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java
+++ b/mockwebserver/src/main/java/com/squareup/okhttp/mockwebserver/RecordedRequest.java
@@ -18,8 +18,17 @@
 
 import com.squareup.okhttp.Headers;
 import com.squareup.okhttp.TlsVersion;
+
+import java.io.UnsupportedEncodingException;
 import java.net.Socket;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URLDecoder;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import javax.net.ssl.SSLSocket;
 import okio.Buffer;
 
@@ -34,6 +43,8 @@
   private final Buffer body;
   private final int sequenceNumber;
   private final TlsVersion tlsVersion;
+  private final Map<String, List<String>> queryParams;
+  private final Map<String, List<String>> postParams;
 
   public RecordedRequest(String requestLine, Headers headers, List<Integer> chunkSizes,
       long bodySize, Buffer body, int sequenceNumber, Socket socket) {
@@ -52,9 +63,15 @@ public RecordedRequest(String requestLine, Headers headers, List<Integer> chunkS
       int pathEnd = requestLine.indexOf(' ', methodEnd + 1);
       this.method = requestLine.substring(0, methodEnd);
       this.path = requestLine.substring(methodEnd + 1, pathEnd);
+      this.queryParams = parseGetParams(path);
+      this.postParams = isUrlencodedPost()
+        ? parseParams(getBody().readUtf8())
+        : Collections.<String, List<String>>emptyMap();
     } else {
       this.method = null;
       this.path = null;
+      this.queryParams = Collections.emptyMap();
+      this.postParams = Collections.emptyMap();
     }
   }
 
@@ -121,7 +138,111 @@ public TlsVersion getTlsVersion() {
     return tlsVersion;
   }
 
+  /**
+   * Returns all values for query param
+   */
+  public List<String> getQueryParams(String param) {
+    return queryParams.get(param);
+  }
+
+  /**
+   * Returns all query params
+   */
+  public Map<String, List<String>> getQueryParams() {
+    return queryParams;
+  }
+
+  /**
+   * Returns single value for query param
+   */
+  public String getQueryParam(String param) {
+    List<String> params = getQueryParams(param);
+    if (params != null) {
+      return params.get(0);
+    }
+    return null;
+  }
+
+  /**
+   * Returns all values for form post param
+   */
+  public List<String> getPostParams(String param) {
+    return postParams.get(param);
+  }
+
+  /**
+   * Returns all form post params
+   */
+  public Map<String, List<String>> getPostParams() {
+    return postParams;
+  }
+
+  /**
+   * Returns single value for form post param
+   */
+  public String getPostParam(String param) {
+    List<String> params = getPostParams(param);
+    if (params != null) {
+      return params.get(0);
+    }
+    return null;
+  }
+
   @Override public String toString() {
     return requestLine;
   }
+
+  /**
+   * split & decodes query parameters into new map
+   */
+  private static Map<String, List<String>> splitQuery(String query) throws UnsupportedEncodingException {
+    if (query == null) {
+      return Collections.emptyMap();
+    }
+    Map<String, List<String>> query_pairs = new LinkedHashMap<>();
+    String[] pairs = query.split("&");
+    for (String pair : pairs) {
+      int idx = pair.indexOf("=");
+      String key = idx > 0 ? URLDecoder.decode(pair.substring(0, idx), "UTF-8") : pair;
+      if (!query_pairs.containsKey(key)) {
+        query_pairs.put(key, new LinkedList<String>());
+      }
+      String value = idx > 0 && pair.length() > idx + 1 ? URLDecoder.decode(pair.substring(idx + 1), "UTF-8") : null;
+      query_pairs.get(key).add(value);
+    }
+    return query_pairs;
+  }
+
+  /**
+   * split valid query string
+   */
+  private Map<String, List<String>> parseParams(String body) {
+    Map<String, List<String>> queryParams;
+    try {
+      queryParams = Collections.unmodifiableMap(splitQuery(body));
+    } catch (UnsupportedEncodingException ignored) {
+      queryParams = Collections.emptyMap();
+    }
+    return queryParams;
+  }
+
+  /**
+   * get query from path and split it
+   */
+  private Map<String, List<String>> parseGetParams(String path) {
+    URI uri;
+    try {
+      uri = new URI(path);
+    } catch (URISyntaxException ignored) {
+      return Collections.emptyMap();
+    }
+    return parseParams(uri.getQuery());
+  }
+
+  /**
+   * checks if request is post and is form-urlencoded (for valid query parsing)
+   */
+  private boolean isUrlencodedPost() {
+    return method.toLowerCase().equals("post") && getHeader("Content-Type").equals("application/x-www-form-urlencoded");
+  }
 }
diff --git a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java
index e7749e0333..bf4fec0a6a 100644
--- a/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java
+++ b/mockwebserver/src/test/java/com/squareup/okhttp/mockwebserver/MockWebServerTest.java
@@ -334,4 +334,55 @@
     } catch (ConnectException expected) {
     }
   }
+
+  @Test public void withQueryParamsGet() throws Exception {
+    server.setDispatcher(new Dispatcher() {
+      @Override
+      public MockResponse dispatch(final RecordedRequest request) throws InterruptedException {
+        return new MockResponse().setBody(request.getQueryParam("hello"));
+      }
+    });
+
+    final URLConnection connection = server.url("/withQuery?hello=world").url().openConnection();
+    final InputStream in = connection.getInputStream();
+    final BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+
+    assertEquals(reader.readLine(), "world");
+  }
+
+  @Test public void withMultipleQueryParamsGet() throws Exception {
+    server.setDispatcher(new Dispatcher() {
+      @Override
+      public MockResponse dispatch(final RecordedRequest request) throws InterruptedException {
+        final List<String> names = request.getQueryParams("names");
+        return new MockResponse().setBody(names.get(0) + "-" + names.get(1));
+      }
+    });
+
+    final URLConnection connection = server.url("/withQuery?names=joe&names=bar").url().openConnection();
+    final InputStream in = connection.getInputStream();
+    final BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+
+    assertEquals(reader.readLine(), "joe-bar");
+  }
+
+  @Test public void formBody() throws Exception {
+    server.setDispatcher(new Dispatcher() {
+      @Override
+      public MockResponse dispatch(final RecordedRequest request) throws InterruptedException {
+        return new MockResponse().setBody(request.getPostParam("hello"));
+      }
+    });
+
+    final byte[] postDataBytes = "hello=world".getBytes("UTF-8");
+    final HttpURLConnection connection = (HttpURLConnection) server.url("/helloWorld").url().openConnection();
+    connection.setRequestMethod("POST");
+    connection.setRequestProperty("Content-type", "application/x-www-form-urlencoded");
+    connection.setDoOutput(true);
+    connection.getOutputStream().write(postDataBytes);
+    final InputStream in = connection.getInputStream();
+    final BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+
+    assertEquals(reader.readLine(), "world");
+  }
 }
