diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
index 72615745e1..9214d7e1b2 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
@@ -682,7 +682,7 @@ private void handleWebSocketUpgrade(Socket socket, BufferedSource source, Buffer
       }
     };
     RealWebSocket webSocket = new RealWebSocket(fancyRequest,
-        response.getWebSocketListener(), new SecureRandom(), 0);
+        response.getWebSocketListener(), new SecureRandom(), 0, null);
     response.getWebSocketListener().onOpen(webSocket, fancyResponse);
     String name = "MockWebServer WebSocket " + request.getPath();
     webSocket.initReaderAndWriter(name, streams);
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
index 38b2762e6a..2227a6ca82 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
@@ -24,6 +24,7 @@
 import okhttp3.Protocol;
 import okhttp3.Request;
 import okhttp3.Response;
+import okhttp3.PingPayloadProvider;
 import okio.ByteString;
 import okio.Okio;
 import okio.Pipe;
@@ -357,6 +358,11 @@ public TestStreams(boolean client, Pipe source, Pipe sink) {
     }
 
     public void initWebSocket(Random random, int pingIntervalMillis) throws IOException {
+      initWebSocket(random, pingIntervalMillis, null);
+    }
+
+    public void initWebSocket(Random random, int pingIntervalMillis,
+                              PingPayloadProvider pingPayloadProvider) throws IOException {
       String url = "http://example.com/websocket";
       Response response = new Response.Builder()
           .code(101)
@@ -364,7 +370,8 @@ public void initWebSocket(Random random, int pingIntervalMillis) throws IOExcept
           .request(new Request.Builder().url(url).build())
           .protocol(Protocol.HTTP_1_1)
           .build();
-      webSocket = new RealWebSocket(response.request(), listener, random, pingIntervalMillis);
+      webSocket = new RealWebSocket(response.request(), listener, random, pingIntervalMillis,
+              pingPayloadProvider);
       webSocket.initReaderAndWriter(name, this);
     }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
index d926d23f7f..1b7844d638 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
@@ -703,8 +703,8 @@ private RealWebSocket newWebSocket() {
   }
 
   private RealWebSocket newWebSocket(Request request) {
-    RealWebSocket webSocket = new RealWebSocket(
-        request, clientListener, random, client.pingIntervalMillis());
+    RealWebSocket webSocket = new RealWebSocket(request, clientListener,
+            random, client.pingIntervalMillis(), client.getPingPayloadProvider());
     webSocket.connect(client);
     return webSocket;
   }
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index b349e1a0bc..d1abe3fff5 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -216,6 +216,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   final Authenticator authenticator;
   final ConnectionPool connectionPool;
   final Dns dns;
+  final @Nullable PingPayloadProvider pingPayloadProvider;
   final boolean followSslRedirects;
   final boolean followRedirects;
   final boolean retryOnConnectionFailure;
@@ -274,6 +275,7 @@ public OkHttpClient() {
     this.readTimeout = builder.readTimeout;
     this.writeTimeout = builder.writeTimeout;
     this.pingInterval = builder.pingInterval;
+    this.pingPayloadProvider = builder.pingPayloadProvider;
 
     if (interceptors.contains(null)) {
       throw new IllegalStateException("Null interceptor: " + interceptors);
@@ -329,6 +331,10 @@ public int pingIntervalMillis() {
     return pingInterval;
   }
 
+  public @Nullable PingPayloadProvider getPingPayloadProvider() {
+    return pingPayloadProvider;
+  }
+
   public Proxy proxy() {
     return proxy;
   }
@@ -438,7 +444,8 @@ public Dispatcher dispatcher() {
    * Uses {@code request} to connect a new web socket.
    */
   @Override public WebSocket newWebSocket(Request request, WebSocketListener listener) {
-    RealWebSocket webSocket = new RealWebSocket(request, listener, new Random(), pingInterval);
+    RealWebSocket webSocket = new RealWebSocket(request, listener, new Random(), pingInterval,
+            pingPayloadProvider);
     webSocket.connect(this);
     return webSocket;
   }
@@ -468,6 +475,7 @@ public Builder newBuilder() {
     Authenticator authenticator;
     ConnectionPool connectionPool;
     Dns dns;
+    @Nullable PingPayloadProvider pingPayloadProvider;
     boolean followSslRedirects;
     boolean followRedirects;
     boolean retryOnConnectionFailure;
@@ -527,6 +535,7 @@ public Builder() {
       this.readTimeout = okHttpClient.readTimeout;
       this.writeTimeout = okHttpClient.writeTimeout;
       this.pingInterval = okHttpClient.pingInterval;
+      this.pingPayloadProvider = okHttpClient.pingPayloadProvider;
     }
 
     /**
@@ -589,6 +598,15 @@ public Builder pingInterval(long interval, TimeUnit unit) {
       return this;
     }
 
+    /**
+     * Sets the ping payload provider. This will allow to configure the payload of the ping
+     * messages.
+     */
+    public Builder pingPayloadProvider(@Nullable PingPayloadProvider pingPayloadProvider) {
+      this.pingPayloadProvider = pingPayloadProvider;
+      return this;
+    }
+
     /**
      * Sets the HTTP proxy that will be used by connections created by this client. This takes
      * precedence over {@link #proxySelector}, which is only honored when this proxy is null (which
diff --git a/okhttp/src/main/java/okhttp3/PingPayloadProvider.java b/okhttp/src/main/java/okhttp3/PingPayloadProvider.java
new file mode 100644
index 0000000000..a3cd08f396
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/PingPayloadProvider.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3;
+
+import okio.ByteString;
+
+/**
+ * Provides payload data to be sent with the ping message.
+ */
+public interface PingPayloadProvider {
+    ByteString getPayload();
+}
+
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index 092dc5775e..2e83f9c8df 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -37,6 +37,7 @@
 import okhttp3.Response;
 import okhttp3.WebSocket;
 import okhttp3.WebSocketListener;
+import okhttp3.PingPayloadProvider;
 import okhttp3.internal.Internal;
 import okhttp3.internal.Util;
 import okhttp3.internal.connection.StreamAllocation;
@@ -74,6 +75,7 @@
   final WebSocketListener listener;
   private final Random random;
   private final long pingIntervalMillis;
+  private final PingPayloadProvider pingPayloadProvider;
   private final String key;
 
   /** Non-null for client web sockets. These can be canceled. */
@@ -140,7 +142,7 @@
   private boolean awaitingPong;
 
   public RealWebSocket(Request request, WebSocketListener listener, Random random,
-      long pingIntervalMillis) {
+      long pingIntervalMillis, @Nullable PingPayloadProvider pingPayloadProvider) {
     if (!"GET".equals(request.method())) {
       throw new IllegalArgumentException("Request must be GET: " + request.method());
     }
@@ -148,6 +150,16 @@ public RealWebSocket(Request request, WebSocketListener listener, Random random,
     this.listener = listener;
     this.random = random;
     this.pingIntervalMillis = pingIntervalMillis;
+    if(pingPayloadProvider == null) {
+      this.pingPayloadProvider = new PingPayloadProvider() {
+        @Override
+        public ByteString getPayload() {
+          return ByteString.EMPTY;
+        }
+      };
+    } else {
+      this.pingPayloadProvider = pingPayloadProvider;
+    }
 
     byte[] nonce = new byte[16];
     random.nextBytes(nonce);
@@ -327,11 +339,8 @@ synchronized int receivedPongCount() {
   }
 
   @Override public synchronized void onReadPing(ByteString payload) {
-    // Don't respond to pings after we've failed or sent the close frame.
-    if (failed || (enqueuedClose && messageAndCloseQueue.isEmpty())) return;
-
-    pongQueue.add(payload);
-    runWriter();
+    // Queue a pong response for a received ping using the ping's payload.
+    pong(payload);
     receivedPingCount++;
   }
 
@@ -549,7 +558,7 @@ void writePingFrame() {
     }
 
     try {
-      writer.writePing(ByteString.EMPTY);
+      writer.writePing(pingPayloadProvider.getPayload());
     } catch (IOException e) {
       failWebSocket(e, null);
     }
