diff --git a/samples/simple-client/src/main/java/okhttp3/sample/OkDocker.java b/samples/simple-client/src/main/java/okhttp3/sample/OkDocker.java
index 3a66cd114a..b9390867f0 100644
--- a/samples/simple-client/src/main/java/okhttp3/sample/OkDocker.java
+++ b/samples/simple-client/src/main/java/okhttp3/sample/OkDocker.java
@@ -1,5 +1,7 @@
 package okhttp3.sample;
 
+import okhttp3.Dns;
+import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
@@ -8,96 +10,146 @@
 import org.newsclub.net.unix.AFUNIXSocketAddress;
 
 import javax.net.SocketFactory;
+import javax.xml.bind.DatatypeConverter;
 import java.io.File;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.Socket;
+import java.net.SocketAddress;
 import java.net.UnknownHostException;
+import java.util.Collections;
+import java.util.List;
 
 public class OkDocker {
-  // curl --unix-socket /var/run/docker.sock "http://socket/_ping"
-  // curl --unix-socket /var/run/docker.sock "http://socket/version"
-  private static final String ENDPOINT = "unix://%2Fvar%2Frun%2Fdocker.sock/_ping";
-//  private static final Moshi MOSHI = new Moshi.Builder().build();
-//  private static final JsonAdapter<List<Contributor>> CONTRIBUTORS_JSON_ADAPTER = MOSHI.adapter(
-//      Types.newParameterizedType(List.class, Contributor.class));
 
   public static void main(String... args) throws Exception {
-    OkHttpClient client = new OkHttpClient.Builder().socketFactory(new UnixSocketFactory()).build();
+    UnixSocketFactory socketFactory = new UnixSocketFactory();
+    OkHttpClient client = new OkHttpClient.Builder()
+        .socketFactory(socketFactory)
+        .dns(socketFactory)
+        .build();
 
-    // Create request for remote resource.
+    String unixSocketPath = "/var/run/docker.sock";
+    HttpUrl url = socketFactory.urlForUnixSocketPath(unixSocketPath, "info");
+//    HttpUrl url = socketFactory.urlForUnixSocketPath(unixSocketPath, "_ping");
     Request request = new Request.Builder()
-        .url("http://localhost/unix--var-run-docker.sock/_ping")
+        .url(url)
         .build();
 
-//    Request request = new Request.Builder()
-//        .url(new HttpUrl.Builder()
-//            .scheme("http")
-//            .host("unix--var-run-docker.sock")
-////            .host("unix%3A%2F%2F%2Fvar%2Frun%2Fdocker.sock")
-//            .addPathSegment("_ping").build())
-//        .build();
-
-    // Execute the request and retrieve the response.
-    Response response = client.newCall(request).execute();
+    Response response = client
+        .newCall(request)
+        .execute();
 
-    // Deserialize HTTP response to concrete type.
     ResponseBody body = response.body();
     System.out.println(body.string());
   }
 
-  private OkDocker() {
-    // No instances.
-  }
+  private static class UnixSocketFactory extends SocketFactory implements Dns {
+
+    public UnixSocketFactory() {
+      if (!AFUNIXSocket.isSupported()) {
+        throw new UnsupportedOperationException("AFUNIXSocket.isSupported() == false");
+      }
+    }
+
+    public HttpUrl urlForUnixSocketPath(String unixSocketPath, String path) {
+      return new HttpUrl.Builder()
+          .scheme("http")
+          .host(UnixSocket.encodeHostname(unixSocketPath))
+          .addPathSegment(path)
+          .build();
+    }
+
+    @Override
+    public List<InetAddress> lookup(String hostname) throws UnknownHostException {
+      return hostname.endsWith(".socket")
+          ? Collections.singletonList(InetAddress.getByAddress(hostname, new byte[]{0, 0, 0, 0}))
+          : Dns.SYSTEM.lookup(hostname);
+    }
 
-  private static class UnixSocketFactory extends SocketFactory {
     @Override
     public Socket createSocket() throws IOException {
-      return newSocket();
+      return new UnixSocket();
     }
 
     @Override
-    public Socket createSocket(String s, int i) throws IOException, UnknownHostException {
-      System.err.println(".. " + s + "/" + i);
-      return newSocket();
+    public Socket createSocket(String s, int i) throws IOException {
+      throw new UnsupportedOperationException();
     }
 
     @Override
-    public Socket createSocket(String s, int i, InetAddress inetAddress, int i1) throws IOException, UnknownHostException {
-      System.err.println(".. " + s + "/" + i);
-      return newSocket();
+    public Socket createSocket(String s, int i, InetAddress inetAddress, int i1) throws IOException {
+      throw new UnsupportedOperationException();
     }
 
     @Override
     public Socket createSocket(InetAddress inetAddress, int i) throws IOException {
-      System.err.println(".. " + inetAddress + "/" + i);
-      return newSocket();
+      throw new UnsupportedOperationException();
     }
 
     @Override
     public Socket createSocket(InetAddress inetAddress, int i, InetAddress inetAddress1, int i1) throws IOException {
-      System.err.println(".. " + inetAddress + "/" + i);
-      return newSocket();
+      throw new UnsupportedOperationException();
+    }
+  }
+
+  private static class UnixSocket extends Socket {
+
+    private AFUNIXSocket socket;
+
+    @Override
+    public void connect(SocketAddress endpoint, int timeout) throws IOException {
+      InetAddress address = ((InetSocketAddress) endpoint).getAddress();
+      String socketPath = decodeHostname(address);
+
+      System.out.println("connect via '" + socketPath + "'...");
+      File socketFile = new File(socketPath);
+
+      socket = AFUNIXSocket.newInstance();
+      socket.connect(new AFUNIXSocketAddress(socketFile), timeout);
+      socket.setSoTimeout(timeout);
     }
 
-    private Socket newSocket() throws IOException {
-      String host = "/var/run/docker.sock";
-      System.out.println("connect via '" + host + "'...");
+    @Override
+    public void bind(SocketAddress bindpoint) throws IOException {
+      socket.bind(bindpoint);
+    }
 
-      File socketFile = new File(host);
-      System.out.println("unix socket exists " + socketFile.exists());
-      System.out.println("unix socket canRead: " + socketFile.canRead());
-      System.out.println("unix socket canWrite: " + socketFile.canWrite());
+    @Override
+    public boolean isConnected() {
+      return socket.isConnected();
+    }
+
+    @Override
+    public OutputStream getOutputStream() throws IOException {
+      return socket.getOutputStream();
+    }
 
-      AFUNIXSocket socket = AFUNIXSocket.newInstance();
-      try {
-        Thread.sleep(500);
+    @Override
+    public InputStream getInputStream() throws IOException {
+      return socket.getInputStream();
+    }
+
+    private static String encodeHostname(String path) {
+      return Encoder.encode(path) + ".socket";
+    }
+
+    private static String decodeHostname(InetAddress address) {
+      String hostName = address.getHostName();
+      return Encoder.decode(hostName.substring(0, hostName.indexOf(".socket")));
+    }
+
+    private static class Encoder {
+      static String encode(String text) {
+        return DatatypeConverter.printHexBinary(text.getBytes());
       }
-      catch (InterruptedException ignore) {
+
+      static String decode(String base64) {
+        return new String(DatatypeConverter.parseHexBinary(base64));
       }
-      socket.connect(new AFUNIXSocketAddress(socketFile), 0);
-      socket.setSoTimeout(0);
-      return socket;
     }
   }
 }
