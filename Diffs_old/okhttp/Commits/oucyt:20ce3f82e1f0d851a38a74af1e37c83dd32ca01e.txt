diff --git a/okhttp/src/main/java/okhttp3/ConnectionPool.java b/okhttp/src/main/java/okhttp3/ConnectionPool.java
index 9fd1946d85..d2f6c744a4 100644
--- a/okhttp/src/main/java/okhttp3/ConnectionPool.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java
@@ -69,6 +69,7 @@ public void run() {
                     waitNanos -= (waitMillis * 1000000L);
                     synchronized (ConnectionPool.this) {
                         try {
+                            // 线程休眠一段时间
                             ConnectionPool.this.wait(waitMillis, (int) waitNanos);
                         } catch (InterruptedException ignored) {
                         }
@@ -154,6 +155,7 @@ void put(RealConnection connection) {
         assert (Thread.holdsLock(this));
         if (!cleanupRunning) {
             cleanupRunning = true;
+            // 触发清理任务
             executor.execute(cleanupRunnable);
         }
         connections.add(connection);
@@ -219,11 +221,13 @@ long cleanup(long now) {
                     continue;
                 }
 
+                // 这是一个空闲连接
                 idleConnectionCount++;
 
                 // If the connection is ready to be evicted, we're done.
                 long idleDurationNs = now - connection.idleAtNanos;
                 if (idleDurationNs > longestIdleDurationNs) {
+                    // 找出空闲时间最长的一个connection
                     longestIdleDurationNs = idleDurationNs;
                     longestIdleConnection = connection;
                 }
@@ -232,16 +236,16 @@ long cleanup(long now) {
             if (longestIdleDurationNs >= this.keepAliveDurationNs
                     || idleConnectionCount > this.maxIdleConnections) {
                 // We've found a connection to evict. Remove it from the list, then close it below (outside
-                // of the synchronized block).
+                // of the synchronized block).如果超出保活时长，或者连接数限制，移除connection
                 connections.remove(longestIdleConnection);
             } else if (idleConnectionCount > 0) {
-                // A connection will be ready to evict soon.
+                // A connection will be ready to evict soon.返回空闲时长最大的一个connection还差多少时间被移出
                 return keepAliveDurationNs - longestIdleDurationNs;
             } else if (inUseConnectionCount > 0) {
-                // All connections are in use. It'll be at least the keep alive duration 'til we run again.
+                // All connections are in use. It'll be at least the keep alive duration 'til we run again.如果所有connection都在使用，直接返回保活时长
                 return keepAliveDurationNs;
             } else {
-                // No connections, idle or in use.
+                // No connections, idle or in use.空的链接池，返回-1
                 cleanupRunning = false;
                 return -1;
             }
