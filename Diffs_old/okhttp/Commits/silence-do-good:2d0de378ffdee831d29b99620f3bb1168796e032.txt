diff --git a/dependencies.png b/dependencies.png
new file mode 100644
index 0000000000..a8ef265192
Binary files /dev/null and b/dependencies.png differ
diff --git a/mockwebserver/src/main/java/module-info.java b/mockwebserver/src/main/java/module-info.java
index fae137a97c..b0c1441d78 100644
--- a/mockwebserver/src/main/java/module-info.java
+++ b/mockwebserver/src/main/java/module-info.java
@@ -1,5 +1,5 @@
 module mockwebserver {
-    requires okhttp;
+    requires transitive okhttp;
     requires junit;
     exports mockwebserver to junit, guide, slack, staticserver, unixdomainsockets, benchmarks;
 }
\ No newline at end of file
diff --git a/okhttp-urlconnection/src/main/java/urlconnection/OkUrlFactory.java b/okhttp-urlconnection/src/main/java/urlconnection/OkUrlFactory.java
index e85348e34f..40965f0824 100644
--- a/okhttp-urlconnection/src/main/java/urlconnection/OkUrlFactory.java
+++ b/okhttp-urlconnection/src/main/java/urlconnection/OkUrlFactory.java
@@ -65,7 +65,7 @@ public HttpURLConnection open(URL url) {
     return open(url, client.proxy());
   }
 
-  HttpURLConnection open(URL url, Proxy proxy) {
+  public HttpURLConnection open(URL url, Proxy proxy) {
     String protocol = url.getProtocol();
     OkHttpClient copy = client.newBuilder()
         .proxy(proxy)
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
index 258ac9b269..d9d7dbd258 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
@@ -38,7 +38,7 @@
  * entries are added to the array, starting in the last position moving forward.  When the array
  * fills, it is doubled.
  */
-final class Hpack {
+public final class Hpack {
   private static final int PREFIX_4_BITS = 0x0f;
   private static final int PREFIX_5_BITS = 0x1f;
   private static final int PREFIX_6_BITS = 0x3f;
@@ -112,7 +112,7 @@ private Hpack() {
   }
 
   // http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#section-3.1
-  static final class Reader {
+  public static final class Reader {
 
     private final List<Header> headerList = new ArrayList<>();
     private final BufferedSource source;
@@ -124,7 +124,7 @@ private Hpack() {
     Header[] dynamicTable = new Header[8];
     // Array is populated back to front, so new entries always have lowest index.
     int nextHeaderIndex = dynamicTable.length - 1;
-    int headerCount = 0;
+    public int headerCount = 0;
     int dynamicTableByteCount = 0;
 
     Reader(int headerTableSizeSetting, Source source) {
@@ -180,7 +180,7 @@ private int evictToRecoverBytes(int bytesToRecover) {
      * Read {@code byteCount} bytes of headers from the source stream. This implementation does not
      * propagate the never indexed flag of a header.
      */
-    void readHeaders() throws IOException {
+    public void readHeaders() throws IOException {
       while (!source.exhausted()) {
         int b = source.readByte() & 0xff;
         if (b == 0x80) { // 10000000
@@ -363,7 +363,7 @@ ByteString readByteString() throws IOException {
     return Collections.unmodifiableMap(result);
   }
 
-  static final class Writer {
+  public static final class Writer {
     private static final int SETTINGS_HEADER_TABLE_SIZE = 4096;
 
     /**
@@ -457,7 +457,7 @@ private void insertIntoDynamicTable(Header entry) {
 
     /** This does not use "never indexed" semantics for sensitive headers. */
     // http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#section-6.2.3
-    void writeHeaders(List<Header> headerBlock) throws IOException {
+    public void writeHeaders(List<Header> headerBlock) throws IOException {
       if (emitDynamicTableSizeUpdate) {
         if (smallestHeaderTableSizeSetting < maxDynamicTableByteCount) {
           // Multiple dynamic table size updates!
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2.java
index b774f6de08..9afd31a853 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2.java
@@ -25,7 +25,7 @@
       = ByteString.encodeUtf8("PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n");
 
   /** The initial max frame size, applied independently writing to, or reading from the peer. */
-  static final int INITIAL_MAX_FRAME_SIZE = 0x4000; // 16384
+  public static final int INITIAL_MAX_FRAME_SIZE = 0x4000; // 16384
 
   public static final byte TYPE_DATA = 0x0;
   public static final byte TYPE_HEADERS = 0x1;
@@ -36,15 +36,15 @@
   public static final byte TYPE_PING = 0x6;
   public static final byte TYPE_GOAWAY = 0x7;
   public static final byte TYPE_WINDOW_UPDATE = 0x8;
-  static final byte TYPE_CONTINUATION = 0x9;
+  public static final byte TYPE_CONTINUATION = 0x9;
 
-  static final byte FLAG_NONE = 0x0;
+  public static final byte FLAG_NONE = 0x0;
   static final byte FLAG_ACK = 0x1; // Used for settings and ping.
-  static final byte FLAG_END_STREAM = 0x1; // Used for headers and data.
-  static final byte FLAG_END_HEADERS = 0x4; // Used for headers and continuation.
-  static final byte FLAG_END_PUSH_PROMISE = 0x4;
+  public static final byte FLAG_END_STREAM = 0x1; // Used for headers and data.
+  public static final byte FLAG_END_HEADERS = 0x4; // Used for headers and continuation.
+  public static final byte FLAG_END_PUSH_PROMISE = 0x4;
   static final byte FLAG_PADDED = 0x8; // Used for headers and data.
-  static final byte FLAG_PRIORITY = 0x20; // Used for headers.
+  public static final byte FLAG_PRIORITY = 0x20; // Used for headers.
   static final byte FLAG_COMPRESSED = 0x20; // Used for data.
 
   /** Lookup table for valid frame types. */
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Settings.java b/okhttp/src/main/java/okhttp3/internal/http2/Settings.java
index 5b548de484..fa34b88f7b 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Settings.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Settings.java
@@ -83,13 +83,13 @@ int size() {
   }
 
   /** Returns -1 if unset. */
-  int getHeaderTableSize() {
+  public int getHeaderTableSize() {
     int bit = 1 << HEADER_TABLE_SIZE;
     return (bit & set) != 0 ? values[HEADER_TABLE_SIZE] : -1;
   }
 
   // TODO: honor this setting.
-  boolean getEnablePush(boolean defaultValue) {
+  public boolean getEnablePush(boolean defaultValue) {
     int bit = 1 << ENABLE_PUSH;
     return ((bit & set) != 0 ? values[ENABLE_PUSH] : defaultValue ? 1 : 0) == 1;
   }
diff --git a/samples/guide/src/main/java/module-info.java b/samples/guide/src/main/java/module-info.java
index 3898867c79..7999586d51 100644
--- a/samples/guide/src/main/java/module-info.java
+++ b/samples/guide/src/main/java/module-info.java
@@ -1,5 +1,4 @@
 module guide {
-    requires okhttp;
     requires mockwebserver;
     requires tls;
     requires moshi;
diff --git a/samples/static-server/src/main/java/module-info.java b/samples/static-server/src/main/java/module-info.java
index fcb45014fb..7956907890 100644
--- a/samples/static-server/src/main/java/module-info.java
+++ b/samples/static-server/src/main/java/module-info.java
@@ -1,4 +1,3 @@
 module staticserver {
-    requires okhttp;
     requires mockwebserver;
 }
\ No newline at end of file
