diff --git a/okhttp-tests/src/test/java/okhttp3/AddressTest.java b/okhttp-tests/src/test/java/okhttp3/AddressTest.java
index 7ff65a010a..30e376be5b 100644
--- a/okhttp-tests/src/test/java/okhttp3/AddressTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java
@@ -18,7 +18,6 @@
 import java.util.List;
 import javax.net.SocketFactory;
 import okhttp3.internal.Util;
-import okhttp3.internal.http.AuthenticatorAdapter;
 import okhttp3.internal.http.RecordingProxySelector;
 import org.junit.Test;
 
@@ -28,7 +27,7 @@
 public final class AddressTest {
   private Dns dns = Dns.SYSTEM;
   private SocketFactory socketFactory = SocketFactory.getDefault();
-  private Authenticator authenticator = AuthenticatorAdapter.INSTANCE;
+  private Authenticator authenticator = Authenticator.NONE;
   private List<Protocol> protocols = Util.immutableList(Protocol.HTTP_1_1);
   private List<ConnectionSpec> connectionSpecs = Util.immutableList(ConnectionSpec.MODERN_TLS);
   private RecordingProxySelector proxySelector = new RecordingProxySelector();
diff --git a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
index 2f37c3e5c0..b4beebcc30 100644
--- a/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/OkHttpClientTest.java
@@ -16,7 +16,6 @@
 package okhttp3;
 
 import java.io.IOException;
-import java.net.Authenticator;
 import java.net.CacheRequest;
 import java.net.CacheResponse;
 import java.net.CookieHandler;
@@ -30,8 +29,6 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import javax.net.SocketFactory;
-import okhttp3.internal.RecordingAuthenticator;
-import okhttp3.internal.http.AuthenticatorAdapter;
 import okhttp3.internal.http.RecordingProxySelector;
 import okhttp3.internal.tls.OkHostnameVerifier;
 import org.junit.After;
@@ -48,13 +45,11 @@
   private static final ProxySelector DEFAULT_PROXY_SELECTOR = ProxySelector.getDefault();
   private static final CookieHandler DEFAULT_COOKIE_HANDLER = CookieManager.getDefault();
   private static final ResponseCache DEFAULT_RESPONSE_CACHE = ResponseCache.getDefault();
-  private static final Authenticator DEFAULT_AUTHENTICATOR = null; // No Authenticator.getDefault().
 
   @After public void tearDown() throws Exception {
     ProxySelector.setDefault(DEFAULT_PROXY_SELECTOR);
     CookieManager.setDefault(DEFAULT_COOKIE_HANDLER);
     ResponseCache.setDefault(DEFAULT_RESPONSE_CACHE);
-    Authenticator.setDefault(DEFAULT_AUTHENTICATOR);
   }
 
   @Test public void timeoutDefaults() {
@@ -110,19 +105,15 @@
    */
   @Test public void copyWithDefaultsWhenDefaultIsGlobal() throws Exception {
     ProxySelector proxySelector = new RecordingProxySelector();
-    Authenticator authenticator = new RecordingAuthenticator();
     SocketFactory socketFactory = SocketFactory.getDefault(); // Global isn't configurable.
     OkHostnameVerifier hostnameVerifier = OkHostnameVerifier.INSTANCE; // Global isn't configurable.
     CertificatePinner certificatePinner = CertificatePinner.DEFAULT; // Global isn't configurable.
 
     ProxySelector.setDefault(proxySelector);
-    Authenticator.setDefault(authenticator);
 
     OkHttpClient client = new OkHttpClient().copyWithDefaults();
 
     assertSame(proxySelector, client.getProxySelector());
-    assertSame(AuthenticatorAdapter.INSTANCE, client.getAuthenticator());
-    assertSame(AuthenticatorAdapter.INSTANCE, client.getProxyAuthenticator());
     assertSame(socketFactory, client.getSocketFactory());
     assertSame(hostnameVerifier, client.getHostnameVerifier());
     assertSame(certificatePinner, client.getCertificatePinner());
diff --git a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
index ac7265ab7f..5d153e430a 100644
--- a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
@@ -966,6 +966,7 @@ private void initResponseCache() throws IOException {
         new MockResponse().setSocketPolicy(UPGRADE_TO_SSL_AT_END).clearHeaders());
     server.enqueue(new MockResponse().setBody("A"));
 
+    client.client().setProxyAuthenticator(new JavaNetAuthenticator());
     client.client().setProxy(server.toProxyAddress());
 
     URL url = new URL("https://android.com/foo");
@@ -1408,6 +1409,7 @@ private void testAuthenticateWithStreamingPost(StreamingMode streamingMode) thro
     server.enqueue(pleaseAuthenticate);
 
     Authenticator.setDefault(new RecordingAuthenticator());
+    client.client().setAuthenticator(new JavaNetAuthenticator());
     connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] requestBody = {'A', 'B', 'C', 'D'};
@@ -1546,6 +1548,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .setBody("Please authenticate.");
     server.enqueue(pleaseAuthenticate);
 
+    client.client().setAuthenticator(new JavaNetAuthenticator());
     if (proxy) {
       client.client().setProxy(server.toProxyAddress());
       connection = client.open(new URL("http://android.com"));
@@ -1729,6 +1732,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
+    client.client().setAuthenticator(new JavaNetAuthenticator());
     connection = client.open(server.url("/").url());
     connection.setDoOutput(true);
     byte[] requestBody = {'A', 'B', 'C', 'D'};
@@ -1763,6 +1767,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
+    client.client().setAuthenticator(new JavaNetAuthenticator());
     connection = client.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -1795,6 +1800,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(successfulResponse);
 
     Authenticator.setDefault(new RecordingAuthenticator());
+    client.client().setAuthenticator(new JavaNetAuthenticator());
     connection = client.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
@@ -1819,6 +1825,7 @@ private void testSecureStreamingPost(StreamingMode streamingMode) throws Excepti
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
+    client.client().setAuthenticator(new JavaNetAuthenticator());
     connection = client.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
   }
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
index 78d1af9309..25050ca778 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
@@ -41,6 +41,7 @@
 import okhttp3.internal.RecordingAuthenticator;
 import okhttp3.internal.SslContextBuilder;
 import okhttp3.internal.Util;
+import okhttp3.JavaNetAuthenticator;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
@@ -220,6 +221,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
     server.enqueue(new MockResponse().setBody("Successful auth!"));
 
     Authenticator.setDefault(new RecordingAuthenticator());
+    client.client().setAuthenticator(new JavaNetAuthenticator());
     connection = client.open(server.url("/").url());
     assertEquals("Successful auth!", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
 
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java
index 05b57fbaab..427d4af13c 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http/RouteSelectorTest.java
@@ -71,7 +71,7 @@
   private final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
   private HostnameVerifier hostnameVerifier;
 
-  private final Authenticator authenticator = AuthenticatorAdapter.INSTANCE;
+  private final Authenticator authenticator = Authenticator.NONE;
   private final List<Protocol> protocols = Arrays.asList(Protocol.HTTP_1_1);
   private final FakeDns dns = new FakeDns();
   private final RecordingProxySelector proxySelector = new RecordingProxySelector();
diff --git a/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java
similarity index 84%
rename from okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java
rename to okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java
index 09d875999c..b7b63f48c0 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/AuthenticatorAdapter.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/JavaNetAuthenticator.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3.internal.http;
+package okhttp3;
 
 import java.io.IOException;
 import java.net.Authenticator.RequestorType;
@@ -22,19 +22,13 @@
 import java.net.PasswordAuthentication;
 import java.net.Proxy;
 import java.util.List;
-import okhttp3.Authenticator;
-import okhttp3.Challenge;
-import okhttp3.Credentials;
-import okhttp3.HttpUrl;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.Route;
-
-/** Adapts {@link java.net.Authenticator} to {@link Authenticator}. */
-public final class AuthenticatorAdapter implements Authenticator {
-  /** Uses the global authenticator to get the password. */
-  public static final Authenticator INSTANCE = new AuthenticatorAdapter();
 
+/**
+ * Adapts {@link java.net.Authenticator} to {@link Authenticator}. Configure OkHttp to use
+ * {@link java.net.Authenticator} with {@link OkHttpClient#setAuthenticator} or {@link
+ * OkHttpClient#setProxyAuthenticator(Authenticator)}.
+ */
+public final class JavaNetAuthenticator implements Authenticator {
   @Override public Request authenticate(Route route, Response response) throws IOException {
     List<Challenge> challenges = response.challenges();
     Request request = response.request();
diff --git a/okhttp/src/main/java/okhttp3/Authenticator.java b/okhttp/src/main/java/okhttp3/Authenticator.java
index 1048f49f86..ede539805f 100644
--- a/okhttp/src/main/java/okhttp3/Authenticator.java
+++ b/okhttp/src/main/java/okhttp3/Authenticator.java
@@ -47,6 +47,13 @@
  * or both.
  */
 public interface Authenticator {
+  /** An authenticator that knows no credentials and makes no attempt to authenticate. */
+  Authenticator NONE = new Authenticator() {
+    @Override public Request authenticate(Route route, Response response) {
+      return null;
+    }
+  };
+
   /**
    * Returns a request that includes a credential to satisfy an authentication challenge in {@code
    * response}. Returns null if the challenge cannot be satisfied.
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index 4c828f7107..3d47da64c7 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -33,7 +33,6 @@
 import okhttp3.internal.InternalCache;
 import okhttp3.internal.RouteDatabase;
 import okhttp3.internal.Util;
-import okhttp3.internal.http.AuthenticatorAdapter;
 import okhttp3.internal.http.StreamAllocation;
 import okhttp3.internal.io.RealConnection;
 import okhttp3.internal.tls.OkHostnameVerifier;
@@ -382,8 +381,7 @@ public CertificatePinner getCertificatePinner() {
    * Sets the authenticator used to respond to challenges from origin servers. Use {@link
    * #setProxyAuthenticator} to set the authenticator for proxy servers.
    *
-   * <p>If unset, the {@linkplain java.net.Authenticator#setDefault system-wide default}
-   * authenticator will be used.
+   * <p>If unset, the {@linkplain Authenticator#NONE no authentication will be attempted}.
    */
   public OkHttpClient setAuthenticator(Authenticator authenticator) {
     this.authenticator = authenticator;
@@ -398,8 +396,7 @@ public Authenticator getAuthenticator() {
    * Sets the authenticator used to respond to challenges from proxy servers. Use {@link
    * #setAuthenticator} to set the authenticator for origin servers.
    *
-   * <p>If unset, the {@linkplain java.net.Authenticator#setDefault system-wide default}
-   * authenticator will be used.
+   * <p>If unset, the {@linkplain Authenticator#NONE no authentication will be attempted}.
    */
   public OkHttpClient setProxyAuthenticator(Authenticator proxyAuthenticator) {
     this.proxyAuthenticator = proxyAuthenticator;
@@ -609,10 +606,10 @@ OkHttpClient copyWithDefaults() {
       result.certificatePinner = CertificatePinner.DEFAULT;
     }
     if (result.authenticator == null) {
-      result.authenticator = AuthenticatorAdapter.INSTANCE;
+      result.authenticator = Authenticator.NONE;
     }
     if (result.proxyAuthenticator == null) {
-      result.proxyAuthenticator = AuthenticatorAdapter.INSTANCE;
+      result.proxyAuthenticator = Authenticator.NONE;
     }
     if (result.connectionPool == null) {
       result.connectionPool = ConnectionPool.getDefault();
