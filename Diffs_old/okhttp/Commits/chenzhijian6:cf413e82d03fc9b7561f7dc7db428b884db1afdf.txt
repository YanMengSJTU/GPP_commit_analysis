diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
index e58730e015..b852ae7fd5 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
@@ -596,7 +596,7 @@ private void assertHeadersContainsMapping(Map<String, List<String>> headers, Str
         .addHeader("key1", "value1_1")
         .addHeader("key2", "value2")
         .addHeader("key1", "value1_2")
-        .body(null)
+        .body((ResponseBody) null)
         .build();
     CacheResponse javaCacheResponse = JavaApiConverter.createJavaCacheResponse(okResponse);
     assertFalse(javaCacheResponse instanceof SecureCacheResponse);
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Call.java b/okhttp/src/main/java/com/squareup/okhttp/Call.java
index a37e13e410..17fe541b1a 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Call.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java
@@ -16,11 +16,9 @@
 package com.squareup.okhttp;
 
 import com.squareup.okhttp.internal.NamedRunnable;
-import com.squareup.okhttp.internal.PushCallback;
 import com.squareup.okhttp.internal.Util;
 import com.squareup.okhttp.internal.http.HttpEngine;
 import com.squareup.okhttp.internal.http.HttpMethod;
-import com.squareup.okhttp.internal.http.OkHeaders;
 import com.squareup.okhttp.internal.http.RetryableSink;
 import java.io.IOException;
 import java.net.ProtocolException;
@@ -75,7 +73,6 @@
    * @throws IllegalStateException when the call has already been executed.
    */
   public Response execute() throws IOException {
-    setPushCallback();
     synchronized (this) {
       if (executed) throw new IllegalStateException("Already Executed");
       executed = true;
@@ -100,7 +97,6 @@ public Response execute() throws IOException {
    * @throws IllegalStateException when the call has already been executed.
    */
   public void enqueue(Callback responseCallback) {
-    setPushCallback();
     synchronized (this) {
       if (executed) throw new IllegalStateException("Already Executed");
       executed = true;
@@ -224,7 +220,7 @@ private Response getResponse() throws IOException {
       if (followUp == null) {
         engine.releaseConnection();
         return response.newBuilder()
-            .body(new RealResponseBody(response, engine.getResponseBody()))
+            .body(engine.getResponseBody())
             .build();
       }
 
@@ -243,45 +239,9 @@ private Response getResponse() throws IOException {
     }
   }
 
-  private void setPushCallback() {
-      if(pushObserver != null) {
-          request = request.newBuilder().pushCallback(new PushCallback() {
-              @Override
-              public boolean onPush(Response partialResponse, BufferedSource buffer) {
-                  Response response = partialResponse.newBuilder()
-                          .body(new RealResponseBody(partialResponse, buffer))
-                          .build();
-                  return pushObserver.onPush(response);
-              }
-          }).build();
-      }
-  }
-
   public Call pushObserver(PushObserver pushObserver) {
       this.pushObserver = pushObserver;
       return this;
   }
 
-  private static class RealResponseBody extends ResponseBody {
-    private final Response response;
-    private final BufferedSource source;
-
-    RealResponseBody(Response response, BufferedSource source) {
-      this.response = response;
-      this.source = source;
-    }
-
-    @Override public MediaType contentType() {
-      String contentType = response.header("Content-Type");
-      return contentType != null ? MediaType.parse(contentType) : null;
-    }
-
-    @Override public long contentLength() {
-      return OkHeaders.contentLength(response);
-    }
-
-    @Override public BufferedSource source() {
-      return source;
-    }
-  }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Request.java b/okhttp/src/main/java/com/squareup/okhttp/Request.java
index 657a42bde7..4964e8e345 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Request.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java
@@ -16,7 +16,6 @@
 package com.squareup.okhttp;
 
 import com.squareup.okhttp.internal.Platform;
-import com.squareup.okhttp.internal.PushCallback;
 
 import java.io.IOException;
 import java.net.MalformedURLException;
@@ -35,7 +34,7 @@
   private final Headers headers;
   private final RequestBody body;
   private final Object tag;
-  private final PushCallback pushCallback;
+  private final PushObserver pushObserver;
 
   private volatile URI uri; // Lazily initialized.
   private volatile CacheControl cacheControl; // Lazily initialized.
@@ -46,7 +45,7 @@ private Request(Builder builder) {
     this.headers = builder.headers.build();
     this.body = builder.body;
     this.tag = builder.tag != null ? builder.tag : this;
-    this.pushCallback = builder.pushCallback;
+    this.pushObserver = builder.pushObserver;
   }
 
   public URL url() {
@@ -90,8 +89,8 @@ public Object tag() {
     return tag;
   }
 
-  public PushCallback pushCallback() {
-    return pushCallback;
+  public PushObserver pushObserver() {
+    return pushObserver;
   }
 
   public Builder newBuilder() {
@@ -127,7 +126,7 @@ public boolean isHttps() {
     private Headers.Builder headers;
     private RequestBody body;
     private Object tag;
-    private PushCallback pushCallback = null;
+    private PushObserver pushObserver = null;
 
     public Builder() {
       this.method = "GET";
@@ -140,7 +139,7 @@ private Builder(Request request) {
       this.body = request.body;
       this.tag = request.tag;
       this.headers = request.headers.newBuilder();
-      this.pushCallback = request.pushCallback;
+      this.pushObserver = request.pushObserver;
     }
 
     public Builder url(String url) {
@@ -219,8 +218,8 @@ public Builder method(String method, RequestBody body) {
       return this;
     }
 
-    Builder pushCallback(PushCallback pushCallback) {
-      this.pushCallback = pushCallback;
+    Builder pushObserver(PushObserver pushObserver) {
+      this.pushObserver = pushObserver;
       return this;
     }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Response.java b/okhttp/src/main/java/com/squareup/okhttp/Response.java
index 2762992229..710d9b075c 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Response.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Response.java
@@ -16,6 +16,8 @@
 package com.squareup.okhttp;
 
 import com.squareup.okhttp.internal.http.OkHeaders;
+import okio.BufferedSource;
+
 import java.util.Collections;
 import java.util.List;
 
@@ -296,6 +298,38 @@ public Builder body(ResponseBody body) {
       return this;
     }
 
+    public Builder body(BufferedSource source) {
+      return body(new RealResponseBody(source));
+    }
+
+    private class RealResponseBody extends ResponseBody {
+      private final MediaType mediaType;
+      private final BufferedSource source;
+      private final long contentLength;
+
+      RealResponseBody(BufferedSource source) {
+        if(headers == null) {
+          throw new IllegalStateException("Set headers before setting the body");
+        }
+        String contentType = headers.get("Content-Type");
+        mediaType = contentType != null ? MediaType.parse(contentType) : null;
+        this.source = source;
+        this.contentLength = OkHeaders.contentLength(headers.build());
+      }
+
+      @Override public MediaType contentType() {
+        return mediaType;
+      }
+
+      @Override public long contentLength() {
+        return contentLength;
+      }
+
+      @Override public BufferedSource source() {
+        return source;
+      }
+    }
+
     public Builder networkResponse(Response networkResponse) {
       if (networkResponse != null) checkSupportResponse("networkResponse", networkResponse);
       this.networkResponse = networkResponse;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/PushCallback.java b/okhttp/src/main/java/com/squareup/okhttp/internal/PushCallback.java
deleted file mode 100644
index 8ae81c6426..0000000000
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/PushCallback.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.squareup.okhttp.internal;
-
-import com.squareup.okhttp.Response;
-import okio.BufferedSource;
-
-/**
- * Created by drapp on 5/22/14.
- */
-public interface PushCallback {
-
-    boolean onPush(Response partialResponse, BufferedSource buffer);
-}
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index f9609e9808..c4ac949d1b 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -298,7 +298,7 @@ public void sendRequest() throws IOException {
 
   private static Response stripBody(Response response) {
     return response != null && response.body() != null
-        ? response.newBuilder().body(null).build()
+        ? response.newBuilder().body((ResponseBody) null).build()
         : response;
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
index e4d55e800d..7ddb9466b9 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
@@ -17,7 +17,6 @@
 package com.squareup.okhttp.internal.http;
 
 import com.squareup.okhttp.*;
-import com.squareup.okhttp.internal.PushCallback;
 import com.squareup.okhttp.internal.Util;
 import com.squareup.okhttp.internal.spdy.ErrorCode;
 import com.squareup.okhttp.internal.spdy.Header;
@@ -98,7 +97,7 @@ public SpdyTransport(HttpEngine httpEngine, SpdyConnection spdyConnection) {
         hasResponseBody);
     stream.readTimeout().timeout(httpEngine.client.getReadTimeout(), TimeUnit.MILLISECONDS);
 
-    final PushCallback pushCallback = request.pushCallback();
+    final PushObserver pushCallback = request.pushObserver();
     if (pushCallback != null) {
       stream.pushObserver = new SpdyPushObserver() {
         @Override public synchronized boolean onPromise(int streamId, List<Header> requestHeaders) {
@@ -107,20 +106,21 @@ public SpdyTransport(HttpEngine httpEngine, SpdyConnection spdyConnection) {
 
         @Override public synchronized boolean onPush(SpdyStream associated, SpdyStream push) {
           try {
-            Response pushReq = parsePushResponse(
-                    request,
-                    push.getRequestHeaders(),
+            Response partialResponse = parsePushResponse(request, push.getRequestHeaders(),
                     spdyConnection.getProtocol()).build();
 
             SpdySource source = new SpdySource(push, null);
             BufferedSource buffer;
             if (httpEngine.isTransparentGzip()
-                    && "gzip".equalsIgnoreCase(pushReq.headers().get("Content-Encoding"))) {
+                    && "gzip".equalsIgnoreCase(partialResponse.headers().get("Content-Encoding"))) {
               buffer = Okio.buffer(new GzipSource(source));
             } else {
               buffer = Okio.buffer(source);
             }
-            return pushCallback.onPush(pushReq, buffer);
+            Response response = partialResponse.newBuilder()
+                    .body(buffer)
+                    .build();
+            return pushCallback.onPush(response);
           } catch (IOException ignored) {
             return true;
           }
