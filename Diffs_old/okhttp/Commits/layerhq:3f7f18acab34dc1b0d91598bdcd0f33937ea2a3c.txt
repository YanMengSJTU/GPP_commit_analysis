diff --git a/mockwebserver/build.gradle b/mockwebserver/build.gradle
index dbca8ea91c..1890a39a4a 100644
--- a/mockwebserver/build.gradle
+++ b/mockwebserver/build.gradle
@@ -5,8 +5,8 @@ apply plugin: 'git-repo'
 
 description = 'MockWebServer'
 
-sourceCompatibility = 1.6
-targetCompatibility = 1.6
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
 
 repositories {
     maven { url "${System.env.HOME}/.m2/repository" }
@@ -16,6 +16,7 @@ repositories {
 
 dependencies {
   compile project(':okhttp')
+  compile project(':okhttp-ws')
     compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version:'1.48'
     compile group: 'junit', name: 'junit', version:'4.11'
 }
diff --git a/okhttp-testing-support/build.gradle b/okhttp-testing-support/build.gradle
new file mode 100644
index 0000000000..ad14e819c8
--- /dev/null
+++ b/okhttp-testing-support/build.gradle
@@ -0,0 +1,11 @@
+apply plugin: 'java'
+
+description = 'OkHttp Testing-support'
+
+repositories {
+  mavenCentral()
+}
+
+dependencies {
+  compile group: 'junit', name: 'junit', version:'4.11'
+}
diff --git a/okhttp-tests/build.gradle b/okhttp-tests/build.gradle
index 89f43dee1d..54e91cb731 100644
--- a/okhttp-tests/build.gradle
+++ b/okhttp-tests/build.gradle
@@ -1,9 +1,21 @@
+apply plugin: 'java'
+apply plugin: 'maven'
+apply plugin: 'maven-publish'
+apply plugin: 'git-repo'
 
 description = 'OkHttp Tests'
+
+repositories {
+    maven { url "${System.env.HOME}/.m2/repository" }
+    github("layerhq", "maven-private", "master", "releases")
+    mavenCentral()
+}
+
 dependencies {
-    compile group: 'com.squareup.okio', name: 'okio', version:'0.9.0-LAYER'
-  compile project(':okhttp')
-  compile project(':okhttp-urlconnection')
+    testCompile project(':okhttp')
+    testCompile project(':okhttp-urlconnection')
+    testCompile project(':okhttp-testing-support')
+    testCompile project(':mockwebserver')
+    testCompile group: 'com.squareup.okio', name: 'okio', version:'1.5.0-LAYER'
     testCompile group: 'junit', name: 'junit', version:'4.11'
-  testCompile project(':mockwebserver')
 }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
index f42abeebc1..c59fa55823 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
@@ -474,10 +474,9 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
   @Test public void push_SPDY_3() throws Exception {
     enableProtocol(Protocol.SPDY_3);
     server.enqueue(new MockResponse()
-        .withPush(new PushPromise("GET", "/pushed", Arrays.asList("foo: bar"),
-             new MockResponse().setBody("push data")))
-        .setBody("abc"));
-    server.play();
+            .withPush(new PushPromise("GET", "/pushed", Headers.of("foo", "bar"),
+                    new MockResponse().setBody("push data")))
+            .setBody("abc"));
 
     TestPushObserver pushObserver = new TestPushObserver();
     Request request = new Request.Builder()
@@ -490,7 +489,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
     RecordedRequest recordedRequest = server.takeRequest();
     assertEquals("GET", recordedRequest.getMethod());
-    assertEquals(0, recordedRequest.getBody().length);
+    assertEquals(0, recordedRequest.getBody().size());
 
     synchronized (pushObserver) {
       if (!pushObserver.gotRequest()) {
@@ -1727,7 +1726,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
   private RecordedResponse executeSynchronously(Request request, PushObserver pushObserver) throws IOException {
       Call call = client.newCall(request.newBuilder().pushObserver(pushObserver).build());
       Response response = call.execute();
-      return new RecordedResponse(request, response, response.body().string(), null);
+      return new RecordedResponse(request, response, null, response.body().string(), null);
   }
 
   private RecordedResponse executeSynchronously(Request request) throws IOException {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java
index a13fa53c08..bfac61c6aa 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Http2ConnectionTest.java
@@ -15,19 +15,23 @@
  */
 package com.squareup.okhttp.internal.spdy;
 
+import com.squareup.okhttp.PushObserver;
 import com.squareup.okhttp.internal.Util;
+
+import org.junit.After;
+import org.junit.Test;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
+
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
 import okio.Okio;
 import okio.Source;
-import org.junit.After;
-import org.junit.Test;
 
 import static com.squareup.okhttp.TestUtil.headerEntries;
 import static com.squareup.okhttp.internal.spdy.ErrorCode.CANCEL;
@@ -418,7 +422,7 @@ private Buffer data(int byteCount) {
 
     // play it back
     connectionBuilder(peer, HTTP_2)
-        .pushObserver(PushObserver.CANCEL).build();
+        .pushObserver(SpdyPushObserver.CANCEL).build();
 
     // verify the peer received what was expected
     MockSpdyPeer.InFrame rstStream = peer.takeFrame();
@@ -460,27 +464,18 @@ private SpdyConnection connection(MockSpdyPeer peer, Variant variant) throws IOE
         .protocol(variant.getProtocol());
   }
 
-  static final PushObserver IGNORE = new PushObserver() {
+  static final SpdyPushObserver IGNORE = new SpdyPushObserver() {
 
-    @Override public boolean onRequest(int streamId, List<Header> requestHeaders) {
+    @Override public synchronized boolean onPromise(int streamId, List<Header> requestHeaders) {
       return false;
     }
 
-    @Override public boolean onHeaders(int streamId, List<Header> responseHeaders, boolean last) {
+    @Override public synchronized boolean onPush(SpdyStream associated, SpdyStream push) {
       return false;
     }
-
-    @Override public boolean onData(int streamId, BufferedSource source, int byteCount,
-        boolean last) throws IOException {
-      source.skip(byteCount);
-      return false;
-    }
-
-    @Override public void onReset(int streamId, ErrorCode errorCode) {
-    }
   };
 
-  private static class RecordingPushObserver implements PushObserver {
+  private static class RecordingPushObserver implements SpdyPushObserver {
     final List<Object> events = new ArrayList<>();
 
     public synchronized Object takeEvent() throws InterruptedException {
@@ -490,32 +485,25 @@ public synchronized Object takeEvent() throws InterruptedException {
       return events.remove(0);
     }
 
-    @Override public synchronized boolean onRequest(int streamId, List<Header> requestHeaders) {
+    @Override public synchronized boolean onPromise(int streamId, List<Header> requestHeaders) {
       assertEquals(2, streamId);
       events.add(requestHeaders);
       notifyAll();
       return false;
     }
-
-    @Override public synchronized boolean onHeaders(
-        int streamId, List<Header> responseHeaders, boolean last) {
-      assertEquals(2, streamId);
-      assertTrue(last);
-      events.add(responseHeaders);
-      notifyAll();
-      return false;
-    }
-
-    @Override public synchronized boolean onData(
-        int streamId, BufferedSource source, int byteCount, boolean last) {
-      events.add(new AssertionError("onData"));
-      notifyAll();
+    @Override public synchronized boolean onPush(SpdyStream associated, SpdyStream push) {
+      assertEquals(2, push.getId());
+      events.add(push.getRequestHeaders());
+      Source in = push.getSource();
+      try {
+        String data = Okio.buffer(in).readByteString(5).utf8();
+        events.add(data);
+        notifyAll();
+      } catch (IOException expected) {
+        // Just don't push anything to events
+      }
       return false;
     }
 
-    @Override public synchronized void onReset(int streamId, ErrorCode errorCode) {
-      events.add(new AssertionError("onReset"));
-      notifyAll();
-    }
   }
 }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java
index 399d3bd86f..22b111f2f1 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/spdy/Spdy3ConnectionTest.java
@@ -48,6 +48,7 @@
 import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_HEADERS;
 import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_PING;
 import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_RST_STREAM;
+import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_SETTINGS;
 import static com.squareup.okhttp.internal.spdy.Spdy3.TYPE_WINDOW_UPDATE;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -56,6 +57,7 @@
 
 public final class Spdy3ConnectionTest {
   private static final Variant SPDY3 = new Spdy3();
+  private static final Variant HTTP_2 = new Http2();
   private final MockSpdyPeer peer = new MockSpdyPeer();
 
   @After public void tearDown() throws Exception {
@@ -66,7 +68,7 @@
     // write the mocking script
     peer.acceptFrame(); // SYN_STREAM
     peer.sendFrame()
-        .synReply(false, 1, headerEntries("a", "android"));
+            .synReply(false, 1, headerEntries("a", "android"));
     peer.sendFrame().data(true, 1, new Buffer().writeUtf8("robot"), 5);
     peer.acceptFrame(); // DATA
     peer.play();
@@ -1324,7 +1326,7 @@ private void headerBlockHasTrailingCompressedBytes(String frame, int length) thr
         new Header(Header.RESPONSE_STATUS, "200")
     );
     peer.sendFrame().synReply(true, 2, expectedResponseHeaders);
-    peer.sendFrame().data(true, 3, data(0));
+    peer.sendFrame().data(true, 3, data(0), 0);
     peer.play();
 
     RecordingPushObserver observer = new RecordingPushObserver();
@@ -1354,8 +1356,8 @@ private void headerBlockHasTrailingCompressedBytes(String frame, int length) thr
         new Header(Header.TARGET_PATH, "/cached")
     );
     peer.sendFrame().synStream(false, true, 2, 3, expectedPushHeaders);
-    peer.sendFrame().data(true, 3, data(0));
-    peer.sendFrame().data(true, 2, new Buffer().writeUtf8("robot"));
+    peer.sendFrame().data(true, 3, data(0), 0);
+    peer.sendFrame().data(true, 2, new Buffer().writeUtf8("robot"), 5);
     peer.play();
 
     RecordingPushObserver observer = new RecordingPushObserver();
@@ -1480,6 +1482,23 @@ private void interruptAfterDelay(final long delayMillis) {
     }.start();
   }
 
+  /**
+   * Returns true when all work currently in progress by the watchdog have completed. This method
+   * creates more work for the watchdog and waits for that work to be executed. When it is, we know
+   * work that preceded this call is complete.
+   */
+  private void awaitWatchdogIdle() throws InterruptedException {
+    final CountDownLatch latch = new CountDownLatch(1);
+    AsyncTimeout watchdogJob = new AsyncTimeout() {
+      @Override protected void timedOut() {
+        latch.countDown();
+      }
+    };
+    watchdogJob.deadlineNanoTime(System.nanoTime()); // Due immediately!
+    watchdogJob.enter();
+    latch.await();
+  }
+
   static int roundUp(int num, int divisor) {
     return (num + divisor - 1) / divisor;
   }
diff --git a/okhttp-urlconnection/build.gradle b/okhttp-urlconnection/build.gradle
index 75cc6c86c0..62f52ec567 100644
--- a/okhttp-urlconnection/build.gradle
+++ b/okhttp-urlconnection/build.gradle
@@ -1,6 +1,18 @@
+apply plugin: 'java'
+apply plugin: 'maven'
+apply plugin: 'maven-publish'
+apply plugin: 'git-repo'
 
 description = 'OkHttp URLConnection'
+
+repositories {
+  maven { url "${System.env.HOME}/.m2/repository" }
+  github("layerhq", "maven-private", "master", "releases")
+  mavenCentral()
+}
+
 dependencies {
+  compile group: 'com.squareup.okio', name: 'okio', version:'1.5.0-LAYER'
   compile project(':okhttp')
     testCompile group: 'junit', name: 'junit', version:'4.11'
 }
diff --git a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
index d09e971058..ecd8cc09f5 100644
--- a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
@@ -359,7 +359,7 @@ private HttpEngine newHttpEngine(String method, Connection connection,
       engineClient = client.clone().setCache(null);
     }
 
-    return new HttpEngine(engineClient, request, bufferRequestBody, true, false, connection, null,
+    return new HttpEngine(engineClient, request, doOutput, bufferRequestBody, true, false, connection, null,
         requestBody, priorResponse);
   }
 
diff --git a/okhttp-ws/build.gradle b/okhttp-ws/build.gradle
new file mode 100644
index 0000000000..de360de039
--- /dev/null
+++ b/okhttp-ws/build.gradle
@@ -0,0 +1,70 @@
+apply plugin: 'java'
+apply plugin: 'maven'
+apply plugin: 'maven-publish'
+apply plugin: 'git-repo'
+
+description = 'OkHttp WS'
+
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
+
+repositories {
+  maven { url "${System.env.HOME}/.m2/repository" }
+  github("layerhq", "maven-private", "master", "releases")
+  mavenCentral()
+}
+
+dependencies {
+  compile project(':okhttp')
+    testCompile group: 'junit', name: 'junit', version:'4.11'
+}
+
+/*************************************************
+ * Uploading
+ * e.g. > gradle clean build publish
+ ************************************************/
+
+task sourceJar(type: Jar) {
+  from sourceSets.main.allJava
+}
+
+task testJar(type: Jar) {
+  from sourceSets.test.output
+  exclude "**/*Test*"
+}
+
+task testSourceJar(type: Jar) {
+  from sourceSets.test.allJava
+}
+
+public String getLocalGit() {
+  return "$rootProject.ext.gitRepoHome/$rootProject.ext.org/$rootProject.ext.repo"
+}
+
+publishing {
+  publications {
+    mavenJava(MavenPublication) {
+      groupId = group
+      artifactId = 'okhttp-ws'
+      version = rootProject.version
+      from components.java
+
+      artifact sourceJar {
+        classifier "sources"
+      }
+
+      artifact testJar {
+        classifier "test"
+      }
+
+      artifact testSourceJar {
+        classifier "testsources"
+      }
+    }
+  }
+  repositories {
+    maven {
+      url "file://${getLocalGit()}/releases"
+    }
+  }
+}
diff --git a/okhttp/build.gradle b/okhttp/build.gradle
index 972a58259f..43e3894674 100644
--- a/okhttp/build.gradle
+++ b/okhttp/build.gradle
@@ -5,8 +5,8 @@ apply plugin: 'git-repo'
 
 description = 'OkHttp'
 
-sourceCompatibility = 1.6
-targetCompatibility = 1.6
+sourceCompatibility = 1.7
+targetCompatibility = 1.7
 
 repositories {
     maven { url "${System.env.HOME}/.m2/repository" }
@@ -15,7 +15,16 @@ repositories {
 }
 
 dependencies {
-    compile group: 'com.squareup.okio', name: 'okio', version:'0.9.0.a71ef0da.LAYER'
+    compile group: 'com.squareup.okio', name: 'okio', version:'1.5.0-9-4bec677e-layer'
+}
+
+//add java-templates directory to source path
+sourceSets {
+    main {
+        java {
+            srcDir 'src/main/java-templates'
+        }
+    }
 }
 
 
diff --git a/okhttp/pom.xml b/okhttp/pom.xml
index 86d3c886ea..436b85a59a 100644
--- a/okhttp/pom.xml
+++ b/okhttp/pom.xml
@@ -16,7 +16,6 @@
     <dependency>
       <groupId>com.squareup.okio</groupId>
       <artifactId>okio</artifactId>
-      <version>0.9.0-LAYER</version>
     </dependency>
   </dependencies>
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Connection.java b/okhttp/src/main/java/com/squareup/okhttp/Connection.java
index 5ec7a91882..7d7aa1cd46 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Connection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Connection.java
@@ -157,7 +157,7 @@ void connect(int connectTimeout, int readTimeout, int writeTimeout, Request requ
     socket = connectedSocket.socket;
     handshake = connectedSocket.handshake;
     protocol = connectedSocket.alpnProtocol == null
-        ? Protocol.HTTP_1_1 : connectedSocket.alpnProtocol;
+        ? protocol = route.address.protocols.get(0) : connectedSocket.alpnProtocol;
 
     try {
       if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
index 52e410f8d3..b07c9bb160 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
@@ -75,6 +75,7 @@
   private final int maxIdleConnections;
   private final long keepAliveDurationNs;
 
+  private final ConnectionObserver connectionObserver;
   private final LinkedList<Connection> connections = new LinkedList<>();
 
   /**
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Request.java b/okhttp/src/main/java/com/squareup/okhttp/Request.java
index 462cead6d9..07658ec60d 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Request.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java
@@ -15,7 +15,7 @@
  */
 package com.squareup.okhttp;
 
-import com.squareup.okhttp.internal.Platform;
+import com.squareup.okhttp.internal.http.HttpMethod;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URL;
@@ -248,9 +248,6 @@ public Builder method(String method, RequestBody body) {
       if (body != null && !HttpMethod.permitsRequestBody(method)) {
         throw new IllegalArgumentException("method " + method + " must not have a request body.");
       }
-      if (body == null && HttpMethod.requiresRequestBody(method)) {
-        throw new IllegalArgumentException("method " + method + " must have a request body.");
-      }
       this.method = method;
       this.body = body;
       return this;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index b2ce89e2f5..bfa53ecc71 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -100,13 +100,18 @@
   public static final int MAX_FOLLOW_UPS = 20;
 
   private static final ResponseBody EMPTY_BODY = new ResponseBody() {
-    @Override public MediaType contentType() {
+    @Override
+    public MediaType contentType() {
       return null;
     }
-    @Override public long contentLength() {
+
+    @Override
+    public long contentLength() {
       return 0;
     }
-    @Override public BufferedSource source() {
+
+    @Override
+    public BufferedSource source() {
       return new Buffer();
     }
   };
@@ -121,7 +126,9 @@
 
   private Transport transport;
 
-  /** The time when the request headers were written, or -1 if they haven't been written yet. */
+  /**
+   * The time when the request headers were written, or -1 if they haven't been written yet.
+   */
   long sentRequestMillis = -1;
 
   /**
@@ -178,22 +185,31 @@
   private final boolean callerWritesRequestBody;
   private final boolean forWebSocket;
 
-  /** The cache request currently being populated from a network response. */
+  /**
+   * The cache request currently being populated from a network response.
+   */
   private CacheRequest storeRequest;
   private CacheStrategy cacheStrategy;
 
   /**
-   * @param request the HTTP request without a body. The body must be written via the engine's
-   *     request body stream.
+   * @param request                 the HTTP request without a body. The body must be written via the engine's
+   *                                request body stream.
    * @param callerWritesRequestBody true for the {@code HttpURLConnection}-style interaction
-   *     model where control flow is returned to the calling application to write the request body
-   *     before the response body is readable.
-   * @param connection the connection used for an intermediate response immediately prior to this
-   *     request/response pair, such as a same-host redirect. This engine assumes ownership of the
-   *     connection and must release it when it is unneeded.
-   * @param routeSelector the route selector used for a failed attempt immediately preceding this
+   *                                model where control flow is returned to the calling application to write the request body
+   *                                before the response body is readable.
+   * @param connection              the connection used for an intermediate response immediately prior to this
+   *                                request/response pair, such as a same-host redirect. This engine assumes ownership of the
+   *                                connection and must release it when it is unneeded.
+   * @param routeSelector           the route selector used for a failed attempt immediately preceding this
    */
   public HttpEngine(OkHttpClient client, Request request, boolean bufferRequestBody,
+                    boolean callerWritesRequestBody, boolean forWebSocket, Connection connection,
+                    RouteSelector routeSelector, RetryableSink requestBodyOut, Response priorResponse) {
+    this(client, request, request.body() != null, bufferRequestBody, callerWritesRequestBody, forWebSocket, connection, routeSelector,
+      requestBodyOut, priorResponse);
+  }
+
+  public HttpEngine(OkHttpClient client, Request request, boolean willHaveRequestBody, boolean bufferRequestBody,
       boolean callerWritesRequestBody, boolean forWebSocket, Connection connection,
       RouteSelector routeSelector, RetryableSink requestBodyOut, Response priorResponse) {
     this.client = client;
@@ -381,7 +397,7 @@ public void writingRequestHeaders() {
   }
 
   boolean permitsRequestBody() {
-    return HttpMethod.permitsRequestBody(userRequest.method());
+    return HttpMethod.permitsRequestBody(userRequest.method()) && willHaveRequestBody;
   }
 
   /** Returns the request body or null if this request doesn't have a body. */
@@ -437,7 +453,7 @@ public HttpEngine recover(RouteException e) {
     Connection connection = close();
 
     // For failure recovery, use the same route selector with a new connection.
-    return new HttpEngine(client, userRequest, bufferRequestBody, callerWritesRequestBody,
+    return new HttpEngine(client, userRequest, willHaveRequestBody, bufferRequestBody, callerWritesRequestBody,
         forWebSocket, connection, routeSelector, (RetryableSink) requestBodyOut, priorResponse);
   }
 
@@ -736,9 +752,11 @@ private Request networkRequest(Request request) throws IOException {
       result.header("User-Agent", Version.userAgent());
     }
 
-  public static String getDefaultUserAgent() {
-    String agent = System.getProperty("http.agent");
-    return agent != null ? agent : ("Java" + System.getProperty("java.version"));
+    return result.build();
+  }
+
+  public boolean isTransparentGzip() {
+    return transparentGzip;
   }
 
   public static String hostHeader(URL url) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
index d67e662442..eb6cca01fc 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/SpdyTransport.java
@@ -16,18 +16,19 @@
 
 package com.squareup.okhttp.internal.http;
 
+import com.squareup.okhttp.Headers;
 import com.squareup.okhttp.Protocol;
 import com.squareup.okhttp.PushObserver;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.Response;
-import com.squareup.okhttp.Headers;
 import com.squareup.okhttp.ResponseBody;
 import com.squareup.okhttp.internal.Util;
 import com.squareup.okhttp.internal.spdy.ErrorCode;
 import com.squareup.okhttp.internal.spdy.Header;
 import com.squareup.okhttp.internal.spdy.SpdyConnection;
-import com.squareup.okhttp.internal.spdy.SpdyStream;
 import com.squareup.okhttp.internal.spdy.SpdyPushObserver;
+import com.squareup.okhttp.internal.spdy.SpdyStream;
+
 import java.io.IOException;
 import java.net.ProtocolException;
 import java.util.ArrayList;
@@ -36,12 +37,13 @@
 import java.util.Locale;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
-import okio.Buffer;
+
 import okio.BufferedSource;
-import okio.GzipSource;
 import okio.ByteString;
+import okio.GzipSource;
 import okio.Okio;
 import okio.Sink;
+import okio.Source;
 
 import static com.squareup.okhttp.internal.spdy.Header.RESPONSE_STATUS;
 import static com.squareup.okhttp.internal.spdy.Header.TARGET_AUTHORITY;
@@ -110,7 +112,7 @@ public SpdyTransport(HttpEngine httpEngine, SpdyConnection spdyConnection) {
             Response partialResponse = parsePushResponse(request, push.getRequestHeaders(),
                     spdyConnection.getProtocol()).build();
 
-            SpdySource source = new SpdySource(push, null);
+            Source source = push.getSource();
             BufferedSource buffer;
             if (httpEngine.isTransparentGzip()
                     && "gzip".equalsIgnoreCase(partialResponse.headers().get("Content-Encoding"))) {
@@ -280,13 +282,6 @@ private static String joinOnNull(String first, String second) {
   }
 
 
-  @Override public void emptyTransferStream() {
-    // Do nothing.
-  }
-
-  @Override public Source getTransferStream(CacheRequest cacheRequest) throws IOException {
-    return new SpdySource(stream, cacheRequest);
-  }
   @Override public ResponseBody openResponseBody(Response response) throws IOException {
     return new RealResponseBody(response.headers(), Okio.buffer(stream.getSource()));
   }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
index 15f9b5882f..3ec399c346 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
@@ -162,7 +162,7 @@ private SpdyConnection(Builder builder) throws IOException {
     hostName = builder.hostName;
 
     if (protocol == Protocol.HTTP_2) {
-      variant = new Http20Draft12();
+      variant = new Http2();
     } else if (protocol == Protocol.SPDY_3) {
       variant = new Spdy3();
     } else {
@@ -183,7 +183,6 @@ public void onIOException(IOException e) {
         }
       }
     })), client);
-    maxFrameSize = variant.maxFrameSize();
     pushObserver = builder.pushObserver;
 
     readerRunnable = new Reader();
diff --git a/pom.xml b/pom.xml
index 2dca56b647..0564eeaf38 100644
--- a/pom.xml
+++ b/pom.xml
@@ -42,7 +42,7 @@
 
     <!-- Compilation -->
     <java.version>1.7</java.version>
-    <okio.version>1.4.0</okio.version>
+    <okio.version>1.5.0-LAYER</okio.version>
     <!-- ALPN library targeted to Java 7 -->
     <alpn.jdk7.version>7.1.2.v20141202</alpn.jdk7.version>
     <!-- ALPN library targeted to Java 8 update 25. -->
diff --git a/settings.gradle b/settings.gradle
index 3e0d2a0ee7..cdc283ae5d 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,9 +1,11 @@
 rootProject.name = 'parent'
 include ':okhttp'
 //include ':okhttp-apache'
+//include ':okhttp-testing-support'
 //include ':okhttp-tests'
 //include ':okhttp-urlconnection'
 //include ':okcurl'
+include ':okhttp-ws'
 include ':mockwebserver'
 //include ':sample-parent:guide'
 //include ':sample-parent:crawler'
@@ -14,9 +16,11 @@ include ':mockwebserver'
 
 project(':okhttp').projectDir = "$rootDir/okhttp" as File
 //project(':okhttp-apache').projectDir = "$rootDir/okhttp-apache" as File
+//project(':okhttp-testing-support').projectDir = "$rootDir/okhttp-testing-support" as File
 //project(':okhttp-tests').projectDir = "$rootDir/okhttp-tests" as File
 //project(':okhttp-urlconnection').projectDir = "$rootDir/okhttp-urlconnection" as File
 //project(':okcurl').projectDir = "$rootDir/okcurl" as File
+project(':okhttp-ws').projectDir = "$rootDir/okhttp-ws" as File
 project(':mockwebserver').projectDir = "$rootDir/mockwebserver" as File
 //project(':sample-parent:guide').projectDir = "$rootDir/samples/guide" as File
 //project(':sample-parent:crawler').projectDir = "$rootDir/samples/crawler" as File
diff --git a/version.gradle b/version.gradle
index 184c67d1d3..5891d63c9b 100644
--- a/version.gradle
+++ b/version.gradle
@@ -1 +1 @@
-version = '2.0.0-LAYER'
+version = '2.4.0-LAYER'
