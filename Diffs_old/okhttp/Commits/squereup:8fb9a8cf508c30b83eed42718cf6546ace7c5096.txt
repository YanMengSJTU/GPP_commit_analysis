diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.kt b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.kt
index 83c0ee53c2..e898dffd33 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.kt
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.kt
@@ -46,7 +46,7 @@ import okhttp3.internal.http2.StreamResetException
 import okhttp3.internal.platform.Platform
 import okhttp3.internal.tls.OkHostnameVerifier
 import okhttp3.internal.toHostHeader
-import okhttp3.internal.userAgent
+//import okhttp3.internal.userAgent
 import okhttp3.internal.ws.RealWebSocket
 import okio.BufferedSink
 import okio.BufferedSource
@@ -476,7 +476,7 @@ class RealConnection(
             .method("CONNECT", null)
             .header("Host", route.address.url.toHostHeader(includeDefaultPort = true))
             .header("Proxy-Connection", "Keep-Alive") // For HTTP/1.0 proxies like Squid.
-            .header("User-Agent", userAgent)
+//            .header("User-Agent", userAgent)
             .build()
 
         val fakeAuthChallengeResponse = Response.Builder()
diff --git a/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.kt b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.kt
index caf6957ab8..cf9ae9f94b 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http/BridgeInterceptor.kt
@@ -21,7 +21,7 @@ import okhttp3.Cookie
 import okhttp3.CookieJar
 import okhttp3.Interceptor
 import okhttp3.Response
-import okhttp3.internal.userAgent
+//import okhttp3.internal.userAgent
 import okio.GzipSource
 
 import okhttp3.internal.toHostHeader
@@ -77,9 +77,9 @@ class BridgeInterceptor(private val cookieJar: CookieJar) : Interceptor {
       requestBuilder.header("Cookie", cookieHeader(cookies))
     }
 
-    if (userRequest.header("User-Agent") == null) {
-      requestBuilder.header("User-Agent", userAgent)
-    }
+//    if (userRequest.header("User-Agent") == null) {
+//      requestBuilder.header("User-Agent", userAgent)
+//    }
 
     val networkResponse = chain.proceed(requestBuilder.build())
 
