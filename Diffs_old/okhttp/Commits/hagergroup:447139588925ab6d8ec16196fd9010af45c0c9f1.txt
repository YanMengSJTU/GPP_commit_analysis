diff --git a/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
index 92b5809594..28d048a5ea 100644
--- a/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/InterceptorTest.java
@@ -517,11 +517,12 @@ private void interceptorThrowsRuntimeExceptionSynchronous(boolean network) throw
   }
 
   /**
-   * When an interceptor throws an unexpected exception, asynchronous callers are left hanging. The
+   * When an interceptor throws an unexpected exception, asynchronous calls are canceled. The
    * exception goes to the uncaught exception handler.
    */
   private void interceptorThrowsRuntimeExceptionAsynchronous(boolean network) throws Exception {
-    addInterceptor(network, chain -> { throw new RuntimeException("boom!"); });
+    RuntimeException boom = new RuntimeException("boom!");
+    addInterceptor(network, chain -> { throw boom; });
 
     ExceptionCatchingExecutor executor = new ExceptionCatchingExecutor();
     client = client.newBuilder()
@@ -531,9 +532,15 @@ private void interceptorThrowsRuntimeExceptionAsynchronous(boolean network) thro
     Request request = new Request.Builder()
         .url(server.url("/"))
         .build();
-    client.newCall(request).enqueue(callback);
-
-    assertThat(executor.takeException().getMessage()).isEqualTo("boom!");
+    Call call = client.newCall(request);
+    call.enqueue(callback);
+    RecordedResponse recordedResponse = callback.await(server.url("/"));
+    assertThat(recordedResponse.failure)
+        .hasMessage("canceled due to java.lang.RuntimeException: boom!");
+    assertThat(recordedResponse.failure).hasSuppressedException(boom);
+    assertThat(call.isCanceled()).isTrue();
+
+    assertThat(executor.takeException()).isEqualTo(boom);
   }
 
   @Test public void applicationInterceptorReturnsNull() throws Exception {
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index bb108764da..b0436fa923 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -179,6 +179,14 @@ void executeOn(ExecutorService executorService) {
         } else {
           responseCallback.onFailure(RealCall.this, e);
         }
+      } catch (Throwable t) {
+        cancel();
+        if (!signalledCallback) {
+          IOException canceledException = new IOException("canceled due to " + t);
+          canceledException.addSuppressed(t);
+          responseCallback.onFailure(RealCall.this, canceledException);
+        }
+        throw t;
       } finally {
         client.dispatcher().finished(this);
       }
