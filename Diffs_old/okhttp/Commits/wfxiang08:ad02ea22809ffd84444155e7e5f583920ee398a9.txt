diff --git a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
index 14ca0e02aa..4a1af424ce 100644
--- a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
@@ -124,8 +124,9 @@ public HttpLoggingInterceptor(Logger logger) {
   private volatile Level level = Level.NONE;
 
   /** Change the level at which this interceptor logs. */
-  public void setLevel(Level level) {
+  public HttpLoggingInterceptor setLevel(Level level) {
     this.level = level;
+    return this;
   }
 
   @Override public Response intercept(Chain chain) throws IOException {
diff --git a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
index aa3aa1e090..a424ee61e3 100644
--- a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
@@ -31,6 +31,7 @@
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
 public final class HttpLoggingInterceptorTest {
@@ -53,6 +54,12 @@
     client.setConnectionPool(null);
   }
 
+  @Test public void setLevelShouldReturnSameInstanceOfInterceptor() {
+    for (Level level : Level.values()) {
+      assertSame(interceptor, interceptor.setLevel(level));
+    }
+  }
+
   @Test public void none() throws IOException {
     server.enqueue(new MockResponse());
     client.newCall(request().build()).execute();
