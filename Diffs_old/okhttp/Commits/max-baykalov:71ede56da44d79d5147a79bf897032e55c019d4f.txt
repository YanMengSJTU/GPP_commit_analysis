diff --git a/okhttp/src/main/java/okhttp3/Request.java b/okhttp/src/main/java/okhttp3/Request.java
index 6687dd3f9a..d02389cefb 100644
--- a/okhttp/src/main/java/okhttp3/Request.java
+++ b/okhttp/src/main/java/okhttp3/Request.java
@@ -31,6 +31,7 @@
   final Headers headers;
   final @Nullable RequestBody body;
   final Object tag;
+  final String sni;
 
   private volatile CacheControl cacheControl; // Lazily initialized.
 
@@ -39,6 +40,7 @@
     this.method = builder.method;
     this.headers = builder.headers.build();
     this.body = builder.body;
+    this.sni = builder.sni;
     this.tag = builder.tag != null ? builder.tag : this;
   }
 
@@ -96,9 +98,14 @@ public boolean isHttps() {
         + (tag != this ? tag : null)
         + '}';
   }
+  
+  public String sni() {
+    return sni;
+  }
 
   public static class Builder {
-    HttpUrl url;
+    String sni;
+	HttpUrl url;
     String method;
     Headers.Builder headers;
     RequestBody body;
@@ -255,5 +262,10 @@ public Request build() {
       if (url == null) throw new IllegalStateException("url == null");
       return new Request(this);
     }
+      
+    public Builder sni(String sni) {
+      this.sni = sni;
+      return this;
+    }
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
index 6afb0fd017..f1d0738598 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
@@ -265,7 +265,7 @@ private void establishProtocol(ConnectionSpecSelector connectionSpecSelector, Ca
     }
 
     eventListener.secureConnectStart(call);
-    connectTls(connectionSpecSelector);
+    connectTls(connectionSpecSelector, call);
     eventListener.secureConnectEnd(call, handshake);
 
     if (protocol == Protocol.HTTP_2) {
@@ -278,7 +278,7 @@ private void establishProtocol(ConnectionSpecSelector connectionSpecSelector, Ca
     }
   }
 
-  private void connectTls(ConnectionSpecSelector connectionSpecSelector) throws IOException {
+  private void connectTls(ConnectionSpecSelector connectionSpecSelector, Call call) throws IOException {
     Address address = route.address();
     SSLSocketFactory sslSocketFactory = address.sslSocketFactory();
     boolean success = false;
@@ -291,8 +291,14 @@ private void connectTls(ConnectionSpecSelector connectionSpecSelector) throws IO
       // Configure the socket's ciphers, TLS versions, and extensions.
       ConnectionSpec connectionSpec = connectionSpecSelector.configureSecureSocket(sslSocket);
       if (connectionSpec.supportsTlsExtensions()) {
+        String proxyHost = address.url().host();
+        
+        if (null != call.request().sni() && !call.request().sni().isEmpty()) {
+        	proxyHost = call.request().sni();
+        }
+
         Platform.get().configureTlsExtensions(
-            sslSocket, address.url().host(), address.protocols());
+            sslSocket, proxyHost, address.protocols());
       }
 
       // Force handshake. This can throw!
