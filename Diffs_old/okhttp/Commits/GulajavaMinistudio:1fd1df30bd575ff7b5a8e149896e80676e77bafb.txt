diff --git a/build.gradle b/build.gradle
index 82d2087687..a75e12ec0e 100644
--- a/build.gradle
+++ b/build.gradle
@@ -115,6 +115,12 @@ subprojects { project ->
     }
   }
 
+  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
+    kotlinOptions {
+      jvmTarget = "1.8"
+    }
+  }
+
   def platform = System.getProperty("okhttp.platform", "jdk8")
 
   test {
@@ -149,10 +155,13 @@ subprojects { project ->
     errorprone 'com.google.errorprone:error_prone_core:2.3.3'
   }
   tasks.withType(JavaCompile).configureEach {
+    sourceCompatibility = JavaVersion.VERSION_1_8
+    targetCompatibility = JavaVersion.VERSION_1_8
+
     options.errorprone {
       check("MissingFail", CheckSeverity.ERROR)
       check("MissingOverride", CheckSeverity.ERROR)
-      enabled = JavaVersion.current() < JavaVersion.VERSION_11
+      enabled = JavaVersion.current() < JavaVersion.VERSION_12
     }
   }
 
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java
index f3fabec885..160159d98e 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java
+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/internal/http2/Http2Server.java
@@ -76,10 +76,14 @@ private void run() throws Exception {
         connection.start();
       } catch (IOException e) {
         logger.log(Level.INFO, "Http2Server connection failure: " + e);
-        closeQuietly(socket);
+        if (socket != null) {
+          closeQuietly(socket);
+        }
       } catch (Exception e) {
         logger.log(Level.WARNING, "Http2Server unexpected failure", e);
-        closeQuietly(socket);
+        if (socket != null) {
+          closeQuietly(socket);
+        }
       }
     }
   }
diff --git a/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt
index 90e067b8a8..d94f9f5c17 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt
+++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt
@@ -44,9 +44,11 @@ class OkHttpClientTestRule : TestRule {
   }
 
   fun ensureAllConnectionsReleased() {
-    val connectionPool = prototype!!.connectionPool
-    connectionPool.evictAll()
-    assertThat(connectionPool.idleConnectionCount()).isEqualTo(0)
+    prototype?.let {
+      val connectionPool = it.connectionPool
+      connectionPool.evictAll()
+      assertThat(connectionPool.connectionCount()).isEqualTo(0)
+    }
   }
 
   override fun apply(base: Statement, description: Description): Statement {
@@ -68,12 +70,25 @@ class OkHttpClientTestRule : TestRule {
       }
 
       private fun releaseClient() {
-        prototypes.push(prototype)
-        prototype = null
+        prototype?.let {
+          prototypes.push(it)
+          prototype = null
+        }
       }
     }
   }
 
+  /**
+   * Called if a test is known to be leaky.
+   */
+  fun abandonClient() {
+    prototype?.let {
+      prototype = null
+      it.dispatcher.executorService.shutdownNow()
+      it.connectionPool.evictAll()
+    }
+  }
+
   companion object {
     /**
      * Quick and dirty pool of OkHttpClient instances. Each has its own independent dispatcher and
diff --git a/okhttp-tls/src/test/java/okhttp3/tls/HandshakeCertificatesTest.java b/okhttp-tls/src/test/java/okhttp3/tls/HandshakeCertificatesTest.java
index 81b5db61da..96b876cb94 100644
--- a/okhttp-tls/src/test/java/okhttp3/tls/HandshakeCertificatesTest.java
+++ b/okhttp-tls/src/test/java/okhttp3/tls/HandshakeCertificatesTest.java
@@ -164,8 +164,12 @@ private InetSocketAddress startTlsServer() throws IOException {
         sslSocket.startHandshake();
         return Handshake.get(sslSocket.getSession());
       } finally {
-        closeQuietly(rawSocket);
-        closeQuietly(sslSocket);
+        if (rawSocket != null) {
+          closeQuietly(rawSocket);
+        }
+        if (sslSocket != null) {
+          closeQuietly(sslSocket);
+        }
       }
     });
   }
@@ -183,7 +187,9 @@ private InetSocketAddress startTlsServer() throws IOException {
         return Handshake.get(sslSocket.getSession());
       } finally {
         closeQuietly(rawSocket);
-        closeQuietly(sslSocket);
+        if (sslSocket != null) {
+          closeQuietly(sslSocket);
+        }
       }
     });
   }
diff --git a/okhttp/src/main/java/okhttp3/Cookie.kt b/okhttp/src/main/java/okhttp3/Cookie.kt
index 6d86410cf6..69b8ce0b96 100644
--- a/okhttp/src/main/java/okhttp3/Cookie.kt
+++ b/okhttp/src/main/java/okhttp3/Cookie.kt
@@ -24,6 +24,7 @@ import okhttp3.internal.indexOfControlOrNonAscii
 import okhttp3.internal.publicsuffix.PublicSuffixDatabase
 import okhttp3.internal.toCanonicalHost
 import okhttp3.internal.trimSubstring
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
 import java.util.Calendar
 import java.util.Collections
 import java.util.Date
@@ -124,6 +125,7 @@ class Cookie private constructor(
         other.hostOnly == hostOnly
   }
 
+  @IgnoreJRERequirement // As of AGP 3.4.1, D8 desugars API 24 hashCode methods.
   override fun hashCode(): Int {
     var result = 17
     result = 31 * result + name.hashCode()
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.kt b/okhttp/src/main/java/okhttp3/internal/Util.kt
index 8ae9bc23ae..bd37b1e633 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.kt
+++ b/okhttp/src/main/java/okhttp3/internal/Util.kt
@@ -474,7 +474,7 @@ fun <K, V> Map<K, V>.toImmutableMap(): Map<K, V> {
   }
 }
 
-/** Closes this, ignoring any checked exceptions. Does nothing if this is null. */
+/** Closes this, ignoring any checked exceptions. */
 fun Closeable.closeQuietly() {
   try {
     close()
@@ -484,7 +484,7 @@ fun Closeable.closeQuietly() {
   }
 }
 
-/** Closes this, ignoring any checked exceptions. Does nothing if this is null. */
+/** Closes this, ignoring any checked exceptions. */
 fun Socket.closeQuietly() {
   try {
     close()
@@ -496,7 +496,7 @@ fun Socket.closeQuietly() {
   }
 }
 
-/** Closes this, ignoring any checked exceptions. Does nothing if this is null. */
+/** Closes this, ignoring any checked exceptions.  */
 fun ServerSocket.closeQuietly() {
   try {
     close()
diff --git a/okhttp/src/test/java/okhttp3/ConscryptTest.kt b/okhttp/src/test/java/okhttp3/ConscryptTest.kt
index 8c7a45e8c3..b140f0fec1 100644
--- a/okhttp/src/test/java/okhttp3/ConscryptTest.kt
+++ b/okhttp/src/test/java/okhttp3/ConscryptTest.kt
@@ -19,7 +19,6 @@ import okhttp3.internal.platform.ConscryptPlatform
 import okhttp3.internal.platform.Platform
 import org.assertj.core.api.Assertions.assertThat
 import org.conscrypt.Conscrypt
-import org.junit.After
 import org.junit.Assert.assertFalse
 import org.junit.Assert.assertTrue
 import org.junit.Assume
@@ -35,17 +34,17 @@ class ConscryptTest {
   @Rule public val platform = PlatformRule.conscrypt()
 
   @JvmField @Rule val clientTestRule = OkHttpClientTestRule()
+
   private lateinit var client: OkHttpClient
 
-  @Before
-  fun setUp() {
+  @Before fun setUp() {
+    platform.assumeConscrypt()
     client = clientTestRule.newClient()
-    assertThat(Conscrypt.isConscrypt(Platform.get().platformTrustManager())).isTrue()
   }
 
-  @After
-  fun tearDown() {
-    clientTestRule.ensureAllConnectionsReleased()
+  @Test
+  fun testTrustManager() {
+    assertThat(Conscrypt.isConscrypt(Platform.get().platformTrustManager())).isTrue()
   }
 
   private fun assumeNetwork() {
@@ -62,10 +61,10 @@ class ConscryptTest {
 
     val request = Request.Builder().url("https://mozilla.org/robots.txt").build()
 
-    val response = client.newCall(request).execute()
-
-    assertThat(response.protocol).isEqualTo(Protocol.HTTP_2)
-    assertThat(response.handshake!!.tlsVersion).isEqualTo(TlsVersion.TLS_1_3)
+    client.newCall(request).execute().use {
+      assertThat(it.protocol).isEqualTo(Protocol.HTTP_2)
+      assertThat(it.handshake!!.tlsVersion).isEqualTo(TlsVersion.TLS_1_3)
+    }
   }
 
   @Test
@@ -74,12 +73,12 @@ class ConscryptTest {
 
     val request = Request.Builder().url("https://google.com/robots.txt").build()
 
-    val response = client.newCall(request).execute()
-
-    assertThat(response.protocol).isEqualTo(Protocol.HTTP_2)
-    if (response.handshake!!.tlsVersion != TlsVersion.TLS_1_3) {
-      System.err.println("Flaky TLSv1.3 with google")
-//    assertThat(response.handshake()!!.tlsVersion).isEqualTo(TlsVersion.TLS_1_3)
+    client.newCall(request).execute().use {
+      assertThat(it.protocol).isEqualTo(Protocol.HTTP_2)
+      if (it.handshake!!.tlsVersion != TlsVersion.TLS_1_3) {
+        System.err.println("Flaky TLSv1.3 with google")
+//    assertThat(it.handshake()!!.tlsVersion).isEqualTo(TlsVersion.TLS_1_3)
+      }
     }
   }
 
diff --git a/okhttp/src/test/java/okhttp3/internal/http2/MockHttp2Peer.java b/okhttp/src/test/java/okhttp3/internal/http2/MockHttp2Peer.java
index ec26954acb..a773bf1948 100644
--- a/okhttp/src/test/java/okhttp3/internal/http2/MockHttp2Peer.java
+++ b/okhttp/src/test/java/okhttp3/internal/http2/MockHttp2Peer.java
@@ -183,8 +183,12 @@ public Socket openSocket() throws IOException {
 
   @Override public synchronized void close() throws IOException {
     executor.shutdown();
-    closeQuietly(socket);
-    closeQuietly(serverSocket);
+    if (socket != null) {
+      closeQuietly(socket);
+    }
+    if (serverSocket != null) {
+      closeQuietly(serverSocket);
+    }
   }
 
   @Override public String toString() {
diff --git a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
index ad966506bd..4806f923db 100644
--- a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
@@ -84,6 +84,7 @@
     clientListener.assertExhausted();
 
     // TODO: assert all connections are released once leaks are fixed
+    clientTestRule.abandonClient();
   }
 
   @Test public void textMessage() {
