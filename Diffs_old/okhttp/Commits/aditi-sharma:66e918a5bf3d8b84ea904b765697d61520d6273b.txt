diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
index 51bf46cc88..bacc61a554 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
@@ -16,51 +16,7 @@
 
 package okhttp3.internal.huc;
 
-import java.io.BufferedReader;
-import java.io.ByteArrayInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.net.CacheRequest;
-import java.net.CacheResponse;
-import java.net.CookieManager;
-import java.net.HttpCookie;
-import java.net.HttpURLConnection;
-import java.net.ProtocolException;
-import java.net.ResponseCache;
-import java.net.SecureCacheResponse;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.net.URLConnection;
-import java.nio.charset.StandardCharsets;
-import java.security.Principal;
-import java.security.cert.Certificate;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.TimeZone;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicReference;
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.HttpsURLConnection;
-import okhttp3.AbstractResponseCache;
-import okhttp3.AndroidInternal;
-import okhttp3.AndroidShimResponseCache;
-import okhttp3.Headers;
-import okhttp3.OkHttpClient;
-import okhttp3.OkUrlFactory;
-import okhttp3.RecordingHostnameVerifier;
+import okhttp3.*;
 import okhttp3.internal.Internal;
 import okhttp3.internal.cache.InternalCache;
 import okhttp3.internal.tls.SslClient;
@@ -78,12 +34,22 @@
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import java.io.*;
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.security.Principal;
+import java.security.cert.Certificate;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
+
+import static org.junit.Assert.*;
 import static org.junit.Assume.assumeFalse;
 
 /**
@@ -1998,11 +1964,12 @@ private InsecureResponseCache(ResponseCache delegate) {
     connection1.setSSLSocketFactory(sslClient.socketFactory);
     connection1.setHostnameVerifier(hostnameVerifier);
     assertEquals("ABC", readAscii(connection1));
-
     // Not cached!
     HttpsURLConnection connection2 = (HttpsURLConnection) openConnection(server.url("/").url());
     connection2.setSSLSocketFactory(sslClient.socketFactory);
     connection2.setHostnameVerifier(hostnameVerifier);
+      assertEquals(connection1.getHostnameVerifier(), connection2.getHostnameVerifier());
+      assertEquals(connection1.getSSLSocketFactory(),connection2.getSSLSocketFactory());
     assertEquals("DEF", readAscii(connection2));
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
index c32b080c89..d5d2a52e78 100644
--- a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
@@ -152,12 +152,24 @@
     assertEquals("value2", connection.getRequestProperty("A"));
   }
 
+  @Test public void getConnectionFields() throws Exception {
+    connection = urlFactory.open(server.url("/").url());
+    connection.setIfModifiedSince(10);
+    connection.setAllowUserInteraction(true);
+    connection.setConnectTimeout(100);
+    connection.setDoInput(false);
+    connection.setDoOutput(true);
+    connection.setDefaultUseCaches(true);
+    connection.setUseCaches(false);
+    //connection.getHeaderField(2);
+  }
+
   @Test public void responseHeaders() throws IOException, InterruptedException {
     server.enqueue(new MockResponse().setStatus("HTTP/1.0 200 Fantastic")
-        .addHeader("A: c")
-        .addHeader("B: d")
-        .addHeader("A: e")
-        .setChunkedBody("ABCDE\nFGHIJ\nKLMNO\nPQR", 8));
+            .addHeader("A: c")
+            .addHeader("B: d")
+            .addHeader("A: e")
+            .setChunkedBody("ABCDE\nFGHIJ\nKLMNO\nPQR", 8));
 
     connection = urlFactory.open(server.url("/").url());
     assertEquals(200, connection.getResponseCode());
@@ -418,6 +430,7 @@ private void testServerClosesOutput(SocketPolicy socketPolicy) throws Exception
     }
     // sequence number 0 means the HTTP socket connection was not reused
     assertEquals(0, requestAfter.getSequenceNumber());
+    assertEquals(100,connection1.getReadTimeout());
   }
 
   enum WriteKind {BYTE_BY_BYTE, SMALL_BUFFERS, LARGE_BUFFERS}
@@ -555,7 +568,7 @@ private void doUpload(TransferKind uploadKind, WriteKind writeKind) throws Excep
 
   private void connectViaHttpsReusingConnections(boolean rebuildClient) throws Exception {
     server.useHttps(sslClient.socketFactory, false);
-    server.enqueue(new MockResponse().setBody("this response comes via HTTPS"));
+    server.enqueue(new MockResponse().setBody("this response comes via HTTPS").addHeader("Content-type","plain/html"));
     server.enqueue(new MockResponse().setBody("another response via HTTPS"));
 
     // The pool will only reuse sockets if the SSL socket factories are the same.
@@ -573,7 +586,13 @@ private void connectViaHttpsReusingConnections(boolean rebuildClient) throws Exc
         .hostnameVerifier(hostnameVerifier)
         .build());
     connection = urlFactory.open(server.url("/").url());
+    assertEquals(29, connection.getContentLength());
+    assertNull(connection.getContentEncoding());
+    assertFalse(connection.getAllowUserInteraction());
+    assertEquals("plain/html", connection.getContentType());
+    assertNull(connection.getErrorStream());
     assertContent("this response comes via HTTPS", connection);
+    assertTrue(connection.toString().contains("https://localhost"));
 
     if (rebuildClient) {
       urlFactory.setClient(new OkHttpClient.Builder()
@@ -587,7 +606,7 @@ private void connectViaHttpsReusingConnections(boolean rebuildClient) throws Exc
 
     connection = urlFactory.open(server.url("/").url());
     assertContent("another response via HTTPS", connection);
-
+    assertEquals("OK", connection.getResponseMessage().toString());
     assertEquals(0, server.takeRequest().getSequenceNumber());
     assertEquals(1, server.takeRequest().getSequenceNumber());
   }
@@ -880,7 +899,8 @@ private void testConnectViaDirectProxyToHttps(ProxyConfig proxyConfig) throws Ex
         .hostnameVerifier(new RecordingHostnameVerifier())
         .build());
     connection = proxyConfig.connect(server, urlFactory, url);
-
+    assertFalse(connection.usingProxy());
+    assertTrue(connection.getPermission().getName().contains("localhost"));
     assertContent("this response comes via HTTPS", connection);
 
     RecordedRequest request = server.takeRequest();
@@ -2256,6 +2276,7 @@ private void testRedirect(boolean temporary, String method) throws Exception {
 
     if (method.equals("GET")) {
       assertEquals("Page 2", response);
+      assertFalse(connection.getDoOutput());
     } else if (method.equals("HEAD")) {
       assertEquals("", response);
     } else {
@@ -2336,9 +2357,10 @@ private void testRedirect(boolean temporary, String method) throws Exception {
     enqueueClientRequestTimeoutResponses();
 
     HttpURLConnection connection = urlFactory.open(server.url("/").url());
-
+    connection.setConnectTimeout(100000);
     assertEquals(200, connection.getResponseCode());
     assertEquals("Body", readAscii(connection.getInputStream(), Integer.MAX_VALUE));
+    assertEquals(100000,connection.getConnectTimeout());
   }
 
   private void enqueueClientRequestTimeoutResponses() {
@@ -2672,6 +2694,8 @@ private void testFlushAfterStreamTransmitted(TransferKind transferKind) throws I
     assertEquals("A", readAscii(in, Integer.MAX_VALUE));
   }
 
+
+
   @Test public void getContentOfType() throws Exception {
     server.enqueue(new MockResponse().addHeader("Content-Type: text/plain").setBody("A"));
     connection = urlFactory.open(server.url("/").url());
@@ -3066,7 +3090,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     assertEquals(Arrays.asList(new Challenge("Basic", "protected area")), response.challenges());
   }
 
-  //@Test
+  @Test
   public void customBasicMultipleRealmsAuthenticator() throws Exception{
     MockResponse pleaseAuthenticate = new MockResponse().setResponseCode(401)
             .addHeader("WWW-Authenticate: Basic realm=\"protected area\" , New Realm=\"test realm\"")
