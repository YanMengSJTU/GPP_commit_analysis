diff --git a/okhttp/pom.xml b/okhttp/pom.xml
index 09015c18e0..3e2f889e70 100644
--- a/okhttp/pom.xml
+++ b/okhttp/pom.xml
@@ -16,6 +16,7 @@
     <dependency>
       <groupId>com.squareup.okio</groupId>
       <artifactId>okio</artifactId>
+      <scope>compile</scope>
     </dependency>
     <dependency>
       <groupId>com.google.android</groupId>
diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
index d43d91d257..b95d8a08da 100644
--- a/okhttp/src/main/java/okhttp3/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -660,7 +660,7 @@ private boolean isHttps() {
 
       try {
         CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
-        List<Certificate> result = new ArrayList<>(length);
+        List<Certificate> result = new ArrayList<Certificate>(length);
         for (int i = 0; i < length; i++) {
           String line = source.readUtf8LineStrict();
           Buffer bytes = new Buffer();
diff --git a/okhttp/src/main/java/okhttp3/CertificatePinner.java b/okhttp/src/main/java/okhttp3/CertificatePinner.java
index 6fab2cf1d1..cf72a3bf4f 100644
--- a/okhttp/src/main/java/okhttp3/CertificatePinner.java
+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java
@@ -218,7 +218,7 @@ public void check(String hostname, Certificate... peerCertificates)
     List<Pin> result = Collections.emptyList();
     for (Pin pin : pins) {
       if (pin.matches(hostname)) {
-        if (result.isEmpty()) result = new ArrayList<>();
+        if (result.isEmpty()) result = new ArrayList<Pin>();
         result.add(pin);
       }
     }
@@ -318,7 +318,7 @@ boolean matches(String hostname) {
 
   /** Builds a configured certificate pinner. */
   public static final class Builder {
-    private final List<Pin> pins = new ArrayList<>();
+    private final List<Pin> pins = new ArrayList<Pin>();
 
     /**
      * Pins certificates for {@code pattern}.
@@ -338,7 +338,7 @@ public Builder add(String pattern, String... pins) {
     }
 
     public CertificatePinner build() {
-      return new CertificatePinner(new LinkedHashSet<>(pins), null);
+      return new CertificatePinner(new LinkedHashSet<Pin>(pins), null);
     }
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/CipherSuite.java b/okhttp/src/main/java/okhttp3/CipherSuite.java
index a71ddc5ed9..cb526fad11 100644
--- a/okhttp/src/main/java/okhttp3/CipherSuite.java
+++ b/okhttp/src/main/java/okhttp3/CipherSuite.java
@@ -58,7 +58,7 @@
    * Holds interned instances. This needs to be above the of() calls below so that it's
    * initialized by the time those parts of {@code <clinit>()} run. Guarded by CipherSuite.class.
    */
-  private static final Map<String, CipherSuite> INSTANCES = new TreeMap<>(ORDER_BY_NAME);
+  private static final Map<String, CipherSuite> INSTANCES = new TreeMap<String, CipherSuite>(ORDER_BY_NAME);
 
   // Last updated 2016-07-03 using cipher suites from Android 24 and Java 9.
 
@@ -405,7 +405,7 @@ public static synchronized CipherSuite forJavaName(String javaName) {
   }
 
   static List<CipherSuite> forJavaNames(String... cipherSuites) {
-    List<CipherSuite> result = new ArrayList<>(cipherSuites.length);
+    List<CipherSuite> result = new ArrayList<CipherSuite>(cipherSuites.length);
     for (String cipherSuite : cipherSuites) {
       result.add(forJavaName(cipherSuite));
     }
diff --git a/okhttp/src/main/java/okhttp3/ConnectionPool.java b/okhttp/src/main/java/okhttp3/ConnectionPool.java
index 605f275661..52fc12493f 100644
--- a/okhttp/src/main/java/okhttp3/ConnectionPool.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java
@@ -73,7 +73,7 @@
     }
   };
 
-  private final Deque<RealConnection> connections = new ArrayDeque<>();
+  private final Deque<RealConnection> connections = new ArrayDeque<RealConnection>();
   final RouteDatabase routeDatabase = new RouteDatabase();
   boolean cleanupRunning;
 
@@ -172,7 +172,7 @@ boolean connectionBecameIdle(RealConnection connection) {
 
   /** Close and remove all idle connections in the pool. */
   public void evictAll() {
-    List<RealConnection> evictedConnections = new ArrayList<>();
+    List<RealConnection> evictedConnections = new ArrayList<RealConnection>();
     synchronized (this) {
       for (Iterator<RealConnection> i = connections.iterator(); i.hasNext(); ) {
         RealConnection connection = i.next();
diff --git a/okhttp/src/main/java/okhttp3/Cookie.java b/okhttp/src/main/java/okhttp3/Cookie.java
index fbfa99c26d..1e36f7228d 100644
--- a/okhttp/src/main/java/okhttp3/Cookie.java
+++ b/okhttp/src/main/java/okhttp3/Cookie.java
@@ -444,7 +444,7 @@ private static String parseDomain(String s) {
     for (int i = 0, size = cookieStrings.size(); i < size; i++) {
       Cookie cookie = Cookie.parse(url, cookieStrings.get(i));
       if (cookie == null) continue;
-      if (cookies == null) cookies = new ArrayList<>();
+      if (cookies == null) cookies = new ArrayList<Cookie>();
       cookies.add(cookie);
     }
 
diff --git a/okhttp/src/main/java/okhttp3/Dispatcher.java b/okhttp/src/main/java/okhttp3/Dispatcher.java
index 43f5aa48e7..673708fb86 100644
--- a/okhttp/src/main/java/okhttp3/Dispatcher.java
+++ b/okhttp/src/main/java/okhttp3/Dispatcher.java
@@ -45,13 +45,13 @@
   private @Nullable ExecutorService executorService;
 
   /** Ready async calls in the order they'll be run. */
-  private final Deque<AsyncCall> readyAsyncCalls = new ArrayDeque<>();
+  private final Deque<AsyncCall> readyAsyncCalls = new ArrayDeque<AsyncCall>();
 
   /** Running asynchronous calls. Includes canceled calls that haven't finished yet. */
-  private final Deque<AsyncCall> runningAsyncCalls = new ArrayDeque<>();
+  private final Deque<AsyncCall> runningAsyncCalls = new ArrayDeque<AsyncCall>();
 
   /** Running synchronous calls. Includes canceled calls that haven't finished yet. */
-  private final Deque<RealCall> runningSyncCalls = new ArrayDeque<>();
+  private final Deque<RealCall> runningSyncCalls = new ArrayDeque<RealCall>();
 
   public Dispatcher(ExecutorService executorService) {
     this.executorService = executorService;
@@ -209,7 +209,7 @@ void finished(RealCall call) {
 
   /** Returns a snapshot of the calls currently awaiting execution. */
   public synchronized List<Call> queuedCalls() {
-    List<Call> result = new ArrayList<>();
+    List<Call> result = new ArrayList<Call>();
     for (AsyncCall asyncCall : readyAsyncCalls) {
       result.add(asyncCall.get());
     }
@@ -218,7 +218,7 @@ void finished(RealCall call) {
 
   /** Returns a snapshot of the calls currently being executed. */
   public synchronized List<Call> runningCalls() {
-    List<Call> result = new ArrayList<>();
+    List<Call> result = new ArrayList<Call>();
     result.addAll(runningSyncCalls);
     for (AsyncCall asyncCall : runningAsyncCalls) {
       result.add(asyncCall.get());
diff --git a/okhttp/src/main/java/okhttp3/FormBody.java b/okhttp/src/main/java/okhttp3/FormBody.java
index ff9a8c2572..2d76f9714d 100644
--- a/okhttp/src/main/java/okhttp3/FormBody.java
+++ b/okhttp/src/main/java/okhttp3/FormBody.java
@@ -104,8 +104,8 @@ private long writeOrCountBytes(@Nullable BufferedSink sink, boolean countBytes)
   }
 
   public static final class Builder {
-    private final List<String> names = new ArrayList<>();
-    private final List<String> values = new ArrayList<>();
+    private final List<String> names = new ArrayList<String>();
+    private final List<String> values = new ArrayList<String>();
     private final Charset charset;
 
     public Builder() {
diff --git a/okhttp/src/main/java/okhttp3/Headers.java b/okhttp/src/main/java/okhttp3/Headers.java
index d5ef33aa70..9ab73dfd42 100644
--- a/okhttp/src/main/java/okhttp3/Headers.java
+++ b/okhttp/src/main/java/okhttp3/Headers.java
@@ -89,7 +89,7 @@ public String value(int index) {
 
   /** Returns an immutable case-insensitive set of header names. */
   public Set<String> names() {
-    TreeSet<String> result = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
+    TreeSet<String> result = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
     for (int i = 0, size = size(); i < size; i++) {
       result.add(name(i));
     }
@@ -101,7 +101,7 @@ public String value(int index) {
     List<String> result = null;
     for (int i = 0, size = size(); i < size; i++) {
       if (name.equalsIgnoreCase(name(i))) {
-        if (result == null) result = new ArrayList<>(2);
+        if (result == null) result = new ArrayList<String>(2);
         result.add(value(i));
       }
     }
@@ -177,12 +177,12 @@ public Builder newBuilder() {
   }
 
   public Map<String, List<String>> toMultimap() {
-    Map<String, List<String>> result = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+    Map<String, List<String>> result = new TreeMap<String, List<String>>(String.CASE_INSENSITIVE_ORDER);
     for (int i = 0, size = size(); i < size; i++) {
       String name = name(i).toLowerCase(Locale.US);
       List<String> values = result.get(name);
       if (values == null) {
-        values = new ArrayList<>(2);
+        values = new ArrayList<String>(2);
         result.put(name, values);
       }
       values.add(value(i));
@@ -255,7 +255,7 @@ public static Headers of(Map<String, String> headers) {
   }
 
   public static final class Builder {
-    final List<String> namesAndValues = new ArrayList<>(20);
+    final List<String> namesAndValues = new ArrayList<String>(20);
 
     /**
      * Add a header line without any validation. Only appropriate for headers from the remote peer
diff --git a/okhttp/src/main/java/okhttp3/HttpUrl.java b/okhttp/src/main/java/okhttp3/HttpUrl.java
index 24302e4ca0..5e681eec70 100644
--- a/okhttp/src/main/java/okhttp3/HttpUrl.java
+++ b/okhttp/src/main/java/okhttp3/HttpUrl.java
@@ -568,7 +568,7 @@ static void pathSegmentsToString(StringBuilder out, List<String> pathSegments) {
   public List<String> encodedPathSegments() {
     int pathStart = url.indexOf('/', scheme.length() + 3);
     int pathEnd = delimiterOffset(url, pathStart, url.length(), "?#");
-    List<String> result = new ArrayList<>();
+    List<String> result = new ArrayList<String>();
     for (int i = pathStart; i < pathEnd; ) {
       i++; // Skip the '/'.
       int segmentEnd = delimiterOffset(url, i, pathEnd, '/');
@@ -635,7 +635,7 @@ static void namesAndValuesToQueryString(StringBuilder out, List<String> namesAnd
    * characters.
    */
   static List<String> queryStringToNamesAndValues(String encodedQuery) {
-    List<String> result = new ArrayList<>();
+    List<String> result = new ArrayList<String>();
     for (int pos = 0; pos <= encodedQuery.length(); ) {
       int ampersandOffset = encodedQuery.indexOf('&', pos);
       if (ampersandOffset == -1) ampersandOffset = encodedQuery.length();
@@ -731,7 +731,7 @@ public int querySize() {
    */
   public Set<String> queryParameterNames() {
     if (queryNamesAndValues == null) return Collections.emptySet();
-    Set<String> result = new LinkedHashSet<>();
+    Set<String> result = new LinkedHashSet<String>();
     for (int i = 0, size = queryNamesAndValues.size(); i < size; i += 2) {
       result.add(queryNamesAndValues.get(i));
     }
@@ -758,7 +758,7 @@ public int querySize() {
    */
   public List<String> queryParameterValues(String name) {
     if (queryNamesAndValues == null) return Collections.emptyList();
-    List<String> result = new ArrayList<>();
+    List<String> result = new ArrayList<String>();
     for (int i = 0, size = queryNamesAndValues.size(); i < size; i += 2) {
       if (name.equals(queryNamesAndValues.get(i))) {
         result.add(queryNamesAndValues.get(i + 1));
@@ -979,7 +979,7 @@ static HttpUrl getChecked(String url) throws MalformedURLException, UnknownHostE
     String encodedPassword = "";
     @Nullable String host;
     int port = -1;
-    final List<String> encodedPathSegments = new ArrayList<>();
+    final List<String> encodedPathSegments = new ArrayList<String>();
     @Nullable List<String> encodedQueryNamesAndValues;
     @Nullable String encodedFragment;
 
@@ -1156,7 +1156,7 @@ public Builder encodedQuery(@Nullable String encodedQuery) {
     /** Encodes the query parameter using UTF-8 and adds it to this URL's query string. */
     public Builder addQueryParameter(String name, @Nullable String value) {
       if (name == null) throw new NullPointerException("name == null");
-      if (encodedQueryNamesAndValues == null) encodedQueryNamesAndValues = new ArrayList<>();
+      if (encodedQueryNamesAndValues == null) encodedQueryNamesAndValues = new ArrayList<String>();
       encodedQueryNamesAndValues.add(
           canonicalize(name, QUERY_COMPONENT_ENCODE_SET, false, false, true, true));
       encodedQueryNamesAndValues.add(value != null
@@ -1168,7 +1168,7 @@ public Builder addQueryParameter(String name, @Nullable String value) {
     /** Adds the pre-encoded query parameter to this URL's query string. */
     public Builder addEncodedQueryParameter(String encodedName, @Nullable String encodedValue) {
       if (encodedName == null) throw new NullPointerException("encodedName == null");
-      if (encodedQueryNamesAndValues == null) encodedQueryNamesAndValues = new ArrayList<>();
+      if (encodedQueryNamesAndValues == null) encodedQueryNamesAndValues = new ArrayList<String>();
       encodedQueryNamesAndValues.add(
           canonicalize(encodedName, QUERY_COMPONENT_ENCODE_SET, true, false, true, true));
       encodedQueryNamesAndValues.add(encodedValue != null
@@ -1610,7 +1610,7 @@ static String percentDecode(String encoded, boolean plusIsSpace) {
 
   private List<String> percentDecode(List<String> list, boolean plusIsSpace) {
     int size = list.size();
-    List<String> result = new ArrayList<>(size);
+    List<String> result = new ArrayList<String>(size);
     for (int i = 0; i < size; i++) {
       String s = list.get(i);
       result.add(s != null ? percentDecode(s, plusIsSpace) : null);
diff --git a/okhttp/src/main/java/okhttp3/MultipartBody.java b/okhttp/src/main/java/okhttp3/MultipartBody.java
index 09c1eaf2fe..d8c0d2fde7 100644
--- a/okhttp/src/main/java/okhttp3/MultipartBody.java
+++ b/okhttp/src/main/java/okhttp3/MultipartBody.java
@@ -279,7 +279,7 @@ public RequestBody body() {
   public static final class Builder {
     private final ByteString boundary;
     private MediaType type = MIXED;
-    private final List<Part> parts = new ArrayList<>();
+    private final List<Part> parts = new ArrayList<Part>();
 
     public Builder() {
       this(UUID.randomUUID().toString());
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index f69cab89ba..729839b7c5 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -446,8 +446,8 @@ public Builder newBuilder() {
     @Nullable Proxy proxy;
     List<Protocol> protocols;
     List<ConnectionSpec> connectionSpecs;
-    final List<Interceptor> interceptors = new ArrayList<>();
-    final List<Interceptor> networkInterceptors = new ArrayList<>();
+    final List<Interceptor> interceptors = new ArrayList<Interceptor>();
+    final List<Interceptor> networkInterceptors = new ArrayList<Interceptor>();
     EventListener.Factory eventListenerFactory;
     ProxySelector proxySelector;
     CookieJar cookieJar;
@@ -487,9 +487,9 @@ public Builder() {
       followSslRedirects = true;
       followRedirects = true;
       retryOnConnectionFailure = true;
-      connectTimeout = 10_000;
-      readTimeout = 10_000;
-      writeTimeout = 10_000;
+      connectTimeout = 10000;
+      readTimeout = 10000;
+      writeTimeout = 10000;
       pingInterval = 0;
     }
 
@@ -828,7 +828,7 @@ public Builder dispatcher(Dispatcher dispatcher) {
      */
     public Builder protocols(List<Protocol> protocols) {
       // Create a private copy of the list.
-      protocols = new ArrayList<>(protocols);
+      protocols = new ArrayList<Protocol>(protocols);
 
       // Validate that the list has everything we require and nothing we forbid.
       if (!protocols.contains(Protocol.HTTP_1_1)) {
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 808b3dc7ba..2305c56d43 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -182,7 +182,7 @@ String redactedUrl() {
 
   Response getResponseWithInterceptorChain() throws IOException {
     // Build a full stack of interceptors.
-    List<Interceptor> interceptors = new ArrayList<>();
+    List<Interceptor> interceptors = new ArrayList<Interceptor>();
     interceptors.addAll(client.interceptors());
     interceptors.add(retryAndFollowUpInterceptor);
     interceptors.add(new BridgeInterceptor(client.cookieJar()));
diff --git a/okhttp/src/main/java/okhttp3/TlsVersion.java b/okhttp/src/main/java/okhttp3/TlsVersion.java
index 02cbeca3d1..0e9244a4d9 100644
--- a/okhttp/src/main/java/okhttp3/TlsVersion.java
+++ b/okhttp/src/main/java/okhttp3/TlsVersion.java
@@ -38,23 +38,21 @@
   }
 
   public static TlsVersion forJavaName(String javaName) {
-    switch (javaName) {
-      case "TLSv1.3":
-        return TLS_1_3;
-      case "TLSv1.2":
+      if ("TLSv1.3".equals(javaName)) 
+    	  return TLS_1_3;
+      if ("TLSv1.2".equals(javaName)) 
         return TLS_1_2;
-      case "TLSv1.1":
+      if ("TLSv1.1".equals(javaName)) 
         return TLS_1_1;
-      case "TLSv1":
+      if ("TLSv1".equals(javaName)) 
         return TLS_1_0;
-      case "SSLv3":
+      if ("SSLv3".equals(javaName)) 
         return SSL_3_0;
-    }
     throw new IllegalArgumentException("Unexpected TLS version: " + javaName);
   }
 
   static List<TlsVersion> forJavaNames(String... tlsVersions) {
-    List<TlsVersion> result = new ArrayList<>(tlsVersions.length);
+    List<TlsVersion> result = new ArrayList<TlsVersion>(tlsVersions.length);
     for (String tlsVersion : tlsVersions) {
       result.add(forJavaName(tlsVersion));
     }
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
index 68bbf5f6a2..6f46c19f19 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -189,7 +189,7 @@ public static boolean skipAll(Source source, int duration, TimeUnit timeUnit) th
 
   /** Returns an immutable copy of {@code list}. */
   public static <T> List<T> immutableList(List<T> list) {
-    return Collections.unmodifiableList(new ArrayList<>(list));
+    return Collections.unmodifiableList(new ArrayList<T>(list));
   }
 
   /** Returns an immutable list containing {@code elements}. */
@@ -214,7 +214,7 @@ public static ThreadFactory threadFactory(final String name, final boolean daemo
   @SuppressWarnings("unchecked")
   public static String[] intersect(
       Comparator<? super String> comparator, String[] first, String[] second) {
-    List<String> result = new ArrayList<>();
+    List<String> result = new ArrayList<String>();
     for (String a : first) {
       for (String b : second) {
         if (comparator.compare(a, b) == 0) {
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
index c3fb740e28..3924a2def2 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
@@ -147,7 +147,7 @@
   final int valueCount;
   private long size = 0;
   BufferedSink journalWriter;
-  final LinkedHashMap<String, Entry> lruEntries = new LinkedHashMap<>(0, 0.75f, true);
+  final LinkedHashMap<String, Entry> lruEntries = new LinkedHashMap<String, Entry>(0, 0.75f, true);
   int redundantOpCount;
   boolean hasJournalErrors;
 
@@ -736,7 +736,7 @@ private void validateKey(String key) {
     initialize();
     return new Iterator<Snapshot>() {
       /** Iterate a copy of the entries to defend against concurrent modification errors. */
-      final Iterator<Entry> delegate = new ArrayList<>(lruEntries.values()).iterator();
+      final Iterator<Entry> delegate = new ArrayList<Entry>(lruEntries.values()).iterator();
 
       /** The snapshot to return from {@link #next}. Null if we haven't computed that yet. */
       Snapshot nextSnapshot;
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
index 6afb0fd017..97fdd4980c 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
@@ -108,7 +108,7 @@
   public int allocationLimit = 1;
 
   /** Current streams carried by this connection. */
-  public final List<Reference<StreamAllocation>> allocations = new ArrayList<>();
+  public final List<Reference<StreamAllocation>> allocations = new ArrayList<Reference<StreamAllocation>>();
 
   /** Nanotime timestamp when {@code allocations.size()} reached zero. */
   public long idleAtNanos = Long.MAX_VALUE;
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RouteDatabase.java b/okhttp/src/main/java/okhttp3/internal/connection/RouteDatabase.java
index d0c1a9d79e..2e19901229 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RouteDatabase.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteDatabase.java
@@ -26,7 +26,7 @@
  * preferred.
  */
 public final class RouteDatabase {
-  private final Set<Route> failedRoutes = new LinkedHashSet<>();
+  private final Set<Route> failedRoutes = new LinkedHashSet<Route>();
 
   /** Records a failure connecting to {@code failedRoute}. */
   public synchronized void failed(Route failedRoute) {
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java
index 5f50576611..ca3079db1f 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteException.java
@@ -56,7 +56,8 @@ private void addSuppressedIfPossible(IOException e, IOException suppressed) {
     if (addSuppressedExceptionMethod != null) {
       try {
         addSuppressedExceptionMethod.invoke(e, suppressed);
-      } catch (InvocationTargetException | IllegalAccessException ignored) {
+      } catch (InvocationTargetException ignored) {
+      } catch (IllegalAccessException ignored) {
       }
     }
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
index 40752ce23d..6f72a58d35 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
@@ -51,7 +51,7 @@
   private List<InetSocketAddress> inetSocketAddresses = Collections.emptyList();
 
   /* State for negotiating failed routes */
-  private final List<Route> postponedRoutes = new ArrayList<>();
+  private final List<Route> postponedRoutes = new ArrayList<Route>();
 
   public RouteSelector(Address address, RouteDatabase routeDatabase, Call call,
       EventListener eventListener) {
@@ -76,7 +76,7 @@ public Selection next() throws IOException {
     }
 
     // Compute the next set of routes to attempt.
-    List<Route> routes = new ArrayList<>();
+    List<Route> routes = new ArrayList<Route>();
     while (hasNextProxy()) {
       // Postponed routes are always tried last. For example, if we have 2 proxies and all the
       // routes for proxy1 should be postponed, we'll move to proxy2. Only after we've exhausted
@@ -153,7 +153,7 @@ private Proxy nextProxy() throws IOException {
   /** Prepares the socket addresses to attempt for the current proxy or host. */
   private void resetNextInetSocketAddress(Proxy proxy) throws IOException {
     // Clear the addresses. Necessary if getAllByName() below throws!
-    inetSocketAddresses = new ArrayList<>();
+    inetSocketAddresses = new ArrayList<InetSocketAddress>();
 
     String socketHost;
     int socketPort;
@@ -235,7 +235,7 @@ public Route next() {
     }
 
     public List<Route> getAll() {
-      return new ArrayList<>(routes);
+      return new ArrayList<Route>(routes);
     }
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java b/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
index a1d6712906..8f71abf8d3 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
@@ -103,7 +103,7 @@ public static boolean hasVaryAll(Headers responseHeaders) {
 
       String value = responseHeaders.value(i);
       if (result.isEmpty()) {
-        result = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
+        result = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
       }
       for (String varyField : value.split(",")) {
         result.add(varyField.trim());
@@ -153,7 +153,7 @@ public static Headers varyHeaders(Headers requestHeaders, Headers responseHeader
     // challenge   = auth-scheme 1*SP 1#auth-param
     // realm       = "realm" "=" realm-value
     // realm-value = quoted-string
-    List<Challenge> challenges = new ArrayList<>();
+    List<Challenge> challenges = new ArrayList<Challenge>();
     List<String> authenticationHeaders = responseHeaders.values(challengeHeader);
     for (String header : authenticationHeaders) {
       int index = header.indexOf(' ');
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
index a28698bf01..e18f14fb55 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
@@ -114,7 +114,7 @@ private Hpack() {
   // http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#section-3.1
   static final class Reader {
 
-    private final List<Header> headerList = new ArrayList<>();
+    private final List<Header> headerList = new ArrayList<Header>();
     private final BufferedSource source;
 
     private final int headerTableSizeSetting;
@@ -210,7 +210,7 @@ void readHeaders() throws IOException {
     }
 
     public List<Header> getAndResetHeaderList() {
-      List<Header> result = new ArrayList<>(headerList);
+      List<Header> result = new ArrayList<Header>(headerList);
       headerList.clear();
       return result;
     }
@@ -349,7 +349,7 @@ ByteString readByteString() throws IOException {
   static final Map<ByteString, Integer> NAME_TO_FIRST_INDEX = nameToFirstIndex();
 
   private static Map<ByteString, Integer> nameToFirstIndex() {
-    Map<ByteString, Integer> result = new LinkedHashMap<>(STATIC_HEADER_TABLE.length);
+    Map<ByteString, Integer> result = new LinkedHashMap<ByteString, Integer>(STATIC_HEADER_TABLE.length);
     for (int i = 0; i < STATIC_HEADER_TABLE.length; i++) {
       if (!result.containsKey(STATIC_HEADER_TABLE[i].name)) {
         result.put(STATIC_HEADER_TABLE[i].name, i);
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
index 5268aa2c91..132948fdd6 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
@@ -132,7 +132,7 @@ public Http2Codec(OkHttpClient client, Interceptor.Chain chain, StreamAllocation
 
   public static List<Header> http2HeadersList(Request request) {
     Headers headers = request.headers();
-    List<Header> result = new ArrayList<>(headers.size() + 4);
+    List<Header> result = new ArrayList<Header>(headers.size() + 4);
     result.add(new Header(TARGET_METHOD, request.method()));
     result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url())));
     String host = request.header("Host");
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java
index a79b3b7608..2a3451a5d9 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java
@@ -78,7 +78,7 @@
    * on {@link #executor}.
    */
   final Listener listener;
-  final Map<Integer, Http2Stream> streams = new LinkedHashMap<>();
+  final Map<Integer, Http2Stream> streams = new LinkedHashMap<Integer, Http2Stream>();
   final String hostname;
   int lastGoodStreamId;
   int nextStreamId;
@@ -339,7 +339,7 @@ public Ping ping() throws IOException {
       }
       pingId = nextPingId;
       nextPingId += 2;
-      if (pings == null) pings = new LinkedHashMap<>();
+      if (pings == null) pings = new LinkedHashMap<Integer, Ping>();
       pings.put(pingId, ping);
     }
     writePing(false, pingId, 0x4f4b6f6b /* ASCII "OKok" */, ping);
@@ -774,7 +774,7 @@ boolean pushedStream(int streamId) {
   }
 
   // Guarded by this.
-  final Set<Integer> currentPushRequests = new LinkedHashSet<>();
+  final Set<Integer> currentPushRequests = new LinkedHashSet<Integer>();
 
   void pushRequestLater(final int streamId, final List<Header> requestHeaders) {
     synchronized (this) {
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java
index 19ac954d7e..d94b47e890 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.java
@@ -264,7 +264,7 @@ void receiveHeaders(List<Header> headers) {
         open = isOpen();
         notifyAll();
       } else {
-        List<Header> newHeaders = new ArrayList<>();
+        List<Header> newHeaders = new ArrayList<Header>();
         newHeaders.addAll(responseHeaders);
         newHeaders.add(null); // Delimit separate blocks of headers with null.
         newHeaders.addAll(headers);
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java
index 342e91f150..5c721af43c 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java
+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.java
@@ -169,11 +169,18 @@
       Method getInstanceMethod = networkPolicyClass.getMethod("getInstance");
       Object networkSecurityPolicy = getInstanceMethod.invoke(null);
       return api24IsCleartextTrafficPermitted(hostname, networkPolicyClass, networkSecurityPolicy);
-    } catch (ClassNotFoundException | NoSuchMethodException e) {
+    } catch (ClassNotFoundException e) {
       return super.isCleartextTrafficPermitted(hostname);
-    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
-      throw assertionError("unable to determine cleartext support", e);
-    }
+    } catch (NoSuchMethodException e) {
+        return super.isCleartextTrafficPermitted(hostname);
+    } catch (IllegalAccessException e) {
+    	throw assertionError("unable to determine cleartext support", e);
+    } catch (IllegalArgumentException e) {
+    	throw assertionError("unable to determine cleartext support", e);
+    } catch (InvocationTargetException e) {
+    	throw assertionError("unable to determine cleartext support", e);
+	}
+    
   }
 
   private boolean api24IsCleartextTrafficPermitted(String hostname, Class<?> networkPolicyClass,
@@ -181,7 +188,8 @@ private boolean api24IsCleartextTrafficPermitted(String hostname, Class<?> netwo
     try {
       Method isCleartextTrafficPermittedMethod = networkPolicyClass
           .getMethod("isCleartextTrafficPermitted", String.class);
-      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname);
+//      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname);
+      return (Boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname);
     } catch (NoSuchMethodException e) {
       return api23IsCleartextTrafficPermitted(hostname, networkPolicyClass, networkSecurityPolicy);
     }
@@ -192,7 +200,8 @@ private boolean api23IsCleartextTrafficPermitted(String hostname, Class<?> netwo
     try {
       Method isCleartextTrafficPermittedMethod = networkPolicyClass
           .getMethod("isCleartextTrafficPermitted");
-      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy);
+//      return (boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy);
+      return (Boolean) isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy);
     } catch (NoSuchMethodException e) {
       return super.isCleartextTrafficPermitted(hostname);
     }
@@ -240,18 +249,18 @@ public static Platform buildIfSupported() {
             "org.apache.harmony.xnet.provider.jsse.SSLParametersImpl");
       }
 
-      OptionalMethod<Socket> setUseSessionTickets = new OptionalMethod<>(
+      OptionalMethod<Socket> setUseSessionTickets = new OptionalMethod<Socket>(
           null, "setUseSessionTickets", boolean.class);
-      OptionalMethod<Socket> setHostname = new OptionalMethod<>(
+      OptionalMethod<Socket> setHostname = new OptionalMethod<Socket>(
           null, "setHostname", String.class);
       OptionalMethod<Socket> getAlpnSelectedProtocol = null;
       OptionalMethod<Socket> setAlpnProtocols = null;
 
       if (supportsAlpn()) {
         getAlpnSelectedProtocol
-            = new OptionalMethod<>(byte[].class, "getAlpnSelectedProtocol");
+            = new OptionalMethod<Socket>(byte[].class, "getAlpnSelectedProtocol");
         setAlpnProtocols
-            = new OptionalMethod<>(null, "setAlpnProtocols", byte[].class);
+            = new OptionalMethod<Socket>(null, "setAlpnProtocols", byte[].class);
       }
 
       return new AndroidPlatform(sslParametersClass, setUseSessionTickets, setHostname,
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java b/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java
index 24b75217b0..1ed31e2872 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java
+++ b/okhttp/src/main/java/okhttp3/internal/platform/Jdk9Platform.java
@@ -50,9 +50,12 @@ public void configureTlsExtensions(SSLSocket sslSocket, String hostname,
           new Object[] {names.toArray(new String[names.size()])});
 
       sslSocket.setSSLParameters(sslParameters);
-    } catch (IllegalAccessException | InvocationTargetException e) {
+    } catch (IllegalAccessException e) {
+      throw assertionError("unable to set ssl parameters", e);
+  	} catch (InvocationTargetException e) {
       throw assertionError("unable to set ssl parameters", e);
     }
+
   }
 
   @Override
@@ -67,7 +70,9 @@ public String getSelectedProtocol(SSLSocket socket) {
       }
 
       return protocol;
-    } catch (IllegalAccessException | InvocationTargetException e) {
+    } catch (IllegalAccessException e) {
+      throw assertionError("unable to get selected protocols", e);
+    } catch (InvocationTargetException e) {
       throw assertionError("unable to get selected protocols", e);
     }
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java b/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java
index bfb4ed8c89..67ce704481 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java
+++ b/okhttp/src/main/java/okhttp3/internal/platform/JdkWithJettyBootPlatform.java
@@ -53,15 +53,20 @@
       Object provider = Proxy.newProxyInstance(Platform.class.getClassLoader(),
           new Class[] {clientProviderClass, serverProviderClass}, new JettyNegoProvider(names));
       putMethod.invoke(null, sslSocket, provider);
-    } catch (InvocationTargetException | IllegalAccessException e) {
+    } catch (InvocationTargetException e) {
       throw assertionError("unable to set alpn", e);
-    }
+    } catch (IllegalAccessException e) {
+      throw assertionError("unable to set alpn", e);
+    }	
+    
   }
 
   @Override public void afterHandshake(SSLSocket sslSocket) {
     try {
       removeMethod.invoke(null, sslSocket);
-    } catch (IllegalAccessException | InvocationTargetException e) {
+    } catch (IllegalAccessException e) {
+      throw assertionError("unable to remove alpn", e);
+    } catch (InvocationTargetException e) {
       throw assertionError("unable to remove alpn", e);
     }
   }
@@ -76,7 +81,9 @@
         return null;
       }
       return provider.unsupported ? null : provider.selected;
-    } catch (InvocationTargetException | IllegalAccessException e) {
+    } catch (InvocationTargetException e) {
+      throw assertionError("unable to get selected protocol", e);
+    } catch (IllegalAccessException e) {
       throw assertionError("unable to get selected protocol", e);
     }
   }
@@ -94,7 +101,8 @@ public static Platform buildIfSupported() {
       Method removeMethod = negoClass.getMethod("remove", SSLSocket.class);
       return new JdkWithJettyBootPlatform(
           putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
-    } catch (ClassNotFoundException | NoSuchMethodException ignored) {
+    } catch (ClassNotFoundException ignored) {
+    } catch (NoSuchMethodException ignored) {
     }
 
     return null;
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Platform.java b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java
index c4e12b4b38..533a4f60f0 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/Platform.java
+++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.java
@@ -155,7 +155,7 @@ public void logCloseableLeak(String message, Object stackTrace) {
   }
 
   public static List<String> alpnProtocolNames(List<Protocol> protocols) {
-    List<String> names = new ArrayList<>(protocols.size());
+    List<String> names = new ArrayList<String>(protocols.size());
     for (int i = 0, size = protocols.size(); i < size; i++) {
       Protocol protocol = protocols.get(i);
       if (protocol == Protocol.HTTP_1_0) continue; // No HTTP/1.0 for ALPN.
diff --git a/okhttp/src/main/java/okhttp3/internal/tls/BasicCertificateChainCleaner.java b/okhttp/src/main/java/okhttp3/internal/tls/BasicCertificateChainCleaner.java
index 8a8c1d11d2..1ec6d9bcfc 100644
--- a/okhttp/src/main/java/okhttp3/internal/tls/BasicCertificateChainCleaner.java
+++ b/okhttp/src/main/java/okhttp3/internal/tls/BasicCertificateChainCleaner.java
@@ -53,8 +53,8 @@ public BasicCertificateChainCleaner(TrustRootIndex trustRootIndex) {
    */
   @Override public List<Certificate> clean(List<Certificate> chain, String hostname)
       throws SSLPeerUnverifiedException {
-    Deque<Certificate> queue = new ArrayDeque<>(chain);
-    List<Certificate> result = new ArrayList<>();
+    Deque<Certificate> queue = new ArrayDeque<Certificate>(chain);
+    List<Certificate> result = new ArrayList<Certificate>();
     result.add(queue.removeFirst());
     boolean foundTrustedCertificate = false;
 
diff --git a/okhttp/src/main/java/okhttp3/internal/tls/BasicTrustRootIndex.java b/okhttp/src/main/java/okhttp3/internal/tls/BasicTrustRootIndex.java
index cfd8923668..937420d0a0 100644
--- a/okhttp/src/main/java/okhttp3/internal/tls/BasicTrustRootIndex.java
+++ b/okhttp/src/main/java/okhttp3/internal/tls/BasicTrustRootIndex.java
@@ -28,12 +28,12 @@
   private final Map<X500Principal, Set<X509Certificate>> subjectToCaCerts;
 
   public BasicTrustRootIndex(X509Certificate... caCerts) {
-    subjectToCaCerts = new LinkedHashMap<>();
+    subjectToCaCerts = new LinkedHashMap<X500Principal, Set<X509Certificate>>();
     for (X509Certificate caCert : caCerts) {
       X500Principal subject = caCert.getSubjectX500Principal();
       Set<X509Certificate> subjectCaCerts = subjectToCaCerts.get(subject);
       if (subjectCaCerts == null) {
-        subjectCaCerts = new LinkedHashSet<>(1);
+        subjectCaCerts = new LinkedHashSet<X509Certificate>(1);
         subjectToCaCerts.put(subject, subjectCaCerts);
       }
       subjectCaCerts.add(caCert);
diff --git a/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
index 7441abadad..45f9814624 100644
--- a/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
+++ b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
@@ -97,14 +97,14 @@ private boolean verifyHostname(String hostname, X509Certificate certificate) {
   public static List<String> allSubjectAltNames(X509Certificate certificate) {
     List<String> altIpaNames = getSubjectAltNames(certificate, ALT_IPA_NAME);
     List<String> altDnsNames = getSubjectAltNames(certificate, ALT_DNS_NAME);
-    List<String> result = new ArrayList<>(altIpaNames.size() + altDnsNames.size());
+    List<String> result = new ArrayList<String>(altIpaNames.size() + altDnsNames.size());
     result.addAll(altIpaNames);
     result.addAll(altDnsNames);
     return result;
   }
 
   private static List<String> getSubjectAltNames(X509Certificate certificate, int type) {
-    List<String> result = new ArrayList<>();
+    List<String> result = new ArrayList<String>();
     try {
       Collection<?> subjectAltNames = certificate.getSubjectAlternativeNames();
       if (subjectAltNames == null) {
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index 0d39abc8d5..897c737176 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -99,10 +99,10 @@
   private Streams streams;
 
   /** Outgoing pongs in the order they should be written. */
-  private final ArrayDeque<ByteString> pongQueue = new ArrayDeque<>();
+  private final ArrayDeque<ByteString> pongQueue = new ArrayDeque<ByteString>();
 
   /** Outgoing messages and close frames in the order they should be written. */
-  private final ArrayDeque<Object> messageAndCloseQueue = new ArrayDeque<>();
+  private final ArrayDeque<Object> messageAndCloseQueue = new ArrayDeque<Object>();
 
   /** The total size in bytes of enqueued but not yet transmitted messages. */
   private long queueSize;
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
index 5be61eea5f..2753ecb1d4 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
@@ -36,30 +36,39 @@
   */
 
   /** Byte 0 flag for whether this is the final fragment in a message. */
-  static final int B0_FLAG_FIN = 0b10000000;
+//  static final int B0_FLAG_FIN = 0b10000000;
+  static final int B0_FLAG_FIN = 1 << 7;
   /** Byte 0 reserved flag 1. Must be 0 unless negotiated otherwise. */
-  static final int B0_FLAG_RSV1 = 0b01000000;
+//  static final int B0_FLAG_RSV1 = 0b01000000;
+  static  final int B0_FLAG_RSV1 = 1 << 6;
   /** Byte 0 reserved flag 2. Must be 0 unless negotiated otherwise. */
-  static final int B0_FLAG_RSV2 = 0b00100000;
+//  static final int B0_FLAG_RSV2 = 0b00100000;
+  static final int B0_FLAG_RSV2 = 1 << 5;
   /** Byte 0 reserved flag 3. Must be 0 unless negotiated otherwise. */
-  static final int B0_FLAG_RSV3 = 0b00010000;
+//  static final int B0_FLAG_RSV3 = 0b00010000;
+  static final int B0_FLAG_RSV3 = 1 << 4;
   /** Byte 0 mask for the frame opcode. */
-  static final int B0_MASK_OPCODE = 0b00001111;
+//  static final int B0_MASK_OPCODE = 0b00001111;
+  static final int B0_MASK_OPCODE = 1 << 3 | 1 << 2 | 1 << 1 | 1;
   /** Flag in the opcode which indicates a control frame. */
-  static final int OPCODE_FLAG_CONTROL = 0b00001000;
+//  static final int OPCODE_FLAG_CONTROL = 0b00001000;
+  static final int OPCODE_FLAG_CONTROL = 1 << 3;
 
+  
   /**
    * Byte 1 flag for whether the payload data is masked. <p> If this flag is set, the next four
    * bytes represent the mask key. These bytes appear after any additional bytes specified by {@link
    * #B1_MASK_LENGTH}.
    */
-  static final int B1_FLAG_MASK = 0b10000000;
+//  static final int B1_FLAG_MASK = 0b10000000;
+  static final int B1_FLAG_MASK = 1 << 7;
   /**
    * Byte 1 mask for the payload length. <p> If this value is {@link #PAYLOAD_SHORT}, the next two
    * bytes represent the length. If this value is {@link #PAYLOAD_LONG}, the next eight bytes
    * represent the length.
    */
-  static final int B1_MASK_LENGTH = 0b01111111;
+//  static final int B1_MASK_LENGTH = 0b01111111;
+  static final int B1_MASK_LENGTH = 1 << 6 | 1 << 5 | 1 << 4 | 1 << 3 | 1 << 2 | 1 << 1 | 1;;
 
   static final int OPCODE_CONTINUATION = 0x0;
   static final int OPCODE_TEXT = 0x1;
diff --git a/okhttp/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixListGenerator.java b/okhttp/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixListGenerator.java
index 50b1f8703a..1e0abe12cc 100644
--- a/okhttp/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixListGenerator.java
+++ b/okhttp/src/test/java/okhttp3/internal/publicsuffix/PublicSuffixListGenerator.java
@@ -51,9 +51,10 @@ public static void main(String... args) throws IOException {
     Request request = new Request.Builder()
         .url("https://publicsuffix.org/list/public_suffix_list.dat")
         .build();
-    SortedSet<ByteString> sortedRules = new TreeSet<>();
-    SortedSet<ByteString> sortedExceptionRules = new TreeSet<>();
-    try (Response response = client.newCall(request).execute()) {
+    SortedSet<ByteString> sortedRules = new TreeSet<ByteString>();
+    SortedSet<ByteString> sortedExceptionRules = new TreeSet<ByteString>();
+    Response response = client.newCall(request).execute();
+    try {
       BufferedSource source = response.body().source();
       int totalRuleBytes = 0;
       int totalExceptionRuleBytes = 0;
@@ -83,7 +84,8 @@ public static void main(String... args) throws IOException {
       }
 
       Sink fileSink = Okio.sink(new File(resources, PublicSuffixDatabase.PUBLIC_SUFFIX_RESOURCE));
-      try (BufferedSink sink = Okio.buffer(new GzipSink(fileSink))) {
+      BufferedSink sink = Okio.buffer(new GzipSink(fileSink));
+      try {
         sink.writeInt(totalRuleBytes);
         for (ByteString domain : sortedRules) {
           sink.write(domain).writeByte('\n');
@@ -93,7 +95,13 @@ public static void main(String... args) throws IOException {
         for (ByteString domain : sortedExceptionRules) {
           sink.write(domain).writeByte('\n');
         }
+      } finally {
+    	  if (sink != null) 
+    		  sink.close();
       }
+    } finally {
+    	if (response != null)
+    		response.close();
     }
   }
 
diff --git a/pom.xml b/pom.xml
index 92945305da..939338bd15 100644
--- a/pom.xml
+++ b/pom.xml
@@ -20,6 +20,7 @@
 
   <modules>
     <module>okhttp</module>
+<!--
     <module>okhttp-tests</module>
 
     <module>okhttp-android-support</module>
@@ -34,6 +35,7 @@
     <module>mockwebserver</module>
     <module>samples</module>
     <module>benchmarks</module>
+-->
   </modules>
 
   <properties>
@@ -48,7 +50,7 @@
     <apache.http.version>4.2.2</apache.http.version>
     <bouncycastle.version>1.50</bouncycastle.version>
     <guava.version>16.0</guava.version>
-    <java.version>1.7</java.version>
+    <java.version>1.6</java.version>
     <moshi.version>1.1.0</moshi.version>
     <okio.version>1.13.0</okio.version>
 
