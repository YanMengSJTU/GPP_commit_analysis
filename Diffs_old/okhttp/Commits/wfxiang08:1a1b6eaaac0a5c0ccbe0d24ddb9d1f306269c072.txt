diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java
index d19cedfc20..6a90ac0458 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HpackTest.java
@@ -925,10 +925,30 @@ private void checkReadThirdRequestWithHuffman() {
     assertEquals(expected, actual);
   }
 
-  @Test public void staticTableIndexedHeader() throws IOException {
+  @Test public void staticTableIndexedHeaders() throws IOException {
     hpackWriter.writeHeaders(headerEntries(":method", "GET"));
     assertBytes(0x82);
     assertEquals(0, hpackWriter.headerCount);
+
+    hpackWriter.writeHeaders(headerEntries(":method", "POST"));
+    assertBytes(0x83);
+    assertEquals(0, hpackWriter.headerCount);
+
+    hpackWriter.writeHeaders(headerEntries(":path", "/"));
+    assertBytes(0x84);
+    assertEquals(0, hpackWriter.headerCount);
+
+    hpackWriter.writeHeaders(headerEntries(":path", "/index.html"));
+    assertBytes(0x85);
+    assertEquals(0, hpackWriter.headerCount);
+
+    hpackWriter.writeHeaders(headerEntries(":scheme", "http"));
+    assertBytes(0x86);
+    assertEquals(0, hpackWriter.headerCount);
+
+    hpackWriter.writeHeaders(headerEntries(":scheme", "https"));
+    assertBytes(0x87);
+    assertEquals(0, hpackWriter.headerCount);
   }
 
   @Test public void dynamicTableIndexedHeader() throws IOException {
@@ -948,8 +968,8 @@ private void checkReadThirdRequestWithHuffman() {
     assertBytes(0x02, 3, 'P', 'U', 'T');
     assertEquals(0, hpackWriter.headerCount);
 
-    hpackWriter.writeHeaders(headerEntries(":method", "PUT"));
-    assertBytes(0x02, 3, 'P', 'U', 'T');
+    hpackWriter.writeHeaders(headerEntries(":path", "/okhttp"));
+    assertBytes(0x04, 7, '/', 'o', 'k', 'h', 't', 't', 'p');
     assertEquals(0, hpackWriter.headerCount);
   }
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
index ff0f3903d5..3aeed262b4 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.java
@@ -471,24 +471,30 @@ void writeHeaders(List<Header> headerBlock) throws IOException {
         int headerNameIndex = -1;
 
         Integer staticIndex = NAME_TO_FIRST_INDEX.get(name);
-        if (staticIndex != null) headerNameIndex = staticIndex + 1;
-
-        // Only search a subset of the static header table. Most entries have an empty value, so
-        // it's unnecessary to waste cycles looking at them.
-        for (int j = 1; j < 7; j++) {
-          if (Util.equal(STATIC_HEADER_TABLE[j], header)) {
-            headerIndex = j + 1;
-            break;
+        if (staticIndex != null) {
+          headerNameIndex = staticIndex + 1;
+          if (headerNameIndex > 1 && headerNameIndex < 8) {
+            // Only search a subset of the static header table. Most entries have an empty value, so
+            // it's unnecessary to waste cycles looking at them. This check is built on the
+            // observation that the header entries we care about are in adjacent pairs, and we
+            // always know the first index of the pair.
+            if (Util.equal(STATIC_HEADER_TABLE[headerNameIndex - 1].value, value)) {
+              headerIndex = headerNameIndex;
+            } else if (Util.equal(STATIC_HEADER_TABLE[headerNameIndex].value, value)) {
+              headerIndex = headerNameIndex + 1;
+            }
           }
         }
 
         if (headerIndex == -1) {
           for (int j = nextHeaderIndex + 1, length = dynamicTable.length; j < length; j++) {
-            if (Util.equal(dynamicTable[j], header)) {
-              headerIndex = j - nextHeaderIndex + STATIC_HEADER_TABLE.length;
-              break;
-            } else if (headerNameIndex == -1 && Util.equal(dynamicTable[j].name, name)) {
-              headerNameIndex = j - nextHeaderIndex + STATIC_HEADER_TABLE.length;
+            if (Util.equal(dynamicTable[j].name, name)) {
+              if (Util.equal(dynamicTable[j].value, value)) {
+                headerIndex = j - nextHeaderIndex + STATIC_HEADER_TABLE.length;
+                break;
+              } else if (headerNameIndex == -1) {
+                headerNameIndex = j - nextHeaderIndex + STATIC_HEADER_TABLE.length;
+              }
             }
           }
         }
