diff --git a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
index dfe4d31daf..14ca0e02aa 100644
--- a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
@@ -157,6 +157,7 @@ public void setLevel(Level level) {
         logger.log(headers.name(i) + ": " + headers.value(i));
       }
 
+      String endMessage = "--> END " + request.method();
       if (logBody && hasRequestBody) {
         Buffer buffer = new Buffer();
         requestBody.writeTo(buffer);
@@ -169,10 +170,7 @@ public void setLevel(Level level) {
 
         logger.log("");
         logger.log(buffer.readString(charset));
-      }
 
-      String endMessage = "--> END " + request.method();
-      if (logBody && hasRequestBody) {
         endMessage += " (" + requestBody.contentLength() + "-byte body)";
       }
       logger.log(endMessage);
@@ -193,10 +191,11 @@ public void setLevel(Level level) {
         logger.log(headers.name(i) + ": " + headers.value(i));
       }
 
+      String endMessage = "<-- END HTTP";
       if (logBody) {
         BufferedSource source = responseBody.source();
         source.request(Long.MAX_VALUE); // Buffer the entire body.
-        Buffer buffer = source.buffer().clone();
+        Buffer buffer = source.buffer();
 
         Charset charset = UTF8;
         MediaType contentType = responseBody.contentType();
@@ -204,15 +203,12 @@ public void setLevel(Level level) {
           charset = contentType.charset(UTF8);
         }
 
-        if (responseBody.contentLength() > 0) {
+        if (responseBody.contentLength() != 0) {
           logger.log("");
           logger.log(buffer.clone().readString(charset));
         }
-      }
 
-      String endMessage = "<-- END HTTP";
-      if (logBody) {
-        endMessage += " (" + responseBody.contentLength() + "-byte body)";
+        endMessage += " (" + buffer.size() + "-byte body)";
       }
       logger.log(endMessage);
     }
diff --git a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
index 79163bd207..aa3aa1e090 100644
--- a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
@@ -234,6 +234,32 @@
     assertEquals("<-- END HTTP (6-byte body)", logs.get(14));
   }
 
+  @Test public void bodyResponseBodyChunked() throws IOException {
+    interceptor.setLevel(Level.BODY);
+
+    server.enqueue(new MockResponse()
+        .setChunkedBody("Hello!", 2)
+        .setHeader("Content-Type", PLAIN.toString()));
+    client.newCall(request().build()).execute();
+
+    assertEquals(15, logs.size());
+    assertEquals("--> GET / HTTP/1.1", logs.get(0));
+    assertEquals("Host: " + server.getHostName() + ":" + server.getPort(), logs.get(1));
+    assertEquals("Connection: Keep-Alive", logs.get(2));
+    assertEquals("Accept-Encoding: gzip", logs.get(3));
+    assertTrue(Pattern.matches("User-Agent: okhttp/.+", logs.get(4)));
+    assertEquals("--> END GET", logs.get(5));
+    assertTrue(Pattern.matches("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)", logs.get(6)));
+    assertEquals("Transfer-encoding: chunked", logs.get(7));
+    assertEquals("Content-Type: text/plain; charset=utf-8", logs.get(8));
+    assertEquals("OkHttp-Selected-Protocol: http/1.1", logs.get(9));
+    assertTrue(Pattern.matches("OkHttp-Sent-Millis: \\d+", logs.get(10)));
+    assertTrue(Pattern.matches("OkHttp-Received-Millis: \\d+", logs.get(11)));
+    assertEquals("", logs.get(12));
+    assertEquals("Hello!", logs.get(13));
+    assertEquals("<-- END HTTP (6-byte body)", logs.get(14));
+  }
+
   private Request.Builder request() {
     return new Request.Builder().url(server.url("/"));
   }
