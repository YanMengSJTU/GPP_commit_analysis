diff --git a/.circleci/config.yml b/.circleci/config.yml
index bb042a7910..afe75ce9d5 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -51,7 +51,7 @@ commands:
 jobs:
   compile:
     docker:
-      - image: circleci/openjdk:8u171-jdk
+      - image: circleci/openjdk:8u222-jdk-stretch
 
     environment:
       JVM_OPTS: -Xmx1g
@@ -81,7 +81,7 @@ jobs:
 
   checkjdk8:
     docker:
-      - image: circleci/openjdk:8u171-jdk
+      - image: circleci/openjdk:8u222-jdk-stretch
 
     environment:
       JVM_OPTS: -Xmx1g
@@ -114,7 +114,7 @@ jobs:
 
   testjdk8:
     docker:
-      - image: circleci/openjdk:8u171-jdk
+      - image: circleci/openjdk:8u222-jdk-stretch
 
     environment:
       JVM_OPTS: -Xmx1g
@@ -128,7 +128,7 @@ jobs:
 
   testjdk8alpn:
     docker:
-      - image: circleci/openjdk:8u171-jdk
+      - image: circleci/openjdk:8u222-jdk-stretch
 
     environment:
       JVM_OPTS: -Xmx1g
@@ -140,9 +140,23 @@ jobs:
       - runtests:
           platform: jdk8alpn
 
+  testopenjsse:
+    docker:
+      - image: circleci/openjdk:8u222-jdk-stretch
+
+    environment:
+      JVM_OPTS: -Xmx1g
+      TERM: dumb
+
+    steps:
+      - checkout
+
+      - runtests:
+          platform: openjsse
+
   testjdk11:
     docker:
-      - image: circleci/openjdk:11.0.3-jdk-stretch
+      - image: circleci/openjdk:11.0.4-jdk-stretch
 
     environment:
       JVM_OPTS: -Xmx1g
@@ -157,7 +171,7 @@ jobs:
   testjdk12:
     docker:
       # best source of JDK 12 for now
-      - image: circleci/dynamodb:12.0.1-jdk
+      - image: circleci/dynamodb:12.0.2-jdk
 
     environment:
       JVM_OPTS: -Xmx1g
@@ -171,7 +185,7 @@ jobs:
 
   testconscrypt:
     docker:
-      - image: circleci/openjdk:11.0.3-jdk-stretch
+      - image: circleci/openjdk:11.0.4-jdk-stretch
 
     environment:
       JVM_OPTS: -Xmx1g
@@ -205,6 +219,10 @@ workflows:
           filters:
             branches:
               only: master
+      - testopenjsse:
+          filters:
+            branches:
+              only: master
       - testjdk11:
           filters:
             branches:
@@ -236,6 +254,9 @@ workflows:
       - testjdk8alpn:
           requires:
             - compile
+      - testopenjsse:
+          requires:
+            - compile
       - testjdk11:
           requires:
             - compile
diff --git a/.travis.yml b/.travis.yml
index c8dde06c1a..143348a630 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,10 +1,16 @@
 language: java
 
+dist: trusty
+
 jdk:
   - oraclejdk8
 
+# avoid ./gradlew assemble default which builds docs
+install:
+ - ./gradlew jar --parallel
+
 script:
- - ./gradlew check --parallel
+ - ./gradlew test --parallel
 
 after_success:
   - .buildscript/deploy_snapshot.sh
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 26d0a03149..887bbc5e04 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,45 @@
 Change Log
 ==========
 
+## Version 4.1.1
+
+_2019-09-05_
+
+ *  Fix: Don't drop repeated headers when validating cached responses. In our Kotlin upgrade we
+    introduced a regression where we iterated the number of unique header names rather than then
+    number of unique headers. If you're using OkHttp's response cache this may impact you.
+
+
+## Version 4.1.0
+
+_2019-08-12_
+
+ [brotli]: https://github.com/google/brotli
+
+ *  **OkHttp's new okhttp-brotli module implements Brotli compression.** Install the interceptor to
+    enable [Brotli compression][brotli], which compresses 5-20% smaller than gzip.
+
+    ```
+    val client = OkHttpClient.Builder()
+        .addInterceptor(BrotliInterceptor)
+        .build()
+    ```
+
+    This artifact has a dependency on Google's Brotli decoder (95 KiB).
+
+ *  New: `EventListener.proxySelectStart()`, `proxySelectEnd()` events give visibility into the
+    proxy selection process.
+ *  New: `Response.byteString()` reads the entire response into memory as a byte string.
+ *  New: `OkHttpClient.x509TrustManager` accessor.
+ *  New: Permit [new WebSocket response codes][iana_websocket]: 1012 (Service Restart), 1013 (Try
+    Again Later), and 1014 (invalid response from the upstream).
+ *  New: Build with Kotlin 1.3.41, BouncyCastle 1.62, and Conscrypt 2.2.1.
+ *  Fix: Recover gracefully when a a coalesced connection immediately goes unhealthy.
+ *  Fix: Defer the `SecurityException` when looking up the default proxy selector.
+ *  Fix: Don't use brackets formatting IPv6 host names in MockWebServer.
+ *  Fix: Don't permit cache iterators to remove entries that are being written.
+
+
 ## Version 4.0.1
 
 _2019-07-10_
@@ -50,1783 +89,11 @@ _2019-06-03_
  *  First stable preview of OkHttp 4.
 
 
-## Version 3.14.2
-
-_2019-05-19_
-
- *  Fix: Lock in a route when recovering from an HTTP/2 connection error. We had a bug where two
-    calls that failed at the same time could cause OkHttp to crash with a `NoSuchElementException`
-    instead of the expected `IOException`.
-
- *  Fix: Don't crash with a `NullPointerException` when formatting an error message describing a
-    truncated response from an HTTPS proxy.
-
-
-## Version 3.12.3
-
-_2019-05-07_
-
- *  Fix: Permit multipart file names to contain non-ASCII characters.
- *  Fix: Retain the `Route` when a connection is reused on a redirect or other follow-up. This was
-    causing some `Authenticator` calls to see a null route when non-null was expected.
-
-
-## Version 3.14.1
-
-_2019-04-10_
-
- *  Fix: Don't crash when an interceptor retries when there are no more routes. This was an
-    edge-case regression introduced with the events cleanup in 3.14.0.
-
- *  Fix: Provide actionable advice when the exchange is non-null. Prior to 3.14, OkHttp would
-    silently leak connections when an interceptor retries without closing the response body. With
-    3.14 we detect this problem but the exception was not helpful.
-
-## Version 3.14.0
-
-_2019-03-14_
-
- *  **This release deletes the long-deprecated `OkUrlFactory` and `OkApacheClient` APIs.** These
-    facades hide OkHttp's implementation behind another client's API. If you still need this please
-    copy and paste [ObsoleteUrlFactory.java][obsolete_url_factory] or
-    [ObsoleteApacheClient.java][obsolete_apache_client] into your project.
-
- *  **OkHttp now supports duplex calls over HTTP/2.** With normal HTTP calls the request must finish
-    before the response starts. With duplex, request and response bodies are transmitted
-    simultaneously. This can be used to implement interactive conversations within a single HTTP
-    call.
-
-    Create duplex calls by overriding the new `RequestBody.isDuplex()` method to return true.
-    This simple option dramatically changes the behavior of the request body and of the entire
-    call.
-
-    The `RequestBody.writeTo()` method may now retain a reference to the provided sink and
-    hand it off to another thread to write to it after `writeTo` returns.
-
-    The `EventListener` may now see requests and responses interleaved in ways not previously
-    permitted. For example, a listener may receive `responseHeadersStart()` followed by
-    `requestBodyEnd()`, both on the same call. Such events may be triggered by different threads
-    even for a single call.
-
-    Interceptors that rewrite or replace the request body may now inadvertently interfere with
-    duplex request bodies. Such interceptors should check `RequestBody.isDuplex()` and avoid
-    accessing the request body when it is.
-
-    Duplex calls require HTTP/2. If HTTP/1 is established instead the duplex call will fail. The
-    most common use of duplex calls is [gRPC][grpc_http2].
-
- *  New: Prevent OkHttp from retransmitting a request body by overriding `RequestBody.isOneShot()`.
-    This is most useful when writing the request body is destructive.
-
- *  New: We've added `requestFailed()` and `responseFailed()` methods to `EventListener`. These
-    are called instead of `requestBodyEnd()` and `responseBodyEnd()` in some failure situations.
-    They may also be fired in cases where no event was published previously. In this release we did
-    an internal rewrite of our event code to fix problems where events were lost or unbalanced.
-
- *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`
-    callback.
-
- *  Fix: Apply call timeouts when connecting duplex calls, web sockets, and server-sent events.
-    Once the streams are established no further timeout is enforced.
-
- *  Fix: Retain the `Route` when a connection is reused on a redirect or other follow-up. This was
-    causing some `Authenticator` calls to see a null route when non-null was expected.
-
- *  Fix: Use the correct key size in the name of `TLS_AES_128_CCM_8_SHA256` which is a TLS 1.3
-    cipher suite. We accidentally specified a key size of 256, preventing that cipher suite from
-    being selected for any TLS handshakes. We didn't notice because this cipher suite isn't
-    supported on Android, Java, or Conscrypt.
-
-    We removed this cipher suite and `TLS_AES_128_CCM_SHA256` from the restricted, modern, and
-    compatible sets of cipher suites. These two cipher suites aren't enabled by default in either
-    Firefox or Chrome.
-
-    See our [TLS Configuration History][tls_configuration_history] tracker for a log of all changes
-    to OkHttp's default TLS options.
-
- *  New: Upgrade to Conscrypt 2.0.0. OkHttp works with other versions of Conscrypt but this is the
-    version we're testing against.
-
-    ```kotlin
-    implementation("org.conscrypt:conscrypt-openjdk-uber:2.0.0")
-    ```
-
- *  New: Update the embedded public suffixes list.
-
-
-## Version 3.12.2
-
-_2019-03-14_
-
- *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake.
- *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`
-    callback.
-
-
-## Version 3.13.1
-
-_2019-02-05_
-
- *  Fix: Don't crash when using a custom `X509TrustManager` or `SSLSocket` on Android. When we
-    removed obsolete code for Android 4.4 we inadvertently also removed support for custom
-    subclasses. We've restored that support!
-
-
-## Version 3.13.0
-
-_2019-02-04_
-
- *  **This release bumps our minimum requirements to Java 8+ or Android 5+.** Cutting off old
-    devices is a serious change and we don't do it lightly! [This post][require_android_5] explains
-    why we're doing this and how to upgrade.
-
-    The OkHttp 3.12.x branch will be our long-term branch for Android 2.3+ (API level 9+) and Java
-    7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is
-    difficult we will backport critical fixes to the 3.12.x branch through December 31, 2020.
-
- *  **TLSv1 and TLSv1.1 are no longer enabled by default.** Major web browsers are working towards
-    removing these versions altogether in early 2020. If your servers aren't ready yet you can
-    configure OkHttp 3.13 to allow TLSv1 and TLSv1.1 connections:
-
-    ```
-    OkHttpClient client = new OkHttpClient.Builder()
-        .connectionSpecs(Arrays.asList(ConnectionSpec.COMPATIBLE_TLS))
-        .build();
-    ```
-
- *  New: You can now access HTTP trailers with `Response.trailers()`. This method may only be called
-    after the entire HTTP response body has been read.
-
- *  New: Upgrade to Okio 1.17.3. If you're on Kotlin-friendly Okio 2.x this release requires 2.2.2
-    or newer.
-
-    ```kotlin
-    implementation("com.squareup.okio:okio:1.17.3")
-    ```
-
- *  Fix: Don't miss cancels when sending HTTP/2 request headers.
- *  Fix: Don't miss whole operation timeouts when calls redirect.
- *  Fix: Don't leak connections if web sockets have malformed responses or if `onOpen()` throws.
- *  Fix: Don't retry when request bodies fail due to `FileNotFoundException`.
- *  Fix: Don't crash when URLs have IPv4-mapped IPv6 addresses.
- *  Fix: Don't crash when building `HandshakeCertificates` on Android API 28.
- *  Fix: Permit multipart file names to contain non-ASCII characters.
- *  New: API to get MockWebServer's dispatcher.
- *  New: API to access headers as `java.time.Instant`.
- *  New: Fail fast if a `SSLSocketFactory` is used as a `SocketFactory`.
- *  New: Log the TLS handshake in `LoggingEventListener`.
-
-
-## Version 3.12.1
-
-_2018-12-23_
-
- *  Fix: Remove overlapping `package-info.java`. This caused issues with some build tools.
-
-
-## Version 3.12.0
-
-_2018-11-16_
-
- *  **OkHttp now supports TLS 1.3.** This requires either Conscrypt or Java 11+.
-
- *  **Proxy authenticators are now asked for preemptive authentication.** OkHttp will now request
-    authentication credentials before creating TLS tunnels through HTTP proxies (HTTP `CONNECT`).
-    Authenticators should identify preemptive authentications by the presence of a challenge whose
-    scheme is "OkHttp-Preemptive".
-
- *  **OkHttp now offers full-operation timeouts.** This sets a limit on how long the entire call may
-    take and covers resolving DNS, connecting, writing the request body, server processing, and
-    reading the full response body. If a call requires redirects or retries all must complete within
-    one timeout period.
-
-    Use `OkHttpClient.Builder.callTimeout()` to specify the default duration and `Call.timeout()` to
-    specify the timeout of an individual call.
-
- *  New: Return values and fields are now non-null unless otherwise annotated.
- *  New: `LoggingEventListener` makes it easy to get basic visibility into a call's performance.
-    This class is in the `logging-interceptor` artifact.
- *  New: `Headers.Builder.addUnsafeNonAscii()` allows non-ASCII values to be added without an
-    immediate exception.
- *  New: Headers can be redacted in `HttpLoggingInterceptor`.
- *  New: `Headers.Builder` now accepts dates.
- *  New: OkHttp now accepts `java.time.Duration` for timeouts on Java 8+ and Android 26+.
- *  New: `Challenge` includes all authentication parameters.
- *  New: Upgrade to BouncyCastle 1.60, Conscrypt 1.4.0, and Okio 1.15.0. We don't yet require
-    Kotlin-friendly Okio 2.x but OkHttp works fine with that series.
-
-    ```kotlin
-    implementation("org.bouncycastle:bcprov-jdk15on:1.60")
-    implementation("org.conscrypt:conscrypt-openjdk-uber:1.4.0")
-    implementation("com.squareup.okio:okio:1.15.0")
-    ```
-
- *  Fix: Handle dispatcher executor shutdowns gracefully. When there aren't any threads to carry a
-    call its callback now gets a `RejectedExecutionException`.
- *  Fix: Don't permanently cache responses with `Cache-Control: immutable`. We misunderstood the
-    original `immutable` proposal!
- *  Fix: Change `Authenticator`'s `Route` parameter to be nullable. This was marked as non-null but
-    could be called with null in some cases.
- *  Fix: Don't create malformed URLs when `MockWebServer` is reached via an IPv6 address.
- *  Fix: Don't crash if the system default authenticator is null.
- *  Fix: Don't crash generating elliptic curve certificates on Android.
- *  Fix: Don't crash doing platform detection on RoboVM.
- *  Fix: Don't leak socket connections when web socket upgrades fail.
-
-
-## Version 3.11.0
-
-_2018-07-12_
-
- *  **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**
-
-    `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its
-    builder then use it to sign another certificate or perform a TLS handshake. The
-    `certificatePem()` method encodes the certificate in the familiar PEM format
-    (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key.
-
-    `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server
-    it keeps your `HeldCertificate` and its chain. On the client it keeps the root certificates
-    that are trusted to sign a server's certificate chain. `HandshakeCertificates` also works with
-    mutual TLS where these roles are reversed.
-
-    These classes make it possible to enable HTTPS in MockWebServer in [just a few lines of
-    code][https_server_sample].
-
- *  **OkHttp now supports prior knowledge cleartext HTTP/2.** Enable this by setting
-    `Protocol.H2_PRIOR_KNOWLEDGE` as the lone protocol on an `OkHttpClient.Builder`. This mode
-    only supports `http:` URLs and is best suited in closed environments where HTTPS is
-    inappropriate.
-
- *  New: `HttpUrl.get(String)` is an alternative to `HttpUrl.parse(String)` that throws an exception
-    when the URL is malformed instead of returning null. Use this to avoid checking for null in
-    situations where the input is known to be well-formed. We've also added `MediaType.get(String)`
-    which is an exception-throwing alternative to `MediaType.parse(String)`.
- *  New: The `EventListener` API previewed in OkHttp 3.9 has graduated to a stable API. Use this
-    interface to track metrics and monitor HTTP requests' size and duration.
- *  New: `okhttp-dnsoverhttps` is an experimental API for doing DNS queries over HTTPS. Using HTTPS
-    for DNS offers better security and potentially better performance. This feature is a preview:
-    the API is subject to change.
- *  New: `okhttp-sse` is an early preview of Server-Sent Events (SSE). This feature is incomplete
-    and is only suitable for experimental use.
- *  New: MockWebServer now supports client authentication (mutual TLS). Call `requestClientAuth()`
-    to permit an optional client certificate or `requireClientAuth()` to require one.
- *  New: `RecordedRequest.getHandshake()` returns the HTTPS handshake of a request sent to
-    `MockWebServer`.
- *  Fix: Honor the `MockResponse` header delay in MockWebServer.
- *  Fix: Don't release HTTP/2 connections that have multiple canceled calls. We had a bug where
-    canceling calls would cause the shared HTTP/2 connection to be unnecessarily released. This
-    harmed connection reuse.
- *  Fix: Ensure canceled and discarded HTTP/2 data is not permanently counted against the limited
-    flow control window. We had a few bugs where window size accounting was broken when streams
-    were canceled or reset.
- *  Fix: Recover gracefully if the TLS session returns an unexpected version (`NONE`) or cipher
-    suite (`SSL_NULL_WITH_NULL_NULL`).
- *  Fix: Don't change Conscrypt configuration globally. We migrated from a process-wide setting to
-    configuring only OkHttp's TLS sockets.
- *  Fix: Prefer TLSv1.2 where it is available. On certain older platforms it is necessary to opt-in
-    to TLSv1.2.
- *  New: `Request.tag()` permits multiple tags. Use a `Class<?>` as a key to identify tags. Note
-    that `tag()` now returns null if the request has no tag. Previously this would return the
-    request itself.
- *  New: `Headers.Builder.addAll(Headers)`.
- *  New: `ResponseBody.create(MediaType, ByteString)`.
- *  New: Embed R8/ProGuard rules in the jar. These will be applied automatically by R8.
- *  Fix: Release the connection if `Authenticator` throws an exception.
- *  Fix: Change the declaration of `OkHttpClient.cache()` to return a `@Nullable Cache`. The return
-    value has always been nullable but it wasn't declared properly.
- *  Fix: Reverse suppression of connect exceptions. When both a call and its retry fail, we now
-    throw the initial exception which is most likely to be actionable.
- *  Fix: Retain interrupted state when throwing `InterruptedIOException`. A single interrupt should
-    now be sufficient to break out an in-flight OkHttp call.
- *  Fix: Don't drop a call to `EventListener.callEnd()` when the response body is consumed inside an
-    interceptor.
-
-
-## Version 3.10.0
-
-_2018-02-24_
-
- *  **The pingInterval() feature now aggressively checks connectivity for web
-    sockets and HTTP/2 connections.**
-
-    Previously if you configured a ping interval that would cause OkHttp to send
-    pings, but it did not track whether the reply pongs were received. With this
-    update OkHttp requires that every ping receive a response: if it does not
-    the connection will be closed and the listener's `onFailure()` method will
-    be called.
-
-    Web sockets have always been had pings, but pings on HTTP/2 connections is
-    new in this release. Pings are used for connections that are busy carrying
-    calls and for idle connections in the connection pool. (Pings do not impact
-    when pooled connections are evicted).
-
-    If you have a configured ping interval, you should confirm that it is long
-    enough for a roundtrip from client to server. If your ping interval is too
-    short, slow connections may be misinterpreted as failed connections. A ping
-    interval of 30 seconds is reasonable for most use cases.
-
- *  **OkHttp now supports [Conscrypt][conscrypt].** Conscrypt is a Java Security
-    Provider that integrates BoringSSL into the Java platform. Conscrypt
-    supports more cipher suites than the JVM’s default provider and may also
-    execute more efficiently.
-
-    To use it, first register a [Conscrypt dependency][conscrypt_dependency] in
-    your build system.
-
-    OkHttp will use Conscrypt if you set the `okhttp.platform` system property
-    to `conscrypt`.
-
-    Alternatively, OkHttp will also use Conscrypt if you install it as your
-    preferred security provider. To do so, add the following code to execute
-    before you create your `OkHttpClient`.
-
-    ```
-    Security.insertProviderAt(
-        new org.conscrypt.OpenSSLProvider(), 1);
-    ```
-
-    Conscrypt is the bundled security provider on Android so it is not necessary
-    to configure it on that platform.
-
- *  New: `HttpUrl.addQueryParameter()` percent-escapes more characters.
-    Previously several ASCII punctuation characters were not percent-escaped
-    when used with this method. This does not impact already-encoded query
-    parameters in APIs like `HttpUrl.parse()` and
-    `HttpUrl.Builder.addEncodedQueryParameter()`.
- *  New: CBC-mode ECDSA cipher suites have been removed from OkHttp's default
-    configuration: `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA` and
-    `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`. This tracks a [Chromium
-    change][remove_cbc_ecdsa] to remove these cipher suites because they are
-    fragile and rarely-used.
- *  New: Don't fall back to common name (CN) verification for hostnames. This
-    behavior was deprecated with RFC 2818 in May 2000 and was recently dropped
-    from major web browsers.
- *  New: Honor the `Retry-After` response header. HTTP 503 (Unavailable)
-    responses are retried automatically if this header is present and its delay
-    is 0 seconds. HTTP 408 (Client Timeout) responses are retried automatically
-    if the header is absent or its delay is 0 seconds.
- *  New: Allow request bodies for all HTTP methods except GET and HEAD.
- *  New: Automatic module name of `okhttp3` for use with the Java Platform
-    Module System.
- *  New: Log gzipped bodies when `HttpLoggingInterceptor` is used as a network
-    interceptor.
- *  New: `Protocol.QUIC` constant. This protocol is not supported but this
-    constant is included for completeness.
- *  New: Upgrade to Okio 1.14.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.14.0</version>
-     </dependency>
-
-     com.squareup.okio:okio:1.14.0
-     ```
-
- *  Fix: Handle `HTTP/1.1 100 Continue` status lines, even on requests that did
-    not send the `Expect: continue` request header.
- *  Fix: Do not count web sockets toward the dispatcher's per-host connection
-    limit.
- *  Fix: Avoid using invalid HTTPS sessions. This prevents OkHttp from crashing
-    with the error, `Unexpected TLS version: NONE`.
- *  Fix: Don't corrupt the response cache when a 304 (Not Modified) response
-    overrides the stored "Content-Encoding" header.
- *  Fix: Gracefully shut down the HTTP/2 connection before it exhausts the
-    namespace of stream IDs (~536 million streams).
- *  Fix: Never pass a null `Route` to `Authenticator`. There was a bug where
-    routes were omitted for eagerly-closed connections.
-
-## Version 3.9.1
-
-_2017-11-18_
-
- *  New: Recover gracefully when Android's DNS crashes with an unexpected
-    `NullPointerException`.
- *  New: Recover gracefully when Android's socket connections crash with an
-    unexpected `ClassCastException`.
- *  Fix: Don't include the URL's fragment in `encodedQuery()` when the query
-    itself is empty.
-
-## Version 3.9.0
-
-_2017-09-03_
-
- *  **Interceptors are more capable.** The `Chain` interface now offers access
-    to the call and can adjust all call timeouts. Note that this change is
-    source-incompatible for code that implements the `Chain` interface.
-    We don't expect this to be a problem in practice!
-
- *  **OkHttp has an experimental new API for tracking metrics.** The new
-    `EventListener` API is designed to help developers monitor HTTP requests'
-    size and duration. This feature is an unstable preview: the API is subject
-    to change, and the implementation is incomplete. This is a big new API we
-    are eager for feedback.
-
- *  New: Support ALPN via Google Play Services' Dynamic Security Provider. This
-    expands HTTP/2 support to older Android devices that have Google Play
-    Services.
- *  New: Consider all routes when looking for candidate coalesced connections.
-    This increases the likelihood that HTTP/2 connections will be shared.
- *  New: Authentication challenges and credentials now use a charset. Use this in
-    your authenticator to support user names and passwords with non-ASCII
-    characters.
- *  New: Accept a charset in `FormBody.Builder`. Previously form bodies were
-    always UTF-8.
- *  New: Support the `immutable` cache-control directive.
- *  Fix: Don't crash when an HTTP/2 call is redirected while the connection is
-    being shut down.
- *  Fix: Don't drop headers of healthy streams that raced with `GOAWAY` frames.
-    This bug would cause HTTP/2 streams to occasional hang when the connection
-    was shutting down.
- *  Fix: Honor `OkHttpClient.retryOnConnectionFailure()` when the response is a
-    HTTP 408 Request Timeout. If retries are enabled, OkHttp will retry exactly
-    once in response to a 408.
- *  Fix: Don't crash when reading the empty `HEAD` response body if it specifies
-    a `Content-Length`.
- *  Fix: Don't crash if the thread is interrupted while reading the public
-    suffix database.
- *  Fix: Use relative resource path when loading the public suffix database.
-    Loading the resource using a path relative to the class prevents conflicts
-    when the OkHttp classes are relocated (shaded) by allowing multiple private
-    copies of the database.
- *  Fix: Accept cookies for URLs that have an IPv6 address for a host.
- *  Fix: Don't log the protocol (HTTP/1.1, h2) in HttpLoggingInterceptor if the
-    protocol isn't negotiated yet! Previously we'd log HTTP/1.1 by default, and
-    this was confusing.
- *  Fix: Omit the message from MockWebServer's HTTP/2 `:status` header.
- *  Fix: Handle 'Expect: 100 Continue' properly in MockWebServer.
-
-
-## Version 3.8.1
-
-_2017-06-18_
-
- *  Fix: Recover gracefully from stale coalesced connections. We had a bug where
-    connection coalescing (introduced in OkHttp 3.7.0) and stale connection
-    recovery could interact to cause a `NoSuchElementException` crash in the
-    `RouteSelector`.
-
-
-## Version 3.8.0
-
-_2017-05-13_
-
-
- *  **OkHttp now uses `@Nullable` to annotate all possibly-null values.** We've
-    added a compile-time dependency on the JSR 305 annotations. This is a
-    [provided][maven_provided] dependency and does not need to be included in
-    your build configuration, `.jar` file, or `.apk`. We use
-    `@ParametersAreNonnullByDefault` and all parameters and return types are
-    never null unless explicitly annotated `@Nullable`.
-
- *  **Warning: this release is source-incompatible for Kotlin users.**
-    Nullability was previously ambiguous and lenient but now the compiler will
-    enforce strict null checks.
-
- *  New: The response message is now non-null. This is the "Not Found" in the
-    status line "HTTP 404 Not Found". If you are building responses
-    programmatically (with `new Response.Builder()`) you must now always supply
-    a message. An empty string `""` is permitted. This value was never null on
-    responses returned by OkHttp itself, and it was an old mistake to permit
-    application code to omit a message.
-
- *  The challenge's scheme and realm are now non-null. If you are calling
-    `new Challenge(scheme, realm)` you must provide non-null values. These were
-    never null in challenges created by OkHttp, but could have been null in
-    application code that creates challenges.
-
- *  New: The `TlsVersion` of a `Handshake` is now non-null. If you are calling
-    `Handshake.get()` with a null TLS version, you must instead now provide a
-    non-null `TlsVersion`. Cache responses persisted prior to OkHttp 3.0 did not
-    store a TLS version; for these unknown values the handshake is defaulted to
-    `TlsVersion.SSL_3_0`.
-
- *  New: Upgrade to Okio 1.13.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.13.0</version>
-     </dependency>
-
-     com.squareup.okio:okio:1.13.0
-     ```
-
- *  Fix: gracefully recover when Android 7.0's sockets throw an unexpected
-    `NullPointerException`.
-
-## Version 3.7.0
-
-_2017-04-15_
-
- *  **OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection.**
-    The fallback was necessary for servers that implemented version negotiation incorrectly. Now
-    that 99.99% of servers do it right this fallback is obsolete.
- *  Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject
-    cookies on top-level domains like `co.uk` because our cookie parser didn't honor the [public
-    suffix][public_suffix] list. Alongside this fix is a new API, `HttpUrl.topPrivateDomain()`,
-    which returns the privately domain name if the URL has one.
- *  Fix: Change `MediaType.charset()` to return null for unexpected charsets.
- *  Fix: Don't skip cache invalidation if the invalidating response has no body.
- *  Fix: Don't use a cryptographic random number generator for web sockets. Some Android devices
-    implement `SecureRandom` incorrectly!
- *  Fix: Correctly canonicalize IPv6 addresses in `HttpUrl`. This prevented OkHttp from trusting
-    HTTPS certificates issued to certain IPv6 addresses.
- *  Fix: Don't reuse connections after an unsuccessful `Expect: 100-continue`.
- *  Fix: Handle either `TLS_` or `SSL_` prefixes for cipher suite names. This is necessary for
-    IBM JVMs that use the `SSL_` prefix exclusively.
- *  Fix: Reject HTTP/2 data frames if the stream ID is 0.
- *  New: Upgrade to Okio 1.12.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.12.0</version>
-     </dependency>
-
-     com.squareup.okio:okio:1.12.0
-     ```
-
- *  New: Connection coalescing. OkHttp may reuse HTTP/2 connections across calls that share an IP
-    address and HTTPS certificate, even if their domain names are different.
- *  New: MockWebServer's `RecordedRequest` exposes the requested `HttpUrl` with `getRequestUrl()`.
-
-
-## Version 3.6.0
-
-_2017-01-29_
-
- *  Fix: Don't crash with a "cache is closed" error when there is an error initializing the cache.
- *  Fix: Calling `disconnect()` on a connecting `HttpUrlConnection` could cause it to retry in an
-    infinite loop! This regression was introduced in OkHttp 2.7.0.
- *  Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies
-    would cause OkHttp to crash when they were included in a request.
- *  Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an
-    HTTP/2 server, close all but the first connection.
- *  Fix: Fail the HTTP/2 connection if first frame isn't `SETTINGS`.
- *  Fix: Forbid spaces in header names.
- *  Fix: Don't offer to do gzip if the request is partial.
- *  Fix: MockWebServer is now usable with JUnit 5. That update [broke the rules][junit_5_rules].
- *  New: Support `Expect: 100-continue` as a request header. Callers can use this header to
-    pessimistically hold off on transmitting a request body until a server gives the go-ahead.
- *  New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible
-    to do domain fronting.
- *  New: charset support for `Credentials.basic()`.
-
-
-## Version 3.5.0
-
-_2016-11-30_
-
- *  **Web Sockets are now a stable feature of OkHttp.** Since being introduced as a beta feature in
-    OkHttp 2.3 our web socket client has matured. Connect to a server's web socket with
-    `OkHttpClient.newWebSocket()`, send messages with `send()`, and receive messages with the
-    `WebSocketListener`.
-
-    The `okhttp-ws` submodule is no longer available and `okhttp-ws` artifacts from previous
-    releases of OkHttp are not compatible with OkHttp 3.5. When upgrading to the new package
-    please note that the `WebSocket` and `WebSocketCall` classes have been merged. Sending messages
-    is now asynchronous and they may be enqueued before the web socket is connected.
-
- *  **OkHttp no longer attempts a direct connection if the system's HTTP proxy fails.** This
-    behavior was surprising because OkHttp was disregarding the user's specified configuration. If
-    you need to customize proxy fallback behavior, implement your own `java.net.ProxySelector`.
-
- *  Fix: Support TLSv1.3 on devices that support it.
-
- *  Fix: Share pooled connections across equivalent `OkHttpClient` instances. Previous releases had
-    a bug where a shared connection pool did not guarantee shared connections in some cases.
- *  Fix: Prefer the server's response body on all conditional cache misses. Previously we would
-    return the cached response's body if it had a newer `Last-Modified` date.
- *  Fix: Update the stored timestamp on conditional cache hits.
- *  New: Optimized HTTP/2 request header encoding. More headers are HPACK-encoded and string
-    literals are now Huffman-encoded.
- *  New: Expose `Part` headers and body in `Multipart`.
- *  New: Make `ResponseBody.string()` and `ResponseBody.charStream()` BOM-aware. If your HTTP
-    response body begins with a [byte order mark][bom] it will be consumed and used to select a
-    charset for the remaining bytes. Most applications should not need a byte order mark.
-
- *  New: Upgrade to Okio 1.11.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.11.0</version>
-     </dependency>
-
-     com.squareup.okio:okio:1.11.0
-     ```
-
- *  Fix: Avoid sending empty HTTP/2 data frames when there is no request body.
- *  Fix: Add a leading `.` for better domain matching in `JavaNetCookieJar`.
- *  Fix: Gracefully recover from HTTP/2 connection shutdowns at start of request.
- *  Fix: Be lenient if a `MediaType`'s character set is `'single-quoted'`.
- *  Fix: Allow horizontal tab characters in header values.
- *  Fix: When parsing HTTP authentication headers permit challenge parameters in any order.
-
-
-## Version 3.4.2
-
-_2016-11-03_
-
- *  Fix: Recover gracefully when an HTTP/2 connection is shutdown. We had a
-    bug where shutdown HTTP/2 connections were considered usable. This caused
-    infinite loops when calls attempted to recover.
-
-
-## Version 3.4.1
-
-_2016-07-10_
-
- *  **Fix a major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp
-    had an off-by-one bug in our HPACK encoder. This bug could have caused the
-    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone
-    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix.
-
-
-## Version 3.4.0
-
-_2016-07-08_
-
- *  New: Support dynamic table size changes to HPACK Encoder.
- *  Fix: Use `TreeMap` in `Headers.toMultimap()`. This makes string lookups on
-    the returned map case-insensitive.
- *  Fix: Don't share the OkHttpClient's `Dispatcher` in `HttpURLConnection`.
-
-
-## Version 3.4.0-RC1
-
-_2016-07-02_
-
- *  **We’ve rewritten HttpURLConnection and HttpsURLConnection.** Previously we
-    shared a single HTTP engine between two frontend APIs: `HttpURLConnection`
-    and `Call`. With this release we’ve rearranged things so that the
-    `HttpURLConnection` frontend now delegates to the `Call` APIs internally.
-    This has enabled substantial simplifications and optimizations in the OkHttp
-    core for both frontends.
-
-    For most HTTP requests the consequences of this change will be negligible.
-    If your application uses `HttpURLConnection.connect()`,
-    `setFixedLengthStreamingMode()`, or `setChunkedStreamingMode()`, OkHttp will
-    now use a async dispatcher thread to establish the HTTP connection.
-
-    We don’t expect this change to have any behavior or performance
-    consequences. Regardless, please exercise your `OkUrlFactory` and
-    `HttpURLConnection` code when applying this update.
-
- *  **Cipher suites may now have arbitrary names.** Previously `CipherSuite` was
-    a Java enum and it was impossible to define new cipher suites without first
-    upgrading OkHttp. With this change it is now a regular Java class with
-    enum-like constants. Application code that uses enum methods on cipher
-    suites (`ordinal()`, `name()`, etc.) will break with this change.
-
- *  Fix: `CertificatePinner` now matches canonicalized hostnames. Previously
-    this was case sensitive. This change should also make it easier to configure
-    certificate pinning for internationalized domain names.
- *  Fix: Don’t crash on non-ASCII `ETag` headers. Previously OkHttp would reject
-    these headers when validating a cached response.
- *  Fix: Don’t allow remote peer to arbitrarily size the HPACK decoder dynamic
-    table.
- *  Fix: Honor per-host configuration in Android’s network security config.
-    Previously disabling cleartext for any host would disable cleartext for all
-    hosts. Note that this setting is only available on Android 24+.
- *  New: HPACK compression is now dynamic. This should improve performance when
-    transmitting request headers over HTTP/2.
- *  New: `Dispatcher.setIdleCallback()` can be used to signal when there are no
-    calls in flight. This is useful for [testing with
-    Espresso][okhttp_idling_resource].
- *  New: Upgrade to Okio 1.9.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.9.0</version>
-     </dependency>
-     ```
-
-
-## Version 3.3.1
-
-_2016-05-28_
-
- *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified
-    newline characters as control characters. This is fixed.
- *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached
-    HTTP headers.
- *  Fix: Retain the response body when an attempt to open a web socket returns a
-    non-101 response code.
-
-
-## Version 3.3.0
-
-_2016-05-24_
-
- *  New: `Response.sentRequestAtMillis()` and `receivedResponseAtMillis()`
-    methods track the system's local time when network calls are made. These
-    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were
-    present in earlier versions of OkHttp.
- *  New: Accept user-provided trust managers in `OkHttpClient.Builder`. This
-    allows OkHttp to satisfy its TLS requirements directly. Otherwise OkHttp
-    will use reflection to extract the `TrustManager` from the
-    `SSLSocketFactory`.
- *  New: Support prerelease Java 9. This gets ALPN from the platform rather than
-    relying on the alpn-boot bootclasspath override.
- *  New: `HttpLoggingInterceptor` now logs connection failures.
- *  New: Upgrade to Okio 1.8.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.8.0</version>
-     </dependency>
-     ```
-
- *  Fix: Gracefully recover from a failure to rebuild the cache journal.
- *  Fix: Don't corrupt cache entries when a cache entry is evicted while it is
-    being updated.
- *  Fix: Make logging more consistent throughout OkHttp.
- *  Fix: Log plaintext bodies only. This uses simple heuristics to differentiate
-    text from other data.
- *  Fix: Recover from `REFUSED_STREAM` errors in HTTP/2. This should improve
-    interoperability with Nginx 1.10.0, which [refuses][nginx_959] streams
-    created before HTTP/2 settings have been acknowledged.
- *  Fix: Improve recovery from failed routes.
- *  Fix: Accommodate tunneling proxies that close the connection after an auth
-    challenge.
- *  Fix: Use the proxy authenticator when authenticating HTTP proxies. This
-    regression was introduced in OkHttp 3.0.
- *  Fix: Fail fast if network interceptors transform the response body such that
-    closing it doesn't also close the underlying stream. We had a bug where
-    OkHttp would attempt to reuse a connection but couldn't because it was still
-    held by a prior request.
- *  Fix: Ensure network interceptors always have access to the underlying
-    connection.
- *  Fix: Use `X509TrustManagerExtensions` on Android 17+.
- *  Fix: Unblock waiting dispatchers on MockWebServer shutdown.
-
-
-## Version 3.2.0
-
-_2016-02-25_
-
- *  Fix: Change the certificate pinner to always build full chains. This
-    prevents a potential crash when using certificate pinning with the Google
-    Play Services security provider.
- *  Fix: Make IPv6 request lines consistent with Firefox and Chrome.
- *  Fix: Recover gracefully when trimming the response cache fails.
- *  New: Add multiple path segments using a single string in `HttpUrl.Builder`.
- *  New: Support SHA-256 pins in certificate pinner.
-
-
-## Version 3.1.2
-
-_2016-02-10_
-
- *  Fix: Don’t crash when finding the trust manager on Robolectric. We attempted
-    to detect the host platform and got confused because Robolectric looks like
-    Android but isn’t!
- *  Fix: Change `CertificatePinner` to skip sanitizing the certificate chain
-    when no certificates were pinned. This avoids an SSL failure in insecure
-    “trust everyone” configurations, such as when talking to a development
-    HTTPS server that has a self-signed certificate.
-
-
-## Version 3.1.1
-
-_2016-02-07_
-
- *  Fix: Don't crash when finding the trust manager if the Play Services (GMS)
-    security provider is installed.
- *  Fix: The previous release introduced a performance regression on Android,
-    caused by looking up CA certificates. This is now fixed.
-
-
-## Version 3.1.0
-
-_2016-02-06_
-
- *  New: WebSockets now defer some writes. This should improve performance for
-    some applications.
- *  New: Override `equals()` and `hashCode()` in our new cookie class. This
-    class now defines equality by value rather than by reference.
- *  New: Handle 408 responses by retrying the request. This allows servers to
-    direct clients to retry rather than failing permanently.
- *  New: Expose the framed protocol in `Connection`. Previously this would
-    return the application-layer protocol (HTTP/1.1 or HTTP/1.0); now it always
-    returns the wire-layer protocol (HTTP/2, SPDY/3.1, or HTTP/1.1).
- *  Fix: Permit the trusted CA root to be pinned by `CertificatePinner`.
- *  Fix: Silently ignore unknown HTTP/2 settings. Previously this would cause
-    the entire connection to fail.
- *  Fix: Don’t crash on unexpected charsets in the logging interceptor.
- *  Fix: `OkHttpClient` is now non-final for the benefit of mocking frameworks.
-    Mocking sophisticated classes like `OkHttpClient` is fragile and you
-    shouldn’t do it. But if that’s how you want to live your life we won’t stand
-    in your way!
-
-
-## Version 3.0.1
-
-_2016-01-14_
-
- *  Rollback OSGi support. This was causing library jars to include more classes
-    than expected, which interfered with Gradle builds.
-
-
-## Version 3.0.0
-
-_2016-01-13_
-
-This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice
-on upgrading from 2.x to 3.x.
-
- *  **The `Callback` interface now takes a `Call`**. This makes it easier to
-    check if the call was canceled from within the callback. When migrating
-    async calls to this new API, `Call` is now the first parameter for both
-    `onResponse()` and `onFailure()`.
- *  Fix: handle multiple cookies in `JavaNetCookieJar` on Android.
- *  Fix: improve the default HTTP message in MockWebServer responses.
- *  Fix: don't leak file handles when a conditional GET throws.
- *  Fix: Use charset specified by the request body content type in OkHttp's
-    logging interceptor.
- *  Fix: Don't eagerly release pools on cache hits.
- *  New: Make OkHttp OSGi ready.
- *  New: Add already-implemented interfaces Closeable and Flushable to the cache.
-
-## Version 3.0.0-RC1
-
-_2016-01-02_
+## Version 3.x
 
-OkHttp 3 is a major release focused on API simplicity and consistency. The API
-changes are numerous but most are cosmetic. Applications should be able to
-upgrade from the 2.x API to the 3.x API mechanically and without risk.
+[Change log](http://square.github.io/okhttp/changelog_3x/)
 
-Because the release includes breaking API changes, we're changing the project's
-package name from `com.squareup.okhttp` to `okhttp3`. This should make it
-possible for large applications to migrate incrementally. The Maven group ID
-is now `com.squareup.okhttp3`. For an explanation of this strategy, see Jake
-Wharton's post, [Java Interoperability Policy for Major Version
-Updates][major_versions].
 
-This release obsoletes OkHttp 2.x, and all code that uses OkHttp's
-`com.squareup.okhttp` package should upgrade to the `okhttp3` package. Libraries
-that depend on OkHttp should upgrade quickly to prevent applications from being
-stuck on the old version.
-
- *  **There is no longer a global singleton connection pool.** In OkHttp 2.x,
-    all `OkHttpClient` instances shared a common connection pool by default.
-    In OkHttp 3.x, each new `OkHttpClient` gets its own private connection pool.
-    Applications should avoid creating many connection pools as doing so
-    prevents connection reuse. Each connection pool holds its own set of
-    connections alive so applications that have many pools also risk exhausting
-    memory!
-
-    The best practice in OkHttp 3 is to create a single OkHttpClient instance
-    and share it throughout the application. Requests that needs a customized
-    client should call `OkHttpClient.newBuilder()` on that shared instance.
-    This allows customization without the drawbacks of separate connection
-    pools.
-
- *  **OkHttpClient is now stateless.** In the 2.x API `OkHttpClient` had getters
-    and setters. Internally each request was forced to make its own complete
-    snapshot of the `OkHttpClient` instance to defend against racy configuration
-    changes. In 3.x, `OkHttpClient` is now stateless and has a builder. Note
-    that this class is not strictly immutable as it has stateful members like
-    the connection pool and cache.
-
- *  **Get and Set prefixes are now avoided.** With ubiquitous builders
-    throughout OkHttp these accessor prefixes aren't necessary. Previously
-    OkHttp used _get_ and _set_ prefixes sporadically which make the API
-    inconsistent and awkward to explore.
-
- *  **OkHttpClient now implements the new `Call.Factory` interface.** This
-    interface will make your code easier to test. When you test code that makes
-    HTTP requests, you can use this interface to replace the real `OkHttpClient`
-    with your own mocks or fakes.
-
-    The interface will also let you use OkHttp's API with another HTTP client's
-    implementation. This is useful in sandboxed environments like Google App
-    Engine.
-
- *  **OkHttp now does cookies.** We've replaced `java.net.CookieHandler` with
-    a new interface, `CookieJar` and added our own `Cookie` model class. This
-    new cookie follows the latest RFC and supports the same cookie attributes
-    as modern web browsers.
-
- *  **Form and Multipart bodies are now modeled.** We've replaced the opaque
-    `FormEncodingBuilder` with the more powerful `FormBody` and
-    `FormBody.Builder` combo. Similarly we've upgraded `MultipartBuilder` into
-    `MultipartBody`, `MultipartBody.Part`, and `MultipartBody.Builder`.
-
- *  **The Apache HTTP client and HttpURLConnection APIs are deprecated.** They
-    continue to work as they always have, but we're moving everything to the new
-    OkHttp 3 API. The `okhttp-apache` and `okhttp-urlconnection` modules should
-    be only be used to accelerate a transition to OkHttp's request/response API.
-    These deprecated modules will be dropped in an upcoming OkHttp 3.x release.
-
- *  **Canceling batches of calls is now the application's responsibility.**
-    The API to cancel calls by tag has been removed and replaced with a more
-    general mechanism. The dispatcher now exposes all in-flight calls via its
-    `runningCalls()` and `queuedCalls()` methods. You can write code that
-    selects calls by tag, host, or whatever, and invokes `Call.cancel()` on the
-    ones that are no longer necessary.
-
- *  **OkHttp no longer uses the global `java.net.Authenticator` by default.**
-    We've changed our `Authenticator` interface to authenticate web and proxy
-    authentication failures through a single method. An adapter for the old
-    authenticator is available in the `okhttp-urlconnection` module.
-
- *  Fix: Don't throw `IOException` on `ResponseBody.contentLength()` or `close()`.
- *  Fix: Never throw converting an `HttpUrl` to a `java.net.URI`. This changes
-    the `uri()` method to handle malformed percent-escapes and characters
-    forbidden by `URI`.
- *  Fix: When a connect times out, attempt an alternate route. Previously route
-    selection was less efficient when differentiating failures.
- *  New: `Response.peekBody()` lets you access the response body without
-    consuming it. This may be handy for interceptors!
- *  New: `HttpUrl.newBuilder()` resolves a link to a builder.
- *  New: Add the TLS version to the `Handshake`.
- *  New: Drop `Request.uri()` and `Request#urlString()`. Just use
-    `Request.url().uri()` and `Request.url().toString()`.
- *  New: Add URL to HTTP response logging.
- *  New: Make `HttpUrl` the blessed URL method of `Request`.
-
-
-## Version 2.7.5
-
-_2016-02-25_
-
- *  Fix: Change the certificate pinner to always build full chains. This
-    prevents a potential crash when using certificate pinning with the Google
-    Play Services security provider.
-
-
-## Version 2.7.4
-
-_2016-02-07_
-
- *  Fix: Don't crash when finding the trust manager if the Play Services (GMS)
-    security provider is installed.
- *  Fix: The previous release introduced a performance regression on Android,
-    caused by looking up CA certificates. This is now fixed.
-
-
-## Version 2.7.3
-
-_2016-02-06_
-
- *  Fix: Permit the trusted CA root to be pinned by `CertificatePinner`.
-
-
-## Version 2.7.2
-
-_2016-01-07_
-
- *  Fix: Don't eagerly release stream allocations on cache hits. We might still
-    need them to handle redirects.
-
-
-## Version 2.7.1
-
-_2016-01-01_
-
- *  Fix: Don't do a health check on newly-created connections. This is
-    unnecessary work that could put the client in an inconsistent state if the
-    health check fails.
-
-
-## Version 2.7.0
-
-_2015-12-13_
-
- *  **Rewritten connection management.** Previously OkHttp's connection pool
-    managed both idle and active connections for HTTP/2, but only idle
-    connections for HTTP/1.x. With this update the connection pool manages both
-    idle and active connections for everything. OkHttp now detects and warns on
-    connections that were allocated but never released, and will enforce HTTP/2
-    stream limits. This update also fixes `Call.cancel()` to not do I/O on the
-    calling thread.
- *  Fix: Don't log gzipped data in the logging interceptor.
- *  Fix: Don't resolve DNS addresses when connecting through a SOCKS proxy.
- *  Fix: Drop the synthetic `OkHttp-Selected-Protocol` response header.
- *  Fix: Support 204 and 205 'No Content' replies in the logging interceptor.
- *  New: Add `Call.isExecuted()`.
-
-
-## Version 2.6.0
-
-_2015-11-22_
-
- *  **New Logging Interceptor.** The `logging-interceptor` subproject offers
-    simple request and response logging. It may be configured to log headers and
-    bodies for debugging. It requires this Maven dependency:
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okhttp</groupId>
-       <artifactId>logging-interceptor</artifactId>
-       <version>2.6.0</version>
-     </dependency>
-     ```
-
-    Configure basic logging like this:
-
-    ```java
-    HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
-    loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);
-    client.networkInterceptors().add(loggingInterceptor);
-    ```
-
-    **Warning:** Avoid `Level.HEADERS` and `Level.BODY` in production because
-    they could leak passwords and other authentication credentials to insecure
-    logs.
-
- *  **WebSocket API now uses `RequestBody` and `ResponseBody` for messages.**
-    This is a backwards-incompatible API change.
-
- *  **The DNS service is now pluggable.** In some situations this may be useful
-    to manually prioritize specific IP addresses.
-
- *  Fix: Don't throw when converting an `HttpUrl` to a `java.net.URI`.
-    Previously URLs with special characters like `|` and `[` would break when
-    subjected to URI’s overly-strict validation.
- *  Fix: Don't re-encode `+` as `%20` in encoded URL query strings. OkHttp
-    prefers `%20` when doing its own encoding, but will retain `+` when that is
-    provided.
- *  Fix: Enforce that callers call `WebSocket.close()` on IO errors. Error
-    handling in WebSockets is significantly improved.
- *  Fix: Don't use SPDY/3 style header concatenation for HTTP/2 request headers.
-    This could have corrupted requests where multiple headers had the same name,
-    as in cookies.
- *  Fix: Reject bad characters in the URL hostname. Previously characters like
-    `\0` would cause a late crash when building the request.
- *  Fix: Allow interceptors to change the request method.
- *  Fix: Don’t use the request's `User-Agent` or `Proxy-Authorization` when
-    connecting to an HTTPS server via an HTTP tunnel. The `Proxy-Authorization`
-    header was being leaked to the origin server.
- *  Fix: Digits may be used in a URL scheme.
- *  Fix: Improve connection timeout recovery.
- *  Fix: Recover from `getsockname` crashes impacting Android releases prior to
-    4.2.2.
- *  Fix: Drop partial support for HTTP/1.0. Previously OkHttp would send
-    `HTTP/1.0` on connections after seeing a response with `HTTP/1.0`. The fixed
-    behavior is consistent with Firefox and Chrome.
- *  Fix: Allow a body in `OPTIONS` requests.
- *  Fix: Don't percent-encode non-ASCII characters in URL fragments.
- *  Fix: Handle null fragments.
- *  Fix: Don’t crash on interceptors that throw `IOException` before a
-    connection is attempted.
- *  New: Support [WebDAV][webdav] HTTP methods.
- *  New: Buffer WebSocket frames for better performance.
- *  New: Drop support for `TLS_DHE_DSS_WITH_AES_128_CBC_SHA`, our only remaining
-    DSS cipher suite. This is consistent with Firefox and Chrome which have also
-    dropped these cipher suite.
-
-## Version 2.5.0
-
-_2015-08-25_
-
- *  **Timeouts now default to 10 seconds.** Previously we defaulted to never
-    timing out, and that was a lousy policy. If establishing a connection,
-    reading the next byte from a connection, or writing the next byte to a
-    connection takes more than 10 seconds to complete, you’ll need to adjust
-    the timeouts manually.
-
- *  **OkHttp now rejects request headers that contain invalid characters.** This
-    includes potential security problems (newline characters) as well as simple
-    non-ASCII characters (including international characters and emoji).
-
- *  **Call canceling is more reliable.**  We had a bug where a socket being
-     connected wasn't being closed when the application used `Call.cancel()`.
-
- *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug
-    where changing a URL from `http` to `https` would leave it on port 80.
-
- *  **Okio has been updated to 1.6.0.**
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.6.0</version>
-     </dependency>
-     ```
-
- *  New: `Cache.initialize()`. Call this on a background thread to eagerly
-    initialize the response cache.
- *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to
-    write JUnit tests with `MockWebServer`. The `MockWebServer` library now
-    depends on JUnit, though it continues to work with all testing frameworks.
- *  Fix: `FormEncodingBuilder` is now consistent with browsers in which
-    characters it escapes. Previously we weren’t percent-encoding commas,
-    parens, and other characters.
- *  Fix: Relax `FormEncodingBuilder` to support building empty forms.
- *  Fix: Timeouts throw `SocketTimeoutException`, not `InterruptedIOException`.
- *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining
-    whether an HTTP request permits a body.
- *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses.
- *  Fix: Use `HttpUrl` internally.
- *  Fix: Recover from Android 4.2.2 EBADF crashes.
- *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY
-    write fails, leaving the connection in an inconsistent state.
- *  Fix: Make sure the default user agent is ASCII.
-
-
-## Version 2.4.0
-
-_2015-05-22_
-
- *  **Forbid response bodies on HTTP 204 and 205 responses.** Webservers that
-    return such malformed responses will now trigger a `ProtocolException` in
-    the client.
-
- *  **WebSocketListener has incompatible changes.** The `onOpen()` method is now
-    called on the reader thread, so implementations must return before further
-    websocket messages will be delivered. The `onFailure()` method now includes
-    an HTTP response if one was returned.
-
-## Version 2.4.0-RC1
-
-_2015-05-16_
-
- *  **New HttpUrl API.** It's like `java.net.URL` but good. Note that
-    `Request.Builder.url()` now throws `IllegalArgumentException` on malformed
-    URLs. (Previous releases would throw a `MalformedURLException` when calling
-    a malformed URL.)
-
- *  **We've improved connect failure recovery.** We now differentiate between
-    setup, connecting, and connected and implement appropriate recovery rules
-    for each. This changes `Address` to no longer use `ConnectionSpec`. (This is
-    an incompatible API change).
-
- *  **`FormEncodingBuilder` now uses `%20` instead of `+` for encoded spaces.**
-    Both are permitted-by-spec, but `%20` requires fewer special cases.
-
- *  **Okio has been updated to 1.4.0.**
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.4.0</version>
-     </dependency>
-     ```
-
- *  **`Request.Builder` no longer accepts null if a request body is required.**
-    Passing null will now fail for request methods that require a body. Instead
-    use an empty body such as this one:
-
-    ```java
-        RequestBody.create(null, new byte[0]);
-    ```
-
- * **`CertificatePinner` now supports wildcard hostnames.** As always with
-   certificate pinning, you must be very careful to avoid [bricking][brick]
-   your app. You'll need to pin both the top-level domain and the `*.` domain
-   for full coverage.
-
-    ```java
-     client.setCertificatePinner(new CertificatePinner.Builder()
-         .add("publicobject.com",   "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=")
-         .add("*.publicobject.com", "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=")
-         .add("publicobject.com",   "sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=")
-         .add("*.publicobject.com", "sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=")
-         .add("publicobject.com",   "sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=")
-         .add("*.publicobject.com", "sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=")
-         .add("publicobject.com",   "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=")
-         .add("*.publicobject.com", "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=")
-         .build());
-    ```
-
- *  **Interceptors lists are now deep-copied by `OkHttpClient.clone()`.**
-    Previously clones shared interceptors, which made it difficult to customize
-    the interceptors on a request-by-request basis.
-
- *  New: `Headers.toMultimap()`.
- *  New: `RequestBody.create(MediaType, ByteString)`.
- *  New: `ConnectionSpec.isCompatible(SSLSocket)`.
- *  New: `Dispatcher.getQueuedCallCount()` and
-    `Dispatcher.getRunningCallCount()`. These can be useful in diagnostics.
- *  Fix: OkHttp no longer shares timeouts between pooled connections. This was
-    causing some applications to crash when connections were reused.
- *  Fix: `OkApacheClient` now allows an empty `PUT` and `POST`.
- *  Fix: Websockets no longer rebuffer socket streams.
- *  Fix: Websockets are now better at handling close frames.
- *  Fix: Content type matching is now case insensitive.
- *  Fix: `Vary` headers are not lost with `android.net.http.HttpResponseCache`.
- *  Fix: HTTP/2 wasn't enforcing stream timeouts when writing the underlying
-    connection. Now it is.
- *  Fix: Never return null on `call.proceed()`. This was a bug in call
-    cancelation.
- *  Fix: When a network interceptor mutates a request, that change is now
-    reflected in `Response.networkResponse()`.
- *  Fix: Badly-behaving caches now throw a checked exception instead of a
-    `NullPointerException`.
- *  Fix: Better handling of uncaught exceptions in MockWebServer with HTTP/2.
-
-## Version 2.3.0
-
-_2015-03-16_
-
- *  **HTTP/2 support.** We've done interop testing and haven't seen any
-    problems. HTTP/2 support has been a big effort and we're particularly
-    thankful to Adrian Cole who has helped us to reach this milestone.
-
- *  **RC4 cipher suites are no longer supported by default.** To connect to
-    old, obsolete servers relying on these cipher suites, you must create a
-    custom `ConnectionSpec`.
-
- *  **Beta WebSockets support.**. The `okhttp-ws` subproject offers a new
-    websockets client. Please try it out! When it's ready we intend to include
-    it with the core OkHttp library.
-
- *  **Okio updated to 1.3.0.**
-
-    ```xml
-    <dependency>
-      <groupId>com.squareup.okio</groupId>
-      <artifactId>okio</artifactId>
-      <version>1.3.0</version>
-    </dependency>
-    ```
-
- *  **Fix: improve parallelism of async requests.** OkHttp's Dispatcher had a
-    misconfigured `ExecutorService` that limited the number of worker threads.
-    If you're using `Call.enqueue()` this update should significantly improve
-    request concurrency.
-
- *  **Fix: Lazily initialize the response cache.** This avoids strict mode
-    warnings when initializing OkHttp on Android‘s main thread.
-
- *  **Fix: Disable ALPN on Android 4.4.** That release of the feature was
-    unstable and prone to native crashes in the underlying OpenSSL code.
- *  Fix: Don't send both `If-None-Match` and `If-Modified-Since` cache headers
-    when both are applicable.
- *  Fix: Fail early when a port is out of range.
- *  Fix: Offer `Content-Length` headers for multipart request bodies.
- *  Fix: Throw `UnknownServiceException` if a cleartext connection is attempted
-    when explicitly forbidden.
- *  Fix: Throw a `SSLPeerUnverifiedException` when host verification fails.
- *  Fix: MockWebServer explicitly closes sockets. (On some Android releases,
-    closing the input stream and output stream of a socket is not sufficient.
- *  Fix: Buffer outgoing HTTP/2 frames to limit how many outgoing frames are
-    created.
- *  Fix: Avoid crashing when cache writing fails due to a full disk.
- *  Fix: Improve caching of private responses.
- *  Fix: Update cache-by-default response codes.
- *  Fix: Reused `Request.Builder` instances no longer hold stale URL fields.
- *  New: ConnectionSpec can now be configured to use the SSL socket's default
-    cipher suites. To use, set the cipher suites to `null`.
- *  New: Support `DELETE` with a request body.
- *  New: `Headers.of(Map)` creates headers from a Map.
-
-
-## Version 2.2.0
-
-_2014-12-30_
-
- *  **`RequestBody.contentLength()` now throws `IOException`.**
-    This is a source-incompatible change. If you have code that calls
-    `RequestBody.contentLength()`, your compile will break with this
-    update. The change is binary-compatible, however: code compiled
-    for OkHttp 2.0 and 2.1 will continue to work with this update.
-
- *  **`COMPATIBLE_TLS` no longer supports SSLv3.** In response to the
-    [POODLE](https://googleonlinesecurity.blogspot.ca/2014/10/this-poodle-bites-exploiting-ssl-30.html)
-    vulnerability, OkHttp no longer offers SSLv3 when negotiation an
-    HTTPS connection. If you continue to need to connect to webservers
-    running SSLv3, you must manually configure your own `ConnectionSpec`.
-
- *  **OkHttp now offers interceptors.** Interceptors are a powerful mechanism
-    that can monitor, rewrite, and retry calls. The [interceptors doc][interceptors] is a full
-    introduction to this new API.
-
- *  New: APIs to iterate and selectively clear the response cache.
- *  New: Support for SOCKS proxies.
- *  New: Support for `TLS_FALLBACK_SCSV`.
- *  New: Update HTTP/2 support to `h2-16` and `hpack-10`.
- *  New: APIs to prevent retrying non-idempotent requests.
- *  Fix: Drop NPN support. Going forward we support ALPN only.
- *  Fix: The hostname verifier is now strict. This is consistent with the hostname
-    verifier in modern browsers.
- *  Fix: Improve `CONNECT` handling for misbehaving HTTP proxies.
- *  Fix: Don't retry requests that failed due to timeouts.
- *  Fix: Cache 302s and 308s that include appropriate response headers.
- *  Fix: Improve pooling of connections that use proxy selectors.
- *  Fix: Don't leak connections when using ALPN on the desktop.
- *  Fix: Update Jetty ALPN to `7.1.2.v20141202` (Java 7) and `8.1.2.v20141202` (Java 8).
-    This fixes a bug in resumed TLS sessions where the wrong protocol could be
-    selected.
- *  Fix: Don't crash in SPDY and HTTP/2 when disconnecting before connecting.
- *  Fix: Avoid a reverse DNS-lookup for a numeric proxy address
- *  Fix: Resurrect http/2 frame logging.
- *  Fix: Limit to 20 authorization attempts.
-
-## Version 2.1.0
-
-_2014-11-11_
-
- *  New: Typesafe APIs for interacting with cipher suites and TLS versions.
- *  Fix: Don't crash when mixing authorization challenges with upload retries.
-
-
-## Version 2.1.0-RC1
-
-_2014-11-04_
-
- *  **OkHttp now caches private responses**. We've changed from a shared cache
-    to a private cache, and will now store responses that use an `Authorization`
-    header. This means OkHttp's cache shouldn't be used on middleboxes that sit
-    between user agents and the origin server.
-
- *  **TLS configuration updated.** OkHttp now explicitly enables TLSv1.2,
-    TLSv1.1 and TLSv1.0 where they are supported. It will continue to perform
-    only one fallback, to SSLv3. Applications can now configure this with the
-    `ConnectionSpec` class.
-
-    To disable TLS fallback:
-
-    ```java
-    client.setConnectionSpecs(Arrays.asList(
-        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));
-    ```
-
-    To disable cleartext connections, permitting `https` URLs only:
-
-    ```java
-    client.setConnectionSpecs(Arrays.asList(
-        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));
-    ```
-
- *  **New cipher suites.** Please confirm that your webservers are reachable
-    with this limited set of cipher suites.
-
-    ```
-                                             Android
-    Name                                     Version
-
-    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256  5.0
-    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256    5.0
-    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256      5.0
-    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA     4.0
-    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA     4.0
-    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA       4.0
-    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA       4.0
-    TLS_ECDHE_ECDSA_WITH_RC4_128_SHA         4.0
-    TLS_ECDHE_RSA_WITH_RC4_128_SHA           4.0
-    TLS_DHE_RSA_WITH_AES_128_CBC_SHA         2.3
-    TLS_DHE_DSS_WITH_AES_128_CBC_SHA         2.3
-    TLS_DHE_RSA_WITH_AES_256_CBC_SHA         2.3
-    TLS_RSA_WITH_AES_128_GCM_SHA256          5.0
-    TLS_RSA_WITH_AES_128_CBC_SHA             2.3
-    TLS_RSA_WITH_AES_256_CBC_SHA             2.3
-    SSL_RSA_WITH_3DES_EDE_CBC_SHA            2.3  (Deprecated in 5.0)
-    SSL_RSA_WITH_RC4_128_SHA                 2.3
-    SSL_RSA_WITH_RC4_128_MD5                 2.3  (Deprecated in 5.0)
-    ```
-
- *  **Okio updated to 1.0.1.**
-
-    ```xml
-    <dependency>
-      <groupId>com.squareup.okio</groupId>
-      <artifactId>okio</artifactId>
-      <version>1.0.1</version>
-    </dependency>
-    ```
-
- *  **New APIs to permit easy certificate pinning.** Be warned, certificate
-    pinning is dangerous and could prevent your application from trusting your
-    server!
-
- *  **Cache improvements.** This release fixes some severe cache problems
-    including a bug where the cache could be corrupted upon certain access
-    patterns. We also fixed a bug where the cache was being cleared due to a
-    corrupted journal. We've added APIs to configure a request's `Cache-Control`
-    headers, and to manually clear the cache.
-
- *  **Request cancellation fixes.** This update fixes a bug where synchronous
-    requests couldn't be canceled by tag. This update avoids crashing when
-    `onResponse()` throws an `IOException`. That failure will now be logged
-    instead of notifying the thread's uncaught exception handler. We've added a
-    new API, `Call.isCanceled()` to check if a call has been canceled.
-
- *  New: Update `MultipartBuilder` to support content length.
- *  New: Make it possible to mock `OkHttpClient` and `Call`.
- *  New: Update to h2-14 and hpack-9.
- *  New: OkHttp includes a user-agent by default, like `okhttp/2.1.0-RC1`.
- *  Fix: Handle response code `308 Permanent Redirect`.
- *  Fix: Don't skip the callback if a call is canceled.
- *  Fix: Permit hostnames with underscores.
- *  Fix: Permit overriding the content-type in `OkApacheClient`.
- *  Fix: Use the socket factory for direct connections.
- *  Fix: Honor `OkUrlFactory` APIs that disable redirects.
- *  Fix: Don't crash on concurrent modification of `SPDY` SPDY settings.
-
-## Version 2.0.0
-
-This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice
-on upgrading from 1.x to 2.x.
-
-_2014-06-21_
-
- *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is
-    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which
-    used `Throwable`.
- *  Fix: Fixed a caching bug where we weren't storing rewritten request headers
-    like `Accept-Encoding`.
- *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain
-    large downloads
- *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.)
-
-## Version 2.0.0-RC2
-
-_2014-06-11_
-
-This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for
-advice on upgrading from 1.x to 2.x.
-
- *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where
-    connections were neither closed nor pooled.
- *  Fix: Revert builder-style return types from OkHttpClient's timeout methods
-    for binary compatibility with OkHttp 1.x.
- *  Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to
-    `https://google.com`, which doesn't follow the SPDY/3.1 spec!
- *  Fix: Always configure NPN headers. This fixes connectivity to
-    `https://facebook.com` when SPDY and HTTP/2 are both disabled. Otherwise an
-    unexpected NPN response is received and OkHttp crashes.
- *  Fix: Write continuation frames when HPACK data is larger than 16383 bytes.
- *  Fix: Don't drop uncaught exceptions thrown in async calls.
- *  Fix: Throw an exception eagerly when a request body is not legal. Previously
-    we ignored the problem at request-building time, only to crash later with a
-    `NullPointerException`.
- *  Fix: Include a backwards-compatible `OkHttp-Response-Source` header with
-    `OkUrlFactory `responses.
- *  Fix: Don't include a default User-Agent header in requests made with the Call
-    API. Requests made with OkUrlFactory will continue to have a default user
-    agent.
- *  New: Guava-like API to create headers:
-
-    ```java
-    Headers headers = Headers.of(name1, value1, name2, value2, ...).
-    ```
-
- *  New: Make the content-type header optional for request bodies.
- *  New: `Response.isSuccessful()` is a convenient API to check response codes.
- *  New: The response body can now be read outside of the callback. Response
-    bodies must always be closed, otherwise they will leak connections!
- *  New: APIs to create multipart request bodies (`MultipartBuilder`) and form
-    encoding bodies (`FormEncodingBuilder`).
-
-## Version 2.0.0-RC1
-
-_2014-05-23_
-
-OkHttp 2 is designed around a new API that is true to HTTP, with classes for
-requests, responses, headers, and calls. It uses modern Java patterns like
-immutability and chained builders. The API now offers asynchronous callbacks
-in addition to synchronous blocking calls.
-
-#### API Changes
-
- *  **New Request and Response types,** each with their own builder. There's also
-    a `RequestBody` class to write the request body to the network and a
-    `ResponseBody` to read the response body from the network. The standalone
-    `Headers` class offers full access to the HTTP headers.
-
- *  **Okio dependency added.** OkHttp now depends on
-    [Okio](https://github.com/square/okio), an I/O library that makes it easier
-    to access, store and process data. Using this library internally makes OkHttp
-    faster while consuming less memory. You can write a `RequestBody` as an Okio
-    `BufferedSink` and a `ResponseBody` as an Okio `BufferedSource`. Standard
-    `InputStream` and `OutputStream` access is also available.
-
- *  **New Call and Callback types** execute requests and receive their
-    responses. Both types of calls can be canceled via the `Call` or the
-    `OkHttpClient`.
-
- *  **URLConnection support has moved to the okhttp-urlconnection module.**
-    If you're upgrading from 1.x, this change will impact you. You will need to
-    add the `okhttp-urlconnection` module to your project and use the
-    `OkUrlFactory` to create new instances of `HttpURLConnection`:
-
-    ```java
-    // OkHttp 1.x:
-    HttpURLConnection connection = client.open(url);
-
-    // OkHttp 2.x:
-    HttpURLConnection connection = new OkUrlFactory(client).open(url);
-    ```
-
- *  **Custom caches are no longer supported.** In OkHttp 1.x it was possible to
-    define your own response cache with the `java.net.ResponseCache` and OkHttp's
-    `OkResponseCache` interfaces. Both of these APIs have been dropped. In
-    OkHttp 2 the built-in disk cache is the only supported response cache.
-
- *  **HttpResponseCache has been renamed to Cache.** Install it with
-    `OkHttpClient.setCache(...)` instead of `OkHttpClient.setResponseCache(...)`.
-
- *  **OkAuthenticator has been replaced with Authenticator.** This new
-    authenticator has access to the full incoming response and can respond with
-    whichever followup request is appropriate. The `Challenge` class is now a
-    top-level class and `Credential` is replaced with a utility class called
-    `Credentials`.
-
- *  **OkHttpClient.getFollowProtocolRedirects() renamed to
-    getFollowSslRedirects()**. We reserve the word _protocol_ for the HTTP
-    version being used (HTTP/1.1, HTTP/2). The old name of this method was
-    misleading; it was always used to configure redirects between `https://` and
-    `http://` schemes.
-
- *  **RouteDatabase is no longer public API.** OkHttp continues to track which
-    routes have failed but this is no exposed in the API.
-
- *  **ResponseSource is gone.** This enum exposed whether a response came from
-    the cache, network, or both. OkHttp 2 offers more detail with raw access to
-    the cache and network responses in the new `Response` class.
-
- *  **TunnelRequest is gone.** It specified how to connect to an HTTP proxy.
-    OkHttp 2 uses the new `Request` class for this.
-
- *  **Dispatcher** is a new class that manages the queue of asynchronous calls. It
-    implements limits on total in-flight calls and in-flight calls per host.
-
-#### Implementation changes
-
- * Support Android `TrafficStats` socket tagging.
- * Drop authentication headers on redirect.
- * Added support for compressed data frames.
- * Process push promise callbacks in order.
- * Update to http/2 draft 12.
- * Update to HPACK draft 07.
- * Add ALPN support. Maven will use ALPN on OpenJDK 8.
- * Update NPN dependency to target `jdk7u60-b13` and `Oracle jdk7u55-b13`.
- * Ensure SPDY variants support zero-length DELETE and POST.
- * Prevent leaking a cache item's InputStreams when metadata read fails.
- * Use a string to identify TLS versions in routes.
- * Add frame logger for HTTP/2.
- * Replacing `httpMinorVersion` with `Protocol`. Expose HTTP/1.0 as a potential protocol.
- * Use `Protocol` to describe framing.
- * Implement write timeouts for HTTP/1.1 streams.
- * Avoid use of SPDY stream ID 1, as that's typically used for UPGRADE.
- * Support OAuth in `Authenticator`.
- * Permit a dangling semicolon in media type parsing.
-
-## Version 1.6.0
-
-_2014-05-23_
-
- * Offer bridges to make it easier to migrate from OkHttp 1.x to OkHttp 2.0.
-   This adds `OkUrlFactory`, `Cache`, and `@Deprecated` annotations for APIs
-   dropped in 2.0.
-
-## Version 1.5.4
-
-_2014-04-14_
-
- * Drop ALPN support in Android. There's a concurrency bug in all
-   currently-shipping versions.
- * Support asynchronous disconnects by breaking the socket only. This should
-   prevent flakiness from multiple threads concurrently accessing a stream.
-
-## Version 1.5.3
-
-_2014-03-29_
-
- * Fix bug where the Content-Length header was not always dropped when
-   following a redirect from a POST to a GET.
- * Implement basic support for `Thread.interrupt()`. OkHttp now checks
-   for an interruption before doing a blocking call. If it is interrupted,
-   it throws an `InterruptedIOException`.
-
-## Version 1.5.2
-
-_2014-03-17_
-
- * Fix bug where deleting a file that was absent from the `HttpResponseCache`
-   caused an IOException.
- * Fix bug in HTTP/2 where our HPACK decoder wasn't emitting entries in
-   certain eviction scenarios, leading to dropped response headers.
-
-## Version 1.5.1
-
-_2014-03-11_
-
- * Fix 1.5.0 regression where connections should not have been recycled.
- * Fix 1.5.0 regression where transparent Gzip was broken by attempting to
-   recover from another I/O failure.
- * Fix problems where spdy/3.1 headers may not have been compressed properly.
- * Fix problems with spdy/3.1 and http/2 where the wrong window size was being
-   used.
- * Fix 1.5.0 regression where conditional cache responses could corrupt the
-   connection pool.
-
-
-## Version 1.5.0
-
-_2014-03-07_
-
-
-##### OkHttp no longer uses the default SSL context.
-
-Applications that want to use the global SSL context with OkHttp should configure their
-OkHttpClient instances with the following:
-
-```java
-okHttpClient.setSslSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory());
-```
-
-A simpler solution is to avoid the shared default SSL socket factory. Instead, if you
-need to customize SSL, do so for your specific OkHttpClient instance only.
-
-##### Synthetic headers have changed
-
-Previously OkHttp added a synthetic response header, `OkHttp-Selected-Transport`. It
-has been replaced with a new synthetic header, `OkHttp-Selected-Protocol`.
-
-##### Changes
-
- * New: Support for `HTTP-draft-09/2.0`.
- * New: Support for `spdy/3.1`. Dropped support for `spdy/3`.
- * New: Use ALPN on Android platforms that support it (4.4+)
- * New: CacheControl model and parser.
- * New: Protocol selection in MockWebServer.
- * Fix: Route selection shouldn't use TLS modes that we know will fail.
- * Fix: Cache SPDY responses even if the response body is closed prematurely.
- * Fix: Use strict timeouts when aborting a download.
- * Fix: Support Shoutcast HTTP responses like `ICY 200 OK`.
- * Fix: Don't unzip if there isn't a response body.
- * Fix: Don't leak gzip streams on redirects.
- * Fix: Don't do DNS lookups on invalid hosts.
- * Fix: Exhaust the underlying stream when reading gzip streams.
- * Fix: Support the `PATCH` method.
- * Fix: Support request bodies on `DELETE` method.
- * Fix: Drop the `okhttp-protocols` module.
- * Internal: Replaced internal byte array buffers with pooled buffers ("OkBuffer").
-
-
-## Version 1.3.0
-
-_2014-01-11_
-
- * New: Support for "PATCH" HTTP method in client and MockWebServer.
- * Fix: Drop `Content-Length` header when redirected from POST to GET.
- * Fix: Correctly read cached header entries with malformed header names.
- * Fix: Do not directly support any authentication schemes other than "Basic".
- * Fix: Respect read timeouts on recycled connections.
- * Fix: Transmit multiple cookie values as a single header with delimiter.
- * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`.
- * Fix: Persist proper `Content-Encoding` header to cache for GZip responses.
- * Fix: Eliminate rare race condition in SPDY streams that would prevent connection reuse.
- * Fix: Change HTTP date formats to UTC to conform to RFC2616 section 3.3.
- * Fix: Support SPDY header blocks with trailing bytes.
- * Fix: Allow `;` as separator for `Cache-Control` header.
- * Fix: Correct bug where HTTPS POST requests were always automatically buffered.
- * Fix: Honor read timeout when parsing SPDY headers.
-
-
-## Version 1.2.1
-
-_2013-08-23_
-
- * Resolve issue with 'jar-with-dependencies' artifact creation.
- * Fix: Support empty SPDY header values.
-
-
-## Version 1.2.0
-
-_2013-08-11_
-
- *  New APIs on OkHttpClient to set default timeouts for connect and read.
- *  Fix bug when caching SPDY responses.
- *  Fix a bug with SPDY plus half-closed streams. (thanks kwuollett)
- *  Fix a bug in `Content-Length` reporting for gzipped streams in the Apache
-    HTTP client adapter. (thanks kwuollett)
- *  Work around the Alcatel `getByInetAddress` bug (thanks k.kocel)
- *  Be more aggressive about testing pooled sockets before reuse. (thanks
-    warpspin)
- *  Include `Content-Type` and `Content-Encoding` in the Apache HTTP client
-    adapter. (thanks kwuollett)
- *  Add a media type class to OkHttp.
- *  Change custom header prefix:
-
-    ```
-    X-Android-Sent-Millis is now OkHttp-Sent-Millis
-    X-Android-Received-Millis is now OkHttp-Received-Millis
-    X-Android-Response-Source is now OkHttp-Response-Source
-    X-Android-Selected-Transport is now OkHttp-Selected-Transport
-    ```
- *  Improve cache invalidation for POST-like requests.
- *  Bring MockWebServer into OkHttp and teach it SPDY.
-
-
-## Version 1.1.1
-
-_2013-06-23_
-
- * Fix: ClassCastException when caching responses that were redirected from
-   HTTP to HTTPS.
-
-
-## Version 1.1.0
-
-_2013-06-15_
-
- * Fix: Connection reuse was broken for most HTTPS connections due to a bug in
-   the way the hostname verifier was selected.
- * Fix: Locking bug in SpdyConnection.
- * Fix: Ignore null header values (for compatibility with HttpURLConnection).
- * Add URLStreamHandlerFactory support so that `URL.openConnection()` uses
-   OkHttp.
- * Expose the transport ("http/1.1", "spdy/3", etc.) via magic request headers.
-   Use `X-Android-Transports` to write the preferred transports and
-   `X-Android-Selected-Transport` to read the negotiated transport.
-
-
-## Version 1.0.2
-
-_2013-05-11_
-
- * Fix: Remove use of Java 6-only APIs.
- * Fix: Properly handle exceptions from `NetworkInterface` when querying MTU.
- * Fix: Ensure MTU has a reasonable default and upper-bound.
-
-
-## Version 1.0.1
-
-_2013-05-06_
-
- * Correct casing of SSL in method names (`getSslSocketFactory`/`setSslSocketFactory`).
-
-
-## Version 1.0.0
-
-_2013-05-06_
-
-Initial release.
-
- [brick]: https://noncombatant.org/2015/05/01/about-http-public-key-pinning/
- [webdav]: https://tools.ietf.org/html/rfc4918
- [major_versions]: https://jakewharton.com/java-interoperability-policy-for-major-version-updates/
- [nginx_959]: https://trac.nginx.org/nginx/ticket/959
- [okhttp_idling_resource]: https://github.com/JakeWharton/okhttp-idling-resource
- [bom]: https://en.wikipedia.org/wiki/Byte_order_mark
- [junit_5_rules]: https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-rulesupport
- [public_suffix]: https://publicsuffix.org/
- [maven_provided]: https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
- [remove_cbc_ecdsa]: https://developers.google.com/web/updates/2016/12/chrome-56-deprecations#remove_cbc-mode_ecdsa_ciphers_in_tls
- [conscrypt]: https://github.com/google/conscrypt/
- [conscrypt_dependency]: https://github.com/google/conscrypt/#download
- [https_server_sample]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java
- [require_android_5]: https://cashapp.github.io/2019-02-05/okhttp-3-13-requires-android-5
- [obsolete_apache_client]: https://gist.github.com/swankjesse/09721f72039e3a46cf50f94323deb82d
- [obsolete_url_factory]: https://gist.github.com/swankjesse/dd91c0a8854e1559b00f5fc9c7bfae70
- [tls_configuration_history]: https://square.github.io/okhttp/tls_configuration_history/
- [grpc_http2]: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
- [upgrading_to_okhttp_4]: https://square.github.io/okhttp/upgrading_to_okhttp_4/
- [interceptors]: https://square.github.io/okhttp/interceptors/
+ [iana_websocket]: https://www.iana.org/assignments/websocket/websocket.txt
  [okhttp4_blog_post]: https://cashapp.github.io/2019-06-26/okhttp-4-goes-kotlin
+ [upgrading_to_okhttp_4]: https://square.github.io/okhttp/upgrading_to_okhttp_4/
diff --git a/README.md b/README.md
index 1d8e8f2ea9..4077be843d 100644
--- a/README.md
+++ b/README.md
@@ -55,7 +55,7 @@ public static final MediaType JSON
 OkHttpClient client = new OkHttpClient();
 
 String post(String url, String json) throws IOException {
-  RequestBody body = RequestBody.create(JSON, json);
+  RequestBody body = RequestBody.create(json, JSON);
   Request request = new Request.Builder()
       .url(url)
       .post(body)
@@ -74,7 +74,7 @@ Requirements
 
 OkHttp works on Android 5.0+ (API level 21+) and on Java 8+.
 
-OkHttp has one library dependency on [Okio][okio], a small library for high-performance I/O.
+OkHttp depends on [Okio][okio] for high-performance I/O and the [Kotlin standard library][kotlin]. Both are small libraries with strong backwards-compatibility.
 
 We highly recommend you keep OkHttp up-to-date. As with auto-updating web browsers, staying current
 with HTTPS clients is an important defense against potential security problems. [We
@@ -100,7 +100,7 @@ Releases
 Our [change log][changelog] has release history.
 
 ```kotlin
-implementation("com.squareup.okhttp3:okhttp:4.0.1")
+implementation("com.squareup.okhttp3:okhttp:4.1.1")
 ```
 
 Snapshot builds are [available][snap].
@@ -120,7 +120,7 @@ MockWebServer
 OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients.
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:mockwebserver:4.0.1")
+testImplementation("com.squareup.okhttp3:mockwebserver:4.1.1")
 ```
 
 
@@ -146,6 +146,7 @@ limitations under the License.
  [changelog]: http://square.github.io/okhttp/changelog/
  [conscrypt]: https://github.com/google/conscrypt/
  [get_example]: https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/GetExample.java
+ [kotlin]: https://kotlinlang.org/
  [okhttp3_pro]: https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro
  [okhttp_312x]: https://github.com/square/okhttp/tree/okhttp_3.12.x
  [okhttp]: https://square.github.io/okhttp/
diff --git a/android-test/build.gradle b/android-test/build.gradle
new file mode 100644
index 0000000000..d521be6791
--- /dev/null
+++ b/android-test/build.gradle
@@ -0,0 +1,42 @@
+apply plugin: 'com.android.library'
+apply plugin: 'org.jetbrains.kotlin.android'
+
+repositories {
+  jcenter {
+    // Required for a dependency of Android lint.
+    content {
+      includeGroup 'org.jetbrains.trove4j'
+    }
+  }
+}
+
+android {
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_1_8
+    targetCompatibility JavaVersion.VERSION_1_8
+  }
+
+  compileSdkVersion 29
+
+  defaultConfig {
+    minSdkVersion 21
+    targetSdkVersion 29
+    versionCode 1
+    versionName "1.0"
+
+    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+  }
+}
+
+dependencies {
+  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
+  implementation project(':okhttp')
+  testImplementation 'junit:junit:4.12'
+  androidTestImplementation(project(':okhttp-testing-support')) {
+     exclude group: 'org.openjsse', module: 'openjsse'
+  }
+  androidTestImplementation project(':mockwebserver')
+  androidTestImplementation project(':okhttp-tls')
+  androidTestImplementation 'com.android.support.test:runner:1.0.2'
+  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+}
diff --git a/android-test/settings.gradle b/android-test/settings.gradle
new file mode 100644
index 0000000000..fa80fbee19
--- /dev/null
+++ b/android-test/settings.gradle
@@ -0,0 +1 @@
+project.name = 'android-test'
\ No newline at end of file
diff --git a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
new file mode 100644
index 0000000000..3aec4cab37
--- /dev/null
+++ b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
@@ -0,0 +1,280 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp.android.test
+
+import android.os.Build
+import android.support.test.runner.AndroidJUnit4
+import okhttp3.Call
+import okhttp3.CertificatePinner
+import okhttp3.Connection
+import okhttp3.EventListener
+import okhttp3.OkHttpClient
+import okhttp3.Protocol
+import okhttp3.RecordingEventListener
+import okhttp3.Request
+import okhttp3.TlsVersion
+import okhttp3.mockwebserver.MockResponse
+import okhttp3.mockwebserver.MockWebServer
+import okhttp3.tls.internal.TlsUtil.localhost
+import okio.ByteString.Companion.toByteString
+import org.junit.After
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertTrue
+import org.junit.Assert.fail
+import org.junit.Assume.assumeNoException
+import org.junit.Assume.assumeTrue
+import org.junit.Before
+import org.junit.Rule
+import org.junit.Test
+import org.junit.runner.RunWith
+import java.net.InetAddress
+import java.net.UnknownHostException
+import javax.net.ssl.SSLPeerUnverifiedException
+import javax.net.ssl.SSLSocket
+
+/**
+ * Run with "./gradlew :android-test:connectedCheck" and make sure ANDROID_SDK_ROOT is set.
+ */
+@RunWith(AndroidJUnit4::class)
+class OkHttpTest {
+  private lateinit var client: OkHttpClient
+
+  @JvmField
+  @Rule
+  val server = MockWebServer()
+  private val handshakeCertificates = localhost()
+
+  @Before
+  fun createClient() {
+    client = OkHttpClient.Builder()
+        .build()
+  }
+
+  @After
+  fun cleanup() {
+    client.dispatcher.executorService.shutdownNow()
+  }
+
+  @Test
+  fun testRequest() {
+    assumeNetwork()
+
+    val request = Request.Builder().url("https://api.twitter.com/robots.txt").build()
+
+    val response = client.newCall(request).execute()
+
+    response.use {
+      assertEquals(200, response.code)
+    }
+  }
+
+  @Test
+  fun testRequestUsesAndroidConscrypt() {
+    assumeNetwork()
+
+    val request = Request.Builder().url("https://facebook.com/robots.txt").build()
+
+    var socketClass: String? = null
+
+    val client2 = client.newBuilder()
+        .eventListener(object : EventListener() {
+          override fun connectionAcquired(call: Call, connection: Connection) {
+            socketClass = connection.socket().javaClass.name
+          }
+        })
+        .build()
+
+    val response = client2.newCall(request).execute()
+
+    response.use {
+      assertEquals(Protocol.HTTP_2, response.protocol)
+      if (Build.VERSION.SDK_INT >= 29) {
+        assertEquals(TlsVersion.TLS_1_3, response.handshake?.tlsVersion)
+      } else {
+        assertEquals(TlsVersion.TLS_1_2, response.handshake?.tlsVersion)
+      }
+      assertEquals(200, response.code)
+      assertTrue(socketClass?.startsWith("com.android.org.conscrypt.") == true)
+    }
+  }
+
+  @Test
+  fun testHttpRequestNotBlockedOnLegacyAndroid() {
+    assumeTrue(Build.VERSION.SDK_INT < 23)
+
+    val request = Request.Builder().url("http://squareup.com/robots.txt").build()
+
+    val response = client.newCall(request).execute()
+
+    response.use {
+      assertEquals(200, response.code)
+    }
+  }
+
+  @Test
+  fun testHttpRequestBlocked() {
+    assumeTrue(Build.VERSION.SDK_INT >= 23)
+
+    val request = Request.Builder().url("http://squareup.com/robots.txt").build()
+
+    try {
+      client.newCall(request).execute()
+      fail("expected cleartext blocking")
+    } catch (_: java.net.UnknownServiceException) {
+    }
+  }
+
+  @Test
+  fun testMockWebserverRequest() {
+    enableTls()
+
+    server.enqueue(MockResponse().setBody("abc"))
+
+    val request = Request.Builder().url(server.url("/")).build()
+
+    val response = client.newCall(request).execute()
+
+    response.use {
+      assertEquals(200, response.code)
+    }
+  }
+
+  @Test
+  fun testCertificatePinningFailure() {
+    enableTls()
+
+    val certificatePinner = CertificatePinner.Builder()
+        .add(server.hostName, "sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=")
+        .build()
+    client = client.newBuilder().certificatePinner(certificatePinner).build()
+
+    server.enqueue(MockResponse().setBody("abc"))
+
+    val request = Request.Builder().url(server.url("/")).build()
+
+    try {
+      client.newCall(request).execute()
+      fail()
+    } catch (_: SSLPeerUnverifiedException) {
+    }
+  }
+
+  @Test
+  fun testCertificatePinningSuccess() {
+    enableTls()
+
+    val certificatePinner = CertificatePinner.Builder()
+        .add(server.hostName,
+            CertificatePinner.pin(handshakeCertificates.trustManager.acceptedIssuers[0]))
+        .build()
+    client = client.newBuilder().certificatePinner(certificatePinner).build()
+
+    server.enqueue(MockResponse().setBody("abc"))
+
+    val request = Request.Builder().url(server.url("/")).build()
+
+    val response = client.newCall(request).execute()
+
+    response.use {
+      assertEquals(200, response.code)
+    }
+  }
+
+  @Test
+  fun testEventListener() {
+    val eventListener = RecordingEventListener()
+
+    client = client.newBuilder().eventListener(eventListener).build()
+
+    enableTls()
+
+    server.enqueue(MockResponse().setBody("abc1"))
+    server.enqueue(MockResponse().setBody("abc2"))
+
+    val request = Request.Builder().url(server.url("/")).build()
+
+    client.newCall(request).execute().use { response ->
+      assertEquals(200, response.code)
+    }
+
+    assertEquals(listOf("CallStart", "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
+        "ConnectStart", "SecureConnectStart", "SecureConnectEnd", "ConnectEnd",
+        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",
+        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",
+        "CallEnd"), eventListener.recordedEventTypes())
+
+    eventListener.clearAllEvents()
+
+    client.newCall(request).execute().use { response ->
+      assertEquals(200, response.code)
+    }
+
+    assertEquals(listOf("CallStart", "ProxySelectStart", "ProxySelectEnd",
+        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",
+        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",
+        "CallEnd"), eventListener.recordedEventTypes())
+  }
+
+  @Test
+  fun testSessionReuse() {
+    val sessionIds = mutableListOf<String>()
+
+    client = client.newBuilder().eventListener(object : EventListener() {
+      override fun connectionAcquired(call: Call, connection: Connection) {
+        val sslSocket = connection.socket() as SSLSocket
+
+        sessionIds.add(sslSocket.session.id.toByteString().hex())
+      }
+    }).build()
+
+    enableTls()
+
+    server.enqueue(MockResponse().setBody("abc1"))
+    server.enqueue(MockResponse().setBody("abc2"))
+
+    val request = Request.Builder().url(server.url("/")).build()
+
+    client.newCall(request).execute().use { response ->
+      assertEquals(200, response.code)
+    }
+
+    client.connectionPool.evictAll()
+    assertEquals(0, client.connectionPool.connectionCount())
+
+    client.newCall(request).execute().use { response ->
+      assertEquals(200, response.code)
+    }
+
+    assertEquals(2, sessionIds.size)
+    assertEquals(sessionIds[0], sessionIds[1])
+  }
+
+  private fun enableTls() {
+    client = client.newBuilder()
+        .sslSocketFactory(
+            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager)
+        .build()
+    server.useHttps(handshakeCertificates.sslSocketFactory(), false)
+  }
+
+  private fun assumeNetwork() {
+    try {
+      InetAddress.getByName("www.google.com")
+    } catch (uhe: UnknownHostException) {
+      assumeNoException(uhe)
+    }
+  }
+}
diff --git a/android-test/src/main/AndroidManifest.xml b/android-test/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..b1a394fecc
--- /dev/null
+++ b/android-test/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="okhttp.android.test">
+  <uses-permission android:name="android.permission.INTERNET" />
+</manifest>
diff --git a/android-test/src/main/res/values/strings.xml b/android-test/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..3f2b0bb232
--- /dev/null
+++ b/android-test/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+  <string name="app_name">android-test</string>
+</resources>
diff --git a/android-test/src/main/res/xml/network_security_config.xml b/android-test/src/main/res/xml/network_security_config.xml
new file mode 100644
index 0000000000..786dddecc7
--- /dev/null
+++ b/android-test/src/main/res/xml/network_security_config.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<network-security-config>
+  <base-config cleartextTrafficPermitted="false">
+  </base-config>
+</network-security-config>
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index a6a88d3f49..b71f328cc7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,28 +2,29 @@ import net.ltgt.gradle.errorprone.CheckSeverity
 
 buildscript {
   ext.versions = [
-      'airline': '2.6.0',
       'android': '4.1.1.4',
       'animalSniffer': '1.17',
       'assertj': '3.11.0',
       'bouncycastle': '1.62',
       'brotli': '0.1.2',
       'checkstyle': '8.15',
-      'conscrypt': '2.1.0',
+      'conscrypt': '2.2.1',
       'findbugs': '3.0.2',
       'guava': '27.0.1-jre',
       'java': '1.8',
       'jnrUnixsocket': '0.22',
       'jsoup': '1.11.3',
       'junit': '4.12',
-      'kotlin': '1.3.41',
+      'kotlin': '1.3.50',
       'moshi': '1.8.0',
       'okio': '2.2.2',
-      'ktlint': '0.31.0'
+      'ktlint': '0.31.0',
+      'picocli': '4.0.1',
+      'openjsse': '1.1.0'
   ]
 
   ext.deps = [
-      'airline': "com.github.rvesse:airline:${versions.airline}",
+      'picocli': "info.picocli:picocli:${versions.picocli}",
       'android': "com.google.android:android:${versions.android}",
       'animalSniffer': "org.codehaus.mojo:animal-sniffer-annotations:${versions.animalSniffer}",
       'assertj': "org.assertj:assertj-core:${versions.assertj}",
@@ -37,7 +38,8 @@ buildscript {
       'junit': "junit:junit:${versions.junit}",
       'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
       'moshi': "com.squareup.moshi:moshi:${versions.moshi}",
-      'okio': "com.squareup.okio:okio:${versions.okio}"
+      'okio': "com.squareup.okio:okio:${versions.okio}",
+      'openjsse': "org.openjsse:openjsse:${versions.openjsse}"
   ]
 
   dependencies {
@@ -47,11 +49,13 @@ buildscript {
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
     classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.18"
     classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.21.1'
+    classpath 'com.android.tools.build:gradle:3.4.2'
   }
 
   repositories {
     mavenCentral()
     gradlePluginPortal()
+    google()
   }
 }
 
@@ -70,6 +74,7 @@ allprojects {
     maven {
       url 'https://dl.bintray.com/kotlin/dokka'
     }
+    google()
   }
 
   task downloadDependencies() {
@@ -81,6 +86,9 @@ allprojects {
 }
 
 subprojects { project ->
+  if (project.name == 'android-test')
+    return
+
   apply plugin: 'java'
   apply plugin: 'java-library'
   apply plugin: 'org.jetbrains.kotlin.platform.jvm'
@@ -151,6 +159,10 @@ subprojects { project ->
     dependencies {
       testRuntime "org.conscrypt:conscrypt-openjdk-uber:${versions.conscrypt}"
     }
+  } else if (platform == "openjsse") {
+    dependencies {
+      testRuntime deps.openjsse
+    }
   }
 
   dependencies {
@@ -183,8 +195,8 @@ subprojects { project ->
         includes = ['Module.md']
       }
       externalDocumentationLink {
-        url = new URL("https://square.github.io/okio/2.x/okio/jvm/index.html")
-        packageListUrl = new URL("https://square.github.io/okio/2.x/okio/jvm/package-list")
+        url = new URL("https://square.github.io/okio/2.x/okio/")
+        packageListUrl = new URL("https://square.github.io/okio/2.x/okio/package-list")
       }
     }
   }
@@ -232,7 +244,7 @@ def alpnBootVersionForPatchVersion(String javaVersion, int patchVersion) {
       return '8.1.11.v20170118'
     case 161..181:
       return '8.1.12.v20180117'
-    case 191..212:
+    case 191..222:
       return '8.1.13.v20181017'
     default:
       throw new IllegalStateException("Unexpected Java version: ${javaVersion}")
diff --git a/docs/changelog_1x.md b/docs/changelog_1x.md
new file mode 100644
index 0000000000..fba6c701f9
--- /dev/null
+++ b/docs/changelog_1x.md
@@ -0,0 +1,195 @@
+OkHttp 1.x Change Log
+=====================
+
+## Version 1.6.0
+
+_2014-05-23_
+
+ * Offer bridges to make it easier to migrate from OkHttp 1.x to OkHttp 2.0.
+   This adds `OkUrlFactory`, `Cache`, and `@Deprecated` annotations for APIs
+   dropped in 2.0.
+
+## Version 1.5.4
+
+_2014-04-14_
+
+ * Drop ALPN support in Android. There's a concurrency bug in all
+   currently-shipping versions.
+ * Support asynchronous disconnects by breaking the socket only. This should
+   prevent flakiness from multiple threads concurrently accessing a stream.
+
+## Version 1.5.3
+
+_2014-03-29_
+
+ * Fix bug where the Content-Length header was not always dropped when
+   following a redirect from a POST to a GET.
+ * Implement basic support for `Thread.interrupt()`. OkHttp now checks
+   for an interruption before doing a blocking call. If it is interrupted,
+   it throws an `InterruptedIOException`.
+
+## Version 1.5.2
+
+_2014-03-17_
+
+ * Fix bug where deleting a file that was absent from the `HttpResponseCache`
+   caused an IOException.
+ * Fix bug in HTTP/2 where our HPACK decoder wasn't emitting entries in
+   certain eviction scenarios, leading to dropped response headers.
+
+## Version 1.5.1
+
+_2014-03-11_
+
+ * Fix 1.5.0 regression where connections should not have been recycled.
+ * Fix 1.5.0 regression where transparent Gzip was broken by attempting to
+   recover from another I/O failure.
+ * Fix problems where spdy/3.1 headers may not have been compressed properly.
+ * Fix problems with spdy/3.1 and http/2 where the wrong window size was being
+   used.
+ * Fix 1.5.0 regression where conditional cache responses could corrupt the
+   connection pool.
+
+
+## Version 1.5.0
+
+_2014-03-07_
+
+
+##### OkHttp no longer uses the default SSL context.
+
+Applications that want to use the global SSL context with OkHttp should configure their
+OkHttpClient instances with the following:
+
+```java
+okHttpClient.setSslSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory());
+```
+
+A simpler solution is to avoid the shared default SSL socket factory. Instead, if you
+need to customize SSL, do so for your specific OkHttpClient instance only.
+
+##### Synthetic headers have changed
+
+Previously OkHttp added a synthetic response header, `OkHttp-Selected-Transport`. It
+has been replaced with a new synthetic header, `OkHttp-Selected-Protocol`.
+
+##### Changes
+
+ * New: Support for `HTTP-draft-09/2.0`.
+ * New: Support for `spdy/3.1`. Dropped support for `spdy/3`.
+ * New: Use ALPN on Android platforms that support it (4.4+)
+ * New: CacheControl model and parser.
+ * New: Protocol selection in MockWebServer.
+ * Fix: Route selection shouldn't use TLS modes that we know will fail.
+ * Fix: Cache SPDY responses even if the response body is closed prematurely.
+ * Fix: Use strict timeouts when aborting a download.
+ * Fix: Support Shoutcast HTTP responses like `ICY 200 OK`.
+ * Fix: Don't unzip if there isn't a response body.
+ * Fix: Don't leak gzip streams on redirects.
+ * Fix: Don't do DNS lookups on invalid hosts.
+ * Fix: Exhaust the underlying stream when reading gzip streams.
+ * Fix: Support the `PATCH` method.
+ * Fix: Support request bodies on `DELETE` method.
+ * Fix: Drop the `okhttp-protocols` module.
+ * Internal: Replaced internal byte array buffers with pooled buffers ("OkBuffer").
+
+
+## Version 1.3.0
+
+_2014-01-11_
+
+ * New: Support for "PATCH" HTTP method in client and MockWebServer.
+ * Fix: Drop `Content-Length` header when redirected from POST to GET.
+ * Fix: Correctly read cached header entries with malformed header names.
+ * Fix: Do not directly support any authentication schemes other than "Basic".
+ * Fix: Respect read timeouts on recycled connections.
+ * Fix: Transmit multiple cookie values as a single header with delimiter.
+ * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`.
+ * Fix: Persist proper `Content-Encoding` header to cache for GZip responses.
+ * Fix: Eliminate rare race condition in SPDY streams that would prevent connection reuse.
+ * Fix: Change HTTP date formats to UTC to conform to RFC2616 section 3.3.
+ * Fix: Support SPDY header blocks with trailing bytes.
+ * Fix: Allow `;` as separator for `Cache-Control` header.
+ * Fix: Correct bug where HTTPS POST requests were always automatically buffered.
+ * Fix: Honor read timeout when parsing SPDY headers.
+
+
+## Version 1.2.1
+
+_2013-08-23_
+
+ * Resolve issue with 'jar-with-dependencies' artifact creation.
+ * Fix: Support empty SPDY header values.
+
+
+## Version 1.2.0
+
+_2013-08-11_
+
+ *  New APIs on OkHttpClient to set default timeouts for connect and read.
+ *  Fix bug when caching SPDY responses.
+ *  Fix a bug with SPDY plus half-closed streams. (thanks kwuollett)
+ *  Fix a bug in `Content-Length` reporting for gzipped streams in the Apache
+    HTTP client adapter. (thanks kwuollett)
+ *  Work around the Alcatel `getByInetAddress` bug (thanks k.kocel)
+ *  Be more aggressive about testing pooled sockets before reuse. (thanks
+    warpspin)
+ *  Include `Content-Type` and `Content-Encoding` in the Apache HTTP client
+    adapter. (thanks kwuollett)
+ *  Add a media type class to OkHttp.
+ *  Change custom header prefix:
+
+    ```
+    X-Android-Sent-Millis is now OkHttp-Sent-Millis
+    X-Android-Received-Millis is now OkHttp-Received-Millis
+    X-Android-Response-Source is now OkHttp-Response-Source
+    X-Android-Selected-Transport is now OkHttp-Selected-Transport
+    ```
+ *  Improve cache invalidation for POST-like requests.
+ *  Bring MockWebServer into OkHttp and teach it SPDY.
+
+
+## Version 1.1.1
+
+_2013-06-23_
+
+ * Fix: ClassCastException when caching responses that were redirected from
+   HTTP to HTTPS.
+
+
+## Version 1.1.0
+
+_2013-06-15_
+
+ * Fix: Connection reuse was broken for most HTTPS connections due to a bug in
+   the way the hostname verifier was selected.
+ * Fix: Locking bug in SpdyConnection.
+ * Fix: Ignore null header values (for compatibility with HttpURLConnection).
+ * Add URLStreamHandlerFactory support so that `URL.openConnection()` uses
+   OkHttp.
+ * Expose the transport ("http/1.1", "spdy/3", etc.) via magic request headers.
+   Use `X-Android-Transports` to write the preferred transports and
+   `X-Android-Selected-Transport` to read the negotiated transport.
+
+
+## Version 1.0.2
+
+_2013-05-11_
+
+ * Fix: Remove use of Java 6-only APIs.
+ * Fix: Properly handle exceptions from `NetworkInterface` when querying MTU.
+ * Fix: Ensure MTU has a reasonable default and upper-bound.
+
+
+## Version 1.0.1
+
+_2013-05-06_
+
+ * Correct casing of SSL in method names (`getSslSocketFactory`/`setSslSocketFactory`).
+
+
+## Version 1.0.0
+
+_2013-05-06_
+
+Initial release.
diff --git a/docs/changelog_2x.md b/docs/changelog_2x.md
new file mode 100644
index 0000000000..b64593efab
--- /dev/null
+++ b/docs/changelog_2x.md
@@ -0,0 +1,630 @@
+OkHttp 2.x Change Log
+=====================
+
+## Version 2.7.5
+
+_2016-02-25_
+
+ *  Fix: Change the certificate pinner to always build full chains. This
+    prevents a potential crash when using certificate pinning with the Google
+    Play Services security provider.
+
+
+## Version 2.7.4
+
+_2016-02-07_
+
+ *  Fix: Don't crash when finding the trust manager if the Play Services (GMS)
+    security provider is installed.
+ *  Fix: The previous release introduced a performance regression on Android,
+    caused by looking up CA certificates. This is now fixed.
+
+
+## Version 2.7.3
+
+_2016-02-06_
+
+ *  Fix: Permit the trusted CA root to be pinned by `CertificatePinner`.
+
+
+## Version 2.7.2
+
+_2016-01-07_
+
+ *  Fix: Don't eagerly release stream allocations on cache hits. We might still
+    need them to handle redirects.
+
+
+## Version 2.7.1
+
+_2016-01-01_
+
+ *  Fix: Don't do a health check on newly-created connections. This is
+    unnecessary work that could put the client in an inconsistent state if the
+    health check fails.
+
+
+## Version 2.7.0
+
+_2015-12-13_
+
+ *  **Rewritten connection management.** Previously OkHttp's connection pool
+    managed both idle and active connections for HTTP/2, but only idle
+    connections for HTTP/1.x. With this update the connection pool manages both
+    idle and active connections for everything. OkHttp now detects and warns on
+    connections that were allocated but never released, and will enforce HTTP/2
+    stream limits. This update also fixes `Call.cancel()` to not do I/O on the
+    calling thread.
+ *  Fix: Don't log gzipped data in the logging interceptor.
+ *  Fix: Don't resolve DNS addresses when connecting through a SOCKS proxy.
+ *  Fix: Drop the synthetic `OkHttp-Selected-Protocol` response header.
+ *  Fix: Support 204 and 205 'No Content' replies in the logging interceptor.
+ *  New: Add `Call.isExecuted()`.
+
+
+## Version 2.6.0
+
+_2015-11-22_
+
+ *  **New Logging Interceptor.** The `logging-interceptor` subproject offers
+    simple request and response logging. It may be configured to log headers and
+    bodies for debugging. It requires this Maven dependency:
+
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okhttp</groupId>
+       <artifactId>logging-interceptor</artifactId>
+       <version>2.6.0</version>
+     </dependency>
+     ```
+
+    Configure basic logging like this:
+
+    ```java
+    HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
+    loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);
+    client.networkInterceptors().add(loggingInterceptor);
+    ```
+
+    **Warning:** Avoid `Level.HEADERS` and `Level.BODY` in production because
+    they could leak passwords and other authentication credentials to insecure
+    logs.
+
+ *  **WebSocket API now uses `RequestBody` and `ResponseBody` for messages.**
+    This is a backwards-incompatible API change.
+
+ *  **The DNS service is now pluggable.** In some situations this may be useful
+    to manually prioritize specific IP addresses.
+
+ *  Fix: Don't throw when converting an `HttpUrl` to a `java.net.URI`.
+    Previously URLs with special characters like `|` and `[` would break when
+    subjected to URI’s overly-strict validation.
+ *  Fix: Don't re-encode `+` as `%20` in encoded URL query strings. OkHttp
+    prefers `%20` when doing its own encoding, but will retain `+` when that is
+    provided.
+ *  Fix: Enforce that callers call `WebSocket.close()` on IO errors. Error
+    handling in WebSockets is significantly improved.
+ *  Fix: Don't use SPDY/3 style header concatenation for HTTP/2 request headers.
+    This could have corrupted requests where multiple headers had the same name,
+    as in cookies.
+ *  Fix: Reject bad characters in the URL hostname. Previously characters like
+    `\0` would cause a late crash when building the request.
+ *  Fix: Allow interceptors to change the request method.
+ *  Fix: Don’t use the request's `User-Agent` or `Proxy-Authorization` when
+    connecting to an HTTPS server via an HTTP tunnel. The `Proxy-Authorization`
+    header was being leaked to the origin server.
+ *  Fix: Digits may be used in a URL scheme.
+ *  Fix: Improve connection timeout recovery.
+ *  Fix: Recover from `getsockname` crashes impacting Android releases prior to
+    4.2.2.
+ *  Fix: Drop partial support for HTTP/1.0. Previously OkHttp would send
+    `HTTP/1.0` on connections after seeing a response with `HTTP/1.0`. The fixed
+    behavior is consistent with Firefox and Chrome.
+ *  Fix: Allow a body in `OPTIONS` requests.
+ *  Fix: Don't percent-encode non-ASCII characters in URL fragments.
+ *  Fix: Handle null fragments.
+ *  Fix: Don’t crash on interceptors that throw `IOException` before a
+    connection is attempted.
+ *  New: Support [WebDAV][webdav] HTTP methods.
+ *  New: Buffer WebSocket frames for better performance.
+ *  New: Drop support for `TLS_DHE_DSS_WITH_AES_128_CBC_SHA`, our only remaining
+    DSS cipher suite. This is consistent with Firefox and Chrome which have also
+    dropped these cipher suite.
+
+## Version 2.5.0
+
+_2015-08-25_
+
+ *  **Timeouts now default to 10 seconds.** Previously we defaulted to never
+    timing out, and that was a lousy policy. If establishing a connection,
+    reading the next byte from a connection, or writing the next byte to a
+    connection takes more than 10 seconds to complete, you’ll need to adjust
+    the timeouts manually.
+
+ *  **OkHttp now rejects request headers that contain invalid characters.** This
+    includes potential security problems (newline characters) as well as simple
+    non-ASCII characters (including international characters and emoji).
+
+ *  **Call canceling is more reliable.**  We had a bug where a socket being
+     connected wasn't being closed when the application used `Call.cancel()`.
+
+ *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug
+    where changing a URL from `http` to `https` would leave it on port 80.
+
+ *  **Okio has been updated to 1.6.0.**
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okio</groupId>
+       <artifactId>okio</artifactId>
+       <version>1.6.0</version>
+     </dependency>
+     ```
+
+ *  New: `Cache.initialize()`. Call this on a background thread to eagerly
+    initialize the response cache.
+ *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to
+    write JUnit tests with `MockWebServer`. The `MockWebServer` library now
+    depends on JUnit, though it continues to work with all testing frameworks.
+ *  Fix: `FormEncodingBuilder` is now consistent with browsers in which
+    characters it escapes. Previously we weren’t percent-encoding commas,
+    parens, and other characters.
+ *  Fix: Relax `FormEncodingBuilder` to support building empty forms.
+ *  Fix: Timeouts throw `SocketTimeoutException`, not `InterruptedIOException`.
+ *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining
+    whether an HTTP request permits a body.
+ *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses.
+ *  Fix: Use `HttpUrl` internally.
+ *  Fix: Recover from Android 4.2.2 EBADF crashes.
+ *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY
+    write fails, leaving the connection in an inconsistent state.
+ *  Fix: Make sure the default user agent is ASCII.
+
+
+## Version 2.4.0
+
+_2015-05-22_
+
+ *  **Forbid response bodies on HTTP 204 and 205 responses.** Webservers that
+    return such malformed responses will now trigger a `ProtocolException` in
+    the client.
+
+ *  **WebSocketListener has incompatible changes.** The `onOpen()` method is now
+    called on the reader thread, so implementations must return before further
+    websocket messages will be delivered. The `onFailure()` method now includes
+    an HTTP response if one was returned.
+
+## Version 2.4.0-RC1
+
+_2015-05-16_
+
+ *  **New HttpUrl API.** It's like `java.net.URL` but good. Note that
+    `Request.Builder.url()` now throws `IllegalArgumentException` on malformed
+    URLs. (Previous releases would throw a `MalformedURLException` when calling
+    a malformed URL.)
+
+ *  **We've improved connect failure recovery.** We now differentiate between
+    setup, connecting, and connected and implement appropriate recovery rules
+    for each. This changes `Address` to no longer use `ConnectionSpec`. (This is
+    an incompatible API change).
+
+ *  **`FormEncodingBuilder` now uses `%20` instead of `+` for encoded spaces.**
+    Both are permitted-by-spec, but `%20` requires fewer special cases.
+
+ *  **Okio has been updated to 1.4.0.**
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okio</groupId>
+       <artifactId>okio</artifactId>
+       <version>1.4.0</version>
+     </dependency>
+     ```
+
+ *  **`Request.Builder` no longer accepts null if a request body is required.**
+    Passing null will now fail for request methods that require a body. Instead
+    use an empty body such as this one:
+
+    ```java
+        RequestBody.create(null, new byte[0]);
+    ```
+
+ * **`CertificatePinner` now supports wildcard hostnames.** As always with
+   certificate pinning, you must be very careful to avoid [bricking][brick]
+   your app. You'll need to pin both the top-level domain and the `*.` domain
+   for full coverage.
+
+    ```java
+     client.setCertificatePinner(new CertificatePinner.Builder()
+         .add("publicobject.com",   "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=")
+         .add("*.publicobject.com", "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=")
+         .add("publicobject.com",   "sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=")
+         .add("*.publicobject.com", "sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=")
+         .add("publicobject.com",   "sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=")
+         .add("*.publicobject.com", "sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=")
+         .add("publicobject.com",   "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=")
+         .add("*.publicobject.com", "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=")
+         .build());
+    ```
+
+ *  **Interceptors lists are now deep-copied by `OkHttpClient.clone()`.**
+    Previously clones shared interceptors, which made it difficult to customize
+    the interceptors on a request-by-request basis.
+
+ *  New: `Headers.toMultimap()`.
+ *  New: `RequestBody.create(MediaType, ByteString)`.
+ *  New: `ConnectionSpec.isCompatible(SSLSocket)`.
+ *  New: `Dispatcher.getQueuedCallCount()` and
+    `Dispatcher.getRunningCallCount()`. These can be useful in diagnostics.
+ *  Fix: OkHttp no longer shares timeouts between pooled connections. This was
+    causing some applications to crash when connections were reused.
+ *  Fix: `OkApacheClient` now allows an empty `PUT` and `POST`.
+ *  Fix: Websockets no longer rebuffer socket streams.
+ *  Fix: Websockets are now better at handling close frames.
+ *  Fix: Content type matching is now case insensitive.
+ *  Fix: `Vary` headers are not lost with `android.net.http.HttpResponseCache`.
+ *  Fix: HTTP/2 wasn't enforcing stream timeouts when writing the underlying
+    connection. Now it is.
+ *  Fix: Never return null on `call.proceed()`. This was a bug in call
+    cancelation.
+ *  Fix: When a network interceptor mutates a request, that change is now
+    reflected in `Response.networkResponse()`.
+ *  Fix: Badly-behaving caches now throw a checked exception instead of a
+    `NullPointerException`.
+ *  Fix: Better handling of uncaught exceptions in MockWebServer with HTTP/2.
+
+## Version 2.3.0
+
+_2015-03-16_
+
+ *  **HTTP/2 support.** We've done interop testing and haven't seen any
+    problems. HTTP/2 support has been a big effort and we're particularly
+    thankful to Adrian Cole who has helped us to reach this milestone.
+
+ *  **RC4 cipher suites are no longer supported by default.** To connect to
+    old, obsolete servers relying on these cipher suites, you must create a
+    custom `ConnectionSpec`.
+
+ *  **Beta WebSockets support.**. The `okhttp-ws` subproject offers a new
+    websockets client. Please try it out! When it's ready we intend to include
+    it with the core OkHttp library.
+
+ *  **Okio updated to 1.3.0.**
+
+    ```xml
+    <dependency>
+      <groupId>com.squareup.okio</groupId>
+      <artifactId>okio</artifactId>
+      <version>1.3.0</version>
+    </dependency>
+    ```
+
+ *  **Fix: improve parallelism of async requests.** OkHttp's Dispatcher had a
+    misconfigured `ExecutorService` that limited the number of worker threads.
+    If you're using `Call.enqueue()` this update should significantly improve
+    request concurrency.
+
+ *  **Fix: Lazily initialize the response cache.** This avoids strict mode
+    warnings when initializing OkHttp on Android‘s main thread.
+
+ *  **Fix: Disable ALPN on Android 4.4.** That release of the feature was
+    unstable and prone to native crashes in the underlying OpenSSL code.
+ *  Fix: Don't send both `If-None-Match` and `If-Modified-Since` cache headers
+    when both are applicable.
+ *  Fix: Fail early when a port is out of range.
+ *  Fix: Offer `Content-Length` headers for multipart request bodies.
+ *  Fix: Throw `UnknownServiceException` if a cleartext connection is attempted
+    when explicitly forbidden.
+ *  Fix: Throw a `SSLPeerUnverifiedException` when host verification fails.
+ *  Fix: MockWebServer explicitly closes sockets. (On some Android releases,
+    closing the input stream and output stream of a socket is not sufficient.
+ *  Fix: Buffer outgoing HTTP/2 frames to limit how many outgoing frames are
+    created.
+ *  Fix: Avoid crashing when cache writing fails due to a full disk.
+ *  Fix: Improve caching of private responses.
+ *  Fix: Update cache-by-default response codes.
+ *  Fix: Reused `Request.Builder` instances no longer hold stale URL fields.
+ *  New: ConnectionSpec can now be configured to use the SSL socket's default
+    cipher suites. To use, set the cipher suites to `null`.
+ *  New: Support `DELETE` with a request body.
+ *  New: `Headers.of(Map)` creates headers from a Map.
+
+
+## Version 2.2.0
+
+_2014-12-30_
+
+ *  **`RequestBody.contentLength()` now throws `IOException`.**
+    This is a source-incompatible change. If you have code that calls
+    `RequestBody.contentLength()`, your compile will break with this
+    update. The change is binary-compatible, however: code compiled
+    for OkHttp 2.0 and 2.1 will continue to work with this update.
+
+ *  **`COMPATIBLE_TLS` no longer supports SSLv3.** In response to the
+    [POODLE](https://googleonlinesecurity.blogspot.ca/2014/10/this-poodle-bites-exploiting-ssl-30.html)
+    vulnerability, OkHttp no longer offers SSLv3 when negotiation an
+    HTTPS connection. If you continue to need to connect to webservers
+    running SSLv3, you must manually configure your own `ConnectionSpec`.
+
+ *  **OkHttp now offers interceptors.** Interceptors are a powerful mechanism
+    that can monitor, rewrite, and retry calls. The [interceptors doc][interceptors] is a full
+    introduction to this new API.
+
+ *  New: APIs to iterate and selectively clear the response cache.
+ *  New: Support for SOCKS proxies.
+ *  New: Support for `TLS_FALLBACK_SCSV`.
+ *  New: Update HTTP/2 support to `h2-16` and `hpack-10`.
+ *  New: APIs to prevent retrying non-idempotent requests.
+ *  Fix: Drop NPN support. Going forward we support ALPN only.
+ *  Fix: The hostname verifier is now strict. This is consistent with the hostname
+    verifier in modern browsers.
+ *  Fix: Improve `CONNECT` handling for misbehaving HTTP proxies.
+ *  Fix: Don't retry requests that failed due to timeouts.
+ *  Fix: Cache 302s and 308s that include appropriate response headers.
+ *  Fix: Improve pooling of connections that use proxy selectors.
+ *  Fix: Don't leak connections when using ALPN on the desktop.
+ *  Fix: Update Jetty ALPN to `7.1.2.v20141202` (Java 7) and `8.1.2.v20141202` (Java 8).
+    This fixes a bug in resumed TLS sessions where the wrong protocol could be
+    selected.
+ *  Fix: Don't crash in SPDY and HTTP/2 when disconnecting before connecting.
+ *  Fix: Avoid a reverse DNS-lookup for a numeric proxy address
+ *  Fix: Resurrect http/2 frame logging.
+ *  Fix: Limit to 20 authorization attempts.
+
+## Version 2.1.0
+
+_2014-11-11_
+
+ *  New: Typesafe APIs for interacting with cipher suites and TLS versions.
+ *  Fix: Don't crash when mixing authorization challenges with upload retries.
+
+
+## Version 2.1.0-RC1
+
+_2014-11-04_
+
+ *  **OkHttp now caches private responses**. We've changed from a shared cache
+    to a private cache, and will now store responses that use an `Authorization`
+    header. This means OkHttp's cache shouldn't be used on middleboxes that sit
+    between user agents and the origin server.
+
+ *  **TLS configuration updated.** OkHttp now explicitly enables TLSv1.2,
+    TLSv1.1 and TLSv1.0 where they are supported. It will continue to perform
+    only one fallback, to SSLv3. Applications can now configure this with the
+    `ConnectionSpec` class.
+
+    To disable TLS fallback:
+
+    ```java
+    client.setConnectionSpecs(Arrays.asList(
+        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));
+    ```
+
+    To disable cleartext connections, permitting `https` URLs only:
+
+    ```java
+    client.setConnectionSpecs(Arrays.asList(
+        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));
+    ```
+
+ *  **New cipher suites.** Please confirm that your webservers are reachable
+    with this limited set of cipher suites.
+
+    ```
+                                             Android
+    Name                                     Version
+
+    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256  5.0
+    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256    5.0
+    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256      5.0
+    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA     4.0
+    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA     4.0
+    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA       4.0
+    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA       4.0
+    TLS_ECDHE_ECDSA_WITH_RC4_128_SHA         4.0
+    TLS_ECDHE_RSA_WITH_RC4_128_SHA           4.0
+    TLS_DHE_RSA_WITH_AES_128_CBC_SHA         2.3
+    TLS_DHE_DSS_WITH_AES_128_CBC_SHA         2.3
+    TLS_DHE_RSA_WITH_AES_256_CBC_SHA         2.3
+    TLS_RSA_WITH_AES_128_GCM_SHA256          5.0
+    TLS_RSA_WITH_AES_128_CBC_SHA             2.3
+    TLS_RSA_WITH_AES_256_CBC_SHA             2.3
+    SSL_RSA_WITH_3DES_EDE_CBC_SHA            2.3  (Deprecated in 5.0)
+    SSL_RSA_WITH_RC4_128_SHA                 2.3
+    SSL_RSA_WITH_RC4_128_MD5                 2.3  (Deprecated in 5.0)
+    ```
+
+ *  **Okio updated to 1.0.1.**
+
+    ```xml
+    <dependency>
+      <groupId>com.squareup.okio</groupId>
+      <artifactId>okio</artifactId>
+      <version>1.0.1</version>
+    </dependency>
+    ```
+
+ *  **New APIs to permit easy certificate pinning.** Be warned, certificate
+    pinning is dangerous and could prevent your application from trusting your
+    server!
+
+ *  **Cache improvements.** This release fixes some severe cache problems
+    including a bug where the cache could be corrupted upon certain access
+    patterns. We also fixed a bug where the cache was being cleared due to a
+    corrupted journal. We've added APIs to configure a request's `Cache-Control`
+    headers, and to manually clear the cache.
+
+ *  **Request cancellation fixes.** This update fixes a bug where synchronous
+    requests couldn't be canceled by tag. This update avoids crashing when
+    `onResponse()` throws an `IOException`. That failure will now be logged
+    instead of notifying the thread's uncaught exception handler. We've added a
+    new API, `Call.isCanceled()` to check if a call has been canceled.
+
+ *  New: Update `MultipartBuilder` to support content length.
+ *  New: Make it possible to mock `OkHttpClient` and `Call`.
+ *  New: Update to h2-14 and hpack-9.
+ *  New: OkHttp includes a user-agent by default, like `okhttp/2.1.0-RC1`.
+ *  Fix: Handle response code `308 Permanent Redirect`.
+ *  Fix: Don't skip the callback if a call is canceled.
+ *  Fix: Permit hostnames with underscores.
+ *  Fix: Permit overriding the content-type in `OkApacheClient`.
+ *  Fix: Use the socket factory for direct connections.
+ *  Fix: Honor `OkUrlFactory` APIs that disable redirects.
+ *  Fix: Don't crash on concurrent modification of `SPDY` SPDY settings.
+
+## Version 2.0.0
+
+This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice
+on upgrading from 1.x to 2.x.
+
+_2014-06-21_
+
+ *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is
+    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which
+    used `Throwable`.
+ *  Fix: Fixed a caching bug where we weren't storing rewritten request headers
+    like `Accept-Encoding`.
+ *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain
+    large downloads
+ *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.)
+
+## Version 2.0.0-RC2
+
+_2014-06-11_
+
+This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for
+advice on upgrading from 1.x to 2.x.
+
+ *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where
+    connections were neither closed nor pooled.
+ *  Fix: Revert builder-style return types from OkHttpClient's timeout methods
+    for binary compatibility with OkHttp 1.x.
+ *  Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to
+    `https://google.com`, which doesn't follow the SPDY/3.1 spec!
+ *  Fix: Always configure NPN headers. This fixes connectivity to
+    `https://facebook.com` when SPDY and HTTP/2 are both disabled. Otherwise an
+    unexpected NPN response is received and OkHttp crashes.
+ *  Fix: Write continuation frames when HPACK data is larger than 16383 bytes.
+ *  Fix: Don't drop uncaught exceptions thrown in async calls.
+ *  Fix: Throw an exception eagerly when a request body is not legal. Previously
+    we ignored the problem at request-building time, only to crash later with a
+    `NullPointerException`.
+ *  Fix: Include a backwards-compatible `OkHttp-Response-Source` header with
+    `OkUrlFactory `responses.
+ *  Fix: Don't include a default User-Agent header in requests made with the Call
+    API. Requests made with OkUrlFactory will continue to have a default user
+    agent.
+ *  New: Guava-like API to create headers:
+
+    ```java
+    Headers headers = Headers.of(name1, value1, name2, value2, ...).
+    ```
+
+ *  New: Make the content-type header optional for request bodies.
+ *  New: `Response.isSuccessful()` is a convenient API to check response codes.
+ *  New: The response body can now be read outside of the callback. Response
+    bodies must always be closed, otherwise they will leak connections!
+ *  New: APIs to create multipart request bodies (`MultipartBuilder`) and form
+    encoding bodies (`FormEncodingBuilder`).
+
+## Version 2.0.0-RC1
+
+_2014-05-23_
+
+OkHttp 2 is designed around a new API that is true to HTTP, with classes for
+requests, responses, headers, and calls. It uses modern Java patterns like
+immutability and chained builders. The API now offers asynchronous callbacks
+in addition to synchronous blocking calls.
+
+#### API Changes
+
+ *  **New Request and Response types,** each with their own builder. There's also
+    a `RequestBody` class to write the request body to the network and a
+    `ResponseBody` to read the response body from the network. The standalone
+    `Headers` class offers full access to the HTTP headers.
+
+ *  **Okio dependency added.** OkHttp now depends on
+    [Okio](https://github.com/square/okio), an I/O library that makes it easier
+    to access, store and process data. Using this library internally makes OkHttp
+    faster while consuming less memory. You can write a `RequestBody` as an Okio
+    `BufferedSink` and a `ResponseBody` as an Okio `BufferedSource`. Standard
+    `InputStream` and `OutputStream` access is also available.
+
+ *  **New Call and Callback types** execute requests and receive their
+    responses. Both types of calls can be canceled via the `Call` or the
+    `OkHttpClient`.
+
+ *  **URLConnection support has moved to the okhttp-urlconnection module.**
+    If you're upgrading from 1.x, this change will impact you. You will need to
+    add the `okhttp-urlconnection` module to your project and use the
+    `OkUrlFactory` to create new instances of `HttpURLConnection`:
+
+    ```java
+    // OkHttp 1.x:
+    HttpURLConnection connection = client.open(url);
+
+    // OkHttp 2.x:
+    HttpURLConnection connection = new OkUrlFactory(client).open(url);
+    ```
+
+ *  **Custom caches are no longer supported.** In OkHttp 1.x it was possible to
+    define your own response cache with the `java.net.ResponseCache` and OkHttp's
+    `OkResponseCache` interfaces. Both of these APIs have been dropped. In
+    OkHttp 2 the built-in disk cache is the only supported response cache.
+
+ *  **HttpResponseCache has been renamed to Cache.** Install it with
+    `OkHttpClient.setCache(...)` instead of `OkHttpClient.setResponseCache(...)`.
+
+ *  **OkAuthenticator has been replaced with Authenticator.** This new
+    authenticator has access to the full incoming response and can respond with
+    whichever followup request is appropriate. The `Challenge` class is now a
+    top-level class and `Credential` is replaced with a utility class called
+    `Credentials`.
+
+ *  **OkHttpClient.getFollowProtocolRedirects() renamed to
+    getFollowSslRedirects()**. We reserve the word _protocol_ for the HTTP
+    version being used (HTTP/1.1, HTTP/2). The old name of this method was
+    misleading; it was always used to configure redirects between `https://` and
+    `http://` schemes.
+
+ *  **RouteDatabase is no longer public API.** OkHttp continues to track which
+    routes have failed but this is no exposed in the API.
+
+ *  **ResponseSource is gone.** This enum exposed whether a response came from
+    the cache, network, or both. OkHttp 2 offers more detail with raw access to
+    the cache and network responses in the new `Response` class.
+
+ *  **TunnelRequest is gone.** It specified how to connect to an HTTP proxy.
+    OkHttp 2 uses the new `Request` class for this.
+
+ *  **Dispatcher** is a new class that manages the queue of asynchronous calls. It
+    implements limits on total in-flight calls and in-flight calls per host.
+
+#### Implementation changes
+
+ * Support Android `TrafficStats` socket tagging.
+ * Drop authentication headers on redirect.
+ * Added support for compressed data frames.
+ * Process push promise callbacks in order.
+ * Update to http/2 draft 12.
+ * Update to HPACK draft 07.
+ * Add ALPN support. Maven will use ALPN on OpenJDK 8.
+ * Update NPN dependency to target `jdk7u60-b13` and `Oracle jdk7u55-b13`.
+ * Ensure SPDY variants support zero-length DELETE and POST.
+ * Prevent leaking a cache item's InputStreams when metadata read fails.
+ * Use a string to identify TLS versions in routes.
+ * Add frame logger for HTTP/2.
+ * Replacing `httpMinorVersion` with `Protocol`. Expose HTTP/1.0 as a potential protocol.
+ * Use `Protocol` to describe framing.
+ * Implement write timeouts for HTTP/1.1 streams.
+ * Avoid use of SPDY stream ID 1, as that's typically used for UPGRADE.
+ * Support OAuth in `Authenticator`.
+ * Permit a dangling semicolon in media type parsing.
+
+
+## Version 1.x
+
+[Change log](changelog_1x.md)
+
+
+ [brick]: https://noncombatant.org/2015/05/01/about-http-public-key-pinning/
+ [interceptors]: https://square.github.io/okhttp/interceptors/
+ [webdav]: https://tools.ietf.org/html/rfc4918
diff --git a/docs/changelog_3x.md b/docs/changelog_3x.md
new file mode 100644
index 0000000000..4da5a56fde
--- /dev/null
+++ b/docs/changelog_3x.md
@@ -0,0 +1,981 @@
+OkHttp 3.x Change Log
+=====================
+
+## Version 3.14.2
+
+_2019-05-19_
+
+ *  Fix: Lock in a route when recovering from an HTTP/2 connection error. We had a bug where two
+    calls that failed at the same time could cause OkHttp to crash with a `NoSuchElementException`
+    instead of the expected `IOException`.
+
+ *  Fix: Don't crash with a `NullPointerException` when formatting an error message describing a
+    truncated response from an HTTPS proxy.
+
+
+## Version 3.14.1
+
+_2019-04-10_
+
+ *  Fix: Don't crash when an interceptor retries when there are no more routes. This was an
+    edge-case regression introduced with the events cleanup in 3.14.0.
+
+ *  Fix: Provide actionable advice when the exchange is non-null. Prior to 3.14, OkHttp would
+    silently leak connections when an interceptor retries without closing the response body. With
+    3.14 we detect this problem but the exception was not helpful.
+
+## Version 3.14.0
+
+_2019-03-14_
+
+ *  **This release deletes the long-deprecated `OkUrlFactory` and `OkApacheClient` APIs.** These
+    facades hide OkHttp's implementation behind another client's API. If you still need this please
+    copy and paste [ObsoleteUrlFactory.java][obsolete_url_factory] or
+    [ObsoleteApacheClient.java][obsolete_apache_client] into your project.
+
+ *  **OkHttp now supports duplex calls over HTTP/2.** With normal HTTP calls the request must finish
+    before the response starts. With duplex, request and response bodies are transmitted
+    simultaneously. This can be used to implement interactive conversations within a single HTTP
+    call.
+
+    Create duplex calls by overriding the new `RequestBody.isDuplex()` method to return true.
+    This simple option dramatically changes the behavior of the request body and of the entire
+    call.
+
+    The `RequestBody.writeTo()` method may now retain a reference to the provided sink and
+    hand it off to another thread to write to it after `writeTo` returns.
+
+    The `EventListener` may now see requests and responses interleaved in ways not previously
+    permitted. For example, a listener may receive `responseHeadersStart()` followed by
+    `requestBodyEnd()`, both on the same call. Such events may be triggered by different threads
+    even for a single call.
+
+    Interceptors that rewrite or replace the request body may now inadvertently interfere with
+    duplex request bodies. Such interceptors should check `RequestBody.isDuplex()` and avoid
+    accessing the request body when it is.
+
+    Duplex calls require HTTP/2. If HTTP/1 is established instead the duplex call will fail. The
+    most common use of duplex calls is [gRPC][grpc_http2].
+
+ *  New: Prevent OkHttp from retransmitting a request body by overriding `RequestBody.isOneShot()`.
+    This is most useful when writing the request body is destructive.
+
+ *  New: We've added `requestFailed()` and `responseFailed()` methods to `EventListener`. These
+    are called instead of `requestBodyEnd()` and `responseBodyEnd()` in some failure situations.
+    They may also be fired in cases where no event was published previously. In this release we did
+    an internal rewrite of our event code to fix problems where events were lost or unbalanced.
+
+ *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`
+    callback.
+
+ *  Fix: Apply call timeouts when connecting duplex calls, web sockets, and server-sent events.
+    Once the streams are established no further timeout is enforced.
+
+ *  Fix: Retain the `Route` when a connection is reused on a redirect or other follow-up. This was
+    causing some `Authenticator` calls to see a null route when non-null was expected.
+
+ *  Fix: Use the correct key size in the name of `TLS_AES_128_CCM_8_SHA256` which is a TLS 1.3
+    cipher suite. We accidentally specified a key size of 256, preventing that cipher suite from
+    being selected for any TLS handshakes. We didn't notice because this cipher suite isn't
+    supported on Android, Java, or Conscrypt.
+
+    We removed this cipher suite and `TLS_AES_128_CCM_SHA256` from the restricted, modern, and
+    compatible sets of cipher suites. These two cipher suites aren't enabled by default in either
+    Firefox or Chrome.
+
+    See our [TLS Configuration History][tls_configuration_history] tracker for a log of all changes
+    to OkHttp's default TLS options.
+
+ *  New: Upgrade to Conscrypt 2.0.0. OkHttp works with other versions of Conscrypt but this is the
+    version we're testing against.
+
+    ```kotlin
+    implementation("org.conscrypt:conscrypt-openjdk-uber:2.0.0")
+    ```
+
+ *  New: Update the embedded public suffixes list.
+
+
+## Version 3.13.1
+
+_2019-02-05_
+
+ *  Fix: Don't crash when using a custom `X509TrustManager` or `SSLSocket` on Android. When we
+    removed obsolete code for Android 4.4 we inadvertently also removed support for custom
+    subclasses. We've restored that support!
+
+
+## Version 3.13.0
+
+_2019-02-04_
+
+ *  **This release bumps our minimum requirements to Java 8+ or Android 5+.** Cutting off old
+    devices is a serious change and we don't do it lightly! [This post][require_android_5] explains
+    why we're doing this and how to upgrade.
+
+    The OkHttp 3.12.x branch will be our long-term branch for Android 2.3+ (API level 9+) and Java
+    7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is
+    difficult we will backport critical fixes to the 3.12.x branch through December 31, 2020.
+
+ *  **TLSv1 and TLSv1.1 are no longer enabled by default.** Major web browsers are working towards
+    removing these versions altogether in early 2020. If your servers aren't ready yet you can
+    configure OkHttp 3.13 to allow TLSv1 and TLSv1.1 connections:
+
+    ```
+    OkHttpClient client = new OkHttpClient.Builder()
+        .connectionSpecs(Arrays.asList(ConnectionSpec.COMPATIBLE_TLS))
+        .build();
+    ```
+
+ *  New: You can now access HTTP trailers with `Response.trailers()`. This method may only be called
+    after the entire HTTP response body has been read.
+
+ *  New: Upgrade to Okio 1.17.3. If you're on Kotlin-friendly Okio 2.x this release requires 2.2.2
+    or newer.
+
+    ```kotlin
+    implementation("com.squareup.okio:okio:1.17.3")
+    ```
+
+ *  Fix: Don't miss cancels when sending HTTP/2 request headers.
+ *  Fix: Don't miss whole operation timeouts when calls redirect.
+ *  Fix: Don't leak connections if web sockets have malformed responses or if `onOpen()` throws.
+ *  Fix: Don't retry when request bodies fail due to `FileNotFoundException`.
+ *  Fix: Don't crash when URLs have IPv4-mapped IPv6 addresses.
+ *  Fix: Don't crash when building `HandshakeCertificates` on Android API 28.
+ *  Fix: Permit multipart file names to contain non-ASCII characters.
+ *  New: API to get MockWebServer's dispatcher.
+ *  New: API to access headers as `java.time.Instant`.
+ *  New: Fail fast if a `SSLSocketFactory` is used as a `SocketFactory`.
+ *  New: Log the TLS handshake in `LoggingEventListener`.
+
+
+## Version 3.12.4
+
+_2019-09-04_
+
+ *  Fix: Don't crash looking up an absent class on certain buggy Android 4.x devices.
+
+
+## Version 3.12.3
+
+_2019-05-07_
+
+ *  Fix: Permit multipart file names to contain non-ASCII characters.
+ *  Fix: Retain the `Route` when a connection is reused on a redirect or other follow-up. This was
+    causing some `Authenticator` calls to see a null route when non-null was expected.
+
+
+## Version 3.12.2
+
+_2019-03-14_
+
+ *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake.
+ *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`
+    callback.
+
+
+## Version 3.12.1
+
+_2018-12-23_
+
+ *  Fix: Remove overlapping `package-info.java`. This caused issues with some build tools.
+
+
+## Version 3.12.0
+
+_2018-11-16_
+
+ *  **OkHttp now supports TLS 1.3.** This requires either Conscrypt or Java 11+.
+
+ *  **Proxy authenticators are now asked for preemptive authentication.** OkHttp will now request
+    authentication credentials before creating TLS tunnels through HTTP proxies (HTTP `CONNECT`).
+    Authenticators should identify preemptive authentications by the presence of a challenge whose
+    scheme is "OkHttp-Preemptive".
+
+ *  **OkHttp now offers full-operation timeouts.** This sets a limit on how long the entire call may
+    take and covers resolving DNS, connecting, writing the request body, server processing, and
+    reading the full response body. If a call requires redirects or retries all must complete within
+    one timeout period.
+
+    Use `OkHttpClient.Builder.callTimeout()` to specify the default duration and `Call.timeout()` to
+    specify the timeout of an individual call.
+
+ *  New: Return values and fields are now non-null unless otherwise annotated.
+ *  New: `LoggingEventListener` makes it easy to get basic visibility into a call's performance.
+    This class is in the `logging-interceptor` artifact.
+ *  New: `Headers.Builder.addUnsafeNonAscii()` allows non-ASCII values to be added without an
+    immediate exception.
+ *  New: Headers can be redacted in `HttpLoggingInterceptor`.
+ *  New: `Headers.Builder` now accepts dates.
+ *  New: OkHttp now accepts `java.time.Duration` for timeouts on Java 8+ and Android 26+.
+ *  New: `Challenge` includes all authentication parameters.
+ *  New: Upgrade to BouncyCastle 1.60, Conscrypt 1.4.0, and Okio 1.15.0. We don't yet require
+    Kotlin-friendly Okio 2.x but OkHttp works fine with that series.
+
+    ```kotlin
+    implementation("org.bouncycastle:bcprov-jdk15on:1.60")
+    implementation("org.conscrypt:conscrypt-openjdk-uber:1.4.0")
+    implementation("com.squareup.okio:okio:1.15.0")
+    ```
+
+ *  Fix: Handle dispatcher executor shutdowns gracefully. When there aren't any threads to carry a
+    call its callback now gets a `RejectedExecutionException`.
+ *  Fix: Don't permanently cache responses with `Cache-Control: immutable`. We misunderstood the
+    original `immutable` proposal!
+ *  Fix: Change `Authenticator`'s `Route` parameter to be nullable. This was marked as non-null but
+    could be called with null in some cases.
+ *  Fix: Don't create malformed URLs when `MockWebServer` is reached via an IPv6 address.
+ *  Fix: Don't crash if the system default authenticator is null.
+ *  Fix: Don't crash generating elliptic curve certificates on Android.
+ *  Fix: Don't crash doing platform detection on RoboVM.
+ *  Fix: Don't leak socket connections when web socket upgrades fail.
+
+
+## Version 3.11.0
+
+_2018-07-12_
+
+ *  **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**
+
+    `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its
+    builder then use it to sign another certificate or perform a TLS handshake. The
+    `certificatePem()` method encodes the certificate in the familiar PEM format
+    (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key.
+
+    `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server
+    it keeps your `HeldCertificate` and its chain. On the client it keeps the root certificates
+    that are trusted to sign a server's certificate chain. `HandshakeCertificates` also works with
+    mutual TLS where these roles are reversed.
+
+    These classes make it possible to enable HTTPS in MockWebServer in [just a few lines of
+    code][https_server_sample].
+
+ *  **OkHttp now supports prior knowledge cleartext HTTP/2.** Enable this by setting
+    `Protocol.H2_PRIOR_KNOWLEDGE` as the lone protocol on an `OkHttpClient.Builder`. This mode
+    only supports `http:` URLs and is best suited in closed environments where HTTPS is
+    inappropriate.
+
+ *  New: `HttpUrl.get(String)` is an alternative to `HttpUrl.parse(String)` that throws an exception
+    when the URL is malformed instead of returning null. Use this to avoid checking for null in
+    situations where the input is known to be well-formed. We've also added `MediaType.get(String)`
+    which is an exception-throwing alternative to `MediaType.parse(String)`.
+ *  New: The `EventListener` API previewed in OkHttp 3.9 has graduated to a stable API. Use this
+    interface to track metrics and monitor HTTP requests' size and duration.
+ *  New: `okhttp-dnsoverhttps` is an experimental API for doing DNS queries over HTTPS. Using HTTPS
+    for DNS offers better security and potentially better performance. This feature is a preview:
+    the API is subject to change.
+ *  New: `okhttp-sse` is an early preview of Server-Sent Events (SSE). This feature is incomplete
+    and is only suitable for experimental use.
+ *  New: MockWebServer now supports client authentication (mutual TLS). Call `requestClientAuth()`
+    to permit an optional client certificate or `requireClientAuth()` to require one.
+ *  New: `RecordedRequest.getHandshake()` returns the HTTPS handshake of a request sent to
+    `MockWebServer`.
+ *  Fix: Honor the `MockResponse` header delay in MockWebServer.
+ *  Fix: Don't release HTTP/2 connections that have multiple canceled calls. We had a bug where
+    canceling calls would cause the shared HTTP/2 connection to be unnecessarily released. This
+    harmed connection reuse.
+ *  Fix: Ensure canceled and discarded HTTP/2 data is not permanently counted against the limited
+    flow control window. We had a few bugs where window size accounting was broken when streams
+    were canceled or reset.
+ *  Fix: Recover gracefully if the TLS session returns an unexpected version (`NONE`) or cipher
+    suite (`SSL_NULL_WITH_NULL_NULL`).
+ *  Fix: Don't change Conscrypt configuration globally. We migrated from a process-wide setting to
+    configuring only OkHttp's TLS sockets.
+ *  Fix: Prefer TLSv1.2 where it is available. On certain older platforms it is necessary to opt-in
+    to TLSv1.2.
+ *  New: `Request.tag()` permits multiple tags. Use a `Class<?>` as a key to identify tags. Note
+    that `tag()` now returns null if the request has no tag. Previously this would return the
+    request itself.
+ *  New: `Headers.Builder.addAll(Headers)`.
+ *  New: `ResponseBody.create(MediaType, ByteString)`.
+ *  New: Embed R8/ProGuard rules in the jar. These will be applied automatically by R8.
+ *  Fix: Release the connection if `Authenticator` throws an exception.
+ *  Fix: Change the declaration of `OkHttpClient.cache()` to return a `@Nullable Cache`. The return
+    value has always been nullable but it wasn't declared properly.
+ *  Fix: Reverse suppression of connect exceptions. When both a call and its retry fail, we now
+    throw the initial exception which is most likely to be actionable.
+ *  Fix: Retain interrupted state when throwing `InterruptedIOException`. A single interrupt should
+    now be sufficient to break out an in-flight OkHttp call.
+ *  Fix: Don't drop a call to `EventListener.callEnd()` when the response body is consumed inside an
+    interceptor.
+
+
+## Version 3.10.0
+
+_2018-02-24_
+
+ *  **The pingInterval() feature now aggressively checks connectivity for web
+    sockets and HTTP/2 connections.**
+
+    Previously if you configured a ping interval that would cause OkHttp to send
+    pings, but it did not track whether the reply pongs were received. With this
+    update OkHttp requires that every ping receive a response: if it does not
+    the connection will be closed and the listener's `onFailure()` method will
+    be called.
+
+    Web sockets have always been had pings, but pings on HTTP/2 connections is
+    new in this release. Pings are used for connections that are busy carrying
+    calls and for idle connections in the connection pool. (Pings do not impact
+    when pooled connections are evicted).
+
+    If you have a configured ping interval, you should confirm that it is long
+    enough for a roundtrip from client to server. If your ping interval is too
+    short, slow connections may be misinterpreted as failed connections. A ping
+    interval of 30 seconds is reasonable for most use cases.
+
+ *  **OkHttp now supports [Conscrypt][conscrypt].** Conscrypt is a Java Security
+    Provider that integrates BoringSSL into the Java platform. Conscrypt
+    supports more cipher suites than the JVM’s default provider and may also
+    execute more efficiently.
+
+    To use it, first register a [Conscrypt dependency][conscrypt_dependency] in
+    your build system.
+
+    OkHttp will use Conscrypt if you set the `okhttp.platform` system property
+    to `conscrypt`.
+
+    Alternatively, OkHttp will also use Conscrypt if you install it as your
+    preferred security provider. To do so, add the following code to execute
+    before you create your `OkHttpClient`.
+
+    ```
+    Security.insertProviderAt(
+        new org.conscrypt.OpenSSLProvider(), 1);
+    ```
+
+    Conscrypt is the bundled security provider on Android so it is not necessary
+    to configure it on that platform.
+
+ *  New: `HttpUrl.addQueryParameter()` percent-escapes more characters.
+    Previously several ASCII punctuation characters were not percent-escaped
+    when used with this method. This does not impact already-encoded query
+    parameters in APIs like `HttpUrl.parse()` and
+    `HttpUrl.Builder.addEncodedQueryParameter()`.
+ *  New: CBC-mode ECDSA cipher suites have been removed from OkHttp's default
+    configuration: `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA` and
+    `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`. This tracks a [Chromium
+    change][remove_cbc_ecdsa] to remove these cipher suites because they are
+    fragile and rarely-used.
+ *  New: Don't fall back to common name (CN) verification for hostnames. This
+    behavior was deprecated with RFC 2818 in May 2000 and was recently dropped
+    from major web browsers.
+ *  New: Honor the `Retry-After` response header. HTTP 503 (Unavailable)
+    responses are retried automatically if this header is present and its delay
+    is 0 seconds. HTTP 408 (Client Timeout) responses are retried automatically
+    if the header is absent or its delay is 0 seconds.
+ *  New: Allow request bodies for all HTTP methods except GET and HEAD.
+ *  New: Automatic module name of `okhttp3` for use with the Java Platform
+    Module System.
+ *  New: Log gzipped bodies when `HttpLoggingInterceptor` is used as a network
+    interceptor.
+ *  New: `Protocol.QUIC` constant. This protocol is not supported but this
+    constant is included for completeness.
+ *  New: Upgrade to Okio 1.14.0.
+
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okio</groupId>
+       <artifactId>okio</artifactId>
+       <version>1.14.0</version>
+     </dependency>
+
+     com.squareup.okio:okio:1.14.0
+     ```
+
+ *  Fix: Handle `HTTP/1.1 100 Continue` status lines, even on requests that did
+    not send the `Expect: continue` request header.
+ *  Fix: Do not count web sockets toward the dispatcher's per-host connection
+    limit.
+ *  Fix: Avoid using invalid HTTPS sessions. This prevents OkHttp from crashing
+    with the error, `Unexpected TLS version: NONE`.
+ *  Fix: Don't corrupt the response cache when a 304 (Not Modified) response
+    overrides the stored "Content-Encoding" header.
+ *  Fix: Gracefully shut down the HTTP/2 connection before it exhausts the
+    namespace of stream IDs (~536 million streams).
+ *  Fix: Never pass a null `Route` to `Authenticator`. There was a bug where
+    routes were omitted for eagerly-closed connections.
+
+## Version 3.9.1
+
+_2017-11-18_
+
+ *  New: Recover gracefully when Android's DNS crashes with an unexpected
+    `NullPointerException`.
+ *  New: Recover gracefully when Android's socket connections crash with an
+    unexpected `ClassCastException`.
+ *  Fix: Don't include the URL's fragment in `encodedQuery()` when the query
+    itself is empty.
+
+## Version 3.9.0
+
+_2017-09-03_
+
+ *  **Interceptors are more capable.** The `Chain` interface now offers access
+    to the call and can adjust all call timeouts. Note that this change is
+    source-incompatible for code that implements the `Chain` interface.
+    We don't expect this to be a problem in practice!
+
+ *  **OkHttp has an experimental new API for tracking metrics.** The new
+    `EventListener` API is designed to help developers monitor HTTP requests'
+    size and duration. This feature is an unstable preview: the API is subject
+    to change, and the implementation is incomplete. This is a big new API we
+    are eager for feedback.
+
+ *  New: Support ALPN via Google Play Services' Dynamic Security Provider. This
+    expands HTTP/2 support to older Android devices that have Google Play
+    Services.
+ *  New: Consider all routes when looking for candidate coalesced connections.
+    This increases the likelihood that HTTP/2 connections will be shared.
+ *  New: Authentication challenges and credentials now use a charset. Use this in
+    your authenticator to support user names and passwords with non-ASCII
+    characters.
+ *  New: Accept a charset in `FormBody.Builder`. Previously form bodies were
+    always UTF-8.
+ *  New: Support the `immutable` cache-control directive.
+ *  Fix: Don't crash when an HTTP/2 call is redirected while the connection is
+    being shut down.
+ *  Fix: Don't drop headers of healthy streams that raced with `GOAWAY` frames.
+    This bug would cause HTTP/2 streams to occasional hang when the connection
+    was shutting down.
+ *  Fix: Honor `OkHttpClient.retryOnConnectionFailure()` when the response is a
+    HTTP 408 Request Timeout. If retries are enabled, OkHttp will retry exactly
+    once in response to a 408.
+ *  Fix: Don't crash when reading the empty `HEAD` response body if it specifies
+    a `Content-Length`.
+ *  Fix: Don't crash if the thread is interrupted while reading the public
+    suffix database.
+ *  Fix: Use relative resource path when loading the public suffix database.
+    Loading the resource using a path relative to the class prevents conflicts
+    when the OkHttp classes are relocated (shaded) by allowing multiple private
+    copies of the database.
+ *  Fix: Accept cookies for URLs that have an IPv6 address for a host.
+ *  Fix: Don't log the protocol (HTTP/1.1, h2) in HttpLoggingInterceptor if the
+    protocol isn't negotiated yet! Previously we'd log HTTP/1.1 by default, and
+    this was confusing.
+ *  Fix: Omit the message from MockWebServer's HTTP/2 `:status` header.
+ *  Fix: Handle 'Expect: 100 Continue' properly in MockWebServer.
+
+
+## Version 3.8.1
+
+_2017-06-18_
+
+ *  Fix: Recover gracefully from stale coalesced connections. We had a bug where
+    connection coalescing (introduced in OkHttp 3.7.0) and stale connection
+    recovery could interact to cause a `NoSuchElementException` crash in the
+    `RouteSelector`.
+
+
+## Version 3.8.0
+
+_2017-05-13_
+
+
+ *  **OkHttp now uses `@Nullable` to annotate all possibly-null values.** We've
+    added a compile-time dependency on the JSR 305 annotations. This is a
+    [provided][maven_provided] dependency and does not need to be included in
+    your build configuration, `.jar` file, or `.apk`. We use
+    `@ParametersAreNonnullByDefault` and all parameters and return types are
+    never null unless explicitly annotated `@Nullable`.
+
+ *  **Warning: this release is source-incompatible for Kotlin users.**
+    Nullability was previously ambiguous and lenient but now the compiler will
+    enforce strict null checks.
+
+ *  New: The response message is now non-null. This is the "Not Found" in the
+    status line "HTTP 404 Not Found". If you are building responses
+    programmatically (with `new Response.Builder()`) you must now always supply
+    a message. An empty string `""` is permitted. This value was never null on
+    responses returned by OkHttp itself, and it was an old mistake to permit
+    application code to omit a message.
+
+ *  The challenge's scheme and realm are now non-null. If you are calling
+    `new Challenge(scheme, realm)` you must provide non-null values. These were
+    never null in challenges created by OkHttp, but could have been null in
+    application code that creates challenges.
+
+ *  New: The `TlsVersion` of a `Handshake` is now non-null. If you are calling
+    `Handshake.get()` with a null TLS version, you must instead now provide a
+    non-null `TlsVersion`. Cache responses persisted prior to OkHttp 3.0 did not
+    store a TLS version; for these unknown values the handshake is defaulted to
+    `TlsVersion.SSL_3_0`.
+
+ *  New: Upgrade to Okio 1.13.0.
+
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okio</groupId>
+       <artifactId>okio</artifactId>
+       <version>1.13.0</version>
+     </dependency>
+
+     com.squareup.okio:okio:1.13.0
+     ```
+
+ *  Fix: gracefully recover when Android 7.0's sockets throw an unexpected
+    `NullPointerException`.
+
+## Version 3.7.0
+
+_2017-04-15_
+
+ *  **OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection.**
+    The fallback was necessary for servers that implemented version negotiation incorrectly. Now
+    that 99.99% of servers do it right this fallback is obsolete.
+ *  Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject
+    cookies on top-level domains like `co.uk` because our cookie parser didn't honor the [public
+    suffix][public_suffix] list. Alongside this fix is a new API, `HttpUrl.topPrivateDomain()`,
+    which returns the privately domain name if the URL has one.
+ *  Fix: Change `MediaType.charset()` to return null for unexpected charsets.
+ *  Fix: Don't skip cache invalidation if the invalidating response has no body.
+ *  Fix: Don't use a cryptographic random number generator for web sockets. Some Android devices
+    implement `SecureRandom` incorrectly!
+ *  Fix: Correctly canonicalize IPv6 addresses in `HttpUrl`. This prevented OkHttp from trusting
+    HTTPS certificates issued to certain IPv6 addresses.
+ *  Fix: Don't reuse connections after an unsuccessful `Expect: 100-continue`.
+ *  Fix: Handle either `TLS_` or `SSL_` prefixes for cipher suite names. This is necessary for
+    IBM JVMs that use the `SSL_` prefix exclusively.
+ *  Fix: Reject HTTP/2 data frames if the stream ID is 0.
+ *  New: Upgrade to Okio 1.12.0.
+
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okio</groupId>
+       <artifactId>okio</artifactId>
+       <version>1.12.0</version>
+     </dependency>
+
+     com.squareup.okio:okio:1.12.0
+     ```
+
+ *  New: Connection coalescing. OkHttp may reuse HTTP/2 connections across calls that share an IP
+    address and HTTPS certificate, even if their domain names are different.
+ *  New: MockWebServer's `RecordedRequest` exposes the requested `HttpUrl` with `getRequestUrl()`.
+
+
+## Version 3.6.0
+
+_2017-01-29_
+
+ *  Fix: Don't crash with a "cache is closed" error when there is an error initializing the cache.
+ *  Fix: Calling `disconnect()` on a connecting `HttpUrlConnection` could cause it to retry in an
+    infinite loop! This regression was introduced in OkHttp 2.7.0.
+ *  Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies
+    would cause OkHttp to crash when they were included in a request.
+ *  Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an
+    HTTP/2 server, close all but the first connection.
+ *  Fix: Fail the HTTP/2 connection if first frame isn't `SETTINGS`.
+ *  Fix: Forbid spaces in header names.
+ *  Fix: Don't offer to do gzip if the request is partial.
+ *  Fix: MockWebServer is now usable with JUnit 5. That update [broke the rules][junit_5_rules].
+ *  New: Support `Expect: 100-continue` as a request header. Callers can use this header to
+    pessimistically hold off on transmitting a request body until a server gives the go-ahead.
+ *  New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible
+    to do domain fronting.
+ *  New: charset support for `Credentials.basic()`.
+
+
+## Version 3.5.0
+
+_2016-11-30_
+
+ *  **Web Sockets are now a stable feature of OkHttp.** Since being introduced as a beta feature in
+    OkHttp 2.3 our web socket client has matured. Connect to a server's web socket with
+    `OkHttpClient.newWebSocket()`, send messages with `send()`, and receive messages with the
+    `WebSocketListener`.
+
+    The `okhttp-ws` submodule is no longer available and `okhttp-ws` artifacts from previous
+    releases of OkHttp are not compatible with OkHttp 3.5. When upgrading to the new package
+    please note that the `WebSocket` and `WebSocketCall` classes have been merged. Sending messages
+    is now asynchronous and they may be enqueued before the web socket is connected.
+
+ *  **OkHttp no longer attempts a direct connection if the system's HTTP proxy fails.** This
+    behavior was surprising because OkHttp was disregarding the user's specified configuration. If
+    you need to customize proxy fallback behavior, implement your own `java.net.ProxySelector`.
+
+ *  Fix: Support TLSv1.3 on devices that support it.
+
+ *  Fix: Share pooled connections across equivalent `OkHttpClient` instances. Previous releases had
+    a bug where a shared connection pool did not guarantee shared connections in some cases.
+ *  Fix: Prefer the server's response body on all conditional cache misses. Previously we would
+    return the cached response's body if it had a newer `Last-Modified` date.
+ *  Fix: Update the stored timestamp on conditional cache hits.
+ *  New: Optimized HTTP/2 request header encoding. More headers are HPACK-encoded and string
+    literals are now Huffman-encoded.
+ *  New: Expose `Part` headers and body in `Multipart`.
+ *  New: Make `ResponseBody.string()` and `ResponseBody.charStream()` BOM-aware. If your HTTP
+    response body begins with a [byte order mark][bom] it will be consumed and used to select a
+    charset for the remaining bytes. Most applications should not need a byte order mark.
+
+ *  New: Upgrade to Okio 1.11.0.
+
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okio</groupId>
+       <artifactId>okio</artifactId>
+       <version>1.11.0</version>
+     </dependency>
+
+     com.squareup.okio:okio:1.11.0
+     ```
+
+ *  Fix: Avoid sending empty HTTP/2 data frames when there is no request body.
+ *  Fix: Add a leading `.` for better domain matching in `JavaNetCookieJar`.
+ *  Fix: Gracefully recover from HTTP/2 connection shutdowns at start of request.
+ *  Fix: Be lenient if a `MediaType`'s character set is `'single-quoted'`.
+ *  Fix: Allow horizontal tab characters in header values.
+ *  Fix: When parsing HTTP authentication headers permit challenge parameters in any order.
+
+
+## Version 3.4.2
+
+_2016-11-03_
+
+ *  Fix: Recover gracefully when an HTTP/2 connection is shutdown. We had a
+    bug where shutdown HTTP/2 connections were considered usable. This caused
+    infinite loops when calls attempted to recover.
+
+
+## Version 3.4.1
+
+_2016-07-10_
+
+ *  **Fix a major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp
+    had an off-by-one bug in our HPACK encoder. This bug could have caused the
+    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone
+    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix.
+
+
+## Version 3.4.0
+
+_2016-07-08_
+
+ *  New: Support dynamic table size changes to HPACK Encoder.
+ *  Fix: Use `TreeMap` in `Headers.toMultimap()`. This makes string lookups on
+    the returned map case-insensitive.
+ *  Fix: Don't share the OkHttpClient's `Dispatcher` in `HttpURLConnection`.
+
+
+## Version 3.4.0-RC1
+
+_2016-07-02_
+
+ *  **We’ve rewritten HttpURLConnection and HttpsURLConnection.** Previously we
+    shared a single HTTP engine between two frontend APIs: `HttpURLConnection`
+    and `Call`. With this release we’ve rearranged things so that the
+    `HttpURLConnection` frontend now delegates to the `Call` APIs internally.
+    This has enabled substantial simplifications and optimizations in the OkHttp
+    core for both frontends.
+
+    For most HTTP requests the consequences of this change will be negligible.
+    If your application uses `HttpURLConnection.connect()`,
+    `setFixedLengthStreamingMode()`, or `setChunkedStreamingMode()`, OkHttp will
+    now use a async dispatcher thread to establish the HTTP connection.
+
+    We don’t expect this change to have any behavior or performance
+    consequences. Regardless, please exercise your `OkUrlFactory` and
+    `HttpURLConnection` code when applying this update.
+
+ *  **Cipher suites may now have arbitrary names.** Previously `CipherSuite` was
+    a Java enum and it was impossible to define new cipher suites without first
+    upgrading OkHttp. With this change it is now a regular Java class with
+    enum-like constants. Application code that uses enum methods on cipher
+    suites (`ordinal()`, `name()`, etc.) will break with this change.
+
+ *  Fix: `CertificatePinner` now matches canonicalized hostnames. Previously
+    this was case sensitive. This change should also make it easier to configure
+    certificate pinning for internationalized domain names.
+ *  Fix: Don’t crash on non-ASCII `ETag` headers. Previously OkHttp would reject
+    these headers when validating a cached response.
+ *  Fix: Don’t allow remote peer to arbitrarily size the HPACK decoder dynamic
+    table.
+ *  Fix: Honor per-host configuration in Android’s network security config.
+    Previously disabling cleartext for any host would disable cleartext for all
+    hosts. Note that this setting is only available on Android 24+.
+ *  New: HPACK compression is now dynamic. This should improve performance when
+    transmitting request headers over HTTP/2.
+ *  New: `Dispatcher.setIdleCallback()` can be used to signal when there are no
+    calls in flight. This is useful for [testing with
+    Espresso][okhttp_idling_resource].
+ *  New: Upgrade to Okio 1.9.0.
+
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okio</groupId>
+       <artifactId>okio</artifactId>
+       <version>1.9.0</version>
+     </dependency>
+     ```
+
+
+## Version 3.3.1
+
+_2016-05-28_
+
+ *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified
+    newline characters as control characters. This is fixed.
+ *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached
+    HTTP headers.
+ *  Fix: Retain the response body when an attempt to open a web socket returns a
+    non-101 response code.
+
+
+## Version 3.3.0
+
+_2016-05-24_
+
+ *  New: `Response.sentRequestAtMillis()` and `receivedResponseAtMillis()`
+    methods track the system's local time when network calls are made. These
+    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were
+    present in earlier versions of OkHttp.
+ *  New: Accept user-provided trust managers in `OkHttpClient.Builder`. This
+    allows OkHttp to satisfy its TLS requirements directly. Otherwise OkHttp
+    will use reflection to extract the `TrustManager` from the
+    `SSLSocketFactory`.
+ *  New: Support prerelease Java 9. This gets ALPN from the platform rather than
+    relying on the alpn-boot bootclasspath override.
+ *  New: `HttpLoggingInterceptor` now logs connection failures.
+ *  New: Upgrade to Okio 1.8.0.
+
+     ```xml
+     <dependency>
+       <groupId>com.squareup.okio</groupId>
+       <artifactId>okio</artifactId>
+       <version>1.8.0</version>
+     </dependency>
+     ```
+
+ *  Fix: Gracefully recover from a failure to rebuild the cache journal.
+ *  Fix: Don't corrupt cache entries when a cache entry is evicted while it is
+    being updated.
+ *  Fix: Make logging more consistent throughout OkHttp.
+ *  Fix: Log plaintext bodies only. This uses simple heuristics to differentiate
+    text from other data.
+ *  Fix: Recover from `REFUSED_STREAM` errors in HTTP/2. This should improve
+    interoperability with Nginx 1.10.0, which [refuses][nginx_959] streams
+    created before HTTP/2 settings have been acknowledged.
+ *  Fix: Improve recovery from failed routes.
+ *  Fix: Accommodate tunneling proxies that close the connection after an auth
+    challenge.
+ *  Fix: Use the proxy authenticator when authenticating HTTP proxies. This
+    regression was introduced in OkHttp 3.0.
+ *  Fix: Fail fast if network interceptors transform the response body such that
+    closing it doesn't also close the underlying stream. We had a bug where
+    OkHttp would attempt to reuse a connection but couldn't because it was still
+    held by a prior request.
+ *  Fix: Ensure network interceptors always have access to the underlying
+    connection.
+ *  Fix: Use `X509TrustManagerExtensions` on Android 17+.
+ *  Fix: Unblock waiting dispatchers on MockWebServer shutdown.
+
+
+## Version 3.2.0
+
+_2016-02-25_
+
+ *  Fix: Change the certificate pinner to always build full chains. This
+    prevents a potential crash when using certificate pinning with the Google
+    Play Services security provider.
+ *  Fix: Make IPv6 request lines consistent with Firefox and Chrome.
+ *  Fix: Recover gracefully when trimming the response cache fails.
+ *  New: Add multiple path segments using a single string in `HttpUrl.Builder`.
+ *  New: Support SHA-256 pins in certificate pinner.
+
+
+## Version 3.1.2
+
+_2016-02-10_
+
+ *  Fix: Don’t crash when finding the trust manager on Robolectric. We attempted
+    to detect the host platform and got confused because Robolectric looks like
+    Android but isn’t!
+ *  Fix: Change `CertificatePinner` to skip sanitizing the certificate chain
+    when no certificates were pinned. This avoids an SSL failure in insecure
+    “trust everyone” configurations, such as when talking to a development
+    HTTPS server that has a self-signed certificate.
+
+
+## Version 3.1.1
+
+_2016-02-07_
+
+ *  Fix: Don't crash when finding the trust manager if the Play Services (GMS)
+    security provider is installed.
+ *  Fix: The previous release introduced a performance regression on Android,
+    caused by looking up CA certificates. This is now fixed.
+
+
+## Version 3.1.0
+
+_2016-02-06_
+
+ *  New: WebSockets now defer some writes. This should improve performance for
+    some applications.
+ *  New: Override `equals()` and `hashCode()` in our new cookie class. This
+    class now defines equality by value rather than by reference.
+ *  New: Handle 408 responses by retrying the request. This allows servers to
+    direct clients to retry rather than failing permanently.
+ *  New: Expose the framed protocol in `Connection`. Previously this would
+    return the application-layer protocol (HTTP/1.1 or HTTP/1.0); now it always
+    returns the wire-layer protocol (HTTP/2, SPDY/3.1, or HTTP/1.1).
+ *  Fix: Permit the trusted CA root to be pinned by `CertificatePinner`.
+ *  Fix: Silently ignore unknown HTTP/2 settings. Previously this would cause
+    the entire connection to fail.
+ *  Fix: Don’t crash on unexpected charsets in the logging interceptor.
+ *  Fix: `OkHttpClient` is now non-final for the benefit of mocking frameworks.
+    Mocking sophisticated classes like `OkHttpClient` is fragile and you
+    shouldn’t do it. But if that’s how you want to live your life we won’t stand
+    in your way!
+
+
+## Version 3.0.1
+
+_2016-01-14_
+
+ *  Rollback OSGi support. This was causing library jars to include more classes
+    than expected, which interfered with Gradle builds.
+
+
+## Version 3.0.0
+
+_2016-01-13_
+
+This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice
+on upgrading from 2.x to 3.x.
+
+ *  **The `Callback` interface now takes a `Call`**. This makes it easier to
+    check if the call was canceled from within the callback. When migrating
+    async calls to this new API, `Call` is now the first parameter for both
+    `onResponse()` and `onFailure()`.
+ *  Fix: handle multiple cookies in `JavaNetCookieJar` on Android.
+ *  Fix: improve the default HTTP message in MockWebServer responses.
+ *  Fix: don't leak file handles when a conditional GET throws.
+ *  Fix: Use charset specified by the request body content type in OkHttp's
+    logging interceptor.
+ *  Fix: Don't eagerly release pools on cache hits.
+ *  New: Make OkHttp OSGi ready.
+ *  New: Add already-implemented interfaces Closeable and Flushable to the cache.
+
+
+## Version 3.0.0-RC1
+
+_2016-01-02_
+
+OkHttp 3 is a major release focused on API simplicity and consistency. The API
+changes are numerous but most are cosmetic. Applications should be able to
+upgrade from the 2.x API to the 3.x API mechanically and without risk.
+
+Because the release includes breaking API changes, we're changing the project's
+package name from `com.squareup.okhttp` to `okhttp3`. This should make it
+possible for large applications to migrate incrementally. The Maven group ID
+is now `com.squareup.okhttp3`. For an explanation of this strategy, see Jake
+Wharton's post, [Java Interoperability Policy for Major Version
+Updates][major_versions].
+
+This release obsoletes OkHttp 2.x, and all code that uses OkHttp's
+`com.squareup.okhttp` package should upgrade to the `okhttp3` package. Libraries
+that depend on OkHttp should upgrade quickly to prevent applications from being
+stuck on the old version.
+
+ *  **There is no longer a global singleton connection pool.** In OkHttp 2.x,
+    all `OkHttpClient` instances shared a common connection pool by default.
+    In OkHttp 3.x, each new `OkHttpClient` gets its own private connection pool.
+    Applications should avoid creating many connection pools as doing so
+    prevents connection reuse. Each connection pool holds its own set of
+    connections alive so applications that have many pools also risk exhausting
+    memory!
+
+    The best practice in OkHttp 3 is to create a single OkHttpClient instance
+    and share it throughout the application. Requests that needs a customized
+    client should call `OkHttpClient.newBuilder()` on that shared instance.
+    This allows customization without the drawbacks of separate connection
+    pools.
+
+ *  **OkHttpClient is now stateless.** In the 2.x API `OkHttpClient` had getters
+    and setters. Internally each request was forced to make its own complete
+    snapshot of the `OkHttpClient` instance to defend against racy configuration
+    changes. In 3.x, `OkHttpClient` is now stateless and has a builder. Note
+    that this class is not strictly immutable as it has stateful members like
+    the connection pool and cache.
+
+ *  **Get and Set prefixes are now avoided.** With ubiquitous builders
+    throughout OkHttp these accessor prefixes aren't necessary. Previously
+    OkHttp used _get_ and _set_ prefixes sporadically which make the API
+    inconsistent and awkward to explore.
+
+ *  **OkHttpClient now implements the new `Call.Factory` interface.** This
+    interface will make your code easier to test. When you test code that makes
+    HTTP requests, you can use this interface to replace the real `OkHttpClient`
+    with your own mocks or fakes.
+
+    The interface will also let you use OkHttp's API with another HTTP client's
+    implementation. This is useful in sandboxed environments like Google App
+    Engine.
+
+ *  **OkHttp now does cookies.** We've replaced `java.net.CookieHandler` with
+    a new interface, `CookieJar` and added our own `Cookie` model class. This
+    new cookie follows the latest RFC and supports the same cookie attributes
+    as modern web browsers.
+
+ *  **Form and Multipart bodies are now modeled.** We've replaced the opaque
+    `FormEncodingBuilder` with the more powerful `FormBody` and
+    `FormBody.Builder` combo. Similarly we've upgraded `MultipartBuilder` into
+    `MultipartBody`, `MultipartBody.Part`, and `MultipartBody.Builder`.
+
+ *  **The Apache HTTP client and HttpURLConnection APIs are deprecated.** They
+    continue to work as they always have, but we're moving everything to the new
+    OkHttp 3 API. The `okhttp-apache` and `okhttp-urlconnection` modules should
+    be only be used to accelerate a transition to OkHttp's request/response API.
+    These deprecated modules will be dropped in an upcoming OkHttp 3.x release.
+
+ *  **Canceling batches of calls is now the application's responsibility.**
+    The API to cancel calls by tag has been removed and replaced with a more
+    general mechanism. The dispatcher now exposes all in-flight calls via its
+    `runningCalls()` and `queuedCalls()` methods. You can write code that
+    selects calls by tag, host, or whatever, and invokes `Call.cancel()` on the
+    ones that are no longer necessary.
+
+ *  **OkHttp no longer uses the global `java.net.Authenticator` by default.**
+    We've changed our `Authenticator` interface to authenticate web and proxy
+    authentication failures through a single method. An adapter for the old
+    authenticator is available in the `okhttp-urlconnection` module.
+
+ *  Fix: Don't throw `IOException` on `ResponseBody.contentLength()` or `close()`.
+ *  Fix: Never throw converting an `HttpUrl` to a `java.net.URI`. This changes
+    the `uri()` method to handle malformed percent-escapes and characters
+    forbidden by `URI`.
+ *  Fix: When a connect times out, attempt an alternate route. Previously route
+    selection was less efficient when differentiating failures.
+ *  New: `Response.peekBody()` lets you access the response body without
+    consuming it. This may be handy for interceptors!
+ *  New: `HttpUrl.newBuilder()` resolves a link to a builder.
+ *  New: Add the TLS version to the `Handshake`.
+ *  New: Drop `Request.uri()` and `Request#urlString()`. Just use
+    `Request.url().uri()` and `Request.url().toString()`.
+ *  New: Add URL to HTTP response logging.
+ *  New: Make `HttpUrl` the blessed URL method of `Request`.
+
+
+## Version 2.x
+
+[Change log](changelog_2x.md)
+
+
+ [bom]: https://en.wikipedia.org/wiki/Byte_order_mark
+ [conscrypt]: https://github.com/google/conscrypt/
+ [conscrypt_dependency]: https://github.com/google/conscrypt/#download
+ [grpc_http2]: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
+ [https_server_sample]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java
+ [junit_5_rules]: https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-rulesupport
+ [major_versions]: https://jakewharton.com/java-interoperability-policy-for-major-version-updates/
+ [maven_provided]: https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
+ [nginx_959]: https://trac.nginx.org/nginx/ticket/959
+ [obsolete_apache_client]: https://gist.github.com/swankjesse/09721f72039e3a46cf50f94323deb82d
+ [obsolete_url_factory]: https://gist.github.com/swankjesse/dd91c0a8854e1559b00f5fc9c7bfae70
+ [okhttp_idling_resource]: https://github.com/JakeWharton/okhttp-idling-resource
+ [public_suffix]: https://publicsuffix.org/
+ [remove_cbc_ecdsa]: https://developers.google.com/web/updates/2016/12/chrome-56-deprecations#remove_cbc-mode_ecdsa_ciphers_in_tls
+ [require_android_5]: https://cashapp.github.io/2019-02-05/okhttp-3-13-requires-android-5
+ [tls_configuration_history]: https://square.github.io/okhttp/tls_configuration_history/
+ [upgrading_to_okhttp_4]: https://square.github.io/okhttp/upgrading_to_okhttp_4/
diff --git a/docs/interceptors.md b/docs/interceptors.md
index 24ef5c5014..b3d759e9d0 100644
--- a/docs/interceptors.md
+++ b/docs/interceptors.md
@@ -23,7 +23,7 @@ class LoggingInterceptor implements Interceptor {
 }
 ```
 
-A call to `chain.proceed(request)` is a critical part of each interceptor’s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request.
+A call to `chain.proceed(request)` is a critical part of each interceptor’s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request. If `chain.proceed(request)` is being called more than once previous response bodies must be closed.
 
 Interceptors can be chained. Suppose you have both a compressing interceptor and a checksumming interceptor: you'll need to decide whether data is compressed and then checksummed, or checksummed and then compressed. OkHttp uses lists to track interceptors, and interceptors are called in order.
 
diff --git a/docs/releasing.md b/docs/releasing.md
index 9d7e1d5dbb..b19b2b8eaf 100644
--- a/docs/releasing.md
+++ b/docs/releasing.md
@@ -1,6 +1,63 @@
 Releasing
 =========
 
+### Prerequisite: Sonatype (Maven Central) Account
+
+Create an account on the [Sonatype issues site][sonatype_issues]. Ask an existing publisher to open
+an issue requesting publishing permissions for `com.squareup` projects.
+
+### Prerequisite: GPG Keys
+
+Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the
+password empty for this key.
+
+```
+$ gpg --full-generate-key
+```
+
+Upload the GPG keys to public servers:
+
+```
+$ gpg --list-keys --keyid-format LONG
+/Users/johnbarber/.gnupg/pubring.kbx
+------------------------------
+pub   rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13]
+      YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
+uid           [ultimate] John Barber <jbarber@squareup.com>
+sub   rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13]
+
+$ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX
+```
+
+### Prerequisite: Gradle Properties
+
+Define publishing properties in `~/.gradle/gradle.properties`:
+
+```
+signing.keyId=1A2345F8
+signing.password=
+signing.secretKeyRingFile=/Users/jbarber/.gnupg/secring.gpg
+```
+
+`signing.keyId` is the GPG key's ID. Get it with this:
+
+   ```
+   $ gpg --list-keys --keyid-format SHORT
+   ```
+
+`signing.password` is the password for this key. This might be empty!
+
+`signing.secretKeyRingFile` is the absolute path for `secring.gpg`. You may need to export this
+file manually with the following command where `XXXXXXXX` is the `keyId` above:
+
+   ```
+   $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg
+   ```
+
+
+Cutting a Release
+-----------------
+
 1. Update `CHANGELOG.md`.
 
 2. Set versions:
@@ -10,7 +67,14 @@ Releasing
     export NEXT_VERSION=X.Y.Z-SNAPSHOT
     ```
 
-3. Update, build, and upload:
+3. Set environment variables with your [Sonatype credentials][sonatype_issues].
+
+    ```
+    export SONATYPE_NEXUS_USERNAME=johnbarber
+    export SONATYPE_NEXUS_PASSWORD=`pbpaste`
+    ```
+
+4. Update, build, and upload:
 
     ```
     sed -i "" \
@@ -22,9 +86,10 @@ Releasing
     ./gradlew clean uploadArchives
     ```
 
-4. Visit [Sonatype Nexus](https://oss.sonatype.org/) to promote the artifact. Or drop it if there is a problem!
+5. Visit [Sonatype Nexus][sonatype_nexus] to promote (close then release) the artifact. Or drop it
+   if there is a problem!
 
-5. Tag the release, prepare for the next one, and push to GitHub.
+6. Tag the release, prepare for the next one, and push to GitHub.
 
     ```
     git commit -am "Prepare for release $RELEASE_VERSION."
@@ -36,12 +101,5 @@ Releasing
     git push && git push --tags
     ```
 
-
-Prerequisites
--------------
-
-In `~/.gradle/gradle.properties`, set the following:
-
- * `SONATYPE_NEXUS_USERNAME` - Sonatype username for releasing to `com.squareup`.
- * `SONATYPE_NEXUS_PASSWORD` - Sonatype password for releasing to `com.squareup`.
-
+ [sonatype_issues]: https://issues.sonatype.org/
+ [sonatype_nexus]: https://oss.sonatype.org/
\ No newline at end of file
diff --git a/docs/works_with_okhttp.md b/docs/works_with_okhttp.md
index c809918204..8bb7716109 100644
--- a/docs/works_with_okhttp.md
+++ b/docs/works_with_okhttp.md
@@ -3,14 +3,15 @@ Works with OkHttp
 
 Here’s some libraries that work nicely with OkHttp.
 
- * [Chuck](https://github.com/jgilfelt/chuck): An in-app HTTP inspector for Android OkHttp clients.
+ * [Chucker](https://github.com/ChuckerTeam/chucker): An in-app HTTP inspector for Android OkHttp clients.
+ * [Coil](https://github.com/coil-kt/coil): An image loading library for Android backed by Kotlin Coroutines.
  * [Communicator](https://github.com/Taig/Communicator): An OkHttp wrapper for Scala built with Android in mind.
  * [CWAC-NetSecurity](https://github.com/commonsguy/cwac-netsecurity): Simplifying Secure Internet Access.
+ * [Flipper](https://fbflipper.com/): A desktop debugging platform for mobile developers.
  * [Fresco](https://github.com/facebook/fresco): An Android library for managing images and the memory they use.
  * [Glide](https://github.com/bumptech/glide): An image loading and caching library for Android focused on smooth scrolling.
  * [GoogleAppEngineOkHttp](https://github.com/apkelly/GoogleAppEngineOkHttp): An OkHttp Call that works on Google App Engine.
  * [Hunter](https://github.com/Leaking/Hunter): Configure all OkHttpClients centrally.
- * [ModernHttpClient](https://github.com/paulcbetts/ModernHttpClient): Xamarin HTTP API that uses native implementations.
  * ⬜️ [Moshi](https://github.com/square/moshi): A modern JSON library for Android and Java.
  * [Ok2Curl](https://github.com/mrmike/Ok2Curl): Convert OkHttp requests into curl logs.
  * [OkHttp AWS Signer](https://github.com/babbel/okhttp-aws-signer): AWS V4 signing algorithm for OkHttp requests
@@ -22,15 +23,12 @@ Here’s some libraries that work nicely with OkHttp.
  * [okhttp-signpost](https://github.com/pakerfeldt/okhttp-signpost): OAuth signing with signpost and OkHttp.
  * [okhttp-staleiferror-interceptor](https://github.com/PeelTechnologies/okhttp-staleiferror-interceptor/): serve stale responses when the server isn’t reachable.
  * [okhttp-stats](https://github.com/flipkart-incubator/okhttp-stats): Get stats like average network speed.
- * [OkHttp-Xamarin](https://github.com/paulcbetts/OkHttp-Xamarin): Xamarin bindings for OkHttp.
  * ⬜️ [Okio](https://github.com/square/okio/): A modern I/O API for Java.
  * [OkLog](https://github.com/simonpercic/OkLog): Response logging interceptor for OkHttp. Logs a URL link with URL-encoded response for every OkHttp call.
  * [Okurl](https://github.com/yschimke/okurl/wiki) A curl-like client for social networks and other APIs.
  * [PersistentCookieJar](https://github.com/franmontiel/PersistentCookieJar): A persistent `CookieJar`.
  * ⬜️ [Picasso](https://github.com/square/picasso): A powerful image downloading and caching library for Android.
  * ⬜️ [Retrofit](https://github.com/square/retrofit): Type-safe HTTP client for Android and Java by Square.
- * [Smash](https://github.com/appformation/smash): A Volley-inspired networking library.
  * [Stetho](https://github.com/facebook/stetho): Stetho is a debug bridge for Android applications.
  * [Thrifty](https://github.com/Microsoft/thrifty): An implementation of Apache Thrift for Android.
- * [Volley-OkHttp-Android](https://github.com/lxdvs/Volley-OkHttp-Android): A fork of Volley with changes to work with OkHttp.
  * ⬜️ [Wire](https://github.com/square/wire): Clean, lightweight protocol buffers for Android and Java.
diff --git a/gradle.properties b/gradle.properties
index 8050c2086a..1a261d695b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,7 +1,7 @@
 org.gradle.jvmargs='-Dfile.encoding=UTF-8'
 
 GROUP=com.squareup.okhttp3
-VERSION_NAME=4.1.0-SNAPSHOT
+VERSION_NAME=4.2.0-SNAPSHOT
 
 POM_URL=https://github.com/square/okhttp
 POM_SCM_URL=https://github.com/square/okhttp
diff --git a/mockwebserver/README.md b/mockwebserver/README.md
index 8f46f81b13..5843aa1558 100644
--- a/mockwebserver/README.md
+++ b/mockwebserver/README.md
@@ -142,7 +142,7 @@ server.setDispatcher(dispatcher);
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:mockwebserver:4.0.1")
+testImplementation("com.squareup.okhttp3:mockwebserver:4.1.1")
 ```
 
 ### License
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.kt b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.kt
index 5c175d42d7..9b34b23203 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.kt
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/RecordedRequest.kt
@@ -101,7 +101,11 @@ class RecordedRequest(
       val inetAddress = socket.localAddress
 
       var hostname = inetAddress.hostName
-      if (inetAddress is Inet6Address) {
+      if (inetAddress is Inet6Address && hostname.contains(':')) {
+        // hostname is likely some form representing the IPv6 bytes
+        // 2001:0db8:85a3:0000:0000:8a2e:0370:7334
+        // 2001:db8:85a3::8a2e:370:7334
+        // ::1
         hostname = "[$hostname]"
       }
 
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
index f81e9a7a60..2f09a8201e 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
@@ -27,6 +27,7 @@
 import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
@@ -57,6 +58,7 @@
 import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeFalse;
 
+@SuppressWarnings({"ArraysAsListWithZeroOrOneArgument", "deprecation"})
 public final class MockWebServerTest {
   @Rule public final MockWebServer server = new MockWebServer();
 
@@ -134,7 +136,7 @@
     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
     connection.setRequestProperty("Accept-Language", "en-US");
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(connection.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);
     assertThat(reader.readLine()).isEqualTo("hello world");
 
@@ -155,7 +157,7 @@
 
     URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(reader.readLine()).isEqualTo("This is the new location!");
 
     RecordedRequest first = server.takeRequest();
@@ -179,7 +181,7 @@
 
     URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(reader.readLine()).isEqualTo("enqueued in the background");
   }
 
@@ -377,15 +379,15 @@
     server.shutdown();
   }
 
-  @Test public void portImplicitlyStarts() throws IOException {
+  @Test public void portImplicitlyStarts() {
     assertThat(server.getPort()).isGreaterThan(0);
   }
 
-  @Test public void hostnameImplicitlyStarts() throws IOException {
+  @Test public void hostnameImplicitlyStarts() {
     assertThat(server.getHostName()).isNotNull();
   }
 
-  @Test public void toProxyAddressImplicitlyStarts() throws IOException {
+  @Test public void toProxyAddressImplicitlyStarts() {
     assertThat(server.toProxyAddress()).isNotNull();
   }
 
@@ -434,7 +436,7 @@
     URL url = server.url("/a/deep/path?key=foo%20bar").url();
     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(connection.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);
     assertThat(reader.readLine()).isEqualTo("hello world");
 
@@ -478,7 +480,7 @@
     connection.getOutputStream().write("request".getBytes(UTF_8));
 
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(reader.readLine()).isEqualTo("response");
 
     RecordedRequest request = server.takeRequest();
@@ -526,7 +528,8 @@
     connection.setHostnameVerifier(new RecordingHostnameVerifier());
 
     assertThat(connection.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);
-    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
+    BufferedReader reader =
+        new BufferedReader(new InputStreamReader(connection.getInputStream(), UTF_8));
     assertThat(reader.readLine()).isEqualTo("abc");
 
     RecordedRequest request = server.takeRequest();
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java
index 4d498406a8..5e9bb82d75 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java
+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java
@@ -16,7 +16,6 @@
 
 package okhttp3.mockwebserver;
 
-import java.net.Inet4Address;
 import java.net.InetAddress;
 import java.net.Socket;
 import java.net.UnknownHostException;
@@ -30,24 +29,22 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@SuppressWarnings("ConstantConditions")
 public class RecordedRequestTest {
-  Headers headers = Util.EMPTY_HEADERS;
+  private Headers headers = Util.EMPTY_HEADERS;
 
-  private class FakeSocket extends Socket {
+  private static class FakeSocket extends Socket {
     private final InetAddress localAddress;
     private final int remotePort;
     private final InetAddress remoteAddress;
     private final int localPort;
 
-    private FakeSocket(int localPort) {
-      this(Inet4Address.getLoopbackAddress(), localPort);
-    }
-
     private FakeSocket(InetAddress inetAddress, int localPort) {
       this(inetAddress, localPort, inetAddress, 1234);
     }
 
-    private FakeSocket(InetAddress localAddress, int localPort, InetAddress remoteAddress, int remotePort) {
+    private FakeSocket(InetAddress localAddress, int localPort, InetAddress remoteAddress,
+        int remotePort) {
       this.localAddress = localAddress;
       this.localPort = localPort;
       this.remoteAddress = remoteAddress;
@@ -75,7 +72,7 @@ private FakeSocket(InetAddress localAddress, int localPort, InetAddress remoteAd
 
   @Test public void testIPv4() throws UnknownHostException {
     Socket socket =
-        new FakeSocket(InetAddress.getByAddress("127.0.0.1", new byte[] { 127, 0, 0, 1 }), 80);
+        new FakeSocket(InetAddress.getByAddress("127.0.0.1", new byte[] {127, 0, 0, 1}), 80);
 
     RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,
         Collections.emptyList(), 0, new Buffer(), 0, socket);
@@ -85,7 +82,7 @@ private FakeSocket(InetAddress localAddress, int localPort, InetAddress remoteAd
 
   @Test public void testIpv6() throws UnknownHostException {
     Socket socket = new FakeSocket(InetAddress.getByAddress("::1",
-        new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }), 80);
+        new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}), 80);
 
     RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,
         Collections.emptyList(), 0, new Buffer(), 0, socket);
@@ -95,11 +92,31 @@ private FakeSocket(InetAddress localAddress, int localPort, InetAddress remoteAd
 
   @Test public void testUsesLocal() throws UnknownHostException {
     Socket socket =
-        new FakeSocket(InetAddress.getByAddress("127.0.0.1", new byte[] { 127, 0, 0, 1 }), 80);
+        new FakeSocket(InetAddress.getByAddress("127.0.0.1", new byte[] {127, 0, 0, 1}), 80);
 
     RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,
         Collections.emptyList(), 0, new Buffer(), 0, socket);
 
     assertThat(request.getRequestUrl().toString()).isEqualTo("http://127.0.0.1/");
   }
+
+  @Test public void testLocalhostIpv6() throws UnknownHostException {
+    Socket socket = new FakeSocket(InetAddress.getByAddress("localhost",
+        new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}), 80);
+
+    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,
+        Collections.emptyList(), 0, new Buffer(), 0, socket);
+
+    assertThat(request.getRequestUrl().toString()).isEqualTo("http://localhost/");
+  }
+
+  @Test public void testLocalhostIpv4() throws UnknownHostException {
+    Socket socket =
+        new FakeSocket(InetAddress.getByAddress("localhost", new byte[] {127, 0, 0, 1}), 80);
+
+    RecordedRequest request = new RecordedRequest("GET / HTTP/1.1", headers,
+        Collections.emptyList(), 0, new Buffer(), 0, socket);
+
+    assertThat(request.getRequestUrl().toString()).isEqualTo("http://localhost/");
+  }
 }
diff --git a/okcurl/build.gradle b/okcurl/build.gradle
index 54ebfabf50..990860e3e2 100644
--- a/okcurl/build.gradle
+++ b/okcurl/build.gradle
@@ -25,7 +25,7 @@ task copyResourcesTemplates(type: Copy) {
 dependencies {
   api project(':okhttp')
   api project(':okhttp-logging-interceptor')
-  implementation deps.airline
+  implementation deps.picocli
   implementation deps.guava
 
   testImplementation project(':okhttp-testing-support')
diff --git a/okcurl/okcurl b/okcurl/okcurl
new file mode 100755
index 0000000000..72d5ac525a
--- /dev/null
+++ b/okcurl/okcurl
@@ -0,0 +1,5 @@
+#!/bin/sh -e
+
+../gradlew -q --console plain installDist
+
+./build/install/okcurl/bin/okcurl "$@"
diff --git a/okcurl/src/main/java/okhttp3/curl/Main.kt b/okcurl/src/main/java/okhttp3/curl/Main.kt
index a1f05299f7..9a8f323d52 100644
--- a/okcurl/src/main/java/okhttp3/curl/Main.kt
+++ b/okcurl/src/main/java/okhttp3/curl/Main.kt
@@ -15,11 +15,6 @@
  */
 package okhttp3.curl
 
-import com.github.rvesse.airline.HelpOption
-import com.github.rvesse.airline.SingleCommand
-import com.github.rvesse.airline.annotations.Arguments
-import com.github.rvesse.airline.annotations.Command
-import com.github.rvesse.airline.annotations.Option
 import okhttp3.MediaType
 import okhttp3.MediaType.Companion.toMediaTypeOrNull
 import okhttp3.OkHttpClient
@@ -34,6 +29,11 @@ import okhttp3.internal.platform.Platform
 import okhttp3.logging.HttpLoggingInterceptor
 import okhttp3.logging.LoggingEventListener
 import okio.sink
+import picocli.CommandLine
+import picocli.CommandLine.Command
+import picocli.CommandLine.IVersionProvider
+import picocli.CommandLine.Option
+import picocli.CommandLine.Parameters
 import java.io.IOException
 import java.security.cert.X509Certificate
 import java.util.Properties
@@ -43,75 +43,68 @@ import java.util.logging.Level
 import java.util.logging.LogRecord
 import java.util.logging.Logger
 import java.util.logging.SimpleFormatter
-import javax.inject.Inject
 import javax.net.ssl.HostnameVerifier
 import javax.net.ssl.SSLSocketFactory
 import javax.net.ssl.TrustManager
 import javax.net.ssl.X509TrustManager
+import kotlin.system.exitProcess
 
-@Command(name = NAME, description = "A curl for the next-generation web.")
+@Command(name = NAME, description = ["A curl for the next-generation web."],
+    mixinStandardHelpOptions = true, versionProvider = Main.VersionProvider::class)
 class Main : Runnable {
-  @Inject
-  var help: HelpOption<Main>? = null
-
-  @Option(name = ["-X", "--request"], description = "Specify request command to use")
+  @Option(names = ["-X", "--request"], description = ["Specify request command to use"])
   var method: String? = null
 
-  @Option(name = ["-d", "--data"], description = "HTTP POST data")
+  @Option(names = ["-d", "--data"], description = ["HTTP POST data"])
   var data: String? = null
 
-  @Option(name = ["-H", "--header"], description = "Custom header to pass to server")
+  @Option(names = ["-H", "--header"], description = ["Custom header to pass to server"])
   var headers: MutableList<String>? = null
 
-  @Option(name = ["-A", "--user-agent"], description = "User-Agent to send to server")
+  @Option(names = ["-A", "--user-agent"], description = ["User-Agent to send to server"])
   var userAgent = NAME + "/" + versionString()
 
-  @Option(name = ["--connect-timeout"],
-      description = "Maximum time allowed for connection (seconds)")
+  @Option(names = ["--connect-timeout"],
+      description = ["Maximum time allowed for connection (seconds)"])
   var connectTimeout = DEFAULT_TIMEOUT
 
-  @Option(name = ["--read-timeout"],
-      description = "Maximum time allowed for reading data (seconds)")
+  @Option(names = ["--read-timeout"],
+      description = ["Maximum time allowed for reading data (seconds)"])
   var readTimeout = DEFAULT_TIMEOUT
 
-  @Option(name = ["--call-timeout"],
-      description = "Maximum time allowed for the entire call (seconds)")
+  @Option(names = ["--call-timeout"],
+      description = ["Maximum time allowed for the entire call (seconds)"])
   var callTimeout = DEFAULT_TIMEOUT
 
-  @Option(name = ["-L", "--location"], description = "Follow redirects")
+  @Option(names = ["-L", "--location"], description = ["Follow redirects"])
   var followRedirects: Boolean = false
 
-  @Option(name = ["-k", "--insecure"], description = "Allow connections to SSL sites without certs")
+  @Option(names = ["-k", "--insecure"], description = ["Allow connections to SSL sites without certs"])
   var allowInsecure: Boolean = false
 
-  @Option(name = ["-i", "--include"], description = "Include protocol headers in the output")
+  @Option(names = ["-i", "--include"], description = ["Include protocol headers in the output"])
   var showHeaders: Boolean = false
 
-  @Option(name = ["--frames"], description = "Log HTTP/2 frames to STDERR")
+  @Option(names = ["--frames"], description = ["Log HTTP/2 frames to STDERR"])
   var showHttp2Frames: Boolean = false
 
-  @Option(name = ["-e", "--referer"], description = "Referer URL")
+  @Option(names = ["-e", "--referer"], description = ["Referer URL"])
   var referer: String? = null
 
-  @Option(name = ["-V", "--version"], description = "Show version number and quit")
-  var version: Boolean = false
-
-  @Option(name = ["-v", "--verbose"], description = "Makes $NAME verbose during the operation")
+  @Option(names = ["-v", "--verbose"], description = ["Makes $NAME verbose during the operation"])
   var verbose: Boolean = false
 
-  @Arguments(title = ["url"], description = "Remote resource URL")
+  @Option(names = ["--completionScript"], hidden = true)
+  var completionScript: Boolean = false
+
+  @Parameters(paramLabel = "url", description = ["Remote resource URL"])
   var url: String? = null
 
   private lateinit var client: OkHttpClient
 
   override fun run() {
-    if (help?.showHelpIfRequested() == true) {
-      return
-    }
-
-    if (version) {
-      println(NAME + " " + versionString())
-      println("Protocols: " + protocols())
+    if (completionScript) {
+      println(picocli.AutoComplete.bash("okcurl", CommandLine(Main())))
       return
     }
 
@@ -122,11 +115,6 @@ class Main : Runnable {
     client = createClient()
     val request = createRequest()
 
-    if (request == null) {
-      help?.showHelp()
-      return
-    }
-
     try {
       val response = client.newCall(request).execute()
       if (showHeaders) {
@@ -183,13 +171,12 @@ class Main : Runnable {
     return builder.build()
   }
 
-  fun createRequest(): Request? {
+  public fun createRequest(): Request {
     val request = Request.Builder()
 
-    val requestUrl = url ?: return null
     val requestMethod = method ?: if (data != null) "POST" else "GET"
 
-    request.url(requestUrl)
+    request.url(url!!)
 
     data?.let {
       request.method(requestMethod, it.toRequestBody(mediaType()))
@@ -224,6 +211,17 @@ class Main : Runnable {
 
   private fun close() {
     client.connectionPool.evictAll() // Close any persistent connections.
+    client.dispatcher.executorService.shutdownNow()
+  }
+
+  class VersionProvider : IVersionProvider {
+    override fun getVersion(): Array<String> {
+      return arrayOf(
+          "$NAME ${versionString()}",
+          "Protocols: ${Protocol.values().joinToString(", ")}",
+          "Platform: ${Platform.get()::class.java.simpleName}"
+      )
+    }
   }
 
   companion object {
@@ -231,16 +229,12 @@ class Main : Runnable {
     internal const val DEFAULT_TIMEOUT = -1
     private var frameLogger: Logger? = null
 
-    @JvmStatic
-    fun fromArgs(vararg args: String): Main =
-        SingleCommand.singleCommand(Main::class.java).parse(*args)
-
     @JvmStatic
     fun main(args: Array<String>) {
-      Main.fromArgs(*args).run()
+      exitProcess(CommandLine(Main()).execute(*args))
     }
 
-    private fun versionString(): String {
+    private fun versionString(): String? {
       val prop = Properties()
       Main::class.java.getResourceAsStream("/okcurl-version.properties").use {
         prop.load(it)
@@ -248,8 +242,6 @@ class Main : Runnable {
       return prop.getProperty("version", "dev")
     }
 
-    private fun protocols() = Protocol.values().joinToString(", ")
-
     private fun createInsecureTrustManager(): X509TrustManager = object : X509TrustManager {
       override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {}
 
diff --git a/okcurl/src/test/java/okhttp3/curl/MainTest.java b/okcurl/src/test/java/okhttp3/curl/MainTest.java
index 6277c93f8a..4eecbc938f 100644
--- a/okcurl/src/test/java/okhttp3/curl/MainTest.java
+++ b/okcurl/src/test/java/okhttp3/curl/MainTest.java
@@ -20,11 +20,15 @@
 import okhttp3.RequestBody;
 import okio.Buffer;
 import org.junit.Test;
+import picocli.CommandLine;
 
-import static okhttp3.curl.Main.fromArgs;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class MainTest {
+  public static Main fromArgs(String... args) {
+    return CommandLine.populateCommand(new Main(), args);
+  }
+
   @Test public void simple() {
     Request request = fromArgs("http://example.com").createRequest();
     assertThat(request.method()).isEqualTo("GET");
diff --git a/okhttp-brotli/README.md b/okhttp-brotli/README.md
index 4f8e802fd2..95d73f722e 100644
--- a/okhttp-brotli/README.md
+++ b/okhttp-brotli/README.md
@@ -1,4 +1,20 @@
 OkHttp Brotli Implementation
 ============================
 
-This module is an implementation of Brotli compression.
+This module is an implementation of [Brotli][1] compression.  
+It enables Brotli support in addition to tranparent Gzip support, 
+provided Accept-Encoding is not set previously.  Modern web servers
+must choose to return Brotli responses.  n.b. It is not used for
+sending requests.
+
+```java
+OkHttpClient client = new OkHttpClient.Builder()
+  .addInterceptor(BrotliInterceptor.INSTANCE)
+  .build();
+```
+
+```kotlin
+implementation("com.squareup.okhttp3:okhttp-brotli:4.1.1")
+```
+
+ [1]: https://github.com/google/brotli
diff --git a/okhttp-dnsoverhttps/README.md b/okhttp-dnsoverhttps/README.md
index 4aa1710edb..bd9c0ea601 100644
--- a/okhttp-dnsoverhttps/README.md
+++ b/okhttp-dnsoverhttps/README.md
@@ -7,5 +7,5 @@ API is not considered stable and may change at any time.
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-dnsoverhttps:4.0.1")
+testImplementation("com.squareup.okhttp3:okhttp-dnsoverhttps:4.1.1")
 ```
diff --git a/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt
index c7b42184d3..ebf0d4a592 100644
--- a/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt
+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt
@@ -92,7 +92,7 @@ object DnsRecordCodec {
 
       val type = buf.readShort().toInt() and 0xffff
       buf.readShort() // class
-      val ttl = buf.readInt().toLong() and 0xffffffffL // ttl
+      @Suppress("UNUSED_VARIABLE") val ttl = buf.readInt().toLong() and 0xffffffffL // ttl
       val length = buf.readShort().toInt() and 0xffff
 
       if (type == TYPE_A || type == TYPE_AAAA) {
diff --git a/okhttp-logging-interceptor/README.md b/okhttp-logging-interceptor/README.md
index 2c45db636d..e09ca8fd50 100644
--- a/okhttp-logging-interceptor/README.md
+++ b/okhttp-logging-interceptor/README.md
@@ -37,7 +37,7 @@ Download
 --------
 
 ```kotlin
-implementation("com.squareup.okhttp3:logging-interceptor:4.0.1")
+implementation("com.squareup.okhttp3:logging-interceptor:4.1.1")
 ```
 
 
diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
index d2ea1a2c66..233142b7a3 100644
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.kt
@@ -164,25 +164,25 @@ class HttpLoggingInterceptor @JvmOverloads constructor(
     logger.log(requestStartMessage)
 
     if (logHeaders) {
+      val headers = request.headers
+
       if (requestBody != null) {
-        // Request body headers are only present when installed as a network interceptor. Force
-        // them to be included (when available) so there values are known.
+        // Request body headers are only present when installed as a network interceptor. When not
+        // already present, force them to be included (if available) so their values are known.
         requestBody.contentType()?.let {
-          logger.log("Content-Type: $it")
+          if (headers["Content-Type"] == null) {
+            logger.log("Content-Type: $it")
+          }
         }
         if (requestBody.contentLength() != -1L) {
-          logger.log("Content-Length: ${requestBody.contentLength()}")
+          if (headers["Content-Length"] == null) {
+            logger.log("Content-Length: ${requestBody.contentLength()}")
+          }
         }
       }
 
-      val headers = request.headers
       for (i in 0 until headers.size) {
-        val name = headers.name(i)
-        // Skip headers from the request body as they are explicitly logged above.
-        if (!"Content-Type".equals(name, ignoreCase = true) &&
-            !"Content-Length".equals(name, ignoreCase = true)) {
-          logHeader(headers, i)
-        }
+        logHeader(headers, i)
       }
 
       if (!logBody || requestBody == null) {
diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.kt b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.kt
index 3e47250999..35024ed219 100644
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.kt
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/LoggingEventListener.kt
@@ -19,6 +19,7 @@ import okhttp3.Call
 import okhttp3.Connection
 import okhttp3.EventListener
 import okhttp3.Handshake
+import okhttp3.HttpUrl
 import okhttp3.OkHttpClient
 import okhttp3.Protocol
 import okhttp3.Request
@@ -47,6 +48,14 @@ class LoggingEventListener private constructor(
     logWithTime("callStart: ${call.request()}")
   }
 
+  override fun proxySelectStart(call: Call, url: HttpUrl) {
+    logWithTime("proxySelectStart: $url")
+  }
+
+  override fun proxySelectEnd(call: Call, url: HttpUrl, proxies: List<Proxy>) {
+    logWithTime("proxySelectEnd: $proxies")
+  }
+
   override fun dnsStart(call: Call, domainName: String) {
     logWithTime("dnsStart: $domainName")
   }
diff --git a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
index e9a7bce269..48e8a50e9e 100644
--- a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
@@ -23,6 +23,7 @@
 import javax.annotation.Nullable;
 import javax.net.ssl.HostnameVerifier;
 import okhttp3.HttpUrl;
+import okhttp3.Interceptor;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
 import okhttp3.testing.PlatformRule;
@@ -69,6 +70,8 @@
   private final HttpLoggingInterceptor applicationInterceptor =
       new HttpLoggingInterceptor(applicationLogs);
 
+  private Interceptor extraNetworkInterceptor = null;
+
   private void setLevel(Level level) {
     networkInterceptor.setLevel(level);
     applicationInterceptor.setLevel(level);
@@ -76,6 +79,9 @@ private void setLevel(Level level) {
 
   @Before public void setUp() {
     client = new OkHttpClient.Builder()
+        .addNetworkInterceptor(chain -> extraNetworkInterceptor != null
+            ? extraNetworkInterceptor.intercept(chain)
+            : chain.proceed(chain.request()))
         .addNetworkInterceptor(networkInterceptor)
         .addInterceptor(applicationInterceptor)
         .sslSocketFactory(
@@ -325,6 +331,45 @@ private void setLevel(Level level) {
         .assertNoMoreLogs();
   }
 
+  @Test public void headersPostWithHeaderOverrides() throws IOException {
+    setLevel(Level.HEADERS);
+
+    extraNetworkInterceptor = chain -> chain.proceed(chain.request()
+        .newBuilder()
+        .header("Content-Length", "2")
+        .header("Content-Type", "text/plain-ish")
+        .build());
+
+    server.enqueue(new MockResponse());
+    client.newCall(request()
+        .post(RequestBody.create("Hi?", PLAIN))
+        .build()).execute();
+
+    applicationLogs
+        .assertLogEqual("--> POST " + url)
+        .assertLogEqual("Content-Type: text/plain; charset=utf-8")
+        .assertLogEqual("Content-Length: 3")
+        .assertLogEqual("--> END POST")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
+        .assertLogEqual("Content-Length: 0")
+        .assertLogEqual("<-- END HTTP")
+        .assertNoMoreLogs();
+
+    networkLogs
+        .assertLogEqual("--> POST " + url + " http/1.1")
+        .assertLogEqual("Host: " + host)
+        .assertLogEqual("Connection: Keep-Alive")
+        .assertLogEqual("Accept-Encoding: gzip")
+        .assertLogMatch("User-Agent: okhttp/.+")
+        .assertLogEqual("Content-Length: 2")
+        .assertLogEqual("Content-Type: text/plain-ish")
+        .assertLogEqual("--> END POST")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
+        .assertLogEqual("Content-Length: 0")
+        .assertLogEqual("<-- END HTTP")
+        .assertNoMoreLogs();
+  }
+
   @Test public void headersResponseBody() throws IOException {
     setLevel(Level.HEADERS);
 
diff --git a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java
index a07e04e8b4..97690f5997 100644
--- a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java
+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java
@@ -74,6 +74,8 @@ public void get() throws Exception {
 
     logRecorder
         .assertLogMatch("callStart: Request\\{method=GET, url=" + url + "\\}")
+        .assertLogMatch("proxySelectStart: " + url)
+        .assertLogMatch("proxySelectEnd: \\[DIRECT\\]")
         .assertLogMatch("dnsStart: " + url.host())
         .assertLogMatch("dnsEnd: \\[.+\\]")
         .assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT")
@@ -105,6 +107,8 @@ public void post() throws IOException {
 
     logRecorder
         .assertLogMatch("callStart: Request\\{method=POST, url=" + url + "\\}")
+        .assertLogMatch("proxySelectStart: " + url)
+        .assertLogMatch("proxySelectEnd: \\[DIRECT\\]")
         .assertLogMatch("dnsStart: " + url.host())
         .assertLogMatch("dnsEnd: \\[.+\\]")
         .assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT")
@@ -145,6 +149,8 @@ public void secureGet() throws Exception {
 
     logRecorder
         .assertLogMatch("callStart: Request\\{method=GET, url=" + url + "\\}")
+        .assertLogMatch("proxySelectStart: " + url)
+        .assertLogMatch("proxySelectEnd: \\[DIRECT\\]")
         .assertLogMatch("dnsStart: " + url.host())
         .assertLogMatch("dnsEnd: \\[.+\\]")
         .assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT")
@@ -188,6 +194,8 @@ public void dnsFail() throws IOException {
 
     logRecorder
         .assertLogMatch("callStart: Request\\{method=GET, url=" + url + "\\}")
+        .assertLogMatch("proxySelectStart: " + url)
+        .assertLogMatch("proxySelectEnd: \\[DIRECT\\]")
         .assertLogMatch("dnsStart: " + url.host())
         .assertLogMatch("callFailed: java.net.UnknownHostException: reason")
         .assertNoMoreLogs();
@@ -208,6 +216,8 @@ public void connectFail() {
 
     logRecorder
         .assertLogMatch("callStart: Request\\{method=GET, url=" + url + "\\}")
+        .assertLogMatch("proxySelectStart: " + url)
+        .assertLogMatch("proxySelectEnd: \\[DIRECT\\]")
         .assertLogMatch("dnsStart: " + url.host())
         .assertLogMatch("dnsEnd: \\[.+\\]")
         .assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT")
diff --git a/okhttp-sse/README.md b/okhttp-sse/README.md
index c65b05e2fa..a8d7227903 100644
--- a/okhttp-sse/README.md
+++ b/okhttp-sse/README.md
@@ -7,5 +7,5 @@ API is not considered stable and may change at any time.
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-sse:4.0.1")
+testImplementation("com.squareup.okhttp3:okhttp-sse:4.1.1")
 ```
diff --git a/okhttp-testing-support/build.gradle b/okhttp-testing-support/build.gradle
index b2611277a1..3efe882543 100644
--- a/okhttp-testing-support/build.gradle
+++ b/okhttp-testing-support/build.gradle
@@ -3,6 +3,7 @@ dependencies {
   api deps.junit
   api deps.assertj
   api deps.conscrypt
+  api deps.openjsse
   
   compileOnly deps.jsr305
 }
diff --git a/okhttp-testing-support/src/main/java/okhttp3/ClientRuleEventListener.kt b/okhttp-testing-support/src/main/java/okhttp3/ClientRuleEventListener.kt
new file mode 100644
index 0000000000..28444acdb2
--- /dev/null
+++ b/okhttp-testing-support/src/main/java/okhttp3/ClientRuleEventListener.kt
@@ -0,0 +1,143 @@
+/*
+ * Copyright (C) 2018 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3
+
+import java.io.IOException
+import java.net.InetAddress
+import java.net.InetSocketAddress
+import java.net.Proxy
+import java.util.concurrent.TimeUnit
+
+class ClientRuleEventListener(var logger: (String) -> Unit) : EventListener(),
+    EventListener.Factory {
+  private var startNs: Long = 0
+
+  override fun create(call: Call): EventListener = this
+
+  override fun callStart(call: Call) {
+    startNs = System.nanoTime()
+
+    logWithTime("callStart: ${call.request()}")
+  }
+
+  override fun proxySelectStart(call: Call, url: HttpUrl) {
+    logWithTime("proxySelectStart: $url")
+  }
+
+  override fun proxySelectEnd(call: Call, url: HttpUrl, proxies: List<Proxy>) {
+    logWithTime("proxySelectEnd: $proxies")
+  }
+
+  override fun dnsStart(call: Call, domainName: String) {
+    logWithTime("dnsStart: $domainName")
+  }
+
+  override fun dnsEnd(call: Call, domainName: String, inetAddressList: List<InetAddress>) {
+    logWithTime("dnsEnd: $inetAddressList")
+  }
+
+  override fun connectStart(call: Call, inetSocketAddress: InetSocketAddress, proxy: Proxy) {
+    logWithTime("connectStart: $inetSocketAddress $proxy")
+  }
+
+  override fun secureConnectStart(call: Call) {
+    logWithTime("secureConnectStart")
+  }
+
+  override fun secureConnectEnd(call: Call, handshake: Handshake?) {
+    logWithTime("secureConnectEnd: $handshake")
+  }
+
+  override fun connectEnd(
+    call: Call,
+    inetSocketAddress: InetSocketAddress,
+    proxy: Proxy,
+    protocol: Protocol?
+  ) {
+    logWithTime("connectEnd: $protocol")
+  }
+
+  override fun connectFailed(
+    call: Call,
+    inetSocketAddress: InetSocketAddress,
+    proxy: Proxy,
+    protocol: Protocol?,
+    ioe: IOException
+  ) {
+    logWithTime("connectFailed: $protocol $ioe")
+  }
+
+  override fun connectionAcquired(call: Call, connection: Connection) {
+    logWithTime("connectionAcquired: $connection")
+  }
+
+  override fun connectionReleased(call: Call, connection: Connection) {
+    logWithTime("connectionReleased")
+  }
+
+  override fun requestHeadersStart(call: Call) {
+    logWithTime("requestHeadersStart")
+  }
+
+  override fun requestHeadersEnd(call: Call, request: Request) {
+    logWithTime("requestHeadersEnd")
+  }
+
+  override fun requestBodyStart(call: Call) {
+    logWithTime("requestBodyStart")
+  }
+
+  override fun requestBodyEnd(call: Call, byteCount: Long) {
+    logWithTime("requestBodyEnd: byteCount=$byteCount")
+  }
+
+  override fun requestFailed(call: Call, ioe: IOException) {
+    logWithTime("requestFailed: $ioe")
+  }
+
+  override fun responseHeadersStart(call: Call) {
+    logWithTime("responseHeadersStart")
+  }
+
+  override fun responseHeadersEnd(call: Call, response: Response) {
+    logWithTime("responseHeadersEnd: $response")
+  }
+
+  override fun responseBodyStart(call: Call) {
+    logWithTime("responseBodyStart")
+  }
+
+  override fun responseBodyEnd(call: Call, byteCount: Long) {
+    logWithTime("responseBodyEnd: byteCount=$byteCount")
+  }
+
+  override fun responseFailed(call: Call, ioe: IOException) {
+    logWithTime("responseFailed: $ioe")
+  }
+
+  override fun callEnd(call: Call) {
+    logWithTime("callEnd")
+  }
+
+  override fun callFailed(call: Call, ioe: IOException) {
+    logWithTime("callFailed: $ioe")
+  }
+
+  private fun logWithTime(message: String) {
+    val timeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs)
+    logger.invoke("[$timeMs ms] $message")
+  }
+}
diff --git a/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt
index d94f9f5c17..6d3484807e 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt
+++ b/okhttp-testing-support/src/main/java/okhttp3/OkHttpClientTestRule.kt
@@ -15,6 +15,7 @@
  */
 package okhttp3
 
+import okhttp3.testing.Flaky
 import org.assertj.core.api.Assertions.assertThat
 import org.junit.rules.TestRule
 import org.junit.runner.Description
@@ -24,6 +25,7 @@ import java.util.concurrent.ConcurrentLinkedDeque
 
 /** Apply this rule to tests that need an OkHttpClient instance. */
 class OkHttpClientTestRule : TestRule {
+  private val clientEventsList = mutableListOf<String>()
   private var prototype: OkHttpClient? = null
 
   /**
@@ -40,7 +42,13 @@ class OkHttpClientTestRule : TestRule {
   }
 
   fun newClientBuilder(): OkHttpClient.Builder {
-    return checkNotNull(prototype) { "don't create clients in test initialization!" }.newBuilder()
+    return checkNotNull(prototype) { "don't create clients in test initialization!" }
+        .newBuilder()
+        .eventListener(ClientRuleEventListener { addEvent(it) })
+  }
+
+  @Synchronized private fun addEvent(it: String) {
+    clientEventsList.add(it)
   }
 
   fun ensureAllConnectionsReleased() {
@@ -57,6 +65,10 @@ class OkHttpClientTestRule : TestRule {
         acquireClient()
         try {
           base.evaluate()
+          logEventsIfFlaky(description)
+        } catch (t: Throwable) {
+          logEvents()
+          throw t
         } finally {
           ensureAllConnectionsReleased()
           releaseClient()
@@ -64,9 +76,7 @@ class OkHttpClientTestRule : TestRule {
       }
 
       private fun acquireClient() {
-        prototype = prototypes.poll() ?: OkHttpClient.Builder()
-            .dns(SINGLE_INET_ADDRESS_DNS) // Prevent unexpected fallback addresses.
-            .build()
+        prototype = prototypes.poll() ?: freshClient()
       }
 
       private fun releaseClient() {
@@ -78,6 +88,26 @@ class OkHttpClientTestRule : TestRule {
     }
   }
 
+  private fun logEventsIfFlaky(description: Description) {
+    if (isTestFlaky(description)) {
+      logEvents()
+    }
+  }
+
+  private fun isTestFlaky(description: Description): Boolean {
+    return description.annotations.any { it.annotationClass == Flaky::class } ||
+        description.testClass.annotations.any { it.annotationClass == Flaky::class }
+  }
+
+  @Synchronized private fun logEvents() {
+    // Will be ineffective if test overrides the listener
+    println("Events (${clientEventsList.size})")
+
+    for (e in clientEventsList) {
+      println(e)
+    }
+  }
+
   /**
    * Called if a test is known to be leaky.
    */
@@ -107,5 +137,11 @@ class OkHttpClientTestRule : TestRule {
         return listOf(addresses[0])
       }
     }
+
+    private fun freshClient(): OkHttpClient {
+      return OkHttpClient.Builder()
+          .dns(SINGLE_INET_ADDRESS_DNS) // Prevent unexpected fallback addresses.
+          .build()
+    }
   }
 }
diff --git a/okhttp/src/test/java/okhttp3/RecordingEventListener.java b/okhttp-testing-support/src/main/java/okhttp3/RecordingEventListener.java
similarity index 94%
rename from okhttp/src/test/java/okhttp3/RecordingEventListener.java
rename to okhttp-testing-support/src/main/java/okhttp3/RecordingEventListener.java
index 47d3be7a14..8bd4f86f57 100644
--- a/okhttp/src/test/java/okhttp3/RecordingEventListener.java
+++ b/okhttp-testing-support/src/main/java/okhttp3/RecordingEventListener.java
@@ -27,6 +27,7 @@
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertTrue;
 
 public class RecordingEventListener extends EventListener {
   final Deque<CallEvent> eventSequence = new ConcurrentLinkedDeque<>();
@@ -75,12 +76,21 @@ private void logEvent(CallEvent e) {
     CallEvent startEvent = e.closes();
 
     if (startEvent != null) {
-      assertThat(eventSequence).contains(startEvent);
+      assertTrue(eventSequence.contains(startEvent));
     }
 
     eventSequence.offer(e);
   }
 
+  @Override public void proxySelectStart(Call call, HttpUrl url) {
+    logEvent(new ProxySelectStart(call, url));
+  }
+
+  @Override public void proxySelectEnd(Call call, HttpUrl url,
+      List<Proxy> proxies) {
+    logEvent(new ProxySelectEnd(call, url, proxies));
+  }
+
   @Override public void dnsStart(Call call, String domainName) {
     logEvent(new DnsStart(call, domainName));
   }
@@ -208,6 +218,24 @@ public String getName() {
     }
   }
 
+  static final class ProxySelectStart extends CallEvent {
+    final HttpUrl url;
+
+    ProxySelectStart(Call call, HttpUrl url) {
+      super(call, url);
+      this.url = url;
+    }
+  }
+
+  static final class ProxySelectEnd extends CallEvent {
+    final HttpUrl url;
+
+    ProxySelectEnd(Call call, HttpUrl url, List<Proxy> proxies) {
+      super(call, url, proxies);
+      this.url = url;
+    }
+  }
+
   static final class DnsStart extends CallEvent {
     final String domainName;
 
diff --git a/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java
index 8ce86ae1eb..8a6bc3443c 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java
+++ b/okhttp-testing-support/src/main/java/okhttp3/TestUtil.java
@@ -15,12 +15,16 @@
  */
 package okhttp3;
 
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
+import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import okhttp3.internal.http2.Header;
 
+import static org.junit.Assume.assumeNoException;
+
 public final class TestUtil {
   public static final InetSocketAddress UNREACHABLE_ADDRESS
       = new InetSocketAddress("198.51.100.1", 8080);
@@ -52,4 +56,12 @@ public static void awaitGarbageCollection() throws Exception {
     Thread.sleep(100);
     System.runFinalization();
   }
+
+  public static void assumeNetwork() {
+    try {
+      InetAddress.getByName("www.google.com");
+    } catch (UnknownHostException uhe) {
+      assumeNoException(uhe);
+    }
+  }
 }
diff --git a/okhttp-testing-support/src/main/java/okhttp3/testing/Flaky.kt b/okhttp-testing-support/src/main/java/okhttp3/testing/Flaky.kt
new file mode 100644
index 0000000000..f3b04d8809
--- /dev/null
+++ b/okhttp-testing-support/src/main/java/okhttp3/testing/Flaky.kt
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.testing
+
+@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)
+@Retention(AnnotationRetention.RUNTIME)
+/**
+ * Annotation marking a test as flaky, and requires extra logging and linking against
+ * a known github issue.  This does not ignore the failure.
+ */
+annotation class Flaky
diff --git a/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt b/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
index be02136094..49f98011c5 100644
--- a/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
+++ b/okhttp-testing-support/src/main/java/okhttp3/testing/PlatformRule.kt
@@ -18,6 +18,7 @@ package okhttp3.testing
 import okhttp3.internal.platform.ConscryptPlatform
 import okhttp3.internal.platform.Jdk8WithJettyBootPlatform
 import okhttp3.internal.platform.Jdk9Platform
+import okhttp3.internal.platform.OpenJSSEPlatform
 import okhttp3.internal.platform.Platform
 import org.conscrypt.Conscrypt
 import org.hamcrest.BaseMatcher
@@ -34,6 +35,7 @@ import org.junit.Assume.assumeTrue
 import org.junit.AssumptionViolatedException
 import org.junit.rules.TestRule
 import org.junit.runners.model.Statement
+import org.openjsse.net.ssl.OpenJSSE
 import java.security.Security
 
 /**
@@ -57,6 +59,8 @@ open class PlatformRule @JvmOverloads constructor(
         try {
           setupPlatform()
 
+          System.err.println("Running with ${Platform.get().javaClass.simpleName}")
+
           base.evaluate()
         } catch (e: AssumptionViolatedException) {
           throw e
@@ -95,6 +99,10 @@ open class PlatformRule @JvmOverloads constructor(
     expectFailure(platformMatches(CONSCRYPT_PROPERTY))
   }
 
+  fun expectFailureOnOpenJSSEPlatform() {
+    expectFailure(platformMatches(OPENJSSE_PROPERTY))
+  }
+
   fun expectFailureFromJdkVersion(majorVersion: Int) {
     expectFailure(fromMajor(majorVersion))
   }
@@ -118,7 +126,7 @@ open class PlatformRule @JvmOverloads constructor(
 
   fun fromMajor(version: Int): Matcher<PlatformVersion> {
     return object : TypeSafeMatcher<PlatformVersion>() {
-      override fun describeTo(description: org.hamcrest.Description) {
+      override fun describeTo(description: Description) {
         description.appendText("JDK with version from $version")
       }
 
@@ -171,6 +179,11 @@ open class PlatformRule @JvmOverloads constructor(
         JDK9_PROPERTY))
   }
 
+  fun assumeOpenJSSE() {
+    assumeThat(getPlatformSystemProperty(), equalTo(
+        OPENJSSE_PROPERTY))
+  }
+
   fun assumeJdk8() {
     assumeThat(getPlatformSystemProperty(), equalTo(
         JDK8_PROPERTY))
@@ -206,6 +219,11 @@ open class PlatformRule @JvmOverloads constructor(
         JDK8_ALPN_PROPERTY))
   }
 
+  fun assumeNotOpenJSSE() {
+    assumeThat(getPlatformSystemProperty(), not(
+        OPENJSSE_PROPERTY))
+  }
+
   fun assumeNotHttp2Support() {
     assumeThat(getPlatformSystemProperty(), equalTo(
         JDK8_PROPERTY))
@@ -221,6 +239,7 @@ open class PlatformRule @JvmOverloads constructor(
     const val JDK9_PROPERTY = "jdk9"
     const val JDK8_ALPN_PROPERTY = "jdk8alpn"
     const val JDK8_PROPERTY = "jdk8"
+    const val OPENJSSE_PROPERTY = "openjsse"
 
     init {
       if (getPlatformSystemProperty() == CONSCRYPT_PROPERTY && Security.getProviders()[0].name != "Conscrypt") {
@@ -238,7 +257,15 @@ open class PlatformRule @JvmOverloads constructor(
         if (isAlpnBootEnabled()) {
           System.err.println("Warning: ALPN Boot enabled unintentionally")
         }
+      } else if (getPlatformSystemProperty() == OPENJSSE_PROPERTY && Security.getProviders()[0].name != "OpenJSSE") {
+        if (!OpenJSSEPlatform.isSupported) {
+          System.err.println("Warning: OpenJSSE not available")
+        }
+
+        Security.insertProviderAt(OpenJSSE(), 1)
       }
+
+      Platform.resetForTests()
     }
 
     @JvmStatic
@@ -249,6 +276,7 @@ open class PlatformRule @JvmOverloads constructor(
       if (property == null) {
         property = when (Platform.get()) {
           is ConscryptPlatform -> CONSCRYPT_PROPERTY
+          is OpenJSSEPlatform -> OPENJSSE_PROPERTY
           is Jdk8WithJettyBootPlatform -> CONSCRYPT_PROPERTY
           is Jdk9Platform -> JDK9_PROPERTY
           else -> JDK8_PROPERTY
@@ -261,6 +289,9 @@ open class PlatformRule @JvmOverloads constructor(
     @JvmStatic
     fun conscrypt() = PlatformRule(CONSCRYPT_PROPERTY)
 
+    @JvmStatic
+    fun openjsse() = PlatformRule(OPENJSSE_PROPERTY)
+
     @JvmStatic
     fun jdk9() = PlatformRule(JDK9_PROPERTY)
 
diff --git a/okhttp-tls/README.md b/okhttp-tls/README.md
index f3ba23e34a..ec3f7857dd 100644
--- a/okhttp-tls/README.md
+++ b/okhttp-tls/README.md
@@ -227,7 +227,7 @@ Download
 --------
 
 ```kotlin
-implementation("com.squareup.okhttp3:okhttp-tls:4.0.1")
+implementation("com.squareup.okhttp3:okhttp-tls:4.1.1")
 ```
 
  [held_certificate]: http://square.github.io/okhttp/4.x/okhttp-tls/okhttp3.tls/-held-certificate/
diff --git a/okhttp-urlconnection/README.md b/okhttp-urlconnection/README.md
index 797923a781..fffe6dbd9c 100644
--- a/okhttp-urlconnection/README.md
+++ b/okhttp-urlconnection/README.md
@@ -6,5 +6,5 @@ This module integrates OkHttp with `Authenticator` and `CookieHandler` from `jav
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-urlconnection:4.0.1")
+testImplementation("com.squareup.okhttp3:okhttp-urlconnection:4.1.1")
 ```
diff --git a/okhttp/build.gradle b/okhttp/build.gradle
index a03f3d8ec3..087ca5b6f8 100644
--- a/okhttp/build.gradle
+++ b/okhttp/build.gradle
@@ -26,6 +26,7 @@ dependencies {
   api deps.okio
   api deps.kotlinStdlib
   compileOnly deps.conscrypt
+  compileOnly deps.openjsse
   compileOnly deps.android
   compileOnly deps.jsr305
   compileOnly deps.animalSniffer
@@ -38,6 +39,7 @@ dependencies {
   testImplementation deps.conscrypt
   testImplementation deps.junit
   testImplementation deps.assertj
+  testImplementation deps.openjsse
   testCompileOnly deps.jsr305
 }
 
diff --git a/okhttp/src/main/java/okhttp3/CertificatePinner.kt b/okhttp/src/main/java/okhttp3/CertificatePinner.kt
index bd46897d2e..29e3f9ddaf 100644
--- a/okhttp/src/main/java/okhttp3/CertificatePinner.kt
+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.kt
@@ -123,6 +123,7 @@ import javax.net.ssl.SSLPeerUnverifiedException
  * [rfc_7469]: http://tools.ietf.org/html/rfc7469
  * [static_certificates]: http://goo.gl/XDh6je
  */
+@Suppress("NAME_SHADOWING")
 class CertificatePinner internal constructor(
   private val pins: Set<Pin>,
   private val certificateChainCleaner: CertificateChainCleaner?
diff --git a/okhttp/src/main/java/okhttp3/ConnectionSpec.kt b/okhttp/src/main/java/okhttp3/ConnectionSpec.kt
index a9b54f00e9..7804b0d98d 100644
--- a/okhttp/src/main/java/okhttp3/ConnectionSpec.kt
+++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.kt
@@ -168,13 +168,12 @@ class ConnectionSpec internal constructor(
     if (other !is ConnectionSpec) return false
     if (other === this) return true
 
-    val that = other as ConnectionSpec?
-    if (this.isTls != that!!.isTls) return false
+    if (this.isTls != other.isTls) return false
 
     if (isTls) {
-      if (!Arrays.equals(this.cipherSuitesAsString, that.cipherSuitesAsString)) return false
-      if (!Arrays.equals(this.tlsVersionsAsString, that.tlsVersionsAsString)) return false
-      if (this.supportsTlsExtensions != that.supportsTlsExtensions) return false
+      if (!Arrays.equals(this.cipherSuitesAsString, other.cipherSuitesAsString)) return false
+      if (!Arrays.equals(this.tlsVersionsAsString, other.tlsVersionsAsString)) return false
+      if (this.supportsTlsExtensions != other.supportsTlsExtensions) return false
     }
 
     return true
@@ -183,8 +182,8 @@ class ConnectionSpec internal constructor(
   override fun hashCode(): Int {
     var result = 17
     if (isTls) {
-      result = 31 * result + cipherSuitesAsString!!.contentHashCode()
-      result = 31 * result + tlsVersionsAsString!!.contentHashCode()
+      result = 31 * result + (cipherSuitesAsString?.contentHashCode() ?: 0)
+      result = 31 * result + (tlsVersionsAsString?.contentHashCode() ?: 0)
       result = 31 * result + if (supportsTlsExtensions) 0 else 1
     }
     return result
@@ -269,6 +268,7 @@ class ConnectionSpec internal constructor(
     )
   }
 
+  @Suppress("DEPRECATION")
   companion object {
     // Most secure but generally supported list.
     private val RESTRICTED_CIPHER_SUITES = arrayOf(
diff --git a/okhttp/src/main/java/okhttp3/Cookie.kt b/okhttp/src/main/java/okhttp3/Cookie.kt
index 69b8ce0b96..3a16bb64f9 100644
--- a/okhttp/src/main/java/okhttp3/Cookie.kt
+++ b/okhttp/src/main/java/okhttp3/Cookie.kt
@@ -40,6 +40,7 @@ import java.util.regex.Pattern
  *
  * [chromium_extension]: https://code.google.com/p/chromium/issues/detail?id=232693
  */
+@Suppress("NAME_SHADOWING")
 class Cookie private constructor(
   /** Returns a non-empty string with this cookie's name. */
   @get:JvmName("name") val name: String,
@@ -325,6 +326,7 @@ class Cookie private constructor(
     }
   }
 
+  @Suppress("NAME_SHADOWING")
   companion object {
     private val YEAR_PATTERN = Pattern.compile("(\\d{2,4})[^\\d]*")
     private val MONTH_PATTERN =
diff --git a/okhttp/src/main/java/okhttp3/EventListener.kt b/okhttp/src/main/java/okhttp3/EventListener.kt
index 1953953437..f52fa00af2 100644
--- a/okhttp/src/main/java/okhttp3/EventListener.kt
+++ b/okhttp/src/main/java/okhttp3/EventListener.kt
@@ -60,6 +60,42 @@ abstract class EventListener {
   ) {
   }
 
+  /**
+   * Invoked prior to a proxy selection.
+   *
+   * This will be invoked for route selection regardless of whether the client
+   * is configured with a single proxy, a proxy selector, or neither.
+   *
+   * @param url a URL with only the scheme, hostname, and port specified.
+   */
+  open fun proxySelectStart(
+    call: Call,
+    url: HttpUrl
+  ) {
+  }
+
+  /**
+   * Invoked after proxy selection.
+   *
+   * Note that the list of proxies is never null, but it may be a list containing
+   * only [Proxy.NO_PROXY]. This comes up in several situations:
+   *
+   * * If neither a proxy nor proxy selector is configured.
+   * * If the proxy is configured explicitly as [Proxy.NO_PROXY].
+   * * If the proxy selector returns only [Proxy.NO_PROXY].
+   * * If the proxy selector returns an empty list or null.
+   *
+   * Otherwise it lists the proxies in the order they will be attempted.
+   *
+   * @param url a URL with only the scheme, hostname, and port specified.
+   */
+  open fun proxySelectEnd(
+    call: Call,
+    url: HttpUrl,
+    proxies: List<@JvmSuppressWildcards Proxy>
+  ) {
+  }
+
   /**
    * Invoked just prior to a DNS lookup. See [Dns.lookup].
    *
diff --git a/okhttp/src/main/java/okhttp3/Headers.kt b/okhttp/src/main/java/okhttp3/Headers.kt
index 6193b39abd..40b52296c9 100644
--- a/okhttp/src/main/java/okhttp3/Headers.kt
+++ b/okhttp/src/main/java/okhttp3/Headers.kt
@@ -46,6 +46,7 @@ import java.util.TreeSet
  *
  * Instances of this class are immutable. Use [Builder] to create instances.
  */
+@Suppress("NAME_SHADOWING")
 class Headers private constructor(
   private val namesAndValues: Array<String>
 ) : Iterable<Pair<String, String>> {
diff --git a/okhttp/src/main/java/okhttp3/MultipartBody.kt b/okhttp/src/main/java/okhttp3/MultipartBody.kt
index fce2c2b513..abf62fbe59 100644
--- a/okhttp/src/main/java/okhttp3/MultipartBody.kt
+++ b/okhttp/src/main/java/okhttp3/MultipartBody.kt
@@ -29,6 +29,7 @@ import java.util.UUID
  *
  * [rfc_2387]: http://www.ietf.org/rfc/rfc2387.txt
  */
+@Suppress("NAME_SHADOWING")
 class MultipartBody internal constructor(
   private val boundaryByteString: ByteString,
   @get:JvmName("type") val type: MediaType,
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.kt b/okhttp/src/main/java/okhttp3/OkHttpClient.kt
index c35dafb054..009f303cf9 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.kt
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.kt
@@ -160,7 +160,12 @@ open class OkHttpClient internal constructor(
 
   @get:JvmName("proxy") val proxy: Proxy? = builder.proxy
 
-  @get:JvmName("proxySelector") val proxySelector: ProxySelector = builder.proxySelector
+  @get:JvmName("proxySelector") val proxySelector: ProxySelector =
+      when {
+        // Avoid possible SecurityException from ProxySelector.getDefault
+        builder.proxy != null -> NullProxySelector()
+        else -> builder.proxySelector ?: ProxySelector.getDefault() ?: NullProxySelector()
+      }
 
   @get:JvmName("proxyAuthenticator") val proxyAuthenticator: Authenticator =
       builder.proxyAuthenticator
@@ -172,6 +177,8 @@ open class OkHttpClient internal constructor(
   @get:JvmName("sslSocketFactory") val sslSocketFactory: SSLSocketFactory
     get() = sslSocketFactoryOrNull ?: throw IllegalStateException("CLEARTEXT-only client")
 
+  @get:JvmName("x509TrustManager") val x509TrustManager: X509TrustManager?
+
   @get:JvmName("connectionSpecs") val connectionSpecs: List<ConnectionSpec> =
       builder.connectionSpecs
 
@@ -207,11 +214,12 @@ open class OkHttpClient internal constructor(
     if (builder.sslSocketFactoryOrNull != null || connectionSpecs.none { it.isTls }) {
       this.sslSocketFactoryOrNull = builder.sslSocketFactoryOrNull
       this.certificateChainCleaner = builder.certificateChainCleaner
+      this.x509TrustManager = builder.x509TrustManagerOrNull
     } else {
-      val trustManager = Platform.get().platformTrustManager()
-      Platform.get().configureTrustManager(trustManager)
-      this.sslSocketFactoryOrNull = newSslSocketFactory(trustManager)
-      this.certificateChainCleaner = CertificateChainCleaner.get(trustManager)
+      this.x509TrustManager = Platform.get().platformTrustManager()
+      Platform.get().configureTrustManager(x509TrustManager)
+      this.sslSocketFactoryOrNull = newSslSocketFactory(x509TrustManager!!)
+      this.certificateChainCleaner = CertificateChainCleaner.get(x509TrustManager!!)
     }
 
     if (sslSocketFactoryOrNull != null) {
@@ -439,10 +447,11 @@ open class OkHttpClient internal constructor(
     internal var cache: Cache? = null
     internal var dns: Dns = Dns.SYSTEM
     internal var proxy: Proxy? = null
-    internal var proxySelector: ProxySelector = ProxySelector.getDefault() ?: NullProxySelector()
+    internal var proxySelector: ProxySelector? = null
     internal var proxyAuthenticator: Authenticator = Authenticator.NONE
     internal var socketFactory: SocketFactory = SocketFactory.getDefault()
     internal var sslSocketFactoryOrNull: SSLSocketFactory? = null
+    internal var x509TrustManagerOrNull: X509TrustManager? = null
     internal var connectionSpecs: List<ConnectionSpec> = DEFAULT_CONNECTION_SPECS
     internal var protocols: List<Protocol> = DEFAULT_PROTOCOLS
     internal var hostnameVerifier: HostnameVerifier = OkHostnameVerifier
@@ -472,6 +481,7 @@ open class OkHttpClient internal constructor(
       this.proxyAuthenticator = okHttpClient.proxyAuthenticator
       this.socketFactory = okHttpClient.socketFactory
       this.sslSocketFactoryOrNull = okHttpClient.sslSocketFactoryOrNull
+      this.x509TrustManagerOrNull = okHttpClient.x509TrustManager
       this.connectionSpecs = okHttpClient.connectionSpecs
       this.protocols = okHttpClient.protocols
       this.hostnameVerifier = okHttpClient.hostnameVerifier
@@ -716,6 +726,7 @@ open class OkHttpClient internal constructor(
     ) = apply {
       this.sslSocketFactoryOrNull = sslSocketFactory
       this.certificateChainCleaner = CertificateChainCleaner.get(trustManager)
+      this.x509TrustManagerOrNull = trustManager
     }
 
     fun connectionSpecs(connectionSpecs: List<ConnectionSpec>) = apply {
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.kt b/okhttp/src/main/java/okhttp3/internal/Util.kt
index bd37b1e633..d40f16c4d6 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.kt
+++ b/okhttp/src/main/java/okhttp3/internal/Util.kt
@@ -542,3 +542,27 @@ inline fun Any.notify() = (this as Object).notify()
 
 @Suppress("PLATFORM_CLASS_MAPPED_TO_KOTLIN", "NOTHING_TO_INLINE")
 inline fun Any.notifyAll() = (this as Object).notifyAll()
+
+fun <T> readFieldOrNull(instance: Any, fieldType: Class<T>, fieldName: String): T? {
+  var c: Class<*> = instance.javaClass
+  while (c != Any::class.java) {
+    try {
+      val field = c.getDeclaredField(fieldName)
+      field.isAccessible = true
+      val value = field.get(instance)
+      return if (!fieldType.isInstance(value)) null else fieldType.cast(value)
+    } catch (_: NoSuchFieldException) {
+    }
+
+    c = c.superclass
+  }
+
+  // Didn't find the field we wanted. As a last gasp attempt,
+  // try to find the value on a delegate.
+  if (fieldName != "delegate") {
+    val delegate = readFieldOrNull(instance, Any::class.java, "delegate")
+    if (delegate != null) return readFieldOrNull(delegate, fieldType, fieldName)
+  }
+
+  return null
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.kt b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.kt
index f73a856d90..20c615a463 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.kt
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.kt
@@ -213,7 +213,7 @@ class CacheInterceptor(internal val cache: Cache?) : Interceptor {
     private fun combine(cachedHeaders: Headers, networkHeaders: Headers): Headers {
       val result = Headers.Builder()
 
-      for (index in cachedHeaders.names().indices) {
+      for (index in 0 until cachedHeaders.size) {
         val fieldName = cachedHeaders.name(index)
         val value = cachedHeaders.value(index)
         if ("Warning".equals(fieldName, ignoreCase = true) && value.startsWith("1")) {
@@ -227,7 +227,7 @@ class CacheInterceptor(internal val cache: Cache?) : Interceptor {
         }
       }
 
-      for (index in networkHeaders.names().indices) {
+      for (index in 0 until networkHeaders.size) {
         val fieldName = networkHeaders.name(index)
         if (!isContentSpecificHeader(fieldName) && isEndToEnd(fieldName)) {
           result.addLenient(fieldName, networkHeaders.value(index))
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.kt b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.kt
index 448a67dffd..122e8f5c8d 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.kt
+++ b/okhttp/src/main/java/okhttp3/internal/connection/ExchangeFinder.kt
@@ -254,6 +254,10 @@ class ExchangeFinder(
         result!!.noNewExchanges = true
         socket = result!!.socket()
         result = transmitter.connection
+
+        // It's possible for us to obtain a coalesced connection that is immediately unhealthy. In
+        // that case we will retry the route we just successfully connected with.
+        nextRouteToTry = selectedRoute
       } else {
         connectionPool.put(result!!)
         transmitter.acquireConnectionNoEvents(result!!)
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnectionPool.kt b/okhttp/src/main/java/okhttp3/internal/connection/RealConnectionPool.kt
index d18559bb75..8dc3c57bce 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnectionPool.kt
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnectionPool.kt
@@ -21,10 +21,10 @@ import okhttp3.ConnectionPool
 import okhttp3.Route
 import okhttp3.internal.closeQuietly
 import okhttp3.internal.connection.Transmitter.TransmitterReference
+import okhttp3.internal.lockAndWaitNanos
 import okhttp3.internal.notifyAll
 import okhttp3.internal.platform.Platform
 import okhttp3.internal.threadFactory
-import okhttp3.internal.lockAndWaitNanos
 import java.io.IOException
 import java.net.Proxy
 import java.util.ArrayDeque
@@ -47,7 +47,9 @@ class RealConnectionPool(
         if (waitNanos == -1L) return
         try {
           this@RealConnectionPool.lockAndWaitNanos(waitNanos)
-        } catch (_: InterruptedException) {
+        } catch (ie: InterruptedException) {
+          // Will cause the thread to exit unless other connections are created!
+          evictAll()
         }
       }
     }
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.kt b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.kt
index 395951364a..a1db48a79f 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.kt
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.kt
@@ -94,6 +94,7 @@ class RouteSelector(
 
   /** Prepares the proxy servers to try. */
   private fun resetNextProxy(url: HttpUrl, proxy: Proxy?) {
+    eventListener.proxySelectStart(call, url)
     proxies = if (proxy != null) {
       // If the user specifies a proxy, try that and only that.
       listOf(proxy)
@@ -107,6 +108,7 @@ class RouteSelector(
       }
     }
     nextProxyIndex = 0
+    eventListener.proxySelectEnd(call, url, proxies)
   }
 
   /** Returns true if there's another proxy to try. */
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt
index c56a2156fd..292db0bba2 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt
@@ -40,6 +40,7 @@ import java.util.LinkedHashMap
  * entries are added to the array, starting in the last position moving forward. When the array
  * fills, it is doubled.
  */
+@Suppress("NAME_SHADOWING")
 object Hpack {
   private const val PREFIX_4_BITS = 0x0f
   private const val PREFIX_5_BITS = 0x1f
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
index 0cded18e24..663b6f4038 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
@@ -58,6 +58,7 @@ import java.util.concurrent.TimeUnit.MILLISECONDS
  * This is typical for Java but atypical for HTTP/2. This is motivated by exception transparency:
  * an [IOException] that was triggered by a certain caller can be caught and handled by that caller.
  */
+@Suppress("NAME_SHADOWING")
 class Http2Connection internal constructor(builder: Builder) : Closeable {
 
   // Internal state of this connection is guarded by 'this'. No blocking operations may be
@@ -700,11 +701,11 @@ class Http2Connection internal constructor(builder: Builder) : Closeable {
     }
 
     override fun ping(
-      reply: Boolean,
+      ack: Boolean,
       payload1: Int,
       payload2: Int
     ) {
-      if (reply) {
+      if (ack) {
         synchronized(this@Http2Connection) {
           awaitingPong = false
           this@Http2Connection.notifyAll()
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
index 4be10de903..045150fed3 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
@@ -33,6 +33,7 @@ import java.net.SocketTimeoutException
 import java.util.ArrayDeque
 
 /** A logical bidirectional stream. */
+@Suppress("NAME_SHADOWING")
 class Http2Stream internal constructor(
   val id: Int,
   val connection: Http2Connection,
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.kt
index 1b636e986a..64221e7667 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.kt
@@ -41,6 +41,7 @@ import java.util.logging.Level.FINE
 import java.util.logging.Logger
 
 /** Writes HTTP/2 transport frames. */
+@Suppress("NAME_SHADOWING")
 class Http2Writer(
   private val sink: BufferedSink,
   private val client: Boolean
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
index b47772f4a6..331850b07c 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
@@ -16,8 +16,12 @@
 package okhttp3.internal.platform
 
 import android.os.Build
-import android.util.Log
 import okhttp3.Protocol
+import okhttp3.internal.platform.android.CloseGuard
+import okhttp3.internal.platform.android.ConscryptSocketAdapter
+import okhttp3.internal.platform.android.DeferredSocketAdapter
+import okhttp3.internal.platform.android.StandardAndroidSocketAdapter
+import okhttp3.internal.platform.android.androidLog
 import okhttp3.internal.tls.BasicTrustRootIndex
 import okhttp3.internal.tls.CertificateChainCleaner
 import okhttp3.internal.tls.TrustRootIndex
@@ -26,7 +30,6 @@ import java.lang.reflect.InvocationTargetException
 import java.lang.reflect.Method
 import java.net.InetSocketAddress
 import java.net.Socket
-import java.nio.charset.StandardCharsets.UTF_8
 import java.security.cert.Certificate
 import java.security.cert.TrustAnchor
 import java.security.cert.X509Certificate
@@ -36,14 +39,13 @@ import javax.net.ssl.SSLSocketFactory
 import javax.net.ssl.X509TrustManager
 
 /** Android 5+. */
-class AndroidPlatform(
-  private val sslParametersClass: Class<*>,
-  private val sslSocketClass: Class<*>,
-  private val setUseSessionTickets: Method,
-  private val setHostname: Method,
-  private val getAlpnSelectedProtocol: Method,
-  private val setAlpnProtocols: Method
-) : Platform() {
+class AndroidPlatform : Platform() {
+  private val socketAdapters = listOfNotNull(
+      StandardAndroidSocketAdapter.buildIfSupported(),
+      ConscryptSocketAdapter.buildIfSupported(),
+      DeferredSocketAdapter("com.google.android.gms.org.conscrypt")
+  ).filter { it.isSupported() }
+
   private val closeGuard = CloseGuard.get()
 
   @Throws(IOException::class)
@@ -65,87 +67,26 @@ class AndroidPlatform(
     }
   }
 
-  override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? {
-    var context: Any? =
-        readFieldOrNull(sslSocketFactory, sslParametersClass, "sslParameters")
-    if (context == null) {
-      // If that didn't work, try the Google Play Services SSL provider before giving up. This
-      // must be loaded by the SSLSocketFactory's class loader.
-      try {
-        val gmsSslParametersClass = Class.forName(
-            "com.google.android.gms.org.conscrypt.SSLParametersImpl", false,
-            sslSocketFactory.javaClass.classLoader)
-        context = readFieldOrNull(sslSocketFactory, gmsSslParametersClass,
-            "sslParameters")
-      } catch (e: ClassNotFoundException) {
-        return super.trustManager(sslSocketFactory)
-      }
-    }
-
-    val x509TrustManager = readFieldOrNull(
-        context!!, X509TrustManager::class.java, "x509TrustManager")
-    return x509TrustManager ?: readFieldOrNull(context, X509TrustManager::class.java,
-        "trustManager")
-  }
+  override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? =
+      socketAdapters.find { it.matchesSocketFactory(sslSocketFactory) }
+          ?.trustManager(sslSocketFactory)
 
   override fun configureTlsExtensions(
     sslSocket: SSLSocket,
     hostname: String?,
     protocols: List<Protocol>
   ) {
-    if (!sslSocketClass.isInstance(sslSocket)) {
-      return // No TLS extensions if the socket class is custom.
-    }
-    try {
-      // Enable SNI and session tickets.
-      if (hostname != null) {
-        setUseSessionTickets.invoke(sslSocket, true)
-        // This is SSLParameters.setServerNames() in API 24+.
-        setHostname.invoke(sslSocket, hostname)
-      }
-
-      // Enable ALPN.
-      setAlpnProtocols.invoke(sslSocket, concatLengthPrefixed(protocols))
-    } catch (e: IllegalAccessException) {
-      throw AssertionError(e)
-    } catch (e: InvocationTargetException) {
-      throw AssertionError(e)
-    }
+    // No TLS extensions if the socket class is custom.
+    socketAdapters.find { it.matchesSocket(sslSocket) }
+        ?.configureTlsExtensions(sslSocket, hostname, protocols)
   }
 
-  override fun getSelectedProtocol(socket: SSLSocket): String? {
-    return if (sslSocketClass.isInstance(socket))
-      try {
-        val alpnResult = getAlpnSelectedProtocol.invoke(socket) as ByteArray?
-        if (alpnResult != null) String(alpnResult, UTF_8) else null
-      } catch (e: IllegalAccessException) {
-        throw AssertionError(e)
-      } catch (e: InvocationTargetException) {
-        throw AssertionError(e)
-      }
-    else {
-      null // No TLS extensions if the socket class is custom.
-    }
-  }
+  override fun getSelectedProtocol(sslSocket: SSLSocket) =
+      // No TLS extensions if the socket class is custom.
+      socketAdapters.find { it.matchesSocket(sslSocket) }?.getSelectedProtocol(sslSocket)
 
   override fun log(level: Int, message: String, t: Throwable?) {
-    var logMessage = message
-    val logLevel = if (level == WARN) Log.WARN else Log.DEBUG
-    if (t != null) logMessage = logMessage + '\n'.toString() + Log.getStackTraceString(t)
-
-    // Split by line, then ensure each line can fit into Log's maximum length.
-    var i = 0
-    val length = logMessage.length
-    while (i < length) {
-      var newline = logMessage.indexOf('\n', i)
-      newline = if (newline != -1) newline else length
-      do {
-        val end = minOf(newline, i + MAX_LOG_LENGTH)
-        Log.println(logLevel, "OkHttp", logMessage.substring(i, end))
-        i = end
-      } while (i < newline)
-      i++
-    }
+    androidLog(level, message, t)
   }
 
   override fun getStackTraceForCloseable(closer: String): Any? = closeGuard.createAndOpen(closer)
@@ -164,9 +105,9 @@ class AndroidPlatform(
       val getInstanceMethod = networkPolicyClass.getMethod("getInstance")
       val networkSecurityPolicy = getInstanceMethod.invoke(null)
       api24IsCleartextTrafficPermitted(hostname, networkPolicyClass, networkSecurityPolicy)
-    } catch (e: ClassNotFoundException) {
+    } catch (_: ClassNotFoundException) {
       super.isCleartextTrafficPermitted(hostname)
-    } catch (e: NoSuchMethodException) {
+    } catch (_: NoSuchMethodException) {
       super.isCleartextTrafficPermitted(hostname)
     } catch (e: IllegalAccessException) {
       throw AssertionError("unable to determine cleartext support", e)
@@ -186,7 +127,7 @@ class AndroidPlatform(
     val isCleartextTrafficPermittedMethod = networkPolicyClass
         .getMethod("isCleartextTrafficPermitted", String::class.java)
     isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy, hostname) as Boolean
-  } catch (e: NoSuchMethodException) {
+  } catch (_: NoSuchMethodException) {
     api23IsCleartextTrafficPermitted(hostname, networkPolicyClass, networkSecurityPolicy)
   }
 
@@ -199,7 +140,7 @@ class AndroidPlatform(
     val isCleartextTrafficPermittedMethod = networkPolicyClass
         .getMethod("isCleartextTrafficPermitted")
     isCleartextTrafficPermittedMethod.invoke(networkSecurityPolicy) as Boolean
-  } catch (e: NoSuchMethodException) {
+  } catch (_: NoSuchMethodException) {
     super.isCleartextTrafficPermitted(hostname)
   }
 
@@ -212,7 +153,7 @@ class AndroidPlatform(
             "checkServerTrusted", Array<X509Certificate>::class.java, String::class.java,
             String::class.java)
         AndroidCertificateChainCleaner(extensions, checkServerTrusted)
-      } catch (e: Exception) {
+      } catch (_: Exception) {
         super.buildCertificateChainCleaner(trustManager)
       }
 
@@ -258,67 +199,9 @@ class AndroidPlatform(
     override fun hashCode(): Int = 0
   }
 
-  /**
-   * Provides access to the internal dalvik.system.CloseGuard class. Android uses this in
-   * combination with android.os.StrictMode to report on leaked java.io.Closeable's. Available since
-   * Android API 11.
-   */
-  internal class CloseGuard(
-    private val getMethod: Method?,
-    private val openMethod: Method?,
-    private val warnIfOpenMethod: Method?
-  ) {
-
-    fun createAndOpen(closer: String): Any? {
-      if (getMethod != null) {
-        try {
-          val closeGuardInstance = getMethod.invoke(null)
-          openMethod!!.invoke(closeGuardInstance, closer)
-          return closeGuardInstance
-        } catch (_: Exception) {
-        }
-      }
-      return null
-    }
-
-    fun warnIfOpen(closeGuardInstance: Any?): Boolean {
-      var reported = false
-      if (closeGuardInstance != null) {
-        try {
-          warnIfOpenMethod!!.invoke(closeGuardInstance)
-          reported = true
-        } catch (_: Exception) {
-        }
-      }
-      return reported
-    }
-
-    companion object {
-      fun get(): CloseGuard {
-        var getMethod: Method?
-        var openMethod: Method?
-        var warnIfOpenMethod: Method?
-
-        try {
-          val closeGuardClass = Class.forName("dalvik.system.CloseGuard")
-          getMethod = closeGuardClass.getMethod("get")
-          openMethod = closeGuardClass.getMethod("open", String::class.java)
-          warnIfOpenMethod = closeGuardClass.getMethod("warnIfOpen")
-        } catch (_: Exception) {
-          getMethod = null
-          openMethod = null
-          warnIfOpenMethod = null
-        }
-
-        return CloseGuard(getMethod, openMethod, warnIfOpenMethod)
-      }
-    }
-  }
-
   /**
    * A trust manager for Android applications that customize the trust manager.
    *
-   *
    * This class exploits knowledge of Android implementation details. This class is potentially
    * much faster to initialize than [BasicTrustRootIndex] because it doesn't need to load and
    * index trusted CA certificates.
@@ -327,7 +210,6 @@ class AndroidPlatform(
     private val trustManager: X509TrustManager,
     private val findByIssuerAndSignatureMethod: Method
   ) : TrustRootIndex {
-
     override fun findByIssuerAndSignature(cert: X509Certificate): X509Certificate? {
       return try {
         val trustAnchor = findByIssuerAndSignatureMethod.invoke(
@@ -335,39 +217,25 @@ class AndroidPlatform(
         trustAnchor.trustedCert
       } catch (e: IllegalAccessException) {
         throw AssertionError("unable to get issues and signature", e)
-      } catch (e: InvocationTargetException) {
+      } catch (_: InvocationTargetException) {
         null
       }
     }
   }
 
   companion object {
-    private const val MAX_LOG_LENGTH = 4000
+    val isSupported: Boolean = try {
+      // Trigger an early exception over a fatal error, prefer a RuntimeException over Error.
+      Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl")
 
-    fun buildIfSupported(): Platform? {
-      // Attempt to find Android 5+ APIs.
-      val sslParametersClass: Class<*>
-      val sslSocketClass: Class<*>
-      try {
-        sslParametersClass = Class.forName("com.android.org.conscrypt.SSLParametersImpl")
-        sslSocketClass = Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl")
-      } catch (_: ClassNotFoundException) {
-        return null // Not an Android runtime.
-      }
+      // Fail Fast
+      check(Build.VERSION.SDK_INT >= 21) { "Expected Android API level 21+ but was ${Build.VERSION.SDK_INT}" }
 
-      if (Build.VERSION.SDK_INT >= 21) {
-        try {
-          val setUseSessionTickets = sslSocketClass.getDeclaredMethod(
-              "setUseSessionTickets", Boolean::class.javaPrimitiveType)
-          val setHostname = sslSocketClass.getMethod("setHostname", String::class.java)
-          val getAlpnSelectedProtocol = sslSocketClass.getMethod("getAlpnSelectedProtocol")
-          val setAlpnProtocols = sslSocketClass.getMethod("setAlpnProtocols", ByteArray::class.java)
-          return AndroidPlatform(sslParametersClass, sslSocketClass, setUseSessionTickets,
-              setHostname, getAlpnSelectedProtocol, setAlpnProtocols)
-        } catch (_: NoSuchMethodException) {
-        }
-      }
-      throw IllegalStateException("Expected Android API level 21+ but was ${Build.VERSION.SDK_INT}")
+      true
+    } catch (_: ClassNotFoundException) {
+      false
     }
+
+    fun buildIfSupported(): Platform? = if (isSupported) AndroidPlatform() else null
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt
index 882653c6fc..a5f9911c21 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/ConscryptPlatform.kt
@@ -16,6 +16,7 @@
 package okhttp3.internal.platform
 
 import okhttp3.Protocol
+import okhttp3.internal.readFieldOrNull
 import org.conscrypt.Conscrypt
 import java.security.Provider
 import javax.net.ssl.SSLContext
@@ -29,13 +30,9 @@ import javax.net.ssl.X509TrustManager
  * Requires org.conscrypt:conscrypt-openjdk-uber >= 2.1.0 on the classpath.
  */
 class ConscryptPlatform private constructor() : Platform() {
-  private val provider: Provider
-    get() {
-      // n.b. We should consider defaulting to OpenJDK 11 trust manager
-      // https://groups.google.com/forum/#!topic/conscrypt/3vYzbesjOb4
-
-      return Conscrypt.newProviderBuilder().provideTrustManager(true).build()
-    }
+  // n.b. We should consider defaulting to OpenJDK 11 trust manager
+  // https://groups.google.com/forum/#!topic/conscrypt/3vYzbesjOb4
+  private val provider: Provider = Conscrypt.newProviderBuilder().provideTrustManager(true).build()
 
   // See release notes https://groups.google.com/forum/#!forum/conscrypt
   // for version differences
@@ -85,11 +82,11 @@ class ConscryptPlatform private constructor() : Platform() {
     }
   }
 
-  override fun getSelectedProtocol(socket: SSLSocket): String? =
-      if (Conscrypt.isConscrypt(socket)) {
-        Conscrypt.getApplicationProtocol(socket)
+  override fun getSelectedProtocol(sslSocket: SSLSocket): String? =
+      if (Conscrypt.isConscrypt(sslSocket)) {
+        Conscrypt.getApplicationProtocol(sslSocket)
       } else {
-        super.getSelectedProtocol(socket)
+        super.getSelectedProtocol(sslSocket)
       }
 
   override fun configureSslSocketFactory(socketFactory: SSLSocketFactory) {
@@ -106,18 +103,20 @@ class ConscryptPlatform private constructor() : Platform() {
   }
 
   companion object {
-    fun buildIfSupported(): ConscryptPlatform? = try {
+    val isSupported: Boolean = try {
       // Trigger an early exception over a fatal error, prefer a RuntimeException over Error.
       Class.forName("org.conscrypt.Conscrypt\$Version")
 
       when {
-        Conscrypt.isAvailable() && atLeastVersion(2, 1, 0) -> ConscryptPlatform()
-        else -> null
+        Conscrypt.isAvailable() && atLeastVersion(2, 1, 0) -> true
+        else -> false
       }
     } catch (e: ClassNotFoundException) {
-      null
+      false
     }
 
+    fun buildIfSupported(): ConscryptPlatform? = if (isSupported) ConscryptPlatform() else null
+
     fun atLeastVersion(major: Int, minor: Int = 0, patch: Int = 0): Boolean {
       val conscryptVersion = Conscrypt.version()
 
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/OpenJSSEPlatform.kt b/okhttp/src/main/java/okhttp3/internal/platform/OpenJSSEPlatform.kt
new file mode 100644
index 0000000000..bf80f22120
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/platform/OpenJSSEPlatform.kt
@@ -0,0 +1,100 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform
+
+import okhttp3.Protocol
+import java.security.KeyStore
+import java.security.Provider
+import javax.net.ssl.SSLContext
+import javax.net.ssl.SSLSocket
+import javax.net.ssl.SSLSocketFactory
+import javax.net.ssl.TrustManagerFactory
+import javax.net.ssl.X509TrustManager
+
+/**
+ * Platform using OpenJSSE (https://github.com/openjsse/openjsse) if installed as the first
+ * Security Provider.
+ *
+ * Requires org.openjsse:openjsse >= 1.1.0 on the classpath.
+ */
+class OpenJSSEPlatform private constructor() : Platform() {
+  private val provider: Provider = org.openjsse.net.ssl.OpenJSSE()
+
+  // Selects TLSv1.3 so we are specific about our intended version ranges (not just 1.3)
+  // and because it's a common pattern for VMs to have differences between supported and
+  // defaulted versions for TLS based on what is requested.
+  override fun newSSLContext(): SSLContext =
+      SSLContext.getInstance("TLSv1.3", provider)
+
+  override fun platformTrustManager(): X509TrustManager {
+    val factory = TrustManagerFactory.getInstance(
+        TrustManagerFactory.getDefaultAlgorithm(), provider)
+    factory.init(null as KeyStore?)
+    val trustManagers = factory.trustManagers!!
+    check(trustManagers.size == 1 && trustManagers[0] is X509TrustManager) {
+      "Unexpected default trust managers: ${trustManagers.contentToString()}"
+    }
+    return trustManagers[0] as X509TrustManager
+  }
+
+  public override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? =
+      throw UnsupportedOperationException(
+          "clientBuilder.sslSocketFactory(SSLSocketFactory) not supported with OpenJSSE")
+
+  override fun configureTlsExtensions(
+    sslSocket: SSLSocket,
+    hostname: String?,
+    protocols: List<Protocol>
+  ) {
+    if (sslSocket is org.openjsse.javax.net.ssl.SSLSocket) {
+      val sslParameters = sslSocket.sslParameters
+
+      if (sslParameters is org.openjsse.javax.net.ssl.SSLParameters) {
+        // Enable ALPN.
+        val names = alpnProtocolNames(protocols)
+        sslParameters.applicationProtocols = names.toTypedArray()
+
+        sslSocket.sslParameters = sslParameters
+      }
+    } else {
+      super.configureTlsExtensions(sslSocket, hostname, protocols)
+    }
+  }
+
+  override fun getSelectedProtocol(sslSocket: SSLSocket): String? =
+      if (sslSocket is org.openjsse.javax.net.ssl.SSLSocket) {
+        when (val protocol = sslSocket.applicationProtocol) {
+          // Handles both un-configured and none selected.
+          null, "" -> null
+          else -> protocol
+        }
+      } else {
+        super.getSelectedProtocol(sslSocket)
+      }
+
+  companion object {
+    val isSupported: Boolean = try {
+      // Trigger an early exception over a fatal error, prefer a RuntimeException over Error.
+      Class.forName("org.openjsse.net.ssl.OpenJSSE")
+
+      true
+    } catch (_: ClassNotFoundException) {
+      false
+    }
+
+    fun buildIfSupported(): OpenJSSEPlatform? = if (isSupported) OpenJSSEPlatform() else null
+  }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
index bd86cdaf6c..99607dfa35 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/Platform.kt
@@ -18,6 +18,7 @@ package okhttp3.internal.platform
 
 import okhttp3.OkHttpClient
 import okhttp3.Protocol
+import okhttp3.internal.readFieldOrNull
 import okhttp3.internal.tls.BasicCertificateChainCleaner
 import okhttp3.internal.tls.BasicTrustRootIndex
 import okhttp3.internal.tls.CertificateChainCleaner
@@ -119,7 +120,7 @@ open class Platform {
   }
 
   /** Returns the negotiated protocol, or null if no protocol was negotiated. */
-  open fun getSelectedProtocol(socket: SSLSocket): String? = null
+  open fun getSelectedProtocol(sslSocket: SSLSocket): String? = null
 
   @Throws(IOException::class)
   open fun connectSocket(socket: Socket, address: InetSocketAddress, connectTimeout: Int) {
@@ -193,12 +194,18 @@ open class Platform {
     fun alpnProtocolNames(protocols: List<Protocol>) =
         protocols.filter { it != Protocol.HTTP_1_0 }.map { it.toString() }
 
-    val isConscryptPreferred: Boolean
+    private val isConscryptPreferred: Boolean
       get() {
         val preferredProvider = Security.getProviders()[0].name
         return "Conscrypt" == preferredProvider
       }
 
+    private val isOpenJSSEPreferred: Boolean
+      get() {
+        val preferredProvider = Security.getProviders()[0].name
+        return "OpenJSSE" == preferredProvider
+      }
+
     /** Attempt to match the host runtime to a capable Platform implementation. */
     private fun findPlatform(): Platform {
       val android = AndroidPlatform.buildIfSupported()
@@ -215,6 +222,14 @@ open class Platform {
         }
       }
 
+      if (isOpenJSSEPreferred) {
+        val openJSSE = OpenJSSEPlatform.buildIfSupported()
+
+        if (openJSSE != null) {
+          return openJSSE
+        }
+      }
+
       val jdk9 = Jdk9Platform.buildIfSupported()
 
       if (jdk9 != null) {
@@ -239,29 +254,5 @@ open class Platform {
       }
       return result.readByteArray()
     }
-
-    fun <T> readFieldOrNull(instance: Any, fieldType: Class<T>, fieldName: String): T? {
-      var c: Class<*> = instance.javaClass
-      while (c != Any::class.java) {
-        try {
-          val field = c.getDeclaredField(fieldName)
-          field.isAccessible = true
-          val value = field.get(instance)
-          return if (!fieldType.isInstance(value)) null else fieldType.cast(value)
-        } catch (_: NoSuchFieldException) {
-        }
-
-        c = c.superclass
-      }
-
-      // Didn't find the field we wanted. As a last gasp attempt,
-      // try to find the value on a delegate.
-      if (fieldName != "delegate") {
-        val delegate = readFieldOrNull(instance, Any::class.java, "delegate")
-        if (delegate != null) return readFieldOrNull(delegate, fieldType, fieldName)
-      }
-
-      return null
-    }
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/AndroidSocketAdapter.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/AndroidSocketAdapter.kt
new file mode 100644
index 0000000000..4ac9e4c0cf
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/AndroidSocketAdapter.kt
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform.android
+
+import okhttp3.Protocol
+import okhttp3.internal.platform.AndroidPlatform
+import okhttp3.internal.platform.Platform
+import java.lang.reflect.InvocationTargetException
+import java.lang.reflect.Method
+import java.nio.charset.StandardCharsets
+import javax.net.ssl.SSLSocket
+import javax.net.ssl.SSLSocketFactory
+import javax.net.ssl.X509TrustManager
+
+/**
+ * Modern reflection based SocketAdapter for Conscrypt class SSLSockets.
+ */
+open class AndroidSocketAdapter(private val sslSocketClass: Class<in SSLSocket>) :
+    SocketAdapter {
+  private val setUseSessionTickets: Method =
+      sslSocketClass.getDeclaredMethod("setUseSessionTickets", Boolean::class.javaPrimitiveType)
+  private val setHostname = sslSocketClass.getMethod("setHostname", String::class.java)
+  private val getAlpnSelectedProtocol = sslSocketClass.getMethod("getAlpnSelectedProtocol")
+  private val setAlpnProtocols =
+      sslSocketClass.getMethod("setAlpnProtocols", ByteArray::class.java)
+
+  override fun isSupported(): Boolean = AndroidPlatform.isSupported
+
+  override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? = null
+
+  override fun matchesSocket(sslSocket: SSLSocket): Boolean = sslSocketClass.isInstance(sslSocket)
+
+  override fun matchesSocketFactory(sslSocketFactory: SSLSocketFactory): Boolean = false
+
+  override fun configureTlsExtensions(
+    sslSocket: SSLSocket,
+    hostname: String?,
+    protocols: List<Protocol>
+  ) {
+    // No TLS extensions if the socket class is custom.
+    if (matchesSocket(sslSocket)) {
+      try {
+        // Enable SNI and session tickets.
+        if (hostname != null) {
+          setUseSessionTickets.invoke(sslSocket, true)
+          // This is SSLParameters.setServerNames() in API 24+.
+          setHostname.invoke(sslSocket, hostname)
+        }
+
+        // Enable ALPN.
+        setAlpnProtocols.invoke(sslSocket,
+            Platform.concatLengthPrefixed(protocols))
+      } catch (e: IllegalAccessException) {
+        throw AssertionError(e)
+      } catch (e: InvocationTargetException) {
+        throw AssertionError(e)
+      }
+    }
+  }
+
+  override fun getSelectedProtocol(sslSocket: SSLSocket): String? {
+    // No TLS extensions if the socket class is custom.
+    if (!matchesSocket(sslSocket)) {
+      return null
+    }
+
+    return try {
+      val alpnResult = getAlpnSelectedProtocol.invoke(sslSocket) as ByteArray?
+      if (alpnResult != null) String(alpnResult, StandardCharsets.UTF_8) else null
+    } catch (e: IllegalAccessException) {
+      throw AssertionError(e)
+    } catch (e: InvocationTargetException) {
+      throw AssertionError(e)
+    }
+  }
+
+  companion object {
+    fun buildIfSupported(packageName: String): SocketAdapter? {
+      return try {
+        @Suppress("UNCHECKED_CAST")
+        val sslSocketClass = Class.forName("$packageName.OpenSSLSocketImpl") as Class<in SSLSocket>
+
+        AndroidSocketAdapter(sslSocketClass)
+      } catch (e: Exception) {
+        androidLog(Platform.WARN, "unable to load android socket classes", e)
+        null
+      }
+    }
+  }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/CloseGuard.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/CloseGuard.kt
new file mode 100644
index 0000000000..b3930aafd7
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/CloseGuard.kt
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform.android
+
+import java.lang.reflect.Method
+
+/**
+ * Provides access to the internal dalvik.system.CloseGuard class. Android uses this in
+ * combination with android.os.StrictMode to report on leaked java.io.Closeable's. Available since
+ * Android API 11.
+ */
+internal class CloseGuard(
+  private val getMethod: Method?,
+  private val openMethod: Method?,
+  private val warnIfOpenMethod: Method?
+) {
+
+  fun createAndOpen(closer: String): Any? {
+    if (getMethod != null) {
+      try {
+        val closeGuardInstance = getMethod.invoke(null)
+        openMethod!!.invoke(closeGuardInstance, closer)
+        return closeGuardInstance
+      } catch (_: Exception) {
+      }
+    }
+    return null
+  }
+
+  fun warnIfOpen(closeGuardInstance: Any?): Boolean {
+    var reported = false
+    if (closeGuardInstance != null) {
+      try {
+        warnIfOpenMethod!!.invoke(closeGuardInstance)
+        reported = true
+      } catch (_: Exception) {
+      }
+    }
+    return reported
+  }
+
+  companion object {
+    fun get(): CloseGuard {
+      var getMethod: Method?
+      var openMethod: Method?
+      var warnIfOpenMethod: Method?
+
+      try {
+        val closeGuardClass = Class.forName("dalvik.system.CloseGuard")
+        getMethod = closeGuardClass.getMethod("get")
+        openMethod = closeGuardClass.getMethod("open", String::class.java)
+        warnIfOpenMethod = closeGuardClass.getMethod("warnIfOpen")
+      } catch (_: Exception) {
+        getMethod = null
+        openMethod = null
+        warnIfOpenMethod = null
+      }
+
+      return CloseGuard(getMethod, openMethod, warnIfOpenMethod)
+    }
+  }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/ConscryptSocketAdapter.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/ConscryptSocketAdapter.kt
new file mode 100644
index 0000000000..11f574b544
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/ConscryptSocketAdapter.kt
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform.android
+
+import okhttp3.Protocol
+import okhttp3.internal.platform.ConscryptPlatform
+import okhttp3.internal.platform.Platform
+import org.conscrypt.Conscrypt
+import javax.net.ssl.SSLSocket
+import javax.net.ssl.SSLSocketFactory
+import javax.net.ssl.X509TrustManager
+
+/**
+ * Simple non-reflection SocketAdapter for Conscrypt.
+ */
+object ConscryptSocketAdapter : SocketAdapter {
+  override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? = null
+
+  override fun matchesSocketFactory(sslSocketFactory: SSLSocketFactory): Boolean = false
+
+  override fun matchesSocket(sslSocket: SSLSocket): Boolean = Conscrypt.isConscrypt(sslSocket)
+
+  override fun isSupported(): Boolean = ConscryptPlatform.isSupported
+
+  override fun getSelectedProtocol(sslSocket: SSLSocket): String? =
+      when {
+        matchesSocket(sslSocket) -> Conscrypt.getApplicationProtocol(sslSocket)
+        else -> null // No TLS extensions if the socket class is custom.
+      }
+
+  override fun configureTlsExtensions(
+    sslSocket: SSLSocket,
+    hostname: String?,
+    protocols: List<Protocol>
+  ) {
+    // No TLS extensions if the socket class is custom.
+    if (matchesSocket(sslSocket)) {
+      // Enable SNI and session tickets.
+      if (hostname != null) {
+        Conscrypt.setUseSessionTickets(sslSocket, true)
+        Conscrypt.setHostname(sslSocket, hostname)
+      }
+
+      // Enable ALPN.
+      val names = Platform.alpnProtocolNames(protocols)
+      Conscrypt.setApplicationProtocols(sslSocket, names.toTypedArray())
+    }
+  }
+
+  fun buildIfSupported(): SocketAdapter? =
+      if (ConscryptPlatform.isSupported) ConscryptSocketAdapter else null
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/DeferredSocketAdapter.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/DeferredSocketAdapter.kt
new file mode 100644
index 0000000000..87d1277f2e
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/DeferredSocketAdapter.kt
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform.android
+
+import okhttp3.Protocol
+import okhttp3.internal.platform.Platform
+import javax.net.ssl.SSLSocket
+import javax.net.ssl.SSLSocketFactory
+import javax.net.ssl.X509TrustManager
+
+/**
+ * Deferred implementation of SocketAdapter that can only work by observing the socket
+ * and initializing on first use.
+ */
+class DeferredSocketAdapter(private val socketPackage: String) : SocketAdapter {
+  private var initialized = false
+  private var delegate: SocketAdapter? = null
+
+  override fun isSupported(): Boolean {
+    return true
+  }
+
+  override fun matchesSocket(sslSocket: SSLSocket): Boolean {
+    return sslSocket.javaClass.name.startsWith(socketPackage)
+  }
+
+  override fun configureTlsExtensions(
+    sslSocket: SSLSocket,
+    hostname: String?,
+    protocols: List<Protocol>
+  ) {
+    getDelegate(sslSocket)?.configureTlsExtensions(sslSocket, hostname, protocols)
+  }
+
+  override fun getSelectedProtocol(sslSocket: SSLSocket): String? {
+    return getDelegate(sslSocket)?.getSelectedProtocol(sslSocket)
+  }
+
+  @Synchronized private fun getDelegate(actualSSLSocketClass: SSLSocket): SocketAdapter? {
+    if (!initialized) {
+      try {
+        var possibleClass: Class<in SSLSocket> = actualSSLSocketClass.javaClass
+        while (possibleClass.name != "$socketPackage.OpenSSLSocketImpl") {
+          possibleClass = possibleClass.superclass
+
+          if (possibleClass == null) {
+            throw AssertionError(
+                "No OpenSSLSocketImpl superclass of socket of type $actualSSLSocketClass")
+          }
+        }
+
+        delegate = AndroidSocketAdapter(possibleClass)
+      } catch (e: Exception) {
+        Platform.get()
+            .log(Platform.WARN, "Failed to initialize DeferredSocketAdapter $socketPackage", e)
+      }
+
+      initialized = true
+    }
+
+    return delegate
+  }
+
+  override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? {
+    // not supported with modern Android and opt-in Gms Provider
+    return null
+  }
+
+  override fun matchesSocketFactory(sslSocketFactory: SSLSocketFactory): Boolean {
+    return false
+  }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/SocketAdapter.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/SocketAdapter.kt
new file mode 100644
index 0000000000..5555f1c695
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/SocketAdapter.kt
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform.android
+
+import okhttp3.Protocol
+import javax.net.ssl.SSLSocket
+import javax.net.ssl.SSLSocketFactory
+import javax.net.ssl.X509TrustManager
+
+interface SocketAdapter {
+  open fun isSupported(): Boolean
+  fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager?
+  fun matchesSocket(sslSocket: SSLSocket): Boolean
+  fun matchesSocketFactory(sslSocketFactory: SSLSocketFactory): Boolean
+
+  open fun configureTlsExtensions(
+    sslSocket: SSLSocket,
+    hostname: String?,
+    protocols: List<Protocol>
+  )
+
+  open fun getSelectedProtocol(sslSocket: SSLSocket): String?
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/StandardAndroidSocketAdapter.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/StandardAndroidSocketAdapter.kt
new file mode 100644
index 0000000000..4974b23080
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/StandardAndroidSocketAdapter.kt
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform.android
+
+import okhttp3.internal.platform.Platform
+import okhttp3.internal.readFieldOrNull
+import javax.net.ssl.SSLSocket
+import javax.net.ssl.SSLSocketFactory
+import javax.net.ssl.X509TrustManager
+
+/**
+ * Base Android reflection based SocketAdapter for the built in Android SSLSocket.
+ */
+class StandardAndroidSocketAdapter(
+  sslSocketClass: Class<in SSLSocket>,
+  private val sslSocketFactoryClass: Class<in SSLSocketFactory>,
+  private val paramClass: Class<*>
+) : AndroidSocketAdapter(
+    sslSocketClass) {
+
+  override fun matchesSocketFactory(sslSocketFactory: SSLSocketFactory): Boolean =
+      sslSocketFactoryClass.isInstance(sslSocketFactory)
+
+  override fun trustManager(sslSocketFactory: SSLSocketFactory): X509TrustManager? {
+    val context: Any? =
+        readFieldOrNull(sslSocketFactory, paramClass,
+            "sslParameters")
+    val x509TrustManager = readFieldOrNull(
+        context!!, X509TrustManager::class.java, "x509TrustManager")
+    return x509TrustManager ?: readFieldOrNull(context,
+        X509TrustManager::class.java,
+        "trustManager")
+  }
+
+  companion object {
+    @Suppress("UNCHECKED_CAST")
+    fun buildIfSupported(packageName: String = "com.android.org.conscrypt"): SocketAdapter? {
+      return try {
+        val sslSocketClass = Class.forName("$packageName.OpenSSLSocketImpl") as Class<in SSLSocket>
+        val sslSocketFactoryClass =
+            Class.forName("$packageName.OpenSSLSocketFactoryImpl") as Class<in SSLSocketFactory>
+        val paramsClass = Class.forName("$packageName.SSLParametersImpl")
+
+        StandardAndroidSocketAdapter(sslSocketClass, sslSocketFactoryClass, paramsClass)
+      } catch (e: Exception) {
+        androidLog(Platform.WARN, "unable to load android socket classes", e)
+        null
+      }
+    }
+  }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/util.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/util.kt
new file mode 100644
index 0000000000..4a3bf12e42
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/util.kt
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform.android
+
+import android.util.Log
+import okhttp3.internal.platform.Platform
+
+private const val MAX_LOG_LENGTH = 4000
+
+internal fun androidLog(level: Int, message: String, t: Throwable?) {
+  var logMessage = message
+  val logLevel = if (level == Platform.WARN) Log.WARN else Log.DEBUG
+  if (t != null) logMessage = logMessage + '\n'.toString() + Log.getStackTraceString(t)
+
+  // Split by line, then ensure each line can fit into Log's maximum length.
+  var i = 0
+  val length = logMessage.length
+  while (i < length) {
+    var newline = logMessage.indexOf('\n', i)
+    newline = if (newline != -1) newline else length
+    do {
+      val end = minOf(newline, i + MAX_LOG_LENGTH)
+      Log.println(logLevel, "OkHttp", logMessage.substring(i, end))
+      i = end
+    } while (i < newline)
+    i++
+  }
+}
\ No newline at end of file
diff --git a/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.kt b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.kt
index f6c3afcb34..df3ee9b1c4 100644
--- a/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.kt
+++ b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.kt
@@ -29,6 +29,7 @@ import javax.net.ssl.SSLSession
  *
  * [rfc_2818]: http://www.ietf.org/rfc/rfc2818.txt
  */
+@Suppress("NAME_SHADOWING")
 object OkHostnameVerifier : HostnameVerifier {
   private const val ALT_DNS_NAME = 2
   private const val ALT_IPA_NAME = 7
diff --git a/okhttp/src/test/java/okhttp3/CacheTest.java b/okhttp/src/test/java/okhttp3/CacheTest.java
index 02fb43cd4c..29090ec1a2 100644
--- a/okhttp/src/test/java/okhttp3/CacheTest.java
+++ b/okhttp/src/test/java/okhttp3/CacheTest.java
@@ -40,6 +40,7 @@
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
+import okhttp3.testing.PlatformRule;
 import okhttp3.tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
@@ -65,6 +66,7 @@
   @Rule public MockWebServer server2 = new MockWebServer();
   @Rule public InMemoryFileSystem fileSystem = new InMemoryFileSystem();
   @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
+  @Rule public final PlatformRule platform = new PlatformRule();
 
   private final HandshakeCertificates handshakeCertificates = localhost();
   private OkHttpClient client;
@@ -72,6 +74,8 @@
   private final CookieManager cookieManager = new CookieManager();
 
   @Before public void setUp() throws Exception {
+    platform.assumeNotOpenJSSE();
+
     server.setProtocolNegotiationEnabled(false);
     cache = new Cache(new File("/cache/"), Integer.MAX_VALUE, fileSystem);
     client = clientTestRule.newClientBuilder()
@@ -82,7 +86,10 @@
 
   @After public void tearDown() throws Exception {
     ResponseCache.setDefault(null);
-    cache.delete();
+
+    if (cache != null) {
+      cache.delete();
+    }
   }
 
   /**
@@ -2449,6 +2456,34 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
     assertThat(server.takeRequest().getHeader("If-None-Match")).isEqualTo("α");
   }
 
+  @Test public void conditionalHitHeadersCombined() throws Exception {
+    server.enqueue(new MockResponse()
+        .addHeader("Etag", "a")
+        .addHeader("Cache-Control: max-age=0")
+        .addHeader("A: a1")
+        .addHeader("B: b2")
+        .addHeader("B: b3")
+        .setBody("abcd"));
+    server.enqueue(new MockResponse()
+        .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED)
+        .addHeader("B: b4")
+        .addHeader("B: b5")
+        .addHeader("C: c6"));
+
+    Response response1 = get(server.url("/"));
+    assertThat(response1.body().string()).isEqualTo("abcd");
+    assertThat(response1.headers()).isEqualTo(Headers.of("Etag", "a", "Cache-Control", "max-age=0",
+        "A", "a1", "B", "b2", "B", "b3", "Content-Length", "4"));
+
+    // The original 'A' header is retained because the network response doesn't have one.
+    // The original 'B' headers are replaced by the network response.
+    // The network's 'C' header is added.
+    Response response2 = get(server.url("/"));
+    assertThat(response2.body().string()).isEqualTo("abcd");
+    assertThat(response2.headers()).isEqualTo(Headers.of("Etag", "a", "Cache-Control", "max-age=0",
+        "A", "a1", "Content-Length", "4", "B", "b4", "B", "b5", "C", "c6"));
+  }
+
   private Response get(HttpUrl url) throws IOException {
     Request request = new Request.Builder()
         .url(url)
diff --git a/okhttp/src/test/java/okhttp3/CallTest.java b/okhttp/src/test/java/okhttp3/CallTest.java
index 2d95ed4dbd..cfe907a53b 100644
--- a/okhttp/src/test/java/okhttp3/CallTest.java
+++ b/okhttp/src/test/java/okhttp3/CallTest.java
@@ -117,6 +117,8 @@
   private Logger logger = Logger.getLogger(OkHttpClient.class.getName());
 
   @Before public void setUp() {
+    platform.assumeNotOpenJSSE();
+
     logger.addHandler(logHandler);
     client = clientTestRule.newClientBuilder()
         .eventListener(listener)
diff --git a/okhttp/src/test/java/okhttp3/CertificatePinnerKotlinTest.kt b/okhttp/src/test/java/okhttp3/CertificatePinnerKotlinTest.kt
index 2ecf967259..8de9cea1de 100644
--- a/okhttp/src/test/java/okhttp3/CertificatePinnerKotlinTest.kt
+++ b/okhttp/src/test/java/okhttp3/CertificatePinnerKotlinTest.kt
@@ -29,7 +29,7 @@ class CertificatePinnerKotlinTest {
         .add("example.com", "sha1/" + certA1.certificate.toSha1ByteString().base64())
         .build()
 
-    certificatePinner.check("example.com", certA1.certificate)
+    certificatePinner.check("example.com", listOf(certA1.certificate))
   }
 
   @Test fun successfulFindMatchingPins() {
diff --git a/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java b/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
index 0752e91759..0895bbe11c 100644
--- a/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
+++ b/okhttp/src/test/java/okhttp3/ConnectionCoalescingTest.java
@@ -21,6 +21,7 @@
 import java.net.Proxy;
 import java.util.Collections;
 import java.util.List;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import javax.net.ssl.HostnameVerifier;
@@ -30,7 +31,6 @@
 import okhttp3.tls.HandshakeCertificates;
 import okhttp3.tls.HeldCertificate;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -152,6 +152,107 @@
     assertThat(client.connectionPool().connectionCount()).isEqualTo(1);
   }
 
+  /**
+   * This is an extraordinary test case. Here's what it's trying to simulate.
+   * - 2 requests happen concurrently to a host that can be coalesced onto a single connection.
+   * - Both request discover no existing connection. They both make a connection.
+   * - The first request "wins the race".
+   * - The second request discovers it "lost the race" and closes the connection it just opened.
+   * - The second request uses the coalesced connection from request1.
+   * - The coalesced connection is violently closed after servicing the first request.
+   * - The second request discovers the coalesced connection is unhealthy just after acquiring it.
+   */
+  @Test public void coalescedConnectionDestroyedAfterAcquire() throws Exception {
+    server.enqueue(new MockResponse().setResponseCode(200));
+    server.enqueue(new MockResponse().setResponseCode(200));
+
+    dns.set("san.com", Dns.SYSTEM.lookup(server.getHostName()).subList(0, 1));
+    HttpUrl sanUrl = url.newBuilder().host("san.com").build();
+
+    CountDownLatch latch1 = new CountDownLatch(1);
+    CountDownLatch latch2 = new CountDownLatch(1);
+    CountDownLatch latch3 = new CountDownLatch(1);
+    CountDownLatch latch4 = new CountDownLatch(1);
+    EventListener listener1 = new EventListener() {
+      @Override public void connectStart(Call call, InetSocketAddress inetSocketAddress,
+          Proxy proxy) {
+        try {
+          // Wait for request2 to guarantee we make 2 separate connections to the server.
+          latch1.await();
+        } catch (InterruptedException e) {
+          throw new AssertionError(e);
+        }
+      }
+
+      @Override public void connectionAcquired(Call call, Connection connection) {
+        // We have the connection and it's in the pool. Let request2 proceed to make a connection.
+        latch2.countDown();
+      }
+    };
+
+    EventListener request2Listener = new EventListener() {
+      @Override public void connectStart(Call call, InetSocketAddress inetSocketAddress,
+          Proxy proxy) {
+        // Let request1 proceed to make a connection.
+        latch1.countDown();
+        try {
+          // Wait until request1 makes the connection and puts it in the connection pool.
+          latch2.await();
+        } catch (InterruptedException e) {
+          throw new AssertionError(e);
+        }
+      }
+
+      @Override public void connectionAcquired(Call call, Connection connection) {
+        // We obtained the coalesced connection. Let request1 violently destroy it.
+        latch3.countDown();
+        try {
+          latch4.await();
+        } catch (InterruptedException e) {
+          throw new AssertionError(e);
+        }
+      }
+    };
+
+    // Get a reference to the connection so we can violently destroy it.
+    AtomicReference<Connection> connection = new AtomicReference<>();
+    OkHttpClient client1 = client.newBuilder()
+        .addNetworkInterceptor(chain -> {
+          connection.set(chain.connection());
+          return chain.proceed(chain.request());
+        })
+        .eventListener(listener1)
+        .build();
+
+    Request request = new Request.Builder().url(sanUrl).build();
+    Call call1 = client1.newCall(request);
+    call1.enqueue(new Callback() {
+      @Override public void onResponse(Call call, Response response) throws IOException {
+        try {
+          // Wait until request2 acquires the connection before we destroy it violently.
+          latch3.await();
+        } catch (InterruptedException e) {
+          throw new AssertionError(e);
+        }
+        assert200Http2Response(response, "san.com");
+        connection.get().socket().close();
+        latch4.countDown();
+      }
+
+      @Override public void onFailure(Call call, IOException e) {
+        fail();
+      }
+    });
+
+    OkHttpClient client2 = client.newBuilder()
+        .eventListener(request2Listener)
+        .build();
+    Call call2 = client2.newCall(request);
+    Response response = call2.execute();
+
+    assert200Http2Response(response, "san.com");
+  }
+
   /** If the existing connection matches a SAN but not a match for DNS then skip. */
   @Test public void skipsWhenDnsDontMatch() throws Exception {
     server.enqueue(new MockResponse().setResponseCode(200));
@@ -302,10 +403,6 @@
     assertThat(client.connectionPool().connectionCount()).isEqualTo(1);
   }
 
-  private Response execute(String url) throws IOException {
-    return execute(HttpUrl.get(url));
-  }
-
   private Response execute(HttpUrl url) throws IOException {
     return client.newCall(new Request.Builder().url(url).build()).execute();
   }
diff --git a/okhttp/src/test/java/okhttp3/ConnectionSpecTest.java b/okhttp/src/test/java/okhttp3/ConnectionSpecTest.java
index 3db42c5b81..6663416032 100644
--- a/okhttp/src/test/java/okhttp3/ConnectionSpecTest.java
+++ b/okhttp/src/test/java/okhttp3/ConnectionSpecTest.java
@@ -284,6 +284,8 @@
     assertThat(set.add(ConnectionSpec.CLEARTEXT)).isTrue();
     assertThat(set.add(allTlsVersions)).isTrue();
     assertThat(set.add(allCipherSuites)).isTrue();
+    allCipherSuites.hashCode();
+    assertThat(allCipherSuites.equals(null)).isFalse();
 
     assertThat(set.remove(ConnectionSpec.MODERN_TLS)).isTrue();
     assertThat(set.remove(ConnectionSpec.COMPATIBLE_TLS)).isTrue();
@@ -291,6 +293,8 @@
     assertThat(set.remove(allTlsVersions)).isTrue();
     assertThat(set.remove(allCipherSuites)).isTrue();
     assertThat(set).isEmpty();
+    allTlsVersions.hashCode();
+    assertThat(allTlsVersions.equals(null)).isFalse();
   }
 
   @Test public void allEnabledToString() throws Exception {
diff --git a/okhttp/src/test/java/okhttp3/ConscryptTest.kt b/okhttp/src/test/java/okhttp3/ConscryptTest.kt
index 54b9af9fc6..47381de1d0 100644
--- a/okhttp/src/test/java/okhttp3/ConscryptTest.kt
+++ b/okhttp/src/test/java/okhttp3/ConscryptTest.kt
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2014 Square, Inc.
+ * Copyright (C) 2018 Square, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,6 +15,7 @@
  */
 package okhttp3
 
+import okhttp3.TestUtil.assumeNetwork
 import okhttp3.internal.platform.ConscryptPlatform
 import okhttp3.internal.platform.Platform
 import okhttp3.testing.PlatformRule
@@ -22,13 +23,10 @@ import org.assertj.core.api.Assertions.assertThat
 import org.conscrypt.Conscrypt
 import org.junit.Assert.assertFalse
 import org.junit.Assert.assertTrue
-import org.junit.Assume
 import org.junit.Before
 import org.junit.Ignore
 import org.junit.Rule
 import org.junit.Test
-import java.net.InetAddress
-import java.net.UnknownHostException
 
 class ConscryptTest {
   @Suppress("RedundantVisibilityModifier")
@@ -49,14 +47,6 @@ class ConscryptTest {
     assertThat(Conscrypt.isConscrypt(Platform.get().platformTrustManager())).isTrue()
   }
 
-  private fun assumeNetwork() {
-    try {
-      InetAddress.getByName("www.google.com")
-    } catch (uhe: UnknownHostException) {
-      Assume.assumeNoException(uhe)
-    }
-  }
-
   @Test
   @Ignore
   fun testMozilla() {
@@ -94,12 +84,14 @@ class ConscryptTest {
 
   @Test
   fun testVersion() {
+    val version = Conscrypt.version()
+
     assertTrue(ConscryptPlatform.atLeastVersion(1, 4, 9))
-    assertTrue(ConscryptPlatform.atLeastVersion(2))
-    assertTrue(ConscryptPlatform.atLeastVersion(2, 1))
-    assertTrue(ConscryptPlatform.atLeastVersion(2, 1, 0))
-    assertFalse(ConscryptPlatform.atLeastVersion(2, 1, 1))
-    assertFalse(ConscryptPlatform.atLeastVersion(2, 2))
-    assertFalse(ConscryptPlatform.atLeastVersion(9))
+    assertTrue(ConscryptPlatform.atLeastVersion(version.major()))
+    assertTrue(ConscryptPlatform.atLeastVersion(version.major(), version.minor()))
+    assertTrue(ConscryptPlatform.atLeastVersion(version.major(), version.minor(), version.patch()))
+    assertFalse(ConscryptPlatform.atLeastVersion(version.major(), version.minor(), version.patch() + 1))
+    assertFalse(ConscryptPlatform.atLeastVersion(version.major(), version.minor() + 1))
+    assertFalse(ConscryptPlatform.atLeastVersion(version.major() + 1))
   }
 }
diff --git a/okhttp/src/test/java/okhttp3/DuplexTest.java b/okhttp/src/test/java/okhttp3/DuplexTest.java
index ad2b919bdb..7453035a96 100644
--- a/okhttp/src/test/java/okhttp3/DuplexTest.java
+++ b/okhttp/src/test/java/okhttp3/DuplexTest.java
@@ -54,6 +54,7 @@
   private OkHttpClient client;
 
   @Before public void setUp() {
+    platform.assumeNotOpenJSSE();
     platform.assumeHttp2Support();
     client = clientTestRule.newClientBuilder()
         .eventListener(listener)
@@ -242,7 +243,7 @@
     mockDuplexResponseBody.awaitSuccess();
 
     assertThat(listener.recordedEventTypes()).containsExactly(
-        "CallStart", "DnsStart", "DnsEnd", "ConnectStart",
+        "CallStart", "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd", "ConnectStart",
         "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",
         "RequestHeadersStart", "RequestHeadersEnd", "RequestBodyStart", "ResponseHeadersStart",
         "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "RequestBodyEnd",
@@ -342,7 +343,7 @@
     mockDuplexResponseBody.awaitSuccess();
 
     assertThat(listener.recordedEventTypes()).containsExactly(
-        "CallStart", "DnsStart", "DnsEnd", "ConnectStart",
+        "CallStart", "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd", "ConnectStart",
         "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",
         "RequestHeadersStart", "RequestHeadersEnd", "RequestBodyStart", "ResponseHeadersStart",
         "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "RequestHeadersStart",
diff --git a/okhttp/src/test/java/okhttp3/EventListenerTest.java b/okhttp/src/test/java/okhttp3/EventListenerTest.java
index ea87cf7c9e..d5f23f6031 100644
--- a/okhttp/src/test/java/okhttp3/EventListenerTest.java
+++ b/okhttp/src/test/java/okhttp3/EventListenerTest.java
@@ -86,6 +86,8 @@
   private SocksProxy socksProxy;
 
   @Before public void setUp() {
+    platform.assumeNotOpenJSSE();
+
     client = clientTestRule.newClientBuilder()
         .eventListener(listener)
         .build();
@@ -112,7 +114,8 @@
     assertThat(response.body().string()).isEqualTo("abc");
     response.body().close();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
@@ -142,7 +145,8 @@
 
     completionLatch.await();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
@@ -163,7 +167,8 @@
       assertThat(expected.getMessage()).isIn("timeout", "Read timed out");
     }
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseFailed", "ConnectionReleased",
         "CallFailed");
@@ -191,7 +196,8 @@
       assertThat(expected.getMessage()).isEqualTo("unexpected end of stream");
     }
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseFailed", "ConnectionReleased", "CallFailed");
@@ -211,7 +217,8 @@
       assertThat(expected.getMessage()).isEqualTo("Canceled");
     }
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "CallFailed");
+    assertThat(listener.recordedEventTypes())
+        .containsExactly("CallStart", "ProxySelectStart", "ProxySelectEnd", "CallFailed");
   }
 
   private void assertSuccessfulEventOrder(Matcher<Response> responseMatcher) throws IOException {
@@ -226,7 +233,8 @@ private void assertSuccessfulEventOrder(Matcher<Response> responseMatcher) throw
     assumeThat(response, responseMatcher);
 
     assertThat(listener.recordedEventTypes()).containsExactly(
-        "CallStart", "DnsStart", "DnsEnd", "ConnectStart",
+        "CallStart", "ProxySelectStart", "ProxySelectEnd",
+        "DnsStart", "DnsEnd", "ConnectStart",
         "SecureConnectStart", "SecureConnectEnd", "ConnectEnd", "ConnectionAcquired",
         "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",
         "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
@@ -250,7 +258,8 @@ private void assertSuccessfulEventOrder(Matcher<Response> responseMatcher) throw
     Response response = call.execute();
     response.close();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "ConnectionAcquired",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "ConnectionAcquired",
         "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",
         "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
   }
@@ -911,7 +920,8 @@ private void responseBodyFail(Protocol expectedProtocol) throws IOException {
     Response response = call.execute();
     response.body().close();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
@@ -928,7 +938,8 @@ private void responseBodyFail(Protocol expectedProtocol) throws IOException {
     Response response = call.execute();
     response.body().close();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
@@ -946,7 +957,8 @@ private void responseBodyFail(Protocol expectedProtocol) throws IOException {
     Response response = call.execute();
     response.body().close();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
@@ -1068,7 +1080,7 @@ private void writeChunk(BufferedSink sink) throws IOException {
     }
 
     assertThat(listener.recordedEventTypes()).containsExactly(
-        "CallStart", "DnsStart", "DnsEnd", "ConnectStart",
+        "CallStart", "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd", "ConnectStart",
         "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",
         "RequestBodyStart", "RequestFailed", "ConnectionReleased", "CallFailed");
   }
@@ -1129,7 +1141,8 @@ private void writeChunk(BufferedSink sink) throws IOException {
     assertThat(response.body().string()).isEqualTo("abc");
     response.body().close();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
@@ -1169,7 +1182,8 @@ private void enableTlsWithTunnel(boolean tunnelProxy) {
     Call call = client.newCall(new Request.Builder().url(server.url("/")).build());
     call.execute();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseBodyEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",
@@ -1189,10 +1203,12 @@ public void redirectUsingNewConnectionEventSequence() throws IOException {
     Call call = client.newCall(new Request.Builder().url(server.url("/")).build());
     call.execute();
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
-        "ResponseBodyEnd", "ConnectionReleased", "DnsStart", "DnsEnd", "ConnectStart", "ConnectEnd",
+        "ResponseBodyEnd", "ConnectionReleased", "ProxySelectStart", "ProxySelectEnd",
+        "DnsStart", "DnsEnd", "ConnectStart", "ConnectEnd",
         "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",
         "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",
         "CallEnd");
@@ -1215,7 +1231,8 @@ public void redirectUsingNewConnectionEventSequence() throws IOException {
     Response response = call.execute();
     assertThat(response.body().string()).isEqualTo("b");
 
-    assertThat(listener.recordedEventTypes()).containsExactly("CallStart", "DnsStart", "DnsEnd",
+    assertThat(listener.recordedEventTypes()).containsExactly("CallStart",
+        "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
         "ConnectStart", "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
         "ResponseBodyEnd", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",
@@ -1259,7 +1276,7 @@ public void redirectUsingNewConnectionEventSequence() throws IOException {
     call.execute();
 
     assertThat(listener.recordedEventTypes()).containsExactly(
-        "CallStart", "DnsStart", "DnsEnd", "ConnectStart",
+        "CallStart", "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd", "ConnectStart",
         "ConnectEnd", "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd",
         "ResponseHeadersStart", "RequestBodyStart", "RequestBodyEnd", "ResponseHeadersEnd",
         "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased", "CallEnd");
diff --git a/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt b/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
index 49ed238178..36d1da59b5 100644
--- a/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
+++ b/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
@@ -90,7 +90,8 @@ import javax.net.ssl.X509TrustManager
     "UNUSED_VARIABLE",
     "VARIABLE_WITH_REDUNDANT_INITIALIZER",
     "RedundantLambdaArrow",
-    "RedundantExplicitType"
+    "RedundantExplicitType",
+    "IMPLICIT_NOTHING_AS_TYPE_PARAMETER"
 )
 class KotlinSourceModernTest {
   @Test @Ignore
@@ -256,7 +257,6 @@ class KotlinSourceModernTest {
     builder = builder.allEnabledTlsVersions()
     builder = builder.tlsVersions(TlsVersion.TLS_1_3)
     builder = builder.tlsVersions("", "")
-    builder = builder.supportsTlsExtensions(false)
     val connectionSpec: ConnectionSpec = builder.build()
   }
 
@@ -480,7 +480,6 @@ class KotlinSourceModernTest {
     interceptor = HttpLoggingInterceptor(HttpLoggingInterceptor.Logger.DEFAULT)
     interceptor.redactHeader("")
     interceptor.level = HttpLoggingInterceptor.Level.BASIC
-    interceptor.setLevel(HttpLoggingInterceptor.Level.BASIC)
     var level: HttpLoggingInterceptor.Level = interceptor.level
     interceptor.intercept(newInterceptorChain())
   }
diff --git a/okhttp/src/test/java/okhttp3/OkHttpClientTest.java b/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
index c104635f0e..1e4c4b84c4 100644
--- a/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
+++ b/okhttp/src/test/java/okhttp3/OkHttpClientTest.java
@@ -17,6 +17,7 @@
 
 import java.net.CookieHandler;
 import java.net.CookieManager;
+import java.net.Proxy;
 import java.net.ProxySelector;
 import java.net.ResponseCache;
 import java.util.AbstractList;
@@ -24,6 +25,7 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import javax.net.ssl.SSLSocketFactory;
+import okhttp3.internal.proxy.NullProxySelector;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import org.junit.After;
@@ -117,12 +119,14 @@
     assertThat(a.dispatcher()).isNotNull();
     assertThat(a.connectionPool()).isNotNull();
     assertThat(a.sslSocketFactory()).isNotNull();
+    assertThat(a.x509TrustManager()).isNotNull();
 
     // Multiple clients share the instances.
     OkHttpClient b = client.newBuilder().build();
     assertThat(b.dispatcher()).isSameAs(a.dispatcher());
     assertThat(b.connectionPool()).isSameAs(a.connectionPool());
     assertThat(b.sslSocketFactory()).isSameAs(a.sslSocketFactory());
+    assertThat(b.x509TrustManager()).isSameAs(a.x509TrustManager());
   }
 
   @Test public void setProtocolsRejectsHttp10() throws Exception {
@@ -283,4 +287,18 @@
       assertThat(expected.getMessage()).isEqualTo(("protocols must not contain null"));
     }
   }
+
+  @Test public void testProxyDefaults() {
+    OkHttpClient client = new OkHttpClient.Builder().build();
+    assertThat(client.proxy()).isNull();
+    assertThat(client.proxySelector()).isNotInstanceOf(NullProxySelector.class);
+
+    client = new OkHttpClient.Builder().proxy(Proxy.NO_PROXY).build();
+    assertThat(client.proxy()).isSameAs(Proxy.NO_PROXY);
+    assertThat(client.proxySelector()).isInstanceOf(NullProxySelector.class);
+
+    client = new OkHttpClient.Builder().proxySelector(new FakeProxySelector()).build();
+    assertThat(client.proxy()).isNull();
+    assertThat(client.proxySelector()).isInstanceOf(FakeProxySelector.class);
+  }
 }
diff --git a/okhttp/src/test/java/okhttp3/OpenJSSETest.kt b/okhttp/src/test/java/okhttp3/OpenJSSETest.kt
new file mode 100644
index 0000000000..a992435760
--- /dev/null
+++ b/okhttp/src/test/java/okhttp3/OpenJSSETest.kt
@@ -0,0 +1,112 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3
+
+import okhttp3.TestUtil.assumeNetwork
+import okhttp3.internal.platform.OpenJSSEPlatform
+import okhttp3.mockwebserver.MockResponse
+import okhttp3.mockwebserver.MockWebServer
+import okhttp3.testing.PlatformRule
+import okhttp3.tls.HandshakeCertificates
+import okhttp3.tls.HeldCertificate
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Assert.assertEquals
+import org.junit.Before
+import org.junit.Ignore
+import org.junit.Rule
+import org.junit.Test
+import org.openjsse.sun.security.ssl.SSLSocketFactoryImpl
+import org.openjsse.sun.security.ssl.SSLSocketImpl
+import java.net.InetAddress
+
+class OpenJSSETest {
+  @JvmField @Rule var platform = PlatformRule()
+  @JvmField @Rule val clientTestRule = OkHttpClientTestRule()
+  @JvmField @Rule val server = MockWebServer()
+  lateinit var client: OkHttpClient
+
+  @Before
+  fun setUp() {
+    platform.assumeOpenJSSE()
+
+    client = clientTestRule.newClient()
+  }
+
+  @Test
+  fun testTlsv13Works() {
+    enableTls()
+
+    server.enqueue(MockResponse().setBody("abc"))
+
+    val request = Request.Builder().url(server.url("/")).build()
+
+    val response = client.newCall(request).execute()
+
+    response.use {
+      assertEquals(200, response.code)
+      assertEquals(TlsVersion.TLS_1_3, response.handshake?.tlsVersion)
+      assertEquals(Protocol.HTTP_2, response.protocol)
+
+      assertThat(response.exchange?.connection()?.socket()).isInstanceOf(SSLSocketImpl::class.java)
+    }
+  }
+
+  @Test
+  fun testSupportedProtocols() {
+    val factory = SSLSocketFactoryImpl()
+    val s = factory.createSocket() as SSLSocketImpl
+
+    assertEquals(listOf("TLSv1.3", "TLSv1.2", "TLSv1.1", "TLSv1"), s.enabledProtocols.toList())
+  }
+
+  @Test
+  @Ignore
+  fun testMozilla() {
+    assumeNetwork()
+
+    val request = Request.Builder().url("https://mozilla.org/robots.txt").build()
+
+    client.newCall(request).execute().use {
+      assertThat(it.protocol).isEqualTo(Protocol.HTTP_2)
+      assertThat(it.handshake!!.tlsVersion).isEqualTo(TlsVersion.TLS_1_3)
+    }
+  }
+
+  @Test
+  fun testBuildIfSupported() {
+    val actual = OpenJSSEPlatform.buildIfSupported()
+    assertThat(actual).isNotNull
+  }
+
+  private fun enableTls() {
+    // Generate a self-signed cert for the server to serve and the client to trust.
+    // can't use TlsUtil.localhost with a non OpenJSSE trust manager
+    val heldCertificate = HeldCertificate.Builder()
+        .commonName("localhost")
+        .addSubjectAlternativeName(InetAddress.getByName("localhost").canonicalHostName)
+        .build()
+    val handshakeCertificates = HandshakeCertificates.Builder()
+        .heldCertificate(heldCertificate)
+        .addTrustedCertificate(heldCertificate.certificate)
+        .build()
+
+    client = client.newBuilder()
+        .sslSocketFactory(
+            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager)
+        .build()
+    server.useHttps(handshakeCertificates.sslSocketFactory(), false)
+  }
+}
\ No newline at end of file
diff --git a/okhttp/src/test/java/okhttp3/URLConnectionTest.java b/okhttp/src/test/java/okhttp3/URLConnectionTest.java
index 0d09236762..656122295c 100644
--- a/okhttp/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp/src/test/java/okhttp3/URLConnectionTest.java
@@ -68,6 +68,7 @@
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
 import okhttp3.mockwebserver.SocketPolicy;
+import okhttp3.testing.Flaky;
 import okhttp3.testing.PlatformRule;
 import okhttp3.tls.HandshakeCertificates;
 import okio.Buffer;
@@ -100,10 +101,8 @@
 import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_INPUT_AT_END;
 import static okhttp3.mockwebserver.SocketPolicy.SHUTDOWN_OUTPUT_AT_END;
 import static okhttp3.mockwebserver.SocketPolicy.UPGRADE_TO_SSL_AT_END;
-import static okhttp3.testing.PlatformRule.CONSCRYPT_PROPERTY;
 import static okhttp3.tls.internal.TlsUtil.localhost;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.hamcrest.CoreMatchers.anything;
 import static org.junit.Assert.fail;
 
 /** Android's URLConnectionTest, ported to exercise OkHttp's Call API. */
@@ -687,8 +686,9 @@ private void connectViaHttpsReusingConnections(boolean rebuildClient) throws Exc
    *
    * http://code.google.com/p/android/issues/detail?id=13178
    */
+  @Flaky
   @Test public void connectViaHttpsToUntrustedServer() throws Exception {
-    // https://github.com/square/okhttp/issues/5222
+    // Flaky https://github.com/square/okhttp/issues/5222
 
     server.useHttps(handshakeCertificates.sslSocketFactory(), false);
     server.enqueue(new MockResponse()); // unused
@@ -697,7 +697,10 @@ private void connectViaHttpsReusingConnections(boolean rebuildClient) throws Exc
       getResponse(newRequest("/foo"));
       fail();
     } catch (SSLHandshakeException expected) {
-      assertThat(expected.getCause()).isInstanceOf(CertificateException.class);
+      // Allow conscrypt to fail in different ways
+      if (!platform.isConscrypt()) {
+        assertThat(expected.getCause()).isInstanceOf(CertificateException.class);
+      }
     }
     assertThat(server.getRequestCount()).isEqualTo(0);
   }
diff --git a/okhttp/src/test/java/okhttp3/WholeOperationTimeoutTest.java b/okhttp/src/test/java/okhttp3/WholeOperationTimeoutTest.java
index 3e175f8174..bf8b54343a 100644
--- a/okhttp/src/test/java/okhttp3/WholeOperationTimeoutTest.java
+++ b/okhttp/src/test/java/okhttp3/WholeOperationTimeoutTest.java
@@ -23,6 +23,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.testing.Flaky;
 import okio.BufferedSink;
 import org.junit.Before;
 import org.junit.Rule;
@@ -286,7 +287,10 @@ public void timeoutFollowingRedirectOnNewConnection() throws Exception {
     }
   }
 
+  @Flaky
   @Test public void noTimeout() throws Exception {
+    // Flaky https://github.com/square/okhttp/issues/5304
+
     server.enqueue(new MockResponse()
         .setHeadersDelay(250, TimeUnit.MILLISECONDS)
         .setBody(BIG_ENOUGH_BODY));
@@ -297,7 +301,7 @@ public void timeoutFollowingRedirectOnNewConnection() throws Exception {
         .build();
 
     Call call = client.newCall(request);
-    call.timeout().timeout(1000, TimeUnit.MILLISECONDS);
+    call.timeout().timeout(2000, TimeUnit.MILLISECONDS);
     Response response = call.execute();
     Thread.sleep(250);
     response.body().source().readUtf8();
diff --git a/okhttp/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java b/okhttp/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java
index c756b09056..e9908f89f2 100644
--- a/okhttp/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/connection/ConnectionPoolTest.java
@@ -179,6 +179,27 @@
     assertThat(c1.getNoNewExchanges()).isTrue();
   }
 
+  @Test public void interruptStopsThread() throws Exception {
+    RealConnectionPool pool = new RealConnectionPool(2, 100L, TimeUnit.NANOSECONDS);
+    RealConnection c1 = newConnection(pool, routeA1, Long.MAX_VALUE);
+
+    assertThat(pool.getCleanupRunning()).isTrue();
+
+    Thread.sleep(100);
+
+    Thread[] threads = new Thread[Thread.activeCount() * 2];
+    Thread.enumerate(threads);
+    for (Thread t: threads) {
+      if (t != null && t.getName().equals("OkHttp ConnectionPool")) {
+        t.interrupt();
+      }
+    }
+
+    Thread.sleep(100);
+
+    assertThat(pool.getCleanupRunning()).isFalse();
+  }
+
   /** Use a helper method so there's no hidden reference remaining on the stack. */
   private void allocateAndLeakAllocation(ConnectionPool pool, RealConnection connection) {
     synchronized (RealConnectionPool.Companion.get(pool)) {
diff --git a/okhttp/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java b/okhttp/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
index b830ff73cc..7a05f6b43d 100644
--- a/okhttp/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
+++ b/okhttp/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
@@ -63,13 +63,13 @@
 import okhttp3.mockwebserver.QueueDispatcher;
 import okhttp3.mockwebserver.RecordedRequest;
 import okhttp3.mockwebserver.SocketPolicy;
+import okhttp3.testing.Flaky;
 import okhttp3.testing.PlatformRule;
 import okhttp3.tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.GzipSink;
 import okio.Okio;
-import org.jetbrains.annotations.NotNull;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -97,7 +97,11 @@
 
 /** Test how HTTP/2 interacts with HTTP features. */
 @RunWith(Parameterized.class)
+@Flaky
 public final class HttpOverHttp2Test {
+  // Flaky https://github.com/square/okhttp/issues/4632
+  // Flaky https://github.com/square/okhttp/issues/4633
+
   private static final Logger http2Logger = Logger.getLogger(Http2.class.getName());
   private static final HandshakeCertificates handshakeCertificates = localhost();
 
@@ -125,6 +129,8 @@ public HttpOverHttp2Test(Protocol protocol) {
   }
 
   @Before public void setUp() {
+    platform.assumeNotOpenJSSE();
+
     if (protocol == Protocol.HTTP_2) {
       platform.assumeHttp2Support();
       server.useHttps(handshakeCertificates.sslSocketFactory(), false);
@@ -1227,6 +1233,7 @@ private void noRecoveryFromErrorWithRetryDisabled(ErrorCode errorCode) throws Ex
         (long) 1);
   }
 
+  @Flaky
   @Test public void missingPongsFailsConnection() throws Exception {
     if (protocol == Protocol.HTTP_2) {
       // https://github.com/square/okhttp/issues/5221
@@ -1405,7 +1412,9 @@ private int countFrames(List<String> logs, String message) {
     assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(0);
   }
 
+  @Flaky
   @Test public void responseHeadersAfterGoaway() throws Exception {
+    // Flaky https://github.com/square/okhttp/issues/4836
     server.enqueue(new MockResponse()
         .setHeadersDelay(1, SECONDS)
         .setBody("ABC"));
@@ -1595,7 +1604,7 @@ public void shutdownAfterLateCoalescing() throws Exception {
     client = client.newBuilder().eventListener(new EventListener() {
       int callCount;
 
-      @Override public void connectionAcquired(@NotNull Call call, @NotNull Connection connection) {
+      @Override public void connectionAcquired(Call call, Connection connection) {
         try {
           if (callCount++ == 1) {
             server.shutdown();
diff --git a/okhttp/src/test/java/okhttp3/internal/platform/android/AndroidSocketAdapterTest.kt b/okhttp/src/test/java/okhttp3/internal/platform/android/AndroidSocketAdapterTest.kt
new file mode 100644
index 0000000000..d9d6017336
--- /dev/null
+++ b/okhttp/src/test/java/okhttp3/internal/platform/android/AndroidSocketAdapterTest.kt
@@ -0,0 +1,100 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.platform.android
+
+import okhttp3.DelegatingSSLSocket
+import okhttp3.DelegatingSSLSocketFactory
+import okhttp3.Protocol.HTTP_1_1
+import okhttp3.Protocol.HTTP_2
+import org.conscrypt.Conscrypt
+import org.junit.Assert.assertFalse
+import org.junit.Assert.assertNotNull
+import org.junit.Assert.assertNull
+import org.junit.Assert.assertTrue
+import org.junit.Assume.assumeFalse
+import org.junit.Assume.assumeTrue
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.junit.runners.Parameterized
+import java.security.Provider
+import javax.net.ssl.SSLContext
+import javax.net.ssl.SSLSocket
+
+@RunWith(Parameterized::class)
+class AndroidSocketAdapterTest(private val adapter: SocketAdapter) {
+  private val provider: Provider = Conscrypt.newProviderBuilder().provideTrustManager(true).build()
+  val context: SSLContext = SSLContext.getInstance("TLS", provider)
+
+  init {
+    context.init(null, null, null)
+  }
+
+  @Test
+  fun testMatchesSupportedSocket() {
+    val socketFactory = context.socketFactory
+
+    val sslSocket = socketFactory.createSocket() as SSLSocket
+    assertTrue(adapter.matchesSocket(sslSocket))
+
+    adapter.configureTlsExtensions(sslSocket, "example.com", listOf(HTTP_2, HTTP_1_1))
+    // not connected
+    assertNull(adapter.getSelectedProtocol(sslSocket))
+  }
+
+  @Test
+  fun testMatchesSupportedAndroidSocketFactory() {
+    assumeTrue(adapter is StandardAndroidSocketAdapter)
+
+    assertTrue(adapter.matchesSocketFactory(context.socketFactory))
+    assertNotNull(adapter.trustManager(context.socketFactory))
+  }
+
+  @Test
+  fun testDoesntMatchSupportedCustomSocketFactory() {
+    assumeFalse(adapter is StandardAndroidSocketAdapter)
+
+    assertFalse(adapter.matchesSocketFactory(context.socketFactory))
+    assertNull(adapter.trustManager(context.socketFactory))
+  }
+
+  @Test
+  fun testCustomSocket() {
+    val socketFactory = DelegatingSSLSocketFactory(context.socketFactory)
+
+    assertFalse(adapter.matchesSocketFactory(socketFactory))
+
+    val sslSocket =
+        object : DelegatingSSLSocket(context.socketFactory.createSocket() as SSLSocket) {}
+    assertFalse(adapter.matchesSocket(sslSocket))
+
+    adapter.configureTlsExtensions(sslSocket, "example.com", listOf(HTTP_2, HTTP_1_1))
+    // not connected
+    assertNull(adapter.getSelectedProtocol(sslSocket))
+  }
+
+  companion object {
+    @JvmStatic
+    @Parameterized.Parameters(name = "{0}")
+    fun data(): Collection<SocketAdapter> {
+      return listOf(
+          ConscryptSocketAdapter,
+          DeferredSocketAdapter("org.conscrypt"),
+          AndroidSocketAdapter.buildIfSupported("org.conscrypt")!!,
+          StandardAndroidSocketAdapter.buildIfSupported("org.conscrypt")!!
+      )
+    }
+  }
+}
diff --git a/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java b/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
index 9b121a9185..25a3c66d13 100644
--- a/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/tls/ClientAuthTest.java
@@ -65,6 +65,8 @@
 
   @Before
   public void setUp() {
+    platform.assumeNotOpenJSSE();
+
     serverRootCa = new HeldCertificate.Builder()
         .serialNumber(1L)
         .certificateAuthority(1)
diff --git a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
index 4806f923db..2006f235e4 100644
--- a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketHttpTest.java
@@ -41,6 +41,8 @@
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
 import okhttp3.mockwebserver.SocketPolicy;
+import okhttp3.testing.Flaky;
+import okhttp3.testing.PlatformRule;
 import okhttp3.tls.HandshakeCertificates;
 import okio.Buffer;
 import okio.ByteString;
@@ -57,9 +59,14 @@
 import static org.assertj.core.data.Offset.offset;
 import static org.junit.Assert.fail;
 
+@Flaky
 public final class WebSocketHttpTest {
+  // Flaky https://github.com/square/okhttp/issues/4515
+  // Flaky https://github.com/square/okhttp/issues/4953
+
   @Rule public final MockWebServer webServer = new MockWebServer();
   @Rule public final OkHttpClientTestRule clientTestRule = new OkHttpClientTestRule();
+  @Rule public final PlatformRule platform = new PlatformRule();
 
   private final HandshakeCertificates handshakeCertificates = localhost();
   private final WebSocketRecorder clientListener = new WebSocketRecorder("client");
@@ -68,6 +75,8 @@
   private OkHttpClient client;
 
   @Before public void setUp() {
+    platform.assumeNotOpenJSSE();
+
     client = clientTestRule.newClientBuilder()
         .writeTimeout(500, TimeUnit.MILLISECONDS)
         .readTimeout(500, TimeUnit.MILLISECONDS)
@@ -249,8 +258,8 @@
     server.close(1001, "bye");
     clientListener.assertClosed(1001, "bye");
     clientListener.assertExhausted();
-    serverListener.assertClosing(1000,  "");
-    serverListener.assertClosed(1000,  "");
+    serverListener.assertClosing(1000, "");
+    serverListener.assertClosed(1000, "");
     serverListener.assertExhausted();
   }
 
@@ -579,8 +588,8 @@
     }
 
     long elapsedUntilPong3 = System.nanoTime() - startNanos;
-    assertThat((double) TimeUnit.NANOSECONDS.toMillis(elapsedUntilPong3)).isCloseTo((double) 1500, offset(
-        250d));
+    assertThat(TimeUnit.NANOSECONDS.toMillis(elapsedUntilPong3))
+        .isCloseTo(1500L, offset(250L));
 
     // The client pinged the server 3 times, and it has ponged back 3 times.
     assertThat(webSocket.sentPingCount()).isEqualTo(3);
@@ -644,8 +653,8 @@
     latch.countDown();
 
     long elapsedUntilFailure = System.nanoTime() - openAtNanos;
-    assertThat((double) TimeUnit.NANOSECONDS.toMillis(elapsedUntilFailure)).isCloseTo((double) 1000, offset(
-        250d));
+    assertThat(TimeUnit.NANOSECONDS.toMillis(elapsedUntilFailure))
+        .isCloseTo(1000L, offset(250L));
   }
 
   /** https://github.com/square/okhttp/issues/2788 */
@@ -664,8 +673,8 @@
     // Confirm that the hard cancel occurred after 500 ms.
     clientListener.assertFailure();
     long elapsedUntilFailure = System.nanoTime() - closeAtNanos;
-    assertThat((double) TimeUnit.NANOSECONDS.toMillis(elapsedUntilFailure)).isCloseTo((double) 500, offset(
-        250d));
+    assertThat(TimeUnit.NANOSECONDS.toMillis(elapsedUntilFailure))
+        .isCloseTo(500L, offset(250L));
 
     // Close the server and confirm it saw what we expected.
     server.close(1000, null);
diff --git a/samples/crawler/build.gradle b/samples/crawler/build.gradle
index d9f72bd9c2..7bcfa55a08 100644
--- a/samples/crawler/build.gradle
+++ b/samples/crawler/build.gradle
@@ -2,3 +2,7 @@ dependencies {
   implementation project(':okhttp')
   implementation deps.jsoup
 }
+
+tasks.withType(JavaCompile) {
+  options.warnings = false
+}
\ No newline at end of file
diff --git a/samples/guide/build.gradle b/samples/guide/build.gradle
index 7f2ef89506..f7864f3c93 100644
--- a/samples/guide/build.gradle
+++ b/samples/guide/build.gradle
@@ -4,3 +4,7 @@ dependencies {
   implementation project(':okhttp-tls')
   implementation deps.moshi
 }
+
+tasks.withType(JavaCompile) {
+  options.warnings = false
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java b/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java
index 6c9f71279f..8111761dbf 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java
@@ -26,6 +26,7 @@
 import okhttp3.Connection;
 import okhttp3.EventListener;
 import okhttp3.Handshake;
+import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.Protocol;
 import okhttp3.Request;
@@ -97,6 +98,14 @@ private void printEvent(String name) {
       System.out.printf("%04d %.3f %s%n", callId, elapsedNanos / 1000000000d, name);
     }
 
+    @Override public void proxySelectStart(Call call, HttpUrl url) {
+      printEvent("proxySelectStart");
+    }
+
+    @Override public void proxySelectEnd(Call call, HttpUrl url, List<Proxy> proxies) {
+      printEvent("proxySelectEnd");
+    }
+
     @Override public void callStart(Call call) {
       printEvent("callStart");
     }
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java b/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java
index c88895b794..ea0b1fb619 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java
@@ -24,6 +24,7 @@
 import okhttp3.Connection;
 import okhttp3.EventListener;
 import okhttp3.Handshake;
+import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.Protocol;
 import okhttp3.Request;
@@ -76,6 +77,14 @@ private void printEvent(String name) {
       printEvent("callStart");
     }
 
+    @Override public void proxySelectStart(Call call, HttpUrl url) {
+      printEvent("proxySelectStart");
+    }
+
+    @Override public void proxySelectEnd(Call call, HttpUrl url, List<Proxy> proxies) {
+      printEvent("proxySelectEnd");
+    }
+
     @Override public void dnsStart(Call call, String domainName) {
       printEvent("dnsStart");
     }
diff --git a/samples/static-server/build.gradle b/samples/static-server/build.gradle
index 1b1bb519c6..7b03c052c1 100644
--- a/samples/static-server/build.gradle
+++ b/samples/static-server/build.gradle
@@ -1,5 +1,9 @@
 apply plugin: 'com.github.johnrengelman.shadow'
 
+tasks.withType(JavaCompile) {
+  options.warnings = false
+}
+
 jar {
   manifest {
     attributes 'Main-Class': 'okhttp3.sample.SampleServer'
diff --git a/settings.gradle b/settings.gradle
index 17da3db548..8b742d82cb 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,13 @@
+rootProject.name = 'okhttp-parent'
+
 include ':mockwebserver'
+
+if (properties.containsKey('android.injected.invoked.from.ide') ||
+        System.getenv('ANDROID_SDK_ROOT') != null) {
+  // Currently incompatible with Intellij, use with Android Studio and from CLI with explicit flag
+  include ':android-test'
+}
+
 include ':okcurl'
 include ':okhttp'
 include ':okhttp-brotli'
