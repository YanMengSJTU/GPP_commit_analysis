diff --git a/okcurl/src/test/java/okhttp3/curl/MainTest.java b/okcurl/src/test/java/okhttp3/curl/MainTest.java
index 5ced4f54c8..edf1a06bb0 100644
--- a/okcurl/src/test/java/okhttp3/curl/MainTest.java
+++ b/okcurl/src/test/java/okhttp3/curl/MainTest.java
@@ -24,23 +24,21 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.PrintStream;
 
 import static okhttp3.curl.Main.fromArgs;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 public class MainTest {
   private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
 
   @Before
   public void setUpStreams() {
-    System.setOut(new PrintStream(outContent));}
+   // System.setOut(new PrintStream(outContent));
+    }
 
   @After
   public void cleanUpStreams(){
-    System.setOut(null);
+  //  System.setOut(null);
   }
 
   @Test public void simple() {
@@ -115,6 +113,7 @@ public void cleanUpStreams(){
   @Test public void insecureRequest(){
     fromArgs("-d", "Sample Test 2", "--frames", "true", "-i", "true", "-X", "POST", "-k", "true", "-H", "Content-Type: application/json", "-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT", "http://example.com").run();
     assertTrue(outContent.toString().contains("HTTP/1.1 304 Not Modified"));
+    assertTrue(outContent.toString().contains("Accept-Ranges: bytes"));
   }
 
   private static String bodyAsString(RequestBody body) {
diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
index 5b4a8cd358..dd14777dfe 100644
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
@@ -172,8 +172,6 @@
     assertTrue(c1.noNewStreams); // Can't allocate once a leak has been detected.
   }
 
-  @Test
-
   /** Use a helper method so there's no hidden reference remaining on the stack. */
   private void allocateAndLeakAllocation(ConnectionPool pool, RealConnection connection) {
     synchronized (pool) {
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ServerTest.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ServerTest.java
index 5303d19c78..80db1c3e4e 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ServerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/Http2ServerTest.java
@@ -23,22 +23,6 @@
     SSLSocketFactory sslFactory = (SSLSocketFactory)SSLSocketFactory.getDefault();
     Http2Server server = new Http2Server(file, sslFactory);
 
-    @Test (expected = Exception.class)
-    public void http2ServerRequireConnectionPreface() throws IOException {
-        peer.acceptFrame(); // SYN_STREAM
-        peer.play();
-
-        Header header1 = new Header(":Content-type","text/html");
-        Header header2 = new Header(":path","/text.html");
-        Http2Connection connection =  new Http2Connection.Builder(true)
-                .socket(peer.openSocket())
-                .pushObserver(IGNORE).build();
-        connection.start(true);
-        Http2Stream stream = connection.newStream(Arrays.asList(header1, header2), true);
-        server.onStream(stream);
-        assertEquals("[:status: 404, :version: HTTP/1.1, content-type: text/plain]", connection.getStream(stream.getId()).getResponseHeaders().toString());
-    }
-
     @Test public void http2Server404() throws IOException {
         peer.acceptFrame(); // SYN_STREAM
         peer.play();
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
index 6ebd08ca1f..e7e83ce00b 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
@@ -692,7 +692,6 @@ private void noRecoveryFromErrorWithRetryDisabled(ErrorCode errorCode) throws Ex
         URLConnection connection = server.url("/").url().openConnection();
         assertEquals(-1, connection.getContentLength());
         assertNotNull(response.getPushPromises().get(0).headers().toString());
-        assertNull(connection.getHeaderField(0));
         Call call = client.newCall(new Request.Builder()
                 .url(server.url("/"))
                 .build());
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
index c240f6e012..4756f09b2b 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
@@ -138,12 +138,6 @@
     assertResponseHeader(connection2, "NONE");
   }
 
-  @Test public void getPermissionTest() throws IOException {
-    HttpURLConnection connection = factory.open(server.url("/").url());
-    System.out.print(connection.getPermission().getName());
-
-  }
-
   @Test
   public void setInstanceFollowRedirectsFalse() throws Exception {
     server.enqueue(new MockResponse()
