diff --git a/okhttp-tests/src/test/java/okhttp3/HeadersTest.java b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
index 3a168b1224..3ceab33b5e 100644
--- a/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/HeadersTest.java
@@ -360,5 +360,51 @@
     assertEquals(1, challenges.size());
     assertEquals("Digest", challenges.get(0).scheme());
     assertEquals("myrealm", challenges.get(0).realm());
+
+    // Not strict RFC 2617 header #2
+    headers = new Headers.Builder()
+            .add("WWW-Authenticate", "Digest qop=\"auth\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf\", realm=\"myrealm\", stale=\"FALSE\"").build();
+    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");
+    assertEquals(1, challenges.size());
+    assertEquals("Digest", challenges.get(0).scheme());
+    assertEquals("myrealm", challenges.get(0).realm());
+
+    // Wrong header
+    headers = new Headers.Builder()
+            .add("WWW-Authenticate", "Digest qop=\"auth\", underrealm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf\", stale=\"FALSE\"").build();
+    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");
+    assertEquals(0, challenges.size());
+
+    // Not strict RFC 2617 header with some spaces
+    headers = new Headers.Builder()
+            .add("WWW-Authenticate", "Digest qop=\"auth\",    realm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf\", stale=\"FALSE\"").build();
+    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");
+    assertEquals(1, challenges.size());
+    assertEquals("Digest", challenges.get(0).scheme());
+    assertEquals("myrealm", challenges.get(0).realm());
+
+    // Strict RFC 2617 header with some spaces
+    headers = new Headers.Builder()
+            .add("WWW-Authenticate", "Digest    realm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf\", qop=\"auth\", stale=\"FALSE\"").build();
+    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");
+    assertEquals(1, challenges.size());
+    assertEquals("Digest", challenges.get(0).scheme());
+    assertEquals("myrealm", challenges.get(0).realm());
+
+    // Not strict RFC 2617 camelcased
+    headers = new Headers.Builder()
+            .add("WWW-Authenticate", "DiGeSt qop=\"auth\", rEaLm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf\", stale=\"FALSE\"").build();
+    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");
+    assertEquals(1, challenges.size());
+    assertEquals("DiGeSt", challenges.get(0).scheme());
+    assertEquals("myrealm", challenges.get(0).realm());
+
+    // Strict RFC 2617 camelcased
+    headers = new Headers.Builder()
+            .add("WWW-Authenticate", "DIgEsT rEaLm=\"myrealm\", nonce=\"fjalskdflwejrlaskdfjlaskdjflaksjdflkasdf\", qop=\"auth\", stale=\"FALSE\"").build();
+    challenges = HttpHeaders.parseChallenges(headers, "WWW-Authenticate");
+    assertEquals(1, challenges.size());
+    assertEquals("DIgEsT", challenges.get(0).scheme());
+    assertEquals("myrealm", challenges.get(0).realm());
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java b/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
index a2d5880d07..e2734e2528 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpHeaders.java
@@ -38,8 +38,7 @@
 
 /** Headers and utilities for internal use by OkHttp. */
 public final class HttpHeaders {
-  private static final Pattern AUTHENTICATION_HEADER_PATTERN
-          = Pattern.compile("(.*?) .*?realm=\"(.*?)\"", Pattern.CASE_INSENSITIVE);
+  private static final String AUTHENTICATION_HEADER_PATTERN = "(.*?) +(.*?, *)?realm=\"(.*?)\"";
 
   private HttpHeaders() {
   }
@@ -153,10 +152,11 @@ public static Headers varyHeaders(Headers requestHeaders, Headers responseHeader
     // realm-value = quoted-string
     List<Challenge> challenges = new ArrayList<>();
     List<String> authenticationHeaders = responseHeaders.values(challengeHeader);
+    Pattern pattern = Pattern.compile(AUTHENTICATION_HEADER_PATTERN, Pattern.CASE_INSENSITIVE);
     for (String authenticationHeader : authenticationHeaders) {
-      Matcher matcher = AUTHENTICATION_HEADER_PATTERN.matcher(authenticationHeader);
+      Matcher matcher = pattern.matcher(authenticationHeader);
       if (matcher.find()) {
-        challenges.add(new Challenge(matcher.group(1), matcher.group(2)));
+        challenges.add(new Challenge(matcher.group(1), matcher.group(3)));
       }
     }
     return challenges;
