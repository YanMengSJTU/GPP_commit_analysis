diff --git a/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
index 8b3e80e1f4..cfa15377f0 100644
--- a/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
@@ -22,6 +22,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.internal.tls.SslClient;
+import okhttp3.internal.ws.WebSocketRecorder;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okio.Buffer;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
index 0cc3e75190..d0c4d9d05b 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
@@ -22,7 +22,6 @@
 import java.util.concurrent.Executor;
 import okhttp3.MediaType;
 import okhttp3.RequestBody;
-import okhttp3.WebSocketRecorder;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
index 9d0c347d24..57f6ded762 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
@@ -23,8 +23,7 @@
 import java.util.regex.Pattern;
 import okhttp3.ResponseBody;
 import okhttp3.internal.Util;
-import okhttp3.WebSocketRecorder;
-import okhttp3.WebSocketRecorder.MessageDelegate;
+import okhttp3.internal.ws.WebSocketRecorder.MessageDelegate;
 import okio.Buffer;
 import okio.BufferedSource;
 import okio.ByteString;
diff --git a/okhttp-tests/src/test/java/okhttp3/WebSocketRecorder.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
similarity index 95%
rename from okhttp-tests/src/test/java/okhttp3/WebSocketRecorder.java
rename to okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
index 7605a803cb..deaf22f34a 100644
--- a/okhttp-tests/src/test/java/okhttp3/WebSocketRecorder.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package okhttp3;
+package okhttp3.internal.ws;
 
 import java.io.IOException;
 import java.util.concurrent.BlockingQueue;
@@ -24,7 +24,6 @@
 import okhttp3.ResponseBody;
 import okhttp3.WebSocket;
 import okhttp3.WebSocketListener;
-import okhttp3.internal.ws.WebSocketReader;
 import okio.Buffer;
 
 import static okhttp3.WebSocket.BINARY;
@@ -154,11 +153,11 @@ public void assertResponse(int code, String body) throws IOException {
     assertEquals(body, response.body().string());
   }
 
-  private static class Message {
+  static final class Message {
     public final MediaType mediaType;
     public final Buffer buffer = new Buffer();
 
-    private Message(MediaType mediaType) {
+    Message(MediaType mediaType) {
       this.mediaType = mediaType;
     }
 
@@ -179,10 +178,10 @@ private Message(MediaType mediaType) {
     }
   }
 
-  private static class Ping {
+  static final class Ping {
     public final Buffer buffer;
 
-    private Ping(Buffer buffer) {
+    Ping(Buffer buffer) {
       this.buffer = buffer;
     }
 
@@ -203,10 +202,10 @@ private Ping(Buffer buffer) {
     }
   }
 
-  private static class Pong {
+  static final class Pong {
     public final Buffer buffer;
 
-    private Pong(Buffer buffer) {
+    Pong(Buffer buffer) {
       this.buffer = buffer;
     }
 
@@ -227,11 +226,11 @@ private Pong(Buffer buffer) {
     }
   }
 
-  private static class Close {
+  static final class Close {
     public final int code;
     public final String reason;
 
-    private Close(int code, String reason) {
+    Close(int code, String reason) {
       this.code = code;
       this.reason = reason;
     }
diff --git a/okhttp/src/main/java/okhttp3/RealWebSocketCall.java b/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
index 40ba143443..6173b5e477 100644
--- a/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
+++ b/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
@@ -19,6 +19,7 @@
 import java.net.ProtocolException;
 import java.security.SecureRandom;
 import java.util.Collections;
+import java.util.List;
 import java.util.Random;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.LinkedBlockingDeque;
@@ -32,6 +33,8 @@
 import static java.util.concurrent.TimeUnit.SECONDS;
 
 final class RealWebSocketCall implements WebSocketCall {
+  private static final List<Protocol> ONLY_HTTP1 = Collections.singletonList(Protocol.HTTP_1_1);
+
   private final RealCall call;
   private final Random random;
   private final String key;
@@ -51,7 +54,9 @@
     key = ByteString.of(nonce).base64();
 
     client = client.newBuilder()
-        .protocols(Collections.singletonList(Protocol.HTTP_1_1))
+        .readTimeout(0, SECONDS) // i.e., no timeout because this is a long-lived connection.
+        .writeTimeout(0, SECONDS) // i.e., no timeout because this is a long-lived connection.
+        .protocols(ONLY_HTTP1)
         .build();
 
     request = request.newBuilder()
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index a7f568f61a..29b5e73055 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -23,9 +23,9 @@
 import okhttp3.MediaType;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
-import okhttp3.internal.NamedRunnable;
 import okhttp3.WebSocket;
 import okhttp3.WebSocketListener;
+import okhttp3.internal.NamedRunnable;
 import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
@@ -35,12 +35,15 @@
 import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_TEXT;
 import static okhttp3.internal.ws.WebSocketReader.FrameCallback;
 
-public abstract class RealWebSocket implements WebSocket {
+public abstract class RealWebSocket implements WebSocket, FrameCallback {
   private static final int CLOSE_PROTOCOL_EXCEPTION = 1002;
 
+  private final Executor replyExecutor;
+  private final WebSocketListener listener;
+  private final String url;
+
   private final WebSocketWriter writer;
   private final WebSocketReader reader;
-  private final WebSocketListener listener;
 
   /** True after calling {@link #close(int, String)}. No writes are allowed afterward. */
   private volatile boolean writerSentClose;
@@ -52,38 +55,37 @@
   /** True after calling {@link #close()} to free connection resources. */
   private final AtomicBoolean connectionClosed = new AtomicBoolean();
 
-  public RealWebSocket(boolean isClient, BufferedSource source, BufferedSink sink, Random random,
-      final Executor replyExecutor, final WebSocketListener listener, final String url) {
+  protected RealWebSocket(boolean isClient, BufferedSource source, BufferedSink sink, Random random,
+      Executor replyExecutor, WebSocketListener listener, String url) {
+    this.replyExecutor = replyExecutor;
     this.listener = listener;
+    this.url = url;
 
     writer = new WebSocketWriter(isClient, sink, random);
-    reader = new WebSocketReader(isClient, source, new FrameCallback() {
-      @Override public void onMessage(ResponseBody message) throws IOException {
-        listener.onMessage(message);
-      }
+    reader = new WebSocketReader(isClient, source, this);
+  }
 
-      @Override public void onPing(final Buffer buffer) {
-        replyExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Pong Reply", url) {
-          @Override protected void execute() {
-            try {
-              writer.writePong(buffer);
-            } catch (IOException ignored) {
-            }
-          }
-        });
-      }
+  @Override public final void onMessage(ResponseBody message) throws IOException {
+    listener.onMessage(message);
+  }
 
-      @Override public void onPong(Buffer buffer) {
-        listener.onPong(buffer);
+  @Override public final void onPing(final Buffer buffer) {
+    replyExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Pong Reply", url) {
+      @Override protected void execute() {
+        peerPing(buffer);
       }
+    });
+  }
 
-      @Override public void onClose(final int code, final String reason) {
-        readerSentClose = true;
-        replyExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Close Reply", url) {
-          @Override protected void execute() {
-            peerClose(code, reason);
-          }
-        });
+  @Override public final void onPong(Buffer buffer) {
+    listener.onPong(buffer);
+  }
+
+  @Override public final void onClose(final int code, final String reason) {
+    readerSentClose = true;
+    replyExecutor.execute(new NamedRunnable("OkHttp %s WebSocket Close Reply", url) {
+      @Override protected void execute() {
+        peerClose(code, reason);
       }
     });
   }
@@ -92,7 +94,7 @@ public RealWebSocket(boolean isClient, BufferedSource source, BufferedSink sink,
    * Read a single message from the web socket and deliver it to the listener. This method should be
    * called in a loop with the return value indicating whether looping should continue.
    */
-  public boolean readMessage() {
+  public final boolean readMessage() {
     try {
       reader.processNextFrame();
       return !readerSentClose;
@@ -102,7 +104,7 @@ public boolean readMessage() {
     }
   }
 
-  @Override public void sendMessage(RequestBody message) throws IOException {
+  @Override public final void sendMessage(RequestBody message) throws IOException {
     if (message == null) throw new NullPointerException("message == null");
     if (writerSentClose) throw new IllegalStateException("closed");
     if (writerWantsClose) throw new IllegalStateException("must call close()");
@@ -135,7 +137,7 @@ public boolean readMessage() {
     }
   }
 
-  @Override public void sendPing(Buffer payload) throws IOException {
+  @Override public final void sendPing(Buffer payload) throws IOException {
     if (writerSentClose) throw new IllegalStateException("closed");
     if (writerWantsClose) throw new IllegalStateException("must call close()");
 
@@ -148,7 +150,7 @@ public boolean readMessage() {
   }
 
   /** Send an unsolicited pong with the specified payload. */
-  public void sendPong(Buffer payload) throws IOException {
+  final void sendPong(Buffer payload) throws IOException {
     if (writerSentClose) throw new IllegalStateException("closed");
     if (writerWantsClose) throw new IllegalStateException("must call close()");
 
@@ -160,7 +162,7 @@ public void sendPong(Buffer payload) throws IOException {
     }
   }
 
-  @Override public void close(int code, String reason) throws IOException {
+  @Override public final void close(int code, String reason) throws IOException {
     if (writerSentClose) throw new IllegalStateException("closed");
     writerSentClose = true;
 
@@ -178,8 +180,16 @@ public void sendPong(Buffer payload) throws IOException {
     }
   }
 
+  /** Replies with a pong when a ping frame is read from the peer. */
+  void peerPing(Buffer payload) {
+    try {
+      writer.writePong(payload);
+    } catch (IOException ignored) {
+    }
+  }
+
   /** Replies and closes this web socket when a close frame is read from the peer. */
-  private void peerClose(int code, String reason) {
+  void peerClose(int code, String reason) {
     if (!writerSentClose) {
       try {
         writer.writeClose(code, reason);
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
index 139f787fe4..c50ca8cad1 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
@@ -51,7 +51,7 @@
 /**
  * An <a href="http://tools.ietf.org/html/rfc6455">RFC 6455</a>-compatible WebSocket frame reader.
  */
-public final class WebSocketReader {
+final class WebSocketReader {
   public interface FrameCallback {
     void onMessage(ResponseBody body) throws IOException;
 
@@ -62,27 +62,27 @@
     void onClose(int code, String reason);
   }
 
-  private final boolean isClient;
-  private final BufferedSource source;
-  private final FrameCallback frameCallback;
+  final boolean isClient;
+  final BufferedSource source;
+  final FrameCallback frameCallback;
 
-  private final Source framedMessageSource = new FramedMessageSource();
+  final Source framedMessageSource = new FramedMessageSource();
 
-  private boolean closed;
-  private boolean messageClosed;
+  boolean closed;
+  boolean messageClosed;
 
   // Stateful data about the current frame.
-  private int opcode;
-  private long frameLength;
-  private long frameBytesRead;
-  private boolean isFinalFrame;
-  private boolean isControlFrame;
-  private boolean isMasked;
+  int opcode;
+  long frameLength;
+  long frameBytesRead;
+  boolean isFinalFrame;
+  boolean isControlFrame;
+  boolean isMasked;
 
-  private final byte[] maskKey = new byte[4];
-  private final byte[] maskBuffer = new byte[8192];
+  final byte[] maskKey = new byte[4];
+  final byte[] maskBuffer = new byte[8192];
 
-  public WebSocketReader(boolean isClient, BufferedSource source, FrameCallback frameCallback) {
+  WebSocketReader(boolean isClient, BufferedSource source, FrameCallback frameCallback) {
     if (source == null) throw new NullPointerException("source == null");
     if (frameCallback == null) throw new NullPointerException("frameCallback == null");
     this.isClient = isClient;
@@ -100,7 +100,7 @@ public WebSocketReader(boolean isClient, BufferedSource source, FrameCallback fr
    *         control frame will result in a corresponding call to {@link FrameCallback}.
    * </ul>
    */
-  public void processNextFrame() throws IOException {
+  void processNextFrame() throws IOException {
     readHeader();
     if (isControlFrame) {
       readControlFrame();
@@ -246,7 +246,7 @@ private void readMessageFrame() throws IOException {
   }
 
   /** Read headers and process any control frames until we reach a non-control frame. */
-  private void readUntilNonControlFrame() throws IOException {
+  void readUntilNonControlFrame() throws IOException {
     while (!closed) {
       readHeader();
       if (!isControlFrame) {
@@ -261,7 +261,7 @@ private void readUntilNonControlFrame() throws IOException {
    * frames that occur between fragments will be processed. If the message payload is masked this
    * will unmask as it's being processed.
    */
-  private final class FramedMessageSource implements Source {
+  final class FramedMessageSource implements Source {
     @Override public long read(Buffer sink, long byteCount) throws IOException {
       if (closed) throw new IOException("closed");
       if (messageClosed) throw new IllegalStateException("closed");
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
index 6ce0cfdd0a..f7e93fcdf9 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
@@ -44,24 +44,24 @@
  * may call {@link #writePing}, {@link #writePong}, or {@link #writeClose} which will interleave on
  * the wire with frames from the "main" sending thread.
  */
-public final class WebSocketWriter {
-  private final boolean isClient;
-  private final Random random;
+final class WebSocketWriter {
+  final boolean isClient;
+  final Random random;
 
   /** Writes must be guarded by synchronizing on 'this'. */
-  private final BufferedSink sink;
+  final BufferedSink sink;
   /** Access must be guarded by synchronizing on 'this'. */
-  private boolean writerClosed;
+  boolean writerClosed;
 
-  private final Buffer buffer = new Buffer();
-  private final FrameSink frameSink = new FrameSink();
+  final Buffer buffer = new Buffer();
+  final FrameSink frameSink = new FrameSink();
 
-  private boolean activeWriter;
+  boolean activeWriter;
 
-  private final byte[] maskKey;
-  private final byte[] maskBuffer;
+  final byte[] maskKey;
+  final byte[] maskBuffer;
 
-  public WebSocketWriter(boolean isClient, BufferedSink sink, Random random) {
+  WebSocketWriter(boolean isClient, BufferedSink sink, Random random) {
     if (sink == null) throw new NullPointerException("sink == null");
     if (random == null) throw new NullPointerException("random == null");
     this.isClient = isClient;
@@ -74,14 +74,14 @@ public WebSocketWriter(boolean isClient, BufferedSink sink, Random random) {
   }
 
   /** Send a ping with the supplied {@code payload}. Payload may be {@code null} */
-  public void writePing(Buffer payload) throws IOException {
+  void writePing(Buffer payload) throws IOException {
     synchronized (this) {
       writeControlFrameSynchronized(OPCODE_CONTROL_PING, payload);
     }
   }
 
   /** Send a pong with the supplied {@code payload}. Payload may be {@code null} */
-  public void writePong(Buffer payload) throws IOException {
+  void writePong(Buffer payload) throws IOException {
     synchronized (this) {
       writeControlFrameSynchronized(OPCODE_CONTROL_PONG, payload);
     }
@@ -94,7 +94,7 @@ public void writePong(Buffer payload) throws IOException {
    * href="http://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4 of RFC 6455</a> or {@code 0}.
    * @param reason Reason for shutting down or {@code null}.
    */
-  public void writeClose(int code, String reason) throws IOException {
+  void writeClose(int code, String reason) throws IOException {
     Buffer payload = null;
     if (code != 0 || reason != null) {
       if (code != 0) {
@@ -156,7 +156,7 @@ private void writeControlFrameSynchronized(int opcode, Buffer payload) throws IO
    * Stream a message payload as a series of frames. This allows control frames to be interleaved
    * between parts of the message.
    */
-  public Sink newMessageSink(int formatOpcode, long contentLength) {
+  Sink newMessageSink(int formatOpcode, long contentLength) {
     if (activeWriter) {
       throw new IllegalStateException("Another message writer is active. Did you call close()?");
     }
@@ -171,7 +171,7 @@ public Sink newMessageSink(int formatOpcode, long contentLength) {
     return frameSink;
   }
 
-  private void writeMessageFrameSynchronized(int formatOpcode, long byteCount, boolean isFirstFrame,
+  void writeMessageFrameSynchronized(int formatOpcode, long byteCount, boolean isFirstFrame,
       boolean isFinal) throws IOException {
     assert Thread.holdsLock(this);
 
@@ -225,11 +225,11 @@ private void writeMaskedSynchronized(BufferedSource source, long byteCount) thro
     }
   }
 
-  private final class FrameSink implements Sink {
-    private int formatOpcode;
-    private long contentLength;
-    private boolean isFirstFrame;
-    private boolean closed;
+  final class FrameSink implements Sink {
+    int formatOpcode;
+    long contentLength;
+    boolean isFirstFrame;
+    boolean closed;
 
     @Override public void write(Buffer source, long byteCount) throws IOException {
       if (closed) throw new IOException("closed");
