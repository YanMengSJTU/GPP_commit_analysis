diff --git a/.gradle/4.1/fileChanges/last-build.bin b/.gradle/4.1/fileChanges/last-build.bin
new file mode 100644
index 0000000000..f76dd238ad
Binary files /dev/null and b/.gradle/4.1/fileChanges/last-build.bin differ
diff --git a/.gradle/4.1/fileHashes/fileHashes.bin b/.gradle/4.1/fileHashes/fileHashes.bin
new file mode 100644
index 0000000000..ea9304c802
Binary files /dev/null and b/.gradle/4.1/fileHashes/fileHashes.bin differ
diff --git a/.gradle/4.1/fileHashes/fileHashes.lock b/.gradle/4.1/fileHashes/fileHashes.lock
new file mode 100644
index 0000000000..63210679e8
Binary files /dev/null and b/.gradle/4.1/fileHashes/fileHashes.lock differ
diff --git a/.gradle/4.1/taskHistory/fileSnapshots.bin b/.gradle/4.1/taskHistory/fileSnapshots.bin
new file mode 100644
index 0000000000..dd1be75f81
Binary files /dev/null and b/.gradle/4.1/taskHistory/fileSnapshots.bin differ
diff --git a/.gradle/4.1/taskHistory/taskHistory.bin b/.gradle/4.1/taskHistory/taskHistory.bin
new file mode 100644
index 0000000000..3a0b663457
Binary files /dev/null and b/.gradle/4.1/taskHistory/taskHistory.bin differ
diff --git a/.gradle/4.1/taskHistory/taskHistory.lock b/.gradle/4.1/taskHistory/taskHistory.lock
new file mode 100644
index 0000000000..ae66af1518
Binary files /dev/null and b/.gradle/4.1/taskHistory/taskHistory.lock differ
diff --git a/.gradle/buildOutputCleanup/built.bin b/.gradle/buildOutputCleanup/built.bin
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/.gradle/buildOutputCleanup/cache.properties b/.gradle/buildOutputCleanup/cache.properties
new file mode 100644
index 0000000000..529665b7df
--- /dev/null
+++ b/.gradle/buildOutputCleanup/cache.properties
@@ -0,0 +1,2 @@
+#Thu Dec 07 09:02:33 EST 2017
+gradle.version=4.1
diff --git a/.gradle/buildOutputCleanup/cache.properties.lock b/.gradle/buildOutputCleanup/cache.properties.lock
new file mode 100644
index 0000000000..40fdece9d2
--- /dev/null
+++ b/.gradle/buildOutputCleanup/cache.properties.lock
@@ -0,0 +1 @@
+
\ No newline at end of file
diff --git a/benchmarks/build.gradle b/benchmarks/build.gradle
new file mode 100644
index 0000000000..199b236832
--- /dev/null
+++ b/benchmarks/build.gradle
@@ -0,0 +1,16 @@
+
+description = 'Benchmarks'
+dependencies {
+    compile group: 'com.google.caliper', name: 'caliper', version:'1.0-beta-1'
+    compile group: 'com.google.guava', name: 'guava', version:'14.0.1'
+  compile project(':okhttp')
+  compile project(':okhttp-urlconnection')
+  compile project(':mockwebserver')
+    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version:'1.50'
+    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.2.2'
+    compile group: 'io.netty', name: 'netty-transport', version:'4.0.15.Final'
+    compile group: 'io.netty', name: 'netty-handler', version:'4.0.15.Final'
+    compile group: 'io.netty', name: 'netty-codec-http', version:'4.0.15.Final'
+    compile group: 'com.jcraft', name: 'jzlib', version:'1.1.2'
+    compileOnly group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version:'8.1.2.v20141202'
+}
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000000..8d3ee7ed25
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,28 @@
+allprojects  {
+  apply plugin: 'maven'
+
+  group = 'com.squareup.okhttp3'
+version = '3.2.0'
+}
+
+subprojects {
+  apply plugin: 'java'
+  sourceCompatibility = 1.5
+  targetCompatibility = 1.5
+  tasks.withType(JavaCompile) {
+  	options.encoding = 'UTF-8'
+  }
+
+  
+  repositories {
+    mavenLocal()
+    
+    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
+    maven { url "http://repo.maven.apache.org/maven2" }
+  }
+
+  configurations.all {
+}
+  
+  
+}
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000..7a3265ee94
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000000..f16d26666b
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-bin.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 0000000000..cccdd3d517
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,172 @@
+#!/usr/bin/env sh
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 0000000000..e95643d6a2
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/mockwebserver/build.gradle b/mockwebserver/build.gradle
new file mode 100644
index 0000000000..9a1df50828
--- /dev/null
+++ b/mockwebserver/build.gradle
@@ -0,0 +1,9 @@
+
+description = 'MockWebServer'
+dependencies {
+  compile project(':okhttp')
+  compile project(':okhttp-ws')
+    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version:'1.50'
+    compile group: 'junit', name: 'junit', version:'4.11'
+  testCompile project(':okhttp-testing-support')
+}
diff --git a/okcurl/build.gradle b/okcurl/build.gradle
new file mode 100644
index 0000000000..6101b75d4a
--- /dev/null
+++ b/okcurl/build.gradle
@@ -0,0 +1,10 @@
+
+description = 'OkCurl'
+dependencies {
+  compile project(':okhttp')
+    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version:'1.50'
+    compile group: 'io.airlift', name: 'airline', version:'0.7'
+    compile group: 'com.google.guava', name: 'guava', version:'16.0'
+  testCompile project(':okhttp-testing-support')
+    testCompile group: 'junit', name: 'junit', version:'4.11'
+}
diff --git a/okhttp-android-support/build.gradle b/okhttp-android-support/build.gradle
new file mode 100644
index 0000000000..088d103c29
--- /dev/null
+++ b/okhttp-android-support/build.gradle
@@ -0,0 +1,8 @@
+
+description = 'OkHttp Android Platform Support'
+dependencies {
+  compile project(':okhttp-urlconnection')
+  testCompile project(':okhttp-testing-support')
+    testCompile group: 'junit', name: 'junit', version:'4.11'
+  testCompile project(':mockwebserver')
+}
diff --git a/okhttp-apache/build.gradle b/okhttp-apache/build.gradle
new file mode 100644
index 0000000000..4d0393461e
--- /dev/null
+++ b/okhttp-apache/build.gradle
@@ -0,0 +1,9 @@
+
+description = 'OkHttp Apache HttpClient'
+dependencies {
+  compile project(':okhttp')
+  testCompile project(':okhttp-testing-support')
+    testCompile group: 'junit', name: 'junit', version:'4.11'
+  testCompile project(':mockwebserver')
+    compileOnly group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.2.2'
+}
diff --git a/okhttp-logging-interceptor/build.gradle b/okhttp-logging-interceptor/build.gradle
new file mode 100644
index 0000000000..9aa18874c4
--- /dev/null
+++ b/okhttp-logging-interceptor/build.gradle
@@ -0,0 +1,8 @@
+
+description = 'OkHttp Logging Interceptor'
+dependencies {
+  compile project(':okhttp')
+    testCompile group: 'junit', name: 'junit', version:'4.11'
+  testCompile project(':mockwebserver')
+  testCompile project(':okhttp-testing-support')
+}
diff --git a/okhttp-testing-support/build.gradle b/okhttp-testing-support/build.gradle
new file mode 100644
index 0000000000..28de71b53c
--- /dev/null
+++ b/okhttp-testing-support/build.gradle
@@ -0,0 +1,6 @@
+
+description = 'OkHttp test support classes'
+dependencies {
+    compile group: 'junit', name: 'junit', version:'4.11'
+  compile project(':okhttp')
+}
diff --git a/okhttp-tests/build.gradle b/okhttp-tests/build.gradle
new file mode 100644
index 0000000000..761e84d18e
--- /dev/null
+++ b/okhttp-tests/build.gradle
@@ -0,0 +1,11 @@
+
+description = 'OkHttp Tests'
+dependencies {
+    compile group: 'com.squareup.okio', name: 'okio', version:'1.6.0'
+  compile project(':okhttp')
+  compile project(':okhttp-urlconnection')
+  testCompile project(':okhttp-testing-support')
+    testCompile group: 'junit', name: 'junit', version:'4.11'
+  testCompile project(':mockwebserver')
+    testCompile group: 'com.google.code.gson', name: 'gson', version:'2.2.3'
+}
diff --git a/okhttp-urlconnection/build.gradle b/okhttp-urlconnection/build.gradle
new file mode 100644
index 0000000000..72769e3325
--- /dev/null
+++ b/okhttp-urlconnection/build.gradle
@@ -0,0 +1,8 @@
+
+description = 'OkHttp URLConnection'
+dependencies {
+  compile project(':okhttp')
+  testCompile project(':okhttp-testing-support')
+    testCompile group: 'junit', name: 'junit', version:'4.11'
+  testCompile project(':mockwebserver')
+}
diff --git a/okhttp-ws-tests/build.gradle b/okhttp-ws-tests/build.gradle
new file mode 100644
index 0000000000..0fec809195
--- /dev/null
+++ b/okhttp-ws-tests/build.gradle
@@ -0,0 +1,8 @@
+
+description = 'OkHttp Web Socket Tests'
+dependencies {
+  compile project(':okhttp-ws')
+  testCompile project(':okhttp-testing-support')
+    testCompile group: 'junit', name: 'junit', version:'4.11'
+  testCompile project(':mockwebserver')
+}
diff --git a/okhttp-ws/build.gradle b/okhttp-ws/build.gradle
new file mode 100644
index 0000000000..93e1f360cd
--- /dev/null
+++ b/okhttp-ws/build.gradle
@@ -0,0 +1,5 @@
+
+description = 'OkHttp Web Sockets'
+dependencies {
+  compile project(':okhttp')
+}
diff --git a/okhttp/build.gradle b/okhttp/build.gradle
new file mode 100644
index 0000000000..776c641552
--- /dev/null
+++ b/okhttp/build.gradle
@@ -0,0 +1,6 @@
+
+description = 'OkHttp'
+dependencies {
+    compile group: 'com.squareup.okio', name: 'okio', version:'1.6.0'
+    compileOnly group: 'com.google.android', name: 'android', version:'4.1.1.4'
+}
diff --git a/samples/crawler/build.gradle b/samples/crawler/build.gradle
new file mode 100644
index 0000000000..ec8f8500b9
--- /dev/null
+++ b/samples/crawler/build.gradle
@@ -0,0 +1,6 @@
+group = 'com.squareup.okhttp3.sample'
+description = 'Sample: Crawler'
+dependencies {
+  compile project(':okhttp')
+    compile group: 'org.jsoup', name: 'jsoup', version:'1.7.3'
+}
diff --git a/samples/guide/build.gradle b/samples/guide/build.gradle
new file mode 100644
index 0000000000..e4e5d0e10b
--- /dev/null
+++ b/samples/guide/build.gradle
@@ -0,0 +1,7 @@
+group = 'com.squareup.okhttp3.sample'
+description = 'Sample: Guide'
+dependencies {
+  compile project(':okhttp')
+  compile project(':okhttp-ws')
+    compile group: 'com.google.code.gson', name: 'gson', version:'2.2.3'
+}
diff --git a/samples/simple-client/build.gradle b/samples/simple-client/build.gradle
new file mode 100644
index 0000000000..1584fe3716
--- /dev/null
+++ b/samples/simple-client/build.gradle
@@ -0,0 +1,6 @@
+group = 'com.squareup.okhttp3.sample'
+description = 'Sample: Simple Client'
+dependencies {
+  compile project(':okhttp')
+    compile group: 'com.google.code.gson', name: 'gson', version:'2.2.3'
+}
diff --git a/samples/static-server/build.gradle b/samples/static-server/build.gradle
new file mode 100644
index 0000000000..d19e63ec8a
--- /dev/null
+++ b/samples/static-server/build.gradle
@@ -0,0 +1,5 @@
+group = 'com.squareup.okhttp3.sample'
+description = 'Sample: Static Server'
+dependencies {
+  compile project(':mockwebserver')
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 0000000000..9318712088
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,36 @@
+rootProject.name = 'parent'
+include ':okhttp'
+include ':okhttp-tests'
+include ':okhttp-android-support'
+include ':okhttp-apache'
+include ':okhttp-testing-support'
+include ':okhttp-urlconnection'
+include ':okhttp-ws'
+include ':okhttp-ws-tests'
+include ':logging-interceptor'
+include ':okcurl'
+include ':mockwebserver'
+include ':sample-parent:guide'
+include ':sample-parent:crawler'
+include ':sample-parent:simple-client'
+include ':sample-parent:static-server'
+include ':sample-parent'
+include ':benchmarks'
+
+project(':okhttp').projectDir = "$rootDir/okhttp" as File
+project(':okhttp-tests').projectDir = "$rootDir/okhttp-tests" as File
+project(':okhttp-android-support').projectDir = "$rootDir/okhttp-android-support" as File
+project(':okhttp-apache').projectDir = "$rootDir/okhttp-apache" as File
+project(':okhttp-testing-support').projectDir = "$rootDir/okhttp-testing-support" as File
+project(':okhttp-urlconnection').projectDir = "$rootDir/okhttp-urlconnection" as File
+project(':okhttp-ws').projectDir = "$rootDir/okhttp-ws" as File
+project(':okhttp-ws-tests').projectDir = "$rootDir/okhttp-ws-tests" as File
+project(':logging-interceptor').projectDir = "$rootDir/okhttp-logging-interceptor" as File
+project(':okcurl').projectDir = "$rootDir/okcurl" as File
+project(':mockwebserver').projectDir = "$rootDir/mockwebserver" as File
+project(':sample-parent:guide').projectDir = "$rootDir/samples/guide" as File
+project(':sample-parent:crawler').projectDir = "$rootDir/samples/crawler" as File
+project(':sample-parent:simple-client').projectDir = "$rootDir/samples/simple-client" as File
+project(':sample-parent:static-server').projectDir = "$rootDir/samples/static-server" as File
+project(':sample-parent').projectDir = "$rootDir/samples" as File
+project(':benchmarks').projectDir = "$rootDir/benchmarks" as File
\ No newline at end of file
