diff --git a/okhttp/src/main/java/okhttp3/Call.java b/okhttp/src/main/java/okhttp3/Call.java
index 5b4669ad21..bb11d85ba8 100644
--- a/okhttp/src/main/java/okhttp3/Call.java
+++ b/okhttp/src/main/java/okhttp3/Call.java
@@ -83,9 +83,13 @@
   /**
    * Create a new, identical call to this one which can be enqueued or executed even if this call
    * has already been.
+   * 创建一个新的，相同的call，一个可以被加入队列或者执行的，即使已经完成的。
    */
   Call clone();
-
+	
+  /**
+   * 工厂模式
+   */
   interface Factory {
     Call newCall(Request request);
   }
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index 92e8e8bf32..514c0696d7 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -121,7 +121,7 @@
  * }</pre>
  *
  * 当空闲时，线程和链接会被自动释放,shutdown不是必须的
- * client.dispatcher().executorService().shutdown()，也会导致接下来的请求被拒绝
+ * 如果你的程序需要积极释放没用的资源，可以调用client.dispatcher().executorService().shutdown()，但也会导致接下来的请求被拒绝
  *
  * <p>Clear the connection pool with {@link ConnectionPool#evictAll() evictAll()}. Note that the
  * connection pool's daemon thread may not exit immediately. <pre>   {@code
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 59ad761354..6c465c3e6a 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -191,6 +191,8 @@ String redactedUrl() {
   Response getResponseWithInterceptorChain() throws IOException {
     // Build a full stack of interceptors.
     List<Interceptor> interceptors = new ArrayList<>();
+    
+    // 下面几个是application interceptors，应用拦截器，一个请求只会执行一次
     // 先加入使用者自定义的拦截器。
     interceptors.addAll(client.interceptors());
     // 负责失败重试以及重定向的过滤器
@@ -204,6 +206,7 @@ Response getResponseWithInterceptorChain() throws IOException {
     if (!forWebSocket) {
       // 配置 OkHttpClient 时设置的过滤器
       // 自定义的networkInterceptors则会加在CallServerInterceptor之前
+      // 这里的拦截器是网络拦截器，可能会多次执行；会在每次网络请求时都会执行，比如重定向
       interceptors.addAll(client.networkInterceptors());
     }
     // 负责向服务器发送请求数据、从服务器读取响应数据的过滤器
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
index 52f9880892..dd15f45bc7 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
@@ -32,6 +32,7 @@
 /**
  * A concrete interceptor chain that carries the entire interceptor chain: all application
  * interceptors, the OkHttp core, all network interceptors, and finally the network caller.
+ * 一个具体的Chain来管理所有的拦截器链：包括应用链、OkHttp核心、所有网络链和网络请求
  */
 public final class RealInterceptorChain implements Interceptor.Chain {
   private final List<Interceptor> interceptors;
diff --git a/samples/guide/src/main/java/okhttp3/guide/GetExample.java b/samples/guide/src/main/java/okhttp3/guide/GetExample.java
index 6f4a323b17..3d9e93995b 100644
--- a/samples/guide/src/main/java/okhttp3/guide/GetExample.java
+++ b/samples/guide/src/main/java/okhttp3/guide/GetExample.java
@@ -1,6 +1,7 @@
 package okhttp3.guide;
 
 import java.io.IOException;
+
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
