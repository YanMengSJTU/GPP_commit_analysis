diff --git a/okhttp-tests/src/test/java/okhttp3/AddressTest.java b/okhttp-tests/src/test/java/okhttp3/AddressTest.java
index ad07b78241..8f468b13ed 100644
--- a/okhttp-tests/src/test/java/okhttp3/AddressTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/AddressTest.java
@@ -35,18 +35,18 @@
 
   @Test public void equalsAndHashcode() throws Exception {
     Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,
-        authenticator, null, protocols, connectionSpecs, proxySelector);
+        authenticator, null, protocols, connectionSpecs, proxySelector, false);
     Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,
-        authenticator, null, protocols, connectionSpecs, proxySelector);
+        authenticator, null, protocols, connectionSpecs, proxySelector, false);
     assertEquals(a, b);
     assertEquals(a.hashCode(), b.hashCode());
   }
 
   @Test public void differentProxySelectorsAreDifferent() throws Exception {
     Address a = new Address("square.com", 80, dns, socketFactory, null, null, null,
-        authenticator, null, protocols, connectionSpecs, new RecordingProxySelector());
+        authenticator, null, protocols, connectionSpecs, new RecordingProxySelector(), false);
     Address b = new Address("square.com", 80, dns, socketFactory, null, null, null,
-        authenticator, null, protocols, connectionSpecs, new RecordingProxySelector());
+        authenticator, null, protocols, connectionSpecs, new RecordingProxySelector(), false);
     assertFalse(a.equals(b));
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
index ae8b0a2f6c..6e3662a98f 100644
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
@@ -195,7 +195,7 @@ private Address newAddress(String name) {
     return new Address(name, 1, Dns.SYSTEM, SocketFactory.getDefault(), null, null, null,
         new RecordingOkAuthenticator("password"), null, Collections.<Protocol>emptyList(),
         Collections.<ConnectionSpec>emptyList(),
-        ProxySelector.getDefault());
+        ProxySelector.getDefault(), false);
   }
 
   private Route newRoute(Address address) {
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
index 9d81d30e91..aaec1bb476 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/connection/RouteSelectorTest.java
@@ -119,7 +119,7 @@
     RouteSelector.Selection selection = routeSelector.next();
     Route route = selection.next();
     routeDatabase.failed(route);
-    routeSelector = new RouteSelector(address, routeDatabase, null, EventListener.NONE);
+    routeSelector = new RouteSelector(address, routeDatabase, null, EventListener.NONE, false);
     selection = routeSelector.next();
     assertRoute(selection.next(), address, NO_PROXY, dns.lookup(uriHost, 0), uriPort);
     assertFalse(selection.hasNext());
@@ -140,7 +140,7 @@
 
   @Test public void explicitProxyTriesThatProxysAddressesOnly() throws Exception {
     Address address = new Address(uriHost, uriPort, dns, socketFactory, null, null, null,
-        authenticator, proxyA, protocols, connectionSpecs, proxySelector);
+        authenticator, proxyA, protocols, connectionSpecs, proxySelector, false);
     RouteSelector routeSelector = new RouteSelector(address, routeDatabase, null,
         EventListener.NONE);
 
@@ -158,7 +158,7 @@
 
   @Test public void explicitDirectProxy() throws Exception {
     Address address = new Address(uriHost, uriPort, dns, socketFactory, null, null, null,
-        authenticator, NO_PROXY, protocols, connectionSpecs, proxySelector);
+        authenticator, NO_PROXY, protocols, connectionSpecs, proxySelector, false);
     RouteSelector routeSelector = new RouteSelector(address, routeDatabase, null,
         EventListener.NONE);
 
@@ -188,7 +188,7 @@
     };
 
     Address address = new Address(uriHost, uriPort, dns, socketFactory, null, null, null,
-        authenticator, null, protocols, connectionSpecs, nullProxySelector);
+        authenticator, null, protocols, connectionSpecs, nullProxySelector, false);
     RouteSelector routeSelector = new RouteSelector(address, routeDatabase, null,
         EventListener.NONE);
     assertTrue(routeSelector.hasNext());
@@ -455,6 +455,6 @@ private Address httpAddress() {
 
   private Address httpsAddress() {
     return new Address(uriHost, uriPort, dns, socketFactory, sslSocketFactory,
-        hostnameVerifier, null, authenticator, null, protocols, connectionSpecs, proxySelector);
+        hostnameVerifier, null, authenticator, null, protocols, connectionSpecs, proxySelector, false);
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/Address.java b/okhttp/src/main/java/okhttp3/Address.java
index 9df666ad78..0d2a1fa1f7 100644
--- a/okhttp/src/main/java/okhttp3/Address.java
+++ b/okhttp/src/main/java/okhttp3/Address.java
@@ -38,6 +38,7 @@
 public final class Address {
   final HttpUrl url;
   final Dns dns;
+  final boolean useTor;
   final SocketFactory socketFactory;
   final Authenticator proxyAuthenticator;
   final List<Protocol> protocols;
@@ -52,7 +53,8 @@ public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory
       @Nullable SSLSocketFactory sslSocketFactory, @Nullable HostnameVerifier hostnameVerifier,
       @Nullable CertificatePinner certificatePinner, Authenticator proxyAuthenticator,
       @Nullable Proxy proxy, List<Protocol> protocols, List<ConnectionSpec> connectionSpecs,
-      ProxySelector proxySelector) {
+      ProxySelector proxySelector,
+                 boolean useTor) {
     this.url = new HttpUrl.Builder()
         .scheme(sslSocketFactory != null ? "https" : "http")
         .host(uriHost)
@@ -61,6 +63,7 @@ public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory
 
     if (dns == null) throw new NullPointerException("dns == null");
     this.dns = dns;
+    this.useTor = useTor;
 
     if (socketFactory == null) throw new NullPointerException("socketFactory == null");
     this.socketFactory = socketFactory;
@@ -98,6 +101,10 @@ public Dns dns() {
     return dns;
   }
 
+  public boolean useTor() {
+    return useTor;
+  }
+
   /** Returns the socket factory for new connections. */
   public SocketFactory socketFactory() {
     return socketFactory;
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index f69cab89ba..a95ee070b8 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -214,6 +214,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   final Authenticator authenticator;
   final ConnectionPool connectionPool;
   final Dns dns;
+  final boolean useTor;
   final boolean followSslRedirects;
   final boolean followRedirects;
   final boolean retryOnConnectionFailure;
@@ -261,6 +262,7 @@ public OkHttpClient() {
     this.authenticator = builder.authenticator;
     this.connectionPool = builder.connectionPool;
     this.dns = builder.dns;
+    this.useTor = builder.useTor;
     this.followSslRedirects = builder.followSslRedirects;
     this.followRedirects = builder.followRedirects;
     this.retryOnConnectionFailure = builder.retryOnConnectionFailure;
@@ -313,6 +315,10 @@ public int readTimeoutMillis() {
     return readTimeout;
   }
 
+  public boolean useTor() {
+    return useTor;
+  }
+
   /** Default write timeout (in milliseconds). */
   public int writeTimeoutMillis() {
     return writeTimeout;
@@ -462,6 +468,7 @@ public Builder newBuilder() {
     Authenticator authenticator;
     ConnectionPool connectionPool;
     Dns dns;
+    boolean useTor;
     boolean followSslRedirects;
     boolean followRedirects;
     boolean retryOnConnectionFailure;
@@ -484,6 +491,7 @@ public Builder() {
       authenticator = Authenticator.NONE;
       connectionPool = new ConnectionPool();
       dns = Dns.SYSTEM;
+      useTor = false;
       followSslRedirects = true;
       followRedirects = true;
       retryOnConnectionFailure = true;
@@ -514,6 +522,7 @@ public Builder() {
       this.authenticator = okHttpClient.authenticator;
       this.connectionPool = okHttpClient.connectionPool;
       this.dns = okHttpClient.dns;
+      this.useTor = okHttpClient.useTor;
       this.followSslRedirects = okHttpClient.followSslRedirects;
       this.followRedirects = okHttpClient.followRedirects;
       this.retryOnConnectionFailure = okHttpClient.retryOnConnectionFailure;
@@ -574,6 +583,11 @@ public Builder proxy(@Nullable Proxy proxy) {
       return this;
     }
 
+    public Builder useTor(boolean useTor) {
+        this.useTor = useTor;
+        return this;
+    }
+
     /**
      * Sets the proxy selection policy to be used if no {@link #proxy proxy} is specified
      * explicitly. The proxy selector may return multiple proxies; in that case they will be tried
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
index 40752ce23d..0252f165e9 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
@@ -176,7 +176,7 @@ private void resetNextInetSocketAddress(Proxy proxy) throws IOException {
           + "; port is out of range");
     }
 
-    if (proxy.type() == Proxy.Type.SOCKS) {
+    if (proxy.type() == Proxy.Type.SOCKS || address.useTor()) {
       inetSocketAddresses.add(InetSocketAddress.createUnresolved(socketHost, socketPort));
     } else {
       eventListener.dnsStart(call, socketHost);
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
index 937ba28ea7..89c8a18c02 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
@@ -201,7 +201,7 @@ private Address createAddress(HttpUrl url) {
 
     return new Address(url.host(), url.port(), client.dns(), client.socketFactory(),
         sslSocketFactory, hostnameVerifier, certificatePinner, client.proxyAuthenticator(),
-        client.proxy(), client.protocols(), client.connectionSpecs(), client.proxySelector());
+        client.proxy(), client.protocols(), client.connectionSpecs(), client.proxySelector(), client.useTor()); );
   }
 
   /**
