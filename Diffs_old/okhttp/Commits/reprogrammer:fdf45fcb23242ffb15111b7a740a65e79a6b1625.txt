diff --git a/okhttp/.classpath b/okhttp/.classpath
new file mode 100644
index 0000000000..08f585c154
--- /dev/null
+++ b/okhttp/.classpath
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry including="**/*.java" kind="src" output="target/test-classes" path="src/test/java"/>
+	<classpathentry including="**/*.java" kind="src" path="src/main/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="var" path="M2_REPO/org/mortbay/jetty/npn/npn-boot/8.1.2.v20120308/npn-boot-8.1.2.v20120308.jar"/>
+	<classpathentry kind="var" path="M2_REPO/junit/junit/4.10/junit-4.10.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcprov-jdk15on/1.47/bcprov-jdk15on-1.47.jar"/>
+	<classpathentry kind="var" path="M2_REPO/com/google/mockwebserver/mockwebserver/20130122/mockwebserver-20130122.jar"/>
+	<classpathentry kind="lib" path="lib/annotations.jar"/>
+	<classpathentry kind="output" path="target/classes"/>
+</classpath>
diff --git a/okhttp/.project b/okhttp/.project
new file mode 100644
index 0000000000..e1cdf9a02e
--- /dev/null
+++ b/okhttp/.project
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+  <name>okhttp</name>
+  <comment>An HTTP+SPDY client for Android and Java applications. NO_M2ECLIPSE_SUPPORT: Project files created with the maven-eclipse-plugin are not supported in M2Eclipse.</comment>
+  <projects/>
+  <buildSpec>
+    <buildCommand>
+      <name>org.eclipse.jdt.core.javabuilder</name>
+    </buildCommand>
+  </buildSpec>
+  <natures>
+    <nature>org.eclipse.jdt.core.javanature</nature>
+  </natures>
+</projectDescription>
\ No newline at end of file
diff --git a/okhttp/.settings/org.eclipse.jdt.core.prefs b/okhttp/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000000..a0721cb3cf
--- /dev/null
+++ b/okhttp/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,5 @@
+#Sat Nov 30 17:52:05 CST 2013
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.source=1.6
+org.eclipse.jdt.core.compiler.compliance=1.6
diff --git a/okhttp/lib/annotations.jar b/okhttp/lib/annotations.jar
new file mode 100644
index 0000000000..e5cde30a85
Binary files /dev/null and b/okhttp/lib/annotations.jar differ
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
index 187413db82..a56d4b6ee6 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/DiskLruCache.java
@@ -41,6 +41,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import edu.illinois.keshmesh.annotations.EntryPoint;
+
 /**
  * A cache that uses a bounded amount of space on a filesystem. Each cache
  * entry has a string key and a fixed number of values. Each key must match
@@ -196,6 +198,7 @@ private DiskLruCache(File directory, int appVersion, int valueCount, long maxSiz
    * @param maxSize the maximum number of bytes this cache should use to store
    * @throws IOException if reading or writing the cache directory fails
    */
+  @EntryPoint
   public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)
       throws IOException {
     if (maxSize <= 0) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
index b3e248c34a..617f7674dd 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java
@@ -18,6 +18,9 @@
 
 import com.squareup.okhttp.internal.NamedRunnable;
 import com.squareup.okhttp.internal.Util;
+
+import edu.illinois.keshmesh.annotations.EntryPoint;
+
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
@@ -161,6 +164,7 @@ public long getIdleStartTimeNs() {
    * @param in true to create an input stream that the remote peer can use to
    * send data to us. Corresponds to {@code FLAG_UNIDIRECTIONAL}.
    */
+  @EntryPoint
   public SpdyStream newStream(List<String> requestHeaders, boolean out, boolean in)
       throws IOException {
     int flags = (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);
