diff --git a/.gitignore b/.gitignore
index 226a3f3d65..ca2af6dcf2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+.gradle
 .classpath
 .project
 .settings
diff --git a/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java
index c9a2da9a39..0e71aa91ff 100644
--- a/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java
+++ b/mockwebserver/src/main/java/okhttp3/internal/http2/Http2Server.java
@@ -51,6 +51,8 @@ public Http2Server(File baseDirectory, SSLSocketFactory sslSocketFactory) {
   }
 
   private void run() throws Exception {
+    // HttpServer的创建
+    // OKHttp作为Server??
     ServerSocket serverSocket = new ServerSocket(8888);
     serverSocket.setReuseAddress(true);
 
@@ -62,6 +64,7 @@ private void run() throws Exception {
         SSLSocket sslSocket = doSsl(socket);
         String protocolString = Platform.get().getSelectedProtocol(sslSocket);
         Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null;
+
         if (protocol != Protocol.HTTP_2) {
           throw new ProtocolException("Protocol " + protocol + " unsupported");
         }
@@ -84,8 +87,12 @@ private SSLSocket doSsl(Socket socket) throws IOException {
     SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(
         socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);
     sslSocket.setUseClientMode(false);
+
     Platform.get().configureTlsExtensions(sslSocket, null,
         Collections.singletonList(Protocol.HTTP_2));
+
+    // ssl的握手
+    // 应用层实现，需要openssl-1.0.2+
     sslSocket.startHandshake();
     return sslSocket;
   }
diff --git a/okhttp/src/main/java/okhttp3/Dns.java b/okhttp/src/main/java/okhttp3/Dns.java
index 1616cde8df..b92fa7b1cd 100644
--- a/okhttp/src/main/java/okhttp3/Dns.java
+++ b/okhttp/src/main/java/okhttp3/Dns.java
@@ -37,6 +37,8 @@
     // 系统的DNS实现
     @Override public List<InetAddress> lookup(String hostname) throws UnknownHostException {
       if (hostname == null) throw new UnknownHostException("hostname == null");
+
+      // 默认的实现
       return Arrays.asList(InetAddress.getAllByName(hostname));
     }
   };
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java
index 2548705eed..965991f9c8 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java
@@ -220,12 +220,17 @@ private Http2Stream newStream(
         }
         streamId = nextStreamId;
         nextStreamId += 2;
+
+        // 如何构建stream呢?
         stream = new Http2Stream(streamId, this, outFinished, inFinished, requestHeaders);
+
         flushHeaders = !out || bytesLeftInWriteWindow == 0L || stream.bytesLeftInWriteWindow == 0L;
         if (stream.isOpen()) {
           streams.put(streamId, stream);
         }
       }
+
+      // 开始写stream
       if (associatedStreamId == 0) {
         writer.synStream(outFinished, streamId, associatedStreamId, requestHeaders);
       } else if (client) {
diff --git a/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
index a85df784d7..515044b9c4 100644
--- a/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
+++ b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.java
@@ -45,15 +45,24 @@ private OkHostnameVerifier() {
 
   @Override
   public boolean verify(String host, SSLSession session) {
+    // 如何验证host呢?
+    // 似乎性能上没有可以优化的地方?
     try {
+      // 从session中获取证书， 取第一个证书
       Certificate[] certificates = session.getPeerCertificates();
+      // 验证
       return verify(host, (X509Certificate) certificates[0]);
+
+      // TODO: 如何自定义呢？
+      ///      从OkHostnameVerifier派生，对于制定的域名直接返回true, 否则调用基类的方法，做更加耗时的验证
     } catch (SSLException e) {
       return false;
     }
   }
 
   public boolean verify(String host, X509Certificate certificate) {
+
+    // 以IP， Hostname方式来验证host
     return verifyAsIpAddress(host)
         ? verifyIpAddress(host, certificate)
         : verifyHostname(host, certificate);
