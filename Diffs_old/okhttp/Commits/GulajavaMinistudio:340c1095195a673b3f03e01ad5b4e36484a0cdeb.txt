diff --git a/android-test/build.gradle b/android-test/build.gradle
index fb245ae02c..1f6c8248aa 100644
--- a/android-test/build.gradle
+++ b/android-test/build.gradle
@@ -25,18 +25,24 @@ android {
     versionName "1.0"
 
     testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    testInstrumentationRunnerArguments(['notClass': 'org.conscrypt.KitKatPlatformOpenSSLSocketImplAdapter'])
   }
 }
 
 dependencies {
   implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
+  implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"
   implementation project(':okhttp')
   testImplementation 'junit:junit:4.12'
   androidTestImplementation(project(':okhttp-testing-support')) {
-     exclude group: 'org.openjsse', module: 'openjsse'
+    exclude group: 'org.openjsse', module: 'openjsse'
+    exclude group: 'org.conscrypt', module: 'conscrypt-openjdk-uber'
   }
+  androidTestImplementation "org.conscrypt:conscrypt-android:2.2.1"
   androidTestImplementation project(':mockwebserver')
   androidTestImplementation project(':okhttp-tls')
+  androidTestImplementation project(':okhttp-dnsoverhttps')
+  androidTestImplementation project(':okhttp-logging-interceptor')
   androidTestImplementation 'com.android.support.test:runner:1.0.2'
   androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
   androidTestImplementation 'com.squareup.moshi:moshi:1.8.0'
diff --git a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
index 3046117142..4157a047c8 100644
--- a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
+++ b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
@@ -23,16 +23,21 @@ import okhttp3.Call
 import okhttp3.CertificatePinner
 import okhttp3.Connection
 import okhttp3.EventListener
+import okhttp3.HttpUrl.Companion.toHttpUrl
 import okhttp3.OkHttpClient
 import okhttp3.Protocol
 import okhttp3.RecordingEventListener
 import okhttp3.Request
 import okhttp3.TlsVersion
+import okhttp3.dnsoverhttps.DnsOverHttps
+import okhttp3.internal.asFactory
 import okhttp3.internal.platform.Platform
+import okhttp3.logging.LoggingEventListener
 import okhttp3.mockwebserver.MockResponse
 import okhttp3.mockwebserver.MockWebServer
 import okhttp3.tls.internal.TlsUtil.localhost
 import okio.ByteString.Companion.toByteString
+import org.conscrypt.Conscrypt
 import org.junit.After
 import org.junit.Assert.assertEquals
 import org.junit.Assert.assertTrue
@@ -46,6 +51,7 @@ import org.junit.Test
 import org.junit.runner.RunWith
 import java.net.InetAddress
 import java.net.UnknownHostException
+import java.security.Security
 import javax.net.ssl.SSLPeerUnverifiedException
 import javax.net.ssl.SSLSocket
 
@@ -89,6 +95,36 @@ class OkHttpTest {
     }
   }
 
+  @Test
+  fun testConscryptRequest() {
+    assumeNetwork()
+
+    try {
+      Security.insertProviderAt(Conscrypt.newProviderBuilder().build(), 1)
+
+      val request = Request.Builder().url("https://facebook.com/robots.txt").build()
+
+      var socketClass: String? = null
+
+      client = OkHttpClient.Builder().eventListener(object : EventListener() {
+        override fun connectionAcquired(call: Call, connection: Connection) {
+          socketClass = connection.socket().javaClass.name
+        }
+      }).build()
+
+      val response = client.newCall(request).execute()
+
+      response.use {
+        assertEquals(Protocol.HTTP_2, response.protocol)
+        assertEquals(TlsVersion.TLS_1_3, response.handshake?.tlsVersion)
+        assertEquals(200, response.code)
+        assertEquals("org.conscrypt.Java8FileDescriptorSocket", socketClass)
+      }
+    } finally {
+      Security.removeProvider("Conscrypt")
+    }
+  }
+
   @Test
   fun testRequestUsesAndroidConscrypt() {
     assumeNetwork()
@@ -308,6 +344,37 @@ class OkHttpTest {
     assertEquals(sessionIds[0], sessionIds[1])
   }
 
+  @Test
+  fun testDnsOverHttps() {
+    assumeNetwork()
+
+    client = client.newBuilder()
+        .eventListenerFactory(LoggingEventListener.Factory())
+        .build()
+
+    val dohDns = buildCloudflareIp(client)
+    val dohEnabledClient =
+        client.newBuilder().eventListenerFactory(EventListener.NONE.asFactory()).dns(dohDns).build()
+
+    dohEnabledClient.get("https://www.twitter.com/robots.txt")
+    dohEnabledClient.get("https://www.facebook.com/robots.txt")
+  }
+
+  private fun OkHttpClient.get(url: String) {
+    val request = Request.Builder().url(url).build()
+    val response = this.newCall(request).execute()
+
+    response.use {
+      assertEquals(200, response.code)
+    }
+  }
+
+  fun buildCloudflareIp(bootstrapClient: OkHttpClient): DnsOverHttps {
+    return DnsOverHttps.Builder().client(bootstrapClient)
+        .url("https://1.1.1.1/dns-query".toHttpUrl())
+        .build()
+  }
+
   private fun enableTls() {
     client = client.newBuilder()
         .sslSocketFactory(
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
index 14f69c51e0..aded20dcf0 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
@@ -719,7 +719,7 @@ class MockWebServer : ExternalResource(), Closeable {
     } else if (chunked) {
       hasBody = true
       while (true) {
-        val chunkSize = Integer.parseInt(source.readUtf8LineStrict().trim(), 16)
+        val chunkSize = source.readUtf8LineStrict().trim().toInt(16)
         if (chunkSize == 0) {
           readEmptyLine(source)
           break
@@ -762,7 +762,7 @@ class MockWebServer : ExternalResource(), Closeable {
         .build()
     val statusParts = response.status.split(' ', limit = 3)
     val fancyResponse = Response.Builder()
-        .code(Integer.parseInt(statusParts[1]))
+        .code(statusParts[1].toInt())
         .message(statusParts[2])
         .headers(response.headers)
         .request(fancyRequest)
diff --git a/okhttp/src/main/java/okhttp3/Cookie.kt b/okhttp/src/main/java/okhttp3/Cookie.kt
index 3a16bb64f9..d56aa593a1 100644
--- a/okhttp/src/main/java/okhttp3/Cookie.kt
+++ b/okhttp/src/main/java/okhttp3/Cookie.kt
@@ -501,19 +501,19 @@ class Cookie private constructor(
 
         when {
           hour == -1 && matcher.usePattern(TIME_PATTERN).matches() -> {
-            hour = Integer.parseInt(matcher.group(1))
-            minute = Integer.parseInt(matcher.group(2))
-            second = Integer.parseInt(matcher.group(3))
+            hour = matcher.group(1).toInt()
+            minute = matcher.group(2).toInt()
+            second = matcher.group(3).toInt()
           }
           dayOfMonth == -1 && matcher.usePattern(DAY_OF_MONTH_PATTERN).matches() -> {
-            dayOfMonth = Integer.parseInt(matcher.group(1))
+            dayOfMonth = matcher.group(1).toInt()
           }
           month == -1 && matcher.usePattern(MONTH_PATTERN).matches() -> {
             val monthString = matcher.group(1).toLowerCase(Locale.US)
             month = MONTH_PATTERN.pattern().indexOf(monthString) / 4 // Sneaky! jan=1, dec=12.
           }
           year == -1 && matcher.usePattern(YEAR_PATTERN).matches() -> {
-            year = Integer.parseInt(matcher.group(1))
+            year = matcher.group(1).toInt()
           }
         }
 
diff --git a/okhttp/src/main/java/okhttp3/HttpUrl.kt b/okhttp/src/main/java/okhttp3/HttpUrl.kt
index b415928d83..1e905dc91a 100644
--- a/okhttp/src/main/java/okhttp3/HttpUrl.kt
+++ b/okhttp/src/main/java/okhttp3/HttpUrl.kt
@@ -1540,7 +1540,7 @@ class HttpUrl internal constructor(
         return try {
           // Canonicalize the port string to skip '\n' etc.
           val portString = input.canonicalize(pos = pos, limit = limit, encodeSet = "")
-          val i = Integer.parseInt(portString)
+          val i = portString.toInt()
           if (i in 1..65535) i else -1
         } catch (_: NumberFormatException) {
           -1 // Invalid port.
