diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
index 14f69c51e0..aded20dcf0 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.kt
@@ -719,7 +719,7 @@ class MockWebServer : ExternalResource(), Closeable {
     } else if (chunked) {
       hasBody = true
       while (true) {
-        val chunkSize = Integer.parseInt(source.readUtf8LineStrict().trim(), 16)
+        val chunkSize = source.readUtf8LineStrict().trim().toInt(16)
         if (chunkSize == 0) {
           readEmptyLine(source)
           break
@@ -762,7 +762,7 @@ class MockWebServer : ExternalResource(), Closeable {
         .build()
     val statusParts = response.status.split(' ', limit = 3)
     val fancyResponse = Response.Builder()
-        .code(Integer.parseInt(statusParts[1]))
+        .code(statusParts[1].toInt())
         .message(statusParts[2])
         .headers(response.headers)
         .request(fancyRequest)
diff --git a/okhttp/src/main/java/okhttp3/Cookie.kt b/okhttp/src/main/java/okhttp3/Cookie.kt
index 3a16bb64f9..d56aa593a1 100644
--- a/okhttp/src/main/java/okhttp3/Cookie.kt
+++ b/okhttp/src/main/java/okhttp3/Cookie.kt
@@ -501,19 +501,19 @@ class Cookie private constructor(
 
         when {
           hour == -1 && matcher.usePattern(TIME_PATTERN).matches() -> {
-            hour = Integer.parseInt(matcher.group(1))
-            minute = Integer.parseInt(matcher.group(2))
-            second = Integer.parseInt(matcher.group(3))
+            hour = matcher.group(1).toInt()
+            minute = matcher.group(2).toInt()
+            second = matcher.group(3).toInt()
           }
           dayOfMonth == -1 && matcher.usePattern(DAY_OF_MONTH_PATTERN).matches() -> {
-            dayOfMonth = Integer.parseInt(matcher.group(1))
+            dayOfMonth = matcher.group(1).toInt()
           }
           month == -1 && matcher.usePattern(MONTH_PATTERN).matches() -> {
             val monthString = matcher.group(1).toLowerCase(Locale.US)
             month = MONTH_PATTERN.pattern().indexOf(monthString) / 4 // Sneaky! jan=1, dec=12.
           }
           year == -1 && matcher.usePattern(YEAR_PATTERN).matches() -> {
-            year = Integer.parseInt(matcher.group(1))
+            year = matcher.group(1).toInt()
           }
         }
 
diff --git a/okhttp/src/main/java/okhttp3/HttpUrl.kt b/okhttp/src/main/java/okhttp3/HttpUrl.kt
index b415928d83..1e905dc91a 100644
--- a/okhttp/src/main/java/okhttp3/HttpUrl.kt
+++ b/okhttp/src/main/java/okhttp3/HttpUrl.kt
@@ -1540,7 +1540,7 @@ class HttpUrl internal constructor(
         return try {
           // Canonicalize the port string to skip '\n' etc.
           val portString = input.canonicalize(pos = pos, limit = limit, encodeSet = "")
-          val i = Integer.parseInt(portString)
+          val i = portString.toInt()
           if (i in 1..65535) i else -1
         } catch (_: NumberFormatException) {
           -1 // Invalid port.
