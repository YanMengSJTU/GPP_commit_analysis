diff --git a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
index e99436bed7..0bec4bd248 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
@@ -103,8 +103,18 @@ public CallServerInterceptor(boolean forWebSocket) {
               new CountingSink(httpCodec.createRequestBody(request, contentLength));
           BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);
 
-          request.body().writeTo(bufferedRequestBody);
-          bufferedRequestBody.close();
+          // if the requestBody is a file, this can throw an IOException
+          // which further up by the retry interceptor gets treated as a server
+          // IOException and assumes the socket is closed.
+          // We mitigate this by catching here, ensuring a close,
+          // and throwing
+          try {
+            request.body().writeTo(bufferedRequestBody);
+          } catch (IOException e) {
+            throw new ClientIOException();
+          } finally {
+            bufferedRequestBody.close();
+          }
           realChain.eventListener()
               .requestBodyEnd(realChain.call(), requestBodyOut.successfulCount);
         }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/ClientIOException.java b/okhttp/src/main/java/okhttp3/internal/http/ClientIOException.java
new file mode 100644
index 0000000000..e0c5b47eb1
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/http/ClientIOException.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright (C) 2016 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal.http;
+
+import java.io.IOException;
+
+public final class ClientIOException extends IOException {
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
index f8e787acac..5d91862cc0 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
@@ -221,6 +221,9 @@ private boolean recover(IOException e, StreamAllocation streamAllocation,
       boolean requestSendStarted, Request userRequest) {
     streamAllocation.streamFailed(e);
 
+    // The client threw an IO exception (failed file read, for example)
+    if (e instanceof ClientIOException) return false;
+
     // The application layer has forbidden retries.
     if (!client.retryOnConnectionFailure()) return false;
 
