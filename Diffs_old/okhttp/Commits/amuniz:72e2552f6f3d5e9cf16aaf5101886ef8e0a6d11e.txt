diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java
index 17a7941961..73691d4b54 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockResponse.java
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import okhttp3.Headers;
-import okhttp3.NewWebSocket;
+import okhttp3.WebSocketListener;
 import okhttp3.internal.Internal;
 import okhttp3.internal.http2.Settings;
 import okio.Buffer;
@@ -45,7 +45,7 @@
 
   private List<PushPromise> promises = new ArrayList<>();
   private Settings settings;
-  private NewWebSocket.Listener webSocketListener;
+  private WebSocketListener webSocketListener;
 
   /** Creates a new mock response with an empty body. */
   public MockResponse() {
@@ -284,7 +284,7 @@ public Settings getSettings() {
    * Attempts to perform a web socket upgrade on the connection. This will overwrite any previously
    * set status or body.
    */
-  public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {
+  public MockResponse withWebSocketUpgrade(WebSocketListener listener) {
     setStatus("HTTP/1.1 101 Switching Protocols");
     setHeader("Connection", "Upgrade");
     setHeader("Upgrade", "websocket");
@@ -293,7 +293,7 @@ public MockResponse withWebSocketUpgrade(NewWebSocket.Listener listener) {
     return this;
   }
 
-  public NewWebSocket.Listener getWebSocketListener() {
+  public WebSocketListener getWebSocketListener() {
     return webSocketListener;
   }
 
diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
index 75fde27f4f..33e0bd667f 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
@@ -69,7 +69,7 @@
 import okhttp3.internal.http2.Http2Stream;
 import okhttp3.internal.http2.Settings;
 import okhttp3.internal.platform.Platform;
-import okhttp3.internal.ws.RealNewWebSocket;
+import okhttp3.internal.ws.RealWebSocket;
 import okhttp3.internal.ws.WebSocketProtocol;
 import okio.Buffer;
 import okio.BufferedSink;
@@ -676,12 +676,12 @@ private void handleWebSocketUpgrade(Socket socket, BufferedSource source, Buffer
     replyExecutor.allowCoreThreadTimeOut(true);
 
     final CountDownLatch connectionClose = new CountDownLatch(1);
-    RealNewWebSocket.Streams streams = new RealNewWebSocket.Streams(false, source, sink) {
+    RealWebSocket.Streams streams = new RealWebSocket.Streams(false, source, sink) {
       @Override public void close() {
         connectionClose.countDown();
       }
     };
-    RealNewWebSocket webSocket = new RealNewWebSocket(fancyRequest,
+    RealWebSocket webSocket = new RealWebSocket(fancyRequest,
         response.getWebSocketListener(), new SecureRandom());
     response.getWebSocketListener().onOpen(webSocket, fancyResponse);
     webSocket.initReaderAndWriter(streams);
diff --git a/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
index 87e99b552d..37333d62e9 100644
--- a/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
+++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
@@ -36,7 +36,7 @@ public static void main(String... args) throws IOException {
 
   final OkHttpClient client = new OkHttpClient();
 
-  private NewWebSocket newWebSocket(String path, NewWebSocket.Listener listener) {
+  private WebSocket newWebSocket(String path, WebSocketListener listener) {
     Request request = new Request.Builder().url(HOST + path).build();
     return client.newWebSocket(request, listener);
   }
@@ -59,26 +59,26 @@ public void run() throws IOException {
   private void runTest(final long number, final long count) {
     final CountDownLatch latch = new CountDownLatch(1);
     final AtomicLong startNanos = new AtomicLong();
-    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new NewWebSocket.Listener() {
-      @Override public void onOpen(NewWebSocket webSocket, Response response) {
+    newWebSocket("/runCase?case=" + number + "&agent=okhttp", new WebSocketListener() {
+      @Override public void onOpen(WebSocket webSocket, Response response) {
         System.out.println("Executing test case " + number + "/" + count);
         startNanos.set(System.nanoTime());
       }
 
-      @Override public void onMessage(final NewWebSocket webSocket, final ByteString bytes) {
+      @Override public void onMessage(final WebSocket webSocket, final ByteString bytes) {
         webSocket.send(bytes);
       }
 
-      @Override public void onMessage(final NewWebSocket webSocket, final String text) {
+      @Override public void onMessage(final WebSocket webSocket, final String text) {
         webSocket.send(text);
       }
 
-      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {
+      @Override public void onClosing(WebSocket webSocket, int code, String reason) {
         webSocket.close(1000, null);
         latch.countDown();
       }
 
-      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {
+      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {
         t.printStackTrace(System.out);
         latch.countDown();
       }
@@ -100,17 +100,17 @@ private long getTestCount() throws IOException {
     final CountDownLatch latch = new CountDownLatch(1);
     final AtomicLong countRef = new AtomicLong();
     final AtomicReference<Throwable> failureRef = new AtomicReference<>();
-    newWebSocket("/getCaseCount", new NewWebSocket.Listener() {
-      @Override public void onMessage(NewWebSocket webSocket, String text) {
+    newWebSocket("/getCaseCount", new WebSocketListener() {
+      @Override public void onMessage(WebSocket webSocket, String text) {
         countRef.set(Long.parseLong(text));
       }
 
-      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {
+      @Override public void onClosing(WebSocket webSocket, int code, String reason) {
         webSocket.close(1000, null);
         latch.countDown();
       }
 
-      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {
+      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {
         failureRef.set(t);
         latch.countDown();
       }
@@ -131,13 +131,13 @@ private long getTestCount() throws IOException {
 
   private void updateReports() {
     final CountDownLatch latch = new CountDownLatch(1);
-    newWebSocket("/updateReports?agent=" + Version.userAgent(), new NewWebSocket.Listener() {
-      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {
+    newWebSocket("/updateReports?agent=" + Version.userAgent(), new WebSocketListener() {
+      @Override public void onClosing(WebSocket webSocket, int code, String reason) {
         webSocket.close(code, null);
         latch.countDown();
       }
 
-      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {
+      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {
         latch.countDown();
       }
     });
diff --git a/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java
index b292bc056c..3410775b6c 100644
--- a/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java
+++ b/okhttp-tests/src/test/java/okhttp3/RecordedResponse.java
@@ -32,11 +32,11 @@
 public final class RecordedResponse {
   public final Request request;
   public final Response response;
-  public final NewWebSocket webSocket;
+  public final WebSocket webSocket;
   public final String body;
   public final IOException failure;
 
-  public RecordedResponse(Request request, Response response, NewWebSocket webSocket, String body,
+  public RecordedResponse(Request request, Response response, WebSocket webSocket, String body,
       IOException failure) {
     this.request = request;
     this.response = response;
diff --git a/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java
index bd4ed9edf1..7c857c6253 100644
--- a/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketHttpTest.java
@@ -20,8 +20,8 @@
 import java.util.Random;
 import java.util.logging.Logger;
 import okhttp3.internal.tls.SslClient;
-import okhttp3.internal.ws.NewWebSocketRecorder;
-import okhttp3.internal.ws.RealNewWebSocket;
+import okhttp3.internal.ws.WebSocketRecorder;
+import okhttp3.internal.ws.RealWebSocket;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okio.ByteString;
@@ -39,8 +39,8 @@
   @Rule public final MockWebServer webServer = new MockWebServer();
 
   private final SslClient sslClient = SslClient.localhost();
-  private final NewWebSocketRecorder clientListener = new NewWebSocketRecorder("client");
-  private final NewWebSocketRecorder serverListener = new NewWebSocketRecorder("server");
+  private final WebSocketRecorder clientListener = new WebSocketRecorder("client");
+  private final WebSocketRecorder serverListener = new WebSocketRecorder("server");
   private final Random random = new Random(0);
   private OkHttpClient client = defaultClient().newBuilder()
       .addInterceptor(new Interceptor() {
@@ -58,7 +58,7 @@
 
   @Test public void textMessage() throws IOException {
     webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));
-    NewWebSocket client = enqueueClientWebSocket();
+    WebSocket client = enqueueClientWebSocket();
 
     clientListener.assertOpen();
     serverListener.assertOpen();
@@ -69,7 +69,7 @@
 
   @Test public void binaryMessage() throws IOException {
     webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));
-    RealNewWebSocket client = enqueueClientWebSocket();
+    RealWebSocket client = enqueueClientWebSocket();
 
     clientListener.assertOpen();
     serverListener.assertOpen();
@@ -80,7 +80,7 @@
 
   @Test public void nullStringThrows() throws IOException {
     webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));
-    RealNewWebSocket client = enqueueClientWebSocket();
+    RealWebSocket client = enqueueClientWebSocket();
 
     clientListener.assertOpen();
     try {
@@ -93,7 +93,7 @@
 
   @Test public void nullByteStringThrows() throws IOException {
     webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));
-    RealNewWebSocket client = enqueueClientWebSocket();
+    RealWebSocket client = enqueueClientWebSocket();
 
     clientListener.assertOpen();
     try {
@@ -109,7 +109,7 @@
     enqueueClientWebSocket();
 
     clientListener.assertOpen();
-    NewWebSocket server = serverListener.assertOpen();
+    WebSocket server = serverListener.assertOpen();
 
     server.send("Hello, WebSockets!");
     clientListener.assertTextMessage("Hello, WebSockets!");
@@ -119,8 +119,8 @@
     webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));
 
     final RuntimeException e = new RuntimeException();
-    clientListener.setNextEventDelegate(new NewWebSocket.Listener() {
-      @Override public void onOpen(NewWebSocket webSocket, Response response) {
+    clientListener.setNextEventDelegate(new WebSocketListener() {
+      @Override public void onOpen(WebSocket webSocket, Response response) {
         throw e;
       }
     });
@@ -140,8 +140,8 @@
     webServer.enqueue(new MockResponse().setResponseCode(200).setBody("Body"));
 
     final RuntimeException e = new RuntimeException();
-    clientListener.setNextEventDelegate(new NewWebSocket.Listener() {
-      @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {
+    clientListener.setNextEventDelegate(new WebSocketListener() {
+      @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {
         throw e;
       }
     });
@@ -157,11 +157,11 @@
     enqueueClientWebSocket();
 
     clientListener.assertOpen();
-    NewWebSocket server = serverListener.assertOpen();
+    WebSocket server = serverListener.assertOpen();
 
     final RuntimeException e = new RuntimeException();
-    clientListener.setNextEventDelegate(new NewWebSocket.Listener() {
-      @Override public void onMessage(NewWebSocket webSocket, String text) {
+    clientListener.setNextEventDelegate(new WebSocketListener() {
+      @Override public void onMessage(WebSocket webSocket, String text) {
         throw e;
       }
     });
@@ -176,11 +176,11 @@
     enqueueClientWebSocket();
 
     clientListener.assertOpen();
-    NewWebSocket server = serverListener.assertOpen();
+    WebSocket server = serverListener.assertOpen();
 
     final RuntimeException e = new RuntimeException();
-    clientListener.setNextEventDelegate(new NewWebSocket.Listener() {
-      @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {
+    clientListener.setNextEventDelegate(new WebSocketListener() {
+      @Override public void onClosing(WebSocket webSocket, int code, String reason) {
         throw e;
       }
     });
@@ -209,10 +209,10 @@
   @Test public void clientTimeoutClosesBody() throws IOException {
     webServer.enqueue(new MockResponse().setResponseCode(408));
     webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));
-    RealNewWebSocket client = enqueueClientWebSocket();
+    RealWebSocket client = enqueueClientWebSocket();
 
     clientListener.assertOpen();
-    NewWebSocket server = serverListener.assertOpen();
+    WebSocket server = serverListener.assertOpen();
 
     client.send("abc");
     serverListener.assertTextMessage("abc");
@@ -325,7 +325,7 @@ private void websocketScheme(String scheme) throws IOException {
         .url(scheme + "://" + webServer.getHostName() + ":" + webServer.getPort() + "/")
         .build();
 
-    RealNewWebSocket webSocket = enqueueClientWebSocket(request);
+    RealWebSocket webSocket = enqueueClientWebSocket(request);
     clientListener.assertOpen();
     serverListener.assertOpen();
 
@@ -333,12 +333,12 @@ private void websocketScheme(String scheme) throws IOException {
     serverListener.assertTextMessage("abc");
   }
 
-  private RealNewWebSocket enqueueClientWebSocket() {
+  private RealWebSocket enqueueClientWebSocket() {
     return enqueueClientWebSocket(new Request.Builder().get().url(webServer.url("/")).build());
   }
 
-  private RealNewWebSocket enqueueClientWebSocket(Request request) {
-    RealNewWebSocket webSocket = new RealNewWebSocket(request, clientListener, random);
+  private RealWebSocket enqueueClientWebSocket(Request request) {
+    RealWebSocket webSocket = new RealWebSocket(request, clientListener, random);
     webSocket.connect(client);
     return webSocket;
   }
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
index 580216b076..35ea0e8483 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
@@ -39,18 +39,18 @@
   // zero effect on the behavior of the WebSocket API which is why tests are only written once
   // from the perspective of a single peer.
 
-  private RealNewWebSocket client;
+  private RealWebSocket client;
   private boolean clientConnectionCloseThrows;
   private boolean clientConnectionClosed;
   private final Pipe client2Server = new Pipe(1024L);
   private final BufferedSink client2ServerSink = Okio.buffer(client2Server.sink());
-  private final NewWebSocketRecorder clientListener = new NewWebSocketRecorder("client");
+  private final WebSocketRecorder clientListener = new WebSocketRecorder("client");
 
-  private RealNewWebSocket server;
+  private RealWebSocket server;
   private boolean serverConnectionClosed;
   private final Pipe server2client = new Pipe(1024L);
   private final BufferedSink server2clientSink = Okio.buffer(server2client.sink());
-  private final NewWebSocketRecorder serverListener = new NewWebSocketRecorder("server");
+  private final WebSocketRecorder serverListener = new WebSocketRecorder("server");
 
   @Before public void setUp() throws IOException {
     Random random = new Random(0);
@@ -61,8 +61,8 @@
         .protocol(Protocol.HTTP_1_1)
         .build();
 
-    client = new RealNewWebSocket(response.request(), clientListener, random);
-    client.initReaderAndWriter(new RealNewWebSocket.Streams(
+    client = new RealWebSocket(response.request(), clientListener, random);
+    client.initReaderAndWriter(new RealWebSocket.Streams(
         true, Okio.buffer(server2client.source()), client2ServerSink) {
       @Override public void close() throws IOException {
         source.close();
@@ -78,8 +78,8 @@
       }
     });
 
-    server = new RealNewWebSocket(response.request(), serverListener, random);
-    server.initReaderAndWriter(new RealNewWebSocket.Streams(
+    server = new RealWebSocket(response.request(), serverListener, random);
+    server.initReaderAndWriter(new RealWebSocket.Streams(
         false, Okio.buffer(client2Server.source()), server2clientSink) {
       @Override public void close() throws IOException {
         source.close();
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
index e88f132eea..07ae188ac6 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
@@ -32,7 +32,7 @@
 
 public final class WebSocketReaderTest {
   private final Buffer data = new Buffer();
-  private final NewWebSocketRecorder callback = new NewWebSocketRecorder("client");
+  private final WebSocketRecorder callback = new WebSocketRecorder("client");
   private final Random random = new Random(0);
 
   // Mutually exclusive. Use the one corresponding to the peer whose behavior you wish to test.
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/NewWebSocketRecorder.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
similarity index 89%
rename from okhttp-tests/src/test/java/okhttp3/internal/ws/NewWebSocketRecorder.java
rename to okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
index 68f53a2b52..944ac48bb0 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/NewWebSocketRecorder.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
@@ -19,8 +19,9 @@
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
-import okhttp3.NewWebSocket;
+import okhttp3.WebSocket;
 import okhttp3.Response;
+import okhttp3.WebSocketListener;
 import okhttp3.internal.Util;
 import okhttp3.internal.platform.Platform;
 import okio.ByteString;
@@ -30,24 +31,24 @@
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
-public final class NewWebSocketRecorder extends NewWebSocket.Listener {
+public final class WebSocketRecorder extends WebSocketListener {
   private final String name;
   private final BlockingQueue<Object> events = new LinkedBlockingQueue<>();
-  private NewWebSocket.Listener delegate;
+  private WebSocketListener delegate;
 
-  public NewWebSocketRecorder(String name) {
+  public WebSocketRecorder(String name) {
     this.name = name;
   }
 
   /** Sets a delegate for handling the next callback to this listener. Cleared after invoked. */
-  public void setNextEventDelegate(NewWebSocket.Listener delegate) {
+  public void setNextEventDelegate(WebSocketListener delegate) {
     this.delegate = delegate;
   }
 
-  @Override public void onOpen(NewWebSocket webSocket, Response response) {
+  @Override public void onOpen(WebSocket webSocket, Response response) {
     Platform.get().log(Platform.INFO, "[WS " + name + "] onOpen", null);
 
-    NewWebSocket.Listener delegate = this.delegate;
+    WebSocketListener delegate = this.delegate;
     if (delegate != null) {
       this.delegate = null;
       delegate.onOpen(webSocket, response);
@@ -56,10 +57,10 @@ public void setNextEventDelegate(NewWebSocket.Listener delegate) {
     }
   }
 
-  @Override public void onMessage(NewWebSocket webSocket, ByteString bytes) {
+  @Override public void onMessage(WebSocket webSocket, ByteString bytes) {
     Platform.get().log(Platform.INFO, "[WS " + name + "] onMessage", null);
 
-    NewWebSocket.Listener delegate = this.delegate;
+    WebSocketListener delegate = this.delegate;
     if (delegate != null) {
       this.delegate = null;
       delegate.onMessage(webSocket, bytes);
@@ -69,10 +70,10 @@ public void setNextEventDelegate(NewWebSocket.Listener delegate) {
     }
   }
 
-  @Override public void onMessage(NewWebSocket webSocket, String text) {
+  @Override public void onMessage(WebSocket webSocket, String text) {
     Platform.get().log(Platform.INFO, "[WS " + name + "] onMessage", null);
 
-    NewWebSocket.Listener delegate = this.delegate;
+    WebSocketListener delegate = this.delegate;
     if (delegate != null) {
       this.delegate = null;
       delegate.onMessage(webSocket, text);
@@ -82,10 +83,10 @@ public void setNextEventDelegate(NewWebSocket.Listener delegate) {
     }
   }
 
-  @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {
+  @Override public void onClosing(WebSocket webSocket, int code, String reason) {
     Platform.get().log(Platform.INFO, "[WS " + name + "] onClose " + code, null);
 
-    NewWebSocket.Listener delegate = this.delegate;
+    WebSocketListener delegate = this.delegate;
     if (delegate != null) {
       this.delegate = null;
       delegate.onClosing(webSocket, code, reason);
@@ -94,10 +95,10 @@ public void setNextEventDelegate(NewWebSocket.Listener delegate) {
     }
   }
 
-  @Override public void onClosed(NewWebSocket webSocket, int code, String reason) {
+  @Override public void onClosed(WebSocket webSocket, int code, String reason) {
     Platform.get().log(Platform.INFO, "[WS " + name + "] onClose " + code, null);
 
-    NewWebSocket.Listener delegate = this.delegate;
+    WebSocketListener delegate = this.delegate;
     if (delegate != null) {
       this.delegate = null;
       delegate.onClosed(webSocket, code, reason);
@@ -106,10 +107,10 @@ public void setNextEventDelegate(NewWebSocket.Listener delegate) {
     }
   }
 
-  @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response)  {
+  @Override public void onFailure(WebSocket webSocket, Throwable t, Response response)  {
     Platform.get().log(Platform.INFO, "[WS " + name + "] onFailure", t);
 
-    NewWebSocket.Listener delegate = this.delegate;
+    WebSocketListener delegate = this.delegate;
     if (delegate != null) {
       this.delegate = null;
       delegate.onFailure(webSocket, t, response);
@@ -164,7 +165,7 @@ public void assertExhausted() {
     assertTrue("Remaining events: " + events, events.isEmpty());
   }
 
-  public NewWebSocket assertOpen() {
+  public WebSocket assertOpen() {
     Object event = nextEvent();
     if (!(event instanceof Open)) {
       throw new AssertionError("Expected Open but was " + event);
@@ -234,10 +235,10 @@ public void assertFailure(int code, String body, Class<? extends IOException> cl
   }
 
   static final class Open {
-    final NewWebSocket webSocket;
+    final WebSocket webSocket;
     final Response response;
 
-    Open(NewWebSocket webSocket, Response response) {
+    Open(WebSocket webSocket, Response response) {
       this.webSocket = webSocket;
       this.response = response;
     }
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index a22e7e4484..a8ae6dcb15 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -45,7 +45,7 @@
 import okhttp3.internal.platform.Platform;
 import okhttp3.internal.tls.CertificateChainCleaner;
 import okhttp3.internal.tls.OkHostnameVerifier;
-import okhttp3.internal.ws.RealNewWebSocket;
+import okhttp3.internal.ws.RealWebSocket;
 
 /**
  * Factory for {@linkplain Call calls}, which can be used to send HTTP requests and read their
@@ -117,7 +117,7 @@
  * <p>OkHttp also uses daemon threads for HTTP/2 connections. These will exit automatically if they
  * remain idle.
  */
-public class OkHttpClient implements Cloneable, Call.Factory, NewWebSocket.Factory {
+public class OkHttpClient implements Cloneable, Call.Factory, WebSocket.Factory {
   private static final List<Protocol> DEFAULT_PROTOCOLS = Util.immutableList(
       Protocol.HTTP_2, Protocol.HTTP_1_1);
 
@@ -393,8 +393,8 @@ public Dispatcher dispatcher() {
   /**
    * Uses {@code request} to connect a new web socket.
    */
-  @Override public NewWebSocket newWebSocket(Request request, NewWebSocket.Listener listener) {
-    RealNewWebSocket webSocket = new RealNewWebSocket(request, listener, new SecureRandom());
+  @Override public WebSocket newWebSocket(Request request, WebSocketListener listener) {
+    RealWebSocket webSocket = new RealWebSocket(request, listener, new SecureRandom());
     webSocket.connect(this);
     return webSocket;
   }
diff --git a/okhttp/src/main/java/okhttp3/NewWebSocket.java b/okhttp/src/main/java/okhttp3/WebSocket.java
similarity index 76%
rename from okhttp/src/main/java/okhttp3/NewWebSocket.java
rename to okhttp/src/main/java/okhttp3/WebSocket.java
index 4baff4ff76..12457e535e 100644
--- a/okhttp/src/main/java/okhttp3/NewWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/WebSocket.java
@@ -18,7 +18,7 @@
 import okio.ByteString;
 
 /**
- * A non-blocking interface to a web socket. Use the {@linkplain NewWebSocket.Factory factory} to
+ * A non-blocking interface to a web socket. Use the {@linkplain WebSocket.Factory factory} to
  * create instances; usually this is {@link OkHttpClient}.
  *
  * <h3>Web Socket Lifecycle</h3>
@@ -50,7 +50,7 @@
  * incoming messages. But it does not guarantee that the other peer will successfully receive all of
  * its incoming messages.
  */
-public interface NewWebSocket {
+public interface WebSocket {
   /** Returns the original request that initiated this web socket. */
   Request request();
 
@@ -110,42 +110,6 @@
   void cancel();
 
   interface Factory {
-    NewWebSocket newWebSocket(Request request, Listener listener);
-  }
-
-  abstract class Listener {
-    /**
-     * Invoked when a web socket has been accepted by the remote peer and may begin transmitting
-     * messages.
-     */
-    public void onOpen(NewWebSocket webSocket, Response response) {
-    }
-
-    /** Invoked when a text (type {@code 0x1}) message has been received. */
-    public void onMessage(NewWebSocket webSocket, String text) {
-    }
-
-    /** Invoked when a binary (type {@code 0x2}) message has been received. */
-    public void onMessage(NewWebSocket webSocket, ByteString bytes) {
-    }
-
-    /** Invoked when the peer has indicated that no more incoming messages will be transmitted. */
-    public void onClosing(NewWebSocket webSocket, int code, String reason) {
-    }
-
-    /**
-     * Invoked when both peers have indicated that no more messages will be transmitted and the
-     * connection has been successfully released. No further calls to this listener will be made.
-     */
-    public void onClosed(NewWebSocket webSocket, int code, String reason) {
-    }
-
-    /**
-     * Invoked when a web socket has been closed due to an error reading from or writing to the
-     * network. Both outgoing and incoming messages may have been lost. No further calls to this
-     * listener will be made.
-     */
-    public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {
-    }
+    WebSocket newWebSocket(Request request, WebSocketListener listener);
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/WebSocketListener.java b/okhttp/src/main/java/okhttp3/WebSocketListener.java
new file mode 100644
index 0000000000..d46e916dd8
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/WebSocketListener.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2016 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3;
+
+import okio.ByteString;
+
+public abstract class WebSocketListener {
+  /**
+   * Invoked when a web socket has been accepted by the remote peer and may begin transmitting
+   * messages.
+   */
+  public void onOpen(WebSocket webSocket, Response response) {
+  }
+
+  /** Invoked when a text (type {@code 0x1}) message has been received. */
+  public void onMessage(WebSocket webSocket, String text) {
+  }
+
+  /** Invoked when a binary (type {@code 0x2}) message has been received. */
+  public void onMessage(WebSocket webSocket, ByteString bytes) {
+  }
+
+  /** Invoked when the peer has indicated that no more incoming messages will be transmitted. */
+  public void onClosing(WebSocket webSocket, int code, String reason) {
+  }
+
+  /**
+   * Invoked when both peers have indicated that no more messages will be transmitted and the
+   * connection has been successfully released. No further calls to this listener will be made.
+   */
+  public void onClosed(WebSocket webSocket, int code, String reason) {
+  }
+
+  /**
+   * Invoked when a web socket has been closed due to an error reading from or writing to the
+   * network. Both outgoing and incoming messages may have been lost. No further calls to this
+   * listener will be made.
+   */
+  public void onFailure(WebSocket webSocket, Throwable t, Response response) {
+  }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealNewWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
similarity index 97%
rename from okhttp/src/main/java/okhttp3/internal/ws/RealNewWebSocket.java
rename to okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index fb5888e259..e48a41818b 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealNewWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -28,11 +28,12 @@
 import java.util.concurrent.TimeUnit;
 import okhttp3.Call;
 import okhttp3.Callback;
-import okhttp3.NewWebSocket;
+import okhttp3.WebSocket;
 import okhttp3.OkHttpClient;
 import okhttp3.Protocol;
 import okhttp3.Request;
 import okhttp3.Response;
+import okhttp3.WebSocketListener;
 import okhttp3.internal.Internal;
 import okhttp3.internal.NamedRunnable;
 import okhttp3.internal.Util;
@@ -48,7 +49,7 @@
 import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_BINARY;
 import static okhttp3.internal.ws.WebSocketProtocol.OPCODE_TEXT;
 
-public final class RealNewWebSocket implements NewWebSocket, WebSocketReader.FrameCallback {
+public final class RealWebSocket implements WebSocket, WebSocketReader.FrameCallback {
   private static final List<Protocol> ONLY_HTTP1 = Collections.singletonList(Protocol.HTTP_1_1);
 
   /**
@@ -65,7 +66,7 @@
   /** The application's original request unadulterated by web socket headers. */
   private final Request originalRequest;
 
-  private final Listener listener;
+  private final WebSocketListener listener;
   private final Random random;
   private final String key;
 
@@ -117,7 +118,7 @@
   /** True if this web socket failed and the listener has been notified. */
   private boolean failed;
 
-  public RealNewWebSocket(Request request, Listener listener, Random random) {
+  public RealWebSocket(Request request, WebSocketListener listener, Random random) {
     if (!"GET".equals(request.method())) {
       throw new IllegalArgumentException("Request must be GET: " + request.method());
     }
@@ -183,7 +184,7 @@ public void connect(OkHttpClient client) {
 
         // Process all websocket messages.
         try {
-          listener.onOpen(RealNewWebSocket.this, response);
+          listener.onOpen(RealWebSocket.this, response);
           initReaderAndWriter(streams);
           loopReader();
         } catch (Exception e) {
@@ -382,7 +383,7 @@ private boolean writeOneFrame() throws IOException {
     String receivedCloseReason = null;
     Streams streamsToClose = null;
 
-    synchronized (RealNewWebSocket.this) {
+    synchronized (RealWebSocket.this) {
       if (failed) {
         writerRunning = false;
         return false; // Failed web socket.
diff --git a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
index 817d768971..288fadb7ce 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
@@ -1,13 +1,14 @@
 package okhttp3.recipes;
 
 import java.util.concurrent.TimeUnit;
-import okhttp3.NewWebSocket;
+import okhttp3.WebSocket;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
+import okhttp3.WebSocketListener;
 import okio.ByteString;
 
-public final class WebSocketEcho extends NewWebSocket.Listener {
+public final class WebSocketEcho extends WebSocketListener {
   private void run() {
     OkHttpClient client = new OkHttpClient.Builder()
         .readTimeout(0,  TimeUnit.MILLISECONDS)
@@ -22,27 +23,27 @@ private void run() {
     client.dispatcher().executorService().shutdown();
   }
 
-  @Override public void onOpen(NewWebSocket webSocket, Response response) {
+  @Override public void onOpen(WebSocket webSocket, Response response) {
     webSocket.send("Hello...");
     webSocket.send("...World!");
     webSocket.send(ByteString.decodeHex("deadbeef"));
     webSocket.close(1000, "Goodbye, World!");
   }
 
-  @Override public void onMessage(NewWebSocket webSocket, String text) {
+  @Override public void onMessage(WebSocket webSocket, String text) {
     System.out.println("MESSAGE: " + text);
   }
 
-  @Override public void onMessage(NewWebSocket webSocket, ByteString bytes) {
+  @Override public void onMessage(WebSocket webSocket, ByteString bytes) {
     System.out.println("MESSAGE: " + bytes.hex());
   }
 
-  @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {
+  @Override public void onClosing(WebSocket webSocket, int code, String reason) {
     webSocket.close(1000, null);
     System.out.println("CLOSE: " + code + " " + reason);
   }
 
-  @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {
+  @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {
     t.printStackTrace();
   }
 
diff --git a/samples/slack/src/main/java/okhttp3/slack/RtmSession.java b/samples/slack/src/main/java/okhttp3/slack/RtmSession.java
index 17b0a7bed3..b5802ef4ad 100644
--- a/samples/slack/src/main/java/okhttp3/slack/RtmSession.java
+++ b/samples/slack/src/main/java/okhttp3/slack/RtmSession.java
@@ -17,15 +17,16 @@
 
 import java.io.Closeable;
 import java.io.IOException;
-import okhttp3.NewWebSocket;
+import okhttp3.WebSocket;
 import okhttp3.Response;
+import okhttp3.WebSocketListener;
 
 /** A realtime messaging session. */
-public final class RtmSession extends NewWebSocket.Listener implements Closeable {
+public final class RtmSession extends WebSocketListener implements Closeable {
   private final SlackApi slackApi;
 
   /** Guarded by this. */
-  private NewWebSocket webSocket;
+  private WebSocket webSocket;
 
   public RtmSession(SlackApi slackApi) {
     this.slackApi = slackApi;
@@ -40,21 +41,21 @@ public void open(String accessToken) throws IOException {
 
   // TODO(jwilson): can I read the response body? Do I have to?
   //                the body from slack is a 0-byte-buffer
-  @Override public synchronized void onOpen(NewWebSocket webSocket, Response response) {
+  @Override public synchronized void onOpen(WebSocket webSocket, Response response) {
     System.out.println("onOpen: " + response);
   }
 
   // TOOD(jwilson): decode incoming messages and dispatch them somewhere.
-  @Override public void onMessage(NewWebSocket webSocket, String text) {
+  @Override public void onMessage(WebSocket webSocket, String text) {
     System.out.println("onMessage: " + text);
   }
 
-  @Override public void onClosing(NewWebSocket webSocket, int code, String reason) {
+  @Override public void onClosing(WebSocket webSocket, int code, String reason) {
     webSocket.close(1000, null);
     System.out.println("onClose (" + code + "): " + reason);
   }
 
-  @Override public void onFailure(NewWebSocket webSocket, Throwable t, Response response) {
+  @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {
     // TODO(jwilson): can I read the response body? Do I have to?
     System.out.println("onFailure " + response);
   }
@@ -62,7 +63,7 @@ public void open(String accessToken) throws IOException {
   @Override public void close() throws IOException {
     if (webSocket == null) return;
 
-    NewWebSocket webSocket;
+    WebSocket webSocket;
     synchronized (this) {
       webSocket = this.webSocket;
     }
diff --git a/samples/slack/src/main/java/okhttp3/slack/SlackApi.java b/samples/slack/src/main/java/okhttp3/slack/SlackApi.java
index 3bfee53492..7515a426e8 100644
--- a/samples/slack/src/main/java/okhttp3/slack/SlackApi.java
+++ b/samples/slack/src/main/java/okhttp3/slack/SlackApi.java
@@ -22,10 +22,11 @@
 import java.io.IOException;
 import okhttp3.Call;
 import okhttp3.HttpUrl;
-import okhttp3.NewWebSocket;
+import okhttp3.WebSocket;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
+import okhttp3.WebSocketListener;
 import okio.ByteString;
 
 /**
@@ -105,7 +106,7 @@ public RtmStartResponse rtmStart(String accessToken) throws IOException {
   }
 
   /** See https://api.slack.com/rtm. */
-  public NewWebSocket rtm(HttpUrl url, NewWebSocket.Listener listener) {
+  public WebSocket rtm(HttpUrl url, WebSocketListener listener) {
     return httpClient.newWebSocket(new Request.Builder()
         .url(url)
         .build(), listener);
