diff --git a/.gitignore b/.gitignore
index 49ff556f15..d2b9133572 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,9 +1,27 @@
-# Ignore Gradle project-specific cache directory
+.classpath
+.project
+.settings
 .gradle
+eclipsebin
 
-# Ignore Gradle build output directory
+bin
+gen
 build
+out
+lib
+generated
 
-# IDEA
-.idea/
-*.iml
\ No newline at end of file
+target
+pom.xml.*
+release.properties
+local.properties
+
+.idea
+*.iml
+*.ipr
+*.iws
+classes
+
+obj
+
+.DS_Store
diff --git a/build.gradle b/build.gradle
index 4bb99b42b1..d5e92e6fef 100644
--- a/build.gradle
+++ b/build.gradle
@@ -81,8 +81,6 @@ subprojects { project ->
   targetCompatibility = JavaVersion.VERSION_1_8
 
   apply plugin: 'org.checkerframework'
-  //apply plugin: 'com.jaredsburrows.checkerframework'
-
   apply plugin: 'checkstyle'
   checkstyleMain.exclude '**/CipherSuite.java'
   afterEvaluate {
@@ -126,7 +124,8 @@ subprojects { project ->
              'com.amazon.checkerframework.cryptopolicy.CryptoPolicyComplianceChecker',
              'org.checkerframework.checker.https.HTTPSChecker'
     ]
-    extraJavacArgs = ['-AprintVerboseGenerics', '-Xmaxerrs', '1000', '-AsuppressWarnings=cast.unsafe', "-Astubs=$rootProject.projectDir/stubs"]
+    excludeTests = true
+    extraJavacArgs = ['-Xmaxerrs', '1000', '-AsuppressWarnings=cast.unsafe', "-Astubs=$rootProject.projectDir/stubs"]
   }
 
 //  apply plugin: 'net.ltgt.errorprone'
@@ -135,7 +134,6 @@ subprojects { project ->
 //    errorprone 'com.google.errorprone:error_prone_core:2.3.3'
 
     checkerFramework 'software.amazon.checkerframework:aws-kms-compliance-checker:1.0.2'
-    implementation 'software.amazon.checkerframework:aws-kms-compliance-checker:1.0.2'
     checkerFramework 'software.amazon.checkerframework:aws-crypto-compliance-checker:1.0'
     implementation 'software.amazon.checkerframework:aws-crypto-compliance-checker:1.0'
     checkerFramework 'org.checkerframework:checker:2.+'
diff --git a/checkstyle.xml b/checkstyle.xml
index 60745ee3c0..296d9b0efb 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -6,6 +6,7 @@
 <module name="Checker">
   <module name="SuppressWarningsFilter"/>
   <module name="FileLength"/>
+  <module name="NewlineAtEndOfFile"/>
   <module name="FileTabCharacter"/>
 
   <!-- Trailing spaces -->
diff --git a/gradle/compile.gradle b/gradle/compile.gradle
deleted file mode 100644
index c4c45d4138..0000000000
--- a/gradle/compile.gradle
+++ /dev/null
@@ -1,45 +0,0 @@
-tasks.withType(JavaCompile) {
-  sourceCompatibility = rootProject.versions.java
-  targetCompatibility = rootProject.versions.java
-
-  // Show all warnings except boot classpath
-  configure(options) {
-    compilerArgs << '-Xlint:all'            // Turn on all warnings
-    compilerArgs << '-Werror'               // Turn warnings into errors
-    encoding = 'utf-8'
-  }
-}
-
-tasks.withType(GroovyCompile) {
-  sourceCompatibility = rootProject.versions.java
-  targetCompatibility = rootProject.versions.java
-
-  // Show all warnings except boot classpath
-  configure(options) {
-    compilerArgs << '-Xlint:all'            // Turn on all warnings
-    compilerArgs << '-Werror'               // Turn warnings into errors
-    compilerArgs << '-proc:none'            // Google AutoValue APs are leaking onto compile classpath, causing warning
-                                            // from Gradle
-    encoding = 'utf-8'
-  }
-}
-
-tasks.withType(Test) {
-  // Turn on logging for all tests, filter to show failures/skips only
-  testLogging {
-    exceptionFormat 'full'
-    showCauses true
-    showExceptions true
-    showStackTraces true
-    events 'failed', 'skipped'
-  }
-}
-
-tasks.withType(Groovydoc) {
-  docTitle = "${project.name} ${project.version}"
-  header = project.name
-  link('http://docs.oracle.com/javase/8/docs/api/',
-          'http://docs.oracle.com/javaee/7/api/',
-          'http://groovy.codehaus.org/gapi/')
-  exclude '**/*Spec.java'
-}
diff --git a/gradle/dependencies.gradle b/gradle/dependencies.gradle
deleted file mode 100644
index 3ca428449b..0000000000
--- a/gradle/dependencies.gradle
+++ /dev/null
@@ -1,14 +0,0 @@
-ext.versions = [
-  'java': '1.8'
-]
-
-ext.deps = [
-  'android': [
-    'tools': [
-      'build': [
-        'gradle': 'com.android.tools.build:gradle:3.2.1',
-      ]
-    ]
-  ],
-  'spock'  : 'org.spockframework:spock-core:1.1-groovy-2.4',
-]
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index eca5892dea..287d983eac 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-5.0-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.3-all.zip
diff --git a/okhttp/src/main/java/okhttp3/ConnectionSpec.java b/okhttp/src/main/java/okhttp3/ConnectionSpec.java
index e1340dc0ad..d2ad0f02aa 100644
--- a/okhttp/src/main/java/okhttp3/ConnectionSpec.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.java
@@ -41,10 +41,10 @@
  * defer all feature selection to the underlying SSL socket.
  *
  * <p>The configuration of each spec changes with each OkHttp release. This is annoying: upgrading
- * your OkHttp library can break connectivity to certain web servers! But it’s a necessary
- * annoyance because the TLS ecosystem is dynamic and staying up to date is necessary to stay
- * secure. See <a href="https://github.com/square/okhttp/wiki/TLS-Configuration-History">OkHttp's
- * TLS Configuration History</a> to track these changes.
+ * your OkHttp library can break connectivity to certain web servers! But it’s a necessary annoyance
+ * because the TLS ecosystem is dynamic and staying up to date is necessary to stay secure. See
+ * <a href="https://github.com/square/okhttp/wiki/TLS-Configuration-History">OkHttp's TLS
+ * Configuration History</a> to track these changes.
  */
 public final class ConnectionSpec {
 
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
index 61a3c13b56..3c93a800ac 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -234,7 +234,8 @@ public static ThreadFactory threadFactory(String name, boolean daemon) {
     for (String a : first) {
       for (String b : second) {
         @SuppressWarnings("https") int value = comparator.compare(a, b);
-        //False Positive
+        //FALSE POSITIVE: this code manifestly is generic over https, but the checker
+        //                issues a warning related to generics
         if (value == 0) {
           result.add(a);
           break;
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
index 78673e4c4b..72bd8d6b12 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
@@ -430,14 +430,13 @@ private Request createTunnel(int readTimeout, int writeTimeout, Request tunnelRe
   }
 
   /**
-   * Returns a request that creates a TLS tunnel via an HTTP proxy. Everything in the tunnel
-   * request is sent unencrypted to the proxy server, so tunnels include only the minimum set of
-   * headers. This avoids sending potentially sensitive data like HTTP cookies to the proxy
-   * unencrypted.
+   * Returns a request that creates a TLS tunnel via an HTTP proxy. Everything in the tunnel request
+   * is sent unencrypted to the proxy server, so tunnels include only the minimum set of headers.
+   * This avoids sending potentially sensitive data like HTTP cookies to the proxy unencrypted.
    *
-   * In order to support preemptive authentication we pass a fake “Auth Failed” response to the
-   * authenticator. This gives the authenticator the option to customize the CONNECT request. It
-   * can decline to do so by returning null, in which case OkHttp will use it as-is
+   * <p>In order to support preemptive authentication we pass a fake “Auth Failed” response to the
+   * authenticator. This gives the authenticator the option to customize the CONNECT request. It can
+   * decline to do so by returning null, in which case OkHttp will use it as-is
    */
   private Request createTunnelRequest() throws IOException {
     Request proxyConnectRequest = new Request.Builder()
diff --git a/okhttp/src/test/java/okhttp3/HttpUrlTest.java b/okhttp/src/test/java/okhttp3/HttpUrlTest.java
index cb0ec12cc8..46e1dc6108 100644
--- a/okhttp/src/test/java/okhttp3/HttpUrlTest.java
+++ b/okhttp/src/test/java/okhttp3/HttpUrlTest.java
@@ -1459,8 +1459,7 @@ HttpUrl parse(String url) {
   }
 
   @Test public void fromJavaNetUrl() throws Exception {
-    @SuppressWarnings("https") URL javaNetUrl = new URL("http://username:password@host/" +
-            "path?query#fragment"); //Test Cases not that interesting
+    URL javaNetUrl = new URL("http://username:password@host/path?query#fragment");
     HttpUrl httpUrl = HttpUrl.get(javaNetUrl);
     assertThat(httpUrl.toString())
         .isEqualTo("http://username:password@host/path?query#fragment");
