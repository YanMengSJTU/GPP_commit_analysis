diff --git a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
index 2465372a55..d436455645 100644
--- a/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
+++ b/okhttp-android-support/src/main/java/okhttp3/internal/huc/JavaApiConverter.java
@@ -44,6 +44,7 @@
 import okhttp3.ResponseBody;
 import okhttp3.internal.Internal;
 import okhttp3.internal.JavaNetHeaders;
+import okhttp3.internal.Platform;
 import okhttp3.internal.Util;
 import okhttp3.internal.http.CacheRequest;
 import okhttp3.internal.http.HttpMethod;
@@ -59,6 +60,12 @@
 public final class JavaApiConverter {
   private static final RequestBody EMPTY_REQUEST_BODY = RequestBody.create(null, new byte[0]);
 
+  /** Synthetic response header: the local time when the request was sent. */
+  private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";
+
+  /** Synthetic response header: the local time when the response was received. */
+  private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";
+
   private JavaApiConverter() {
   }
 
@@ -397,8 +404,8 @@ static HttpURLConnection createJavaUrlConnectionForCachePut(Response okResponse)
 
   private static Headers withSyntheticHeaders(Response okResponse) {
     return okResponse.headers().newBuilder()
-        .add(OkHeaders.SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis()))
-        .add(OkHeaders.RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis()))
+        .add(SENT_MILLIS, Long.toString(okResponse.sentRequestAtMillis()))
+        .add(RECEIVED_MILLIS, Long.toString(okResponse.receivedResponseAtMillis()))
         .build();
   }
 
@@ -448,11 +455,11 @@ static Headers extractOkHeaders(
         continue;
       }
       if (okResponseBuilder != null && javaHeader.getValue().size() == 1) {
-        if (name.equals(OkHeaders.SENT_MILLIS)) {
+        if (name.equals(SENT_MILLIS)) {
           okResponseBuilder.sentRequestAtMillis(Long.valueOf(javaHeader.getValue().get(0)));
           continue;
         }
-        if (name.equals(OkHeaders.RECEIVED_MILLIS)) {
+        if (name.equals(RECEIVED_MILLIS)) {
           okResponseBuilder.receivedResponseAtMillis(Long.valueOf(javaHeader.getValue().get(0)));
           continue;
         }
diff --git a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
index 90864623b8..3774c323cc 100644
--- a/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
+++ b/okhttp-android-support/src/test/java/okhttp3/internal/huc/ResponseCacheTest.java
@@ -2102,11 +2102,11 @@ private InsecureResponseCache(ResponseCache delegate) {
 
     // Use the platform's HTTP stack.
     URLConnection connection = server.url("/").url().openConnection();
-    assertFalse(connection instanceof HttpURLConnectionImpl);
+    assertFalse(connection instanceof OkHttpURLConnection);
     assertEquals("A", readAscii(connection));
 
     URLConnection connection2 = server.url("/").url().openConnection();
-    assertFalse(connection2 instanceof HttpURLConnectionImpl);
+    assertFalse(connection2 instanceof OkHttpURLConnection);
     assertEquals("A", readAscii(connection2));
   }
 
@@ -2126,11 +2126,11 @@ private InsecureResponseCache(ResponseCache delegate) {
 
     // Use the platform's HTTP stack.
     URLConnection connection = server.url("/").url().openConnection();
-    assertFalse(connection instanceof HttpURLConnectionImpl);
+    assertFalse(connection instanceof OkHttpURLConnection);
     assertEquals("A", readAscii(connection));
 
     URLConnection connection2 = server.url("/").url().openConnection();
-    assertFalse(connection2 instanceof HttpURLConnectionImpl);
+    assertFalse(connection2 instanceof OkHttpURLConnection);
     assertEquals("B", readAscii(connection2));
   }
 
@@ -2150,12 +2150,12 @@ private InsecureResponseCache(ResponseCache delegate) {
 
     // Use the platform's HTTP stack.
     URLConnection connection = server.url("/").url().openConnection();
-    assertFalse(connection instanceof HttpURLConnectionImpl);
+    assertFalse(connection instanceof OkHttpURLConnection);
     connection.setRequestProperty("Accept-Language", "en-US");
     assertEquals("A", readAscii(connection));
 
     URLConnection connection2 = server.url("/").url().openConnection();
-    assertFalse(connection2 instanceof HttpURLConnectionImpl);
+    assertFalse(connection2 instanceof OkHttpURLConnection);
     assertEquals("B", readAscii(connection2));
   }
 
@@ -2175,11 +2175,11 @@ private InsecureResponseCache(ResponseCache delegate) {
 
     // Use the platform's HTTP stack.
     URLConnection connection = server.url("/").url().openConnection();
-    assertFalse(connection instanceof HttpURLConnectionImpl);
+    assertFalse(connection instanceof OkHttpURLConnection);
     assertEquals("A", readAscii(connection));
 
     URLConnection connection2 = server.url("/").url().openConnection();
-    assertFalse(connection2 instanceof HttpURLConnectionImpl);
+    assertFalse(connection2 instanceof OkHttpURLConnection);
     assertEquals("B", readAscii(connection2));
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
index 224707fe85..dfc8009ec4 100644
--- a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
@@ -85,7 +85,7 @@
 import static java.util.concurrent.TimeUnit.NANOSECONDS;
 import static okhttp3.TestUtil.defaultClient;
 import static okhttp3.internal.Util.UTF_8;
-import static okhttp3.internal.http.OkHeaders.SELECTED_PROTOCOL;
+import static okhttp3.internal.huc.OkHttpURLConnection.SELECTED_PROTOCOL;
 import static okhttp3.internal.http.StatusLine.HTTP_PERM_REDIRECT;
 import static okhttp3.internal.http.StatusLine.HTTP_TEMP_REDIRECT;
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
index 973c70578b..0bbe613492 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/OkUrlFactory.java
@@ -22,8 +22,8 @@
 import java.net.URLStreamHandler;
 import java.net.URLStreamHandlerFactory;
 import okhttp3.internal.URLFilter;
-import okhttp3.internal.huc.HttpURLConnectionImpl;
-import okhttp3.internal.huc.HttpsURLConnectionImpl;
+import okhttp3.internal.huc.OkHttpURLConnection;
+import okhttp3.internal.huc.OkHttpsURLConnection;
 
 /**
  * @deprecated OkHttp will be dropping its ability to be used with {@link HttpURLConnection} in an
@@ -69,8 +69,8 @@ HttpURLConnection open(URL url, Proxy proxy) {
         .proxy(proxy)
         .build();
 
-    if (protocol.equals("http")) return new HttpURLConnectionImpl(url, copy, urlFilter);
-    if (protocol.equals("https")) return new HttpsURLConnectionImpl(url, copy, urlFilter);
+    if (protocol.equals("http")) return new OkHttpURLConnection(url, copy, urlFilter);
+    if (protocol.equals("https")) return new OkHttpsURLConnection(url, copy, urlFilter);
     throw new IllegalArgumentException("Unexpected protocol: " + protocol);
   }
 
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
similarity index 91%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
rename to okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
index eabcaba875..6a2a02a7eb 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package okhttp3.internal.huc;
 
 import java.io.FileNotFoundException;
@@ -57,7 +56,6 @@
 import okhttp3.internal.http.HttpDate;
 import okhttp3.internal.http.HttpEngine;
 import okhttp3.internal.http.HttpMethod;
-import okhttp3.internal.http.OkHeaders;
 import okhttp3.internal.http.StatusLine;
 
 import static okhttp3.internal.Platform.WARN;
@@ -71,7 +69,16 @@
  * connection has been attempted, certain properties (request header fields, request method, etc.)
  * are immutable.
  */
-public class HttpURLConnectionImpl extends HttpURLConnection implements Callback {
+public final class OkHttpURLConnection extends HttpURLConnection implements Callback {
+  /**
+   * Synthetic response header: the selected {@link Protocol protocol} ("spdy/3.1", "http/1.1",
+   * etc).
+   */
+  public static final String SELECTED_PROTOCOL = Platform.get().getPrefix() + "-Selected-Protocol";
+
+  /** Synthetic response header: the location from which the response was loaded. */
+  public static final String RESPONSE_SOURCE = Platform.get().getPrefix() + "-Response-Source";
+
   private static final Set<String> METHODS = new LinkedHashSet<>(
       Arrays.asList("OPTIONS", "GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "PATCH"));
 
@@ -99,17 +106,17 @@
   Proxy proxy;
   Handshake handshake;
 
-  public HttpURLConnectionImpl(URL url, OkHttpClient client) {
+  public OkHttpURLConnection(URL url, OkHttpClient client) {
     super(url);
     this.client = client;
   }
 
-  public HttpURLConnectionImpl(URL url, OkHttpClient client, URLFilter urlFilter) {
+  public OkHttpURLConnection(URL url, OkHttpClient client, URLFilter urlFilter) {
     this(url, client);
     this.urlFilter = urlFilter;
   }
 
-  @Override public final void connect() throws IOException {
+  @Override public void connect() throws IOException {
     if (executed) return;
 
     Call call = buildCall();
@@ -130,7 +137,7 @@ public HttpURLConnectionImpl(URL url, OkHttpClient client, URLFilter urlFilter)
     }
   }
 
-  @Override public final void disconnect() {
+  @Override public void disconnect() {
     // Calling disconnect() before a connection exists should have no effect.
     if (call == null) return;
 
@@ -142,7 +149,7 @@ public HttpURLConnectionImpl(URL url, OkHttpClient client, URLFilter urlFilter)
    * Returns an input stream from the server in the case of error such as the requested file (txt,
    * htm, html) is not found on the remote server.
    */
-  @Override public final InputStream getErrorStream() {
+  @Override public InputStream getErrorStream() {
     try {
       Response response = getResponse();
       if (HttpEngine.hasBody(response) && response.code() >= HTTP_BAD_REQUEST) {
@@ -159,8 +166,8 @@ private Headers getHeaders() throws IOException {
       Response response = getResponse();
       Headers headers = response.headers();
       responseHeaders = headers.newBuilder()
-          .add(OkHeaders.SELECTED_PROTOCOL, response.protocol().toString())
-          .add(OkHeaders.RESPONSE_SOURCE, responseSourceHeader(response))
+          .add(SELECTED_PROTOCOL, response.protocol().toString())
+          .add(RESPONSE_SOURCE, responseSourceHeader(response))
           .build();
     }
     return responseHeaders;
@@ -183,7 +190,7 @@ private static String responseSourceHeader(Response response) {
    * Returns the value of the field at {@code position}. Returns null if there are fewer than {@code
    * position} headers.
    */
-  @Override public final String getHeaderField(int position) {
+  @Override public String getHeaderField(int position) {
     try {
       Headers headers = getHeaders();
       if (position < 0 || position >= headers.size()) return null;
@@ -197,7 +204,7 @@ private static String responseSourceHeader(Response response) {
    * Returns the value of the field corresponding to the {@code fieldName}, or null if there is no
    * such field. If the field has multiple values, the last value is returned.
    */
-  @Override public final String getHeaderField(String fieldName) {
+  @Override public String getHeaderField(String fieldName) {
     try {
       return fieldName == null
           ? StatusLine.get(getResponse()).toString()
@@ -207,7 +214,7 @@ private static String responseSourceHeader(Response response) {
     }
   }
 
-  @Override public final String getHeaderFieldKey(int position) {
+  @Override public String getHeaderFieldKey(int position) {
     try {
       Headers headers = getHeaders();
       if (position < 0 || position >= headers.size()) return null;
@@ -217,7 +224,7 @@ private static String responseSourceHeader(Response response) {
     }
   }
 
-  @Override public final Map<String, List<String>> getHeaderFields() {
+  @Override public Map<String, List<String>> getHeaderFields() {
     try {
       return JavaNetHeaders.toMultimap(getHeaders(),
           StatusLine.get(getResponse()).toString());
@@ -226,7 +233,7 @@ private static String responseSourceHeader(Response response) {
     }
   }
 
-  @Override public final Map<String, List<String>> getRequestProperties() {
+  @Override public Map<String, List<String>> getRequestProperties() {
     if (connected) {
       throw new IllegalStateException(
           "Cannot access request header fields after connection is set");
@@ -235,7 +242,7 @@ private static String responseSourceHeader(Response response) {
     return JavaNetHeaders.toMultimap(requestHeaders.build(), null);
   }
 
-  @Override public final InputStream getInputStream() throws IOException {
+  @Override public InputStream getInputStream() throws IOException {
     if (!doInput) {
       throw new ProtocolException("This protocol does not support input");
     }
@@ -249,7 +256,7 @@ private static String responseSourceHeader(Response response) {
     return response.body().byteStream();
   }
 
-  @Override public final OutputStream getOutputStream() throws IOException {
+  @Override public OutputStream getOutputStream() throws IOException {
     OutputStreamRequestBody requestBody = (OutputStreamRequestBody) buildCall().request().body();
     if (requestBody == null) {
       throw new ProtocolException("method does not support a request body: " + method);
@@ -269,7 +276,7 @@ private static String responseSourceHeader(Response response) {
     return requestBody.outputStream();
   }
 
-  @Override public final Permission getPermission() throws IOException {
+  @Override public Permission getPermission() throws IOException {
     URL url = getURL();
     String hostname = url.getHost();
     int hostPort = url.getPort() != -1
@@ -283,7 +290,7 @@ private static String responseSourceHeader(Response response) {
     return new SocketPermission(hostname + ":" + hostPort, "connect, resolve");
   }
 
-  @Override public final String getRequestProperty(String field) {
+  @Override public String getRequestProperty(String field) {
     if (field == null) return null;
     return requestHeaders.get(field);
   }
@@ -449,7 +456,7 @@ private Response getResponse() throws IOException {
    * <p><strong>Warning:</strong> This method may return false before attempting to connect and true
    * afterwards.
    */
-  @Override public final boolean usingProxy() {
+  @Override public boolean usingProxy() {
     if (proxy != null) return true;
     Proxy clientProxy = client.proxy();
     return clientProxy != null && clientProxy.type() != Proxy.Type.DIRECT;
@@ -459,11 +466,11 @@ private Response getResponse() throws IOException {
     return getResponse().message();
   }
 
-  @Override public final int getResponseCode() throws IOException {
+  @Override public int getResponseCode() throws IOException {
     return getResponse().code();
   }
 
-  @Override public final void setRequestProperty(String field, String newValue) {
+  @Override public void setRequestProperty(String field, String newValue) {
     if (connected) {
       throw new IllegalStateException("Cannot set request property after connection is made");
     }
@@ -497,7 +504,7 @@ private Response getResponse() throws IOException {
     }
   }
 
-  @Override public final void addRequestProperty(String field, String value) {
+  @Override public void addRequestProperty(String field, String value) {
     if (connected) {
       throw new IllegalStateException("Cannot add request property after connection is made");
     }
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java
similarity index 84%
rename from okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java
rename to okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java
index 8c1d69c0a7..feefe574f8 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/HttpsURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpsURLConnection.java
@@ -23,18 +23,18 @@
 import okhttp3.OkHttpClient;
 import okhttp3.internal.URLFilter;
 
-public final class HttpsURLConnectionImpl extends DelegatingHttpsURLConnection {
-  private final HttpURLConnectionImpl delegate;
+public final class OkHttpsURLConnection extends DelegatingHttpsURLConnection {
+  private final OkHttpURLConnection delegate;
 
-  public HttpsURLConnectionImpl(URL url, OkHttpClient client) {
-    this(new HttpURLConnectionImpl(url, client));
+  public OkHttpsURLConnection(URL url, OkHttpClient client) {
+    this(new OkHttpURLConnection(url, client));
   }
 
-  public HttpsURLConnectionImpl(URL url, OkHttpClient client, URLFilter filter) {
-    this(new HttpURLConnectionImpl(url, client, filter));
+  public OkHttpsURLConnection(URL url, OkHttpClient client, URLFilter filter) {
+    this(new OkHttpURLConnection(url, client, filter));
   }
 
-  public HttpsURLConnectionImpl(HttpURLConnectionImpl delegate) {
+  public OkHttpsURLConnection(OkHttpURLConnection delegate) {
     super(delegate);
     this.delegate = delegate;
   }
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java
index 602ca024bc..e71252c047 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OutputStreamRequestBody.java
@@ -30,7 +30,7 @@
  * In either case the bytes of the body aren't known until the caller writes them to the output
  * stream.
  */
-public abstract class OutputStreamRequestBody extends RequestBody {
+abstract class OutputStreamRequestBody extends RequestBody {
   private Timeout timeout;
   private long expectedContentLength;
   private OutputStream outputStream;
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
index 5eb0f7e0fc..d0f706f0d0 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/OkUrlFactoryTest.java
@@ -12,7 +12,7 @@
 import java.util.concurrent.TimeUnit;
 import javax.net.ssl.HttpsURLConnection;
 import okhttp3.internal.URLFilter;
-import okhttp3.internal.http.OkHeaders;
+import okhttp3.internal.huc.OkHttpURLConnection;
 import okhttp3.internal.io.InMemoryFileSystem;
 import okhttp3.internal.tls.SslClient;
 import okhttp3.mockwebserver.MockResponse;
@@ -219,7 +219,7 @@ private void assertResponseBody(HttpURLConnection connection, String expected) t
   }
 
   private void assertResponseHeader(HttpURLConnection connection, String expected) {
-    assertEquals(expected, connection.getHeaderField(OkHeaders.RESPONSE_SOURCE));
+    assertEquals(expected, connection.getHeaderField(OkHttpURLConnection.RESPONSE_SOURCE));
   }
 
   private void assertResponseCode(HttpURLConnection connection, int expected) throws IOException {
diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
index 7473edef75..086982d033 100644
--- a/okhttp/src/main/java/okhttp3/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -30,6 +30,7 @@
 import java.util.NoSuchElementException;
 import okhttp3.internal.DiskLruCache;
 import okhttp3.internal.InternalCache;
+import okhttp3.internal.Platform;
 import okhttp3.internal.Util;
 import okhttp3.internal.http.CacheRequest;
 import okhttp3.internal.http.CacheStrategy;
@@ -470,6 +471,12 @@ public CacheRequestImpl(final DiskLruCache.Editor editor) throws IOException {
   }
 
   private static final class Entry {
+    /** Synthetic response header: the local time when the request was sent. */
+    private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis";
+
+    /** Synthetic response header: the local time when the response was received. */
+    private static final String RECEIVED_MILLIS = Platform.get().getPrefix() + "-Received-Millis";
+
     private final String url;
     private final Headers varyHeaders;
     private final String requestMethod;
@@ -550,10 +557,10 @@ public Entry(Source in) throws IOException {
         for (int i = 0; i < responseHeaderLineCount; i++) {
           responseHeadersBuilder.addLenient(source.readUtf8LineStrict());
         }
-        String sendRequestMillisString = responseHeadersBuilder.get(OkHeaders.SENT_MILLIS);
-        String receivedResponseMillisString = responseHeadersBuilder.get(OkHeaders.RECEIVED_MILLIS);
-        responseHeadersBuilder.removeAll(OkHeaders.SENT_MILLIS);
-        responseHeadersBuilder.removeAll(OkHeaders.RECEIVED_MILLIS);
+        String sendRequestMillisString = responseHeadersBuilder.get(SENT_MILLIS);
+        String receivedResponseMillisString = responseHeadersBuilder.get(RECEIVED_MILLIS);
+        responseHeadersBuilder.removeAll(SENT_MILLIS);
+        responseHeadersBuilder.removeAll(RECEIVED_MILLIS);
         sentRequestMillis = sendRequestMillisString != null
             ? Long.parseLong(sendRequestMillisString)
             : 0L;
@@ -622,11 +629,11 @@ public void writeTo(DiskLruCache.Editor editor) throws IOException {
             .writeUtf8(responseHeaders.value(i))
             .writeByte('\n');
       }
-      sink.writeUtf8(OkHeaders.SENT_MILLIS)
+      sink.writeUtf8(SENT_MILLIS)
           .writeUtf8(": ")
           .writeDecimalLong(sentRequestMillis)
           .writeByte('\n');
-      sink.writeUtf8(OkHeaders.RECEIVED_MILLIS)
+      sink.writeUtf8(RECEIVED_MILLIS)
           .writeUtf8(": ")
           .writeDecimalLong(receivedResponseMillis)
           .writeByte('\n');
diff --git a/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java b/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
index db8011c542..3be15590bf 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/OkHeaders.java
@@ -22,37 +22,13 @@
 import java.util.TreeSet;
 import okhttp3.Challenge;
 import okhttp3.Headers;
-import okhttp3.Protocol;
 import okhttp3.Request;
 import okhttp3.Response;
-import okhttp3.internal.Platform;
 
 import static okhttp3.internal.Util.equal;
 
 /** Headers and utilities for internal use by OkHttp. */
 public final class OkHeaders {
-
-  static final String PREFIX = Platform.get().getPrefix();
-
-  /**
-   * Synthetic response header: the local time when the request was sent.
-   */
-  public static final String SENT_MILLIS = PREFIX + "-Sent-Millis";
-
-  /**
-   * Synthetic response header: the local time when the response was received.
-   */
-  public static final String RECEIVED_MILLIS = PREFIX + "-Received-Millis";
-
-  /**
-   * Synthetic response header: the selected {@link Protocol protocol} ("spdy/3.1", "http/1.1",
-   * etc).
-   */
-  public static final String SELECTED_PROTOCOL = PREFIX + "-Selected-Protocol";
-
-  /** Synthetic response header: the location from which the response was loaded. */
-  public static final String RESPONSE_SOURCE = PREFIX + "-Response-Source";
-
   private OkHeaders() {
   }
 
