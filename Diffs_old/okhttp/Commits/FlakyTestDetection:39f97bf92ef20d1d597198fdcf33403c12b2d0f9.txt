diff --git a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
index feed06fe14..db78cdd0ed 100644
--- a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
@@ -100,17 +100,17 @@
 
   private void assertSuccessfulEventOrder() throws IOException {
     Call call = client.newCall(new Request.Builder()
-            .url(server.url("/"))
-            .build());
+        .url(server.url("/"))
+        .build());
     Response response = call.execute();
     assertEquals(200, response.code());
     response.body().string();
     response.body().close();
 
     List<String> expectedEvents = asList("FetchStart", "DnsStart", "DnsEnd", "ConnectionAcquired",
-            "ConnectStart", "SecureConnectStart", "SecureConnectEnd", "ConnectEnd",
-            "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",
-            "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");
+        "ConnectStart", "SecureConnectStart", "SecureConnectEnd", "ConnectEnd",
+        "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",
+        "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");
 
     assertEquals(expectedEvents, listener.recordedEventTypes());
   }
@@ -145,7 +145,7 @@ private void assertSuccessfulEventOrder() throws IOException {
     enableTlsWithTunnel(false);
     server.setProtocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1));
     server.enqueue(
-            new MockResponse().setBodyDelay(100, TimeUnit.MILLISECONDS).setChunkedBody("Hello!", 2));
+        new MockResponse().setBodyDelay(100, TimeUnit.MILLISECONDS).setChunkedBody("Hello!", 2));
 
     assertSuccessfulEventOrder();
   }
diff --git a/okhttp/src/main/java/okhttp3/EventListener.java b/okhttp/src/main/java/okhttp3/EventListener.java
index e0c90df96a..89723e3c93 100644
--- a/okhttp/src/main/java/okhttp3/EventListener.java
+++ b/okhttp/src/main/java/okhttp3/EventListener.java
@@ -42,7 +42,7 @@
  * scenarios. A redirect cross domain, or to use https may cause additional connection and request
  * events.
  *
- * <p>All events must fast, without external locking, cannot throw exceptions,
+ * <p>All event methods must execute fast, without external locking, cannot throw exceptions,
  * attempt to mutate the event parameters, or be reentrant back into the client.
  * Any IO - writing to files or network should be done asynchronously.
  */
@@ -113,8 +113,8 @@ public void connectStart(Call call, InetSocketAddress inetSocketAddress, Proxy p
    *
    * <p>This method is invoked if the following conditions are met:
    * <ul>
-   *   <li>The {@link Call#request()} requires TLS.</li>
-   *   <li>No existing connection from the {@link ConnectionPool} can be reused.</li>
+   * <li>The {@link Call#request()} requires TLS.</li>
+   * <li>No existing connection from the {@link ConnectionPool} can be reused.</li>
    * </ul>
    *
    * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response
diff --git a/okhttp/src/main/java/okhttp3/WebSocketListener.java b/okhttp/src/main/java/okhttp3/WebSocketListener.java
index 4606f367ee..69276d933b 100644
--- a/okhttp/src/main/java/okhttp3/WebSocketListener.java
+++ b/okhttp/src/main/java/okhttp3/WebSocketListener.java
@@ -34,7 +34,10 @@ public void onMessage(WebSocket webSocket, String text) {
   public void onMessage(WebSocket webSocket, ByteString bytes) {
   }
 
-  /** Invoked when the remote peer has indicated that no more incoming messages will be transmitted. */
+  /**
+   * Invoked when the remote peer has indicated that no more incoming messages will be
+   * transmitted.
+   */
   public void onClosing(WebSocket webSocket, int code, String reason) {
   }
 
