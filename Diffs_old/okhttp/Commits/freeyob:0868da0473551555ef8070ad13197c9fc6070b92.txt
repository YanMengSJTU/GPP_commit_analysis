diff --git a/okhttp/src/main/java/okhttp3/Call.java b/okhttp/src/main/java/okhttp3/Call.java
index 5b4669ad21..fa32db9d94 100644
--- a/okhttp/src/main/java/okhttp3/Call.java
+++ b/okhttp/src/main/java/okhttp3/Call.java
@@ -17,7 +17,10 @@
 
 import java.io.IOException;
 
-/**
+/**核心功能：
+ * 1. 执行
+ * 2. 加入队列执行
+ * 3. 取消执行
  * A call is a request that has been prepared for execution. A call can be canceled. As this object
  * represents a single request/response pair (stream), it cannot be executed twice.
  */
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index 8016462259..7e43266350 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -48,7 +48,24 @@
 import okhttp3.internal.tls.OkHostnameVerifier;
 import okhttp3.internal.ws.RealWebSocket;
 
-/**是不是用了工厂模式
+/**
+ *
+ * 主要的接口：
+ * 1. 获取client参数
+ * 2. newCall生产call
+ * 3. newWebSocket 产生 websocket
+ *
+ *  Builder主要来配置Client参数
+ *  Bulider与Client有两种方式交互
+ *  OkHttpClient client = new OkHttpClient();默认参数
+ *  OkHttpClient  client = new OkHttpClient().Builder().build();
+ *
+ *  复制现有client参数
+ *  OkHttpClient newClient = client.newBuilder().builder();
+ *  问题：
+ *  client每个参数都是干嘛的？
+ *  是不是用了工厂模式？
+ *  这里newCall(Request)根据 Request产生Call
  * Factory for {@linkplain Call calls}, which can be used to send HTTP requests and read their
  * responses.
  *  Call是用来发送请求和接收回复的
@@ -423,7 +440,8 @@ public Dispatcher dispatcher() {
   public Builder newBuilder() {
     return new Builder(this);
   }
-
+  //为什么内部类要静态不可变
+  //这种方式增加参数有什么好处
   public static final class Builder {
     Dispatcher dispatcher;
     Proxy proxy;
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index ab3ddb088f..163504529e 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -65,7 +65,7 @@
       return result;
     } finally {
       client.dispatcher().finished(this);
-    }
+    }//如果抛出IO异常还会走finally吗？
   }
 
   private void captureCallStackTrace() {
diff --git a/okhttp/src/main/java/okhttp3/Request.java b/okhttp/src/main/java/okhttp3/Request.java
index f4b0f6dba4..df37dae5bb 100644
--- a/okhttp/src/main/java/okhttp3/Request.java
+++ b/okhttp/src/main/java/okhttp3/Request.java
@@ -30,7 +30,7 @@
   final Headers headers;
   final RequestBody body;
   final Object tag;
-
+  //这个需要深入理解
   private volatile CacheControl cacheControl; // Lazily initialized.
 
   Request(Builder builder) {
