diff --git a/okhttp-tests/src/test/java/okhttp3/CallTest.java b/okhttp-tests/src/test/java/okhttp3/CallTest.java
index 812356db3d..59411f8456 100644
--- a/okhttp-tests/src/test/java/okhttp3/CallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java
@@ -935,6 +935,35 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .assertCode(200);
   }
 
+  /** https://github.com/square/okhttp/issues/4761 */
+  @Test public void interceptorCallsProceedWithoutClosingPriorResponse() throws Exception {
+    server.enqueue(new MockResponse()
+        .setBody("abc"));
+    server.enqueue(new MockResponse());
+
+    client = client.newBuilder()
+        .addInterceptor(new Interceptor() {
+          @Override public Response intercept(Chain chain) throws IOException {
+            Response response = chain.proceed(chain.request());
+            try {
+              chain.proceed(chain.request());
+              fail();
+            } catch (IllegalStateException expected) {
+              assertThat(expected).hasMessageContaining("please call response.close()");
+            }
+            return response;
+          }
+        })
+        .build();
+
+    Request request = new Request.Builder()
+        .url(server.url("/"))
+        .build();
+    executeSynchronously(request)
+        .assertCode(200)
+        .assertBody("abc");
+  }
+
   /**
    * Make a request with two routes. The first route will fail because the null server connects but
    * never responds. The manual retry will succeed.
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java
index f596a41d72..59439c78ef 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/Transmitter.java
@@ -157,8 +157,13 @@ private Address createAddress(HttpUrl url) {
   /** Returns a new exchange to carry a new request and response. */
   Exchange newExchange(Interceptor.Chain chain, boolean doExtensiveHealthChecks) {
     synchronized (connectionPool) {
-      if (noMoreExchanges) throw new IllegalStateException("released");
-      if (exchange != null) throw new IllegalStateException("exchange != null");
+      if (noMoreExchanges) {
+        throw new IllegalStateException("released");
+      }
+      if (exchange != null) {
+        throw new IllegalStateException("cannot make a new request because the previous response "
+            + "is still open: please call response.close()");
+      }
     }
 
     ExchangeCodec codec = exchangeFinder.find(client, chain, doExtensiveHealthChecks);
