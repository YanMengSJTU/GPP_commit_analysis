diff --git a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
index d6e8453783..38f7130811 100644
--- a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
@@ -95,10 +95,10 @@
     assertEquals("abc", response.body().string());
     response.body().close();
 
-    List<String> expectedEvents = Arrays.asList("FetchStart", "DnsStart", "DnsEnd",
+    List<String> expectedEvents = Arrays.asList("CallStart", "DnsStart", "DnsEnd",
         "ConnectionAcquired", "ConnectStart", "ConnectEnd", "RequestHeadersStart",
         "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd", "ResponseBodyStart",
-        "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");
+        "CallEnd", "ResponseBodyEnd", "ConnectionReleased");
     assertEquals(expectedEvents, listener.recordedEventTypes());
   }
 
@@ -111,10 +111,10 @@ private void assertSuccessfulEventOrder() throws IOException {
     response.body().string();
     response.body().close();
 
-    List<String> expectedEvents = asList("FetchStart", "DnsStart", "DnsEnd", "ConnectionAcquired",
+    List<String> expectedEvents = asList("CallStart", "DnsStart", "DnsEnd", "ConnectionAcquired",
         "ConnectStart", "SecureConnectStart", "SecureConnectEnd", "ConnectEnd",
         "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart", "ResponseHeadersEnd",
-        "ResponseBodyStart", "FetchEnd", "ResponseBodyEnd", "ConnectionReleased");
+        "ResponseBodyStart", "CallEnd", "ResponseBodyEnd", "ConnectionReleased");
 
     assertEquals(expectedEvents, listener.recordedEventTypes());
   }
diff --git a/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
index 2dab17b057..2b0f0e9b2f 100644
--- a/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
+++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
@@ -113,8 +113,8 @@ private void logEvent(CallEvent e) {
     logEvent(new ConnectionReleased(call, connection));
   }
 
-  @Override public void fetchStart(Call call) {
-    logEvent(new FetchStart(call));
+  @Override public void callStart(Call call) {
+    logEvent(new CallStart(call));
   }
 
   @Override public void requestHeadersStart(Call call) {
@@ -149,8 +149,8 @@ private void logEvent(CallEvent e) {
     logEvent(new ResponseBodyEnd(call, throwable));
   }
 
-  @Override public void fetchEnd(Call call, Throwable throwable) {
-    logEvent(new FetchEnd(call, throwable));
+  @Override public void callEnd(Call call, Throwable throwable) {
+    logEvent(new CallEnd(call, throwable));
   }
 
   static class CallEvent {
@@ -289,22 +289,22 @@ public String getName() {
     }
   }
 
-  static final class FetchStart extends CallEvent {
-    FetchStart(Call call) {
+  static final class CallStart extends CallEvent {
+    CallStart(Call call) {
       super(call);
     }
   }
 
-  static final class FetchEnd extends CallEvent {
+  static final class CallEnd extends CallEvent {
     final Throwable throwable;
 
-    FetchEnd(Call call, Throwable throwable) {
+    CallEnd(Call call, Throwable throwable) {
       super(call, throwable);
       this.throwable = throwable;
     }
 
     @Nullable @Override public CallEvent closes() {
-      return new FetchStart(call);
+      return new CallStart(call);
     }
   }
 
diff --git a/okhttp/src/main/java/okhttp3/EventListener.java b/okhttp/src/main/java/okhttp3/EventListener.java
index 89723e3c93..b56b867c85 100644
--- a/okhttp/src/main/java/okhttp3/EventListener.java
+++ b/okhttp/src/main/java/okhttp3/EventListener.java
@@ -63,10 +63,10 @@ public EventListener create(Call call) {
    * limits, this call may be executed well before processing the request is able to begin.
    *
    * <p>This will be invoked only once for a single {@link Call}. Retries of different routes
-   * or redirects will be handled within the boundaries of a single fetchStart and
-   * {@link #fetchEnd(Call, Throwable)} pair.
+   * or redirects will be handled within the boundaries of a single callStart and
+   * {@link #callEnd(Call, Throwable)} pair.
    */
-  public void fetchStart(Call call) {
+  public void callStart(Call call) {
   }
 
   /**
@@ -280,13 +280,13 @@ public void responseBodyEnd(Call call, @Nullable Throwable throwable) {
    * Invoked immediately after a call has completely ended.  This includes delayed consumption
    * of response body by the caller.
    *
-   * <p>This method is always invoked after {@link #fetchStart(Call)}.
+   * <p>This method is always invoked after {@link #callStart(Call)}.
    *
    * <p>{@code throwable} will be null in the case of a successful attempt to execute the call.
    *
    * <p>{@code throwable} will be non-null in the case of a failed attempt to execute the call.
    */
-  public void fetchEnd(Call call, @Nullable Throwable throwable) {
+  public void callEnd(Call call, @Nullable Throwable throwable) {
   }
 
   public interface Factory {
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 89998a5b32..ceaad906f7 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -71,15 +71,15 @@ static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolea
       executed = true;
     }
     captureCallStackTrace();
-    eventListener.fetchStart(this);
+    eventListener.callStart(this);
     try {
       client.dispatcher().executed(this);
       Response result = getResponseWithInterceptorChain();
       if (result == null) throw new IOException("Canceled");
-      eventListener.fetchEnd(this, null);
+      eventListener.callEnd(this, null);
       return result;
     } catch (IOException e) {
-      eventListener.fetchEnd(this, e);
+      eventListener.callEnd(this, e);
       throw e;
     } finally {
       client.dispatcher().finished(this);
@@ -97,7 +97,7 @@ private void captureCallStackTrace() {
       executed = true;
     }
     captureCallStackTrace();
-    eventListener.fetchStart(this);
+    eventListener.callStart(this);
     client.dispatcher().enqueue(new AsyncCall(responseCallback));
   }
 
@@ -153,13 +153,13 @@ RealCall get() {
           signalledCallback = true;
           responseCallback.onResponse(RealCall.this, response);
         }
-        eventListener.fetchEnd(RealCall.this, null);
+        eventListener.callEnd(RealCall.this, null);
       } catch (IOException e) {
         if (signalledCallback) {
           // Do not signal the callback twice!
           Platform.get().log(INFO, "Callback failure for " + toLoggableString(), e);
         } else {
-          eventListener.fetchEnd(RealCall.this, e);
+          eventListener.callEnd(RealCall.this, e);
           responseCallback.onFailure(RealCall.this, e);
         }
       } finally {
