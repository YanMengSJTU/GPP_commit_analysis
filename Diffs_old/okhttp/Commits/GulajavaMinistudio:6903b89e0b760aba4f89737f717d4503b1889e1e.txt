diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
index f81e9a7a60..2f09a8201e 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/MockWebServerTest.java
@@ -27,6 +27,7 @@
 import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
@@ -57,6 +58,7 @@
 import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeFalse;
 
+@SuppressWarnings({"ArraysAsListWithZeroOrOneArgument", "deprecation"})
 public final class MockWebServerTest {
   @Rule public final MockWebServer server = new MockWebServer();
 
@@ -134,7 +136,7 @@
     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
     connection.setRequestProperty("Accept-Language", "en-US");
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(connection.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);
     assertThat(reader.readLine()).isEqualTo("hello world");
 
@@ -155,7 +157,7 @@
 
     URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(reader.readLine()).isEqualTo("This is the new location!");
 
     RecordedRequest first = server.takeRequest();
@@ -179,7 +181,7 @@
 
     URLConnection connection = server.url("/").url().openConnection();
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(reader.readLine()).isEqualTo("enqueued in the background");
   }
 
@@ -377,15 +379,15 @@
     server.shutdown();
   }
 
-  @Test public void portImplicitlyStarts() throws IOException {
+  @Test public void portImplicitlyStarts() {
     assertThat(server.getPort()).isGreaterThan(0);
   }
 
-  @Test public void hostnameImplicitlyStarts() throws IOException {
+  @Test public void hostnameImplicitlyStarts() {
     assertThat(server.getHostName()).isNotNull();
   }
 
-  @Test public void toProxyAddressImplicitlyStarts() throws IOException {
+  @Test public void toProxyAddressImplicitlyStarts() {
     assertThat(server.toProxyAddress()).isNotNull();
   }
 
@@ -434,7 +436,7 @@
     URL url = server.url("/a/deep/path?key=foo%20bar").url();
     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(connection.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);
     assertThat(reader.readLine()).isEqualTo("hello world");
 
@@ -478,7 +480,7 @@
     connection.getOutputStream().write("request".getBytes(UTF_8));
 
     InputStream in = connection.getInputStream();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
+    BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
     assertThat(reader.readLine()).isEqualTo("response");
 
     RecordedRequest request = server.takeRequest();
@@ -526,7 +528,8 @@
     connection.setHostnameVerifier(new RecordingHostnameVerifier());
 
     assertThat(connection.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);
-    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
+    BufferedReader reader =
+        new BufferedReader(new InputStreamReader(connection.getInputStream(), UTF_8));
     assertThat(reader.readLine()).isEqualTo("abc");
 
     RecordedRequest request = server.takeRequest();
diff --git a/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java
index 4d498406a8..80a1381c25 100644
--- a/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java
+++ b/mockwebserver/src/test/java/okhttp3/mockwebserver/RecordedRequestTest.java
@@ -33,7 +33,7 @@
 public class RecordedRequestTest {
   Headers headers = Util.EMPTY_HEADERS;
 
-  private class FakeSocket extends Socket {
+  private static class FakeSocket extends Socket {
     private final InetAddress localAddress;
     private final int remotePort;
     private final InetAddress remoteAddress;
diff --git a/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt
index c7b42184d3..ebf0d4a592 100644
--- a/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt
+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsRecordCodec.kt
@@ -92,7 +92,7 @@ object DnsRecordCodec {
 
       val type = buf.readShort().toInt() and 0xffff
       buf.readShort() // class
-      val ttl = buf.readInt().toLong() and 0xffffffffL // ttl
+      @Suppress("UNUSED_VARIABLE") val ttl = buf.readInt().toLong() and 0xffffffffL // ttl
       val length = buf.readShort().toInt() and 0xffff
 
       if (type == TYPE_A || type == TYPE_AAAA) {
diff --git a/okhttp/src/main/java/okhttp3/CertificatePinner.kt b/okhttp/src/main/java/okhttp3/CertificatePinner.kt
index bd46897d2e..29e3f9ddaf 100644
--- a/okhttp/src/main/java/okhttp3/CertificatePinner.kt
+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.kt
@@ -123,6 +123,7 @@ import javax.net.ssl.SSLPeerUnverifiedException
  * [rfc_7469]: http://tools.ietf.org/html/rfc7469
  * [static_certificates]: http://goo.gl/XDh6je
  */
+@Suppress("NAME_SHADOWING")
 class CertificatePinner internal constructor(
   private val pins: Set<Pin>,
   private val certificateChainCleaner: CertificateChainCleaner?
diff --git a/okhttp/src/main/java/okhttp3/ConnectionSpec.kt b/okhttp/src/main/java/okhttp3/ConnectionSpec.kt
index a9b54f00e9..4be68fd56e 100644
--- a/okhttp/src/main/java/okhttp3/ConnectionSpec.kt
+++ b/okhttp/src/main/java/okhttp3/ConnectionSpec.kt
@@ -269,6 +269,7 @@ class ConnectionSpec internal constructor(
     )
   }
 
+  @Suppress("DEPRECATION")
   companion object {
     // Most secure but generally supported list.
     private val RESTRICTED_CIPHER_SUITES = arrayOf(
diff --git a/okhttp/src/main/java/okhttp3/Cookie.kt b/okhttp/src/main/java/okhttp3/Cookie.kt
index 69b8ce0b96..3a16bb64f9 100644
--- a/okhttp/src/main/java/okhttp3/Cookie.kt
+++ b/okhttp/src/main/java/okhttp3/Cookie.kt
@@ -40,6 +40,7 @@ import java.util.regex.Pattern
  *
  * [chromium_extension]: https://code.google.com/p/chromium/issues/detail?id=232693
  */
+@Suppress("NAME_SHADOWING")
 class Cookie private constructor(
   /** Returns a non-empty string with this cookie's name. */
   @get:JvmName("name") val name: String,
@@ -325,6 +326,7 @@ class Cookie private constructor(
     }
   }
 
+  @Suppress("NAME_SHADOWING")
   companion object {
     private val YEAR_PATTERN = Pattern.compile("(\\d{2,4})[^\\d]*")
     private val MONTH_PATTERN =
diff --git a/okhttp/src/main/java/okhttp3/Headers.kt b/okhttp/src/main/java/okhttp3/Headers.kt
index 6193b39abd..40b52296c9 100644
--- a/okhttp/src/main/java/okhttp3/Headers.kt
+++ b/okhttp/src/main/java/okhttp3/Headers.kt
@@ -46,6 +46,7 @@ import java.util.TreeSet
  *
  * Instances of this class are immutable. Use [Builder] to create instances.
  */
+@Suppress("NAME_SHADOWING")
 class Headers private constructor(
   private val namesAndValues: Array<String>
 ) : Iterable<Pair<String, String>> {
diff --git a/okhttp/src/main/java/okhttp3/MultipartBody.kt b/okhttp/src/main/java/okhttp3/MultipartBody.kt
index fce2c2b513..abf62fbe59 100644
--- a/okhttp/src/main/java/okhttp3/MultipartBody.kt
+++ b/okhttp/src/main/java/okhttp3/MultipartBody.kt
@@ -29,6 +29,7 @@ import java.util.UUID
  *
  * [rfc_2387]: http://www.ietf.org/rfc/rfc2387.txt
  */
+@Suppress("NAME_SHADOWING")
 class MultipartBody internal constructor(
   private val boundaryByteString: ByteString,
   @get:JvmName("type") val type: MediaType,
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt
index c56a2156fd..292db0bba2 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt
@@ -40,6 +40,7 @@ import java.util.LinkedHashMap
  * entries are added to the array, starting in the last position moving forward. When the array
  * fills, it is doubled.
  */
+@Suppress("NAME_SHADOWING")
 object Hpack {
   private const val PREFIX_4_BITS = 0x0f
   private const val PREFIX_5_BITS = 0x1f
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
index 0cded18e24..663b6f4038 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.kt
@@ -58,6 +58,7 @@ import java.util.concurrent.TimeUnit.MILLISECONDS
  * This is typical for Java but atypical for HTTP/2. This is motivated by exception transparency:
  * an [IOException] that was triggered by a certain caller can be caught and handled by that caller.
  */
+@Suppress("NAME_SHADOWING")
 class Http2Connection internal constructor(builder: Builder) : Closeable {
 
   // Internal state of this connection is guarded by 'this'. No blocking operations may be
@@ -700,11 +701,11 @@ class Http2Connection internal constructor(builder: Builder) : Closeable {
     }
 
     override fun ping(
-      reply: Boolean,
+      ack: Boolean,
       payload1: Int,
       payload2: Int
     ) {
-      if (reply) {
+      if (ack) {
         synchronized(this@Http2Connection) {
           awaitingPong = false
           this@Http2Connection.notifyAll()
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
index 4be10de903..045150fed3 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Stream.kt
@@ -33,6 +33,7 @@ import java.net.SocketTimeoutException
 import java.util.ArrayDeque
 
 /** A logical bidirectional stream. */
+@Suppress("NAME_SHADOWING")
 class Http2Stream internal constructor(
   val id: Int,
   val connection: Http2Connection,
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.kt b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.kt
index 1b636e986a..64221e7667 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.kt
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Writer.kt
@@ -41,6 +41,7 @@ import java.util.logging.Level.FINE
 import java.util.logging.Logger
 
 /** Writes HTTP/2 transport frames. */
+@Suppress("NAME_SHADOWING")
 class Http2Writer(
   private val sink: BufferedSink,
   private val client: Boolean
diff --git a/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.kt b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.kt
index f6c3afcb34..df3ee9b1c4 100644
--- a/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.kt
+++ b/okhttp/src/main/java/okhttp3/internal/tls/OkHostnameVerifier.kt
@@ -29,6 +29,7 @@ import javax.net.ssl.SSLSession
  *
  * [rfc_2818]: http://www.ietf.org/rfc/rfc2818.txt
  */
+@Suppress("NAME_SHADOWING")
 object OkHostnameVerifier : HostnameVerifier {
   private const val ALT_DNS_NAME = 2
   private const val ALT_IPA_NAME = 7
diff --git a/okhttp/src/test/java/okhttp3/CertificatePinnerKotlinTest.kt b/okhttp/src/test/java/okhttp3/CertificatePinnerKotlinTest.kt
index 2ecf967259..8de9cea1de 100644
--- a/okhttp/src/test/java/okhttp3/CertificatePinnerKotlinTest.kt
+++ b/okhttp/src/test/java/okhttp3/CertificatePinnerKotlinTest.kt
@@ -29,7 +29,7 @@ class CertificatePinnerKotlinTest {
         .add("example.com", "sha1/" + certA1.certificate.toSha1ByteString().base64())
         .build()
 
-    certificatePinner.check("example.com", certA1.certificate)
+    certificatePinner.check("example.com", listOf(certA1.certificate))
   }
 
   @Test fun successfulFindMatchingPins() {
diff --git a/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt b/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
index 49ed238178..36d1da59b5 100644
--- a/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
+++ b/okhttp/src/test/java/okhttp3/KotlinSourceModernTest.kt
@@ -90,7 +90,8 @@ import javax.net.ssl.X509TrustManager
     "UNUSED_VARIABLE",
     "VARIABLE_WITH_REDUNDANT_INITIALIZER",
     "RedundantLambdaArrow",
-    "RedundantExplicitType"
+    "RedundantExplicitType",
+    "IMPLICIT_NOTHING_AS_TYPE_PARAMETER"
 )
 class KotlinSourceModernTest {
   @Test @Ignore
@@ -256,7 +257,6 @@ class KotlinSourceModernTest {
     builder = builder.allEnabledTlsVersions()
     builder = builder.tlsVersions(TlsVersion.TLS_1_3)
     builder = builder.tlsVersions("", "")
-    builder = builder.supportsTlsExtensions(false)
     val connectionSpec: ConnectionSpec = builder.build()
   }
 
@@ -480,7 +480,6 @@ class KotlinSourceModernTest {
     interceptor = HttpLoggingInterceptor(HttpLoggingInterceptor.Logger.DEFAULT)
     interceptor.redactHeader("")
     interceptor.level = HttpLoggingInterceptor.Level.BASIC
-    interceptor.setLevel(HttpLoggingInterceptor.Level.BASIC)
     var level: HttpLoggingInterceptor.Level = interceptor.level
     interceptor.intercept(newInterceptorChain())
   }
diff --git a/samples/crawler/build.gradle b/samples/crawler/build.gradle
index d9f72bd9c2..7bcfa55a08 100644
--- a/samples/crawler/build.gradle
+++ b/samples/crawler/build.gradle
@@ -2,3 +2,7 @@ dependencies {
   implementation project(':okhttp')
   implementation deps.jsoup
 }
+
+tasks.withType(JavaCompile) {
+  options.warnings = false
+}
\ No newline at end of file
diff --git a/samples/guide/build.gradle b/samples/guide/build.gradle
index 7f2ef89506..f7864f3c93 100644
--- a/samples/guide/build.gradle
+++ b/samples/guide/build.gradle
@@ -4,3 +4,7 @@ dependencies {
   implementation project(':okhttp-tls')
   implementation deps.moshi
 }
+
+tasks.withType(JavaCompile) {
+  options.warnings = false
+}
diff --git a/samples/static-server/build.gradle b/samples/static-server/build.gradle
index 1b1bb519c6..7b03c052c1 100644
--- a/samples/static-server/build.gradle
+++ b/samples/static-server/build.gradle
@@ -1,5 +1,9 @@
 apply plugin: 'com.github.johnrengelman.shadow'
 
+tasks.withType(JavaCompile) {
+  options.warnings = false
+}
+
 jar {
   manifest {
     attributes 'Main-Class': 'okhttp3.sample.SampleServer'
