diff --git a/okhttp-tests/src/test/java/okhttp3/CallTest.java b/okhttp-tests/src/test/java/okhttp3/CallTest.java
index 380707622e..b63fc8620d 100644
--- a/okhttp-tests/src/test/java/okhttp3/CallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CallTest.java
@@ -117,6 +117,79 @@
     logger.removeHandler(logHandler);
   }
 
+  enum NetworkSpeed {
+    REALLY_BAD_SLOW_INTERNET;
+
+    public boolean isSuperSlow() {
+      return true;
+    }
+  }
+
+  @Test
+  public void stringOperationsAreWeird() throws Exception {
+    String s = "    erica     ";
+    String s2 = s.trim();
+    System.out.println(s2);
+    String s3 = s.toUpperCase();
+    System.out.println(s3);
+
+    int i = 5;
+    i = i + 1;
+    System.out.println(i);
+  }
+
+  @Test
+  public void interceptorsChainsStuff() throws Exception {
+
+    final NetworkSpeed networkSpeed = NetworkSpeed.REALLY_BAD_SLOW_INTERNET;
+
+    Interceptor outerInterceptor = new Interceptor() {
+      @Override public Response intercept(Chain originalChain) throws IOException {
+        Chain chain222 = originalChain.withReadTimeout(10, TimeUnit.SECONDS);
+
+        assertEquals(TimeUnit.SECONDS.toMillis(5), originalChain.getReadTimeout());
+        assertEquals(TimeUnit.SECONDS.toMillis(10), chain222.getReadTimeout());
+
+        Response response = chain222.proceed(originalChain.request());
+
+        assertEquals(TimeUnit.SECONDS.toMillis(5), originalChain.getReadTimeout());
+        assertEquals(TimeUnit.SECONDS.toMillis(10), chain222.getReadTimeout());
+
+        return response;
+      }
+    };
+
+
+    Interceptor innerInterceptor = new Interceptor() {
+      @Override public Response intercept(Chain chain) throws IOException {
+        System.out.println("2  INNER CHAIN TIMEOUT BEFORE: " + chain.getReadTimeout());
+
+        assertEquals(TimeUnit.SECONDS.toMillis(10), chain.getReadTimeout());
+
+        Response response = chain.proceed(chain.request());
+        System.out.println("3  INNER CHAIN TIMEOUT AFTER: " + chain.getReadTimeout());
+        return response;
+      }
+    };
+
+    client = client.newBuilder()
+        .readTimeout(5L, TimeUnit.SECONDS)
+        .addInterceptor(outerInterceptor)
+        .addInterceptor(innerInterceptor)
+        .build();
+
+    server.enqueue(new MockResponse().setBody("abc"));
+    server.enqueue(new MockResponse().setBody("def"));
+
+    Request request1 = new Request.Builder()
+        .url(server.url("/"))
+        .build();
+    Call call1 = client.newCall(request1);
+    Response response1 = call1.execute();
+    System.out.println(response1.body().string());
+
+  }
+
   @Test public void get() throws Exception {
     server.enqueue(new MockResponse()
         .setBody("abc")
diff --git a/okhttp/src/main/java/okhttp3/Interceptor.java b/okhttp/src/main/java/okhttp3/Interceptor.java
index 71e133e097..f5dbf09ea3 100644
--- a/okhttp/src/main/java/okhttp3/Interceptor.java
+++ b/okhttp/src/main/java/okhttp3/Interceptor.java
@@ -16,6 +16,7 @@
 package okhttp3;
 
 import java.io.IOException;
+import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
 
 /**
@@ -36,5 +37,8 @@
      * of network interceptors; for application interceptors this is always null.
      */
     @Nullable Connection connection();
+
+    int getReadTimeout();
+    Chain withReadTimeout(int newReadTimeout, TimeUnit timeUnit);
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 922d8a3b41..9df348b8dd 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -181,7 +181,7 @@ Response getResponseWithInterceptorChain() throws IOException {
     interceptors.add(new CallServerInterceptor(forWebSocket));
 
     Interceptor.Chain chain = new RealInterceptorChain(
-        interceptors, null, null, null, 0, originalRequest);
+        interceptors, null, null, null, 0, originalRequest, client.readTimeoutMillis() );
     return chain.proceed(originalRequest);
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
index cabd065813..f1d82b17d6 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/ConnectInterceptor.java
@@ -39,7 +39,7 @@ public ConnectInterceptor(OkHttpClient client) {
 
     // We need the network to satisfy this request. Possibly for validating a conditional GET.
     boolean doExtensiveHealthChecks = !request.method().equals("GET");
-    HttpCodec httpCodec = streamAllocation.newStream(client, doExtensiveHealthChecks);
+    HttpCodec httpCodec = streamAllocation.newStream(client, doExtensiveHealthChecks, chain.getReadTimeout());
     RealConnection connection = streamAllocation.connection();
 
     return realChain.proceed(request, streamAllocation, httpCodec, connection);
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
index 3148cea7cb..ce3d984a85 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
@@ -90,9 +90,8 @@ public StreamAllocation(ConnectionPool connectionPool, Address address, Object c
     this.callStackTrace = callStackTrace;
   }
 
-  public HttpCodec newStream(OkHttpClient client, boolean doExtensiveHealthChecks) {
+  public HttpCodec newStream(OkHttpClient client, boolean doExtensiveHealthChecks, int readTimeout) {
     int connectTimeout = client.connectTimeoutMillis();
-    int readTimeout = client.readTimeoutMillis();
     int writeTimeout = client.writeTimeoutMillis();
     boolean connectionRetryEnabled = client.retryOnConnectionFailure();
 
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
index 6cd614b172..def12835c2 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 import okhttp3.Connection;
 import okhttp3.Interceptor;
 import okhttp3.Request;
@@ -30,6 +31,8 @@
  */
 public final class RealInterceptorChain implements Interceptor.Chain {
   private final List<Interceptor> interceptors;
+
+
   private final StreamAllocation streamAllocation;
   private final HttpCodec httpCodec;
   private final RealConnection connection;
@@ -37,20 +40,34 @@
   private final Request request;
   private int calls;
 
+  private final int readTimeout;
+
   public RealInterceptorChain(List<Interceptor> interceptors, StreamAllocation streamAllocation,
-      HttpCodec httpCodec, RealConnection connection, int index, Request request) {
+                              HttpCodec httpCodec, RealConnection connection, int index,
+                              Request request, int readTimeout) {
     this.interceptors = interceptors;
-    this.connection = connection;
     this.streamAllocation = streamAllocation;
     this.httpCodec = httpCodec;
+    this.connection = connection;
     this.index = index;
     this.request = request;
+    this.readTimeout = readTimeout;
   }
 
   @Override public Connection connection() {
     return connection;
   }
 
+  @Override
+  public int getReadTimeout() {
+    return readTimeout;
+  }
+
+  @Override
+  public Interceptor.Chain withReadTimeout(int newReadTimeout, TimeUnit timeUnit) {
+    return new RealInterceptorChain(interceptors, streamAllocation, httpCodec, connection, index, request, (int) timeUnit.toMillis(newReadTimeout));
+  }
+
   public StreamAllocation streamAllocation() {
     return streamAllocation;
   }
@@ -87,7 +104,7 @@ public Response proceed(Request request, StreamAllocation streamAllocation, Http
 
     // Call the next interceptor in the chain.
     RealInterceptorChain next = new RealInterceptorChain(
-        interceptors, streamAllocation, httpCodec, connection, index + 1, request);
+        interceptors, streamAllocation, httpCodec, connection, index + 1, request, readTimeout);
     Interceptor interceptor = interceptors.get(index);
     Response response = interceptor.intercept(next);
 
