diff --git a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
index e843d1bda0..309ebc3f30 100644
--- a/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/okhttp3/logging/HttpLoggingInterceptor.java
@@ -283,7 +283,8 @@ static boolean isPlaintext(Buffer buffer) throws EOFException {
         if (prefix.exhausted()) {
           break;
         }
-        if (Character.isISOControl(prefix.readUtf8CodePoint())) {
+        int codePoint = prefix.readUtf8CodePoint();
+        if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {
           return false;
         }
       }
diff --git a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
index ad507a90d2..caa6cd72bd 100644
--- a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
@@ -597,6 +597,8 @@ private void bodyGetNoBody(int code) throws IOException {
   @Test public void isPlaintext() throws IOException {
     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer()));
     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("abc")));
+    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines")));
+    assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space")));
     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x80)));
     assertFalse(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x00)));
     assertFalse(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0xc0)));
