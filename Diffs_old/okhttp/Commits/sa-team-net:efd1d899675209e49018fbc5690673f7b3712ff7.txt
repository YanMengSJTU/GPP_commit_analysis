diff --git a/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java b/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java
index 56611be40a..52a512fd3f 100644
--- a/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java
+++ b/okhttp-tests/src/test/java/okhttp3/UrlComponentEncodingTester.java
@@ -71,7 +71,7 @@
     map.put(      0x1a, Encoding.PERCENT); // Substitute
     map.put(      0x1b, Encoding.PERCENT); // Escape
     map.put(      0x1c, Encoding.PERCENT); // File Separator
-    map.put(      0x1d, Encoding.PERCENT); // Group Separator
+    map.put(      0x1d, Encoding.PERCENT); // GroupOfResourses Separator
     map.put(      0x1e, Encoding.PERCENT); // Record Separator
     map.put(      0x1f, Encoding.PERCENT); // Unit Separator
     map.put((int)  ' ', Encoding.PERCENT);
diff --git a/okhttp/src/main/java/okhttp3/GroupOfResourses.java b/okhttp/src/main/java/okhttp3/GroupOfResourses.java
new file mode 100644
index 0000000000..d49ffd3009
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/GroupOfResourses.java
@@ -0,0 +1,52 @@
+package okhttp3;
+
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.io.IOException;
+import java.util.List;
+import java.util.PriorityQueue;
+
+/**
+ * Created by antonzalaldinov on 18/04/2017.
+ */
+
+
+public class GroupOfResourses {
+
+    Object obj;
+    private String groupName;
+    public int priority;
+    public List<Request> listOfResourses;
+    OkHttpClient client;
+    public GroupOfResourses(String groupName,int priority,OkHttpClient client){
+        listOfResourses = new ArrayList<>();
+        this.priority = priority;
+        this.groupName = groupName;
+        this.client = client;
+    }
+
+    public void buildGroup(String [] strings){
+        for (int i = 0; i < strings.length; i++) {
+            Request request = new Request.Builder()
+                    .url(strings[i])
+                    .build();
+            this.listOfResourses.add(request);
+        }
+
+    }
+
+
+    public void addResourseToGroup(Request request){
+        this.listOfResourses.add(request);
+    }
+
+    public List<String> execute() throws IOException {
+        List<String> pullOfResponses = new ArrayList<>();
+        for (int i = 0; i <listOfResourses.size() ; i++) {
+            try (Response response = client.newCall(listOfResourses.get(i)).execute()) {
+                pullOfResponses.add(response.body().string());
+            }
+        }
+        return pullOfResponses;
+    }
+}
diff --git a/okhttp/src/main/java/okhttp3/HttpUrl.java b/okhttp/src/main/java/okhttp3/HttpUrl.java
index 6b37d5630d..0fa67771dd 100644
--- a/okhttp/src/main/java/okhttp3/HttpUrl.java
+++ b/okhttp/src/main/java/okhttp3/HttpUrl.java
@@ -1590,7 +1590,7 @@ private static InetAddress decodeIpv6(String input, int pos, int limit) {
           compress = b;
           if (i == limit) break;
         } else if (b != 0) {
-          // Group separator ":" delimiter.
+          // GroupOfResourses separator ":" delimiter.
           if (input.regionMatches(i, ":", 0, 1)) {
             i++;
           } else if (input.regionMatches(i, ".", 0, 1)) {
@@ -1613,7 +1613,7 @@ private static InetAddress decodeIpv6(String input, int pos, int limit) {
           value = (value << 4) + hexDigit;
         }
         int groupLength = i - groupOffset;
-        if (groupLength == 0 || groupLength > 4) return null; // Group is the wrong size.
+        if (groupLength == 0 || groupLength > 4) return null; // GroupOfResourses is the wrong size.
 
         // We've successfully read a group. Assign its value to our byte array.
         address[b++] = (byte) ((value >>> 8) & 0xff);
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index 8d4bfd3d65..357aca9576 100644
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -31,10 +31,7 @@
 import java.security.GeneralSecurityException;
 import java.security.KeyStore;
 import java.security.SecureRandom;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
+import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;
 
@@ -194,11 +191,19 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   final int readTimeout;
   final int writeTimeout;
   final int pingInterval;
+ // HashMap<GroupOfResourses,List<Resourse>> listOfGroups;
 
   public OkHttpClient() {
     this(new Builder());
   }
 
+  public void addGroup(){
+
+  }
+
+  public void addResourse(){
+
+  }
   OkHttpClient(Builder builder) {
     this.dispatcher = builder.dispatcher;
     this.proxy = builder.proxy;
@@ -240,6 +245,15 @@ public OkHttpClient() {
     this.pingInterval = builder.pingInterval;
   }
 
+//  public void addGroopOfResourses(String name,int priority){
+//    GroupOfResourses groupOfResourses = new GroupOfResourses(name,null,priority);
+//    listOfGroups.put(groupOfResourses,null);
+//  }
+//
+//  public void addResourseToGroup(String name,URL url,GroupOfResourses groupOfResourses){
+//      Resourse resourse = new Resourse(url,name,groupOfResourses);
+//      listOfGroups.get(groupOfResourses).add(resourse);
+//  }
   private X509TrustManager systemDefaultTrustManager() {
     try {
       TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
@@ -378,6 +392,13 @@ public Dispatcher dispatcher() {
   @Override public Call newCall(Request request) {
     return new RealCall(this, request, false /* for web socket */);
   }
+  public List<Call> newCall(List<Request> listOfRequests) {
+    List<Call> listOfCalls = null;
+    for (int i = 0; i < listOfRequests.size(); i++) {
+      listOfCalls.add(new RealCall(this, listOfRequests.get(i), false /* for web socket */));
+    }
+    return listOfCalls ;
+  }
 
   /**
    * Uses {@code request} to connect a new web socket.
@@ -823,4 +844,6 @@ public OkHttpClient build() {
       return new OkHttpClient(this);
     }
   }
+
+
 }
diff --git a/samples/guide/src/main/java/okhttp3/guide/GetExample.java b/samples/guide/src/main/java/okhttp3/guide/GetExample.java
index dfc97eab31..a1f39ef2a1 100644
--- a/samples/guide/src/main/java/okhttp3/guide/GetExample.java
+++ b/samples/guide/src/main/java/okhttp3/guide/GetExample.java
@@ -6,7 +6,7 @@
 import okhttp3.Response;
 import okhttp3.internal.block.BlockingInterceptor;
 
-public class GetExample {
+public class  GetExample {
   OkHttpClient client;
 
   String run(String url) throws IOException {
diff --git a/samples/guide/src/main/java/okhttp3/guide/PriorityExample.java b/samples/guide/src/main/java/okhttp3/guide/PriorityExample.java
new file mode 100644
index 0000000000..6568105b2b
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/guide/PriorityExample.java
@@ -0,0 +1,69 @@
+package okhttp3.guide;
+
+import okhttp3.GroupOfResourses;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.block.BlockingInterceptor;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.List;
+
+/**
+ * Created by antonzalaldinov on 18/04/2017.
+ */
+public class PriorityExample {
+    OkHttpClient client;
+    public class Comp implements Comparator<GroupOfResourses> {
+
+
+        @Override
+        public int compare(GroupOfResourses groupOfResourses1,
+                           GroupOfResourses groupOfResourses2) {
+            if (groupOfResourses1.priority==groupOfResourses2.priority){
+                return 0;
+            } else if (groupOfResourses1.priority>groupOfResourses2.priority)
+                return 1;
+            else
+                return -1;
+        }
+
+    }
+
+    void priorityRun(List<String> requestList) throws IOException {
+        client = new OkHttpClient().newBuilder()
+                .build();
+        GroupOfResourses study = new GroupOfResourses("Study",3,client);
+        String [] studyList = {"https://raw.github.com","https://ru.wikipedia.org"};
+        study.buildGroup(studyList);
+        GroupOfResourses fun = new GroupOfResourses("Fun",1,client);
+        String [] funList = {"https://www.youtube.com","https://www.facebook.com"};
+        fun.buildGroup(funList);
+        GroupOfResourses illegal = new GroupOfResourses("Illegal",2,client);
+        String [] illegalList = {"http://maintracker.org/forum/index.php","http://www.macdigger.ru"};
+        illegal.buildGroup(illegalList);
+        GroupOfResourses[] arrayOfGroups= {fun, study,illegal};
+        Arrays.sort(arrayOfGroups, new Comp());
+        String[] responses = null;
+        for (int i = 0; i < arrayOfGroups.length; i++) {
+            List<String> list = arrayOfGroups[i].execute();
+            for (int j = 0; j < list.size(); j++) {
+                System.out.println(list.get(j));
+            }
+
+
+            }
+        }
+
+    public static void main(String[] args) throws IOException {
+        PriorityExample example = new PriorityExample();
+        List <String> requestList = new ArrayList<>();
+        requestList.add("https://ru.wikipedia.org");
+        requestList.add("https://www.google.ru");
+        requestList.add("https://www.facebook.com");
+        example.priorityRun(requestList);
+    }
+}
\ No newline at end of file
diff --git a/samples/slack/src/main/java/okhttp3/slack/SlackClient.java b/samples/slack/src/main/java/okhttp3/slack/SlackClient.java
index 2aa2608986..a5bf818bca 100644
--- a/samples/slack/src/main/java/okhttp3/slack/SlackClient.java
+++ b/samples/slack/src/main/java/okhttp3/slack/SlackClient.java
@@ -92,7 +92,7 @@ public static void main(String... args) throws Exception {
     } else {
       OAuthSession session = new OAuthSession(true,
           "xoxp-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
-          scopes, "UXXXXXXXX", "My Slack Group", "TXXXXXXXX");
+          scopes, "UXXXXXXXX", "My Slack GroupOfResourses", "TXXXXXXXX");
       client.initOauthSession(session);
     }
 
