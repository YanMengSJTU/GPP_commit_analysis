diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
index d46494d95b..49ec16b22f 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheInterceptor.java
@@ -60,10 +60,12 @@ public CacheInterceptor(InternalCache cache) {
     Request networkRequest = strategy.networkRequest;
     Response cacheResponse = strategy.cacheResponse;
 
+    //更新cache计数
     if (cache != null) {
       cache.trackResponse(strategy);
     }
 
+    //无需使用cache，释放body
     if (cacheCandidate != null && cacheResponse == null) {
       closeQuietly(cacheCandidate.body()); // The cache candidate wasn't applicable. Close it.
     }
@@ -243,7 +245,7 @@ private static Headers combine(Headers cachedHeaders, Headers networkHeaders) {
   /**
    * Returns true if {@code fieldName} is an end-to-end HTTP header, as defined by RFC 2616,
    * 13.5.1.
-   */
+   */ //http://www.cnblogs.com/imyalost/p/5708445.html
   static boolean isEndToEnd(String fieldName) {
     return !"Connection".equalsIgnoreCase(fieldName)
         && !"Keep-Alive".equalsIgnoreCase(fieldName)
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
index 3ae1926650..b7274dcf5a 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/CacheStrategy.java
@@ -169,9 +169,11 @@ public Factory(long nowMillis, Request request, Response cacheResponse) {
     /**
      * Returns a strategy to satisfy {@code request} using the a cached response {@code response}.
      */
+    //如果request不为空，则需要进行网络请求，如果response不为空则使用缓存
     public CacheStrategy get() {
       CacheStrategy candidate = getCandidate();
 
+      //如果设置了only-if-cache标志，则需要禁止进行网络请求，
       if (candidate.networkRequest != null && request.cacheControl().onlyIfCached()) {
         // We're forbidden from using the network and the cache is insufficient.
         return new CacheStrategy(null, null);
@@ -187,7 +189,7 @@ private CacheStrategy getCandidate() {
         return new CacheStrategy(request, null);
       }
 
-      // Drop the cached response if it's missing a required handshake.
+      // Drop the cached response if it's missing a required handshake.https需要握手信息
       if (request.isHttps() && cacheResponse.handshake() == null) {
         return new CacheStrategy(request, null);
       }
