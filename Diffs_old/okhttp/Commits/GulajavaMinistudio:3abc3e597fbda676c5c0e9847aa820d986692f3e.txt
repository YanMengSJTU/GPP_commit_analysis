diff --git a/build.gradle b/build.gradle
index b347d7d953..677d783581 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,6 +7,7 @@ buildscript {
       'animalSniffer': '1.17',
       'assertj': '3.11.0',
       'bouncycastle': '1.62',
+      'brotli': '0.1.2',
       'checkstyle': '8.15',
       'conscrypt': '2.1.0',
       'findbugs': '3.0.2',
@@ -27,6 +28,7 @@ buildscript {
       'animalSniffer': "org.codehaus.mojo:animal-sniffer-annotations:${versions.animalSniffer}",
       'assertj': "org.assertj:assertj-core:${versions.assertj}",
       'bouncycastle': "org.bouncycastle:bcprov-jdk15on:${versions.bouncycastle}",
+      'brotli': "org.brotli:dec:${versions.brotli}",
       'conscrypt': "org.conscrypt:conscrypt-openjdk-uber:${versions.conscrypt}",
       'guava': "com.google.guava:guava:${versions.guava}",
       'jnrUnixsocket': "com.github.jnr:jnr-unixsocket:${versions.jnrUnixsocket}",
diff --git a/okhttp-brotli/README.md b/okhttp-brotli/README.md
new file mode 100644
index 0000000000..4f8e802fd2
--- /dev/null
+++ b/okhttp-brotli/README.md
@@ -0,0 +1,4 @@
+OkHttp Brotli Implementation
+============================
+
+This module is an implementation of Brotli compression.
diff --git a/okhttp-brotli/build.gradle b/okhttp-brotli/build.gradle
new file mode 100644
index 0000000000..c04a996383
--- /dev/null
+++ b/okhttp-brotli/build.gradle
@@ -0,0 +1,19 @@
+apply plugin: 'com.vanniktech.maven.publish'
+
+jar {
+  manifest {
+    attributes('Automatic-Module-Name': 'okhttp3.brotli')
+  }
+}
+
+dependencies {
+  api project(':okhttp')
+  api deps.brotli
+  compileOnly deps.jsr305
+
+  testImplementation project(':okhttp-testing-support')
+  testImplementation project(':mockwebserver')
+  testImplementation deps.conscrypt
+  testImplementation deps.junit
+  testImplementation deps.assertj
+}
diff --git a/okhttp-brotli/gradle.properties b/okhttp-brotli/gradle.properties
new file mode 100644
index 0000000000..dc6217c482
--- /dev/null
+++ b/okhttp-brotli/gradle.properties
@@ -0,0 +1,3 @@
+POM_ARTIFACT_ID=okhttp-brotli
+POM_NAME=okhttp-brotli
+POM_PACKAGING=jar
diff --git a/okhttp-brotli/src/main/java/okhttp3/brotli/BrotliInterceptor.kt b/okhttp-brotli/src/main/java/okhttp3/brotli/BrotliInterceptor.kt
new file mode 100644
index 0000000000..0dac0fd21a
--- /dev/null
+++ b/okhttp-brotli/src/main/java/okhttp3/brotli/BrotliInterceptor.kt
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.brotli
+
+import okhttp3.Interceptor
+import okhttp3.Response
+import okhttp3.ResponseBody.Companion.asResponseBody
+import okio.GzipSource
+import okio.buffer
+import okio.source
+import org.brotli.dec.BrotliInputStream
+
+/**
+ * Transparent Brotli response support.
+ *
+ * Adds Accept-Encoding: br to request and checks (and strips) for Content-Encoding: br in
+ * responses.  n.b. this replaces the transparent gzip compression InBridgeInterceptor.
+ */
+object BrotliInterceptor : Interceptor {
+  override fun intercept(chain: Interceptor.Chain): Response =
+      if (chain.request().header("Accept-Encoding") == null) {
+        val request = chain.request().newBuilder()
+            .header("Accept-Encoding", "br,gzip")
+            .build()
+
+        val response = chain.proceed(request)
+
+        uncompress(response)
+      } else {
+        chain.proceed(chain.request())
+      }
+
+  internal fun uncompress(response: Response): Response {
+    val body = response.body ?: return response
+    val encoding = response.header("Content-Encoding") ?: return response
+
+    val decompressedSource = when {
+      encoding.equals("br", ignoreCase = true) ->
+        BrotliInputStream(body.source().inputStream()).source().buffer()
+      encoding.equals("gzip", ignoreCase = true) ->
+        GzipSource(body.source()).buffer()
+      else -> return response
+    }
+
+    return response.newBuilder()
+        .removeHeader("Content-Encoding")
+        .removeHeader("Content-Length")
+        .body(decompressedSource.asResponseBody(body.contentType(), -1))
+        .build()
+  }
+}
diff --git a/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliInterceptorJavaApiTest.java b/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliInterceptorJavaApiTest.java
new file mode 100644
index 0000000000..9b0efd0b11
--- /dev/null
+++ b/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliInterceptorJavaApiTest.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.brotli;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+public class BrotliInterceptorJavaApiTest {
+  @Test @Ignore
+  public void testApi() {
+    BrotliInterceptor.INSTANCE.intercept(null);
+  }
+}
diff --git a/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliInterceptorTest.kt b/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliInterceptorTest.kt
new file mode 100644
index 0000000000..8290a1999e
--- /dev/null
+++ b/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliInterceptorTest.kt
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.brotli
+
+import okhttp3.MediaType.Companion.toMediaType
+import okhttp3.Protocol
+import okhttp3.Request
+import okhttp3.Response
+import okhttp3.ResponseBody.Companion.toResponseBody
+import okio.ByteString
+import okio.ByteString.Companion.decodeHex
+import okio.ByteString.Companion.encodeUtf8
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Assert.fail
+import org.junit.Test
+import java.io.IOException
+
+class BrotliInterceptorTest {
+  @Test
+  fun testUncompressBrotli() {
+    val s =
+        "1bce00009c05ceb9f028d14e416230f718960a537b0922d2f7b6adef56532c08dff44551516690131494db" +
+            "6021c7e3616c82c1bc2416abb919aaa06e8d30d82cc2981c2f5c900bfb8ee29d5c03deb1c0dacff80e" +
+            "abe82ba64ed250a497162006824684db917963ecebe041b352a3e62d629cc97b95cac24265b175171e" +
+            "5cb384cd0912aeb5b5dd9555f2dd1a9b20688201"
+
+    val response = response("https://httpbin.org/brotli", s.decodeHex()) {
+      header("Content-Encoding", "br")
+    }
+
+    val uncompressed = BrotliInterceptor.uncompress(response)
+
+    val responseString = uncompressed.body?.string()
+    assertThat(responseString).contains("\"brotli\": true,")
+    assertThat(responseString).contains("\"Accept-Encoding\": \"br\"")
+  }
+
+  @Test
+  fun testNoUncompress() {
+    val response = response("https://httpbin.org/brotli", "XXXX".encodeUtf8())
+
+    val same = BrotliInterceptor.uncompress(response)
+
+    val responseString = same.body?.string()
+    assertThat(responseString).isEqualTo("XXXX")
+  }
+
+  @Test
+  fun testFailsUncompress() {
+    val response = response("https://httpbin.org/brotli", "bb919aaa06e8".decodeHex()) {
+      header("Content-Encoding", "br")
+    }
+
+    try {
+      val failingResponse = BrotliInterceptor.uncompress(response)
+      failingResponse.body?.string()
+
+      fail("expected uncompress error")
+    } catch (ioe: IOException) {
+      assertThat(ioe).hasMessage("Brotli stream decoding failed")
+      assertThat(ioe.cause?.javaClass?.simpleName).isEqualTo("BrotliRuntimeException")
+    }
+  }
+
+  private fun response(
+    url: String,
+    bodyHex: ByteString,
+    fn: Response.Builder.() -> Unit = {}
+  ): Response {
+    return Response.Builder()
+        .body(bodyHex.toResponseBody("text/plain".toMediaType()))
+        .code(200)
+        .message("OK")
+        .request(Request.Builder().url(url).build())
+        .protocol(Protocol.HTTP_2)
+        .apply(fn)
+        .build()
+  }
+}
\ No newline at end of file
diff --git a/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliTestMain.kt b/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliTestMain.kt
new file mode 100644
index 0000000000..4c3bce5736
--- /dev/null
+++ b/okhttp-brotli/src/test/java/okhttp3/brotli/BrotliTestMain.kt
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2019 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.brotli
+
+import okhttp3.OkHttpClient
+import okhttp3.Request
+
+fun main() {
+  val client = OkHttpClient.Builder()
+      .addInterceptor(BrotliInterceptor)
+      .build()
+
+  val req = Request.Builder()
+      .url("https://httpbin.org/brotli")
+      .build()
+
+  client.newCall(req).execute().use {
+    println(it.body?.string())
+  }
+}
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index 367bee6364..17da3db548 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,6 +1,7 @@
 include ':mockwebserver'
 include ':okcurl'
 include ':okhttp'
+include ':okhttp-brotli'
 include ':okhttp-dnsoverhttps'
 include ':okhttp-hpacktests'
 include ':okhttp-logging-interceptor'
