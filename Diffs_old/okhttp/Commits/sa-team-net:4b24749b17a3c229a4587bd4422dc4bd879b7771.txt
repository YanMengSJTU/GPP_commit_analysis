diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index 7f125dcb14..88d0aa52aa 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -21,10 +21,7 @@
 import okhttp3.internal.NamedRunnable;
 import okhttp3.internal.connection.ConnectInterceptor;
 import okhttp3.internal.connection.StreamAllocation;
-import okhttp3.internal.http.BridgeInterceptor;
-import okhttp3.internal.http.CallServerInterceptor;
-import okhttp3.internal.http.RealInterceptorChain;
-import okhttp3.internal.http.RetryAndFollowUpInterceptor;
+import okhttp3.internal.http.*;
 import okhttp3.internal.platform.Platform;
 
 import static okhttp3.internal.platform.Platform.INFO;
diff --git a/okhttp/src/main/java/okhttp3/internal/block/BlockHosts.java b/okhttp/src/main/java/okhttp3/internal/block/BlockHosts.java
new file mode 100644
index 0000000000..943898d9e3
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/block/BlockHosts.java
@@ -0,0 +1,40 @@
+package okhttp3.internal.block;
+
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+
+public class BlockHosts {
+
+    private static HashSet<String> blockedHosts = new HashSet<>();
+
+    public static boolean addBlock(String host) {
+        if (blockedHosts.contains(host)) {
+            return false;
+        } else {
+            blockedHosts.add(host);
+            return true;
+        }
+    }
+
+    public static boolean isBlocked(String host) {
+        if (blockedHosts.contains(host))
+            return true;
+        else
+            return false;
+    }
+
+
+    public static List<String> addAllBlock(List<String> hosts) {
+        List<String> exists = hosts;
+        for (String h:
+             exists) {
+            if (blockedHosts.contains(h)) {
+                exists.remove(h);
+            }
+            blockedHosts.add(h);
+        }
+        return exists;
+
+    }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/block/BlockInterceptor.java b/okhttp/src/main/java/okhttp3/internal/block/BlockInterceptor.java
new file mode 100644
index 0000000000..02776bf3ad
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/block/BlockInterceptor.java
@@ -0,0 +1,29 @@
+package okhttp3.internal.block;
+
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import okhttp3.internal.http.RealInterceptorChain;
+
+import java.io.IOException;
+
+public class BlockInterceptor implements Interceptor {
+    public final OkHttpClient client;
+
+    public BlockInterceptor(OkHttpClient client) {
+        this.client = client;
+    }
+
+    @Override
+    public Response intercept(Chain chain) throws IOException {
+        RealInterceptorChain realChain = (RealInterceptorChain) chain;
+        Request request = realChain.request();
+        String host = request.url().host();
+        if (BlockHosts.isBlocked(host)) {
+            throw new BlockedHostException("Forbidden resource : " + host);
+        }
+        Response response = realChain.proceed(request);
+        return response;
+    }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/block/BlockedHostException.java b/okhttp/src/main/java/okhttp3/internal/block/BlockedHostException.java
new file mode 100644
index 0000000000..574dbd3047
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/block/BlockedHostException.java
@@ -0,0 +1,12 @@
+package okhttp3.internal.block;
+
+import java.io.IOException;
+
+
+public class BlockedHostException extends IOException {
+    BlockedHostException(String message) {
+        super();
+        System.out.println("Resource blocked");
+        System.out.println(message);
+    }
+}
