diff --git a/okhttp/src/main/java/okhttp3/RequestBody.java b/okhttp/src/main/java/okhttp3/RequestBody.java
index 136cfdc4e3..1bcbb69e50 100644
--- a/okhttp/src/main/java/okhttp3/RequestBody.java
+++ b/okhttp/src/main/java/okhttp3/RequestBody.java
@@ -20,6 +20,7 @@
 import java.nio.charset.Charset;
 import okhttp3.internal.Util;
 import okio.BufferedSink;
+import okio.Buffer;
 import okio.ByteString;
 import okio.Okio;
 import okio.Source;
@@ -36,6 +37,13 @@ public long contentLength() throws IOException {
     return -1;
   }
 
+  /** Returns the request as a string. */
+  public String string() throws IOException {
+    Buffer buffer = new Buffer();
+    writeTo(buffer);
+    return buffer.readUtf8();
+  }
+
   /** Writes the content of this request to {@code out}. */
   public abstract void writeTo(BufferedSink sink) throws IOException;
 
@@ -84,17 +92,17 @@ public static RequestBody create(final MediaType contentType, final byte[] conte
     if (content == null) throw new NullPointerException("content == null");
     Util.checkOffsetAndCount(content.length, offset, byteCount);
     return new RequestBody() {
-      @Override public MediaType contentType() {
-        return contentType;
-      }
+        @Override public MediaType contentType() {
+          return contentType;
+        }
 
-      @Override public long contentLength() {
-        return byteCount;
-      }
+        @Override public long contentLength() {
+          return byteCount;
+        }
 
-      @Override public void writeTo(BufferedSink sink) throws IOException {
-        sink.write(content, offset, byteCount);
-      }
+        @Override public void writeTo(BufferedSink sink) throws IOException {
+          sink.write(content, offset, byteCount);
+        }
     };
   }
 
diff --git a/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java b/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
index 8cb72b4bc8..af8bce7f79 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
@@ -17,10 +17,8 @@
 
 import java.io.IOException;
 import java.util.logging.Logger;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
+
+import okhttp3.*;
 
 public final class LoggingInterceptors {
   private static final Logger logger = Logger.getLogger(LoggingInterceptors.class.getName());
@@ -31,6 +29,7 @@
   public void run() throws Exception {
     Request request = new Request.Builder()
         .url("https://publicobject.com/helloworld.txt")
+        .post(RequestBody.create(MediaType.parse("text/plain"), "Some text."))
         .build();
 
     Response response = client.newCall(request).execute();
@@ -41,13 +40,13 @@ public void run() throws Exception {
     @Override public Response intercept(Chain chain) throws IOException {
       long t1 = System.nanoTime();
       Request request = chain.request();
-      logger.info(String.format("Sending request %s on %s%n%s",
-          request.url(), chain.connection(), request.headers()));
+      logger.info(String.format("Sending request %s on %s%nBody:%n%s%nHeaders:%n%s",
+          request.url(), chain.connection(), request.body().string(), request.headers()));
       Response response = chain.proceed(request);
 
       long t2 = System.nanoTime();
-      logger.info(String.format("Received response for %s in %.1fms%n%s",
-          request.url(), (t2 - t1) / 1e6d, response.headers()));
+      logger.info(String.format("Received response for %s in %.1fms%nBody:%n%s%nHeaders:%n%s",
+          request.url(), (t2 - t1) / 1e6d, response.body().string(), response.headers()));
       return response;
     }
   }
