diff --git a/okhttp/src/main/java/okhttp3/Protocol.java b/okhttp/src/main/java/okhttp3/Protocol.java
index 88d15b9b6b..e0ad2e0760 100644
--- a/okhttp/src/main/java/okhttp3/Protocol.java
+++ b/okhttp/src/main/java/okhttp3/Protocol.java
@@ -28,7 +28,8 @@
  */
 public enum Protocol {
   /**
-   * An obsolete plaintext framing that does not use persistent sockets by default.
+   * An obsolete plaintext framing that does not use persistent sockets by default.'
+   * @deprecated
    */
   HTTP_1_0("http/1.0"),
 
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
index 494e8ea73d..6a0e684ae3 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -189,6 +189,7 @@ public static boolean skipAll(Source source, int duration, TimeUnit timeUnit) th
   }
 
   /** Returns an immutable list containing {@code elements}. */
+  @SafeVarargs
   public static <T> List<T> immutableList(T... elements) {
     return Collections.unmodifiableList(Arrays.asList(elements.clone()));
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/Version.java b/okhttp/src/main/java/okhttp3/internal/Version.java
new file mode 100644
index 0000000000..fce1c067c0
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/internal/Version.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.internal;
+
+public final class Version {
+  public static String userAgent() {
+    return "okhttp/${project.version}";
+  }
+
+  private Version() {
+  }
+}
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
index 29a8ce0cf7..86428086b6 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
+++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.java
@@ -40,6 +40,7 @@
 import okio.Okio;
 import okio.Sink;
 import okio.Source;
+import okio.ForwardingSink;
 
 import static okhttp3.internal.platform.Platform.WARN;
 
@@ -312,8 +313,8 @@ private void readJournal() throws IOException {
 
   private BufferedSink newJournalWriter() throws FileNotFoundException {
     Sink fileSink = fileSystem.appendingSink(journalFile);
-    Sink faultHidingSink = new FaultHidingSink(fileSink) {
-      @Override protected void onException(IOException e) {
+    Sink faultHidingSink = new ForwardingSink(fileSink) {
+      protected void onException(IOException e) {
         assert (Thread.holdsLock(DiskLruCache.this));
         hasJournalErrors = true;
       }
@@ -899,8 +900,8 @@ public Sink newSink(int index) {
         } catch (FileNotFoundException e) {
           return Okio.blackhole();
         }
-        return new FaultHidingSink(sink) {
-          @Override protected void onException(IOException e) {
+        return new ForwardingSink(sink) {
+          protected void onException(IOException e) {
             synchronized (DiskLruCache.this) {
               detach();
             }
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/FaultHidingSink.java b/okhttp/src/main/java/okhttp3/internal/cache/FaultHidingSink.java
deleted file mode 100644
index b10fddb956..0000000000
--- a/okhttp/src/main/java/okhttp3/internal/cache/FaultHidingSink.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.cache;
-
-import java.io.IOException;
-import okio.Buffer;
-import okio.ForwardingSink;
-import okio.Sink;
-
-/** A sink that never throws IOExceptions, even if the underlying sink does. */
-class FaultHidingSink extends ForwardingSink {
-  private boolean hasErrors;
-
-  public FaultHidingSink(Sink delegate) {
-    super(delegate);
-  }
-
-  @Override public void write(Buffer source, long byteCount) throws IOException {
-    if (hasErrors) {
-      source.skip(byteCount);
-      return;
-    }
-    try {
-      super.write(source, byteCount);
-    } catch (IOException e) {
-      hasErrors = true;
-      onException(e);
-    }
-  }
-
-  @Override public void flush() throws IOException {
-    if (hasErrors) return;
-    try {
-      super.flush();
-    } catch (IOException e) {
-      hasErrors = true;
-      onException(e);
-    }
-  }
-
-  @Override public void close() throws IOException {
-    if (hasErrors) return;
-    try {
-      super.close();
-    } catch (IOException e) {
-      hasErrors = true;
-      onException(e);
-    }
-  }
-
-  protected void onException(IOException e) {
-  }
-}
