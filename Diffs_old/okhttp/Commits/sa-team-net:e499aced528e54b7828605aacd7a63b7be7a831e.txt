diff --git a/okhttp/src/main/java/okhttp3/GroupOfResourses.java b/okhttp/src/main/java/okhttp3/GroupOfResourses.java
index d49ffd3009..4ab13e0ce5 100644
--- a/okhttp/src/main/java/okhttp3/GroupOfResourses.java
+++ b/okhttp/src/main/java/okhttp3/GroupOfResourses.java
@@ -12,6 +12,16 @@
 
 
 public class GroupOfResourses {
+    public int compareTo(GroupOfResourses groupOfResourses2) {
+        if (this.priority==groupOfResourses2.priority){
+            return 0;
+        } else if (this.priority>groupOfResourses2.priority)
+            return 1;
+        else
+            return -1;
+    }
+
+
 
     Object obj;
     private String groupName;
diff --git a/okhttp/src/main/java/okhttp3/ResourcePool.java b/okhttp/src/main/java/okhttp3/ResourcePool.java
new file mode 100644
index 0000000000..a9548132dc
--- /dev/null
+++ b/okhttp/src/main/java/okhttp3/ResourcePool.java
@@ -0,0 +1,44 @@
+package okhttp3;
+
+import java.io.IOException;
+import java.util.*;
+
+/**
+ * Created by antonzalaldinov on 19/04/2017.
+ */
+public class ResourcePool {
+
+    private static List<GroupOfResourses> resourses = new ArrayList<>();
+
+    public static void addGroup(GroupOfResourses gr) {
+        resourses.add(gr);
+    }
+
+    public static void addGroup(String name, int priority, String[] resources, OkHttpClient client) {
+        GroupOfResourses gr = new GroupOfResourses(name, priority, client);
+        gr.buildGroup(resources);
+        addGroup(gr);
+    }
+
+    public static void sort() {
+        Collections.sort(resourses, new Comparator<GroupOfResourses>() {
+            @Override
+            public int compare(GroupOfResourses gr1, GroupOfResourses gr2) {
+
+                return gr1.compareTo(gr2);
+            }
+        });
+    }
+
+    public static String[][] execute() throws IOException {
+        String[][] result = new String[resourses.size()][];
+        for (int i = 0; i < resourses.size(); i++) {
+            List<String> list = resourses.get(i).execute();
+            result[i] = new String[list.size()];
+            result[i] = list.toArray(result[i]);
+        }
+        return result;
+    }
+
+}
+
diff --git a/samples/guide/src/main/java/okhttp3/guide/PriorityExample.java b/samples/guide/src/main/java/okhttp3/guide/PriorityExample.java
index 6568105b2b..b44ec15f2c 100644
--- a/samples/guide/src/main/java/okhttp3/guide/PriorityExample.java
+++ b/samples/guide/src/main/java/okhttp3/guide/PriorityExample.java
@@ -1,9 +1,6 @@
 package okhttp3.guide;
 
-import okhttp3.GroupOfResourses;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
+import okhttp3.*;
 import okhttp3.internal.block.BlockingInterceptor;
 
 import java.io.IOException;
@@ -16,54 +13,32 @@
  * Created by antonzalaldinov on 18/04/2017.
  */
 public class PriorityExample {
-    OkHttpClient client;
-    public class Comp implements Comparator<GroupOfResourses> {
+    static OkHttpClient client;
 
 
-        @Override
-        public int compare(GroupOfResourses groupOfResourses1,
-                           GroupOfResourses groupOfResourses2) {
-            if (groupOfResourses1.priority==groupOfResourses2.priority){
-                return 0;
-            } else if (groupOfResourses1.priority>groupOfResourses2.priority)
-                return 1;
-            else
-                return -1;
-        }
-
-    }
-
-    void priorityRun(List<String> requestList) throws IOException {
-        client = new OkHttpClient().newBuilder()
-                .build();
-        GroupOfResourses study = new GroupOfResourses("Study",3,client);
-        String [] studyList = {"https://raw.github.com","https://ru.wikipedia.org"};
-        study.buildGroup(studyList);
-        GroupOfResourses fun = new GroupOfResourses("Fun",1,client);
-        String [] funList = {"https://www.youtube.com","https://www.facebook.com"};
-        fun.buildGroup(funList);
-        GroupOfResourses illegal = new GroupOfResourses("Illegal",2,client);
-        String [] illegalList = {"http://maintracker.org/forum/index.php","http://www.macdigger.ru"};
-        illegal.buildGroup(illegalList);
-        GroupOfResourses[] arrayOfGroups= {fun, study,illegal};
-        Arrays.sort(arrayOfGroups, new Comp());
-        String[] responses = null;
-        for (int i = 0; i < arrayOfGroups.length; i++) {
-            List<String> list = arrayOfGroups[i].execute();
-            for (int j = 0; j < list.size(); j++) {
-                System.out.println(list.get(j));
-            }
-
+    String[][] priorityRun() throws IOException {
 
+        String[][] responses = ResourcePool.execute();
+        for (int i = 0; i < responses.length; i++) {
+            for (int j = 0; j < responses[i].length; j++) {
+                System.out.println(responses[i][j]);
             }
         }
+        return responses;
+    }
 
     public static void main(String[] args) throws IOException {
+        client = new OkHttpClient().newBuilder()
+                .build();
+        String[] urlList = new String[]{"https://raw.github.com", "https://ru.wikipedia.org"};
+        ResourcePool.addGroup("Study", 2, urlList, client);
+        urlList = new String[]{"https://www.youtube.com", "https://www.facebook.com"};
+        ResourcePool.addGroup("Fun", 1, urlList, client);
         PriorityExample example = new PriorityExample();
         List <String> requestList = new ArrayList<>();
         requestList.add("https://ru.wikipedia.org");
         requestList.add("https://www.google.ru");
         requestList.add("https://www.facebook.com");
-        example.priorityRun(requestList);
+        String [][] responses = example.priorityRun();
     }
 }
\ No newline at end of file
