diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
index a30d783f57..5a80495000 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/Platform.java
@@ -120,9 +120,9 @@ private static Platform findPlatform() {
       }
 
       OptionalMethod<Socket> setUseSessionTickets
-          = new OptionalMethod<>(null, "setUseSessionTickets", boolean.class);
+          = new OptionalMethod<Socket>(null, "setUseSessionTickets", boolean.class);
       OptionalMethod<Socket> setHostname
-          = new OptionalMethod<>(null, "setHostname", String.class);
+          = new OptionalMethod<Socket>(null, "setHostname", String.class);
       Method trafficStatsTagSocket = null;
       Method trafficStatsUntagSocket = null;
       OptionalMethod<Socket> getAlpnSelectedProtocol = null;
@@ -137,11 +137,12 @@ private static Platform findPlatform() {
         // Attempt to find Android 5.0+ APIs.
         try {
           Class.forName("android.net.Network"); // Arbitrary class added in Android 5.0.
-          getAlpnSelectedProtocol = new OptionalMethod<>(byte[].class, "getAlpnSelectedProtocol");
-          setAlpnProtocols = new OptionalMethod<>(null, "setAlpnProtocols", byte[].class);
+          getAlpnSelectedProtocol = new OptionalMethod<Socket>(byte[].class, "getAlpnSelectedProtocol");
+          setAlpnProtocols = new OptionalMethod<Socket>(null, "setAlpnProtocols", byte[].class);
         } catch (ClassNotFoundException ignored) {
         }
-      } catch (ClassNotFoundException | NoSuchMethodException ignored) {
+      } catch (ClassNotFoundException ignored) {
+      } catch (NoSuchMethodException ignored) {    
       }
 
       return new Android(setUseSessionTickets, setHostname, trafficStatsTagSocket,
@@ -162,7 +163,8 @@ private static Platform findPlatform() {
       Method removeMethod = negoClass.getMethod("remove", SSLSocket.class);
       return new JdkWithJettyBootPlatform(
           putMethod, getMethod, removeMethod, clientProviderClass, serverProviderClass);
-    } catch (ClassNotFoundException | NoSuchMethodException ignored) {
+    } catch (ClassNotFoundException ignored) {
+    } catch (NoSuchMethodException ignored) {
     }
 
     return new Platform();
@@ -284,7 +286,9 @@ public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method remov
         Object provider = Proxy.newProxyInstance(Platform.class.getClassLoader(),
             new Class[] { clientProviderClass, serverProviderClass }, new JettyNegoProvider(names));
         putMethod.invoke(null, sslSocket, provider);
-      } catch (InvocationTargetException | IllegalAccessException e) {
+      } catch (InvocationTargetException e) {
+        throw new AssertionError(e);
+      } catch (IllegalAccessException e) {
         throw new AssertionError(e);
       }
     }
@@ -292,7 +296,9 @@ public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method remov
     @Override public void afterHandshake(SSLSocket sslSocket) {
       try {
         removeMethod.invoke(null, sslSocket);
-      } catch (IllegalAccessException | InvocationTargetException ignored) {
+      } catch (IllegalAccessException ignored) {
+        throw new AssertionError();
+      } catch (InvocationTargetException ignored) {
         throw new AssertionError();
       }
     }
@@ -307,7 +313,9 @@ public JdkWithJettyBootPlatform(Method putMethod, Method getMethod, Method remov
           return null;
         }
         return provider.unsupported ? null : provider.selected;
-      } catch (InvocationTargetException | IllegalAccessException e) {
+      } catch (InvocationTargetException e) {
+        throw new AssertionError();
+      } catch (IllegalAccessException e) {
         throw new AssertionError();
       }
     }
