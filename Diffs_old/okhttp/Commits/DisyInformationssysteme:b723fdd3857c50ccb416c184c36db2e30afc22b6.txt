diff --git a/src/main/java/net/disy/commons/web/WebUrl.java b/src/main/java/net/disy/commons/web/WebUrl.java
index 5d1f394104..62355a1239 100644
--- a/src/main/java/net/disy/commons/web/WebUrl.java
+++ b/src/main/java/net/disy/commons/web/WebUrl.java
@@ -275,7 +275,7 @@
  * {@code java.net.URL} it's possible to create an awkward URL like {@code http:/} with scheme and
  * path but no hostname. Building APIs that consume such malformed values is difficult!
  *
- * <p>This class has a modern API. It avoids punitive checked exceptions: {@link #get get()}
+ * <p>This class has a modern API. It avoids punitive checked exceptions: {@link #from get()}
  * throws {@link IllegalArgumentException} on invalid input or {@link #parse parse()}
  * returns null if the input is an invalid URL. You can even be explicit about whether each
  * component has been encoded already.
@@ -915,7 +915,7 @@ public static WebUrl get(String url) {
    * Returns an {@link WebUrl} for {@code url} if its protocol is {@code http} or {@code https}, or
    * null if it has any other protocol.
    */
-  static /*@Nullable*/ WebUrl get(URL url) {
+  static /*@Nullable*/ WebUrl from(URL url) {
     return parse(url.toString());
   }
 
diff --git a/src/test/java/net/disy/commons/web/UrlComponentEncodingTester.java b/src/test/java/net/disy/commons/web/UrlComponentEncodingTester.java
index 2fc5f223d2..64c03a429b 100644
--- a/src/test/java/net/disy/commons/web/UrlComponentEncodingTester.java
+++ b/src/test/java/net/disy/commons/web/UrlComponentEncodingTester.java
@@ -273,7 +273,7 @@ private void testToUrl(int codePoint, Encoding encoding, Component component) {
   private void testFromUrl(int codePoint, Encoding encoding, Component component) {
     String encoded = encoding.encode(codePoint);
     WebUrl httpUrl = WebUrl.get(component.urlString(encoded));
-    WebUrl toAndFromJavaNetUrl = WebUrl.get(httpUrl.url()).orElse(null);
+    WebUrl toAndFromJavaNetUrl = WebUrl.from(httpUrl.url());
     if (!toAndFromJavaNetUrl.equals(httpUrl)) {
       fail(format("Encoding %s %#x using %s", component, codePoint, encoding));
     }
@@ -285,7 +285,7 @@ private void testUri(
     String encoded = encoding.encode(codePoint);
     WebUrl httpUrl = WebUrl.get(component.urlString(encoded));
     URI uri = httpUrl.uri();
-    WebUrl toAndFromUri = WebUrl.get(uri).orElse(null);
+    WebUrl toAndFromUri = WebUrl.get(uri);
     if (uriEscaped) {
       // The URI has more escaping than the HttpURL. Check that the decoded values still match.
       if (uri.toString().equals(httpUrl.toString())) {
diff --git a/src/test/java/net/disy/commons/web/WebUrlTest.java b/src/test/java/net/disy/commons/web/WebUrlTest.java
index 9aaa83e3a2..5def9d9885 100644
--- a/src/test/java/net/disy/commons/web/WebUrlTest.java
+++ b/src/test/java/net/disy/commons/web/WebUrlTest.java
@@ -1473,14 +1473,14 @@ WebUrl parse(String url) {
 
   @Test public void fromJavaNetUrl() throws Exception {
     URL javaNetUrl = new URL("http://username:password@host/path?query#fragment");
-    WebUrl httpUrl = WebUrl.get(javaNetUrl);
+    WebUrl httpUrl = WebUrl.from(javaNetUrl);
     assertThat(httpUrl.toString()).isEqualTo(
         "http://username:password@host/path?query#fragment");
   }
 
   @Test public void fromJavaNetUrlUnsupportedScheme() throws Exception {
     URL javaNetUrl = new URL("mailto:user@example.com");
-    assertThat(WebUrl.get(javaNetUrl)).isNull();
+    assertThat(WebUrl.from(javaNetUrl)).isNull();
   }
 
   @Test public void fromUri() throws Exception {
