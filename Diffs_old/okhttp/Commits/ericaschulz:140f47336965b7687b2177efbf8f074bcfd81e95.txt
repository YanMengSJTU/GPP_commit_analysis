diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index a9e3abfa81..ba57efc779 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -188,7 +188,9 @@ Response getResponseWithInterceptorChain() throws IOException {
     interceptors.add(new CallServerInterceptor(forWebSocket));
 
     Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,
+
         originalRequest, this, eventListener, client.readTimeoutMillis(), client.writeTimeoutMillis());
+
     return chain.proceed(originalRequest);
   }
 }
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
index a7908d47e3..fd5a8a953d 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/StreamAllocation.java
@@ -98,16 +98,11 @@ public StreamAllocation(ConnectionPool connectionPool, Address address, Call cal
     this.callStackTrace = callStackTrace;
   }
 
-<<<<<<< HEAD
-  public HttpCodec newStream(OkHttpClient client, boolean doExtensiveHealthChecks, int readTimeout) {
-    int connectTimeout = client.connectTimeoutMillis();
-=======
   public HttpCodec newStream(
       OkHttpClient client, Interceptor.Chain chain, boolean doExtensiveHealthChecks) {
     int connectTimeout = client.connectTimeoutMillis();
     int readTimeout = chain.readTimeoutMillis();
->>>>>>> square_okhttp_master
-    int writeTimeout = client.writeTimeoutMillis();
+    int writeTimeout = chain.writeTimeoutMillis();
     boolean connectionRetryEnabled = client.retryOnConnectionFailure();
 
     try {
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
index 2f3767abde..064a89ffe4 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RealInterceptorChain.java
@@ -43,16 +43,12 @@
   private final Call call;
   private final EventListener eventListener;
   private final int readTimeout;
+  private final int writeTimeout;
   private int calls;
 
   public RealInterceptorChain(List<Interceptor> interceptors, StreamAllocation streamAllocation,
-<<<<<<< HEAD
-                              HttpCodec httpCodec, RealConnection connection, int index, Request request, Call call,
-                              EventListener eventListener) {
-=======
       HttpCodec httpCodec, RealConnection connection, int index, Request request, Call call,
-      EventListener eventListener, int readTimeout) {
->>>>>>> square_okhttp_master
+      EventListener eventListener, int readTimeout, int writeTimeout) {
     this.interceptors = interceptors;
     this.connection = connection;
     this.streamAllocation = streamAllocation;
@@ -62,6 +58,7 @@ public RealInterceptorChain(List<Interceptor> interceptors, StreamAllocation str
     this.call = call;
     this.eventListener = eventListener;
     this.readTimeout = readTimeout;
+    this.writeTimeout = writeTimeout;
   }
 
   @Override public Connection connection() {
@@ -75,7 +72,19 @@ public RealInterceptorChain(List<Interceptor> interceptors, StreamAllocation str
   @Override public Interceptor.Chain withReadTimeout(int timeout, TimeUnit unit) {
     int millis = checkDuration("timeout", timeout, unit);
     return new RealInterceptorChain(interceptors, streamAllocation, httpCodec, connection, index,
-        request, call, eventListener, millis);
+        request, call, eventListener, millis, writeTimeout);
+  }
+
+  @Override
+  public int writeTimeoutMillis() {
+    return writeTimeout;
+  }
+
+  @Override
+  public Interceptor.Chain withWriteTimeout(int timeout, TimeUnit unit) {
+    int millis = checkDuration("timeout", timeout, unit);
+    return new RealInterceptorChain(interceptors, streamAllocation, httpCodec, connection, index,
+        request, call, eventListener, readTimeout, millis);
   }
 
   public StreamAllocation streamAllocation() {
@@ -103,7 +112,7 @@ public EventListener eventListener() {
   }
 
   public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,
-                          RealConnection connection) throws IOException {
+      RealConnection connection) throws IOException {
     if (index >= interceptors.size()) throw new AssertionError();
 
     calls++;
@@ -122,7 +131,7 @@ public Response proceed(Request request, StreamAllocation streamAllocation, Http
 
     // Call the next interceptor in the chain.
     RealInterceptorChain next = new RealInterceptorChain(interceptors, streamAllocation, httpCodec,
-        connection, index + 1, request, call, eventListener, readTimeout);
+        connection, index + 1, request, call, eventListener, readTimeout, writeTimeout);
     Interceptor interceptor = interceptors.get(index);
     Response response = interceptor.intercept(next);
 
