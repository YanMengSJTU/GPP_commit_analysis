diff --git a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
index 2dbaea0957..7076dda07a 100644
--- a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
@@ -308,7 +308,7 @@ private HttpEngine newHttpEngine(String method, Connection connection,
       engineClient = client.clone().setCache(null);
     }
 
-    return new HttpEngine(engineClient, request, bufferRequestBody, connection, null, requestBody,
+    return new HttpEngine(engineClient, request, doOutput, bufferRequestBody, connection, null, requestBody,
         priorResponse);
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Call.java b/okhttp/src/main/java/com/squareup/okhttp/Call.java
index 2e0a732f19..088f1136c1 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Call.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java
@@ -188,7 +188,7 @@ private Response getResponse() throws IOException {
     }
 
     // Create the initial HTTP engine. Retries and redirects need new engine for each attempt.
-    engine = new HttpEngine(client, request, false, null, null, requestBodyOut, null);
+    engine = new HttpEngine(client, request, request.body() != null, false, null, null, requestBodyOut, null);
 
     while (true) {
       if (canceled) return null;
@@ -233,7 +233,7 @@ private Response getResponse() throws IOException {
 
       Connection connection = engine.close();
       request = followUp;
-      engine = new HttpEngine(client, request, false, connection, null, null, response);
+      engine = new HttpEngine(client, request, request.body() != null, false, connection, null, null, response);
     }
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index 7890052530..a006695beb 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -164,6 +164,14 @@
    */
   private Response userResponse;
 
+  /**
+   * True if this connection ever intends to do output. This is necessary
+   * because we don't see the actual body until after we've established
+   * the connection and sent up headers, but those headers depend on
+   * whether or not there will ever be a body.
+   */
+  private boolean willHaveRequestBody;
+
   private Sink requestBodyOut;
   private BufferedSink bufferedRequestBody;
 
@@ -187,11 +195,13 @@
    *     immediately preceding this attempt, or null if this request doesn't
    *     recover from a failure.
    */
-  public HttpEngine(OkHttpClient client, Request request, boolean bufferRequestBody,
+  public HttpEngine(OkHttpClient client, Request request, boolean willHaveRequestBody, boolean bufferRequestBody,
       Connection connection, RouteSelector routeSelector, RetryableSink requestBodyOut,
       Response priorResponse) {
     this.client = client;
     this.userRequest = request;
+
+    this.willHaveRequestBody = willHaveRequestBody;
     this.bufferRequestBody = bufferRequestBody;
     this.connection = connection;
     this.routeSelector = routeSelector;
@@ -339,8 +349,7 @@ public void writingRequestHeaders() {
   }
 
   boolean hasRequestBody() {
-    return HttpMethod.hasRequestBody(userRequest.method())
-        && !Util.emptySink().equals(requestBodyOut);
+    return HttpMethod.hasRequestBody(userRequest.method()) && willHaveRequestBody && !Util.emptySink().equals(requestBodyOut);
   }
 
   /** Returns the request body or null if this request doesn't have a body. */
@@ -411,7 +420,7 @@ public HttpEngine recover(IOException e, Sink requestBodyOut) {
     Connection connection = close();
 
     // For failure recovery, use the same route selector with a new connection.
-    return new HttpEngine(client, userRequest, bufferRequestBody, connection, routeSelector,
+    return new HttpEngine(client, userRequest, willHaveRequestBody, bufferRequestBody, connection, routeSelector,
         (RetryableSink) requestBodyOut, priorResponse);
   }
 
