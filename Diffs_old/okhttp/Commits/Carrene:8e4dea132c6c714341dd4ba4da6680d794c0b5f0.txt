diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
index 677adbae7d..a9c192f209 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
@@ -604,15 +604,12 @@ private RecordedRequest readRequest(Socket socket, BufferedSource source, Buffer
       sink.flush();
     }
 
-    boolean hasBody = false;
     TruncatingBuffer requestBody = new TruncatingBuffer(bodyLimit);
     List<Integer> chunkSizes = new ArrayList<>();
     MockResponse policy = dispatcher.peek();
     if (contentLength != -1) {
-      hasBody = contentLength > 0;
       throttledTransfer(policy, socket, source, Okio.buffer(requestBody), contentLength, true);
     } else if (chunked) {
-      hasBody = true;
       while (true) {
         int chunkSize = Integer.parseInt(source.readUtf8LineStrict().trim(), 16);
         if (chunkSize == 0) {
@@ -625,11 +622,6 @@ private RecordedRequest readRequest(Socket socket, BufferedSource source, Buffer
       }
     }
 
-    String method = request.substring(0, request.indexOf(' '));
-    if (hasBody && !HttpMethod.permitsRequestBody(method)) {
-      throw new IllegalArgumentException("Request must not have a body: " + request);
-    }
-
     return new RecordedRequest(request, headers.build(), chunkSizes, requestBody.receivedByteCount,
         requestBody.buffer, sequenceNumber, socket);
   }
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
index 344a61e446..819f2422af 100644
--- a/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/huc/OkHttpURLConnection.java
@@ -335,8 +335,6 @@ private Call buildCall() throws IOException {
       if (method.equals("GET")) {
         // they are requesting a stream to write to. This implies a POST method
         method = "POST";
-      } else if (!HttpMethod.permitsRequestBody(method)) {
-        throw new ProtocolException(method + " does not support writing");
       }
     }
 
@@ -345,8 +343,7 @@ private Call buildCall() throws IOException {
     }
 
     OutputStreamRequestBody requestBody = null;
-    if (HttpMethod.permitsRequestBody(method)) {
-      // Add a content type for the request body, if one isn't already present.
+
       String contentType = requestHeaders.get("Content-Type");
       if (contentType == null) {
         contentType = "application/x-www-form-urlencoded";
@@ -367,7 +364,7 @@ private Call buildCall() throws IOException {
           ? new StreamedRequestBody(contentLength)
           : new BufferedRequestBody(contentLength);
       requestBody.timeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS);
-    }
+
 
     Request request = new Request.Builder()
         .url(Internal.instance.getHttpUrlChecked(getURL().toString()))
diff --git a/okhttp/src/main/java/okhttp3/Request.java b/okhttp/src/main/java/okhttp3/Request.java
index 6687dd3f9a..f9f9d563bd 100644
--- a/okhttp/src/main/java/okhttp3/Request.java
+++ b/okhttp/src/main/java/okhttp3/Request.java
@@ -231,9 +231,7 @@ public Builder patch(RequestBody body) {
     public Builder method(String method, @Nullable RequestBody body) {
       if (method == null) throw new NullPointerException("method == null");
       if (method.length() == 0) throw new IllegalArgumentException("method.length() == 0");
-      if (body != null && !HttpMethod.permitsRequestBody(method)) {
-        throw new IllegalArgumentException("method " + method + " must not have a request body.");
-      }
+
       if (body == null && HttpMethod.requiresRequestBody(method)) {
         throw new IllegalArgumentException("method " + method + " must have a request body.");
       }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
index b7aba87d6a..f6ab53e8be 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
@@ -51,7 +51,7 @@ public CallServerInterceptor(boolean forWebSocket) {
     realChain.eventListener().requestHeadersEnd(realChain.call(), request);
 
     Response.Builder responseBuilder = null;
-    if (HttpMethod.permitsRequestBody(request.method()) && request.body() != null) {
+    if (request.body() != null) {
       // If there's a "Expect: 100-continue" header on the request, wait for a "HTTP/1.1 100
       // Continue" response before transmitting the request body. If we don't get that, return
       // what we did get (such as a 4xx response) without ever transmitting the request body.
diff --git a/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java
index e10fa88a77..b8892cd7f3 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/HttpMethod.java
@@ -32,15 +32,6 @@ public static boolean requiresRequestBody(String method) {
         || method.equals("REPORT");   // CalDAV/CardDAV (defined in WebDAV Versioning)
   }
 
-  public static boolean permitsRequestBody(String method) {
-    return requiresRequestBody(method)
-        || method.equals("OPTIONS")
-        || method.equals("DELETE")    // Permitted as spec is ambiguous.
-        || method.equals("PROPFIND")  // (WebDAV) without body: request <allprop/>
-        || method.equals("MKCOL")     // (WebDAV) may contain a body, but behaviour is unspecified
-        || method.equals("LOCK");     // (WebDAV) body: create lock, without body: refresh lock
-  }
-
   public static boolean redirectsWithBody(String method) {
     return method.equals("PROPFIND"); // (WebDAV) redirects should also maintain the request body
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
index 937ba28ea7..02b190f020 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java
@@ -316,7 +316,6 @@ private Request followUpRequest(Response userResponse) throws IOException {
 
         // Most redirects don't include a request body.
         Request.Builder requestBuilder = userResponse.request().newBuilder();
-        if (HttpMethod.permitsRequestBody(method)) {
           final boolean maintainBody = HttpMethod.redirectsWithBody(method);
           if (HttpMethod.redirectsToGet(method)) {
             requestBuilder.method("GET", null);
@@ -329,7 +328,7 @@ private Request followUpRequest(Response userResponse) throws IOException {
             requestBuilder.removeHeader("Content-Length");
             requestBuilder.removeHeader("Content-Type");
           }
-        }
+
 
         // When redirecting across hosts, drop all authentication headers. This
         // is potentially annoying to the application layer since they have no
