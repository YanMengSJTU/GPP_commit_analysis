diff --git a/build.gradle b/build.gradle
index 80227a3154..02466bc312 100644
--- a/build.gradle
+++ b/build.gradle
@@ -37,6 +37,7 @@ buildscript {
       'junit': "junit:junit:${versions.junit}",
       'kotlinStdlib': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
       'moshi': "com.squareup.moshi:moshi:${versions.moshi}",
+      'moshiKotlin': "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}",
       'okio': "com.squareup.okio:okio:${versions.okio}",
       'openjsse': "org.openjsse:openjsse:${versions.openjsse}"
   ]
diff --git a/docs/connections.md b/docs/connections.md
index 5c2f525883..37bba50de4 100644
--- a/docs/connections.md
+++ b/docs/connections.md
@@ -3,7 +3,7 @@ Connections
 
 Although you provide only the URL, OkHttp plans its connection to your webserver using three types: URL, Address, and Route.
 
-#### [URLs](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-http-url/)
+### [URLs](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-http-url/)
 
 URLs (like `https://github.com/square/okhttp`) are fundamental to HTTP and the Internet. In addition to being a universal, decentralized naming scheme for everything on the web, they also specify how to access web resources.
 
@@ -14,7 +14,7 @@ URLs are abstract:
 
 They're also concrete: each URL identifies a specific path (like `/square/okhttp`) and query (like `?q=sharks&lang=en`). Each webserver hosts many URLs.
 
-#### [Addresses](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-address/)
+### [Addresses](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-address/)
 
 Addresses specify a webserver (like `github.com`) and all of the **static** configuration necessary to connect to that server: the port number, HTTPS settings, and preferred network protocols (like HTTP/2 or SPDY).
 
@@ -22,13 +22,13 @@ URLs that share the same address may also share the same underlying TCP socket c
 
 In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the [OkHttpClient](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/).
 
-#### [Routes](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-route/)
+### [Routes](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-route/)
 
 Routes supply the **dynamic** information necessary to actually connect to a webserver. This is the specific IP address to attempt (as discovered by a DNS query), the exact proxy server to use (if a [ProxySelector](http://developer.android.com/reference/java/net/ProxySelector.html) is in use), and which version of TLS to negotiate (for HTTPS connections).
 
 There may be many routes for a single address. For example, a webserver that is hosted in multiple datacenters may yield multiple IP addresses in its DNS response.
 
-#### [Connections](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection/)
+### [Connections](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection/)
 
 When you request a URL with OkHttp, here's what it does:
 
diff --git a/docs/https.md b/docs/https.md
index 142b7c3d9c..a4c8a0301b 100644
--- a/docs/https.md
+++ b/docs/https.md
@@ -43,46 +43,123 @@ OkHttpClient client = new OkHttpClient.Builder()
     .build();
 ```
 
-#### [Certificate Pinning](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java)
+### Certificate Pinning ([.kt][CertificatePinningKotlin], [.java][CertificatePinningJava]) 
 
 By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the [2011 DigiNotar attack](http://www.computerworld.com/article/2510951/cybercrime-hacking/hackers-spied-on-300-000-iranians-using-fake-google-certificate.html). It also assumes your HTTPS servers’ certificates are signed by a certificate authority.
 
 Use [CertificatePinner](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-certificate-pinner/) to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team’s abilities to update their TLS certificates. **Do not use certificate pinning without the blessing of your server’s TLS administrator!**
 
-```java
-  public CertificatePinning() {
-    client = new OkHttpClient.Builder()
-        .certificatePinner(new CertificatePinner.Builder()
-            .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
-            .build())
-        .build();
+```Kotlin tab=
+  private val client = OkHttpClient.Builder()
+      .certificatePinner(
+          CertificatePinner.Builder()
+              .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
+              .build())
+      .build()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://publicobject.com/robots.txt")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      for (certificate in response.handshake!!.peerCertificates) {
+        println(CertificatePinner.pin(certificate))
+      }
+    }
   }
+```
+
+```Java tab=
+  private final OkHttpClient client = new OkHttpClient.Builder()
+      .certificatePinner(
+          new CertificatePinner.Builder()
+              .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
+              .build())
+      .build();
 
   public void run() throws Exception {
     Request request = new Request.Builder()
         .url("https://publicobject.com/robots.txt")
         .build();
 
-    Response response = client.newCall(request).execute();
-    if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
+    try (Response response = client.newCall(request).execute()) {
+      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
 
-    for (Certificate certificate : response.handshake().peerCertificates()) {
-      System.out.println(CertificatePinner.pin(certificate));
+      for (Certificate certificate : response.handshake().peerCertificates()) {
+        System.out.println(CertificatePinner.pin(certificate));
+      }
     }
   }
 ```
 
-#### [Customizing Trusted Certificates](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java)
+### Customizing Trusted Certificates ([.kt][CustomTrustKotlin], [.java][CustomTrustJava])
 
 The full code sample shows how to replace the host platform’s certificate authorities with your own set. As above, **do not use custom certificates without the blessing of your server’s TLS administrator!**
 
-```java
+```Kotlin tab=
+  private val client: OkHttpClient
+
+  init {
+    val trustManager = trustManagerForCertificates(trustedCertificatesInputStream())
+    val sslContext = SSLContext.getInstance("TLS")
+    sslContext.init(null, arrayOf<TrustManager>(trustManager), null)
+    val sslSocketFactory = sslContext.socketFactory
+
+    client = OkHttpClient.Builder()
+        .sslSocketFactory(sslSocketFactory, trustManager)
+        .build()
+  }
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://publicobject.com/helloworld.txt")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      for ((name, value) in response.headers) {
+        println("$name: $value")
+      }
+
+      println(response.body!!.string())
+    }
+  }
+
+  /**
+   * Returns an input stream containing one or more certificate PEM files. This implementation just
+   * embeds the PEM files in Java strings; most applications will instead read this from a resource
+   * file that gets bundled with the application.
+   */
+  private fun trustedCertificatesInputStream(): InputStream {
+    ... // Full source omitted. See sample.
+  }
+
+  private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager {
+    ... // Full source omitted. See sample.
+  }
+```
+
+```Java tab=
   private final OkHttpClient client;
 
   public CustomTrust() {
-    SSLContext sslContext = sslContextForTrustedCertificates(trustedCertificatesInputStream());
+    X509TrustManager trustManager;
+    SSLSocketFactory sslSocketFactory;
+    try {
+      trustManager = trustManagerForCertificates(trustedCertificatesInputStream());
+      SSLContext sslContext = SSLContext.getInstance("TLS");
+      sslContext.init(null, new TrustManager[] { trustManager }, null);
+      sslSocketFactory = sslContext.getSocketFactory();
+    } catch (GeneralSecurityException e) {
+      throw new RuntimeException(e);
+    }
+
     client = new OkHttpClient.Builder()
-        .sslSocketFactory(sslContext.getSocketFactory())
+        .sslSocketFactory(sslSocketFactory, trustManager)
         .build();
   }
 
@@ -103,3 +180,8 @@ The full code sample shows how to replace the host platform’s certificate auth
     ... // Full source omitted. See sample.
   }
 ```
+
+ [CustomTrustJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
+ [CustomTrustKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/CustomTrust.kt
+ [CertificatePinningJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
+ [CertificatePinningKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/CertificatePinning.kt
diff --git a/docs/interceptors.md b/docs/interceptors.md
index b3d759e9d0..e040b23f6c 100644
--- a/docs/interceptors.md
+++ b/docs/interceptors.md
@@ -29,7 +29,7 @@ Interceptors can be chained. Suppose you have both a compressing interceptor and
 
 ![Interceptors Diagram](images/interceptors@2x.png)
 
-#### Application Interceptors
+### Application Interceptors
 
 Interceptors are registered as either _application_ or _network_ interceptors. We'll use the `LoggingInterceptor` defined above to show the difference.
 
@@ -64,7 +64,7 @@ Connection: keep-alive
 
 We can see that we were redirected because `response.request().url()` is different from `request.url()`. The two log statements log two different URLs.
 
-#### Network Interceptors
+### Network Interceptors
 
 Registering a network interceptor is quite similar. Call `addNetworkInterceptor()` instead of `addInterceptor()`:
 
@@ -113,7 +113,7 @@ Connection: keep-alive
 
 The network requests also contain more data, such as the `Accept-Encoding: gzip` header added by OkHttp to advertise support for response compression. The network interceptor's `Chain` has a non-null `Connection` that can be used to interrogate the IP address and TLS configuration that were used to connect to the webserver.
 
-#### Choosing between application and network interceptors
+### Choosing between application and network interceptors
 
 Each interceptor chain has relative merits.
 
@@ -132,7 +132,7 @@ Each interceptor chain has relative merits.
  * Observe the data just as it will be transmitted over the network.
  * Access to the `Connection` that carries the request.
 
-#### Rewriting Requests
+### Rewriting Requests
 
 Interceptors can add, remove, or replace request headers. They can also transform the body of those requests that have one. For example, you can use an application interceptor to add request body compression if you're connecting to a webserver known to support it.
 
@@ -172,7 +172,7 @@ final class GzipRequestInterceptor implements Interceptor {
 }
 ```
 
-#### Rewriting Responses
+### Rewriting Responses
 
 Symmetrically, interceptors can rewrite response headers and transform the response body. This is generally more dangerous than rewriting request headers because it may violate the webserver's expectations!
 
diff --git a/docs/recipes.md b/docs/recipes.md
index c9bb42a6e3..fb153c3abf 100644
--- a/docs/recipes.md
+++ b/docs/recipes.md
@@ -2,14 +2,34 @@ Recipes
 =======
 
 We've written some recipes that demonstrate how to solve common problems with OkHttp. Read through them to learn about how everything works together. Cut-and-paste these examples freely; that's what they're for.
-
-#### [Synchronous Get](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java)
+ 
+### Synchronous Get ([.kt][SynchronousGetKotlin], [.java][SynchronousGetJava])
 
 Download a file, print its headers, and print its response body as a string.
 
 The `string()` method on response body is convenient and efficient for small documents. But if the response body is large (greater than 1 MiB), avoid `string()` because it will load the entire document into memory. In that case, prefer to process the body as a stream.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://publicobject.com/helloworld.txt")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      for ((name, value) in response.headers) {
+        println("$name: $value")
+      }
+
+      println(response.body!!.string())
+    }
+  }
+```
+
+```Java tab=
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
@@ -29,12 +49,40 @@ The `string()` method on response body is convenient and efficient for small doc
     }
   }
 ```
-
-#### [Asynchronous Get](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java)
+ 
+### Asynchronous Get ([.kt][AsynchronousGetKotlin], [.java][AsynchronousGetJava])
 
 Download a file on a worker thread, and get called back when the response is readable. The callback is made after the response headers are ready. Reading the response body may still block. OkHttp doesn't currently offer asynchronous APIs to receive a response body in parts.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://publicobject.com/helloworld.txt")
+        .build()
+
+    client.newCall(request).enqueue(object : Callback {
+      override fun onFailure(call: Call, e: IOException) {
+        e.printStackTrace()
+      }
+
+      override fun onResponse(call: Call, response: Response) {
+        response.use {
+          if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+          for ((name, value) in response.headers) {
+            println("$name: $value")
+          }
+
+          println(response.body!!.string())
+        }
+      }
+    })
+  }
+```
+
+```Java tab=
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
@@ -62,8 +110,8 @@ Download a file on a worker thread, and get called back when the response is rea
     });
   }
 ```
-
-#### [Accessing Headers](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java)
+ 
+### Accessing Headers ([.kt][AccessHeadersKotlin], [.java][AccessHeadersJava])
 
 Typically HTTP headers work like a `Map<String, String>`: each field has one value or none. But some headers permit multiple values, like Guava's [Multimap](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Multimap.html). For example, it's legal and common for an HTTP response to supply multiple `Vary` headers. OkHttp's APIs attempt to make both cases comfortable.
 
@@ -73,7 +121,28 @@ When reading response a header, use `header(name)` to return the _last_ occurren
 
 To visit all headers, use the `Headers` class which supports access by index.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://api.github.com/repos/square/okhttp/issues")
+        .header("User-Agent", "OkHttp Headers.java")
+        .addHeader("Accept", "application/json; q=0.5")
+        .addHeader("Accept", "application/vnd.github.v3+json")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println("Server: ${response.header("Server")}")
+      println("Date: ${response.header("Date")}")
+      println("Vary: ${response.headers("Vary")}")
+    }
+  }
+```
+
+```Java tab=
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
@@ -93,12 +162,42 @@ To visit all headers, use the `Headers` class which supports access by index.
     }
   }
 ```
-
-#### [Posting a String](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostString.java)
+ 
+### Posting a String ([.kt][PostStringKotlin], [.java][PostStringJava])
 
 Use an HTTP POST to send a request body to a service. This example posts a markdown document to a web service that renders markdown as HTML. Because the entire request body is in memory simultaneously, avoid posting large (greater than 1 MiB) documents using this API.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+
+  fun run() {
+    val postBody = """
+        |Releases
+        |--------
+        |
+        | * _1.0_ May 6, 2013
+        | * _1.1_ June 15, 2013
+        | * _1.2_ August 11, 2013
+        |""".trimMargin()
+
+    val request = Request.Builder()
+        .url("https://api.github.com/markdown/raw")
+        .post(postBody.toRequestBody(MEDIA_TYPE_MARKDOWN))
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+
+  companion object {
+    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
+  }
+```
+
+```Java tab=
   public static final MediaType MEDIA_TYPE_MARKDOWN
       = MediaType.parse("text/x-markdown; charset=utf-8");
 
@@ -125,12 +224,53 @@ Use an HTTP POST to send a request body to a service. This example posts a markd
     }
   }
 ```
+ 
+### Post Streaming ([.kt][PostStreamingKotlin], [.java][PostStreamingJava])
+ 
+Here we `POST` a request body as a stream. The content of this request body is being generated as it's being written. This example streams directly into the [Okio](https://github.com/square/okio) buffered sink. Your programs may prefer an `OutputStream`, which you can get from `BufferedSink.outputStream()`.
 
-#### [Post Streaming](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java)
+```Kotlin tab=
+  private val client = OkHttpClient()
 
-Here we `POST` a request body as a stream. The content of this request body is being generated as it's being written. This example streams directly into the [Okio](https://github.com/square/okio) buffered sink. Your programs may prefer an `OutputStream`, which you can get from `BufferedSink.outputStream()`.
+  fun run() {
+    val requestBody = object : RequestBody() {
+      override fun contentType() = MEDIA_TYPE_MARKDOWN
 
-```java
+      override fun writeTo(sink: BufferedSink) {
+        sink.writeUtf8("Numbers\n")
+        sink.writeUtf8("-------\n")
+        for (i in 2..997) {
+          sink.writeUtf8(String.format(" * $i = ${factor(i)}\n"))
+        }
+      }
+
+      private fun factor(n: Int): String {
+        for (i in 2 until n) {
+          val x = n / i
+          if (x * i == n) return "${factor(x)} × $i"
+        }
+        return n.toString()
+      }
+    }
+
+    val request = Request.Builder()
+        .url("https://api.github.com/markdown/raw")
+        .post(requestBody)
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+
+  companion object {
+    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
+  }
+```
+
+```Java tab=
   public static final MediaType MEDIA_TYPE_MARKDOWN
       = MediaType.parse("text/x-markdown; charset=utf-8");
 
@@ -171,12 +311,35 @@ Here we `POST` a request body as a stream. The content of this request body is b
     }
   }
 ```
-
-#### [Posting a File](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostFile.java)
+ 
+### Posting a File ([.kt][PostFileKotlin], [.java][PostFileJava])
 
 It's easy to use a file as a request body.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+
+  fun run() {
+    val file = File("README.md")
+
+    val request = Request.Builder()
+        .url("https://api.github.com/markdown/raw")
+        .post(file.asRequestBody(MEDIA_TYPE_MARKDOWN))
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+
+  companion object {
+    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
+  }
+```
+
+```Java tab=
   public static final MediaType MEDIA_TYPE_MARKDOWN
       = MediaType.parse("text/x-markdown; charset=utf-8");
 
@@ -197,12 +360,32 @@ It's easy to use a file as a request body.
     }
   }
 ```
-
-#### [Posting form parameters](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostForm.java)
+ 
+### Posting form parameters ([.kt][PostFormKotlin], [.java][PostFormJava])
 
 Use `FormBody.Builder` to build a request body that works like an HTML `<form>` tag. Names and values will be encoded using an HTML-compatible form URL encoding.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+
+  fun run() {
+    val formBody = FormBody.Builder()
+        .add("search", "Jurassic Park")
+        .build()
+    val request = Request.Builder()
+        .url("https://en.wikipedia.org/w/index.php")
+        .post(formBody)
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+```
+
+```Java tab=
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
@@ -221,12 +404,47 @@ Use `FormBody.Builder` to build a request body that works like an HTML `<form>`
     }
   }
 ```
-
-#### [Posting a multipart request](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java)
+ 
+### Posting a multipart request ([.kt][PostMultipartKotlin], [.java][PostMultipartJava])
 
 `MultipartBody.Builder` can build sophisticated request bodies compatible with HTML file upload forms. Each part of a multipart request body is itself a request body, and can define its own headers. If present, these headers should describe the part body, such as its `Content-Disposition`. The `Content-Length` and `Content-Type` headers are added automatically if they're available.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+
+  fun run() {
+    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image
+    val requestBody = MultipartBody.Builder()
+        .setType(MultipartBody.FORM)
+        .addFormDataPart("title", "Square Logo")
+        .addFormDataPart("image", "logo-square.png",
+            File("docs/images/logo-square.png").asRequestBody(MEDIA_TYPE_PNG))
+        .build()
+
+    val request = Request.Builder()
+        .header("Authorization", "Client-ID $IMGUR_CLIENT_ID")
+        .url("https://api.imgur.com/3/image")
+        .post(requestBody)
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+
+  companion object {
+    /**
+     * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running
+     * these examples, please request your own client ID! https://api.imgur.com/oauth2
+     */
+    private val IMGUR_CLIENT_ID = "9199fdef135c122"
+    private val MEDIA_TYPE_PNG = "image/png".toMediaType()
+  }
+```
+
+```Java tab=
   /**
    * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running
    * these examples, please request your own client ID! https://api.imgur.com/oauth2
@@ -258,14 +476,42 @@ Use `FormBody.Builder` to build a request body that works like an HTML `<form>`
     }
   }
 ```
-
-#### [Parse a JSON Response With Moshi](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java)
-
+ 
+### Parse a JSON Response With Moshi ([.kt][ParseResponseWithMoshiKotlin], [.java][ParseResponseWithMoshiJava])
+  
 [Moshi](https://github.com/square/moshi) is a handy API for converting between JSON and Java objects. Here we're using it to decode a JSON response from a GitHub API.
 
 Note that `ResponseBody.charStream()` uses the `Content-Type` response header to select which charset to use when decoding the response body. It defaults to `UTF-8` if no charset is specified.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+  private val moshi = Moshi.Builder().build()
+  private val gistJsonAdapter = moshi.adapter(Gist::class.java)
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://api.github.com/gists/c2a7c39532239ff261be")
+        .build()
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      val gist = gistJsonAdapter.fromJson(response.body!!.source())
+
+      for ((key, value) in gist!!.files!!) {
+        println(key)
+        println(value.content)
+      }
+    }
+  }
+
+  @JsonClass(generateAdapter = true)
+  data class Gist(var files: Map<String, GistFile>?)
+
+  @JsonClass(generateAdapter = true)
+  data class GistFile(var content: String?)
+```
+
+```Java tab=
   private final OkHttpClient client = new OkHttpClient();
   private final Moshi moshi = new Moshi.Builder().build();
   private final JsonAdapter<Gist> gistJsonAdapter = moshi.adapter(Gist.class);
@@ -294,8 +540,8 @@ Note that `ResponseBody.charStream()` uses the `Content-Type` response header to
     String content;
   }
 ```
-
-#### [Response Caching](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java)
+ 
+### Response Caching ([.kt][CacheResponseKotlin], [.java][CacheResponseJava])
 
 To cache responses, you'll need a cache directory that you can read and write to, and a limit on the cache's size. The cache directory should be private, and untrusted applications should not be able to read its contents!
 
@@ -303,7 +549,42 @@ It is an error to have multiple caches accessing the same cache directory simult
 
 Response caching uses HTTP headers for all configuration. You can add request headers like `Cache-Control: max-stale=3600` and OkHttp's cache will honor them. Your webserver configures how long responses are cached with its own response headers, like `Cache-Control: max-age=9600`. There are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET.
 
-```java
+```Kotlin tab=
+  private val client: OkHttpClient = OkHttpClient.Builder()
+      .cache(Cache(
+          directory = cacheDirectory,
+          maxSize = 10L * 1024L * 1024L // 1 MiB
+      ))
+      .build()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://publicobject.com/helloworld.txt")
+        .build()
+
+    val response1Body = client.newCall(request).execute().use {
+      if (!it.isSuccessful) throw IOException("Unexpected code $it")
+
+      println("Response 1 response:          $it")
+      println("Response 1 cache response:    ${it.cacheResponse}")
+      println("Response 1 network response:  ${it.networkResponse}")
+      return@use it.body!!.string()
+    }
+
+    val response2Body = client.newCall(request).execute().use {
+      if (!it.isSuccessful) throw IOException("Unexpected code $it")
+
+      println("Response 2 response:          $it")
+      println("Response 2 cache response:    ${it.cacheResponse}")
+      println("Response 2 network response:  ${it.networkResponse}")
+      return@use it.body!!.string()
+    }
+
+    println("Response 2 equals Response 1? " + (response1Body == response2Body))
+  }
+```
+
+```Java tab=
   private final OkHttpClient client;
 
   public CacheResponse(File cacheDirectory) throws Exception {
@@ -343,13 +624,46 @@ Response caching uses HTTP headers for all configuration. You can add request he
     System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));
   }
 ```
-To prevent a response from using the cache, use [`CacheControl.FORCE_NETWORK`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-n-e-t-w-o-r-k/). To prevent it from using the network, use [`CacheControl.FORCE_CACHE`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-c-a-c-h-e/). Be warned: if you use `FORCE_CACHE` and the response requires the network, OkHttp will return a `504 Unsatisfiable Request` response.
 
-#### [Canceling a Call](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java)
+To prevent a response from using the cache, use [`CacheControl.FORCE_NETWORK`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-n-e-t-w-o-r-k/). To prevent it from using the network, use [`CacheControl.FORCE_CACHE`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-c-a-c-h-e/). Be warned: if you use `FORCE_CACHE` and the response requires the network, OkHttp will return a `504 Unsatisfiable Request` response.
+ 
+### Canceling a Call ([.kt][CancelCallKotlin], [.java][CancelCallJava])
 
 Use `Call.cancel()` to stop an ongoing call immediately. If a thread is currently writing a request or reading a response, it will receive an `IOException`. Use this to conserve the network when a call is no longer necessary; for example when your user navigates away from an application. Both synchronous and asynchronous calls can be canceled.
 
-```java
+```Kotlin tab=
+  private val executor = Executors.newScheduledThreadPool(1)
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
+        .build()
+
+    val startNanos = System.nanoTime()
+    val call = client.newCall(request)
+
+    // Schedule a job to cancel the call in 1 second.
+    executor.schedule({
+      System.out.printf("%.2f Canceling call.%n", (System.nanoTime() - startNanos) / 1e9f)
+      call.cancel()
+      System.out.printf("%.2f Canceled call.%n", (System.nanoTime() - startNanos) / 1e9f)
+    }, 1, TimeUnit.SECONDS)
+
+    System.out.printf("%.2f Executing call.%n", (System.nanoTime() - startNanos) / 1e9f)
+    try {
+      call.execute().use { response ->
+        System.out.printf("%.2f Call was expected to fail, but completed: %s%n",
+            (System.nanoTime() - startNanos) / 1e9f, response)
+      }
+    } catch (e: IOException) {
+      System.out.printf("%.2f Call failed as expected: %s%n",
+          (System.nanoTime() - startNanos) / 1e9f, e)
+    }
+  }
+```
+
+```Java tab=
   private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
   private final OkHttpClient client = new OkHttpClient();
 
@@ -380,12 +694,31 @@ Use `Call.cancel()` to stop an ongoing call immediately. If a thread is currentl
     }
   }
 ```
+ 
+### Timeouts ([.kt][ConfigureTimeoutsKotlin], [.java][ConfigureTimeoutsJava])
 
-#### [Timeouts](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java)
+Use timeouts to fail a call when its peer is unreachable. Network partitions can be due to client connectivity problems, server availability problems, or anything between. OkHttp supports connect, write, read, and full call timeouts.
 
-Use timeouts to fail a call when its peer is unreachable. Network partitions can be due to client connectivity problems, server availability problems, or anything between. OkHttp supports connect, read, and write timeouts.
+```Kotlin tab=
+  private val client: OkHttpClient = OkHttpClient.Builder()
+      .connectTimeout(5, TimeUnit.SECONDS)
+      .writeTimeout(5, TimeUnit.SECONDS)
+      .readTimeout(5, TimeUnit.SECONDS)
+      .callTimeout(10, TimeUnit.SECONDS)
+      .build()
 
-```java
+  fun run() {
+    val request = Request.Builder()
+        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      println("Response completed: $response")
+    }
+  }
+```
+
+```Java tab=
   private final OkHttpClient client;
 
   public ConfigureTimeouts() throws Exception {
@@ -406,12 +739,46 @@ Use timeouts to fail a call when its peer is unreachable. Network partitions can
     }
   }
 ```
-
-#### [Per-call Configuration](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java)
+ 
+### Per-call Configuration ([.kt][PerCallSettingsKotlin], [.java][PerCallSettingsJava])
 
 All the HTTP client configuration lives in `OkHttpClient` including proxy settings, timeouts, and caches. When you need to change the configuration of a single call, call `OkHttpClient.newBuilder()`. This returns a builder that shares the same connection pool, dispatcher, and configuration with the original client. In the example below, we make one request with a 500 ms timeout and another with a 3000 ms timeout.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://httpbin.org/delay/1") // This URL is served with a 1 second delay.
+        .build()
+
+    // Copy to customize OkHttp for this request.
+    val client1 = client.newBuilder()
+        .readTimeout(500, TimeUnit.MILLISECONDS)
+        .build()
+    try {
+      client1.newCall(request).execute().use { response ->
+        println("Response 1 succeeded: $response")
+      }
+    } catch (e: IOException) {
+      println("Response 1 failed: $e")
+    }
+
+    // Copy to customize OkHttp for this request.
+    val client2 = client.newBuilder()
+        .readTimeout(3000, TimeUnit.MILLISECONDS)
+        .build()
+    try {
+      client2.newCall(request).execute().use { response ->
+        println("Response 2 succeeded: $response")
+      }
+    } catch (e: IOException) {
+      println("Response 2 failed: $e")
+    }
+  }
+```
+
+```Java tab=
   private final OkHttpClient client = new OkHttpClient();
 
   public void run() throws Exception {
@@ -440,14 +807,46 @@ All the HTTP client configuration lives in `OkHttpClient` including proxy settin
     }
   }
 ```
-
-#### [Handling authentication](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java)
+ 
+### Handling authentication ([.kt][AuthenticateKotlin], [.java][AuthenticateJava])
 
 OkHttp can automatically retry unauthenticated requests. When a response is `401 Not Authorized`, an `Authenticator` is asked to supply credentials. Implementations should build a new request that includes the missing credentials. If no credentials are available, return null to skip the retry.
 
 Use `Response.challenges()` to get the schemes and realms of any authentication challenges. When fulfilling a `Basic` challenge, use `Credentials.basic(username, password)` to encode the request header.
 
-```java
+```Kotlin tab=
+  private val client = OkHttpClient.Builder()
+      .authenticator(object : Authenticator {
+        @Throws(IOException::class)
+        override fun authenticate(route: Route?, response: Response): Request? {
+          if (response.request.header("Authorization") != null) {
+            return null // Give up, we've already attempted to authenticate.
+          }
+
+          println("Authenticating for response: $response")
+          println("Challenges: ${response.challenges()}")
+          val credential = Credentials.basic("jesse", "password1")
+          return response.request.newBuilder()
+              .header("Authorization", credential)
+              .build()
+        }
+      })
+      .build()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://publicobject.com/secrets/hellosecret.txt")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+```
+
+```Java tab=
   private final OkHttpClient client;
 
   public Authenticate() {
@@ -509,3 +908,32 @@ This above code relies on this `responseCount()` method:
     return result;
   }
 ```
+
+ [SynchronousGetJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java 
+ [SynchronousGetKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/SynchronousGet.kt
+ [AsynchronousGetJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java 
+ [AsynchronousGetKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/AsynchronousGet.kt
+ [AccessHeadersJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java 
+ [AccessHeadersKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/AccessHeaders.kt
+ [PostStringJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostString.java 
+ [PostStringKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostString.kt
+ [PostStreamingJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java 
+ [PostStreamingKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostStreaming.kt
+ [PostFileJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostFile.java 
+ [PostFileKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostFile.kt
+ [PostFormJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostForm.java 
+ [PostFormKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostForm.kt
+ [PostMultipartJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java 
+ [PostMultipartKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostMultipart.kt
+ [ParseResponseWithMoshiJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java 
+ [ParseResponseWithMoshiKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/ParseResponseWithMoshi.kt
+ [CacheResponseJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java 
+ [CacheResponseKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/CacheResponse.kt
+ [CancelCallJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java 
+ [CancelCallKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/CancelCall.kt
+ [ConfigureTimeoutsJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java 
+ [ConfigureTimeoutsKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/ConfigureTimeouts.kt
+ [PerCallSettingsJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java 
+ [PerCallSettingsKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PerCallSettings.kt
+ [AuthenticateJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java 
+ [AuthenticateKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/Authenticate.kt
diff --git a/mkdocs.yml b/mkdocs.yml
index f54d97518b..4dc62ade3d 100644
--- a/mkdocs.yml
+++ b/mkdocs.yml
@@ -33,6 +33,7 @@ markdown_extensions:
   - pymdownx.magiclink
   - pymdownx.smartsymbols
   - pymdownx.superfences
+  - pymdownx.tilde
   - tables
 
 nav:
diff --git a/samples/guide/build.gradle b/samples/guide/build.gradle
index f7864f3c93..493dbe78bf 100644
--- a/samples/guide/build.gradle
+++ b/samples/guide/build.gradle
@@ -1,8 +1,11 @@
+apply plugin: 'kotlin-kapt'
+
 dependencies {
   implementation project(':okhttp')
   implementation project(':mockwebserver')
   implementation project(':okhttp-tls')
   implementation deps.moshi
+  kapt deps.moshiKotlin
 }
 
 tasks.withType(JavaCompile) {
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java b/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
index 91c3fcc59f..87ea039730 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
@@ -23,16 +23,12 @@
 import okhttp3.Response;
 
 public final class CertificatePinning {
-  private final OkHttpClient client;
-
-  public CertificatePinning() {
-    client = new OkHttpClient.Builder()
-        .certificatePinner(
-            new CertificatePinner.Builder()
-                .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
-                .build())
-        .build();
-  }
+  private final OkHttpClient client = new OkHttpClient.Builder()
+      .certificatePinner(
+          new CertificatePinner.Builder()
+              .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
+              .build())
+      .build();
 
   public void run() throws Exception {
     Request request = new Request.Builder()
diff --git a/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java b/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
index a6d3000732..3c429bf23b 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
@@ -25,9 +25,10 @@
 
   public ConfigureTimeouts() throws Exception {
     client = new OkHttpClient.Builder()
-        .connectTimeout(10, TimeUnit.SECONDS)
-        .writeTimeout(10, TimeUnit.SECONDS)
-        .readTimeout(30, TimeUnit.SECONDS)
+        .connectTimeout(5, TimeUnit.SECONDS)
+        .writeTimeout(5, TimeUnit.SECONDS)
+        .readTimeout(5, TimeUnit.SECONDS)
+        .callTimeout(10, TimeUnit.SECONDS)
         .build();
   }
 
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/AccessHeaders.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/AccessHeaders.kt
new file mode 100644
index 0000000000..ca9a946615
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/AccessHeaders.kt
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.io.IOException
+
+class AccessHeaders {
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://api.github.com/repos/square/okhttp/issues")
+        .header("User-Agent", "OkHttp Headers.java")
+        .addHeader("Accept", "application/json; q=0.5")
+        .addHeader("Accept", "application/vnd.github.v3+json")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println("Server: ${response.header("Server")}")
+      println("Date: ${response.header("Date")}")
+      println("Vary: ${response.headers("Vary")}")
+    }
+  }
+}
+
+fun main() {
+  AccessHeaders().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/AsynchronousGet.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/AsynchronousGet.kt
new file mode 100644
index 0000000000..ca35b3906c
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/AsynchronousGet.kt
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.Call
+import okhttp3.Callback
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import okhttp3.Response
+import java.io.IOException
+
+class AsynchronousGet {
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://publicobject.com/helloworld.txt")
+        .build()
+
+    client.newCall(request).enqueue(object : Callback {
+      override fun onFailure(call: Call, e: IOException) {
+        e.printStackTrace()
+      }
+
+      override fun onResponse(call: Call, response: Response) {
+        response.use {
+          if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+          for ((name, value) in response.headers) {
+            println("$name: $value")
+          }
+
+          println(response.body!!.string())
+        }
+      }
+    })
+  }
+}
+
+fun main() {
+  AsynchronousGet().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/Authenticate.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/Authenticate.kt
new file mode 100644
index 0000000000..7a56b425cd
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/Authenticate.kt
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.Authenticator
+import okhttp3.Credentials
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import okhttp3.Response
+import okhttp3.Route
+import java.io.IOException
+
+class Authenticate {
+  private val client = OkHttpClient.Builder()
+      .authenticator(object : Authenticator {
+        @Throws(IOException::class)
+        override fun authenticate(route: Route?, response: Response): Request? {
+          if (response.request.header("Authorization") != null) {
+            return null // Give up, we've already attempted to authenticate.
+          }
+
+          println("Authenticating for response: $response")
+          println("Challenges: ${response.challenges()}")
+          val credential = Credentials.basic("jesse", "password1")
+          return response.request.newBuilder()
+              .header("Authorization", credential)
+              .build()
+        }
+      })
+      .build()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://publicobject.com/secrets/hellosecret.txt")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+}
+
+fun main() {
+  Authenticate().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/CacheResponse.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/CacheResponse.kt
new file mode 100644
index 0000000000..b700690f80
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/CacheResponse.kt
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.Cache
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.io.File
+import java.io.IOException
+
+class CacheResponse(cacheDirectory: File) {
+  private val client: OkHttpClient = OkHttpClient.Builder()
+      .cache(Cache(
+          directory = cacheDirectory,
+          maxSize = 10L * 1024L * 1024L // 1 MiB
+      ))
+      .build()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://publicobject.com/helloworld.txt")
+        .build()
+
+    val response1Body = client.newCall(request).execute().use {
+      if (!it.isSuccessful) throw IOException("Unexpected code $it")
+
+      println("Response 1 response:          $it")
+      println("Response 1 cache response:    ${it.cacheResponse}")
+      println("Response 1 network response:  ${it.networkResponse}")
+      return@use it.body!!.string()
+    }
+
+    val response2Body = client.newCall(request).execute().use {
+      if (!it.isSuccessful) throw IOException("Unexpected code $it")
+
+      println("Response 2 response:          $it")
+      println("Response 2 cache response:    ${it.cacheResponse}")
+      println("Response 2 network response:  ${it.networkResponse}")
+      return@use it.body!!.string()
+    }
+
+    println("Response 2 equals Response 1? " + (response1Body == response2Body))
+  }
+}
+
+fun main() {
+  CacheResponse(File("CacheResponse.tmp")).run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/CancelCall.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/CancelCall.kt
new file mode 100644
index 0000000000..b1932a3c30
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/CancelCall.kt
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.io.IOException
+import java.util.concurrent.Executors
+import java.util.concurrent.TimeUnit
+
+class CancelCall {
+  private val executor = Executors.newScheduledThreadPool(1)
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
+        .build()
+
+    val startNanos = System.nanoTime()
+    val call = client.newCall(request)
+
+    // Schedule a job to cancel the call in 1 second.
+    executor.schedule({
+      System.out.printf("%.2f Canceling call.%n", (System.nanoTime() - startNanos) / 1e9f)
+      call.cancel()
+      System.out.printf("%.2f Canceled call.%n", (System.nanoTime() - startNanos) / 1e9f)
+    }, 1, TimeUnit.SECONDS)
+
+    System.out.printf("%.2f Executing call.%n", (System.nanoTime() - startNanos) / 1e9f)
+    try {
+      call.execute().use { response ->
+        System.out.printf("%.2f Call was expected to fail, but completed: %s%n",
+            (System.nanoTime() - startNanos) / 1e9f, response)
+      }
+    } catch (e: IOException) {
+      System.out.printf("%.2f Call failed as expected: %s%n",
+          (System.nanoTime() - startNanos) / 1e9f, e)
+    }
+  }
+}
+
+fun main() {
+  CancelCall().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/CertificatePinning.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/CertificatePinning.kt
new file mode 100644
index 0000000000..ec3b79f452
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/CertificatePinning.kt
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.CertificatePinner
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.io.IOException
+
+class CertificatePinning {
+  private val client = OkHttpClient.Builder()
+      .certificatePinner(
+          CertificatePinner.Builder()
+              .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
+              .build())
+      .build()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://publicobject.com/robots.txt")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      for (certificate in response.handshake!!.peerCertificates) {
+        println(CertificatePinner.pin(certificate))
+      }
+    }
+  }
+}
+
+fun main() {
+  CertificatePinning().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/ConfigureTimeouts.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/ConfigureTimeouts.kt
new file mode 100644
index 0000000000..4ffeeab97c
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/ConfigureTimeouts.kt
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.util.concurrent.TimeUnit
+
+class ConfigureTimeouts {
+  private val client: OkHttpClient = OkHttpClient.Builder()
+      .connectTimeout(5, TimeUnit.SECONDS)
+      .writeTimeout(5, TimeUnit.SECONDS)
+      .readTimeout(5, TimeUnit.SECONDS)
+      .callTimeout(10, TimeUnit.SECONDS)
+      .build()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      println("Response completed: $response")
+    }
+  }
+}
+
+fun main() {
+  ConfigureTimeouts().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/CustomTrust.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/CustomTrust.kt
new file mode 100644
index 0000000000..cae979e1a1
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/CustomTrust.kt
@@ -0,0 +1,204 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.CertificatePinner
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import okio.Buffer
+import java.io.IOException
+import java.io.InputStream
+import java.security.KeyStore
+import java.security.cert.CertificateFactory
+import java.util.Arrays
+import javax.net.ssl.KeyManagerFactory
+import javax.net.ssl.SSLContext
+import javax.net.ssl.TrustManager
+import javax.net.ssl.TrustManagerFactory
+import javax.net.ssl.X509TrustManager
+
+class CustomTrust {
+  private val client: OkHttpClient
+
+  init {
+    val trustManager = trustManagerForCertificates(trustedCertificatesInputStream())
+    val sslContext = SSLContext.getInstance("TLS")
+    sslContext.init(null, arrayOf<TrustManager>(trustManager), null)
+    val sslSocketFactory = sslContext.socketFactory
+
+    client = OkHttpClient.Builder()
+        .sslSocketFactory(sslSocketFactory, trustManager)
+        .build()
+  }
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://publicobject.com/helloworld.txt")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      for ((name, value) in response.headers) {
+        println("$name: $value")
+      }
+
+      println(response.body!!.string())
+    }
+  }
+
+  /**
+   * Returns an input stream containing one or more certificate PEM files. This implementation just
+   * embeds the PEM files in Java strings; most applications will instead read this from a resource
+   * file that gets bundled with the application.
+   */
+  private fun trustedCertificatesInputStream(): InputStream {
+    // PEM files for root certificates of Comodo and Entrust. These two CAs are sufficient to view
+    // https://publicobject.com (Comodo) and https://squareup.com (Entrust). But they aren't
+    // sufficient to connect to most HTTPS sites including https://godaddy.com and https://visa.com.
+    // Typically developers will need to get a PEM file from their organization's TLS administrator.
+    val comodoRsaCertificationAuthority = """
+        |-----BEGIN CERTIFICATE-----
+        |MIIF2DCCA8CgAwIBAgIQTKr5yttjb+Af907YWwOGnTANBgkqhkiG9w0BAQwFADCB
+        |hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
+        |A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV
+        |BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMTE5
+        |MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgT
+        |EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR
+        |Q09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNh
+        |dGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCR
+        |6FSS0gpWsawNJN3Fz0RndJkrN6N9I3AAcbxT38T6KhKPS38QVr2fcHK3YX/JSw8X
+        |pz3jsARh7v8Rl8f0hj4K+j5c+ZPmNHrZFGvnnLOFoIJ6dq9xkNfs/Q36nGz637CC
+        |9BR++b7Epi9Pf5l/tfxnQ3K9DADWietrLNPtj5gcFKt+5eNu/Nio5JIk2kNrYrhV
+        |/erBvGy2i/MOjZrkm2xpmfh4SDBF1a3hDTxFYPwyllEnvGfDyi62a+pGx8cgoLEf
+        |Zd5ICLqkTqnyg0Y3hOvozIFIQ2dOciqbXL1MGyiKXCJ7tKuY2e7gUYPDCUZObT6Z
+        |+pUX2nwzV0E8jVHtC7ZcryxjGt9XyD+86V3Em69FmeKjWiS0uqlWPc9vqv9JWL7w
+        |qP/0uK3pN/u6uPQLOvnoQ0IeidiEyxPx2bvhiWC4jChWrBQdnArncevPDt09qZah
+        |SL0896+1DSJMwBGB7FY79tOi4lu3sgQiUpWAk2nojkxl8ZEDLXB0AuqLZxUpaVIC
+        |u9ffUGpVRr+goyhhf3DQw6KqLCGqR84onAZFdr+CGCe01a60y1Dma/RMhnEw6abf
+        |Fobg2P9A3fvQQoh/ozM6LlweQRGBY84YcWsr7KaKtzFcOmpH4MN5WdYgGq/yapiq
+        |crxXStJLnbsQ/LBMQeXtHT1eKJ2czL+zUdqnR+WEUwIDAQABo0IwQDAdBgNVHQ4E
+        |FgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB
+        |/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAArx1UaEt65Ru2yyTUEUAJNMnMvl
+        |wFTPoCWOAvn9sKIN9SCYPBMtrFaisNZ+EZLpLrqeLppysb0ZRGxhNaKatBYSaVqM
+        |4dc+pBroLwP0rmEdEBsqpIt6xf4FpuHA1sj+nq6PK7o9mfjYcwlYRm6mnPTXJ9OV
+        |2jeDchzTc+CiR5kDOF3VSXkAKRzH7JsgHAckaVd4sjn8OoSgtZx8jb8uk2Intzna
+        |FxiuvTwJaP+EmzzV1gsD41eeFPfR60/IvYcjt7ZJQ3mFXLrrkguhxuhoqEwWsRqZ
+        |CuhTLJK7oQkYdQxlqHvLI7cawiiFwxv/0Cti76R7CZGYZ4wUAc1oBmpjIXUDgIiK
+        |boHGhfKppC3n9KUkEEeDys30jXlYsQab5xoq2Z0B15R97QNKyvDb6KkBPvVWmcke
+        |jkk9u+UJueBPSZI9FoJAzMxZxuY67RIuaTxslbH9qh17f4a+Hg4yRvv7E491f0yL
+        |S0Zj/gA0QHDBw7mh3aZw4gSzQbzpgJHqZJx64SIDqZxubw5lT2yHh17zbqD5daWb
+        |QOhTsiedSrnAdyGN/4fy3ryM7xfft0kL0fJuMAsaDk527RH89elWsn2/x20Kk4yl
+        |0MC2Hb46TpSi125sC8KKfPog88Tk5c0NqMuRkrF8hey1FGlmDoLnzc7ILaZRfyHB
+        |NVOFBkpdn627G190
+        |-----END CERTIFICATE-----
+        |""".trimMargin()
+    val entrustRootCertificateAuthority = """
+        |-----BEGIN CERTIFICATE-----
+        |MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC
+        |VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0
+        |Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW
+        |KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl
+        |cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw
+        |NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw
+        |NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy
+        |ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV
+        |BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ
+        |KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo
+        |Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4
+        |4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9
+        |KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI
+        |rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi
+        |94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB
+        |sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi
+        |gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo
+        |kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE
+        |vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA
+        |A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t
+        |O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua
+        |AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP
+        |9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/
+        |eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m
+        |0vdXcDazv/wor3ElhVsT/h5/WrQ8
+        |-----END CERTIFICATE-----
+        |""".trimMargin()
+    return Buffer()
+        .writeUtf8(comodoRsaCertificationAuthority)
+        .writeUtf8(entrustRootCertificateAuthority)
+        .inputStream()
+  }
+
+  /**
+   * Returns a trust manager that trusts `certificates` and none other. HTTPS services whose
+   * certificates have not been signed by these certificates will fail with a
+   * `SSLHandshakeException`.
+   *
+   * This can be used to replace the host platform's built-in trusted certificates with a custom
+   * set. This is useful in development where certificate authority-trusted certificates aren't
+   * available. Or in production, to avoid reliance on third-party certificate authorities.
+   *
+   * See also [CertificatePinner], which can limit trusted certificates while still using
+   * the host platform's built-in trust store.
+   *
+   * Warning: Customizing Trusted Certificates is Dangerous!
+   * -------------------------------------------------------
+   *
+   * Relying on your own trusted certificates limits your server team's ability to update their
+   * TLS certificates. By installing a specific set of trusted certificates, you take on additional
+   * operational complexity and limit your ability to migrate between certificate authorities. Do
+   * not use custom trusted certificates in production without the blessing of your server's TLS
+   * administrator.
+   */
+  private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager {
+    val certificateFactory = CertificateFactory.getInstance("X.509")
+    val certificates = certificateFactory.generateCertificates(inputStream)
+    require(!certificates.isEmpty()) { "expected non-empty set of trusted certificates" }
+
+    // Put the certificates a key store.
+    val password = "password".toCharArray() // Any password will work.
+    val keyStore = newEmptyKeyStore(password)
+    for ((index, certificate) in certificates.withIndex()) {
+      val certificateAlias = index.toString()
+      keyStore.setCertificateEntry(certificateAlias, certificate)
+    }
+
+    // Use it to build an X509 trust manager.
+    val keyManagerFactory = KeyManagerFactory.getInstance(
+        KeyManagerFactory.getDefaultAlgorithm()
+    )
+    keyManagerFactory.init(keyStore, password)
+    val trustManagerFactory = TrustManagerFactory.getInstance(
+        TrustManagerFactory.getDefaultAlgorithm()
+    )
+    trustManagerFactory.init(keyStore)
+    val trustManagers = trustManagerFactory.trustManagers
+    check(trustManagers.size == 1 && trustManagers[0] is X509TrustManager) {
+      "Unexpected default trust managers: ${Arrays.toString(trustManagers)}"
+    }
+    return trustManagers[0] as X509TrustManager
+  }
+
+  private fun newEmptyKeyStore(password: CharArray): KeyStore {
+    val keyStore = KeyStore.getInstance(KeyStore.getDefaultType())
+    val inputStream: InputStream? = null // By convention, 'null' creates an empty key store.
+    keyStore.load(inputStream, password)
+    return keyStore
+  }
+}
+
+fun main() {
+  CustomTrust().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/ParseResponseWithMoshi.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/ParseResponseWithMoshi.kt
new file mode 100644
index 0000000000..a5a8ac4633
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/ParseResponseWithMoshi.kt
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import com.squareup.moshi.JsonClass
+import com.squareup.moshi.Moshi
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.io.IOException
+
+class ParseResponseWithMoshi {
+  private val client = OkHttpClient()
+  private val moshi = Moshi.Builder().build()
+  private val gistJsonAdapter = moshi.adapter(Gist::class.java)
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://api.github.com/gists/c2a7c39532239ff261be")
+        .build()
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      val gist = gistJsonAdapter.fromJson(response.body!!.source())
+
+      for ((key, value) in gist!!.files!!) {
+        println(key)
+        println(value.content)
+      }
+    }
+  }
+
+  @JsonClass(generateAdapter = true)
+  data class Gist(var files: Map<String, GistFile>?)
+
+  @JsonClass(generateAdapter = true)
+  data class GistFile(var content: String?)
+}
+
+fun main() {
+  ParseResponseWithMoshi().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PerCallSettings.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PerCallSettings.kt
new file mode 100644
index 0000000000..4ff5f5a027
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/PerCallSettings.kt
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.io.IOException
+import java.util.concurrent.TimeUnit
+
+class PerCallSettings {
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("http://httpbin.org/delay/1") // This URL is served with a 1 second delay.
+        .build()
+
+    // Copy to customize OkHttp for this request.
+    val client1 = client.newBuilder()
+        .readTimeout(500, TimeUnit.MILLISECONDS)
+        .build()
+    try {
+      client1.newCall(request).execute().use { response ->
+        println("Response 1 succeeded: $response")
+      }
+    } catch (e: IOException) {
+      println("Response 1 failed: $e")
+    }
+
+    // Copy to customize OkHttp for this request.
+    val client2 = client.newBuilder()
+        .readTimeout(3000, TimeUnit.MILLISECONDS)
+        .build()
+    try {
+      client2.newCall(request).execute().use { response ->
+        println("Response 2 succeeded: $response")
+      }
+    } catch (e: IOException) {
+      println("Response 2 failed: $e")
+    }
+  }
+}
+
+fun main() {
+  PerCallSettings().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostFile.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostFile.kt
new file mode 100644
index 0000000000..cfb983a02d
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/PostFile.kt
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.MediaType.Companion.toMediaType
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import okhttp3.RequestBody.Companion.asRequestBody
+import java.io.File
+import java.io.IOException
+
+class PostFile {
+  private val client = OkHttpClient()
+
+  fun run() {
+    val file = File("README.md")
+
+    val request = Request.Builder()
+        .url("https://api.github.com/markdown/raw")
+        .post(file.asRequestBody(MEDIA_TYPE_MARKDOWN))
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+
+  companion object {
+    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
+  }
+}
+
+fun main() {
+  PostFile().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostForm.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostForm.kt
new file mode 100644
index 0000000000..189c6f1d7d
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/PostForm.kt
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.FormBody
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.io.IOException
+
+class PostForm {
+  private val client = OkHttpClient()
+
+  fun run() {
+    val formBody = FormBody.Builder()
+        .add("search", "Jurassic Park")
+        .build()
+    val request = Request.Builder()
+        .url("https://en.wikipedia.org/w/index.php")
+        .post(formBody)
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+}
+
+fun main() {
+  PostForm().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostMultipart.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostMultipart.kt
new file mode 100644
index 0000000000..7a56bd3a7f
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/PostMultipart.kt
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.MediaType.Companion.toMediaType
+import okhttp3.MultipartBody
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import okhttp3.RequestBody.Companion.asRequestBody
+import java.io.File
+import java.io.IOException
+
+class PostMultipart {
+  private val client = OkHttpClient()
+
+  fun run() {
+    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image
+    val requestBody = MultipartBody.Builder()
+        .setType(MultipartBody.FORM)
+        .addFormDataPart("title", "Square Logo")
+        .addFormDataPart("image", "logo-square.png",
+            File("docs/images/logo-square.png").asRequestBody(MEDIA_TYPE_PNG))
+        .build()
+
+    val request = Request.Builder()
+        .header("Authorization", "Client-ID $IMGUR_CLIENT_ID")
+        .url("https://api.imgur.com/3/image")
+        .post(requestBody)
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+
+  companion object {
+    /**
+     * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running
+     * these examples, please request your own client ID! https://api.imgur.com/oauth2
+     */
+    private val IMGUR_CLIENT_ID = "9199fdef135c122"
+    private val MEDIA_TYPE_PNG = "image/png".toMediaType()
+  }
+}
+
+fun main() {
+  PostMultipart().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostStreaming.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostStreaming.kt
new file mode 100644
index 0000000000..5cfcd96a06
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/PostStreaming.kt
@@ -0,0 +1,68 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.MediaType.Companion.toMediaType
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import okhttp3.RequestBody
+import okio.BufferedSink
+import java.io.IOException
+
+class PostStreaming {
+  private val client = OkHttpClient()
+
+  fun run() {
+    val requestBody = object : RequestBody() {
+      override fun contentType() = MEDIA_TYPE_MARKDOWN
+
+      override fun writeTo(sink: BufferedSink) {
+        sink.writeUtf8("Numbers\n")
+        sink.writeUtf8("-------\n")
+        for (i in 2..997) {
+          sink.writeUtf8(String.format(" * $i = ${factor(i)}\n"))
+        }
+      }
+
+      private fun factor(n: Int): String {
+        for (i in 2 until n) {
+          val x = n / i
+          if (x * i == n) return "${factor(x)} × $i"
+        }
+        return n.toString()
+      }
+    }
+
+    val request = Request.Builder()
+        .url("https://api.github.com/markdown/raw")
+        .post(requestBody)
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+
+  companion object {
+    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
+  }
+}
+
+fun main() {
+  PostStreaming().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostString.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostString.kt
new file mode 100644
index 0000000000..d77fda90f8
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/PostString.kt
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.MediaType.Companion.toMediaType
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import okhttp3.RequestBody.Companion.toRequestBody
+import java.io.IOException
+
+class PostString {
+  private val client = OkHttpClient()
+
+  fun run() {
+    val postBody = """
+        |Releases
+        |--------
+        |
+        | * _1.0_ May 6, 2013
+        | * _1.1_ June 15, 2013
+        | * _1.2_ August 11, 2013
+        |""".trimMargin()
+
+    val request = Request.Builder()
+        .url("https://api.github.com/markdown/raw")
+        .post(postBody.toRequestBody(MEDIA_TYPE_MARKDOWN))
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      println(response.body!!.string())
+    }
+  }
+
+  companion object {
+    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
+  }
+}
+
+fun main() {
+  PostString().run()
+}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/SynchronousGet.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/SynchronousGet.kt
new file mode 100644
index 0000000000..d5e0634d17
--- /dev/null
+++ b/samples/guide/src/main/java/okhttp3/recipes/kt/SynchronousGet.kt
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package okhttp3.recipes.kt
+
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import java.io.IOException
+
+class SynchronousGet {
+  private val client = OkHttpClient()
+
+  fun run() {
+    val request = Request.Builder()
+        .url("https://publicobject.com/helloworld.txt")
+        .build()
+
+    client.newCall(request).execute().use { response ->
+      if (!response.isSuccessful) throw IOException("Unexpected code $response")
+
+      for ((name, value) in response.headers) {
+        println("$name: $value")
+      }
+
+      println(response.body!!.string())
+    }
+  }
+}
+
+fun main() {
+  SynchronousGet().run()
+}
