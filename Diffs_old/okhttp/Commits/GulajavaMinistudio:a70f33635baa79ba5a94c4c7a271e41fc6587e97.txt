diff --git a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.kt b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.kt
index 5da8abcc50..58bdda788d 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.kt
+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.kt
@@ -122,7 +122,7 @@ object WebSocketProtocol {
   fun closeCodeExceptionMessage(code: Int): String? {
     return if (code < 1000 || code >= 5000) {
       "Code must be in range [1000,5000): $code"
-    } else if (code in 1004..1006 || code in 1012..2999) {
+    } else if (code in 1004..1006 || code in 1015..2999) {
       "Code $code is reserved and may not be used."
     } else {
       null
diff --git a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
index efe061cee1..02995e30df 100644
--- a/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
@@ -298,7 +298,7 @@
     data.write(ByteString.decodeHex("880203ec")); // Close with code 1004
     data.write(ByteString.decodeHex("880203ed")); // Close with code 1005
     data.write(ByteString.decodeHex("880203ee")); // Close with code 1006
-    for (int i = 1012; i <= 2999; i++) {
+    for (int i = 1015; i <= 2999; i++) {
       data.write(ByteString.decodeHex(
           "8802" + Util.format("%04X", i))); // Close with code 'i'
     }
@@ -312,7 +312,7 @@
         assertThat(e.getMessage()).matches("Code \\d+ is reserved and may not be used.");
       }
     }
-    assertThat(count).isEqualTo(1991);
+    assertThat(count).isEqualTo(1988);
   }
 
   private byte[] binaryData(int length) {
