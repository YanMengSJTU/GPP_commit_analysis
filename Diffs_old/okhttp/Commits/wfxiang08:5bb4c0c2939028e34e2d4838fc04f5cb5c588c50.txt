diff --git a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
index 62ada55740..329a5a7352 100644
--- a/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
+++ b/mockwebserver/src/main/java/okhttp3/mockwebserver/MockWebServer.java
@@ -650,8 +650,7 @@ private RecordedRequest readRequest(Socket socket, BufferedSource source, Buffer
   private void handleWebSocketUpgrade(Socket socket, BufferedSource source, BufferedSink sink,
       RecordedRequest request, MockResponse response) throws IOException {
     String key = request.getHeader("Sec-WebSocket-Key");
-    String acceptKey = Util.shaBase64(key + WebSocketProtocol.ACCEPT_MAGIC);
-    response.setHeader("Sec-WebSocket-Accept", acceptKey);
+    response.setHeader("Sec-WebSocket-Accept", WebSocketProtocol.acceptHeader(key));
 
     writeHttpResponse(socket, sink, response);
 
diff --git a/okhttp-tests/src/test/java/okhttp3/CacheTest.java b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
index d33dd3b9e5..80f03e0b2b 100644
--- a/okhttp-tests/src/test/java/okhttp3/CacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
@@ -39,7 +39,6 @@
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSession;
 import okhttp3.internal.Internal;
-import okhttp3.internal.Util;
 import okhttp3.internal.io.InMemoryFileSystem;
 import okhttp3.internal.platform.Platform;
 import okhttp3.internal.tls.SslClient;
@@ -1943,7 +1942,7 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
     HttpUrl url = server.url("/");
-    String urlKey = Util.md5Hex(url.toString());
+    String urlKey = Cache.key(url);
     String entryMetadata = ""
         + "" + url + "\n"
         + "GET\n"
@@ -1993,7 +1992,7 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
   /** Exercise the cache format in OkHttp 2.7 and all earlier releases. */
   @Test public void testGoldenCacheHttpsResponseOkHttp27() throws Exception {
     HttpUrl url = server.url("/");
-    String urlKey = Util.md5Hex(url.toString());
+    String urlKey = Cache.key(url);
     String prefix = Platform.get().getPrefix();
     String entryMetadata = ""
         + "" + url + "\n"
@@ -2042,7 +2041,7 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
   /** The TLS version is present in OkHttp 3.0 and beyond. */
   @Test public void testGoldenCacheHttpsResponseOkHttp30() throws Exception {
     HttpUrl url = server.url("/");
-    String urlKey = Util.md5Hex(url.toString());
+    String urlKey = Cache.key(url);
     String prefix = Platform.get().getPrefix();
     String entryMetadata = ""
         + "" + url + "\n"
@@ -2091,7 +2090,7 @@ public void assertCookies(HttpUrl url, String... expectedCookies) throws Excepti
 
   @Test public void testGoldenCacheHttpResponseOkHttp30() throws Exception {
     HttpUrl url = server.url("/");
-    String urlKey = Util.md5Hex(url.toString());
+    String urlKey = Cache.key(url);
     String prefix = Platform.get().getPrefix();
     String entryMetadata = ""
         + "" + url + "\n"
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
index d8845f2569..5f1d3efb8c 100644
--- a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
@@ -42,7 +42,6 @@
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLSession;
 import okhttp3.internal.Internal;
-import okhttp3.internal.Util;
 import okhttp3.internal.io.InMemoryFileSystem;
 import okhttp3.internal.platform.Platform;
 import okhttp3.internal.tls.SslClient;
@@ -1619,7 +1618,7 @@ private RecordedRequest assertClientSuppliedCondition(MockResponse seed, String
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
     URL url = server.url("/").url();
-    String urlKey = Util.md5Hex(url.toString());
+    String urlKey = Cache.key(HttpUrl.get(url));
     String prefix = Platform.get().getPrefix();
     String entryMetadata = ""
         + "" + url + "\n"
diff --git a/okhttp/src/main/java/okhttp3/Cache.java b/okhttp/src/main/java/okhttp3/Cache.java
index b66ad68e62..6ed941b8f2 100644
--- a/okhttp/src/main/java/okhttp3/Cache.java
+++ b/okhttp/src/main/java/okhttp3/Cache.java
@@ -182,12 +182,12 @@ public Cache(File directory, long maxSize) {
     this.cache = DiskLruCache.create(fileSystem, directory, VERSION, ENTRY_COUNT, maxSize);
   }
 
-  private static String urlToKey(Request request) {
-    return Util.md5Hex(request.url().toString());
+  public static String key(HttpUrl url) {
+    return ByteString.encodeUtf8(url.toString()).md5().hex();
   }
 
   Response get(Request request) {
-    String key = urlToKey(request);
+    String key = key(request.url());
     DiskLruCache.Snapshot snapshot;
     Entry entry;
     try {
@@ -242,7 +242,7 @@ CacheRequest put(Response response) {
     Entry entry = new Entry(response);
     DiskLruCache.Editor editor = null;
     try {
-      editor = cache.edit(urlToKey(response.request()));
+      editor = cache.edit(key(response.request().url()));
       if (editor == null) {
         return null;
       }
@@ -255,7 +255,7 @@ CacheRequest put(Response response) {
   }
 
   void remove(Request request) throws IOException {
-    cache.remove(urlToKey(request));
+    cache.remove(key(request.url()));
   }
 
   void update(Response cached, Response network) {
diff --git a/okhttp/src/main/java/okhttp3/CertificatePinner.java b/okhttp/src/main/java/okhttp3/CertificatePinner.java
index 8687e02783..855907e2b3 100644
--- a/okhttp/src/main/java/okhttp3/CertificatePinner.java
+++ b/okhttp/src/main/java/okhttp3/CertificatePinner.java
@@ -24,7 +24,6 @@
 import java.util.List;
 import java.util.Set;
 import javax.net.ssl.SSLPeerUnverifiedException;
-import okhttp3.internal.Util;
 import okhttp3.internal.tls.CertificateChainCleaner;
 import okio.ByteString;
 
@@ -246,11 +245,11 @@ public static String pin(Certificate certificate) {
   }
 
   static ByteString sha1(X509Certificate x509Certificate) {
-    return Util.sha1(ByteString.of(x509Certificate.getPublicKey().getEncoded()));
+    return ByteString.of(x509Certificate.getPublicKey().getEncoded()).sha1();
   }
 
   static ByteString sha256(X509Certificate x509Certificate) {
-    return Util.sha256(ByteString.of(x509Certificate.getPublicKey().getEncoded()));
+    return ByteString.of(x509Certificate.getPublicKey().getEncoded()).sha256();
   }
 
   static final class Pin {
diff --git a/okhttp/src/main/java/okhttp3/RealWebSocketCall.java b/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
index f383c58e76..da65db1c4b 100644
--- a/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
+++ b/okhttp/src/main/java/okhttp3/RealWebSocketCall.java
@@ -113,7 +113,7 @@ StreamWebSocket create(Response response, WebSocketListener listener) throws IOE
           "Expected 'Upgrade' header value 'websocket' but was '" + headerUpgrade + "'");
     }
     String headerAccept = response.header("Sec-WebSocket-Accept");
-    String acceptExpected = Util.shaBase64(key + WebSocketProtocol.ACCEPT_MAGIC);
+    String acceptExpected = WebSocketProtocol.acceptHeader(key);
     if (!acceptExpected.equals(headerAccept)) {
       throw new ProtocolException("Expected 'Sec-WebSocket-Accept' header value '"
           + acceptExpected
diff --git a/okhttp/src/main/java/okhttp3/internal/Util.java b/okhttp/src/main/java/okhttp3/internal/Util.java
index d31b55ae10..3ce2d46868 100644
--- a/okhttp/src/main/java/okhttp3/internal/Util.java
+++ b/okhttp/src/main/java/okhttp3/internal/Util.java
@@ -18,14 +18,11 @@
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InterruptedIOException;
-import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Array;
 import java.net.IDN;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.nio.charset.Charset;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -180,50 +177,6 @@ public static boolean skipAll(Source source, int duration, TimeUnit timeUnit) th
     }
   }
 
-  /** Returns a 32 character string containing an MD5 hash of {@code s}. */
-  public static String md5Hex(String s) {
-    try {
-      MessageDigest messageDigest = MessageDigest.getInstance("MD5");
-      byte[] md5bytes = messageDigest.digest(s.getBytes("UTF-8"));
-      return ByteString.of(md5bytes).hex();
-    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  /** Returns a Base 64-encoded string containing a SHA-1 hash of {@code s}. */
-  public static String shaBase64(String s) {
-    try {
-      MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
-      byte[] sha1Bytes = messageDigest.digest(s.getBytes("UTF-8"));
-      return ByteString.of(sha1Bytes).base64();
-    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  /** Returns a SHA-1 hash of {@code s}. */
-  public static ByteString sha1(ByteString s) {
-    try {
-      MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
-      byte[] sha1Bytes = messageDigest.digest(s.toByteArray());
-      return ByteString.of(sha1Bytes);
-    } catch (NoSuchAlgorithmException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  /** Returns a SHA-256 hash of {@code s}. */
-  public static ByteString sha256(ByteString s) {
-    try {
-      MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
-      byte[] sha1Bytes = messageDigest.digest(s.toByteArray());
-      return ByteString.of(sha1Bytes);
-    } catch (NoSuchAlgorithmException e) {
-      throw new AssertionError(e);
-    }
-  }
-
   /** Returns an immutable copy of {@code list}. */
   public static <T> List<T> immutableList(List<T> list) {
     return Collections.unmodifiableList(new ArrayList<>(list));
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
index bff2d9c992..484ff24368 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketProtocol.java
@@ -17,10 +17,11 @@
 
 import java.io.IOException;
 import java.net.ProtocolException;
+import okio.ByteString;
 
 public final class WebSocketProtocol {
   /** Magic value which must be appended to the key in a response header. */
-  public static final String ACCEPT_MAGIC = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
+  static final String ACCEPT_MAGIC = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 
   /*
   Each frame starts with two bytes of data.
@@ -117,6 +118,10 @@ static void validateCloseCode(int code, boolean argument) throws ProtocolExcepti
     }
   }
 
+  public static String acceptHeader(String key) {
+    return ByteString.encodeUtf8(key + WebSocketProtocol.ACCEPT_MAGIC).sha1().base64();
+  }
+
   private WebSocketProtocol() {
     throw new AssertionError("No instances.");
   }
