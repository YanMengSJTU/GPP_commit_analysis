diff --git a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
index cdc41ab2e3..f605522ee9 100644
--- a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
+++ b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
@@ -51,6 +51,7 @@ import org.junit.Test
 import org.junit.runner.RunWith
 import java.net.InetAddress
 import java.net.UnknownHostException
+import java.security.cert.X509Certificate
 import java.security.Security
 import javax.net.ssl.SSLPeerUnverifiedException
 import javax.net.ssl.SSLSocket
@@ -246,6 +247,8 @@ class OkHttpTest {
 
     response.use {
       assertEquals(200, response.code)
+      assertEquals("CN=localhost",
+          (response.handshake!!.peerCertificates.single() as X509Certificate).subjectDN.name)
     }
   }
 
@@ -294,10 +297,10 @@ class OkHttpTest {
   fun testEventListener() {
     val eventListener = RecordingEventListener()
 
-    client = client.newBuilder().eventListener(eventListener).build()
-
     enableTls()
 
+    client = client.newBuilder().eventListener(eventListener).build()
+
     server.enqueue(MockResponse().setBody("abc1"))
     server.enqueue(MockResponse().setBody("abc2"))
 
@@ -329,6 +332,8 @@ class OkHttpTest {
   fun testSessionReuse() {
     val sessionIds = mutableListOf<String>()
 
+    enableTls()
+
     client = client.newBuilder().eventListener(object : EventListener() {
       override fun connectionAcquired(call: Call, connection: Connection) {
         val sslSocket = connection.socket() as SSLSocket
@@ -337,8 +342,6 @@ class OkHttpTest {
       }
     }).build()
 
-    enableTls()
-
     server.enqueue(MockResponse().setBody("abc1"))
     server.enqueue(MockResponse().setBody("abc2"))
 
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
index a2fca8f481..6e917029f9 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/AndroidPlatform.kt
@@ -143,17 +143,7 @@ class AndroidPlatform : Platform() {
   }
 
   override fun buildCertificateChainCleaner(trustManager: X509TrustManager): CertificateChainCleaner =
-      try {
-        val extensionsClass = Class.forName("android.net.http.X509TrustManagerExtensions")
-        val constructor = extensionsClass.getConstructor(X509TrustManager::class.java)
-        val extensions = constructor.newInstance(trustManager)
-        val checkServerTrusted = extensionsClass.getMethod(
-            "checkServerTrusted", Array<X509Certificate>::class.java, String::class.java,
-            String::class.java)
-        AndroidCertificateChainCleaner(extensions, checkServerTrusted)
-      } catch (_: Exception) {
-        super.buildCertificateChainCleaner(trustManager)
-      }
+        AndroidCertificateChainCleaner.build(trustManager) ?: super.buildCertificateChainCleaner(trustManager)
 
   override fun buildTrustRootIndex(trustManager: X509TrustManager): TrustRootIndex = try {
     // From org.conscrypt.TrustManagerImpl, we want the method with this signature:
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/Android10CertificateChainCleaner.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/Android10CertificateChainCleaner.kt
index 87249b3ef9..93bfb6690d 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/android/Android10CertificateChainCleaner.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/Android10CertificateChainCleaner.kt
@@ -31,7 +31,7 @@ import javax.net.ssl.X509TrustManager
  * handshake.
  */
 internal class Android10CertificateChainCleaner(
-  trustManager: X509TrustManager
+  private val trustManager: X509TrustManager
 ) : CertificateChainCleaner() {
   val extensions = X509TrustManagerExtensions(trustManager)
 
@@ -48,7 +48,8 @@ internal class Android10CertificateChainCleaner(
   }
 
   override fun equals(other: Any?): Boolean =
-      other is Android10CertificateChainCleaner // All instances are equivalent.
+      other is Android10CertificateChainCleaner &&
+          other.trustManager === this.trustManager
 
-  override fun hashCode(): Int = 1
+  override fun hashCode(): Int = System.identityHashCode(trustManager)
 }
\ No newline at end of file
diff --git a/okhttp/src/main/java/okhttp3/internal/platform/android/AndroidCertificateChainCleaner.kt b/okhttp/src/main/java/okhttp3/internal/platform/android/AndroidCertificateChainCleaner.kt
index 996c772ea8..5e24c571d4 100644
--- a/okhttp/src/main/java/okhttp3/internal/platform/android/AndroidCertificateChainCleaner.kt
+++ b/okhttp/src/main/java/okhttp3/internal/platform/android/AndroidCertificateChainCleaner.kt
@@ -21,6 +21,7 @@ import java.lang.reflect.Method
 import java.security.cert.Certificate
 import java.security.cert.X509Certificate
 import javax.net.ssl.SSLPeerUnverifiedException
+import javax.net.ssl.X509TrustManager
 
 /**
  * Legacy Android implementation of CertificateChainCleaner relying on reflection.
@@ -30,6 +31,7 @@ import javax.net.ssl.SSLPeerUnverifiedException
  * handshake.
  */
 internal class AndroidCertificateChainCleaner(
+  private val trustManager: X509TrustManager,
   private val x509TrustManagerExtensions: Any,
   private val checkServerTrusted: Method
 ) : CertificateChainCleaner() {
@@ -48,7 +50,22 @@ internal class AndroidCertificateChainCleaner(
   }
 
   override fun equals(other: Any?): Boolean =
-      other is AndroidCertificateChainCleaner // All instances are equivalent.
+      other is AndroidCertificateChainCleaner &&
+          other.trustManager === this.trustManager
 
-  override fun hashCode(): Int = 0
+  override fun hashCode(): Int = System.identityHashCode(trustManager)
+
+  companion object {
+    fun build(trustManager: X509TrustManager): AndroidCertificateChainCleaner? = try {
+      val extensionsClass = Class.forName("android.net.http.X509TrustManagerExtensions")
+      val constructor = extensionsClass.getConstructor(X509TrustManager::class.java)
+      val extensions = constructor.newInstance(trustManager)
+      val checkServerTrusted = extensionsClass.getMethod(
+          "checkServerTrusted", Array<X509Certificate>::class.java, String::class.java,
+          String::class.java)
+      AndroidCertificateChainCleaner(trustManager, extensions, checkServerTrusted)
+    } catch (_: Exception) {
+      null
+    }
+  }
 }
\ No newline at end of file
diff --git a/okhttp/src/test/java/okhttp3/CallKotlinTest.kt b/okhttp/src/test/java/okhttp3/CallKotlinTest.kt
index 3dd056314a..f70e6c46ad 100644
--- a/okhttp/src/test/java/okhttp3/CallKotlinTest.kt
+++ b/okhttp/src/test/java/okhttp3/CallKotlinTest.kt
@@ -19,6 +19,7 @@ import okhttp3.MediaType.Companion.toMediaType
 import okhttp3.mockwebserver.MockResponse
 import okhttp3.mockwebserver.MockWebServer
 import okhttp3.testing.PlatformRule
+import okhttp3.tls.internal.TlsUtil.localhost
 import okio.BufferedSink
 import org.assertj.core.api.Assertions.assertThat
 import org.junit.Assert.assertEquals
@@ -28,6 +29,7 @@ import org.junit.Test
 import org.junit.rules.TestRule
 import org.junit.rules.Timeout
 import java.io.IOException
+import java.security.cert.X509Certificate
 import java.util.concurrent.TimeUnit
 
 class CallKotlinTest {
@@ -37,6 +39,7 @@ class CallKotlinTest {
   @JvmField @Rule val clientTestRule = OkHttpClientTestRule()
 
   private var client = clientTestRule.newClient()
+  private val handshakeCertificates = localhost()
 
   @Test
   fun legalToExecuteTwiceCloning() {
@@ -57,6 +60,31 @@ class CallKotlinTest {
     assertThat("def").isEqualTo(response2.body!!.string())
   }
 
+  @Test
+  fun testMockWebserverRequest() {
+    enableTls()
+
+    server.enqueue(MockResponse().setBody("abc"))
+
+    val request = Request.Builder().url(server.url("/")).build()
+
+    val response = client.newCall(request).execute()
+
+    response.use {
+      assertEquals(200, response.code)
+      assertEquals("CN=localhost",
+          (response.handshake!!.peerCertificates.single() as X509Certificate).subjectDN.name)
+    }
+  }
+
+  private fun enableTls() {
+    client = client.newBuilder()
+        .sslSocketFactory(
+            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager)
+        .build()
+    server.useHttps(handshakeCertificates.sslSocketFactory(), false)
+  }
+
   @Test
   fun testHeadAfterPut() {
     class ErringRequestBody : RequestBody() {
