diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
index 35ea0e8483..8ffa80214b 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
@@ -152,13 +152,25 @@
     serverListener.assertTextMessage("Hi!");
   }
 
-  @Test public void serverCloseThenWritingCloseThrows() throws IOException {
+  @Test public void serverCloseThenClientClose() throws IOException {
     server.close(1000, "Hello!");
     client.processNextFrame();
     clientListener.assertClosing(1000, "Hello!");
     assertTrue(client.close(1000, "Bye!"));
   }
 
+  @Test public void emptyCloseInitiatesShutdown() throws IOException {
+    server2clientSink.write(ByteString.decodeHex("8800")).emit(); // Close without code.
+    client.processNextFrame();
+    clientListener.assertClosing(1005, "");
+
+    assertTrue(client.close(1000, "Bye!"));
+    server.processNextFrame();
+    serverListener.assertClosing(1000, "Bye!");
+
+    clientListener.assertClosed(1005, "");
+  }
+
   @Test public void clientCloseClosesConnection() throws IOException {
     client.close(1000, "Hello!");
     assertFalse(clientConnectionClosed);
@@ -237,9 +249,10 @@
     // Manually write an invalid masked close frame.
     server2clientSink.write(ByteString.decodeHex("888760b420bb635c68de0cd84f")).emit();
 
-    client.processNextFrame(); // Detects error, closes connection immediately since close already sent.
+    client.processNextFrame();// Detects error, disconnects immediately since close already sent.
     assertTrue(clientConnectionClosed);
-    clientListener.assertFailure(ProtocolException.class, "Server-sent frames must not be masked.");
+    clientListener.assertFailure(
+        ProtocolException.class, "Server-sent frames must not be masked.");
 
     serverListener.assertClosing(1000, "Hello");
     serverListener.assertExhausted(); // Client should not have sent second close.
@@ -252,7 +265,7 @@
     assertFalse(clientConnectionClosed); // Not closed until close reply is received.
     server2clientSink.write(ByteString.decodeHex("0a00")).emit(); // Invalid non-final ping frame.
 
-    client.processNextFrame(); // Detects error, closes connection immediately since close already sent.
+    client.processNextFrame(); // Detects error, disconnects immediately since close already sent.
     assertTrue(clientConnectionClosed);
     clientListener.assertFailure(ProtocolException.class, "Control frames must be final.");
 
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index b78eaca3be..762c8daac0 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -238,7 +238,7 @@ public void initReaderAndWriter(Streams streams) throws IOException {
     reader = new WebSocketReader(streams.client, streams.source, this);
   }
 
-  /** Receive frames until there are no more. */
+  /** Receive frames until there are no more. Invoked only by the reader thread. */
   public void loopReader() throws IOException {
     while (receivedCloseCode == -1) {
       // This method call results in one or more onRead* methods being called on this thread.
@@ -246,7 +246,10 @@ public void loopReader() throws IOException {
     }
   }
 
-  /** Receive a single frame and return true if there are more frames to read. */
+  /**
+   * For testing: receive a single frame and return true if there are more frames to read. Invoked
+   * only by the reader thread.
+   */
   boolean processNextFrame() throws IOException {
     try {
       reader.processNextFrame();
