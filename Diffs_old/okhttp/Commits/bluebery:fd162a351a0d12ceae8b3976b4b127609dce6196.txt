diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java
index 7e7f05a2c8..159d37b2c9 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/ws/RealWebSocketTest.java
@@ -130,25 +130,25 @@
       client.sendPing(new Buffer().writeUtf8("Pong?"));
       fail();
     } catch (IllegalStateException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
     try {
       client.close(1000, "Hello!");
       fail();
     } catch (IllegalStateException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
     try {
       client.sendMessage(TEXT, new Buffer().writeUtf8("Hello!"));
       fail();
     } catch (IllegalStateException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
     try {
       client.newMessageSink(TEXT);
       fail();
     } catch (IllegalStateException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
   }
 
@@ -161,19 +161,19 @@
       client.sendPing(new Buffer().writeUtf8("Pong?"));
       fail();
     } catch (IOException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
     try {
       client.sendMessage(TEXT, new Buffer().writeUtf8("Hi!"));
       fail();
     } catch (IOException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
     try {
       client.close(1000, "Bye!");
       fail();
     } catch (IOException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
   }
 
@@ -190,20 +190,20 @@
       sink.writeUtf8("lo!").emit(); // No writing to the underlying sink.
       fail();
     } catch (IOException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
       sink.buffer().clear();
     }
     try {
       sink.flush(); // No flushing.
       fail();
     } catch (IOException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
     try {
       sink.close(); // No closing because this requires writing a frame.
       fail();
     } catch (IOException e) {
-      assertEquals("Closed", e.getMessage());
+      assertEquals("closed", e.getMessage());
     }
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java
index a926ebccf2..7fa055cb7c 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/RealWebSocket.java
@@ -96,28 +96,28 @@ public boolean readMessage() {
   }
 
   @Override public BufferedSink newMessageSink(PayloadType type) {
-    if (writerSentClose) throw new IllegalStateException("Closed");
+    if (writerSentClose) throw new IllegalStateException("closed");
     return writer.newMessageSink(type);
   }
 
   @Override public void sendMessage(PayloadType type, Buffer payload) throws IOException {
-    if (writerSentClose) throw new IllegalStateException("Closed");
+    if (writerSentClose) throw new IllegalStateException("closed");
     writer.sendMessage(type, payload);
   }
 
   @Override public void sendPing(Buffer payload) throws IOException {
-    if (writerSentClose) throw new IllegalStateException("Closed");
+    if (writerSentClose) throw new IllegalStateException("closed");
     writer.writePing(payload);
   }
 
   /** Send an unsolicited pong with the specified payload. */
   public void sendPong(Buffer payload) throws IOException {
-    if (writerSentClose) throw new IllegalStateException("Closed");
+    if (writerSentClose) throw new IllegalStateException("closed");
     writer.writePong(payload);
   }
 
   @Override public void close(int code, String reason) throws IOException {
-    if (writerSentClose) throw new IllegalStateException("Closed");
+    if (writerSentClose) throw new IllegalStateException("closed");
 
     boolean closeConnection;
     synchronized (closeLock) {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
index 0521222549..76c77ad375 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketReader.java
@@ -77,8 +77,8 @@
   private final byte[] maskBuffer = new byte[2048];
 
   public WebSocketReader(boolean isClient, BufferedSource source, FrameCallback frameCallback) {
-    if (source == null) throw new NullPointerException("source");
-    if (frameCallback == null) throw new NullPointerException("frameCallback");
+    if (source == null) throw new NullPointerException("source == null");
+    if (frameCallback == null) throw new NullPointerException("frameCallback == null");
     this.isClient = isClient;
     this.source = source;
     this.frameCallback = frameCallback;
@@ -103,7 +103,7 @@ public void processNextFrame() throws IOException {
   }
 
   private void readHeader() throws IOException {
-    if (closed) throw new IOException("Closed");
+    if (closed) throw new IOException("closed");
 
     int b0 = source.readByte() & 0xff;
 
@@ -234,8 +234,8 @@ private void readUntilNonControlFrame() throws IOException {
    */
   private final class FramedMessageSource implements Source {
     @Override public long read(Buffer sink, long byteCount) throws IOException {
-      if (closed) throw new IOException("Closed");
-      if (messageClosed) throw new IllegalStateException("Closed");
+      if (closed) throw new IOException("closed");
+      if (messageClosed) throw new IllegalStateException("closed");
 
       if (frameBytesRead == frameLength) {
         if (isFinalFrame) return -1; // We are exhausted and have no continuations.
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketWriter.java b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketWriter.java
index 207ab24c6e..eda97b5375 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketWriter.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/ws/WebSocketWriter.java
@@ -62,8 +62,8 @@
   private final byte[] maskBuffer;
 
   public WebSocketWriter(boolean isClient, BufferedSink sink, Random random) {
-    if (sink == null) throw new NullPointerException("sink");
-    if (random == null) throw new NullPointerException("random");
+    if (sink == null) throw new NullPointerException("sink == null");
+    if (random == null) throw new NullPointerException("random == null");
     this.isClient = isClient;
     this.sink = sink;
     this.random = random;
@@ -117,7 +117,7 @@ public void writeClose(int code, String reason) throws IOException {
   }
 
   private void writeControlFrame(int opcode, Buffer payload) throws IOException {
-    if (closed) throw new IOException("Closed");
+    if (closed) throw new IOException("closed");
 
     int length = 0;
     if (payload != null) {
@@ -184,7 +184,7 @@ public void sendMessage(PayloadType type, Buffer payload) throws IOException {
 
   private void writeFrame(PayloadType payloadType, Buffer source, long byteCount,
       boolean isFirstFrame, boolean isFinal) throws IOException {
-    if (closed) throw new IOException("Closed");
+    if (closed) throw new IOException("closed");
 
     int opcode = OPCODE_CONTINUATION;
     if (isFirstFrame) {
@@ -258,7 +258,7 @@ private void writeAllMasked(BufferedSource source, long byteCount) throws IOExce
     }
 
     @Override public void flush() throws IOException {
-      if (closed) throw new IOException("Closed");
+      if (closed) throw new IOException("closed");
 
       synchronized (sink) {
         sink.flush();
@@ -271,7 +271,7 @@ private void writeAllMasked(BufferedSource source, long byteCount) throws IOExce
 
     @SuppressWarnings("PointlessBitwiseExpression")
     @Override public void close() throws IOException {
-      if (closed) throw new IOException("Closed");
+      if (closed) throw new IOException("closed");
 
       int length = 0;
 
