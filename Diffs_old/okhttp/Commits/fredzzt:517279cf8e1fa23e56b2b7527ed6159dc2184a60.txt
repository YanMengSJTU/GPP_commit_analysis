diff --git a/README.md b/README.md
index fcecace952..a8e4acfb0f 100644
--- a/README.md
+++ b/README.md
@@ -37,6 +37,82 @@ If you are using R8 or ProGuard add the options from
 
 You might also need rules for Okio which is a dependency of this library.
 
+### Usage
+-------
+```java
+private final OkHttpClient client = new OkHttpClient();
+
+  public void run() throws Exception {
+    Request request = new Request.Builder()
+        .url("https://publicobject.com/helloworld.txt")
+        .build();
+
+    try (Response response = client.newCall(request).execute()) {
+      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
+
+      Headers responseHeaders = response.headers();
+      for (int i = 0; i < responseHeaders.size(); i++) {
+        System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
+      }
+
+      System.out.println(response.body().string());
+    }
+  }
+```
+```java
+private final OkHttpClient client = new OkHttpClient();
+
+  public void run() throws Exception {
+    Request request = new Request.Builder()
+        .url("http://publicobject.com/helloworld.txt")
+        .build();
+
+    client.newCall(request).enqueue(new Callback() {
+      @Override public void onFailure(Call call, IOException e) {
+        e.printStackTrace();
+      }
+
+      @Override public void onResponse(Call call, Response response) throws IOException {
+        try (ResponseBody responseBody = response.body()) {
+          if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
+
+          Headers responseHeaders = response.headers();
+          for (int i = 0, size = responseHeaders.size(); i < size; i++) {
+            System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
+          }
+
+          System.out.println(responseBody.string());
+        }
+      }
+    });
+  }
+```
+
+```java
+public static final MediaType JSON
+    = MediaType.parse("application/json; charset=utf-8");
+
+OkHttpClient client = new OkHttpClient();
+
+String post(String url, String json) throws IOException {
+  RequestBody body = RequestBody.create(JSON, json);
+  Request request = new Request.Builder()
+      .url(url)
+      .post(body)
+      .build();
+  Response response = client.newCall(request).execute();
+  return response.body().string();
+}
+```
+samples:https://github.com/square/okhttp/wiki/Recipes
+
+OkHttp is an HTTP client that’s efficient by default:
+
+* HTTP/2 support allows all requests to the same host to share a socket.
+* Connection pooling reduces request latency (if HTTP/2 isn’t available).
+* Transparent GZIP shrinks download sizes.
+* Response caching avoids the network completely for repeat requests.
+
 
 License
 -------
