diff --git a/.circleci/config.yml b/.circleci/config.yml
index 6d377608e7..a17ecb2465 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -189,12 +189,12 @@ workflows:
       - testjdk8alpn:
           filters:
             branches:
-              ignore:
-                - gh-pages
+              only: master
       - testjdk11:
           filters:
             branches:
-              only: master
+              ignore:
+                - gh-pages
       - testconscrypt:
           filters:
             branches:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 642a173870..768fe2a1d2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,17 @@
 Change Log
 ==========
 
+## Version 4.0.0
+
+_2019-06-26_
+
+**This release upgrades OkHttp to Kotlin.** We tried our best to make fast and safe to upgrade
+from OkHttp 3.x. We wrote an [upgrade guide][upgrading_to_okhttp_4] to help with the migration and a
+[blog post][okhttp4_blog_post] to explain it.
+
+ *  Fix: Target Java 8 bytecode for Java and Kotlin.
+
+
 ## Version 4.0.0-RC3
 
 _2019-06-24_
@@ -26,11 +37,7 @@ _2019-06-21_
 
 _2019-06-03_
 
-**OkHttp 4 upgrades OkHttp to Kotlin.** This is the first stable preview of OkHttp 4. Use it to find
-bugs or performance regressions before the final 4.0.0 release.
-
-We tried our best to make it fast and safe to upgrade from OkHttp 3.x.
-[We even wrote a guide][upgrading_to_okhttp_4] to help you with it!
+ *  First stable preview of OkHttp 4.
 
 
 ## Version 3.14.2
@@ -1794,7 +1801,7 @@ Initial release.
 
  [brick]: https://noncombatant.org/2015/05/01/about-http-public-key-pinning/
  [webdav]: https://tools.ietf.org/html/rfc4918
- [major_versions]: http://jakewharton.com/java-interoperability-policy-for-major-version-updates/
+ [major_versions]: https://jakewharton.com/java-interoperability-policy-for-major-version-updates/
  [nginx_959]: https://trac.nginx.org/nginx/ticket/959
  [okhttp_idling_resource]: https://github.com/JakeWharton/okhttp-idling-resource
  [bom]: https://en.wikipedia.org/wiki/Byte_order_mark
@@ -1808,7 +1815,8 @@ Initial release.
  [require_android_5]: https://medium.com/square-corner-blog/okhttp-3-13-requires-android-5-818bb78d07ce
  [obsolete_apache_client]: https://gist.github.com/swankjesse/09721f72039e3a46cf50f94323deb82d
  [obsolete_url_factory]: https://gist.github.com/swankjesse/dd91c0a8854e1559b00f5fc9c7bfae70
- [tls_configuration_history]: http://square.github.io/okhttp/tls_configuration_history/
+ [tls_configuration_history]: https://square.github.io/okhttp/tls_configuration_history/
  [grpc_http2]: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
- [upgrading_to_okhttp_4]: http://square.github.io/okhttp/upgrading_to_okhttp_4/
- [interceptors]: http://square.github.io/okhttp/interceptors/
+ [upgrading_to_okhttp_4]: https://square.github.io/okhttp/upgrading_to_okhttp_4/
+ [interceptors]: https://square.github.io/okhttp/interceptors/
+ [okhttp4_blog_post]: https://cashapp.github.io/2019-06-26/okhttp-4-goes-kotlin
diff --git a/README.md b/README.md
index 999455282f..2b49800b67 100644
--- a/README.md
+++ b/README.md
@@ -100,7 +100,7 @@ Releases
 Our [change log][changelog] has release history.
 
 ```kotlin
-implementation("com.squareup.okhttp3:okhttp:3.14.2")
+implementation("com.squareup.okhttp3:okhttp:4.0.0")
 ```
 
 Snapshot builds are [available][snap].
@@ -120,7 +120,7 @@ MockWebServer
 OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients.
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:mockwebserver:3.14.2")
+testImplementation("com.squareup.okhttp3:mockwebserver:4.0.0")
 ```
 
 
diff --git a/gradle.properties b/gradle.properties
index 7c006bc8bb..8050c2086a 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,7 +1,7 @@
 org.gradle.jvmargs='-Dfile.encoding=UTF-8'
 
 GROUP=com.squareup.okhttp3
-VERSION_NAME=4.0.0-SNAPSHOT
+VERSION_NAME=4.1.0-SNAPSHOT
 
 POM_URL=https://github.com/square/okhttp
 POM_SCM_URL=https://github.com/square/okhttp
diff --git a/mockwebserver/README.md b/mockwebserver/README.md
index 4dd382a2e1..d768cb7999 100644
--- a/mockwebserver/README.md
+++ b/mockwebserver/README.md
@@ -142,7 +142,7 @@ server.setDispatcher(dispatcher);
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:mockwebserver:3.14.2")
+testImplementation("com.squareup.okhttp3:mockwebserver:4.0.0")
 ```
 
 ### License
diff --git a/okhttp-dnsoverhttps/README.md b/okhttp-dnsoverhttps/README.md
index 5aea64e7e2..1e0b05c3a8 100644
--- a/okhttp-dnsoverhttps/README.md
+++ b/okhttp-dnsoverhttps/README.md
@@ -7,5 +7,5 @@ API is not considered stable and may change at any time.
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-dnsoverhttps:3.14.2")
+testImplementation("com.squareup.okhttp3:okhttp-dnsoverhttps:4.0.0")
 ```
diff --git a/okhttp-logging-interceptor/README.md b/okhttp-logging-interceptor/README.md
index 690a290879..c887c05a72 100644
--- a/okhttp-logging-interceptor/README.md
+++ b/okhttp-logging-interceptor/README.md
@@ -37,7 +37,7 @@ Download
 --------
 
 ```kotlin
-implementation("com.squareup.okhttp3:logging-interceptor:3.14.2")
+implementation("com.squareup.okhttp3:logging-interceptor:4.0.0")
 ```
 
 
diff --git a/okhttp-sse/README.md b/okhttp-sse/README.md
index d8f570a19f..376c4d54c2 100644
--- a/okhttp-sse/README.md
+++ b/okhttp-sse/README.md
@@ -7,5 +7,5 @@ API is not considered stable and may change at any time.
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-sse:3.14.2")
+testImplementation("com.squareup.okhttp3:okhttp-sse:4.0.0")
 ```
diff --git a/okhttp-tls/README.md b/okhttp-tls/README.md
index fa453510a5..19bfe83762 100644
--- a/okhttp-tls/README.md
+++ b/okhttp-tls/README.md
@@ -227,7 +227,7 @@ Download
 --------
 
 ```kotlin
-implementation("com.squareup.okhttp3:okhttp-tls:3.14.2")
+implementation("com.squareup.okhttp3:okhttp-tls:4.0.0")
 ```
 
  [held_certificate]: http://square.github.io/okhttp/4.x/okhttp-tls/okhttp3.tls/-held-certificate/
diff --git a/okhttp-urlconnection/README.md b/okhttp-urlconnection/README.md
index 1a2234c30b..147fdae8ee 100644
--- a/okhttp-urlconnection/README.md
+++ b/okhttp-urlconnection/README.md
@@ -6,5 +6,5 @@ This module integrates OkHttp with `Authenticator` and `CookieHandler` from `jav
 ### Download
 
 ```kotlin
-testImplementation("com.squareup.okhttp3:okhttp-urlconnection:3.14.2")
+testImplementation("com.squareup.okhttp3:okhttp-urlconnection:4.0.0")
 ```
diff --git a/okhttp/src/main/java/okhttp3/ResponseBody.kt b/okhttp/src/main/java/okhttp3/ResponseBody.kt
index 1650cc109d..04731370d1 100644
--- a/okhttp/src/main/java/okhttp3/ResponseBody.kt
+++ b/okhttp/src/main/java/okhttp3/ResponseBody.kt
@@ -121,16 +121,31 @@ abstract class ResponseBody : Closeable {
    * possibility for your response.
    */
   @Throws(IOException::class)
-  fun bytes(): ByteArray {
+  fun bytes() = consumeSource(BufferedSource::readByteArray) { it.size }
+
+  /**
+   * Returns the response as a [ByteString].
+   *
+   * This method loads entire response body into memory. If the response body is very large this
+   * may trigger an [OutOfMemoryError]. Prefer to stream the response body if this is a
+   * possibility for your response.
+   */
+  @Throws(IOException::class)
+  fun byteString() = consumeSource(BufferedSource::readByteString) { it.size }
+
+  private inline fun <T : Any> consumeSource(
+    consumer: (BufferedSource) -> T,
+    sizeMapper: (T) -> Int
+  ): T {
     val contentLength = contentLength()
-    if (contentLength > Integer.MAX_VALUE) {
+    if (contentLength > Int.MAX_VALUE) {
       throw IOException("Cannot buffer entire body for content length: $contentLength")
     }
 
-    val bytes: ByteArray = source().use(BufferedSource::readByteArray)
-    if (contentLength != -1L && contentLength != bytes.size.toLong()) {
-      throw IOException(
-          "Content-Length ($contentLength) and stream length (${bytes.size}) disagree")
+    val bytes = source().use(consumer)
+    val size = sizeMapper(bytes)
+    if (contentLength != -1L && contentLength != size.toLong()) {
+      throw IOException("Content-Length ($contentLength) and stream length ($size) disagree")
     }
     return bytes
   }
diff --git a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.kt b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.kt
index 15803c95de..b9d028b094 100644
--- a/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.kt
+++ b/okhttp/src/main/java/okhttp3/internal/cache/DiskLruCache.kt
@@ -706,6 +706,8 @@ class DiskLruCache internal constructor(
 
           while (delegate.hasNext()) {
             val entry = delegate.next()
+            if (entry == null || !entry.readable) continue // Entry during edit
+
             val snapshot = entry.snapshot() ?: continue
             // Evicted since we copied the entries.
             nextSnapshot = snapshot
diff --git a/okhttp/src/test/java/okhttp3/InterceptorTest.java b/okhttp/src/test/java/okhttp3/InterceptorTest.java
index 77c9a7811d..5428f06acd 100644
--- a/okhttp/src/test/java/okhttp3/InterceptorTest.java
+++ b/okhttp/src/test/java/okhttp3/InterceptorTest.java
@@ -16,6 +16,7 @@
 package okhttp3;
 
 import java.io.IOException;
+import java.net.InetAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.SocketTimeoutException;
@@ -684,7 +685,8 @@ private void interceptorThrowsRuntimeExceptionAsynchronous(boolean network) thro
       return chain.proceed(chain.request());
     };
 
-    ServerSocket serverSocket = new ServerSocket(0, 1);
+    InetAddress localhost = InetAddress.getLoopbackAddress();
+    ServerSocket serverSocket = new ServerSocket(0, 1, localhost);
     // Fill backlog queue with this request so subsequent requests will be blocked.
     new Socket().connect(serverSocket.getLocalSocketAddress());
 
diff --git a/okhttp/src/test/java/okhttp3/ResponseBodyTest.java b/okhttp/src/test/java/okhttp3/ResponseBodyTest.java
index b994bd3c0d..2ff9851268 100644
--- a/okhttp/src/test/java/okhttp3/ResponseBodyTest.java
+++ b/okhttp/src/test/java/okhttp3/ResponseBodyTest.java
@@ -330,6 +330,89 @@
     }
   }
 
+  @Test public void byteStringEmpty() throws IOException {
+    ResponseBody body = body("");
+    assertThat(body.byteString()).isEqualTo(ByteString.EMPTY);
+  }
+
+  @Test public void byteStringSeesBom() throws IOException {
+    ResponseBody body = body("efbbbf68656c6c6f");
+    ByteString actual = body.byteString();
+    ByteString expected = ByteString.decodeHex("efbbbf68656c6c6f");
+    assertThat(actual).isEqualTo(expected);
+  }
+
+  @Test public void byteStringClosesUnderlyingSource() throws IOException {
+    final AtomicBoolean closed = new AtomicBoolean();
+    ResponseBody body = new ResponseBody() {
+      @Override public MediaType contentType() {
+        return null;
+      }
+
+      @Override public long contentLength() {
+        return 5;
+      }
+
+      @Override public BufferedSource source() {
+        Buffer source = new Buffer().writeUtf8("hello");
+        return Okio.buffer(new ForwardingSource(source) {
+          @Override public void close() throws IOException {
+            closed.set(true);
+            super.close();
+          }
+        });
+      }
+    };
+    assertThat(body.byteString().size()).isEqualTo(5);
+    assertThat(closed.get()).isTrue();
+  }
+
+  @Test public void byteStringThrowsWhenLengthsDisagree() {
+    ResponseBody body = new ResponseBody() {
+      @Override public MediaType contentType() {
+        return null;
+      }
+
+      @Override public long contentLength() {
+        return 10;
+      }
+
+      @Override public BufferedSource source() {
+        return new Buffer().writeUtf8("hello");
+      }
+    };
+    try {
+      body.byteString();
+      fail();
+    } catch (IOException e) {
+      assertThat(e.getMessage()).isEqualTo(
+          "Content-Length (10) and stream length (5) disagree");
+    }
+  }
+
+  @Test public void byteStringThrowsMoreThanIntMaxValue() {
+    ResponseBody body = new ResponseBody() {
+      @Override public MediaType contentType() {
+        return null;
+      }
+
+      @Override public long contentLength() {
+        return Integer.MAX_VALUE + 1L;
+      }
+
+      @Override public BufferedSource source() {
+        throw new AssertionError();
+      }
+    };
+    try {
+      body.byteString();
+      fail();
+    } catch (IOException e) {
+      assertThat(e.getMessage()).isEqualTo(
+          "Cannot buffer entire body for content length: 2147483648");
+    }
+  }
+
   @Test public void byteStreamEmpty() throws IOException {
     ResponseBody body = body("");
     InputStream bytes = body.byteStream();
diff --git a/okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java b/okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java
index 8a4754649b..a37395f27b 100644
--- a/okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java
+++ b/okhttp/src/test/java/okhttp3/internal/cache/DiskLruCacheTest.java
@@ -1643,6 +1643,25 @@ private void createNewCacheWithSize(int maxSize) throws IOException {
     assertAbsent("k1");
   }
 
+  @Test public void dontRemoveUnfinishedEntryWhenCreatingSnapshot() throws Exception {
+    DiskLruCache.Editor creator = cache.edit("k1");
+    setString(creator, 0, "ABC");
+    setString(creator, 1, "DE");
+
+    assertThat(creator.newSource(0)).isNull();
+    assertThat(creator.newSource(1)).isNull();
+
+    Iterator<DiskLruCache.Snapshot> snapshotWhileEditing = cache.snapshots();
+    assertThat(snapshotWhileEditing.hasNext()).isFalse(); // entry still is being created/edited
+    creator.commit();
+
+    Iterator<DiskLruCache.Snapshot> snapshotAfterCommit = cache.snapshots();
+
+    assertThat(snapshotAfterCommit.hasNext())
+        .withFailMessage("Entry has been removed during creation.")
+        .isTrue();
+  }
+
   private void assertJournalEquals(String... expectedBodyLines) throws Exception {
     List<String> expectedLines = new ArrayList<>();
     expectedLines.add(MAGIC);
diff --git a/samples/guide/README.md b/samples/guide/README.md
index 84c8ccb004..43787700f1 100644
--- a/samples/guide/README.md
+++ b/samples/guide/README.md
@@ -1,2 +1,2 @@
 Samples
-=======
\ No newline at end of file
+=======
