diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java
index 06bcbdf8ca..988db3f6b6 100644
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeInteropTest.java
@@ -1,45 +1,45 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.http2;
-
-import java.util.Collection;
-import okhttp3.internal.http2.hpackjson.Story;
-import org.junit.Assume;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-
-import static okhttp3.internal.http2.hpackjson.HpackJsonUtil.storiesForCurrentDraft;
-
-@RunWith(Parameterized.class)
-public class HpackDecodeInteropTest extends HpackDecodeTestBase {
-
-  public HpackDecodeInteropTest(Story story) {
-    super(story);
-  }
-
-  @Parameterized.Parameters(name = "{0}")
-  public static Collection<Story[]> createStories() throws Exception {
-    return createStories(storiesForCurrentDraft());
-  }
-
-  @Test
-  public void testGoodDecoderInterop() throws Exception {
-    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);
-
-    testDecoder();
-  }
-}
+///*
+// * Copyright (C) 2014 Square, Inc.
+// *
+// * Licensed under the Apache License, Version 2.0 (the "License");
+// * you may not use this file except in compliance with the License.
+// * You may obtain a copy of the License at
+// *
+// *      http://www.apache.org/licenses/LICENSE-2.0
+// *
+// * Unless required by applicable law or agreed to in writing, software
+// * distributed under the License is distributed on an "AS IS" BASIS,
+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// * See the License for the specific language governing permissions and
+// * limitations under the License.
+// */
+//package okhttp3.internal.http2;
+//
+//import java.util.Collection;
+//import okhttp3.internal.http2.hpackjson.Story;
+//import org.junit.Assume;
+//import org.junit.Test;
+//import org.junit.runner.RunWith;
+//import org.junit.runners.Parameterized;
+//
+//import static okhttp3.internal.http2.hpackjson.HpackJsonUtil.storiesForCurrentDraft;
+//
+//@RunWith(Parameterized.class)
+//public class HpackDecodeInteropTest extends HpackDecodeTestBase {
+//
+//  public HpackDecodeInteropTest(Story story) {
+//    super(story);
+//  }
+//
+//  @Parameterized.Parameters(name = "{0}")
+//  public static Collection<Story[]> createStories() throws Exception {
+//    return createStories(storiesForCurrentDraft());
+//  }
+//
+//  @Test
+//  public void testGoodDecoderInterop() throws Exception {
+//    Assume.assumeFalse("Test stories missing, checkout git submodule", getStory() == Story.MISSING);
+//
+//    testDecoder();
+//  }
+//}
diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java
index 068aa26fd4..763822dce9 100644
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/HpackDecodeTestBase.java
@@ -1,95 +1,95 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.http2;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.LinkedHashSet;
-import java.util.List;
-import okhttp3.internal.http2.hpackjson.Case;
-import okhttp3.internal.http2.hpackjson.HpackJsonUtil;
-import okhttp3.internal.http2.hpackjson.Story;
-import okio.Buffer;
-
-import static okhttp3.internal.http2.hpackjson.Story.MISSING;
-import static org.assertj.core.api.Assertions.assertThat;
-
-/**
- * Tests Hpack implementation using https://github.com/http2jp/hpack-test-case/
- */
-public class HpackDecodeTestBase {
-
-  /**
-   * Reads all stories in the folders provided, asserts if no story found.
-   */
-  protected static Collection<Story[]> createStories(String[] interopTests)
-      throws Exception {
-    if (interopTests.length == 0) {
-      return Collections.singletonList(new Story[] {MISSING});
-    }
-
-    List<Story[]> result = new ArrayList<>();
-    for (String interopTestName : interopTests) {
-      List<Story> stories = HpackJsonUtil.readStories(interopTestName);
-      for (Story story : stories) {
-        result.add(new Story[] {story});
-      }
-    }
-    return result;
-  }
-
-  private final Buffer bytesIn = new Buffer();
-  private final Hpack.Reader hpackReader = new Hpack.Reader(bytesIn, 4096);
-
-  private final Story story;
-
-  public HpackDecodeTestBase(Story story) {
-    this.story = story;
-  }
-
-  /**
-   * Expects wire to be set for all cases, and compares the decoder's output to expected headers.
-   */
-  protected void testDecoder() throws Exception {
-    testDecoder(story);
-  }
-
-  protected void testDecoder(Story story) throws Exception {
-    for (Case testCase : story.getCases()) {
-      bytesIn.write(testCase.getWire());
-      hpackReader.readHeaders();
-      assertSetEquals(String.format("seqno=%d", testCase.getSeqno()), testCase.getHeaders(),
-          hpackReader.getAndResetHeaderList());
-    }
-  }
-
-  /**
-   * Checks if {@code expected} and {@code observed} are equal when viewed as a set and headers are
-   * deduped.
-   *
-   * TODO: See if duped headers should be preserved on decode and verify.
-   */
-  private static void assertSetEquals(
-      String message, List<Header> expected, List<Header> observed) {
-    assertThat(new LinkedHashSet<>(observed)).overridingErrorMessage(message).isEqualTo(
-        new LinkedHashSet<>(expected));
-  }
-
-  protected Story getStory() {
-    return story;
-  }
-}
+///*
+// * Copyright (C) 2014 Square, Inc.
+// *
+// * Licensed under the Apache License, Version 2.0 (the "License");
+// * you may not use this file except in compliance with the License.
+// * You may obtain a copy of the License at
+// *
+// *      http://www.apache.org/licenses/LICENSE-2.0
+// *
+// * Unless required by applicable law or agreed to in writing, software
+// * distributed under the License is distributed on an "AS IS" BASIS,
+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// * See the License for the specific language governing permissions and
+// * limitations under the License.
+// */
+//package okhttp3.internal.http2;
+//
+//import java.util.ArrayList;
+//import java.util.Collection;
+//import java.util.Collections;
+//import java.util.LinkedHashSet;
+//import java.util.List;
+//import okhttp3.internal.http2.hpackjson.Case;
+//import okhttp3.internal.http2.hpackjson.HpackJsonUtil;
+//import okhttp3.internal.http2.hpackjson.Story;
+//import okio.Buffer;
+//
+//import static okhttp3.internal.http2.hpackjson.Story.MISSING;
+//import static org.assertj.core.api.Assertions.assertThat;
+//
+///**
+// * Tests Hpack implementation using https://github.com/http2jp/hpack-test-case/
+// */
+//public class HpackDecodeTestBase {
+//
+//  /**
+//   * Reads all stories in the folders provided, asserts if no story found.
+//   */
+//  protected static Collection<Story[]> createStories(String[] interopTests)
+//      throws Exception {
+//    if (interopTests.length == 0) {
+//      return Collections.singletonList(new Story[] {MISSING});
+//    }
+//
+//    List<Story[]> result = new ArrayList<>();
+//    for (String interopTestName : interopTests) {
+//      List<Story> stories = HpackJsonUtil.readStories(interopTestName);
+//      for (Story story : stories) {
+//        result.add(new Story[] {story});
+//      }
+//    }
+//    return result;
+//  }
+//
+//  private final Buffer bytesIn = new Buffer();
+//  private final Hpack.Reader hpackReader = new Hpack.Reader(bytesIn, 4096);
+//
+//  private final Story story;
+//
+//  public HpackDecodeTestBase(Story story) {
+//    this.story = story;
+//  }
+//
+//  /**
+//   * Expects wire to be set for all cases, and compares the decoder's output to expected headers.
+//   */
+//  protected void testDecoder() throws Exception {
+//    testDecoder(story);
+//  }
+//
+//  protected void testDecoder(Story story) throws Exception {
+//    for (Case testCase : story.getCases()) {
+//      bytesIn.write(testCase.getWire());
+//      hpackReader.readHeaders();
+//      assertSetEquals(String.format("seqno=%d", testCase.getSeqno()), testCase.getHeaders(),
+//          hpackReader.getAndResetHeaderList());
+//    }
+//  }
+//
+//  /**
+//   * Checks if {@code expected} and {@code observed} are equal when viewed as a set and headers are
+//   * deduped.
+//   *
+//   * TODO: See if duped headers should be preserved on decode and verify.
+//   */
+//  private static void assertSetEquals(
+//      String message, List<Header> expected, List<Header> observed) {
+//    assertThat(new LinkedHashSet<>(observed)).overridingErrorMessage(message).isEqualTo(
+//        new LinkedHashSet<>(expected));
+//  }
+//
+//  protected Story getStory() {
+//    return story;
+//  }
+//}
diff --git a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java
index acd31af3cc..83c6d12462 100644
--- a/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java
+++ b/okhttp-hpacktests/src/test/java/okhttp3/internal/http2/hpackjson/HpackJsonUtil.java
@@ -1,108 +1,108 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.internal.http2.hpackjson;
-
-import com.squareup.moshi.JsonAdapter;
-import com.squareup.moshi.Moshi;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import okio.Okio;
-
-import static java.util.Arrays.asList;
-import static okhttp3.internal.http2.hpackjson.Story.MISSING;
-
-/**
- * Utilities for reading HPACK tests.
- */
-public final class HpackJsonUtil {
-  /** Earliest draft that is code-compatible with latest. */
-  private static final int BASE_DRAFT = 9;
-
-//  private static final String STORY_RESOURCE_FORMAT = "/hpack-test-case/%s/story_%02d.json";
-
-  private static final Moshi MOSHI = new Moshi.Builder().build();
-  private static final JsonAdapter<Story> STORY_JSON_ADAPTER = MOSHI.adapter(Story.class);
-
-  private static Story readStory(InputStream jsonResource) throws IOException {
-    return STORY_JSON_ADAPTER.fromJson(Okio.buffer(Okio.source(jsonResource)));
-  }
-
-  private static Story readStory(File file) throws IOException {
-    return STORY_JSON_ADAPTER.fromJson(Okio.buffer(Okio.source(file)));
-  }
-
-  /** Iterate through the hpack-test-case resources, only picking stories for the current draft. */
-  public static String[] storiesForCurrentDraft() throws URISyntaxException {
-    URL resource = null;// HpackJsonUtil.class.getResource("/hpack-test-case");
-    if (resource == null) {
-      return new String[0];
-    }
-    File testCaseDirectory = new File(resource.toURI());
-    List<String> storyNames = new ArrayList<>();
-    for (File path : testCaseDirectory.listFiles()) {
-      if (path.isDirectory() && asList(path.list()).contains("story_00.json")) {
-        try {
-          Story firstStory = readStory(new File(path, "story_00.json"));
-          if (firstStory.getDraft() >= BASE_DRAFT) {
-            storyNames.add(path.getName());
-          }
-        } catch (IOException ignored) {
-          // Skip this path.
-        }
-      }
-    }
-    return storyNames.toArray(new String[storyNames.size()]);
-  }
-
-  /**
-   * Reads stories named "story_xx.json" from the folder provided.
-   */
-  public static List<Story> readStories(String testFolderName) throws Exception {
-    List<Story> result = new ArrayList<>();
-    int i = 0;
-    while (true) { // break after last test.
-//      String storyResourceName = String.format(STORY_RESOURCE_FORMAT, testFolderName, i);
-      InputStream storyInputStream = null;//HpackJsonUtil.class.getResourceAsStream(storyResourceName);
-      if (storyInputStream == null) {
-        break;
-      }
-//      try {
-//        Story story = readStory(storyInputStream);
-//        story.setFileName(storyResourceName);
-//        result.add(story);
-//        i++;
-//      } finally {
-//        storyInputStream.close();
+///*
+// * Copyright (C) 2014 Square, Inc.
+// *
+// * Licensed under the Apache License, Version 2.0 (the "License");
+// * you may not use this file except in compliance with the License.
+// * You may obtain a copy of the License at
+// *
+// *      http://www.apache.org/licenses/LICENSE-2.0
+// *
+// * Unless required by applicable law or agreed to in writing, software
+// * distributed under the License is distributed on an "AS IS" BASIS,
+// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// * See the License for the specific language governing permissions and
+// * limitations under the License.
+// */
+//package okhttp3.internal.http2.hpackjson;
+//
+//import com.squareup.moshi.JsonAdapter;
+//import com.squareup.moshi.Moshi;
+//import java.io.File;
+//import java.io.IOException;
+//import java.io.InputStream;
+//import java.net.URISyntaxException;
+//import java.net.URL;
+//import java.util.ArrayList;
+//import java.util.Collections;
+//import java.util.List;
+//import okio.Okio;
+//
+//import static java.util.Arrays.asList;
+//import static okhttp3.internal.http2.hpackjson.Story.MISSING;
+//
+///**
+// * Utilities for reading HPACK tests.
+// */
+//public final class HpackJsonUtil {
+//  /** Earliest draft that is code-compatible with latest. */
+//  private static final int BASE_DRAFT = 9;
+//
+////  private static final String STORY_RESOURCE_FORMAT = "/hpack-test-case/%s/story_%02d.json";
+//
+//  private static final Moshi MOSHI = new Moshi.Builder().build();
+//  private static final JsonAdapter<Story> STORY_JSON_ADAPTER = MOSHI.adapter(Story.class);
+//
+//  private static Story readStory(InputStream jsonResource) throws IOException {
+//    return STORY_JSON_ADAPTER.fromJson(Okio.buffer(Okio.source(jsonResource)));
+//  }
+//
+//  private static Story readStory(File file) throws IOException {
+//    return STORY_JSON_ADAPTER.fromJson(Okio.buffer(Okio.source(file)));
+//  }
+//
+//  /** Iterate through the hpack-test-case resources, only picking stories for the current draft. */
+//  public static String[] storiesForCurrentDraft() throws URISyntaxException {
+//    URL resource = null;// HpackJsonUtil.class.getResource("/hpack-test-case");
+//    if (resource == null) {
+//      return new String[0];
+//    }
+//    File testCaseDirectory = new File(resource.toURI());
+//    List<String> storyNames = new ArrayList<>();
+//    for (File path : testCaseDirectory.listFiles()) {
+//      if (path.isDirectory() && asList(path.list()).contains("story_00.json")) {
+//        try {
+//          Story firstStory = readStory(new File(path, "story_00.json"));
+//          if (firstStory.getDraft() >= BASE_DRAFT) {
+//            storyNames.add(path.getName());
+//          }
+//        } catch (IOException ignored) {
+//          // Skip this path.
+//        }
 //      }
-    }
-
-    if (result.isEmpty()) {
-      // missing files
-      return Collections.singletonList(MISSING);
-    }
-
-    return result;
-  }
-
-  private HpackJsonUtil() {
-  } // Utilities only.
-}
+//    }
+//    return storyNames.toArray(new String[storyNames.size()]);
+//  }
+//
+//  /**
+//   * Reads stories named "story_xx.json" from the folder provided.
+//   */
+//  public static List<Story> readStories(String testFolderName) throws Exception {
+//    List<Story> result = new ArrayList<>();
+//    int i = 0;
+//    while (true) { // break after last test.
+////      String storyResourceName = String.format(STORY_RESOURCE_FORMAT, testFolderName, i);
+//      InputStream storyInputStream = null;//HpackJsonUtil.class.getResourceAsStream(storyResourceName);
+//      if (storyInputStream == null) {
+//        break;
+//      }
+////      try {
+////        Story story = readStory(storyInputStream);
+////        story.setFileName(storyResourceName);
+////        result.add(story);
+////        i++;
+////      } finally {
+////        storyInputStream.close();
+////      }
+//    }
+//
+//    if (result.isEmpty()) {
+//      // missing files
+//      return Collections.singletonList(MISSING);
+//    }
+//
+//    return result;
+//  }
+//
+//  private HpackJsonUtil() {
+//  } // Utilities only.
+//}
